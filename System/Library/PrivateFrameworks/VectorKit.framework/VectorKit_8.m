void sub_19F303FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32)
{
  void *v32;

  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](&a19);
  std::__tree<VKTrafficIncidentFeature * {__strong},VKTrafficIncidentFeatureSetLessThan,geo::StdAllocator<VKTrafficIncidentFeature * {__strong},mdm::Allocator>>::destroy((uint64_t)&a31, a32);

  _Unwind_Resume(a1);
}

uint64_t std::__tree<VKTrafficIncidentFeature * {__strong},VKTrafficIncidentFeatureSetLessThan,geo::StdAllocator<VKTrafficIncidentFeature * {__strong},mdm::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    std::__tree<VKTrafficIncidentFeature * {__strong},VKTrafficIncidentFeatureSetLessThan,geo::StdAllocator<VKTrafficIncidentFeature * {__strong},mdm::Allocator>>::destroy(result, *(_QWORD *)a2);
    std::__tree<VKTrafficIncidentFeature * {__strong},VKTrafficIncidentFeatureSetLessThan,geo::StdAllocator<VKTrafficIncidentFeature * {__strong},mdm::Allocator>>::destroy(v3, *(_QWORD *)(a2 + 8));

    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 40);
  }
  return result;
}

uint64_t md::CompositeLabeler::addLabeler(uint64_t this, md::Labeler *a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v3 = this;
  v4 = *(_QWORD **)(this + 16);
  v5 = *(_QWORD *)(this + 24);
  if ((unint64_t)v4 < v5)
  {
    if (v4)
      *v4 = a2;
    v6 = v4 + 1;
    goto LABEL_27;
  }
  v7 = *(_QWORD *)(this + 8);
  v8 = ((uint64_t)v4 - v7) >> 3;
  v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) >> 61)
    abort();
  v10 = v5 - v7;
  if (v10 >> 2 > v9)
    v9 = v10 >> 2;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  if (v9)
  {
    v11 = 8 * v9;
    this = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(this + 32) + 16))(*(_QWORD *)(this + 32), 8 * v9, 8);
    v12 = (_QWORD *)(this + 8 * v8);
    v9 = this + v11;
    if (this)
      *v12 = a2;
  }
  else
  {
    v12 = (_QWORD *)(8 * v8);
  }
  v6 = v12 + 1;
  v14 = *(_QWORD *)(v3 + 8);
  v13 = *(_QWORD *)(v3 + 16);
  if (v13 != v14)
  {
    v15 = v13 - v14 - 8;
    if (v15 < 0x38)
    {
      v17 = *(_QWORD *)(v3 + 16);
    }
    else if ((unint64_t)(v13 - (_QWORD)v12) < 0x20)
    {
      v17 = *(_QWORD *)(v3 + 16);
    }
    else
    {
      v16 = (v15 >> 3) + 1;
      v17 = v13 - 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
      v18 = v12 - 2;
      v19 = (__int128 *)(v13 - 16);
      v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v21 = *v19;
        *(v18 - 1) = *(v19 - 1);
        *v18 = v21;
        v18 -= 2;
        v19 -= 2;
        v20 -= 4;
      }
      while (v20);
      v12 -= v16 & 0x3FFFFFFFFFFFFFFCLL;
      if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_24;
    }
    do
    {
      v22 = *(_QWORD *)(v17 - 8);
      v17 -= 8;
      *--v12 = v22;
    }
    while (v17 != v14);
LABEL_24:
    v13 = *(_QWORD *)(v3 + 8);
  }
  *(_QWORD *)(v3 + 8) = v12;
  *(_QWORD *)(v3 + 16) = v6;
  v23 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = v9;
  if (v13)
    this = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 32) + 40))(*(_QWORD *)(v3 + 32), v13, v23 - v13);
LABEL_27:
  *(_QWORD *)(v3 + 16) = v6;
  return this;
}

md::StandardLabeler *md::StandardLabeler::StandardLabeler(md::StandardLabeler *this, md::LabelManager *a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  __int128 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  geo::read_write_lock *v43;
  const char *v44;
  malloc_zone_t *zone;
  uint64_t v46;
  geo::read_write_lock *v47;
  const char *v48;
  malloc_zone_t *v49;
  uint64_t v50;
  geo::read_write_lock *v51;
  const char *v52;
  malloc_zone_t *v53;
  uint64_t v54;
  geo::read_write_lock *v55;
  const char *v56;
  malloc_zone_t *v57;
  uint64_t v58;
  geo::read_write_lock *v59;
  const char *v60;
  malloc_zone_t *v61;
  uint64_t v62;
  geo::read_write_lock *v63;
  const char *v64;
  malloc_zone_t *v65;
  uint64_t v66;
  geo::read_write_lock *v67;
  const char *v68;
  malloc_zone_t *v69;
  int v70;
  uint64_t v71;
  geo::read_write_lock *v72;
  const char *v73;
  malloc_zone_t *v74;
  int v75;
  uint64_t v76;
  geo::read_write_lock *v77;
  const char *v78;
  malloc_zone_t *v79;
  int v80;
  uint64_t v81;
  geo::read_write_lock *v82;
  const char *v83;
  malloc_zone_t *v84;
  int v85;
  uint64_t v86;
  geo::read_write_lock *v87;
  const char *v88;
  malloc_zone_t *v89;
  int v90;
  uint64_t v91;
  geo::read_write_lock *v92;
  const char *v93;
  malloc_zone_t *v94;
  int v95;
  uint64_t v96;
  geo::read_write_lock *v97;
  const char *v98;
  malloc_zone_t *v99;
  int v100;
  uint64_t v101;
  geo::read_write_lock *v102;
  const char *v103;
  malloc_zone_t *v104;
  int v105;
  uint64_t v106;
  geo::read_write_lock *v107;
  const char *v108;
  malloc_zone_t *v109;
  int v110;
  uint64_t v111;
  geo::read_write_lock *v112;
  const char *v113;
  malloc_zone_t *v114;
  int v115;
  uint64_t v116;
  geo::read_write_lock *v117;
  const char *v118;
  malloc_zone_t *v119;
  int v120;
  uint64_t v121;
  geo::read_write_lock *v122;
  const char *v123;
  malloc_zone_t *v124;
  int v125;
  uint64_t v126;
  geo::read_write_lock *v127;
  const char *v128;
  malloc_zone_t *v129;
  int v130;
  uint64_t v131;
  geo::read_write_lock *v132;
  const char *v133;
  malloc_zone_t *v134;
  int v135;
  uint64_t v136;
  geo::read_write_lock *v137;
  const char *v138;
  malloc_zone_t *v139;
  int v140;
  uint64_t v141;
  geo::read_write_lock *v142;
  const char *v143;
  malloc_zone_t *v144;
  int v145;
  uint64_t v146;
  geo::read_write_lock *v147;
  const char *v148;
  malloc_zone_t *v149;
  int v150;
  uint64_t v151;
  geo::read_write_lock *v152;
  const char *v153;
  malloc_zone_t *v154;
  uint64_t v155;
  geo::read_write_lock *v156;
  const char *v157;
  malloc_zone_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  char *v180;
  md::LabelsStateObserver *v181;

  *((_QWORD *)this + 1) = &unk_1E4290EA0;
  v181 = (md::StandardLabeler *)((char *)this + 8);
  *((_QWORD *)this + 2) = &unk_1E4290EE8;
  v180 = (char *)this + 16;
  *(_QWORD *)this = &off_1E4290CC0;
  *((_QWORD *)this + 3) = a2;
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = &unk_1E42A1F48;
  *(_QWORD *)v4 = off_1E42A1F08;
  *(_QWORD *)(v4 + 16) = a2;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_QWORD *)(v4 + 56) = 0;
  {
    v42 = operator new();
    *(_QWORD *)(v42 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v42 + 24) = "VectorKitLabels";
    *(_OWORD *)(v42 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v42 = &off_1E42B5668;
    *(_QWORD *)(v42 + 8) = "VectorKitLabels";
    *(_OWORD *)(v42 + 72) = 0u;
    *(_OWORD *)(v42 + 88) = 0u;
    *(_OWORD *)(v42 + 104) = 0u;
    *(_OWORD *)(v42 + 120) = 0u;
    *(_OWORD *)(v42 + 136) = 0u;
    *(_OWORD *)(v42 + 152) = 0u;
    *(_OWORD *)(v42 + 168) = 0u;
    *(_OWORD *)(v42 + 184) = 0u;
    *(_OWORD *)(v42 + 200) = 0u;
    *(_OWORD *)(v42 + 216) = 0u;
    *(_OWORD *)(v42 + 232) = 0u;
    *(_QWORD *)(v42 + 248) = 0;
    *(_OWORD *)(v42 + 56) = 0u;
    v43 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v42 + 56), 0);
    if ((_DWORD)v43)
      geo::read_write_lock::logFailure(v43, (uint64_t)"initialization", v44);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v42 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v42 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v42;
  }
  v6 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 64) = v6;
  {
    v46 = operator new();
    *(_QWORD *)(v46 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v46 + 24) = "VectorKitLabels";
    *(_OWORD *)(v46 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v46 = &off_1E42B5668;
    *(_QWORD *)(v46 + 8) = "VectorKitLabels";
    *(_OWORD *)(v46 + 72) = 0u;
    *(_OWORD *)(v46 + 88) = 0u;
    *(_OWORD *)(v46 + 104) = 0u;
    *(_OWORD *)(v46 + 120) = 0u;
    *(_OWORD *)(v46 + 136) = 0u;
    *(_OWORD *)(v46 + 152) = 0u;
    *(_OWORD *)(v46 + 168) = 0u;
    *(_OWORD *)(v46 + 184) = 0u;
    *(_OWORD *)(v46 + 200) = 0u;
    *(_OWORD *)(v46 + 216) = 0u;
    *(_OWORD *)(v46 + 232) = 0u;
    *(_QWORD *)(v46 + 248) = 0;
    *(_OWORD *)(v46 + 56) = 0u;
    v47 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v46 + 56), 0);
    if ((_DWORD)v47)
      geo::read_write_lock::logFailure(v47, (uint64_t)"initialization", v48);
    v49 = malloc_create_zone(0, 0);
    *(_QWORD *)(v46 + 48) = v49;
    malloc_set_zone_name(v49, "VectorKitLabels");
    *(_QWORD *)(v46 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v46;
  }
  v7 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 88) = v7;
  *(_QWORD *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 72) = v4 + 80;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 120) = 0;
  {
    v50 = operator new();
    *(_QWORD *)(v50 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v50 + 24) = "VectorKitLabels";
    *(_OWORD *)(v50 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v50 = &off_1E42B5668;
    *(_QWORD *)(v50 + 8) = "VectorKitLabels";
    *(_OWORD *)(v50 + 72) = 0u;
    *(_OWORD *)(v50 + 88) = 0u;
    *(_OWORD *)(v50 + 104) = 0u;
    *(_OWORD *)(v50 + 120) = 0u;
    *(_OWORD *)(v50 + 136) = 0u;
    *(_OWORD *)(v50 + 152) = 0u;
    *(_OWORD *)(v50 + 168) = 0u;
    *(_OWORD *)(v50 + 184) = 0u;
    *(_OWORD *)(v50 + 200) = 0u;
    *(_OWORD *)(v50 + 216) = 0u;
    *(_OWORD *)(v50 + 232) = 0u;
    *(_QWORD *)(v50 + 248) = 0;
    *(_OWORD *)(v50 + 56) = 0u;
    v51 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v50 + 56), 0);
    if ((_DWORD)v51)
      geo::read_write_lock::logFailure(v51, (uint64_t)"initialization", v52);
    v53 = malloc_create_zone(0, 0);
    *(_QWORD *)(v50 + 48) = v53;
    malloc_set_zone_name(v53, "VectorKitLabels");
    *(_QWORD *)(v50 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v50;
  }
  v8 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v4 + 136) = 0;
  *(_QWORD *)(v4 + 128) = v8;
  *(_QWORD *)(v4 + 144) = 0;
  *(_QWORD *)(v4 + 152) = 0;
  {
    v54 = operator new();
    *(_QWORD *)(v54 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v54 + 24) = "VectorKitLabels";
    *(_OWORD *)(v54 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v54 = &off_1E42B5668;
    *(_QWORD *)(v54 + 8) = "VectorKitLabels";
    *(_OWORD *)(v54 + 72) = 0u;
    *(_OWORD *)(v54 + 88) = 0u;
    *(_OWORD *)(v54 + 104) = 0u;
    *(_OWORD *)(v54 + 120) = 0u;
    *(_OWORD *)(v54 + 136) = 0u;
    *(_OWORD *)(v54 + 152) = 0u;
    *(_OWORD *)(v54 + 168) = 0u;
    *(_OWORD *)(v54 + 184) = 0u;
    *(_OWORD *)(v54 + 200) = 0u;
    *(_OWORD *)(v54 + 216) = 0u;
    *(_OWORD *)(v54 + 232) = 0u;
    *(_QWORD *)(v54 + 248) = 0;
    *(_OWORD *)(v54 + 56) = 0u;
    v55 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v54 + 56), 0);
    if ((_DWORD)v55)
      geo::read_write_lock::logFailure(v55, (uint64_t)"initialization", v56);
    v57 = malloc_create_zone(0, 0);
    *(_QWORD *)(v54 + 48) = v57;
    malloc_set_zone_name(v57, "VectorKitLabels");
    *(_QWORD *)(v54 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v54;
  }
  v9 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v4 + 168) = 0;
  *(_QWORD *)(v4 + 160) = v9;
  *(_QWORD *)(v4 + 176) = 0;
  {
    v58 = operator new();
    *(_QWORD *)(v58 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v58 + 24) = "VectorKitLabels";
    *(_OWORD *)(v58 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v58 = &off_1E42B5668;
    *(_QWORD *)(v58 + 8) = "VectorKitLabels";
    *(_OWORD *)(v58 + 72) = 0u;
    *(_OWORD *)(v58 + 88) = 0u;
    *(_OWORD *)(v58 + 104) = 0u;
    *(_OWORD *)(v58 + 120) = 0u;
    *(_OWORD *)(v58 + 136) = 0u;
    *(_OWORD *)(v58 + 152) = 0u;
    *(_OWORD *)(v58 + 168) = 0u;
    *(_OWORD *)(v58 + 184) = 0u;
    *(_OWORD *)(v58 + 200) = 0u;
    *(_OWORD *)(v58 + 216) = 0u;
    *(_OWORD *)(v58 + 232) = 0u;
    *(_QWORD *)(v58 + 248) = 0;
    v161 = v58;
    *(_OWORD *)(v58 + 56) = 0u;
    v59 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v58 + 56), 0);
    if ((_DWORD)v59)
      geo::read_write_lock::logFailure(v59, (uint64_t)"initialization", v60);
    v61 = malloc_create_zone(0, 0);
    *(_QWORD *)(v161 + 48) = v61;
    malloc_set_zone_name(v61, "VectorKitLabels");
    *(_QWORD *)(v161 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v161;
  }
  *(_QWORD *)(v4 + 184) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v4 + 192) = 0;
  {
    v62 = operator new();
    *(_QWORD *)(v62 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v62 + 24) = "VectorKitLabels";
    *(_OWORD *)(v62 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v62 = &off_1E42B5668;
    *(_QWORD *)(v62 + 8) = "VectorKitLabels";
    *(_OWORD *)(v62 + 72) = 0u;
    *(_OWORD *)(v62 + 88) = 0u;
    *(_OWORD *)(v62 + 104) = 0u;
    *(_OWORD *)(v62 + 120) = 0u;
    *(_OWORD *)(v62 + 136) = 0u;
    *(_OWORD *)(v62 + 152) = 0u;
    *(_OWORD *)(v62 + 168) = 0u;
    *(_OWORD *)(v62 + 184) = 0u;
    *(_OWORD *)(v62 + 200) = 0u;
    *(_OWORD *)(v62 + 216) = 0u;
    *(_OWORD *)(v62 + 232) = 0u;
    *(_QWORD *)(v62 + 248) = 0;
    v162 = v62;
    *(_OWORD *)(v62 + 56) = 0u;
    v63 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v62 + 56), 0);
    if ((_DWORD)v63)
      geo::read_write_lock::logFailure(v63, (uint64_t)"initialization", v64);
    v65 = malloc_create_zone(0, 0);
    *(_QWORD *)(v162 + 48) = v65;
    malloc_set_zone_name(v65, "VectorKitLabels");
    *(_QWORD *)(v162 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v162;
  }
  *(_QWORD *)(v4 + 200) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v4 + 208) = 0;
  *(_DWORD *)(v4 + 216) = 1065353216;
  *(_QWORD *)(v4 + 224) = 0;
  *(_BYTE *)(v4 + 232) = 0;
  md::LabelsState::addObserver(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 168), (md::LabelsStateObserver *)(v4 + 8));
  v11 = operator new(0x60uLL);
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_1E42DBF60;
  v11[3] = 850045863;
  *((_OWORD *)v11 + 2) = 0u;
  *((_OWORD *)v11 + 3) = 0u;
  *((_OWORD *)v11 + 4) = 0u;
  v11[10] = 0;
  v11[11] = v4;
  v12 = *(std::__shared_weak_count **)(v4 + 32);
  *(_QWORD *)(v4 + 24) = v11 + 3;
  *(_QWORD *)(v4 + 32) = v11;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *((_QWORD *)this + 4) = v4;
  v15 = operator new();
  *(_QWORD *)v15 = a2;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  {
    v66 = operator new();
    *(_QWORD *)(v66 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v66 + 24) = "VectorKitLabels";
    *(_OWORD *)(v66 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v66 = &off_1E42B5668;
    *(_QWORD *)(v66 + 8) = "VectorKitLabels";
    *(_OWORD *)(v66 + 72) = 0u;
    *(_OWORD *)(v66 + 88) = 0u;
    *(_OWORD *)(v66 + 104) = 0u;
    *(_OWORD *)(v66 + 120) = 0u;
    *(_OWORD *)(v66 + 136) = 0u;
    *(_OWORD *)(v66 + 152) = 0u;
    *(_OWORD *)(v66 + 168) = 0u;
    *(_OWORD *)(v66 + 184) = 0u;
    *(_OWORD *)(v66 + 200) = 0u;
    *(_OWORD *)(v66 + 216) = 0u;
    *(_OWORD *)(v66 + 232) = 0u;
    *(_QWORD *)(v66 + 248) = 0;
    *(_OWORD *)(v66 + 56) = 0u;
    v67 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v66 + 56), 0);
    if ((_DWORD)v67)
      geo::read_write_lock::logFailure(v67, (uint64_t)"initialization", v68);
    v69 = malloc_create_zone(0, 0);
    *(_QWORD *)(v66 + 48) = v69;
    malloc_set_zone_name(v69, "VectorKitLabels");
    *(_QWORD *)(v66 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v66;
  }
  *(_QWORD *)(v15 + 32) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v15 + 40) = 0;
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 56) = 0;
  *(_QWORD *)(v15 + 80) = 0;
  *(_QWORD *)(v15 + 72) = 0;
  *(_QWORD *)(v15 + 64) = v15 + 72;
  *(_BYTE *)(v15 + 88) = 0;
  *((_QWORD *)this + 5) = v15;
  v17 = operator new();
  v18 = *((_OWORD *)this + 2);
  *(_QWORD *)v17 = 1000;
  *(_QWORD *)(v17 + 8) = a2;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  if ((v19 & 1) == 0)
  {
    v163 = v18;
    v18 = v163;
    if (v70)
    {
      v71 = operator new();
      *(_QWORD *)(v71 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v71 + 24) = "VectorKitLabels";
      *(_OWORD *)(v71 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v71 = &off_1E42B5668;
      *(_QWORD *)(v71 + 8) = "VectorKitLabels";
      *(_OWORD *)(v71 + 72) = 0u;
      *(_OWORD *)(v71 + 88) = 0u;
      *(_OWORD *)(v71 + 104) = 0u;
      *(_OWORD *)(v71 + 120) = 0u;
      *(_OWORD *)(v71 + 136) = 0u;
      *(_OWORD *)(v71 + 152) = 0u;
      *(_OWORD *)(v71 + 168) = 0u;
      *(_OWORD *)(v71 + 184) = 0u;
      *(_OWORD *)(v71 + 200) = 0u;
      *(_OWORD *)(v71 + 216) = 0u;
      *(_OWORD *)(v71 + 232) = 0u;
      *(_QWORD *)(v71 + 248) = 0;
      *(_OWORD *)(v71 + 56) = 0u;
      v72 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v71 + 56), 0);
      if ((_DWORD)v72)
        geo::read_write_lock::logFailure(v72, (uint64_t)"initialization", v73);
      v74 = malloc_create_zone(0, 0);
      *(_QWORD *)(v71 + 48) = v74;
      malloc_set_zone_name(v74, "VectorKitLabels");
      *(_QWORD *)(v71 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v71;
      v18 = v163;
    }
  }
  *(_QWORD *)(v17 + 40) = mdm::Allocator::instance(void)::alloc;
  *(int64x2_t *)(v17 + 48) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(v17 + 64) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_QWORD *)(v17 + 80) = 0;
  *(_QWORD *)(v17 + 88) = 0;
  if ((v20 & 1) == 0)
  {
    v164 = v18;
    v18 = v164;
    if (v75)
    {
      v76 = operator new();
      *(_QWORD *)(v76 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v76 + 24) = "VectorKitLabels";
      *(_OWORD *)(v76 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v76 = &off_1E42B5668;
      *(_QWORD *)(v76 + 8) = "VectorKitLabels";
      *(_OWORD *)(v76 + 72) = 0u;
      *(_OWORD *)(v76 + 88) = 0u;
      *(_OWORD *)(v76 + 104) = 0u;
      *(_OWORD *)(v76 + 120) = 0u;
      *(_OWORD *)(v76 + 136) = 0u;
      *(_OWORD *)(v76 + 152) = 0u;
      *(_OWORD *)(v76 + 168) = 0u;
      *(_OWORD *)(v76 + 184) = 0u;
      *(_OWORD *)(v76 + 200) = 0u;
      *(_OWORD *)(v76 + 216) = 0u;
      *(_OWORD *)(v76 + 232) = 0u;
      *(_QWORD *)(v76 + 248) = 0;
      *(_OWORD *)(v76 + 56) = 0u;
      v77 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v76 + 56), 0);
      if ((_DWORD)v77)
        geo::read_write_lock::logFailure(v77, (uint64_t)"initialization", v78);
      v79 = malloc_create_zone(0, 0);
      *(_QWORD *)(v76 + 48) = v79;
      malloc_set_zone_name(v79, "VectorKitLabels");
      *(_QWORD *)(v76 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v76;
      v18 = v164;
    }
  }
  *(_QWORD *)(v17 + 96) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v17 + 104) = 0;
  if ((v21 & 1) == 0)
  {
    v165 = v18;
    v18 = v165;
    if (v80)
    {
      v81 = operator new();
      *(_QWORD *)(v81 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v81 + 24) = "VectorKitLabels";
      *(_OWORD *)(v81 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v81 = &off_1E42B5668;
      *(_QWORD *)(v81 + 8) = "VectorKitLabels";
      *(_OWORD *)(v81 + 72) = 0u;
      *(_OWORD *)(v81 + 88) = 0u;
      *(_OWORD *)(v81 + 104) = 0u;
      *(_OWORD *)(v81 + 120) = 0u;
      *(_OWORD *)(v81 + 136) = 0u;
      *(_OWORD *)(v81 + 152) = 0u;
      *(_OWORD *)(v81 + 168) = 0u;
      *(_OWORD *)(v81 + 184) = 0u;
      *(_OWORD *)(v81 + 200) = 0u;
      *(_OWORD *)(v81 + 216) = 0u;
      *(_OWORD *)(v81 + 232) = 0u;
      *(_QWORD *)(v81 + 248) = 0;
      *(_OWORD *)(v81 + 56) = 0u;
      v82 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v81 + 56), 0);
      if ((_DWORD)v82)
        geo::read_write_lock::logFailure(v82, (uint64_t)"initialization", v83);
      v84 = malloc_create_zone(0, 0);
      *(_QWORD *)(v81 + 48) = v84;
      malloc_set_zone_name(v84, "VectorKitLabels");
      *(_QWORD *)(v81 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v81;
      v18 = v165;
    }
  }
  *(_QWORD *)(v17 + 112) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v17 + 120) = 0;
  *(_DWORD *)(v17 + 128) = 1065353216;
  *(_QWORD *)(v17 + 136) = 0;
  *(_QWORD *)(v17 + 144) = 0;
  if ((v22 & 1) == 0)
  {
    v166 = v18;
    v18 = v166;
    if (v85)
    {
      v86 = operator new();
      *(_QWORD *)(v86 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v86 + 24) = "VectorKitLabels";
      *(_OWORD *)(v86 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v86 = &off_1E42B5668;
      *(_QWORD *)(v86 + 8) = "VectorKitLabels";
      *(_OWORD *)(v86 + 72) = 0u;
      *(_OWORD *)(v86 + 88) = 0u;
      *(_OWORD *)(v86 + 104) = 0u;
      *(_OWORD *)(v86 + 120) = 0u;
      *(_OWORD *)(v86 + 136) = 0u;
      *(_OWORD *)(v86 + 152) = 0u;
      *(_OWORD *)(v86 + 168) = 0u;
      *(_OWORD *)(v86 + 184) = 0u;
      *(_OWORD *)(v86 + 200) = 0u;
      *(_OWORD *)(v86 + 216) = 0u;
      *(_OWORD *)(v86 + 232) = 0u;
      *(_QWORD *)(v86 + 248) = 0;
      *(_OWORD *)(v86 + 56) = 0u;
      v87 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v86 + 56), 0);
      if ((_DWORD)v87)
        geo::read_write_lock::logFailure(v87, (uint64_t)"initialization", v88);
      v89 = malloc_create_zone(0, 0);
      *(_QWORD *)(v86 + 48) = v89;
      malloc_set_zone_name(v89, "VectorKitLabels");
      *(_QWORD *)(v86 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v86;
      v18 = v166;
    }
  }
  *(_QWORD *)(v17 + 152) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v17 + 160) = 0;
  if ((v23 & 1) == 0)
  {
    v167 = v18;
    v18 = v167;
    if (v90)
    {
      v91 = operator new();
      *(_QWORD *)(v91 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v91 + 24) = "VectorKitLabels";
      *(_OWORD *)(v91 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v91 = &off_1E42B5668;
      *(_QWORD *)(v91 + 8) = "VectorKitLabels";
      *(_OWORD *)(v91 + 72) = 0u;
      *(_OWORD *)(v91 + 88) = 0u;
      *(_OWORD *)(v91 + 104) = 0u;
      *(_OWORD *)(v91 + 120) = 0u;
      *(_OWORD *)(v91 + 136) = 0u;
      *(_OWORD *)(v91 + 152) = 0u;
      *(_OWORD *)(v91 + 168) = 0u;
      *(_OWORD *)(v91 + 184) = 0u;
      *(_OWORD *)(v91 + 200) = 0u;
      *(_OWORD *)(v91 + 216) = 0u;
      *(_OWORD *)(v91 + 232) = 0u;
      *(_QWORD *)(v91 + 248) = 0;
      *(_OWORD *)(v91 + 56) = 0u;
      v92 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v91 + 56), 0);
      if ((_DWORD)v92)
        geo::read_write_lock::logFailure(v92, (uint64_t)"initialization", v93);
      v94 = malloc_create_zone(0, 0);
      *(_QWORD *)(v91 + 48) = v94;
      malloc_set_zone_name(v94, "VectorKitLabels");
      *(_QWORD *)(v91 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v91;
      v18 = v167;
    }
  }
  *(_QWORD *)(v17 + 200) = 0;
  *(_QWORD *)(v17 + 168) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v17 + 176) = 0;
  *(_DWORD *)(v17 + 184) = 1065353216;
  if ((v24 & 1) == 0)
  {
    v168 = v18;
    v18 = v168;
    if (v95)
    {
      v96 = operator new();
      *(_QWORD *)(v96 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v96 + 24) = "VectorKitLabels";
      *(_OWORD *)(v96 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v96 = &off_1E42B5668;
      *(_QWORD *)(v96 + 8) = "VectorKitLabels";
      *(_OWORD *)(v96 + 72) = 0u;
      *(_OWORD *)(v96 + 88) = 0u;
      *(_OWORD *)(v96 + 104) = 0u;
      *(_OWORD *)(v96 + 120) = 0u;
      *(_OWORD *)(v96 + 136) = 0u;
      *(_OWORD *)(v96 + 152) = 0u;
      *(_OWORD *)(v96 + 168) = 0u;
      *(_OWORD *)(v96 + 184) = 0u;
      *(_OWORD *)(v96 + 200) = 0u;
      *(_OWORD *)(v96 + 216) = 0u;
      *(_OWORD *)(v96 + 232) = 0u;
      *(_QWORD *)(v96 + 248) = 0;
      *(_OWORD *)(v96 + 56) = 0u;
      v97 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v96 + 56), 0);
      if ((_DWORD)v97)
        geo::read_write_lock::logFailure(v97, (uint64_t)"initialization", v98);
      v99 = malloc_create_zone(0, 0);
      *(_QWORD *)(v96 + 48) = v99;
      malloc_set_zone_name(v99, "VectorKitLabels");
      *(_QWORD *)(v96 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v96;
      v18 = v168;
    }
  }
  v25 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v17 + 232) = 0;
  *(_QWORD *)(v17 + 208) = v25;
  *(_QWORD *)(v17 + 216) = 0;
  *(_QWORD *)(v17 + 192) = v17 + 200;
  if ((v25 & 1) == 0)
  {
    v169 = v18;
    v18 = v169;
    if (v100)
    {
      v101 = operator new();
      *(_QWORD *)(v101 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v101 + 24) = "VectorKitLabels";
      *(_OWORD *)(v101 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v101 = &off_1E42B5668;
      *(_QWORD *)(v101 + 8) = "VectorKitLabels";
      *(_OWORD *)(v101 + 72) = 0u;
      *(_OWORD *)(v101 + 88) = 0u;
      *(_OWORD *)(v101 + 104) = 0u;
      *(_OWORD *)(v101 + 120) = 0u;
      *(_OWORD *)(v101 + 136) = 0u;
      *(_OWORD *)(v101 + 152) = 0u;
      *(_OWORD *)(v101 + 168) = 0u;
      *(_OWORD *)(v101 + 184) = 0u;
      *(_OWORD *)(v101 + 200) = 0u;
      *(_OWORD *)(v101 + 216) = 0u;
      *(_OWORD *)(v101 + 232) = 0u;
      *(_QWORD *)(v101 + 248) = 0;
      *(_OWORD *)(v101 + 56) = 0u;
      v102 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v101 + 56), 0);
      if ((_DWORD)v102)
        geo::read_write_lock::logFailure(v102, (uint64_t)"initialization", v103);
      v104 = malloc_create_zone(0, 0);
      *(_QWORD *)(v101 + 48) = v104;
      malloc_set_zone_name(v104, "VectorKitLabels");
      *(_QWORD *)(v101 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v101;
      v18 = v169;
    }
  }
  *(_QWORD *)(v17 + 240) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v17 + 248) = 0;
  *(_QWORD *)(v17 + 224) = v17 + 232;
  *(_QWORD *)(v17 + 256) = 0;
  *(_QWORD *)(v17 + 264) = 0;
  if ((v26 & 1) == 0)
  {
    v170 = v18;
    v18 = v170;
    if (v105)
    {
      v106 = operator new();
      *(_QWORD *)(v106 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v106 + 24) = "VectorKitLabels";
      *(_OWORD *)(v106 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v106 = &off_1E42B5668;
      *(_QWORD *)(v106 + 8) = "VectorKitLabels";
      *(_OWORD *)(v106 + 72) = 0u;
      *(_OWORD *)(v106 + 88) = 0u;
      *(_OWORD *)(v106 + 104) = 0u;
      *(_OWORD *)(v106 + 120) = 0u;
      *(_OWORD *)(v106 + 136) = 0u;
      *(_OWORD *)(v106 + 152) = 0u;
      *(_OWORD *)(v106 + 168) = 0u;
      *(_OWORD *)(v106 + 184) = 0u;
      *(_OWORD *)(v106 + 200) = 0u;
      *(_OWORD *)(v106 + 216) = 0u;
      *(_OWORD *)(v106 + 232) = 0u;
      *(_QWORD *)(v106 + 248) = 0;
      *(_OWORD *)(v106 + 56) = 0u;
      v107 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v106 + 56), 0);
      if ((_DWORD)v107)
        geo::read_write_lock::logFailure(v107, (uint64_t)"initialization", v108);
      v109 = malloc_create_zone(0, 0);
      *(_QWORD *)(v106 + 48) = v109;
      malloc_set_zone_name(v109, "VectorKitLabels");
      *(_QWORD *)(v106 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v106;
      v18 = v170;
    }
  }
  *(_QWORD *)(v17 + 272) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v17 + 280) = 0;
  if ((v27 & 1) == 0)
  {
    v171 = v18;
    v18 = v171;
    if (v110)
    {
      v111 = operator new();
      *(_QWORD *)(v111 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v111 + 24) = "VectorKitLabels";
      *(_OWORD *)(v111 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v111 = &off_1E42B5668;
      *(_QWORD *)(v111 + 8) = "VectorKitLabels";
      *(_OWORD *)(v111 + 72) = 0u;
      *(_OWORD *)(v111 + 88) = 0u;
      *(_OWORD *)(v111 + 104) = 0u;
      *(_OWORD *)(v111 + 120) = 0u;
      *(_OWORD *)(v111 + 136) = 0u;
      *(_OWORD *)(v111 + 152) = 0u;
      *(_OWORD *)(v111 + 168) = 0u;
      *(_OWORD *)(v111 + 184) = 0u;
      *(_OWORD *)(v111 + 200) = 0u;
      *(_OWORD *)(v111 + 216) = 0u;
      *(_OWORD *)(v111 + 232) = 0u;
      *(_QWORD *)(v111 + 248) = 0;
      *(_OWORD *)(v111 + 56) = 0u;
      v112 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v111 + 56), 0);
      if ((_DWORD)v112)
        geo::read_write_lock::logFailure(v112, (uint64_t)"initialization", v113);
      v114 = malloc_create_zone(0, 0);
      *(_QWORD *)(v111 + 48) = v114;
      malloc_set_zone_name(v114, "VectorKitLabels");
      *(_QWORD *)(v111 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v111;
      v18 = v171;
    }
  }
  *(_QWORD *)(v17 + 288) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v17 + 296) = 0;
  *(_DWORD *)(v17 + 304) = 1065353216;
  *(_QWORD *)(v17 + 312) = 0;
  *(_QWORD *)(v17 + 320) = 0;
  if ((v28 & 1) == 0)
  {
    v172 = v18;
    v18 = v172;
    if (v115)
    {
      v116 = operator new();
      *(_QWORD *)(v116 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v116 + 24) = "VectorKitLabels";
      *(_OWORD *)(v116 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v116 = &off_1E42B5668;
      *(_QWORD *)(v116 + 8) = "VectorKitLabels";
      *(_OWORD *)(v116 + 72) = 0u;
      *(_OWORD *)(v116 + 88) = 0u;
      *(_OWORD *)(v116 + 104) = 0u;
      *(_OWORD *)(v116 + 120) = 0u;
      *(_OWORD *)(v116 + 136) = 0u;
      *(_OWORD *)(v116 + 152) = 0u;
      *(_OWORD *)(v116 + 168) = 0u;
      *(_OWORD *)(v116 + 184) = 0u;
      *(_OWORD *)(v116 + 200) = 0u;
      *(_OWORD *)(v116 + 216) = 0u;
      *(_OWORD *)(v116 + 232) = 0u;
      *(_QWORD *)(v116 + 248) = 0;
      *(_OWORD *)(v116 + 56) = 0u;
      v117 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v116 + 56), 0);
      if ((_DWORD)v117)
        geo::read_write_lock::logFailure(v117, (uint64_t)"initialization", v118);
      v119 = malloc_create_zone(0, 0);
      *(_QWORD *)(v116 + 48) = v119;
      malloc_set_zone_name(v119, "VectorKitLabels");
      *(_QWORD *)(v116 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v116;
      v18 = v172;
    }
  }
  *(_QWORD *)(v17 + 328) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v17 + 336) = 0;
  if ((v29 & 1) == 0)
  {
    v173 = v18;
    v18 = v173;
    if (v120)
    {
      v121 = operator new();
      *(_QWORD *)(v121 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v121 + 24) = "VectorKitLabels";
      *(_OWORD *)(v121 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v121 = &off_1E42B5668;
      *(_QWORD *)(v121 + 8) = "VectorKitLabels";
      *(_OWORD *)(v121 + 72) = 0u;
      *(_OWORD *)(v121 + 88) = 0u;
      *(_OWORD *)(v121 + 104) = 0u;
      *(_OWORD *)(v121 + 120) = 0u;
      *(_OWORD *)(v121 + 136) = 0u;
      *(_OWORD *)(v121 + 152) = 0u;
      *(_OWORD *)(v121 + 168) = 0u;
      *(_OWORD *)(v121 + 184) = 0u;
      *(_OWORD *)(v121 + 200) = 0u;
      *(_OWORD *)(v121 + 216) = 0u;
      *(_OWORD *)(v121 + 232) = 0u;
      *(_QWORD *)(v121 + 248) = 0;
      *(_OWORD *)(v121 + 56) = 0u;
      v122 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v121 + 56), 0);
      if ((_DWORD)v122)
        geo::read_write_lock::logFailure(v122, (uint64_t)"initialization", v123);
      v124 = malloc_create_zone(0, 0);
      *(_QWORD *)(v121 + 48) = v124;
      malloc_set_zone_name(v124, "VectorKitLabels");
      *(_QWORD *)(v121 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v121;
      v18 = v173;
    }
  }
  *(_QWORD *)(v17 + 344) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v17 + 352) = 0;
  *(_DWORD *)(v17 + 360) = 1065353216;
  *(_QWORD *)(v17 + 368) = 0;
  *(_QWORD *)(v17 + 376) = 0;
  if ((v30 & 1) == 0)
  {
    v174 = v18;
    v18 = v174;
    if (v125)
    {
      v126 = operator new();
      *(_QWORD *)(v126 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v126 + 24) = "VectorKitLabels";
      *(_OWORD *)(v126 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v126 = &off_1E42B5668;
      *(_QWORD *)(v126 + 8) = "VectorKitLabels";
      *(_OWORD *)(v126 + 72) = 0u;
      *(_OWORD *)(v126 + 88) = 0u;
      *(_OWORD *)(v126 + 104) = 0u;
      *(_OWORD *)(v126 + 120) = 0u;
      *(_OWORD *)(v126 + 136) = 0u;
      *(_OWORD *)(v126 + 152) = 0u;
      *(_OWORD *)(v126 + 168) = 0u;
      *(_OWORD *)(v126 + 184) = 0u;
      *(_OWORD *)(v126 + 200) = 0u;
      *(_OWORD *)(v126 + 216) = 0u;
      *(_OWORD *)(v126 + 232) = 0u;
      *(_QWORD *)(v126 + 248) = 0;
      *(_OWORD *)(v126 + 56) = 0u;
      v127 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v126 + 56), 0);
      if ((_DWORD)v127)
        geo::read_write_lock::logFailure(v127, (uint64_t)"initialization", v128);
      v129 = malloc_create_zone(0, 0);
      *(_QWORD *)(v126 + 48) = v129;
      malloc_set_zone_name(v129, "VectorKitLabels");
      *(_QWORD *)(v126 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v126;
      v18 = v174;
    }
  }
  *(_QWORD *)(v17 + 384) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v17 + 392) = 0;
  if ((v31 & 1) == 0)
  {
    v175 = v18;
    v18 = v175;
    if (v130)
    {
      v131 = operator new();
      *(_QWORD *)(v131 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v131 + 24) = "VectorKitLabels";
      *(_OWORD *)(v131 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v131 = &off_1E42B5668;
      *(_QWORD *)(v131 + 8) = "VectorKitLabels";
      *(_OWORD *)(v131 + 72) = 0u;
      *(_OWORD *)(v131 + 88) = 0u;
      *(_OWORD *)(v131 + 104) = 0u;
      *(_OWORD *)(v131 + 120) = 0u;
      *(_OWORD *)(v131 + 136) = 0u;
      *(_OWORD *)(v131 + 152) = 0u;
      *(_OWORD *)(v131 + 168) = 0u;
      *(_OWORD *)(v131 + 184) = 0u;
      *(_OWORD *)(v131 + 200) = 0u;
      *(_OWORD *)(v131 + 216) = 0u;
      *(_OWORD *)(v131 + 232) = 0u;
      *(_QWORD *)(v131 + 248) = 0;
      *(_OWORD *)(v131 + 56) = 0u;
      v132 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v131 + 56), 0);
      if ((_DWORD)v132)
        geo::read_write_lock::logFailure(v132, (uint64_t)"initialization", v133);
      v134 = malloc_create_zone(0, 0);
      *(_QWORD *)(v131 + 48) = v134;
      malloc_set_zone_name(v134, "VectorKitLabels");
      *(_QWORD *)(v131 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v131;
      v18 = v175;
    }
  }
  *(_QWORD *)(v17 + 400) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v17 + 408) = 0;
  *(_DWORD *)(v17 + 416) = 1065353216;
  *(_QWORD *)(v17 + 424) = 0;
  *(_QWORD *)(v17 + 432) = 0;
  if ((v32 & 1) == 0)
  {
    v176 = v18;
    v18 = v176;
    if (v135)
    {
      v136 = operator new();
      *(_QWORD *)(v136 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v136 + 24) = "VectorKitLabels";
      *(_OWORD *)(v136 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v136 = &off_1E42B5668;
      *(_QWORD *)(v136 + 8) = "VectorKitLabels";
      *(_OWORD *)(v136 + 72) = 0u;
      *(_OWORD *)(v136 + 88) = 0u;
      *(_OWORD *)(v136 + 104) = 0u;
      *(_OWORD *)(v136 + 120) = 0u;
      *(_OWORD *)(v136 + 136) = 0u;
      *(_OWORD *)(v136 + 152) = 0u;
      *(_OWORD *)(v136 + 168) = 0u;
      *(_OWORD *)(v136 + 184) = 0u;
      *(_OWORD *)(v136 + 200) = 0u;
      *(_OWORD *)(v136 + 216) = 0u;
      *(_OWORD *)(v136 + 232) = 0u;
      *(_QWORD *)(v136 + 248) = 0;
      *(_OWORD *)(v136 + 56) = 0u;
      v137 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v136 + 56), 0);
      if ((_DWORD)v137)
        geo::read_write_lock::logFailure(v137, (uint64_t)"initialization", v138);
      v139 = malloc_create_zone(0, 0);
      *(_QWORD *)(v136 + 48) = v139;
      malloc_set_zone_name(v139, "VectorKitLabels");
      *(_QWORD *)(v136 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v136;
      v18 = v176;
    }
  }
  *(_QWORD *)(v17 + 440) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v17 + 448) = 0;
  if ((v33 & 1) == 0)
  {
    v177 = v18;
    v18 = v177;
    if (v140)
    {
      v141 = operator new();
      *(_QWORD *)(v141 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v141 + 24) = "VectorKitLabels";
      *(_OWORD *)(v141 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v141 = &off_1E42B5668;
      *(_QWORD *)(v141 + 8) = "VectorKitLabels";
      *(_OWORD *)(v141 + 72) = 0u;
      *(_OWORD *)(v141 + 88) = 0u;
      *(_OWORD *)(v141 + 104) = 0u;
      *(_OWORD *)(v141 + 120) = 0u;
      *(_OWORD *)(v141 + 136) = 0u;
      *(_OWORD *)(v141 + 152) = 0u;
      *(_OWORD *)(v141 + 168) = 0u;
      *(_OWORD *)(v141 + 184) = 0u;
      *(_OWORD *)(v141 + 200) = 0u;
      *(_OWORD *)(v141 + 216) = 0u;
      *(_OWORD *)(v141 + 232) = 0u;
      *(_QWORD *)(v141 + 248) = 0;
      *(_OWORD *)(v141 + 56) = 0u;
      v142 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v141 + 56), 0);
      if ((_DWORD)v142)
        geo::read_write_lock::logFailure(v142, (uint64_t)"initialization", v143);
      v144 = malloc_create_zone(0, 0);
      *(_QWORD *)(v141 + 48) = v144;
      malloc_set_zone_name(v144, "VectorKitLabels");
      *(_QWORD *)(v141 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v141;
      v18 = v177;
    }
  }
  *(_QWORD *)(v17 + 456) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v17 + 464) = 0;
  *(_DWORD *)(v17 + 472) = 1065353216;
  *(_QWORD *)(v17 + 480) = 850045863;
  *(_QWORD *)(v17 + 536) = 0;
  *(_OWORD *)(v17 + 488) = 0u;
  *(_OWORD *)(v17 + 504) = 0u;
  *(_OWORD *)(v17 + 520) = 0u;
  *(_QWORD *)(v17 + 552) = 0;
  if ((v34 & 1) == 0)
  {
    v178 = v18;
    v18 = v178;
    if (v145)
    {
      v146 = operator new();
      *(_QWORD *)(v146 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v146 + 24) = "VectorKitLabels";
      *(_OWORD *)(v146 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v146 = &off_1E42B5668;
      *(_QWORD *)(v146 + 8) = "VectorKitLabels";
      *(_OWORD *)(v146 + 72) = 0u;
      *(_OWORD *)(v146 + 88) = 0u;
      *(_OWORD *)(v146 + 104) = 0u;
      *(_OWORD *)(v146 + 120) = 0u;
      *(_OWORD *)(v146 + 136) = 0u;
      *(_OWORD *)(v146 + 152) = 0u;
      *(_OWORD *)(v146 + 168) = 0u;
      *(_OWORD *)(v146 + 184) = 0u;
      *(_OWORD *)(v146 + 200) = 0u;
      *(_OWORD *)(v146 + 216) = 0u;
      *(_OWORD *)(v146 + 232) = 0u;
      *(_QWORD *)(v146 + 248) = 0;
      *(_OWORD *)(v146 + 56) = 0u;
      v147 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v146 + 56), 0);
      if ((_DWORD)v147)
        geo::read_write_lock::logFailure(v147, (uint64_t)"initialization", v148);
      v149 = malloc_create_zone(0, 0);
      *(_QWORD *)(v146 + 48) = v149;
      malloc_set_zone_name(v149, "VectorKitLabels");
      *(_QWORD *)(v146 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v146;
      v18 = v178;
    }
  }
  *(_QWORD *)(v17 + 560) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v17 + 576) = 0;
  *(_QWORD *)(v17 + 568) = 0;
  *(_QWORD *)(v17 + 544) = v17 + 552;
  *(_QWORD *)(v17 + 592) = 0;
  *(_QWORD *)(v17 + 584) = 0;
  if ((v35 & 1) == 0)
  {
    v179 = v18;
    v18 = v179;
    if (v150)
    {
      v151 = operator new();
      *(_QWORD *)(v151 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v151 + 24) = "VectorKitLabels";
      *(_OWORD *)(v151 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v151 = &off_1E42B5668;
      *(_QWORD *)(v151 + 8) = "VectorKitLabels";
      *(_OWORD *)(v151 + 72) = 0u;
      *(_OWORD *)(v151 + 88) = 0u;
      *(_OWORD *)(v151 + 104) = 0u;
      *(_OWORD *)(v151 + 120) = 0u;
      *(_OWORD *)(v151 + 136) = 0u;
      *(_OWORD *)(v151 + 152) = 0u;
      *(_OWORD *)(v151 + 168) = 0u;
      *(_OWORD *)(v151 + 184) = 0u;
      *(_OWORD *)(v151 + 200) = 0u;
      *(_OWORD *)(v151 + 216) = 0u;
      *(_OWORD *)(v151 + 232) = 0u;
      *(_QWORD *)(v151 + 248) = 0;
      *(_OWORD *)(v151 + 56) = 0u;
      v152 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v151 + 56), 0);
      if ((_DWORD)v152)
        geo::read_write_lock::logFailure(v152, (uint64_t)"initialization", v153);
      v154 = malloc_create_zone(0, 0);
      *(_QWORD *)(v151 + 48) = v154;
      malloc_set_zone_name(v154, "VectorKitLabels");
      *(_QWORD *)(v151 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v151;
      v18 = v179;
    }
  }
  *(_QWORD *)(v17 + 600) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v17 + 608) = *(_QWORD *)v17;
  *(_QWORD *)(v17 + 616) = 0;
  *(_OWORD *)(v17 + 624) = v18;
  *(_QWORD *)(v17 + 664) = 0;
  *(_QWORD *)(v17 + 680) = 0;
  {
    v155 = operator new();
    *(_QWORD *)(v155 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v155 + 24) = "VectorKitLabels";
    *(_OWORD *)(v155 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v155 = &off_1E42B5668;
    *(_QWORD *)(v155 + 8) = "VectorKitLabels";
    *(_OWORD *)(v155 + 72) = 0u;
    *(_OWORD *)(v155 + 88) = 0u;
    *(_OWORD *)(v155 + 104) = 0u;
    *(_OWORD *)(v155 + 120) = 0u;
    *(_OWORD *)(v155 + 136) = 0u;
    *(_OWORD *)(v155 + 152) = 0u;
    *(_OWORD *)(v155 + 168) = 0u;
    *(_OWORD *)(v155 + 184) = 0u;
    *(_OWORD *)(v155 + 200) = 0u;
    *(_OWORD *)(v155 + 216) = 0u;
    *(_OWORD *)(v155 + 232) = 0u;
    *(_QWORD *)(v155 + 248) = 0;
    *(_OWORD *)(v155 + 56) = 0u;
    v156 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v155 + 56), 0);
    if ((_DWORD)v156)
      geo::read_write_lock::logFailure(v156, (uint64_t)"initialization", v157);
    v158 = malloc_create_zone(0, 0);
    *(_QWORD *)(v155 + 48) = v158;
    malloc_set_zone_name(v158, "VectorKitLabels");
    *(_QWORD *)(v155 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v155;
  }
  *(_QWORD *)(v17 + 688) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v17 + 696) = 0;
  *(_QWORD *)(v17 + 672) = v17 + 680;
  *(_OWORD *)(v17 + 704) = 0u;
  *(_OWORD *)(v17 + 720) = 0u;
  *(_OWORD *)(v17 + 736) = 0u;
  *(_QWORD *)(v17 + 751) = 0;
  *(_WORD *)(v17 + 759) = 257;
  if (md::LabelPool::LabelPool(md::LabelManager *,md::LabelCustomFeatureSupport &,md::ScreenLabelFeatureSupport &)::onceToken != -1)
    dispatch_once(&md::LabelPool::LabelPool(md::LabelManager *,md::LabelCustomFeatureSupport &,md::ScreenLabelFeatureSupport &)::onceToken, &__block_literal_global_27620);
  *((_QWORD *)this + 6) = v17;
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 40);
  v37 = *((_QWORD *)a2 + 36);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 8) = v37;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  {
    v159 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v159, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v38 = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 12) = v38;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  {
    v160 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v160, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v39 = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 16) = v39;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = &off_1E42B5390;
  *((_QWORD *)this + 21) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_DWORD *)this + 54) = 0;
  *((_DWORD *)this + 57) = -1;
  *(_QWORD *)((char *)this + 220) = -1;
  *((_QWORD *)this + 34) = &off_1E42B5570;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 35) = 0;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((_WORD *)this + 180) = 0;
  *(_QWORD *)((char *)this + 364) = 0;
  *((_BYTE *)this + 372) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  v40 = *((_QWORD *)this + 3);
  *(_QWORD *)(*(_QWORD *)(v40 + 168) + 64) = v180;
  md::LabelsState::addObserver(*(_QWORD *)(v40 + 168), v181);
  return this;
}

void sub_19F306168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  md::LabelCustomFeatureSupport **v15;
  md::LabelPool **v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  md::StandardLabeler::{unnamed type#1}::~StandardLabeler(v20);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v12 + 256);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v12 + 240);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v12 + 200);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v19);
  *(_QWORD *)(v12 + 160) = v13;

  std::vector<std::unique_ptr<md::RenderLayer>>::~vector[abi:nn180100](v18);
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](v17);
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](v14);
  std::unique_ptr<md::LabelPool>::~unique_ptr[abi:nn180100](v16);
  std::unique_ptr<md::ScreenLabelFeatureSupport>::~unique_ptr[abi:nn180100]((md::ScreenLabelFeatureSupport **)(v12 + 40));
  std::unique_ptr<md::LabelCustomFeatureSupport>::~unique_ptr[abi:nn180100](v15);
  _Unwind_Resume(a1);
}

void sub_19F3061F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;

  v17 = *(_QWORD **)(v13 + 192);
  if (v17)
  {
    do
    {
      v18 = (_QWORD *)*v17;
      (*(void (**)(_QWORD))(**(_QWORD **)(v13 + 200) + 40))(*(_QWORD *)(v13 + 200));
      v17 = v18;
    }
    while (v18);
  }
  v19 = *v16;
  *v16 = 0;
  if (v19)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v13 + 184) + 40))(*(_QWORD *)(v13 + 184), v19, 8 * *(_QWORD *)(v13 + 176));
  v20 = *v12;
  if (*v12)
  {
    v21 = *(_QWORD *)(v13 + 144);
    v22 = *v12;
    if (v21 != v20)
    {
      do
      {
        v23 = *(std::__shared_weak_count **)(v21 - 8);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v23->__on_zero_shared)(v23, v22);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v12;
    }
    *(_QWORD *)(v13 + 144) = v20;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v13 + 160) + 40))(*(_QWORD *)(v13 + 160), v22, *(_QWORD *)(v13 + 152) - v22);
  }
  v26 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v13 + 112) = v26;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v13 + 128) + 40))(*(_QWORD *)(v13 + 128), v26, *(_QWORD *)(v13 + 120) - v26);
  }
  std::__tree<std::__value_type<objc_object  {objcproto25VKCustomFeatureDataSource}* {__strong},md::LabelCustomFeatureProvider>,std::__map_value_compare<objc_object  {objcproto25VKCustomFeatureDataSource}*,md::LabelCustomFeatureProvider,std::less<objc_object  {objcproto25VKCustomFeatureDataSource}*>,true>,geo::StdAllocator<md::LabelCustomFeatureProvider,mdm::Allocator>>::destroy(v15 - 8, *(_QWORD *)(v13 + 80));
  v27 = *(_QWORD *)(v13 + 40);
  if (v27)
  {
    v28 = *(_QWORD *)(v13 + 48);
    v29 = *(_QWORD *)(v13 + 40);
    if (v28 != v27)
    {
      do
      {
        v30 = *(std::__shared_weak_count **)(v28 - 8);
        if (v30)
        {
          v31 = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v30->__on_zero_shared)(v30, v29);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v28 -= 16;
      }
      while (v28 != v27);
      v29 = *(_QWORD *)(v13 + 40);
    }
    *(_QWORD *)(v13 + 48) = v27;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v13 + 64) + 40))(*(_QWORD *)(v13 + 64), v29, *(_QWORD *)(v13 + 56) - v29);
  }
  v33 = *(std::__shared_weak_count **)(v13 + 32);
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  MEMORY[0x1A1AF4E00](v13, 0x10A1C4094B04A8BLL);
  _Unwind_Resume(a1);
}

uint64_t md::LabelsState::addObserver(uint64_t this, md::LabelsStateObserver *a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v3 = this;
  v4 = *(_QWORD **)(this + 8);
  v5 = *(_QWORD *)(this + 16);
  if ((unint64_t)v4 < v5)
  {
    if (v4)
      *v4 = a2;
    v6 = v4 + 1;
    goto LABEL_27;
  }
  v7 = ((uint64_t)v4 - *(_QWORD *)this) >> 3;
  v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) >> 61)
    abort();
  v9 = v5 - *(_QWORD *)this;
  if (v9 >> 2 > v8)
    v8 = v9 >> 2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  if (v8)
  {
    v10 = 8 * v8;
    this = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(this + 24) + 16))(*(_QWORD *)(this + 24), 8 * v8, 8);
    v11 = (_QWORD *)(this + 8 * v7);
    v8 = this + v10;
    if (this)
      *v11 = a2;
  }
  else
  {
    v11 = (_QWORD *)(8 * v7);
  }
  v6 = v11 + 1;
  v13 = *(_QWORD *)v3;
  v12 = *(_QWORD *)(v3 + 8);
  if (v12 != *(_QWORD *)v3)
  {
    v14 = v12 - *(_QWORD *)v3 - 8;
    if (v14 < 0x38)
    {
      v16 = *(_QWORD *)(v3 + 8);
    }
    else if ((unint64_t)(v12 - (_QWORD)v11) < 0x20)
    {
      v16 = *(_QWORD *)(v3 + 8);
    }
    else
    {
      v15 = (v14 >> 3) + 1;
      v16 = v12 - 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
      v17 = v11 - 2;
      v18 = (__int128 *)(v12 - 16);
      v19 = v15 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v20 = *v18;
        *(v17 - 1) = *(v18 - 1);
        *v17 = v20;
        v17 -= 2;
        v18 -= 2;
        v19 -= 4;
      }
      while (v19);
      v11 -= v15 & 0x3FFFFFFFFFFFFFFCLL;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_24;
    }
    do
    {
      v21 = *(_QWORD *)(v16 - 8);
      v16 -= 8;
      *--v11 = v21;
    }
    while (v16 != v13);
LABEL_24:
    v12 = *(_QWORD *)v3;
  }
  *(_QWORD *)v3 = v11;
  *(_QWORD *)(v3 + 8) = v6;
  v22 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v8;
  if (v12)
    this = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v12, v22 - v12);
LABEL_27:
  *(_QWORD *)(v3 + 8) = v6;
  return this;
}

md::MapNavLabeler *md::MapNavLabeler::MapNavLabeler(md::MapNavLabeler *this, md::LabelManager *a2)
{
  char *v4;
  md::LabelsStateObserver *v5;
  id *v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  CGColorSpaceRef v38;
  const void *v39;
  uint64_t *v40;
  const void *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  VKLabelNavArtworkCache *v45;
  LabelNavRouteLabeler *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  unsigned __int8 v58;
  uint64_t v59;
  unsigned __int8 v60;
  char v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  unsigned __int8 v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  unsigned __int8 v74;
  unsigned __int8 v75;
  LabelNavRouteContextObserverProxy *v76;
  void *v77;
  md::LabelNavEtaLabeler *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 v81;
  unsigned __int8 v82;
  uint64_t v83;
  unsigned __int8 v84;
  unsigned __int8 v85;
  unsigned __int8 v86;
  LabelNavRouteContextObserverProxy *v87;
  void *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  uint64_t v98;
  unsigned __int8 v99;
  md::RouteAnnotationSupport *v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  geo::read_write_lock *v109;
  const char *v110;
  malloc_zone_t *zone;
  uint64_t v112;
  geo::read_write_lock *v113;
  const char *v114;
  malloc_zone_t *v115;
  uint64_t v116;
  geo::read_write_lock *v117;
  const char *v118;
  malloc_zone_t *v119;
  uint64_t v120;
  geo::read_write_lock *v121;
  const char *v122;
  malloc_zone_t *v123;
  uint64_t v124;
  geo::read_write_lock *v125;
  const char *v126;
  malloc_zone_t *v127;
  uint64_t v128;
  geo::read_write_lock *v129;
  const char *v130;
  malloc_zone_t *v131;
  uint64_t v132;
  geo::read_write_lock *v133;
  const char *v134;
  malloc_zone_t *v135;
  uint64_t v136;
  geo::read_write_lock *v137;
  const char *v138;
  malloc_zone_t *v139;
  uint64_t v140;
  geo::read_write_lock *v141;
  const char *v142;
  malloc_zone_t *v143;
  uint64_t v144;
  geo::read_write_lock *v145;
  const char *v146;
  malloc_zone_t *v147;
  uint64_t v148;
  geo::read_write_lock *v149;
  const char *v150;
  malloc_zone_t *v151;
  uint64_t v152;
  geo::read_write_lock *v153;
  const char *v154;
  malloc_zone_t *v155;
  uint64_t v156;
  geo::read_write_lock *v157;
  const char *v158;
  malloc_zone_t *v159;
  uint64_t v160;
  geo::read_write_lock *v161;
  const char *v162;
  malloc_zone_t *v163;
  uint64_t v164;
  geo::read_write_lock *v165;
  const char *v166;
  malloc_zone_t *v167;
  uint64_t v168;
  geo::read_write_lock *v169;
  const char *v170;
  malloc_zone_t *v171;
  uint64_t v172;
  geo::read_write_lock *v173;
  const char *v174;
  malloc_zone_t *v175;
  uint64_t v176;
  geo::read_write_lock *v177;
  const char *v178;
  malloc_zone_t *v179;
  uint64_t v180;
  geo::read_write_lock *v181;
  const char *v182;
  malloc_zone_t *v183;
  uint64_t v184;
  geo::read_write_lock *v185;
  const char *v186;
  malloc_zone_t *v187;
  uint64_t v188;
  geo::read_write_lock *v189;
  const char *v190;
  malloc_zone_t *v191;
  uint64_t v192;
  geo::read_write_lock *v193;
  const char *v194;
  malloc_zone_t *v195;
  uint64_t v196;
  geo::read_write_lock *v197;
  const char *v198;
  malloc_zone_t *v199;
  uint64_t v200;
  geo::read_write_lock *v201;
  const char *v202;
  malloc_zone_t *v203;
  uint64_t v204;
  geo::read_write_lock *v205;
  const char *v206;
  malloc_zone_t *v207;
  uint64_t v208;
  geo::read_write_lock *v209;
  const char *v210;
  malloc_zone_t *v211;
  uint64_t v212;
  geo::read_write_lock *v213;
  const char *v214;
  malloc_zone_t *v215;
  uint64_t v216;
  geo::read_write_lock *v217;
  const char *v218;
  malloc_zone_t *v219;
  uint64_t v220;
  geo::read_write_lock *v221;
  const char *v222;
  malloc_zone_t *v223;
  uint64_t v224;
  geo::read_write_lock *v225;
  const char *v226;
  malloc_zone_t *v227;
  md::RouteAnnotationSupport **v228;
  md::LabelNavEtaLabeler **v229;
  VKLabelNavArtworkCache **v230;

  *((_QWORD *)this + 1) = &unk_1E428DEE0;
  v4 = (char *)this + 8;
  *((_QWORD *)this + 2) = &unk_1E428DFC8;
  v5 = (md::MapNavLabeler *)((char *)this + 16);
  *(_QWORD *)this = &off_1E428DCA8;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = &off_1E42B4ED0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 7) = 0;
  v6 = (id *)((char *)this + 56);
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = &off_1E42B4B90;
  *((_QWORD *)this + 11) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_QWORD *)this + 13) = 0;
  *(_DWORD *)((char *)this + 127) = 0;
  *((_DWORD *)this + 80) = 1065353216;
  *((_OWORD *)this + 21) = 0u;
  *((_QWORD *)this + 41) = (char *)this + 336;
  *((_DWORD *)this + 88) = 0;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_DWORD *)this + 136) = 1065353216;
  *((_OWORD *)this + 35) = 0u;
  *((_QWORD *)this + 69) = (char *)this + 560;
  *((_DWORD *)this + 144) = 0;
  *((_QWORD *)this + 75) = 0;
  *(_OWORD *)((char *)this + 584) = 0u;
  {
    v102 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v102, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *((_QWORD *)this + 76) = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 77) = 0;
  *((_QWORD *)this + 79) = 0;
  *((_QWORD *)this + 78) = 0;
  {
    v103 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v103, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *((_QWORD *)this + 80) = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 81) = 0;
  *((_QWORD *)this + 83) = 0;
  *((_QWORD *)this + 82) = 0;
  {
    v104 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v104, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *((_QWORD *)this + 84) = mdm::Allocator::instance(void)::alloc;
  *((_WORD *)this + 340) = 0;
  *(_OWORD *)((char *)this + 684) = 0u;
  *(_OWORD *)((char *)this + 700) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  {
    v105 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v105, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *((_QWORD *)this + 91) = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 92) = 0;
  *((_QWORD *)this + 94) = 0;
  *((_QWORD *)this + 93) = 0;
  {
    v106 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v106, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  *((_QWORD *)this + 95) = mdm::Allocator::instance(void)::alloc;
  *((_BYTE *)this + 768) = 0;
  *((_QWORD *)this + 97) = 0;
  *((_QWORD *)this + 99) = 0;
  *((_QWORD *)this + 98) = 0;
  {
    v107 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v107, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v228 = (md::RouteAnnotationSupport **)((char *)this + 72);
  v229 = (md::LabelNavEtaLabeler **)((char *)this + 688);
  v230 = (VKLabelNavArtworkCache **)((char *)this + 696);
  *((_QWORD *)this + 100) = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 101) = 0xBF80000000000000;
  *((_QWORD *)this + 102) = 0;
  *(_QWORD *)((char *)this + 821) = 0;
  v13 = *((_QWORD *)this + 3);
  *(_QWORD *)(*(_QWORD *)(v13 + 168) + 32) = v4;
  md::LabelsState::addObserver(*(_QWORD *)(v13 + 168), v5);
  v14 = operator new();
  v15 = v14;
  v16 = *((_QWORD *)a2 + 33);
  v17 = *((_QWORD *)a2 + 14);
  v18 = *(_QWORD **)v17;
  v19 = *(_QWORD **)(v17 + 8);
  if (v18 != v19)
  {
    while (*v18 != 0x6F66BE14E10A8F81)
    {
      v18 += 5;
      if (v18 == v19)
        goto LABEL_23;
    }
  }
  if (v18 == v19)
  {
LABEL_23:
    v20 = 0;
    goto LABEL_24;
  }
  v20 = v18[3];
  v21 = (std::__shared_weak_count *)v18[4];
  if (!v21)
  {
LABEL_24:
    v21 = 0;
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 24) = 0;
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)(v14 + 32) = v16;
    *(_QWORD *)(v14 + 40) = v20;
    v29 = 1;
    *(_QWORD *)(v14 + 48) = 0;
    goto LABEL_25;
  }
  p_shared_owners = (unint64_t *)&v21->__shared_owners_;
  do
    v23 = __ldxr(p_shared_owners);
  while (__stxr(v23 + 1, p_shared_owners));
  p_shared_weak_owners = (unint64_t *)&v21->__shared_weak_owners_;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_BYTE *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 32) = v16;
  *(_QWORD *)(v15 + 40) = v20;
  v27 = (unint64_t *)&v21->__shared_weak_owners_;
  *(_QWORD *)(v15 + 48) = v21;
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
  v29 = 0;
LABEL_25:
  v30 = operator new();
  *(_QWORD *)v30 = 16;
  *(_OWORD *)(v30 + 8) = 0u;
  *(_OWORD *)(v30 + 24) = 0u;
  *(_DWORD *)(v30 + 40) = 1065353216;
  *(_QWORD *)(v30 + 48) = v30 + 48;
  *(_QWORD *)(v30 + 56) = v30 + 48;
  *(_QWORD *)(v30 + 64) = 0;
  v31 = *(_QWORD **)v15;
  *(_QWORD *)v15 = v30;
  if (v31)
    std::default_delete<geo::Cache<unsigned long,geo::_retain_ptr<VKRoadSignArtwork * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::hash<unsigned long>,geo::LRUPolicy>>::operator()[abi:nn180100](v31);
  v32 = operator new();
  *(_QWORD *)v32 = 10;
  *(_OWORD *)(v32 + 8) = 0u;
  *(_OWORD *)(v32 + 24) = 0u;
  *(_DWORD *)(v32 + 40) = 1065353216;
  *(_QWORD *)(v32 + 48) = v32 + 48;
  *(_QWORD *)(v32 + 56) = v32 + 48;
  *(_QWORD *)(v32 + 64) = 0;
  v33 = *(_QWORD **)(v15 + 8);
  *(_QWORD *)(v15 + 8) = v32;
  if (v33)
  {
    v34 = geo::Cache<unsigned long,std::shared_ptr<md::LabelIcon>,std::hash<unsigned long>,geo::LRUPolicy>::~Cache(v33);
    MEMORY[0x1A1AF4E00](v34, 0x10A0C407D9D2971);
  }
  v35 = operator new();
  *(_QWORD *)v35 = 0;
  *(_QWORD *)(v35 + 8) = 0;
  {
    v108 = operator new();
    *(_QWORD *)(v108 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v108 + 24) = "VectorKitLabels";
    *(_OWORD *)(v108 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v108 = &off_1E42B5668;
    *(_QWORD *)(v108 + 8) = "VectorKitLabels";
    *(_OWORD *)(v108 + 72) = 0u;
    *(_OWORD *)(v108 + 88) = 0u;
    *(_OWORD *)(v108 + 104) = 0u;
    *(_OWORD *)(v108 + 120) = 0u;
    *(_OWORD *)(v108 + 136) = 0u;
    *(_OWORD *)(v108 + 152) = 0u;
    *(_OWORD *)(v108 + 168) = 0u;
    *(_OWORD *)(v108 + 184) = 0u;
    *(_OWORD *)(v108 + 200) = 0u;
    *(_OWORD *)(v108 + 216) = 0u;
    *(_OWORD *)(v108 + 232) = 0u;
    *(_QWORD *)(v108 + 248) = 0;
    *(_OWORD *)(v108 + 56) = 0u;
    v109 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v108 + 56), 0);
    if ((_DWORD)v109)
      geo::read_write_lock::logFailure(v109, (uint64_t)"initialization", v110);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v108 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v108 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v108;
  }
  *(_QWORD *)(v35 + 16) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v35 + 24) = 0;
  {
    v112 = operator new();
    *(_QWORD *)(v112 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v112 + 24) = "VectorKitLabels";
    *(_OWORD *)(v112 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v112 = &off_1E42B5668;
    *(_QWORD *)(v112 + 8) = "VectorKitLabels";
    *(_OWORD *)(v112 + 72) = 0u;
    *(_OWORD *)(v112 + 88) = 0u;
    *(_OWORD *)(v112 + 104) = 0u;
    *(_OWORD *)(v112 + 120) = 0u;
    *(_OWORD *)(v112 + 136) = 0u;
    *(_OWORD *)(v112 + 152) = 0u;
    *(_OWORD *)(v112 + 168) = 0u;
    *(_OWORD *)(v112 + 184) = 0u;
    *(_OWORD *)(v112 + 200) = 0u;
    *(_OWORD *)(v112 + 216) = 0u;
    *(_OWORD *)(v112 + 232) = 0u;
    *(_QWORD *)(v112 + 248) = 0;
    *(_OWORD *)(v112 + 56) = 0u;
    v113 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v112 + 56), 0);
    if ((_DWORD)v113)
      geo::read_write_lock::logFailure(v113, (uint64_t)"initialization", v114);
    v115 = malloc_create_zone(0, 0);
    *(_QWORD *)(v112 + 48) = v115;
    malloc_set_zone_name(v115, "VectorKitLabels");
    *(_QWORD *)(v112 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v112;
  }
  *(_QWORD *)(v35 + 32) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v35 + 40) = 0;
  *(_DWORD *)(v35 + 48) = 1065353216;
  *(_QWORD *)(v35 + 56) = &off_1E42B47F0;
  *(_QWORD *)(v35 + 64) = 0;
  *(_BYTE *)(v35 + 80) = 0;
  v38 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA00]);
  v39 = *(const void **)(v35 + 64);
  *(_QWORD *)(v35 + 64) = v38;
  if (v39)
    CFRelease(v39);
  v40 = *(uint64_t **)(v15 + 16);
  *(_QWORD *)(v15 + 16) = v35;
  if (v40)
  {
    v40[7] = (uint64_t)&off_1E42B47F0;
    v41 = (const void *)v40[8];
    if (v41)
      CFRelease(v41);
    v42 = (_QWORD *)v40[3];
    if (v42)
    {
      do
      {
        v43 = (_QWORD *)*v42;
        (*(void (**)(uint64_t))(*(_QWORD *)v40[4] + 40))(v40[4]);
        v42 = v43;
      }
      while (v43);
    }
    v44 = *v40;
    *v40 = 0;
    if (v44)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v40[2] + 40))(v40[2], v44, 8 * v40[1]);
    MEMORY[0x1A1AF4E00](v40, 0x10A0C4047D11187);
  }
  v45 = *v230;
  *v230 = (VKLabelNavArtworkCache *)v15;
  if (v45)
  {
    VKLabelNavArtworkCache::~VKLabelNavArtworkCache(v45);
    MEMORY[0x1A1AF4E00]();
  }
  if ((v29 & 1) == 0)
    std::__shared_weak_count::__release_weak(v21);
  v46 = objc_alloc_init(LabelNavRouteLabeler);
  v47 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v46;

  objc_storeStrong(v6, *((id *)this + 5));
  objc_msgSend(*((id *)this + 7), "setArtworkCache:", *((_QWORD *)this + 87));
  v48 = operator new();
  v49 = *((_QWORD *)this + 3);
  v50 = *(_QWORD *)(v49 + 112);
  v51 = *((_QWORD *)this + 87);
  v52 = *(_BYTE *)(*(_QWORD *)(v49 + 232) + 17);
  *(_QWORD *)v48 = &off_1E4294A58;
  *(_QWORD *)(v48 + 8) = v50;
  *(_QWORD *)(v48 + 16) = &off_1E42B4B90;
  *(_QWORD *)(v48 + 24) = 0;
  *(_OWORD *)(v48 + 40) = 0u;
  *(_OWORD *)(v48 + 56) = 0u;
  *(_OWORD *)(v48 + 72) = 0u;
  *(_OWORD *)(v48 + 88) = 0u;
  *(_QWORD *)(v48 + 104) = 0;
  *(_QWORD *)(v48 + 112) = &off_1E42B5290;
  *(_QWORD *)(v48 + 120) = 0;
  *(_BYTE *)(v48 + 136) = 0;
  *(_QWORD *)(v48 + 144) = v51;
  *(_QWORD *)(v48 + 152) = 0;
  *(_QWORD *)(v48 + 160) = 0;
  *(_QWORD *)(v48 + 168) = 0;
  {
    v116 = operator new();
    *(_QWORD *)(v116 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v116 + 24) = "VectorKitLabels";
    *(_OWORD *)(v116 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v116 = &off_1E42B5668;
    *(_QWORD *)(v116 + 8) = "VectorKitLabels";
    *(_OWORD *)(v116 + 72) = 0u;
    *(_OWORD *)(v116 + 88) = 0u;
    *(_OWORD *)(v116 + 104) = 0u;
    *(_OWORD *)(v116 + 120) = 0u;
    *(_OWORD *)(v116 + 136) = 0u;
    *(_OWORD *)(v116 + 152) = 0u;
    *(_OWORD *)(v116 + 168) = 0u;
    *(_OWORD *)(v116 + 184) = 0u;
    *(_OWORD *)(v116 + 200) = 0u;
    *(_OWORD *)(v116 + 216) = 0u;
    *(_OWORD *)(v116 + 232) = 0u;
    *(_QWORD *)(v116 + 248) = 0;
    *(_OWORD *)(v116 + 56) = 0u;
    v117 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v116 + 56), 0);
    if ((_DWORD)v117)
      geo::read_write_lock::logFailure(v117, (uint64_t)"initialization", v118);
    v119 = malloc_create_zone(0, 0);
    *(_QWORD *)(v116 + 48) = v119;
    malloc_set_zone_name(v119, "VectorKitLabels");
    *(_QWORD *)(v116 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v116;
  }
  v53 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v48 + 184) = 0;
  *(_QWORD *)(v48 + 176) = v53;
  *(_QWORD *)(v48 + 192) = 0;
  *(_QWORD *)(v48 + 200) = 0;
  {
    v120 = operator new();
    *(_QWORD *)(v120 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v120 + 24) = "VectorKitLabels";
    *(_OWORD *)(v120 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v120 = &off_1E42B5668;
    *(_QWORD *)(v120 + 8) = "VectorKitLabels";
    *(_OWORD *)(v120 + 72) = 0u;
    *(_OWORD *)(v120 + 88) = 0u;
    *(_OWORD *)(v120 + 104) = 0u;
    *(_OWORD *)(v120 + 120) = 0u;
    *(_OWORD *)(v120 + 136) = 0u;
    *(_OWORD *)(v120 + 152) = 0u;
    *(_OWORD *)(v120 + 168) = 0u;
    *(_OWORD *)(v120 + 184) = 0u;
    *(_OWORD *)(v120 + 200) = 0u;
    *(_OWORD *)(v120 + 216) = 0u;
    *(_OWORD *)(v120 + 232) = 0u;
    *(_QWORD *)(v120 + 248) = 0;
    *(_OWORD *)(v120 + 56) = 0u;
    v121 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v120 + 56), 0);
    if ((_DWORD)v121)
      geo::read_write_lock::logFailure(v121, (uint64_t)"initialization", v122);
    v123 = malloc_create_zone(0, 0);
    *(_QWORD *)(v120 + 48) = v123;
    malloc_set_zone_name(v123, "VectorKitLabels");
    *(_QWORD *)(v120 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v120;
  }
  v54 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v48 + 216) = 0;
  *(_QWORD *)(v48 + 208) = v54;
  *(_QWORD *)(v48 + 224) = 0;
  *(_QWORD *)(v48 + 232) = 0;
  {
    v124 = operator new();
    *(_QWORD *)(v124 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v124 + 24) = "VectorKitLabels";
    *(_OWORD *)(v124 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v124 = &off_1E42B5668;
    *(_QWORD *)(v124 + 8) = "VectorKitLabels";
    *(_OWORD *)(v124 + 72) = 0u;
    *(_OWORD *)(v124 + 88) = 0u;
    *(_OWORD *)(v124 + 104) = 0u;
    *(_OWORD *)(v124 + 120) = 0u;
    *(_OWORD *)(v124 + 136) = 0u;
    *(_OWORD *)(v124 + 152) = 0u;
    *(_OWORD *)(v124 + 168) = 0u;
    *(_OWORD *)(v124 + 184) = 0u;
    *(_OWORD *)(v124 + 200) = 0u;
    *(_OWORD *)(v124 + 216) = 0u;
    *(_OWORD *)(v124 + 232) = 0u;
    *(_QWORD *)(v124 + 248) = 0;
    *(_OWORD *)(v124 + 56) = 0u;
    v125 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v124 + 56), 0);
    if ((_DWORD)v125)
      geo::read_write_lock::logFailure(v125, (uint64_t)"initialization", v126);
    v127 = malloc_create_zone(0, 0);
    *(_QWORD *)(v124 + 48) = v127;
    malloc_set_zone_name(v127, "VectorKitLabels");
    *(_QWORD *)(v124 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v124;
  }
  *(_QWORD *)(v48 + 240) = mdm::Allocator::instance(void)::alloc;
  *(_WORD *)(v48 + 252) = 0;
  v55 = v48 + 264;
  *(_QWORD *)(v48 + 264) = 0;
  {
    v128 = operator new();
    *(_QWORD *)(v128 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v128 + 24) = "VectorKitLabels";
    *(_OWORD *)(v128 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v128 = &off_1E42B5668;
    *(_QWORD *)(v128 + 8) = "VectorKitLabels";
    *(_OWORD *)(v128 + 72) = 0u;
    *(_OWORD *)(v128 + 88) = 0u;
    *(_OWORD *)(v128 + 104) = 0u;
    *(_OWORD *)(v128 + 120) = 0u;
    *(_OWORD *)(v128 + 136) = 0u;
    *(_OWORD *)(v128 + 152) = 0u;
    *(_OWORD *)(v128 + 168) = 0u;
    *(_OWORD *)(v128 + 184) = 0u;
    *(_OWORD *)(v128 + 200) = 0u;
    *(_OWORD *)(v128 + 216) = 0u;
    *(_OWORD *)(v128 + 232) = 0u;
    *(_QWORD *)(v128 + 248) = 0;
    *(_OWORD *)(v128 + 56) = 0u;
    v129 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v128 + 56), 0);
    if ((_DWORD)v129)
      geo::read_write_lock::logFailure(v129, (uint64_t)"initialization", v130);
    v131 = malloc_create_zone(0, 0);
    *(_QWORD *)(v128 + 48) = v131;
    malloc_set_zone_name(v131, "VectorKitLabels");
    *(_QWORD *)(v128 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v128;
    v55 = v48 + 264;
  }
  *(_QWORD *)(v48 + 272) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v48 + 280) = 0;
  *(_QWORD *)(v48 + 256) = v55;
  *(_QWORD *)(v48 + 296) = 0;
  *(_QWORD *)(v48 + 304) = 0;
  *(_QWORD *)(v48 + 288) = 0;
  {
    v132 = operator new();
    *(_QWORD *)(v132 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v132 + 24) = "VectorKitLabels";
    *(_OWORD *)(v132 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v132 = &off_1E42B5668;
    *(_QWORD *)(v132 + 8) = "VectorKitLabels";
    *(_OWORD *)(v132 + 72) = 0u;
    *(_OWORD *)(v132 + 88) = 0u;
    *(_OWORD *)(v132 + 104) = 0u;
    *(_OWORD *)(v132 + 120) = 0u;
    *(_OWORD *)(v132 + 136) = 0u;
    *(_OWORD *)(v132 + 152) = 0u;
    *(_OWORD *)(v132 + 168) = 0u;
    *(_OWORD *)(v132 + 184) = 0u;
    *(_OWORD *)(v132 + 200) = 0u;
    *(_OWORD *)(v132 + 216) = 0u;
    *(_OWORD *)(v132 + 232) = 0u;
    *(_QWORD *)(v132 + 248) = 0;
    *(_OWORD *)(v132 + 56) = 0u;
    v133 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v132 + 56), 0);
    if ((_DWORD)v133)
      geo::read_write_lock::logFailure(v133, (uint64_t)"initialization", v134);
    v135 = malloc_create_zone(0, 0);
    *(_QWORD *)(v132 + 48) = v135;
    malloc_set_zone_name(v135, "VectorKitLabels");
    *(_QWORD *)(v132 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v132;
  }
  *(_QWORD *)(v48 + 312) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v48 + 320) = 0;
  *(_QWORD *)(v48 + 328) = 0;
  *(_QWORD *)(v48 + 336) = 0;
  {
    v136 = operator new();
    *(_QWORD *)(v136 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v136 + 24) = "VectorKitLabels";
    *(_OWORD *)(v136 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v136 = &off_1E42B5668;
    *(_QWORD *)(v136 + 8) = "VectorKitLabels";
    *(_OWORD *)(v136 + 72) = 0u;
    *(_OWORD *)(v136 + 88) = 0u;
    *(_OWORD *)(v136 + 104) = 0u;
    *(_OWORD *)(v136 + 120) = 0u;
    *(_OWORD *)(v136 + 136) = 0u;
    *(_OWORD *)(v136 + 152) = 0u;
    *(_OWORD *)(v136 + 168) = 0u;
    *(_OWORD *)(v136 + 184) = 0u;
    *(_OWORD *)(v136 + 200) = 0u;
    *(_OWORD *)(v136 + 216) = 0u;
    *(_OWORD *)(v136 + 232) = 0u;
    *(_QWORD *)(v136 + 248) = 0;
    *(_OWORD *)(v136 + 56) = 0u;
    v137 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v136 + 56), 0);
    if ((_DWORD)v137)
      geo::read_write_lock::logFailure(v137, (uint64_t)"initialization", v138);
    v139 = malloc_create_zone(0, 0);
    *(_QWORD *)(v136 + 48) = v139;
    malloc_set_zone_name(v139, "VectorKitLabels");
    *(_QWORD *)(v136 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v136;
  }
  *(_QWORD *)(v48 + 344) = mdm::Allocator::instance(void)::alloc;
  v59 = v48 + 360;
  *(_QWORD *)(v48 + 360) = 0;
  {
    v140 = operator new();
    *(_QWORD *)(v140 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v140 + 24) = "VectorKitLabels";
    *(_OWORD *)(v140 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v140 = &off_1E42B5668;
    *(_QWORD *)(v140 + 8) = "VectorKitLabels";
    *(_OWORD *)(v140 + 72) = 0u;
    *(_OWORD *)(v140 + 88) = 0u;
    *(_OWORD *)(v140 + 104) = 0u;
    *(_OWORD *)(v140 + 120) = 0u;
    *(_OWORD *)(v140 + 136) = 0u;
    *(_OWORD *)(v140 + 152) = 0u;
    *(_OWORD *)(v140 + 168) = 0u;
    *(_OWORD *)(v140 + 184) = 0u;
    *(_OWORD *)(v140 + 200) = 0u;
    *(_OWORD *)(v140 + 216) = 0u;
    *(_OWORD *)(v140 + 232) = 0u;
    *(_QWORD *)(v140 + 248) = 0;
    *(_OWORD *)(v140 + 56) = 0u;
    v141 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v140 + 56), 0);
    if ((_DWORD)v141)
      geo::read_write_lock::logFailure(v141, (uint64_t)"initialization", v142);
    v143 = malloc_create_zone(0, 0);
    *(_QWORD *)(v140 + 48) = v143;
    malloc_set_zone_name(v143, "VectorKitLabels");
    *(_QWORD *)(v140 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v140;
    v59 = v48 + 360;
  }
  v61 = v52 ^ 1;
  *(_QWORD *)(v48 + 368) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v48 + 376) = 0;
  *(_QWORD *)(v48 + 352) = v59;
  v62 = v48 + 392;
  *(_QWORD *)(v48 + 392) = 0;
  {
    v144 = operator new();
    *(_QWORD *)(v144 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v144 + 24) = "VectorKitLabels";
    *(_OWORD *)(v144 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v144 = &off_1E42B5668;
    *(_QWORD *)(v144 + 8) = "VectorKitLabels";
    *(_OWORD *)(v144 + 72) = 0u;
    *(_OWORD *)(v144 + 88) = 0u;
    *(_OWORD *)(v144 + 104) = 0u;
    *(_OWORD *)(v144 + 120) = 0u;
    *(_OWORD *)(v144 + 136) = 0u;
    *(_OWORD *)(v144 + 152) = 0u;
    *(_OWORD *)(v144 + 168) = 0u;
    *(_OWORD *)(v144 + 184) = 0u;
    *(_OWORD *)(v144 + 200) = 0u;
    *(_OWORD *)(v144 + 216) = 0u;
    *(_OWORD *)(v144 + 232) = 0u;
    *(_QWORD *)(v144 + 248) = 0;
    *(_OWORD *)(v144 + 56) = 0u;
    v145 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v144 + 56), 0);
    if ((_DWORD)v145)
      geo::read_write_lock::logFailure(v145, (uint64_t)"initialization", v146);
    v147 = malloc_create_zone(0, 0);
    *(_QWORD *)(v144 + 48) = v147;
    malloc_set_zone_name(v147, "VectorKitLabels");
    *(_QWORD *)(v144 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v144;
    v62 = v48 + 392;
  }
  *(_QWORD *)(v48 + 400) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v48 + 408) = 0;
  *(_QWORD *)(v48 + 384) = v62;
  v64 = v48 + 424;
  *(_QWORD *)(v48 + 424) = 0;
  {
    v148 = operator new();
    *(_QWORD *)(v148 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v148 + 24) = "VectorKitLabels";
    *(_OWORD *)(v148 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v148 = &off_1E42B5668;
    *(_QWORD *)(v148 + 8) = "VectorKitLabels";
    *(_OWORD *)(v148 + 72) = 0u;
    *(_OWORD *)(v148 + 88) = 0u;
    *(_OWORD *)(v148 + 104) = 0u;
    *(_OWORD *)(v148 + 120) = 0u;
    *(_OWORD *)(v148 + 136) = 0u;
    *(_OWORD *)(v148 + 152) = 0u;
    *(_OWORD *)(v148 + 168) = 0u;
    *(_OWORD *)(v148 + 184) = 0u;
    *(_OWORD *)(v148 + 200) = 0u;
    *(_OWORD *)(v148 + 216) = 0u;
    *(_OWORD *)(v148 + 232) = 0u;
    *(_QWORD *)(v148 + 248) = 0;
    *(_OWORD *)(v148 + 56) = 0u;
    v149 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v148 + 56), 0);
    if ((_DWORD)v149)
      geo::read_write_lock::logFailure(v149, (uint64_t)"initialization", v150);
    v151 = malloc_create_zone(0, 0);
    *(_QWORD *)(v148 + 48) = v151;
    malloc_set_zone_name(v151, "VectorKitLabels");
    *(_QWORD *)(v148 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v148;
    v64 = v48 + 424;
  }
  *(_QWORD *)(v48 + 432) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v48 + 440) = 0;
  *(_QWORD *)(v48 + 416) = v64;
  *(_WORD *)(v48 + 448) = 256;
  *(_BYTE *)(v48 + 450) = v61;
  v66 = v48 + 464;
  *(_QWORD *)(v48 + 464) = 0;
  {
    v152 = operator new();
    *(_QWORD *)(v152 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v152 + 24) = "VectorKitLabels";
    *(_OWORD *)(v152 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v152 = &off_1E42B5668;
    *(_QWORD *)(v152 + 8) = "VectorKitLabels";
    *(_OWORD *)(v152 + 72) = 0u;
    *(_OWORD *)(v152 + 88) = 0u;
    *(_OWORD *)(v152 + 104) = 0u;
    *(_OWORD *)(v152 + 120) = 0u;
    *(_OWORD *)(v152 + 136) = 0u;
    *(_OWORD *)(v152 + 152) = 0u;
    *(_OWORD *)(v152 + 168) = 0u;
    *(_OWORD *)(v152 + 184) = 0u;
    *(_OWORD *)(v152 + 200) = 0u;
    *(_OWORD *)(v152 + 216) = 0u;
    *(_OWORD *)(v152 + 232) = 0u;
    *(_QWORD *)(v152 + 248) = 0;
    *(_OWORD *)(v152 + 56) = 0u;
    v153 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v152 + 56), 0);
    if ((_DWORD)v153)
      geo::read_write_lock::logFailure(v153, (uint64_t)"initialization", v154);
    v155 = malloc_create_zone(0, 0);
    *(_QWORD *)(v152 + 48) = v155;
    malloc_set_zone_name(v155, "VectorKitLabels");
    *(_QWORD *)(v152 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v152;
    v66 = v48 + 464;
  }
  *(_QWORD *)(v48 + 472) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v48 + 480) = 0;
  *(_QWORD *)(v48 + 456) = v66;
  v68 = v48 + 496;
  *(_QWORD *)(v48 + 496) = 0;
  {
    v156 = operator new();
    *(_QWORD *)(v156 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v156 + 24) = "VectorKitLabels";
    *(_OWORD *)(v156 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v156 = &off_1E42B5668;
    *(_QWORD *)(v156 + 8) = "VectorKitLabels";
    *(_OWORD *)(v156 + 72) = 0u;
    *(_OWORD *)(v156 + 88) = 0u;
    *(_OWORD *)(v156 + 104) = 0u;
    *(_OWORD *)(v156 + 120) = 0u;
    *(_OWORD *)(v156 + 136) = 0u;
    *(_OWORD *)(v156 + 152) = 0u;
    *(_OWORD *)(v156 + 168) = 0u;
    *(_OWORD *)(v156 + 184) = 0u;
    *(_OWORD *)(v156 + 200) = 0u;
    *(_OWORD *)(v156 + 216) = 0u;
    *(_OWORD *)(v156 + 232) = 0u;
    *(_QWORD *)(v156 + 248) = 0;
    *(_OWORD *)(v156 + 56) = 0u;
    v157 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v156 + 56), 0);
    if ((_DWORD)v157)
      geo::read_write_lock::logFailure(v157, (uint64_t)"initialization", v158);
    v159 = malloc_create_zone(0, 0);
    *(_QWORD *)(v156 + 48) = v159;
    malloc_set_zone_name(v159, "VectorKitLabels");
    *(_QWORD *)(v156 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v156;
    v68 = v48 + 496;
  }
  *(_QWORD *)(v48 + 504) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v48 + 512) = 0;
  *(_QWORD *)(v48 + 488) = v68;
  v70 = v48 + 528;
  *(_QWORD *)(v48 + 528) = 0;
  {
    v160 = operator new();
    *(_QWORD *)(v160 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v160 + 24) = "VectorKitLabels";
    *(_OWORD *)(v160 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v160 = &off_1E42B5668;
    *(_QWORD *)(v160 + 8) = "VectorKitLabels";
    *(_OWORD *)(v160 + 72) = 0u;
    *(_OWORD *)(v160 + 88) = 0u;
    *(_OWORD *)(v160 + 104) = 0u;
    *(_OWORD *)(v160 + 120) = 0u;
    *(_OWORD *)(v160 + 136) = 0u;
    *(_OWORD *)(v160 + 152) = 0u;
    *(_OWORD *)(v160 + 168) = 0u;
    *(_OWORD *)(v160 + 184) = 0u;
    *(_OWORD *)(v160 + 200) = 0u;
    *(_OWORD *)(v160 + 216) = 0u;
    *(_OWORD *)(v160 + 232) = 0u;
    *(_QWORD *)(v160 + 248) = 0;
    *(_OWORD *)(v160 + 56) = 0u;
    v161 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v160 + 56), 0);
    if ((_DWORD)v161)
      geo::read_write_lock::logFailure(v161, (uint64_t)"initialization", v162);
    v163 = malloc_create_zone(0, 0);
    *(_QWORD *)(v160 + 48) = v163;
    malloc_set_zone_name(v163, "VectorKitLabels");
    *(_QWORD *)(v160 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v160;
    v70 = v48 + 528;
  }
  *(_QWORD *)(v48 + 536) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v48 + 552) = 0;
  *(_QWORD *)(v48 + 544) = 0;
  *(_QWORD *)(v48 + 520) = v70;
  *(_QWORD *)(v48 + 568) = 0;
  *(_QWORD *)(v48 + 560) = 0;
  *(_QWORD *)(v48 + 584) = 0;
  {
    v164 = operator new();
    *(_QWORD *)(v164 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v164 + 24) = "VectorKitLabels";
    *(_OWORD *)(v164 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v164 = &off_1E42B5668;
    *(_QWORD *)(v164 + 8) = "VectorKitLabels";
    *(_OWORD *)(v164 + 72) = 0u;
    *(_OWORD *)(v164 + 88) = 0u;
    *(_OWORD *)(v164 + 104) = 0u;
    *(_OWORD *)(v164 + 120) = 0u;
    *(_OWORD *)(v164 + 136) = 0u;
    *(_OWORD *)(v164 + 152) = 0u;
    *(_OWORD *)(v164 + 168) = 0u;
    *(_OWORD *)(v164 + 184) = 0u;
    *(_OWORD *)(v164 + 200) = 0u;
    *(_OWORD *)(v164 + 216) = 0u;
    *(_OWORD *)(v164 + 232) = 0u;
    *(_QWORD *)(v164 + 248) = 0;
    *(_OWORD *)(v164 + 56) = 0u;
    v165 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v164 + 56), 0);
    if ((_DWORD)v165)
      geo::read_write_lock::logFailure(v165, (uint64_t)"initialization", v166);
    v167 = malloc_create_zone(0, 0);
    *(_QWORD *)(v164 + 48) = v167;
    malloc_set_zone_name(v167, "VectorKitLabels");
    *(_QWORD *)(v164 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v164;
  }
  *(_QWORD *)(v48 + 592) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v48 + 600) = 0;
  *(_QWORD *)(v48 + 576) = v48 + 584;
  *(_QWORD *)(v48 + 616) = 0;
  {
    v168 = operator new();
    *(_QWORD *)(v168 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v168 + 24) = "VectorKitLabels";
    *(_OWORD *)(v168 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v168 = &off_1E42B5668;
    *(_QWORD *)(v168 + 8) = "VectorKitLabels";
    *(_OWORD *)(v168 + 72) = 0u;
    *(_OWORD *)(v168 + 88) = 0u;
    *(_OWORD *)(v168 + 104) = 0u;
    *(_OWORD *)(v168 + 120) = 0u;
    *(_OWORD *)(v168 + 136) = 0u;
    *(_OWORD *)(v168 + 152) = 0u;
    *(_OWORD *)(v168 + 168) = 0u;
    *(_OWORD *)(v168 + 184) = 0u;
    *(_OWORD *)(v168 + 200) = 0u;
    *(_OWORD *)(v168 + 216) = 0u;
    *(_OWORD *)(v168 + 232) = 0u;
    *(_QWORD *)(v168 + 248) = 0;
    *(_OWORD *)(v168 + 56) = 0u;
    v169 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v168 + 56), 0);
    if ((_DWORD)v169)
      geo::read_write_lock::logFailure(v169, (uint64_t)"initialization", v170);
    v171 = malloc_create_zone(0, 0);
    *(_QWORD *)(v168 + 48) = v171;
    malloc_set_zone_name(v171, "VectorKitLabels");
    *(_QWORD *)(v168 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v168;
  }
  *(_QWORD *)(v48 + 624) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v48 + 632) = 0;
  *(_QWORD *)(v48 + 608) = v48 + 616;
  *(_QWORD *)(v48 + 648) = 0;
  {
    v172 = operator new();
    *(_QWORD *)(v172 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v172 + 24) = "VectorKitLabels";
    *(_OWORD *)(v172 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v172 = &off_1E42B5668;
    *(_QWORD *)(v172 + 8) = "VectorKitLabels";
    *(_OWORD *)(v172 + 72) = 0u;
    *(_OWORD *)(v172 + 88) = 0u;
    *(_OWORD *)(v172 + 104) = 0u;
    *(_OWORD *)(v172 + 120) = 0u;
    *(_OWORD *)(v172 + 136) = 0u;
    *(_OWORD *)(v172 + 152) = 0u;
    *(_OWORD *)(v172 + 168) = 0u;
    *(_OWORD *)(v172 + 184) = 0u;
    *(_OWORD *)(v172 + 200) = 0u;
    *(_OWORD *)(v172 + 216) = 0u;
    *(_OWORD *)(v172 + 232) = 0u;
    *(_QWORD *)(v172 + 248) = 0;
    *(_OWORD *)(v172 + 56) = 0u;
    v173 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v172 + 56), 0);
    if ((_DWORD)v173)
      geo::read_write_lock::logFailure(v173, (uint64_t)"initialization", v174);
    v175 = malloc_create_zone(0, 0);
    *(_QWORD *)(v172 + 48) = v175;
    malloc_set_zone_name(v175, "VectorKitLabels");
    *(_QWORD *)(v172 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v172;
  }
  *(_QWORD *)(v48 + 656) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v48 + 664) = 0;
  *(_QWORD *)(v48 + 640) = v48 + 648;
  *(_QWORD *)(v48 + 680) = 0;
  {
    v176 = operator new();
    *(_QWORD *)(v176 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v176 + 24) = "VectorKitLabels";
    *(_OWORD *)(v176 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v176 = &off_1E42B5668;
    *(_QWORD *)(v176 + 8) = "VectorKitLabels";
    *(_OWORD *)(v176 + 72) = 0u;
    *(_OWORD *)(v176 + 88) = 0u;
    *(_OWORD *)(v176 + 104) = 0u;
    *(_OWORD *)(v176 + 120) = 0u;
    *(_OWORD *)(v176 + 136) = 0u;
    *(_OWORD *)(v176 + 152) = 0u;
    *(_OWORD *)(v176 + 168) = 0u;
    *(_OWORD *)(v176 + 184) = 0u;
    *(_OWORD *)(v176 + 200) = 0u;
    *(_OWORD *)(v176 + 216) = 0u;
    *(_OWORD *)(v176 + 232) = 0u;
    *(_QWORD *)(v176 + 248) = 0;
    *(_OWORD *)(v176 + 56) = 0u;
    v177 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v176 + 56), 0);
    if ((_DWORD)v177)
      geo::read_write_lock::logFailure(v177, (uint64_t)"initialization", v178);
    v179 = malloc_create_zone(0, 0);
    *(_QWORD *)(v176 + 48) = v179;
    malloc_set_zone_name(v179, "VectorKitLabels");
    *(_QWORD *)(v176 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v176;
  }
  *(_QWORD *)(v48 + 688) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v48 + 696) = 0;
  *(_QWORD *)(v48 + 672) = v48 + 680;
  *(_DWORD *)(v48 + 704) = 0;
  v76 = -[LabelNavRouteContextObserverProxy initWithRouteContextChangeObserver:]([LabelNavRouteContextObserverProxy alloc], "initWithRouteContextChangeObserver:", v48);
  v77 = *(void **)(v48 + 120);
  *(_QWORD *)(v48 + 120) = v76;

  v78 = *v229;
  *v229 = (md::LabelNavEtaLabeler *)v48;
  if (v78)
  {
    md::LabelNavEtaLabeler::~LabelNavEtaLabeler(v78);
    MEMORY[0x1A1AF4E00]();
  }
  v79 = operator new();
  v80 = *((_QWORD *)this + 3);
  *(_QWORD *)v79 = &off_1E4292188;
  *(_QWORD *)(v79 + 8) = v80;
  *(_QWORD *)(v79 + 16) = &off_1E42B4B90;
  *(_QWORD *)(v79 + 24) = 0;
  *(_QWORD *)(v79 + 48) = 0;
  {
    v180 = operator new();
    *(_QWORD *)(v180 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v180 + 24) = "VectorKitLabels";
    *(_OWORD *)(v180 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v180 = &off_1E42B5668;
    *(_QWORD *)(v180 + 8) = "VectorKitLabels";
    *(_OWORD *)(v180 + 72) = 0u;
    *(_OWORD *)(v180 + 88) = 0u;
    *(_OWORD *)(v180 + 104) = 0u;
    *(_OWORD *)(v180 + 120) = 0u;
    *(_OWORD *)(v180 + 136) = 0u;
    *(_OWORD *)(v180 + 152) = 0u;
    *(_OWORD *)(v180 + 168) = 0u;
    *(_OWORD *)(v180 + 184) = 0u;
    *(_OWORD *)(v180 + 200) = 0u;
    *(_OWORD *)(v180 + 216) = 0u;
    *(_OWORD *)(v180 + 232) = 0u;
    *(_QWORD *)(v180 + 248) = 0;
    *(_OWORD *)(v180 + 56) = 0u;
    v181 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v180 + 56), 0);
    if ((_DWORD)v181)
      geo::read_write_lock::logFailure(v181, (uint64_t)"initialization", v182);
    v183 = malloc_create_zone(0, 0);
    *(_QWORD *)(v180 + 48) = v183;
    malloc_set_zone_name(v183, "VectorKitLabels");
    *(_QWORD *)(v180 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v180;
  }
  *(_QWORD *)(v79 + 56) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v79 + 64) = 0;
  *(_QWORD *)(v79 + 40) = v79 + 48;
  *(_OWORD *)(v79 + 72) = 0u;
  *(_OWORD *)(v79 + 88) = 0u;
  *(_QWORD *)(v79 + 104) = 0;
  {
    v184 = operator new();
    *(_QWORD *)(v184 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v184 + 24) = "VectorKitLabels";
    *(_OWORD *)(v184 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v184 = &off_1E42B5668;
    *(_QWORD *)(v184 + 8) = "VectorKitLabels";
    *(_OWORD *)(v184 + 72) = 0u;
    *(_OWORD *)(v184 + 88) = 0u;
    *(_OWORD *)(v184 + 104) = 0u;
    *(_OWORD *)(v184 + 120) = 0u;
    *(_OWORD *)(v184 + 136) = 0u;
    *(_OWORD *)(v184 + 152) = 0u;
    *(_OWORD *)(v184 + 168) = 0u;
    *(_OWORD *)(v184 + 184) = 0u;
    *(_OWORD *)(v184 + 200) = 0u;
    *(_OWORD *)(v184 + 216) = 0u;
    *(_OWORD *)(v184 + 232) = 0u;
    *(_QWORD *)(v184 + 248) = 0;
    *(_OWORD *)(v184 + 56) = 0u;
    v185 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v184 + 56), 0);
    if ((_DWORD)v185)
      geo::read_write_lock::logFailure(v185, (uint64_t)"initialization", v186);
    v187 = malloc_create_zone(0, 0);
    *(_QWORD *)(v184 + 48) = v187;
    malloc_set_zone_name(v187, "VectorKitLabels");
    *(_QWORD *)(v184 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v184;
  }
  v83 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v79 + 120) = 0;
  *(_QWORD *)(v79 + 112) = v83;
  *(_QWORD *)(v79 + 128) = 0;
  {
    v188 = operator new();
    *(_QWORD *)(v188 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v188 + 24) = "VectorKitLabels";
    *(_OWORD *)(v188 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v188 = &off_1E42B5668;
    *(_QWORD *)(v188 + 8) = "VectorKitLabels";
    *(_OWORD *)(v188 + 72) = 0u;
    *(_OWORD *)(v188 + 88) = 0u;
    *(_OWORD *)(v188 + 104) = 0u;
    *(_OWORD *)(v188 + 120) = 0u;
    *(_OWORD *)(v188 + 136) = 0u;
    *(_OWORD *)(v188 + 152) = 0u;
    *(_OWORD *)(v188 + 168) = 0u;
    *(_OWORD *)(v188 + 184) = 0u;
    *(_OWORD *)(v188 + 200) = 0u;
    *(_OWORD *)(v188 + 216) = 0u;
    *(_OWORD *)(v188 + 232) = 0u;
    *(_QWORD *)(v188 + 248) = 0;
    *(_OWORD *)(v188 + 56) = 0u;
    v189 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v188 + 56), 0);
    if ((_DWORD)v189)
      geo::read_write_lock::logFailure(v189, (uint64_t)"initialization", v190);
    v191 = malloc_create_zone(0, 0);
    *(_QWORD *)(v188 + 48) = v191;
    malloc_set_zone_name(v191, "VectorKitLabels");
    *(_QWORD *)(v188 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v188;
  }
  *(_QWORD *)(v79 + 136) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v79 + 144) = 0;
  {
    v192 = operator new();
    *(_QWORD *)(v192 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v192 + 24) = "VectorKitLabels";
    *(_OWORD *)(v192 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v192 = &off_1E42B5668;
    *(_QWORD *)(v192 + 8) = "VectorKitLabels";
    *(_OWORD *)(v192 + 72) = 0u;
    *(_OWORD *)(v192 + 88) = 0u;
    *(_OWORD *)(v192 + 104) = 0u;
    *(_OWORD *)(v192 + 120) = 0u;
    *(_OWORD *)(v192 + 136) = 0u;
    *(_OWORD *)(v192 + 152) = 0u;
    *(_OWORD *)(v192 + 168) = 0u;
    *(_OWORD *)(v192 + 184) = 0u;
    *(_OWORD *)(v192 + 200) = 0u;
    *(_OWORD *)(v192 + 216) = 0u;
    *(_OWORD *)(v192 + 232) = 0u;
    *(_QWORD *)(v192 + 248) = 0;
    *(_OWORD *)(v192 + 56) = 0u;
    v193 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v192 + 56), 0);
    if ((_DWORD)v193)
      geo::read_write_lock::logFailure(v193, (uint64_t)"initialization", v194);
    v195 = malloc_create_zone(0, 0);
    *(_QWORD *)(v192 + 48) = v195;
    malloc_set_zone_name(v195, "VectorKitLabels");
    *(_QWORD *)(v192 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v192;
  }
  *(_QWORD *)(v79 + 152) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v79 + 160) = 0;
  *(_DWORD *)(v79 + 168) = 1065353216;
  *(_QWORD *)(v79 + 176) = &off_1E42B5290;
  *(_QWORD *)(v79 + 184) = 0;
  *(_QWORD *)(v79 + 200) = 0;
  *(_BYTE *)(v79 + 208) = 0;
  *(_QWORD *)(v79 + 212) = 0xBF80000000000000;
  *(_QWORD *)(v79 + 224) = 0;
  *(_DWORD *)(v79 + 232) = 0;
  *(_QWORD *)(v79 + 240) = 0;
  *(_QWORD *)(v79 + 247) = 0;
  *(_OWORD *)(v79 + 256) = 0u;
  *(_OWORD *)(v79 + 272) = 0u;
  *(_OWORD *)(v79 + 288) = 0u;
  *(_QWORD *)(v79 + 304) = 0;
  {
    v196 = operator new();
    *(_QWORD *)(v196 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v196 + 24) = "VectorKitLabels";
    *(_OWORD *)(v196 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v196 = &off_1E42B5668;
    *(_QWORD *)(v196 + 8) = "VectorKitLabels";
    *(_OWORD *)(v196 + 72) = 0u;
    *(_OWORD *)(v196 + 88) = 0u;
    *(_OWORD *)(v196 + 104) = 0u;
    *(_OWORD *)(v196 + 120) = 0u;
    *(_OWORD *)(v196 + 136) = 0u;
    *(_OWORD *)(v196 + 152) = 0u;
    *(_OWORD *)(v196 + 168) = 0u;
    *(_OWORD *)(v196 + 184) = 0u;
    *(_OWORD *)(v196 + 200) = 0u;
    *(_OWORD *)(v196 + 216) = 0u;
    *(_OWORD *)(v196 + 232) = 0u;
    *(_QWORD *)(v196 + 248) = 0;
    *(_OWORD *)(v196 + 56) = 0u;
    v197 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v196 + 56), 0);
    if ((_DWORD)v197)
      geo::read_write_lock::logFailure(v197, (uint64_t)"initialization", v198);
    v199 = malloc_create_zone(0, 0);
    *(_QWORD *)(v196 + 48) = v199;
    malloc_set_zone_name(v199, "VectorKitLabels");
    *(_QWORD *)(v196 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v196;
  }
  *(_QWORD *)(v79 + 312) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v79 + 328) = 0;
  {
    v200 = operator new();
    *(_QWORD *)(v200 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v200 + 24) = "VectorKitLabels";
    *(_OWORD *)(v200 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v200 = &off_1E42B5668;
    *(_QWORD *)(v200 + 8) = "VectorKitLabels";
    *(_OWORD *)(v200 + 72) = 0u;
    *(_OWORD *)(v200 + 88) = 0u;
    *(_OWORD *)(v200 + 104) = 0u;
    *(_OWORD *)(v200 + 120) = 0u;
    *(_OWORD *)(v200 + 136) = 0u;
    *(_OWORD *)(v200 + 152) = 0u;
    *(_OWORD *)(v200 + 168) = 0u;
    *(_OWORD *)(v200 + 184) = 0u;
    *(_OWORD *)(v200 + 200) = 0u;
    *(_OWORD *)(v200 + 216) = 0u;
    *(_OWORD *)(v200 + 232) = 0u;
    *(_QWORD *)(v200 + 248) = 0;
    *(_OWORD *)(v200 + 56) = 0u;
    v201 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v200 + 56), 0);
    if ((_DWORD)v201)
      geo::read_write_lock::logFailure(v201, (uint64_t)"initialization", v202);
    v203 = malloc_create_zone(0, 0);
    *(_QWORD *)(v200 + 48) = v203;
    malloc_set_zone_name(v203, "VectorKitLabels");
    *(_QWORD *)(v200 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v200;
  }
  *(_QWORD *)(v79 + 336) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v79 + 344) = 0;
  *(_QWORD *)(v79 + 320) = v79 + 328;
  *(_QWORD *)(v79 + 352) = &off_1E42B4A30;
  *(_QWORD *)(v79 + 360) = 0;
  *(_QWORD *)(v79 + 376) = &off_1E4274658;
  *(_QWORD *)(v79 + 384) = 0;
  *(_BYTE *)(v79 + 254) = *(_QWORD *)(v80 + 184) != 0;
  v87 = -[LabelNavRouteContextObserverProxy initWithRouteContextChangeObserver:]([LabelNavRouteContextObserverProxy alloc], "initWithRouteContextChangeObserver:", v79);
  v88 = *(void **)(v79 + 184);
  *(_QWORD *)(v79 + 184) = v87;

  v89 = (_QWORD *)operator new();
  *v89 = v80;
  v90 = *(_QWORD *)(v79 + 256);
  *(_QWORD *)(v79 + 256) = v89;
  if (v90)
    MEMORY[0x1A1AF4E00](v90, 0x20C4093837F09);
  v91 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v79;
  if (v91)
    (*(void (**)(uint64_t))(*(_QWORD *)v91 + 16))(v91);
  v92 = operator new();
  *(_QWORD *)v92 = *((_QWORD *)this + 3);
  *(_QWORD *)(v92 + 8) = &off_1E42B53F0;
  *(_QWORD *)(v92 + 16) = 0;
  v93 = operator new(0x70uLL);
  v93[1] = 0;
  v93[2] = 0;
  *v93 = &off_1E42DD8C0;
  *(_QWORD *)(v92 + 32) = md::RouteAnnotationDedupingGroup::RouteAnnotationDedupingGroup((uint64_t)(v93 + 3), 0x100000003uLL);
  *(_QWORD *)(v92 + 40) = v93;
  *(_QWORD *)(v92 + 56) = 0;
  *(_QWORD *)(v92 + 64) = 0;
  *(_QWORD *)(v92 + 48) = 0;
  {
    v204 = operator new();
    *(_QWORD *)(v204 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v204 + 24) = "VectorKitLabels";
    *(_OWORD *)(v204 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v204 = &off_1E42B5668;
    *(_QWORD *)(v204 + 8) = "VectorKitLabels";
    *(_OWORD *)(v204 + 72) = 0u;
    *(_OWORD *)(v204 + 88) = 0u;
    *(_OWORD *)(v204 + 104) = 0u;
    *(_OWORD *)(v204 + 120) = 0u;
    *(_OWORD *)(v204 + 136) = 0u;
    *(_OWORD *)(v204 + 152) = 0u;
    *(_OWORD *)(v204 + 168) = 0u;
    *(_OWORD *)(v204 + 184) = 0u;
    *(_OWORD *)(v204 + 200) = 0u;
    *(_OWORD *)(v204 + 216) = 0u;
    *(_OWORD *)(v204 + 232) = 0u;
    *(_QWORD *)(v204 + 248) = 0;
    *(_OWORD *)(v204 + 56) = 0u;
    v205 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v204 + 56), 0);
    if ((_DWORD)v205)
      geo::read_write_lock::logFailure(v205, (uint64_t)"initialization", v206);
    v207 = malloc_create_zone(0, 0);
    *(_QWORD *)(v204 + 48) = v207;
    malloc_set_zone_name(v207, "VectorKitLabels");
    *(_QWORD *)(v204 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v204;
  }
  *(_QWORD *)(v92 + 72) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v92 + 80) = 0;
  *(_QWORD *)(v92 + 88) = 0;
  *(_QWORD *)(v92 + 96) = 0;
  {
    v208 = operator new();
    *(_QWORD *)(v208 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v208 + 24) = "VectorKitLabels";
    *(_OWORD *)(v208 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v208 = &off_1E42B5668;
    *(_QWORD *)(v208 + 8) = "VectorKitLabels";
    *(_OWORD *)(v208 + 72) = 0u;
    *(_OWORD *)(v208 + 88) = 0u;
    *(_OWORD *)(v208 + 104) = 0u;
    *(_OWORD *)(v208 + 120) = 0u;
    *(_OWORD *)(v208 + 136) = 0u;
    *(_OWORD *)(v208 + 152) = 0u;
    *(_OWORD *)(v208 + 168) = 0u;
    *(_OWORD *)(v208 + 184) = 0u;
    *(_OWORD *)(v208 + 200) = 0u;
    *(_OWORD *)(v208 + 216) = 0u;
    *(_OWORD *)(v208 + 232) = 0u;
    *(_QWORD *)(v208 + 248) = 0;
    *(_OWORD *)(v208 + 56) = 0u;
    v209 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v208 + 56), 0);
    if ((_DWORD)v209)
      geo::read_write_lock::logFailure(v209, (uint64_t)"initialization", v210);
    v211 = malloc_create_zone(0, 0);
    *(_QWORD *)(v208 + 48) = v211;
    malloc_set_zone_name(v211, "VectorKitLabels");
    *(_QWORD *)(v208 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v208;
  }
  *(_QWORD *)(v92 + 104) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v92 + 112) = 0;
  *(_QWORD *)(v92 + 120) = 0;
  *(_QWORD *)(v92 + 128) = 0;
  {
    v212 = operator new();
    *(_QWORD *)(v212 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v212 + 24) = "VectorKitLabels";
    *(_OWORD *)(v212 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v212 = &off_1E42B5668;
    *(_QWORD *)(v212 + 8) = "VectorKitLabels";
    *(_OWORD *)(v212 + 72) = 0u;
    *(_OWORD *)(v212 + 88) = 0u;
    *(_OWORD *)(v212 + 104) = 0u;
    *(_OWORD *)(v212 + 120) = 0u;
    *(_OWORD *)(v212 + 136) = 0u;
    *(_OWORD *)(v212 + 152) = 0u;
    *(_OWORD *)(v212 + 168) = 0u;
    *(_OWORD *)(v212 + 184) = 0u;
    *(_OWORD *)(v212 + 200) = 0u;
    *(_OWORD *)(v212 + 216) = 0u;
    *(_OWORD *)(v212 + 232) = 0u;
    *(_QWORD *)(v212 + 248) = 0;
    *(_OWORD *)(v212 + 56) = 0u;
    v213 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v212 + 56), 0);
    if ((_DWORD)v213)
      geo::read_write_lock::logFailure(v213, (uint64_t)"initialization", v214);
    v215 = malloc_create_zone(0, 0);
    *(_QWORD *)(v212 + 48) = v215;
    malloc_set_zone_name(v215, "VectorKitLabels");
    *(_QWORD *)(v212 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v212;
  }
  *(_QWORD *)(v92 + 136) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v92 + 144) = 0;
  *(_QWORD *)(v92 + 152) = 0;
  *(_QWORD *)(v92 + 160) = 0;
  {
    v216 = operator new();
    *(_QWORD *)(v216 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v216 + 24) = "VectorKitLabels";
    *(_OWORD *)(v216 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v216 = &off_1E42B5668;
    *(_QWORD *)(v216 + 8) = "VectorKitLabels";
    *(_OWORD *)(v216 + 72) = 0u;
    *(_OWORD *)(v216 + 88) = 0u;
    *(_OWORD *)(v216 + 104) = 0u;
    *(_OWORD *)(v216 + 120) = 0u;
    *(_OWORD *)(v216 + 136) = 0u;
    *(_OWORD *)(v216 + 152) = 0u;
    *(_OWORD *)(v216 + 168) = 0u;
    *(_OWORD *)(v216 + 184) = 0u;
    *(_OWORD *)(v216 + 200) = 0u;
    *(_OWORD *)(v216 + 216) = 0u;
    *(_OWORD *)(v216 + 232) = 0u;
    *(_QWORD *)(v216 + 248) = 0;
    *(_OWORD *)(v216 + 56) = 0u;
    v217 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v216 + 56), 0);
    if ((_DWORD)v217)
      geo::read_write_lock::logFailure(v217, (uint64_t)"initialization", v218);
    v219 = malloc_create_zone(0, 0);
    *(_QWORD *)(v216 + 48) = v219;
    malloc_set_zone_name(v219, "VectorKitLabels");
    *(_QWORD *)(v216 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v216;
  }
  v98 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v92 + 176) = 0;
  *(_QWORD *)(v92 + 184) = 0;
  *(_QWORD *)(v92 + 168) = v98;
  {
    v220 = operator new();
    *(_QWORD *)(v220 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v220 + 24) = "VectorKitLabels";
    *(_OWORD *)(v220 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v220 = &off_1E42B5668;
    *(_QWORD *)(v220 + 8) = "VectorKitLabels";
    *(_OWORD *)(v220 + 72) = 0u;
    *(_OWORD *)(v220 + 88) = 0u;
    *(_OWORD *)(v220 + 104) = 0u;
    *(_OWORD *)(v220 + 120) = 0u;
    *(_OWORD *)(v220 + 136) = 0u;
    *(_OWORD *)(v220 + 152) = 0u;
    *(_OWORD *)(v220 + 168) = 0u;
    *(_OWORD *)(v220 + 184) = 0u;
    *(_OWORD *)(v220 + 200) = 0u;
    *(_OWORD *)(v220 + 216) = 0u;
    *(_OWORD *)(v220 + 232) = 0u;
    *(_QWORD *)(v220 + 248) = 0;
    *(_OWORD *)(v220 + 56) = 0u;
    v221 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v220 + 56), 0);
    if ((_DWORD)v221)
      geo::read_write_lock::logFailure(v221, (uint64_t)"initialization", v222);
    v223 = malloc_create_zone(0, 0);
    *(_QWORD *)(v220 + 48) = v223;
    malloc_set_zone_name(v223, "VectorKitLabels");
    *(_QWORD *)(v220 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v220;
  }
  *(_QWORD *)(v92 + 192) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v92 + 200) = 0;
  {
    v224 = operator new();
    *(_QWORD *)(v224 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v224 + 24) = "VectorKitLabels";
    *(_OWORD *)(v224 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v224 = &off_1E42B5668;
    *(_QWORD *)(v224 + 8) = "VectorKitLabels";
    *(_OWORD *)(v224 + 72) = 0u;
    *(_OWORD *)(v224 + 88) = 0u;
    *(_OWORD *)(v224 + 104) = 0u;
    *(_OWORD *)(v224 + 120) = 0u;
    *(_OWORD *)(v224 + 136) = 0u;
    *(_OWORD *)(v224 + 152) = 0u;
    *(_OWORD *)(v224 + 168) = 0u;
    *(_OWORD *)(v224 + 184) = 0u;
    *(_OWORD *)(v224 + 200) = 0u;
    *(_OWORD *)(v224 + 216) = 0u;
    *(_OWORD *)(v224 + 232) = 0u;
    *(_QWORD *)(v224 + 248) = 0;
    *(_OWORD *)(v224 + 56) = 0u;
    v225 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v224 + 56), 0);
    if ((_DWORD)v225)
      geo::read_write_lock::logFailure(v225, (uint64_t)"initialization", v226);
    v227 = malloc_create_zone(0, 0);
    *(_QWORD *)(v224 + 48) = v227;
    malloc_set_zone_name(v227, "VectorKitLabels");
    *(_QWORD *)(v224 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v224;
  }
  *(_QWORD *)(v92 + 208) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v92 + 216) = 0;
  *(_DWORD *)(v92 + 224) = 1065353216;
  *(_BYTE *)(v92 + 232) = 0;
  v100 = *v228;
  *v228 = (md::RouteAnnotationSupport *)v92;
  if (v100)
  {
    md::RouteAnnotationSupport::~RouteAnnotationSupport(v100);
    MEMORY[0x1A1AF4E00]();
  }
  (*(void (**)(md::MapNavLabeler *))(*(_QWORD *)this + 544))(this);
  return this;
}

void sub_19F308FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  std::__shared_weak_count::~__shared_weak_count(v30);
  operator delete(v34);
  v35 = *(void **)(v32 + 16);
  *(_QWORD *)(v32 + 8) = v31;

  MEMORY[0x1A1AF4E00](v32, 0x10A0C40A2395D72);
  v36 = *(_QWORD *)(v29 + 776);
  if (v36)
  {
    *(_QWORD *)(v29 + 784) = v36;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v29 + 800) + 40))(*(_QWORD *)(v29 + 800), v36, *(_QWORD *)(v29 + 792) - v36);
  }
  std::vector<md::RouteFeatureAnchorWithPixelBounds,geo::StdAllocator<md::RouteFeatureAnchorWithPixelBounds,mdm::Allocator>>::~vector[abi:nn180100]((uint64_t *)(v29 + 736));
  v37 = *(_QWORD *)(v29 + 704);
  if (v37)
  {
    *(_QWORD *)(v29 + 712) = v37;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v29 + 728) + 40))(*(_QWORD *)(v29 + 728), v37, *(_QWORD *)(v29 + 720) - v37);
  }
  std::unique_ptr<VKLabelNavArtworkCache>::~unique_ptr[abi:nn180100](*(VKLabelNavArtworkCache ***)(v33 - 96));
  std::unique_ptr<md::LabelNavEtaLabeler>::~unique_ptr[abi:nn180100](*(md::LabelNavEtaLabeler ***)(v33 - 104));
  std::vector<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,geo::StdAllocator<geo::_retain_ptr<VKLabelNavRoadLabel * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,mdm::Allocator>>::~vector[abi:nn180100]((uint64_t *)(v29 + 648));
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100]((uint64_t *)(v29 + 616));
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](*(uint64_t **)(v33 - 128));
  md::LabelNavLayoutContext::~LabelNavLayoutContext((md::LabelNavLayoutContext *)(v29 + 360));
  md::LabelNavLayoutContext::~LabelNavLayoutContext((md::LabelNavLayoutContext *)(v29 + 136));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](*(_QWORD *)(v33 - 120));
  *(_QWORD *)(v29 + 80) = &off_1E42B4B90;

  std::unique_ptr<md::RouteAnnotationSupport>::~unique_ptr[abi:nn180100](*(md::RouteAnnotationSupport ***)(v33 - 112));
  v38 = *(_QWORD *)(v29 + 64);
  *(_QWORD *)(v29 + 64) = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);

  *(_QWORD *)(v29 + 32) = &off_1E42B4ED0;
  _Unwind_Resume(a1);
}

md::LabelDedupingGroup *md::LabelDedupingGroup::LabelDedupingGroup(md::LabelDedupingGroup *this)
{
  unsigned __int8 v2;
  float *v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  *(_QWORD *)this = &off_1E4294980;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v3 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v2 & 1) == 0)
  {
    v3 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
    if (v26)
    {
      v27 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v27, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v3 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
    }
  }
  v4 = mdm::Allocator::instance(void)::alloc;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = v4;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  if ((v5 & 1) == 0)
  {
    v3 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    if (v28)
    {
      v29 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v29, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v3 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    }
  }
  v6 = *((_QWORD *)v3 + 299);
  *((_QWORD *)this + 8) = v6;
  *((_QWORD *)this + 9) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7 == *((_QWORD *)this + 5))
  {
    v8 = *((_QWORD *)this + 6);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, 8, 8);
    v10 = v8 - v7;
    v11 = v9 + ((v8 - v7) & 0xFFFFFFFFFFFFFFF8);
    v13 = *((_QWORD *)this + 5);
    v12 = *((_QWORD *)this + 6);
    v14 = v12 - v13;
    if (v12 == v13)
    {
      v16 = v9 + ((v8 - v7) & 0xFFFFFFFFFFFFFFF8);
      goto LABEL_14;
    }
    v15 = v14 - 8;
    if ((unint64_t)(v14 - 8) >= 0x58)
    {
      v16 = v9 + ((v8 - v7) & 0xFFFFFFFFFFFFFFF8);
      if (v12 - ((v10 & 0xFFFFFFFFFFFFFFF8) + v9) >= 0x20)
      {
        v17 = v10 >> 3;
        v18 = (v15 >> 3) + 1;
        v19 = (_OWORD *)(v9 + 8 * v17 - 16);
        v20 = (__int128 *)(v12 - 16);
        v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v22 = *v20;
          *(v19 - 1) = *(v20 - 1);
          *v19 = v22;
          v19 -= 2;
          v20 -= 2;
          v21 -= 4;
        }
        while (v21);
        v16 = v11 - 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        v12 -= 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        if (v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_13;
      }
    }
    else
    {
      v16 = v9 + ((v8 - v7) & 0xFFFFFFFFFFFFFFF8);
    }
    do
    {
      v23 = *(_QWORD *)(v12 - 8);
      v12 -= 8;
      *(_QWORD *)(v16 - 8) = v23;
      v16 -= 8;
    }
    while (v12 != v13);
LABEL_13:
    v12 = *((_QWORD *)this + 5);
LABEL_14:
    *((_QWORD *)this + 5) = v16;
    *((_QWORD *)this + 6) = v11;
    v24 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v9 + 8;
    if (v12)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v12, v24 - v12);
  }
  return this;
}

void sub_19F309B28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;

  v4 = v2;
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 48) = v6;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 64) + 40))(*(_QWORD *)(v1 + 64), v6, *(_QWORD *)(v1 + 56) - v6);
    v7 = *v3;
    if (!*v3)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v7 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 16) = v7;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 32) + 40))(*(_QWORD *)(v1 + 32), v7, *(_QWORD *)(v1 + 24) - v7);
  _Unwind_Resume(exception_object);
}

void sub_19F309FF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *geo::range_map<geo::Unit<geo::RadianUnitDescription,float>,md::OrientationAction,std::less<geo::Unit<geo::RadianUnitDescription,float>>,std::allocator<std::pair<gm::Range<geo::Unit<geo::RadianUnitDescription,float>> const,md::OrientationAction>>>::insert(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t **v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  BOOL v9;
  uint64_t **v10;
  unint64_t v11;
  float *v12;
  uint64_t *v13;
  uint64_t v14;
  float *v15;
  float *v17;
  uint64_t v18;
  float v19;
  uint64_t **v20;
  float v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  float v25;
  float *v26;
  uint64_t v27;
  uint64_t *v28;

  v3 = result;
  if (result[2])
  {
    v4 = (uint64_t **)(result + 1);
    if ((uint64_t *)*result == result + 1)
    {
      v10 = (uint64_t **)*result;
    }
    else
    {
      v5 = 0;
      v6 = (uint64_t *)*result;
      do
      {
        v7 = (uint64_t *)v6[1];
        if (v7)
        {
          do
          {
            v8 = (uint64_t **)v7;
            v7 = (uint64_t *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (uint64_t **)v6[2];
            v9 = *v8 == v6;
            v6 = (uint64_t *)v8;
          }
          while (!v9);
        }
        ++v5;
        v6 = (uint64_t *)v8;
      }
      while (v8 != v4);
      v10 = (uint64_t **)*result;
      do
      {
        v11 = v5 >> 1;
        v12 = (float *)v10;
        if (v5 != 1)
        {
          v14 = v5 >> 1;
          v15 = (float *)v10;
          do
          {
            v17 = (float *)*((_QWORD *)v15 + 1);
            if (v17)
            {
              do
              {
                v12 = v17;
                v17 = *(float **)v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v12 = (float *)*((_QWORD *)v15 + 2);
                v9 = *(_QWORD *)v12 == (_QWORD)v15;
                v15 = v12;
              }
              while (!v9);
            }
            v15 = v12;
          }
          while (v14-- > 1);
        }
        if (v12[8] < *(float *)(a2 + 4))
        {
          v13 = (uint64_t *)*((_QWORD *)v12 + 1);
          if (v13)
          {
            do
            {
              v10 = (uint64_t **)v13;
              v13 = (uint64_t *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              v10 = (uint64_t **)*((_QWORD *)v12 + 2);
              v9 = *v10 == (uint64_t *)v12;
              v12 = (float *)v10;
            }
            while (!v9);
          }
          v11 = v5 + ~v11;
        }
        v5 = v11;
      }
      while (v11);
    }
    if (v10 == v4 || *((float *)v10 + 7) >= *(float *)(a2 + 4))
    {
      if (v10 == (uint64_t **)*result)
        goto LABEL_46;
      v22 = *v10;
      if (*v10)
      {
        do
        {
          v23 = v22;
          v22 = (uint64_t *)v22[1];
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = v10[2];
          v9 = *v23 == (_QWORD)v10;
          v10 = (uint64_t **)v23;
        }
        while (v9);
      }
      if (*(float *)a2 >= *((float *)v23 + 8))
      {
LABEL_46:
        v24 = *v4;
        v19 = *(float *)(a2 + 4);
        v20 = (uint64_t **)(result + 1);
        if (!*v4)
          goto LABEL_53;
        while (1)
        {
          while (1)
          {
            v20 = (uint64_t **)v24;
            v25 = *((float *)v24 + 8);
            if (v19 >= v25)
              break;
            v24 = (uint64_t *)*v24;
            v4 = v20;
            if (!*v20)
              goto LABEL_53;
          }
          if (v25 >= v19)
            break;
          v24 = (uint64_t *)v24[1];
          if (!v24)
            goto LABEL_52;
        }
      }
    }
  }
  else
  {
    v4 = (uint64_t **)(result + 1);
    v18 = result[1];
    v19 = *(float *)(a2 + 4);
    if (!v18)
    {
      v20 = (uint64_t **)(result + 1);
LABEL_53:
      v26 = (float *)operator new(0x28uLL);
      v26[7] = *(float *)a2;
      v26[8] = v19;
      *((_BYTE *)v26 + 36) = *(_BYTE *)(a2 + 8);
      *(_QWORD *)v26 = 0;
      *((_QWORD *)v26 + 1) = 0;
      *((_QWORD *)v26 + 2) = v20;
      *v4 = (uint64_t *)v26;
      v27 = *(_QWORD *)*v3;
      if (v27)
      {
        *v3 = v27;
        v28 = *v4;
      }
      else
      {
        v28 = (uint64_t *)v26;
      }
      result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[1], v28);
      ++v3[2];
      return result;
    }
    while (1)
    {
      while (1)
      {
        v20 = (uint64_t **)v18;
        v21 = *(float *)(v18 + 32);
        if (v19 >= v21)
          break;
        v18 = *(_QWORD *)v18;
        v4 = v20;
        if (!*v20)
          goto LABEL_53;
      }
      if (v21 >= v19)
        break;
      v18 = *(_QWORD *)(v18 + 8);
      if (!v18)
      {
LABEL_52:
        v4 = v20 + 1;
        goto LABEL_53;
      }
    }
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;

  v2 = result;
  if (!a2)
  {
    v14 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    if (v14)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 16) + 40))(*(_QWORD *)(result + 16), v14, 8 * *(_QWORD *)(result + 8));
    *(_QWORD *)(v2 + 8) = 0;
    return result;
  }
  result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 16) + 16))(*(_QWORD *)(result + 16), 8 * a2, 8);
  v4 = *(_QWORD *)v2;
  *(_QWORD *)v2 = result;
  if (v4)
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 16) + 40))(*(_QWORD *)(v2 + 16), v4, 8 * *(_QWORD *)(v2 + 8));
  v5 = 0;
  *(_QWORD *)(v2 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)v2 + 8 * v5++) = 0;
  while (a2 != v5);
  v7 = v2 + 24;
  v6 = *(_QWORD **)(v2 + 24);
  if (v6)
  {
    v8 = v6[1];
    v9 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v10 = v8 & v9;
      *(_QWORD *)(*(_QWORD *)v2 + 8 * v10) = v7;
      while (1)
      {
        v11 = (_QWORD *)*v6;
        if (!*v6)
          break;
        v12 = v11[1] & v9;
        if (v12 == v10)
        {
          v6 = (_QWORD *)*v6;
        }
        else if (*(_QWORD *)(*(_QWORD *)v2 + 8 * v12))
        {
          *v6 = *v11;
          v13 = 8 * v12;
          *v11 = **(_QWORD **)(*(_QWORD *)v2 + v13);
          **(_QWORD **)(*(_QWORD *)v2 + v13) = v11;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v2 + 8 * v12) = v6;
          v6 = v11;
          v10 = v12;
        }
      }
      return result;
    }
    if (v8 >= a2)
      v8 %= a2;
    *(_QWORD *)(*(_QWORD *)v2 + 8 * v8) = v7;
    v15 = (_QWORD *)*v6;
    if (*v6)
    {
      do
      {
        v17 = v15[1];
        if (v17 >= a2)
          v17 %= a2;
        if (v17 != v8)
        {
          if (!*(_QWORD *)(*(_QWORD *)v2 + 8 * v17))
          {
            *(_QWORD *)(*(_QWORD *)v2 + 8 * v17) = v6;
            goto LABEL_25;
          }
          *v6 = *v15;
          v16 = 8 * v17;
          *v15 = **(_QWORD **)(*(_QWORD *)v2 + v16);
          **(_QWORD **)(*(_QWORD *)v2 + v16) = v15;
          v15 = v6;
        }
        v17 = v8;
LABEL_25:
        v6 = v15;
        v15 = (_QWORD *)*v15;
        v8 = v17;
      }
      while (v15);
    }
  }
  return result;
}

void sub_19F30A6C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void md::OcclusionManager::flushQueuedQueries(int64x2_t *this)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  void **v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  int64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  BOOL v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 *v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  unint64_t v84;
  char *v85;
  unint64_t v86;
  char *v87;
  int64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 *v94;
  char *v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t *v102;
  char *v103;
  void *v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  unint64_t v127;
  int64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 *v134;
  char *v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  unint64_t v146;
  char *v147;
  char *v148;
  unint64_t v149;
  int64_t v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __int128 *v156;
  char *v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  _QWORD *v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  __int128 *v188;
  __int128 *v189;
  __int128 v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __int128 *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  __int128 *v200;
  __int128 v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  __int128 v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  uint64_t v225;
  char *v226;
  char *v227;
  char *v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  char *v234;
  unint64_t v235;
  char *v236;
  char *v237;
  unint64_t v238;
  char *v239;
  int64_t v240;
  unint64_t v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  __int128 *v246;
  char *v247;
  uint64_t v248;
  __int128 v249;
  uint64_t v250;
  _QWORD *v251;
  char *v252;
  _QWORD *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  char *v259;
  uint64_t v260;
  unint64_t v261;
  char *v262;
  unint64_t v263;
  int64_t v264;
  unint64_t v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  __int128 *v270;
  char *v271;
  uint64_t v272;
  __int128 v273;
  uint64_t v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  char *v280;
  unint64_t v281;
  char *v282;
  char *v283;
  unint64_t v284;
  int64_t v285;
  unint64_t v286;
  char *v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  __int128 *v292;
  char *v293;
  uint64_t v294;
  __int128 v295;
  uint64_t v296;
  void *v297;
  uint64_t j;
  uint64_t v299;
  uint64_t v300;
  char *v301;
  char *v302;
  uint64_t v303;
  char *v304;
  _QWORD *v305;
  uint64_t v306;
  char *v307;
  char *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  char *v312;
  int64_t v313;
  unint64_t v314;
  unint64_t v315;
  uint64_t v316;
  char *v317;
  int64_t v318;
  unint64_t v319;
  char *v320;
  uint64_t v321;
  uint64_t v322;
  __int128 *v323;
  char *v324;
  uint64_t v325;
  __int128 v326;
  uint64_t v327;
  unint64_t v328;
  char *v329;
  char *v330;
  char *v331;
  _QWORD *v332;
  uint64_t v333;
  unint64_t *v334;
  unint64_t v335;
  _QWORD *v336;
  uint64_t v337;
  char *v338;
  char *v339;
  unint64_t v340;
  char *v341;
  _QWORD *v342;
  _QWORD *v343;
  _QWORD *v344;
  uint64_t v345;
  uint64_t v346;
  char *v347;
  uint64_t v348;
  char *v349;
  char *v350;
  uint64_t v351;
  char *v352;
  uint64_t v353;
  __int128 v354;
  std::__shared_weak_count *v355;
  unint64_t *p_shared_owners;
  unint64_t v357;
  uint64_t v358;
  char **v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  char *v363;
  uint64_t v364;
  __int128 v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  char *v369;
  char *v370;
  char *v371;
  char *i;
  uint64_t v373;
  char *v374;
  uint64_t v375;
  __int128 v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  uint64_t v380;
  unint64_t v381;
  uint64_t v382;
  char *v383;
  uint64_t v384;
  __int128 v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  char *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  unint64_t *v396;
  unint64_t v397;
  std::__shared_weak_count *v398;
  unint64_t *v399;
  unint64_t v400;
  uint64_t v401;
  uint64_t v402;
  std::__shared_weak_count *v403;
  unint64_t *v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  int64x2_t *v408;
  uint64_t *v409;
  unint64_t v410;
  unint64_t v411;
  char *v412;
  unint64_t v413;
  unint64_t v414;
  uint64_t v415;
  char *v416;
  char *v417;
  char *__p;
  char *__pa;
  char *__pb;
  char *__pc;
  char *__pd;
  char *__pe;
  void *v424;

  v2 = this[5].u64[0];
  v3 = this[5].i64[1];
  v4 = v2 + v3;
  v5 = (v2 + v3) >> 8;
  v6 = (char *)this[3].i64[1];
  v7 = (char *)this[4].i64[0];
  v8 = &v6[8 * v5];
  v9 = v7 - v6;
  if (v7 == v6)
  {
    v10 = 0;
    v16 = 0;
    v11 = (char *)this[1].i64[0];
    v408 = this + 1;
    v12 = (char *)this[1].i64[1];
    v409 = &this[1].i64[1];
    v13 = (v12 - v11) >> 4;
    v14 = v2 >> 8;
    v15 = &v6[8 * (v2 >> 8)];
  }
  else
  {
    v10 = *(_QWORD *)v8 + 16 * v4;
    v11 = (char *)this[1].i64[0];
    v408 = this + 1;
    v12 = (char *)this[1].i64[1];
    v409 = &this[1].i64[1];
    v13 = (v12 - v11) >> 4;
    v14 = v2 >> 8;
    v15 = &v6[8 * (v2 >> 8)];
    v16 = *(_QWORD *)v15 + 16 * v2;
  }
  v416 = v12;
  if (v10 == v16)
    v17 = 0;
  else
    v17 = ((v10 - *(_QWORD *)v8) >> 4) + 32 * (v8 - v15) - ((v16 - *(_QWORD *)v15) >> 4);
  v18 = (void **)&this[3];
  if (v17 >= v3 - v17)
  {
    v31 = 32 * v9 - 1;
    v32 = v7 - v6;
    if (v7 == v6)
      v31 = 0;
    v33 = v31 - v4;
    v34 = v13 >= v33;
    v35 = v13 - v33;
    if (v35 == 0 || !v34)
    {
LABEL_395:
      v301 = &v6[8 * v5];
      v302 = v416;
      if (v7 == v6)
        v303 = 0;
      else
        v303 = *(_QWORD *)v301 + 16 * v4;
      v328 = v3 - v17;
      if (v3 - v17 >= v13)
      {
        v332 = (_QWORD *)v303;
        v331 = &v6[8 * v5];
        if (!v13)
          goto LABEL_527;
      }
      else
      {
        if (v328 >= v13 >> 1)
          v329 = &v416[16 * (v3 - v17 - v13)];
        else
          v329 = &v11[16 * v328];
        if (v329 == v416)
        {
          v332 = (_QWORD *)v303;
          v331 = &v6[8 * v5];
          v13 = v328;
          if (!v328)
            goto LABEL_527;
        }
        else
        {
          v330 = v329;
          v331 = v301;
          v332 = (_QWORD *)v303;
          do
          {
            *v332 = *(_QWORD *)v330;
            v333 = *((_QWORD *)v330 + 1);
            v332[1] = v333;
            if (v333)
            {
              v334 = (unint64_t *)(v333 + 8);
              do
                v335 = __ldxr(v334);
              while (__stxr(v335 + 1, v334));
            }
            v332 += 2;
            if ((_QWORD *)((char *)v332 - *(_QWORD *)v331) == (_QWORD *)4096)
            {
              v336 = (_QWORD *)*((_QWORD *)v331 + 1);
              v331 += 8;
              v332 = v336;
            }
            v330 += 16;
            ++this[5].i64[1];
          }
          while (v330 != v416);
          v302 = v329;
          v13 = v328;
          if (!v328)
            goto LABEL_527;
        }
      }
      v337 = ((v303 - *(_QWORD *)v301) >> 4) - v13;
      if (v337 < 1)
      {
        v340 = 255 - v337;
        v338 = &v301[-8 * (v340 >> 8)];
        v339 = (char *)(*(_QWORD *)v338 + 16 * ~(_BYTE)v340);
        if (v339 == (char *)v303)
          goto LABEL_448;
      }
      else
      {
        v338 = &v301[8 * ((unint64_t)v337 >> 8)];
        v339 = (char *)(*(_QWORD *)v338 + 16 * v337);
        if (v339 == (char *)v303)
          goto LABEL_448;
      }
      v341 = v338;
      v342 = v339;
      do
      {
        *(_OWORD *)v332 = *(_OWORD *)v342;
        v332 += 2;
        *v342 = 0;
        v342[1] = 0;
        if ((_QWORD *)((char *)v332 - *(_QWORD *)v331) == (_QWORD *)4096)
        {
          v343 = (_QWORD *)*((_QWORD *)v331 + 1);
          v331 += 8;
          v332 = v343;
        }
        v342 += 2;
        if ((_QWORD *)((char *)v342 - *(_QWORD *)v341) == (_QWORD *)4096)
        {
          v344 = (_QWORD *)*((_QWORD *)v341 + 1);
          v341 += 8;
          v342 = v344;
        }
        ++this[5].i64[1];
      }
      while (v342 != (_QWORD *)v303);
LABEL_448:
      if (v13 < v328)
      {
        v345 = *(_QWORD *)v301;
        v346 = ((v303 - *(_QWORD *)v301) >> 4) - v328;
        if (v346 < 1)
        {
          v381 = 255 - v346;
          v347 = &v301[-8 * (v381 >> 8)];
          v348 = *(_QWORD *)v347 + 16 * ~(_BYTE)v381;
          if (v347 != v338)
            goto LABEL_451;
        }
        else
        {
          v347 = &v301[8 * ((unint64_t)v346 >> 8)];
          v348 = *(_QWORD *)v347 + 16 * v346;
          if (v347 != v338)
          {
LABEL_451:
            v349 = *(char **)v338;
            __pe = (char *)v348;
            if (*(char **)v338 != v339)
            {
              v417 = v338;
              v350 = v302;
              while (1)
              {
                v351 = (v303 - v345) >> 4;
                if ((v339 - v349) >> 4 < v351)
                  v351 = (v339 - v349) >> 4;
                v352 = &v339[-16 * v351];
                if (v351)
                {
                  do
                  {
                    v354 = *((_OWORD *)v339 - 1);
                    v339 -= 16;
                    *(_QWORD *)v339 = 0;
                    *((_QWORD *)v339 + 1) = 0;
                    v355 = *(std::__shared_weak_count **)(v303 - 8);
                    *(_OWORD *)(v303 - 16) = v354;
                    v303 -= 16;
                    if (v355)
                    {
                      p_shared_owners = (unint64_t *)&v355->__shared_owners_;
                      do
                        v357 = __ldaxr(p_shared_owners);
                      while (__stlxr(v357 - 1, p_shared_owners));
                      if (!v357)
                      {
                        ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
                        std::__shared_weak_count::__release_weak(v355);
                      }
                    }
                  }
                  while (v339 != v352);
                }
                if (v352 == v349)
                  break;
                v353 = *((_QWORD *)v301 - 1);
                v301 -= 8;
                v345 = v353;
                v303 = v353 + 4096;
                v339 = v352;
              }
              v345 = *(_QWORD *)v301;
              if (*(_QWORD *)v301 + 4096 == v303)
              {
                v358 = *((_QWORD *)v301 + 1);
                v301 += 8;
                v345 = v358;
                v303 = v358;
              }
              v302 = v350;
              v338 = v417;
            }
            v359 = (char **)(v338 - 8);
            if (v338 - 8 != v347)
            {
              do
              {
                v369 = v347;
                v370 = v302;
                v371 = *v359;
                for (i = *v359 + 4096; ; i = v374)
                {
                  v373 = (v303 - v345) >> 4;
                  if ((i - v371) >> 4 < v373)
                    v373 = (i - v371) >> 4;
                  v374 = &i[-16 * v373];
                  if (v373)
                  {
                    do
                    {
                      v376 = *((_OWORD *)i - 1);
                      i -= 16;
                      *(_QWORD *)i = 0;
                      *((_QWORD *)i + 1) = 0;
                      v377 = *(std::__shared_weak_count **)(v303 - 8);
                      *(_OWORD *)(v303 - 16) = v376;
                      v303 -= 16;
                      if (v377)
                      {
                        v378 = (unint64_t *)&v377->__shared_owners_;
                        do
                          v379 = __ldaxr(v378);
                        while (__stlxr(v379 - 1, v378));
                        if (!v379)
                        {
                          ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
                          std::__shared_weak_count::__release_weak(v377);
                        }
                      }
                    }
                    while (i != v374);
                  }
                  if (v374 == v371)
                    break;
                  v375 = *((_QWORD *)v301 - 1);
                  v301 -= 8;
                  v345 = v375;
                  v303 = v375 + 4096;
                }
                v345 = *(_QWORD *)v301;
                if (*(_QWORD *)v301 + 4096 == v303)
                {
                  v380 = *((_QWORD *)v301 + 1);
                  v301 += 8;
                  v345 = v380;
                  v303 = v380;
                }
                v302 = v370;
                --v359;
                v347 = v369;
              }
              while (v359 != (char **)v369);
            }
            v360 = (char *)(*(_QWORD *)v347 + 4096);
            if (v360 == __pe)
              goto LABEL_511;
            v361 = *(_QWORD *)v301;
            while (1)
            {
              v362 = (v303 - v361) >> 4;
              if ((v360 - __pe) >> 4 < v362)
                v362 = (v360 - __pe) >> 4;
              v363 = &v360[-16 * v362];
              if (v362)
              {
                do
                {
                  v365 = *((_OWORD *)v360 - 1);
                  v360 -= 16;
                  *(_QWORD *)v360 = 0;
                  *((_QWORD *)v360 + 1) = 0;
                  v366 = *(std::__shared_weak_count **)(v303 - 8);
                  *(_OWORD *)(v303 - 16) = v365;
                  v303 -= 16;
                  if (v366)
                  {
                    v367 = (unint64_t *)&v366->__shared_owners_;
                    do
                      v368 = __ldaxr(v367);
                    while (__stlxr(v368 - 1, v367));
                    if (!v368)
                    {
                      ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
                      std::__shared_weak_count::__release_weak(v366);
                    }
                  }
                }
                while (v360 != v363);
              }
              if (v363 == __pe)
                break;
              v364 = *((_QWORD *)v301 - 1);
              v301 -= 8;
              v361 = v364;
              v303 = v364 + 4096;
              v360 = v363;
            }
            goto LABEL_509;
          }
        }
        if ((char *)v348 != v339)
        {
          while (1)
          {
            v382 = (v303 - v345) >> 4;
            if ((uint64_t)&v339[-v348] >> 4 < v382)
              v382 = (uint64_t)&v339[-v348] >> 4;
            v383 = &v339[-16 * v382];
            if (v382)
            {
              do
              {
                v385 = *((_OWORD *)v339 - 1);
                v339 -= 16;
                *(_QWORD *)v339 = 0;
                *((_QWORD *)v339 + 1) = 0;
                v386 = *(std::__shared_weak_count **)(v303 - 8);
                *(_OWORD *)(v303 - 16) = v385;
                v303 -= 16;
                if (v386)
                {
                  v387 = (unint64_t *)&v386->__shared_owners_;
                  do
                    v388 = __ldaxr(v387);
                  while (__stlxr(v388 - 1, v387));
                  if (!v388)
                  {
                    ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
                    std::__shared_weak_count::__release_weak(v386);
                  }
                }
              }
              while (v339 != v383);
            }
            if (v383 == (char *)v348)
              break;
            v384 = *((_QWORD *)v301 - 1);
            v301 -= 8;
            v345 = v384;
            v303 = v384 + 4096;
            v339 = v383;
          }
LABEL_509:
          if (*(_QWORD *)v301 + 4096 == v303)
          {
            v389 = *((_QWORD *)v301 + 1);
            v301 += 8;
            v303 = v389;
          }
        }
      }
LABEL_511:
      if (v302 != v11)
      {
        v390 = *(_QWORD *)v301;
        while (1)
        {
          v391 = (v303 - v390) >> 4;
          if ((v302 - v11) >> 4 < v391)
            v391 = (v302 - v11) >> 4;
          v392 = &v302[-16 * v391];
          if (v391)
          {
            do
            {
              v395 = *((_QWORD *)v302 - 2);
              v394 = *((_QWORD *)v302 - 1);
              v302 -= 16;
              if (v394)
              {
                v396 = (unint64_t *)(v394 + 8);
                do
                  v397 = __ldxr(v396);
                while (__stxr(v397 + 1, v396));
              }
              v398 = *(std::__shared_weak_count **)(v303 - 8);
              *(_QWORD *)(v303 - 16) = v395;
              *(_QWORD *)(v303 - 8) = v394;
              if (v398)
              {
                v399 = (unint64_t *)&v398->__shared_owners_;
                do
                  v400 = __ldaxr(v399);
                while (__stlxr(v400 - 1, v399));
                if (!v400)
                {
                  ((void (*)(std::__shared_weak_count *))v398->__on_zero_shared)(v398);
                  std::__shared_weak_count::__release_weak(v398);
                }
              }
              v303 -= 16;
            }
            while (v302 != v392);
          }
          if (v392 == v11)
            break;
          v393 = *((_QWORD *)v301 - 1);
          v301 -= 8;
          v390 = v393;
          v303 = v393 + 4096;
          v302 = v392;
        }
      }
      goto LABEL_527;
    }
    v411 = v13;
    v414 = v17;
    if (v7 == v6)
      v36 = v35 + 1;
    else
      v36 = v35;
    if ((_BYTE)v36)
      v37 = (v36 >> 8) + 1;
    else
      v37 = v36 >> 8;
    if (v37 >= v14)
      v38 = v14;
    else
      v38 = v37;
    if (v37 > v14)
    {
      v39 = v37 - v38;
      v40 = this[4].i64[1] - this[3].i64[0];
      v41 = v32 >> 3;
      if (v37 - v38 > (v40 >> 3) - (v32 >> 3))
      {
        v42 = v40 >> 2;
        if (v42 <= v39 + v41)
          v43 = v39 + v41;
        else
          v43 = v42;
        if (v43)
        {
          if (v43 >> 61)
            goto LABEL_536;
          v44 = (char *)operator new(8 * v43);
        }
        else
        {
          v44 = 0;
        }
        v407 = v38 << 8;
        v226 = &v44[8 * (v41 - v38)];
        __pc = v44;
        v227 = &v44[8 * v43];
        v7 = v226;
        while (1)
        {
          v228 = v227;
          v229 = operator new(0x1000uLL);
          if (v7 == v227)
          {
            if (v226 <= __pc)
            {
              if (v227 == __pc)
                v235 = 1;
              else
                v235 = (v227 - __pc) >> 2;
              if (v235 >> 61)
                goto LABEL_536;
              v236 = (char *)operator new(8 * v235);
              v237 = v236;
              v238 = v235 >> 2;
              v239 = &v236[8 * (v235 >> 2)];
              v7 = v239;
              v240 = v228 - v226;
              if (v228 != v226)
              {
                v7 = &v239[v240 & 0xFFFFFFFFFFFFFFF8];
                v241 = v240 - 8;
                if (v241 >= 0x38)
                {
                  v243 = 8 * v238;
                  if ((unint64_t)(&v236[8 * v238] - v226) < 0x20)
                  {
                    v242 = &v236[8 * (v235 >> 2)];
                    goto LABEL_324;
                  }
                  v244 = (v241 >> 3) + 1;
                  v245 = 8 * (v244 & 0x3FFFFFFFFFFFFFFCLL);
                  v242 = &v239[v245];
                  v246 = (__int128 *)(v226 + 16);
                  v247 = &v236[v243 + 16];
                  v248 = v244 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v249 = *v246;
                    *((_OWORD *)v247 - 1) = *(v246 - 1);
                    *(_OWORD *)v247 = v249;
                    v246 += 2;
                    v247 += 32;
                    v248 -= 4;
                  }
                  while (v248);
                  if (v244 != (v244 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    v226 += v245;
                    goto LABEL_324;
                  }
                }
                else
                {
                  v242 = &v236[8 * (v235 >> 2)];
                  do
                  {
LABEL_324:
                    v250 = *(_QWORD *)v226;
                    v226 += 8;
                    *(_QWORD *)v242 = v250;
                    v242 += 8;
                  }
                  while (v242 != v7);
                }
              }
              v227 = &v236[8 * v235];
              v226 = v239;
              if (__pc)
                operator delete(__pc);
              __pc = v237;
              goto LABEL_303;
            }
            v230 = (v226 - __pc) >> 3;
            if (v230 >= -1)
              v231 = v230 + 1;
            else
              v231 = v230 + 2;
            v232 = v231 >> 1;
            v233 = &v226[-8 * (v231 >> 1)];
            v234 = v228;
            if (v228 != v226)
            {
              memmove(v233, v226, v228 - v226);
              v234 = v226;
            }
            v7 = &v233[v228 - v226];
            v226 = &v234[-8 * v232];
            v227 = v228;
          }
LABEL_303:
          *(_QWORD *)v7 = v229;
          v7 += 8;
          if (!--v39)
          {
            v251 = (_QWORD *)this[3].i64[1];
            if (!v38)
            {
              v252 = v226;
LABEL_330:
              v253 = (_QWORD *)this[4].i64[0];
              if (v253 != v251)
              {
                v254 = __pc;
                while (v252 != v254)
                {
LABEL_360:
                  v276 = *--v253;
                  *((_QWORD *)v252 - 1) = v276;
                  v252 -= 8;
                  if (v253 == (_QWORD *)this[3].i64[1])
                    goto LABEL_384;
                }
                if (v7 < v227)
                {
                  v277 = (v227 - v7) >> 3;
                  if (v277 >= -1)
                    v278 = v277 + 1;
                  else
                    v278 = v277 + 2;
                  v279 = v278 >> 1;
                  v252 = &v254[8 * (v278 >> 1)];
                  v280 = v254;
                  if (v7 != v254)
                  {
                    memmove(v252, v254, v7 - v254);
                    v280 = v7;
                  }
                  v7 = &v280[8 * v279];
                  goto LABEL_360;
                }
                if (v227 == v254)
                  v281 = 1;
                else
                  v281 = (v227 - v254) >> 2;
                if (v281 >> 61)
                  goto LABEL_536;
                v282 = (char *)operator new(8 * v281);
                v283 = v282;
                v284 = (v281 + 3) >> 2;
                v252 = &v282[8 * v284];
                v227 = &v282[8 * v281];
                v285 = v7 - v254;
                v60 = v7 == v254;
                v7 = v252;
                if (!v60)
                {
                  v7 = &v252[v285 & 0xFFFFFFFFFFFFFFF8];
                  v286 = v285 - 8;
                  v287 = &v282[8 * v284];
                  v288 = v254;
                  if (v286 >= 0x38)
                  {
                    v289 = 8 * v284;
                    v287 = &v282[8 * v284];
                    v288 = v254;
                    if ((unint64_t)(v287 - v254) >= 0x20)
                    {
                      v290 = (v286 >> 3) + 1;
                      v291 = 8 * (v290 & 0x3FFFFFFFFFFFFFFCLL);
                      v287 = &v252[v291];
                      v292 = (__int128 *)(v254 + 16);
                      v293 = &v282[v289 + 16];
                      v294 = v290 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v295 = *v292;
                        *((_OWORD *)v293 - 1) = *(v292 - 1);
                        *(_OWORD *)v293 = v295;
                        v292 += 2;
                        v293 += 32;
                        v294 -= 4;
                      }
                      while (v294);
                      if (v290 != (v290 & 0x3FFFFFFFFFFFFFFCLL))
                      {
                        v288 = &v254[v291];
                        goto LABEL_379;
                      }
LABEL_381:
                      operator delete(v254);
LABEL_382:
                      v254 = v283;
                      goto LABEL_360;
                    }
                  }
                  do
                  {
LABEL_379:
                    v296 = *(_QWORD *)v288;
                    v288 += 8;
                    *(_QWORD *)v287 = v296;
                    v287 += 8;
                  }
                  while (v287 != v7);
                }
                if (v254)
                  goto LABEL_381;
                goto LABEL_382;
              }
              v254 = __pc;
LABEL_384:
              v297 = (void *)this[3].i64[0];
              this[3].i64[0] = (uint64_t)v254;
              this[3].i64[1] = (uint64_t)v252;
              this[4].i64[0] = (uint64_t)v7;
              this[4].i64[1] = (uint64_t)v227;
              this[5].i64[0] -= v407;
              if (v297)
              {
                operator delete(v297);
                v7 = (char *)this[4].i64[0];
              }
LABEL_394:
              v3 = this[5].i64[1];
              v6 = (char *)this[3].i64[1];
              v4 = this[5].i64[0] + v3;
              v5 = v4 >> 8;
              v13 = v411;
              v17 = v414;
              goto LABEL_395;
            }
            while (2)
            {
              if (v7 != v227)
              {
                v252 = v226;
                goto LABEL_333;
              }
              if (v226 > __pc)
              {
                v255 = (v226 - __pc) >> 3;
                if (v255 >= -1)
                  v256 = v255 + 1;
                else
                  v256 = v255 + 2;
                v257 = v256 >> 1;
                v258 = &v226[-8 * (v256 >> 1)];
                v259 = v227;
                if (v227 != v226)
                {
                  memmove(v258, v226, v227 - v226);
                  v259 = v226;
                }
                v260 = -v257;
                v7 = &v258[v227 - v226];
                v252 = &v259[8 * v260];
LABEL_333:
                *(_QWORD *)v7 = *v251;
                v7 += 8;
                v251 = (_QWORD *)(this[3].i64[1] + 8);
                this[3].i64[1] = (uint64_t)v251;
                v226 = v252;
                if (!--v38)
                  goto LABEL_330;
                continue;
              }
              break;
            }
            if (v227 == __pc)
              v261 = 1;
            else
              v261 = (v227 - __pc) >> 2;
            if (v261 >> 61)
              goto LABEL_536;
            v262 = (char *)operator new(8 * v261);
            v263 = v261 >> 2;
            v252 = &v262[8 * (v261 >> 2)];
            v7 = v252;
            v264 = v227 - v226;
            if (v227 != v226)
            {
              v7 = &v252[v264 & 0xFFFFFFFFFFFFFFF8];
              v265 = v264 - 8;
              if (v265 >= 0x38)
              {
                v267 = 8 * v263;
                if ((unint64_t)(&v262[8 * v263] - v226) < 0x20)
                {
                  v266 = &v262[8 * (v261 >> 2)];
                  goto LABEL_355;
                }
                v268 = (v265 >> 3) + 1;
                v269 = 8 * (v268 & 0x3FFFFFFFFFFFFFFCLL);
                v266 = &v252[v269];
                v270 = (__int128 *)(v226 + 16);
                v271 = &v262[v267 + 16];
                v272 = v268 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v273 = *v270;
                  *((_OWORD *)v271 - 1) = *(v270 - 1);
                  *(_OWORD *)v271 = v273;
                  v270 += 2;
                  v271 += 32;
                  v272 -= 4;
                }
                while (v272);
                if (v268 != (v268 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  v226 += v269;
                  goto LABEL_355;
                }
              }
              else
              {
                v266 = &v262[8 * (v261 >> 2)];
                do
                {
LABEL_355:
                  v274 = *(_QWORD *)v226;
                  v226 += 8;
                  *(_QWORD *)v266 = v274;
                  v266 += 8;
                }
                while (v266 != v7);
              }
            }
            v227 = &v262[8 * v261];
            if (__pc)
            {
              v275 = v262;
              operator delete(__pc);
              __pc = v275;
            }
            else
            {
              __pc = v262;
            }
            goto LABEL_333;
          }
        }
      }
      if (!v39)
        goto LABEL_392;
      do
      {
        if (this[4].i64[1] == this[4].i64[0])
        {
          for (j = 0; j != v39; ++j)
          {
            v424 = operator new(0x1000uLL);
            std::__split_buffer<geo::QuadTile *>::push_front((void **)&this[3], &v424);
            v7 = (char *)this[4].i64[0];
            if (&v7[-this[3].i64[1]] == (char *)8)
              v299 = 255;
            else
              v299 = 256;
            v300 = v299 + this[5].i64[0];
            this[5].i64[0] = v300;
          }
          v38 += v39;
          goto LABEL_393;
        }
        v424 = operator new(0x1000uLL);
        std::__split_buffer<geo::QuadTile *>::push_back((char **)&this[3], &v424);
        --v39;
      }
      while (v39);
      v7 = (char *)this[4].i64[0];
LABEL_392:
      v300 = this[5].i64[0];
LABEL_393:
      this[5].i64[0] = v300 - (v38 << 8);
      if (!v38)
        goto LABEL_394;
      while (1)
      {
        v305 = (_QWORD *)this[3].i64[1];
        v307 = (char *)(v305 + 1);
        v306 = *v305;
        this[3].i64[1] = (uint64_t)(v305 + 1);
        if (v7 == (char *)this[4].i64[1])
        {
          v308 = (char *)*v18;
          if (v307 <= *v18)
          {
            v314 = (v7 - v308) >> 2;
            if (v7 == v308)
              v314 = 1;
            if (v314 >> 61)
              goto LABEL_536;
            v315 = v314 >> 2;
            __pd = (char *)(8 * v314);
            v316 = (uint64_t)operator new(8 * v314);
            v317 = (char *)(v316 + 8 * v315);
            v318 = v7 - v307;
            v60 = v7 == v307;
            v7 = v317;
            if (!v60)
            {
              v7 = &v317[v318 & 0xFFFFFFFFFFFFFFF8];
              v319 = v318 - 8;
              if ((unint64_t)(v318 - 8) >= 0x38)
              {
                v320 = (char *)(v316 + 8 * v315);
                if ((unint64_t)(v320 - v307) < 0x20)
                  goto LABEL_417;
                v321 = (v319 >> 3) + 1;
                v322 = 8 * (v321 & 0x3FFFFFFFFFFFFFFCLL);
                v320 = &v317[v322];
                v323 = (__int128 *)(v305 + 3);
                v324 = (char *)(v316 + 8 * v315 + 16);
                v325 = v321 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v326 = *v323;
                  *((_OWORD *)v324 - 1) = *(v323 - 1);
                  *(_OWORD *)v324 = v326;
                  v323 += 2;
                  v324 += 32;
                  v325 -= 4;
                }
                while (v325);
                if (v321 != (v321 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  v307 += v322;
                  goto LABEL_417;
                }
              }
              else
              {
                v320 = (char *)(v316 + 8 * v315);
                do
                {
LABEL_417:
                  v327 = *(_QWORD *)v307;
                  v307 += 8;
                  *(_QWORD *)v320 = v327;
                  v320 += 8;
                }
                while (v320 != v7);
              }
            }
            this[3].i64[0] = v316;
            this[3].i64[1] = (uint64_t)v317;
            this[4].i64[0] = (uint64_t)v7;
            this[4].i64[1] = (uint64_t)&__pd[v316];
            if (v308)
            {
              operator delete(v308);
              v7 = (char *)this[4].i64[0];
            }
            goto LABEL_398;
          }
          v309 = (v307 - (_BYTE *)*v18) >> 3;
          if (v309 >= -1)
            v310 = v309 + 1;
          else
            v310 = v309 + 2;
          v311 = v310 >> 1;
          v312 = &v307[-8 * (v310 >> 1)];
          v313 = v7 - v307;
          if (v7 != v307)
          {
            memmove(&v307[-8 * (v310 >> 1)], v307, v7 - v307);
            v7 = (char *)this[3].i64[1];
          }
          v304 = &v7[-8 * v311];
          v7 = &v312[v313];
          this[3].i64[1] = (uint64_t)v304;
          this[4].i64[0] = (uint64_t)&v312[v313];
        }
LABEL_398:
        *(_QWORD *)v7 = v306;
        v7 = (char *)(this[4].i64[0] + 8);
        this[4].i64[0] = (uint64_t)v7;
        if (!--v38)
          goto LABEL_394;
      }
    }
    this[5].i64[0] = v2 - (v38 << 8);
    if (!v38)
      goto LABEL_394;
    while (1)
    {
      v47 = (_QWORD *)this[3].i64[1];
      v49 = (char *)(v47 + 1);
      v48 = *v47;
      this[3].i64[1] = (uint64_t)(v47 + 1);
      if (v7 == (char *)this[4].i64[1])
      {
        v50 = (char *)*v18;
        if (v49 <= *v18)
        {
          v56 = (v7 - v50) >> 2;
          if (v7 == v50)
            v56 = 1;
          if (v56 >> 61)
            goto LABEL_536;
          v57 = v56 >> 2;
          __p = (char *)(8 * v56);
          v58 = (uint64_t)operator new(8 * v56);
          v59 = (char *)(v58 + 8 * v57);
          v61 = v7 - v49;
          v60 = v7 == v49;
          v7 = v59;
          if (!v60)
          {
            v7 = &v59[v61 & 0xFFFFFFFFFFFFFFF8];
            v62 = v61 - 8;
            if ((unint64_t)(v61 - 8) >= 0x38)
            {
              v63 = (char *)(v58 + 8 * v57);
              if ((unint64_t)(v63 - v49) < 0x20)
                goto LABEL_71;
              v64 = (v62 >> 3) + 1;
              v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
              v63 = &v59[v65];
              v66 = (__int128 *)(v47 + 3);
              v67 = (char *)(v58 + 8 * v57 + 16);
              v68 = v64 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v69 = *v66;
                *((_OWORD *)v67 - 1) = *(v66 - 1);
                *(_OWORD *)v67 = v69;
                v66 += 2;
                v67 += 32;
                v68 -= 4;
              }
              while (v68);
              if (v64 != (v64 & 0x3FFFFFFFFFFFFFFCLL))
              {
                v49 += v65;
                goto LABEL_71;
              }
            }
            else
            {
              v63 = (char *)(v58 + 8 * v57);
              do
              {
LABEL_71:
                v70 = *(_QWORD *)v49;
                v49 += 8;
                *(_QWORD *)v63 = v70;
                v63 += 8;
              }
              while (v63 != v7);
            }
          }
          this[3].i64[0] = v58;
          this[3].i64[1] = (uint64_t)v59;
          this[4].i64[0] = (uint64_t)v7;
          this[4].i64[1] = (uint64_t)&__p[v58];
          if (v50)
          {
            operator delete(v50);
            v7 = (char *)this[4].i64[0];
          }
          goto LABEL_52;
        }
        v51 = (v49 - (_BYTE *)*v18) >> 3;
        if (v51 >= -1)
          v52 = v51 + 1;
        else
          v52 = v51 + 2;
        v53 = v52 >> 1;
        v54 = &v49[-8 * (v52 >> 1)];
        v55 = v7 - v49;
        if (v7 != v49)
        {
          memmove(&v49[-8 * (v52 >> 1)], v49, v7 - v49);
          v7 = (char *)this[3].i64[1];
        }
        v46 = &v7[-8 * v53];
        v7 = &v54[v55];
        this[3].i64[1] = (uint64_t)v46;
        this[4].i64[0] = (uint64_t)&v54[v55];
      }
LABEL_52:
      *(_QWORD *)v7 = v48;
      v7 = (char *)(this[4].i64[0] + 8);
      this[4].i64[0] = (uint64_t)v7;
      if (!--v38)
        goto LABEL_394;
    }
  }
  v19 = v13 - v2;
  if (v13 <= v2)
    goto LABEL_126;
  v413 = v17;
  v20 = 32 * v9 - 1;
  if (v7 == v6)
  {
    v20 = 0;
    ++v19;
  }
  if ((_BYTE)v19)
    v21 = (v19 >> 8) + 1;
  else
    v21 = v19 >> 8;
  v22 = (v20 - v4) >> 8;
  if (v21 >= v22)
    v23 = v22;
  else
    v23 = v21;
  if (v21 <= v22)
  {
    for (this[5].i64[0] = v2 + (v23 << 8); v23; --v23)
    {
      v45 = this[4].i64[0];
      v424 = *(void **)(v45 - 8);
      this[4].i64[0] = v45 - 8;
      std::__split_buffer<geo::QuadTile *>::push_front((void **)&this[3], &v424);
    }
    goto LABEL_125;
  }
  v24 = v21 - v23;
  v25 = (char *)this[3].i64[0];
  v26 = this[4].i64[1] - (_QWORD)v25;
  v27 = (v7 - v6) >> 3;
  if (v21 - v23 <= (v26 >> 3) - v27)
  {
    if (v24)
    {
      if (v6 == v25)
      {
LABEL_81:
        v73 = v24;
        do
        {
          v424 = operator new(0x1000uLL);
          std::__split_buffer<geo::QuadTile *>::push_back((char **)&this[3], &v424);
          --v73;
        }
        while (v73);
        v23 += v24;
        v2 = this[5].u64[0];
      }
      else
      {
        while (1)
        {
          v424 = operator new(0x1000uLL);
          std::__split_buffer<geo::QuadTile *>::push_front((void **)&this[3], &v424);
          v71 = (void *)this[3].i64[1];
          v72 = this[4].i64[0] - (_QWORD)v71 == 8 ? 255 : 256;
          v2 = v72 + this[5].i64[0];
          this[5].i64[0] = v2;
          if (!--v24)
            break;
          if (v71 == *v18)
            goto LABEL_81;
        }
      }
    }
    for (this[5].i64[0] = v2 + (v23 << 8); v23; --v23)
    {
      v74 = this[4].i64[0];
      v424 = *(void **)(v74 - 8);
      this[4].i64[0] = v74 - 8;
      std::__split_buffer<geo::QuadTile *>::push_front((void **)&this[3], &v424);
    }
    goto LABEL_125;
  }
  v410 = v13;
  v28 = v7 == v6;
  if (v26 >> 2 <= v24 + v27)
    v29 = v24 + v27;
  else
    v29 = v26 >> 2;
  if (!v29)
  {
    v30 = 0;
    goto LABEL_92;
  }
  if (v29 >> 61)
LABEL_536:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v30 = (char *)operator new(8 * v29);
LABEL_92:
  v406 = (v21 << 8) - v28;
  v75 = &v30[8 * v29];
  v76 = v30;
  v77 = v30;
  do
  {
    v78 = operator new(0x1000uLL);
    if (v77 != v75)
      goto LABEL_94;
    if (v76 <= v30)
    {
      if (v75 == v30)
        v84 = 1;
      else
        v84 = (v75 - v30) >> 2;
      if (v84 >> 61)
        goto LABEL_536;
      v85 = (char *)operator new(8 * v84);
      v86 = v84 >> 2;
      v87 = &v85[8 * (v84 >> 2)];
      v77 = v87;
      v88 = v75 - v76;
      if (v75 == v76)
        goto LABEL_116;
      v77 = &v87[v88 & 0xFFFFFFFFFFFFFFF8];
      v89 = v88 - 8;
      if (v89 >= 0x38)
      {
        v91 = 8 * v86;
        if ((unint64_t)(&v85[8 * v86] - v76) >= 0x20)
        {
          v92 = (v89 >> 3) + 1;
          v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
          v90 = &v87[v93];
          v94 = (__int128 *)(v76 + 16);
          v95 = &v85[v91 + 16];
          v96 = v92 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v97 = *v94;
            *((_OWORD *)v95 - 1) = *(v94 - 1);
            *(_OWORD *)v95 = v97;
            v94 += 2;
            v95 += 32;
            v96 -= 4;
          }
          while (v96);
          if (v92 == (v92 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_116;
          v76 += v93;
        }
        else
        {
          v90 = &v85[8 * (v84 >> 2)];
        }
      }
      else
      {
        v90 = &v85[8 * (v84 >> 2)];
      }
      do
      {
        v98 = *(_QWORD *)v76;
        v76 += 8;
        *(_QWORD *)v90 = v98;
        v90 += 8;
      }
      while (v90 != v77);
LABEL_116:
      v75 = &v85[8 * v84];
      if (v30)
      {
        v99 = v85;
        v76 = v87;
        operator delete(v30);
        v30 = v99;
      }
      else
      {
        v76 = &v85[8 * (v84 >> 2)];
        v30 = v85;
      }
      goto LABEL_94;
    }
    __pa = v30;
    v79 = (v76 - v30) >> 3;
    if (v79 >= -1)
      v80 = v79 + 1;
    else
      v80 = v79 + 2;
    v81 = v80 >> 1;
    v82 = &v76[-8 * (v80 >> 1)];
    v83 = v75;
    if (v75 != v76)
    {
      memmove(v82, v76, v75 - v76);
      v83 = v76;
    }
    v77 = &v82[v75 - v76];
    v76 = &v83[-8 * v81];
    v30 = __pa;
LABEL_94:
    *(_QWORD *)v77 = v78;
    v77 += 8;
    --v24;
  }
  while (v24);
  v100 = this[4].i64[0];
  if (v23)
  {
    while (v77 != v75)
    {
      v101 = v76;
LABEL_141:
      *(_QWORD *)v77 = *(_QWORD *)(v100 - 8);
      v77 += 8;
      v100 = this[4].i64[0] - 8;
      this[4].i64[0] = v100;
      v76 = v101;
      if (!--v23)
        goto LABEL_121;
    }
    if (v76 > v30)
    {
      v119 = (v76 - v30) >> 3;
      if (v119 >= -1)
        v120 = v119 + 1;
      else
        v120 = v119 + 2;
      v121 = v120 >> 1;
      v122 = &v76[-8 * (v120 >> 1)];
      v123 = v75;
      if (v75 != v76)
      {
        memmove(v122, v76, v75 - v76);
        v123 = v76;
      }
      v124 = -v121;
      v77 = &v122[v75 - v76];
      v101 = &v123[8 * v124];
      goto LABEL_141;
    }
    if (v75 == v30)
      v125 = 1;
    else
      v125 = (v75 - v30) >> 2;
    if (v125 >> 61)
      goto LABEL_536;
    v126 = (char *)operator new(8 * v125);
    v127 = v125 >> 2;
    v101 = &v126[8 * (v125 >> 2)];
    v77 = v101;
    v128 = v75 - v76;
    if (v75 != v76)
    {
      v77 = &v101[v128 & 0xFFFFFFFFFFFFFFF8];
      v129 = v128 - 8;
      if (v129 >= 0x38)
      {
        v131 = 8 * v127;
        if ((unint64_t)(&v126[8 * v127] - v76) >= 0x20)
        {
          v132 = (v129 >> 3) + 1;
          v133 = 8 * (v132 & 0x3FFFFFFFFFFFFFFCLL);
          v130 = &v101[v133];
          v134 = (__int128 *)(v76 + 16);
          v135 = &v126[v131 + 16];
          v136 = v132 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v137 = *v134;
            *((_OWORD *)v135 - 1) = *(v134 - 1);
            *(_OWORD *)v135 = v137;
            v134 += 2;
            v135 += 32;
            v136 -= 4;
          }
          while (v136);
          if (v132 == (v132 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_164;
          v76 += v133;
        }
        else
        {
          v130 = &v126[8 * (v125 >> 2)];
        }
      }
      else
      {
        v130 = &v126[8 * (v125 >> 2)];
      }
      do
      {
        v138 = *(_QWORD *)v76;
        v76 += 8;
        *(_QWORD *)v130 = v138;
        v130 += 8;
      }
      while (v130 != v77);
    }
LABEL_164:
    v75 = &v126[8 * v125];
    if (v30)
    {
      v139 = v126;
      operator delete(v30);
      v30 = v139;
    }
    else
    {
      v30 = v126;
    }
    goto LABEL_141;
  }
  v101 = v76;
LABEL_121:
  v102 = (uint64_t *)this[3].i64[1];
  if (v102 != (uint64_t *)v100)
  {
    while (1)
    {
      if (v77 == v75)
      {
        if (v101 <= v30)
        {
          if (v75 == v30)
            v146 = 1;
          else
            v146 = (v75 - v30) >> 2;
          if (v146 >> 61)
            goto LABEL_536;
          v147 = (char *)operator new(8 * v146);
          v148 = v147;
          v149 = v146 >> 2;
          v103 = &v147[8 * (v146 >> 2)];
          v77 = v103;
          v150 = v75 - v101;
          if (v75 != v101)
          {
            v77 = &v103[v150 & 0xFFFFFFFFFFFFFFF8];
            v151 = v150 - 8;
            if (v151 >= 0x38)
            {
              v153 = 8 * v149;
              if ((unint64_t)(&v147[8 * v149] - v101) < 0x20)
              {
                v152 = &v147[8 * (v146 >> 2)];
                goto LABEL_190;
              }
              v154 = (v151 >> 3) + 1;
              v155 = 8 * (v154 & 0x3FFFFFFFFFFFFFFCLL);
              v152 = &v103[v155];
              v156 = (__int128 *)(v101 + 16);
              v157 = &v147[v153 + 16];
              v158 = v154 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v159 = *v156;
                *((_OWORD *)v157 - 1) = *(v156 - 1);
                *(_OWORD *)v157 = v159;
                v156 += 2;
                v157 += 32;
                v158 -= 4;
              }
              while (v158);
              if (v154 != (v154 & 0x3FFFFFFFFFFFFFFCLL))
              {
                v101 += v155;
                goto LABEL_190;
              }
            }
            else
            {
              v152 = &v147[8 * (v146 >> 2)];
              do
              {
LABEL_190:
                v160 = *(_QWORD *)v101;
                v101 += 8;
                *(_QWORD *)v152 = v160;
                v152 += 8;
              }
              while (v152 != v77);
            }
          }
          v75 = &v147[8 * v146];
          if (v30)
            operator delete(v30);
          v30 = v148;
          goto LABEL_168;
        }
        v141 = (v101 - v30) >> 3;
        if (v141 >= -1)
          v142 = v141 + 1;
        else
          v142 = v141 + 2;
        v143 = v142 >> 1;
        v144 = &v101[-8 * (v142 >> 1)];
        v145 = v75;
        if (v75 != v101)
        {
          memmove(v144, v101, v75 - v101);
          v145 = v101;
        }
        v77 = &v144[v75 - v101];
        v103 = &v145[-8 * v143];
      }
      else
      {
        v103 = v101;
      }
LABEL_168:
      v140 = *v102++;
      *(_QWORD *)v77 = v140;
      v77 += 8;
      v101 = v103;
      if (v102 == (uint64_t *)this[4].i64[0])
        goto LABEL_123;
    }
  }
  v103 = v101;
LABEL_123:
  v104 = (void *)this[3].i64[0];
  this[3].i64[0] = (uint64_t)v30;
  this[3].i64[1] = (uint64_t)v103;
  this[4].i64[0] = (uint64_t)v77;
  this[4].i64[1] = (uint64_t)v75;
  this[5].i64[0] += v406;
  v13 = v410;
  if (v104)
    operator delete(v104);
LABEL_125:
  v2 = this[5].u64[0];
  v6 = (char *)this[3].i64[1];
  v7 = (char *)this[4].i64[0];
  v14 = v2 >> 8;
  v17 = v413;
LABEL_126:
  v105 = &v6[8 * v14];
  if (v7 == v6)
  {
    v106 = 0;
    v107 = v13 - v17;
    if (v13 <= v17)
      goto LABEL_195;
LABEL_128:
    v108 = &v11[16 * v107];
    if (v17 >= v13 >> 1)
      v109 = v108;
    else
      v109 = &v416[-16 * v17];
    if (v109 == v11)
    {
      v112 = v106;
      v111 = v105;
      v13 = v17;
      if (!v17)
        goto LABEL_527;
    }
    else
    {
      v110 = v109;
      v111 = v105;
      v112 = v106;
      do
      {
        if (v112 == *(_QWORD *)v111)
        {
          v114 = *((_QWORD *)v111 - 1);
          v111 -= 8;
          v112 = v114 + 4096;
        }
        v115 = *((_QWORD *)v110 - 2);
        v110 -= 16;
        *(_QWORD *)(v112 - 16) = v115;
        v112 -= 16;
        v116 = *((_QWORD *)v110 + 1);
        *(_QWORD *)(v112 + 8) = v116;
        if (v116)
        {
          v117 = (unint64_t *)(v116 + 8);
          do
            v118 = __ldxr(v117);
          while (__stxr(v118 + 1, v117));
          v2 = this[5].u64[0];
        }
        --v2;
        v113 = this[5].i64[1] + 1;
        this[5].i64[0] = v2;
        this[5].i64[1] = v113;
      }
      while (v110 != v11);
      v11 = v109;
      v13 = v17;
      if (!v17)
        goto LABEL_527;
    }
LABEL_200:
    v161 = v13 + ((v106 - *(_QWORD *)v105) >> 4);
    if (v161 < 1)
    {
      v164 = 255 - v161;
      v162 = &v105[-8 * (v164 >> 8)];
      v163 = *(_QWORD *)v162 + 16 * ~(_BYTE)v164;
      if (v163 == v106)
        goto LABEL_210;
    }
    else
    {
      v162 = &v105[8 * ((unint64_t)v161 >> 8)];
      v163 = *(_QWORD *)v162 + 16 * v161;
      if (v163 == v106)
        goto LABEL_210;
    }
    v165 = v162;
    v166 = (_QWORD *)v163;
    do
    {
      if (v112 == *(_QWORD *)v111)
      {
        v168 = *((_QWORD *)v111 - 1);
        v111 -= 8;
        v112 = v168 + 4096;
      }
      if (v166 == *(_QWORD **)v165)
      {
        v169 = *((_QWORD *)v165 - 1);
        v165 -= 8;
        v166 = (_QWORD *)(v169 + 4096);
      }
      v167 = *((_OWORD *)v166 - 1);
      v166 -= 2;
      *(_OWORD *)(v112 - 16) = v167;
      v112 -= 16;
      *v166 = 0;
      v166[1] = 0;
      this[5] = vaddq_s64(this[5], (int64x2_t)xmmword_19FFB5050);
    }
    while (v166 != (_QWORD *)v106);
LABEL_210:
    if (v13 < v17)
    {
      v170 = *(_QWORD *)v105;
      v171 = v17 + ((v106 - *(_QWORD *)v105) >> 4);
      if (v171 < 1)
      {
        v206 = 255 - v171;
        v172 = &v105[-8 * (v206 >> 8)];
        v173 = *(_QWORD *)v172 + 16 * ~(_BYTE)v206;
        if (v162 != v172)
          goto LABEL_213;
      }
      else
      {
        v172 = &v105[8 * ((unint64_t)v171 >> 8)];
        v173 = *(_QWORD *)v172 + 16 * v171;
        if (v162 != v172)
        {
LABEL_213:
          v174 = *(_QWORD *)v162 + 4096;
          if (v174 != v163)
          {
            while (1)
            {
              v175 = (v170 - v106 + 4096) >> 4;
              if ((v174 - v163) >> 4 < v175)
                v175 = (v174 - v163) >> 4;
              if (v175)
              {
                v176 = v163 + 16 * v175;
                do
                {
                  v177 = *(_OWORD *)v163;
                  *(_QWORD *)v163 = 0;
                  *(_QWORD *)(v163 + 8) = 0;
                  v178 = *(std::__shared_weak_count **)(v106 + 8);
                  *(_OWORD *)v106 = v177;
                  if (v178)
                  {
                    v179 = (unint64_t *)&v178->__shared_owners_;
                    do
                      v180 = __ldaxr(v179);
                    while (__stlxr(v180 - 1, v179));
                    if (!v180)
                    {
                      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                      std::__shared_weak_count::__release_weak(v178);
                    }
                  }
                  v163 += 16;
                  v106 += 16;
                }
                while (v163 != v176);
                v163 = v176;
              }
              if (v163 == v174)
                break;
              v181 = *((_QWORD *)v105 + 1);
              v105 += 8;
              v170 = v181;
              v106 = v181;
            }
            v170 = *(_QWORD *)v105;
            if (*(_QWORD *)v105 + 4096 == v106)
            {
              v182 = *((_QWORD *)v105 + 1);
              v105 += 8;
              v170 = v182;
              v106 = v182;
            }
          }
          v183 = v162 + 8;
          if (v162 + 8 != v172)
          {
            v412 = v172;
            v415 = v173;
            do
            {
              v184 = 0;
              __pb = v183;
              v185 = *(_QWORD *)v183;
              while (1)
              {
                v186 = v185 + 16 * v184;
                v187 = (v170 - v106 + 4096) >> 4;
                if ((4096 - 16 * v184) >> 4 < v187)
                  v187 = (4096 - 16 * v184) >> 4;
                if (v187)
                {
                  v188 = (__int128 *)(v186 + 16 * v187);
                  v189 = (__int128 *)(v185 + 16 * v184);
                  do
                  {
                    v190 = *v189;
                    *(_QWORD *)v189 = 0;
                    *((_QWORD *)v189 + 1) = 0;
                    v191 = *(std::__shared_weak_count **)(v106 + 8);
                    *(_OWORD *)v106 = v190;
                    if (v191)
                    {
                      v192 = (unint64_t *)&v191->__shared_owners_;
                      do
                        v193 = __ldaxr(v192);
                      while (__stlxr(v193 - 1, v192));
                      if (!v193)
                      {
                        ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                        std::__shared_weak_count::__release_weak(v191);
                      }
                    }
                    ++v189;
                    v106 += 16;
                  }
                  while (v189 != v188);
                }
                else
                {
                  v188 = (__int128 *)(v185 + 16 * v184);
                }
                v184 += ((uint64_t)v188 - v186) >> 4;
                if (v184 == 256)
                  break;
                v194 = *((_QWORD *)v105 + 1);
                v105 += 8;
                v170 = v194;
                v106 = v194;
              }
              v170 = *(_QWORD *)v105;
              if (*(_QWORD *)v105 + 4096 == v106)
              {
                v195 = *((_QWORD *)v105 + 1);
                v105 += 8;
                v170 = v195;
                v106 = v195;
              }
              v172 = v412;
              v173 = v415;
              v183 = __pb + 8;
            }
            while (__pb + 8 != v412);
          }
          v196 = *(__int128 **)v172;
          v197 = v416;
          if (*(_QWORD *)v172 == v173)
            goto LABEL_282;
          v198 = *(_QWORD *)v105;
          while (1)
          {
            v199 = (v198 - v106 + 4096) >> 4;
            if ((v173 - (uint64_t)v196) >> 4 < v199)
              v199 = (v173 - (uint64_t)v196) >> 4;
            if (v199)
            {
              v200 = &v196[v199];
              do
              {
                v201 = *v196;
                *(_QWORD *)v196 = 0;
                *((_QWORD *)v196 + 1) = 0;
                v202 = *(std::__shared_weak_count **)(v106 + 8);
                *(_OWORD *)v106 = v201;
                if (v202)
                {
                  v203 = (unint64_t *)&v202->__shared_owners_;
                  do
                    v204 = __ldaxr(v203);
                  while (__stlxr(v204 - 1, v203));
                  if (!v204)
                  {
                    ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                    std::__shared_weak_count::__release_weak(v202);
                  }
                }
                ++v196;
                v106 += 16;
              }
              while (v196 != v200);
              v196 = v200;
            }
            if (v196 == (__int128 *)v173)
              break;
            v205 = *((_QWORD *)v105 + 1);
            v105 += 8;
            v198 = v205;
            v106 = v205;
          }
          goto LABEL_280;
        }
      }
      if (v163 != v173)
      {
        v197 = v416;
        while (1)
        {
          v207 = (v170 - v106 + 4096) >> 4;
          if ((v173 - v163) >> 4 < v207)
            v207 = (v173 - v163) >> 4;
          if (v207)
          {
            v208 = v163 + 16 * v207;
            do
            {
              v209 = *(_OWORD *)v163;
              *(_QWORD *)v163 = 0;
              *(_QWORD *)(v163 + 8) = 0;
              v210 = *(std::__shared_weak_count **)(v106 + 8);
              *(_OWORD *)v106 = v209;
              if (v210)
              {
                v211 = (unint64_t *)&v210->__shared_owners_;
                do
                  v212 = __ldaxr(v211);
                while (__stlxr(v212 - 1, v211));
                if (!v212)
                {
                  ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                  std::__shared_weak_count::__release_weak(v210);
                }
              }
              v163 += 16;
              v106 += 16;
            }
            while (v163 != v208);
            v163 = v208;
          }
          if (v163 == v173)
            break;
          v213 = *((_QWORD *)v105 + 1);
          v105 += 8;
          v170 = v213;
          v106 = v213;
        }
LABEL_280:
        if (*(_QWORD *)v105 + 4096 == v106)
        {
          v214 = *((_QWORD *)v105 + 1);
          v105 += 8;
          v106 = v214;
        }
        goto LABEL_282;
      }
    }
    v197 = v416;
LABEL_282:
    if (v11 != v197)
    {
      v215 = *(_QWORD *)v105;
      while (1)
      {
        v216 = (v215 - v106 + 4096) >> 4;
        if ((v197 - v11) >> 4 < v216)
          v216 = (v197 - v11) >> 4;
        if (v216)
        {
          v217 = &v11[16 * v216];
          do
          {
            v219 = *(_QWORD *)v11;
            v218 = *((_QWORD *)v11 + 1);
            if (v218)
            {
              v220 = (unint64_t *)(v218 + 8);
              do
                v221 = __ldxr(v220);
              while (__stxr(v221 + 1, v220));
            }
            v222 = *(std::__shared_weak_count **)(v106 + 8);
            *(_QWORD *)v106 = v219;
            *(_QWORD *)(v106 + 8) = v218;
            if (v222)
            {
              v223 = (unint64_t *)&v222->__shared_owners_;
              do
                v224 = __ldaxr(v223);
              while (__stlxr(v224 - 1, v223));
              if (!v224)
              {
                ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
                std::__shared_weak_count::__release_weak(v222);
              }
            }
            v11 += 16;
            v106 += 16;
          }
          while (v11 != v217);
          v11 = v217;
        }
        if (v11 == v197)
          break;
        v225 = *((_QWORD *)v105 + 1);
        v105 += 8;
        v215 = v225;
        v106 = v225;
      }
    }
    goto LABEL_527;
  }
  v106 = *(_QWORD *)v105 + 16 * v2;
  v107 = v13 - v17;
  if (v13 > v17)
    goto LABEL_128;
LABEL_195:
  v112 = v106;
  v111 = v105;
  if (v13)
    goto LABEL_200;
LABEL_527:
  v401 = *v409;
  v402 = v408->i64[0];
  while (v401 != v402)
  {
    v403 = *(std::__shared_weak_count **)(v401 - 8);
    if (v403)
    {
      v404 = (unint64_t *)&v403->__shared_owners_;
      do
        v405 = __ldaxr(v404);
      while (__stlxr(v405 - 1, v404));
      if (!v405)
      {
        ((void (*)(std::__shared_weak_count *))v403->__on_zero_shared)(v403);
        std::__shared_weak_count::__release_weak(v403);
      }
    }
    v401 -= 16;
  }
  *v409 = v402;
}

void sub_19F30C254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;

  if (v15)
    operator delete(v15);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_7,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_7>,void ()(md::LabelManager *,std::shared_ptr<md::LabelMarker> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4E28;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_6,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_6>,void ()(md::LabelManager *,std::shared_ptr<md::LabelMarker> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4DE0;
  a2[1] = v2;
  return result;
}

void sub_19F30C35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

md::VenueWallRenderResources *md::VenueWallRenderResources::VenueWallRenderResources(md::VenueWallRenderResources *this, VKSharedResources *a2, const RenderTargetFormat *a3)
{
  VKSharedResources *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  __int128 v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  char *v74;
  __int128 v75;
  unsigned __int8 v76;
  __int128 v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  __int128 v81;
  unint64_t *v82;
  unint64_t v83;
  int8x16_t v84;
  int16x8_t v85;
  int32x4_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int16x8_t v89;
  int32x4_t v90;
  int8x16_t v91;
  int32x4_t v92;
  int8x16_t v93;
  int32x4_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int16x8_t v104;
  int32x4_t v105;
  int8x16_t v106;
  int16x8_t v107;
  int32x4_t v108;
  int8x16_t v109;
  int32x4_t v110;
  int8x16_t v111;
  int32x4_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int16x8_t v127;
  int32x4_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int16x8_t v131;
  int32x4_t v132;
  int8x16_t v133;
  int16x8_t v134;
  int32x4_t v135;
  int8x16_t v136;
  int16x8_t v137;
  int32x4_t v138;
  int8x16_t v139;
  int32x4_t v140;
  int8x16_t v141;
  int32x4_t v142;
  int8x16_t v143;
  int32x4_t v144;
  int8x16_t v145;
  int32x4_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t *v161;
  unsigned __int8 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _OWORD *v178;
  __int128 *v179;
  uint64_t v180;
  __int128 v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _OWORD *v196;
  __int128 *v197;
  uint64_t v198;
  __int128 v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t *v211;
  unint64_t v212;
  char *v213;
  __int128 v214;
  unsigned __int8 v215;
  __int128 v216;
  unint64_t *v217;
  unint64_t v218;
  unint64_t v219;
  __int128 v220;
  unint64_t *v221;
  unint64_t v222;
  int8x16_t v223;
  int16x8_t v224;
  int32x4_t v225;
  int8x16_t v226;
  int8x16_t v227;
  int16x8_t v228;
  int32x4_t v229;
  int8x16_t v230;
  int32x4_t v231;
  int8x16_t v232;
  int32x4_t v233;
  int8x16_t v234;
  int8x16_t v235;
  int8x16_t v236;
  int8x16_t v237;
  int8x16_t v238;
  int8x16_t v239;
  int8x16_t v240;
  int8x16_t v241;
  int8x16_t v242;
  int16x8_t v243;
  int32x4_t v244;
  int8x16_t v245;
  int16x8_t v246;
  int32x4_t v247;
  int8x16_t v248;
  int32x4_t v249;
  int8x16_t v250;
  int32x4_t v251;
  int8x16_t v252;
  int8x16_t v253;
  int8x16_t v254;
  int8x16_t v255;
  int8x16_t v256;
  int8x16_t v257;
  int8x16_t v258;
  int8x16_t v259;
  int8x16_t v260;
  int8x16_t v261;
  int8x16_t v262;
  int8x16_t v263;
  int8x16_t v264;
  int8x16_t v265;
  int16x8_t v266;
  int32x4_t v267;
  int16x8_t v268;
  int32x4_t v269;
  int32x4_t v270;
  int32x4_t v271;
  int8x16_t v272;
  int8x16_t v273;
  int8x16_t v274;
  int16x8_t v275;
  int32x4_t v276;
  int16x8_t v277;
  int32x4_t v278;
  int8x16_t v279;
  int8x16_t v280;
  int8x16_t v281;
  int32x4_t v282;
  int8x16_t v283;
  int8x16_t v284;
  int8x16_t v285;
  int32x4_t v286;
  int8x16_t v287;
  int8x16_t v288;
  int8x16_t v289;
  int8x16_t v290;
  int8x16_t v291;
  int8x16_t v292;
  int8x16_t v293;
  int8x16_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  uint64_t *v301;
  unsigned __int8 v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  _OWORD *v318;
  __int128 *v319;
  uint64_t v320;
  __int128 v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;
  _OWORD *v336;
  __int128 *v337;
  uint64_t v338;
  __int128 v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  _QWORD *v344;
  uint64_t v345;
  _QWORD *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t *v351;
  unint64_t v352;
  char *v353;
  __int128 v354;
  unsigned __int8 v355;
  __int128 v356;
  unint64_t *v357;
  unint64_t v358;
  unint64_t v359;
  __int128 v360;
  unint64_t *v361;
  unint64_t v362;
  int8x16_t v363;
  int16x8_t v364;
  int32x4_t v365;
  int8x16_t v366;
  int8x16_t v367;
  int16x8_t v368;
  int32x4_t v369;
  int8x16_t v370;
  int32x4_t v371;
  int8x16_t v372;
  int32x4_t v373;
  int8x16_t v374;
  int8x16_t v375;
  int8x16_t v376;
  int8x16_t v377;
  int8x16_t v378;
  int8x16_t v379;
  int8x16_t v380;
  int8x16_t v381;
  int8x16_t v382;
  int16x8_t v383;
  int32x4_t v384;
  int8x16_t v385;
  int16x8_t v386;
  int32x4_t v387;
  int8x16_t v388;
  int32x4_t v389;
  int8x16_t v390;
  int32x4_t v391;
  int8x16_t v392;
  int8x16_t v393;
  int8x16_t v394;
  int8x16_t v395;
  int8x16_t v396;
  int8x16_t v397;
  int8x16_t v398;
  int8x16_t v399;
  int8x16_t v400;
  int8x16_t v401;
  int8x16_t v402;
  int8x16_t v403;
  int8x16_t v404;
  int8x16_t v405;
  int16x8_t v406;
  int32x4_t v407;
  int16x8_t v408;
  int32x4_t v409;
  int32x4_t v410;
  int32x4_t v411;
  int8x16_t v412;
  int8x16_t v413;
  int8x16_t v414;
  int16x8_t v415;
  int32x4_t v416;
  int16x8_t v417;
  int32x4_t v418;
  int8x16_t v419;
  int8x16_t v420;
  int8x16_t v421;
  int32x4_t v422;
  int8x16_t v423;
  int8x16_t v424;
  int8x16_t v425;
  int32x4_t v426;
  int8x16_t v427;
  int8x16_t v428;
  int8x16_t v429;
  int8x16_t v430;
  int8x16_t v431;
  int8x16_t v432;
  int8x16_t v433;
  int8x16_t v434;
  std::__shared_weak_count *v435;
  unint64_t *v436;
  unint64_t v437;
  std::__shared_weak_count *v438;
  unint64_t *v439;
  unint64_t v440;
  uint64_t *v441;
  unsigned __int8 v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  unint64_t v455;
  uint64_t v456;
  uint64_t v457;
  _OWORD *v458;
  __int128 *v459;
  uint64_t v460;
  __int128 v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  unint64_t v472;
  unint64_t v473;
  uint64_t v474;
  uint64_t v475;
  _OWORD *v476;
  __int128 *v477;
  uint64_t v478;
  __int128 v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  _QWORD *v484;
  uint64_t v485;
  _QWORD *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t *v491;
  unint64_t v492;
  char *v493;
  __int128 v494;
  unsigned __int8 v495;
  __int128 v496;
  unint64_t *v497;
  unint64_t v498;
  unint64_t v499;
  __int128 v500;
  unint64_t *v501;
  unint64_t v502;
  int8x16_t v503;
  int16x8_t v504;
  int32x4_t v505;
  int8x16_t v506;
  int8x16_t v507;
  int16x8_t v508;
  int32x4_t v509;
  int8x16_t v510;
  int32x4_t v511;
  int8x16_t v512;
  int32x4_t v513;
  int8x16_t v514;
  int8x16_t v515;
  int8x16_t v516;
  int8x16_t v517;
  int8x16_t v518;
  int8x16_t v519;
  int16x8_t v520;
  int32x4_t v521;
  int8x16_t v522;
  int16x8_t v523;
  int32x4_t v524;
  int8x16_t v525;
  int32x4_t v526;
  int8x16_t v527;
  int32x4_t v528;
  int8x16_t v529;
  int8x16_t v530;
  int8x16_t v531;
  int8x16_t v532;
  int8x16_t v533;
  int8x16_t v534;
  int8x16_t v535;
  int8x16_t v536;
  int8x16_t v537;
  int8x16_t v538;
  int8x16_t v539;
  int8x16_t v540;
  int8x16_t v541;
  int16x8_t v542;
  int32x4_t v543;
  int16x8_t v544;
  int32x4_t v545;
  int32x4_t v546;
  int32x4_t v547;
  int8x16_t v548;
  int8x16_t v549;
  int8x16_t v550;
  int8x16_t v551;
  int8x16_t v552;
  int8x16_t v553;
  int8x16_t v554;
  int8x16_t v555;
  int8x16_t v556;
  int16x8_t v557;
  int32x4_t v558;
  int16x8_t v559;
  int32x4_t v560;
  int32x4_t v561;
  int32x4_t v562;
  int8x16_t v563;
  int8x16_t v564;
  int8x16_t v565;
  int8x16_t v566;
  int8x16_t v567;
  int8x16_t v568;
  int8x16_t v569;
  std::__shared_weak_count *v570;
  unint64_t *v571;
  unint64_t v572;
  std::__shared_weak_count *v573;
  unint64_t *v574;
  unint64_t v575;
  uint64_t *v576;
  unsigned __int8 v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  unint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  unint64_t v589;
  unint64_t v590;
  uint64_t v591;
  uint64_t v592;
  _OWORD *v593;
  __int128 *v594;
  uint64_t v595;
  __int128 v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  unint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  unint64_t v607;
  unint64_t v608;
  uint64_t v609;
  uint64_t v610;
  _OWORD *v611;
  __int128 *v612;
  uint64_t v613;
  __int128 v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  _QWORD *v619;
  uint64_t v620;
  _QWORD *v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  std::__shared_weak_count *v625;
  unint64_t *v626;
  unint64_t v627;
  _QWORD *v628;
  __int128 v629;
  std::__shared_weak_count *v630;
  unint64_t *v631;
  unint64_t v632;
  std::__shared_weak_count *v633;
  unint64_t *v634;
  unint64_t v635;
  unint64_t *v636;
  uint64_t v637;
  uint64_t v638;
  _QWORD *v639;
  uint64_t v640;
  _QWORD *v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  std::__shared_weak_count *v645;
  unint64_t *v646;
  unint64_t v647;
  _QWORD *v648;
  __int128 v649;
  std::__shared_weak_count *v650;
  unint64_t *v651;
  unint64_t v652;
  std::__shared_weak_count *v653;
  unint64_t *v654;
  unint64_t v655;
  unint64_t *v656;
  uint64_t v657;
  uint64_t v658;
  _QWORD *v659;
  uint64_t v660;
  _QWORD *v661;
  uint64_t v662;
  uint64_t *v663;
  unsigned __int8 v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  unint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  unint64_t v676;
  unint64_t v677;
  uint64_t v678;
  uint64_t v679;
  _OWORD *v680;
  __int128 *v681;
  uint64_t v682;
  __int128 v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  unint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  unint64_t v694;
  unint64_t v695;
  uint64_t v696;
  uint64_t v697;
  _OWORD *v698;
  __int128 *v699;
  uint64_t v700;
  __int128 v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  _QWORD *v706;
  uint64_t v707;
  _QWORD *v708;
  uint64_t v709;
  uint64_t v711;
  uint64_t v712;
  ggl::VenueWallTopShader *v713;
  unsigned __int8 v714;
  unsigned __int8 v715;
  unsigned __int8 v716;
  uint64_t v717;
  uint64_t v718;
  ggl::VenueWallEndCapShader *v719;
  unsigned __int8 v720;
  unsigned __int8 v721;
  unsigned __int8 v722;
  uint64_t v723;
  uint64_t v724;
  ggl::HorizontalVenue3DStrokeShader *v725;
  unsigned __int8 v726;
  unsigned __int8 v727;
  unsigned __int8 v728;
  uint64_t v729;
  uint64_t v730;
  ggl::VerticalVenue3DStrokeShader *v731;
  unsigned __int8 v732;
  unsigned __int8 v733;
  unsigned __int8 v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  unsigned __int8 v739;
  unsigned __int8 v740;
  unsigned __int8 v741;
  unsigned __int8 v742;
  unsigned __int8 v743;
  unsigned __int8 v744;
  unsigned __int8 v745;
  unsigned __int8 v746;
  unsigned __int8 v747;
  unsigned __int8 v748;
  unsigned __int8 v749;
  unsigned __int8 v750;
  uint64_t *v751;
  VKSharedResources *v752;
  uint64_t *v753;
  uint64_t *v754;
  uint64_t *v755;
  uint64_t *v756;
  uint64_t *v757;
  uint64_t *v758;
  uint64_t *v759;
  _BYTE v760[44];
  char v761;
  uint64_t v762;
  std::__shared_weak_count *v763;
  __int128 v764;
  __int128 v765;
  _QWORD v766[3];
  _QWORD *v767;
  _QWORD v768[3];
  _QWORD *v769;
  _QWORD v770[3];
  _QWORD *v771;
  _QWORD v772[3];
  _QWORD *v773;
  _QWORD v774[3];
  _QWORD *v775;
  _QWORD v776[3];
  _QWORD *v777;
  _QWORD v778[3];
  _QWORD *v779;
  _QWORD v780[3];
  _QWORD *v781;
  _QWORD v782[3];
  _QWORD *v783;
  _QWORD v784[3];
  _QWORD *v785;
  _QWORD v786[3];
  _QWORD *v787;
  _QWORD v788[3];
  _QWORD *v789;
  _QWORD v790[3];
  _QWORD *v791;
  _QWORD v792[3];
  _QWORD *v793;
  _QWORD v794[3];
  _QWORD *v795;
  _QWORD v796[3];
  _QWORD *v797;
  uint64_t v798;

  v798 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  *(_QWORD *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 3) = &off_1E42B5DE8;
  *(_QWORD *)((char *)this + 60) = 256;
  *((_DWORD *)this + 17) = 0;
  *((_QWORD *)this + 9) = 1;
  *((_WORD *)this + 40) = 0;
  *((_BYTE *)this + 82) = 3;
  *(_OWORD *)((char *)this + 83) = 0u;
  *((_BYTE *)this + 99) = 0;
  *(_OWORD *)((char *)this + 148) = 0u;
  *((_WORD *)this + 106) = 257;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_BYTE *)this + 232) = 0;
  *((_QWORD *)this + 30) = &off_1E42B5DE8;
  *((_DWORD *)this + 68) = 0;
  *((_QWORD *)this + 33) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_QWORD *)((char *)this + 276) = 256;
  *((_DWORD *)this + 71) = 0;
  *((_QWORD *)this + 36) = 1;
  *((_WORD *)this + 148) = 0;
  *((_BYTE *)this + 298) = 3;
  *(_OWORD *)((char *)this + 299) = 0u;
  *((_BYTE *)this + 315) = 0;
  *(_OWORD *)((char *)this + 364) = 0u;
  *((_WORD *)this + 214) = 257;
  *((_OWORD *)this + 27) = 0u;
  *((_BYTE *)this + 448) = 0;
  v758 = (uint64_t *)((char *)this + 472);
  v759 = (uint64_t *)((char *)this + 16);
  *(_OWORD *)((char *)this + 456) = 0u;
  *((_QWORD *)this + 63) = 0;
  *((_DWORD *)this + 128) = 0;
  *(_OWORD *)((char *)this + 488) = 0u;
  *((_QWORD *)this + 59) = 0;
  *((_QWORD *)this + 60) = &off_1E42B5DE8;
  *(_QWORD *)((char *)this + 516) = 0xC37A000000000100;
  *((_DWORD *)this + 131) = 0;
  *((_QWORD *)this + 66) = 1;
  *((_WORD *)this + 268) = 0;
  *((_BYTE *)this + 538) = 3;
  *((_BYTE *)this + 555) = 0;
  *(_OWORD *)((char *)this + 539) = 0u;
  *(_OWORD *)((char *)this + 604) = 0u;
  *((_WORD *)this + 334) = 257;
  *((_BYTE *)this + 688) = 0;
  *((_OWORD *)this + 42) = 0u;
  v757 = (uint64_t *)((char *)this + 712);
  v756 = (uint64_t *)((char *)this + 736);
  v755 = (uint64_t *)((char *)this + 760);
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *((_QWORD *)this + 95) = 0;
  *((_QWORD *)this + 99) = 0;
  *((_DWORD *)this + 200) = 0;
  *(_OWORD *)((char *)this + 776) = 0u;
  *((_QWORD *)this + 96) = &off_1E42B5DE8;
  *(_QWORD *)((char *)this + 804) = 0xC3FA000000010100;
  *((_DWORD *)this + 203) = 0;
  *((_QWORD *)this + 102) = 1;
  *((_WORD *)this + 412) = 0;
  *((_BYTE *)this + 826) = 3;
  *((_BYTE *)this + 843) = 0;
  *(_OWORD *)((char *)this + 827) = 0u;
  *(_OWORD *)((char *)this + 892) = 0u;
  *((_WORD *)this + 478) = 257;
  *((_BYTE *)this + 976) = 0;
  *((_OWORD *)this + 60) = 0u;
  v754 = (uint64_t *)((char *)this + 1000);
  *((_QWORD *)this + 125) = 0;
  *(_OWORD *)((char *)this + 984) = 0u;
  *((_DWORD *)this + 260) = 0;
  *((_QWORD *)this + 129) = 0;
  *(_OWORD *)((char *)this + 1016) = 0u;
  *((_QWORD *)this + 126) = &off_1E42B5DE8;
  *(_QWORD *)((char *)this + 1044) = 256;
  *((_DWORD *)this + 263) = 0;
  *((_QWORD *)this + 132) = 1;
  *((_WORD *)this + 532) = 0;
  *((_BYTE *)this + 1066) = 3;
  *((_BYTE *)this + 1083) = 0;
  *(_OWORD *)((char *)this + 1067) = 0u;
  *(_OWORD *)((char *)this + 1132) = 0u;
  *((_WORD *)this + 598) = 257;
  *((_BYTE *)this + 1216) = 0;
  *((_OWORD *)this + 75) = 0u;
  v753 = (uint64_t *)((char *)this + 1240);
  *((_QWORD *)this + 155) = 0;
  *(_OWORD *)((char *)this + 1224) = 0u;
  *((_QWORD *)this + 158) = 0;
  *((_QWORD *)this + 157) = 0;
  *((_DWORD *)this + 320) = 0;
  *((_QWORD *)this + 159) = 0;
  *((_QWORD *)this + 156) = &off_1E42B5DE8;
  *(_QWORD *)((char *)this + 1284) = 66048;
  *((_DWORD *)this + 323) = 0;
  *((_QWORD *)this + 162) = 1;
  *((_WORD *)this + 652) = 0;
  *((_BYTE *)this + 1306) = 3;
  *(_QWORD *)((char *)this + 1315) = 0;
  *(_QWORD *)((char *)this + 1307) = 0;
  *((_BYTE *)this + 1323) = 0;
  *(_QWORD *)((char *)this + 1380) = 0;
  *(_QWORD *)((char *)this + 1372) = 0;
  *((_WORD *)this + 718) = 257;
  *((_QWORD *)this + 181) = 0;
  *((_QWORD *)this + 180) = 0;
  *((_BYTE *)this + 1456) = 0;
  v751 = (uint64_t *)((char *)this + 1464);
  v752 = v5;
  *((_QWORD *)this + 183) = 0;
  v6 = -[VKSharedResources shaderLibrary](v5, "shaderLibrary");
  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 296) = 0;
  v7 = *(_QWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v7 + 3152);
  v9 = *(std::__shared_weak_count **)(v7 + 3160);
  v762 = v8;
  v763 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  memset(&v760[24], 0, 20);
  v760[0] = 1;
  *(_OWORD *)&v760[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v760[20] = 7;
  v761 = 15;
  v12 = operator new(0x198uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_1E42E5420;
  v13 = *(_OWORD *)&a3->colorFormatsCount;
  v764 = *(_OWORD *)a3->colorFormats;
  v765 = v13;
  v14 = ggl::VenueWall::MeshPipelineState::MeshPipelineState((uint64_t)(v12 + 3), &v762, (uint64_t)v760, &v764);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  *(_QWORD *)this = v14;
  *((_QWORD *)this + 1) = v12;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v763;
  if (v763)
  {
    v19 = (unint64_t *)&v763->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (uint64_t *)operator new();
  v796[0] = &off_1E42D25F0;
  v796[1] = this;
  v797 = v796;
  v794[0] = &off_1E42D7D78;
  v795 = v794;
  v21[1] = 0;
  v21[2] = 0;
  *v21 = 0;
  v22 = &unk_1ECE44000;
  {
    v711 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v711, "GeoGL", 0xA3D02C1100000005);
  }
  v24 = ggl::Allocator::instance(void)::alloc;
  v21[4] = 0;
  v21[3] = v24;
  v21[5] = 0;
  v21[6] = 0;
  {
    v712 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v712, "GeoGL", 0xA3D02C1100000005);
  }
  v21[7] = ggl::Allocator::instance(void)::alloc;
  v25 = (uint64_t)v797;
  if (!v797)
    goto LABEL_19;
  if (v797 != v796)
  {
    v25 = (*(uint64_t (**)(_QWORD *))(*v797 + 16))(v797);
LABEL_19:
    v21[11] = v25;
    goto LABEL_21;
  }
  v21[11] = (uint64_t)(v21 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v796[0] + 24))(v796, v21 + 8);
LABEL_21:
  v26 = (uint64_t)v795;
  if (!v795)
  {
LABEL_24:
    v21[15] = v26;
    goto LABEL_26;
  }
  if (v795 != v794)
  {
    v26 = (*(uint64_t (**)(_QWORD *))(*v795 + 16))(v795);
    goto LABEL_24;
  }
  v21[15] = (uint64_t)(v21 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v794[0] + 24))((uint64_t)v794, v21 + 12);
LABEL_26:
  v21[16] = 2000;
  v27 = *v21;
  if ((unint64_t)(v21[2] - *v21) > 0x31F)
    goto LABEL_39;
  v28 = v21[1];
  v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21[3] + 16))(v21[3], 800, 8);
  v30 = v28 - v27;
  v31 = v29 + ((v28 - v27) & 0xFFFFFFFFFFFFFFF8);
  v33 = *v21;
  v32 = v21[1];
  v34 = v32 - *v21;
  if (v32 == *v21)
  {
    v36 = v29 + ((v28 - v27) & 0xFFFFFFFFFFFFFFF8);
    v22 = (_QWORD *)&unk_1ECE44000;
    goto LABEL_37;
  }
  v35 = v34 - 8;
  v22 = (_QWORD *)&unk_1ECE44000;
  if ((unint64_t)(v34 - 8) >= 0x58)
  {
    v36 = v31;
    if (v32 - (v30 & 0xFFFFFFFFFFFFFFF8) - v29 >= 0x20)
    {
      v37 = v30 >> 3;
      v38 = (v35 >> 3) + 1;
      v39 = (_OWORD *)(v29 + 8 * v37 - 16);
      v40 = (__int128 *)(v32 - 16);
      v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v42 = *v40;
        *(v39 - 1) = *(v40 - 1);
        *v39 = v42;
        v39 -= 2;
        v40 -= 2;
        v41 -= 4;
      }
      while (v41);
      v36 = v31 - 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
      v32 -= 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
      if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_36;
    }
  }
  else
  {
    v36 = v31;
  }
  do
  {
    v43 = *(_QWORD *)(v32 - 8);
    v32 -= 8;
    *(_QWORD *)(v36 - 8) = v43;
    v36 -= 8;
  }
  while (v32 != v33);
LABEL_36:
  v32 = *v21;
LABEL_37:
  *v21 = v36;
  v21[1] = v31;
  v44 = v21[2];
  v21[2] = v29 + 800;
  if (v32)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21[3] + 40))(v21[3], v32, v44 - v32);
LABEL_39:
  v45 = v21[4];
  if ((unint64_t)(v21[6] - v45) > 0x31F)
    goto LABEL_52;
  v46 = v21[5];
  v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21[7] + 16))(v21[7], 800, 8);
  v48 = v46 - v45;
  v49 = v47 + ((v46 - v45) & 0xFFFFFFFFFFFFFFF8);
  v51 = v21[4];
  v50 = v21[5];
  v52 = v50 - v51;
  if (v50 == v51)
  {
    v54 = v47 + ((v46 - v45) & 0xFFFFFFFFFFFFFFF8);
    v22 = (_QWORD *)&unk_1ECE44000;
    goto LABEL_50;
  }
  v53 = v52 - 8;
  v22 = &unk_1ECE44000;
  if ((unint64_t)(v52 - 8) >= 0x58)
  {
    v54 = v49;
    if (v50 - (v48 & 0xFFFFFFFFFFFFFFF8) - v47 >= 0x20)
    {
      v55 = v48 >> 3;
      v56 = (v53 >> 3) + 1;
      v57 = (_OWORD *)(v47 + 8 * v55 - 16);
      v58 = (__int128 *)(v50 - 16);
      v59 = v56 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v60 = *v58;
        *(v57 - 1) = *(v58 - 1);
        *v57 = v60;
        v57 -= 2;
        v58 -= 2;
        v59 -= 4;
      }
      while (v59);
      v54 = v49 - 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
      v50 -= 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
      if (v56 == (v56 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_49;
    }
  }
  else
  {
    v54 = v49;
  }
  do
  {
    v61 = *(_QWORD *)(v50 - 8);
    v50 -= 8;
    *(_QWORD *)(v54 - 8) = v61;
    v54 -= 8;
  }
  while (v50 != v51);
LABEL_49:
  v50 = v21[4];
LABEL_50:
  v21[4] = v54;
  v21[5] = v49;
  v62 = v21[6];
  v21[6] = v47 + 800;
  if (v50)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21[7] + 40))(v21[7], v50, v62 - v50);
LABEL_52:
  v63 = *v759;
  *v759 = (uint64_t)v21;
  if (v63)
  {
    v64 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v63);
    MEMORY[0x1A1AF4E00](v64, 0x10A0C40D234DDC7);
  }
  v65 = v795;
  if (v795 == v794)
  {
    v66 = 4;
    v65 = v794;
  }
  else
  {
    if (!v795)
      goto LABEL_59;
    v66 = 5;
  }
  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_59:
  v67 = v797;
  if (v797 == v796)
  {
    v68 = 4;
    v67 = v796;
  }
  else
  {
    if (!v797)
      goto LABEL_64;
    v68 = 5;
  }
  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_64:
  v69 = *(_QWORD *)(v6 + 80);
  v70 = *(_QWORD *)(v69 + 3176);
  v71 = *(_QWORD *)(v69 + 3184);
  *(_QWORD *)&v764 = v70;
  *((_QWORD *)&v764 + 1) = v71;
  if (v71)
  {
    v72 = (unint64_t *)(v71 + 8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  v74 = (char *)operator new(0x198uLL);
  *((_QWORD *)v74 + 1) = 0;
  *((_QWORD *)v74 + 2) = 0;
  *(_QWORD *)v74 = &off_1E42E5458;
  v75 = *(_OWORD *)&a3->colorFormatsCount;
  *(_OWORD *)v760 = *(_OWORD *)a3->colorFormats;
  *(_OWORD *)&v760[16] = v75;
  if ((v76 & 1) == 0)
  {
    if ((_DWORD)v713)
    {
      if ((v714 & 1) == 0)
      {
        if ((_DWORD)v713)
        {
          if ((v739 & 1) == 0
          {
            if ((v747 & 1) == 0
            {
              ggl::MeshTyped<ggl::VenueWall::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::VenueWall::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::VenueWall::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::VenueWall::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43E40 = 1;
          }
          ggl::VenueWall::WallTopMeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::VenueWall::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE584D18 = &ggl::VenueWall::pipelineDataWallTopMeshPipelineDeviceStructs(void)::ref;
          qword_1EE584D20 = 0;
          if ((v740 & 1) == 0
          {
            ggl::VenueWall::pipelineDataWallTopMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(_QWORD *)algn_1EE584DA8 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
            qword_1EE584DB0 = (uint64_t)ggl::VenueWall::WallTop::reflection(void)::reflection;
          }
          qword_1EE584D28 = (uint64_t)&ggl::VenueWall::pipelineDataWallTopMeshPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE584D30 = xmmword_19FFB35E0;
        }
      }
      ggl::VenueWall::WallTopMeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::VenueWall::WallTopMeshPipelineSetup::typedReflection(void)::ref;
      ggl::VenueWallTopShader::typedReflection(v713);
      qword_1ECE32410 = (uint64_t)&ggl::VenueWallTopShader::typedReflection(void)::ref;
      if ((v715 & 1) == 0
      {
        ggl::VenueWall::pipelineStateWallTopMeshPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE584F68 = 0;
        qword_1EE584F70 = (uint64_t)"";
        dword_1EE584F78 = 0;
        qword_1EE584F80 = (uint64_t)&ggl::VenueWall::pipelineStateWallTopMeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE584F88 = 4;
      }
      qword_1ECE32418 = (uint64_t)&ggl::VenueWall::pipelineStateWallTopMeshPipelineAttributeStructBinding(void)::attr;
      unk_1ECE32420 = 1;
      qword_1ECE32428 = 0;
      unk_1ECE32430 = 1;
      qword_1ECE32438 = (uint64_t)&ggl::VenueWall::pipelineStateWallTopMeshPipelineDeviceStructBinding(void)::ref;
      unk_1ECE32440 = 0;
      if ((v716 & 1) == 0
      {
        ggl::VenueWall::pipelineStateWallTopMeshPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE584ED8 = 0;
        qword_1EE584EE0 = (uint64_t)"view";
        dword_1EE584EE8 = 3;
        qword_1EE584EF0 = (uint64_t)&ggl::VenueWall::pipelineStateWallTopMeshPipelineConstantViewBinding(void)::reflection;
        unk_1EE584EF8 = xmmword_19FFB35A0;
        qword_1EE584F08 = 1;
        unk_1EE584F10 = "lightConfig";
        dword_1EE584F18 = 3;
        qword_1EE584F20 = (uint64_t)&ggl::VenueWall::pipelineStateWallTopMeshPipelineConstantLightConfigBinding(void)::reflection;
        unk_1EE584F28 = xmmword_19FFB2F50;
        qword_1EE584F38 = 2;
        unk_1EE584F40 = "wall";
        dword_1EE584F48 = 3;
        qword_1EE584F50 = (uint64_t)&ggl::VenueWall::pipelineStateWallTopMeshPipelineConstantWallBinding(void)::reflection;
        unk_1EE584F58 = 7;
      }
      qword_1ECE32448 = (uint64_t)&ggl::VenueWall::pipelineStateWallTopMeshPipelineConstantStructBinding(void)::ref;
      unk_1ECE32450 = 3;
      v22 = (_QWORD *)&unk_1ECE44000;
    }
  }
  v77 = v764;
  if (*((_QWORD *)&v764 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v764 + 1) + 8);
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
    *((_DWORD *)v74 + 14) = 0;
    *((_QWORD *)v74 + 5) = 0;
    *((_QWORD *)v74 + 6) = 0;
    *((_QWORD *)v74 + 3) = &off_1E42B6760;
    *((_QWORD *)v74 + 4) = 0;
    *((_QWORD *)v74 + 8) = &ggl::VenueWall::WallTopMeshPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v74 + 72) = v77;
    do
      v80 = __ldxr(v78);
    while (__stxr(v80 + 1, v78));
  }
  else
  {
    *((_DWORD *)v74 + 14) = 0;
    *((_QWORD *)v74 + 5) = 0;
    *((_QWORD *)v74 + 6) = 0;
    *((_QWORD *)v74 + 3) = &off_1E42B6760;
    *((_QWORD *)v74 + 4) = 0;
    *((_QWORD *)v74 + 8) = &ggl::VenueWall::WallTopMeshPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v74 + 72) = v77;
  }
  v74[136] = 0;
  *(_OWORD *)(v74 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v74 + 156) = 0;
  *(_QWORD *)(v74 + 172) = 0;
  *(_QWORD *)(v74 + 164) = 0;
  v74[184] = 0;
  *(_OWORD *)(v74 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v74 + 204) = 0;
  *(_QWORD *)(v74 + 220) = 0;
  *(_QWORD *)(v74 + 212) = 0;
  v74[232] = 0;
  *(_OWORD *)(v74 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v74 + 252) = 0;
  *(_QWORD *)(v74 + 268) = 0;
  *(_QWORD *)(v74 + 260) = 0;
  v81 = *(_OWORD *)&v760[16];
  *(_OWORD *)(v74 + 280) = *(_OWORD *)v760;
  *(_OWORD *)(v74 + 296) = v81;
  v74[312] = 0;
  *((_QWORD *)v74 + 48) = 0;
  *((_OWORD *)v74 + 22) = 0u;
  *((_OWORD *)v74 + 23) = 0u;
  *((_OWORD *)v74 + 20) = 0u;
  *((_OWORD *)v74 + 21) = 0u;
  *((_QWORD *)v74 + 49) = 0x100000001;
  v74[400] = 0;
  v74[88] = 1;
  *(_WORD *)(v74 + 89) = v762;
  v74[91] = BYTE2(v762);
  *(_OWORD *)(v74 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v74 + 27) = 7;
  *((_QWORD *)v74 + 14) = 0;
  *((_QWORD *)v74 + 15) = 0;
  *((_DWORD *)v74 + 32) = 0;
  v74[132] = 15;
  if (*((_QWORD *)&v77 + 1))
  {
    v82 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v77 + 1) + 16))(*((_QWORD *)&v77 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v77 + 1));
    }
  }
  v74[329] = 0;
  v84 = vceqzq_s8(*(int8x16_t *)(v74 + 328));
  v85 = vmovl_high_s8(v84);
  v86 = vmovl_s16(*(int16x4_t *)v85.i8);
  v87.i64[0] = v86.u32[0];
  v87.i64[1] = v86.u32[1];
  v88 = v87;
  v89 = vmovl_s8(*(int8x8_t *)v84.i8);
  v90 = vmovl_s16(*(int16x4_t *)v89.i8);
  v87.i64[0] = v90.u32[0];
  v87.i64[1] = v90.u32[1];
  v91 = v87;
  v92 = vmovl_high_s16(v85);
  v87.i64[0] = v92.u32[0];
  v87.i64[1] = v92.u32[1];
  v93 = v87;
  v94 = vmovl_high_s16(v89);
  v87.i64[0] = v94.u32[0];
  v87.i64[1] = v94.u32[1];
  v95 = v87;
  v87.i64[0] = v86.u32[2];
  v87.i64[1] = v86.u32[3];
  v96 = v87;
  v87.i64[0] = v90.u32[2];
  v87.i64[1] = v90.u32[3];
  v97 = v87;
  v87.i64[0] = v92.u32[2];
  v87.i64[1] = v92.u32[3];
  v98 = v87;
  v87.i64[0] = v94.u32[2];
  v87.i64[1] = v94.u32[3];
  v99 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v87);
  v100 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v98);
  v101 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v97);
  v102 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v93);
  v103 = vceqzq_s8(*(int8x16_t *)(v74 + 344));
  v104 = vmovl_high_s8(v103);
  v105 = vmovl_s16(*(int16x4_t *)v104.i8);
  v87.i64[0] = v105.u32[0];
  v87.i64[1] = v105.u32[1];
  v106 = v87;
  v107 = vmovl_s8(*(int8x8_t *)v103.i8);
  v108 = vmovl_s16(*(int16x4_t *)v107.i8);
  v87.i64[0] = v108.u32[0];
  v87.i64[1] = v108.u32[1];
  v109 = v87;
  v110 = vmovl_high_s16(v104);
  v87.i64[0] = v110.u32[0];
  v87.i64[1] = v110.u32[1];
  v111 = v87;
  v112 = vmovl_high_s16(v107);
  v87.i64[0] = v112.u32[0];
  v87.i64[1] = v112.u32[1];
  v113 = v87;
  v87.i64[0] = v105.u32[2];
  v87.i64[1] = v105.u32[3];
  v114 = v87;
  v87.i64[0] = v108.u32[2];
  v87.i64[1] = v108.u32[3];
  v115 = v87;
  v87.i64[0] = v110.u32[2];
  v87.i64[1] = v110.u32[3];
  v116 = v87;
  v87.i64[0] = v112.u32[2];
  v87.i64[1] = v112.u32[3];
  v117 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v116);
  v118 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v106), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v88));
  v119 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v109), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v91));
  v120 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v111), v102);
  v121 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v113), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v95));
  v122 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v114), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v96));
  v123 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v115), v101);
  v124 = vorrq_s8(v117, v100);
  v125 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v87), v99);
  v126 = vceqzq_s8(*(int8x16_t *)(v74 + 360));
  v127 = vmovl_high_s8(v126);
  v128 = vmovl_s16(*(int16x4_t *)v127.i8);
  v87.i64[0] = v128.i32[0];
  v87.i64[1] = v128.i32[1];
  v129 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v87);
  v130 = vceqzq_s8(*(int8x16_t *)(v74 + 376));
  v131 = vmovl_high_s8(v130);
  v132 = vmovl_s16(*(int16x4_t *)v131.i8);
  v87.i64[0] = v132.i32[0];
  v87.i64[1] = v132.i32[1];
  v133 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v87), v129), v118);
  v134 = vmovl_s8(*(int8x8_t *)v126.i8);
  v135 = vmovl_s16(*(int16x4_t *)v134.i8);
  v87.i64[0] = v135.i32[0];
  v87.i64[1] = v135.i32[1];
  v136 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v87);
  v137 = vmovl_s8(*(int8x8_t *)v130.i8);
  v138 = vmovl_s16(*(int16x4_t *)v137.i8);
  v87.i64[0] = v138.i32[0];
  v87.i64[1] = v138.i32[1];
  v139 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v87), v136), v119);
  v140 = vmovl_high_s16(v127);
  v87.i64[0] = v140.i32[0];
  v87.i64[1] = v140.i32[1];
  v141 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v87);
  v142 = vmovl_high_s16(v131);
  v87.i64[0] = v142.i32[0];
  v87.i64[1] = v142.i32[1];
  v143 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v87), v141), v120);
  v144 = vmovl_high_s16(v134);
  v87.i64[0] = v144.i32[0];
  v87.i64[1] = v144.i32[1];
  v145 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v87);
  v146 = vmovl_high_s16(v137);
  v87.i64[0] = v146.i32[0];
  v87.i64[1] = v146.i32[1];
  v147 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v87), v145), v121);
  v87.i64[0] = v128.i32[2];
  v87.i64[1] = v128.i32[3];
  v148 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v87);
  v87.i64[0] = v132.i32[2];
  v87.i64[1] = v132.i32[3];
  v149 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v87), v148), v122);
  v87.i64[0] = v135.i32[2];
  v87.i64[1] = v135.i32[3];
  v150 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v87);
  v87.i64[0] = v138.i32[2];
  v87.i64[1] = v138.i32[3];
  v151 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v87), v150), v123);
  v87.i64[0] = v140.i32[2];
  v87.i64[1] = v140.i32[3];
  v152 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v87);
  v87.i64[0] = v142.i32[2];
  v87.i64[1] = v142.i32[3];
  v153 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v87), v152), v124);
  v87.i64[0] = v144.i32[2];
  v87.i64[1] = v144.i32[3];
  v154 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v87);
  v87.i64[0] = v146.i32[2];
  v87.i64[1] = v146.i32[3];
  *((_QWORD *)v74 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v139, v133), vorrq_s8(v147, v143)), (int64x2_t)vorrq_s8(vorrq_s8(v151, v149), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v87), v154), v125), v153))));
  *((_QWORD *)v74 + 3) = &off_1E42BE558;
  v74[312] = 1;
  v155 = (std::__shared_weak_count *)*((_QWORD *)this + 58);
  *((_QWORD *)this + 57) = v74 + 24;
  *((_QWORD *)this + 58) = v74;
  if (v155)
  {
    v156 = (unint64_t *)&v155->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = (std::__shared_weak_count *)*((_QWORD *)&v764 + 1);
  if (*((_QWORD *)&v764 + 1))
  {
    v159 = (unint64_t *)(*((_QWORD *)&v764 + 1) + 8);
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v161 = (uint64_t *)operator new();
  v792[0] = &off_1E42D2638;
  v792[1] = this;
  v793 = v792;
  v790[0] = &off_1E42D7DC0;
  v791 = v790;
  v161[1] = 0;
  v161[2] = 0;
  *v161 = 0;
  {
    v717 = operator new();
    v22[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v717, "GeoGL", 0xA3D02C1100000005);
  }
  v163 = v22[495];
  v161[4] = 0;
  v161[3] = v163;
  v161[5] = 0;
  v161[6] = 0;
  {
    v718 = operator new();
    v22[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v718, "GeoGL", 0xA3D02C1100000005);
  }
  v161[7] = v22[495];
  v164 = (uint64_t)v793;
  if (!v793)
    goto LABEL_95;
  if (v793 != v792)
  {
    v164 = (*(uint64_t (**)(void))(*v793 + 16))();
LABEL_95:
    v161[11] = v164;
    goto LABEL_97;
  }
  v161[11] = (uint64_t)(v161 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v792[0] + 24))(v792, v161 + 8);
LABEL_97:
  v165 = (uint64_t)v791;
  if (!v791)
  {
LABEL_100:
    v161[15] = v165;
    goto LABEL_102;
  }
  if (v791 != v790)
  {
    v165 = (*(uint64_t (**)(void))(*v791 + 16))();
    goto LABEL_100;
  }
  v161[15] = (uint64_t)(v161 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v790[0] + 24))((uint64_t)v790, v161 + 12);
LABEL_102:
  v161[16] = 2000;
  v166 = *v161;
  if ((unint64_t)(v161[2] - *v161) > 0x31F)
    goto LABEL_115;
  v167 = v161[1];
  v168 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v161[3] + 16))(v161[3], 800, 8);
  v169 = v167 - v166;
  v170 = v168 + ((v167 - v166) & 0xFFFFFFFFFFFFFFF8);
  v172 = *v161;
  v171 = v161[1];
  v173 = v171 - *v161;
  if (v171 == *v161)
  {
    v175 = v168 + ((v167 - v166) & 0xFFFFFFFFFFFFFFF8);
    v22 = (_QWORD *)&unk_1ECE44000;
    goto LABEL_113;
  }
  v174 = v173 - 8;
  v22 = (_QWORD *)&unk_1ECE44000;
  if ((unint64_t)(v173 - 8) >= 0x58)
  {
    v175 = v170;
    if (v171 - (v169 & 0xFFFFFFFFFFFFFFF8) - v168 >= 0x20)
    {
      v176 = v169 >> 3;
      v177 = (v174 >> 3) + 1;
      v178 = (_OWORD *)(v168 + 8 * v176 - 16);
      v179 = (__int128 *)(v171 - 16);
      v180 = v177 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v181 = *v179;
        *(v178 - 1) = *(v179 - 1);
        *v178 = v181;
        v178 -= 2;
        v179 -= 2;
        v180 -= 4;
      }
      while (v180);
      v175 = v170 - 8 * (v177 & 0x3FFFFFFFFFFFFFFCLL);
      v171 -= 8 * (v177 & 0x3FFFFFFFFFFFFFFCLL);
      if (v177 == (v177 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_112;
    }
  }
  else
  {
    v175 = v170;
  }
  do
  {
    v182 = *(_QWORD *)(v171 - 8);
    v171 -= 8;
    *(_QWORD *)(v175 - 8) = v182;
    v175 -= 8;
  }
  while (v171 != v172);
LABEL_112:
  v171 = *v161;
LABEL_113:
  *v161 = v175;
  v161[1] = v170;
  v183 = v161[2];
  v161[2] = v168 + 800;
  if (v171)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v161[3] + 40))(v161[3], v171, v183 - v171);
LABEL_115:
  v184 = v161[4];
  if ((unint64_t)(v161[6] - v184) > 0x31F)
    goto LABEL_128;
  v185 = v161[5];
  v186 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v161[7] + 16))(v161[7], 800, 8);
  v187 = v185 - v184;
  v188 = v186 + ((v185 - v184) & 0xFFFFFFFFFFFFFFF8);
  v190 = v161[4];
  v189 = v161[5];
  v191 = v189 - v190;
  if (v189 == v190)
  {
    v193 = v186 + ((v185 - v184) & 0xFFFFFFFFFFFFFFF8);
    v22 = (_QWORD *)&unk_1ECE44000;
    goto LABEL_126;
  }
  v192 = v191 - 8;
  v22 = &unk_1ECE44000;
  if ((unint64_t)(v191 - 8) >= 0x58)
  {
    v193 = v188;
    if (v189 - (v187 & 0xFFFFFFFFFFFFFFF8) - v186 >= 0x20)
    {
      v194 = v187 >> 3;
      v195 = (v192 >> 3) + 1;
      v196 = (_OWORD *)(v186 + 8 * v194 - 16);
      v197 = (__int128 *)(v189 - 16);
      v198 = v195 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v199 = *v197;
        *(v196 - 1) = *(v197 - 1);
        *v196 = v199;
        v196 -= 2;
        v197 -= 2;
        v198 -= 4;
      }
      while (v198);
      v193 = v188 - 8 * (v195 & 0x3FFFFFFFFFFFFFFCLL);
      v189 -= 8 * (v195 & 0x3FFFFFFFFFFFFFFCLL);
      if (v195 == (v195 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_125;
    }
  }
  else
  {
    v193 = v188;
  }
  do
  {
    v200 = *(_QWORD *)(v189 - 8);
    v189 -= 8;
    *(_QWORD *)(v193 - 8) = v200;
    v193 -= 8;
  }
  while (v189 != v190);
LABEL_125:
  v189 = v161[4];
LABEL_126:
  v161[4] = v193;
  v161[5] = v188;
  v201 = v161[6];
  v161[6] = v186 + 800;
  if (v189)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v161[7] + 40))(v161[7], v189, v201 - v189);
LABEL_128:
  v202 = *v758;
  *v758 = (uint64_t)v161;
  if (v202)
  {
    v203 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v202);
    MEMORY[0x1A1AF4E00](v203, 0x10A0C40D234DDC7);
  }
  v204 = v791;
  if (v791 == v790)
  {
    v205 = 4;
    v204 = v790;
  }
  else
  {
    if (!v791)
      goto LABEL_135;
    v205 = 5;
  }
  (*(void (**)(void))(*v204 + 8 * v205))();
LABEL_135:
  v206 = v793;
  if (v793 == v792)
  {
    v207 = 4;
    v206 = v792;
  }
  else
  {
    if (!v793)
      goto LABEL_140;
    v207 = 5;
  }
  (*(void (**)(void))(*v206 + 8 * v207))();
LABEL_140:
  v208 = *(_QWORD *)(v6 + 80);
  v209 = *(_QWORD *)(v208 + 3200);
  v210 = *(_QWORD *)(v208 + 3208);
  *(_QWORD *)&v764 = v209;
  *((_QWORD *)&v764 + 1) = v210;
  if (v210)
  {
    v211 = (unint64_t *)(v210 + 8);
    do
      v212 = __ldxr(v211);
    while (__stxr(v212 + 1, v211));
  }
  v213 = (char *)operator new(0x198uLL);
  *((_QWORD *)v213 + 1) = 0;
  *((_QWORD *)v213 + 2) = 0;
  *(_QWORD *)v213 = &off_1E42E5490;
  v214 = *(_OWORD *)&a3->colorFormatsCount;
  *(_OWORD *)v760 = *(_OWORD *)a3->colorFormats;
  *(_OWORD *)&v760[16] = v214;
  if ((v215 & 1) == 0)
  {
    if ((_DWORD)v719)
    {
      if ((v720 & 1) == 0)
      {
        if ((_DWORD)v719)
        {
          if ((v741 & 1) == 0
          {
            if ((v748 & 1) == 0
            {
              ggl::MeshTyped<ggl::VenueWall::EndCapVbo>::attributesReflection(void)::r = (uint64_t)&ggl::VenueWall::endCapVboReflection;
            }
            ggl::MeshTyped<ggl::VenueWall::EndCapVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::VenueWall::EndCapVbo>::attributesReflection(void)::r;
            unk_1ECE43E60 = 1;
          }
          ggl::VenueWall::WallEndCapMeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::VenueWall::EndCapVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE584D48 = &ggl::VenueWall::pipelineDataWallEndCapMeshPipelineDeviceStructs(void)::ref;
          qword_1EE584D50 = 0;
          if ((v742 & 1) == 0
          {
            ggl::VenueWall::pipelineDataWallEndCapMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(_QWORD *)algn_1EE584EB8 = ggl::Lighting::LightConfiguration::reflection(void)::reflection;
            qword_1EE584EC0 = (uint64_t)ggl::Building::Gradient::reflection(void)::reflection;
            unk_1EE584EC8 = ggl::VenueWall::WallEndCap::reflection(void)::reflection;
          }
          qword_1EE584D58 = (uint64_t)&ggl::VenueWall::pipelineDataWallEndCapMeshPipelineConstantStructs(void)::ref;
          unk_1EE584D60 = xmmword_19FFB48D0;
        }
      }
      ggl::VenueWall::WallEndCapMeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::VenueWall::WallEndCapMeshPipelineSetup::typedReflection(void)::ref;
      ggl::VenueWallEndCapShader::typedReflection(v719);
      qword_1ECE32460 = (uint64_t)&ggl::VenueWallEndCapShader::typedReflection(void)::ref;
      if ((v721 & 1) == 0
      {
        ggl::VenueWall::pipelineStateWallEndCapMeshPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE585058 = 0;
        qword_1EE585060 = (uint64_t)"";
        dword_1EE585068 = 0;
        qword_1EE585070 = (uint64_t)&ggl::VenueWall::pipelineStateWallEndCapMeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE585078 = 4;
      }
      qword_1ECE32468 = (uint64_t)&ggl::VenueWall::pipelineStateWallEndCapMeshPipelineAttributeStructBinding(void)::attr;
      unk_1ECE32470 = 1;
      qword_1ECE32478 = 0;
      unk_1ECE32480 = 1;
      qword_1ECE32488 = (uint64_t)&ggl::VenueWall::pipelineStateWallEndCapMeshPipelineDeviceStructBinding(void)::ref;
      unk_1ECE32490 = 0;
      if ((v722 & 1) == 0
      {
        ggl::VenueWall::pipelineStateWallEndCapMeshPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE584F98 = 0;
        qword_1EE584FA0 = (uint64_t)"view";
        dword_1EE584FA8 = 3;
        qword_1EE584FB0 = (uint64_t)&ggl::VenueWall::pipelineStateWallEndCapMeshPipelineConstantViewBinding(void)::reflection;
        unk_1EE584FB8 = xmmword_19FFB35A0;
        qword_1EE584FC8 = 1;
        unk_1EE584FD0 = "lightConfig";
        dword_1EE584FD8 = 3;
        qword_1EE584FE0 = (uint64_t)&ggl::VenueWall::pipelineStateWallEndCapMeshPipelineConstantLightConfigBinding(void)::reflection;
        unk_1EE584FE8 = xmmword_19FFB2F50;
        qword_1EE584FF8 = 2;
        unk_1EE585000 = "gradient";
        dword_1EE585008 = 3;
        qword_1EE585010 = (uint64_t)&ggl::VenueWall::pipelineStateWallEndCapMeshPipelineConstantGradientBinding(void)::reflection;
        unk_1EE585018 = xmmword_19FFB3040;
        qword_1EE585028 = 3;
        unk_1EE585030 = "wall";
        dword_1EE585038 = 3;
        qword_1EE585040 = (uint64_t)&ggl::VenueWall::pipelineStateWallEndCapMeshPipelineConstantWallBinding(void)::reflection;
        unk_1EE585048 = 5;
      }
      qword_1ECE32498 = (uint64_t)&ggl::VenueWall::pipelineStateWallEndCapMeshPipelineConstantStructBinding(void)::ref;
      unk_1ECE324A0 = 4;
      v22 = (_QWORD *)&unk_1ECE44000;
    }
  }
  v216 = v764;
  if (*((_QWORD *)&v764 + 1))
  {
    v217 = (unint64_t *)(*((_QWORD *)&v764 + 1) + 8);
    do
      v218 = __ldxr(v217);
    while (__stxr(v218 + 1, v217));
    *((_DWORD *)v213 + 14) = 0;
    *((_QWORD *)v213 + 5) = 0;
    *((_QWORD *)v213 + 6) = 0;
    *((_QWORD *)v213 + 3) = &off_1E42B6760;
    *((_QWORD *)v213 + 4) = 0;
    *((_QWORD *)v213 + 8) = &ggl::VenueWall::WallEndCapMeshPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v213 + 72) = v216;
    do
      v219 = __ldxr(v217);
    while (__stxr(v219 + 1, v217));
  }
  else
  {
    *((_DWORD *)v213 + 14) = 0;
    *((_QWORD *)v213 + 5) = 0;
    *((_QWORD *)v213 + 6) = 0;
    *((_QWORD *)v213 + 3) = &off_1E42B6760;
    *((_QWORD *)v213 + 4) = 0;
    *((_QWORD *)v213 + 8) = &ggl::VenueWall::WallEndCapMeshPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v213 + 72) = v216;
  }
  v213[136] = 0;
  *(_OWORD *)(v213 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v213 + 156) = 0;
  *(_QWORD *)(v213 + 172) = 0;
  *(_QWORD *)(v213 + 164) = 0;
  v213[184] = 0;
  *(_OWORD *)(v213 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v213 + 204) = 0;
  *(_QWORD *)(v213 + 220) = 0;
  *(_QWORD *)(v213 + 212) = 0;
  v213[232] = 0;
  *(_OWORD *)(v213 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v213 + 252) = 0;
  *(_QWORD *)(v213 + 268) = 0;
  *(_QWORD *)(v213 + 260) = 0;
  v220 = *(_OWORD *)&v760[16];
  *(_OWORD *)(v213 + 280) = *(_OWORD *)v760;
  *(_OWORD *)(v213 + 296) = v220;
  v213[312] = 0;
  *((_QWORD *)v213 + 48) = 0;
  *((_OWORD *)v213 + 22) = 0u;
  *((_OWORD *)v213 + 23) = 0u;
  *((_OWORD *)v213 + 20) = 0u;
  *((_OWORD *)v213 + 21) = 0u;
  *((_QWORD *)v213 + 49) = 0x100000001;
  v213[400] = 0;
  v213[88] = 1;
  *(_WORD *)(v213 + 89) = v762;
  v213[91] = BYTE2(v762);
  *(_OWORD *)(v213 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v213 + 27) = 7;
  *((_QWORD *)v213 + 14) = 0;
  *((_QWORD *)v213 + 15) = 0;
  *((_DWORD *)v213 + 32) = 0;
  v213[132] = 15;
  if (*((_QWORD *)&v216 + 1))
  {
    v221 = (unint64_t *)(*((_QWORD *)&v216 + 1) + 8);
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v216 + 1) + 16))(*((_QWORD *)&v216 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v216 + 1));
    }
  }
  v213[329] = 0;
  v223 = vceqzq_s8(*(int8x16_t *)(v213 + 328));
  v224 = vmovl_high_s8(v223);
  v225 = vmovl_s16(*(int16x4_t *)v224.i8);
  v226.i64[0] = v225.u32[0];
  v226.i64[1] = v225.u32[1];
  v227 = v226;
  v228 = vmovl_s8(*(int8x8_t *)v223.i8);
  v229 = vmovl_s16(*(int16x4_t *)v228.i8);
  v226.i64[0] = v229.u32[0];
  v226.i64[1] = v229.u32[1];
  v230 = v226;
  v231 = vmovl_high_s16(v224);
  v226.i64[0] = v231.u32[0];
  v226.i64[1] = v231.u32[1];
  v232 = v226;
  v233 = vmovl_high_s16(v228);
  v226.i64[0] = v233.u32[0];
  v226.i64[1] = v233.u32[1];
  v234 = v226;
  v226.i64[0] = v225.u32[2];
  v226.i64[1] = v225.u32[3];
  v235 = v226;
  v226.i64[0] = v229.u32[2];
  v226.i64[1] = v229.u32[3];
  v236 = v226;
  v226.i64[0] = v231.u32[2];
  v226.i64[1] = v231.u32[3];
  v237 = v226;
  v226.i64[0] = v233.u32[2];
  v226.i64[1] = v233.u32[3];
  v238 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v226);
  v239 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v237);
  v240 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v236);
  v241 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v232);
  v242 = vceqzq_s8(*(int8x16_t *)(v213 + 344));
  v243 = vmovl_high_s8(v242);
  v244 = vmovl_s16(*(int16x4_t *)v243.i8);
  v226.i64[0] = v244.u32[0];
  v226.i64[1] = v244.u32[1];
  v245 = v226;
  v246 = vmovl_s8(*(int8x8_t *)v242.i8);
  v247 = vmovl_s16(*(int16x4_t *)v246.i8);
  v226.i64[0] = v247.u32[0];
  v226.i64[1] = v247.u32[1];
  v248 = v226;
  v249 = vmovl_high_s16(v243);
  v226.i64[0] = v249.u32[0];
  v226.i64[1] = v249.u32[1];
  v250 = v226;
  v251 = vmovl_high_s16(v246);
  v226.i64[0] = v251.u32[0];
  v226.i64[1] = v251.u32[1];
  v252 = v226;
  v226.i64[0] = v244.u32[2];
  v226.i64[1] = v244.u32[3];
  v253 = v226;
  v226.i64[0] = v247.u32[2];
  v226.i64[1] = v247.u32[3];
  v254 = v226;
  v226.i64[0] = v249.u32[2];
  v226.i64[1] = v249.u32[3];
  v255 = v226;
  v226.i64[0] = v251.u32[2];
  v226.i64[1] = v251.u32[3];
  v256 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v255);
  v257 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v245), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v227));
  v258 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v248), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v230));
  v259 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v250), v241);
  v260 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v252), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v234));
  v261 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v253), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v235));
  v262 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v254), v240);
  v263 = vorrq_s8(v256, v239);
  v264 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v226), v238);
  v265 = vceqzq_s8(*(int8x16_t *)(v213 + 360));
  v266 = vmovl_s8(*(int8x8_t *)v265.i8);
  v267 = vmovl_high_s16(v266);
  v268 = vmovl_high_s8(v265);
  v269 = vmovl_high_s16(v268);
  v270 = vmovl_s16(*(int16x4_t *)v266.i8);
  v271 = vmovl_s16(*(int16x4_t *)v268.i8);
  v226.i64[0] = v270.i32[0];
  v226.i64[1] = v270.i32[1];
  v272 = v226;
  v226.i64[0] = v271.i32[0];
  v226.i64[1] = v271.i32[1];
  v273 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v226);
  v274 = vceqzq_s8(*(int8x16_t *)(v213 + 376));
  v275 = vmovl_high_s8(v274);
  v276 = vmovl_s16(*(int16x4_t *)v275.i8);
  v226.i64[0] = v276.i32[0];
  v226.i64[1] = v276.i32[1];
  v277 = vmovl_s8(*(int8x8_t *)v274.i8);
  v278 = vmovl_s16(*(int16x4_t *)v277.i8);
  v279 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v226), v273), v257);
  v226.i64[0] = v278.i32[0];
  v226.i64[1] = v278.i32[1];
  v280 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v226), vbicq_s8((int8x16_t)xmmword_19FFB3170, v272));
  v226.i64[0] = v269.i32[0];
  v226.i64[1] = v269.i32[1];
  v281 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v226);
  v282 = vmovl_high_s16(v275);
  v283 = vorrq_s8(v280, v258);
  v226.i64[0] = v282.i32[0];
  v226.i64[1] = v282.i32[1];
  v284 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v226), v281);
  v226.i64[0] = v267.i32[0];
  v226.i64[1] = v267.i32[1];
  v285 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v226);
  v286 = vmovl_high_s16(v277);
  v226.i64[0] = v286.i32[0];
  v226.i64[1] = v286.i32[1];
  v287 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v226), v285), v260);
  v226.i64[0] = v271.i32[2];
  v226.i64[1] = v271.i32[3];
  v288 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v226);
  v226.i64[0] = v276.i32[2];
  v226.i64[1] = v276.i32[3];
  v289 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v226), v288), v261);
  v226.i64[0] = v270.i32[2];
  v226.i64[1] = v270.i32[3];
  v290 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v226);
  v226.i64[0] = v278.i32[2];
  v226.i64[1] = v278.i32[3];
  v291 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v226), v290), v262);
  v226.i64[0] = v269.i32[2];
  v226.i64[1] = v269.i32[3];
  v292 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v226);
  v226.i64[0] = v282.i32[2];
  v226.i64[1] = v282.i32[3];
  v293 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v226), v292), v263);
  v226.i64[0] = v267.i32[2];
  v226.i64[1] = v267.i32[3];
  v294 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v226);
  v226.i64[0] = v286.i32[2];
  v226.i64[1] = v286.i32[3];
  *((_QWORD *)v213 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v283, v279), vorrq_s8(v287, vorrq_s8(v284, v259))), (int64x2_t)vorrq_s8(vorrq_s8(v291, v289), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v226), v294), v264), v293))));
  *((_QWORD *)v213 + 3) = &off_1E42BE5A8;
  v213[312] = 1;
  *((_QWORD *)this + 87) = v213 + 24;
  v295 = (std::__shared_weak_count *)*((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = v213;
  if (v295)
  {
    v296 = (unint64_t *)&v295->__shared_owners_;
    do
      v297 = __ldaxr(v296);
    while (__stlxr(v297 - 1, v296));
    if (!v297)
    {
      ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
      std::__shared_weak_count::__release_weak(v295);
    }
  }
  v298 = (std::__shared_weak_count *)*((_QWORD *)&v764 + 1);
  if (*((_QWORD *)&v764 + 1))
  {
    v299 = (unint64_t *)(*((_QWORD *)&v764 + 1) + 8);
    do
      v300 = __ldaxr(v299);
    while (__stlxr(v300 - 1, v299));
    if (!v300)
    {
      ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
      std::__shared_weak_count::__release_weak(v298);
    }
  }
  v301 = (uint64_t *)operator new();
  v788[0] = &off_1E42D2680;
  v788[1] = this;
  v789 = v788;
  v786[0] = &off_1E42D7E08;
  v787 = v786;
  v301[1] = 0;
  v301[2] = 0;
  *v301 = 0;
  {
    v723 = operator new();
    v22[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v723, "GeoGL", 0xA3D02C1100000005);
  }
  v303 = v22[495];
  v301[4] = 0;
  v301[3] = v303;
  v301[5] = 0;
  v301[6] = 0;
  {
    v724 = operator new();
    v22[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v724, "GeoGL", 0xA3D02C1100000005);
  }
  v301[7] = v22[495];
  v304 = (uint64_t)v789;
  if (!v789)
    goto LABEL_171;
  if (v789 != v788)
  {
    v304 = (*(uint64_t (**)(void))(*v789 + 16))();
LABEL_171:
    v301[11] = v304;
    goto LABEL_173;
  }
  v301[11] = (uint64_t)(v301 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v788[0] + 24))((uint64_t)v788, v301 + 8);
LABEL_173:
  v305 = (uint64_t)v787;
  if (!v787)
  {
LABEL_176:
    v301[15] = v305;
    goto LABEL_178;
  }
  if (v787 != v786)
  {
    v305 = (*(uint64_t (**)(void))(*v787 + 16))();
    goto LABEL_176;
  }
  v301[15] = (uint64_t)(v301 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v786[0] + 24))((uint64_t)v786, v301 + 12);
LABEL_178:
  v301[16] = 2000;
  v306 = *v301;
  if ((unint64_t)(v301[2] - *v301) > 0x31F)
    goto LABEL_191;
  v307 = v301[1];
  v308 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v301[3] + 16))(v301[3], 800, 8);
  v309 = v307 - v306;
  v310 = v308 + ((v307 - v306) & 0xFFFFFFFFFFFFFFF8);
  v312 = *v301;
  v311 = v301[1];
  v313 = v311 - *v301;
  if (v311 == *v301)
  {
    v315 = v308 + ((v307 - v306) & 0xFFFFFFFFFFFFFFF8);
    v22 = (_QWORD *)&unk_1ECE44000;
    goto LABEL_189;
  }
  v314 = v313 - 8;
  v22 = (_QWORD *)&unk_1ECE44000;
  if ((unint64_t)(v313 - 8) >= 0x58)
  {
    v315 = v310;
    if (v311 - (v309 & 0xFFFFFFFFFFFFFFF8) - v308 >= 0x20)
    {
      v316 = v309 >> 3;
      v317 = (v314 >> 3) + 1;
      v318 = (_OWORD *)(v308 + 8 * v316 - 16);
      v319 = (__int128 *)(v311 - 16);
      v320 = v317 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v321 = *v319;
        *(v318 - 1) = *(v319 - 1);
        *v318 = v321;
        v318 -= 2;
        v319 -= 2;
        v320 -= 4;
      }
      while (v320);
      v315 = v310 - 8 * (v317 & 0x3FFFFFFFFFFFFFFCLL);
      v311 -= 8 * (v317 & 0x3FFFFFFFFFFFFFFCLL);
      if (v317 == (v317 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_188;
    }
  }
  else
  {
    v315 = v310;
  }
  do
  {
    v322 = *(_QWORD *)(v311 - 8);
    v311 -= 8;
    *(_QWORD *)(v315 - 8) = v322;
    v315 -= 8;
  }
  while (v311 != v312);
LABEL_188:
  v311 = *v301;
LABEL_189:
  *v301 = v315;
  v301[1] = v310;
  v323 = v301[2];
  v301[2] = v308 + 800;
  if (v311)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v301[3] + 40))(v301[3], v311, v323 - v311);
LABEL_191:
  v324 = v301[4];
  if ((unint64_t)(v301[6] - v324) > 0x31F)
    goto LABEL_204;
  v325 = v301[5];
  v326 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v301[7] + 16))(v301[7], 800, 8);
  v327 = v325 - v324;
  v328 = v326 + ((v325 - v324) & 0xFFFFFFFFFFFFFFF8);
  v330 = v301[4];
  v329 = v301[5];
  v331 = v329 - v330;
  if (v329 == v330)
  {
    v333 = v326 + ((v325 - v324) & 0xFFFFFFFFFFFFFFF8);
    v22 = (_QWORD *)&unk_1ECE44000;
    goto LABEL_202;
  }
  v332 = v331 - 8;
  v22 = &unk_1ECE44000;
  if ((unint64_t)(v331 - 8) >= 0x58)
  {
    v333 = v328;
    if (v329 - (v327 & 0xFFFFFFFFFFFFFFF8) - v326 >= 0x20)
    {
      v334 = v327 >> 3;
      v335 = (v332 >> 3) + 1;
      v336 = (_OWORD *)(v326 + 8 * v334 - 16);
      v337 = (__int128 *)(v329 - 16);
      v338 = v335 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v339 = *v337;
        *(v336 - 1) = *(v337 - 1);
        *v336 = v339;
        v336 -= 2;
        v337 -= 2;
        v338 -= 4;
      }
      while (v338);
      v333 = v328 - 8 * (v335 & 0x3FFFFFFFFFFFFFFCLL);
      v329 -= 8 * (v335 & 0x3FFFFFFFFFFFFFFCLL);
      if (v335 == (v335 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_201;
    }
  }
  else
  {
    v333 = v328;
  }
  do
  {
    v340 = *(_QWORD *)(v329 - 8);
    v329 -= 8;
    *(_QWORD *)(v333 - 8) = v340;
    v333 -= 8;
  }
  while (v329 != v330);
LABEL_201:
  v329 = v301[4];
LABEL_202:
  v301[4] = v333;
  v301[5] = v328;
  v341 = v301[6];
  v301[6] = v326 + 800;
  if (v329)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v301[7] + 40))(v301[7], v329, v341 - v329);
LABEL_204:
  v342 = *v757;
  *v757 = (uint64_t)v301;
  if (v342)
  {
    v343 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v342);
    MEMORY[0x1A1AF4E00](v343, 0x10A0C40D234DDC7);
  }
  v344 = v787;
  if (v787 == v786)
  {
    v345 = 4;
    v344 = v786;
  }
  else
  {
    if (!v787)
      goto LABEL_211;
    v345 = 5;
  }
  (*(void (**)(void))(*v344 + 8 * v345))();
LABEL_211:
  v346 = v789;
  if (v789 == v788)
  {
    v347 = 4;
    v346 = v788;
  }
  else
  {
    if (!v789)
      goto LABEL_216;
    v347 = 5;
  }
  (*(void (**)(void))(*v346 + 8 * v347))();
LABEL_216:
  v348 = *(_QWORD *)(v6 + 80);
  v349 = *(_QWORD *)(v348 + 3248);
  v350 = *(_QWORD *)(v348 + 3256);
  *(_QWORD *)&v764 = v349;
  *((_QWORD *)&v764 + 1) = v350;
  if (v350)
  {
    v351 = (unint64_t *)(v350 + 8);
    do
      v352 = __ldxr(v351);
    while (__stxr(v352 + 1, v351));
  }
  v353 = (char *)operator new(0x198uLL);
  *((_QWORD *)v353 + 1) = 0;
  *((_QWORD *)v353 + 2) = 0;
  *(_QWORD *)v353 = &off_1E42DF098;
  v354 = *(_OWORD *)&a3->colorFormatsCount;
  *(_OWORD *)v760 = *(_OWORD *)a3->colorFormats;
  *(_OWORD *)&v760[16] = v354;
  if ((v355 & 1) == 0)
  {
    if ((_DWORD)v725)
    {
      if ((v726 & 1) == 0)
      {
        if ((_DWORD)v725)
        {
          if ((v743 & 1) == 0
          {
            if ((v749 & 1) == 0
            {
              ggl::MeshTyped<ggl::Venue3DStroke::HorizontalDefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Venue3DStroke::horizontalDefaultVboReflection;
            }
            ggl::MeshTyped<ggl::Venue3DStroke::HorizontalDefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Venue3DStroke::HorizontalDefaultVbo>::attributesReflection(void)::r;
            *(_QWORD *)algn_1ECE43BD0 = 1;
          }
          ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Venue3DStroke::HorizontalDefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE57BA08 = &ggl::Venue3DStroke::pipelineDataHorizontalVenue3DStrokePipelineDeviceStructs(void)::ref;
          qword_1EE57BA10 = 0;
          if ((v744 & 1) == 0
          {
            ggl::Venue3DStroke::pipelineDataHorizontalVenue3DStrokePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(_QWORD *)algn_1EE57BA50 = ggl::Venue3DStroke::Style::reflection(void)::reflection;
          }
          qword_1EE57BA18 = (uint64_t)&ggl::Venue3DStroke::pipelineDataHorizontalVenue3DStrokePipelineConstantStructs(void)::ref;
          unk_1EE57BA20 = xmmword_19FFB35A0;
        }
      }
      ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineSetup::typedReflection(void)::ref;
      ggl::HorizontalVenue3DStrokeShader::typedReflection(v725);
      qword_1ECE311A0 = (uint64_t)&ggl::HorizontalVenue3DStrokeShader::typedReflection(void)::ref;
      if ((v727 & 1) == 0
      {
        ggl::Venue3DStroke::pipelineStateHorizontalVenue3DStrokePipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57BB60 = 0;
        qword_1EE57BB68 = (uint64_t)"";
        dword_1EE57BB70 = 0;
        qword_1EE57BB78 = (uint64_t)&ggl::Venue3DStroke::pipelineStateHorizontalVenue3DStrokePipelineAttributeBinding_0(void)::attr;
        unk_1EE57BB80 = 5;
      }
      qword_1ECE311A8 = (uint64_t)&ggl::Venue3DStroke::pipelineStateHorizontalVenue3DStrokePipelineAttributeStructBinding(void)::attr;
      unk_1ECE311B0 = 1;
      qword_1ECE311B8 = 0;
      unk_1ECE311C0 = 1;
      qword_1ECE311C8 = (uint64_t)&ggl::Venue3DStroke::pipelineStateHorizontalVenue3DStrokePipelineDeviceStructBinding(void)::ref;
      unk_1ECE311D0 = 0;
      if ((v728 & 1) == 0
      {
        ggl::Venue3DStroke::pipelineStateHorizontalVenue3DStrokePipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57BB00 = 0;
        qword_1EE57BB08 = (uint64_t)"view";
        dword_1EE57BB10 = 3;
        qword_1EE57BB18 = (uint64_t)&ggl::Venue3DStroke::pipelineStateHorizontalVenue3DStrokePipelineConstantViewBinding(void)::reflection;
        unk_1EE57BB20 = xmmword_19FFB35A0;
        qword_1EE57BB30 = 1;
        unk_1EE57BB38 = "style";
        dword_1EE57BB40 = 3;
        qword_1EE57BB48 = (uint64_t)&ggl::Venue3DStroke::pipelineStateHorizontalVenue3DStrokePipelineConstantStyleBinding(void)::reflection;
        unk_1EE57BB50 = 6;
      }
      qword_1ECE311D8 = (uint64_t)&ggl::Venue3DStroke::pipelineStateHorizontalVenue3DStrokePipelineConstantStructBinding(void)::ref;
      unk_1ECE311E0 = 2;
      v22 = (_QWORD *)&unk_1ECE44000;
    }
  }
  v356 = v764;
  if (*((_QWORD *)&v764 + 1))
  {
    v357 = (unint64_t *)(*((_QWORD *)&v764 + 1) + 8);
    do
      v358 = __ldxr(v357);
    while (__stxr(v358 + 1, v357));
    *((_DWORD *)v353 + 14) = 0;
    *((_QWORD *)v353 + 5) = 0;
    *((_QWORD *)v353 + 6) = 0;
    *((_QWORD *)v353 + 3) = &off_1E42B6760;
    *((_QWORD *)v353 + 4) = 0;
    *((_QWORD *)v353 + 8) = &ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v353 + 72) = v356;
    do
      v359 = __ldxr(v357);
    while (__stxr(v359 + 1, v357));
  }
  else
  {
    *((_DWORD *)v353 + 14) = 0;
    *((_QWORD *)v353 + 5) = 0;
    *((_QWORD *)v353 + 6) = 0;
    *((_QWORD *)v353 + 3) = &off_1E42B6760;
    *((_QWORD *)v353 + 4) = 0;
    *((_QWORD *)v353 + 8) = &ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v353 + 72) = v356;
  }
  v353[136] = 0;
  *(_OWORD *)(v353 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v353 + 156) = 0;
  *(_QWORD *)(v353 + 172) = 0;
  *(_QWORD *)(v353 + 164) = 0;
  v353[184] = 0;
  *(_OWORD *)(v353 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v353 + 204) = 0;
  *(_QWORD *)(v353 + 220) = 0;
  *(_QWORD *)(v353 + 212) = 0;
  v353[232] = 0;
  *(_OWORD *)(v353 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v353 + 252) = 0;
  *(_QWORD *)(v353 + 268) = 0;
  *(_QWORD *)(v353 + 260) = 0;
  v360 = *(_OWORD *)&v760[16];
  *(_OWORD *)(v353 + 280) = *(_OWORD *)v760;
  *(_OWORD *)(v353 + 296) = v360;
  v353[312] = 0;
  *((_QWORD *)v353 + 48) = 0;
  *((_OWORD *)v353 + 22) = 0u;
  *((_OWORD *)v353 + 23) = 0u;
  *((_OWORD *)v353 + 20) = 0u;
  *((_OWORD *)v353 + 21) = 0u;
  *((_QWORD *)v353 + 49) = 0x100000001;
  v353[400] = 0;
  v353[88] = 1;
  *(_WORD *)(v353 + 89) = v762;
  v353[91] = BYTE2(v762);
  *(_OWORD *)(v353 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v353 + 27) = 7;
  *((_QWORD *)v353 + 14) = 0;
  *((_QWORD *)v353 + 15) = 0;
  *((_DWORD *)v353 + 32) = 0;
  v353[132] = 15;
  if (*((_QWORD *)&v356 + 1))
  {
    v361 = (unint64_t *)(*((_QWORD *)&v356 + 1) + 8);
    do
      v362 = __ldaxr(v361);
    while (__stlxr(v362 - 1, v361));
    if (!v362)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v356 + 1) + 16))(*((_QWORD *)&v356 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v356 + 1));
    }
  }
  v353[329] = 0;
  v363 = vceqzq_s8(*(int8x16_t *)(v353 + 328));
  v364 = vmovl_high_s8(v363);
  v365 = vmovl_s16(*(int16x4_t *)v364.i8);
  v366.i64[0] = v365.u32[0];
  v366.i64[1] = v365.u32[1];
  v367 = v366;
  v368 = vmovl_s8(*(int8x8_t *)v363.i8);
  v369 = vmovl_s16(*(int16x4_t *)v368.i8);
  v366.i64[0] = v369.u32[0];
  v366.i64[1] = v369.u32[1];
  v370 = v366;
  v371 = vmovl_high_s16(v364);
  v366.i64[0] = v371.u32[0];
  v366.i64[1] = v371.u32[1];
  v372 = v366;
  v373 = vmovl_high_s16(v368);
  v366.i64[0] = v373.u32[0];
  v366.i64[1] = v373.u32[1];
  v374 = v366;
  v366.i64[0] = v365.u32[2];
  v366.i64[1] = v365.u32[3];
  v375 = v366;
  v366.i64[0] = v369.u32[2];
  v366.i64[1] = v369.u32[3];
  v376 = v366;
  v366.i64[0] = v371.u32[2];
  v366.i64[1] = v371.u32[3];
  v377 = v366;
  v366.i64[0] = v373.u32[2];
  v366.i64[1] = v373.u32[3];
  v378 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v366);
  v379 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v377);
  v380 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v376);
  v381 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v372);
  v382 = vceqzq_s8(*(int8x16_t *)(v353 + 344));
  v383 = vmovl_high_s8(v382);
  v384 = vmovl_s16(*(int16x4_t *)v383.i8);
  v366.i64[0] = v384.u32[0];
  v366.i64[1] = v384.u32[1];
  v385 = v366;
  v386 = vmovl_s8(*(int8x8_t *)v382.i8);
  v387 = vmovl_s16(*(int16x4_t *)v386.i8);
  v366.i64[0] = v387.u32[0];
  v366.i64[1] = v387.u32[1];
  v388 = v366;
  v389 = vmovl_high_s16(v383);
  v366.i64[0] = v389.u32[0];
  v366.i64[1] = v389.u32[1];
  v390 = v366;
  v391 = vmovl_high_s16(v386);
  v366.i64[0] = v391.u32[0];
  v366.i64[1] = v391.u32[1];
  v392 = v366;
  v366.i64[0] = v384.u32[2];
  v366.i64[1] = v384.u32[3];
  v393 = v366;
  v366.i64[0] = v387.u32[2];
  v366.i64[1] = v387.u32[3];
  v394 = v366;
  v366.i64[0] = v389.u32[2];
  v366.i64[1] = v389.u32[3];
  v395 = v366;
  v366.i64[0] = v391.u32[2];
  v366.i64[1] = v391.u32[3];
  v396 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v395);
  v397 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v385), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v367));
  v398 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v388), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v370));
  v399 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v390), v381);
  v400 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v392), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v374));
  v401 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v393), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v375));
  v402 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v394), v380);
  v403 = vorrq_s8(v396, v379);
  v404 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v366), v378);
  v405 = vceqzq_s8(*(int8x16_t *)(v353 + 360));
  v406 = vmovl_s8(*(int8x8_t *)v405.i8);
  v407 = vmovl_high_s16(v406);
  v408 = vmovl_high_s8(v405);
  v409 = vmovl_high_s16(v408);
  v410 = vmovl_s16(*(int16x4_t *)v406.i8);
  v411 = vmovl_s16(*(int16x4_t *)v408.i8);
  v366.i64[0] = v410.i32[0];
  v366.i64[1] = v410.i32[1];
  v412 = v366;
  v366.i64[0] = v411.i32[0];
  v366.i64[1] = v411.i32[1];
  v413 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v366);
  v414 = vceqzq_s8(*(int8x16_t *)(v353 + 376));
  v415 = vmovl_high_s8(v414);
  v416 = vmovl_s16(*(int16x4_t *)v415.i8);
  v366.i64[0] = v416.i32[0];
  v366.i64[1] = v416.i32[1];
  v417 = vmovl_s8(*(int8x8_t *)v414.i8);
  v418 = vmovl_s16(*(int16x4_t *)v417.i8);
  v419 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v366), v413), v397);
  v366.i64[0] = v418.i32[0];
  v366.i64[1] = v418.i32[1];
  v420 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v366), vbicq_s8((int8x16_t)xmmword_19FFB3170, v412));
  v366.i64[0] = v409.i32[0];
  v366.i64[1] = v409.i32[1];
  v421 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v366);
  v422 = vmovl_high_s16(v415);
  v423 = vorrq_s8(v420, v398);
  v366.i64[0] = v422.i32[0];
  v366.i64[1] = v422.i32[1];
  v424 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v366), v421);
  v366.i64[0] = v407.i32[0];
  v366.i64[1] = v407.i32[1];
  v425 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v366);
  v426 = vmovl_high_s16(v417);
  v366.i64[0] = v426.i32[0];
  v366.i64[1] = v426.i32[1];
  v427 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v366), v425), v400);
  v366.i64[0] = v411.i32[2];
  v366.i64[1] = v411.i32[3];
  v428 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v366);
  v366.i64[0] = v416.i32[2];
  v366.i64[1] = v416.i32[3];
  v429 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v366), v428), v401);
  v366.i64[0] = v410.i32[2];
  v366.i64[1] = v410.i32[3];
  v430 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v366);
  v366.i64[0] = v418.i32[2];
  v366.i64[1] = v418.i32[3];
  v431 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v366), v430), v402);
  v366.i64[0] = v409.i32[2];
  v366.i64[1] = v409.i32[3];
  v432 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v366);
  v366.i64[0] = v422.i32[2];
  v366.i64[1] = v422.i32[3];
  v433 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v366), v432), v403);
  v366.i64[0] = v407.i32[2];
  v366.i64[1] = v407.i32[3];
  v434 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v366);
  v366.i64[0] = v426.i32[2];
  v366.i64[1] = v426.i32[3];
  *((_QWORD *)v353 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v423, v419), vorrq_s8(v427, vorrq_s8(v424, v399))), (int64x2_t)vorrq_s8(vorrq_s8(v431, v429), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v366), v434), v404), v433))));
  *((_QWORD *)v353 + 3) = &off_1E42B6918;
  v353[312] = 1;
  *((_QWORD *)this + 90) = v353 + 24;
  v435 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = v353;
  if (v435)
  {
    v436 = (unint64_t *)&v435->__shared_owners_;
    do
      v437 = __ldaxr(v436);
    while (__stlxr(v437 - 1, v436));
    if (!v437)
    {
      ((void (*)(std::__shared_weak_count *))v435->__on_zero_shared)(v435);
      std::__shared_weak_count::__release_weak(v435);
    }
  }
  v438 = (std::__shared_weak_count *)*((_QWORD *)&v764 + 1);
  if (*((_QWORD *)&v764 + 1))
  {
    v439 = (unint64_t *)(*((_QWORD *)&v764 + 1) + 8);
    do
      v440 = __ldaxr(v439);
    while (__stlxr(v440 - 1, v439));
    if (!v440)
    {
      ((void (*)(std::__shared_weak_count *))v438->__on_zero_shared)(v438);
      std::__shared_weak_count::__release_weak(v438);
    }
  }
  v441 = (uint64_t *)operator new();
  v784[0] = &off_1E42D26C8;
  v784[1] = this;
  v785 = v784;
  v782[0] = &off_1E42D62C0;
  v783 = v782;
  v441[1] = 0;
  v441[2] = 0;
  *v441 = 0;
  {
    v729 = operator new();
    v22[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v729, "GeoGL", 0xA3D02C1100000005);
  }
  v443 = v22[495];
  v441[4] = 0;
  v441[3] = v443;
  v441[5] = 0;
  v441[6] = 0;
  {
    v730 = operator new();
    v22[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v730, "GeoGL", 0xA3D02C1100000005);
  }
  v441[7] = v22[495];
  v444 = (uint64_t)v785;
  if (!v785)
    goto LABEL_247;
  if (v785 != v784)
  {
    v444 = (*(uint64_t (**)(void))(*v785 + 16))();
LABEL_247:
    v441[11] = v444;
    goto LABEL_249;
  }
  v441[11] = (uint64_t)(v441 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v784[0] + 24))((uint64_t)v784, v441 + 8);
LABEL_249:
  v445 = (uint64_t)v783;
  if (!v783)
  {
LABEL_252:
    v441[15] = v445;
    goto LABEL_254;
  }
  if (v783 != v782)
  {
    v445 = (*(uint64_t (**)(void))(*v783 + 16))();
    goto LABEL_252;
  }
  v441[15] = (uint64_t)(v441 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v782[0] + 24))((uint64_t)v782, v441 + 12);
LABEL_254:
  v441[16] = 2000;
  v446 = *v441;
  if ((unint64_t)(v441[2] - *v441) > 0x31F)
    goto LABEL_267;
  v447 = v441[1];
  v448 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v441[3] + 16))(v441[3], 800, 8);
  v449 = v447 - v446;
  v450 = v448 + ((v447 - v446) & 0xFFFFFFFFFFFFFFF8);
  v452 = *v441;
  v451 = v441[1];
  v453 = v451 - *v441;
  if (v451 == *v441)
  {
    v455 = v448 + ((v447 - v446) & 0xFFFFFFFFFFFFFFF8);
    v22 = (_QWORD *)&unk_1ECE44000;
    goto LABEL_265;
  }
  v454 = v453 - 8;
  v22 = (_QWORD *)&unk_1ECE44000;
  if ((unint64_t)(v453 - 8) >= 0x58)
  {
    v455 = v450;
    if (v451 - (v449 & 0xFFFFFFFFFFFFFFF8) - v448 >= 0x20)
    {
      v456 = v449 >> 3;
      v457 = (v454 >> 3) + 1;
      v458 = (_OWORD *)(v448 + 8 * v456 - 16);
      v459 = (__int128 *)(v451 - 16);
      v460 = v457 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v461 = *v459;
        *(v458 - 1) = *(v459 - 1);
        *v458 = v461;
        v458 -= 2;
        v459 -= 2;
        v460 -= 4;
      }
      while (v460);
      v455 = v450 - 8 * (v457 & 0x3FFFFFFFFFFFFFFCLL);
      v451 -= 8 * (v457 & 0x3FFFFFFFFFFFFFFCLL);
      if (v457 == (v457 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_264;
    }
  }
  else
  {
    v455 = v450;
  }
  do
  {
    v462 = *(_QWORD *)(v451 - 8);
    v451 -= 8;
    *(_QWORD *)(v455 - 8) = v462;
    v455 -= 8;
  }
  while (v451 != v452);
LABEL_264:
  v451 = *v441;
LABEL_265:
  *v441 = v455;
  v441[1] = v450;
  v463 = v441[2];
  v441[2] = v448 + 800;
  if (v451)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v441[3] + 40))(v441[3], v451, v463 - v451);
LABEL_267:
  v464 = v441[4];
  if ((unint64_t)(v441[6] - v464) > 0x31F)
    goto LABEL_280;
  v465 = v441[5];
  v466 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v441[7] + 16))(v441[7], 800, 8);
  v467 = v465 - v464;
  v468 = v466 + ((v465 - v464) & 0xFFFFFFFFFFFFFFF8);
  v470 = v441[4];
  v469 = v441[5];
  v471 = v469 - v470;
  if (v469 == v470)
  {
    v473 = v466 + ((v465 - v464) & 0xFFFFFFFFFFFFFFF8);
    v22 = (_QWORD *)&unk_1ECE44000;
    goto LABEL_278;
  }
  v472 = v471 - 8;
  v22 = &unk_1ECE44000;
  if ((unint64_t)(v471 - 8) >= 0x58)
  {
    v473 = v468;
    if (v469 - (v467 & 0xFFFFFFFFFFFFFFF8) - v466 >= 0x20)
    {
      v474 = v467 >> 3;
      v475 = (v472 >> 3) + 1;
      v476 = (_OWORD *)(v466 + 8 * v474 - 16);
      v477 = (__int128 *)(v469 - 16);
      v478 = v475 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v479 = *v477;
        *(v476 - 1) = *(v477 - 1);
        *v476 = v479;
        v476 -= 2;
        v477 -= 2;
        v478 -= 4;
      }
      while (v478);
      v473 = v468 - 8 * (v475 & 0x3FFFFFFFFFFFFFFCLL);
      v469 -= 8 * (v475 & 0x3FFFFFFFFFFFFFFCLL);
      if (v475 == (v475 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_277;
    }
  }
  else
  {
    v473 = v468;
  }
  do
  {
    v480 = *(_QWORD *)(v469 - 8);
    v469 -= 8;
    *(_QWORD *)(v473 - 8) = v480;
    v473 -= 8;
  }
  while (v469 != v470);
LABEL_277:
  v469 = v441[4];
LABEL_278:
  v441[4] = v473;
  v441[5] = v468;
  v481 = v441[6];
  v441[6] = v466 + 800;
  if (v469)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v441[7] + 40))(v441[7], v469, v481 - v469);
LABEL_280:
  v482 = *v756;
  *v756 = (uint64_t)v441;
  if (v482)
  {
    v483 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v482);
    MEMORY[0x1A1AF4E00](v483, 0x10A0C40D234DDC7);
  }
  v484 = v783;
  if (v783 == v782)
  {
    v485 = 4;
    v484 = v782;
  }
  else
  {
    if (!v783)
      goto LABEL_287;
    v485 = 5;
  }
  (*(void (**)(void))(*v484 + 8 * v485))();
LABEL_287:
  v486 = v785;
  if (v785 == v784)
  {
    v487 = 4;
    v486 = v784;
  }
  else
  {
    if (!v785)
      goto LABEL_292;
    v487 = 5;
  }
  (*(void (**)(void))(*v486 + 8 * v487))();
LABEL_292:
  v488 = *(_QWORD *)(v6 + 80);
  v489 = *(_QWORD *)(v488 + 3272);
  v490 = *(_QWORD *)(v488 + 3280);
  *(_QWORD *)&v764 = v489;
  *((_QWORD *)&v764 + 1) = v490;
  if (v490)
  {
    v491 = (unint64_t *)(v490 + 8);
    do
      v492 = __ldxr(v491);
    while (__stxr(v492 + 1, v491));
  }
  v493 = (char *)operator new(0x198uLL);
  *((_QWORD *)v493 + 1) = 0;
  *((_QWORD *)v493 + 2) = 0;
  *(_QWORD *)v493 = &off_1E42DF060;
  v494 = *(_OWORD *)&a3->colorFormatsCount;
  *(_OWORD *)v760 = *(_OWORD *)a3->colorFormats;
  *(_OWORD *)&v760[16] = v494;
  if ((v495 & 1) == 0)
  {
    if ((_DWORD)v731)
    {
      if ((v732 & 1) == 0)
      {
        if ((_DWORD)v731)
        {
          if ((v745 & 1) == 0
          {
            if ((v750 & 1) == 0
            {
              ggl::MeshTyped<ggl::Venue3DStroke::VerticalDefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Venue3DStroke::verticalDefaultVboReflection;
            }
            ggl::MeshTyped<ggl::Venue3DStroke::VerticalDefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Venue3DStroke::VerticalDefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43BA8 = 1;
          }
          ggl::Venue3DStroke::VerticalVenue3DStrokePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Venue3DStroke::VerticalDefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE57B9D8 = &ggl::Venue3DStroke::pipelineDataVerticalVenue3DStrokePipelineDeviceStructs(void)::ref;
          qword_1EE57B9E0 = 0;
          if ((v746 & 1) == 0
          {
            ggl::Venue3DStroke::pipelineDataVerticalVenue3DStrokePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1EE57BA38 = ggl::Venue3DStroke::Style::reflection(void)::reflection;
          }
          qword_1EE57B9E8 = (uint64_t)&ggl::Venue3DStroke::pipelineDataVerticalVenue3DStrokePipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE57B9F0 = xmmword_19FFB35A0;
        }
      }
      ggl::Venue3DStroke::VerticalVenue3DStrokePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::Venue3DStroke::VerticalVenue3DStrokePipelineSetup::typedReflection(void)::ref;
      ggl::VerticalVenue3DStrokeShader::typedReflection(v731);
      qword_1ECE31150 = (uint64_t)&ggl::VerticalVenue3DStrokeShader::typedReflection(void)::ref;
      if ((v733 & 1) == 0
      {
        ggl::Venue3DStroke::pipelineStateVerticalVenue3DStrokePipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE57BAC8 = 0;
        qword_1EE57BAD0 = (uint64_t)"";
        dword_1EE57BAD8 = 0;
        qword_1EE57BAE0 = (uint64_t)&ggl::Venue3DStroke::pipelineStateVerticalVenue3DStrokePipelineAttributeBinding_0(void)::attr;
        unk_1EE57BAE8 = 4;
      }
      qword_1ECE31158 = (uint64_t)&ggl::Venue3DStroke::pipelineStateVerticalVenue3DStrokePipelineAttributeStructBinding(void)::attr;
      unk_1ECE31160 = 1;
      qword_1ECE31168 = 0;
      unk_1ECE31170 = 1;
      qword_1ECE31178 = (uint64_t)&ggl::Venue3DStroke::pipelineStateVerticalVenue3DStrokePipelineDeviceStructBinding(void)::ref;
      unk_1ECE31180 = 0;
      if ((v734 & 1) == 0
      {
        ggl::Venue3DStroke::pipelineStateVerticalVenue3DStrokePipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE57BA68 = 0;
        qword_1EE57BA70 = (uint64_t)"view";
        dword_1EE57BA78 = 3;
        qword_1EE57BA80 = (uint64_t)&ggl::Venue3DStroke::pipelineStateVerticalVenue3DStrokePipelineConstantViewBinding(void)::reflection;
        unk_1EE57BA88 = xmmword_19FFB35A0;
        qword_1EE57BA98 = 1;
        unk_1EE57BAA0 = "style";
        dword_1EE57BAA8 = 3;
        qword_1EE57BAB0 = (uint64_t)&ggl::Venue3DStroke::pipelineStateVerticalVenue3DStrokePipelineConstantStyleBinding(void)::reflection;
        unk_1EE57BAB8 = 6;
      }
      qword_1ECE31188 = (uint64_t)&ggl::Venue3DStroke::pipelineStateVerticalVenue3DStrokePipelineConstantStructBinding(void)::ref;
      unk_1ECE31190 = 2;
      v22 = (_QWORD *)&unk_1ECE44000;
    }
  }
  v496 = v764;
  if (*((_QWORD *)&v764 + 1))
  {
    v497 = (unint64_t *)(*((_QWORD *)&v764 + 1) + 8);
    do
      v498 = __ldxr(v497);
    while (__stxr(v498 + 1, v497));
    *((_DWORD *)v493 + 14) = 0;
    *((_QWORD *)v493 + 5) = 0;
    *((_QWORD *)v493 + 6) = 0;
    *((_QWORD *)v493 + 3) = &off_1E42B6760;
    *((_QWORD *)v493 + 4) = 0;
    *((_QWORD *)v493 + 8) = &ggl::Venue3DStroke::VerticalVenue3DStrokePipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v493 + 72) = v496;
    do
      v499 = __ldxr(v497);
    while (__stxr(v499 + 1, v497));
  }
  else
  {
    *((_DWORD *)v493 + 14) = 0;
    *((_QWORD *)v493 + 5) = 0;
    *((_QWORD *)v493 + 6) = 0;
    *((_QWORD *)v493 + 3) = &off_1E42B6760;
    *((_QWORD *)v493 + 4) = 0;
    *((_QWORD *)v493 + 8) = &ggl::Venue3DStroke::VerticalVenue3DStrokePipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v493 + 72) = v496;
  }
  v493[136] = 0;
  *(_OWORD *)(v493 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v493 + 156) = 0;
  *(_QWORD *)(v493 + 172) = 0;
  *(_QWORD *)(v493 + 164) = 0;
  v493[184] = 0;
  *(_OWORD *)(v493 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v493 + 204) = 0;
  *(_QWORD *)(v493 + 220) = 0;
  *(_QWORD *)(v493 + 212) = 0;
  v493[232] = 0;
  *(_OWORD *)(v493 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v493 + 252) = 0;
  *(_QWORD *)(v493 + 268) = 0;
  *(_QWORD *)(v493 + 260) = 0;
  v500 = *(_OWORD *)&v760[16];
  *(_OWORD *)(v493 + 280) = *(_OWORD *)v760;
  *(_OWORD *)(v493 + 296) = v500;
  v493[312] = 0;
  *((_QWORD *)v493 + 48) = 0;
  *((_OWORD *)v493 + 22) = 0u;
  *((_OWORD *)v493 + 23) = 0u;
  *((_OWORD *)v493 + 20) = 0u;
  *((_OWORD *)v493 + 21) = 0u;
  *((_QWORD *)v493 + 49) = 0x100000001;
  v493[400] = 0;
  v493[88] = 1;
  *(_WORD *)(v493 + 89) = v762;
  v493[91] = BYTE2(v762);
  *(_OWORD *)(v493 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v493 + 27) = 7;
  *((_QWORD *)v493 + 14) = 0;
  *((_QWORD *)v493 + 15) = 0;
  *((_DWORD *)v493 + 32) = 0;
  v493[132] = 15;
  if (*((_QWORD *)&v496 + 1))
  {
    v501 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
    do
      v502 = __ldaxr(v501);
    while (__stlxr(v502 - 1, v501));
    if (!v502)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v496 + 1) + 16))(*((_QWORD *)&v496 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v496 + 1));
    }
  }
  v493[329] = 0;
  v503 = vceqzq_s8(*(int8x16_t *)(v493 + 328));
  v504 = vmovl_s8(*(int8x8_t *)v503.i8);
  v505 = vmovl_high_s16(v504);
  v506.i64[0] = v505.u32[2];
  v506.i64[1] = v505.u32[3];
  v507 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v506);
  v508 = vmovl_high_s8(v503);
  v509 = vmovl_high_s16(v508);
  v506.i64[0] = v509.u32[2];
  v506.i64[1] = v509.u32[3];
  v510 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v506);
  v511 = vmovl_s16(*(int16x4_t *)v504.i8);
  v506.i64[0] = v511.u32[2];
  v506.i64[1] = v511.u32[3];
  v512 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v506);
  v513 = vmovl_s16(*(int16x4_t *)v508.i8);
  v506.i64[0] = v513.u32[2];
  v506.i64[1] = v513.u32[3];
  v514 = vbicq_s8((int8x16_t)xmmword_19FFB30A0, v506);
  v506.i64[0] = v505.u32[0];
  v506.i64[1] = v505.u32[1];
  v515 = vbicq_s8((int8x16_t)xmmword_19FFB30B0, v506);
  v506.i64[0] = v509.u32[0];
  v506.i64[1] = v509.u32[1];
  v516 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v506);
  v506.i64[0] = v511.u32[0];
  v506.i64[1] = v511.u32[1];
  v517 = vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v506);
  v506.i64[0] = v513.u32[0];
  v506.i64[1] = v513.u32[1];
  v518 = vbicq_s8((int8x16_t)xmmword_19FFB30D0, v506);
  v519 = vceqzq_s8(*(int8x16_t *)(v493 + 344));
  v520 = vmovl_s8(*(int8x8_t *)v519.i8);
  v521 = vmovl_high_s16(v520);
  v506.i64[0] = v521.u32[2];
  v506.i64[1] = v521.u32[3];
  v522 = vbicq_s8((int8x16_t)xmmword_19FFB30E0, v506);
  v523 = vmovl_high_s8(v519);
  v524 = vmovl_high_s16(v523);
  v506.i64[0] = v524.u32[2];
  v506.i64[1] = v524.u32[3];
  v525 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v506);
  v526 = vmovl_s16(*(int16x4_t *)v520.i8);
  v506.i64[0] = v526.u32[2];
  v506.i64[1] = v526.u32[3];
  v527 = vbicq_s8((int8x16_t)xmmword_19FFB3100, v506);
  v528 = vmovl_s16(*(int16x4_t *)v523.i8);
  v506.i64[0] = v528.u32[2];
  v506.i64[1] = v528.u32[3];
  v529 = vbicq_s8((int8x16_t)xmmword_19FFB3110, v506);
  v506.i64[0] = v521.u32[0];
  v506.i64[1] = v521.u32[1];
  v530 = vbicq_s8((int8x16_t)xmmword_19FFB3120, v506);
  v506.i64[0] = v524.u32[0];
  v506.i64[1] = v524.u32[1];
  v531 = vbicq_s8((int8x16_t)xmmword_19FFB3130, v506);
  v506.i64[0] = v526.u32[0];
  v506.i64[1] = v526.u32[1];
  v532 = vbicq_s8((int8x16_t)xmmword_19FFB3140, v506);
  v506.i64[0] = v528.u32[0];
  v506.i64[1] = v528.u32[1];
  v533 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v506), v518);
  v534 = vorrq_s8(v532, v517);
  v535 = vorrq_s8(v531, v516);
  v536 = vorrq_s8(v530, v515);
  v537 = vorrq_s8(v529, v514);
  v538 = vorrq_s8(v527, v512);
  v539 = vorrq_s8(v525, v510);
  v540 = vorrq_s8(v522, v507);
  v541 = vceqzq_s8(*(int8x16_t *)(v493 + 360));
  v542 = vmovl_s8(*(int8x8_t *)v541.i8);
  v543 = vmovl_high_s16(v542);
  v544 = vmovl_high_s8(v541);
  v545 = vmovl_high_s16(v544);
  v546 = vmovl_s16(*(int16x4_t *)v542.i8);
  v547 = vmovl_s16(*(int16x4_t *)v544.i8);
  v506.i64[0] = v547.i32[0];
  v506.i64[1] = v547.i32[1];
  v548 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v506);
  v506.i64[0] = v546.i32[0];
  v506.i64[1] = v546.i32[1];
  v549 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v506);
  v506.i64[0] = v545.i32[0];
  v506.i64[1] = v545.i32[1];
  v550 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v506);
  v506.i64[0] = v543.i32[0];
  v506.i64[1] = v543.i32[1];
  v551 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v506);
  v506.i64[0] = v543.i32[2];
  v506.i64[1] = v543.i32[3];
  v552 = v506;
  v506.i64[0] = v545.i32[2];
  v506.i64[1] = v545.i32[3];
  v553 = v506;
  v506.i64[0] = v546.i32[2];
  v506.i64[1] = v546.i32[3];
  v554 = v506;
  v506.i64[0] = v547.i32[2];
  v506.i64[1] = v547.i32[3];
  v555 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v506);
  v556 = vceqzq_s8(*(int8x16_t *)(v493 + 376));
  v557 = vmovl_high_s8(v556);
  v558 = vmovl_s16(*(int16x4_t *)v557.i8);
  v559 = vmovl_s8(*(int8x8_t *)v556.i8);
  v560 = vmovl_s16(*(int16x4_t *)v559.i8);
  v561 = vmovl_high_s16(v557);
  v562 = vmovl_high_s16(v559);
  v506.i64[0] = v562.i32[2];
  v506.i64[1] = v562.i32[3];
  v563 = vbicq_s8((int8x16_t)xmmword_19FFB31E0, v506);
  v506.i64[0] = v561.i32[2];
  v506.i64[1] = v561.i32[3];
  v564 = vbicq_s8((int8x16_t)xmmword_19FFB31F0, v506);
  v506.i64[0] = v560.i32[2];
  v506.i64[1] = v560.i32[3];
  v565 = vbicq_s8((int8x16_t)xmmword_19FFB3200, v506);
  v506.i64[0] = v558.i32[2];
  v506.i64[1] = v558.i32[3];
  v566 = vbicq_s8((int8x16_t)xmmword_19FFB3210, v506);
  v506.i64[0] = v562.i32[0];
  v506.i64[1] = v562.i32[1];
  v567 = vbicq_s8((int8x16_t)xmmword_19FFB3220, v506);
  v506.i64[0] = v561.i32[0];
  v506.i64[1] = v561.i32[1];
  v568 = vbicq_s8((int8x16_t)xmmword_19FFB3230, v506);
  v506.i64[0] = v560.i32[0];
  v506.i64[1] = v560.i32[1];
  v569 = vbicq_s8((int8x16_t)xmmword_19FFB3240, v506);
  v506.i64[0] = v558.i32[0];
  v506.i64[1] = v558.i32[1];
  *((_QWORD *)v493 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v569, v549), v534), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v506), v548), v533)), vorrq_s8(vorrq_s8(vorrq_s8(v567, v551), v536), vorrq_s8(vorrq_s8(v568, v550), v535))), (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v565, vbicq_s8((int8x16_t)xmmword_19FFB31B0, v554)), v538), vorrq_s8(vorrq_s8(v566, v555), v537)), vorrq_s8(vorrq_s8(vorrq_s8(v563, vbicq_s8((int8x16_t)xmmword_19FFB31D0, v552)),
                                                v540),
                                              vorrq_s8(vorrq_s8(v564, vbicq_s8((int8x16_t)xmmword_19FFB31C0, v553)), v539)))));
  *((_QWORD *)v493 + 3) = &off_1E42B68C8;
  v493[312] = 1;
  *((_QWORD *)this + 93) = v493 + 24;
  v570 = (std::__shared_weak_count *)*((_QWORD *)this + 94);
  *((_QWORD *)this + 94) = v493;
  if (v570)
  {
    v571 = (unint64_t *)&v570->__shared_owners_;
    do
      v572 = __ldaxr(v571);
    while (__stlxr(v572 - 1, v571));
    if (!v572)
    {
      ((void (*)(std::__shared_weak_count *))v570->__on_zero_shared)(v570);
      std::__shared_weak_count::__release_weak(v570);
    }
  }
  v573 = (std::__shared_weak_count *)*((_QWORD *)&v764 + 1);
  if (*((_QWORD *)&v764 + 1))
  {
    v574 = (unint64_t *)(*((_QWORD *)&v764 + 1) + 8);
    do
      v575 = __ldaxr(v574);
    while (__stlxr(v575 - 1, v574));
    if (!v575)
    {
      ((void (*)(std::__shared_weak_count *))v573->__on_zero_shared)(v573);
      std::__shared_weak_count::__release_weak(v573);
    }
  }
  v576 = (uint64_t *)operator new();
  v780[0] = &off_1E42D2710;
  v780[1] = this;
  v781 = v780;
  v778[0] = &off_1E42D6278;
  v779 = v778;
  v576[1] = 0;
  v576[2] = 0;
  *v576 = 0;
  {
    v735 = operator new();
    v22[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v735, "GeoGL", 0xA3D02C1100000005);
  }
  v578 = v22[495];
  v576[4] = 0;
  v576[3] = v578;
  v576[5] = 0;
  v576[6] = 0;
  {
    v736 = operator new();
    v22[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v736, "GeoGL", 0xA3D02C1100000005);
  }
  v576[7] = v22[495];
  v579 = (uint64_t)v781;
  if (!v781)
    goto LABEL_323;
  if (v781 != v780)
  {
    v579 = (*(uint64_t (**)(void))(*v781 + 16))();
LABEL_323:
    v576[11] = v579;
    goto LABEL_325;
  }
  v576[11] = (uint64_t)(v576 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v780[0] + 24))((uint64_t)v780, v576 + 8);
LABEL_325:
  v580 = (uint64_t)v779;
  if (!v779)
  {
LABEL_328:
    v576[15] = v580;
    goto LABEL_330;
  }
  if (v779 != v778)
  {
    v580 = (*(uint64_t (**)(void))(*v779 + 16))();
    goto LABEL_328;
  }
  v576[15] = (uint64_t)(v576 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v778[0] + 24))((uint64_t)v778, v576 + 12);
LABEL_330:
  v576[16] = 2000;
  v581 = *v576;
  if ((unint64_t)(v576[2] - *v576) > 0x31F)
    goto LABEL_343;
  v582 = v576[1];
  v583 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v576[3] + 16))(v576[3], 800, 8);
  v584 = v582 - v581;
  v585 = v583 + ((v582 - v581) & 0xFFFFFFFFFFFFFFF8);
  v587 = *v576;
  v586 = v576[1];
  v588 = v586 - *v576;
  if (v586 == *v576)
  {
    v590 = v583 + ((v582 - v581) & 0xFFFFFFFFFFFFFFF8);
    v22 = (_QWORD *)&unk_1ECE44000;
    goto LABEL_341;
  }
  v589 = v588 - 8;
  v22 = (_QWORD *)&unk_1ECE44000;
  if ((unint64_t)(v588 - 8) >= 0x58)
  {
    v590 = v585;
    if (v586 - (v584 & 0xFFFFFFFFFFFFFFF8) - v583 >= 0x20)
    {
      v591 = v584 >> 3;
      v592 = (v589 >> 3) + 1;
      v593 = (_OWORD *)(v583 + 8 * v591 - 16);
      v594 = (__int128 *)(v586 - 16);
      v595 = v592 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v596 = *v594;
        *(v593 - 1) = *(v594 - 1);
        *v593 = v596;
        v593 -= 2;
        v594 -= 2;
        v595 -= 4;
      }
      while (v595);
      v590 = v585 - 8 * (v592 & 0x3FFFFFFFFFFFFFFCLL);
      v586 -= 8 * (v592 & 0x3FFFFFFFFFFFFFFCLL);
      if (v592 == (v592 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_340;
    }
  }
  else
  {
    v590 = v585;
  }
  do
  {
    v597 = *(_QWORD *)(v586 - 8);
    v586 -= 8;
    *(_QWORD *)(v590 - 8) = v597;
    v590 -= 8;
  }
  while (v586 != v587);
LABEL_340:
  v586 = *v576;
LABEL_341:
  *v576 = v590;
  v576[1] = v585;
  v598 = v576[2];
  v576[2] = v583 + 800;
  if (v586)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v576[3] + 40))(v576[3], v586, v598 - v586);
LABEL_343:
  v599 = v576[4];
  if ((unint64_t)(v576[6] - v599) > 0x31F)
    goto LABEL_356;
  v600 = v576[5];
  v601 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v576[7] + 16))(v576[7], 800, 8);
  v602 = v600 - v599;
  v603 = v601 + ((v600 - v599) & 0xFFFFFFFFFFFFFFF8);
  v605 = v576[4];
  v604 = v576[5];
  v606 = v604 - v605;
  if (v604 == v605)
  {
    v608 = v601 + ((v600 - v599) & 0xFFFFFFFFFFFFFFF8);
    v22 = (_QWORD *)&unk_1ECE44000;
    goto LABEL_354;
  }
  v607 = v606 - 8;
  v22 = &unk_1ECE44000;
  if ((unint64_t)(v606 - 8) >= 0x58)
  {
    v608 = v603;
    if (v604 - (v602 & 0xFFFFFFFFFFFFFFF8) - v601 >= 0x20)
    {
      v609 = v602 >> 3;
      v610 = (v607 >> 3) + 1;
      v611 = (_OWORD *)(v601 + 8 * v609 - 16);
      v612 = (__int128 *)(v604 - 16);
      v613 = v610 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v614 = *v612;
        *(v611 - 1) = *(v612 - 1);
        *v611 = v614;
        v611 -= 2;
        v612 -= 2;
        v613 -= 4;
      }
      while (v613);
      v608 = v603 - 8 * (v610 & 0x3FFFFFFFFFFFFFFCLL);
      v604 -= 8 * (v610 & 0x3FFFFFFFFFFFFFFCLL);
      if (v610 == (v610 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_353;
    }
  }
  else
  {
    v608 = v603;
  }
  do
  {
    v615 = *(_QWORD *)(v604 - 8);
    v604 -= 8;
    *(_QWORD *)(v608 - 8) = v615;
    v608 -= 8;
  }
  while (v604 != v605);
LABEL_353:
  v604 = v576[4];
LABEL_354:
  v576[4] = v608;
  v576[5] = v603;
  v616 = v576[6];
  v576[6] = v601 + 800;
  if (v604)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v576[7] + 40))(v576[7], v604, v616 - v604);
LABEL_356:
  v617 = *v755;
  *v755 = (uint64_t)v576;
  if (v617)
  {
    v618 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v617);
    MEMORY[0x1A1AF4E00](v618, 0x10A0C40D234DDC7);
  }
  v619 = v779;
  if (v779 == v778)
  {
    v620 = 4;
    v619 = v778;
  }
  else
  {
    if (!v779)
      goto LABEL_363;
    v620 = 5;
  }
  (*(void (**)(void))(*v619 + 8 * v620))();
LABEL_363:
  v621 = v781;
  if (v781 == v780)
  {
    v622 = 4;
    v621 = v780;
  }
  else
  {
    if (!v781)
      goto LABEL_368;
    v622 = 5;
  }
  (*(void (**)(void))(*v621 + 8 * v622))();
LABEL_368:
  *((_BYTE *)this + 824) = 0;
  v623 = *(_QWORD *)(v6 + 80);
  v624 = *(_QWORD *)(v623 + 3224);
  v625 = *(std::__shared_weak_count **)(v623 + 3232);
  v762 = v624;
  v763 = v625;
  if (v625)
  {
    v626 = (unint64_t *)&v625->__shared_owners_;
    do
      v627 = __ldxr(v626);
    while (__stxr(v627 + 1, v626));
  }
  memset(&v760[20], 0, 24);
  v760[0] = 0;
  *(_OWORD *)&v760[4] = xmmword_19FFB3060;
  v761 = 8;
  v628 = operator new(0x198uLL);
  v628[1] = 0;
  v628[2] = 0;
  *v628 = &off_1E42DF7D0;
  v629 = *(_OWORD *)&a3->colorFormatsCount;
  v764 = *(_OWORD *)a3->colorFormats;
  v765 = v629;
  *((_QWORD *)this + 123) = ggl::VenueWallShadow::MeshPipelineState::MeshPipelineState((uint64_t)(v628 + 3), &v762, (uint64_t)v760, &v764);
  v630 = (std::__shared_weak_count *)*((_QWORD *)this + 124);
  *((_QWORD *)this + 124) = v628;
  if (v630)
  {
    v631 = (unint64_t *)&v630->__shared_owners_;
    do
      v632 = __ldaxr(v631);
    while (__stlxr(v632 - 1, v631));
    if (!v632)
    {
      ((void (*)(std::__shared_weak_count *))v630->__on_zero_shared)(v630);
      std::__shared_weak_count::__release_weak(v630);
    }
  }
  v633 = v763;
  if (v763)
  {
    v634 = (unint64_t *)&v763->__shared_owners_;
    do
      v635 = __ldaxr(v634);
    while (__stlxr(v635 - 1, v634));
    if (!v635)
    {
      ((void (*)(std::__shared_weak_count *))v633->__on_zero_shared)(v633);
      std::__shared_weak_count::__release_weak(v633);
    }
  }
  v636 = (unint64_t *)operator new();
  v776[0] = &off_1E42D2758;
  v776[1] = this;
  v777 = v776;
  v774[0] = &off_1E42D6548;
  v775 = v774;
  ggl::FragmentedPool<ggl::VenueWallShadow::MeshPipelineSetup>::FragmentedPool(v636, (uint64_t)v776, (uint64_t)v774);
  v637 = *v754;
  *v754 = (uint64_t)v636;
  if (v637)
  {
    v638 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v637);
    MEMORY[0x1A1AF4E00](v638, 0x10A0C40D234DDC7);
  }
  v639 = v775;
  if (v775 == v774)
  {
    v640 = 4;
    v639 = v774;
  }
  else
  {
    if (!v775)
      goto LABEL_388;
    v640 = 5;
  }
  (*(void (**)(void))(*v639 + 8 * v640))();
LABEL_388:
  v641 = v777;
  if (v777 == v776)
  {
    v642 = 4;
    v641 = v776;
  }
  else
  {
    if (!v777)
      goto LABEL_393;
    v642 = 5;
  }
  (*(void (**)(void))(*v641 + 8 * v642))();
LABEL_393:
  v643 = *(_QWORD *)(v6 + 80);
  v644 = *(_QWORD *)(v643 + 3224);
  v645 = *(std::__shared_weak_count **)(v643 + 3232);
  v762 = v644;
  v763 = v645;
  if (v645)
  {
    v646 = (unint64_t *)&v645->__shared_owners_;
    do
      v647 = __ldxr(v646);
    while (__stxr(v647 + 1, v646));
  }
  v760[0] = 1;
  *(_OWORD *)&v760[4] = xmmword_19FFB5860;
  *(_DWORD *)&v760[20] = 12;
  memset(&v760[24], 0, 20);
  v761 = 15;
  v648 = operator new(0x198uLL);
  v648[1] = 0;
  v648[2] = 0;
  *v648 = &off_1E42DF7D0;
  v649 = *(_OWORD *)&a3->colorFormatsCount;
  v764 = *(_OWORD *)a3->colorFormats;
  v765 = v649;
  *((_QWORD *)this + 153) = ggl::VenueWallShadow::MeshPipelineState::MeshPipelineState((uint64_t)(v648 + 3), &v762, (uint64_t)v760, &v764);
  v650 = (std::__shared_weak_count *)*((_QWORD *)this + 154);
  *((_QWORD *)this + 154) = v648;
  if (v650)
  {
    v651 = (unint64_t *)&v650->__shared_owners_;
    do
      v652 = __ldaxr(v651);
    while (__stlxr(v652 - 1, v651));
    if (!v652)
    {
      ((void (*)(std::__shared_weak_count *))v650->__on_zero_shared)(v650);
      std::__shared_weak_count::__release_weak(v650);
    }
  }
  v653 = v763;
  if (v763)
  {
    v654 = (unint64_t *)&v763->__shared_owners_;
    do
      v655 = __ldaxr(v654);
    while (__stlxr(v655 - 1, v654));
    if (!v655)
    {
      ((void (*)(std::__shared_weak_count *))v653->__on_zero_shared)(v653);
      std::__shared_weak_count::__release_weak(v653);
    }
  }
  v656 = (unint64_t *)operator new();
  v772[0] = &off_1E42D27A0;
  v772[1] = this;
  v773 = v772;
  v770[0] = &off_1E42D6548;
  v771 = v770;
  ggl::FragmentedPool<ggl::VenueWallShadow::MeshPipelineSetup>::FragmentedPool(v656, (uint64_t)v772, (uint64_t)v770);
  v657 = *v753;
  *v753 = (uint64_t)v656;
  if (v657)
  {
    v658 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v657);
    MEMORY[0x1A1AF4E00](v658, 0x10A0C40D234DDC7);
  }
  v659 = v771;
  if (v771 == v770)
  {
    v660 = 4;
    v659 = v770;
  }
  else
  {
    if (!v771)
      goto LABEL_413;
    v660 = 5;
  }
  (*(void (**)(void))(*v659 + 8 * v660))();
LABEL_413:
  v661 = v773;
  if (v773 == v772)
  {
    v662 = 4;
    v661 = v772;
    goto LABEL_417;
  }
  if (v773)
  {
    v662 = 5;
LABEL_417:
    (*(void (**)(void))(*v661 + 8 * v662))();
  }
  v663 = (uint64_t *)operator new();
  v768[0] = &off_1E42D27E8;
  v769 = v768;
  v766[0] = &off_1E42D6B78;
  v767 = v766;
  v663[1] = 0;
  v663[2] = 0;
  *v663 = 0;
  {
    v737 = operator new();
    v22[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v737, "GeoGL", 0xA3D02C1100000005);
  }
  v665 = v22[495];
  v663[4] = 0;
  v663[3] = v665;
  v663[5] = 0;
  v663[6] = 0;
  {
    v738 = operator new();
    v22[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v738, "GeoGL", 0xA3D02C1100000005);
  }
  v663[7] = v22[495];
  v666 = (uint64_t)v769;
  if (!v769)
    goto LABEL_423;
  if (v769 != v768)
  {
    v666 = (*(uint64_t (**)(void))(*v769 + 16))();
LABEL_423:
    v663[11] = v666;
    goto LABEL_425;
  }
  v663[11] = (uint64_t)(v663 + 8);
  (*(void (**)(uint64_t, _QWORD *))(v768[0] + 24))((uint64_t)v768, v663 + 8);
LABEL_425:
  v667 = (uint64_t)v767;
  if (!v767)
  {
LABEL_428:
    v663[15] = v667;
    goto LABEL_430;
  }
  if (v767 != v766)
  {
    v667 = (*(uint64_t (**)(void))(*v767 + 16))();
    goto LABEL_428;
  }
  v663[15] = (uint64_t)(v663 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v766[0] + 24))((uint64_t)v766, v663 + 12);
LABEL_430:
  v663[16] = 2000;
  v668 = *v663;
  if ((unint64_t)(v663[2] - *v663) > 0x31F)
    goto LABEL_443;
  v669 = v663[1];
  v670 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v663[3] + 16))(v663[3], 800, 8);
  v671 = v669 - v668;
  v672 = v670 + ((v669 - v668) & 0xFFFFFFFFFFFFFFF8);
  v674 = *v663;
  v673 = v663[1];
  v675 = v673 - *v663;
  if (v673 == *v663)
  {
    v677 = v670 + ((v669 - v668) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_441;
  }
  v676 = v675 - 8;
  if ((unint64_t)(v675 - 8) >= 0x58)
  {
    v677 = v670 + ((v669 - v668) & 0xFFFFFFFFFFFFFFF8);
    if (v673 - (v671 & 0xFFFFFFFFFFFFFFF8) - v670 >= 0x20)
    {
      v678 = v671 >> 3;
      v679 = (v676 >> 3) + 1;
      v680 = (_OWORD *)(v670 + 8 * v678 - 16);
      v681 = (__int128 *)(v673 - 16);
      v682 = v679 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v683 = *v681;
        *(v680 - 1) = *(v681 - 1);
        *v680 = v683;
        v680 -= 2;
        v681 -= 2;
        v682 -= 4;
      }
      while (v682);
      v677 = v672 - 8 * (v679 & 0x3FFFFFFFFFFFFFFCLL);
      v673 -= 8 * (v679 & 0x3FFFFFFFFFFFFFFCLL);
      if (v679 == (v679 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_440;
    }
  }
  else
  {
    v677 = v670 + ((v669 - v668) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v684 = *(_QWORD *)(v673 - 8);
    v673 -= 8;
    *(_QWORD *)(v677 - 8) = v684;
    v677 -= 8;
  }
  while (v673 != v674);
LABEL_440:
  v673 = *v663;
LABEL_441:
  *v663 = v677;
  v663[1] = v672;
  v685 = v663[2];
  v663[2] = v670 + 800;
  if (v673)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v663[3] + 40))(v663[3], v673, v685 - v673);
LABEL_443:
  v686 = v663[4];
  if ((unint64_t)(v663[6] - v686) > 0x31F)
    goto LABEL_456;
  v687 = v663[5];
  v688 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v663[7] + 16))(v663[7], 800, 8);
  v689 = v687 - v686;
  v690 = v688 + ((v687 - v686) & 0xFFFFFFFFFFFFFFF8);
  v692 = v663[4];
  v691 = v663[5];
  v693 = v691 - v692;
  if (v691 == v692)
  {
    v695 = v688 + ((v687 - v686) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_454;
  }
  v694 = v693 - 8;
  if ((unint64_t)(v693 - 8) >= 0x58)
  {
    v695 = v688 + ((v687 - v686) & 0xFFFFFFFFFFFFFFF8);
    if (v691 - (v689 & 0xFFFFFFFFFFFFFFF8) - v688 >= 0x20)
    {
      v696 = v689 >> 3;
      v697 = (v694 >> 3) + 1;
      v698 = (_OWORD *)(v688 + 8 * v696 - 16);
      v699 = (__int128 *)(v691 - 16);
      v700 = v697 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v701 = *v699;
        *(v698 - 1) = *(v699 - 1);
        *v698 = v701;
        v698 -= 2;
        v699 -= 2;
        v700 -= 4;
      }
      while (v700);
      v695 = v690 - 8 * (v697 & 0x3FFFFFFFFFFFFFFCLL);
      v691 -= 8 * (v697 & 0x3FFFFFFFFFFFFFFCLL);
      if (v697 == (v697 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_453;
    }
  }
  else
  {
    v695 = v688 + ((v687 - v686) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v702 = *(_QWORD *)(v691 - 8);
    v691 -= 8;
    *(_QWORD *)(v695 - 8) = v702;
    v695 -= 8;
  }
  while (v691 != v692);
LABEL_453:
  v691 = v663[4];
LABEL_454:
  v663[4] = v695;
  v663[5] = v690;
  v703 = v663[6];
  v663[6] = v688 + 800;
  if (v691)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v663[7] + 40))(v663[7], v691, v703 - v691);
LABEL_456:
  v704 = *v751;
  *v751 = (uint64_t)v663;
  if (v704)
  {
    v705 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v704);
    MEMORY[0x1A1AF4E00](v705, 0x10A0C40D234DDC7);
  }
  v706 = v767;
  if (v767 == v766)
  {
    v707 = 4;
    v706 = v766;
  }
  else
  {
    if (!v767)
      goto LABEL_463;
    v707 = 5;
  }
  (*(void (**)(void))(*v706 + 8 * v707))();
LABEL_463:
  v708 = v769;
  if (v769 == v768)
  {
    v709 = 4;
    v708 = v768;
    goto LABEL_467;
  }
  if (v769)
  {
    v709 = 5;
LABEL_467:
    (*(void (**)(void))(*v708 + 8 * v709))();
  }

  return this;
}

void sub_19F310498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ggl::Texture *a10, uint64_t a11, ggl::Texture *a12, uint64_t a13, ggl::Texture *a14, uint64_t a15, ggl::Texture *a16, ggl::Texture *a17, uint64_t *a18, void *a19, uint64_t *a20,uint64_t *a21,uint64_t *a22,uint64_t *a23,uint64_t *a24,uint64_t *a25,uint64_t *a26)
{
  uint64_t v26;
  uint64_t *v27;
  ggl::Texture *v28;
  _QWORD *v29;
  uint64_t *v30;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;

  v32 = (_QWORD *)v27[11];
  if (v32 == v29)
  {
    v33 = 4;
  }
  else
  {
    if (!v32)
    {
      v34 = *v30;
      if (*v30)
        goto LABEL_16;
      goto LABEL_5;
    }
    v33 = 5;
    v29 = (_QWORD *)v27[11];
  }
  (*(void (**)(_QWORD *))(*v29 + 8 * v33))(v29);
  v34 = *v30;
  if (*v30)
  {
LABEL_16:
    v27[5] = v34;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27[7] + 40))(v27[7], v34, v27[6] - v34);
    v35 = *v27;
    if (!*v27)
    {
LABEL_7:
      v36 = (unint64_t *)STACK[0x328];
      if ((unint64_t *)STACK[0x328] == &STACK[0x310])
      {
        v37 = 4;
        v36 = &STACK[0x310];
      }
      else
      {
        if (!v36)
          goto LABEL_12;
        v37 = 5;
      }
      (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_12:
      v38 = (unint64_t *)STACK[0x348];
      if ((unint64_t *)STACK[0x348] == &STACK[0x330])
      {
        v39 = 4;
        v38 = &STACK[0x330];
      }
      else
      {
        if (!v38)
          goto LABEL_21;
        v39 = 5;
      }
      (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_21:
      MEMORY[0x1A1AF4E00](v27, 0x10A0C40D234DDC7);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a18);
      ggl::Texture::~Texture(a10);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a20);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a11);
      ggl::Texture::~Texture(a12);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a21);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a13);
      ggl::Texture::~Texture(a14);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a22);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v28 + 504);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a23);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v28 + 480);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a24);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a15);
      ggl::Texture::~Texture(a16);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a25);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v28 + 216);
      ggl::Texture::~Texture(v28);
      ggl::Texture::~Texture(a17);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a26);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v26);

      _Unwind_Resume(a1);
    }
LABEL_6:
    v27[1] = v35;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27[3] + 40))(v27[3], v35, v27[2] - v35);
    goto LABEL_7;
  }
LABEL_5:
  v35 = *v27;
  if (!*v27)
    goto LABEL_7;
  goto LABEL_6;
}

unint64_t *ggl::FragmentedPool<ggl::VenueWallShadow::MeshPipelineSetup>::FragmentedPool(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v48;
  uint64_t v49;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  {
    v48 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v48, "GeoGL", 0xA3D02C1100000005);
  }
  v7 = ggl::Allocator::instance(void)::alloc;
  a1[4] = 0;
  a1[3] = v7;
  a1[5] = 0;
  a1[6] = 0;
  {
    v49 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v49, "GeoGL", 0xA3D02C1100000005);
  }
  a1[7] = ggl::Allocator::instance(void)::alloc;
  v9 = *(_QWORD *)(a2 + 24);
  if (!v9)
    goto LABEL_6;
  if (v9 != a2)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
LABEL_6:
    a1[11] = v9;
    goto LABEL_8;
  }
  a1[11] = (unint64_t)(a1 + 8);
  (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1 + 8);
LABEL_8:
  v10 = *(_QWORD *)(a3 + 24);
  if (!v10)
  {
LABEL_11:
    a1[15] = v10;
    goto LABEL_13;
  }
  if (v10 != a3)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    goto LABEL_11;
  }
  a1[15] = (unint64_t)(a1 + 12);
  (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), a1 + 12);
LABEL_13:
  a1[16] = 2000;
  v11 = *a1;
  if (a1[2] - *a1 > 0x31F)
    goto LABEL_26;
  v12 = a1[1];
  v13 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 800, 8);
  v14 = v12 - v11;
  v15 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
  v17 = *a1;
  v16 = a1[1];
  v18 = v16 - *a1;
  if (v16 == *a1)
  {
    v20 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_24;
  }
  v19 = v18 - 8;
  if (v18 - 8 >= 0x58)
  {
    v20 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
    if (v16 - (v14 & 0xFFFFFFFFFFFFFFF8) - v13 >= 0x20)
    {
      v21 = v14 >> 3;
      v22 = (v19 >> 3) + 1;
      v23 = (_OWORD *)(v13 + 8 * v21 - 16);
      v24 = (__int128 *)(v16 - 16);
      v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v26 = *v24;
        *(v23 - 1) = *(v24 - 1);
        *v23 = v26;
        v23 -= 2;
        v24 -= 2;
        v25 -= 4;
      }
      while (v25);
      v20 = v15 - 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
      v16 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
      if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_23;
    }
  }
  else
  {
    v20 = v13 + ((v12 - v11) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v27 = *(_QWORD *)(v16 - 8);
    v16 -= 8;
    *(_QWORD *)(v20 - 8) = v27;
    v20 -= 8;
  }
  while (v16 != v17);
LABEL_23:
  v16 = *a1;
LABEL_24:
  *a1 = v20;
  a1[1] = v15;
  v28 = a1[2];
  a1[2] = v13 + 800;
  if (v16)
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v16, v28 - v16);
LABEL_26:
  v29 = a1[4];
  if (a1[6] - v29 > 0x31F)
    return a1;
  v30 = a1[5];
  v31 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[7] + 16))(a1[7], 800, 8);
  v32 = v30 - v29;
  v33 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
  v35 = a1[4];
  v34 = a1[5];
  v36 = v34 - v35;
  if (v34 == v35)
  {
    v38 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_37;
  }
  v37 = v36 - 8;
  if (v36 - 8 >= 0x58)
  {
    v38 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
    if (v34 - (v32 & 0xFFFFFFFFFFFFFFF8) - v31 >= 0x20)
    {
      v39 = v32 >> 3;
      v40 = (v37 >> 3) + 1;
      v41 = (_OWORD *)(v31 + 8 * v39 - 16);
      v42 = (__int128 *)(v34 - 16);
      v43 = v40 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v44 = *v42;
        *(v41 - 1) = *(v42 - 1);
        *v41 = v44;
        v41 -= 2;
        v42 -= 2;
        v43 -= 4;
      }
      while (v43);
      v38 = v33 - 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
      v34 -= 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
      if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_36;
    }
  }
  else
  {
    v38 = v31 + ((v30 - v29) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v45 = *(_QWORD *)(v34 - 8);
    v34 -= 8;
    *(_QWORD *)(v38 - 8) = v45;
    v38 -= 8;
  }
  while (v34 != v35);
LABEL_36:
  v34 = a1[4];
LABEL_37:
  a1[4] = v38;
  a1[5] = v33;
  v46 = a1[6];
  a1[6] = v31 + 800;
  if (v34)
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)a1[7] + 40))(a1[7], v34, v46 - v34);
  return a1;
}

void sub_19F311148(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = (_QWORD *)v1[11];
  if (v5 == v2)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
    {
      v7 = *v3;
      if (*v3)
        goto LABEL_9;
      goto LABEL_5;
    }
    v6 = 5;
    v2 = (_QWORD *)v1[11];
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v6))(v2);
  v7 = *v3;
  if (*v3)
  {
LABEL_9:
    v1[5] = v7;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[7] + 40))(v1[7], v7, v1[6] - v7);
    v8 = *v1;
    if (*v1)
    {
LABEL_10:
      v1[1] = v8;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v8, v1[2] - v8);
      _Unwind_Resume(exception_object);
    }
LABEL_6:
    _Unwind_Resume(exception_object);
  }
LABEL_5:
  v8 = *v1;
  if (*v1)
    goto LABEL_10;
  goto LABEL_6;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_15VenueWallShadow17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6548;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9VenueWall27WallEndCapMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7E08;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9VenueWall24WallTopMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7DC0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_9VenueWall17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7D78;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_17ConstantDataTypedINS2_8Building8GradientEEEEC1ENS_8functionIFPS7_vEEENS9_IFvSA_EEEmmEd1_UlSA_E_NS_9allocatorISF_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6B78;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_13Venue3DStroke36HorizontalVenue3DStrokePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D62C0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_13Venue3DStroke34VerticalVenue3DStrokePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6278;
}

void std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,ggl::ConstantDataTyped<ggl::Building::Gradient> * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D27E8;
}

uint64_t std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::VenueWallShadow::MeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D27A0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,ggl::VenueWallShadow::MeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D2758;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::Venue3DStroke::VerticalVenue3DStrokePipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D2710;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_3>,ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D26C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::VenueWall::WallEndCapMeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D2680;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::VenueWall::WallTopMeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D2638;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0,std::allocator<md::VenueWallRenderResources::VenueWallRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_0>,ggl::VenueWall::MeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D25F0;
  a2[1] = v2;
  return result;
}

uint64_t ___ZN3gss10StyleSheetINS_10PropertyIDEE27addFinishedDecodingCallbackENSt3__18functionIFvbEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  BOOL v3;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 160) != 0;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
    return (*(uint64_t (**)(uint64_t, BOOL *))(*(_QWORD *)v1 + 48))(v1, &v3);
  std::__throw_bad_function_call[abi:nn180100]();
  return md::Logic<md::PuckLogic,md::PuckContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>>::_runBeforeLayout();
}

uint64_t md::Logic<md::PuckLogic,md::PuckContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[10];

  if (*(_QWORD *)(a3 + 8) == 0x9AEE7E062376E454)
  {
    v3 = *(_QWORD *)(a3 + 32);
    if (v3)
    {
      v5 = result;
      md::LogicDependencies<gdc::TypeList<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::ElevationContext,md::NavigationContext,md::StyleLogicContext,md::SharedResourcesContext,md::RegistryContext,md::IdentifiedResourceContext,md::SceneContext,md::NonTiledAssetContext>(v6, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

void md::PuckLogic::runBeforeLayout(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned __int8 *a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  float *v12;
  uint64_t *v13;
  int8x8_t *v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  double v18;
  __int128 v19;
  double v20;
  double v21;
  double v22;
  double v23;
  BOOL v24;
  double v25;
  BOOL v26;
  double v27;
  BOOL v28;
  void *v29;
  VKTimedAnimation *v30;
  void *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  int v34;
  double v35;
  double v36;
  double v37;
  long double v38;
  long double v39;
  float64x2_t v44;
  double v45;
  long double v46;
  long double v47;
  long double v48;
  double v49;
  double v50;
  __double2 v51;
  double v52;
  __double2 v53;
  long double v54;
  long double v55;
  float64x2_t v56;
  long double v57;
  long double v58;
  float64x2_t v60;
  double v63;
  long double v64;
  double v65;
  long double v66;
  __double2 v67;
  double v68;
  double v69;
  double v70;
  __double2 v71;
  long double v72;
  double v73;
  long double v74;
  double v75;
  __double2 v76;
  double v77;
  double v78;
  __double2 v79;
  double v80;
  unsigned __int8 *v81;
  int v83;
  NSObject *v84;
  int v85;
  int v86;
  int v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  _QWORD *v93;
  uint8_t *v94;
  uint8_t *v95;
  uint64_t v96;
  gdc::Registry *v97;
  uint64_t v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *p_shared_owners;
  unint64_t v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  gdc::Registry *v106;
  uint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  gdc::Registry *v116;
  int8x8_t v117;
  unint64_t v118;
  uint8x8_t v119;
  unint64_t v120;
  _BOOL4 i;
  uint64_t *v122;
  _QWORD *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned __int8 v128;
  _WORD *v129;
  _WORD *v130;
  uint64_t *v131;
  _WORD *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  unint64_t *v140;
  uint64_t *v141;
  _QWORD *v142;
  _QWORD *v143;
  int v145;
  uint64_t v146;
  BOOL v147;
  _BOOL8 v148;
  int v149;
  void *v150;
  _OWORD *v151;
  NSObject *v152;
  int v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  gss::Allocator *v159;
  uint64_t v160;
  __int128 v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  _OWORD *v168;
  uint64_t v169;
  float v170;
  gss::Allocator *v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  uint64_t v176;
  gss::Allocator *v177;
  uint64_t v178;
  __int128 v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  float v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  float v191;
  double v192;
  double v193;
  long double v194;
  double v195;
  double v196;
  double v197;
  int v198;
  double v199;
  long double v200;
  long double v201;
  double v202;
  long double v203;
  double v204;
  __double2 v205;
  double v206;
  double v207;
  __double2 v208;
  double v209;
  double v210;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  long double v220;
  long double v221;
  __double2 v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  double v235;
  double v236;
  double v237;
  double v238;
  double v239;
  unint64_t *v240;
  uint64_t *v241;
  uint64_t v242;
  unint64_t *v243;
  uint64_t *v244;
  double v245;
  double v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  float v252;
  double v253;
  double v254;
  uint64_t v255;
  double v256;
  float v257;
  double v258;
  double v259;
  float v260;
  _BOOL4 v261;
  double v262;
  double v263;
  double v264;
  double v265;
  double v266;
  double v267;
  double v268;
  double v269;
  double v270;
  long double v271;
  double v272;
  long double v273;
  float v274;
  float v275;
  float v277;
  double v278;
  double v279;
  __double2 v280;
  double v281;
  double v282;
  double v283;
  double v284;
  double v285;
  double v286;
  double v287;
  double v288;
  double v289;
  double v290;
  double v291;
  double v292;
  double v293;
  double v294;
  double v295;
  double v296;
  double v297;
  double v298;
  double v299;
  double v300;
  double v301;
  double v302;
  double v303;
  double v304;
  double v305;
  double v306;
  double v307;
  double v308;
  double v309;
  double v310;
  double v311;
  double v313;
  double v314;
  double v315;
  double v316;
  double v317;
  double v318;
  double v319;
  double v320;
  double v321;
  double v322;
  double v323;
  double v324;
  double v325;
  double v326;
  double v327;
  double v328;
  double v329;
  double v330;
  double v331;
  double v332;
  double v333;
  double v334;
  double v335;
  double v336;
  double v337;
  double v338;
  double v339;
  double v340;
  double v341;
  double v342;
  double v343;
  double v344;
  __double2 v345;
  double v346;
  double v347;
  double v348;
  double v349;
  float v350;
  double v351;
  double v352;
  double v353;
  double v354;
  double v355;
  double v356;
  double v357;
  double v358;
  double v359;
  double v360;
  double v361;
  double v362;
  double v363;
  double v364;
  double v365;
  double v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  uint64_t v373;
  uint64_t v374;
  double v375;
  double v376;
  double v377;
  float v378;
  float v379;
  id v380;
  double v381;
  _BOOL4 v383;
  int v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t *v387;
  unint64_t v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t *v394;
  unint64_t v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t *v401;
  unint64_t v402;
  unint64_t *v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t *v406;
  unint64_t v407;
  unint64_t *v408;
  uint64_t v409;
  unint64_t *v410;
  unint64_t v411;
  unint64_t *v412;
  uint64_t v413;
  unint64_t *v414;
  unint64_t v415;
  unint64_t *v416;
  BOOL v417;
  BOOL v418;
  uint64_t v419;
  _QWORD *v420;
  _QWORD *v421;
  uint64_t v422;
  _QWORD *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  _QWORD *v427;
  _QWORD *v428;
  char *v429;
  unint64_t v430;
  unint64_t v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  uint64_t v439;
  uint64_t v441;
  uint64_t v442;
  unint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v448;
  uint64_t v449;
  unint64_t v450;
  uint64_t v451;
  BOOL v452;
  uint64_t v453;
  std::__shared_weak_count *v454;
  unint64_t *v455;
  unint64_t v456;
  _QWORD *v457;
  uint64_t v458;
  uint64_t v459;
  unint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  BOOL v464;
  uint64_t v465;
  uint64_t v466;
  BOOL v467;
  unint64_t *v468;
  unint64_t v469;
  _BYTE *v470;
  unint64_t v471;
  unint64_t v472;
  uint64_t v473;
  unint64_t v474;
  uint64_t v475;
  unint64_t v476;
  uint64_t v477;
  uint64_t v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  unint64_t v485;
  uint64_t v486;
  uint64_t v487;
  unint64_t v488;
  uint64_t v489;
  unint64_t v491;
  uint64_t v492;
  unint64_t v493;
  uint64_t v494;
  unint64_t v495;
  uint64_t v496;
  BOOL v497;
  _QWORD *v498;
  uint64_t v499;
  unint64_t v500;
  uint64_t v501;
  BOOL v502;
  uint64_t v503;
  uint64_t v504;
  _QWORD *v505;
  _BYTE *v506;
  unint64_t v507;
  unint64_t v508;
  uint64_t v509;
  unint64_t v510;
  uint64_t v511;
  unint64_t v512;
  uint64_t v513;
  uint64_t v514;
  unint64_t v515;
  uint64_t v516;
  uint64_t v518;
  unint64_t v519;
  uint64_t v520;
  unint64_t v521;
  uint64_t v522;
  uint64_t v523;
  unint64_t v524;
  uint64_t v525;
  unint64_t v527;
  uint64_t v528;
  unint64_t v529;
  uint64_t v530;
  unint64_t v531;
  uint64_t v532;
  BOOL v533;
  char *v534;
  uint64_t v535;
  unint64_t v536;
  uint64_t v537;
  BOOL v538;
  uint64_t v539;
  uint64_t v540;
  _BYTE *v541;
  _QWORD *v542;
  unint64_t v543;
  unint64_t v544;
  uint64_t v545;
  unint64_t v546;
  uint64_t v547;
  unint64_t v548;
  uint64_t v549;
  uint64_t v550;
  unint64_t v551;
  uint64_t v552;
  uint64_t v554;
  unint64_t v555;
  uint64_t v556;
  unint64_t v557;
  uint64_t v558;
  uint64_t v559;
  unint64_t v560;
  uint64_t v561;
  unint64_t v563;
  uint64_t v564;
  unint64_t v565;
  uint64_t v566;
  unint64_t v567;
  uint64_t v568;
  BOOL v569;
  char *v570;
  uint64_t v571;
  unint64_t v572;
  uint64_t v573;
  std::__shared_weak_count *v575;
  unint64_t *v576;
  unint64_t v577;
  std::__shared_weak_count *v578;
  unint64_t *v579;
  unint64_t v580;
  double v581;
  double v582;
  double v583;
  double v584;
  __int128 v585;
  float64x2_t v586;
  float64x2_t v587;
  double v588;
  float64x2_t v589;
  float64x2_t v590;
  float64x2_t v591;
  double v592;
  double v593;
  double v594;
  double v595;
  double v596;
  double v597;
  double v598;
  double v599;
  double v600;
  __double2 v601;
  double v602;
  double v603;
  double v604;
  double v605;
  double v606;
  double v607;
  double v608;
  double v609;
  double v610;
  double v611;
  double v612;
  double v613;
  double v614;
  double v615;
  double v616;
  double v617;
  double v618;
  double v619;
  double v620;
  double v621;
  double v622;
  double v623;
  double v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  __int128 v628;
  uint64_t v629;
  _QWORD *v630;
  uint64_t v631;
  _QWORD *v632;
  uint64_t v633;
  uint64_t v634;
  _QWORD *v635;
  float *v636;
  float32x2_t v637;
  unint64_t v638;
  uint64_t v639;
  uint64_t v640;
  unint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  __int128 v646;
  float v647;
  float v648;
  _QWORD *v649;
  uint64_t v650;
  uint64_t *v651;
  unint64_t *v652;
  float32x2_t v653;
  __int128 v654;
  __int128 v655;
  __int128 v656;
  unint64_t v657;
  uint64_t v658;
  unint64_t v659;
  uint64_t v660;
  unint64_t v661;
  uint64_t v662;
  uint64_t v663;
  unint64_t v664;
  uint64_t v665;
  unint64_t v667;
  unint64_t v668;
  uint64_t v669;
  unint64_t v670;
  unint64_t v671;
  uint64_t v672;
  uint64_t v674;
  __int128 v675;
  float v676;
  float v677;
  unint64_t v678;
  unint64_t v679;
  uint64_t v680;
  uint64_t v681;
  unint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v687;
  uint64_t v688;
  unint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  unint64_t v694;
  std::__shared_weak_count *v695;
  unint64_t *v696;
  unint64_t v697;
  _QWORD *v698;
  uint64_t v699;
  uint64_t v700;
  unint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  BOOL v705;
  uint64_t v706;
  uint64_t v707;
  BOOL v708;
  unint64_t *v709;
  unint64_t v710;
  unint64_t v711;
  unint64_t v712;
  uint64_t v713;
  uint64_t v714;
  unint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v720;
  unint64_t v721;
  uint64_t v722;
  unint64_t v723;
  uint64_t v724;
  uint64_t v725;
  unint64_t v726;
  uint64_t v727;
  unint64_t v729;
  unint64_t v730;
  unint64_t v731;
  uint64_t v732;
  unint64_t v733;
  uint64_t v734;
  BOOL v735;
  uint64_t v736;
  uint64_t v737;
  std::__shared_weak_count *v738;
  unint64_t *v739;
  unint64_t v740;
  _QWORD *v741;
  uint64_t v742;
  uint64_t v743;
  unint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  BOOL v748;
  uint64_t v749;
  uint64_t v750;
  BOOL v751;
  unint64_t *v752;
  unint64_t v753;
  uint64_t v754;
  uint64_t v755;
  unint64_t v756;
  uint64_t v757;
  uint64_t v758;
  unsigned int v759;
  unsigned int v760;
  unsigned int v761;
  unsigned int v762;
  std::__shared_weak_count *v763;
  std::__shared_weak_count *v764;
  std::__shared_weak_count *v765;
  std::__shared_weak_count *v766;
  double v767;
  double v768;
  double v769;
  double v770;
  double v771;
  float v772;
  double v773;
  double v774;
  double v775;
  double v776;
  double v777;
  double v778;
  double v779;
  double v780;
  unsigned int v781;
  double v782;
  double v783;
  double v784;
  uint64_t *v785;
  _BOOL4 v786;
  double v787;
  double v788;
  uint64_t v789;
  double v790;
  double v791;
  id *v792;
  double v793;
  double v794;
  uint64_t v795;
  double v796;
  uint64_t v797;
  uint64_t v798;
  double v799;
  uint64_t v800;
  double v801;
  double v802;
  float64x2_t v803;
  double v804;
  double v805;
  uint64_t *v806;
  double v807;
  double v808;
  double v809;
  double v810;
  long double v811;
  __int128 v812;
  uint64_t v813;
  _QWORD *v814;
  unsigned __int8 *v815;
  uint64_t v816;
  _OWORD *v817;
  double *v818;
  __int128 v819;
  float64x2_t v820;
  __int128 v821;
  uint64_t v822;
  double v823[16];
  double v824[16];
  _OWORD v825[8];
  unint64_t v826;
  __int128 v827;
  __int128 v828;
  __int128 v829;
  __int128 v830;
  uint64_t v831;
  uint64_t v832;
  __int128 v833;
  __int128 v834;
  uint64_t v835;
  _BYTE v836[80];
  __int128 v837;
  __int128 v838;
  __int128 v839;
  _BYTE v840[24];
  __int128 v841;
  __int128 v842;
  __int128 v843;
  uint64_t v844;
  double v845;
  __int128 v846;
  _BYTE v847[24];
  _QWORD v848[3];
  _QWORD *v849;
  _BYTE v850[24];
  _BYTE v851[24];
  _BYTE v852[24];
  _QWORD v853[3];
  _QWORD *v854;
  _QWORD v855[3];
  _QWORD *v856;
  _QWORD v857[3];
  _QWORD *v858;
  uint8_t buf[24];
  _QWORD v860[7];
  _BYTE v861[40];
  uint64_t v862;
  uint64_t v863;

  v863 = *MEMORY[0x1E0C80C00];
  v855[0] = &off_1E42D5380;
  v855[1] = a2;
  v856 = v855;
  v853[0] = &off_1E42D53C8;
  v853[1] = a2;
  v854 = v853;
  v858 = v857;
  v857[0] = &off_1E42D53C8;
  v857[1] = a2;
  _ZNSt3__110__function6__funcIZN2md9PuckLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_16ElevationContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_22SharedResourcesContextENS2_15RegistryContextENS2_25IdentifiedResourceContextENS2_12SceneContextENS2_20NonTiledAssetContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_11PuckContextEE3__0NS_9allocatorISR_EEFvvEEclEv((uint64_t)v855);
  v8 = v854;
  if (v854 == v853)
  {
    v9 = 4;
    v8 = v853;
  }
  else
  {
    if (!v854)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v856;
  if (v856 == v855)
  {
    v11 = 4;
    v10 = v855;
    goto LABEL_10;
  }
  if (v856)
  {
    v11 = 5;
LABEL_10:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v789 = a2;
  v12 = (float *)a3[1];
  v813 = *a3;
  v13 = (uint64_t *)a3[3];
  v792 = (id *)a3[4];
  v14 = (int8x8_t *)a3[6];
  v785 = (uint64_t *)a3[7];
  v15 = (_QWORD *)a3[8];
  v816 = a3[2];
  v16 = *(id *)(v816 + 48);
  v17 = objc_msgSend(v16, "puck");

  if (!*(_QWORD *)(a1 + 440))
  {
    v18 = *(double *)(v816 + 160);
    v19 = *(_OWORD *)(v816 + 144);
    v20 = *(double *)(a1 + 456);
    v21 = *(double *)(a1 + 464);
    v22 = *(double *)(a1 + 472);
    v23 = vabdd_f64(v20, *(double *)&v19);
    v819 = v19;
    v24 = v23 <= fabs(*(double *)&v19 + v20) * 2.22044605e-14 || v23 <= 2.22507386e-308;
    if (!v24
      || ((v25 = vabdd_f64(v21, *((double *)&v19 + 1)), v25 > fabs(*((double *)&v819 + 1) + v21) * 2.22044605e-14)
        ? (v26 = v25 <= 2.22507386e-308)
        : (v26 = 1),
          !v26
       || ((v27 = vabdd_f64(v22, v18), v27 > fabs(v18 + v22) * 2.22044605e-14)
         ? (v28 = v27 <= 2.22507386e-308)
         : (v28 = 1),
           !v28)))
    {
      objc_msgSend(0, "stop");
      v29 = *(void **)(a1 + 440);
      *(_QWORD *)(a1 + 440) = 0;

      v30 = -[VKTimedAnimation initWithDuration:]([VKTimedAnimation alloc], "initWithDuration:", 1.5);
      v31 = *(void **)(a1 + 440);
      *(_QWORD *)(a1 + 440) = v30;

      objc_msgSend(*(id *)(a1 + 440), "setTimingFunction:", VKAnimationCurveEaseInOut);
      v32 = MEMORY[0x1E0C809B0];
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = ___ZN2md9PuckLogic13animatePuckUpERKN3geo9Mercator3IdEE_block_invoke;
      v860[0] = &__block_descriptor_88_e8_v12__0f8l;
      v860[1] = a1;
      *(double *)&v860[2] = v20;
      *(double *)&v860[3] = v21;
      *(double *)&v860[4] = v22;
      *(_OWORD *)&v860[5] = v819;
      *(double *)v861 = v18;
      objc_msgSend(*(id *)(a1 + 440), "setStepHandler:", buf);
      *(_QWORD *)v840 = v32;
      *(_QWORD *)&v840[8] = 3221225472;
      *(_QWORD *)&v840[16] = ___ZN2md9PuckLogic13animatePuckUpERKN3geo9Mercator3IdEE_block_invoke_2;
      *(_QWORD *)&v841 = &__block_descriptor_40_e8_v12__0B8l;
      *((_QWORD *)&v841 + 1) = a1;
      objc_msgSend(*(id *)(a1 + 440), "setCompletionHandler:", v840);
      md::AnimationRunner::runAnimation(*(md::MapEngine ***)(a1 + 448), *(VKAnimation **)(a1 + 440));
    }
  }
  v806 = v13;
  v33 = a4;
  v34 = *(unsigned __int8 *)v12;
  v815 = v33;
  *v33 = v34;
  v35 = *(double *)(a1 + 456);
  v782 = *(double *)(a1 + 472);
  v783 = *(double *)(a1 + 464);
  v36 = *(double *)(v816 + 64);
  v780 = cos(v36 + v36);
  v779 = cos(v36 * 4.0);
  v778 = cos(v36 * 6.0);
  v37 = v36 * 0.5;
  v38 = tan(v36 * 0.5 + 0.78103484);
  v776 = log(v38);
  v39 = tan(v36 * 0.5 + 0.789761487);
  v775 = log(v39);
  __asm { FMOV            V1.2D, #0.5 }
  v781 = *(unsigned __int8 *)(v813 + 3776) - 4;
  v820 = _Q1;
  if (v781 >= 0xFFFFFFFD)
  {
    v46 = *(double *)(v813 + 496);
    v47 = *(double *)(v813 + 504);
    v48 = *(double *)(v813 + 512);
    v49 = sqrt(v46 * v46 + v47 * v47);
    v50 = atan2(v48, v49 * 0.996647189);
    v811 = atan2(v47, v46);
    v51 = __sincos_stret(v50);
    v52 = atan2(v48 + v51.__sinval * v51.__sinval * 42841.3115 * v51.__sinval, v49 + v51.__cosval * v51.__cosval * -42697.6727 * v51.__cosval);
    v53 = __sincos_stret(v52);
    v54 = tan(v52 * 0.5 + 0.785398163);
    v55 = log(v54);
    v56.f64[0] = v811;
    v56.f64[1] = v55;
    v44 = vmlaq_f64(v820, (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL), v56);
    v45 = (v49 / v53.__cosval + -6378137.0 / sqrt(v53.__sinval * v53.__sinval * -0.00669437999 + 1.0))
        * 0.0000000249532021;
  }
  else
  {
    v44 = *(float64x2_t *)(v813 + 496);
    v45 = *(double *)(v813 + 512);
  }
  v803 = v44;
  *(float64x2_t *)v851 = v44;
  *(double *)&v851[16] = v45;
  v812 = *(_OWORD *)(v816 + 72);
  v57 = tan(v37 + 0.785398163);
  v58 = log(v57);
  _V6.D[1] = *((_QWORD *)&v812 + 1);
  *(_QWORD *)&v60.f64[0] = v812;
  v60.f64[1] = v58;
  *(float64x2_t *)v852 = vmlaq_f64(v820, (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL), v60);
  v810 = *(double *)&v852[8];
  v821 = *(_OWORD *)v852;
  v784 = v35;
  if (v34)
  {
    _D3 = (float)(v12[4] * v12[5]);
    __asm { FMLA            D2, D3, V6.D[1] }
    v777 = (*((double *)&v812 + 1) + *(float *)(v816 + 88)) * 0.0000000249532021;
    v63 = _D2 * 0.0000000249532021;
  }
  else
  {
    v63 = 0.0;
    v777 = 0.0;
  }
  v794 = v63;
  *(double *)&v852[16] = v63;
  v64 = exp(v803.f64[1] * 6.28318531 + -3.14159265);
  v65 = atan(v64) * 2.0 + -1.57079633;
  v66 = fmod(v803.f64[0] * 6.28318531, 6.28318531);
  v804 = fmod(v66 + 6.28318531, 6.28318531) + -3.14159265;
  v67 = __sincos_stret(v65);
  v68 = 6378137.0 / sqrt(1.0 - v67.__sinval * v67.__sinval * 0.00669437999);
  v69 = v45 * 40075017.0;
  v70 = (v68 + v69) * v67.__cosval;
  v71 = __sincos_stret(v804);
  v802 = v70 * v71.__cosval;
  v805 = v70 * v71.__sinval;
  v801 = (v69 + v68 * 0.99330562) * v67.__sinval;
  v72 = exp(v810 * 6.28318531 + -3.14159265);
  v73 = atan(v72) * 2.0 + -1.57079633;
  v74 = fmod(*(double *)&v821 * 6.28318531, 6.28318531);
  v75 = fmod(v74 + 6.28318531, 6.28318531) + -3.14159265;
  v76 = __sincos_stret(v73);
  v77 = 6378137.0 / sqrt(1.0 - v76.__sinval * v76.__sinval * 0.00669437999);
  v78 = (v77 + v794 * 40075017.0) * v76.__cosval;
  v79 = __sincos_stret(v75);
  *(double *)v850 = v78 * v79.__cosval;
  *(double *)&v850[8] = v78 * v79.__sinval;
  *(double *)&v850[16] = (v794 * 40075017.0 + v77 * 0.99330562) * v76.__sinval;
  v80 = ((v802 - v78 * v79.__cosval) * (v78 * v79.__cosval)
       + (v805 - v78 * v79.__sinval) * (v78 * v79.__sinval)
       + (v801 - *(double *)&v850[16]) * *(double *)&v850[16])
      / sqrt(((v802 - v78 * v79.__cosval) * (v802 - v78 * v79.__cosval)+ (v805 - v78 * v79.__sinval) * (v805 - v78 * v79.__sinval)+ (v801 - *(double *)&v850[16]) * (v801 - *(double *)&v850[16]))* (*(double *)v850 * *(double *)v850+ *(double *)&v850[8] * *(double *)&v850[8]+ *(double *)&v850[16] * *(double *)&v850[16]))+ 0.08;
  *(_BYTE *)(a1 + 388) = v80 >= 0.0;
  v81 = v815;
  if (v17)
    v83 = v80 >= 0.0 && *(_BYTE *)(v17 + 48) != 0;
  else
    v83 = 0;
  v815[208] = v83;
  if (*(unsigned __int8 *)(a1 + 486) != v83)
  {
    if (GEOGetVectorKitPuckLogicLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitPuckLogicLog(void)::onceToken, &__block_literal_global_3515);
    v84 = (id)GEOGetVectorKitPuckLogicLog(void)::log;
    if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
    {
      v85 = *(unsigned __int8 *)(a1 + 486);
      v86 = v815[208];
      v87 = *(unsigned __int8 *)(v17 + 48);
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)&buf[4] = v85;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v86;
      *(_WORD *)&buf[14] = 2048;
      *(_QWORD *)&buf[16] = v17;
      LOWORD(v860[0]) = 1024;
      *(_DWORD *)((char *)v860 + 2) = v87;
      HIWORD(v860[0]) = 1024;
      LODWORD(v860[1]) = v80 >= 0.0;
      _os_log_impl(&dword_19F029000, v84, OS_LOG_TYPE_INFO, "State _puckFallbackState.shouldRenderPuck changed from %d to %d; puck: %p, enabled: %d, normalFacingCamera: %d",
        buf,
        0x24u);
    }

    v83 = v815[208];
    *(_BYTE *)(a1 + 486) = v83;
  }
  if (!v83)
  {
    md::PuckLogic::update3DPuckVisibility((md::PuckLogic *)a1, 0);
    goto LABEL_552;
  }
  buf[23] = 4;
  strcpy((char *)buf, "puck");
  v88 = std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::find<std::string>(v15, (uint64_t)buf);
  if (v88)
  {
    *(_QWORD *)(a1 + 488) = v88[5];
    *(_BYTE *)(a1 + 496) = 1;
  }
  buf[23] = 11;
  strcpy((char *)buf, "regularPuck");
  v89 = std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::find<std::string>(v15 + 5, (uint64_t)buf);
  if (v89)
  {
    *(_QWORD *)(a1 + 504) = v89[5];
    *(_BYTE *)(a1 + 512) = 1;
  }
  buf[23] = 12;
  strcpy((char *)buf, "occludedPuck");
  v90 = std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::find<std::string>(v15 + 5, (uint64_t)buf);
  if (v90)
  {
    *(_QWORD *)(a1 + 520) = v90[5];
    *(_BYTE *)(a1 + 528) = 1;
  }
  v91 = *(_BYTE *)(a1 + 496) && *(_BYTE *)(a1 + 512) && *(_BYTE *)(a1 + 528) != 0;
  md::updateAndLogChange<BOOL>((_BYTE *)(a1 + 487), v91, (uint64_t)"_puckFallbackState.nonTiledIDsFound");
  if (*(_BYTE *)(a1 + 536) && !*(_BYTE *)(a1 + 328) && *(_BYTE *)(a1 + 487))
  {
    md::RegistryManager::vendRegistry((md::RegistryManager *)v836, *(_QWORD *)(a1 + 272));
    if (!*(_BYTE *)(a1 + 512) || !*(_BYTE *)(a1 + 496))
    {
      std::__throw_bad_optional_access[abi:nn180100]();
      goto LABEL_685;
    }
    v97 = *(gdc::Registry **)v836;
    v98 = *(_QWORD *)(a1 + 504);
    v99 = *(_QWORD *)(a1 + 488);
    *(_QWORD *)((char *)v860 + 4) = 0;
    *(_OWORD *)((char *)&v860[1] + 4) = 0x3F80000000000000uLL;
    *(_OWORD *)((char *)&v860[3] + 4) = 0x3F80000000000000uLL;
    *(_WORD *)buf = 0;
    *(_QWORD *)&buf[8] = v98;
    *(_QWORD *)&buf[16] = v99;
    HIDWORD(v860[5]) = 0;
    LODWORD(v860[0]) = 1065353216;
    *(_QWORD *)v861 = 0;
    v860[6] = 0;
    *(_QWORD *)&v861[5] = 0;
    v100 = *(std::__shared_weak_count **)(a1 + 416);
    *(_QWORD *)v840 = *(_QWORD *)(a1 + 408);
    *(_QWORD *)&v840[8] = v100;
    if (v100)
    {
      p_shared_owners = (unint64_t *)&v100->__shared_owners_;
      do
        v102 = __ldxr(p_shared_owners);
      while (__stxr(v102 + 1, p_shared_owners));
    }
    v840[16] = 0;
    LOBYTE(v825[0]) = 0;
    LOBYTE(v824[0]) = 4;
    LODWORD(v826) = 0;
    LOBYTE(v823[0]) = 0;
    v103 = gdc::Registry::create(v97);
    gdc::Registry::add<md::components::ReferencedAssetInstance,md::components::CustomRenderState,md::components::StencilBucket,md::components::IntendedSceneLayer,md::components::NonTiled,md::components::CustomZIndex,md::components::OcclusionType>((uint64_t)v97, v103, (__int128 *)buf, (uint64_t *)v840, v825, v824, &v826, v823);
    if (v100)
    {
      v104 = (unint64_t *)&v100->__shared_owners_;
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    if (!*(_BYTE *)(a1 + 528) || !*(_BYTE *)(a1 + 496))
    {
      std::__throw_bad_optional_access[abi:nn180100]();
      goto LABEL_685;
    }
    v106 = *(gdc::Registry **)v836;
    v107 = *(_QWORD *)(a1 + 520);
    v108 = *(_QWORD *)(a1 + 488);
    *(_QWORD *)((char *)v860 + 4) = 0;
    *(_QWORD *)((char *)&v860[1] + 4) = 0x3F80000000000000;
    *(_QWORD *)((char *)&v860[2] + 4) = 0;
    *(_QWORD *)((char *)&v860[3] + 4) = 0x3F80000000000000;
    memset((char *)&v860[4] + 4, 0, 20);
    *(_WORD *)buf = 0;
    *(_QWORD *)&buf[8] = v107;
    *(_QWORD *)&buf[16] = v108;
    LODWORD(v860[0]) = 1065353216;
    *(_QWORD *)v861 = 0;
    *(_QWORD *)&v861[5] = 0;
    v109 = *(std::__shared_weak_count **)(a1 + 432);
    *(_QWORD *)v840 = *(_QWORD *)(a1 + 424);
    *(_QWORD *)&v840[8] = v109;
    if (v109)
    {
      v110 = (unint64_t *)&v109->__shared_owners_;
      do
        v111 = __ldxr(v110);
      while (__stxr(v111 + 1, v110));
    }
    v840[16] = 0;
    LOBYTE(v825[0]) = 0;
    LOBYTE(v824[0]) = 4;
    LODWORD(v826) = 1;
    LOBYTE(v823[0]) = 1;
    v112 = gdc::Registry::create(v106);
    gdc::Registry::add<md::components::ReferencedAssetInstance,md::components::CustomRenderState,md::components::StencilBucket,md::components::IntendedSceneLayer,md::components::NonTiled,md::components::CustomZIndex,md::components::OcclusionType>((uint64_t)v106, v112, (__int128 *)buf, (uint64_t *)v840, v825, v824, &v826, v823);
    if (v109)
    {
      v113 = (unint64_t *)&v109->__shared_owners_;
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
    v115 = *(_QWORD *)(a1 + 272);
    buf[0] = 0;
    *(_DWORD *)&v861[16] = 1;
    md::RegistryManager::addRegistry(v115, (uint64_t)buf, (uint64_t *)v836);
    if (*(_DWORD *)&v861[16] != -1)
      ((void (*)(_BYTE *, uint8_t *))off_1E42FA3C0[*(unsigned int *)&v861[16]])(v840, buf);
    *(_BYTE *)(a1 + 328) = 1;
    v116 = *(gdc::Registry **)v836;
    *(_QWORD *)v836 = 0;
    if (v116)
    {
      gdc::Registry::~Registry(v116);
      MEMORY[0x1A1AF4E00]();
    }
  }
  if (!*(_QWORD *)(a1 + 288))
  {
    v92 = *(_QWORD *)(a1 + 272);
    buf[0] = 0;
    *(_DWORD *)&v861[16] = 1;
    *(_QWORD *)(a1 + 288) = md::RegistryManager::getRegistryForKey(v92, (uint64_t)buf);
    if (*(_DWORD *)&v861[16] != -1)
      ((void (*)(_BYTE *, uint8_t *))off_1E42FA3C0[*(unsigned int *)&v861[16]])(v840, buf);
  }
  v848[0] = &off_1E42D5410;
  v848[1] = a1;
  v93 = v848;
  v849 = v848;
  v94 = (uint8_t *)v13[6];
  v95 = (uint8_t *)v13[7];
  if (v94 == v95)
  {
    v96 = 4;
  }
  else
  {
    do
    {
      buf[0] = *v94;
      if (!v849)
        goto LABEL_679;
      (*(void (**)(_QWORD *, uint8_t *))(*v849 + 48))(v849, buf);
      ++v94;
    }
    while (v94 != v95);
    v93 = v849;
    if (v849 == v848)
    {
      v96 = 4;
      v93 = v848;
    }
    else
    {
      if (!v849)
        goto LABEL_98;
      v96 = 5;
    }
  }
  (*(void (**)(void))(*v93 + 8 * v96))();
LABEL_98:
  if (*(_BYTE *)(a1 + 496))
  {
    v117 = v14[6];
    if (v117)
    {
      v118 = *(_QWORD *)(a1 + 488);
      v119 = (uint8x8_t)vcnt_s8(v117);
      v119.i16[0] = vaddlv_u8(v119);
      if (v119.u32[0] > 1uLL)
      {
        v120 = *(_QWORD *)(a1 + 488);
        if (v118 >= *(_QWORD *)&v117)
          v120 = v118 % *(_QWORD *)&v117;
      }
      else
      {
        v120 = (*(_QWORD *)&v117 - 1) & v118;
      }
      v123 = *(_QWORD **)(*(_QWORD *)&v14[5] + 8 * v120);
      if (v123)
      {
        v123 = (_QWORD *)*v123;
        v122 = v785;
        if (!v123)
          goto LABEL_123;
        if (v119.u32[0] < 2uLL)
        {
          v124 = *(_QWORD *)&v117 - 1;
          while (1)
          {
            v126 = v123[1];
            if (v118 == v126)
            {
              if (v123[2] == v118)
                goto LABEL_123;
            }
            else if ((v126 & v124) != v120)
            {
              goto LABEL_121;
            }
            v123 = (_QWORD *)*v123;
            if (!v123)
              goto LABEL_123;
          }
        }
        while (1)
        {
          v125 = v123[1];
          if (v118 == v125)
          {
            if (v123[2] == v118)
              goto LABEL_123;
          }
          else
          {
            if (v125 >= *(_QWORD *)&v117)
              v125 %= *(_QWORD *)&v117;
            if (v125 != v120)
            {
LABEL_121:
              v123 = 0;
              goto LABEL_123;
            }
          }
          v123 = (_QWORD *)*v123;
          if (!v123)
            goto LABEL_123;
        }
      }
    }
    else
    {
      v123 = 0;
    }
    v122 = v785;
LABEL_123:
    i = v123 != 0;
  }
  else
  {
    i = 0;
    v122 = v785;
  }
  v127 = *v122;
  if ((v128 & 1) == 0
  {
    qword_1ECE2F300 = 0;
    qword_1ECE2F2F8 = 0;
    md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
    __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
  }
  v129 = *(_WORD **)(v127 + 48);
  v130 = *(_WORD **)(v127 + 56);
  v131 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v129 == v130)
  {
    v133 = v816;
  }
  else
  {
    v132 = *(_WORD **)(v127 + 48);
    v133 = v816;
    while (*v132 != 62)
    {
      v132 += 16;
      if (v132 == v130)
        goto LABEL_137;
    }
    if (v132 == v130)
    {
      v131 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v129 != 62)
      {
        v129 += 16;
        if (v129 == v130)
        {
          v129 = v130;
          break;
        }
      }
      v131 = (uint64_t *)(v129 + 4);
    }
  }
LABEL_137:
  v795 = v131[2];
  v134 = *(_QWORD *)(a1 + 288);
  if (v134)
  {
    v786 = i;
    v135 = (_QWORD *)gdc::Registry::storage<md::components::DynamicMeshInstance>(v134);
    v136 = (_QWORD *)gdc::Registry::storage<md::components::Material>(v134);
    v137 = gdc::Registry::storage<md::components::Asset>(v134);
    v138 = (_QWORD *)v137;
    v139 = v137 + 32;
    v140 = (unint64_t *)v135[7];
    v141 = (uint64_t *)v135[8];
    if (v136[8] - v136[7] >= (unint64_t)((char *)v141 - (char *)v140))
      v142 = v135 + 4;
    else
      v142 = v136 + 4;
    if (*(_QWORD *)(v137 + 64) - *(_QWORD *)(v137 + 56) >= v142[4] - v142[3])
      v143 = v142;
    else
      v143 = (_QWORD *)(v137 + 32);
    if (v141 != (uint64_t *)v140 && v135 + 4 == v143)
    {
      v145 = 0;
      v146 = 1;
      do
      {
        v430 = *((unsigned int *)v140 + 1);
        v431 = v430 >> 7;
        v432 = v136[4];
        v433 = (v136[5] - v432) >> 3;
        if (v430 >> 7 < v433)
        {
          v434 = *(_QWORD *)(v432 + 8 * v431);
          if (v434)
          {
            v435 = *(unsigned __int16 *)(v434 + 2 * (v430 & 0x7F));
            v437 = v136[7];
            v436 = v136[8];
            v438 = (v436 - v437) >> 3;
            if (v438 > v435)
            {
              v439 = v437 + 8 * v435;
              if (v439 != v436 && *(_DWORD *)(v439 + 4) == (_DWORD)v430)
              {
                v441 = v138[4];
                if (v431 < (v138[5] - v441) >> 3)
                {
                  v442 = *(_QWORD *)(v441 + 8 * v431);
                  if (v442)
                  {
                    v443 = *(unsigned __int16 *)(v442 + 2 * (v430 & 0x7F));
                    v445 = v138[7];
                    v444 = v138[8];
                    if (v443 < (v444 - v445) >> 3)
                    {
                      v446 = v445 + 8 * v443;
                      if (v446 != v444 && *(_DWORD *)(v446 + 4) == (_DWORD)v430)
                      {
                        v448 = *v140 >> 39;
                        if (v448 < v433
                          && (v449 = *(_QWORD *)(v432 + 8 * v448)) != 0
                          && (v450 = *(unsigned __int16 *)(v449 + 2 * (HIDWORD(*v140) & 0x7F)), v438 > v450)
                          && ((v451 = v437 + 8 * v450, v451 != v436)
                            ? (v452 = *(_DWORD *)(v451 + 4) == HIDWORD(*v140))
                            : (v452 = 0),
                              v452))
                        {
                          v453 = v136[10] + 24 * v450;
                        }
                        else
                        {
                          v453 = v136[11];
                        }
                        v755 = HIDWORD(*v140);
                        v756 = *v140;
                        v757 = v139;
                        v759 = v146;
                        v454 = *(std::__shared_weak_count **)(v453 + 16);
                        if (v454)
                        {
                          v455 = (unint64_t *)&v454->__shared_owners_;
                          do
                            v456 = __ldxr(v455);
                          while (__stxr(v456 + 1, v455));
                        }
                        v764 = v454;
                        v457 = (_QWORD *)gdc::Registry::storage<md::components::RenderableInjected>(*(_QWORD *)(a1 + 288));
                        v458 = v457[4];
                        v146 = v759;
                        v139 = v757;
                        if (v448 >= (v457[5] - v458) >> 3)
                          goto LABEL_381;
                        v459 = *(_QWORD *)(v458 + 8 * v448);
                        if (!v459)
                          goto LABEL_381;
                        v460 = *(unsigned __int16 *)(v459 + 2 * (HIDWORD(v756) & 0x7F));
                        v462 = v457[7];
                        v461 = v457[8];
                        if (v460 >= (v461 - v462) >> 3)
                          goto LABEL_381;
                        v463 = v462 + 8 * v460;
                        v464 = v463 != v461 && *(_DWORD *)(v463 + 4) == (_DWORD)v755;
                        if (!v464
                          || ((v465 = v457[10], v466 = v465 + v460, v465) ? (v467 = v466 == v457[11]) : (v467 = 1), v467))
                        {
LABEL_381:
                          v146 = 0;
                        }
                        if (v764)
                        {
                          v468 = (unint64_t *)&v764->__shared_owners_;
                          v133 = v816;
                          do
                            v469 = __ldaxr(v468);
                          while (__stlxr(v469 - 1, v468));
                          if (!v469)
                          {
                            v760 = v146;
                            ((void (*)(std::__shared_weak_count *))v764->__on_zero_shared)(v764);
                            std::__shared_weak_count::__release_weak(v764);
                            v139 = v757;
                            v146 = v760;
                          }
                          v145 = 1;
                        }
                        else
                        {
                          v145 = 1;
                          v133 = v816;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v140;
      }
      while (v140 != (unint64_t *)v141);
    }
    else
    {
      v145 = 0;
      v146 = 1;
    }
    if (v136 + 4 == v143)
    {
      v240 = (unint64_t *)v136[7];
      v241 = (uint64_t *)v136[8];
      if (v240 != (unint64_t *)v241)
      {
        v242 = v136[10];
        do
        {
          v678 = *((unsigned int *)v240 + 1);
          v679 = v678 >> 7;
          v680 = v135[4];
          if (v678 >> 7 < (v135[5] - v680) >> 3)
          {
            v681 = *(_QWORD *)(v680 + 8 * v679);
            if (v681)
            {
              v682 = *(unsigned __int16 *)(v681 + 2 * (v678 & 0x7F));
              v684 = v135[7];
              v683 = v135[8];
              if (v682 < (v683 - v684) >> 3)
              {
                v685 = v684 + 8 * v682;
                if (v685 != v683 && *(_DWORD *)(v685 + 4) == (_DWORD)v678)
                {
                  v687 = v138[4];
                  if (v679 < (v138[5] - v687) >> 3)
                  {
                    v688 = *(_QWORD *)(v687 + 8 * v679);
                    if (v688)
                    {
                      v689 = *(unsigned __int16 *)(v688 + 2 * (v678 & 0x7F));
                      v691 = v138[7];
                      v690 = v138[8];
                      if (v689 < (v690 - v691) >> 3)
                      {
                        v692 = v691 + 8 * v689;
                        if (v692 != v690 && *(_DWORD *)(v692 + 4) == (_DWORD)v678)
                        {
                          v758 = v139;
                          v761 = v146;
                          v694 = *v240;
                          v695 = *(std::__shared_weak_count **)(v242 + 16);
                          if (v695)
                          {
                            v696 = (unint64_t *)&v695->__shared_owners_;
                            do
                              v697 = __ldxr(v696);
                            while (__stxr(v697 + 1, v696));
                          }
                          v765 = v695;
                          v698 = (_QWORD *)gdc::Registry::storage<md::components::RenderableInjected>(*(_QWORD *)(a1 + 288));
                          v699 = v698[4];
                          v146 = v761;
                          v139 = v758;
                          if (v694 >> 39 >= (v698[5] - v699) >> 3)
                            goto LABEL_622;
                          v700 = *(_QWORD *)(v699 + 8 * (v694 >> 39));
                          if (!v700)
                            goto LABEL_622;
                          v701 = *(unsigned __int16 *)(v700 + 2 * (HIDWORD(v694) & 0x7F));
                          v703 = v698[7];
                          v702 = v698[8];
                          if (v701 >= (v702 - v703) >> 3)
                            goto LABEL_622;
                          v704 = v703 + 8 * v701;
                          v705 = v704 != v702 && *(_DWORD *)(v704 + 4) == HIDWORD(v694);
                          if (!v705
                            || ((v706 = v698[10], v707 = v706 + v701, v706) ? (v708 = v707 == v698[11]) : (v708 = 1),
                                v708))
                          {
LABEL_622:
                            v146 = 0;
                          }
                          if (v765)
                          {
                            v709 = (unint64_t *)&v765->__shared_owners_;
                            v133 = v816;
                            do
                              v710 = __ldaxr(v709);
                            while (__stlxr(v710 - 1, v709));
                            if (!v710)
                            {
                              v762 = v146;
                              ((void (*)(std::__shared_weak_count *))v765->__on_zero_shared)(v765);
                              std::__shared_weak_count::__release_weak(v765);
                              v139 = v758;
                              v146 = v762;
                            }
                            v145 = 1;
                          }
                          else
                          {
                            v145 = 1;
                            v133 = v816;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v242 += 24;
          ++v240;
        }
        while (v240 != (unint64_t *)v241);
      }
    }
    if ((_QWORD *)v139 == v143)
    {
      v243 = (unint64_t *)v138[7];
      v244 = (uint64_t *)v138[8];
      for (i = v786; v243 != (unint64_t *)v244; ++v243)
      {
        v711 = *((unsigned int *)v243 + 1);
        v712 = v711 >> 7;
        v713 = v135[4];
        if (v711 >> 7 < (v135[5] - v713) >> 3)
        {
          v714 = *(_QWORD *)(v713 + 8 * v712);
          if (v714)
          {
            v715 = *(unsigned __int16 *)(v714 + 2 * (v711 & 0x7F));
            v717 = v135[7];
            v716 = v135[8];
            if (v715 < (v716 - v717) >> 3)
            {
              v718 = v717 + 8 * v715;
              if (v718 != v716 && *(_DWORD *)(v718 + 4) == (_DWORD)v711)
              {
                v720 = v136[4];
                v721 = (v136[5] - v720) >> 3;
                if (v712 < v721)
                {
                  v722 = *(_QWORD *)(v720 + 8 * v712);
                  if (v722)
                  {
                    v723 = *(unsigned __int16 *)(v722 + 2 * (v711 & 0x7F));
                    v725 = v136[7];
                    v724 = v136[8];
                    v726 = (v724 - v725) >> 3;
                    if (v726 > v723)
                    {
                      v727 = v725 + 8 * v723;
                      if (v727 != v724 && *(_DWORD *)(v727 + 4) == (_DWORD)v711)
                      {
                        v729 = *v243;
                        v730 = HIDWORD(*v243);
                        v731 = *v243 >> 39;
                        if (v731 < v721
                          && (v732 = *(_QWORD *)(v720 + 8 * v731)) != 0
                          && (v733 = *(unsigned __int16 *)(v732 + 2 * (HIDWORD(v729) & 0x7F)), v726 > v733)
                          && ((v734 = v725 + 8 * v733, v734 != v724)
                            ? (v735 = *(_DWORD *)(v734 + 4) == (_DWORD)v730)
                            : (v735 = 0),
                              v735))
                        {
                          v736 = v136[10] + 24 * v733;
                        }
                        else
                        {
                          v736 = v136[11];
                        }
                        v737 = v146;
                        v738 = *(std::__shared_weak_count **)(v736 + 16);
                        if (v738)
                        {
                          v739 = (unint64_t *)&v738->__shared_owners_;
                          do
                            v740 = __ldxr(v739);
                          while (__stxr(v740 + 1, v739));
                        }
                        v766 = v738;
                        v741 = (_QWORD *)gdc::Registry::storage<md::components::RenderableInjected>(*(_QWORD *)(a1 + 288));
                        v742 = v741[4];
                        if (v731 >= (v741[5] - v742) >> 3)
                          goto LABEL_671;
                        v743 = *(_QWORD *)(v742 + 8 * v731);
                        if (!v743)
                          goto LABEL_671;
                        v744 = *(unsigned __int16 *)(v743 + 2 * (HIDWORD(v729) & 0x7F));
                        v746 = v741[7];
                        v745 = v741[8];
                        if (v744 >= (v745 - v746) >> 3)
                          goto LABEL_671;
                        v747 = v746 + 8 * v744;
                        v748 = v747 != v745 && *(_DWORD *)(v747 + 4) == (_DWORD)v730;
                        if (!v748
                          || ((v146 = v737, v749 = v741[10], v750 = v749 + v744, v749)
                            ? (v751 = v750 == v741[11])
                            : (v751 = 1),
                              v751))
                        {
LABEL_671:
                          v146 = 0;
                        }
                        if (v766)
                        {
                          v752 = (unint64_t *)&v766->__shared_owners_;
                          v133 = v816;
                          i = v786;
                          do
                            v753 = __ldaxr(v752);
                          while (__stlxr(v753 - 1, v752));
                          if (!v753)
                          {
                            v754 = v146;
                            ((void (*)(std::__shared_weak_count *))v766->__on_zero_shared)(v766);
                            std::__shared_weak_count::__release_weak(v766);
                            v146 = v754;
                          }
                          v145 = 1;
                        }
                        else
                        {
                          v145 = 1;
                          v133 = v816;
                          i = v786;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      i = v786;
    }
    if ((_DWORD)v146)
      v147 = v145 == 0;
    else
      v147 = 1;
    LODWORD(v134) = !v147;
    v81 = v815;
    v13 = v806;
  }
  else
  {
    v145 = 0;
  }
  md::updateAndLogChange<BOOL>((_BYTE *)(a1 + 481), v145 != 0, (uint64_t)"_puckFallbackState.puckEntitiesExist");
  md::updateAndLogChange<BOOL>((_BYTE *)(a1 + 482), v134, (uint64_t)"_puckFallbackState.puckEntitiesInjected");
  md::updateAndLogChange<BOOL>((_BYTE *)(a1 + 484), i, (uint64_t)"_puckFallbackState.puckAssetAvailable");
  md::updateAndLogChange<BOOL>((_BYTE *)(a1 + 485), v795 != 0, (uint64_t)"_puckFallbackState.injectablesInView");
  md::updateAndLogChange<BOOL>((_BYTE *)(a1 + 483), *(unsigned __int8 *)(v813 + 3776) - 1 < 3, (uint64_t)"_puckFallbackState.cameraTypeGlobe");
  v149 = 0;
  if ((i & v134) == 1 && v795)
  {
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v150 = (void *)objc_claimAutoreleasedReturnValue();
    v149 = objc_msgSend(v150, "enable3DPuck");

    v133 = v816;
  }
  v151 = (_OWORD *)(a1 + 296);
  v81[209] = v149;
  if (*(unsigned __int8 *)(a1 + 480) != v149)
  {
    if (GEOGetVectorKitPuckLogicLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitPuckLogicLog(void)::onceToken, &__block_literal_global_3515);
    v152 = GEOGetVectorKitPuckLogicLog(void)::log;
    v148 = os_log_type_enabled((os_log_t)GEOGetVectorKitPuckLogicLog(void)::log, OS_LOG_TYPE_INFO);
    if (v148)
    {
      v153 = *(unsigned __int8 *)(a1 + 480);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "_puckRenderMode";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v153;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v149;
      _os_log_impl(&dword_19F029000, v152, OS_LOG_TYPE_INFO, "State %s changed from %d to %d", buf, 0x18u);
    }
    *(_BYTE *)(a1 + 480) = v149;
  }
  if (!*(_QWORD *)v151)
  {
    v154 = gss::Allocator::instance((gss::Allocator *)v148);
    v155 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v154 + 16))(v154, 16, 4);
    v156 = v155;
    if (v155)
      *v155 = 0xE00000005;
    v155[1] = 65594;
    memset(buf, 0, sizeof(buf));
    v860[0] = v154;
    v157 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v154 + 16))(v154, 16, 4);
    *(_QWORD *)buf = v157;
    *(_QWORD *)&buf[8] = v157;
    *(_QWORD *)&buf[16] = v157 + 2;
    if (v157)
      *v157 = *v156;
    v157[1] = v156[1];
    *(_QWORD *)&buf[8] = v157 + 2;
    gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)buf);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v154 + 40))(v154, v156, 16);
    v158 = *v13;
    *(_QWORD *)&v840[7] = 0;
    *(_QWORD *)v840 = 0;
    v840[15] = 1;
    gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)v836, v158, (gss::FeatureAttributeSet *)buf, (gss::QueryOverrides *)v840);
    if (!v840[14] && *(_QWORD *)v840)
    {
      v160 = gss::Allocator::instance(v159);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v160 + 40))(v160, *(_QWORD *)v840, *(unsigned __int16 *)&v840[12]);
    }
    v161 = *(_OWORD *)v836;
    *(_QWORD *)v836 = 0;
    *(_QWORD *)&v836[8] = 0;
    v162 = *(std::__shared_weak_count **)(a1 + 304);
    *v151 = v161;
    if (v162)
    {
      v163 = (unint64_t *)&v162->__shared_owners_;
      do
        v164 = __ldaxr(v163);
      while (__stlxr(v164 - 1, v163));
      if (!v164)
      {
        ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
        std::__shared_weak_count::__release_weak(v162);
      }
    }
    v165 = *(std::__shared_weak_count **)&v836[8];
    if (*(_QWORD *)&v836[8])
    {
      v166 = (unint64_t *)(*(_QWORD *)&v836[8] + 8);
      do
        v167 = __ldaxr(v166);
      while (__stlxr(v167 - 1, v166));
      if (!v167)
      {
        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
        std::__shared_weak_count::__release_weak(v165);
      }
    }
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)v860[0] + 40))(v860[0], *(_QWORD *)buf, *(_QWORD *)&buf[16] - *(_QWORD *)buf);
    }
  }
  v168 = (_OWORD *)(a1 + 120);
  v169 = v789;
  md::LayoutContext::zoomAtCentrePoint(*(int8x8_t **)(v789 + 8));
  v171 = (gss::Allocator *)md::PuckStyleInfo::update(a1 + 120, v133, v792, v13, (uint16x4_t *)(a1 + 296), v170);
  if (!*(_BYTE *)(a1 + 193))
  {
    if (!*(_QWORD *)(a1 + 312))
    {
      v172 = gss::Allocator::instance(v171);
      v173 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v172 + 16))(v172, 16, 4);
      v174 = v173;
      if (v173)
        *v173 = 0xE00000005;
      v173[1] = 0x10001003ALL;
      memset(buf, 0, sizeof(buf));
      v860[0] = v172;
      v175 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v172 + 16))(v172, 16, 4);
      *(_QWORD *)buf = v175;
      *(_QWORD *)&buf[8] = v175;
      *(_QWORD *)&buf[16] = v175 + 2;
      if (v175)
        *v175 = *v174;
      v175[1] = v174[1];
      *(_QWORD *)&buf[8] = v175 + 2;
      gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)buf);
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v172 + 40))(v172, v174, 16);
      v176 = *v13;
      *(_QWORD *)&v840[7] = 0;
      *(_QWORD *)v840 = 0;
      v840[15] = 1;
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)v836, v176, (gss::FeatureAttributeSet *)buf, (gss::QueryOverrides *)v840);
      if (!v840[14] && *(_QWORD *)v840)
      {
        v178 = gss::Allocator::instance(v177);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v178 + 40))(v178, *(_QWORD *)v840, *(unsigned __int16 *)&v840[12]);
      }
      v179 = *(_OWORD *)v836;
      *(_QWORD *)v836 = 0;
      *(_QWORD *)&v836[8] = 0;
      v180 = *(std::__shared_weak_count **)(a1 + 320);
      *(_OWORD *)(a1 + 312) = v179;
      if (v180)
      {
        v181 = (unint64_t *)&v180->__shared_owners_;
        do
          v182 = __ldaxr(v181);
        while (__stlxr(v182 - 1, v181));
        if (!v182)
        {
          ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
          std::__shared_weak_count::__release_weak(v180);
        }
      }
      v183 = *(std::__shared_weak_count **)&v836[8];
      if (*(_QWORD *)&v836[8])
      {
        v184 = (unint64_t *)(*(_QWORD *)&v836[8] + 8);
        do
          v185 = __ldaxr(v184);
        while (__stlxr(v185 - 1, v184));
        if (!v185)
        {
          ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
          std::__shared_weak_count::__release_weak(v183);
        }
      }
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)v860[0] + 40))(v860[0], *(_QWORD *)buf, *(_QWORD *)&buf[16] - *(_QWORD *)buf);
      }
      v169 = v789;
    }
    md::LayoutContext::zoomAtCentrePoint(*(int8x8_t **)(v169 + 8));
    md::PuckStyleInfo::update(a1 + 196, v133, v792, v13, (uint16x4_t *)(a1 + 312), v186);
  }
  v817 = v81 + 264;
  *(_OWORD *)(v81 + 56) = *v168;
  *((_DWORD *)v81 + 18) = *(_DWORD *)(a1 + 136);
  *((_DWORD *)v81 + 19) = *(_DWORD *)(a1 + 140);
  *((_DWORD *)v81 + 20) = *(_DWORD *)(a1 + 144);
  *((_DWORD *)v81 + 21) = *(_DWORD *)(a1 + 148);
  *((_DWORD *)v81 + 22) = *(_DWORD *)(a1 + 152);
  *((_DWORD *)v81 + 23) = *(_DWORD *)(a1 + 156);
  *((_DWORD *)v81 + 24) = *(_DWORD *)(a1 + 160);
  *((_DWORD *)v81 + 25) = *(_DWORD *)(a1 + 164);
  *((_DWORD *)v81 + 26) = *(_DWORD *)(a1 + 168);
  *((_DWORD *)v81 + 27) = *(_DWORD *)(a1 + 172);
  *((_DWORD *)v81 + 28) = *(_DWORD *)(a1 + 176);
  *((_DWORD *)v81 + 29) = *(_DWORD *)(a1 + 180);
  v187 = *(_QWORD *)(a1 + 184);
  *((_WORD *)v81 + 64) = *(_WORD *)(a1 + 192);
  *((_QWORD *)v81 + 15) = v187;
  *(_OWORD *)(v81 + 132) = *(_OWORD *)(a1 + 196);
  *((_DWORD *)v81 + 37) = *(_DWORD *)(a1 + 212);
  *((_DWORD *)v81 + 38) = *(_DWORD *)(a1 + 216);
  *((_DWORD *)v81 + 39) = *(_DWORD *)(a1 + 220);
  *((_DWORD *)v81 + 40) = *(_DWORD *)(a1 + 224);
  *((_DWORD *)v81 + 41) = *(_DWORD *)(a1 + 228);
  *((_DWORD *)v81 + 42) = *(_DWORD *)(a1 + 232);
  *((_DWORD *)v81 + 43) = *(_DWORD *)(a1 + 236);
  *((_DWORD *)v81 + 44) = *(_DWORD *)(a1 + 240);
  *((_DWORD *)v81 + 45) = *(_DWORD *)(a1 + 244);
  *((_DWORD *)v81 + 46) = *(_DWORD *)(a1 + 248);
  *((_DWORD *)v81 + 47) = *(_DWORD *)(a1 + 252);
  *((_DWORD *)v81 + 48) = *(_DWORD *)(a1 + 256);
  v188 = *(_QWORD *)(a1 + 260);
  *((_WORD *)v81 + 102) = *(_WORD *)(a1 + 268);
  *(_QWORD *)(v81 + 196) = v188;
  if (!v81[209])
  {
    v189 = *a3;
    v190 = a3[2];
    v191 = *(float *)(a3[1] + 16) * *(float *)(a3[1] + 20);
    v192 = *(double *)(v190 + 72);
    v193 = *(double *)(v190 + 80);
    v194 = tan(*(double *)(v190 + 64) * 0.5 + 0.785398163);
    v195 = log(v194);
    v196 = v192 * 0.159154943 + 0.5;
    v197 = v195 * 0.159154943 + 0.5;
    v198 = *v81;
    if (*(unsigned __int8 *)(v189 + 3776) - 1 >= 3)
    {
      v245 = 0.0;
      if (v198 == 1)
        v245 = ((float)(*(float *)(v190 + 88) + 0.1) + v193 * v191) * 0.0000000249532021;
      v793 = 0.0;
      v796 = v197;
      v799 = v192 * 0.159154943 + 0.5;
      *(double *)(a1 + 336) = v196;
      *(double *)(a1 + 344) = v197;
      v787 = 0.0;
      v790 = 1.0;
      v773 = 0.0;
      v771 = 1.0;
      v808 = v245;
      *(double *)(a1 + 352) = v245;
      v239 = 0.0;
    }
    else
    {
      v807 = v195;
      v199 = 0.0;
      if (v198 == 1)
        v199 = (float)(*(float *)(v190 + 88) + 0.1) + v193 * v191;
      *(double *)(a1 + 336) = v196;
      *(double *)(a1 + 344) = v197;
      *(double *)(a1 + 352) = v199;
      v200 = v196 * 6.28318531;
      v201 = exp(v197 * 6.28318531 + -3.14159265);
      v202 = atan(v201) * 2.0 + -1.57079633;
      v203 = fmod(v200, 6.28318531);
      v204 = fmod(v203 + 6.28318531, 6.28318531) + -3.14159265;
      v205 = __sincos_stret(v202);
      v206 = 6378137.0 / sqrt(1.0 - v205.__sinval * v205.__sinval * 0.00669437999);
      v207 = (v206 + v199) * v205.__cosval;
      v208 = __sincos_stret(v204);
      v209 = v207 * v208.__cosval;
      v210 = v207 * v208.__sinval;
      v211 = (v206 * 0.99330562 + v199) * v205.__sinval;
      v212 = (v206 + v199 + 1.0) * v205.__cosval;
      v213 = -(v209 - v212 * v208.__cosval);
      v214 = -(v210 - v212 * v208.__sinval);
      v215 = -(v211 - (v206 * 0.99330562 + v199 + 1.0) * v205.__sinval);
      v216 = 1.0 / sqrt(v213 * v213 + v214 * v214 + v215 * v215);
      v217 = v216 * v213;
      v218 = v216 * v214;
      v219 = v216 * v215;
      v220 = exp(v807 + 0.000628318515);
      v221 = atan(v220);
      v222 = __sincos_stret(v221 * 2.0 + -1.57079633);
      v223 = 6378137.0 / sqrt(1.0 - v222.__sinval * v222.__sinval * 0.00669437999);
      v224 = (v223 + v199) * v222.__cosval;
      v796 = v210;
      v799 = v209;
      v225 = -(v209 - v224 * v208.__cosval);
      v226 = -(v210 - v224 * v208.__sinval);
      v808 = v211;
      v227 = -(v211 - (v199 + v223 * 0.99330562) * v222.__sinval);
      v228 = 1.0 / sqrt(v225 * v225 + v226 * v226 + v227 * v227);
      v229 = v228 * v225;
      v230 = v228 * v226;
      v231 = v228 * v227;
      v232 = -(v231 * v218 - v230 * v219);
      v233 = -(v229 * v219 - v231 * v217);
      v234 = -(v230 * v217 - v229 * v218);
      v235 = 1.0 / sqrt(v232 * v232 + v233 * v233 + v234 * v234);
      v236 = v235 * v232;
      v237 = v235 * v233;
      v238 = v235 * v234;
      v787 = v218;
      v790 = v219;
      v771 = -(v238 * v217 - v236 * v219);
      v773 = -(v237 * v219 - v238 * v218);
      v793 = v217;
      v239 = -(v236 * v218 - v237 * v217);
    }
    v769 = v239;
    v247 = *(double *)(v189 + 496);
    v246 = *(double *)(v189 + 504);
    v248 = *(double *)(v189 + 512);
    v249 = *(double *)(v189 + 3760);
    objc_msgSend(*(id *)v169, "size", v755);
    v251 = v250;
    v252 = *(float *)v168;
    v253 = *(double *)(v189 + 3112);
    v254 = *(double *)(v189 + 3120);
    v767 = *(double *)(v189 + 3128);
    v255 = objc_msgSend(*(id *)(v190 + 48), "puck");
    v256 = (v799 - v247) * (v799 - v247) + (v796 - v246) * (v796 - v246) + (v808 - v248) * (v808 - v248);
    v257 = (v249 + v249) / v251;
    v258 = v257;
    v259 = v252;
    v260 = *(double *)(v255 + 32);
    if (*(_BYTE *)(v255 + 49))
    {
      v261 = 0;
      v263 = v790;
      v262 = v793;
      v264 = v787;
    }
    else
    {
      v263 = v790;
      v262 = v793;
      v264 = v787;
      v265 = v253 * v793 + v254 * v787 + v767 * v790;
      *(double *)&v763 = v258;
      v266 = v259;
      v267 = v254 - v265 * v787;
      v268 = v253 - v265 * v793;
      v269 = 1.0 / sqrt(v268 * v268 + v267 * v267 + (v767 - v265 * v790) * (v767 - v265 * v790));
      v270 = atan2(v269 * v268, v269 * v267);
      v271 = v260 + 3.14159265 - v270;
      v272 = v270;
      v273 = fmod(v271, 6.28318531);
      v274 = fmod(v273 + 6.28318531, 6.28318531) + -3.14159265;
      v275 = 0.7854;
      if (!*(_BYTE *)(v255 + 50))
        v275 = -0.7854;
      if (v274 < 4.71238898 && v274 > 1.57079633)
        v275 = -v275;
      v277 = v275 + v274;
      v259 = v266;
      v258 = *(double *)&v763;
      v261 = v277 <= 3.14159265 && v277 >= 0.0;
      v260 = v272;
    }
    v278 = v258 * v259;
    *(_BYTE *)(v255 + 50) = v261;
    v279 = sqrt(v256);
    v280 = __sincos_stret(v260 * -0.5 + 1.57079633);
    v281 = v280.__sinval * v262;
    v282 = v280.__sinval * v264;
    v283 = v280.__sinval * v263;
    v284 = -(v283 * v771 - v282 * v769) - (v283 * v771 - v282 * v769);
    v285 = -(v281 * v769 - v283 * v773) - (v281 * v769 - v283 * v773);
    v286 = -(v282 * v773 - v281 * v771) - (v282 * v773 - v281 * v771);
    v287 = v773 + v284 * v280.__cosval + v286 * (v280.__sinval * v264) - v285 * (v280.__sinval * v263);
    v288 = v771 + v284 * (v280.__sinval * v263) + v285 * v280.__cosval - v286 * (v280.__sinval * v262);
    v289 = v769 + v285 * (v280.__sinval * v262) + v286 * v280.__cosval - v284 * (v280.__sinval * v264);
    v290 = -(v289 * v264 - v288 * v263);
    v291 = -(v287 * v263 - v289 * v262);
    v292 = -(v288 * v262 - v287 * v264);
    v293 = 1.0 / sqrt(v290 * v290 + v291 * v291 + v292 * v292);
    v294 = v293 * v290;
    v295 = v293 * v291;
    v296 = v293 * v292;
    v297 = -(v295 * v263 - v296 * v264);
    v298 = -(v296 * v262 - v294 * v263);
    v299 = -(v294 * v264 - v295 * v262);
    v300 = 1.0 / sqrt(v297 * v297 + v298 * v298 + v299 * v299);
    v301 = v300 * v297;
    v302 = v300 * v298;
    v303 = v300 * v299;
    v304 = v302 + v294 + v263;
    v305 = v262;
    v306 = v263;
    if (v304 <= 0.0)
    {
      if (v294 <= v302 || v294 <= v263)
      {
        v313 = sqrt(v263 + 1.0 - (v302 + v294));
        v314 = 1.0 / (v313 + v313);
        v315 = (v296 + v262) * v314;
        v316 = v303 + v264;
        v317 = v316 * v314;
        v318 = v313 * 0.5;
        v319 = (v295 - v301) * v314;
        v320 = sqrt(1.0 - (v263 + v294) + v302);
        v321 = v301 + v295;
        v322 = 1.0 / (v320 + v320);
        v323 = v321 * v322;
        v324 = v320 * 0.5;
        v325 = v316 * v322;
        v326 = (v262 - v296) * v322;
        if (v302 > v263)
          v308 = v323;
        else
          v308 = v315;
        if (v302 > v263)
          v309 = v324;
        else
          v309 = v317;
        if (v302 > v263)
          v310 = v325;
        else
          v310 = v318;
        if (v302 > v263)
          v311 = v326;
        else
          v311 = v319;
      }
      else
      {
        v327 = sqrt(v294 + 1.0 - (v263 + v302));
        v308 = v327 * 0.5;
        v328 = v301 + v295;
        v329 = 1.0 / (v327 + v327);
        v309 = v328 * v329;
        v310 = (v296 + v305) * v329;
        v311 = (v303 - v264) * v329;
      }
    }
    else
    {
      v307 = 0.5 / sqrt(v304 + 1.0);
      v308 = v307 * (v303 - v264);
      v309 = v307 * (v305 - v296);
      v310 = v307 * (v295 - v301);
      v311 = 0.25 / v307;
    }
    v330 = v796;
    v331 = v799;
    v332 = v279 * v278;
    if (*v81)
    {
      v333 = v808;
    }
    else
    {
      v333 = v808;
      if (*(unsigned __int8 *)(v189 + 3776) - 1 >= 3)
      {
        v334 = v799 - *(double *)(v189 + 496);
        v335 = v796 - *(double *)(v189 + 504);
        v336 = v808 - *(double *)(v189 + 512);
        v337 = v334 * v305 + v335 * v264 + v336 * v306;
        v338 = v305;
        v339 = v306;
        v768 = v334 - v337 * v305;
        v770 = v335 - v337 * v264;
        v340 = v336 - v337 * v306;
        *(float *)&v334 = *(double *)(v189 + 40) * -10.0 + 7.5;
        v774 = v332;
        v772 = 0.5 / (float)(expf(*(float *)&v334) + 1.0);
        v341 = v264;
        v788 = v264;
        v791 = v339;
        v342 = -(v340 * v264 - v770 * v339);
        v343 = -(v768 * v339 - v340 * v338);
        v344 = -(v770 * v338 - v768 * v341);
        v345 = __sincos_stret(v772 * 0.5);
        v346 = v345.__sinval / sqrt(v342 * v342 + v343 * v343 + v344 * v344);
        v347 = v346 * v342;
        v348 = v346 * v343;
        v349 = v346 * v344;
        v350 = sinf(v772);
        v332 = v774;
        v351 = v774 * (0.5 * v350);
        v352 = v345.__cosval * v309 + v348 * v311 + v349 * v308;
        v353 = v345.__cosval * v310 + v347 * v309 + v349 * v311 - v348 * v308;
        v330 = v796 + v351 * v788;
        v331 = v799 + v351 * v338;
        v354 = v348 * v309 + v349 * v310 + v347 * v308;
        v308 = v345.__cosval * v308 + v347 * v311 + v348 * v310 - v349 * v309;
        v333 = v808 + v351 * v791;
        v309 = v352 - v347 * v310;
        v311 = -(v354 - v345.__cosval * v311);
        v310 = v353;
      }
    }
    v355 = (v309 + v309) * v309;
    v356 = (v310 + v310) * v310;
    v357 = (v308 + v308) * v309;
    v358 = (v310 + v310) * v311;
    v359 = v357 - v358;
    *(double *)buf = 1.0 - (v355 + v356);
    *(double *)&buf[8] = v358 + v357;
    v360 = 1.0 - (v308 + v308) * v308;
    *(double *)&v860[1] = v359;
    *(double *)&v860[2] = v360 - v356;
    v361 = v310 * (v308 + v308);
    v362 = v311 * (v309 + v309);
    v363 = (v309 + v309) * v310;
    v364 = v311 * (v308 + v308);
    *(double *)&v860[5] = v362 + v361;
    *(double *)&v860[6] = v363 - v364;
    *(double *)&buf[16] = v361 - v362;
    *(double *)&v860[3] = v364 + v363;
    *(double *)v861 = v360 - v355;
    v860[0] = 0;
    v860[4] = 0;
    memset(&v861[8], 0, 32);
    v862 = 0x3FF0000000000000;
    v365 = *((float *)v81 + 15);
    v842 = 0u;
    v844 = 0;
    *(_OWORD *)&v840[8] = 0u;
    v841 = 0u;
    v843 = 0u;
    *(_QWORD *)v840 = 0x3FF0000000000000;
    *(_QWORD *)&v842 = 0x3FF0000000000000;
    *(_QWORD *)&v846 = 0;
    v845 = 1.0;
    *((_QWORD *)&v846 + 1) = 0xBFE0000000000000;
    *(double *)v847 = v365;
    *(_OWORD *)&v847[8] = xmmword_19FFB33A0;
    v366 = v332 * *(float *)(v255 + 40);
    memset(&v836[40], 0, 40);
    memset(&v836[8], 0, 32);
    *((_QWORD *)&v839 + 1) = 0x3FF0000000000000;
    *(double *)v836 = v366;
    *(double *)&v836[40] = v366;
    v837 = *(unint64_t *)&v366;
    *(double *)&v838 = v331;
    *((double *)&v838 + 1) = v330;
    *(double *)&v839 = v333;
    v829 = 0u;
    v831 = 0;
    v834 = 0u;
    v833 = 0u;
    v830 = 0u;
    v828 = 0u;
    v827 = 0u;
    v826 = 0x3FF0000000000000;
    *(_QWORD *)&v829 = 0x3FF0000000000000;
    v832 = 0x3FF0000000000000;
    v835 = 0x3FF0000000000000;
    if (v261)
      v826 = 0xBFF0000000000000;
    gm::operator*<double,4,4,4>(v823, (double *)v836, (double *)buf);
    gm::operator*<double,4,4,4>(v824, v823, (double *)&v826);
    gm::operator*<double,4,4,4>((double *)v825, v824, (double *)v840);
    v367 = v825[1];
    *(_OWORD *)(v81 + 216) = v825[0];
    *(_OWORD *)(v81 + 232) = v367;
    v368 = v825[3];
    *(_OWORD *)(v81 + 248) = v825[2];
    v369 = v825[4];
    v370 = v825[5];
    *v817 = v368;
    *(_OWORD *)(v81 + 280) = v369;
    v371 = v825[6];
    v372 = v825[7];
    *(_OWORD *)(v81 + 296) = v370;
    *(_OWORD *)(v81 + 312) = v371;
    *(_OWORD *)(v81 + 328) = v372;
  }
  v373 = *a3;
  v374 = a3[2];
  v375 = *(double *)(*a3 + 3760);
  objc_msgSend(*(id *)v169, "size", v755);
  v377 = v376;
  v378 = *(float *)(a1 + 120);
  v379 = *(float *)(a1 + 188);
  v380 = *(id *)(v374 + 48);
  v381 = *(double *)(objc_msgSend(v380, "puck") + 32);

  v383 = v81[209] == 1 && v81[208] != 0;
  md::PuckLogic::update3DPuckVisibility((md::PuckLogic *)a1, v383);
  LOBYTE(v825[0]) = v383;
  if (*(_QWORD *)(a1 + 288))
  {
    *(_QWORD *)&v840[8] = 0;
    *(_QWORD *)v840 = 0;
    v840[16] = 1;
    *(_QWORD *)&v836[8] = 0;
    *(_QWORD *)v836 = 0;
    v836[16] = 1;
    v384 = *(unsigned __int8 *)(a1 + 192);
    if (v384 == 2)
    {
      v840[16] = 0;
      if (*(_BYTE *)(a1 + 193))
      {
        if (*(_BYTE *)(a1 + 193) != 1)
          goto LABEL_325;
        v399 = *(_QWORD *)(a1 + 392);
        v400 = *(_QWORD *)(a1 + 400);
        if (v400)
        {
          v401 = (unint64_t *)(v400 + 8);
          do
            v402 = __ldxr(v401);
          while (__stxr(v402 + 1, v401));
          v396 = *(std::__shared_weak_count **)&v836[8];
          *(_QWORD *)v836 = v399;
          *(_QWORD *)&v836[8] = v400;
          if (!v396)
            goto LABEL_325;
          v403 = (unint64_t *)&v396->__shared_owners_;
          do
            v398 = __ldaxr(v403);
          while (__stlxr(v398 - 1, v403));
          goto LABEL_307;
        }
      }
      else
      {
        v399 = *(_QWORD *)(a1 + 408);
        v413 = *(_QWORD *)(a1 + 416);
        if (v413)
        {
          v414 = (unint64_t *)(v413 + 8);
          do
            v415 = __ldxr(v414);
          while (__stxr(v415 + 1, v414));
          v396 = *(std::__shared_weak_count **)&v836[8];
          *(_QWORD *)v836 = v399;
          *(_QWORD *)&v836[8] = v413;
          if (!v396)
            goto LABEL_325;
          v416 = (unint64_t *)&v396->__shared_owners_;
          do
            v398 = __ldaxr(v416);
          while (__stlxr(v398 - 1, v416));
          goto LABEL_307;
        }
      }
      *(_QWORD *)v836 = v399;
      *(_QWORD *)&v836[8] = 0;
      goto LABEL_325;
    }
    if (v384 != 1)
    {
      if (*(_BYTE *)(a1 + 192))
        goto LABEL_325;
      v840[16] = 1;
      v385 = *(_QWORD *)(a1 + 408);
      v386 = *(_QWORD *)(a1 + 416);
      if (v386)
      {
        v387 = (unint64_t *)(v386 + 8);
        do
          v388 = __ldxr(v387);
        while (__stxr(v388 + 1, v387));
        v389 = *(std::__shared_weak_count **)&v840[8];
        *(_QWORD *)v840 = v385;
        *(_QWORD *)&v840[8] = v386;
        if (v389)
        {
          v390 = (unint64_t *)&v389->__shared_owners_;
          do
            v391 = __ldaxr(v390);
          while (__stlxr(v391 - 1, v390));
          if (!v391)
          {
            ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
            std::__shared_weak_count::__release_weak(v389);
          }
        }
      }
      else
      {
        *(_QWORD *)v840 = *(_QWORD *)(a1 + 408);
        *(_QWORD *)&v840[8] = 0;
      }
      v405 = *(_QWORD *)(a1 + 424);
      v404 = *(_QWORD *)(a1 + 432);
      if (v404)
      {
        v406 = (unint64_t *)(v404 + 8);
        do
          v407 = __ldxr(v406);
        while (__stxr(v407 + 1, v406));
      }
      v396 = *(std::__shared_weak_count **)&v836[8];
      *(_QWORD *)v836 = v405;
      *(_QWORD *)&v836[8] = v404;
      if (!v396)
      {
LABEL_325:
        v800 = v373;
        v417 = v840[16] != 0;
        if (!LOBYTE(v825[0]))
          v417 = 0;
        v840[16] = v417;
        if (LOBYTE(v825[0]))
          v418 = v836[16] != 0;
        else
          v418 = 0;
        v836[16] = v418;
        v826 = (unint64_t)v825;
        *(_QWORD *)&v827 = a1;
        v419 = *(_QWORD *)(a1 + 288);
        v420 = (_QWORD *)gdc::Registry::storage<md::components::OcclusionType>(v419);
        v421 = (_QWORD *)gdc::Registry::storage<md::components::CustomRenderState>(v419);
        v422 = gdc::Registry::storage<md::components::Visibility>(v419);
        v423 = (_QWORD *)v422;
        v424 = v422 + 32;
        v426 = v420[7];
        v425 = v420[8];
        if (v421[8] - v421[7] >= (unint64_t)(v425 - v426))
          v427 = v420 + 4;
        else
          v427 = v421 + 4;
        if (*(_QWORD *)(v422 + 64) - *(_QWORD *)(v422 + 56) >= v427[4] - v427[3])
          v428 = v427;
        else
          v428 = (_QWORD *)(v422 + 32);
        if (v420 + 4 == v428)
        {
          *(_QWORD *)buf = &v826;
          *(_QWORD *)&buf[8] = v840;
          *(_QWORD *)&buf[16] = v836;
          if (v426 != v425)
          {
            v429 = (char *)v420[10];
            do
            {
              v471 = *(unsigned int *)(v426 + 4);
              v472 = v471 >> 7;
              v473 = v421[4];
              v474 = (v421[5] - v473) >> 3;
              if (v471 >> 7 < v474)
              {
                v475 = *(_QWORD *)(v473 + 8 * v472);
                if (v475)
                {
                  v476 = *(unsigned __int16 *)(v475 + 2 * (v471 & 0x7F));
                  v478 = v421[7];
                  v477 = v421[8];
                  v479 = (v477 - v478) >> 3;
                  if (v479 > v476)
                  {
                    v480 = v478 + 8 * v476;
                    if (v480 != v477 && *(_DWORD *)(v480 + 4) == (_DWORD)v471)
                    {
                      v482 = v423[4];
                      v483 = (v423[5] - v482) >> 3;
                      if (v472 < v483)
                      {
                        v484 = *(_QWORD *)(v482 + 8 * v472);
                        if (v484)
                        {
                          v485 = *(unsigned __int16 *)(v484 + 2 * (v471 & 0x7F));
                          v487 = v423[7];
                          v486 = v423[8];
                          v488 = (v486 - v487) >> 3;
                          if (v488 > v485)
                          {
                            v489 = v487 + 8 * v485;
                            if (v489 != v486 && *(_DWORD *)(v489 + 4) == (_DWORD)v471)
                            {
                              v491 = *(_QWORD *)v426;
                              v492 = HIDWORD(*(_QWORD *)v426);
                              v493 = *(_QWORD *)v426 >> 39;
                              if (v493 < v474
                                && (v494 = *(_QWORD *)(v473 + 8 * v493)) != 0
                                && (v495 = *(unsigned __int16 *)(v494 + 2 * (HIDWORD(v491) & 0x7F)), v479 > v495)
                                && ((v496 = v478 + 8 * v495, v496 != v477)
                                  ? (v497 = *(_DWORD *)(v496 + 4) == (_DWORD)v492)
                                  : (v497 = 0),
                                    v497))
                              {
                                v498 = (_QWORD *)(v421[10] + 24 * v495);
                              }
                              else
                              {
                                v498 = (_QWORD *)v421[11];
                              }
                              v797 = v424;
                              if (v493 < v483
                                && (v499 = *(_QWORD *)(v482 + 8 * v493)) != 0
                                && (v500 = *(unsigned __int16 *)(v499 + 2 * (HIDWORD(v491) & 0x7F)), v488 > v500)
                                && ((v501 = v487 + 8 * v500, v501 != v486)
                                  ? (v502 = *(_DWORD *)(v501 + 4) == (_DWORD)v492)
                                  : (v502 = 0),
                                    v502))
                              {
                                v470 = (_BYTE *)(v423[10] + v500);
                              }
                              else
                              {
                                v470 = (_BYTE *)v423[11];
                              }
                              md::PuckLogic::update3DPuckRenderStates(md::PuckStyleInfo const&,md::PuckStyleInfo const&,BOOL)::$_1::operator()(buf, v491, *v429, v498, v470);
                              v424 = v797;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              ++v429;
              v426 += 8;
            }
            while (v426 != v425);
          }
          v81 = v815;
        }
        if (v421 + 4 == v428)
        {
          *(_QWORD *)buf = &v826;
          *(_QWORD *)&buf[8] = v840;
          *(_QWORD *)&buf[16] = v836;
          v503 = v421[7];
          v504 = v421[8];
          if (v503 != v504)
          {
            v505 = (_QWORD *)v421[10];
            do
            {
              v507 = *(unsigned int *)(v503 + 4);
              v508 = v507 >> 7;
              v509 = v420[4];
              v510 = (v420[5] - v509) >> 3;
              if (v507 >> 7 < v510)
              {
                v511 = *(_QWORD *)(v509 + 8 * v508);
                if (v511)
                {
                  v512 = *(unsigned __int16 *)(v511 + 2 * (v507 & 0x7F));
                  v514 = v420[7];
                  v513 = v420[8];
                  v515 = (v513 - v514) >> 3;
                  if (v515 > v512)
                  {
                    v516 = v514 + 8 * v512;
                    if (v516 != v513 && *(_DWORD *)(v516 + 4) == (_DWORD)v507)
                    {
                      v518 = v423[4];
                      v519 = (v423[5] - v518) >> 3;
                      if (v508 < v519)
                      {
                        v520 = *(_QWORD *)(v518 + 8 * v508);
                        if (v520)
                        {
                          v521 = *(unsigned __int16 *)(v520 + 2 * (v507 & 0x7F));
                          v523 = v423[7];
                          v522 = v423[8];
                          v524 = (v522 - v523) >> 3;
                          if (v524 > v521)
                          {
                            v525 = v523 + 8 * v521;
                            if (v525 != v522 && *(_DWORD *)(v525 + 4) == (_DWORD)v507)
                            {
                              v527 = *(_QWORD *)v503;
                              v528 = HIDWORD(*(_QWORD *)v503);
                              v529 = *(_QWORD *)v503 >> 39;
                              if (v529 < v510
                                && (v530 = *(_QWORD *)(v509 + 8 * v529)) != 0
                                && (v531 = *(unsigned __int16 *)(v530 + 2 * (HIDWORD(v527) & 0x7F)), v515 > v531)
                                && ((v532 = v514 + 8 * v531, v532 != v513)
                                  ? (v533 = *(_DWORD *)(v532 + 4) == (_DWORD)v528)
                                  : (v533 = 0),
                                    v533))
                              {
                                v534 = (char *)(v420[10] + v531);
                              }
                              else
                              {
                                v534 = (char *)v420[11];
                              }
                              v798 = v424;
                              if (v529 < v519
                                && (v535 = *(_QWORD *)(v518 + 8 * v529)) != 0
                                && (v536 = *(unsigned __int16 *)(v535 + 2 * (HIDWORD(v527) & 0x7F)), v524 > v536)
                                && ((v537 = v523 + 8 * v536, v537 != v522)
                                  ? (v538 = *(_DWORD *)(v537 + 4) == (_DWORD)v528)
                                  : (v538 = 0),
                                    v538))
                              {
                                v506 = (_BYTE *)(v423[10] + v536);
                              }
                              else
                              {
                                v506 = (_BYTE *)v423[11];
                              }
                              md::PuckLogic::update3DPuckRenderStates(md::PuckStyleInfo const&,md::PuckStyleInfo const&,BOOL)::$_1::operator()(buf, v527, *v534, v505, v506);
                              v424 = v798;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              v505 += 3;
              v503 += 8;
            }
            while (v503 != v504);
          }
          if ((_QWORD *)v424 == v428)
            goto LABEL_470;
        }
        else if ((_QWORD *)v424 == v428)
        {
LABEL_470:
          *(_QWORD *)buf = &v826;
          *(_QWORD *)&buf[8] = v840;
          *(_QWORD *)&buf[16] = v836;
          v539 = v423[7];
          v540 = v423[8];
          if (v539 != v540)
          {
            v541 = (_BYTE *)v423[10];
            do
            {
              v543 = *(unsigned int *)(v539 + 4);
              v544 = v543 >> 7;
              v545 = v420[4];
              v546 = (v420[5] - v545) >> 3;
              if (v543 >> 7 >= v546)
                goto LABEL_474;
              v547 = *(_QWORD *)(v545 + 8 * v544);
              if (!v547)
                goto LABEL_474;
              v548 = *(unsigned __int16 *)(v547 + 2 * (v543 & 0x7F));
              v550 = v420[7];
              v549 = v420[8];
              v551 = (v549 - v550) >> 3;
              if (v551 <= v548)
                goto LABEL_474;
              v552 = v550 + 8 * v548;
              if (v552 == v549 || *(_DWORD *)(v552 + 4) != (_DWORD)v543)
                goto LABEL_474;
              v554 = v421[4];
              v555 = (v421[5] - v554) >> 3;
              if (v544 >= v555)
                goto LABEL_474;
              v556 = *(_QWORD *)(v554 + 8 * v544);
              if (!v556)
                goto LABEL_474;
              v557 = *(unsigned __int16 *)(v556 + 2 * (v543 & 0x7F));
              v559 = v421[7];
              v558 = v421[8];
              v560 = (v558 - v559) >> 3;
              if (v560 <= v557)
                goto LABEL_474;
              v561 = v559 + 8 * v557;
              if (v561 == v558 || *(_DWORD *)(v561 + 4) != (_DWORD)v543)
                goto LABEL_474;
              v563 = *(_QWORD *)v539;
              v564 = HIDWORD(*(_QWORD *)v539);
              v565 = *(_QWORD *)v539 >> 39;
              if (v565 < v546
                && (v566 = *(_QWORD *)(v545 + 8 * v565)) != 0
                && (v567 = *(unsigned __int16 *)(v566 + 2 * (HIDWORD(v563) & 0x7F)), v551 > v567)
                && ((v568 = v550 + 8 * v567, v568 != v549) ? (v569 = *(_DWORD *)(v568 + 4) == (_DWORD)v564) : (v569 = 0),
                    v569))
              {
                v570 = (char *)(v420[10] + v567);
                if (v565 >= v555)
                  goto LABEL_472;
              }
              else
              {
                v570 = (char *)v420[11];
                if (v565 >= v555)
                  goto LABEL_472;
              }
              v571 = *(_QWORD *)(v554 + 8 * v565);
              if (v571)
              {
                v572 = *(unsigned __int16 *)(v571 + 2 * (HIDWORD(v563) & 0x7F));
                if (v560 > v572)
                {
                  v573 = v559 + 8 * v572;
                  if (v573 != v558 && *(_DWORD *)(v573 + 4) == (_DWORD)v564)
                  {
                    v542 = (_QWORD *)(v421[10] + 24 * v572);
                    goto LABEL_473;
                  }
                }
              }
LABEL_472:
              v542 = (_QWORD *)v421[11];
LABEL_473:
              md::PuckLogic::update3DPuckRenderStates(md::PuckStyleInfo const&,md::PuckStyleInfo const&,BOOL)::$_1::operator()(buf, v563, *v570, v542, v541);
LABEL_474:
              ++v541;
              v539 += 8;
            }
            while (v539 != v540);
          }
          v81 = v815;
        }
        v575 = *(std::__shared_weak_count **)&v836[8];
        v373 = v800;
        if (*(_QWORD *)&v836[8])
        {
          v576 = (unint64_t *)(*(_QWORD *)&v836[8] + 8);
          do
            v577 = __ldaxr(v576);
          while (__stlxr(v577 - 1, v576));
          if (!v577)
          {
            ((void (*)(std::__shared_weak_count *))v575->__on_zero_shared)(v575);
            std::__shared_weak_count::__release_weak(v575);
          }
        }
        v578 = *(std::__shared_weak_count **)&v840[8];
        if (*(_QWORD *)&v840[8])
        {
          v579 = (unint64_t *)(*(_QWORD *)&v840[8] + 8);
          do
            v580 = __ldaxr(v579);
          while (__stlxr(v580 - 1, v579));
          if (!v580)
          {
            ((void (*)(std::__shared_weak_count *))v578->__on_zero_shared)(v578);
            std::__shared_weak_count::__release_weak(v578);
          }
        }
        goto LABEL_520;
      }
      v408 = (unint64_t *)&v396->__shared_owners_;
      do
        v398 = __ldaxr(v408);
      while (__stlxr(v398 - 1, v408));
LABEL_307:
      if (!v398)
      {
        ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
        std::__shared_weak_count::__release_weak(v396);
      }
      goto LABEL_325;
    }
    v840[16] = 1;
    v836[16] = 0;
    if (*(_BYTE *)(a1 + 193))
    {
      if (*(_BYTE *)(a1 + 193) != 1)
        goto LABEL_325;
      v392 = *(_QWORD *)(a1 + 392);
      v393 = *(_QWORD *)(a1 + 400);
      if (v393)
      {
        v394 = (unint64_t *)(v393 + 8);
        do
          v395 = __ldxr(v394);
        while (__stxr(v395 + 1, v394));
        v396 = *(std::__shared_weak_count **)&v840[8];
        *(_QWORD *)v840 = v392;
        *(_QWORD *)&v840[8] = v393;
        if (!v396)
          goto LABEL_325;
        v397 = (unint64_t *)&v396->__shared_owners_;
        do
          v398 = __ldaxr(v397);
        while (__stlxr(v398 - 1, v397));
        goto LABEL_307;
      }
    }
    else
    {
      v392 = *(_QWORD *)(a1 + 408);
      v409 = *(_QWORD *)(a1 + 416);
      if (v409)
      {
        v410 = (unint64_t *)(v409 + 8);
        do
          v411 = __ldxr(v410);
        while (__stxr(v411 + 1, v410));
        v396 = *(std::__shared_weak_count **)&v840[8];
        *(_QWORD *)v840 = v392;
        *(_QWORD *)&v840[8] = v409;
        if (!v396)
          goto LABEL_325;
        v412 = (unint64_t *)&v396->__shared_owners_;
        do
          v398 = __ldaxr(v412);
        while (__stlxr(v398 - 1, v412));
        goto LABEL_307;
      }
    }
    *(_QWORD *)v840 = v392;
    *(_QWORD *)&v840[8] = 0;
    goto LABEL_325;
  }
LABEL_520:
  v581 = v381;
  v582 = fabs((v775 - v776) * 0.159154943);
  v809 = v377;
  v583 = v375;
  if (*(unsigned __int8 *)(v373 + 3776) - 4 >= 0xFFFFFFFD)
  {
    v589.f64[0] = v805;
    v589.f64[1] = v801;
    v590 = vsubq_f64(v589, *(float64x2_t *)&v850[8]);
    v591 = vmulq_f64(v590, v590);
    v588 = sqrt(v591.f64[0] + (v802 - *(double *)v850) * (v802 - *(double *)v850) + v591.f64[1]) * 0.0000000249532021;
    v584 = *(double *)v851;
    v585 = *(_OWORD *)&v851[8];
  }
  else
  {
    v584 = *(double *)v851;
    v585 = *(_OWORD *)&v851[8];
    v586 = vsubq_f64(*(float64x2_t *)&v851[8], *(float64x2_t *)&v852[8]);
    v587 = vmulq_f64(v586, v586);
    v588 = sqrt(v587.f64[0] + (*(double *)v851 - *(double *)v852) * (*(double *)v851 - *(double *)v852) + v587.f64[1]);
  }
  v592 = v584 - *(double *)&v821;
  v593 = 1.0
       / sqrt(v592 * v592+ (*(double *)&v585 - v810) * (*(double *)&v585 - v810)+ (*((double *)&v585 + 1) - v777) * (*((double *)&v585 + 1) - v777));
  v594 = v784 + -(v784 - v593 * v592) * v379;
  v595 = v783 + -(v783 - v593 * (*(double *)&v585 - v810)) * v379;
  v596 = v782 + -(v782 - v593 * (*((double *)&v585 + 1) - v777)) * v379;
  v597 = 1.0 / sqrt(v594 * v594 + v595 * v595 + v596 * v596);
  v598 = v597 * v594;
  v599 = v597 * v595;
  v600 = v597 * v596;
  v601 = __sincos_stret(v581 * -0.5 + 1.57079633);
  v602 = v599 * v599 + v598 * v598;
  v603 = sqrt(v602 + v600 * v600) + v600;
  v604 = 1.0 / sqrt(v602 + v603 * v603);
  v605 = -(v599 * v604);
  v606 = v604 * v598;
  v607 = v604 * v603;
  v608 = v605 * v601.__cosval + v607 * (v598 * v601.__sinval) - v606 * (v600 * v601.__sinval);
  v609 = v606 * v601.__cosval + v607 * (v599 * v601.__sinval) + v605 * (v600 * v601.__sinval);
  v610 = v607 * (v600 * v601.__sinval) + v606 * (v598 * v601.__sinval) - v605 * (v599 * v601.__sinval);
  v611 = -(v605 * (v598 * v601.__sinval) + v606 * (v599 * v601.__sinval) - v607 * v601.__cosval);
  v612 = v582 * 40075017.0 / (v780 * -559.82 + 111132.92 + v779 * 1.175 + v778 * -0.0023);
  if (v781 < 0xFFFFFFFD)
    v612 = 1.0;
  v613 = v609 + v609;
  v614 = (v609 + v609) * v609;
  v615 = (v610 + v610) * v610;
  v616 = v608 + v608;
  v617 = (v608 + v608) * v609;
  v618 = (v610 + v610) * v611;
  v619 = v610 * (v608 + v608);
  v620 = v611 * v613;
  v621 = v611 * v613 + v619;
  v622 = 1.0 - (v608 + v608) * v608;
  v623 = v613 * v610;
  v624 = v611 * v616;
  *(double *)buf = 1.0 - (v614 + v615);
  *(double *)&buf[8] = v618 + v617;
  *(double *)&v860[1] = v617 - v618;
  *(double *)&v860[2] = v622 - v615;
  *(double *)&v860[5] = v621;
  *(double *)&v860[6] = v623 - v624;
  *(double *)&buf[16] = v619 - v620;
  *(double *)&v860[3] = v624 + v623;
  *(double *)v861 = v622 - v614;
  v860[0] = 0;
  v860[4] = 0;
  *(_QWORD *)&v861[8] = 0;
  *(_OWORD *)(a1 + 336) = v821;
  *(double *)(a1 + 352) = v777;
  *(_OWORD *)&v861[16] = v821;
  *(double *)&v861[32] = v777;
  v862 = 0x3FF0000000000000;
  v842 = 0u;
  v844 = 0;
  *(_OWORD *)v847 = 0u;
  v846 = 0u;
  v843 = 0u;
  v841 = 0u;
  *(_OWORD *)&v840[8] = 0u;
  *(_QWORD *)&v847[16] = 0x3FF0000000000000;
  *(double *)v840 = v583 * v378 * v612 * (1.6 * v588) / v809;
  *(double *)&v842 = *(double *)v840;
  v845 = *(double *)v840;
  gm::operator*<double,4,4,4>((double *)v836, (double *)buf, (double *)v840);
  v625 = *(_OWORD *)&v836[16];
  v817[5] = *(_OWORD *)v836;
  v817[6] = v625;
  v626 = *(_OWORD *)&v836[48];
  v817[7] = *(_OWORD *)&v836[32];
  v817[8] = v626;
  v627 = v837;
  v817[9] = *(_OWORD *)&v836[64];
  v817[10] = v627;
  v628 = v839;
  v817[11] = v838;
  v817[12] = v628;
  v818 = (double *)(v817 + 5);
  v629 = *(_QWORD *)(a1 + 288);
  if (v629)
  {
    v630 = (_QWORD *)gdc::Registry::storage<md::components::DynamicMeshInstance>(*(_QWORD *)(a1 + 288));
    v631 = gdc::Registry::storage<md::components::Material>(v629);
    v632 = (_QWORD *)v631;
    v634 = v630[7];
    v633 = v630[8];
    v822 = v631 + 32;
    if (*(_QWORD *)(v631 + 64) - *(_QWORD *)(v631 + 56) >= (unint64_t)(v633 - v634))
      v635 = v630 + 4;
    else
      v635 = (_QWORD *)(v631 + 32);
    v814 = v635;
    if (v630 + 4 == v635 && v634 != v633)
    {
      v636 = (float *)(v630[10] + 288);
      do
      {
        v638 = *(unsigned int *)(v634 + 4);
        v639 = v632[4];
        if (v638 >> 7 >= (v632[5] - v639) >> 3)
          goto LABEL_534;
        v640 = *(_QWORD *)(v639 + 8 * (v638 >> 7));
        if (!v640)
          goto LABEL_534;
        v641 = *(unsigned __int16 *)(v640 + 2 * (v638 & 0x7F));
        v643 = v632[7];
        v642 = v632[8];
        if (v641 >= (v642 - v643) >> 3)
          goto LABEL_534;
        v644 = v643 + 8 * v641;
        if (v644 == v642 || *(_DWORD *)(v644 + 4) != (_DWORD)v638)
          goto LABEL_534;
        if (!*(_BYTE *)(a1 + 384))
        {
          v646 = *(_OWORD *)(v636 - 63);
          *(_QWORD *)(a1 + 376) = *(_QWORD *)(v636 - 59);
          *(_OWORD *)(a1 + 360) = v646;
          *(_BYTE *)(a1 + 384) = 1;
        }
        v647 = *(v636 - 61);
        v637 = vmaxnm_f32(vsub_f32(*(float32x2_t *)(v636 - 60), *(float32x2_t *)(v636 - 63)), 0);
        v648 = fmaxf(*(v636 - 58) - v647, 0.0);
        if (v637.f32[0] <= v637.f32[1])
        {
          v637.i32[0] = v637.i32[1];
          if (v637.f32[1] > v648)
            goto LABEL_533;
        }
        else if (v637.f32[0] > v648)
        {
          goto LABEL_533;
        }
        v637.f32[0] = v648;
LABEL_533:
        memset(&v861[8], 0, 32);
        memset(v860, 0, sizeof(v860));
        *(_OWORD *)&buf[8] = 0u;
        v862 = 0x3FF0000000000000;
        *(double *)buf = 1.0 / v637.f32[0];
        *(double *)&v860[2] = *(double *)buf;
        *(double *)v861 = *(double *)buf;
        v846 = 0uLL;
        v843 = 0u;
        v844 = 0;
        v841 = 0u;
        v842 = 0u;
        *(_OWORD *)&v840[8] = 0u;
        *(_QWORD *)v840 = 0x3FF0000000000000;
        *(_QWORD *)&v842 = 0x3FF0000000000000;
        v845 = 1.0;
        *(_QWORD *)&v847[16] = 0x3FF0000000000000;
        *(_QWORD *)v847 = 0;
        *(double *)&v847[8] = (float)-v647;
        gm::operator*<double,3,4,4>((double *)v825, (double *)v636 - 22, v818);
        gm::operator*<double,3,4,4>((double *)&v826, (double *)v825, (double *)buf);
        gm::operator*<double,3,4,4>((double *)v836, (double *)&v826, (double *)v840);
        *((_OWORD *)v636 - 5) = *(_OWORD *)v836;
        *((_OWORD *)v636 - 4) = *(_OWORD *)&v836[16];
        *((_OWORD *)v636 - 3) = *(_OWORD *)&v836[32];
        *((_OWORD *)v636 - 2) = *(_OWORD *)&v836[48];
        *((_OWORD *)v636 - 1) = *(_OWORD *)&v836[64];
        *(_OWORD *)v636 = v837;
LABEL_534:
        v634 += 8;
        v636 += 76;
      }
      while (v634 != v633);
    }
    v81 = v815;
    if ((_QWORD *)v822 == v814)
    {
      v652 = (unint64_t *)v632[7];
      v651 = (uint64_t *)v632[8];
      if (v652 != (unint64_t *)v651)
      {
        while (1)
        {
          v657 = *((unsigned int *)v652 + 1);
          v658 = v630[4];
          v659 = (v630[5] - v658) >> 3;
          if (v657 >> 7 >= v659)
            goto LABEL_563;
          v660 = *(_QWORD *)(v658 + 8 * (v657 >> 7));
          if (!v660)
            goto LABEL_563;
          v661 = *(unsigned __int16 *)(v660 + 2 * (v657 & 0x7F));
          v663 = v630[7];
          v662 = v630[8];
          v664 = (v662 - v663) >> 3;
          if (v664 <= v661)
            goto LABEL_563;
          v665 = v663 + 8 * v661;
          if (v665 == v662 || *(_DWORD *)(v665 + 4) != (_DWORD)v657)
            goto LABEL_563;
          v667 = *v652;
          v668 = *v652 >> 39;
          if (v668 >= v659)
            break;
          v669 = *(_QWORD *)(v658 + 8 * v668);
          if (!v669)
            break;
          v670 = *(unsigned __int16 *)(v669 + 2 * (HIDWORD(v667) & 0x7F));
          if (v664 <= v670)
            break;
          v671 = HIDWORD(v667);
          v672 = v663 + 8 * v670;
          if (v672 == v662 || *(_DWORD *)(v672 + 4) != (_DWORD)v671)
            break;
          v674 = v630[10] + 304 * v670;
          if (!*(_BYTE *)(a1 + 384))
            goto LABEL_580;
LABEL_581:
          v676 = *(float *)(v674 + 44);
          v653 = vmaxnm_f32(vsub_f32(*(float32x2_t *)(v674 + 48), *(float32x2_t *)(v674 + 36)), 0);
          v677 = fmaxf(*(float *)(v674 + 56) - v676, 0.0);
          if (v653.f32[0] <= v653.f32[1])
          {
            v653.i32[0] = v653.i32[1];
            if (v653.f32[1] > v677)
              goto LABEL_562;
          }
          else if (v653.f32[0] > v677)
          {
            goto LABEL_562;
          }
          v653.f32[0] = v677;
LABEL_562:
          memset(&v861[8], 0, 32);
          memset(v860, 0, sizeof(v860));
          *(_OWORD *)&buf[8] = 0u;
          v862 = 0x3FF0000000000000;
          *(double *)buf = 1.0 / v653.f32[0];
          *(double *)&v860[2] = *(double *)buf;
          *(double *)v861 = *(double *)buf;
          v846 = 0uLL;
          v843 = 0u;
          v844 = 0;
          v841 = 0u;
          v842 = 0u;
          *(_OWORD *)&v840[8] = 0u;
          *(_QWORD *)v840 = 0x3FF0000000000000;
          *(_QWORD *)&v842 = 0x3FF0000000000000;
          v845 = 1.0;
          *(_QWORD *)&v847[16] = 0x3FF0000000000000;
          *(_QWORD *)v847 = 0;
          *(double *)&v847[8] = (float)-v676;
          gm::operator*<double,3,4,4>((double *)v825, (double *)(v674 + 112), v818);
          gm::operator*<double,3,4,4>((double *)&v826, (double *)v825, (double *)buf);
          gm::operator*<double,3,4,4>((double *)v836, (double *)&v826, (double *)v840);
          v654 = *(_OWORD *)&v836[16];
          *(_OWORD *)(v674 + 208) = *(_OWORD *)v836;
          *(_OWORD *)(v674 + 224) = v654;
          v655 = *(_OWORD *)&v836[48];
          *(_OWORD *)(v674 + 240) = *(_OWORD *)&v836[32];
          *(_OWORD *)(v674 + 256) = v655;
          v656 = v837;
          *(_OWORD *)(v674 + 272) = *(_OWORD *)&v836[64];
          *(_OWORD *)(v674 + 288) = v656;
LABEL_563:
          if (++v652 == (unint64_t *)v651)
            goto LABEL_551;
        }
        v674 = v630[11];
        if (*(_BYTE *)(a1 + 384))
          goto LABEL_581;
LABEL_580:
        v675 = *(_OWORD *)(v674 + 36);
        *(_QWORD *)(a1 + 376) = *(_QWORD *)(v674 + 52);
        *(_OWORD *)(a1 + 360) = v675;
        *(_BYTE *)(a1 + 384) = 1;
        goto LABEL_581;
      }
    }
  }
LABEL_551:
  *(_OWORD *)(v81 + 8) = *(_OWORD *)v852;
  *((_QWORD *)v81 + 3) = *(_QWORD *)&v852[16];
  *((_OWORD *)v81 + 2) = *(_OWORD *)v850;
  *((_QWORD *)v81 + 6) = *(_QWORD *)&v850[16];
LABEL_552:
  if (!v858)
  {
LABEL_679:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_685:
    __break(1u);
    return;
  }
  (*(void (**)(_QWORD *))(*v858 + 48))(v858);
  v649 = v858;
  if (v858 == v857)
  {
    v650 = 4;
    v649 = v857;
  }
  else
  {
    if (!v858)
      return;
    v650 = 5;
  }
  (*(void (**)(void))(*v649 + 8 * v650))();
}

void sub_19F314944(_Unwind_Exception *a1)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x350]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3D0]);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)&STACK[0x510]);
  _Unwind_Resume(a1);
}

void md::PuckLogic::update3DPuckVisibility(md::PuckLogic *this, int a2)
{
  uint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  BOOL v38;
  _BYTE *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  BOOL v66;
  _BYTE *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;

  v2 = *((_QWORD *)this + 36);
  if (v2)
  {
    v5 = (_QWORD *)gdc::Registry::storage<md::components::DynamicMeshInstance>(*((_QWORD *)this + 36));
    v6 = (_QWORD *)gdc::Registry::storage<md::components::Material>(v2);
    v7 = gdc::Registry::storage<md::components::Visibility>(v2);
    v8 = (_QWORD *)v7;
    v9 = v7 + 32;
    v10 = v5[7];
    v11 = v5[8];
    if (v6[8] - v6[7] >= (unint64_t)(v11 - v10))
      v12 = v5 + 4;
    else
      v12 = v6 + 4;
    if (*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56) >= v12[4] - v12[3])
      v13 = v12;
    else
      v13 = (_QWORD *)(v7 + 32);
    if (v5 + 4 == v13 && v10 != v11)
    {
      do
      {
        v15 = *(unsigned int *)(v10 + 4);
        v16 = v15 >> 7;
        v17 = v6[4];
        if (v15 >> 7 < (v6[5] - v17) >> 3)
        {
          v18 = *(_QWORD *)(v17 + 8 * v16);
          if (v18)
          {
            v19 = *(unsigned __int16 *)(v18 + 2 * (v15 & 0x7F));
            v21 = v6[7];
            v20 = v6[8];
            if (v19 < (v20 - v21) >> 3)
            {
              v22 = v21 + 8 * v19;
              if (v22 != v20 && *(_DWORD *)(v22 + 4) == (_DWORD)v15)
              {
                v24 = v8[4];
                v25 = (v8[5] - v24) >> 3;
                if (v16 < v25)
                {
                  v26 = *(_QWORD *)(v24 + 8 * v16);
                  if (v26)
                  {
                    v27 = *(unsigned __int16 *)(v26 + 2 * (v15 & 0x7F));
                    v29 = v8[7];
                    v28 = v8[8];
                    v30 = (v28 - v29) >> 3;
                    if (v30 > v27)
                    {
                      v31 = v29 + 8 * v27;
                      if (v31 != v28 && *(_DWORD *)(v31 + 4) == (_DWORD)v15)
                      {
                        if ((v33 = *(_QWORD *)v10, v34 = *(_QWORD *)v10 >> 39, v34 < v25)
                          && (v35 = *(_QWORD *)(v24 + 8 * v34)) != 0
                          && (v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v33) & 0x7F)), v30 > v36)
                          && ((v37 = v29 + 8 * v36, v37 != v28)
                            ? (v38 = *(_DWORD *)(v37 + 4) == HIDWORD(v33))
                            : (v38 = 0),
                              v38))
                        {
                          v39 = (_BYTE *)(v8[10] + v36);
                        }
                        else
                        {
                          v39 = (_BYTE *)v8[11];
                        }
                        if (*v39 != a2)
                        {
                          *v39 = a2;
                          v90 = v33;
                          v40 = (uint64_t *)gdc::Registry::storage<md::components::VisibilityChanged>(*((_QWORD *)this + 36));
                          gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v40, v90);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v10 += 8;
      }
      while (v10 != v11);
    }
    if (v6 + 4 == v13)
    {
      v41 = v6[7];
      v42 = v6[8];
      while (v41 != v42)
      {
        v43 = *(unsigned int *)(v41 + 4);
        v44 = v43 >> 7;
        v45 = v5[4];
        if (v43 >> 7 < (v5[5] - v45) >> 3)
        {
          v46 = *(_QWORD *)(v45 + 8 * v44);
          if (v46)
          {
            v47 = *(unsigned __int16 *)(v46 + 2 * (v43 & 0x7F));
            v49 = v5[7];
            v48 = v5[8];
            if (v47 < (v48 - v49) >> 3)
            {
              v50 = v49 + 8 * v47;
              if (v50 != v48 && *(_DWORD *)(v50 + 4) == (_DWORD)v43)
              {
                v52 = v8[4];
                v53 = (v8[5] - v52) >> 3;
                if (v44 < v53)
                {
                  v54 = *(_QWORD *)(v52 + 8 * v44);
                  if (v54)
                  {
                    v55 = *(unsigned __int16 *)(v54 + 2 * (v43 & 0x7F));
                    v57 = v8[7];
                    v56 = v8[8];
                    v58 = (v56 - v57) >> 3;
                    if (v58 > v55)
                    {
                      v59 = v57 + 8 * v55;
                      if (v59 != v56 && *(_DWORD *)(v59 + 4) == (_DWORD)v43)
                      {
                        if ((v61 = *(_QWORD *)v41, v62 = *(_QWORD *)v41 >> 39, v62 < v53)
                          && (v63 = *(_QWORD *)(v52 + 8 * v62)) != 0
                          && (v64 = *(unsigned __int16 *)(v63 + 2 * (HIDWORD(v61) & 0x7F)), v58 > v64)
                          && ((v65 = v57 + 8 * v64, v65 != v56)
                            ? (v66 = *(_DWORD *)(v65 + 4) == HIDWORD(v61))
                            : (v66 = 0),
                              v66))
                        {
                          v67 = (_BYTE *)(v8[10] + v64);
                        }
                        else
                        {
                          v67 = (_BYTE *)v8[11];
                        }
                        if (*v67 != a2)
                        {
                          *v67 = a2;
                          v68 = (uint64_t *)gdc::Registry::storage<md::components::VisibilityChanged>(*((_QWORD *)this + 36));
                          gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v68, v61);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v41 += 8;
      }
    }
    if ((_QWORD *)v9 == v13)
    {
      v69 = v8[7];
      v70 = v8[8];
      if (v69 != v70)
      {
        v71 = (_BYTE *)v8[10];
        do
        {
          v72 = *(unsigned int *)(v69 + 4);
          v73 = v72 >> 7;
          v74 = v5[4];
          if (v72 >> 7 < (v5[5] - v74) >> 3)
          {
            v75 = *(_QWORD *)(v74 + 8 * v73);
            if (v75)
            {
              v76 = *(unsigned __int16 *)(v75 + 2 * (v72 & 0x7F));
              v78 = v5[7];
              v77 = v5[8];
              if (v76 < (v77 - v78) >> 3)
              {
                v79 = v78 + 8 * v76;
                if (v79 != v77 && *(_DWORD *)(v79 + 4) == (_DWORD)v72)
                {
                  v81 = v6[4];
                  if (v73 < (v6[5] - v81) >> 3)
                  {
                    v82 = *(_QWORD *)(v81 + 8 * v73);
                    if (v82)
                    {
                      v83 = *(unsigned __int16 *)(v82 + 2 * (v72 & 0x7F));
                      v85 = v6[7];
                      v84 = v6[8];
                      if (v83 < (v84 - v85) >> 3)
                      {
                        v86 = v85 + 8 * v83;
                        if (v86 != v84 && *(_DWORD *)(v86 + 4) == (_DWORD)v72 && *v71 != a2)
                        {
                          v88 = *(_QWORD *)v69;
                          *v71 = a2;
                          v89 = (uint64_t *)gdc::Registry::storage<md::components::VisibilityChanged>(*((_QWORD *)this + 36));
                          gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v89, v88);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v71;
          v69 += 8;
        }
        while (v69 != v70);
      }
    }
  }
}

md::ARContext *md::ARContext::ARContext(md::ARContext *this)
{
  void *v2;
  char v3;
  int v4;
  void *v5;
  double v6;
  int v7;
  void *v8;
  double v9;

  *(_BYTE *)this = 0;
  *(_QWORD *)((char *)this + 4) = 0xBFC0000042F00000;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 13) = 0;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "arOverrideDefaults");

  if ((v3 & 1) == 0)
  {
    v4 = *((_DWORD *)this + 2);
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v6) = v4;
    objc_msgSend(v5, "setArVirtualPlaneHeight:", v6);

    v7 = *((_DWORD *)this + 1);
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v9) = v7;
    objc_msgSend(v8, "setArDefaultHeight:", v9);

  }
  return this;
}

void sub_19F31513C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void md::NonTiledAssetLogic::loadNonTiledIDs(VKResourceManager *)::$_0::operator()(void *a1, uint64_t *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  const char *v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  __int128 *p_dst;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  unint64_t v25;
  uint8x8_t v26;
  void **v27;
  unsigned __int8 *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  int64_t v41;
  float v42;
  float v43;
  _BOOL8 v44;
  unint64_t v45;
  unint64_t v46;
  size_t prime;
  void *v48;
  void *v49;
  uint64_t v50;
  _QWORD *v51;
  size_t v52;
  size_t v53;
  size_t v54;
  _QWORD *i;
  size_t v56;
  uint64_t v57;
  unint64_t v58;
  uint8x8_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  size_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  void *v67;
  unint64_t v68;
  uint64_t v69;
  __int128 __dst;
  int64_t v71;
  __int128 buf;
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
    goto LABEL_17;
  if ((objc_msgSend(v3, "hasName") & 1) == 0)
  {
    if (GEOGetVectorKitNonTiledAssetLogicLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitNonTiledAssetLogicLog(void)::onceToken, &__block_literal_global_36539);
    v13 = GEOGetVectorKitNonTiledAssetLogicLog(void)::log;
    if (!os_log_type_enabled((os_log_t)GEOGetVectorKitNonTiledAssetLogicLog(void)::log, OS_LOG_TYPE_INFO))
      goto LABEL_17;
    LOWORD(buf) = 0;
    v14 = "Non-tiled info does not have a name. Skipping";
    v15 = v13;
    v16 = 2;
LABEL_16:
    _os_log_impl(&dword_19F029000, v15, OS_LOG_TYPE_INFO, v14, (uint8_t *)&buf, v16);
LABEL_17:

    goto LABEL_18;
  }
  objc_msgSend(v4, "name");
  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v6 = objc_msgSend(v5, "cStringUsingEncoding:", 1);

  if ((objc_msgSend(v4, "hasMuid") & 1) == 0)
  {
    if (GEOGetVectorKitNonTiledAssetLogicLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitNonTiledAssetLogicLog(void)::onceToken, &__block_literal_global_36539);
    v17 = GEOGetVectorKitNonTiledAssetLogicLog(void)::log;
    if (!os_log_type_enabled((os_log_t)GEOGetVectorKitNonTiledAssetLogicLog(void)::log, OS_LOG_TYPE_INFO))
      goto LABEL_17;
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v6;
    v14 = "Non-tiled info with name %s does not have a muid. Skipping";
    v15 = v17;
    v16 = 12;
    goto LABEL_16;
  }

  objc_msgSend(v4, "name");
  v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v8 = (const char *)objc_msgSend(v7, "cStringUsingEncoding:", 1);

  v9 = objc_msgSend(v4, "muid");
  v10 = strlen(v8);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v11 = v10;
  v69 = v9;
  if (v10 >= 0x17)
  {
    v18 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v18 = v10 | 7;
    v19 = v18 + 1;
    p_dst = (__int128 *)operator new(v18 + 1);
    *((_QWORD *)&__dst + 1) = v11;
    v71 = v19 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v71) = v10;
    p_dst = &__dst;
    if (!v10)
      goto LABEL_23;
  }
  memmove(p_dst, v8, v11);
LABEL_23:
  *((_BYTE *)p_dst + v11) = 0;
  v20 = HIBYTE(v71);
  if (v71 >= 0)
    v21 = (uint64_t *)&__dst;
  else
    v21 = (uint64_t *)__dst;
  if (v71 >= 0)
    v22 = HIBYTE(v71);
  else
    v22 = *((_QWORD *)&__dst + 1);
  v23 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v21, v22);
  v24 = v23;
  v25 = a2[1];
  if (!v25)
    goto LABEL_71;
  v26 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    v11 = v23;
    if (v23 >= v25)
      v11 = v23 % v25;
  }
  else
  {
    v11 = (v25 - 1) & v23;
  }
  v27 = *(void ***)(*a2 + 8 * v11);
  if (!v27 || (v28 = (unsigned __int8 *)*v27) == 0)
  {
LABEL_71:
    v28 = (unsigned __int8 *)operator new(0x30uLL);
    v40 = a2 + 2;
    *(_QWORD *)&buf = v28;
    *((_QWORD *)&buf + 1) = a2 + 2;
    *(_QWORD *)v28 = 0;
    *((_QWORD *)v28 + 1) = v24;
    *((_OWORD *)v28 + 1) = __dst;
    v41 = v71;
    __dst = 0uLL;
    v71 = 0;
    *((_QWORD *)v28 + 4) = v41;
    *((_QWORD *)v28 + 5) = 0;
    v73 = 1;
    v42 = (float)(unint64_t)(a2[3] + 1);
    v43 = *((float *)a2 + 8);
    if (v25 && (float)(v43 * (float)v25) >= v42)
    {
LABEL_121:
      v64 = *a2;
      v65 = *(_QWORD **)(*a2 + 8 * v11);
      v39 = v69;
      if (v65)
      {
        *(_QWORD *)v28 = *v65;
      }
      else
      {
        *(_QWORD *)v28 = *v40;
        *v40 = v28;
        *(_QWORD *)(v64 + 8 * v11) = v40;
        if (!*(_QWORD *)v28)
        {
LABEL_130:
          ++a2[3];
          v20 = HIBYTE(v71);
          goto LABEL_131;
        }
        v66 = *(_QWORD *)(*(_QWORD *)v28 + 8);
        if ((v25 & (v25 - 1)) != 0)
        {
          if (v66 >= v25)
            v66 %= v25;
        }
        else
        {
          v66 &= v25 - 1;
        }
        v65 = (_QWORD *)(*a2 + 8 * v66);
      }
      *v65 = v28;
      goto LABEL_130;
    }
    v44 = 1;
    if (v25 >= 3)
      v44 = (v25 & (v25 - 1)) != 0;
    v45 = v44 | (2 * v25);
    v46 = vcvtps_u32_f32(v42 / v43);
    if (v45 <= v46)
      prime = v46;
    else
      prime = v45;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v25 = a2[1];
    }
    if (prime <= v25)
    {
      if (prime >= v25)
        goto LABEL_108;
      v58 = vcvtps_u32_f32((float)(unint64_t)a2[3] / *((float *)a2 + 8));
      if (v25 < 3 || (v59 = (uint8x8_t)vcnt_s8((int8x8_t)v25), v59.i16[0] = vaddlv_u8(v59), v59.u32[0] > 1uLL))
      {
        v58 = std::__next_prime(v58);
      }
      else
      {
        v60 = 1 << -(char)__clz(v58 - 1);
        if (v58 >= 2)
          v58 = v60;
      }
      if (prime <= v58)
        prime = v58;
      if (prime >= v25)
      {
        v25 = a2[1];
LABEL_108:
        if ((v25 & (v25 - 1)) != 0)
        {
          if (v24 >= v25)
            v11 = v24 % v25;
          else
            v11 = v24;
        }
        else
        {
          v11 = (v25 - 1) & v24;
        }
        goto LABEL_121;
      }
      if (!prime)
      {
        v67 = (void *)*a2;
        *a2 = 0;
        if (v67)
          operator delete(v67);
        v25 = 0;
        a2[1] = 0;
        goto LABEL_108;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v48 = operator new(8 * prime);
    v49 = (void *)*a2;
    *a2 = (uint64_t)v48;
    if (v49)
      operator delete(v49);
    v50 = 0;
    a2[1] = prime;
    do
      *(_QWORD *)(*a2 + 8 * v50++) = 0;
    while (prime != v50);
    v51 = (_QWORD *)*v40;
    if (!*v40)
    {
LABEL_107:
      v25 = prime;
      goto LABEL_108;
    }
    v52 = v51[1];
    v53 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v54 = v52 & v53;
      *(_QWORD *)(*a2 + 8 * v54) = v40;
      for (i = (_QWORD *)*v51; *v51; i = (_QWORD *)*v51)
      {
        v56 = i[1] & v53;
        if (v56 == v54)
        {
          v51 = i;
        }
        else if (*(_QWORD *)(*a2 + 8 * v56))
        {
          *v51 = *i;
          v57 = 8 * v56;
          *i = **(_QWORD **)(*a2 + v57);
          **(_QWORD **)(*a2 + v57) = i;
        }
        else
        {
          *(_QWORD *)(*a2 + 8 * v56) = v51;
          v51 = i;
          v54 = v56;
        }
      }
      goto LABEL_107;
    }
    if (v52 >= prime)
      v52 %= prime;
    *(_QWORD *)(*a2 + 8 * v52) = v40;
    v61 = (_QWORD *)*v51;
    if (!*v51)
      goto LABEL_107;
    while (1)
    {
      v63 = v61[1];
      if (v63 >= prime)
        v63 %= prime;
      if (v63 != v52)
      {
        if (!*(_QWORD *)(*a2 + 8 * v63))
        {
          *(_QWORD *)(*a2 + 8 * v63) = v51;
          goto LABEL_112;
        }
        *v51 = *v61;
        v62 = 8 * v63;
        *v61 = **(_QWORD **)(*a2 + v62);
        **(_QWORD **)(*a2 + v62) = v61;
        v61 = v51;
      }
      v63 = v52;
LABEL_112:
      v51 = v61;
      v61 = (_QWORD *)*v61;
      v52 = v63;
      if (!v61)
        goto LABEL_107;
    }
  }
  if (v26.u32[0] < 2uLL)
  {
    v29 = v25 - 1;
    while (1)
    {
      v34 = *((_QWORD *)v28 + 1);
      if (v34 == v24)
      {
        v35 = v28[39];
        if ((v35 & 0x80u) == 0)
          v36 = v28[39];
        else
          v36 = *((_QWORD *)v28 + 3);
        if (v36 == v22)
        {
          if ((v35 & 0x80) != 0)
          {
            v68 = v29;
            v38 = memcmp(*((const void **)v28 + 2), v21, *((_QWORD *)v28 + 3));
            v29 = v68;
            if (!v38)
              goto LABEL_70;
          }
          else
          {
            if (!v28[39])
              goto LABEL_70;
            v37 = 0;
            while (v28[v37 + 16] == *((unsigned __int8 *)v21 + v37))
            {
              if (v35 == ++v37)
                goto LABEL_70;
            }
          }
        }
      }
      else if ((v34 & v29) != v11)
      {
        goto LABEL_71;
      }
      v28 = *(unsigned __int8 **)v28;
      if (!v28)
        goto LABEL_71;
    }
  }
  while (1)
  {
    v30 = *((_QWORD *)v28 + 1);
    if (v30 == v24)
      break;
    if (v30 >= v25)
      v30 %= v25;
    if (v30 != v11)
      goto LABEL_71;
LABEL_40:
    v28 = *(unsigned __int8 **)v28;
    if (!v28)
      goto LABEL_71;
  }
  v31 = v28[39];
  if ((v31 & 0x80u) == 0)
    v32 = v28[39];
  else
    v32 = *((_QWORD *)v28 + 3);
  if (v32 != v22)
    goto LABEL_40;
  if ((v31 & 0x80) == 0)
  {
    if (!v28[39])
      goto LABEL_70;
    v33 = 0;
    while (v28[v33 + 16] == *((unsigned __int8 *)v21 + v33))
    {
      if (v31 == ++v33)
        goto LABEL_70;
    }
    goto LABEL_40;
  }
  if (memcmp(*((const void **)v28 + 2), v21, *((_QWORD *)v28 + 3)))
    goto LABEL_40;
LABEL_70:
  v39 = v69;
LABEL_131:
  *((_QWORD *)v28 + 5) = v39;
  if (v20 < 0)
    operator delete((void *)__dst);
LABEL_18:

}

void sub_19F3158F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,md::DaVinciGroundSettings::Property>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,md::DaVinciGroundSettings::Property>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_19F3159D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19F315AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  void *v15;
  id *v16;

  objc_destroyWeak(v16);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19F316628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30,void *__p)
{
  void *v31;
  void *v32;
  uint64_t v33;
  void *v35;

  if (__p)
    operator delete(__p);
  v35 = *(void **)(v33 - 144);
  if (v35)
    operator delete(v35);

  _Unwind_Resume(a1);
}

void sub_19F316A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  void *v15;
  id *v16;
  void *v17;
  void *v18;

  v18 = v17;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_19F316BC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F316C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F316C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ggl::MetalRenderer::enableEnhancedCommandBufferErrors(ggl::MetalRenderer *this, int a2)
{
  NSObject *v4;
  const char *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (GEOGetGeoGLDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_40472);
  v4 = (id)GEOGetGeoGLDefaultLog_log;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = "false";
    if (a2)
      v5 = "true";
    v6 = 136315138;
    v7 = v5;
    _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_INFO, "Set EnhancedCommandBufferErrors: %s", (uint8_t *)&v6, 0xCu);
  }

  *((_BYTE *)this + 416) = a2;
}

void ggl::MetalRenderer::enableCommandQueueResetOnError(ggl::MetalRenderer *this, int a2)
{
  NSObject *v4;
  const char *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (GEOGetGeoGLDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_40472);
  v4 = (id)GEOGetGeoGLDefaultLog_log;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = "false";
    if (a2)
      v5 = "true";
    v6 = 136315138;
    v7 = v5;
    _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_INFO, "Set CommandQueueResetOnError: %s", (uint8_t *)&v6, 0xCu);
  }

  *((_BYTE *)this + 424) = a2;
}

void ggl::MetalRenderer::setCommandQueueResetAttempts(ggl::MetalRenderer *this, int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (GEOGetGeoGLDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetGeoGLDefaultLog_onceToken, &__block_literal_global_40472);
  v4 = (id)GEOGetGeoGLDefaultLog_log;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_INFO, "Set CommandQueueResetAttempts: %d", (uint8_t *)v5, 8u);
  }

  *((_DWORD *)this + 107) = a2;
}

void ggl::MetalRenderer::enablePerformanceHUD(ggl::MetalRenderer *this, int a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  const ggl::CommonLibrary *v27;
  _QWORD *v28;
  ggl::DebugConsole *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  const ggl::CommonLibrary *v33;
  _QWORD *v34;
  ggl::DebugConsole *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;

  if (*((unsigned __int8 *)this + 40) == a2)
    return;
  *((_BYTE *)this + 40) = a2;
  v3 = (uint64_t *)*((_QWORD *)this + 18);
  if (a2)
  {
    if (!v3)
    {
      v4 = operator new();
      v5 = *((_QWORD *)this + 12);
      v6 = *((_QWORD *)this + 17);
      v7 = *((_QWORD *)this + 18);
      v8 = *(_QWORD *)(v6 + 64);
      LOBYTE(v6) = *(_BYTE *)(v6 + 72);
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = v5;
      *(_QWORD *)(v4 + 24) = v8;
      *(_BYTE *)(v4 + 32) = v6;
      *((_QWORD *)this + 18) = v4;
      if (!v7)
      {
        v3 = (uint64_t *)v4;
        if (*(_QWORD *)v4)
        {
LABEL_13:
          v12 = *v3;
          v13 = (std::__shared_weak_count *)v3[1];
          if (v13)
          {
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldxr(p_shared_owners);
            while (__stxr(v15 + 1, p_shared_owners));
            *(_QWORD *)&v39 = v12;
            *((_QWORD *)&v39 + 1) = v13;
            do
              v16 = __ldxr(p_shared_owners);
            while (__stxr(v16 + 1, p_shared_owners));
            ggl::Renderer::addDebugRenderer((uint64_t)this, &v39);
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
            do
              v18 = __ldaxr(p_shared_owners);
            while (__stlxr(v18 - 1, p_shared_owners));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          else
          {
            v39 = (unint64_t)v12;
            ggl::Renderer::addDebugRenderer((uint64_t)this, &v39);
          }
          return;
        }
LABEL_46:
        v33 = (const ggl::CommonLibrary *)v3[2];
        v34 = operator new(0xB0uLL);
        v34[1] = 0;
        v34[2] = 0;
        *v34 = &off_1E42DEB90;
        v35 = ggl::DebugConsole::DebugConsole((ggl::DebugConsole *)(v34 + 3), v33);
        v36 = (std::__shared_weak_count *)v3[1];
        *v3 = (uint64_t)v35;
        v3[1] = (uint64_t)v34;
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        goto LABEL_13;
      }
      v9 = *(std::__shared_weak_count **)(v7 + 8);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      MEMORY[0x1A1AF4E00](v7, 0x1060C4055DDAB7ALL);
      v3 = (uint64_t *)*((_QWORD *)this + 18);
    }
    if (*v3)
      goto LABEL_13;
    goto LABEL_46;
  }
  if (!*v3)
  {
    v27 = (const ggl::CommonLibrary *)v3[2];
    v28 = operator new(0xB0uLL);
    v28[1] = 0;
    v28[2] = 0;
    *v28 = &off_1E42DEB90;
    v29 = ggl::DebugConsole::DebugConsole((ggl::DebugConsole *)(v28 + 3), v27);
    v30 = (std::__shared_weak_count *)v3[1];
    *v3 = (uint64_t)v29;
    v3[1] = (uint64_t)v28;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
  v19 = *v3;
  v20 = (std::__shared_weak_count *)v3[1];
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    do
      v23 = __ldxr(v21);
    while (__stxr(v23 + 1, v21));
    ggl::Renderer::removeDebugRenderer((uint64_t)this, v19);
    do
      v24 = __ldaxr(v21);
    while (__stlxr(v24 - 1, v21));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    v25 = (unint64_t *)&v20->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  else
  {
    ggl::Renderer::removeDebugRenderer((uint64_t)this, v19);
  }
}

void md::StandardPassList::~StandardPassList(md::StandardPassList *this)
{
  md::StandardPassList::~StandardPassList(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  ggl::RenderQueue *v24;
  md::FrameGraph *v25;

  *(_QWORD *)this = &off_1E4292260;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 41);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 41);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v18)
    goto LABEL_33;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    v21 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v21)
      goto LABEL_39;
  }
  else
  {
LABEL_33:
    v21 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v21)
      goto LABEL_39;
  }
  v22 = (unint64_t *)&v21->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
LABEL_39:
  *(_QWORD *)this = off_1E42AF5D0;
  v24 = (ggl::RenderQueue *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v24)
  {
    ggl::RenderQueue::~RenderQueue(v24);
    MEMORY[0x1A1AF4E00]();
  }
  v25 = (md::FrameGraph *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v25)
  {
    md::FrameGraph::~FrameGraph(v25);
    MEMORY[0x1A1AF4E00]();
  }
}

void ggl::DaVinci::ScreenMesh::~ScreenMesh(ggl::DaVinci::ScreenMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::MetalDevice::createRenderer(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void **v16;
  unint64_t *v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  unint64_t *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  __int128 v50;
  char *v51;
  char *v52;
  void *v53;
  void *v54;
  char *v55;
  char *v56;
  void *v57;
  void *v58;
  char *v59;
  int i;
  char *v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  int *v69;
  unint64_t v70;
  char *v71;
  int v72;
  uint64_t v73;
  _OWORD *v74;
  char *v75;
  uint64_t v76;
  __int128 v77;
  id v78;
  uint64_t v79;
  void *v80;
  _OWORD *v81;
  ggl::MetalBindingManager *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 v85;
  unsigned __int8 v86;
  unsigned __int8 v87;
  unsigned __int8 v88;
  std::__shared_weak_count *v89;
  ggl::ClearCache *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v97;
  geo::read_write_lock *v98;
  const char *v99;
  malloc_zone_t *zone;
  uint64_t v101;
  geo::read_write_lock *v102;
  const char *v103;
  malloc_zone_t *v104;
  uint64_t v105;
  geo::read_write_lock *v106;
  const char *v107;
  malloc_zone_t *v108;
  uint64_t v109;
  geo::read_write_lock *v110;
  const char *v111;
  malloc_zone_t *v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  _QWORD *v116;
  timeval v117;

  v7 = operator new();
  v8 = ggl::Renderer::Renderer(v7, a4, a1, a3);
  *(_QWORD *)v8 = &off_1E42B6670;
  *(_QWORD *)(v8 + 144) = 0;
  *(_QWORD *)(v8 + 152) = 0;
  *(_QWORD *)(v8 + 136) = a1;
  *(_WORD *)(v8 + 416) = 0;
  *(_DWORD *)(v8 + 420) = 0;
  *(_BYTE *)(v8 + 424) = 0;
  *(_DWORD *)(v8 + 428) = 60;
  *(_QWORD *)(v8 + 432) = 0;
  gettimeofday(&v117, 0);
  *(double *)(v7 + 160) = (double)v117.tv_sec + (double)v117.tv_usec * 0.000001;
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 200) = 0u;
  *(_OWORD *)(v7 + 216) = 0u;
  *(_OWORD *)(v7 + 232) = 0u;
  *(_OWORD *)(v7 + 248) = 0u;
  *(_QWORD *)(v7 + 408) = 0;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 264) = 0u;
  *(_OWORD *)(v7 + 280) = 0u;
  *(_OWORD *)(v7 + 296) = 0u;
  *(_OWORD *)(v7 + 312) = 0u;
  *(_OWORD *)(v7 + 328) = 0u;
  *(_OWORD *)(v7 + 344) = 0u;
  *(_OWORD *)(v7 + 360) = 0u;
  *(_OWORD *)(v7 + 376) = 0u;
  *(_OWORD *)(v7 + 392) = 0u;
  v114 = v7;
  v9 = operator new();
  v10 = v9;
  v11 = *(_QWORD *)(v7 + 136);
  v13 = *a3;
  v12 = (std::__shared_weak_count *)a3[1];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  *(_QWORD *)v9 = &off_1E42BA7E0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = v11;
  *(_OWORD *)(v9 + 24) = 0u;
  v16 = (void **)(v9 + 24);
  *(_OWORD *)(v9 + 40) = 0u;
  *(_QWORD *)(v9 + 64) = dispatch_semaphore_create(3);
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *(_OWORD *)(v10 + 120) = 0u;
  *(_QWORD *)(v10 + 136) = v13;
  *(_QWORD *)(v10 + 144) = v12;
  if (v12)
  {
    v17 = (unint64_t *)&v12->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_QWORD *)(v10 + 184) = 0;
  *(_OWORD *)(v10 + 168) = 0uLL;
  *(_OWORD *)(v10 + 152) = 0uLL;
  v19 = *(id *)(*(_QWORD *)(v10 + 16) + 104);
  v113 = v12;
  v20 = objc_msgSend(v19, "newFence");
  v21 = *v16;
  *v16 = (void *)v20;

  v22 = operator new();
  *(_QWORD *)(v22 + 48) = 0;
  *(_OWORD *)(v22 + 16) = 0u;
  *(_OWORD *)(v22 + 32) = 0u;
  *(_OWORD *)v22 = 0u;
  v23 = *(_QWORD **)(v10 + 32);
  *(_QWORD *)(v10 + 32) = v22;
  if (v23)
    std::default_delete<ggl::RenderResourceFences>::operator()[abi:nn180100](v23);
  v24 = operator new(0x60uLL);
  v24[1] = 0;
  v25 = v24 + 1;
  v24[2] = 0;
  *v24 = &off_1E42DEFB8;
  v26 = v24 + 3;
  v27 = ggl::TextureData2D::TextureData2D((uint64_t)(v24 + 3), 1, 1, 1u, 12, 1);
  v116 = v24;
  *(_BYTE *)(*(uint64_t (**)(_QWORD *, _QWORD))(v24[3] + 16))(v27, 0) = -1;
  *(_BYTE *)((*(uint64_t (**)(_QWORD *, _QWORD))(*v26 + 16))(v26, 0) + 1) = 105;
  *(_BYTE *)((*(uint64_t (**)(_QWORD *, _QWORD))(*v26 + 16))(v26, 0) + 2) = -76;
  *(_BYTE *)((*(uint64_t (**)(_QWORD *, _QWORD))(*v26 + 16))(v26, 0) + 3) = -1;
  v28 = (char *)operator new(0x58uLL);
  *((_QWORD *)v28 + 1) = 0;
  v29 = (unint64_t *)(v28 + 8);
  *((_QWORD *)v28 + 2) = 0;
  *(_QWORD *)v28 = &off_1E42DED18;
  *((_QWORD *)v28 + 3) = &off_1E42B63B0;
  v30 = v28 + 24;
  *((_QWORD *)v28 + 5) = 0;
  *((_QWORD *)v28 + 6) = 0;
  *((_QWORD *)v28 + 4) = 0;
  *((_DWORD *)v28 + 14) = 0;
  *(_QWORD *)&v31 = 0x100000001;
  *((_QWORD *)&v31 + 1) = 0x100000001;
  *(_OWORD *)(v28 + 60) = v31;
  *(_QWORD *)(v28 + 76) = 0x100000001;
  v115 = (std::__shared_weak_count *)v28;
  *((_DWORD *)v28 + 21) = 0;
  v32 = operator new();
  *(_QWORD *)(v32 + 16) = 0;
  *(_QWORD *)(v32 + 24) = 0;
  *(_DWORD *)(v32 + 32) = 0;
  *(_QWORD *)(v32 + 56) = 0x100000001;
  v34 = *((_DWORD *)v116 + 8);
  v33 = *((_DWORD *)v116 + 9);
  *(_DWORD *)(v32 + 64) = 0;
  *(_DWORD *)(v32 + 68) = v33;
  *(_QWORD *)(v32 + 72) = 0x100000001;
  *(_QWORD *)(v32 + 88) = 0;
  *(_QWORD *)(v32 + 96) = 0;
  *(_QWORD *)v32 = &off_1E42BE438;
  *(_QWORD *)(v32 + 8) = 0;
  *(_QWORD *)(v32 + 40) = &unk_1E42BE458;
  *(_QWORD *)(v32 + 48) = "";
  *(_DWORD *)(v32 + 104) = v34;
  *(_QWORD *)(v32 + 112) = v26;
  *(_QWORD *)(v32 + 120) = v116;
  do
    v35 = __ldxr(v25);
  while (__stxr(v35 + 1, v25));
  *(_WORD *)(v32 + 128) = 0;
  *(_BYTE *)(v32 + 130) = 1;
  *(_QWORD *)(v32 + 136) = v30;
  *(_QWORD *)(v32 + 144) = v115;
  do
    v36 = __ldxr(v29);
  while (__stxr(v36 + 1, v29));
  *(_QWORD *)(v32 + 80) = v116[5];
  *(_QWORD *)(v10 + 72) = v32;
  v37 = *(char **)(v10 + 112);
  v38 = *(char **)(v10 + 120);
  v39 = (char *)(v38 - v37);
  v40 = 0xAAAAAAAAAAAAAAABLL * ((v38 - v37) >> 3);
  if (v40 > 2)
  {
    if (v39 != (char *)72)
    {
      v55 = v37 + 72;
      if (v38 != v55)
      {
        v56 = *(char **)(v10 + 120);
        do
        {
          v58 = (void *)*((_QWORD *)v56 - 3);
          v56 -= 24;
          v57 = v58;
          if (v58)
          {
            *((_QWORD *)v38 - 2) = v57;
            operator delete(v57);
          }
          v38 = v56;
        }
        while (v56 != v55);
      }
      *(_QWORD *)(v10 + 120) = v55;
    }
  }
  else
  {
    v41 = *(_QWORD *)(v10 + 128);
    if (0xAAAAAAAAAAAAAAABLL * ((v41 - (uint64_t)v38) >> 3) >= 3 - v40)
    {
      bzero(*(void **)(v10 + 120), 24 * ((48 - (uint64_t)v39) / 0x18uLL) + 24);
      *(_QWORD *)(v10 + 120) = &v38[24 * ((48 - (uint64_t)v39) / 0x18uLL) + 24];
    }
    else
    {
      v42 = 0xAAAAAAAAAAAAAAABLL * ((v41 - (uint64_t)v37) >> 3);
      v43 = 0x5555555555555556 * ((v41 - (uint64_t)v37) >> 3);
      if (v43 <= 3)
        v43 = 3;
      if (v42 >= 0x555555555555555)
        v44 = 0xAAAAAAAAAAAAAAALL;
      else
        v44 = v43;
      if (v44 > 0xAAAAAAAAAAAAAAALL)
LABEL_92:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v45 = (char *)operator new(24 * v44);
      v46 = &v45[8 * ((v38 - v37) >> 3)];
      v47 = &v45[24 * v44];
      bzero(v46, 24 * ((48 - (uint64_t)v39) / 0x18uLL) + 24);
      v48 = &v46[24 * ((48 - (uint64_t)v39) / 0x18uLL) + 24];
      if (v38 == v37)
      {
        *(_QWORD *)(v10 + 112) = v46;
        *(_QWORD *)(v10 + 120) = v48;
        *(_QWORD *)(v10 + 128) = v47;
      }
      else
      {
        do
        {
          v49 = v46;
          *((_QWORD *)v46 - 2) = 0;
          *((_QWORD *)v46 - 1) = 0;
          v50 = *(_OWORD *)(v38 - 24);
          v38 -= 24;
          *(_OWORD *)(v46 - 24) = v50;
          v46 -= 24;
          *((_QWORD *)v49 - 1) = *((_QWORD *)v38 + 2);
          *(_QWORD *)v38 = 0;
          *((_QWORD *)v38 + 1) = 0;
          *((_QWORD *)v38 + 2) = 0;
        }
        while (v38 != v37);
        v38 = *(char **)(v10 + 112);
        v51 = *(char **)(v10 + 120);
        *(_QWORD *)(v10 + 112) = v46;
        *(_QWORD *)(v10 + 120) = v48;
        *(_QWORD *)(v10 + 128) = v47;
        if (v51 != v38)
        {
          v52 = v51;
          do
          {
            v54 = (void *)*((_QWORD *)v52 - 3);
            v52 -= 24;
            v53 = v54;
            if (v54)
            {
              *((_QWORD *)v51 - 2) = v53;
              operator delete(v53);
            }
            v51 = v52;
          }
          while (v52 != v38);
        }
      }
      if (v38)
        operator delete(v38);
    }
  }
  v59 = *(char **)(v10 + 96);
  for (i = 1; i != 1001; ++i)
  {
    v62 = *(_QWORD *)(v10 + 104);
    if ((unint64_t)v59 < v62)
    {
      *(_DWORD *)v59 = i;
      v61 = v59 + 4;
      goto LABEL_41;
    }
    v63 = *(char **)(v10 + 88);
    v64 = (v59 - v63) >> 2;
    v65 = v64 + 1;
    if ((unint64_t)(v64 + 1) >> 62)
      abort();
    v66 = v62 - (_QWORD)v63;
    if (v66 >> 1 > v65)
      v65 = v66 >> 1;
    if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
      v67 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v67 = v65;
    if (v67)
    {
      if (v67 >> 62)
        goto LABEL_92;
      v68 = operator new(4 * v67);
    }
    else
    {
      v68 = 0;
    }
    v69 = (int *)&v68[4 * v64];
    *v69 = i;
    v61 = (char *)(v69 + 1);
    if (v59 != v63)
    {
      v70 = v59 - 4 - v63;
      if (v70 < 0xBC)
      {
        v71 = v59;
        goto LABEL_56;
      }
      if (&v68[v59 - v63 - 4 - (v70 & 0xFFFFFFFFFFFFFFFCLL)] > &v68[v59 - v63 - 4])
      {
        v71 = v59;
        do
        {
LABEL_56:
          v72 = *((_DWORD *)v71 - 1);
          v71 -= 4;
          *--v69 = v72;
        }
        while (v71 != v63);
        goto LABEL_57;
      }
      if (&v59[-(v70 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v59 - 4)
      {
        v71 = v59;
        goto LABEL_56;
      }
      if ((unint64_t)(v63 - v68) < 0x20)
      {
        v71 = v59;
        goto LABEL_56;
      }
      v73 = (v70 >> 2) + 1;
      v71 = &v59[-4 * (v73 & 0x7FFFFFFFFFFFFFF8)];
      v74 = &v68[4 * v64 - 16];
      v75 = v59 - 16;
      v76 = v73 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v77 = *(_OWORD *)v75;
        *(v74 - 1) = *((_OWORD *)v75 - 1);
        *v74 = v77;
        v74 -= 2;
        v75 -= 32;
        v76 -= 8;
      }
      while (v76);
      v69 -= v73 & 0x7FFFFFFFFFFFFFF8;
      if (v73 != (v73 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_56;
    }
LABEL_57:
    *(_QWORD *)(v10 + 88) = v69;
    *(_QWORD *)(v10 + 96) = v61;
    *(_QWORD *)(v10 + 104) = &v68[4 * v67];
    if (v63)
      operator delete(v63);
LABEL_41:
    *(_QWORD *)(v10 + 96) = v61;
    v59 = v61;
  }
  v78 = *(id *)(*(_QWORD *)(v10 + 16) + 104);
  v79 = objc_msgSend(v78, "newBufferWithLength:options:", 8008, 0);
  v80 = *(void **)(v10 + 80);
  *(_QWORD *)(v10 + 80) = v79;

  v81 = (_OWORD *)operator new();
  v81[17] = 0u;
  v81[18] = 0u;
  v81[15] = 0u;
  v81[16] = 0u;
  v81[13] = 0u;
  v81[14] = 0u;
  v81[11] = 0u;
  v81[12] = 0u;
  v81[9] = 0u;
  v81[10] = 0u;
  v81[7] = 0u;
  v81[8] = 0u;
  v81[5] = 0u;
  v81[6] = 0u;
  v81[3] = 0u;
  v81[4] = 0u;
  v81[1] = 0u;
  v81[2] = 0u;
  *v81 = 0u;
  v82 = *(ggl::MetalBindingManager **)(v10 + 8);
  *(_QWORD *)(v10 + 8) = v81;
  if (v82)
  {
    ggl::MetalBindingManager::~MetalBindingManager(v82);
    MEMORY[0x1A1AF4E00]();
  }
  v83 = operator new();
  v84 = *(_QWORD *)(v10 + 136);
  *(_QWORD *)(v83 + 8) = 0;
  *(_QWORD *)(v83 + 16) = 0;
  *(_QWORD *)v83 = 0;
  {
    v97 = operator new();
    *(_QWORD *)(v97 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v97 + 24) = "GeoGL";
    *(_OWORD *)(v97 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v97 = &off_1E42B5668;
    *(_QWORD *)(v97 + 8) = "GeoGL";
    *(_OWORD *)(v97 + 72) = 0u;
    *(_OWORD *)(v97 + 88) = 0u;
    *(_OWORD *)(v97 + 104) = 0u;
    *(_OWORD *)(v97 + 120) = 0u;
    *(_OWORD *)(v97 + 136) = 0u;
    *(_OWORD *)(v97 + 152) = 0u;
    *(_OWORD *)(v97 + 168) = 0u;
    *(_OWORD *)(v97 + 184) = 0u;
    *(_OWORD *)(v97 + 200) = 0u;
    *(_OWORD *)(v97 + 216) = 0u;
    *(_OWORD *)(v97 + 232) = 0u;
    *(_QWORD *)(v97 + 248) = 0;
    *(_OWORD *)(v97 + 56) = 0u;
    v98 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v97 + 56), 0);
    if ((_DWORD)v98)
      geo::read_write_lock::logFailure(v98, (uint64_t)"initialization", v99);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v97 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v97 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v97;
  }
  *(_QWORD *)(v83 + 24) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v83 + 32) = 0;
  *(_QWORD *)(v83 + 40) = 0;
  *(_QWORD *)(v83 + 48) = 0;
  {
    v101 = operator new();
    *(_QWORD *)(v101 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v101 + 24) = "GeoGL";
    *(_OWORD *)(v101 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v101 = &off_1E42B5668;
    *(_QWORD *)(v101 + 8) = "GeoGL";
    *(_OWORD *)(v101 + 72) = 0u;
    *(_OWORD *)(v101 + 88) = 0u;
    *(_OWORD *)(v101 + 104) = 0u;
    *(_OWORD *)(v101 + 120) = 0u;
    *(_OWORD *)(v101 + 136) = 0u;
    *(_OWORD *)(v101 + 152) = 0u;
    *(_OWORD *)(v101 + 168) = 0u;
    *(_OWORD *)(v101 + 184) = 0u;
    *(_OWORD *)(v101 + 200) = 0u;
    *(_OWORD *)(v101 + 216) = 0u;
    *(_OWORD *)(v101 + 232) = 0u;
    *(_QWORD *)(v101 + 248) = 0;
    *(_OWORD *)(v101 + 56) = 0u;
    v102 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v101 + 56), 0);
    if ((_DWORD)v102)
      geo::read_write_lock::logFailure(v102, (uint64_t)"initialization", v103);
    v104 = malloc_create_zone(0, 0);
    *(_QWORD *)(v101 + 48) = v104;
    malloc_set_zone_name(v104, "GeoGL");
    *(_QWORD *)(v101 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v101;
  }
  *(_QWORD *)(v83 + 56) = ggl::Allocator::instance(void)::alloc;
  *(_OWORD *)(v83 + 64) = 0u;
  *(_OWORD *)(v83 + 80) = 0u;
  {
    v105 = operator new();
    *(_QWORD *)(v105 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v105 + 24) = "GeoGL";
    *(_OWORD *)(v105 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v105 = &off_1E42B5668;
    *(_QWORD *)(v105 + 8) = "GeoGL";
    *(_OWORD *)(v105 + 72) = 0u;
    *(_OWORD *)(v105 + 88) = 0u;
    *(_OWORD *)(v105 + 104) = 0u;
    *(_OWORD *)(v105 + 120) = 0u;
    *(_OWORD *)(v105 + 136) = 0u;
    *(_OWORD *)(v105 + 152) = 0u;
    *(_OWORD *)(v105 + 168) = 0u;
    *(_OWORD *)(v105 + 184) = 0u;
    *(_OWORD *)(v105 + 200) = 0u;
    *(_OWORD *)(v105 + 216) = 0u;
    *(_OWORD *)(v105 + 232) = 0u;
    *(_QWORD *)(v105 + 248) = 0;
    *(_OWORD *)(v105 + 56) = 0u;
    v106 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v105 + 56), 0);
    if ((_DWORD)v106)
      geo::read_write_lock::logFailure(v106, (uint64_t)"initialization", v107);
    v108 = malloc_create_zone(0, 0);
    *(_QWORD *)(v105 + 48) = v108;
    malloc_set_zone_name(v108, "GeoGL");
    *(_QWORD *)(v105 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v105;
  }
  *(_QWORD *)(v83 + 96) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v83 + 104) = 0;
  *(_QWORD *)(v83 + 112) = 0;
  *(_QWORD *)(v83 + 120) = 0;
  v89 = (std::__shared_weak_count *)v116;
  {
    v109 = operator new();
    *(_QWORD *)(v109 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v109 + 24) = "GeoGL";
    *(_OWORD *)(v109 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v109 = &off_1E42B5668;
    *(_QWORD *)(v109 + 8) = "GeoGL";
    *(_OWORD *)(v109 + 72) = 0u;
    *(_OWORD *)(v109 + 88) = 0u;
    *(_OWORD *)(v109 + 104) = 0u;
    *(_OWORD *)(v109 + 120) = 0u;
    *(_OWORD *)(v109 + 136) = 0u;
    *(_OWORD *)(v109 + 152) = 0u;
    *(_OWORD *)(v109 + 168) = 0u;
    *(_OWORD *)(v109 + 184) = 0u;
    *(_OWORD *)(v109 + 200) = 0u;
    *(_OWORD *)(v109 + 216) = 0u;
    *(_OWORD *)(v109 + 232) = 0u;
    *(_QWORD *)(v109 + 248) = 0;
    *(_OWORD *)(v109 + 56) = 0u;
    v110 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v109 + 56), 0);
    if ((_DWORD)v110)
      geo::read_write_lock::logFailure(v110, (uint64_t)"initialization", v111);
    v112 = malloc_create_zone(0, 0);
    *(_QWORD *)(v109 + 48) = v112;
    malloc_set_zone_name(v112, "GeoGL");
    *(_QWORD *)(v109 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v109;
    v89 = (std::__shared_weak_count *)v116;
  }
  *(_QWORD *)(v83 + 128) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(v83 + 136) = v84;
  v90 = *(ggl::ClearCache **)(v10 + 168);
  *(_QWORD *)(v10 + 168) = v83;
  if (v90)
  {
    ggl::ClearCache::~ClearCache(v90);
    MEMORY[0x1A1AF4E00]();
  }
  do
    v91 = __ldaxr(v29);
  while (__stlxr(v91 - 1, v29));
  if (!v91)
  {
    ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
    std::__shared_weak_count::__release_weak(v115);
  }
  do
    v92 = __ldaxr(v25);
  while (__stlxr(v92 - 1, v25));
  if (!v92)
  {
    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
    std::__shared_weak_count::__release_weak(v89);
  }
  v93 = *(_QWORD *)(v114 + 432);
  *(_QWORD *)(v114 + 432) = v10;
  if (v93)
    (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
  if (v113)
  {
    v94 = (unint64_t *)&v113->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  return v114;
}

void sub_19F31821C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, ggl::Renderer *a10, std::__shared_weak_count *a11, std::__shared_weak_count *a12)
{
  uint64_t v12;
  void *v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  ggl::ClearCache *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  ggl::MetalDeviceContextPass *v36;
  id *v37;
  _QWORD *v38;
  ggl::MetalBindingManager *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;

  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
    std::__shared_weak_count::__release_weak(a11);
  }
  do
    v18 = __ldaxr(v14);
  while (__stlxr(v18 - 1, v14));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
    std::__shared_weak_count::__release_weak(a12);
  }
  v19 = *(std::__shared_weak_count **)(v12 + 184);
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(ggl::ClearCache **)(v12 + 168);
  *(_QWORD *)(v12 + 168) = 0;
  if (v22)
  {
    ggl::ClearCache::~ClearCache(v22);
    MEMORY[0x1A1AF4E00]();
  }
  v23 = *(std::__shared_weak_count **)(v12 + 160);
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = *(std::__shared_weak_count **)(v12 + 144);
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = *(_QWORD *)(v12 + 112);
  if (v29)
  {
    v30 = *(_QWORD *)(v12 + 120);
    v31 = *(void **)(v12 + 112);
    if (v30 != v29)
    {
      v32 = *(_QWORD *)(v12 + 120);
      do
      {
        v34 = *(void **)(v32 - 24);
        v32 -= 24;
        v33 = v34;
        if (v34)
        {
          *(_QWORD *)(v30 - 16) = v33;
          operator delete(v33);
        }
        v30 = v32;
      }
      while (v32 != v29);
      v31 = *(void **)(v12 + 112);
    }
    *(_QWORD *)(v12 + 120) = v29;
    operator delete(v31);
  }
  v35 = *(void **)(v12 + 88);
  if (v35)
  {
    *(_QWORD *)(v12 + 96) = v35;
    operator delete(v35);
  }

  v36 = *(ggl::MetalDeviceContextPass **)(v12 + 48);
  *(_QWORD *)(v12 + 48) = 0;
  if (v36)
  {
    ggl::MetalDeviceContextPass::~MetalDeviceContextPass(v36);
    MEMORY[0x1A1AF4E00]();
  }
  v37 = *(id **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = 0;
  if (v37)
  {
    ggl::MetalDeviceContextFrame::~MetalDeviceContextFrame(v37);
    MEMORY[0x1A1AF4E00]();
  }
  v38 = *(_QWORD **)(v12 + 32);
  *(_QWORD *)(v12 + 32) = 0;
  if (v38)
    std::default_delete<ggl::RenderResourceFences>::operator()[abi:nn180100](v38);

  v39 = *(ggl::MetalBindingManager **)(v12 + 8);
  *(_QWORD *)(v12 + 8) = 0;
  if (v39)
  {
    ggl::MetalBindingManager::~MetalBindingManager(v39);
    MEMORY[0x1A1AF4E00]();
  }
  if (a9)
  {
    v40 = (unint64_t *)&a9->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))a9->__on_zero_shared)(a9);
      std::__shared_weak_count::__release_weak(a9);
    }
  }
  MEMORY[0x1A1AF4E00](v12, 0x10B1C40727A76F6);
  v42 = *((_QWORD *)a10 + 54);
  *((_QWORD *)a10 + 54) = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = *((_QWORD *)a10 + 18);
  *((_QWORD *)a10 + 18) = 0;
  if (v43)
  {
    v44 = *(std::__shared_weak_count **)(v43 + 8);
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    MEMORY[0x1A1AF4E00](v43, 0x1060C4055DDAB7ALL);
  }
  ggl::Renderer::~Renderer(a10);
  MEMORY[0x1A1AF4E00]();
  _Unwind_Resume(a1);
}

uint64_t ggl::Renderer::Renderer(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  ggl::RenderQueue *v11;
  ggl::RenderQueue *v12;
  ggl::CommandBuffer *v13;
  double v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  __int128 v21;
  uint64_t v22;
  int shared_owners_high;
  int shared_owners;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  geo::read_write_lock *v31;
  const char *v32;
  malloc_zone_t *zone;

  *(_QWORD *)a1 = off_1E42BCC90;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = 1065353216;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  {
    v30 = operator new();
    *(_QWORD *)(v30 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v30 + 24) = "GeoGL";
    *(_OWORD *)(v30 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v30 = &off_1E42B5668;
    *(_QWORD *)(v30 + 8) = "GeoGL";
    *(_OWORD *)(v30 + 72) = 0u;
    *(_OWORD *)(v30 + 88) = 0u;
    *(_OWORD *)(v30 + 104) = 0u;
    *(_OWORD *)(v30 + 120) = 0u;
    *(_OWORD *)(v30 + 136) = 0u;
    *(_OWORD *)(v30 + 152) = 0u;
    *(_OWORD *)(v30 + 168) = 0u;
    *(_OWORD *)(v30 + 184) = 0u;
    *(_OWORD *)(v30 + 200) = 0u;
    *(_OWORD *)(v30 + 216) = 0u;
    *(_OWORD *)(v30 + 232) = 0u;
    *(_QWORD *)(v30 + 248) = 0;
    *(_OWORD *)(v30 + 56) = 0u;
    v31 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v30 + 56), 0);
    if ((_DWORD)v31)
      geo::read_write_lock::logFailure(v31, (uint64_t)"initialization", v32);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v30 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v30 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v30;
  }
  *(_QWORD *)(a1 + 80) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 88) = 0;
  v7 = a4[1];
  *(_QWORD *)(a1 + 96) = *a4;
  *(_QWORD *)(a1 + 104) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = operator new();
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 112) = v10;
  *(_QWORD *)(a1 + 128) = 0;
  v11 = (ggl::RenderQueue *)operator new();
  ggl::RenderQueue::RenderQueue(v11, 1);
  v12 = *(ggl::RenderQueue **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v11;
  if (v12)
  {
    ggl::RenderQueue::~RenderQueue(v12);
    MEMORY[0x1A1AF4E00]();
  }
  v13 = (ggl::CommandBuffer *)operator new();
  v14 = ggl::CommandBuffer::CommandBuffer(v13, 0, "Debug");
  v15 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v13;
  if (v15)
  {
    (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 8))(v15, v14);
    v13 = *(ggl::CommandBuffer **)(a1 + 128);
  }
  ggl::RenderQueue::setBufferForLayer(*(_QWORD *)(a1 + 88), 0, v13);
  v16 = (std::__shared_weak_count *)operator new(0x60uLL);
  v16->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  v16->__shared_weak_owners_ = 0;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
  v18 = ggl::TextureData2D::TextureData2D((uint64_t)&v16[1], 1, 1, 1u, 12, 1);
  *(_BYTE *)((uint64_t (*)(_QWORD *, _QWORD))v16[1].__on_zero_shared)(v18, 0) = -1;
  *(_BYTE *)(((uint64_t (*)(std::__shared_weak_count *, _QWORD))v16[1].__on_zero_shared)(&v16[1], 0) + 1) = 105;
  *(_BYTE *)(((uint64_t (*)(std::__shared_weak_count *, _QWORD))v16[1].__on_zero_shared)(&v16[1], 0) + 2) = -76;
  *(_BYTE *)(((uint64_t (*)(std::__shared_weak_count *, _QWORD))v16[1].__on_zero_shared)(&v16[1], 0) + 3) = -1;
  v19 = (std::__shared_weak_count *)operator new(0x58uLL);
  v19->__shared_owners_ = 0;
  v20 = (unint64_t *)&v19->__shared_owners_;
  v19->__shared_weak_owners_ = 0;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
  v19[1].__shared_weak_owners_ = 0;
  v19[2].__vftable = 0;
  v19[1].__shared_owners_ = 0;
  LODWORD(v19[2].__shared_owners_) = 0;
  *(_QWORD *)&v21 = 0x100000001;
  *((_QWORD *)&v21 + 1) = 0x100000001;
  *(_OWORD *)((char *)&v19[2].__shared_owners_ + 4) = v21;
  *(std::__shared_weak_count_vtbl **)((char *)&v19[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000001;
  HIDWORD(v19[3].__shared_owners_) = 0;
  v22 = operator new();
  *(_QWORD *)(v22 + 16) = 0;
  *(_QWORD *)(v22 + 24) = 0;
  *(_DWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 56) = 0x100000001;
  shared_owners = v16[1].__shared_owners_;
  shared_owners_high = HIDWORD(v16[1].__shared_owners_);
  *(_DWORD *)(v22 + 64) = 0;
  *(_DWORD *)(v22 + 68) = shared_owners_high;
  *(_QWORD *)(v22 + 72) = 0x100000001;
  *(_QWORD *)(v22 + 88) = 0;
  *(_QWORD *)(v22 + 96) = 0;
  *(_QWORD *)v22 = &off_1E42BE438;
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 40) = &unk_1E42BE458;
  *(_QWORD *)(v22 + 48) = "";
  *(_DWORD *)(v22 + 104) = shared_owners;
  *(_QWORD *)(v22 + 112) = v16 + 1;
  *(_QWORD *)(v22 + 120) = v16;
  do
    v25 = __ldxr(p_shared_owners);
  while (__stxr(v25 + 1, p_shared_owners));
  *(_WORD *)(v22 + 128) = 0;
  *(_BYTE *)(v22 + 130) = 1;
  *(_QWORD *)(v22 + 136) = v19 + 1;
  *(_QWORD *)(v22 + 144) = v19;
  do
    v26 = __ldxr(v20);
  while (__stxr(v26 + 1, v20));
  *(_QWORD *)(v22 + 80) = v16[1].__shared_weak_owners_;
  *(_QWORD *)(a1 + 120) = v22;
  do
    v27 = __ldaxr(v20);
  while (__stlxr(v27 - 1, v20));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  do
    v28 = __ldaxr(p_shared_owners);
  while (__stlxr(v28 - 1, p_shared_owners));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  return a1;
}

md::PassList *md::PassList::PassList(md::PassList *this, md::FrameGraphResourceRegistry *a2)
{
  ggl::RenderQueue **v3;
  ggl::RenderQueue *v4;
  ggl::RenderQueue *v5;
  ggl::RenderQueue *v6;
  md::FrameGraph *v7;
  uint64_t v9;
  _OWORD v10[5];
  int v11;
  __int128 v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  *(_QWORD *)this = off_1E42AF5D0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v3 = (ggl::RenderQueue **)((char *)this + 16);
  *((_QWORD *)this + 3) = a2;
  v4 = (ggl::RenderQueue *)operator new();
  v5 = ggl::RenderQueue::RenderQueue(v4, 0);
  v6 = *v3;
  *v3 = v5;
  if (v6)
  {
    ggl::RenderQueue::~RenderQueue(v6);
    MEMORY[0x1A1AF4E00]();
  }
  memset(v10, 0, sizeof(v10));
  v11 = 1065353216;
  v12 = 0u;
  v13 = 0u;
  v14 = 1065353216;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v18 = 0;
  md::FrameGraphBuilder::build((md::FrameGraphBuilder *)&v9, (md::FrameGraphResourceRegistry *)v10, *((float **)this + 3));
  v7 = (md::FrameGraph *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v9;
  if (v7)
  {
    md::FrameGraph::~FrameGraph(v7);
    MEMORY[0x1A1AF4E00]();
  }
  md::FrameGraphBuilder::~FrameGraphBuilder((md::FrameGraphBuilder *)v10);
  return this;
}

void sub_19F318AEC(_Unwind_Exception *a1)
{
  ggl::RenderQueue **v1;
  md::FrameGraph **v2;

  std::unique_ptr<ggl::RenderQueue>::~unique_ptr[abi:nn180100](v1);
  std::unique_ptr<md::FrameGraph>::~unique_ptr[abi:nn180100](v2);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'md::MapNavLabeler::setRouteUserOffset(md::MapNavLabeler *this, const PolylineCoordinate *a2)
{
  md::MapNavLabeler::setRouteUserOffset((md::MapNavLabeler *)((char *)this - 8), a2);
}

void md::MapNavLabeler::setRouteUserOffset(md::MapNavLabeler *this, const PolylineCoordinate *a2)
{
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;

  *((PolylineCoordinate *)this + 101) = *a2;
  v4 = (void *)*((_QWORD *)this + 11);
  if (v4
    && (objc_msgSend(v4, "routeInfo"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v5, "route"),
        v6 = (void *)objc_claimAutoreleasedReturnValue(),
        v6,
        v5,
        v6))
  {
    v7 = *((id *)this + 11);
    objc_msgSend(v7, "routeInfo");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "route");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v9, "distanceFromPoint:toPoint:", 0, *a2);
    *((_QWORD *)this + 102) = v10;

  }
  else
  {
    *((_QWORD *)this + 102) = 0;
  }
  if ((*(unsigned int (**)(md::MapNavLabeler *))(*(_QWORD *)this + 352))(this))
  {
    v11 = *((_QWORD *)this + 8);
    if (a2->index != *(_DWORD *)(v11 + 212) || vabds_f32(a2->offset, *(float *)(v11 + 216)) >= 0.00000011921)
    {
      *(PolylineCoordinate *)(v11 + 212) = *a2;
      md::RouteLineSupport::resolveCurrentRouteLeg((md::RouteLineSupport *)v11);
    }
    objc_msgSend(*((id *)this + 7), "setRouteUserOffset:", *a2);
  }
  v12 = (_QWORD *)*((_QWORD *)this + 9);
  v13 = v12[6];
  if (v12[7] != v13)
  {
    v14 = 0;
    do
    {
      v15 = *(id *)(v13 + 8 * v14);
      v18 = v15;
      v16 = objc_msgSend(v15, "navigationState");
      objc_msgSend(v15, "updateNavigationStateForRouteUserOffset:", a2);
      if (v16 != objc_msgSend(v15, "navigationState"))
      {
        v17 = std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::find<VKTrafficFeature * {__strong}>(v12 + 22, &v18);
        if (v17)
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v17[3] + 536))(v17[3], *v12);
      }

      ++v14;
      v13 = v12[6];
    }
    while (v14 < (v12[7] - v13) >> 3);
  }
}

void sub_19F318CB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__function::__func<md::DaVinciGroundTileData::DaVinciGroundTileData(gdc::LayerDataRequestKey const&,std::vector<gdc::Resource::LoadMetadata> &&,std::shared_ptr<md::GEOVectorTileResource> const&,VKSharedResources *,std::vector<gdc::Resource::LoadMetadata> &&<gss::StylesheetManager<VKSharedResources *::PropertyID>> const&,std::vector<gdc::Resource::LoadMetadata> &&<md::RegistryManager> const&,gdc::Registry *)::$_0,std::allocator<gdc::Registry *>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  geo::codec::VectorTile *v3;
  geo::codec::VectorTile **v4;
  unint64_t prime;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  geo::codec::VectorTile *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t v19;
  _BYTE *v20;
  int v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  int v24;
  unint64_t *p_shared_owners;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  char *v31;
  unint64_t v32;
  int shared_owners_high;
  int shared_owners;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  void *v42;
  unint64_t v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned __int16 *v57;
  unsigned int v58;
  char *v59;
  unint64_t v60;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unsigned __int16 *v65;
  unsigned int v66;
  _BYTE *v67;
  char *v68;
  unint64_t v69;
  BOOL v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  size_t v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  size_t v83;
  unint64_t v84;
  size_t v85;
  uint64_t v86;
  char *v87;
  __int128 *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  _WORD *v94;
  unsigned int v95;
  char *v96;
  char *v97;
  unint64_t v98;
  BOOL v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  unint64_t v106;
  size_t v107;
  int v108;
  unsigned __int16 *v109;
  char *v110;
  _WORD *v111;
  int v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  char *v116;
  unsigned __int8 v117;
  uint64_t v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  _QWORD *v123;
  char *v124;
  unsigned __int8 v125;
  uint64_t v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  _BYTE *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  _QWORD *i;
  unint64_t v135;
  unint64_t v136;
  uint8x8_t v137;
  unint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  unint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v147;
  _BYTE *v148;
  uint64_t v149;
  _BYTE *v150;
  int v151;
  uint64_t v152;
  int v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t ***v159;
  uint64_t **v160;
  unint64_t v161;
  uint64_t *v162;
  _QWORD *v163;
  uint64_t v164;
  float v165;
  _BOOL8 v166;
  unint64_t v167;
  unint64_t v168;
  size_t v169;
  unint64_t v170;
  uint8x8_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  unint64_t v175;
  int8x8_t *v176;
  unsigned int v177;
  unint64_t v178;
  int8x8_t v179;
  unint64_t v180;
  uint8x8_t v181;
  uint64_t v182;
  int8x8_t *v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  _BOOL4 v189;
  unint64_t *v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  _QWORD *v193;
  void *v194;
  _QWORD *v195;
  char *v196;
  unint64_t v197;
  int v198;
  int v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  __int128 v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint8x8_t v208;
  uint64_t **v209;
  uint64_t *v210;
  unint64_t v211;
  uint64_t v212;
  char *v213;
  unint64_t *v214;
  unint64_t v215;
  float v216;
  float v217;
  _BOOL8 v218;
  unint64_t v219;
  unint64_t v220;
  size_t v221;
  int8x8_t v222;
  unint64_t v223;
  uint8x8_t v224;
  uint64_t v225;
  int8x8_t v226;
  _QWORD *v227;
  unint64_t v228;
  unint64_t *v229;
  unint64_t v230;
  unint64_t v231;
  _QWORD *v232;
  int8x8_t v233;
  uint64_t v234;
  void *v235;
  void *v236;
  int8x8_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  _QWORD *v241;
  md::MaterialRaster *v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  _QWORD *v246;
  void *v247;
  NSObject *v248;
  uint64_t *v249;
  float32x2_t *v250;
  std::__shared_weak_count **v251;
  std::__shared_weak_count **v252;
  uint64_t v253;
  _QWORD *v254;
  md::MaterialRaster *v255;
  NSObject *v256;
  NSObject *v257;
  unsigned int v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  char *v262;
  char *v263;
  char *v264;
  char *v265;
  char *v266;
  char *v267;
  __int128 v268;
  char *v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  int *v278;
  int v279;
  _QWORD *v280;
  __int128 v281;
  unsigned __int8 v282;
  _QWORD *v283;
  __int128 v284;
  unsigned __int8 v285;
  char *v286;
  __int128 v287;
  unsigned __int8 v288;
  unsigned __int8 v289;
  uint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  __n128 v295;
  unint64_t *v296;
  unint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  unint64_t *v304;
  unint64_t v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  __n128 v317;
  uint64_t v318;
  int v319;
  int v320;
  uint64_t v321;
  __n128 v322;
  __n128 v323;
  __n128 v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  uint64_t v328;
  unsigned __int16 *v329;
  unsigned __int32 *v330;
  uint64_t v332;
  uint64_t v333;
  float *v334;
  float v335;
  float v336;
  float v337;
  unsigned int v338;
  float *v339;
  float v340;
  float v341;
  float v342;
  float *v343;
  float v344;
  float v345;
  float v346;
  float v347;
  NSObject *v348;
  uint8_t *v349;
  float v350;
  float v351;
  float v352;
  float v353;
  uint8_t *v354;
  int v355;
  int v356;
  float v357;
  float v358;
  uint64_t v364;
  unint64_t *v365;
  uint64_t v368;
  uint64_t v369;
  float v370;
  float v371;
  BOOL v372;
  float v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  _WORD *v380;
  uint64_t v381;
  _WORD *v382;
  __int16 v383;
  __int16 v384;
  char *v385;
  unint64_t v386;
  _BYTE *v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  unint64_t v391;
  char *v392;
  char *v393;
  _OWORD *v394;
  char *v395;
  __int128 v396;
  char *v397;
  std::__shared_weak_count *v398;
  unint64_t *v399;
  unint64_t v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  int v404;
  uint64_t v405;
  int v406;
  uint64_t v407;
  int v408;
  unsigned __int8 v409;
  int v410;
  uint64_t v411;
  geo::read_write_lock *v412;
  const char *v413;
  malloc_zone_t *zone;
  int v415;
  uint64_t v416;
  geo::read_write_lock *v417;
  const char *v418;
  malloc_zone_t *v419;
  unsigned int v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  unsigned __int16 *v426;
  int v427;
  char *v428;
  _BYTE *v429;
  char *v430;
  char *v431;
  char *v432;
  uint64_t v433;
  char *v434;
  char *v435;
  char *v436;
  uint64_t v437;
  uint64_t v438;
  _WORD *v439;
  uint64_t v440;
  uint64_t v441;
  _QWORD *v442;
  _QWORD *v443;
  unint64_t v444;
  BOOL v445;
  char *v446;
  unint64_t v447;
  char *v448;
  unint64_t v449;
  unint64_t v450;
  unint64_t v451;
  char *v452;
  BOOL *v453;
  char *v454;
  char *v455;
  uint64_t v456;
  char *v457;
  char *v458;
  char *v459;
  void *v460;
  uint64_t v461;
  uint64_t v462;
  void *v463;
  std::__shared_weak_count *v464;
  unint64_t *v465;
  unint64_t v466;
  std::__shared_weak_count *v467;
  unint64_t *v468;
  unint64_t v469;
  uint64_t v470;
  uint64_t v471;
  std::__shared_weak_count *v472;
  unint64_t *v473;
  unint64_t v474;
  char *v475;
  char *v476;
  char *v477;
  std::__shared_weak_count *v478;
  unint64_t *v479;
  unint64_t v480;
  std::__shared_weak_count *v481;
  unint64_t *v482;
  unint64_t v483;
  char *v484;
  char *v485;
  std::__shared_weak_count *v486;
  unint64_t *v487;
  unint64_t v488;
  uint64_t v489;
  uint64_t v490;
  gss::Allocator *v491;
  uint64_t v492;
  uint64_t v493;
  unint64_t v494;
  unint64_t v495;
  __int128 v496;
  unint64_t *v497;
  unint64_t v498;
  uint64_t v499;
  unint64_t *v500;
  unint64_t v501;
  char *v502;
  _QWORD *v503;
  unint64_t v504;
  char *v505;
  __int128 v506;
  unint64_t *v507;
  unint64_t v508;
  uint64_t v509;
  uint64_t v510;
  unint64_t v511;
  uint64_t v512;
  unint64_t v513;
  char *v514;
  char *v515;
  unint64_t v516;
  unint64_t v517;
  unint64_t v518;
  unint64_t v519;
  _QWORD *v520;
  char *v521;
  __int128 v522;
  unint64_t *v523;
  unint64_t v524;
  uint64_t v525;
  unint64_t *v526;
  unint64_t v527;
  char *v528;
  char *v529;
  char *v530;
  __int128 v531;
  char *v532;
  std::__shared_weak_count *v533;
  unint64_t *v534;
  unint64_t v535;
  std::__shared_weak_count *v536;
  unint64_t *v537;
  unint64_t v538;
  std::__shared_weak_count *v539;
  unint64_t *v540;
  unint64_t v541;
  char *v542;
  __int128 v543;
  unint64_t *v544;
  unint64_t v545;
  char *v546;
  __int128 v547;
  char *v548;
  std::__shared_weak_count *v549;
  unint64_t *v550;
  unint64_t v551;
  NSObject *v552;
  unint64_t *v553;
  _QWORD *v554;
  uint64_t v555;
  _QWORD *v556;
  uint64_t v557;
  NSObject *v558;
  uint64_t v559;
  float *v560;
  _OWORD *v561;
  double v562;
  uint64_t v563;
  double v564;
  uint64_t v565;
  NSObject *v566;
  uint64_t v567;
  unsigned int v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  size_t v579;
  void **v580;
  uint64_t v581;
  __n128 v582;
  char *v583;
  int8x8_t *v584;
  uint64_t v585;
  uint64_t v586;
  char *v587;
  unint64_t v588;
  char *v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t *v592;
  std::__shared_weak_count *v593;
  uint64_t v594;
  char **v595;
  int8x8_t *v596;
  __n128 v597;
  uint64_t v598;
  _WORD *v599;
  geo::codec::VectorTile **v600;
  unint64_t v601;
  int8x8_t *v602;
  _QWORD *v603;
  uint64_t __b;
  void *__ba[2];
  unsigned int *__bb;
  uint64_t v607;
  uint64_t v608;
  __int128 v609;
  __int16 v610[2];
  uint64_t v611;
  __int16 v612[2];
  uint64_t v613;
  uint8_t v614[16];
  char v615;
  std::__shared_weak_count *v616;
  std::__shared_weak_count *v617;
  std::__shared_weak_count **v618;
  _BYTE __p[40];
  __int128 v620;
  _BYTE buf[22];
  __int16 v622;
  double v623;
  __int16 v624;
  double v625;
  uint64_t v626;

  v626 = *MEMORY[0x1E0C80C00];
  v577 = *a2;
  v4 = (geo::codec::VectorTile **)(a1 + 16);
  v3 = *(geo::codec::VectorTile **)(a1 + 16);
  v600 = v4;
  v567 = a1;
  v607 = *(_QWORD *)(a1 + 8);
  v608 = *a2;
  memset(__p, 0, 32);
  *(_DWORD *)&__p[32] = 1065353216;
  prime = vcvtps_u32_f32((float)geo::codec::VectorTile::daVinciMaterialRasterCount(v3) / 1.0);
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  if (prime > *(_QWORD *)&__p[8])
    goto LABEL_6;
  if (prime < *(_QWORD *)&__p[8])
  {
    v6 = vcvtps_u32_f32((float)*(unint64_t *)&__p[24] / *(float *)&__p[32]);
    if (*(_QWORD *)&__p[8] < 3uLL
      || (v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&__p[8]), v7.i16[0] = vaddlv_u8(v7), v7.u32[0] > 1uLL))
    {
      v6 = std::__next_prime(v6);
    }
    else
    {
      v8 = 1 << -(char)__clz(v6 - 1);
      if (v6 >= 2)
        v6 = v8;
    }
    if (prime <= v6)
      prime = v6;
    if (prime < *(_QWORD *)&__p[8])
LABEL_6:
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)__p, prime);
  }
  v9 = 0;
  v10 = (_QWORD *)(v607 + 1128);
  while (1)
  {
    v11 = geo::codec::VectorTile::daVinciMaterialRasterCount(*v600);
    v12 = *v600;
    if (v9 >= v11)
      break;
    v13 = geo::codec::VectorTile::daVinciMaterialRasters(v12);
    v14 = operator new();
    __b = v13;
    *(_OWORD *)(v14 + 96) = 0u;
    v595 = (char **)(v14 + 96);
    *(_QWORD *)(v14 + 112) = 0;
    *(_OWORD *)(v14 + 64) = 0u;
    *(_OWORD *)(v14 + 80) = 0u;
    *(_OWORD *)(v14 + 32) = 0u;
    *(_OWORD *)(v14 + 48) = 0u;
    *(_OWORD *)v14 = 0u;
    *(_OWORD *)(v14 + 16) = 0u;
    *(_DWORD *)(v14 + 120) = 0xFFFF;
    v15 = (char *)operator new(0x58uLL);
    v16 = (std::__shared_weak_count *)v15;
    *((_QWORD *)v15 + 1) = 0;
    v17 = (unint64_t *)(v15 + 8);
    *((_QWORD *)v15 + 2) = 0;
    *(_QWORD *)v15 = &off_1E42DED18;
    *((_QWORD *)v15 + 3) = &off_1E42B63B0;
    v18 = (std::__shared_weak_count *)(v15 + 24);
    *((_DWORD *)v15 + 14) = 0;
    *((_QWORD *)v15 + 5) = 0;
    *((_QWORD *)v15 + 6) = 0;
    *((_QWORD *)v15 + 4) = 0;
    *((_DWORD *)v15 + 17) = 1;
    *(_QWORD *)(v15 + 60) = 0x100000001;
    *((_QWORD *)v15 + 9) = 0;
    *((_QWORD *)v15 + 10) = 0;
    v601 = v9;
    v593 = (std::__shared_weak_count *)v15;
    if (*(_BYTE *)(__b + 80 * v9 + 20))
    {
      if (*(_BYTE *)(__b + 80 * v9 + 20) == 1)
      {
        v587 = v15 + 24;
        v19 = __b + 80 * v9;
        v21 = *(unsigned __int8 *)(v19 + 26);
        v20 = (_BYTE *)(v19 + 26);
        v22 = (std::__shared_weak_count *)operator new(0x60uLL);
        v23 = v22;
        if (v21 == 16)
          v24 = 3;
        else
          v24 = 2;
        v22->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        v22->__shared_weak_owners_ = 0;
        v22->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
        v26 = &v22[1].__vftable;
        v27 = ggl::TextureData2D::TextureData2D((uint64_t)&v22[1], *(unsigned __int16 *)(__b + 80 * v9 + 22), *(unsigned __int16 *)(__b + 80 * v9 + 24), 1u, v24, 0);
        *(_WORD *)(v14 + 120) = ~(unsigned __int16)(-1 << *v20);
        v28 = (void *)((uint64_t (*)(_QWORD *, _QWORD))v23[1].__on_zero_shared)(v27, 0);
        memcpy(v28, *(const void **)(__b + 80 * v9 + 8), *(unsigned int *)(__b + 80 * v9 + 16));
        v29 = operator new(0xB0uLL);
        v30 = v29;
        v29[1] = 0;
        v29[2] = 0;
        v31 = (char *)(v29 + 3);
        *v29 = &off_1E42E53B0;
        do
          v32 = __ldxr(p_shared_owners);
        while (__stxr(v32 + 1, p_shared_owners));
        v29[13] = 0;
        shared_owners = v23[1].__shared_owners_;
        shared_owners_high = HIDWORD(v23[1].__shared_owners_);
        *((_DWORD *)v29 + 22) = 0;
        *((_DWORD *)v29 + 23) = shared_owners_high;
        v29[8] = &unk_1E42BE458;
        v29[9] = "";
        v29[5] = 0;
        v29[6] = 0;
        *((_DWORD *)v29 + 14) = 0;
        v29[10] = 0x100000001;
        v29[12] = 0x100000001;
        v29[14] = 0;
        v29[15] = 0;
        v29[3] = &off_1E42BE438;
        v29[4] = 0;
        *((_DWORD *)v29 + 32) = shared_owners;
        v29[17] = v26;
        v29[18] = v23;
        do
          v35 = __ldxr(p_shared_owners);
        while (__stxr(v35 + 1, p_shared_owners));
        *((_WORD *)v29 + 76) = 0;
        *((_BYTE *)v29 + 154) = 1;
        v29[20] = v587;
        v29[21] = v593;
        do
          v36 = __ldxr(v17);
        while (__stxr(v36 + 1, v17));
        v29[13] = v23[1].__shared_weak_owners_;
        do
          v37 = __ldaxr(p_shared_owners);
        while (__stlxr(v37 - 1, p_shared_owners));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v38 = *(std::__shared_weak_count **)(v14 + 8);
        *(_QWORD *)v14 = v31;
        *(_QWORD *)(v14 + 8) = v30;
        v9 = v601;
        if (v38)
        {
          v39 = (unint64_t *)&v38->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        do
          v41 = __ldaxr(p_shared_owners);
        while (__stlxr(v41 - 1, p_shared_owners));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      goto LABEL_61;
    }
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", *(_QWORD *)(__b + 80 * v9 + 8), *(unsigned int *)(__b + 80 * v9 + 16), 0);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    *(_WORD *)(v14 + 120) = 255;
    v616 = v18;
    v617 = v16;
    do
      v43 = __ldxr(v17);
    while (__stxr(v43 + 1, v17));
    textureWithData(buf, v42, &v616, 2u, 0, 0);
    v44 = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v45 = *(std::__shared_weak_count **)(v14 + 8);
    *(_OWORD *)v14 = v44;
    if (!v45)
      goto LABEL_49;
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
      v48 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
LABEL_50:
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
    }
    else
    {
LABEL_49:
      v48 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
        goto LABEL_50;
    }
    v51 = v617;
    if (v617)
    {
      v52 = (unint64_t *)&v617->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }

LABEL_61:
    v54 = __b;
    v55 = __b + 80 * v9;
    v58 = *(unsigned __int16 *)(v55 + 56);
    v57 = (unsigned __int16 *)(v55 + 56);
    v56 = v58;
    v59 = *(char **)(v14 + 96);
    v60 = (uint64_t)(*(_QWORD *)(v14 + 104) - (_QWORD)v59) >> 1;
    _CF = v58 >= v60;
    v62 = v58 - v60;
    if (v58 <= v60)
    {
      if (!_CF)
        *(_QWORD *)(v14 + 104) = &v59[2 * v56];
    }
    else
    {
      std::vector<md::TileSelectionTileSetType>::__append((uint64_t)v595, v62);
      v59 = *v595;
      v56 = *v57;
      v9 = v601;
      v54 = __b;
    }
    v63 = v54 + 80 * v9;
    memcpy(v59, *(const void **)(v63 + 48), 2 * v56);
    v66 = *(unsigned __int16 *)(v63 + 40);
    v65 = (unsigned __int16 *)(v63 + 40);
    v64 = v66;
    v68 = *(char **)(v14 + 48);
    v67 = *(_BYTE **)(v14 + 56);
    v69 = (v67 - v68) >> 3;
    v70 = v66 >= v69;
    v71 = v66 - v69;
    if (v66 > v69)
    {
      v72 = *(_QWORD *)(v14 + 64);
      if (v71 <= (v72 - (uint64_t)v67) >> 3)
      {
        v85 = 8 * v71;
        bzero(*(void **)(v14 + 56), v85);
        *(_QWORD *)(v14 + 56) = &v67[v85];
        v80 = v68;
        v81 = __b;
      }
      else
      {
        v73 = v72 - (_QWORD)v68;
        if (v73 >> 2 > v64)
          v64 = v73 >> 2;
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
          v64 = 0x1FFFFFFFFFFFFFFFLL;
        if (v64 >> 61)
          goto LABEL_788;
        v588 = v64;
        v74 = (char *)operator new(8 * v64);
        v75 = 8 * v71;
        v583 = v74;
        v76 = &v74[8 * v69];
        v579 = v75;
        bzero(v76, v75);
        v77 = v67 - v68;
        if (v67 == v68)
        {
          v80 = v76;
          v81 = __b;
          v82 = v583;
          v79 = v588;
          v83 = v579;
        }
        else
        {
          v78 = v77 - 8;
          v79 = v588;
          if ((unint64_t)(v77 - 8) < 0x58)
          {
            v80 = v76;
            v81 = __b;
            v82 = v583;
            v83 = v579;
            goto LABEL_84;
          }
          v82 = v583;
          v80 = v76;
          v81 = __b;
          v83 = v579;
          if ((unint64_t)(v68 - v583) < 0x20)
            goto LABEL_797;
          v86 = (v78 >> 3) + 1;
          v87 = &v583[8 * v69 - 16];
          v88 = (__int128 *)(v67 - 16);
          v89 = v86 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v90 = *v88;
            *((_OWORD *)v87 - 1) = *(v88 - 1);
            *(_OWORD *)v87 = v90;
            v87 -= 32;
            v88 -= 2;
            v89 -= 4;
          }
          while (v89);
          v80 = &v76[-8 * (v86 & 0x3FFFFFFFFFFFFFFCLL)];
          v67 -= 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
          if (v86 != (v86 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_797:
            do
            {
LABEL_84:
              v91 = *((_QWORD *)v67 - 1);
              v67 -= 8;
              *((_QWORD *)v80 - 1) = v91;
              v80 -= 8;
            }
            while (v67 != v68);
          }
        }
        *(_QWORD *)(v14 + 48) = v80;
        *(_QWORD *)(v14 + 56) = &v76[v83];
        *(_QWORD *)(v14 + 64) = &v82[8 * v79];
        if (v68)
        {
          operator delete(v68);
          v80 = *(char **)(v14 + 48);
        }
      }
      v64 = *v65;
      v68 = v80;
      v84 = v601;
      goto LABEL_88;
    }
    if (!v70)
      *(_QWORD *)(v14 + 56) = &v68[8 * v64];
    v84 = v601;
    v81 = __b;
LABEL_88:
    v92 = v81 + 80 * v84;
    memcpy(v68, *(const void **)(v92 + 32), 8 * v64);
    v95 = *(unsigned __int16 *)(v92 + 72);
    v94 = (_WORD *)(v92 + 72);
    v93 = v95;
    v97 = *(char **)(v14 + 72);
    v96 = *(char **)(v14 + 80);
    v98 = (v96 - v97) >> 4;
    v99 = v95 >= v98;
    v100 = v95 - v98;
    if (v95 <= v98)
    {
      if (!v99)
        *(_QWORD *)(v14 + 80) = &v97[16 * v93];
      v106 = v601;
      if ((_DWORD)v93)
        goto LABEL_107;
    }
    else
    {
      v101 = *(_QWORD *)(v14 + 88);
      if (v100 <= (v101 - (uint64_t)v96) >> 4)
      {
        v107 = 16 * v100;
        bzero(*(void **)(v14 + 80), v107);
        *(_QWORD *)(v14 + 80) = &v96[v107];
      }
      else
      {
        v102 = v101 - (_QWORD)v97;
        if (v102 >> 3 > v93)
          v93 = v102 >> 3;
        if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF0)
          v103 = 0xFFFFFFFFFFFFFFFLL;
        else
          v103 = v93;
        if (v103 >> 60)
          goto LABEL_788;
        v589 = (char *)operator new(16 * v103);
        v104 = &v589[16 * v98];
        bzero(v104, 16 * v100);
        v105 = v104;
        if (v96 != v97)
        {
          do
          {
            *((_OWORD *)v105 - 1) = *((_OWORD *)v96 - 1);
            v105 -= 16;
            v96 -= 16;
          }
          while (v96 != v97);
          v96 = *(char **)(v14 + 72);
        }
        *(_QWORD *)(v14 + 72) = v105;
        *(_QWORD *)(v14 + 80) = &v104[16 * v100];
        *(_QWORD *)(v14 + 88) = &v589[16 * v103];
        if (v96)
          operator delete(v96);
      }
      LODWORD(v93) = (unsigned __int16)*v94;
      v97 = *(char **)(v14 + 72);
      v106 = v601;
      if (*v94)
      {
LABEL_107:
        v108 = 0;
        v109 = *(unsigned __int16 **)(__b + 80 * v106 + 64);
        v110 = *v595;
        v93 = v93;
        v111 = v97 + 8;
        do
        {
          v112 = *v109++;
          *v111 = v112;
          *((_QWORD *)v111 - 1) = &v110[2 * v108];
          v108 += v112;
          v111 += 8;
          --v93;
        }
        while (v93);
      }
    }
    v113 = *(_QWORD *)(v14 + 80);
    v114 = operator new(0x78uLL);
    v114[1] = 0;
    v114[2] = 0;
    *v114 = &off_1E42DAEF8;
    v114[3] = 0;
    v115 = ((unint64_t)(v113 - (_QWORD)v97) >> 4);
    v114[4] = 0;
    v114[5] = 0;
    if (((unint64_t)(v113 - (_QWORD)v97) >> 4))
    {
      v116 = (char *)operator new(16 * v115);
      v114[3] = v116;
      v114[5] = &v116[16 * v115];
      bzero(v116, 16 * v115);
      v114[4] = &v116[16 * v115];
    }
    v114[6] = 0;
    *((_BYTE *)v114 + 56) = 1;
    *((_OWORD *)v114 + 4) = 0u;
    *((_OWORD *)v114 + 5) = 0u;
    *((_OWORD *)v114 + 6) = 0u;
    v114[14] = 0;
    if ((v117 & 1) == 0
    {
      md::StyleTexture<md::LowZoomStyle>::StyleTexture(unsigned long,md::StyleTexture<md::LowZoomStyle>::PackStyle,BOOL,ggl::Filter)::bytesPerPixel = 4;
    }
    v118 = md::StyleTexture<md::LowZoomStyle>::StyleTexture(unsigned long,md::StyleTexture<md::LowZoomStyle>::PackStyle,BOOL,ggl::Filter)::bytesPerPixel;
    v119 = (md::StyleTexture<md::LowZoomStyle>::StyleTexture(unsigned long,md::StyleTexture<md::LowZoomStyle>::PackStyle,BOOL,ggl::Filter)::bytesPerPixel
          + 3)
         / (unint64_t)md::StyleTexture<md::LowZoomStyle>::StyleTexture(unsigned long,md::StyleTexture<md::LowZoomStyle>::PackStyle,BOOL,ggl::Filter)::bytesPerPixel;
    v114[12] = 1;
    v114[13] = v119;
    v114[9] = v119;
    v114[10] = v115;
    v114[11] = v119 * v118;
    *((float *)v114 + 28) = 1.0 / (float)v119;
    v120 = *(std::__shared_weak_count **)(v14 + 24);
    *(_QWORD *)(v14 + 16) = v114 + 3;
    *(_QWORD *)(v14 + 24) = v114;
    if (v120)
    {
      v121 = (unint64_t *)&v120->__shared_owners_;
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }
    v123 = operator new(0x78uLL);
    v123[1] = 0;
    v123[2] = 0;
    *v123 = &off_1E42DAF30;
    v123[3] = 0;
    v123[4] = 0;
    v123[5] = 0;
    if (v115)
    {
      v124 = (char *)operator new(144 * v115);
      v123[3] = v124;
      v123[5] = &v124[144 * v115];
      bzero(v124, 144 * ((144 * v115 - 144) / 0x90uLL) + 144);
      v123[4] = &v124[144 * ((144 * v115 - 144) / 0x90uLL) + 144];
    }
    v123[6] = 0;
    *((_BYTE *)v123 + 56) = 1;
    *((_OWORD *)v123 + 4) = 0u;
    *((_OWORD *)v123 + 5) = 0u;
    *((_OWORD *)v123 + 6) = 0u;
    v123[14] = 0x100000000;
    if ((v125 & 1) == 0
    {
      md::StyleTexture<md::LowZoomClimateStyle>::StyleTexture(unsigned long,md::StyleTexture<md::LowZoomClimateStyle>::PackStyle,BOOL,ggl::Filter)::bytesPerPixel = 4;
    }
    v126 = md::StyleTexture<md::LowZoomClimateStyle>::StyleTexture(unsigned long,md::StyleTexture<md::LowZoomClimateStyle>::PackStyle,BOOL,ggl::Filter)::bytesPerPixel;
    v127 = (md::StyleTexture<md::LowZoomClimateStyle>::StyleTexture(unsigned long,md::StyleTexture<md::LowZoomClimateStyle>::PackStyle,BOOL,ggl::Filter)::bytesPerPixel
          + 35)
         / (unint64_t)md::StyleTexture<md::LowZoomClimateStyle>::StyleTexture(unsigned long,md::StyleTexture<md::LowZoomClimateStyle>::PackStyle,BOOL,ggl::Filter)::bytesPerPixel
         / 3;
    v123[12] = 1;
    v123[13] = v127;
    v123[9] = v127;
    v123[10] = 3 * v115;
    v123[11] = v127 * v126;
    *((float *)v123 + 28) = 1.0 / (float)v127;
    v128 = *(std::__shared_weak_count **)(v14 + 40);
    v129 = (_BYTE *)(__b + 80 * v601);
    *(_QWORD *)(v14 + 32) = v123 + 3;
    *(_QWORD *)(v14 + 40) = v123;
    if (v128)
    {
      v130 = (unint64_t *)&v128->__shared_owners_;
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
    do
      v132 = __ldaxr(v17);
    while (__stlxr(v132 - 1, v17));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v593->__on_zero_shared)(v593);
      std::__shared_weak_count::__release_weak(v593);
    }
    *(_QWORD *)v614 = v14;
    v133 = *(_QWORD *)(v14 + 48);
    for (i = *(_QWORD **)(v14 + 56); (_QWORD *)v133 != i; v133 += 8)
    {
      v138 = *(_QWORD *)v133;
      v139 = (_QWORD *)*v10;
      v140 = (_QWORD *)(v607 + 1128);
      v141 = (_QWORD *)(v607 + 1128);
      if (*v10)
      {
        while (1)
        {
          while (1)
          {
            v141 = v139;
            v142 = v139[4];
            if (v138 >= v142)
              break;
            v139 = (_QWORD *)*v141;
            v140 = v141;
            if (!*v141)
              goto LABEL_143;
          }
          if (v142 >= v138)
            break;
          v139 = (_QWORD *)v141[1];
          if (!v139)
          {
            v140 = v141 + 1;
            goto LABEL_143;
          }
        }
      }
      else
      {
LABEL_143:
        v143 = operator new(0x28uLL);
        v143[4] = v138;
        *v143 = 0;
        v143[1] = 0;
        v143[2] = v141;
        *v140 = v143;
        v144 = **(_QWORD **)(v607 + 1120);
        if (v144)
        {
          *(_QWORD *)(v607 + 1120) = v144;
          v143 = (_QWORD *)*v140;
        }
        v145 = (_QWORD *)*v10;
        _ZF = v143 == (_QWORD *)*v10;
        *((_BYTE *)v143 + 24) = _ZF;
        if (!_ZF)
        {
          do
          {
            v147 = v143[2];
            if (*(_BYTE *)(v147 + 24))
              break;
            v148 = *(_BYTE **)(v147 + 16);
            v149 = *(_QWORD *)v148;
            if (*(_QWORD *)v148 == v147)
            {
              v152 = *((_QWORD *)v148 + 1);
              if (!v152 || (v153 = *(unsigned __int8 *)(v152 + 24), v150 = (_BYTE *)(v152 + 24), v153))
              {
                if (*(_QWORD **)v147 == v143)
                {
                  v154 = (uint64_t *)v143[2];
                }
                else
                {
                  v154 = *(uint64_t **)(v147 + 8);
                  v155 = *v154;
                  *(_QWORD *)(v147 + 8) = *v154;
                  if (v155)
                  {
                    *(_QWORD *)(v155 + 16) = v147;
                    v148 = *(_BYTE **)(v147 + 16);
                  }
                  v154[2] = (uint64_t)v148;
                  *(_QWORD *)(*(_QWORD *)(v147 + 16) + 8 * (**(_QWORD **)(v147 + 16) != v147)) = v154;
                  *v154 = v147;
                  *(_QWORD *)(v147 + 16) = v154;
                  v148 = (_BYTE *)v154[2];
                  v147 = *(_QWORD *)v148;
                }
                *((_BYTE *)v154 + 24) = 1;
                v148[24] = 0;
                v158 = *(_QWORD *)(v147 + 8);
                *(_QWORD *)v148 = v158;
                if (v158)
                  *(_QWORD *)(v158 + 16) = v148;
                *(_QWORD *)(v147 + 16) = *((_QWORD *)v148 + 2);
                *(_QWORD *)(*((_QWORD *)v148 + 2) + 8 * (**((_QWORD **)v148 + 2) != (_QWORD)v148)) = v147;
                *(_QWORD *)(v147 + 8) = v148;
                goto LABEL_133;
              }
            }
            else if (!v149 || (v151 = *(unsigned __int8 *)(v149 + 24), v150 = (_BYTE *)(v149 + 24), v151))
            {
              if (*(_QWORD **)v147 == v143)
              {
                v156 = v143[1];
                *(_QWORD *)v147 = v156;
                if (v156)
                {
                  *(_QWORD *)(v156 + 16) = v147;
                  v148 = *(_BYTE **)(v147 + 16);
                }
                v143[2] = v148;
                *(_QWORD *)(*(_QWORD *)(v147 + 16) + 8 * (**(_QWORD **)(v147 + 16) != v147)) = v143;
                v143[1] = v147;
                *(_QWORD *)(v147 + 16) = v143;
                v148 = (_BYTE *)v143[2];
              }
              else
              {
                v143 = (_QWORD *)v143[2];
              }
              *((_BYTE *)v143 + 24) = 1;
              v148[24] = 0;
              v147 = *((_QWORD *)v148 + 1);
              v157 = *(_QWORD **)v147;
              *((_QWORD *)v148 + 1) = *(_QWORD *)v147;
              if (v157)
                v157[2] = v148;
              *(_QWORD *)(v147 + 16) = *((_QWORD *)v148 + 2);
              *(_QWORD *)(*((_QWORD *)v148 + 2) + 8 * (**((_QWORD **)v148 + 2) != (_QWORD)v148)) = v147;
              *(_QWORD *)v147 = v148;
LABEL_133:
              *((_QWORD *)v148 + 2) = v147;
              break;
            }
            *(_BYTE *)(v147 + 24) = 1;
            v143 = v148;
            v148[24] = v148 == (_BYTE *)v145;
            *v150 = 1;
          }
          while (v148 != (_BYTE *)v145);
        }
        ++*(_QWORD *)(v607 + 1136);
      }
    }
    v135 = *v129;
    v136 = *(_QWORD *)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v137 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&__p[8]);
      v137.i16[0] = vaddlv_u8(v137);
      if (v137.u32[0] > 1uLL)
      {
        v133 = *v129;
        if (*(_QWORD *)&__p[8] <= v135)
          v133 = v135 % *(_QWORD *)&__p[8];
      }
      else
      {
        v133 = (*(_DWORD *)&__p[8] - 1) & v135;
      }
      v159 = *(uint64_t ****)(*(_QWORD *)__p + 8 * v133);
      if (v159)
      {
        v160 = *v159;
        if (v160)
        {
          if (v137.u32[0] < 2uLL)
          {
            while (1)
            {
              v162 = v160[1];
              if (v162 == (uint64_t *)v135)
              {
                if (*((unsigned __int8 *)v160 + 16) == (_DWORD)v135)
                  goto LABEL_226;
              }
              else if (((unint64_t)v162 & (*(_QWORD *)&__p[8] - 1)) != v133)
              {
                goto LABEL_188;
              }
              v160 = (uint64_t **)*v160;
              if (!v160)
                goto LABEL_188;
            }
          }
          do
          {
            v161 = (unint64_t)v160[1];
            if (v161 == v135)
            {
              if (*((unsigned __int8 *)v160 + 16) == (_DWORD)v135)
                goto LABEL_226;
            }
            else
            {
              if (v161 >= *(_QWORD *)&__p[8])
                v161 %= *(_QWORD *)&__p[8];
              if (v161 != v133)
                break;
            }
            v160 = (uint64_t **)*v160;
          }
          while (v160);
        }
      }
    }
LABEL_188:
    v163 = operator new(0x20uLL);
    *(_QWORD *)buf = v163;
    *(_QWORD *)&buf[8] = &__p[16];
    *v163 = 0;
    v163[1] = v135;
    *((_BYTE *)v163 + 16) = *v129;
    v164 = *(_QWORD *)v614;
    *(_QWORD *)v614 = 0;
    v163[3] = v164;
    buf[16] = 1;
    v165 = (float)(unint64_t)(*(_QWORD *)&__p[24] + 1);
    if (v136 && (float)(*(float *)&__p[32] * (float)v136) >= v165)
    {
      v135 = v133;
    }
    else
    {
      v166 = (v136 & (v136 - 1)) != 0;
      if (v136 < 3)
        v166 = 1;
      v167 = v166 | (2 * v136);
      v168 = vcvtps_u32_f32(v165 / *(float *)&__p[32]);
      if (v167 <= v168)
        v169 = v168;
      else
        v169 = v167;
      if (v169 == 1)
      {
        v169 = 2;
      }
      else if ((v169 & (v169 - 1)) != 0)
      {
        v169 = std::__next_prime(v169);
        v136 = *(_QWORD *)&__p[8];
      }
      if (v169 > v136)
        goto LABEL_201;
      if (v169 < v136)
      {
        v170 = vcvtps_u32_f32((float)*(unint64_t *)&__p[24] / *(float *)&__p[32]);
        if (v136 < 3 || (v171 = (uint8x8_t)vcnt_s8((int8x8_t)v136), v171.i16[0] = vaddlv_u8(v171), v171.u32[0] > 1uLL))
        {
          v170 = std::__next_prime(v170);
        }
        else
        {
          v172 = 1 << -(char)__clz(v170 - 1);
          if (v170 >= 2)
            v170 = v172;
        }
        if (v169 <= v170)
          v169 = v170;
        if (v169 < v136)
LABEL_201:
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)__p, v169);
      }
      v136 = *(_QWORD *)&__p[8];
      if ((*(_QWORD *)&__p[8] & (*(_QWORD *)&__p[8] - 1)) != 0)
      {
        if (*(_QWORD *)&__p[8] <= v135)
          v135 %= *(_QWORD *)&__p[8];
      }
      else
      {
        v135 = (*(_DWORD *)&__p[8] - 1) & v135;
      }
    }
    v173 = *(_QWORD *)__p;
    v174 = *(_QWORD **)(*(_QWORD *)__p + 8 * v135);
    if (v174)
    {
      *v163 = *v174;
LABEL_224:
      *v174 = v163;
      goto LABEL_225;
    }
    *v163 = *(_QWORD *)&__p[16];
    *(_QWORD *)&__p[16] = v163;
    *(_QWORD *)(v173 + 8 * v135) = &__p[16];
    if (*v163)
    {
      v175 = *(_QWORD *)(*v163 + 8);
      if ((v136 & (v136 - 1)) != 0)
      {
        if (v175 >= v136)
          v175 %= v136;
      }
      else
      {
        v175 &= v136 - 1;
      }
      v174 = (_QWORD *)(*(_QWORD *)__p + 8 * v175);
      goto LABEL_224;
    }
LABEL_225:
    ++*(_QWORD *)&__p[24];
LABEL_226:
    if (*(_QWORD *)v614)
    {
      md::MaterialRaster::~MaterialRaster(*(md::MaterialRaster **)v614);
      MEMORY[0x1A1AF4E00]();
    }
    v9 = v601 + 1;
  }
  if (geo::codec::VectorTile::daVinciStyleAttributeRasterCount(v12)
    || geo::codec::VectorTile::daVinciMaterialRasterCount(*v600))
  {
    v176 = (int8x8_t *)operator new(0x70uLL);
    v176[1] = 0;
    v176[2] = 0;
    *v176 = (int8x8_t)&off_1E42DCD28;
    *(_OWORD *)v176[3].i8 = 0u;
    *(_OWORD *)v176[5].i8 = 0u;
    v176[7].i32[0] = 1065353216;
    *(_OWORD *)v176[8].i8 = 0u;
    *(_OWORD *)v176[10].i8 = 0u;
    v596 = v176 + 3;
    v176[12].i32[0] = 1065353216;
    v602 = v176;
    v580 = (void **)&v176[8];
    v177 = geo::codec::VectorTile::daVinciStyleAttributeRasterCount(*v600);
    v178 = vcvtps_u32_f32((float)v177 / *(float *)v176[7].i32);
    if (v178 == 1)
    {
      v178 = 2;
    }
    else if ((v178 & (v178 - 1)) != 0)
    {
      v178 = std::__next_prime(v178);
    }
    v179 = v176[4];
    if (v178 > *(_QWORD *)&v179)
      goto LABEL_239;
    if (v178 < *(_QWORD *)&v179)
    {
      v180 = vcvtps_u32_f32((float)(unint64_t)v176[6] / *(float *)v176[7].i32);
      if (*(_QWORD *)&v179 < 3uLL
        || (v181 = (uint8x8_t)vcnt_s8(v179), v181.i16[0] = vaddlv_u8(v181), v181.u32[0] > 1uLL))
      {
        v180 = std::__next_prime(v180);
      }
      else
      {
        v182 = 1 << -(char)__clz(v180 - 1);
        if (v180 >= 2)
          v180 = v182;
      }
      if (v178 <= v180)
        v178 = v180;
      if (v178 < *(_QWORD *)&v179)
LABEL_239:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v596, v178);
    }
    if (v177)
    {
      v184 = 0;
      v594 = 8;
      v584 = v176 + 5;
      while (1)
      {
        v185 = geo::codec::VectorTile::daVinciStyleAttributeRasters(*v600);
        v186 = (_QWORD *)(v185 + 24 * v184);
        v187 = *((unsigned int *)v186 + 3);
        v188 = (std::__shared_weak_count *)operator new(0x58uLL);
        v189 = (v187 - 153) < 2;
        *(_OWORD *)&v188->__shared_owners_ = 0u;
        v190 = (unint64_t *)&v188->__shared_owners_;
        v188[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B63B0;
        v188->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DED18;
        LODWORD(v188[2].__shared_owners_) = 0;
        *(_OWORD *)__ba = 0u;
        *(_OWORD *)&v188[1].__shared_weak_owners_ = 0u;
        v188[1].__shared_owners_ = 0;
        *(uint64_t *)((char *)&v188[2].__shared_owners_ + 4) = 0x100000001;
        HIDWORD(v188[2].__shared_weak_owners_) = 1;
        LODWORD(v188[3].__vftable) = v189;
        v188[3].__shared_owners_ = 0;
        HIDWORD(v188[3].__vftable) = v189;
        if (*((_BYTE *)v186 + 16))
        {
          if (*(_BYTE *)(v185 + 24 * v184 + 16) == 1)
          {
            v191 = (std::__shared_weak_count *)operator new(0x60uLL);
            v191->__shared_owners_ = 0;
            v192 = (unint64_t *)&v191->__shared_owners_;
            v191->__shared_weak_owners_ = 0;
            v191->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
            v193 = ggl::TextureData2D::TextureData2D((uint64_t)&v191[1], *(unsigned __int16 *)(v185 + 24 * v184 + 18), *(unsigned __int16 *)(v185 + 24 * v184 + 20), 1u, 2, 0);
            v194 = (void *)((uint64_t (*)(_QWORD *, _QWORD))v191[1].__on_zero_shared)(v193, 0);
            memcpy(v194, (const void *)*v186, *(unsigned int *)(v185 + 24 * v184 + 8));
            v195 = operator new(0xB0uLL);
            v185 = (uint64_t)v195;
            v195[1] = 0;
            v195[2] = 0;
            v196 = (char *)(v195 + 3);
            *v195 = &off_1E42E53B0;
            do
              v197 = __ldxr(v192);
            while (__stxr(v197 + 1, v192));
            v195[13] = 0;
            v199 = v191[1].__shared_owners_;
            v198 = HIDWORD(v191[1].__shared_owners_);
            *((_DWORD *)v195 + 22) = 0;
            *((_DWORD *)v195 + 23) = v198;
            v195[8] = &unk_1E42BE458;
            v195[9] = "";
            v195[5] = 0;
            v195[6] = 0;
            *((_DWORD *)v195 + 14) = 0;
            v195[10] = 0x100000001;
            v195[12] = 0x100000001;
            v195[14] = 0;
            v195[15] = 0;
            v195[3] = &off_1E42BE438;
            v195[4] = 0;
            *((_DWORD *)v195 + 32) = v199;
            v195[17] = v191 + 1;
            v195[18] = v191;
            do
              v200 = __ldxr(v192);
            while (__stxr(v200 + 1, v192));
            *((_WORD *)v195 + 76) = 0;
            *((_BYTE *)v195 + 154) = 1;
            v195[20] = v188 + 1;
            v195[21] = v188;
            do
              v201 = __ldxr(v190);
            while (__stxr(v201 + 1, v190));
            v195[13] = v191[1].__shared_weak_owners_;
            do
              v202 = __ldaxr(v192);
            while (__stlxr(v202 - 1, v192));
            if (!v202)
            {
              ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
              std::__shared_weak_count::__release_weak(v191);
            }
            *(_QWORD *)&v203 = v196;
            *((_QWORD *)&v203 + 1) = v185;
            *(_OWORD *)__ba = v203;
            do
              v204 = __ldaxr(v192);
            while (__stlxr(v204 - 1, v192));
            if (!v204)
            {
              ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
              std::__shared_weak_count::__release_weak(v191);
            }
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", *v186, *(unsigned int *)(v185 + 24 * v184 + 8), 0);
          v185 = objc_claimAutoreleasedReturnValue();
          v616 = v188 + 1;
          v617 = v188;
          do
            v205 = __ldxr(v190);
          while (__stxr(v205 + 1, v190));
          textureWithData(buf, (void *)v185, &v616, 2u, 0, 0);
          *(_OWORD *)__ba = *(_OWORD *)buf;
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          do
            v206 = __ldaxr(v190);
          while (__stlxr(v206 - 1, v190));
          if (!v206)
          {
            ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
            std::__shared_weak_count::__release_weak(v188);
          }

        }
        v207 = (unint64_t)v602[4];
        if (v207)
        {
          v208 = (uint8x8_t)vcnt_s8((int8x8_t)v207);
          v208.i16[0] = vaddlv_u8(v208);
          if (v208.u32[0] > 1uLL)
          {
            v185 = v187;
            if (v207 <= v187)
              v185 = v187 % v207;
          }
          else
          {
            v185 = ((_DWORD)v207 - 1) & v187;
          }
          v209 = *(uint64_t ***)(*(_QWORD *)v596 + 8 * v185);
          if (v209)
          {
            v210 = *v209;
            if (v210)
            {
              if (v208.u32[0] < 2uLL)
              {
                while (1)
                {
                  v212 = v210[1];
                  if (v212 == v187)
                  {
                    if (*((_DWORD *)v210 + 4) == (_DWORD)v187)
                      goto LABEL_338;
                  }
                  else if ((v212 & (v207 - 1)) != v185)
                  {
                    goto LABEL_297;
                  }
                  v210 = (uint64_t *)*v210;
                  if (!v210)
                    goto LABEL_297;
                }
              }
              do
              {
                v211 = v210[1];
                if (v211 == v187)
                {
                  if (*((_DWORD *)v210 + 4) == (_DWORD)v187)
                    goto LABEL_338;
                }
                else
                {
                  if (v211 >= v207)
                    v211 %= v207;
                  if (v211 != v185)
                    break;
                }
                v210 = (uint64_t *)*v210;
              }
              while (v210);
            }
          }
        }
LABEL_297:
        v213 = (char *)operator new(0x28uLL);
        *(_QWORD *)v213 = 0;
        *((_QWORD *)v213 + 1) = v187;
        *((_DWORD *)v213 + 4) = v187;
        *(_OWORD *)(v213 + 24) = *(_OWORD *)__ba;
        if (__ba[1])
        {
          v214 = (unint64_t *)((char *)__ba[1] + 8);
          do
            v215 = __ldxr(v214);
          while (__stxr(v215 + 1, v214));
        }
        v216 = (float)(unint64_t)(*(_QWORD *)&v602[6] + 1);
        v217 = *(float *)v602[7].i32;
        if (!v207 || (float)(v217 * (float)v207) < v216)
        {
          v218 = (v207 & (v207 - 1)) != 0;
          if (v207 < 3)
            v218 = 1;
          v219 = v218 | (2 * v207);
          v220 = vcvtps_u32_f32(v216 / v217);
          if (v219 <= v220)
            v221 = v220;
          else
            v221 = v219;
          if (v221 == 1)
          {
            v221 = 2;
          }
          else if ((v221 & (v221 - 1)) != 0)
          {
            v221 = std::__next_prime(v221);
          }
          v222 = v602[4];
          if (v221 > *(_QWORD *)&v222)
            goto LABEL_312;
          if (v221 < *(_QWORD *)&v222)
          {
            v223 = vcvtps_u32_f32((float)(unint64_t)v602[6] / *(float *)v602[7].i32);
            if (*(_QWORD *)&v222 < 3uLL
              || (v224 = (uint8x8_t)vcnt_s8(v222), v224.i16[0] = vaddlv_u8(v224), v224.u32[0] > 1uLL))
            {
              v223 = std::__next_prime(v223);
            }
            else
            {
              v225 = 1 << -(char)__clz(v223 - 1);
              if (v223 >= 2)
                v223 = v225;
            }
            if (v221 <= v223)
              v221 = v223;
            if (v221 < *(_QWORD *)&v222)
LABEL_312:
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v596, v221);
          }
          v207 = (unint64_t)v602[4];
          if ((v207 & (v207 - 1)) != 0)
          {
            if (v207 <= v187)
              v185 = v187 % v207;
            else
              v185 = v187;
          }
          else
          {
            v185 = ((_DWORD)v207 - 1) & v187;
          }
        }
        v226 = *v596;
        v227 = *(_QWORD **)(*(_QWORD *)v596 + 8 * v185);
        if (v227)
        {
          *(_QWORD *)v213 = *v227;
        }
        else
        {
          *(int8x8_t *)v213 = *v584;
          *v584 = (int8x8_t)v213;
          *(_QWORD *)(*(_QWORD *)&v226 + 8 * v185) = v584;
          if (!*(_QWORD *)v213)
            goto LABEL_337;
          v228 = *(_QWORD *)(*(_QWORD *)v213 + 8);
          if ((v207 & (v207 - 1)) != 0)
          {
            if (v228 >= v207)
              v228 %= v207;
          }
          else
          {
            v228 &= v207 - 1;
          }
          v227 = (_QWORD *)(*(_QWORD *)v596 + 8 * v228);
        }
        *v227 = v213;
LABEL_337:
        ++*(_QWORD *)&v602[6];
LABEL_338:
        if (__ba[0])
          v594 += (*((_DWORD *)__ba[0] + 21) * *((_DWORD *)__ba[0] + 20));
        if (__ba[1])
        {
          v229 = (unint64_t *)((char *)__ba[1] + 8);
          do
            v230 = __ldaxr(v229);
          while (__stlxr(v230 - 1, v229));
          if (!v230)
          {
            (*(void (**)(void *))(*(_QWORD *)__ba[1] + 16))(__ba[1]);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__ba[1]);
          }
        }
        do
          v231 = __ldaxr(v190);
        while (__stlxr(v231 - 1, v190));
        if (!v231)
        {
          ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
          std::__shared_weak_count::__release_weak(v188);
        }
        if (++v184 == v177)
          goto LABEL_349;
      }
    }
    v594 = 8;
LABEL_349:
    v183 = v602;
    v602[13] = (int8x8_t)v594;
    if (v602[11])
    {
      v232 = (_QWORD *)v602[10];
      if (v232)
      {
        do
        {
          v241 = (_QWORD *)*v232;
          v242 = (md::MaterialRaster *)v232[3];
          v232[3] = 0;
          if (v242)
          {
            md::MaterialRaster::~MaterialRaster(v242);
            MEMORY[0x1A1AF4E00]();
          }
          operator delete(v232);
          v232 = v241;
        }
        while (v241);
      }
      v602[10] = 0;
      v233 = v602[9];
      if (v233)
      {
        v234 = 0;
        do
          *((_QWORD *)*v580 + v234++) = 0;
        while (*(_QWORD *)&v233 != v234);
      }
      v602[11] = 0;
    }
    v235 = *(void **)__p;
    *(_QWORD *)__p = 0;
    v236 = *v580;
    *v580 = v235;
    if (v236)
      operator delete(v236);
    v237 = *(int8x8_t *)&__p[8];
    v238 = *(_QWORD *)&__p[16];
    v602[10] = *(int8x8_t *)&__p[16];
    v602[9] = v237;
    *(_QWORD *)&__p[8] = 0;
    v239 = *(_QWORD *)&__p[24];
    v602[11] = *(int8x8_t *)&__p[24];
    v602[12].i32[0] = *(_DWORD *)&__p[32];
    if (v239)
    {
      v240 = *(_QWORD *)(v238 + 8);
      if ((*(_QWORD *)&v237 & (*(_QWORD *)&v237 - 1)) != 0)
      {
        if (v240 >= *(_QWORD *)&v237)
          v240 %= *(_QWORD *)&v237;
      }
      else
      {
        v240 &= *(_QWORD *)&v237 - 1;
      }
      *((_QWORD *)*v580 + v240) = v602 + 10;
      *(_QWORD *)&__p[16] = 0;
      *(_QWORD *)&__p[24] = 0;
    }
  }
  else
  {
    v596 = 0;
    v183 = 0;
  }
  *(_QWORD *)(v607 + 1304) = v596;
  v243 = *(std::__shared_weak_count **)(v607 + 1312);
  *(_QWORD *)(v607 + 1312) = v183;
  if (v243)
  {
    v244 = (unint64_t *)&v243->__shared_owners_;
    do
      v245 = __ldaxr(v244);
    while (__stlxr(v245 - 1, v244));
    if (!v245)
    {
      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
      std::__shared_weak_count::__release_weak(v243);
    }
  }
  v246 = *(_QWORD **)&__p[16];
  if (*(_QWORD *)&__p[16])
  {
    do
    {
      v254 = (_QWORD *)*v246;
      v255 = (md::MaterialRaster *)v246[3];
      v246[3] = 0;
      if (v255)
      {
        md::MaterialRaster::~MaterialRaster(v255);
        MEMORY[0x1A1AF4E00]();
      }
      operator delete(v246);
      v246 = v254;
    }
    while (v254);
  }
  v247 = *(void **)__p;
  *(_QWORD *)__p = 0;
  if (v247)
    operator delete(v247);
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v248 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v248))
  {
    *(_WORD *)__p = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v248, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "BuildTileMeshes", (const char *)&unk_1A0189141, __p, 2u);
    v577 = v608;
  }

  v249 = *(uint64_t **)(v567 + 32);
  v250 = *(float32x2_t **)(v567 + 64);
  v251 = (std::__shared_weak_count **)operator new(0x30uLL);
  *v251 = (std::__shared_weak_count *)&off_1E42D9DD0;
  v251[1] = (std::__shared_weak_count *)v607;
  v251[2] = (std::__shared_weak_count *)v600;
  v251[3] = (std::__shared_weak_count *)&v608;
  v251[4] = (std::__shared_weak_count *)v249;
  v251[5] = (std::__shared_weak_count *)v250;
  v618 = v251;
  md::DaVinciGroundTileData::_buildTileMeshes(v607, v600, v577, v249, v250);
  v252 = v618;
  if (v618 == &v616)
  {
    v253 = 4;
    v252 = &v616;
    goto LABEL_385;
  }
  if (v618)
  {
    v253 = 5;
LABEL_385:
    (*((void (**)(void))&(*v252)->__vftable + v253))();
  }
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v256 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v256))
  {
    *(_WORD *)__p = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v256, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "BuildTileMeshes", (const char *)&unk_1A0189141, __p, 2u);
  }

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v257 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v257))
  {
    *(_WORD *)__p = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v257, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "BuildRibbons", (const char *)&unk_1A0189141, __p, 2u);
  }

  v585 = v608;
  v592 = *(uint64_t **)(v567 + 32);
  v258 = geo::codec::VectorTile::daVinciMeshCount(*(geo::codec::VectorTile **)(v567 + 16));
  if (!v258)
    goto LABEL_762;
  v259 = 0;
  v260 = 0;
  v261 = (unint64_t)v258 << 6;
  v578 = v258;
  do
  {
    if (*(_BYTE *)(geo::codec::VectorTile::daVinciMeshes(*v600) + v259) == 3)
      ++v260;
    v259 += 64;
  }
  while (v261 != v259);
  if (!v260)
    goto LABEL_762;
  __bb = (unsigned int *)operator new(4 * v578);
  memset(__bb, 255, 4 * v578);
  v262 = *(char **)(v607 + 1048);
  if (v260 > (uint64_t)(*(_QWORD *)(v607 + 1064) - (_QWORD)v262) >> 4)
  {
    if (v260 >> 60)
      abort();
    v263 = *(char **)(v607 + 1056);
    v264 = (char *)operator new(16 * v260);
    v265 = &v264[16 * v260];
    v266 = &v264[v263 - v262];
    if (v263 == v262)
    {
      *(_QWORD *)(v607 + 1048) = v266;
      *(_QWORD *)(v607 + 1056) = v266;
      *(_QWORD *)(v607 + 1064) = v265;
    }
    else
    {
      v267 = &v264[v263 - v262];
      do
      {
        v268 = *((_OWORD *)v263 - 1);
        v263 -= 16;
        *((_OWORD *)v267 - 1) = v268;
        v267 -= 16;
        *(_QWORD *)v263 = 0;
        *((_QWORD *)v263 + 1) = 0;
      }
      while (v263 != v262);
      v262 = *(char **)(v607 + 1048);
      v269 = *(char **)(v607 + 1056);
      *(_QWORD *)(v607 + 1048) = v267;
      *(_QWORD *)(v607 + 1056) = v266;
      *(_QWORD *)(v607 + 1064) = v265;
      while (v269 != v262)
      {
        v270 = (std::__shared_weak_count *)*((_QWORD *)v269 - 1);
        if (v270)
        {
          v271 = (unint64_t *)&v270->__shared_owners_;
          do
            v272 = __ldaxr(v271);
          while (__stlxr(v272 - 1, v271));
          if (!v272)
          {
            ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
            std::__shared_weak_count::__release_weak(v270);
          }
        }
        v269 -= 16;
      }
    }
    if (v262)
      operator delete(v262);
  }
  v273 = 0;
  v274 = (_QWORD *)&unk_1ECE44000;
  do
  {
    v275 = geo::codec::VectorTile::daVinciMeshes(*v600);
    if (*(_BYTE *)(v275 + (v273 << 6)) != 3)
      goto LABEL_418;
    __bb[v273] = (*(_QWORD *)(v607 + 1056) - *(_QWORD *)(v607 + 1048)) >> 4;
    v569 = geo::codec::VectorTile::daVinciVertices(*v600);
    v276 = v275 + (v273 << 6);
    v279 = *(_DWORD *)(v276 + 16);
    v278 = (int *)(v276 + 16);
    v277 = v279;
    v568 = *(v278 - 3);
    v280 = operator new(0xF8uLL);
    v280[1] = 0;
    v280[2] = 0;
    *v280 = &off_1E42E06E8;
    v280[3] = &off_1E42B5748;
    v280[4] = 16;
    *((_DWORD *)v280 + 10) = 1;
    v581 = (2 * v279);
    v280[6] = 0;
    v280[7] = 0;
    v280[8] = 0;
    v280[9] = 16 * v581;
    v281 = 0uLL;
    *((_OWORD *)v280 + 5) = 0u;
    *((_OWORD *)v280 + 6) = 0u;
    v280[14] = 0;
    if ((v282 & 1) == 0)
    {
      v281 = 0uLL;
      if (v404)
      {
        v405 = operator new();
        v274[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v405, "GeoGL", 0xA3D02C1100000005);
        v281 = 0uLL;
      }
    }
    v280[15] = v274[495];
    v280[16] = 0;
    *((_OWORD *)v280 + 11) = v281;
    *((_OWORD *)v280 + 12) = v281;
    v280[26] = 0;
    v280[27] = -1;
    *((_OWORD *)v280 + 10) = v281;
    *((_OWORD *)v280 + 9) = xmmword_19FFB2DD0;
    *((_DWORD *)v280 + 34) = 0;
    v280[3] = &off_1E42B8420;
    v280[29] = "Ground Ribbon Vertex Data";
    v280[30] = &ggl::DaVinci::ribbonVboReflection;
    v280[28] = &unk_1E42B8440;
    *(_QWORD *)buf = v280 + 3;
    *(_QWORD *)&buf[8] = v280;
    v283 = operator new(0xF8uLL);
    v576 = (v277 - 1);
    v283[1] = 0;
    v283[2] = 0;
    v283[3] = &off_1E42B5748;
    *v283 = &off_1E42E5228;
    v283[4] = 2;
    *((_DWORD *)v283 + 10) = 257;
    v575 = (6 * v576);
    v283[6] = 0;
    v283[7] = 0;
    v283[8] = 0;
    v283[9] = 2 * v575;
    v284 = 0uLL;
    *((_OWORD *)v283 + 5) = 0u;
    *((_OWORD *)v283 + 6) = 0u;
    v283[14] = 0;
    if ((v285 & 1) == 0)
    {
      v284 = 0uLL;
      if (v406)
      {
        v407 = operator new();
        v274[495] = geo::MallocZoneAllocator::MallocZoneAllocator(v407, "GeoGL", 0xA3D02C1100000005);
        v284 = 0uLL;
      }
    }
    v283[15] = v274[495];
    v283[16] = 0;
    *((_OWORD *)v283 + 11) = v284;
    *((_OWORD *)v283 + 12) = v284;
    v283[26] = 0;
    v283[27] = -1;
    *((_OWORD *)v283 + 10) = v284;
    *((_OWORD *)v283 + 9) = xmmword_19FFB2DD0;
    *((_DWORD *)v283 + 34) = 0;
    v283[28] = &unk_1E42BD118;
    v283[29] = "Ground Ribbon Index Data";
    *((_DWORD *)v283 + 60) = 0;
    v283[3] = &off_1E42BD0F8;
    v283[4] = 2;
    *(_QWORD *)v614 = v283 + 3;
    *(_QWORD *)&v614[8] = v283;
    v286 = (char *)operator new(0xA8uLL);
    v590 = v273;
    *((_QWORD *)v286 + 1) = 0;
    *((_QWORD *)v286 + 2) = 0;
    *(_QWORD *)v286 = &off_1E42E48C0;
    v287 = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v597 = *(__n128 *)v614;
    memset(v614, 0, sizeof(v614));
    if ((v288 & 1) == 0)
    {
      v572 = v287;
      v287 = v572;
      if (v408)
      {
        if ((v409 & 1) == 0
        {
          ggl::MeshTyped<ggl::DaVinci::RibbonVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::ribbonVboReflection;
        }
        ggl::MeshTyped<ggl::DaVinci::RibbonVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::RibbonVbo>::attributesReflection(void)::r;
        unk_1ECE2FD28 = 1;
        v287 = v572;
      }
    }
    *((_QWORD *)v286 + 11) = 0;
    *((_QWORD *)v286 + 7) = 0;
    *((_QWORD *)v286 + 8) = 0;
    *((_DWORD *)v286 + 18) = 0;
    *((_QWORD *)v286 + 3) = &off_1E42BBC08;
    *((_QWORD *)v286 + 4) = "Ground Ribbon";
    *((_QWORD *)v286 + 5) = &unk_1E42BBC28;
    *((_QWORD *)v286 + 6) = 0;
    *((_QWORD *)v286 + 10) = &ggl::MeshTyped<ggl::DaVinci::RibbonVbo>::typedReflection(void)::r;
    *((_QWORD *)v286 + 12) = 0;
    *((_QWORD *)v286 + 13) = 0;
    if ((v289 & 1) == 0)
    {
      v573 = v287;
      v287 = v573;
      if (v410)
      {
        v411 = operator new();
        *(_QWORD *)(v411 + 16) = 0xA3D02C1100000005;
        *(_QWORD *)(v411 + 24) = "GeoGL";
        *(_OWORD *)(v411 + 32) = xmmword_19FFB2DE0;
        *(_QWORD *)v411 = &off_1E42B5668;
        *(_QWORD *)(v411 + 8) = "GeoGL";
        *(_OWORD *)(v411 + 72) = 0u;
        *(_OWORD *)(v411 + 88) = 0u;
        *(_OWORD *)(v411 + 104) = 0u;
        *(_OWORD *)(v411 + 120) = 0u;
        *(_OWORD *)(v411 + 136) = 0u;
        *(_OWORD *)(v411 + 152) = 0u;
        *(_OWORD *)(v411 + 168) = 0u;
        *(_OWORD *)(v411 + 184) = 0u;
        *(_OWORD *)(v411 + 200) = 0u;
        *(_OWORD *)(v411 + 216) = 0u;
        *(_OWORD *)(v411 + 232) = 0u;
        *(_QWORD *)(v411 + 248) = 0;
        *(_OWORD *)(v411 + 56) = 0u;
        v412 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v411 + 56), 0);
        if ((_DWORD)v412)
          geo::read_write_lock::logFailure(v412, (uint64_t)"initialization", v413);
        zone = malloc_create_zone(0, 0);
        *(_QWORD *)(v411 + 48) = zone;
        malloc_set_zone_name(zone, "GeoGL");
        *(_QWORD *)(v411 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        ggl::Allocator::instance(void)::alloc = v411;
        v287 = v573;
      }
    }
    v290 = ggl::Allocator::instance(void)::alloc;
    *((_QWORD *)v286 + 18) = 0;
    *((_QWORD *)v286 + 15) = 0;
    *((_QWORD *)v286 + 16) = 0;
    *((_QWORD *)v286 + 14) = v290;
    if ((v290 & 1) == 0)
    {
      v574 = v287;
      v287 = v574;
      if (v415)
      {
        v416 = operator new();
        *(_QWORD *)(v416 + 16) = 0xA3D02C1100000005;
        *(_QWORD *)(v416 + 24) = "GeoGL";
        *(_OWORD *)(v416 + 32) = xmmword_19FFB2DE0;
        *(_QWORD *)v416 = &off_1E42B5668;
        *(_QWORD *)(v416 + 8) = "GeoGL";
        *(_OWORD *)(v416 + 72) = 0u;
        *(_OWORD *)(v416 + 88) = 0u;
        *(_OWORD *)(v416 + 104) = 0u;
        *(_OWORD *)(v416 + 120) = 0u;
        *(_OWORD *)(v416 + 136) = 0u;
        *(_OWORD *)(v416 + 152) = 0u;
        *(_OWORD *)(v416 + 168) = 0u;
        *(_OWORD *)(v416 + 184) = 0u;
        *(_OWORD *)(v416 + 200) = 0u;
        *(_OWORD *)(v416 + 216) = 0u;
        *(_OWORD *)(v416 + 232) = 0u;
        *(_QWORD *)(v416 + 248) = 0;
        *(_OWORD *)(v416 + 56) = 0u;
        v417 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v416 + 56), 0);
        if ((_DWORD)v417)
          geo::read_write_lock::logFailure(v417, (uint64_t)"initialization", v418);
        v419 = malloc_create_zone(0, 0);
        *(_QWORD *)(v416 + 48) = v419;
        malloc_set_zone_name(v419, "GeoGL");
        *(_QWORD *)(v416 + 256) = os_log_create("com.apple.VectorKit", "Memory");
        ggl::Allocator::instance(void)::alloc = v416;
        v287 = v574;
      }
    }
    *((_QWORD *)v286 + 19) = ggl::Allocator::instance(void)::alloc;
    *((_QWORD *)v286 + 20) = 0;
    *((_QWORD *)v286 + 17) = v286 + 144;
    *((_QWORD *)v286 + 3) = &off_1E42BE078;
    *((_QWORD *)v286 + 5) = &unk_1E42BE098;
    *(_OWORD *)__p = v287;
    v291 = (std::__shared_weak_count *)*((_QWORD *)&v287 + 1);
    if (*((_QWORD *)&v287 + 1))
    {
      v292 = (unint64_t *)(*((_QWORD *)&v287 + 1) + 8);
      do
        v293 = __ldxr(v292);
      while (__stxr(v293 + 1, v292));
    }
    std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>((uint64_t)(v286 + 88), (uint64_t *)__p, (uint64_t *)&__p[16], 1uLL);
    v294 = *(std::__shared_weak_count **)&__p[8];
    v295 = v597;
    if (!*(_QWORD *)&__p[8])
      goto LABEL_432;
    v296 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v297 = __ldaxr(v296);
    while (__stlxr(v297 - 1, v296));
    if (!v297)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v294->__on_zero_shared)(v294, v597);
      std::__shared_weak_count::__release_weak(v294);
      v295 = v597;
      v298 = (std::__shared_weak_count *)v597.n128_u64[1];
      if (!v597.n128_u64[1])
        goto LABEL_435;
    }
    else
    {
LABEL_432:
      v298 = (std::__shared_weak_count *)v597.n128_u64[1];
      if (!v597.n128_u64[1])
        goto LABEL_435;
    }
    v299 = (unint64_t *)&v298->__shared_owners_;
    do
      v300 = __ldxr(v299);
    while (__stxr(v300 + 1, v299));
LABEL_435:
    v301 = (std::__shared_weak_count *)*((_QWORD *)v286 + 16);
    *(__n128 *)(v286 + 120) = v295;
    if (v301)
    {
      v302 = (unint64_t *)&v301->__shared_owners_;
      do
        v303 = __ldaxr(v302);
      while (__stlxr(v303 - 1, v302));
      if (!v303)
      {
        ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
        std::__shared_weak_count::__release_weak(v301);
      }
    }
    *((_QWORD *)v286 + 3) = &off_1E42BC310;
    *((_QWORD *)v286 + 5) = &unk_1E42BC330;
    if (!v298)
      goto LABEL_444;
    v304 = (unint64_t *)&v298->__shared_owners_;
    do
      v305 = __ldaxr(v304);
    while (__stlxr(v305 - 1, v304));
    if (!v305)
    {
      ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
      std::__shared_weak_count::__release_weak(v298);
      if (!v291)
        goto LABEL_452;
    }
    else
    {
LABEL_444:
      if (!v291)
        goto LABEL_452;
    }
    v306 = (unint64_t *)&v291->__shared_owners_;
    do
      v307 = __ldaxr(v306);
    while (__stlxr(v307 - 1, v306));
    if (!v307)
    {
      ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
      std::__shared_weak_count::__release_weak(v291);
    }
LABEL_452:
    *(_QWORD *)&v609 = v286 + 24;
    *((_QWORD *)&v609 + 1) = v286;
    v308 = *(std::__shared_weak_count **)&v614[8];
    if (!*(_QWORD *)&v614[8])
      goto LABEL_456;
    v309 = (unint64_t *)(*(_QWORD *)&v614[8] + 8);
    do
      v310 = __ldaxr(v309);
    while (__stlxr(v310 - 1, v309));
    if (!v310)
    {
      ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
      std::__shared_weak_count::__release_weak(v308);
      v311 = *(std::__shared_weak_count **)&buf[8];
      if (!*(_QWORD *)&buf[8])
        goto LABEL_462;
    }
    else
    {
LABEL_456:
      v311 = *(std::__shared_weak_count **)&buf[8];
      if (!*(_QWORD *)&buf[8])
        goto LABEL_462;
    }
    v312 = (unint64_t *)&v311->__shared_owners_;
    do
      v313 = __ldaxr(v312);
    while (__stlxr(v313 - 1, v312));
    if (!v313)
    {
      ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
      std::__shared_weak_count::__release_weak(v311);
    }
LABEL_462:
    v314 = **(_QWORD **)(v609 + 64);
    *(_QWORD *)__p = 0;
    *(_QWORD *)&__p[8] = 0;
    v315 = *(_QWORD *)(v314 + 8) * v581;
    v570 = v609;
    if (v315)
    {
      if (v585 && *(_BYTE *)(v314 + 17) != 2)
        v316 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v585 + 56))(v585, v314, 0, v315, 1, 1);
      else
        v316 = *(_QWORD *)(v314 + 72);
    }
    else
    {
      v316 = 0;
    }
    v317.n128_u64[0] = v585;
    v317.n128_u64[1] = v314;
    v582 = v317;
    *(__n128 *)__p = v317;
    *(_QWORD *)&__p[16] = 0;
    *(_QWORD *)&__p[24] = v315;
    v571 = v315;
    *(_QWORD *)&v620 = v316;
    *(_WORD *)&__p[32] = 257;
    v318 = v275 + (v273 << 6);
    v319 = *(_DWORD *)(v318 + 12);
    v320 = *v278;
    v321 = geo::codec::VectorTile::daVinciIndices(*v600);
    v325 = (v320 + v319);
    v326 = *(unsigned int *)(v318 + 12);
    if (v326 < v325)
    {
      v327 = 0;
      v328 = v569 + 12 * v568;
      v598 = 2 * v326;
      v329 = (unsigned __int16 *)(v321 + 2 * v326);
      v330 = (unsigned __int32 *)(v328 + 12 * *v329);
      v323.n128_u32[0] = v330[1];
      v322.n128_u32[0] = v330[2];
      v324.n128_u32[0] = *v330;
      _S13 = 0.0;
      while (1)
      {
        v338 = v329[v327 / 2];
        if (v326 < (v325 - 1))
          v338 = v329[v327 / 2 + 1];
        if (v329[v327 / 2] != 0xFFFF)
          break;
        v332 = v316 + 16 * (v327 - 1);
        v333 = v316 + 16 * v327;
        *(_DWORD *)v333 = *(_DWORD *)v332;
        v322.n128_u64[0] = *(_QWORD *)(v332 + 4);
        *(_QWORD *)(v333 + 4) = v322.n128_u64[0];
        *(_DWORD *)(v333 + 12) = *(_DWORD *)(v332 + 12);
        v334 = (float *)(v328 + 12 * v338);
        v335 = *v334;
        v336 = v334[1];
        v337 = v334[2];
LABEL_471:
        ++v326;
        v327 += 2;
        v322.n128_f32[0] = v337;
        v323.n128_f32[0] = v336;
        v324.n128_f32[0] = v335;
        if (v325 == v326)
          goto LABEL_502;
      }
      v339 = (float *)(v328 + 12 * v329[v327 / 2]);
      v335 = *v339;
      v336 = v339[1];
      v337 = v339[2];
      v340 = *v339;
      v341 = v336;
      v342 = v337;
      if (v338 != 0xFFFF)
      {
        v343 = (float *)(v328 + 12 * v338);
        v340 = *v343;
        v341 = v343[1];
        v342 = v343[2];
      }
      v344 = v340 - v324.n128_f32[0];
      v345 = v341 - v323.n128_f32[0];
      v346 = v342 - v322.n128_f32[0];
      v347 = (float)((float)(v344 * v344) + (float)(v345 * v345)) + (float)(v346 * v346);
      if (v347 < 1.0e-10)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v348 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v348, OS_LOG_TYPE_DEBUG))
        {
          v610[0] = *(_WORD *)(v607 + 168);
          v611 = *(_QWORD *)(v607 + 172);
          md::debugString<geo::QuadTile>(v614, v610);
          v349 = v614;
          if (v615 < 0)
            v349 = *(uint8_t **)v614;
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = v349;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v340;
          v622 = 2048;
          v623 = v341;
          v624 = 2048;
          v625 = v342;
          _os_log_impl(&dword_19F029000, v348, OS_LOG_TYPE_DEBUG, "Ground Tile Data Error: line strip for tile %s contains degenerate segment at position: (%f, %f, %f)", buf, 0x2Au);
          if (v615 < 0)
            operator delete(*(void **)v614);
        }
        goto LABEL_495;
      }
      v350 = 1.0 / sqrtf(v347);
      if ((float)(v350 * v346) >= 1.0)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v348 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v348, OS_LOG_TYPE_DEBUG))
        {
          v612[0] = *(_WORD *)(v607 + 168);
          v613 = *(_QWORD *)(v607 + 172);
          md::debugString<geo::QuadTile>(v614, v612);
          v354 = v614;
          if (v615 < 0)
            v354 = *(uint8_t **)v614;
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = v354;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v340;
          v622 = 2048;
          v623 = v341;
          v624 = 2048;
          v625 = v342;
          _os_log_impl(&dword_19F029000, v348, OS_LOG_TYPE_DEBUG, "Ground Tile Data Error: line strip for tile %s has segment going straight up at position: (%f, %f, %f)", buf, 0x2Au);
          if (v615 < 0)
            operator delete(*(void **)v614);
        }
LABEL_495:

        v322.n128_u32[0] = 0;
        v323.n128_u32[0] = 1.0;
      }
      else
      {
        v351 = v350 * v344;
        v352 = -(float)(v345 * v350);
        v353 = 1.0 / sqrtf((float)(v352 * v352) + (float)(v351 * v351));
        v323.n128_f32[0] = v353 * v352;
        v322.n128_f32[0] = v353 * v351;
      }
      v355 = (int)(float)(v335 * 16804.0);
      v356 = (int)(float)(v336 * 16804.0);
      v357 = v323.n128_f32[0] * 0.28126;
      v358 = v322.n128_f32[0] * 0.28126;
      _S2 = v357 + 0.5;
      _S3 = v358 + 0.5;
      __asm
      {
        FCVT            H2, S2
        FCVT            H3, S3
        FCVT            H4, S13
      }
      v364 = v316 + 16 * v327;
      *(_WORD *)v364 = v355;
      *(_WORD *)(v364 + 2) = v356;
      *(_WORD *)(v364 + 4) = LOWORD(_S2);
      v365 = (unint64_t *)(v364 + 4);
      *(_WORD *)(v364 + 6) = LOWORD(_S3);
      *(_WORD *)(v364 + 8) = 0;
      *(_WORD *)(v364 + 10) = _H4;
      *(float *)(v364 + 12) = v337;
      _S1 = 0.5 - v357;
      _S0 = 0.5 - v358;
      __asm { FCVT            H1, S1 }
      v368 = v316 + 16 * (v327 + 1);
      *(_WORD *)v368 = v355;
      *(_WORD *)(v368 + 2) = v356;
      *(_WORD *)(v368 + 4) = LOWORD(_S1);
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v368 + 6) = LOWORD(_S0);
      *(_WORD *)(v368 + 8) = 15360;
      *(_WORD *)(v368 + 10) = _H4;
      *(float *)(v368 + 12) = v337;
      if (v326 && *(__int16 *)(geo::codec::VectorTile::daVinciIndices(*v600) + v598 + v327 - 2) == -1)
      {
        v369 = v316 + 16 * (v327 - 1);
        *(_DWORD *)v369 = *(_DWORD *)v364;
        v322.n128_u64[0] = *v365;
        *(_QWORD *)(v369 + 4) = *v365;
        *(_DWORD *)(v369 + 12) = *(_DWORD *)(v364 + 12);
      }
      v370 = (float)((float)((float)(v340 - v335) * (float)(v340 - v335))
                   + (float)((float)(v341 - v336) * (float)(v341 - v336)))
           + (float)((float)(v342 - v337) * (float)(v342 - v337));
      v371 = sqrtf(v370);
      v372 = v370 <= 1.0e-10;
      v373 = 0.0;
      if (!v372)
        v373 = v371;
      _S13 = v373 + _S13;
      goto LABEL_471;
    }
LABEL_502:
    v374 = *(_QWORD *)(v570 + 96);
    v375 = *(_QWORD *)(v374 + 8) * v575;
    if (v375)
    {
      v376 = v576;
      v377 = v571;
      if (v585 && *(_BYTE *)(v374 + 17) != 2)
      {
        v378 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128))(*(_QWORD *)v585 + 56))(v585, *(_QWORD *)(v570 + 96), 0, *(_QWORD *)(v374 + 8) * v575, 1, 1, v322, v323, v324);
        if (!(_DWORD)v576)
          goto LABEL_517;
      }
      else
      {
        v378 = *(_QWORD *)(v374 + 72);
        if (!(_DWORD)v576)
          goto LABEL_517;
      }
    }
    else
    {
      v378 = 0;
      v376 = v576;
      v377 = v571;
      if (!(_DWORD)v576)
        goto LABEL_517;
    }
    if ((_DWORD)v376 == 1)
    {
      LODWORD(v379) = 0;
      v380 = (_WORD *)v378;
      goto LABEL_516;
    }
    v381 = 0;
    v379 = v376 & 0xFFFFFFFE;
    v382 = (_WORD *)(v378 + 12);
    do
    {
      *(v382 - 6) = 2 * v381;
      *v382 = (2 * v381) | 2;
      v383 = (2 * v381) | 3;
      *(v382 - 5) = (2 * v381) | 1;
      v382[1] = v383;
      *(v382 - 4) = (2 * v381) | 2;
      v382[2] = 2 * v381 + 4;
      *(v382 - 3) = (2 * v381) | 2;
      v382[3] = 2 * v381 + 4;
      *(v382 - 2) = (2 * v381) | 1;
      v382[4] = v383;
      v384 = 2 * v381 + 5;
      v381 += 2;
      *(v382 - 1) = v383;
      v382[5] = v384;
      v382 += 12;
    }
    while (v379 != v381);
    if (v379 != v376)
    {
      v380 = (_WORD *)(v378 + 12 * (v376 & 0xFFFFFFFE));
      do
      {
LABEL_516:
        *v380 = 2 * v379;
        v380[1] = (2 * v379) | 1;
        v380[2] = 2 * v379 + 2;
        v380[3] = 2 * v379 + 2;
        v380[4] = (2 * v379) | 1;
        v380[5] = 2 * v379 + 3;
        LODWORD(v379) = v379 + 1;
        v380 += 6;
      }
      while ((_DWORD)v376 != (_DWORD)v379);
    }
LABEL_517:
    if (v378 && v375 && v585 && *(_BYTE *)(v374 + 17) != 2)
      (*(void (**)(uint64_t, __n128, __n128, __n128))(*(_QWORD *)v585 + 64))(v585, v322, v323, v324);
    if (v316 && v377 && v582.n128_u64[0] && *(_BYTE *)(v582.n128_u64[1] + 17) != 2)
      (*(void (**)(__n128, __n128, __n128))(*(_QWORD *)v582.n128_u64[0] + 64))(v582, v323, v324);
    v385 = *(char **)(v607 + 1056);
    v386 = *(_QWORD *)(v607 + 1064);
    if ((unint64_t)v385 < v386)
    {
      *(_OWORD *)v385 = v609;
      *(_QWORD *)(v607 + 1056) = v385 + 16;
      v273 = v590;
      v274 = &unk_1ECE44000;
    }
    else
    {
      v387 = *(_BYTE **)(v607 + 1048);
      v388 = (v385 - v387) >> 4;
      v389 = v388 + 1;
      v273 = v590;
      v274 = (_QWORD *)&unk_1ECE44000;
      if ((unint64_t)(v388 + 1) >> 60)
        abort();
      v390 = v386 - (_QWORD)v387;
      if (v390 >> 3 > v389)
        v389 = v390 >> 3;
      if ((unint64_t)v390 >= 0x7FFFFFFFFFFFFFF0)
        v391 = 0xFFFFFFFFFFFFFFFLL;
      else
        v391 = v389;
      if (v391 >> 60)
        goto LABEL_788;
      v392 = (char *)operator new(16 * v391);
      v393 = &v392[16 * v388];
      *(_OWORD *)v393 = v609;
      v394 = v393 + 16;
      v395 = &v392[16 * v391];
      v609 = 0uLL;
      if (v385 == v387)
      {
        *(_QWORD *)(v607 + 1048) = v393;
        *(_QWORD *)(v607 + 1056) = v394;
        *(_QWORD *)(v607 + 1064) = v395;
      }
      else
      {
        do
        {
          v396 = *((_OWORD *)v385 - 1);
          v385 -= 16;
          *((_OWORD *)v393 - 1) = v396;
          v393 -= 16;
          *(_QWORD *)v385 = 0;
          *((_QWORD *)v385 + 1) = 0;
        }
        while (v385 != v387);
        v385 = *(char **)(v607 + 1048);
        v397 = *(char **)(v607 + 1056);
        *(_QWORD *)(v607 + 1048) = v393;
        *(_QWORD *)(v607 + 1056) = v394;
        *(_QWORD *)(v607 + 1064) = v395;
        while (v397 != v385)
        {
          v398 = (std::__shared_weak_count *)*((_QWORD *)v397 - 1);
          if (v398)
          {
            v399 = (unint64_t *)&v398->__shared_owners_;
            do
              v400 = __ldaxr(v399);
            while (__stlxr(v400 - 1, v399));
            if (!v400)
            {
              ((void (*)(std::__shared_weak_count *))v398->__on_zero_shared)(v398);
              std::__shared_weak_count::__release_weak(v398);
            }
          }
          v397 -= 16;
        }
      }
      if (v385)
        operator delete(v385);
      v401 = (std::__shared_weak_count *)*((_QWORD *)&v609 + 1);
      *(_QWORD *)(v607 + 1056) = v394;
      if (v401)
      {
        v402 = (unint64_t *)&v401->__shared_owners_;
        do
          v403 = __ldaxr(v402);
        while (__stlxr(v403 - 1, v402));
        if (!v403)
        {
          ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
          std::__shared_weak_count::__release_weak(v401);
        }
      }
    }
LABEL_418:
    ++v273;
  }
  while (v273 != v578);
  v420 = geo::codec::VectorTile::daVinciAssetCount(*v600);
  if (v420)
  {
    v421 = 0;
    v422 = 0;
    v423 = v420;
    do
    {
      v424 = geo::codec::VectorTile::daVinciAssets(*v600);
      v425 = *(unsigned __int16 *)(v424 + 40 * v421);
      if (*(_WORD *)(v424 + 40 * v421))
      {
        v426 = *(unsigned __int16 **)(v424 + 40 * v421 + 8);
        while (1)
        {
          v427 = *v426;
          v426 += 16;
          if ((__bb[v427] & 0x80000000) == 0)
            break;
          if (!--v425)
            goto LABEL_573;
        }
        ++v422;
      }
LABEL_573:
      ++v421;
    }
    while (v421 != v423);
    v428 = *(char **)(v607 + 1072);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v607 + 1088) - (_QWORD)v428) >> 3) < v422)
    {
      if (v422 > 0x492492492492492)
        abort();
      v429 = *(_BYTE **)(v607 + 1080);
      v430 = (char *)operator new(56 * v422);
      v431 = &v430[56 * v422];
      v432 = &v430[v429 - v428];
      if (v429 == v428)
      {
        *(_QWORD *)(v607 + 1072) = v432;
        *(_QWORD *)(v607 + 1080) = v432;
        *(_QWORD *)(v607 + 1088) = v431;
        if (v428)
          goto LABEL_587;
      }
      else
      {
        v433 = 0;
        do
        {
          v434 = &v432[v433];
          v435 = &v429[v433];
          *(v434 - 56) = v429[v433 - 56];
          *((_OWORD *)v434 - 3) = *(_OWORD *)&v429[v433 - 48];
          *((_QWORD *)v434 - 4) = *(_QWORD *)&v429[v433 - 32];
          *((_QWORD *)v435 - 6) = 0;
          *((_QWORD *)v435 - 5) = 0;
          *((_QWORD *)v435 - 4) = 0;
          *(_OWORD *)(v434 - 24) = *(_OWORD *)&v429[v433 - 24];
          *((_QWORD *)v434 - 1) = *(_QWORD *)&v429[v433 - 8];
          *((_QWORD *)v435 - 3) = 0;
          *((_QWORD *)v435 - 2) = 0;
          *((_QWORD *)v435 - 1) = 0;
          v433 -= 56;
        }
        while (&v429[v433] != v428);
        v428 = *(char **)(v607 + 1072);
        v436 = *(char **)(v607 + 1080);
        *(_QWORD *)(v607 + 1072) = &v432[v433];
        *(_QWORD *)(v607 + 1080) = v432;
        *(_QWORD *)(v607 + 1088) = v431;
        while (v436 != v428)
          md::DaVinciGroundTileData::RibbonAsset::~RibbonAsset((md::DaVinciGroundTileData::RibbonAsset *)(v436 - 56));
        if (v428)
LABEL_587:
          operator delete(v428);
      }
    }
    v437 = 0;
    v586 = v423;
    while (1)
    {
      v438 = geo::codec::VectorTile::daVinciAssets(*v600);
      v591 = v437;
      v439 = (_WORD *)(v438 + 40 * v437);
      if (*v439)
        break;
LABEL_589:
      v437 = v591 + 1;
      if (v591 + 1 == v586)
        goto LABEL_761;
    }
    v440 = 0;
    v441 = 0;
    v442 = (_QWORD *)(v438 + 40 * v437 + 8);
    v599 = (_WORD *)(v438 + 40 * v437);
    v603 = v442;
    while (2)
    {
      v444 = __bb[*(unsigned __int16 *)(*v442 + 32 * v440)];
      if ((v444 & 0x80000000) == 0)
      {
        if (v441)
          goto LABEL_672;
        v445 = *(_QWORD *)(*v442 + 32 * v440 + 8) == 0;
        __p[0] = v445;
        memset(&__p[8], 0, 32);
        v620 = 0u;
        v446 = *(char **)(v607 + 1080);
        v447 = *(_QWORD *)(v607 + 1088);
        if ((unint64_t)v446 < v447)
        {
          *v446 = v445;
          *((_QWORD *)v446 + 3) = 0;
          *((_QWORD *)v446 + 4) = 0;
          *((_QWORD *)v446 + 1) = 0;
          *((_QWORD *)v446 + 2) = 0;
          memset(&__p[8], 0, 24);
          *((_QWORD *)v446 + 5) = 0;
          *((_QWORD *)v446 + 6) = 0;
          v620 = 0uLL;
          *(_QWORD *)&__p[32] = 0;
          *(_QWORD *)(v607 + 1080) = v446 + 56;
          goto LABEL_660;
        }
        v448 = *(char **)(v607 + 1072);
        v449 = 0x6DB6DB6DB6DB6DB7 * ((v446 - v448) >> 3) + 1;
        if (v449 > 0x492492492492492)
          abort();
        v450 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v447 - (_QWORD)v448) >> 3);
        if (2 * v450 > v449)
          v449 = 2 * v450;
        if (v450 >= 0x249249249249249)
          v451 = 0x492492492492492;
        else
          v451 = v449;
        if (v451 > 0x492492492492492)
          goto LABEL_788;
        v452 = (char *)operator new(56 * v451);
        v453 = (BOOL *)&v452[8 * ((v446 - v448) >> 3)];
        *v453 = v445;
        *((_QWORD *)v453 + 1) = 0;
        *((_QWORD *)v453 + 2) = 0;
        v454 = &v452[56 * v451];
        *((_QWORD *)v453 + 3) = 0;
        *((_QWORD *)v453 + 4) = 0;
        memset(&__p[8], 0, 24);
        *((_QWORD *)v453 + 5) = 0;
        *((_QWORD *)v453 + 6) = 0;
        v620 = 0uLL;
        v455 = (char *)(v453 + 56);
        *(_QWORD *)&__p[32] = 0;
        if (v446 == v448)
        {
          *(_QWORD *)(v607 + 1072) = v453;
          *(_QWORD *)(v607 + 1080) = v455;
          *(_QWORD *)(v607 + 1088) = v454;
        }
        else
        {
          v456 = 0;
          do
          {
            v457 = (char *)&v453[v456];
            v458 = &v446[v456];
            *(v457 - 56) = v446[v456 - 56];
            *((_OWORD *)v457 - 3) = *(_OWORD *)&v446[v456 - 48];
            *((_QWORD *)v457 - 4) = *(_QWORD *)&v446[v456 - 32];
            *((_QWORD *)v458 - 6) = 0;
            *((_QWORD *)v458 - 5) = 0;
            *((_QWORD *)v458 - 4) = 0;
            *(_OWORD *)(v457 - 24) = *(_OWORD *)&v446[v456 - 24];
            *((_QWORD *)v457 - 1) = *(_QWORD *)&v446[v456 - 8];
            *((_QWORD *)v458 - 3) = 0;
            *((_QWORD *)v458 - 2) = 0;
            *((_QWORD *)v458 - 1) = 0;
            v456 -= 56;
          }
          while (&v446[v456] != v448);
          v446 = *(char **)(v607 + 1072);
          v459 = *(char **)(v607 + 1080);
          *(_QWORD *)(v607 + 1072) = &v453[v456];
          *(_QWORD *)(v607 + 1080) = v455;
          *(_QWORD *)(v607 + 1088) = v454;
          while (v459 != v446)
          {
            v461 = *((_QWORD *)v459 - 3);
            if (!v461)
              goto LABEL_631;
            v462 = *((_QWORD *)v459 - 2);
            v463 = (void *)*((_QWORD *)v459 - 3);
            if (v462 != v461)
            {
              while (1)
              {
                v464 = *(std::__shared_weak_count **)(v462 - 8);
                if (!v464)
                  goto LABEL_622;
                v465 = (unint64_t *)&v464->__shared_owners_;
                do
                  v466 = __ldaxr(v465);
                while (__stlxr(v466 - 1, v465));
                if (!v466)
                {
                  ((void (*)(std::__shared_weak_count *))v464->__on_zero_shared)(v464);
                  std::__shared_weak_count::__release_weak(v464);
                  v467 = *(std::__shared_weak_count **)(v462 - 24);
                  if (v467)
                  {
LABEL_623:
                    v468 = (unint64_t *)&v467->__shared_owners_;
                    do
                      v469 = __ldaxr(v468);
                    while (__stlxr(v469 - 1, v468));
                    if (!v469)
                    {
                      ((void (*)(std::__shared_weak_count *))v467->__on_zero_shared)(v467);
                      std::__shared_weak_count::__release_weak(v467);
                    }
                  }
                }
                else
                {
LABEL_622:
                  v467 = *(std::__shared_weak_count **)(v462 - 24);
                  if (v467)
                    goto LABEL_623;
                }
                v462 -= 32;
                if (v462 == v461)
                {
                  v463 = (void *)*((_QWORD *)v459 - 3);
                  break;
                }
              }
            }
            *((_QWORD *)v459 - 2) = v461;
            operator delete(v463);
LABEL_631:
            v470 = *((_QWORD *)v459 - 6);
            if (v470)
            {
              v471 = *((_QWORD *)v459 - 5);
              v460 = (void *)*((_QWORD *)v459 - 6);
              if (v471 != v470)
              {
                do
                {
                  v472 = *(std::__shared_weak_count **)(v471 - 16);
                  if (v472)
                  {
                    v473 = (unint64_t *)&v472->__shared_owners_;
                    do
                      v474 = __ldaxr(v473);
                    while (__stlxr(v474 - 1, v473));
                    if (!v474)
                    {
                      ((void (*)(std::__shared_weak_count *))v472->__on_zero_shared)(v472);
                      std::__shared_weak_count::__release_weak(v472);
                    }
                  }
                  v471 -= 24;
                }
                while (v471 != v470);
                v460 = (void *)*((_QWORD *)v459 - 6);
              }
              *((_QWORD *)v459 - 5) = v470;
              operator delete(v460);
            }
            v459 -= 56;
          }
        }
        if (v446)
          operator delete(v446);
        v475 = *(char **)&__p[32];
        *(_QWORD *)(v607 + 1080) = v455;
        v439 = v599;
        if (v475)
        {
          v476 = (char *)v620;
          v477 = v475;
          if ((char *)v620 == v475)
          {
LABEL_659:
            *(_QWORD *)&v620 = v475;
            operator delete(v477);
            goto LABEL_660;
          }
          while (2)
          {
            v478 = (std::__shared_weak_count *)*((_QWORD *)v476 - 1);
            if (!v478)
              goto LABEL_651;
            v479 = (unint64_t *)&v478->__shared_owners_;
            do
              v480 = __ldaxr(v479);
            while (__stlxr(v480 - 1, v479));
            if (!v480)
            {
              ((void (*)(std::__shared_weak_count *))v478->__on_zero_shared)(v478);
              std::__shared_weak_count::__release_weak(v478);
              v481 = (std::__shared_weak_count *)*((_QWORD *)v476 - 3);
              if (v481)
              {
LABEL_652:
                v482 = (unint64_t *)&v481->__shared_owners_;
                do
                  v483 = __ldaxr(v482);
                while (__stlxr(v483 - 1, v482));
                if (!v483)
                {
                  ((void (*)(std::__shared_weak_count *))v481->__on_zero_shared)(v481);
                  std::__shared_weak_count::__release_weak(v481);
                }
              }
            }
            else
            {
LABEL_651:
              v481 = (std::__shared_weak_count *)*((_QWORD *)v476 - 3);
              if (v481)
                goto LABEL_652;
            }
            v476 -= 32;
            if (v476 == v475)
            {
              v477 = *(char **)&__p[32];
              goto LABEL_659;
            }
            continue;
          }
        }
LABEL_660:
        v484 = *(char **)&__p[8];
        v442 = v603;
        if (*(_QWORD *)&__p[8])
        {
          v485 = *(char **)&__p[16];
          if (*(_QWORD *)&__p[16] != *(_QWORD *)&__p[8])
          {
            do
            {
              v486 = (std::__shared_weak_count *)*((_QWORD *)v485 - 2);
              if (v486)
              {
                v487 = (unint64_t *)&v486->__shared_owners_;
                do
                  v488 = __ldaxr(v487);
                while (__stlxr(v488 - 1, v487));
                if (!v488)
                {
                  ((void (*)(std::__shared_weak_count *))v486->__on_zero_shared)(v486);
                  std::__shared_weak_count::__release_weak(v486);
                }
              }
              v485 -= 24;
            }
            while (v485 != v484);
            v484 = *(char **)&__p[8];
            v442 = v603;
          }
          operator delete(v484);
        }
        v441 = *(_QWORD *)(v607 + 1080) - 56;
LABEL_672:
        v489 = *(_QWORD *)(v607 + 1048);
        if (v444 < (*(_QWORD *)(v607 + 1056) - v489) >> 4)
        {
          if (*(_BYTE *)v441)
          {
            v490 = *v592;
            md::createFeatureAttributeSet((gss::Allocator *)__p, (uint64_t *)(*v442 + 32 * v440 + 16));
            *(_QWORD *)&buf[7] = 0;
            *(_QWORD *)buf = 0;
            buf[15] = 1;
            gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)v614, v490, (gss::FeatureAttributeSet *)__p, (gss::QueryOverrides *)buf);
            if (!buf[14] && *(_QWORD *)buf)
            {
              v492 = gss::Allocator::instance(v491);
              (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v492 + 40))(v492, *(_QWORD *)buf, *(unsigned __int16 *)&buf[12]);
            }
            if (*(_QWORD *)__p)
            {
              *(_QWORD *)&__p[8] = *(_QWORD *)__p;
              (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)&__p[24] + 40))(*(_QWORD *)&__p[24], *(_QWORD *)__p, *(_QWORD *)&__p[16] - *(_QWORD *)__p);
            }
            v493 = *(_QWORD *)(v607 + 1048);
            v494 = *(_QWORD *)(v441 + 40);
            v495 = *(_QWORD *)(v441 + 48);
            if (v494 < v495)
            {
              v496 = *(_OWORD *)(v493 + 16 * v444);
              *(_OWORD *)v494 = v496;
              if (*((_QWORD *)&v496 + 1))
              {
                v497 = (unint64_t *)(*((_QWORD *)&v496 + 1) + 8);
                do
                  v498 = __ldxr(v497);
                while (__stxr(v498 + 1, v497));
              }
              v499 = *(_QWORD *)&v614[8];
              *(_QWORD *)(v494 + 16) = *(_QWORD *)v614;
              *(_QWORD *)(v494 + 24) = v499;
              if (v499)
              {
                v500 = (unint64_t *)(v499 + 8);
                do
                  v501 = __ldxr(v500);
                while (__stxr(v501 + 1, v500));
              }
              v502 = (char *)(v494 + 32);
              goto LABEL_737;
            }
            v509 = *(_QWORD *)(v441 + 32);
            v510 = (uint64_t)(v494 - v509) >> 5;
            v511 = v510 + 1;
            if ((unint64_t)(v510 + 1) >> 59)
              abort();
            v512 = v495 - v509;
            if (v512 >> 4 > v511)
              v511 = v512 >> 4;
            if ((unint64_t)v512 >= 0x7FFFFFFFFFFFFFE0)
              v513 = 0x7FFFFFFFFFFFFFFLL;
            else
              v513 = v511;
            if (v513)
            {
              if (!(v513 >> 59))
              {
                v514 = (char *)operator new(32 * v513);
                goto LABEL_711;
              }
LABEL_788:
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            v514 = 0;
LABEL_711:
            v521 = &v514[32 * v510];
            v522 = *(_OWORD *)(v493 + 16 * v444);
            *(_OWORD *)v521 = v522;
            if (*((_QWORD *)&v522 + 1))
            {
              v523 = (unint64_t *)(*((_QWORD *)&v522 + 1) + 8);
              do
                v524 = __ldxr(v523);
              while (__stxr(v524 + 1, v523));
            }
            v525 = *(_QWORD *)&v614[8];
            *((_QWORD *)v521 + 2) = *(_QWORD *)v614;
            *((_QWORD *)v521 + 3) = v525;
            if (v525)
            {
              v526 = (unint64_t *)(v525 + 8);
              do
                v527 = __ldxr(v526);
              while (__stxr(v527 + 1, v526));
            }
            v528 = &v514[32 * v513];
            v502 = v521 + 32;
            v529 = *(char **)(v441 + 32);
            v530 = *(char **)(v441 + 40);
            if (v530 != v529)
            {
              do
              {
                v531 = *((_OWORD *)v530 - 2);
                v530 -= 32;
                *((_OWORD *)v521 - 2) = v531;
                v521 -= 32;
                *(_QWORD *)v530 = 0;
                *((_QWORD *)v530 + 1) = 0;
                *((_OWORD *)v521 + 1) = *((_OWORD *)v530 + 1);
                *((_QWORD *)v530 + 2) = 0;
                *((_QWORD *)v530 + 3) = 0;
              }
              while (v530 != v529);
              v530 = *(char **)(v441 + 32);
              v532 = *(char **)(v441 + 40);
              *(_QWORD *)(v441 + 32) = v521;
              *(_QWORD *)(v441 + 40) = v502;
              *(_QWORD *)(v441 + 48) = v528;
              while (2)
              {
                if (v532 == v530)
                  goto LABEL_734;
                v533 = (std::__shared_weak_count *)*((_QWORD *)v532 - 1);
                if (!v533)
                  goto LABEL_726;
                v534 = (unint64_t *)&v533->__shared_owners_;
                do
                  v535 = __ldaxr(v534);
                while (__stlxr(v535 - 1, v534));
                if (!v535)
                {
                  ((void (*)(std::__shared_weak_count *))v533->__on_zero_shared)(v533);
                  std::__shared_weak_count::__release_weak(v533);
                  v536 = (std::__shared_weak_count *)*((_QWORD *)v532 - 3);
                  if (v536)
                  {
LABEL_727:
                    v537 = (unint64_t *)&v536->__shared_owners_;
                    do
                      v538 = __ldaxr(v537);
                    while (__stlxr(v538 - 1, v537));
                    if (!v538)
                    {
                      ((void (*)(std::__shared_weak_count *))v536->__on_zero_shared)(v536);
                      std::__shared_weak_count::__release_weak(v536);
                    }
                  }
                }
                else
                {
LABEL_726:
                  v536 = (std::__shared_weak_count *)*((_QWORD *)v532 - 3);
                  if (v536)
                    goto LABEL_727;
                }
                v532 -= 32;
                continue;
              }
            }
            *(_QWORD *)(v441 + 32) = v521;
            *(_QWORD *)(v441 + 40) = v502;
            *(_QWORD *)(v441 + 48) = v528;
LABEL_734:
            if (v530)
              operator delete(v530);
            v442 = v603;
LABEL_737:
            *(_QWORD *)(v441 + 40) = v502;
            v539 = *(std::__shared_weak_count **)&v614[8];
            v439 = v599;
            if (*(_QWORD *)&v614[8])
            {
              v540 = (unint64_t *)(*(_QWORD *)&v614[8] + 8);
              do
                v541 = __ldaxr(v540);
              while (__stlxr(v541 - 1, v540));
              if (!v541)
              {
                ((void (*)(std::__shared_weak_count *))v539->__on_zero_shared)(v539);
                std::__shared_weak_count::__release_weak(v539);
              }
            }
          }
          else
          {
            v503 = (_QWORD *)(*v442 + 32 * v440 + 8);
            v505 = *(char **)(v441 + 16);
            v504 = *(_QWORD *)(v441 + 24);
            if ((unint64_t)v505 >= v504)
            {
              v515 = *(char **)(v441 + 8);
              v516 = 0xAAAAAAAAAAAAAAABLL * ((v505 - v515) >> 3);
              v517 = v516 + 1;
              if (v516 + 1 > 0xAAAAAAAAAAAAAAALL)
                abort();
              v518 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v504 - (_QWORD)v515) >> 3);
              if (2 * v518 > v517)
                v517 = 2 * v518;
              if (v518 >= 0x555555555555555)
                v519 = 0xAAAAAAAAAAAAAAALL;
              else
                v519 = v517;
              if (v519)
              {
                if (v519 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_788;
                v520 = operator new(24 * v519);
              }
              else
              {
                v520 = 0;
              }
              v542 = (char *)&v520[(v505 - v515) >> 3];
              v543 = *(_OWORD *)(v489 + 16 * v444);
              *(_OWORD *)v542 = v543;
              if (*((_QWORD *)&v543 + 1))
              {
                v544 = (unint64_t *)(*((_QWORD *)&v543 + 1) + 8);
                do
                  v545 = __ldxr(v544);
                while (__stxr(v545 + 1, v544));
                v515 = *(char **)(v441 + 8);
                v505 = *(char **)(v441 + 16);
              }
              v546 = (char *)&v520[3 * v519];
              v520[3 * v516 + 2] = *v503;
              v443 = v542 + 24;
              if (v505 == v515)
              {
                *(_QWORD *)(v441 + 8) = v542;
                *(_QWORD *)(v441 + 16) = v443;
                *(_QWORD *)(v441 + 24) = v546;
              }
              else
              {
                do
                {
                  v547 = *(_OWORD *)(v505 - 24);
                  v505 -= 24;
                  *(_OWORD *)(v542 - 24) = v547;
                  v542 -= 24;
                  *(_QWORD *)v505 = 0;
                  *((_QWORD *)v505 + 1) = 0;
                  *((_QWORD *)v542 + 2) = *((_QWORD *)v505 + 2);
                }
                while (v505 != v515);
                v515 = *(char **)(v441 + 8);
                v548 = *(char **)(v441 + 16);
                *(_QWORD *)(v441 + 8) = v542;
                *(_QWORD *)(v441 + 16) = v443;
                *(_QWORD *)(v441 + 24) = v546;
                while (v548 != v515)
                {
                  v549 = (std::__shared_weak_count *)*((_QWORD *)v548 - 2);
                  if (v549)
                  {
                    v550 = (unint64_t *)&v549->__shared_owners_;
                    do
                      v551 = __ldaxr(v550);
                    while (__stlxr(v551 - 1, v550));
                    if (!v551)
                    {
                      ((void (*)(std::__shared_weak_count *))v549->__on_zero_shared)(v549);
                      std::__shared_weak_count::__release_weak(v549);
                    }
                  }
                  v548 -= 24;
                }
              }
              if (v515)
                operator delete(v515);
              v442 = v603;
            }
            else
            {
              v506 = *(_OWORD *)(v489 + 16 * v444);
              *(_OWORD *)v505 = v506;
              if (*((_QWORD *)&v506 + 1))
              {
                v507 = (unint64_t *)(*((_QWORD *)&v506 + 1) + 8);
                do
                  v508 = __ldxr(v507);
                while (__stxr(v508 + 1, v507));
              }
              *((_QWORD *)v505 + 2) = *v503;
              v443 = v505 + 24;
            }
            *(_QWORD *)(v441 + 16) = v443;
            v439 = v599;
          }
        }
      }
      if (++v440 >= (unint64_t)(unsigned __int16)*v439)
        goto LABEL_589;
      continue;
    }
  }
LABEL_761:
  operator delete(__bb);
LABEL_762:
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v552 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v552))
  {
    *(_WORD *)__p = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v552, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "BuildRibbons", (const char *)&unk_1A0189141, __p, 2u);
  }

  v553 = *(unint64_t **)(v567 + 32);
  v554 = operator new(0x28uLL);
  v555 = v608;
  *v554 = &off_1E42D9D40;
  v554[1] = v607;
  v554[2] = v600;
  v554[3] = &v608;
  v554[4] = v553;
  *(_QWORD *)&__p[24] = v554;
  md::DaVinciGroundTileData::_buildDecals((_QWORD *)v607, v600, v555, v553);
  v556 = *(_QWORD **)&__p[24];
  if (*(_BYTE **)&__p[24] == __p)
  {
    v557 = 4;
    v556 = __p;
LABEL_770:
    (*(void (**)(void))(*v556 + 8 * v557))();
  }
  else if (*(_QWORD *)&__p[24])
  {
    v557 = 5;
    goto LABEL_770;
  }
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v558 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v558))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v558, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "BuildBuildings", (const char *)&unk_1A0189141, buf, 2u);
  }

  if (md::DaVinciGroundTileData::_buildingCount(v607, v600))
  {
    v559 = *(_QWORD *)(v567 + 32);
    v560 = *(float **)(v567 + 48);
    v561 = *(_OWORD **)(v567 + 56);
    v562 = COERCE_DOUBLE(operator new(0x38uLL));
    v563 = v608;
    **(_QWORD **)&v562 = &off_1E42D9D88;
    *(_QWORD *)(*(_QWORD *)&v562 + 8) = v607;
    *(_QWORD *)(*(_QWORD *)&v562 + 16) = v600;
    *(_QWORD *)(*(_QWORD *)&v562 + 24) = &v608;
    *(_QWORD *)(*(_QWORD *)&v562 + 32) = v559;
    *(_QWORD *)(*(_QWORD *)&v562 + 40) = v560;
    *(_QWORD *)(*(_QWORD *)&v562 + 48) = v561;
    v623 = v562;
    md::DaVinciGroundTileData::_buildBuildings(v607, v600, v563, v560, v561);
    v564 = v623;
    if (*(_BYTE **)&v623 == buf)
    {
      v565 = 4;
      v564 = COERCE_DOUBLE(buf);
LABEL_780:
      (*(void (**)(void))(**(_QWORD **)&v564 + 8 * v565))();
    }
    else if (v623 != 0.0)
    {
      v565 = 5;
      goto LABEL_780;
    }
  }
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v566 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v566))
  {
    *(_WORD *)v614 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v566, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "BuildBuildings", (const char *)&unk_1A0189141, v614, 2u);
  }

}

void sub_19F31C850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42,void *__p)
{
  operator delete(__p);
  _Unwind_Resume(a1);
}

void md::DaVinciGroundTileData::_buildDecals(_QWORD *a1, geo::codec::VectorTile **a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v4;
  NSObject *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  gss::Allocator *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int16 v21;
  int v22;
  int v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint8x8_t v34;
  _QWORD **v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  float v39;
  _BOOL8 v40;
  unint64_t v41;
  unint64_t v42;
  size_t prime;
  _QWORD **v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t *v50;
  unint64_t v51;
  float v52;
  _BOOL8 v53;
  unint64_t v54;
  unint64_t v55;
  size_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  _QWORD **v60;
  size_t v61;
  size_t v62;
  size_t v63;
  _QWORD *j;
  size_t v65;
  uint64_t v66;
  unint64_t v67;
  uint8x8_t v68;
  uint64_t v69;
  unint64_t v70;
  uint8x8_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  _QWORD **v76;
  size_t v77;
  size_t v78;
  size_t v79;
  _QWORD *i;
  size_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  size_t v85;
  uint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  size_t v108;
  _QWORD *v109;
  _QWORD *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  __int16 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *p_shared_owners;
  unint64_t v128;
  void *v129;
  void *v130;
  NSObject *v131;
  NSObject *v132;
  unint64_t v133;
  uint64_t **k;
  char *v135;
  char *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t **m;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  char *v146;
  char *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  NSObject *v151;
  NSObject *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  __int128 v161;
  char *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  char *v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  _QWORD *v171;
  char *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  char *v177;
  char *v178;
  __int128 v179;
  unint64_t *v180;
  unint64_t v181;
  char *v182;
  __int128 v183;
  char *v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  char *v204;
  uint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t v214;
  char *v215;
  uint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  char *v219;
  char *v220;
  char *v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  char *v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float32x2_t v243;
  float v244;
  float32x4_t v250;
  uint64_t *v251;
  float32x4_t v252;
  int8x16_t v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t *v257;
  uint64_t v258;
  int v259;
  unint64_t v260;
  int8x8_t v261;
  uint8x8_t v262;
  uint64_t v263;
  _QWORD *v264;
  _QWORD *v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *n;
  uint64_t v274;
  _QWORD *v275;
  uint64_t v276;
  int8x8_t v277;
  uint8x8_t v278;
  uint64_t v279;
  _QWORD *v280;
  _QWORD *v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  uint64_t v287;
  _QWORD *v288;
  char v289;
  _DWORD *v290;
  unint64_t v291;
  _QWORD *ii;
  uint64_t v293;
  unint64_t v294;
  char *v295;
  _DWORD *v296;
  char *v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  _BYTE *v303;
  _QWORD *v304;
  _DWORD *v305;
  unint64_t v306;
  uint64_t v307;
  _OWORD *v308;
  char *v309;
  uint64_t v310;
  __int128 v311;
  int v312;
  uint64_t v313;
  int8x8_t v314;
  uint8x8_t v315;
  uint64_t v316;
  _QWORD *v317;
  _QWORD *v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  _QWORD *v323;
  uint64_t v324;
  _QWORD *v325;
  char v326;
  unint64_t v327;
  _QWORD *jj;
  uint64_t v329;
  unint64_t v330;
  _BYTE *v331;
  uint64_t v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  size_t v337;
  char *v338;
  _QWORD *v339;
  char *v340;
  char *v341;
  uint64_t v342;
  int8x8_t v343;
  uint8x8_t v344;
  uint64_t v345;
  _QWORD *v346;
  _QWORD *v347;
  uint64_t v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  _QWORD *v352;
  uint64_t v353;
  _QWORD *v354;
  char v355;
  unint64_t v356;
  _QWORD *v357;
  uint64_t v358;
  unint64_t v359;
  _BYTE *v360;
  uint64_t v361;
  char *v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  size_t v366;
  char *v367;
  char *v368;
  char *v369;
  _QWORD *kk;
  uint64_t v371;
  uint64_t v372;
  int8x8_t v373;
  uint8x8_t v374;
  uint64_t v375;
  _QWORD *v376;
  _QWORD *v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  _QWORD *v382;
  uint64_t v383;
  uint64_t v384;
  _QWORD *v385;
  char v386;
  _QWORD *v387;
  uint64_t v388;
  _QWORD *v389;
  uint64_t v390;
  unint64_t v391;
  char *v392;
  _QWORD *v393;
  char *v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  unint64_t v398;
  _BYTE *v399;
  _QWORD *v400;
  _QWORD *v401;
  unint64_t v402;
  uint64_t v403;
  _OWORD *v404;
  char *v405;
  uint64_t v406;
  __int128 v407;
  uint64_t v408;
  uint64_t v409;
  NSObject *v410;
  char *v411;
  char *v412;
  void *v413;
  void *v414;
  std::__shared_weak_count *v415;
  unint64_t *v416;
  unint64_t v417;
  char *v418;
  _QWORD *v420;
  uint64_t v421;
  char *v422;
  unint64_t v424;
  __int128 v425;
  uint64_t *v426;
  int64x2_t buf;
  uint64_t v428;
  uint64_t v429;
  _BYTE v430[20];
  __int128 v431;
  __int128 v432;
  __int128 v433;
  int v434;
  int v435;
  __int128 v436;
  void *v437;
  char *v438;
  char *v439;
  unint64_t v440;
  std::__shared_weak_count *v441;
  void *__p[2];
  __int128 v443;
  float v444;
  __int128 v445;
  __int128 v446;
  float v447;
  __int128 v448;
  __int128 v449;
  int v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  _BYTE v455[24];
  _BYTE v456[24];
  uint64_t v457;
  uint64_t v458;
  __int128 *v459;
  unint64_t *v460;
  uint64_t v461;

  v461 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = 0u;
  v443 = 0u;
  v445 = 0u;
  v446 = 0u;
  v444 = 1.0;
  v447 = 1.0;
  v448 = 0u;
  v449 = 0u;
  v450 = 1065353216;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v7 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v7))
  {
    buf.i16[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v7, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "ReadDecal", (const char *)&unk_1A0189141, (uint8_t *)&buf, 2u);
  }

  v8 = 0;
  v420 = a1;
  while (v8 < geo::codec::VectorTile::daVinciDecalCount(*a2))
  {
    v9 = geo::codec::VectorTile::daVinciDecals(*a2);
    v10 = v9;
    v11 = v9 + 72 * v8;
    if (*(_QWORD *)v11)
    {
      v457 = 0;
      v458 = 0;
    }
    else
    {
      v4 = *a4;
      md::createFeatureAttributeSet((gss::Allocator *)&buf, (uint64_t *)(v9 + 72 * v8 + 48));
      *(_QWORD *)((char *)&v451 + 7) = 0;
      *(_QWORD *)&v451 = 0;
      HIBYTE(v451) = 1;
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v457, v4, (gss::FeatureAttributeSet *)&buf, (gss::QueryOverrides *)&v451);
      if (!BYTE14(v451) && (_QWORD)v451)
      {
        v13 = gss::Allocator::instance(v12);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 40))(v13, v451, WORD6(v451));
      }
      if (buf.i64[0])
      {
        buf.i64[1] = buf.i64[0];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v429 + 40))(v429, buf.i64[0], v428 - buf.i64[0]);
      }
    }
    v14 = v10 + 72 * v8;
    v15 = *(_DWORD *)(v14 + 32);
    v425 = *(_OWORD *)(v14 + 8);
    v16 = *(_QWORD *)(v14 + 24);
    v17 = geo::codec::VectorTile::daVinciMeshes(*a2);
    v18 = v10 + 72 * v8;
    v19 = v17 + ((unint64_t)*(unsigned __int16 *)(v18 + 66) << 6);
    v20 = *(_QWORD *)v11;
    v21 = *(_WORD *)(v18 + 64);
    v23 = *(_DWORD *)(v18 + 36);
    v22 = *(_DWORD *)(v18 + 40);
    if (*(_QWORD *)v11)
    {
      v24 = *((_QWORD *)&v445 + 1);
      if (*((_QWORD *)&v445 + 1))
      {
        v25 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v445 + 8));
        v25.i16[0] = vaddlv_u8(v25);
        if (v25.u32[0] > 1uLL)
        {
          v11 = *(_QWORD *)v11;
          if (v20 >= *((_QWORD *)&v445 + 1))
            v11 = v20 % *((_QWORD *)&v445 + 1);
        }
        else
        {
          v11 = (*((_QWORD *)&v445 + 1) - 1) & v20;
        }
        v35 = *(_QWORD ***)(v445 + 8 * v11);
        if (v35)
        {
          v36 = *v35;
          if (*v35)
          {
            if (v25.u32[0] < 2uLL)
            {
              while (1)
              {
                v38 = v36[1];
                if (v38 == v20)
                {
                  if (v36[2] == v20)
                    goto LABEL_162;
                }
                else if ((v38 & (*((_QWORD *)&v445 + 1) - 1)) != v11)
                {
                  goto LABEL_42;
                }
                v36 = (_QWORD *)*v36;
                if (!v36)
                  goto LABEL_42;
              }
            }
            do
            {
              v37 = v36[1];
              if (v37 == v20)
              {
                if (v36[2] == v20)
                  goto LABEL_162;
              }
              else
              {
                if (v37 >= *((_QWORD *)&v445 + 1))
                  v37 %= *((_QWORD *)&v445 + 1);
                if (v37 != v11)
                  break;
              }
              v36 = (_QWORD *)*v36;
            }
            while (v36);
          }
        }
      }
LABEL_42:
      v36 = operator new(0x30uLL);
      buf.i64[0] = (uint64_t)v36;
      buf.i64[1] = (uint64_t)&v446;
      *v36 = 0;
      v36[1] = v20;
      v36[2] = v20;
      v36[3] = 0;
      v36[4] = 0;
      v36[5] = 0;
      LOBYTE(v428) = 1;
      v39 = (float)(unint64_t)(*((_QWORD *)&v446 + 1) + 1);
      if (v24 && (float)(v447 * (float)v24) >= v39)
      {
LABEL_152:
        v86 = v445;
        v87 = *(_QWORD **)(v445 + 8 * v11);
        if (v87)
        {
          *v36 = *v87;
        }
        else
        {
          *v36 = v446;
          *(_QWORD *)&v446 = v36;
          *(_QWORD *)(v86 + 8 * v11) = &v446;
          if (!*v36)
            goto LABEL_161;
          v88 = *(_QWORD *)(*v36 + 8);
          if ((v24 & (v24 - 1)) != 0)
          {
            if (v88 >= v24)
              v88 %= v24;
          }
          else
          {
            v88 &= v24 - 1;
          }
          v87 = (_QWORD *)(v445 + 8 * v88);
        }
        *v87 = v36;
LABEL_161:
        ++*((_QWORD *)&v446 + 1);
LABEL_162:
        v4 = v36[4];
        v89 = v36[5];
        if (v4 >= v89)
        {
          v91 = v36[3];
          v92 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - v91) >> 3) + 1;
          if (v92 > 0x492492492492492)
            abort();
          v93 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v89 - v91) >> 3);
          if (2 * v93 > v92)
            v92 = 2 * v93;
          if (v93 >= 0x249249249249249)
            v94 = 0x492492492492492;
          else
            v94 = v92;
          if (v94 > 0x492492492492492)
            goto LABEL_682;
          v95 = (char *)operator new(56 * v94);
          v96 = &v95[8 * ((uint64_t)(v4 - v91) >> 3)];
          *(_QWORD *)v96 = v19;
          *((_WORD *)v96 + 4) = v21;
          *(_OWORD *)(v96 + 12) = v425;
          *(_QWORD *)(v96 + 28) = v16;
          *((_DWORD *)v96 + 9) = v15;
          *((_DWORD *)v96 + 10) = v23;
          *((_DWORD *)v96 + 11) = v22;
          *((_DWORD *)v96 + 12) = 1065353216;
          v97 = v96;
          if (v4 == v91)
          {
            a1 = v420;
          }
          else
          {
            a1 = v420;
            do
            {
              v98 = *(_QWORD *)(v4 - 56);
              v4 -= 56;
              v99 = *(_WORD *)(v4 + 8);
              *((_QWORD *)v97 - 7) = v98;
              v97 -= 56;
              *((_WORD *)v97 + 4) = v99;
              v100 = *(_QWORD *)(v4 + 12);
              *((_DWORD *)v97 + 5) = *(_DWORD *)(v4 + 20);
              *(_QWORD *)(v97 + 12) = v100;
              v101 = *(_QWORD *)(v4 + 24);
              *((_DWORD *)v97 + 8) = *(_DWORD *)(v4 + 32);
              *((_QWORD *)v97 + 3) = v101;
              *((_DWORD *)v97 + 9) = *(_DWORD *)(v4 + 36);
              v102 = *(_QWORD *)(v4 + 40);
              *((_DWORD *)v97 + 12) = *(_DWORD *)(v4 + 48);
              *((_QWORD *)v97 + 5) = v102;
            }
            while (v4 != v91);
            v4 = v91;
          }
          v90 = (unint64_t)(v96 + 56);
          v36[3] = v97;
          v36[4] = v96 + 56;
          v36[5] = &v95[56 * v94];
          if (v4)
            operator delete((void *)v4);
        }
        else
        {
          *(_QWORD *)v4 = v19;
          *(_WORD *)(v4 + 8) = v21;
          *(_OWORD *)(v4 + 12) = v425;
          *(_QWORD *)(v4 + 28) = v16;
          *(_DWORD *)(v4 + 36) = v15;
          *(_DWORD *)(v4 + 40) = v23;
          *(_DWORD *)(v4 + 44) = v22;
          v90 = v4 + 56;
          *(_DWORD *)(v4 + 48) = 1065353216;
          a1 = v420;
        }
        v36[4] = v90;
        goto LABEL_179;
      }
      v40 = (v24 & (v24 - 1)) != 0;
      if (v24 < 3)
        v40 = 1;
      v41 = v40 | (2 * v24);
      v42 = vcvtps_u32_f32(v39 / v447);
      if (v41 <= v42)
        prime = v42;
      else
        prime = v41;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v24 = *((_QWORD *)&v445 + 1);
        _CF = prime >= *((_QWORD *)&v445 + 1);
        if (prime > *((_QWORD *)&v445 + 1))
        {
LABEL_120:
          if (prime >> 61)
            goto LABEL_682;
          v73 = operator new(8 * prime);
          v74 = (void *)v445;
          *(_QWORD *)&v445 = v73;
          if (v74)
            operator delete(v74);
          v75 = 0;
          *((_QWORD *)&v445 + 1) = prime;
          do
            *(_QWORD *)(v445 + 8 * v75++) = 0;
          while (prime != v75);
          v76 = (_QWORD **)v446;
          if (!(_QWORD)v446)
            goto LABEL_138;
          v77 = *(_QWORD *)(v446 + 8);
          v78 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            v79 = v77 & v78;
            *(_QWORD *)(v445 + 8 * v79) = &v446;
            for (i = *v76; *v76; i = *v76)
            {
              v81 = i[1] & v78;
              if (v81 == v79)
              {
                v76 = (_QWORD **)i;
              }
              else if (*(_QWORD *)(v445 + 8 * v81))
              {
                *v76 = (_QWORD *)*i;
                v82 = 8 * v81;
                *i = **(_QWORD **)(v445 + v82);
                **(_QWORD **)(v445 + v82) = i;
              }
              else
              {
                *(_QWORD *)(v445 + 8 * v81) = v76;
                v76 = (_QWORD **)i;
                v79 = v81;
              }
            }
LABEL_138:
            v24 = prime;
            goto LABEL_139;
          }
          if (v77 >= prime)
            v77 %= prime;
          *(_QWORD *)(v445 + 8 * v77) = &v446;
          v83 = *v76;
          if (!*v76)
            goto LABEL_138;
          while (1)
          {
            v85 = v83[1];
            if (v85 >= prime)
              v85 %= prime;
            if (v85 != v77)
            {
              if (!*(_QWORD *)(v445 + 8 * v85))
              {
                *(_QWORD *)(v445 + 8 * v85) = v76;
                goto LABEL_143;
              }
              *v76 = (_QWORD *)*v83;
              v84 = 8 * v85;
              *v83 = **(_QWORD **)(v445 + v84);
              **(_QWORD **)(v445 + v84) = v83;
              v83 = v76;
            }
            v85 = v77;
LABEL_143:
            v76 = (_QWORD **)v83;
            v83 = (_QWORD *)*v83;
            v77 = v85;
            if (!v83)
              goto LABEL_138;
          }
        }
LABEL_109:
        if (_CF)
          goto LABEL_139;
        v70 = vcvtps_u32_f32((float)*((unint64_t *)&v446 + 1) / v447);
        if (v24 < 3 || (v71 = (uint8x8_t)vcnt_s8((int8x8_t)v24), v71.i16[0] = vaddlv_u8(v71), v71.u32[0] > 1uLL))
        {
          v70 = std::__next_prime(v70);
        }
        else
        {
          v72 = 1 << -(char)__clz(v70 - 1);
          if (v70 >= 2)
            v70 = v72;
        }
        if (prime <= v70)
          prime = v70;
        if (prime >= v24)
        {
          v24 = *((_QWORD *)&v445 + 1);
LABEL_139:
          if ((v24 & (v24 - 1)) != 0)
          {
            if (v20 >= v24)
              v11 = v20 % v24;
            else
              v11 = v20;
          }
          else
          {
            v11 = (v24 - 1) & v20;
          }
          goto LABEL_152;
        }
        if (!prime)
        {
          v130 = (void *)v445;
          *(_QWORD *)&v445 = 0;
          if (v130)
            operator delete(v130);
          v24 = 0;
          *((_QWORD *)&v445 + 1) = 0;
          goto LABEL_139;
        }
        goto LABEL_120;
      }
      _CF = prime >= v24;
      if (prime > v24)
        goto LABEL_120;
      goto LABEL_109;
    }
    v27 = v457;
    v26 = v458;
    v440 = v457;
    v441 = (std::__shared_weak_count *)v458;
    if (v458)
    {
      v28 = (unint64_t *)(v458 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v30 = 0x9DDFEA08EB382D69 * (((8 * v27) + 8) ^ HIDWORD(v27));
    v31 = 0x9DDFEA08EB382D69 * (HIDWORD(v27) ^ (v30 >> 47) ^ v30);
    v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
    v33 = (unint64_t)__p[1];
    if (__p[1])
    {
      v34 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v34.i16[0] = vaddlv_u8(v34);
      if (v34.u32[0] > 1uLL)
      {
        v4 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
        if ((void *)v32 >= __p[1])
          v4 = v32 % (unint64_t)__p[1];
      }
      else
      {
        v4 = v32 & ((unint64_t)__p[1] - 1);
      }
      v45 = (_QWORD **)*((_QWORD *)__p[0] + v4);
      if (v45)
      {
        v46 = *v45;
        if (*v45)
        {
          if (v34.u32[0] < 2uLL)
          {
            while (1)
            {
              v48 = v46[1];
              if (v48 == v32)
              {
                if (v46[2] == v27)
                  goto LABEL_212;
              }
              else if ((v48 & ((uint64_t)__p[1] - 1)) != v4)
              {
                goto LABEL_72;
              }
              v46 = (_QWORD *)*v46;
              if (!v46)
                goto LABEL_72;
            }
          }
          do
          {
            v47 = v46[1];
            if (v47 == v32)
            {
              if (v46[2] == v27)
                goto LABEL_212;
            }
            else
            {
              if ((void *)v47 >= __p[1])
                v47 %= (unint64_t)__p[1];
              if (v47 != v4)
                break;
            }
            v46 = (_QWORD *)*v46;
          }
          while (v46);
        }
      }
    }
LABEL_72:
    v49 = operator new(0x38uLL);
    v46 = v49;
    buf.i64[0] = (uint64_t)v49;
    buf.i64[1] = (uint64_t)&v443;
    *v49 = 0;
    v49[1] = v32;
    v49[2] = v27;
    v49[3] = v26;
    if (v26)
    {
      v50 = (unint64_t *)(v26 + 8);
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    v49[4] = 0;
    v49[5] = 0;
    v49[6] = 0;
    LOBYTE(v428) = 1;
    v52 = (float)(unint64_t)(*((_QWORD *)&v443 + 1) + 1);
    if (!v33 || (float)(v444 * (float)v33) < v52)
    {
      v53 = (v33 & (v33 - 1)) != 0;
      if (v33 < 3)
        v53 = 1;
      v54 = v53 | (2 * v33);
      v55 = vcvtps_u32_f32(v52 / v444);
      if (v54 <= v55)
        v56 = v55;
      else
        v56 = v54;
      if (v56 == 1)
      {
        v56 = 2;
      }
      else if ((v56 & (v56 - 1)) != 0)
      {
        v56 = std::__next_prime(v56);
      }
      v33 = (unint64_t)__p[1];
      if ((void *)v56 <= __p[1])
      {
        if ((void *)v56 < __p[1])
        {
          v67 = vcvtps_u32_f32((float)*((unint64_t *)&v443 + 1) / v444);
          if (__p[1] < (void *)3
            || (v68 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v68.i16[0] = vaddlv_u8(v68), v68.u32[0] > 1uLL))
          {
            v67 = std::__next_prime(v67);
          }
          else
          {
            v69 = 1 << -(char)__clz(v67 - 1);
            if (v67 >= 2)
              v67 = v69;
          }
          if (v56 <= v67)
            v56 = v67;
          if (v56 >= v33)
          {
            v33 = (unint64_t)__p[1];
          }
          else
          {
            if (v56)
              goto LABEL_87;
            v129 = __p[0];
            __p[0] = 0;
            if (v129)
              operator delete(v129);
            v33 = 0;
            __p[1] = 0;
          }
        }
LABEL_189:
        if ((v33 & (v33 - 1)) != 0)
        {
          if (v32 >= v33)
            v4 = v32 % v33;
          else
            v4 = v32;
        }
        else
        {
          v4 = (v33 - 1) & v32;
        }
        goto LABEL_202;
      }
LABEL_87:
      if (v56 >> 61)
        goto LABEL_682;
      v57 = operator new(8 * v56);
      v58 = __p[0];
      __p[0] = v57;
      if (v58)
        operator delete(v58);
      v59 = 0;
      __p[1] = (void *)v56;
      do
        *((_QWORD *)__p[0] + v59++) = 0;
      while (v56 != v59);
      v60 = (_QWORD **)v443;
      if (!(_QWORD)v443)
        goto LABEL_188;
      v61 = *(_QWORD *)(v443 + 8);
      v62 = v56 - 1;
      if ((v56 & (v56 - 1)) == 0)
      {
        v63 = v61 & v62;
        *((_QWORD *)__p[0] + v63) = &v443;
        for (j = *v60; *v60; j = *v60)
        {
          v65 = j[1] & v62;
          if (v65 == v63)
          {
            v60 = (_QWORD **)j;
          }
          else if (*((_QWORD *)__p[0] + v65))
          {
            *v60 = (_QWORD *)*j;
            v66 = 8 * v65;
            *j = **(_QWORD **)((char *)__p[0] + v66);
            **(_QWORD **)((char *)__p[0] + v66) = j;
          }
          else
          {
            *((_QWORD *)__p[0] + v65) = v60;
            v60 = (_QWORD **)j;
            v63 = v65;
          }
        }
        goto LABEL_188;
      }
      if (v61 >= v56)
        v61 %= v56;
      *((_QWORD *)__p[0] + v61) = &v443;
      v106 = *v60;
      if (!*v60)
      {
LABEL_188:
        v33 = v56;
        goto LABEL_189;
      }
      while (2)
      {
        v108 = v106[1];
        if (v108 >= v56)
          v108 %= v56;
        if (v108 != v61)
        {
          if (!*((_QWORD *)__p[0] + v108))
          {
            *((_QWORD *)__p[0] + v108) = v60;
LABEL_193:
            v60 = (_QWORD **)v106;
            v106 = (_QWORD *)*v106;
            v61 = v108;
            if (!v106)
              goto LABEL_188;
            continue;
          }
          *v60 = (_QWORD *)*v106;
          v107 = 8 * v108;
          *v106 = **(_QWORD **)((char *)__p[0] + v107);
          **(_QWORD **)((char *)__p[0] + v107) = v106;
          v106 = v60;
        }
        break;
      }
      v108 = v61;
      goto LABEL_193;
    }
LABEL_202:
    v109 = __p[0];
    v110 = (_QWORD *)*((_QWORD *)__p[0] + v4);
    if (v110)
    {
      *v46 = *v110;
    }
    else
    {
      *v46 = v443;
      *(_QWORD *)&v443 = v46;
      v109[v4] = &v443;
      if (!*v46)
        goto LABEL_211;
      v111 = *(_QWORD *)(*v46 + 8);
      if ((v33 & (v33 - 1)) != 0)
      {
        if (v111 >= v33)
          v111 %= v33;
      }
      else
      {
        v111 &= v33 - 1;
      }
      v110 = (char *)__p[0] + 8 * v111;
    }
    *v110 = v46;
LABEL_211:
    ++*((_QWORD *)&v443 + 1);
LABEL_212:
    v4 = v46[5];
    v112 = v46[6];
    if (v4 >= v112)
    {
      v114 = v46[4];
      v115 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - v114) >> 3) + 1;
      if (v115 > 0x492492492492492)
        abort();
      v116 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v112 - v114) >> 3);
      if (2 * v116 > v115)
        v115 = 2 * v116;
      if (v116 >= 0x249249249249249)
        v117 = 0x492492492492492;
      else
        v117 = v115;
      if (v117 > 0x492492492492492)
LABEL_682:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v118 = (char *)operator new(56 * v117);
      v119 = &v118[8 * ((uint64_t)(v4 - v114) >> 3)];
      *(_QWORD *)v119 = v19;
      *((_WORD *)v119 + 4) = v21;
      *(_OWORD *)(v119 + 12) = v425;
      *(_QWORD *)(v119 + 28) = v16;
      *((_DWORD *)v119 + 9) = v15;
      *((_DWORD *)v119 + 10) = v23;
      *((_DWORD *)v119 + 11) = v22;
      *((_DWORD *)v119 + 12) = 1065353216;
      v120 = v119;
      if (v4 == v114)
      {
        a1 = v420;
      }
      else
      {
        a1 = v420;
        do
        {
          v121 = *(_QWORD *)(v4 - 56);
          v4 -= 56;
          v122 = *(_WORD *)(v4 + 8);
          *((_QWORD *)v120 - 7) = v121;
          v120 -= 56;
          *((_WORD *)v120 + 4) = v122;
          v123 = *(_QWORD *)(v4 + 12);
          *((_DWORD *)v120 + 5) = *(_DWORD *)(v4 + 20);
          *(_QWORD *)(v120 + 12) = v123;
          v124 = *(_QWORD *)(v4 + 24);
          *((_DWORD *)v120 + 8) = *(_DWORD *)(v4 + 32);
          *((_QWORD *)v120 + 3) = v124;
          *((_DWORD *)v120 + 9) = *(_DWORD *)(v4 + 36);
          v125 = *(_QWORD *)(v4 + 40);
          *((_DWORD *)v120 + 12) = *(_DWORD *)(v4 + 48);
          *((_QWORD *)v120 + 5) = v125;
        }
        while (v4 != v114);
        v4 = v114;
      }
      v113 = (unint64_t)(v119 + 56);
      v46[4] = v120;
      v46[5] = v119 + 56;
      v46[6] = &v118[56 * v117];
      if (v4)
        operator delete((void *)v4);
    }
    else
    {
      *(_QWORD *)v4 = v19;
      *(_WORD *)(v4 + 8) = v21;
      *(_OWORD *)(v4 + 12) = v425;
      *(_QWORD *)(v4 + 28) = v16;
      *(_DWORD *)(v4 + 36) = v15;
      *(_DWORD *)(v4 + 40) = v23;
      *(_DWORD *)(v4 + 44) = v22;
      v113 = v4 + 56;
      *(_DWORD *)(v4 + 48) = 1065353216;
      a1 = v420;
    }
    v46[5] = v113;
    v126 = v441;
    if (v441)
    {
      p_shared_owners = (unint64_t *)&v441->__shared_owners_;
      do
        v128 = __ldaxr(p_shared_owners);
      while (__stlxr(v128 - 1, p_shared_owners));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
LABEL_179:
    v103 = (std::__shared_weak_count *)v458;
    if (v458)
    {
      v104 = (unint64_t *)(v458 + 8);
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
    ++v8;
  }
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v131 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v131))
  {
    buf.i16[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v131, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "ReadDecal", (const char *)&unk_1A0189141, (uint8_t *)&buf, 2u);
  }

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v132 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v132))
  {
    buf.i16[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v132, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "BuildDecalBatches", (const char *)&unk_1A0189141, (uint8_t *)&buf, 2u);
  }

  v438 = 0;
  v439 = 0;
  v437 = 0;
  v133 = *((_QWORD *)&v446 + 1) + *((_QWORD *)&v443 + 1);
  if (*((_QWORD *)&v446 + 1) + *((_QWORD *)&v443 + 1))
  {
    if (v133 >= 0x555555555555556)
      abort();
    v437 = operator new(48 * v133);
    v438 = (char *)v437;
    v439 = (char *)v437 + 48 * v133;
  }
  for (k = (uint64_t **)v446; k; k = (uint64_t **)*k)
  {
    v451 = 0uLL;
    md::DaVinciDecalBuilder::buildBatch(&buf, (uint64_t)__p, (uint64_t)k[2], (float *)k[3], (float *)k[4], a2, a3);
    if (buf.i8[0])
    {
      v135 = v438;
      if (v438 >= v439)
      {
        v136 = std::vector<md::DaVinciDecalBatch>::__push_back_slow_path<md::DaVinciDecalBatch const&>(&v437, &buf.i64[1]);
      }
      else
      {
        std::construct_at[abi:nn180100]<md::DaVinciDecalBatch,md::DaVinciDecalBatch const&,md::DaVinciDecalBatch*>(v438, &buf.i64[1]);
        v136 = v135 + 48;
      }
      v438 = v136;
      if (*(_QWORD *)v430)
      {
        *(_QWORD *)&v430[8] = *(_QWORD *)v430;
        operator delete(*(void **)v430);
      }
      v137 = (std::__shared_weak_count *)v428;
      if (v428)
      {
        v138 = (unint64_t *)(v428 + 8);
        do
          v139 = __ldaxr(v138);
        while (__stlxr(v139 - 1, v138));
        if (!v139)
        {
          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
          std::__shared_weak_count::__release_weak(v137);
        }
      }
    }
  }
  for (m = (uint64_t **)v443; m; m = (uint64_t **)*m)
  {
    v141 = (std::__shared_weak_count *)m[3];
    v457 = (uint64_t)m[2];
    v458 = (uint64_t)v141;
    if (v141)
    {
      v142 = (unint64_t *)&v141->__shared_owners_;
      do
        v143 = __ldxr(v142);
      while (__stxr(v143 + 1, v142));
    }
    md::DaVinciDecalBuilder::buildBatch(&buf, (uint64_t)__p, 0, (float *)m[4], (float *)m[5], a2, a3);
    if (!v141)
      goto LABEL_280;
    v144 = (unint64_t *)&v141->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
      if (buf.i8[0])
      {
LABEL_281:
        v146 = v438;
        if (v438 >= v439)
        {
          v147 = std::vector<md::DaVinciDecalBatch>::__push_back_slow_path<md::DaVinciDecalBatch const&>(&v437, &buf.i64[1]);
        }
        else
        {
          std::construct_at[abi:nn180100]<md::DaVinciDecalBatch,md::DaVinciDecalBatch const&,md::DaVinciDecalBatch*>(v438, &buf.i64[1]);
          v147 = v146 + 48;
        }
        v438 = v147;
        if (*(_QWORD *)v430)
        {
          *(_QWORD *)&v430[8] = *(_QWORD *)v430;
          operator delete(*(void **)v430);
        }
        v148 = (std::__shared_weak_count *)v428;
        if (v428)
        {
          v149 = (unint64_t *)(v428 + 8);
          do
            v150 = __ldaxr(v149);
          while (__stlxr(v150 - 1, v149));
          if (!v150)
          {
            ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
            std::__shared_weak_count::__release_weak(v148);
          }
        }
      }
    }
    else
    {
LABEL_280:
      if (buf.i8[0])
        goto LABEL_281;
    }
  }
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v151 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v151))
  {
    buf.i16[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v151, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "BuildDecalBatches", (const char *)&unk_1A0189141, (uint8_t *)&buf, 2u);
  }

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v152 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v152))
  {
    buf.i16[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v152, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "ProcessDecalBatches", (const char *)&unk_1A0189141, (uint8_t *)&buf, 2u);
  }

  v153 = (char *)a1[123];
  v154 = (char *)a1[122];
  v155 = (v153 - v154) >> 4;
  v156 = v155 - 0x5555555555555555 * ((v438 - (_BYTE *)v437) >> 4);
  if (v156 > (uint64_t)(a1[124] - (_QWORD)v154) >> 4)
  {
    if (v156 >> 60)
      abort();
    v157 = (char *)operator new(16 * v156);
    v158 = &v157[16 * v155];
    v159 = &v157[16 * v156];
    if (v153 == v154)
    {
      a1[122] = v158;
      a1[123] = v158;
      a1[124] = v159;
    }
    else
    {
      v160 = &v157[16 * v155];
      do
      {
        v161 = *((_OWORD *)v153 - 1);
        v153 -= 16;
        *((_OWORD *)v160 - 1) = v161;
        v160 -= 16;
        *(_QWORD *)v153 = 0;
        *((_QWORD *)v153 + 1) = 0;
      }
      while (v153 != v154);
      v153 = (char *)a1[122];
      v162 = (char *)a1[123];
      a1[122] = v160;
      a1[123] = v158;
      a1[124] = v159;
      while (v162 != v153)
      {
        v163 = (std::__shared_weak_count *)*((_QWORD *)v162 - 1);
        if (v163)
        {
          v164 = (unint64_t *)&v163->__shared_owners_;
          do
            v165 = __ldaxr(v164);
          while (__stlxr(v165 - 1, v164));
          if (!v165)
          {
            ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
            std::__shared_weak_count::__release_weak(v163);
          }
        }
        v162 -= 16;
      }
    }
    if (v153)
      operator delete(v153);
  }
  v422 = (char *)v437;
  v418 = v438;
  if (v437 == v438)
  {
LABEL_661:
    if (GEOGetVectorKitPerformanceLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
    v410 = (id)GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled(v410))
    {
      buf.i16[0] = 0;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v410, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "ProcessDecalBatches", (const char *)&unk_1A0189141, (uint8_t *)&buf, 2u);
    }

    v411 = (char *)v437;
    if (v437)
    {
      v412 = v438;
      v413 = v437;
      if (v438 != v437)
      {
        do
        {
          v414 = (void *)*((_QWORD *)v412 - 3);
          if (v414)
          {
            *((_QWORD *)v412 - 2) = v414;
            operator delete(v414);
          }
          v415 = (std::__shared_weak_count *)*((_QWORD *)v412 - 5);
          if (v415)
          {
            v416 = (unint64_t *)&v415->__shared_owners_;
            do
              v417 = __ldaxr(v416);
            while (__stlxr(v417 - 1, v416));
            if (!v417)
            {
              ((void (*)(std::__shared_weak_count *))v415->__on_zero_shared)(v415);
              std::__shared_weak_count::__release_weak(v415);
            }
          }
          v412 -= 48;
        }
        while (v412 != v411);
        v413 = v437;
      }
      v438 = v411;
      operator delete(v413);
    }
    md::DaVinciDecalBuilder::~DaVinciDecalBuilder((md::DaVinciDecalBuilder *)__p);
    return;
  }
  while (1)
  {
    v166 = (char *)a1[123];
    v167 = a1[124];
    if ((unint64_t)v166 >= v167)
    {
      v172 = (char *)a1[122];
      v173 = (v166 - v172) >> 4;
      v174 = v173 + 1;
      if ((unint64_t)(v173 + 1) >> 60)
        abort();
      v175 = v167 - (_QWORD)v172;
      if (v175 >> 3 > v174)
        v174 = v175 >> 3;
      if ((unint64_t)v175 >= 0x7FFFFFFFFFFFFFF0)
        v176 = 0xFFFFFFFFFFFFFFFLL;
      else
        v176 = v174;
      if (v176 >> 60)
        goto LABEL_682;
      v177 = (char *)operator new(16 * v176);
      v178 = &v177[16 * v173];
      v179 = *(_OWORD *)v422;
      *(_OWORD *)v178 = *(_OWORD *)v422;
      if (*((_QWORD *)&v179 + 1))
      {
        v180 = (unint64_t *)(*((_QWORD *)&v179 + 1) + 8);
        do
          v181 = __ldxr(v180);
        while (__stxr(v181 + 1, v180));
        v166 = (char *)a1[123];
        v172 = (char *)a1[122];
      }
      v182 = &v177[16 * v176];
      v171 = v178 + 16;
      if (v166 == v172)
      {
        a1[122] = v178;
        a1[123] = v171;
        a1[124] = v182;
      }
      else
      {
        do
        {
          v183 = *((_OWORD *)v166 - 1);
          v166 -= 16;
          *((_OWORD *)v178 - 1) = v183;
          v178 -= 16;
          *(_QWORD *)v166 = 0;
          *((_QWORD *)v166 + 1) = 0;
        }
        while (v166 != v172);
        v172 = (char *)a1[122];
        v184 = (char *)a1[123];
        a1[122] = v178;
        a1[123] = v171;
        a1[124] = v182;
        while (v184 != v172)
        {
          v185 = (std::__shared_weak_count *)*((_QWORD *)v184 - 1);
          if (v185)
          {
            v186 = (unint64_t *)&v185->__shared_owners_;
            do
              v187 = __ldaxr(v186);
            while (__stlxr(v187 - 1, v186));
            if (!v187)
            {
              ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
              std::__shared_weak_count::__release_weak(v185);
            }
          }
          v184 -= 16;
        }
      }
      if (v172)
        operator delete(v172);
    }
    else
    {
      *(_QWORD *)v166 = *(_QWORD *)v422;
      v168 = *((_QWORD *)v422 + 1);
      *((_QWORD *)v166 + 1) = v168;
      if (v168)
      {
        v169 = (unint64_t *)(v168 + 8);
        do
          v170 = __ldxr(v169);
        while (__stxr(v170 + 1, v169));
      }
      v171 = v166 + 16;
    }
    a1[123] = v171;
    v188 = *((_QWORD *)v422 + 3);
    if (*((_QWORD *)v422 + 4) != v188)
      break;
LABEL_319:
    v422 += 48;
    if (v422 == v418)
      goto LABEL_661;
  }
  v189 = 0;
  while (1)
  {
    v421 = v189;
    v190 = v188 + 88 * v189;
    v436 = *(_OWORD *)(v190 + 48);
    v191 = v190 + 64;
    v192 = a1[129];
    v193 = a1[130];
    if (v192 >= v193)
    {
      v199 = a1[128];
      v200 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v192 - v199) >> 4);
      v201 = v200 + 1;
      if (v200 + 1 > 0x333333333333333)
        abort();
      v202 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v193 - v199) >> 4);
      if (2 * v202 > v201)
        v201 = 2 * v202;
      if (v202 >= 0x199999999999999)
        v203 = 0x333333333333333;
      else
        v203 = v201;
      if (v203)
      {
        if (v203 > 0x333333333333333)
          goto LABEL_682;
        v204 = (char *)operator new(80 * v203);
      }
      else
      {
        v204 = 0;
      }
      v209 = &v204[80 * v200];
      v210 = *(_QWORD *)v422;
      v211 = (std::__shared_weak_count *)*((_QWORD *)v422 + 1);
      if (v211)
      {
        v212 = (unint64_t *)&v211->__shared_owners_;
        do
          v213 = __ldxr(v212);
        while (__stxr(v213 + 1, v212));
        *(_QWORD *)v209 = v210;
        *((_QWORD *)v209 + 1) = v211;
        do
          v214 = __ldxr(v212);
        while (__stxr(v214 + 1, v212));
      }
      else
      {
        *(_QWORD *)v209 = v210;
        *((_QWORD *)v209 + 1) = 0;
      }
      v215 = &v204[80 * v200];
      *((_OWORD *)v215 + 1) = v436;
      v215[32] = 3;
      v216 = *(_QWORD *)(v191 + 16);
      *(_OWORD *)(v215 + 36) = *(_OWORD *)v191;
      *(_QWORD *)(v215 + 52) = v216;
      *((_WORD *)v215 + 30) = 1;
      *((_QWORD *)v215 + 8) = 0;
      *((_QWORD *)v215 + 9) = 0;
      a1 = v420;
      if (v211)
      {
        v217 = (unint64_t *)&v211->__shared_owners_;
        do
          v218 = __ldaxr(v217);
        while (__stlxr(v218 - 1, v217));
        if (!v218)
        {
          ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
          std::__shared_weak_count::__release_weak(v211);
        }
      }
      v219 = &v204[80 * v203];
      v208 = v209 + 80;
      v220 = (char *)v420[129];
      v221 = (char *)v420[128];
      if (v220 != v221)
      {
        do
        {
          v222 = *((_OWORD *)v220 - 5);
          v220 -= 80;
          *((_OWORD *)v209 - 5) = v222;
          v209 -= 80;
          *(_QWORD *)v220 = 0;
          *((_QWORD *)v220 + 1) = 0;
          v223 = *((_OWORD *)v220 + 1);
          v224 = *((_OWORD *)v220 + 2);
          *(_OWORD *)(v209 + 46) = *(_OWORD *)(v220 + 46);
          *((_OWORD *)v209 + 1) = v223;
          *((_OWORD *)v209 + 2) = v224;
          *((_OWORD *)v209 + 4) = *((_OWORD *)v220 + 4);
          *((_QWORD *)v220 + 8) = 0;
          *((_QWORD *)v220 + 9) = 0;
        }
        while (v220 != v221);
        v220 = (char *)v420[128];
        v225 = (char *)v420[129];
        v420[128] = v209;
        v420[129] = v208;
        v420[130] = v219;
        while (2)
        {
          if (v225 == v220)
            goto LABEL_405;
          v226 = (std::__shared_weak_count *)*((_QWORD *)v225 - 1);
          if (!v226)
            goto LABEL_397;
          v227 = (unint64_t *)&v226->__shared_owners_;
          do
            v228 = __ldaxr(v227);
          while (__stlxr(v228 - 1, v227));
          if (!v228)
          {
            ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
            std::__shared_weak_count::__release_weak(v226);
            v229 = (std::__shared_weak_count *)*((_QWORD *)v225 - 9);
            if (v229)
            {
LABEL_398:
              v230 = (unint64_t *)&v229->__shared_owners_;
              do
                v231 = __ldaxr(v230);
              while (__stlxr(v231 - 1, v230));
              if (!v231)
              {
                ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                std::__shared_weak_count::__release_weak(v229);
              }
            }
          }
          else
          {
LABEL_397:
            v229 = (std::__shared_weak_count *)*((_QWORD *)v225 - 9);
            if (v229)
              goto LABEL_398;
          }
          v225 -= 80;
          continue;
        }
      }
      v420[128] = v209;
      v420[129] = v208;
      v420[130] = v219;
LABEL_405:
      if (v220)
        operator delete(v220);
    }
    else
    {
      v194 = *(_QWORD *)v422;
      v195 = (std::__shared_weak_count *)*((_QWORD *)v422 + 1);
      if (v195)
      {
        v196 = (unint64_t *)&v195->__shared_owners_;
        do
          v197 = __ldxr(v196);
        while (__stxr(v197 + 1, v196));
        *(_QWORD *)v192 = v194;
        *(_QWORD *)(v192 + 8) = v195;
        do
          v198 = __ldxr(v196);
        while (__stxr(v198 + 1, v196));
      }
      else
      {
        *(_QWORD *)v192 = v194;
        *(_QWORD *)(v192 + 8) = 0;
      }
      *(_OWORD *)(v192 + 16) = v436;
      *(_BYTE *)(v192 + 32) = 3;
      v205 = *(_QWORD *)(v191 + 16);
      *(_OWORD *)(v192 + 36) = *(_OWORD *)v191;
      *(_QWORD *)(v192 + 52) = v205;
      *(_WORD *)(v192 + 60) = 1;
      *(_QWORD *)(v192 + 64) = 0;
      *(_QWORD *)(v192 + 72) = 0;
      if (v195)
      {
        v206 = (unint64_t *)&v195->__shared_owners_;
        do
          v207 = __ldaxr(v206);
        while (__stlxr(v207 - 1, v206));
        if (!v207)
        {
          ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
          std::__shared_weak_count::__release_weak(v195);
        }
      }
      v208 = (char *)(v192 + 80);
    }
    a1[129] = v208;
    buf.i64[0] = (uint64_t)(v208 - 80);
    buf.i8[8] = 0;
    LOBYTE(v429) = 0;
    v430[0] = 0;
    *(_OWORD *)&v430[4] = xmmword_19FFB3470;
    v431 = xmmword_19FFB5E00;
    v432 = xmmword_19FFB3580;
    v433 = xmmword_19FFB3580;
    v435 = 0;
    v434 = 0;
    v451 = xmmword_19FFB3590;
    v452 = xmmword_19FFB3980;
    v453 = xmmword_19FFB3580;
    v454 = xmmword_19FFB34C0;
    *(_OWORD *)v455 = xmmword_19FFB3470;
    *(_QWORD *)&v455[16] = 0x80000000800000;
    v457 = (uint64_t)&off_1E42D8AB0;
    v458 = (uint64_t)v455;
    v459 = &v451;
    v460 = (unint64_t *)&v457;
    v232 = *((float *)v208 - 8);
    v233 = *((float *)v208 - 7);
    v234 = *((float *)v208 - 6);
    *(_DWORD *)v455 = fminf(v232, 3.4028e38);
    *(_DWORD *)&v455[4] = fminf(v233, 3.4028e38);
    *(_DWORD *)&v455[8] = fminf(v234, 3.4028e38);
    *(_DWORD *)&v455[12] = fmaxf(v232, -3.4028e38);
    *(_DWORD *)&v455[16] = fmaxf(v233, -3.4028e38);
    *(_DWORD *)&v455[20] = fmaxf(v234, -3.4028e38);
    v235 = *((float *)v208 - 11);
    v236 = *((float *)v208 - 7);
    v237 = *((float *)v208 - 6);
    v238 = fminf(v235, *(float *)v455);
    *(float *)v455 = v238;
    *(_DWORD *)&v455[4] = fminf(v236, *(float *)&v455[4]);
    *(_DWORD *)&v455[8] = fminf(v237, *(float *)&v455[8]);
    *(_DWORD *)&v455[12] = fmaxf(*(float *)&v455[12], v235);
    *(_DWORD *)&v455[16] = fmaxf(*(float *)&v455[16], v236);
    *(_DWORD *)&v455[20] = fmaxf(*(float *)&v455[20], v237);
    v239 = *((float *)v208 - 8);
    v240 = *((float *)v208 - 10);
    v241 = *((float *)v208 - 6);
    *(_QWORD *)v455 = __PAIR64__(COERCE_UNSIGNED_INT(fminf(v240, *(float *)&v455[4])), COERCE_UNSIGNED_INT(fminf(v239, v238)));
    *(_DWORD *)&v455[8] = fminf(v241, *(float *)&v455[8]);
    *(_DWORD *)&v455[12] = fmaxf(*(float *)&v455[12], v239);
    *(_DWORD *)&v455[16] = fmaxf(*(float *)&v455[16], v240);
    *(_DWORD *)&v455[20] = fmaxf(*(float *)&v455[20], v241);
    v242 = *((float *)v208 - 6);
    v243 = vmla_n_f32(vmul_n_f32((float32x2_t)1065353216, *((float *)v208 - 11)), (float32x2_t)0x3F80000000000000, *((float *)v208 - 10));
    *(float32x2_t *)v455 = vminnm_f32(v243, *(float32x2_t *)v455);
    *(float32x2_t *)&v455[12] = vmaxnm_f32(*(float32x2_t *)&v455[12], v243);
    *(_DWORD *)&v455[8] = fminf(v242, *(float *)&v455[8]);
    *(_DWORD *)&v455[20] = fmaxf(*(float *)&v455[20], v242);
    v244 = *((float *)v208 - 9);
    *(_QWORD *)v456 = *((_QWORD *)v208 - 4);
    *(float *)&v456[8] = v244;
    _S3 = 0;
    __asm { FMLA            S4, S3, V1.S[1] }
    v250.i32[3] = *(_DWORD *)&v455[12];
    v250.f32[0] = _S4 + (float)(0.0 * v244);
    v251 = (uint64_t *)a1[165];
    *(float32x2_t *)&v250.i32[1] = vmla_n_f32(vmla_lane_f32(vmla_n_f32((float32x2_t)((unsigned __int128)xmmword_19FFB34C0 >> 32), (float32x2_t)((unsigned __int128)xmmword_19FFB3590 >> 32), *(float *)v456), (float32x2_t)((unsigned __int128)xmmword_19FFB3980 >> 32), *(float32x2_t *)v456, 1), (float32x2_t)((unsigned __int128)xmmword_19FFB3580 >> 32), v244);
    v252 = *(float32x4_t *)v455;
    v252.i32[3] = v250.i32[0];
    v253 = (int8x16_t)vcgtq_f32(v252, v250);
    v250.i32[3] = v250.i32[0];
    *(int8x16_t *)v455 = vbslq_s8(v253, (int8x16_t)v250, *(int8x16_t *)v455);
    *(float32x2_t *)&v455[16] = vmaxnm_f32(*(float32x2_t *)&v455[16], *(float32x2_t *)&v250.i32[1]);
    v243.i32[0] = *((_DWORD *)v208 - 7);
    v254 = *((_DWORD *)v208 - 9);
    *(_DWORD *)v456 = *((_DWORD *)v208 - 11);
    *(_DWORD *)&v456[4] = v243.i32[0];
    *(_DWORD *)&v456[8] = v254;
    if (!&v457)
      goto LABEL_679;
    (*(void (**)(void))(v457 + 48))();
    v255 = *((_QWORD *)v208 - 5);
    *(_DWORD *)v456 = *((_DWORD *)v208 - 8);
    *(_QWORD *)&v456[4] = v255;
    if (!v460)
      goto LABEL_679;
    (*(void (**)(unint64_t *, _BYTE *))(*v460 + 48))(v460, v456);
    v256 = *(_QWORD *)(v208 - 44);
    *(_DWORD *)&v456[8] = *((_DWORD *)v208 - 9);
    *(_QWORD *)v456 = v256;
    if (!v460)
      goto LABEL_679;
    (*(void (**)(unint64_t *, _BYTE *))(*v460 + 48))(v460, v456);
    v257 = v460;
    if (v460 == (unint64_t *)&v457)
    {
      v257 = (unint64_t *)&v457;
      v258 = 4;
      goto LABEL_414;
    }
    if (v460)
    {
      v258 = 5;
LABEL_414:
      (*(void (**)(void))(*v257 + 8 * v258))();
    }
    *(_OWORD *)&v430[4] = *(_OWORD *)v455;
    *(_QWORD *)&v431 = *(_QWORD *)&v455[16];
    v259 = *(_DWORD *)(v188 + 88 * v421 + 40);
    v260 = gdc::Registry::create((gdc::Registry *)v251);
    v457 = 0x6307588E3A87BAE2;
    v424 = v260;
    v426 = v251 + 15;
    v261 = (int8x8_t)v251[16];
    if (v261)
    {
      v262 = (uint8x8_t)vcnt_s8(v261);
      v262.i16[0] = vaddlv_u8(v262);
      if (v262.u32[0] > 1uLL)
      {
        v263 = 0x6307588E3A87BAE2;
        if (*(_QWORD *)&v261 <= 0x6307588E3A87BAE2uLL)
          v263 = 0x6307588E3A87BAE2uLL % *(_QWORD *)&v261;
      }
      else
      {
        v263 = (*(_QWORD *)&v261 - 1) & 0x6307588E3A87BAE2;
      }
      v264 = *(_QWORD **)(*v426 + 8 * v263);
      if (v264)
      {
        v265 = (_QWORD *)*v264;
        if (v265)
        {
          if (v262.u32[0] < 2uLL)
          {
            v266 = *(_QWORD *)&v261 - 1;
            while (1)
            {
              v268 = v265[1];
              if (v268 == 0x6307588E3A87BAE2)
              {
                if (v265[2] == 0x6307588E3A87BAE2)
                  goto LABEL_656;
              }
              else if ((v268 & v266) != v263)
              {
                goto LABEL_435;
              }
              v265 = (_QWORD *)*v265;
              if (!v265)
                goto LABEL_435;
            }
          }
          do
          {
            v267 = v265[1];
            if (v267 == 0x6307588E3A87BAE2)
            {
              if (v265[2] == 0x6307588E3A87BAE2)
              {
LABEL_656:
                v269 = v265[3];
                goto LABEL_438;
              }
            }
            else
            {
              if (v267 >= *(_QWORD *)&v261)
                v267 %= *(_QWORD *)&v261;
              if (v267 != v263)
                break;
            }
            v265 = (_QWORD *)*v265;
          }
          while (v265);
        }
      }
    }
LABEL_435:
    v269 = operator new();
    *(_QWORD *)(v269 + 16) = "md::components::MeshInstance]";
    *(_QWORD *)(v269 + 24) = 28;
    *(_OWORD *)(v269 + 32) = 0u;
    *(_OWORD *)(v269 + 48) = 0u;
    *(_OWORD *)(v269 + 64) = 0u;
    *(_OWORD *)(v269 + 80) = 0u;
    *(_OWORD *)(v269 + 96) = 0u;
    *(_OWORD *)(v269 + 112) = 0u;
    *(_OWORD *)(v269 + 128) = 0u;
    *(_DWORD *)(v269 + 144) = 1065353216;
    *(_OWORD *)(v269 + 152) = 0u;
    *(_OWORD *)(v269 + 168) = 0u;
    *(_QWORD *)(v269 + 184) = 0;
    *(_DWORD *)(v269 + 192) = 1065353216;
    *(_OWORD *)(v269 + 200) = 0u;
    *(_OWORD *)(v269 + 216) = 0u;
    *(_QWORD *)(v269 + 232) = 0;
    *(_DWORD *)(v269 + 240) = 1065353216;
    *(_QWORD *)v269 = &off_1E42B2F58;
    *(_QWORD *)(v269 + 8) = 0x6307588E3A87BAE2;
    *(_QWORD *)(v269 + 248) = v251;
    v270 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v426, 0x6307588E3A87BAE2uLL, &v457);
    v271 = v270[3];
    v270[3] = v269;
    if (v271)
      (*(void (**)(uint64_t))(*(_QWORD *)v271 + 8))(v271);
    *(_QWORD *)&v451 = 0x6307588E3A87BAE2;
    *((_QWORD *)&v451 + 1) = "md::components::MeshInstance]";
    *(_QWORD *)&v452 = 28;
    gdc::Registry::_registerStorageDataSignals((uint64_t)v251, 0x6307588E3A87BAE2, (uint64_t)&v451, (uint64_t *)(v269 + 104));
LABEL_438:
    *(_QWORD *)v456 = v424;
    geo::sparse_map<gdc::Entity,md::components::MeshInstance>::insert_or_assign((uint64_t)&v451, (uint64_t *)(v269 + 32), (uint64_t)v456, (__int128 *)buf.i8);
    v272 = *(_QWORD *)(v269 + 248);
    if (*((_QWORD *)&v451 + 1) == *(_QWORD *)(v269 + 88))
      break;
    for (n = *(_QWORD **)(v269 + 128); n; n = (_QWORD *)*n)
    {
      v457 = (uint64_t)v456;
      v458 = 1;
      *(_QWORD *)v455 = v272;
      v274 = n[6];
      if (!v274)
        goto LABEL_679;
      (*(void (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v274 + 48))(v274, v455, &v457);
    }
LABEL_446:
    v457 = 0x43A96E24B5C6AF5;
    v277 = (int8x8_t)v251[16];
    if (v277)
    {
      v278 = (uint8x8_t)vcnt_s8(v277);
      v278.i16[0] = vaddlv_u8(v278);
      if (v278.u32[0] > 1uLL)
      {
        v279 = 0x43A96E24B5C6AF5;
        if (*(_QWORD *)&v277 <= 0x43A96E24B5C6AF5uLL)
          v279 = 0x43A96E24B5C6AF5uLL % *(_QWORD *)&v277;
      }
      else
      {
        v279 = (*(_QWORD *)&v277 - 1) & 0x43A96E24B5C6AF5;
      }
      v280 = *(_QWORD **)(*v426 + 8 * v279);
      if (v280)
      {
        v281 = (_QWORD *)*v280;
        if (v281)
        {
          if (v278.u32[0] < 2uLL)
          {
            v282 = *(_QWORD *)&v277 - 1;
            while (1)
            {
              v284 = v281[1];
              if (v284 == 0x43A96E24B5C6AF5)
              {
                if (v281[2] == 0x43A96E24B5C6AF5)
                  goto LABEL_657;
              }
              else if ((v284 & v282) != v279)
              {
                goto LABEL_466;
              }
              v281 = (_QWORD *)*v281;
              if (!v281)
                goto LABEL_466;
            }
          }
          do
          {
            v283 = v281[1];
            if (v283 == 0x43A96E24B5C6AF5)
            {
              if (v281[2] == 0x43A96E24B5C6AF5)
              {
LABEL_657:
                v285 = v281[3];
                goto LABEL_469;
              }
            }
            else
            {
              if (v283 >= *(_QWORD *)&v277)
                v283 %= *(_QWORD *)&v277;
              if (v283 != v279)
                break;
            }
            v281 = (_QWORD *)*v281;
          }
          while (v281);
        }
      }
    }
LABEL_466:
    v285 = operator new();
    *(_QWORD *)(v285 + 16) = "md::components::Decal]";
    *(_QWORD *)(v285 + 24) = 21;
    *(_OWORD *)(v285 + 32) = 0u;
    *(_OWORD *)(v285 + 48) = 0u;
    *(_OWORD *)(v285 + 64) = 0u;
    *(_OWORD *)(v285 + 80) = 0u;
    *(_OWORD *)(v285 + 96) = 0u;
    *(_OWORD *)(v285 + 112) = 0u;
    *(_OWORD *)(v285 + 128) = 0u;
    *(_DWORD *)(v285 + 144) = 1065353216;
    *(_OWORD *)(v285 + 152) = 0u;
    *(_OWORD *)(v285 + 168) = 0u;
    *(_QWORD *)(v285 + 184) = 0;
    *(_DWORD *)(v285 + 192) = 1065353216;
    *(_OWORD *)(v285 + 200) = 0u;
    *(_OWORD *)(v285 + 216) = 0u;
    *(_QWORD *)(v285 + 232) = 0;
    *(_DWORD *)(v285 + 240) = 1065353216;
    *(_QWORD *)v285 = &off_1E42B3468;
    *(_QWORD *)(v285 + 8) = 0x43A96E24B5C6AF5;
    *(_QWORD *)(v285 + 248) = v251;
    v286 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v426, 0x43A96E24B5C6AF5uLL, &v457);
    v287 = v286[3];
    v286[3] = v285;
    if (v287)
      (*(void (**)(uint64_t))(*(_QWORD *)v287 + 8))(v287);
    *(_QWORD *)&v451 = 0x43A96E24B5C6AF5;
    *((_QWORD *)&v451 + 1) = "md::components::Decal]";
    *(_QWORD *)&v452 = 21;
    gdc::Registry::_registerStorageDataSignals((uint64_t)v251, 0x43A96E24B5C6AF5, (uint64_t)&v451, (uint64_t *)(v285 + 104));
LABEL_469:
    *(_QWORD *)v455 = v424;
    v288 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v285 + 32), (uint64_t)v455);
    if ((v289 & 1) != 0)
    {
      v295 = *(char **)(v285 + 88);
      v294 = *(_QWORD *)(v285 + 96);
      if ((unint64_t)v295 >= v294)
      {
        v297 = *(char **)(v285 + 80);
        v298 = (v295 - v297) >> 2;
        v299 = v298 + 1;
        if ((unint64_t)(v298 + 1) >> 62)
          goto LABEL_681;
        v300 = v294 - (_QWORD)v297;
        if (v300 >> 1 > v299)
          v299 = v300 >> 1;
        if ((unint64_t)v300 >= 0x7FFFFFFFFFFFFFFCLL)
          v301 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v301 = v299;
        if (v301)
        {
          if (v301 >> 62)
            goto LABEL_682;
          v302 = v301;
          v303 = operator new(4 * v301);
          v301 = v302;
        }
        else
        {
          v303 = 0;
        }
        v305 = &v303[4 * v298];
        *v305 = v259;
        v296 = v305 + 1;
        if (v295 != v297)
        {
          v306 = v295 - 4 - v297;
          if (v306 < 0x2C)
            goto LABEL_692;
          if ((unint64_t)(v297 - v303) < 0x20)
            goto LABEL_692;
          v307 = (v306 >> 2) + 1;
          v308 = &v303[4 * v298 - 16];
          v309 = v295 - 16;
          v310 = v307 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v311 = *(_OWORD *)v309;
            *(v308 - 1) = *((_OWORD *)v309 - 1);
            *v308 = v311;
            v308 -= 2;
            v309 -= 32;
            v310 -= 8;
          }
          while (v310);
          v305 -= v307 & 0x7FFFFFFFFFFFFFF8;
          v295 -= 4 * (v307 & 0x7FFFFFFFFFFFFFF8);
          if (v307 != (v307 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_692:
            do
            {
              v312 = *((_DWORD *)v295 - 1);
              v295 -= 4;
              *--v305 = v312;
            }
            while (v295 != v297);
          }
        }
        *(_QWORD *)(v285 + 80) = v305;
        *(_QWORD *)(v285 + 88) = v296;
        *(_QWORD *)(v285 + 96) = &v303[4 * v301];
        if (v297)
          operator delete(v297);
      }
      else
      {
        *(_DWORD *)v295 = v259;
        v296 = v295 + 4;
      }
      *(_QWORD *)(v285 + 88) = v296;
      v291 = *(_QWORD *)(v285 + 248);
      a1 = v420;
      v304 = *(_QWORD **)(v285 + 176);
      if (v304)
      {
LABEL_499:
        do
        {
          *(_QWORD *)&v451 = v455;
          *((_QWORD *)&v451 + 1) = 1;
          v457 = v291;
          v313 = v304[6];
          if (!v313)
            goto LABEL_679;
          (*(void (**)(uint64_t, uint64_t *, __int128 *))(*(_QWORD *)v313 + 48))(v313, &v457, &v451);
          v304 = (_QWORD *)*v304;
        }
        while (v304);
      }
    }
    else
    {
      v290 = (_DWORD *)(*(_QWORD *)(v285 + 80) + (((uint64_t)v288 - *(_QWORD *)(v285 + 56)) >> 1));
      *v290 = v259;
      v291 = *(_QWORD *)(v285 + 248);
      if (v290 == *(_DWORD **)(v285 + 88))
      {
        v304 = *(_QWORD **)(v285 + 176);
        if (v304)
          goto LABEL_499;
      }
      else
      {
        for (ii = *(_QWORD **)(v285 + 128); ii; ii = (_QWORD *)*ii)
        {
          *(_QWORD *)&v451 = v455;
          *((_QWORD *)&v451 + 1) = 1;
          v457 = v291;
          v293 = ii[6];
          if (!v293)
            goto LABEL_679;
          (*(void (**)(uint64_t, uint64_t *, __int128 *))(*(_QWORD *)v293 + 48))(v293, &v457, &v451);
        }
      }
    }
    v457 = 0x1F1291CF60257E81;
    v314 = (int8x8_t)v251[16];
    if (v314)
    {
      v315 = (uint8x8_t)vcnt_s8(v314);
      v315.i16[0] = vaddlv_u8(v315);
      if (v315.u32[0] > 1uLL)
      {
        v316 = 0x1F1291CF60257E81;
        if (*(_QWORD *)&v314 <= 0x1F1291CF60257E81uLL)
          v316 = 0x1F1291CF60257E81uLL % *(_QWORD *)&v314;
      }
      else
      {
        v316 = (*(_QWORD *)&v314 - 1) & 0x1F1291CF60257E81;
      }
      v317 = *(_QWORD **)(*v426 + 8 * v316);
      if (v317)
      {
        v318 = (_QWORD *)*v317;
        if (v318)
        {
          if (v315.u32[0] < 2uLL)
          {
            v319 = *(_QWORD *)&v314 - 1;
            while (1)
            {
              v321 = v318[1];
              if (v321 == 0x1F1291CF60257E81)
              {
                if (v318[2] == 0x1F1291CF60257E81)
                  goto LABEL_658;
              }
              else if ((v321 & v319) != v316)
              {
                goto LABEL_521;
              }
              v318 = (_QWORD *)*v318;
              if (!v318)
                goto LABEL_521;
            }
          }
          do
          {
            v320 = v318[1];
            if (v320 == 0x1F1291CF60257E81)
            {
              if (v318[2] == 0x1F1291CF60257E81)
              {
LABEL_658:
                v322 = v318[3];
                goto LABEL_524;
              }
            }
            else
            {
              if (v320 >= *(_QWORD *)&v314)
                v320 %= *(_QWORD *)&v314;
              if (v320 != v316)
                break;
            }
            v318 = (_QWORD *)*v318;
          }
          while (v318);
        }
      }
    }
LABEL_521:
    v322 = operator new();
    *(_QWORD *)(v322 + 16) = "md::components::SupportsDebugHighlight]";
    *(_QWORD *)(v322 + 24) = 38;
    *(_OWORD *)(v322 + 32) = 0u;
    *(_OWORD *)(v322 + 48) = 0u;
    *(_OWORD *)(v322 + 64) = 0u;
    *(_OWORD *)(v322 + 80) = 0u;
    *(_OWORD *)(v322 + 96) = 0u;
    *(_OWORD *)(v322 + 112) = 0u;
    *(_OWORD *)(v322 + 128) = 0u;
    *(_DWORD *)(v322 + 144) = 1065353216;
    *(_OWORD *)(v322 + 152) = 0u;
    *(_OWORD *)(v322 + 168) = 0u;
    *(_QWORD *)(v322 + 184) = 0;
    *(_DWORD *)(v322 + 192) = 1065353216;
    *(_OWORD *)(v322 + 200) = 0u;
    *(_OWORD *)(v322 + 216) = 0u;
    *(_QWORD *)(v322 + 232) = 0;
    *(_DWORD *)(v322 + 240) = 1065353216;
    *(_QWORD *)v322 = &off_1E42B3318;
    *(_QWORD *)(v322 + 8) = 0x1F1291CF60257E81;
    *(_QWORD *)(v322 + 248) = v251;
    v323 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v426, 0x1F1291CF60257E81uLL, &v457);
    v324 = v323[3];
    v323[3] = v322;
    if (v324)
      (*(void (**)(uint64_t))(*(_QWORD *)v324 + 8))(v324);
    *(_QWORD *)&v451 = 0x1F1291CF60257E81;
    *((_QWORD *)&v451 + 1) = "md::components::SupportsDebugHighlight]";
    *(_QWORD *)&v452 = 38;
    gdc::Registry::_registerStorageDataSignals((uint64_t)v251, 0x1F1291CF60257E81, (uint64_t)&v451, (uint64_t *)(v322 + 104));
LABEL_524:
    *(_QWORD *)v455 = v424;
    v325 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v322 + 32), (uint64_t)v455);
    if ((v326 & 1) != 0)
    {
      v331 = *(_BYTE **)(v322 + 88);
      v330 = *(_QWORD *)(v322 + 96);
      if ((unint64_t)v331 >= v330)
      {
        v333 = *(char **)(v322 + 80);
        v334 = v331 - v333;
        v335 = v331 - v333 + 1;
        if (v335 < 0)
          goto LABEL_681;
        v336 = v330 - (_QWORD)v333;
        if (2 * v336 > v335)
          v335 = 2 * v336;
        if (v336 >= 0x3FFFFFFFFFFFFFFFLL)
          v337 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v337 = v335;
        if (v337)
          v338 = (char *)operator new(v337);
        else
          v338 = 0;
        v340 = &v338[v334];
        v332 = (uint64_t)&v338[v334 + 1];
        v341 = (char *)(v333 - v331);
        if (v333 == v331)
          v341 = 0;
        *(_QWORD *)(v322 + 80) = &v341[(_QWORD)v340];
        *(_QWORD *)(v322 + 88) = v332;
        *(_QWORD *)(v322 + 96) = &v338[v337];
        if (v333)
          operator delete(v333);
      }
      else
      {
        v332 = (uint64_t)(v331 + 1);
      }
      *(_QWORD *)(v322 + 88) = v332;
      v327 = *(_QWORD *)(v322 + 248);
      v339 = *(_QWORD **)(v322 + 176);
      if (v339)
      {
LABEL_548:
        do
        {
          *(_QWORD *)&v451 = v455;
          *((_QWORD *)&v451 + 1) = 1;
          v457 = v327;
          v342 = v339[6];
          if (!v342)
            goto LABEL_679;
          (*(void (**)(uint64_t, uint64_t *, __int128 *))(*(_QWORD *)v342 + 48))(v342, &v457, &v451);
          v339 = (_QWORD *)*v339;
        }
        while (v339);
      }
    }
    else
    {
      v327 = *(_QWORD *)(v322 + 248);
      if (*(_QWORD *)(v322 + 80) + (((uint64_t)v325 - *(_QWORD *)(v322 + 56)) >> 3) == *(_QWORD *)(v322 + 88))
      {
        v339 = *(_QWORD **)(v322 + 176);
        if (v339)
          goto LABEL_548;
      }
      else
      {
        for (jj = *(_QWORD **)(v322 + 128); jj; jj = (_QWORD *)*jj)
        {
          *(_QWORD *)&v451 = v455;
          *((_QWORD *)&v451 + 1) = 1;
          v457 = v327;
          v329 = jj[6];
          if (!v329)
            goto LABEL_679;
          (*(void (**)(uint64_t, uint64_t *, __int128 *))(*(_QWORD *)v329 + 48))(v329, &v457, &v451);
        }
      }
    }
    v457 = 0x3FD9D9EF0A6A9A58;
    v343 = (int8x8_t)v251[16];
    if (v343)
    {
      v344 = (uint8x8_t)vcnt_s8(v343);
      v344.i16[0] = vaddlv_u8(v344);
      if (v344.u32[0] > 1uLL)
      {
        v345 = 0x3FD9D9EF0A6A9A58;
        if (*(_QWORD *)&v343 <= 0x3FD9D9EF0A6A9A58uLL)
          v345 = 0x3FD9D9EF0A6A9A58uLL % *(_QWORD *)&v343;
      }
      else
      {
        v345 = (*(_QWORD *)&v343 - 1) & 0x3FD9D9EF0A6A9A58;
      }
      v346 = *(_QWORD **)(*v426 + 8 * v345);
      if (v346)
      {
        v347 = (_QWORD *)*v346;
        if (v347)
        {
          if (v344.u32[0] < 2uLL)
          {
            v348 = *(_QWORD *)&v343 - 1;
            while (1)
            {
              v350 = v347[1];
              if (v350 == 0x3FD9D9EF0A6A9A58)
              {
                if (v347[2] == 0x3FD9D9EF0A6A9A58)
                  goto LABEL_659;
              }
              else if ((v350 & v348) != v345)
              {
                goto LABEL_570;
              }
              v347 = (_QWORD *)*v347;
              if (!v347)
                goto LABEL_570;
            }
          }
          do
          {
            v349 = v347[1];
            if (v349 == 0x3FD9D9EF0A6A9A58)
            {
              if (v347[2] == 0x3FD9D9EF0A6A9A58)
              {
LABEL_659:
                v351 = v347[3];
                goto LABEL_573;
              }
            }
            else
            {
              if (v349 >= *(_QWORD *)&v343)
                v349 %= *(_QWORD *)&v343;
              if (v349 != v345)
                break;
            }
            v347 = (_QWORD *)*v347;
          }
          while (v347);
        }
      }
    }
LABEL_570:
    v351 = operator new();
    *(_QWORD *)(v351 + 16) = "md::components::Collapsible]";
    *(_QWORD *)(v351 + 24) = 27;
    *(_OWORD *)(v351 + 32) = 0u;
    *(_OWORD *)(v351 + 48) = 0u;
    *(_OWORD *)(v351 + 64) = 0u;
    *(_OWORD *)(v351 + 80) = 0u;
    *(_OWORD *)(v351 + 96) = 0u;
    *(_OWORD *)(v351 + 112) = 0u;
    *(_OWORD *)(v351 + 128) = 0u;
    *(_DWORD *)(v351 + 144) = 1065353216;
    *(_OWORD *)(v351 + 152) = 0u;
    *(_OWORD *)(v351 + 168) = 0u;
    *(_QWORD *)(v351 + 184) = 0;
    *(_DWORD *)(v351 + 192) = 1065353216;
    *(_OWORD *)(v351 + 200) = 0u;
    *(_OWORD *)(v351 + 216) = 0u;
    *(_QWORD *)(v351 + 232) = 0;
    *(_DWORD *)(v351 + 240) = 1065353216;
    *(_QWORD *)v351 = &off_1E42B2EC8;
    *(_QWORD *)(v351 + 8) = 0x3FD9D9EF0A6A9A58;
    *(_QWORD *)(v351 + 248) = v251;
    v352 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v426, 0x3FD9D9EF0A6A9A58uLL, &v457);
    v353 = v352[3];
    v352[3] = v351;
    if (v353)
      (*(void (**)(uint64_t))(*(_QWORD *)v353 + 8))(v353);
    *(_QWORD *)&v451 = 0x3FD9D9EF0A6A9A58;
    *((_QWORD *)&v451 + 1) = "md::components::Collapsible]";
    *(_QWORD *)&v452 = 27;
    gdc::Registry::_registerStorageDataSignals((uint64_t)v251, 0x3FD9D9EF0A6A9A58, (uint64_t)&v451, (uint64_t *)(v351 + 104));
LABEL_573:
    *(_QWORD *)v455 = v424;
    v354 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v351 + 32), (uint64_t)v455);
    if ((v355 & 1) != 0)
    {
      v360 = *(_BYTE **)(v351 + 88);
      v359 = *(_QWORD *)(v351 + 96);
      if ((unint64_t)v360 >= v359)
      {
        v362 = *(char **)(v351 + 80);
        v363 = v360 - v362;
        v364 = v360 - v362 + 1;
        if (v364 < 0)
LABEL_681:
          abort();
        v365 = v359 - (_QWORD)v362;
        if (2 * v365 > v364)
          v364 = 2 * v365;
        if (v365 >= 0x3FFFFFFFFFFFFFFFLL)
          v366 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v366 = v364;
        if (v366)
          v367 = (char *)operator new(v366);
        else
          v367 = 0;
        v368 = &v367[v366];
        v361 = (uint64_t)&v367[v363 + 1];
        v369 = (char *)(v362 - v360);
        if (v362 == v360)
          v369 = 0;
        *(_QWORD *)(v351 + 80) = &v367[v363 + (_QWORD)v369];
        *(_QWORD *)(v351 + 88) = v361;
        *(_QWORD *)(v351 + 96) = v368;
        if (v362)
          operator delete(v362);
      }
      else
      {
        v361 = (uint64_t)(v360 + 1);
      }
      *(_QWORD *)(v351 + 88) = v361;
      v356 = *(_QWORD *)(v351 + 248);
    }
    else
    {
      v356 = *(_QWORD *)(v351 + 248);
      if (*(_QWORD *)(v351 + 80) + (((uint64_t)v354 - *(_QWORD *)(v351 + 56)) >> 3) != *(_QWORD *)(v351 + 88))
      {
        v357 = *(_QWORD **)(v351 + 128);
        if (v357)
        {
          while (1)
          {
            *(_QWORD *)&v451 = v455;
            *((_QWORD *)&v451 + 1) = 1;
            v457 = v356;
            v358 = v357[6];
            if (!v358)
              goto LABEL_679;
            (*(void (**)(uint64_t, uint64_t *, __int128 *))(*(_QWORD *)v358 + 48))(v358, &v457, &v451);
            v357 = (_QWORD *)*v357;
            if (!v357)
              goto LABEL_598;
          }
        }
        goto LABEL_598;
      }
    }
    for (kk = *(_QWORD **)(v351 + 176); kk; kk = (_QWORD *)*kk)
    {
      *(_QWORD *)&v451 = v455;
      *((_QWORD *)&v451 + 1) = 1;
      v457 = v356;
      v371 = kk[6];
      if (!v371)
        goto LABEL_679;
      (*(void (**)(uint64_t, uint64_t *, __int128 *))(*(_QWORD *)v371 + 48))(v371, &v457, &v451);
    }
LABEL_598:
    v372 = a1[165];
    *(_QWORD *)&v451 = 0x251D10CE20A5B012;
    v373 = *(int8x8_t *)(v372 + 128);
    if (v373)
    {
      v374 = (uint8x8_t)vcnt_s8(v373);
      v374.i16[0] = vaddlv_u8(v374);
      if (v374.u32[0] > 1uLL)
      {
        v375 = 0x251D10CE20A5B012;
        if (*(_QWORD *)&v373 <= 0x251D10CE20A5B012uLL)
          v375 = 0x251D10CE20A5B012uLL % *(_QWORD *)&v373;
      }
      else
      {
        v375 = (*(_QWORD *)&v373 - 1) & 0x251D10CE20A5B012;
      }
      v376 = *(_QWORD **)(*(_QWORD *)(v372 + 120) + 8 * v375);
      if (v376)
      {
        v377 = (_QWORD *)*v376;
        if (v377)
        {
          if (v374.u32[0] < 2uLL)
          {
            v378 = *(_QWORD *)&v373 - 1;
            while (1)
            {
              v380 = v377[1];
              if (v380 == 0x251D10CE20A5B012)
              {
                if (v377[2] == 0x251D10CE20A5B012)
                  goto LABEL_660;
              }
              else if ((v380 & v378) != v375)
              {
                goto LABEL_618;
              }
              v377 = (_QWORD *)*v377;
              if (!v377)
                goto LABEL_618;
            }
          }
          do
          {
            v379 = v377[1];
            if (v379 == 0x251D10CE20A5B012)
            {
              if (v377[2] == 0x251D10CE20A5B012)
              {
LABEL_660:
                v381 = v377[3];
                goto LABEL_621;
              }
            }
            else
            {
              if (v379 >= *(_QWORD *)&v373)
                v379 %= *(_QWORD *)&v373;
              if (v379 != v375)
                break;
            }
            v377 = (_QWORD *)*v377;
          }
          while (v377);
        }
      }
    }
LABEL_618:
    v381 = operator new();
    *(_QWORD *)(v381 + 16) = "md::components::PendingMaterial]";
    *(_QWORD *)(v381 + 24) = 31;
    *(_OWORD *)(v381 + 32) = 0u;
    *(_OWORD *)(v381 + 48) = 0u;
    *(_OWORD *)(v381 + 64) = 0u;
    *(_OWORD *)(v381 + 80) = 0u;
    *(_OWORD *)(v381 + 96) = 0u;
    *(_OWORD *)(v381 + 112) = 0u;
    *(_OWORD *)(v381 + 128) = 0u;
    *(_DWORD *)(v381 + 144) = 1065353216;
    *(_OWORD *)(v381 + 152) = 0u;
    *(_OWORD *)(v381 + 168) = 0u;
    *(_QWORD *)(v381 + 184) = 0;
    *(_DWORD *)(v381 + 192) = 1065353216;
    *(_OWORD *)(v381 + 200) = 0u;
    *(_OWORD *)(v381 + 216) = 0u;
    *(_QWORD *)(v381 + 232) = 0;
    *(_DWORD *)(v381 + 240) = 1065353216;
    *(_QWORD *)v381 = &off_1E42B3018;
    *(_QWORD *)(v381 + 8) = 0x251D10CE20A5B012;
    *(_QWORD *)(v381 + 248) = v372;
    v382 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)(v372 + 120), 0x251D10CE20A5B012uLL, &v451);
    v383 = v382[3];
    v382[3] = v381;
    if (v383)
      (*(void (**)(uint64_t))(*(_QWORD *)v383 + 8))(v383);
    buf.i64[0] = 0x251D10CE20A5B012;
    buf.i64[1] = (uint64_t)"md::components::PendingMaterial]";
    v428 = 31;
    gdc::Registry::_registerStorageDataSignals(v372, 0x251D10CE20A5B012, (uint64_t)&buf, (uint64_t *)(v381 + 104));
LABEL_621:
    v384 = *((_QWORD *)v422 + 2);
    v457 = v424;
    v385 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v381 + 32), (uint64_t)&v457);
    if ((v386 & 1) == 0)
    {
      v387 = (_QWORD *)((char *)v385 + *(_QWORD *)(v381 + 80) - *(_QWORD *)(v381 + 56));
      *v387 = v384;
      v388 = *(_QWORD *)(v381 + 248);
      if (v387 == *(_QWORD **)(v381 + 88))
      {
        a1 = v420;
        v400 = *(_QWORD **)(v381 + 176);
        if (v400)
          goto LABEL_653;
      }
      else
      {
        v389 = *(_QWORD **)(v381 + 128);
        a1 = v420;
        if (v389)
        {
          while (1)
          {
            buf.i64[0] = (uint64_t)&v457;
            buf.i64[1] = 1;
            *(_QWORD *)&v451 = v388;
            v390 = v389[6];
            if (!v390)
              goto LABEL_679;
            (*(void (**)(uint64_t, __int128 *, int64x2_t *))(*(_QWORD *)v390 + 48))(v390, &v451, &buf);
            v389 = (_QWORD *)*v389;
            if (!v389)
              goto LABEL_351;
          }
        }
      }
      goto LABEL_351;
    }
    v392 = *(char **)(v381 + 88);
    v391 = *(_QWORD *)(v381 + 96);
    if ((unint64_t)v392 < v391)
    {
      *(_QWORD *)v392 = v384;
      v393 = v392 + 8;
      a1 = v420;
      goto LABEL_652;
    }
    v394 = *(char **)(v381 + 80);
    v395 = (v392 - v394) >> 3;
    v396 = v395 + 1;
    if ((unint64_t)(v395 + 1) >> 61)
      abort();
    v397 = v391 - (_QWORD)v394;
    if (v397 >> 2 > v396)
      v396 = v397 >> 2;
    if ((unint64_t)v397 >= 0x7FFFFFFFFFFFFFF8)
      v398 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v398 = v396;
    if (v398)
    {
      if (v398 >> 61)
        goto LABEL_682;
      v399 = operator new(8 * v398);
    }
    else
    {
      v399 = 0;
    }
    v401 = &v399[8 * v395];
    *v401 = v384;
    v393 = v401 + 1;
    if (v392 == v394)
    {
      a1 = v420;
      goto LABEL_650;
    }
    v402 = v392 - 8 - v394;
    if (v402 < 0x58)
    {
      a1 = v420;
      do
      {
LABEL_649:
        v408 = *((_QWORD *)v392 - 1);
        v392 -= 8;
        *--v401 = v408;
      }
      while (v392 != v394);
      goto LABEL_650;
    }
    a1 = v420;
    if ((unint64_t)(v394 - v399) < 0x20)
      goto LABEL_649;
    v403 = (v402 >> 3) + 1;
    v404 = &v399[8 * v395 - 16];
    v405 = v392 - 16;
    v406 = v403 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v407 = *(_OWORD *)v405;
      *(v404 - 1) = *((_OWORD *)v405 - 1);
      *v404 = v407;
      v404 -= 2;
      v405 -= 32;
      v406 -= 4;
    }
    while (v406);
    v401 -= v403 & 0x3FFFFFFFFFFFFFFCLL;
    v392 -= 8 * (v403 & 0x3FFFFFFFFFFFFFFCLL);
    if (v403 != (v403 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_649;
LABEL_650:
    *(_QWORD *)(v381 + 80) = v401;
    *(_QWORD *)(v381 + 88) = v393;
    *(_QWORD *)(v381 + 96) = &v399[8 * v398];
    if (v394)
      operator delete(v394);
LABEL_652:
    *(_QWORD *)(v381 + 88) = v393;
    v388 = *(_QWORD *)(v381 + 248);
    v400 = *(_QWORD **)(v381 + 176);
    if (v400)
    {
LABEL_653:
      do
      {
        buf.i64[0] = (uint64_t)&v457;
        buf.i64[1] = 1;
        *(_QWORD *)&v451 = v388;
        v409 = v400[6];
        if (!v409)
          goto LABEL_679;
        (*(void (**)(uint64_t, __int128 *, int64x2_t *))(*(_QWORD *)v409 + 48))(v409, &v451, &buf);
        v400 = (_QWORD *)*v400;
      }
      while (v400);
    }
LABEL_351:
    v189 = v421 + 1;
    v188 = *((_QWORD *)v422 + 3);
    if (v421 + 1 >= (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((*((_QWORD *)v422 + 4) - v188) >> 3)))
      goto LABEL_319;
  }
  v275 = *(_QWORD **)(v269 + 176);
  if (!v275)
    goto LABEL_446;
  while (1)
  {
    v457 = (uint64_t)v456;
    v458 = 1;
    *(_QWORD *)v455 = v272;
    v276 = v275[6];
    if (!v276)
      break;
    (*(void (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v276 + 48))(v276, v455, &v457);
    v275 = (_QWORD *)*v275;
    if (!v275)
      goto LABEL_446;
  }
LABEL_679:
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_19F31FCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char *__p,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  char *v52;
  char *v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;

  if (__p)
  {
    v52 = (char *)a47;
    v53 = __p;
    if ((char *)a47 != __p)
    {
      do
      {
        v54 = (void *)*((_QWORD *)v52 - 3);
        if (v54)
        {
          *((_QWORD *)v52 - 2) = v54;
          operator delete(v54);
        }
        v55 = (std::__shared_weak_count *)*((_QWORD *)v52 - 5);
        if (v55)
        {
          p_shared_owners = (unint64_t *)&v55->__shared_owners_;
          do
            v57 = __ldaxr(p_shared_owners);
          while (__stlxr(v57 - 1, p_shared_owners));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        v52 -= 48;
      }
      while (v52 != __p);
      v53 = __p;
    }
    operator delete(v53);
  }
  md::DaVinciDecalBuilder::~DaVinciDecalBuilder((md::DaVinciDecalBuilder *)&a51);
  _Unwind_Resume(a1);
}

void md::PuckRenderLayer::~PuckRenderLayer(md::PuckRenderLayer *this)
{
  md::PuckRenderResources *v2;
  void *v3;

  *(_QWORD *)this = &off_1E4290A30;
  v2 = (md::PuckRenderResources *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
  {
    md::PuckRenderResources::~PuckRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  *(_QWORD *)this = off_1E428C468;
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1A1AF4E00);
}

{
  md::PuckRenderResources *v2;
  void *v3;

  *(_QWORD *)this = &off_1E4290A30;
  v2 = (md::PuckRenderResources *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
  {
    md::PuckRenderResources::~PuckRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  *(_QWORD *)this = off_1E428C468;
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

void ggl::TexturedExtendedShader::typedReflection(ggl::TexturedExtendedShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::TexturedExtendedShader::typedReflection(void)::ref = (uint64_t)"TexturedExtendedShader";
      ggl::texturedExtendedShaderVertexFunctionDescriptor(v2);
      qword_1ECE3A960 = (uint64_t)&ggl::texturedExtendedShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<29ul>("TexturedExtendedShaderVertex");
      dword_1ECE3A968 = (int)v3;
      ggl::texturedExtendedShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3A970 = (uint64_t)&ggl::texturedExtendedShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3A978 = ggl::crc32::compute<31ul>("TexturedExtendedShaderFragment");
      qword_1ECE3A980 = (uint64_t)ggl::texturedExtendedShaderShaderConstants(void)::ref;
      unk_1ECE3A988 = 4;
      qword_1ECE3A990 = (uint64_t)ggl::texturedExtendedShaderShaderTextures(void)::ref;
      unk_1ECE3A998 = 1;
      qword_1ECE3A9A0 = (uint64_t)ggl::texturedExtendedShaderShaderSamplers(void)::ref;
      unk_1ECE3A9A8 = 1;
    }
  }
}

void ggl::texturedExtendedShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::texturedExtendedShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("TexturedExtendedShaderFragment");
      *(_DWORD *)algn_1ECE40B44 = 1;
      qword_1ECE40B48 = (uint64_t)"TexturedExtendedShader";
      unk_1ECE40B50 = 0;
      qword_1ECE40B58 = 0;
      unk_1ECE40B60 = &ggl::texturedExtendedShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE40B68 = 1;
      unk_1ECE40B70 = &ggl::texturedExtendedShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE40B78 = 0;
      unk_1ECE40B80 = &ggl::texturedExtendedShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE40B88 = 1;
      unk_1ECE40B90 = &ggl::texturedExtendedShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE40BA0 = 0;
      unk_1ECE40BA8 = 0;
      qword_1ECE40B98 = 1;
    }
  }
}

void ggl::texturedExtendedShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::texturedExtendedShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("TexturedExtendedShaderVertex");
      *(_DWORD *)algn_1ECE3FD2C = 0;
      qword_1ECE3FD30 = (uint64_t)"TexturedExtendedShader";
      unk_1ECE3FD38 = ggl::texturedExtendedShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3FD40 = 1;
      unk_1ECE3FD48 = &ggl::texturedExtendedShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3FD50 = 3;
      unk_1ECE3FD58 = &ggl::texturedExtendedShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3FD60 = 0;
      unk_1ECE3FD68 = &ggl::texturedExtendedShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3FD70 = 0;
      unk_1ECE3FD78 = &ggl::texturedExtendedShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3FD88 = 0;
      unk_1ECE3FD90 = 0;
      qword_1ECE3FD80 = 0;
    }
  }
}

void ggl::TextureAlphaMaskShader::typedReflection(ggl::TextureAlphaMaskShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::TextureAlphaMaskShader::typedReflection(void)::ref = (uint64_t)"TextureAlphaMaskShader";
      ggl::textureAlphaMaskShaderVertexFunctionDescriptor(v2);
      qword_1ECE3A900 = (uint64_t)&ggl::textureAlphaMaskShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<29ul>("TextureAlphaMaskShaderVertex");
      dword_1ECE3A908 = (int)v3;
      ggl::textureAlphaMaskShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3A910 = (uint64_t)&ggl::textureAlphaMaskShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3A918 = ggl::crc32::compute<31ul>("TextureAlphaMaskShaderFragment");
      qword_1ECE3A920 = (uint64_t)ggl::textureAlphaMaskShaderShaderConstants(void)::ref;
      unk_1ECE3A928 = 2;
      qword_1ECE3A930 = (uint64_t)ggl::textureAlphaMaskShaderShaderTextures(void)::ref;
      unk_1ECE3A938 = 1;
      qword_1ECE3A940 = (uint64_t)&ggl::textureAlphaMaskShaderShaderSamplers(void)::ref;
      unk_1ECE3A948 = 1;
    }
  }
}

void ggl::textureAlphaMaskShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::textureAlphaMaskShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("TextureAlphaMaskShaderFragment");
      *(_DWORD *)algn_1ECE40AD4 = 1;
      qword_1ECE40AD8 = (uint64_t)"TextureAlphaMaskShader";
      unk_1ECE40AE0 = 0;
      qword_1ECE40AE8 = 0;
      unk_1ECE40AF0 = &ggl::textureAlphaMaskShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE40AF8 = 1;
      unk_1ECE40B00 = &ggl::textureAlphaMaskShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE40B08 = 0;
      unk_1ECE40B10 = &ggl::textureAlphaMaskShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE40B18 = 1;
      unk_1ECE40B20 = &ggl::textureAlphaMaskShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE40B30 = 0;
      unk_1ECE40B38 = 0;
      qword_1ECE40B28 = 1;
    }
  }
}

void ggl::textureAlphaMaskShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::textureAlphaMaskShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("TextureAlphaMaskShaderVertex");
      *(_DWORD *)algn_1ECE3FCBC = 0;
      qword_1ECE3FCC0 = (uint64_t)"TextureAlphaMaskShader";
      unk_1ECE3FCC8 = ggl::textureAlphaMaskShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3FCD0 = 1;
      unk_1ECE3FCD8 = &ggl::textureAlphaMaskShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3FCE0 = 1;
      unk_1ECE3FCE8 = &ggl::textureAlphaMaskShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3FCF0 = 0;
      unk_1ECE3FCF8 = &ggl::textureAlphaMaskShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3FD00 = 0;
      unk_1ECE3FD08 = &ggl::textureAlphaMaskShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3FD18 = 0;
      unk_1ECE3FD20 = 0;
      qword_1ECE3FD10 = 0;
    }
  }
}

void md::Logic<md::IdentifiedResourceLogic,md::IdentifiedResourceContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>>::_allocateContext(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  char v71;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v38, a1);
  v5 = operator new();
  v6 = v38;
  v7 = v39;
  v38 = 0;
  v39 = 0;
  *(_QWORD *)v5 = v6;
  *(_QWORD *)(v5 + 8) = v7;
  v9 = v40;
  v8 = v41;
  *(_QWORD *)(v5 + 16) = v40;
  *(_QWORD *)(v5 + 24) = v8;
  *(_DWORD *)(v5 + 32) = v42;
  if (v8)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7)
        v10 %= v7;
    }
    else
    {
      v10 &= v7 - 1;
    }
    *(_QWORD *)(v6 + 8 * v10) = v5 + 16;
    v40 = 0;
    v41 = 0;
  }
  v11 = v43;
  v12 = v44;
  v13 = v45;
  v14 = v46;
  *(_QWORD *)(v5 + 56) = v45;
  v43 = 0;
  v44 = 0;
  *(_QWORD *)(v5 + 40) = v11;
  *(_QWORD *)(v5 + 48) = v12;
  *(_QWORD *)(v5 + 64) = v14;
  *(_DWORD *)(v5 + 72) = v47;
  if (v14)
  {
    v15 = *(_QWORD *)(v13 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v15 >= v12)
        v15 %= v12;
    }
    else
    {
      v15 &= v12 - 1;
    }
    *(_QWORD *)(v11 + 8 * v15) = v5 + 56;
    v45 = 0;
    v46 = 0;
  }
  v16 = v48;
  v17 = v49;
  v48 = 0;
  v49 = 0;
  v19 = v50;
  v18 = v51;
  *(_QWORD *)(v5 + 96) = v50;
  *(_QWORD *)(v5 + 80) = v16;
  *(_QWORD *)(v5 + 88) = v17;
  *(_QWORD *)(v5 + 104) = v18;
  *(_DWORD *)(v5 + 112) = v52;
  if (v18)
  {
    v20 = *(_QWORD *)(v19 + 8);
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v20 >= v17)
        v20 %= v17;
    }
    else
    {
      v20 &= v17 - 1;
    }
    *(_QWORD *)(v16 + 8 * v20) = v5 + 96;
    v50 = 0;
    v51 = 0;
  }
  v21 = v53;
  v22 = v54;
  v23 = v55;
  v24 = v56;
  *(_QWORD *)(v5 + 136) = v55;
  v53 = 0;
  v54 = 0;
  *(_QWORD *)(v5 + 120) = v21;
  *(_QWORD *)(v5 + 128) = v22;
  *(_QWORD *)(v5 + 144) = v24;
  *(_DWORD *)(v5 + 152) = v57;
  if (v24)
  {
    v25 = *(_QWORD *)(v23 + 8);
    if ((v22 & (v22 - 1)) != 0)
    {
      if (v25 >= v22)
        v25 %= v22;
    }
    else
    {
      v25 &= v22 - 1;
    }
    *(_QWORD *)(v21 + 8 * v25) = v5 + 136;
    v55 = 0;
    v56 = 0;
  }
  v26 = v58;
  v27 = v61;
  v28 = v62;
  *(_QWORD *)(v5 + 200) = v62;
  *(_OWORD *)(v5 + 160) = v26;
  v58 = 0uLL;
  v29 = v59;
  v30 = v60;
  v60 = 0;
  v61 = 0;
  v59 = 0;
  *(_QWORD *)(v5 + 176) = v29;
  *(_QWORD *)(v5 + 184) = v30;
  *(_QWORD *)(v5 + 192) = v27;
  v31 = v63;
  *(_QWORD *)(v5 + 208) = v63;
  *(_DWORD *)(v5 + 216) = v64;
  if (v31)
  {
    v32 = *(_QWORD *)(v28 + 8);
    if ((v27 & (v27 - 1)) != 0)
    {
      if (v32 >= v27)
        v32 %= v27;
    }
    else
    {
      v32 &= v27 - 1;
    }
    *(_QWORD *)(v30 + 8 * v32) = v5 + 200;
    v62 = 0;
    v63 = 0;
  }
  v33 = v65;
  v34 = v66;
  v35 = v67;
  v36 = v68;
  *(_QWORD *)(v5 + 240) = v67;
  v65 = 0;
  v66 = 0;
  *(_QWORD *)(v5 + 224) = v33;
  *(_QWORD *)(v5 + 232) = v34;
  *(_QWORD *)(v5 + 248) = v36;
  *(_DWORD *)(v5 + 256) = v69;
  if (v36)
  {
    v37 = *(_QWORD *)(v35 + 8);
    if ((v34 & (v34 - 1)) != 0)
    {
      if (v37 >= v34)
        v37 %= v34;
    }
    else
    {
      v37 &= v34 - 1;
    }
    *(_QWORD *)(v33 + 8 * v37) = v5 + 240;
    v67 = 0;
    v68 = 0;
  }
  *(_DWORD *)(v5 + 264) = v70;
  *(_BYTE *)(v5 + 268) = v71;
  v4[2] = "md::IdentifiedResourceContext]";
  v4[3] = 29;
  v4[4] = v5;
  *v4 = &off_1E42B12C0;
  v4[1] = 0x12B1E486D3040E2CLL;
  *a2 = v4;
  md::IdentifiedResourceContext::~IdentifiedResourceContext((md::IdentifiedResourceContext *)&v38);
}

void sub_19F3206D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  md::IdentifiedResourceContext::~IdentifiedResourceContext((md::IdentifiedResourceContext *)&a9);
  MEMORY[0x1A1AF4E00](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

double md::Logic<md::IdentifiedResourceLogic,md::IdentifiedResourceContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::LayerDataLogicContext,md::RegistryContext,md::ElevationContext>,gdc::TypeList<md::AssetInjectionContext>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 1065353216;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 256) = 1065353216;
  *(_DWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 268) = 0;
  return result;
}

void __destroy_helper_block_ea8_40c47_ZTSNSt3__110shared_ptrIN2md14MeshSetStorageEEE80c310_ZTSNSt3__113unordered_mapIN3gss19FeatureAttributeSetENS_6vectorINS_4pairIN12_GLOBAL__N_110PolygonKeyEN3geo11_retain_ptrIU8__strongP14VKPolygonGroupNS7_16_retain_objc_arcENS7_17_release_objc_arcENS7_10_hash_objcENS7_11_equal_objcEEEEENS_9allocatorISH_EEEENS_4hashIS2_EENS_8equal_toIS2_EENSI_INS4_IKS2_SK_EEEEEE120c45_ZTSNSt3__110shared_ptrIN2md12PolygonRoundEEE(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = a1 + 80;
  v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(std::__shared_weak_count **)(a1 + 48);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void md::PolygonLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  std::__sp_mut *sp_mut;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned int v12;
  int32x2_t *v13;
  __int32 v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  _QWORD *i;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  float v54;
  __int128 v55;
  void *__p;
  _QWORD *v57;
  char *v58;
  void *v59[3];
  _BYTE v60[4];
  int32x2_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;

  sp_mut = std::__get_sp_mut((const void *)(a1 + 784));
  std::__sp_mut::lock(sp_mut);
  v9 = *(std::__shared_weak_count **)(a1 + 792);
  v62 = *(_QWORD *)(a1 + 784);
  v63 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  std::__sp_mut::unlock(sp_mut);
  v12 = atomic_load((unsigned int *)(a1 + 800));
  if (v62)
  {
    v54 = *(float *)&v12;
    v13 = *(int32x2_t **)(a2 + 16);
    v14 = v13[1].i32[0];
    v60[0] = v13[1].i32[1];
    v60[1] = v14;
    v61 = vrev64_s32(*v13);
    memset(v59, 0, sizeof(v59));
    gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], v59);
    __p = 0;
    v57 = 0;
    v58 = 0;
    v15 = (unsigned __int16 *)*a3;
    v16 = (unsigned __int16 *)a3[1];
    if ((unsigned __int16 *)*a3 != v16)
    {
      while (*(unsigned __int16 *)(a1 + 584) != *v15)
      {
        v15 += 24;
        if (v15 == v16)
          goto LABEL_51;
      }
    }
    if (v15 != v16)
    {
      for (i = (_QWORD *)*((_QWORD *)v15 + 3); i; i = (_QWORD *)*i)
      {
        v18 = i[14];
        v19 = i[15];
        *(_QWORD *)&v55 = v18;
        *((_QWORD *)&v55 + 1) = v19;
        if (v19)
        {
          v20 = (unint64_t *)(v19 + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          v23 = v57;
          v22 = v58;
          if (v57 >= (_QWORD *)v58)
          {
LABEL_22:
            v27 = __p;
            v28 = ((char *)v23 - (_BYTE *)__p) >> 4;
            v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 60)
              abort();
            v30 = v22 - (_BYTE *)__p;
            v31 = (v22 - (_BYTE *)__p) >> 3;
            if (v31 > v29)
              v29 = v31;
            if (v30 >= 0x7FFFFFFFFFFFFFF0)
              v32 = 0xFFFFFFFFFFFFFFFLL;
            else
              v32 = v29;
            if (v32 >> 60)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v33 = (char *)operator new(16 * v32);
            v34 = &v33[16 * v28];
            v35 = *((_QWORD *)&v55 + 1);
            *(_OWORD *)v34 = v55;
            if (v35)
            {
              v36 = (unint64_t *)(v35 + 8);
              do
                v37 = __ldxr(v36);
              while (__stxr(v37 + 1, v36));
              v23 = v57;
            }
            v26 = v34 + 16;
            if (v23 == v27)
            {
              __p = v34;
              v58 = &v33[16 * v32];
            }
            else
            {
              v38 = v23;
              do
              {
                v39 = *((_OWORD *)v38 - 1);
                v38 -= 2;
                *((_OWORD *)v34 - 1) = v39;
                v34 -= 16;
                *v38 = 0;
                v38[1] = 0;
              }
              while (v38 != v27);
              __p = v34;
              v57 = v26;
              v58 = &v33[16 * v32];
              do
              {
                v40 = (std::__shared_weak_count *)*(v23 - 1);
                if (v40)
                {
                  v41 = (unint64_t *)&v40->__shared_owners_;
                  do
                    v42 = __ldaxr(v41);
                  while (__stlxr(v42 - 1, v41));
                  if (!v42)
                  {
                    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                    std::__shared_weak_count::__release_weak(v40);
                  }
                }
                v23 -= 2;
              }
              while (v23 != v27);
            }
            if (v27)
              operator delete(v27);
            goto LABEL_46;
          }
          *v57 = v18;
          v23[1] = v19;
          v24 = (unint64_t *)(v19 + 8);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
          v26 = v23 + 2;
        }
        else
        {
          v23 = v57;
          v22 = v58;
          if (v57 >= (_QWORD *)v58)
            goto LABEL_22;
          *v57 = v18;
          v23[1] = 0;
          v26 = v23 + 2;
        }
LABEL_46:
        v57 = v26;
        if (*((_QWORD *)&v55 + 1))
        {
          v43 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v55 + 1) + 16))(*((_QWORD *)&v55 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v55 + 1));
          }
        }
      }
    }
LABEL_51:
    md::PolygonLayerDataSource::createPolygonTileData(&v55, a1, a2, (uint64_t)v60, (unint64_t *)&__p, &v62, (uint64_t)v59, v54);
    *(_OWORD *)a4 = v55;
    v45 = __p;
    if (__p)
    {
      v46 = v57;
      v47 = __p;
      if (v57 != __p)
      {
        do
        {
          v48 = (std::__shared_weak_count *)*(v46 - 1);
          if (v48)
          {
            v49 = (unint64_t *)&v48->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          v46 -= 2;
        }
        while (v46 != v45);
        v47 = __p;
      }
      v57 = v45;
      operator delete(v47);
    }
    if (v59[0])
      operator delete(v59[0]);
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
  }
  v51 = v63;
  if (v63)
  {
    v52 = (unint64_t *)&v63->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
}

void sub_19F320BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p)
{
  uint64_t v17;

  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)&a14);
  if (__p)
    operator delete(__p);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v17 - 96);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<gss::FeatureAttributeSet,std::vector<std::pair<`anonymous namespace'::PolygonKey,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>,std::__unordered_map_hasher<gss::FeatureAttributeSet,std::__hash_value_type<gss::FeatureAttributeSet,std::vector<std::pair<`anonymous namespace'::PolygonKey,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>,std::hash<gss::FeatureAttributeSet>,std::equal_to<gss::FeatureAttributeSet>,true>,std::__unordered_map_equal<gss::FeatureAttributeSet,std::__hash_value_type<gss::FeatureAttributeSet,std::vector<std::pair<`anonymous namespace'::PolygonKey,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>,std::equal_to<gss::FeatureAttributeSet>,std::hash<gss::FeatureAttributeSet>,true>,std::allocator<std::__hash_value_type<gss::FeatureAttributeSet,std::vector<std::pair<`anonymous namespace'::PolygonKey,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>>>::~__hash_table(uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  void *v9;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      v4 = v2[6];
      if (v4)
      {
        v5 = v2[7];
        v6 = v2[6];
        if (v5 != v4)
        {
          do
          {
            v7 = v5 - 6;
            *(v5 - 3) = &off_1E42B4B50;

            v5 = v7;
          }
          while (v7 != v4);
          v6 = v2[6];
        }
        v2[7] = v4;
        operator delete(v6);
      }
      v8 = v2[2];
      if (v8)
      {
        v2[3] = v8;
        (*(void (**)(void *, void *, int64_t))(*(_QWORD *)v2[5] + 40))(v2[5], v8, (_BYTE *)v2[4] - (_BYTE *)v8);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v9 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v9)
    operator delete(v9);
  return a1;
}

uint64_t __copy_helper_block_ea8_40c47_ZTSNSt3__110shared_ptrIN2md14MeshSetStorageEEE80c310_ZTSNSt3__113unordered_mapIN3gss19FeatureAttributeSetENS_6vectorINS_4pairIN12_GLOBAL__N_110PolygonKeyEN3geo11_retain_ptrIU8__strongP14VKPolygonGroupNS7_16_retain_objc_arcENS7_17_release_objc_arcENS7_10_hash_objcENS7_11_equal_objcEEEEENS_9allocatorISH_EEEENS_4hashIS2_EENS_8equal_toIS2_EENSI_INS4_IKS2_SK_EEEEEE120c45_ZTSNSt3__110shared_ptrIN2md12PolygonRoundEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v8 = a2[16];
  a1[15] = a2[15];
  a1[16] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return result;
}

void sub_19F320D48(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<gss::FeatureAttributeSet,std::vector<std::pair<`anonymous namespace'::PolygonKey,geo::_retain_ptr<VKPolygonGroup * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t (**v6)();
  unsigned int *v7;
  unsigned int *v8;
  char *v9;
  unint64_t v10;
  unsigned int *v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t (**v31)();
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  id v35;
  void *v36;
  float v37;
  float v38;
  unint64_t v39;
  _BOOL8 v40;
  unint64_t v41;
  unint64_t v42;
  size_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t *v48;
  unint64_t v50;
  unint64_t v51;

  v4 = a1;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    v48 = (uint64_t *)(v4 + 16);
    v6 = &off_1E42B4B50;
    while (1)
    {
      v7 = (unsigned int *)v5[2];
      v8 = (unsigned int *)v5[3];
      v9 = (char *)((char *)v8 - (char *)v7);
      v10 = ((char *)v8 - (char *)v7) >> 3;
      if (v8 != v7)
      {
        v11 = (unsigned int *)v5[2];
        do
        {
          v12 = ((v10 << 6) - 0x61C8864680B583EBLL + (v10 >> 2) + *v11) ^ v10;
          v10 = (*((unsigned __int16 *)v11 + 2) - 0x61C8864680B583EBLL + (v12 << 6) + (v12 >> 2)) ^ v12;
          v11 += 2;
        }
        while (v11 != v8);
      }
      v13 = *(_QWORD *)(v4 + 8);
      if (v13)
      {
        v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] > 1uLL)
        {
          v2 = v10;
          if (v10 >= v13)
            v2 = v10 % v13;
        }
        else
        {
          v2 = (v13 - 1) & v10;
        }
        v15 = *(_QWORD **)(*(_QWORD *)v4 + 8 * v2);
        if (v15)
        {
          v16 = (_QWORD *)*v15;
          if (v16)
          {
            if (v14.u32[0] < 2uLL)
            {
              while (1)
              {
                v22 = v16[1];
                if (v22 == v10)
                {
                  v23 = v16[2];
                  v24 = v16[3];
                  if ((char *)(v24 - v23) == v9)
                  {
                    if (v23 == v24)
                      goto LABEL_6;
                    v25 = v5[2];
                    while (*(_DWORD *)v23 == *(_DWORD *)v25
                         && *(unsigned __int16 *)(v23 + 4) == *(unsigned __int16 *)(v25 + 4))
                    {
                      v23 += 8;
                      v25 += 8;
                      if (v23 == v24)
                        goto LABEL_6;
                    }
                  }
                }
                else if ((v22 & (v13 - 1)) != v2)
                {
                  goto LABEL_47;
                }
                v16 = (_QWORD *)*v16;
                if (!v16)
                  goto LABEL_47;
              }
            }
            do
            {
              v17 = v16[1];
              if (v17 == v10)
              {
                v18 = v16[2];
                v19 = v16[3];
                if ((char *)(v19 - v18) == v9)
                {
                  if (v18 == v19)
                    goto LABEL_6;
                  v20 = v5[2];
                  while (*(_DWORD *)v18 == *(_DWORD *)v20
                       && *(unsigned __int16 *)(v18 + 4) == *(unsigned __int16 *)(v20 + 4))
                  {
                    v18 += 8;
                    v20 += 8;
                    if (v18 == v19)
                      goto LABEL_6;
                  }
                }
              }
              else
              {
                if (v17 >= v13)
                  v17 %= v13;
                if (v17 != v2)
                  break;
              }
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
        }
      }
LABEL_47:
      v27 = (uint64_t *)operator new(0x48uLL);
      v51 = v2;
      *v27 = 0;
      v27[1] = v10;
      v27[2] = 0;
      v27[3] = 0;
      v27[4] = 0;
      v27[5] = gss::Allocator::instance((gss::Allocator *)v27);
      if (v27 != v5)
        std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>(v27 + 2, v5[2], (_QWORD *)v5[3], (v5[3] - v5[2]) >> 3);
      v27[6] = 0;
      v27[7] = 0;
      v2 = (unint64_t)(v27 + 6);
      v27[8] = 0;
      v29 = v5[6];
      v28 = v5[7];
      v30 = v28 - v29;
      if (v28 != v29)
      {
        v50 = v13;
        v31 = v6;
        v32 = 0xAAAAAAAAAAAAAAABLL * (v30 >> 4);
        if (v32 >= 0x555555555555556)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v33 = operator new(v30);
        v27[6] = (uint64_t)v33;
        v27[7] = (uint64_t)v33;
        v27[8] = (uint64_t)&v33[6 * v32];
        v6 = v31;
        do
        {
          v34 = *(_QWORD *)(v29 + 16);
          *(_OWORD *)v33 = *(_OWORD *)v29;
          v33[2] = v34;
          v33[3] = v31;
          v33[4] = 0;
          v35 = *(id *)(v29 + 32);
          v36 = (void *)v33[4];
          v33[4] = v35;

          v33 += 6;
          v29 += 48;
        }
        while (v29 != v28);
        v27[7] = (uint64_t)v33;
        v4 = a1;
        v13 = v50;
      }
      v37 = (float)(unint64_t)(*(_QWORD *)(v4 + 24) + 1);
      v38 = *(float *)(v4 + 32);
      v39 = v51;
      if (!v13 || (float)(v38 * (float)v13) < v37)
      {
        v40 = (v13 & (v13 - 1)) != 0;
        if (v13 < 3)
          v40 = 1;
        v41 = v40 | (2 * v13);
        v42 = vcvtps_u32_f32(v37 / v38);
        if (v41 <= v42)
          v43 = v42;
        else
          v43 = v41;
        v13 = *(_QWORD *)(v4 + 8);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v10 >= v13)
            v39 = v10 % v13;
          else
            v39 = v10;
        }
        else
        {
          v39 = (v13 - 1) & v10;
        }
      }
      v44 = *(_QWORD *)v4;
      v45 = *(uint64_t **)(*(_QWORD *)v4 + 8 * v39);
      if (v45)
        break;
      *v27 = *v48;
      *v48 = (uint64_t)v27;
      *(_QWORD *)(v44 + 8 * v39) = v48;
      if (*v27)
      {
        v46 = *(_QWORD *)(*v27 + 8);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v46 >= v13)
            v46 %= v13;
        }
        else
        {
          v46 &= v13 - 1;
        }
        v45 = (uint64_t *)(*(_QWORD *)v4 + 8 * v46);
        goto LABEL_4;
      }
LABEL_5:
      ++*(_QWORD *)(v4 + 24);
LABEL_6:
      v5 = (uint64_t *)*v5;
      if (!v5)
        return v4;
    }
    *v27 = *v45;
LABEL_4:
    *v45 = (uint64_t)v27;
    goto LABEL_5;
  }
  return v4;
}

void sub_19F321184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_19F321A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F321C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  void *v15;
  void *v16;
  void *v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a15;
  if (a15 == v18)
  {
    v21 = 4;
    v20 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_19F321D30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F322118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F322130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_19F322270(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F322284(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void sub_19F322350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::SnapshotAnimationManager::runAnimation(md::SnapshotAnimationManager *this, VKAnimation *a2)
{
  double Current;
  double v4;
  VKAnimation *v5;

  v5 = a2;
  -[VKAnimation startWithRunner:](v5, "startWithRunner:", *((_QWORD *)this + 2));
  Current = CFAbsoluteTimeGetCurrent();
  -[VKAnimation onTimerFired:](v5, "onTimerFired:");
  if (-[VKAnimation timed](v5, "timed"))
  {
    -[VKAnimation duration](v5, "duration");
    -[VKAnimation onTimerFired:](v5, "onTimerFired:", v4 + Current);
  }
  -[VKAnimation stop](v5, "stop");

}

void sub_19F322460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::AnimationManager::runAnimation(md::AnimationManager *this, VKAnimation *a2)
{
  unint64_t v2;
  VKAnimation *v4;
  VKAnimation *v5;
  VKAnimation *v6;
  double Current;
  double v8;
  uint64_t v9;
  VKAnimation *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  int8x8_t v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  uint64_t ***v18;
  uint64_t **v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  VKAnimation *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t ***v28;
  uint64_t **v29;
  unint64_t v30;
  uint64_t *v31;
  VKAnimation *v32;
  _QWORD *v33;
  VKAnimation *v34;
  void *v35;
  float v36;
  float v37;
  _BOOL8 v38;
  unint64_t v39;
  unint64_t v40;
  size_t v41;
  void *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  size_t v47;
  size_t v48;
  size_t v49;
  _QWORD *j;
  size_t v51;
  uint64_t v52;
  unint64_t v53;
  uint8x8_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  size_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  VKAnimation *v64;
  _QWORD *v65;
  VKAnimation *v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  float v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint8x8_t v74;
  uint64_t ***v75;
  uint64_t **v76;
  unint64_t v77;
  uint64_t *v78;
  _QWORD *v79;
  _QWORD *v80;
  VKAnimation *v81;
  void *v82;
  float v83;
  float v84;
  _BOOL8 v85;
  unint64_t v86;
  unint64_t v87;
  size_t prime;
  void *v89;
  void *v90;
  uint64_t v91;
  _QWORD *v92;
  size_t v93;
  size_t v94;
  size_t v95;
  _QWORD *i;
  size_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint8x8_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  size_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  void *v111;
  uint64_t (**v112)();
  VKAnimation *v113;
  _QWORD *v114;
  char *v115;
  char v116;
  _QWORD v117[3];
  _QWORD *v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = v4;
  if (!*((_BYTE *)this + 233))
  {
    std::mutex::lock((std::mutex *)((char *)this + 40));
    v9 = -[VKAnimation priority](v5, "priority");
    v10 = v5;
    v112 = &off_1E42B49F0;
    v113 = v10;
    v11 = -[VKAnimation hash](v10, "hash");
    v12 = (char *)this + 40 * v9;
    v13 = v12 + 104;
    v14 = *(int8x8_t *)(v12 + 112);
    if (v14)
    {
      v15 = v11;
      v16 = (uint8x8_t)vcnt_s8(v14);
      v16.i16[0] = vaddlv_u8(v16);
      if (v16.u32[0] > 1uLL)
      {
        v17 = v11;
        if (v11 >= *(_QWORD *)&v14)
          v17 = v11 % *(_QWORD *)&v14;
      }
      else
      {
        v17 = (*(_QWORD *)&v14 - 1) & v11;
      }
      v18 = *(uint64_t ****)(*(_QWORD *)v13 + 8 * v17);
      if (v18)
      {
        v19 = *v18;
        if (*v18)
        {
          if (v16.u32[0] < 2uLL)
          {
            v20 = *(_QWORD *)&v14 - 1;
            while (1)
            {
              v22 = v19[1];
              if ((uint64_t *)v15 == v22)
              {
                if ((geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(v19[3], (uint64_t)&v112) & 1) != 0)goto LABEL_25;
              }
              else if (((unint64_t)v22 & v20) != v17)
              {
                goto LABEL_26;
              }
              v19 = (uint64_t **)*v19;
              if (!v19)
                goto LABEL_26;
            }
          }
          do
          {
            v21 = (unint64_t)v19[1];
            if (v15 == v21)
            {
              if ((geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(v19[3], (uint64_t)&v112) & 1) != 0)
              {
LABEL_25:
                v23 = v10;
                goto LABEL_208;
              }
            }
            else
            {
              if (v21 >= *(_QWORD *)&v14)
                v21 %= *(_QWORD *)&v14;
              if (v21 != v17)
                break;
            }
            v19 = (uint64_t **)*v19;
          }
          while (v19);
        }
      }
    }
LABEL_26:
    v24 = -[VKAnimation hash](v10, "hash");
    v25 = v24;
    v26 = *((_QWORD *)v13 + 1);
    if (v26)
    {
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
      v27.i16[0] = vaddlv_u8(v27);
      if (v27.u32[0] > 1uLL)
      {
        v2 = v24;
        if (v24 >= v26)
          v2 = v24 % v26;
      }
      else
      {
        v2 = (v26 - 1) & v24;
      }
      v28 = *(uint64_t ****)(*(_QWORD *)v13 + 8 * v2);
      if (v28)
      {
        v29 = *v28;
        if (*v28)
        {
          if (v27.u32[0] < 2uLL)
          {
            while (1)
            {
              v31 = v29[1];
              if (v31 == (uint64_t *)v25)
              {
                if ((geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(v29[3], (uint64_t)&v112) & 1) != 0)goto LABEL_47;
              }
              else if (((unint64_t)v31 & (v26 - 1)) != v2)
              {
                goto LABEL_48;
              }
              v29 = (uint64_t **)*v29;
              if (!v29)
                goto LABEL_48;
            }
          }
          do
          {
            v30 = (unint64_t)v29[1];
            if (v30 == v25)
            {
              if ((geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(v29[3], (uint64_t)&v112) & 1) != 0)
              {
LABEL_47:
                v32 = v10;
                goto LABEL_108;
              }
            }
            else
            {
              if (v30 >= v26)
                v30 %= v26;
              if (v30 != v2)
                break;
            }
            v29 = (uint64_t **)*v29;
          }
          while (v29);
        }
      }
    }
LABEL_48:
    v33 = operator new(0x28uLL);
    *v33 = 0;
    v33[1] = v25;
    v33[2] = &off_1E42B49F0;
    v33[3] = 0;
    v34 = v10;
    v35 = (void *)v33[3];
    v33[3] = v34;

    v36 = (float)(unint64_t)(*((_QWORD *)v13 + 3) + 1);
    v37 = *((float *)v13 + 8);
    if (v26 && (float)(v37 * (float)v26) >= v36)
    {
LABEL_98:
      v59 = *(_QWORD **)v13;
      v60 = *(_QWORD **)(*(_QWORD *)v13 + 8 * v2);
      if (v60)
      {
        *v33 = *v60;
      }
      else
      {
        *v33 = *((_QWORD *)v13 + 2);
        *((_QWORD *)v13 + 2) = v33;
        v59[v2] = v13 + 16;
        if (!*v33)
        {
LABEL_107:
          ++*((_QWORD *)v13 + 3);
          v32 = v113;
LABEL_108:
          v62 = *((_QWORD *)this + 2);
          v23 = v32;
          -[VKAnimation startWithRunner:](v23, "startWithRunner:", v62);

          if (!-[VKAnimation hasFrequency](v10, "hasFrequency"))
          {
            atomic_store(1u, (unsigned __int8 *)this + 184);
LABEL_208:
            v112 = &off_1E42B49F0;

            std::mutex::unlock((std::mutex *)((char *)this + 40));
            goto LABEL_209;
          }
          v63 = operator new();
          v64 = v23;
          v118 = 0;
          v65 = operator new(0x28uLL);
          *v65 = &off_1E42CD268;
          v65[1] = this;
          v65[2] = &off_1E42B49F0;
          v66 = v64;
          v65[3] = v66;

          v118 = v65;
          v67 = (unint64_t)v117;
          gdc::Timer::Timer(v63, MEMORY[0x1E0C80D38], v117);
          v68 = v118;
          if (v118 == v117)
          {
            v69 = 4;
            v68 = v117;
          }
          else
          {
            if (!v118)
              goto LABEL_115;
            v69 = 5;
          }
          (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_115:
          -[VKAnimation frequency](v10, "frequency");
          if (*((_BYTE *)this + 232))
            (*(void (**)(uint64_t, double, double))(*(_QWORD *)v63 + 32))(v63, 0.0, 1.0 / v70);
          v71 = -[VKAnimation hash](v66, "hash");
          v72 = v71;
          v73 = *((_QWORD *)this + 25);
          if (v73)
          {
            v74 = (uint8x8_t)vcnt_s8((int8x8_t)v73);
            v74.i16[0] = vaddlv_u8(v74);
            if (v74.u32[0] > 1uLL)
            {
              v67 = v71;
              if (v71 >= v73)
                v67 = v71 % v73;
            }
            else
            {
              v67 = (v73 - 1) & v71;
            }
            v75 = *(uint64_t ****)(*((_QWORD *)this + 24) + 8 * v67);
            if (v75)
            {
              v76 = *v75;
              if (*v75)
              {
                if (v74.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v78 = v76[1];
                    if (v78 == (uint64_t *)v72)
                    {
                      if ((geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(v76[3], (uint64_t)&v112) & 1) != 0)goto LABEL_138;
                    }
                    else if (((unint64_t)v78 & (v73 - 1)) != v67)
                    {
                      goto LABEL_139;
                    }
                    v76 = (uint64_t **)*v76;
                    if (!v76)
                      goto LABEL_139;
                  }
                }
                do
                {
                  v77 = (unint64_t)v76[1];
                  if (v77 == v72)
                  {
                    if ((geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(v76[3], (uint64_t)&v112) & 1) != 0)
                    {
LABEL_138:
                      (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
                      goto LABEL_207;
                    }
                  }
                  else
                  {
                    if (v77 >= v73)
                      v77 %= v73;
                    if (v77 != v67)
                      break;
                  }
                  v76 = (uint64_t **)*v76;
                }
                while (v76);
              }
            }
          }
LABEL_139:
          v79 = operator new(0x30uLL);
          v80 = (_QWORD *)((char *)this + 208);
          v114 = v79;
          v115 = (char *)this + 208;
          *v79 = 0;
          v79[1] = v72;
          v79[2] = &off_1E42B49F0;
          v79[3] = 0;
          v81 = v66;
          v82 = (void *)v79[3];
          v79[3] = v81;

          v79[5] = v63;
          v83 = (float)(unint64_t)(*((_QWORD *)this + 27) + 1);
          v116 = 1;
          v84 = *((float *)this + 56);
          if ((((float)(v84 * (float)v73) >= v83) & ~(v73 == 0)) != 0)
          {
LABEL_197:
            v108 = *((_QWORD *)this + 24);
            v109 = *(_QWORD **)(v108 + 8 * v67);
            if (v109)
            {
              *v79 = *v109;
            }
            else
            {
              *v79 = *v80;
              *v80 = v79;
              *(_QWORD *)(v108 + 8 * v67) = v80;
              if (!*v79)
                goto LABEL_206;
              v110 = *(_QWORD *)(*v79 + 8);
              if ((v73 & (v73 - 1)) != 0)
              {
                if (v110 >= v73)
                  v110 %= v73;
              }
              else
              {
                v110 &= v73 - 1;
              }
              v109 = (_QWORD *)(*((_QWORD *)this + 24) + 8 * v110);
            }
            *v109 = v79;
LABEL_206:
            ++*((_QWORD *)this + 27);
LABEL_207:
            v23 = v113;
            goto LABEL_208;
          }
          v85 = 1;
          if (v73 >= 3)
            v85 = (v73 & (v73 - 1)) != 0;
          v86 = v85 | (2 * v73);
          v87 = vcvtps_u32_f32(v83 / v84);
          if (v86 <= v87)
            prime = v87;
          else
            prime = v86;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
          }
          v73 = *((_QWORD *)this + 25);
          if (prime <= v73)
          {
            if (prime >= v73)
              goto LABEL_184;
            v100 = vcvtps_u32_f32((float)*((unint64_t *)this + 27) / *((float *)this + 56));
            if (v73 < 3
              || (v101 = (uint8x8_t)vcnt_s8((int8x8_t)v73), v101.i16[0] = vaddlv_u8(v101), v101.u32[0] > 1uLL))
            {
              v100 = std::__next_prime(v100);
            }
            else
            {
              v102 = 1 << -(char)__clz(v100 - 1);
              if (v100 >= 2)
                v100 = v102;
            }
            if (prime <= v100)
              prime = v100;
            if (prime >= v73)
            {
              v73 = *((_QWORD *)this + 25);
LABEL_184:
              if ((v73 & (v73 - 1)) != 0)
              {
                if (v72 >= v73)
                  v67 = v72 % v73;
                else
                  v67 = v72;
              }
              else
              {
                v67 = (v73 - 1) & v72;
              }
              goto LABEL_197;
            }
            if (!prime)
            {
              v111 = (void *)*((_QWORD *)this + 24);
              *((_QWORD *)this + 24) = 0;
              if (v111)
                operator delete(v111);
              v73 = 0;
              *((_QWORD *)this + 25) = 0;
              goto LABEL_184;
            }
          }
          if (!(prime >> 61))
          {
            v89 = operator new(8 * prime);
            v90 = (void *)*((_QWORD *)this + 24);
            *((_QWORD *)this + 24) = v89;
            if (v90)
              operator delete(v90);
            v91 = 0;
            *((_QWORD *)this + 25) = prime;
            do
              *(_QWORD *)(*((_QWORD *)this + 24) + 8 * v91++) = 0;
            while (prime != v91);
            v92 = (_QWORD *)*v80;
            if (!*v80)
              goto LABEL_183;
            v93 = v92[1];
            v94 = prime - 1;
            if ((prime & (prime - 1)) == 0)
            {
              v95 = v93 & v94;
              *(_QWORD *)(*((_QWORD *)this + 24) + 8 * v95) = v80;
              for (i = (_QWORD *)*v92; *v92; i = (_QWORD *)*v92)
              {
                v97 = i[1] & v94;
                if (v97 == v95)
                {
                  v92 = i;
                }
                else
                {
                  v98 = *((_QWORD *)this + 24);
                  if (*(_QWORD *)(v98 + 8 * v97))
                  {
                    *v92 = *i;
                    v99 = 8 * v97;
                    *i = **(_QWORD **)(*((_QWORD *)this + 24) + v99);
                    **(_QWORD **)(*((_QWORD *)this + 24) + v99) = i;
                  }
                  else
                  {
                    *(_QWORD *)(v98 + 8 * v97) = v92;
                    v92 = i;
                    v95 = v97;
                  }
                }
              }
LABEL_183:
              v73 = prime;
              goto LABEL_184;
            }
            if (v93 >= prime)
              v93 %= prime;
            *(_QWORD *)(*((_QWORD *)this + 24) + 8 * v93) = v80;
            v104 = (_QWORD *)*v92;
            if (!*v92)
              goto LABEL_183;
            while (1)
            {
              v106 = v104[1];
              if (v106 >= prime)
                v106 %= prime;
              if (v106 != v93)
              {
                v107 = *((_QWORD *)this + 24);
                if (!*(_QWORD *)(v107 + 8 * v106))
                {
                  *(_QWORD *)(v107 + 8 * v106) = v92;
                  goto LABEL_188;
                }
                *v92 = *v104;
                v105 = 8 * v106;
                *v104 = **(_QWORD **)(*((_QWORD *)this + 24) + v105);
                **(_QWORD **)(*((_QWORD *)this + 24) + v105) = v104;
                v104 = v92;
              }
              v106 = v93;
LABEL_188:
              v92 = v104;
              v104 = (_QWORD *)*v104;
              v93 = v106;
              if (!v104)
                goto LABEL_183;
            }
          }
LABEL_219:
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        v61 = *(_QWORD *)(*v33 + 8);
        if ((v26 & (v26 - 1)) != 0)
        {
          if (v61 >= v26)
            v61 %= v26;
        }
        else
        {
          v61 &= v26 - 1;
        }
        v60 = (_QWORD *)(*(_QWORD *)v13 + 8 * v61);
      }
      *v60 = v33;
      goto LABEL_107;
    }
    v38 = 1;
    if (v26 >= 3)
      v38 = (v26 & (v26 - 1)) != 0;
    v39 = v38 | (2 * v26);
    v40 = vcvtps_u32_f32(v36 / v37);
    if (v39 <= v40)
      v41 = v40;
    else
      v41 = v39;
    if (v41 == 1)
    {
      v41 = 2;
    }
    else if ((v41 & (v41 - 1)) != 0)
    {
      v41 = std::__next_prime(v41);
    }
    v26 = *((_QWORD *)v13 + 1);
    if (v41 <= v26)
    {
      if (v41 >= v26)
        goto LABEL_85;
      v53 = vcvtps_u32_f32((float)*((unint64_t *)v13 + 3) / *((float *)v13 + 8));
      if (v26 < 3 || (v54 = (uint8x8_t)vcnt_s8((int8x8_t)v26), v54.i16[0] = vaddlv_u8(v54), v54.u32[0] > 1uLL))
      {
        v53 = std::__next_prime(v53);
      }
      else
      {
        v55 = 1 << -(char)__clz(v53 - 1);
        if (v53 >= 2)
          v53 = v55;
      }
      if (v41 <= v53)
        v41 = v53;
      if (v41 >= v26)
      {
        v26 = *((_QWORD *)v13 + 1);
LABEL_85:
        if ((v26 & (v26 - 1)) != 0)
        {
          if (v25 >= v26)
            v2 = v25 % v26;
          else
            v2 = v25;
        }
        else
        {
          v2 = (v26 - 1) & v25;
        }
        goto LABEL_98;
      }
      if (!v41)
      {
        v103 = *(_QWORD **)v13;
        *(_QWORD *)v13 = 0;
        if (v103)
          operator delete(v103);
        v26 = 0;
        *((_QWORD *)v13 + 1) = 0;
        goto LABEL_85;
      }
    }
    if (v41 >> 61)
      goto LABEL_219;
    v42 = operator new(8 * v41);
    v43 = *(_QWORD **)v13;
    *(_QWORD *)v13 = v42;
    if (v43)
      operator delete(v43);
    v44 = 0;
    *((_QWORD *)v13 + 1) = v41;
    do
      *(_QWORD *)(*(_QWORD *)v13 + 8 * v44++) = 0;
    while (v41 != v44);
    v46 = v13 + 16;
    v45 = (_QWORD *)*((_QWORD *)v13 + 2);
    if (!v45)
    {
LABEL_84:
      v26 = v41;
      goto LABEL_85;
    }
    v47 = v45[1];
    v48 = v41 - 1;
    if ((v41 & (v41 - 1)) == 0)
    {
      v49 = v47 & v48;
      *(_QWORD *)(*(_QWORD *)v13 + 8 * v49) = v46;
      for (j = (_QWORD *)*v45; *v45; j = (_QWORD *)*v45)
      {
        v51 = j[1] & v48;
        if (v51 == v49)
        {
          v45 = j;
        }
        else if (*(_QWORD *)(*(_QWORD *)v13 + 8 * v51))
        {
          *v45 = *j;
          v52 = 8 * v51;
          *j = **(_QWORD **)(*(_QWORD *)v13 + v52);
          **(_QWORD **)(*(_QWORD *)v13 + v52) = j;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v13 + 8 * v51) = v45;
          v45 = j;
          v49 = v51;
        }
      }
      goto LABEL_84;
    }
    if (v47 >= v41)
      v47 %= v41;
    *(_QWORD *)(*(_QWORD *)v13 + 8 * v47) = v46;
    v56 = (_QWORD *)*v45;
    if (!*v45)
      goto LABEL_84;
    while (1)
    {
      v58 = v56[1];
      if (v58 >= v41)
        v58 %= v41;
      if (v58 != v47)
      {
        if (!*(_QWORD *)(*(_QWORD *)v13 + 8 * v58))
        {
          *(_QWORD *)(*(_QWORD *)v13 + 8 * v58) = v45;
          goto LABEL_89;
        }
        *v45 = *v56;
        v57 = 8 * v58;
        *v56 = **(_QWORD **)(*(_QWORD *)v13 + v57);
        **(_QWORD **)(*(_QWORD *)v13 + v57) = v56;
        v56 = v45;
      }
      v58 = v47;
LABEL_89:
      v45 = v56;
      v56 = (_QWORD *)*v56;
      v47 = v58;
      if (!v56)
        goto LABEL_84;
    }
  }
  v6 = v4;
  -[VKAnimation startWithRunner:](v6, "startWithRunner:", *((_QWORD *)this + 2));
  Current = CFAbsoluteTimeGetCurrent();
  -[VKAnimation onTimerFired:](v6, "onTimerFired:");
  if (-[VKAnimation timed](v6, "timed"))
  {
    -[VKAnimation duration](v6, "duration");
    -[VKAnimation onTimerFired:](v6, "onTimerFired:", v8 + Current);
  }
  -[VKAnimation stop](v6, "stop");

LABEL_209:
}

void sub_19F323078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  void *v20;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>,void *>>>>::~unique_ptr[abi:nn180100](&a13);

  std::mutex::unlock(a9);
  _Unwind_Resume(a1);
}

uint64_t VKAnimationCurveEaseOut_block_invoke_5(double a1)
{
  int v1;

  v1 = LODWORD(a1);
  if (_ZZUb3_E9onceToken != -1)
    dispatch_once(&_ZZUb3_E9onceToken, &__block_literal_global_11);
  LODWORD(a1) = v1;
  return objc_msgSend((id)_ZZUb3_E14timingFunction, "_solveForInput:", a1);
}

void sub_19F323494(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::AnimationManager::animationDidStop(md::AnimationManager *this, VKAnimation *a2)
{
  VKAnimation *v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  _QWORD *v7;
  int8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void ***v12;
  void **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t v17;
  unint64_t v18;
  uint8x8_t v19;
  void **v20;
  void **v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t **v27;
  uint64_t **v28;
  int8x8_t v29;
  uint64_t *v30;
  uint8x8_t v31;
  uint64_t **v32;
  uint64_t **v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  VKAnimation *v39;
  uint64_t (**v40)();
  VKAnimation *v41;

  v3 = a2;
  std::mutex::lock((std::mutex *)((char *)this + 40));
  v4 = -[VKAnimation priority](v3, "priority");
  v40 = &off_1E42B49F0;
  v41 = v3;
  v39 = v41;
  v5 = -[VKAnimation hash](v41, "hash");
  v6 = (char *)this + 40 * v4;
  v7 = v6 + 104;
  v8 = *(int8x8_t *)(v6 + 112);
  if (v8)
  {
    v9 = v5;
    v10 = (uint8x8_t)vcnt_s8(v8);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = v5;
      if (v5 >= *(_QWORD *)&v8)
        v11 = v5 % *(_QWORD *)&v8;
    }
    else
    {
      v11 = (*(_QWORD *)&v8 - 1) & v5;
    }
    v12 = *(void ****)(*v7 + 8 * v11);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          v14 = *(_QWORD *)&v8 - 1;
          while (1)
          {
            v16 = (unint64_t)v13[1];
            if (v16 == v9)
            {
              if ((geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(v13[3], (uint64_t)&v40) & 1) != 0)goto LABEL_21;
            }
            else if ((v16 & v14) != v11)
            {
              goto LABEL_48;
            }
            v13 = (void **)*v13;
            if (!v13)
              goto LABEL_48;
          }
        }
        do
        {
          v15 = (unint64_t)v13[1];
          if (v15 == v9)
          {
            if ((geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(v13[3], (uint64_t)&v40) & 1) != 0)
            {
LABEL_21:
              v17 = (int8x8_t)v7[1];
              v18 = (unint64_t)v13[1];
              v19 = (uint8x8_t)vcnt_s8(v17);
              v19.i16[0] = vaddlv_u8(v19);
              if (v19.u32[0] > 1uLL)
              {
                if (v18 >= *(_QWORD *)&v17)
                  v18 %= *(_QWORD *)&v17;
              }
              else
              {
                v18 &= *(_QWORD *)&v17 - 1;
              }
              v20 = *(void ***)(*v7 + 8 * v18);
              do
              {
                v21 = v20;
                v20 = (void **)*v20;
              }
              while (v20 != v13);
              if (v21 == v7 + 2)
                goto LABEL_38;
              v22 = (unint64_t)v21[1];
              if (v19.u32[0] > 1uLL)
              {
                if (v22 >= *(_QWORD *)&v17)
                  v22 %= *(_QWORD *)&v17;
              }
              else
              {
                v22 &= *(_QWORD *)&v17 - 1;
              }
              if (v22 != v18)
              {
LABEL_38:
                if (!*v13)
                  goto LABEL_39;
                v23 = *((_QWORD *)*v13 + 1);
                if (v19.u32[0] > 1uLL)
                {
                  if (v23 >= *(_QWORD *)&v17)
                    v23 %= *(_QWORD *)&v17;
                }
                else
                {
                  v23 &= *(_QWORD *)&v17 - 1;
                }
                if (v23 != v18)
LABEL_39:
                  *(_QWORD *)(*v7 + 8 * v18) = 0;
              }
              v24 = *v13;
              if (*v13)
              {
                v25 = v24[1];
                if (v19.u32[0] > 1uLL)
                {
                  if (v25 >= *(_QWORD *)&v17)
                    v25 %= *(_QWORD *)&v17;
                }
                else
                {
                  v25 &= *(_QWORD *)&v17 - 1;
                }
                if (v25 != v18)
                {
                  *(_QWORD *)(*v7 + 8 * v25) = v21;
                  v24 = *v13;
                }
              }
              *v21 = v24;
              *v13 = 0;
              --v7[3];
              (*(void (**)(void **))v13[2])(v13 + 2);
              operator delete(v13);
              break;
            }
          }
          else
          {
            if (v15 >= *(_QWORD *)&v8)
              v15 %= *(_QWORD *)&v8;
            if (v15 != v11)
              break;
          }
          v13 = (void **)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_48:
  v26 = (_QWORD *)((char *)this + 192);
  v27 = std::__hash_table<std::__hash_value_type<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>,std::__unordered_map_hasher<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::__hash_value_type<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>,std::hash<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::equal_to<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,true>,std::__unordered_map_equal<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::__hash_value_type<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>,std::equal_to<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::hash<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,true>,std::allocator<std::__hash_value_type<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>>>::find<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>((_QWORD *)this + 24, (uint64_t)&v40);
  v28 = v27;
  if (v27)
  {
    (*(void (**)(uint64_t *))(*v27[5] + 40))(v27[5]);
    v29 = *(int8x8_t *)((char *)this + 200);
    v30 = v28[1];
    v31 = (uint8x8_t)vcnt_s8(v29);
    v31.i16[0] = vaddlv_u8(v31);
    if (v31.u32[0] > 1uLL)
    {
      if ((unint64_t)v30 >= *(_QWORD *)&v29)
        v30 = (uint64_t *)((unint64_t)v30 % *(_QWORD *)&v29);
    }
    else
    {
      v30 = (uint64_t *)((*(_QWORD *)&v29 - 1) & (unint64_t)v30);
    }
    v32 = *(uint64_t ***)(*v26 + 8 * (_QWORD)v30);
    do
    {
      v33 = v32;
      v32 = (uint64_t **)*v32;
    }
    while (v32 != v28);
    if (v33 == (uint64_t **)((char *)this + 208))
      goto LABEL_66;
    v34 = (unint64_t)v33[1];
    if (v31.u32[0] > 1uLL)
    {
      if (v34 >= *(_QWORD *)&v29)
        v34 %= *(_QWORD *)&v29;
    }
    else
    {
      v34 &= *(_QWORD *)&v29 - 1;
    }
    if ((uint64_t *)v34 != v30)
    {
LABEL_66:
      if (!*v28)
        goto LABEL_67;
      v35 = (*v28)[1];
      if (v31.u32[0] > 1uLL)
      {
        if (v35 >= *(_QWORD *)&v29)
          v35 %= *(_QWORD *)&v29;
      }
      else
      {
        v35 &= *(_QWORD *)&v29 - 1;
      }
      if ((uint64_t *)v35 != v30)
LABEL_67:
        *(_QWORD *)(*v26 + 8 * (_QWORD)v30) = 0;
    }
    v36 = *v28;
    if (*v28)
    {
      v37 = v36[1];
      if (v31.u32[0] > 1uLL)
      {
        if (v37 >= *(_QWORD *)&v29)
          v37 %= *(_QWORD *)&v29;
      }
      else
      {
        v37 &= *(_QWORD *)&v29 - 1;
      }
      if ((uint64_t *)v37 != v30)
      {
        *(_QWORD *)(*v26 + 8 * v37) = v33;
        v36 = *v28;
      }
    }
    *v33 = v36;
    *v28 = 0;
    --*((_QWORD *)this + 27);
    v38 = v28[5];
    v28[5] = 0;
    if (v38)
      (*(void (**)(uint64_t *))(*v38 + 8))(v38);
    v28[2] = (uint64_t *)&off_1E42B49F0;

    operator delete(v28);
  }
  v40 = &off_1E42B49F0;

  std::mutex::unlock((std::mutex *)((char *)this + 40));
  atomic_store(1u, (unsigned __int8 *)this + 184);

}

void sub_19F323958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11)
{
  std::mutex *v11;
  void *v12;

  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>,std::__unordered_map_hasher<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::__hash_value_type<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>,std::hash<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::equal_to<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,true>,std::__unordered_map_equal<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::__hash_value_type<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>,std::equal_to<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,std::hash<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>,true>,std::allocator<std::__hash_value_type<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,std::unique_ptr<gdc::Timer>>>>::find<geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t ***v9;
  uint64_t **v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;

  v4 = objc_msgSend(*(id *)(a2 + 8), "hash");
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v8 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v8 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v9 = *(uint64_t ****)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  v10 = *v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      v11 = *(_QWORD *)&v5 - 1;
      while (1)
      {
        v13 = v10[1];
        if (v13 == (uint64_t *)v6)
        {
          if ((geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(v10[3], a2) & 1) != 0)return v10;
        }
        else if (((unint64_t)v13 & v11) != v8)
        {
          return 0;
        }
        v10 = (uint64_t **)*v10;
        if (!v10)
          return v10;
      }
    }
    do
    {
      v12 = (unint64_t)v10[1];
      if (v12 == v6)
      {
        if ((geo::_retain_ptr<VKAnimation * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(v10[3], a2) & 1) != 0)return v10;
      }
      else
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
        if (v12 != v8)
          return 0;
      }
      v10 = (uint64_t **)*v10;
    }
    while (v10);
  }
  return v10;
}

void ___ZN2md10StyleLogic18initiateTransitionEf_block_invoke(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  float v5;
  unint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  float v20;
  float v21;
  unint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned int *v33;
  unsigned int v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char v38;
  char v39;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 208);
  v4 = COERCE_FLOAT(atomic_load((unsigned int *)(v3 + 256)));
  if (v4 == a2)
    goto LABEL_16;
  *(float *)(v3 + 256) = a2;
  v5 = COERCE_FLOAT(atomic_load((unsigned int *)(v3 + 256)));
  if (v5 <= 0.0)
  {
    v6 = *(unsigned __int16 *)(v3 + 242);
    if ((_DWORD)v6 == *(unsigned __int16 *)(v3 + 226))
    {
      if (!*(_WORD *)(v3 + 242))
        goto LABEL_13;
      v7 = *(_DWORD **)(v3 + 232);
      v8 = *(_DWORD **)(v3 + 216);
      if (*v7 == *v8)
      {
        v9 = (unsigned __int16 *)((char *)v8 + *(unsigned __int16 *)(v3 + 224));
        v10 = (unsigned __int16 *)((char *)v7 + *(unsigned __int16 *)(v3 + 240));
        if (*v10 == *v9)
        {
          v11 = 0;
          v12 = 1;
          while (1)
          {
            if (v6 == v12)
            {
              v13 = *(unsigned __int16 *)(v3 + 242);
              goto LABEL_43;
            }
            v13 = v12;
            ++v11;
            if (v7[v12] != v8[v12])
              break;
            ++v12;
            if (v10[v13] != v9[v13])
              goto LABEL_43;
          }
          v13 = v11;
LABEL_43:
          LOBYTE(v6) = v13 < v6;
          goto LABEL_13;
        }
      }
    }
  }
  LOBYTE(v6) = 1;
LABEL_13:
  atomic_store(v6, (unsigned __int8 *)(v3 + 254));
  v14 = *(unsigned __int8 *)(v3 + 253);
  v15 = atomic_load((unsigned __int8 *)(v3 + 254));
  if (v14 != (v15 & 1))
  {
    v16 = atomic_load((unsigned __int8 *)(v3 + 254));
    *(_BYTE *)(v3 + 253) = v16 & 1;
    v17 = (unsigned int *)(v3 + 248);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
LABEL_16:
  v19 = *(_QWORD *)(v2 + 224);
  v20 = COERCE_FLOAT(atomic_load((unsigned int *)(v19 + 256)));
  if (v20 == a2)
    goto LABEL_31;
  *(float *)(v19 + 256) = a2;
  v21 = COERCE_FLOAT(atomic_load((unsigned int *)(v19 + 256)));
  if (v21 <= 0.0)
  {
    v22 = *(unsigned __int16 *)(v19 + 242);
    if ((_DWORD)v22 == *(unsigned __int16 *)(v19 + 226))
    {
      if (!*(_WORD *)(v19 + 242))
        goto LABEL_28;
      v23 = *(_DWORD **)(v19 + 232);
      v24 = *(_DWORD **)(v19 + 216);
      if (*v23 == *v24)
      {
        v25 = (unsigned __int16 *)((char *)v24 + *(unsigned __int16 *)(v19 + 224));
        v26 = (unsigned __int16 *)((char *)v23 + *(unsigned __int16 *)(v19 + 240));
        if (*v26 == *v25)
        {
          v27 = 0;
          v28 = 1;
          while (1)
          {
            if (v22 == v28)
            {
              v29 = *(unsigned __int16 *)(v19 + 242);
              goto LABEL_46;
            }
            v29 = v28;
            ++v27;
            if (v23[v28] != v24[v28])
              break;
            ++v28;
            if (v26[v29] != v25[v29])
              goto LABEL_46;
          }
          v29 = v27;
LABEL_46:
          LOBYTE(v22) = v29 < v22;
          goto LABEL_28;
        }
      }
    }
  }
  LOBYTE(v22) = 1;
LABEL_28:
  atomic_store(v22, (unsigned __int8 *)(v19 + 254));
  v30 = *(unsigned __int8 *)(v19 + 253);
  v31 = atomic_load((unsigned __int8 *)(v19 + 254));
  if (v30 != (v31 & 1))
  {
    v32 = atomic_load((unsigned __int8 *)(v19 + 254));
    *(_BYTE *)(v19 + 253) = v32 & 1;
    v33 = (unsigned int *)(v19 + 248);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
  }
LABEL_31:
  v38 = 2;
  v35 = *(char **)(v2 + 1128);
  v36 = *(char **)(v2 + 1136);
  if (v35 != v36)
  {
    while (*v35 <= 1u)
    {
      if (++v35 == v36)
        goto LABEL_37;
    }
  }
  if (v35 == v36 || (v36 = v35, *v35 != 2))
LABEL_37:
    std::vector<md::StyleManagerEvent>::insert(v2 + 1128, v36, &v38);
  v37 = **(_QWORD **)(v2 + 1240);
  if (v37)
  {
    v39 = 12;
    md::MapEngine::setNeedsTick(v37, &v39);
  }
}

void ___ZN2md22MapZoomLevelStyleLogic27beginMapZoomLevelTransitionENSt3__110shared_ptrIN3gss17StylesheetManagerINS3_10PropertyIDEEEEENS3_12MapZoomLevelE_block_invoke(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  float v5;
  unint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  char v23;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = COERCE_FLOAT(atomic_load((unsigned int *)(v3 + 256)));
  if (v4 == a2)
    goto LABEL_16;
  *(float *)(v3 + 256) = a2;
  v5 = COERCE_FLOAT(atomic_load((unsigned int *)(v3 + 256)));
  if (v5 <= 0.0)
  {
    v6 = *(unsigned __int16 *)(v3 + 242);
    if ((_DWORD)v6 == *(unsigned __int16 *)(v3 + 226))
    {
      if (!*(_WORD *)(v3 + 242))
        goto LABEL_13;
      v7 = *(_DWORD **)(v3 + 232);
      v8 = *(_DWORD **)(v3 + 216);
      if (*v7 == *v8)
      {
        v9 = *(unsigned __int16 *)(v3 + 224);
        v10 = *(unsigned __int16 *)(v3 + 240);
        if (*(unsigned __int16 *)((char *)v7 + v10) == *(unsigned __int16 *)((char *)v8 + v9))
        {
          v11 = 0;
          v12 = v7 + 1;
          v13 = v8 + 1;
          v14 = (uint64_t)v7 + v10 + 2;
          v15 = (uint64_t)v8 + v9 + 2;
          while (v6 - 1 != v11)
          {
            v16 = v11++;
            if (v12[v16] != v13[v16])
              goto LABEL_20;
            if (*(unsigned __int16 *)(v14 + 2 * v16) != *(unsigned __int16 *)(v15 + 2 * v16))
            {
              v11 = v16 + 1;
              goto LABEL_20;
            }
          }
          v11 = *(unsigned __int16 *)(v3 + 242);
LABEL_20:
          LOBYTE(v6) = v11 < v6;
          goto LABEL_13;
        }
      }
    }
  }
  LOBYTE(v6) = 1;
LABEL_13:
  atomic_store(v6, (unsigned __int8 *)(v3 + 254));
  v17 = *(unsigned __int8 *)(v3 + 253);
  v18 = atomic_load((unsigned __int8 *)(v3 + 254));
  if (v17 != (v18 & 1))
  {
    v19 = atomic_load((unsigned __int8 *)(v3 + 254));
    *(_BYTE *)(v3 + 253) = v19 & 1;
    v20 = (unsigned int *)(v3 + 248);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
LABEL_16:
  v22 = **(_QWORD **)(v2 + 160);
  if (v22)
  {
    v23 = 6;
    md::MapEngine::setNeedsTick(v22, &v23);
  }
}

void sub_19F3241EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F32436C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F324790(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F32491C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void ___ZN2md10StyleLogic18initiateTransitionEf_block_invoke_2(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)();
  uint64_t (***v7)();
  uint64_t v8;
  uint64_t (**v9)();
  uint64_t (***v10)();
  uint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  _QWORD v15[3];
  uint64_t (***v16)();
  char v17[24];
  uint64_t (***v18)();
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  v5 = **(_QWORD **)(v4 + 1240);
  if (v5)
  {
    v17[0] = 12;
    md::MapEngine::setNeedsTick(v5, v17);
  }
  if ((a2 & 1) == 0 && *(_BYTE *)(a1 + 40))
    goto LABEL_23;
  v6 = &off_1E42C8900;
  *(_QWORD *)v17 = &off_1E42C8900;
  v18 = (uint64_t (***)())v17;
  if (!*(_QWORD *)(v4 + 256))
  {
    md::StyleLogic::updateConfiguration((md::StyleLogic *)v4, *(_DWORD *)(v4 + 1096));
    if (!v18)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_35;
    }
    v6 = *v18;
  }
  v6[6]();
  v7 = v18;
  if (v18 == (uint64_t (***)())v17)
  {
    v8 = 4;
    v7 = (uint64_t (***)())v17;
  }
  else
  {
    if (!v18)
      goto LABEL_13;
    v8 = 5;
  }
  (*v7)[v8]();
LABEL_13:
  v9 = &off_1E42C8948;
  v15[0] = &off_1E42C8948;
  v16 = (uint64_t (***)())v15;
  if (!*(_QWORD *)(v4 + 272))
  {
    md::StyleLogic::updateConfiguration((md::StyleLogic *)v4, *(_DWORD *)(v4 + 1096));
    if (!*(_QWORD *)(v4 + 272))
      goto LABEL_18;
    if (v16)
    {
      v9 = *v16;
      goto LABEL_17;
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_35:
    __break(1u);
    return;
  }
LABEL_17:
  v9[6]();
LABEL_18:
  v10 = v16;
  if (v16 == v15)
  {
    v11 = 4;
    v10 = (uint64_t (***)())v15;
    goto LABEL_22;
  }
  if (v16)
  {
    v11 = 5;
LABEL_22:
    (*v10)[v11]();
  }
LABEL_23:
  v17[0] = 3;
  v12 = *(char **)(v4 + 1128);
  v13 = *(char **)(v4 + 1136);
  if (v12 != v13)
  {
    while (*v12 <= 2u)
    {
      if (++v12 == v13)
        goto LABEL_29;
    }
  }
  if (v12 == v13 || (v13 = v12, *v12 != 3))
LABEL_29:
    std::vector<md::StyleManagerEvent>::insert(v4 + 1128, v13, v17);
  v14 = *(void **)(v4 + 1184);
  if (v14)
  {
    *(_QWORD *)(v4 + 1184) = 0;

  }
  *(_BYTE *)(v4 + 337) = 0;
}

void sub_19F324B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v18;
  uint64_t v19;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
  _Unwind_Resume(exception_object);
}

void gss::StylesheetManager<gss::PropertyID>::finishBlend(uint64_t a1)
{
  uint64_t v2;
  geo::read_write_lock *v3;
  const char *v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  float v8;
  unint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned int *v20;
  unsigned int v21;
  geo::read_write_lock *v22;
  const char *v23;
  geo::read_write_lock *v24;
  const char *v25;
  _QWORD *i;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  geo::read_write_lock *v43;
  const char *v44;

  v2 = *(_QWORD *)(a1 + 520);
  if (!v2)
    goto LABEL_24;
  v3 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(v2 + 16));
  if ((_DWORD)v3)
    geo::read_write_lock::logFailure(v3, (uint64_t)"write lock", v4);
  v5 = (_QWORD *)(v2 + 216);
  if (!*(_BYTE *)(v2 + 230) && *v5)
  {
    v6 = gss::Allocator::instance(v3);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(v2 + 216), *(unsigned __int16 *)(v2 + 228));
  }
  *(_QWORD *)(v2 + 223) = 0;
  *v5 = 0;
  *(_BYTE *)(v2 + 231) = 1;
  geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy((_QWORD *)(v2 + 216), v2 + 232);
  v7 = atomic_load((unsigned int *)(v2 + 256));
  if ((v7 & 0x7FFFFFFF) != 0)
  {
    *(_DWORD *)(v2 + 256) = 0;
    v8 = COERCE_FLOAT(atomic_load((unsigned int *)(v2 + 256)));
    if (v8 <= 0.0)
    {
      v9 = *(unsigned __int16 *)(v2 + 242);
      if ((_DWORD)v9 == *(unsigned __int16 *)(v2 + 226))
      {
        if (!*(_WORD *)(v2 + 242))
          goto LABEL_19;
        v10 = *(_DWORD **)(v2 + 232);
        v11 = *(_DWORD **)(v2 + 216);
        if (*v10 == *v11)
        {
          v12 = (unsigned __int16 *)((char *)v11 + *(unsigned __int16 *)(v2 + 224));
          v13 = (unsigned __int16 *)((char *)v10 + *(unsigned __int16 *)(v2 + 240));
          if (*v13 == *v12)
          {
            v14 = 0;
            v15 = 1;
            while (1)
            {
              if (v9 == v15)
              {
                v16 = *(unsigned __int16 *)(v2 + 242);
                goto LABEL_55;
              }
              v16 = v15;
              ++v14;
              if (v10[v15] != v11[v15])
                break;
              ++v15;
              if (v13[v16] != v12[v16])
                goto LABEL_55;
            }
            v16 = v14;
LABEL_55:
            LOBYTE(v9) = v16 < v9;
            goto LABEL_19;
          }
        }
      }
    }
    LOBYTE(v9) = 1;
LABEL_19:
    atomic_store(v9, (unsigned __int8 *)(v2 + 254));
    v17 = *(unsigned __int8 *)(v2 + 253);
    v18 = atomic_load((unsigned __int8 *)(v2 + 254));
    if (v17 != (v18 & 1))
    {
      v19 = atomic_load((unsigned __int8 *)(v2 + 254));
      *(_BYTE *)(v2 + 253) = v19 & 1;
      v20 = (unsigned int *)(v2 + 248);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
    }
  }
  v22 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(v2 + 16));
  if ((_DWORD)v22)
    geo::read_write_lock::logFailure(v22, (uint64_t)"unlock", v23);
LABEL_24:
  v24 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 320));
  if ((_DWORD)v24)
    geo::read_write_lock::logFailure(v24, (uint64_t)"read lock", v25);
  for (i = *(_QWORD **)(a1 + 88); i != *(_QWORD **)(a1 + 96); i += 2)
  {
    v27 = (std::__shared_weak_count *)i[1];
    if (v27)
    {
      v28 = std::__shared_weak_count::lock(v27);
      if (v28)
      {
        v29 = v28;
        v30 = (_QWORD *)*i;
        if (*i)
        {
          v31 = v30[32];
          if (v31)
          {
            v32 = v30[33];
            if (v32)
            {
              v33 = (unint64_t *)(v32 + 8);
              do
                v34 = __ldxr(v33);
              while (__stxr(v34 + 1, v33));
            }
            v35 = (std::__shared_weak_count *)v30[31];
            v30[30] = v31;
            v30[31] = v32;
            if (v35)
            {
              p_shared_owners = (unint64_t *)&v35->__shared_owners_;
              do
                v37 = __ldaxr(p_shared_owners);
              while (__stlxr(v37 - 1, p_shared_owners));
              if (!v37)
              {
                ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                std::__shared_weak_count::__release_weak(v35);
              }
            }
            v38 = (std::__shared_weak_count *)v30[33];
            v30[32] = 0;
            v30[33] = 0;
            if (v38)
            {
              v39 = (unint64_t *)&v38->__shared_owners_;
              do
                v40 = __ldaxr(v39);
              while (__stlxr(v40 - 1, v39));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
          }
        }
        v41 = (unint64_t *)&v29->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }
  }
  v43 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 320));
  if ((_DWORD)v43)
    geo::read_write_lock::logFailure(v43, (uint64_t)"unlock", v44);
}

void sub_19F324E94(_Unwind_Exception *a1)
{
  pthread_rwlock_t *v1;
  geo::read_write_lock *v3;
  const char *v4;

  v3 = (geo::read_write_lock *)pthread_rwlock_unlock(v1);
  if ((_DWORD)v3)
    geo::read_write_lock::logFailure(v3, (uint64_t)"unlock", v4);
  _Unwind_Resume(a1);
}

void ___ZN2md22MapZoomLevelStyleLogic27beginMapZoomLevelTransitionENSt3__110shared_ptrIN3gss17StylesheetManagerINS3_10PropertyIDEEEEENS3_12MapZoomLevelE_block_invoke_1(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 32);
  gss::StylesheetManager<gss::PropertyID>::finishBlend(*(_QWORD *)(a1 + 40));
  gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*(_QWORD *)(a1 + 56), 0x10036u, *(unsigned __int8 *)(a1 + 72));
  v3 = **(_QWORD **)(v2 + 160);
  if (v3)
  {
    v5 = 6;
    md::MapEngine::setNeedsTick(v3, &v5);
  }
  v4 = *(void **)(v2 + 128);
  if (v4)
  {
    *(_QWORD *)(v2 + 128) = 0;

  }
}

uint64_t ___ZN2md14ElevationLogic30_startFlatteningScaleAnimationEf_block_invoke(uint64_t result, float a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  if (*(float *)(v2 + 168) < 0.0)
    a2 = 1.0 - a2;
  *(float *)(v2 + 172) = a2;
  return result;
}

void sub_19F325138(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F32526C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F325394(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F32541C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN2md14ElevationLogic30_startFlatteningScaleAnimationEf_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  float v2;
  void *v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = 1.0;
  if (*(float *)(v1 + 168) < 0.0)
    v2 = 0.0;
  *(float *)(v1 + 172) = v2;
  *(_DWORD *)(v1 + 168) = 0;
  v3 = *(void **)(v1 + 144);
  if (v3)
  {
    *(_QWORD *)(v1 + 144) = 0;

  }
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::addAlbedo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 88);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 1u, 257);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C11B8;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C13E8;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 88);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::addAlbedo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(a1 + 88);
  if (!v9)
  {
    if (a5)
    {
      std::__hash_table<std::__hash_value_type<gms::PropertyKey,BOOL>,std::__unordered_map_hasher<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::hash<gms::PropertyKey>,std::equal_to<gms::PropertyKey>,true>,std::__unordered_map_equal<gms::PropertyKey,std::__hash_value_type<gms::PropertyKey,BOOL>,std::equal_to<gms::PropertyKey>,std::hash<gms::PropertyKey>,true>,std::allocator<std::__hash_value_type<gms::PropertyKey,BOOL>>>::__emplace_unique_key_args<gms::PropertyKey,std::pair<gms::PropertyKey const,BOOL>>((float *)(a1 + 8), 1u, 257);
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C11B8;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = v9 + 48;
    }
    else
    {
      v9 = operator new();
      *(_QWORD *)v9 = off_1E42C13E8;
      *(_BYTE *)(v9 + 8) = 0;
    }
    v10 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      v9 = *(_QWORD *)(a1 + 88);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, a2, a3, a4);
}

uint64_t gms::NonZoomablePropertyStore<unsigned char>::addProperty(uint64_t result, uint64_t a2, uint64_t a3, char *a4)
{
  char v4;

  v4 = *a4;
  if (!*(_BYTE *)(result + 8))
    *(_BYTE *)(result + 8) = 1;
  *(_BYTE *)(result + 9) = v4;
  return result;
}

uint64_t *gms::ZoomablePropertyStore<unsigned char>::addProperty(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3, char *a4)
{
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  __int16 v7;
  char v8;
  uint64_t *v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t **v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t **v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;

  v4 = result;
  v5 = *a2;
  v6 = *a3;
  v7 = (_WORD)v6 << 8;
  v8 = *a4;
  if (result[7])
  {
    v9 = (uint64_t *)result[5];
    v10 = (uint64_t **)(result + 6);
    if (v9 == result + 6)
    {
      v16 = (_QWORD *)result[5];
    }
    else
    {
      v11 = 0;
      v12 = (uint64_t *)result[5];
      do
      {
        v13 = (uint64_t *)v12[1];
        if (v13)
        {
          do
          {
            v14 = (uint64_t **)v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (uint64_t **)v12[2];
            v15 = *v14 == v12;
            v12 = (uint64_t *)v14;
          }
          while (!v15);
        }
        ++v11;
        v12 = (uint64_t *)v14;
      }
      while (v14 != v10);
      v16 = (_QWORD *)result[5];
      do
      {
        v17 = v11 >> 1;
        v18 = v16;
        if (v11 != 1)
        {
          v20 = v11 >> 1;
          v21 = v16;
          do
          {
            v23 = (_QWORD *)v21[1];
            if (v23)
            {
              do
              {
                v18 = v23;
                v23 = (_QWORD *)*v23;
              }
              while (v23);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v21[2];
                v15 = *v18 == (_QWORD)v21;
                v21 = v18;
              }
              while (!v15);
            }
            v21 = v18;
          }
          while (v20-- > 1);
        }
        if (*((unsigned __int8 *)v18 + 26) < v6)
        {
          v19 = (_QWORD *)v18[1];
          if (v19)
          {
            do
            {
              v16 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v16 = (_QWORD *)v18[2];
              v15 = *v16 == (_QWORD)v18;
              v18 = v16;
            }
            while (!v15);
          }
          v17 = v11 + ~v17;
        }
        v11 = v17;
      }
      while (v17);
    }
    if (v16 == v10 || *((unsigned __int8 *)v16 + 25) >= v6)
    {
      if (v16 == v9)
        goto LABEL_46;
      v27 = *v16;
      if (*v16)
      {
        do
        {
          v28 = v27;
          v27 = *(_QWORD *)(v27 + 8);
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = v16[2];
          v15 = *(_QWORD *)v28 == (_QWORD)v16;
          v16 = (_QWORD *)v28;
        }
        while (v15);
      }
      if (v5 >= *(unsigned __int8 *)(v28 + 26))
      {
LABEL_46:
        v29 = *v10;
        v25 = (uint64_t **)(result + 6);
        if (!*v10)
          goto LABEL_53;
        while (1)
        {
          while (1)
          {
            v25 = (uint64_t **)v29;
            v30 = *((unsigned __int8 *)v29 + 26);
            if (v6 >= v30)
              break;
            v29 = *v25;
            v10 = v25;
            if (!*v25)
              goto LABEL_53;
          }
          if (v30 >= v6)
            break;
          v29 = v25[1];
          if (!v29)
            goto LABEL_52;
        }
      }
    }
  }
  else
  {
    v10 = (uint64_t **)(result + 6);
    v24 = result[6];
    if (!v24)
    {
      v25 = (uint64_t **)(result + 6);
LABEL_53:
      v31 = (char *)operator new(0x20uLL);
      *(_WORD *)(v31 + 25) = v7 | v5;
      v31[27] = v8;
      *(_QWORD *)v31 = 0;
      *((_QWORD *)v31 + 1) = 0;
      *((_QWORD *)v31 + 2) = v25;
      *v10 = (uint64_t *)v31;
      v32 = *(_QWORD *)v4[5];
      if (v32)
      {
        v4[5] = v32;
        v33 = *v10;
      }
      else
      {
        v33 = (uint64_t *)v31;
      }
      result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[6], v33);
      ++v4[7];
      return result;
    }
    while (1)
    {
      while (1)
      {
        v25 = (uint64_t **)v24;
        v26 = *(unsigned __int8 *)(v24 + 26);
        if (v6 >= v26)
          break;
        v24 = (uint64_t)*v25;
        v10 = v25;
        if (!*v25)
          goto LABEL_53;
      }
      if (v26 >= v6)
        break;
      v24 = (uint64_t)v25[1];
      if (!v24)
      {
LABEL_52:
        v10 = v25 + 1;
        goto LABEL_53;
      }
    }
  }
  return result;
}

void std::vector<geo::codec::Mesh,geo::StdAllocator<geo::codec::Mesh,geo::codec::Allocator>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  geo::codec::Mesh *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  geo::codec::Mesh *v27;
  uint64_t v28;

  v4 = *a1;
  v5 = (geo::codec::Mesh *)a1[1];
  v6 = 0x86BCA1AF286BCA1BLL * (((uint64_t)v5 - *a1) >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6)
      return;
    v27 = (geo::codec::Mesh *)(v4 + 152 * a2);
    while (v5 != v27)
    {
      v5 = (geo::codec::Mesh *)((char *)v5 - 152);
      geo::codec::Mesh::~Mesh(v5);
    }
LABEL_24:
    a1[1] = (uint64_t)v27;
    return;
  }
  v8 = a1[2];
  if (0x86BCA1AF286BCA1BLL * ((v8 - (uint64_t)v5) >> 3) >= v7)
  {
    v27 = (geo::codec::Mesh *)((char *)v5 + 152 * v7);
    v28 = 152 * a2 - 8 * (((uint64_t)v5 - *a1) >> 3);
    do
    {
      geo::StdAllocator<geo::codec::Mesh,geo::codec::Allocator>::construct<geo::codec::Mesh>((uint64_t)v5);
      v5 = (geo::codec::Mesh *)((char *)v5 + 152);
      v28 -= 152;
    }
    while (v28);
    goto LABEL_24;
  }
  if (a2 > 0x1AF286BCA1AF286)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v9 = 0x86BCA1AF286BCA1BLL * ((v8 - v4) >> 3);
  v10 = 2 * v9;
  if (2 * v9 <= a2)
    v10 = a2;
  if (v9 >= 0xD79435E50D7943)
    v11 = 0x1AF286BCA1AF286;
  else
    v11 = v10;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 152 * v11, 8);
  v13 = 152 * v6;
  v14 = v12 + 152 * v6;
  v15 = v12 + 152 * a2;
  v16 = 152 * a2 - v13;
  v17 = v14;
  do
  {
    geo::StdAllocator<geo::codec::Mesh,geo::codec::Allocator>::construct<geo::codec::Mesh>(v17);
    v17 += 152;
    v16 -= 152;
  }
  while (v16);
  v18 = v12 + 152 * v11;
  v19 = *a1;
  v20 = a1[1];
  if (v20 == *a1)
  {
    *a1 = v14;
    a1[1] = v15;
    v26 = a1[2];
    a1[2] = v18;
    if (!v20)
      return;
LABEL_26:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v20, v26 - v20);
    return;
  }
  v21 = 0;
  do
  {
    v22 = v14 + v21;
    v23 = v20 + v21;
    *(_QWORD *)(v22 - 152) = 0;
    *(_QWORD *)(v22 - 144) = 0;
    *(_QWORD *)(v22 - 136) = 0;
    *(_QWORD *)(v22 - 128) = *(_QWORD *)(v20 + v21 - 128);
    *(_OWORD *)(v22 - 152) = *(_OWORD *)(v20 + v21 - 152);
    *(_QWORD *)(v22 - 136) = *(_QWORD *)(v20 + v21 - 136);
    *(_QWORD *)(v23 - 152) = 0;
    *(_QWORD *)(v23 - 144) = 0;
    *(_QWORD *)(v23 - 136) = 0;
    *(_QWORD *)(v22 - 120) = 0;
    *(_QWORD *)(v22 - 112) = 0;
    *(_QWORD *)(v22 - 104) = 0;
    *(_QWORD *)(v22 - 96) = *(_QWORD *)(v20 + v21 - 96);
    *(_OWORD *)(v22 - 120) = *(_OWORD *)(v20 + v21 - 120);
    *(_QWORD *)(v22 - 104) = *(_QWORD *)(v20 + v21 - 104);
    *(_QWORD *)(v23 - 120) = 0;
    *(_QWORD *)(v23 - 112) = 0;
    *(_QWORD *)(v23 - 104) = 0;
    *(_QWORD *)(v22 - 88) = 0;
    *(_QWORD *)(v22 - 80) = 0;
    *(_QWORD *)(v22 - 72) = 0;
    *(_QWORD *)(v22 - 64) = *(_QWORD *)(v20 + v21 - 64);
    *(_OWORD *)(v22 - 88) = *(_OWORD *)(v20 + v21 - 88);
    *(_QWORD *)(v22 - 72) = *(_QWORD *)(v20 + v21 - 72);
    *(_QWORD *)(v23 - 88) = 0;
    *(_QWORD *)(v23 - 80) = 0;
    *(_QWORD *)(v23 - 72) = 0;
    *(_QWORD *)(v22 - 56) = 0;
    *(_QWORD *)(v22 - 48) = 0;
    *(_QWORD *)(v22 - 40) = 0;
    *(_QWORD *)(v22 - 32) = *(_QWORD *)(v20 + v21 - 32);
    *(_OWORD *)(v22 - 56) = *(_OWORD *)(v20 + v21 - 56);
    *(_QWORD *)(v22 - 40) = *(_QWORD *)(v20 + v21 - 40);
    *(_QWORD *)(v23 - 56) = 0;
    *(_QWORD *)(v23 - 48) = 0;
    *(_QWORD *)(v23 - 40) = 0;
    v24 = *(_OWORD *)(v20 + v21 - 24);
    *(_QWORD *)(v22 - 8) = *(_QWORD *)(v20 + v21 - 8);
    *(_OWORD *)(v22 - 24) = v24;
    v21 -= 152;
  }
  while (v20 + v21 != v19);
  v20 = *a1;
  v25 = a1[1];
  *a1 = v14 + v21;
  a1[1] = v15;
  v26 = a1[2];
  a1[2] = v18;
  while (v25 != v20)
    geo::codec::Mesh::~Mesh((geo::codec::Mesh *)(v25 - 152));
  if (v20)
    goto LABEL_26;
}

uint64_t geo::StdAllocator<geo::codec::Mesh,geo::codec::Allocator>::construct<geo::codec::Mesh>(uint64_t result)
{
  _QWORD *v1;
  geo::codec::Allocator *v2;
  geo::codec::Allocator *v3;
  geo::codec::Allocator *v4;

  if (result)
  {
    v1 = (_QWORD *)result;
    *(_QWORD *)(result + 144) = 0;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    v2 = (geo::codec::Allocator *)geo::codec::Allocator::instance((geo::codec::Allocator *)result);
    v1[3] = v2;
    v1[4] = 0;
    v1[5] = 0;
    v1[6] = 0;
    v3 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v2);
    v1[7] = v3;
    v1[8] = 0;
    v1[9] = 0;
    v1[10] = 0;
    v4 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v3);
    v1[11] = v4;
    v1[12] = 0;
    v1[13] = 0;
    v1[14] = 0;
    result = geo::codec::Allocator::instance(v4);
    v1[15] = result;
  }
  return result;
}

void sub_19F325D2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c69_ZTSNSt3__110shared_ptrIN3gss16ClientStyleStateINS1_10PropertyIDEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_19F325F30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_19F325FBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F326274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_19F3266F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void VKCameraPropertiesForRect(double *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  VKCamera *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  long double v28;
  long double v29;
  long double v30;
  float64x2_t v31;
  long double v32;
  long double v33;
  long double v34;
  long double v35;
  double v36;
  long double v37;
  long double v38;
  float64x2_t v39;
  VKCamera *v40;

  v5 = *a1;
  v6 = a1[1];
  v8 = a1[2];
  v7 = a1[3];
  if (v8 == 0.0 || v7 == 0.0)
  {
    GEOCoordinate2DForMapPoint();
    GEOMapPointsPerMeterAtLatitude();
    GEOMapRectInset();
    v5 = v9;
    v6 = v10;
    v8 = v11;
    v7 = v12;
  }
  v14 = *(double *)(MEMORY[0x1E0D266E8] + 16);
  v13 = *(double *)(MEMORY[0x1E0D266E8] + 24);
  v40 = -[VKCamera initWithRunLoopController:]([VKCamera alloc], "initWithRunLoopController:", 0);
  -[VKCamera setAspectRatio:](v40, "setAspectRatio:", a3);
  v15 = (v7 + v6) / v13;
  v16 = ((v8 + v5) / v14 - v5 / v14) * 0.5;
  v17 = (v15 - v6 / v13) * 0.5;
  v18 = v16 + v5 / v14;
  v19 = 1.0 - v15 + v17;
  v20 = v18 + 1.0 - ceil(v18);
  if (v18 >= 0.0)
    v20 = v18;
  v21 = v18 - floor(v18);
  if (v18 > 1.0)
    v22 = v21;
  else
    v22 = v20;
  if (v19 <= 1.0)
  {
    v23 = v40;
    if (v19 < 0.0)
      v19 = v19 + 1.0 - ceil(v19);
  }
  else
  {
    v19 = v19 - floor(v19);
    v23 = v40;
  }
  -[VKCamera tanHalfVerticalFOV](v23, "tanHalfVerticalFOV");
  v25 = v24;
  -[VKCamera tanHalfHorizFOV](v40, "tanHalfHorizFOV");
  v27 = v26;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v28 = exp(v19 * 6.28318531 + -3.14159265);
  v38 = atan(v28);
  v29 = fmod(v22 * 6.28318531, 6.28318531);
  v30 = fmod(v29 + 6.28318531, 6.28318531);
  v31.f64[0] = v38;
  v31.f64[1] = v30;
  v39 = vmlaq_f64((float64x2_t)xmmword_19FFB32F0, (float64x2_t)xmmword_19FFB32E0, v31);
  *(float64x2_t *)a2 = v39;
  v32 = cos(0.034906585 * v39.f64[0]) * -559.82 + 111132.92;
  v33 = v32 + cos(0.0698131701 * v39.f64[0]) * 1.175;
  v34 = v33 + cos(0.104719755 * v39.f64[0]) * -0.0023;
  v35 = tan(0.00872664626 * v39.f64[0] + 0.78103484);
  v36 = log(v35);
  v37 = tan(0.00872664626 * v39.f64[0] + 0.789761487);
  *(long double *)(a2 + 32) = v34 * fmax(v17 / v25, v16 / v27) / fabs((log(v37) - v36) * 0.159154943);

}

void sub_19F3269D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_19F326C14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F326E4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19F327088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_19F327864(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  uint64_t v8;

  if (v7)
  {
    if (*(_BYTE *)(v8 - 184))
      *(_BYTE *)(v8 - 184) = 0;

  }
  if (*(_BYTE *)(v8 - 240))
    *(_BYTE *)(v8 - 240) = 0;

  _Unwind_Resume(a1);
}

void sub_19F327A2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F327C28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F327E2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F327F98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F328380(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F3284B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F3285C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_19F328858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F328910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19F328CFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F328EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19F329078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19F32920C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19F3293B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void sub_19F329434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F329488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::LabelSettings::addCustomFeatureDataSource(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 168), "addObject:", v3);
  v4 = *(_QWORD *)(a1 + 24);
  v9 = v3;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 168) + 64) + 32))(*(_QWORD *)(*(_QWORD *)(v4 + 168) + 64));
  if (v5)
  {
    v6 = v9;
    v10[0] = &off_1E42D2B90;
    v10[1] = v5;
    v10[2] = v6;
    v11 = v10;
    md::LabelCustomFeatureSupport::queueCommand(v5, 0, v10);
    v7 = v11;
    if (v11 == v10)
    {
      v8 = 4;
      v7 = v10;
    }
    else
    {
      if (!v11)
      {
LABEL_7:

        goto LABEL_8;
      }
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
    goto LABEL_7;
  }
LABEL_8:

}

void sub_19F3295A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  void *v14;
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a13;
  if (a13 == v15)
  {
    v18 = 4;
    v17 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_19F3296B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19F329854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void md::LabelCustomFeatureSupport::mapTileWasActivated(md::LabelCustomFeatureSupport *this, md::LabelMapTile *a2)
{
  md::LabelMapTile **v4;
  md::LabelMapTile **v5;
  md::LabelMapTile **v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  md::LabelCustomFeatureSupport *v28;
  md::LabelCustomFeatureSupport *v29;
  md::LabelCustomFeatureSupport *v30;
  BOOL v31;

  v4 = (md::LabelMapTile **)*((_QWORD *)this + 13);
  v5 = (md::LabelMapTile **)*((_QWORD *)this + 14);
  v6 = v4;
  if (v4 != v5)
  {
    while (*v6 != a2)
    {
      if (++v6 == v5)
      {
        v6 = (md::LabelMapTile **)*((_QWORD *)this + 14);
        break;
      }
    }
  }
  if (v6 == v5)
  {
    v7 = *((_QWORD *)this + 15);
    if ((unint64_t)v5 < v7)
    {
      if (v5)
        *v5 = a2;
      v8 = v5 + 1;
LABEL_33:
      *((_QWORD *)this + 14) = v8;
      if (*((_QWORD *)this + 12))
      {
        v28 = (md::LabelCustomFeatureSupport *)*((_QWORD *)this + 9);
        if (v28 != (md::LabelCustomFeatureSupport *)((char *)this + 80))
        {
          do
          {
            md::LabelCustomFeatureProvider::addTile((uint64_t *)v28 + 5, a2);
            v29 = (md::LabelCustomFeatureSupport *)*((_QWORD *)v28 + 1);
            if (v29)
            {
              do
              {
                v30 = v29;
                v29 = *(md::LabelCustomFeatureSupport **)v29;
              }
              while (v29);
            }
            else
            {
              do
              {
                v30 = (md::LabelCustomFeatureSupport *)*((_QWORD *)v28 + 2);
                v31 = *(_QWORD *)v30 == (_QWORD)v28;
                v28 = v30;
              }
              while (!v31);
            }
            v28 = v30;
          }
          while (v30 != (md::LabelCustomFeatureSupport *)((char *)this + 80));
        }
        md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(this, *((md::LabelMapTile **)a2 + 9), *((std::__shared_weak_count **)a2 + 10));
      }
      return;
    }
    v9 = v5 - v4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v11 = v7 - (_QWORD)v4;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8;
    v13 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v10;
    if (v13)
    {
      v14 = 8 * v13;
      v15 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), 8 * v13, 8);
      v16 = (_QWORD *)(v15 + 8 * v9);
      v13 = v15 + v14;
      if (v15)
        *v16 = a2;
    }
    else
    {
      v16 = (_QWORD *)(8 * v9);
    }
    v8 = v16 + 1;
    v18 = *((_QWORD *)this + 13);
    v17 = *((_QWORD *)this + 14);
    if (v17 == v18)
    {
LABEL_31:
      *((_QWORD *)this + 13) = v16;
      *((_QWORD *)this + 14) = v8;
      v27 = *((_QWORD *)this + 15);
      *((_QWORD *)this + 15) = v13;
      if (v17)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16), v17, v27 - v17);
      goto LABEL_33;
    }
    v19 = v17 - v18 - 8;
    if (v19 < 0x38)
    {
      v21 = *((_QWORD *)this + 14);
    }
    else if ((unint64_t)(v17 - (_QWORD)v16) < 0x20)
    {
      v21 = *((_QWORD *)this + 14);
    }
    else
    {
      v20 = (v19 >> 3) + 1;
      v21 = v17 - 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      v22 = v16 - 2;
      v23 = (__int128 *)(v17 - 16);
      v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *v23;
        *(v22 - 1) = *(v23 - 1);
        *v22 = v25;
        v22 -= 2;
        v23 -= 2;
        v24 -= 4;
      }
      while (v24);
      v16 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
      if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_30;
    }
    do
    {
      v26 = *(_QWORD *)(v21 - 8);
      v21 -= 8;
      *--v16 = v26;
    }
    while (v21 != v18);
LABEL_30:
    v17 = *((_QWORD *)this + 13);
    goto LABEL_31;
  }
}

uint64_t *md::LabelCustomFeatureProvider::addTile(uint64_t *this, md::LabelMapTile *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t *v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned __int8 v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  __int128 *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v3 = (uint64_t)this;
  v5 = this + 9;
  v4 = this[9];
  if (!v4)
  {
    v9 = this + 9;
LABEL_17:
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)this[10] + 16))(this[10], 184, 8);
    *(_WORD *)(v13 + 32) = *((_WORD *)a2 + 4);
    *(_QWORD *)(v13 + 36) = *(_QWORD *)((char *)a2 + 12);
    *(_QWORD *)(v13 + 120) = 0;
    v14 = (uint64_t *)(v13 + 120);
    *(_QWORD *)(v13 + 128) = 0;
    *(_QWORD *)(v13 + 136) = 0;
    {
      v68 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v68, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v16 = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v13 + 144) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v13 + 152) = &off_1E42B53F0;
    *(_QWORD *)(v13 + 160) = 0;
    *(_BYTE *)(v13 + 176) = 0;
    v17 = *(float64x2_t *)(MEMORY[0x1E0D266E8] + 16);
    v18 = *(float64x2_t *)((char *)a2 + 40);
    _Q3 = *(float64x2_t *)((char *)a2 + 56);
    _D4 = *(_QWORD *)(MEMORY[0x1E0D266E8] + 24);
    __asm { FMLS            D4, D4, V3.D[1] }
    *(_QWORD *)(v13 + 56) = *(_OWORD *)&vmulq_f64(v17, v18);
    *(_QWORD *)(v13 + 64) = _D4;
    *(float64x2_t *)(v13 + 72) = vmulq_f64(vsubq_f64(_Q3, v18), v17);
    *(_QWORD *)(v13 + 88) = *((_QWORD *)a2 + 5);
    *(_QWORD *)(v13 + 96) = *((_QWORD *)a2 + 6);
    *(_QWORD *)(v13 + 104) = *((_QWORD *)a2 + 7);
    *(_QWORD *)(v13 + 112) = *((_QWORD *)a2 + 8);
    v26 = *(_QWORD **)(v13 + 128);
    v27 = *(_QWORD *)(v13 + 136);
    if ((unint64_t)v26 < v27)
    {
      if (v26)
        *v26 = a2;
      v28 = v26 + 1;
LABEL_57:
      *(_QWORD *)(v13 + 128) = v28;
      *(_QWORD *)v13 = 0;
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = v9;
      *v5 = v13;
      v56 = **(_QWORD **)(v3 + 64);
      if (v56)
      {
        *(_QWORD *)(v3 + 64) = v56;
        v13 = *v5;
      }
      this = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 72), (uint64_t *)v13);
      ++*(_QWORD *)(v3 + 88);
      return this;
    }
    v29 = ((uint64_t)v26 - *v14) >> 3;
    v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 61)
      abort();
    v31 = v27 - *v14;
    if (v31 >> 2 > v30)
      v30 = v31 >> 2;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
      v32 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v32 = v30;
    if (v32)
    {
      v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, 8 * v32, 8);
      v34 = (_QWORD *)(v33 + 8 * v29);
      v35 = v33 + 8 * v32;
      if (v33)
        *v34 = a2;
    }
    else
    {
      v35 = 0;
      v34 = (_QWORD *)(8 * v29);
    }
    v28 = v34 + 1;
    v40 = *(_QWORD *)(v13 + 120);
    v39 = *(_QWORD *)(v13 + 128);
    if (v39 == v40)
    {
LABEL_55:
      *(_QWORD *)(v13 + 120) = v34;
      *(_QWORD *)(v13 + 128) = v28;
      v55 = *(_QWORD *)(v13 + 136);
      *(_QWORD *)(v13 + 136) = v35;
      if (v39)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v13 + 144) + 40))(*(_QWORD *)(v13 + 144), v39, v55 - v39);
      goto LABEL_57;
    }
    v41 = v39 - v40 - 8;
    if (v41 < 0x38)
    {
      v43 = *(_QWORD *)(v13 + 128);
    }
    else if ((unint64_t)(v39 - (_QWORD)v34) < 0x20)
    {
      v43 = *(_QWORD *)(v13 + 128);
    }
    else
    {
      v42 = (v41 >> 3) + 1;
      v43 = v39 - 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
      v44 = v34 - 2;
      v45 = (__int128 *)(v39 - 16);
      v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v47 = *v45;
        *(v44 - 1) = *(v45 - 1);
        *v44 = v47;
        v44 -= 2;
        v45 -= 2;
        v46 -= 4;
      }
      while (v46);
      v34 -= v42 & 0x3FFFFFFFFFFFFFFCLL;
      if (v42 == (v42 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_54;
    }
    do
    {
      v54 = *(_QWORD *)(v43 - 8);
      v43 -= 8;
      *--v34 = v54;
    }
    while (v43 != v40);
LABEL_54:
    v39 = *v14;
    goto LABEL_55;
  }
  v6 = *((unsigned __int8 *)a2 + 9);
  v8 = *((_DWORD *)a2 + 3);
  v7 = *((_DWORD *)a2 + 4);
  while (1)
  {
    while (1)
    {
      v9 = (uint64_t *)v4;
      v10 = *(unsigned __int8 *)(v4 + 33);
      if (v6 == v10)
        break;
      if (v6 < v10)
        goto LABEL_3;
      if (v10 >= v6)
        goto LABEL_31;
LABEL_14:
      v4 = v9[1];
      if (!v4)
      {
        v5 = v9 + 1;
        goto LABEL_17;
      }
    }
    v11 = *((_DWORD *)v9 + 10);
    if (v7 != v11)
      break;
    v12 = *((_DWORD *)v9 + 9);
    if (v8 >= v12)
    {
      if (v12 >= v8)
        goto LABEL_31;
      goto LABEL_14;
    }
LABEL_3:
    v4 = *v9;
    v5 = v9;
    if (!*v9)
      goto LABEL_17;
  }
  if (v7 < v11)
    goto LABEL_3;
  if (v11 < v7)
    goto LABEL_14;
LABEL_31:
  v36 = (_QWORD *)v9[16];
  v37 = v9[17];
  if ((unint64_t)v36 < v37)
  {
    if (v36)
      *v36 = a2;
    v38 = v36 + 1;
    goto LABEL_74;
  }
  v48 = v9[15];
  v49 = ((uint64_t)v36 - v48) >> 3;
  v50 = v49 + 1;
  if ((unint64_t)(v49 + 1) >> 61)
    abort();
  v51 = v37 - v48;
  if (v51 >> 2 > v50)
    v50 = v51 >> 2;
  if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
    v50 = 0x1FFFFFFFFFFFFFFFLL;
  if (v50)
  {
    v52 = v50;
    this = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v9[18] + 16))(v9[18], 8 * v50, 8);
    v53 = &this[v49];
    v50 = (unint64_t)&this[v52];
    if (this)
      *v53 = (uint64_t)a2;
  }
  else
  {
    v53 = (uint64_t *)(8 * v49);
  }
  v38 = v53 + 1;
  v58 = v9[15];
  v57 = v9[16];
  if (v57 != v58)
  {
    v59 = v57 - v58 - 8;
    if (v59 < 0x38)
    {
      v61 = v9[16];
    }
    else if ((unint64_t)(v57 - (_QWORD)v53) < 0x20)
    {
      v61 = v9[16];
    }
    else
    {
      v60 = (v59 >> 3) + 1;
      v61 = v57 - 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
      v62 = v53 - 2;
      v63 = (__int128 *)(v57 - 16);
      v64 = v60 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v65 = *v63;
        *((_OWORD *)v62 - 1) = *(v63 - 1);
        *(_OWORD *)v62 = v65;
        v62 -= 4;
        v63 -= 2;
        v64 -= 4;
      }
      while (v64);
      v53 -= v60 & 0x3FFFFFFFFFFFFFFCLL;
      if (v60 == (v60 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_71:
        v57 = v9[15];
        goto LABEL_72;
      }
    }
    do
    {
      v66 = *(_QWORD *)(v61 - 8);
      v61 -= 8;
      *--v53 = v66;
    }
    while (v61 != v58);
    goto LABEL_71;
  }
LABEL_72:
  v9[15] = (uint64_t)v53;
  v9[16] = (uint64_t)v38;
  v67 = v9[17];
  v9[17] = v50;
  if (v57)
    this = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9[18] + 40))(v9[18], v57, v67 - v57);
LABEL_74:
  v9[16] = (uint64_t)v38;
  return this;
}

void sub_19F329FFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(_QWORD *)(v2 + 152) = v3;

  v5 = *(_QWORD *)(v2 + 120);
  if (v5)
  {
    *(_QWORD *)(v2 + 128) = v5;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 144) + 40))(*(_QWORD *)(v2 + 144), v5, *(_QWORD *)(v2 + 136) - v5);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 80) + 40))(*(_QWORD *)(v1 + 80), v2, 184);
  _Unwind_Resume(a1);
}

void md::LabelCustomFeatureSupport::populateLabelFeaturesInTile(md::LabelCustomFeatureSupport *this, md::LabelMapTile *a2, std::__shared_weak_count *a3)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a3 || (v5 = std::__shared_weak_count::lock(a3)) == 0)
    std::__throw_bad_weak_ptr[abi:nn180100]();
  v6 = v5;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = operator new(0x20uLL);
  *v9 = &off_1E42D2C68;
  v9[1] = this;
  v9[2] = a2;
  v9[3] = v6;
  v18 = v9;
  md::LabelCustomFeatureSupport::queueCommand((uint64_t)this, 2, v17);
  v14 = v18;
  if (v18 == v17)
  {
    v15 = 4;
    v14 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_10;
    v15 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v14 + 8 * v15))(v14, v10, v11, v12, v13);
  do
LABEL_10:
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_19F32A184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  md::components::Material::~Material((md::components::Material *)&a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void md::LabelCustomFeatureSupport::queueCommand(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  _OWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  char v37;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 184))
  {
    v4 = a3[3];
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
      return;
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_49:
    abort();
  }
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = (std::__shared_weak_count *)operator new(0x40uLL);
  v9->__shared_owners_ = 0;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD428;
  LOBYTE(v9[1].__vftable) = a2;
  v10 = a3[3];
  if (!v10)
    goto LABEL_7;
  if ((_QWORD *)v10 != a3)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
LABEL_7:
    v9[2].__shared_owners_ = v10;
    goto LABEL_9;
  }
  v9[2].__shared_owners_ = (uint64_t)&v9[1].__shared_owners_;
  (*(void (**)(_QWORD *))(*a3 + 24))(a3);
LABEL_9:
  *(_QWORD *)&v36 = v9 + 1;
  *((_QWORD *)&v36 + 1) = v9;
  v11 = *(_QWORD **)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)v11 >= v12)
  {
    v13 = *(_QWORD *)(a1 + 40);
    v14 = ((uint64_t)v11 - v13) >> 4;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 60)
      goto LABEL_49;
    v16 = v12 - v13;
    if (v16 >> 3 > v15)
      v15 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      v18 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 64) + 16))(*(_QWORD *)(a1 + 64), 16 * v17, 8);
      v19 = (_OWORD *)(v18 + 16 * v14);
      v20 = v18 + 16 * v17;
      if (v18)
      {
        *v19 = v36;
        v36 = 0uLL;
      }
    }
    else
    {
      v20 = 0;
      v19 = (_OWORD *)(16 * v14);
    }
    v21 = v19 + 1;
    v22 = *(_QWORD **)(a1 + 40);
    v23 = *(_QWORD **)(a1 + 48);
    if (v23 == v22)
    {
      *(_QWORD *)(a1 + 40) = v19;
      *(_QWORD *)(a1 + 48) = v21;
      v26 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 56) = v20;
    }
    else
    {
      do
      {
        v24 = *((_OWORD *)v23 - 1);
        v23 -= 2;
        *--v19 = v24;
        *v23 = 0;
        v23[1] = 0;
      }
      while (v23 != v22);
      v23 = *(_QWORD **)(a1 + 40);
      v25 = *(_QWORD **)(a1 + 48);
      *(_QWORD *)(a1 + 40) = v19;
      *(_QWORD *)(a1 + 48) = v21;
      v26 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 56) = v20;
      while (v25 != v23)
      {
        v27 = (std::__shared_weak_count *)*(v25 - 1);
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v25 -= 2;
      }
    }
    if (v23)
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 64) + 40))(*(_QWORD *)(a1 + 64), v23, v26 - (_QWORD)v23);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    *(_QWORD *)(a1 + 48) = v21;
    if (!v9)
      goto LABEL_41;
  }
  else
  {
    if (v11)
    {
      *v11 = v9 + 1;
      v11[1] = v9;
      v36 = 0uLL;
      v9 = 0;
    }
    *(_QWORD *)(a1 + 48) = v11 + 2;
    if (!v9)
      goto LABEL_41;
  }
  v30 = (unint64_t *)&v9->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v7 != v8)
      return;
    goto LABEL_42;
  }
LABEL_41:
  if (v7 != v8)
    return;
LABEL_42:
  v32 = *(_QWORD *)(a1 + 16);
  v33 = atomic_load((unsigned __int8 *)(v32 + 3058));
  if ((v33 & 1) != 0)
  {
    v34 = *(_QWORD *)(v32 + 136);
    if (v34)
    {
      v35 = *(_QWORD *)(v34 + 56);
      if (v35)
      {
        *(_QWORD *)&v36 = *(_QWORD *)(a1 + 16);
        v37 = 9;
        (*(void (**)(uint64_t, __int128 *, char *))(*(_QWORD *)v35 + 48))(v35, &v36, &v37);
      }
    }
  }
}

void sub_19F32A4A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_19F32A4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::Logic<md::MaterialLogic,md::MaterialContext,md::LogicDependencies<gdc::TypeList<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>,gdc::TypeList<>>>::_allocateContext(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  void *__p;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  char v32;

  v4 = (_QWORD *)operator new();
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v24, a1);
  v5 = operator new();
  v6 = v24;
  v7 = v25;
  v24 = 0uLL;
  *(_OWORD *)v5 = v6;
  *(_OWORD *)(v5 + 16) = v7;
  v25 = 0uLL;
  v8 = __p;
  v9 = v27;
  __p = 0;
  v27 = 0;
  *(_QWORD *)(v5 + 32) = v8;
  *(_QWORD *)(v5 + 40) = v9;
  v11 = v28;
  v10 = v29;
  *(_QWORD *)(v5 + 48) = v28;
  *(_QWORD *)(v5 + 56) = v10;
  *(_DWORD *)(v5 + 64) = v30;
  if (v10)
  {
    v12 = v11[1];
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v12 >= v9)
        v12 %= v9;
    }
    else
    {
      v12 &= v9 - 1;
    }
    v11 = 0;
    v8[v12] = v5 + 48;
    v28 = 0;
    v29 = 0;
  }
  *(_WORD *)(v5 + 72) = v31;
  *(_BYTE *)(v5 + 74) = v32;
  v4[2] = "md::MaterialContext]";
  v4[3] = 19;
  v4[4] = v5;
  *v4 = &off_1E42B0CF8;
  v4[1] = 0xD2404CDD1F9A6950;
  *a2 = v4;
  while (v11)
  {
    v20 = v11;
    v11 = (_QWORD *)*v11;
    v21 = (std::__shared_weak_count *)v20[4];
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    operator delete(v20);
  }
  v13 = __p;
  __p = 0;
  if (v13)
    operator delete(v13);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_19F32A6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  md::MaterialContext::~MaterialContext((md::MaterialContext *)&a9);
  MEMORY[0x1A1AF4E00](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void md::DaVinciAssetResourceDecoder::decode(const gdc::ResourceKey *a1@<X1>, const gdc::RawResourceSourceData *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const geo::codec::MaterialSheet::Material *v11;
  const geo::codec::MaterialSheet::Material *v12;
  int64_t v13;
  unint64_t v14;
  geo::codec::MaterialSheet::Material *v15;
  geo::codec::MaterialSheet::Material *v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  _QWORD *v21;
  char *v22;
  size_t v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  unint64_t v57;
  geo::codec::Asset *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  void *v64;
  _QWORD *v65;
  void *v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  const gdc::ResourceKey *v71;
  uint64_t *v72;
  uint64_t v73;
  _QWORD v74[2];
  std::__shared_weak_count *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  void *__p;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  int8x8_t v82;
  geo::codec::MaterialSheet::Material *v83;
  geo::codec::MaterialSheet::Material *v84;
  char *v85;
  _QWORD *v86;
  _QWORD *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[2];
  std::__shared_weak_count *v95;
  __int128 v96;
  __int128 v97;
  int v98;
  __int128 v99;
  __int128 v100;
  int v101;
  _QWORD v102[3];
  char v103;
  int v104[5];

  if (*(_QWORD *)a2)
  {
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 32))(*(_QWORD *)a2);
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2);
    v104[0] = 0;
    v102[0] = v7;
    v102[1] = v8;
    v102[2] = 0;
    v103 = 0;
    v99 = 0u;
    v100 = 0u;
    v101 = 1065353216;
    v96 = 0u;
    v97 = 0u;
    v98 = 1065353216;
    v94[1] = 0;
    v95 = 0;
    geo::codec::AssetDecoder::decodeAsset((geo::codec::AssetDecoder *)v102, (geo::ibitstream *)v104, (geo::codec::AssetDecoder *)v94);
    if (v94[0])
    {
      v71 = a1;
      v72 = a3;
      v9 = *(_QWORD *)(v94[0] + 24);
      v73 = *(_QWORD *)(v94[0] + 32);
      if (v9 == v73)
      {
        v10 = 0;
      }
      else
      {
        v10 = 0;
        do
        {
          v81 = *(_QWORD *)v9;
          v82.i16[0] = *(_WORD *)(v9 + 8);
          v84 = 0;
          v85 = 0;
          v83 = 0;
          v12 = *(const geo::codec::MaterialSheet::Material **)(v9 + 16);
          v11 = *(const geo::codec::MaterialSheet::Material **)(v9 + 24);
          v13 = v11 - v12;
          if (v11 != v12)
          {
            v14 = 0x823EE08FB823EE09 * (v13 >> 3);
            if (v14 >= 0x8FB823EE08FB83)
              abort();
            v15 = (geo::codec::MaterialSheet::Material *)operator new(v13);
            v83 = v15;
            v84 = v15;
            v85 = (char *)v15 + 456 * v14;
            do
            {
              v16 = geo::codec::MaterialSheet::Material::Material(v15, v12);
              v12 = (const geo::codec::MaterialSheet::Material *)((char *)v12 + 456);
              v15 = (geo::codec::MaterialSheet::Material *)((char *)v16 + 456);
            }
            while (v12 != v11);
            v84 = v15;
          }
          v86 = 0;
          v87 = 0;
          v88 = 0;
          v18 = *(_QWORD *)(v9 + 40);
          v17 = *(_QWORD *)(v9 + 48);
          v19 = v17 - v18;
          if (v17 != v18)
          {
            v20 = 0xAAAAAAAAAAAAAAABLL * (v19 >> 3);
            if (v20 >= 0xAAAAAAAAAAAAAABLL)
              abort();
            v86 = operator new(v19);
            v87 = v86;
            v88 = (char *)&v86[3 * v20];
            v21 = v86;
            do
            {
              *v21 = 0;
              v21[1] = 0;
              v21[2] = 0;
              v25 = *(const void **)v18;
              v24 = *(_QWORD *)(v18 + 8);
              v26 = v24 - *(_QWORD *)v18;
              if (v24 != *(_QWORD *)v18)
              {
                if (v26 < 0)
                  abort();
                v22 = (char *)operator new(v24 - *(_QWORD *)v18);
                *v21 = v22;
                v21[1] = v22;
                v21[2] = &v22[8 * (v26 >> 3)];
                v23 = v26 & 0xFFFFFFFFFFFFFFF8;
                memcpy(v22, v25, v23);
                v21[1] = &v22[v23];
              }
              v21 += 3;
              v18 += 24;
            }
            while (v18 != v17);
            v87 = v21;
          }
          geo::codec::MaterialSheet::Material::Material((geo::codec::MaterialSheet::Material *)&v89, (const geo::codec::MaterialSheet::Material *)(v9 + 64));
          v90 = 0;
          v91 = 0;
          v27 = *(_QWORD *)(v9 + 544);
          v92 = 0;
          v93 = v27;
          v28 = *(_QWORD *)(v9 + 520);
          v29 = *(_QWORD *)(v9 + 528);
          if (v29 != v28)
          {
            if (0xCCCCCCCCCCCCCCCDLL * ((v29 - v28) >> 3) >= 0x666666666666667)
              abort();
            v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
            v91 = (_QWORD *)v90;
            v92 = v90 + 8 * ((v29 - v28) >> 3);
            v30 = (_QWORD *)v90;
            do
            {
              if (v30)
              {
                *v30 = 0;
                v30[1] = 0;
                v31 = *(_QWORD *)(v28 + 24);
                v30[2] = 0;
                v30[3] = v31;
                v32 = *(_BYTE **)v28;
                v33 = *(_BYTE **)(v28 + 8);
                v34 = (unint64_t)&v33[-*(_QWORD *)v28];
                if (v33 != *(_BYTE **)v28)
                {
                  if ((v34 & 0x8000000000000000) != 0)
                    abort();
                  v35 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v31 + 16))(v31, &v33[-*(_QWORD *)v28], 1);
                  *v30 = v35;
                  v30[1] = v35;
                  v30[2] = v35 + v34;
                  do
                  {
                    if (v35)
                      *(_BYTE *)v35 = *v32;
                    ++v32;
                    ++v35;
                  }
                  while (v32 != v33);
                  v30[1] = v35;
                }
                v30[4] = *(_QWORD *)(v28 + 32);
              }
              v28 += 40;
              v30 += 5;
            }
            while (v28 != v29);
            v91 = v30;
          }
          md::DaVinciMaterialResourceDecoder::translateFromCodec((md::DaVinciMaterialResourceDecoder *)&v76, &v82, v81);
          v36 = v81;
          v74[0] = v81;
          v74[1] = v76;
          v75 = v77;
          if (v77)
          {
            p_shared_owners = (unint64_t *)&v77->__shared_owners_;
            do
              v38 = __ldxr(p_shared_owners);
            while (__stxr(v38 + 1, p_shared_owners));
          }
          std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,std::shared_ptr<gms::MaterialSheet<ggl::Texture2D>>>>((uint64_t *)&v99, v36, (uint64_t)v74);
          v39 = v75;
          if (v75)
          {
            v40 = (unint64_t *)&v75->__shared_owners_;
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          v42 = v80;
          v43 = (char *)__p;
          if (__p)
          {
            v44 = v79;
            v45 = __p;
            if (v79 != __p)
            {
              do
              {
                v46 = (std::__shared_weak_count *)*((_QWORD *)v44 - 1);
                if (v46)
                {
                  v47 = (unint64_t *)&v46->__shared_owners_;
                  do
                    v48 = __ldaxr(v47);
                  while (__stlxr(v48 - 1, v47));
                  if (!v48)
                  {
                    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                    std::__shared_weak_count::__release_weak(v46);
                  }
                }
                v44 -= 16;
              }
              while (v44 != v43);
              v45 = __p;
            }
            v79 = v43;
            operator delete(v45);
          }
          v49 = v77;
          if (v77)
          {
            v50 = (unint64_t *)&v77->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          v10 += v42;
          geo::codec::MaterialSheet::~MaterialSheet((geo::codec::MaterialSheet *)&v82);
          v9 += 552;
        }
        while (v9 != v73);
      }
      v52 = (char *)operator new(0xE0uLL);
      *(_OWORD *)(v52 + 8) = 0u;
      *(_QWORD *)v52 = &off_1E42DC350;
      v53 = v94[0];
      v94[0] = 0;
      v54 = gdc::Resource::Resource((uint64_t)(v52 + 24), (uint64_t)v71);
      v55 = v100;
      *((_QWORD *)v52 + 25) = v100;
      *((_QWORD *)v52 + 21) = v10;
      *((_QWORD *)v52 + 22) = v53;
      v56 = v99;
      v99 = 0u;
      *(_OWORD *)(v52 + 184) = v56;
      *((_QWORD *)v52 + 26) = *((_QWORD *)&v55 + 1);
      *((_DWORD *)v52 + 54) = v101;
      if (*((_QWORD *)&v55 + 1))
      {
        v57 = *(_QWORD *)(v55 + 8);
        if ((*((_QWORD *)&v56 + 1) & (*((_QWORD *)&v56 + 1) - 1)) != 0)
        {
          if (v57 >= *((_QWORD *)&v56 + 1))
            v57 %= *((_QWORD *)&v56 + 1);
        }
        else
        {
          v57 &= *((_QWORD *)&v56 + 1) - 1;
        }
        *(_QWORD *)(v56 + 8 * v57) = v52 + 200;
        v100 = 0uLL;
      }
      *v72 = v54;
      v72[1] = (uint64_t)v52;
      v58 = (geo::codec::Asset *)v94[0];
      v94[0] = 0;
      if (v58)
      {
        geo::codec::Asset::~Asset(v58);
        MEMORY[0x1A1AF4E00]();
      }
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
    }
    v59 = v95;
    if (v95)
    {
      v60 = (unint64_t *)&v95->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v62 = (_QWORD *)v97;
    if ((_QWORD)v97)
    {
      do
      {
        v65 = (_QWORD *)*v62;
        v66 = (void *)v62[3];
        if (v66)
        {
          v62[4] = v66;
          operator delete(v66);
        }
        operator delete(v62);
        v62 = v65;
      }
      while (v65);
    }
    if ((_QWORD)v96)
      operator delete((void *)v96);
    v63 = (_QWORD *)v100;
    while (v63)
    {
      v67 = v63;
      v63 = (_QWORD *)*v63;
      v68 = (std::__shared_weak_count *)v67[4];
      if (v68)
      {
        v69 = (unint64_t *)&v68->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      operator delete(v67);
    }
    v64 = (void *)v99;
    *(_QWORD *)&v99 = 0;
    if (v64)
      operator delete(v64);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_19F32AD74(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<geo::codec::Asset>::~unique_ptr[abi:nn180100]((geo::codec::Asset **)(v1 - 248));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 240);
  md::MeshRenderableContext::~MeshRenderableContext((md::MeshRenderableContext *)(v1 - 224));
  std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>::~unordered_map[abi:nn180100](v1 - 176);
  _Unwind_Resume(a1);
}

void geo::codec::AssetDecoder::decodeAsset(geo::codec::AssetDecoder *this@<X0>, geo::ibitstream *a2@<X1>, geo::codec::AssetDecoder *a3@<X8>)
{
  BOOL Bytes;
  void *v8;
  unsigned int v9;
  FILE *v10;
  FILE *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *__p;
  char *v16;
  uint64_t v17;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  __p = 0;
  v16 = 0;
  v17 = 0;
  Bytes = geo::ibitstream::readBytes((uint64_t *)this, (uint64_t)&__p, 4uLL);
  v8 = __p;
  if (!Bytes)
  {
    if (__p)
    {
      v16 = (char *)__p;
      operator delete(__p);
    }
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_15;
  }
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v12, (char *)__p, v16, v16 - (_BYTE *)__p);
  if (v8)
    operator delete(v8);
  if (*(_BYTE *)v12 != 68)
  {
    v11 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_20:
    fprintf(v11, "%s:%d Asset Parse: Magic header does not match\n");
    goto LABEL_21;
  }
  if (*((_BYTE *)v12 + 1) != 86)
  {
    v11 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_20;
  }
  if (*((_BYTE *)v12 + 2) != 97)
  {
    v11 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_20;
  }
  if (*((_BYTE *)v12 + 3) != 115)
  {
    v11 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_20;
  }
  geo::ibitstream::readUInt32((uint64_t *)this, (uint64_t)&__p);
  if (!(_BYTE)__p)
  {
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_15:
    fprintf(v10, "%s:%d Asset Parse: Read error\n");
    goto LABEL_21;
  }
  v9 = HIDWORD(__p);
  *(_DWORD *)a2 = HIDWORD(__p);
  if (v9 > 0x12)
  {
    if (v9 == 19)
      geo::codec::AssetDecoder::decodeAssetDeprecated(a3, this, (unsigned int *)a2);
    else
      geo::codec::AssetDecoder::decodeAssetV20(a3, this, (unsigned int *)a2);
    goto LABEL_22;
  }
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d Asset Parse: Non supported version\n");
LABEL_21:
  *(_QWORD *)a3 = 0;
LABEL_22:
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
}

void sub_19F32B020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double md::Logic<md::MaterialLogic,md::MaterialContext,md::LogicDependencies<gdc::TypeList<md::AssetContext,md::IdentifiedResourceContext,md::RegistryContext,md::SceneQueryContext,md::StyleLogicContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_WORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 74) = 0;
  return result;
}

void sub_19F32BABC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void FeatureStyleAttributes::FeatureStyleAttributes(FeatureStyleAttributes *this, const FeatureStyleAttributes *a2)
{
  void *v4;
  uint64_t v5;
  const void *v6;
  void *v7;

  *(_DWORD *)((char *)this + 31) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v4 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  *(_QWORD *)this = v4;
  if (v4)
    memcpy(v4, *(const void **)a2, 8 * *((unsigned __int8 *)a2 + 33));
  *(_WORD *)((char *)this + 33) = *(_WORD *)((char *)a2 + 33);
  *((_BYTE *)this + 32) = 0;
  v5 = *((unsigned __int8 *)a2 + 32);
  if (*((_BYTE *)a2 + 32))
  {
    v6 = (const void *)*((_QWORD *)a2 + 3);
    v7 = malloc_type_malloc(12 * v5, 0x10000403E1C8BA9uLL);
    *((_QWORD *)this + 3) = v7;
    if (v7)
    {
      *((_BYTE *)this + 32) = v5;
      memcpy(v7, v6, 12 * v5);
    }
  }
}

{
  void *v4;
  uint64_t v5;
  const void *v6;
  void *v7;

  *(_DWORD *)((char *)this + 31) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v4 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  *(_QWORD *)this = v4;
  if (v4)
    memcpy(v4, *(const void **)a2, 8 * *((unsigned __int8 *)a2 + 33));
  *(_WORD *)((char *)this + 33) = *(_WORD *)((char *)a2 + 33);
  *((_BYTE *)this + 32) = 0;
  v5 = *((unsigned __int8 *)a2 + 32);
  if (*((_BYTE *)a2 + 32))
  {
    v6 = (const void *)*((_QWORD *)a2 + 3);
    v7 = malloc_type_malloc(12 * v5, 0x10000403E1C8BA9uLL);
    *((_QWORD *)this + 3) = v7;
    if (v7)
    {
      *((_BYTE *)this + 32) = v5;
      memcpy(v7, v6, 12 * v5);
    }
  }
}

void sub_19F32BB84(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19F32BC80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'md::MapNavLabeler::setRouteContext(md::MapNavLabeler *this, VKRouteContext *a2)
{
  md::MapNavLabeler::setRouteContext((md::MapNavLabeler *)((char *)this - 8), a2);
}

void md::MapNavLabeler::setRouteContext(md::MapNavLabeler *this, VKRouteContext *a2)
{
  VKRouteContext *v3;
  VKRouteContext *v4;
  void *v5;
  VKRouteContext *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  BOOL v16;
  char v17;
  void *v18;
  void *v19;
  NSString *v20;
  NSString *v21;
  NSObject *v22;
  NSHashTable *p_locale;
  int puckSnappedStopID_high;
  double longitude;
  double *p_longitude;
  NSHashTable *p_currentWaypoint;
  uint64_t v28;
  id v29;
  NSString *v30;
  VKRouteContext *v31;
  NSString *v32;
  void *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  VKRouteContext *v38;
  VKRouteContext *v39;
  void *v40;
  void *v41;
  _BOOL4 v42;
  int v43;
  int v44;
  uint64_t v45;
  id v46;
  VKRouteContext *v47;
  VKRouteContext *v48;
  VKRouteContext *v49;
  void *v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  char v58;
  uint64_t v59;
  char v60;
  id v61;
  unsigned __int8 v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  void *v71;
  _BOOL4 v72;
  uint64_t v73;
  char v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  id v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  long double v89;
  long double v90;
  float64x2_t v91;
  double v92;
  float v93;
  unsigned __int8 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  std::__shared_weak_count *v107;
  unint64_t *p_shared_owners;
  unint64_t v109;
  uint64_t v110;
  uint64_t j;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t k;
  void *v119;
  uint64_t v120;
  void *v121;
  BOOL v122;
  VKRouteInfo *routeInfo;
  VKRouteInfo *isa;
  VKRouteInfo *v125;
  _BOOL4 v126;
  NSArray *anchorpoints;
  VKRouteInfo *v128;
  Class v129;
  NSArray *v130;
  uint64_t v131;
  geo::read_write_lock *v132;
  const char *v133;
  malloc_zone_t *zone;
  uint64_t v135;
  geo::read_write_lock *v136;
  const char *v137;
  malloc_zone_t *v138;
  uint64_t v139;
  geo::read_write_lock *v140;
  const char *v141;
  malloc_zone_t *v142;
  id v143;
  void *v144;
  void *v145;
  float64x2_t v146;
  VKRouteContext *v147;
  VKRouteContext *v148;
  float64_t v149;
  VKRouteContext *v150;
  VKRouteContext v151;
  _QWORD *v152[2];
  multimap<unsigned int, std::vector<RouteSection>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::vector<RouteSection>>>> *p_shareSections;
  unint64_t value;
  VKRouteContext v155;

  v155._alternateRouteLineObservers = (NSHashTable *)*MEMORY[0x1E0C80C00];
  v3 = a2;
  v148 = v3;
  if (v3)
  {
    v4 = v3;
    v3 = v148;
  }
  v5 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = v3;
  v6 = v3;

  v7 = *((_QWORD *)this + 86);
  v150 = v6;
  if (*(VKRouteContext **)(v7 + 24) != v150)
  {
    memset(&v151, 0, 64);
    -[VKRouteContext alternateRoutes](v150, "alternateRoutes");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v151, &v155, 16);
    if (v9)
    {
      v10 = **(_QWORD **)&v151._useType;
      while (2)
      {
        for (i = 0; i != v9; ++i)
        {
          if (**(_QWORD **)&v151._useType != v10)
            objc_enumerationMutation(v8);
          objc_msgSend(*((id *)&v151._routeInfo->super.isa + i), "route");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = *(id *)(v7 + 24);
          objc_msgSend(v13, "routeInfo");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "route");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = v12 == v15;

          if (v16)
          {
            v17 = 1;
            goto LABEL_14;
          }
        }
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v151, &v155, 16);
        if (v9)
          continue;
        break;
      }
    }
    v17 = 0;
LABEL_14:

    -[VKRouteContext routeInfo](v150, "routeInfo");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(v7 + 24), "routeInfo");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (v18 == v19)
      v17 = 0;

    if ((v17 & 1) == 0)
      md::LabelNavEtaLabeler::clearEtaFeatures((md::LabelNavEtaLabeler *)v7);
    v20 = (NSString *)*(id *)(v7 + 24);
    v21 = v150;
    gatherRoutesFromContext((VKRouteContext *)&v151._shareSections.__tree_.__pair3_, v20);
    gatherRoutesFromContext((VKRouteContext *)&v151._alternateRoutes, v21);
    *(_QWORD *)&v151._hasContextChangedForAlternateRouteLines = 0;
    v151._alternateRouteLineObservers = 0;
    *(_QWORD *)&v151._hasContextChangedForRouteLine = 0;
    v151._routeLineObservers = (NSHashTable *)&v151._hasContextChangedForAlternateRouteLines;
    *(_QWORD *)&v151._hasContextChangedForLabels = &v151._labelObservers;
    v151._labelObservers = 0;
    *(_QWORD *)&v151._puckLocation.longitude = v151._alternateRoutes;
    v151._currentWaypoint = (GEOComposedWaypoint *)&v151._shareSections;
    p_shareSections = (multimap<unsigned int, std::vector<RouteSection>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::vector<RouteSection>>>> *)v152;
    value = v151._shareSections.__tree_.__pair3_.__value_;
    v151._locale = (NSString *)&v151._routeLineObservers;
    v151._accessPointEntryName = (NSString *)&v151._hasContextChangedForAlternateRouteLines;
    std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<GEOComposedRoute * {__strong},std::__tree_node<GEOComposedRoute * {__strong},void *> *,long> &,std::__tree_const_iterator<GEOComposedRoute * {__strong},std::__tree_node<GEOComposedRoute * {__strong},void *> *,long> &,std::__tree_const_iterator<GEOComposedRoute * {__strong},std::__tree_node<GEOComposedRoute * {__strong},void *> *,long> &,std::__tree_const_iterator<GEOComposedRoute * {__strong},std::__tree_node<GEOComposedRoute * {__strong},void *> *,long> &,std::insert_iterator<std::set<GEOComposedRoute * {__strong}>> &>((uint64_t ****)&v155._accessPointEntryName, (uint64_t ****)&v151._puckLocation.longitude, (uint64_t ****)&v151._currentWaypoint, (uint64_t)&value, &p_shareSections, (uint64_t ****)&v151._locale);
    *(_QWORD *)&v151._puckLocation.longitude = v151._shareSections.__tree_.__pair3_.__value_;
    v151._currentWaypoint = (GEOComposedWaypoint *)v152;
    p_shareSections = &v151._shareSections;
    value = (unint64_t)v151._alternateRoutes;
    v151._locale = (NSString *)&v151._hasContextChangedForLabels;
    v151._accessPointEntryName = *(NSString **)&v151._hasContextChangedForLabels;
    std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<GEOComposedRoute * {__strong},std::__tree_node<GEOComposedRoute * {__strong},void *> *,long> &,std::__tree_const_iterator<GEOComposedRoute * {__strong},std::__tree_node<GEOComposedRoute * {__strong},void *> *,long> &,std::__tree_const_iterator<GEOComposedRoute * {__strong},std::__tree_node<GEOComposedRoute * {__strong},void *> *,long> &,std::__tree_const_iterator<GEOComposedRoute * {__strong},std::__tree_node<GEOComposedRoute * {__strong},void *> *,long> &,std::insert_iterator<std::set<GEOComposedRoute * {__strong}>> &>((uint64_t ****)&v155._accessPointEntryName, (uint64_t ****)&v151._puckLocation.longitude, (uint64_t ****)&v151._currentWaypoint, (uint64_t)&value, &p_shareSections, (uint64_t ****)&v151._locale);
    if (GEOGetVectorKitLabelNavEtaLabelerLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitLabelNavEtaLabelerLog(void)::onceToken, &__block_literal_global_4513);
    v22 = (id)GEOGetVectorKitLabelNavEtaLabelerLog(void)::log;
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      goto LABEL_31;
    p_locale = (NSHashTable *)&v151._locale;
    buildStringForRouteSet(&v151._locale, &v151._alternateRoutes);
    if (SHIBYTE(v151._accessPointExitName) < 0)
      p_locale = (NSHashTable *)v151._locale;
    buildStringForRouteSet(&v151._puckLocation.longitude, &v151._routeLineObservers);
    puckSnappedStopID_high = SHIBYTE(v151._puckSnappedStopID);
    longitude = v151._puckLocation.longitude;
    buildStringForRouteSet(&v151._currentWaypoint, &v151._hasContextChangedForLabels);
    p_longitude = &v151._puckLocation.longitude;
    if (puckSnappedStopID_high < 0)
      p_longitude = *(double **)&longitude;
    if (v151._puckLocation.latitude >= 0.0)
      p_currentWaypoint = (NSHashTable *)&v151._currentWaypoint;
    else
      p_currentWaypoint = (NSHashTable *)v151._currentWaypoint;
    LODWORD(v155._accessPointEntryName) = 134219010;
    *(NSString **)((char *)&v155._accessPointEntryName + 4) = v20;
    WORD2(v155._accessPointExitName) = 2048;
    *(NSString **)((char *)&v155._accessPointExitName + 6) = v21;
    *((_WORD *)&v155._hasContextChangedForLabels + 3) = 2080;
    v155._labelObservers = p_locale;
    *(_WORD *)&v155._hasContextChangedForRouteLine = 2080;
    *(_QWORD *)(&v155._hasContextChangedForRouteLine + 2) = p_longitude;
    WORD1(v155._routeLineObservers) = 2080;
    *(NSHashTable **)((char *)&v155._routeLineObservers + 4) = p_currentWaypoint;
    _os_log_impl(&dword_19F029000, v22, OS_LOG_TYPE_INFO, "Received new routeContext - old:%p new:%p routes:%s enteringRoutes:%s exitingRoutes:%s", (uint8_t *)&v155._accessPointEntryName, 0x34u);
    if (SHIBYTE(v151._puckLocation.latitude) < 0)
    {
      operator delete(v151._currentWaypoint);
      if ((SHIBYTE(v151._puckSnappedStopID) & 0x80000000) == 0)
      {
LABEL_30:
        if ((SHIBYTE(v151._accessPointExitName) & 0x80000000) == 0)
        {
LABEL_31:

          std::__tree<VKPolylineGroupOverlay * {__strong}>::destroy(&v151._labelObservers->super.isa);
          std::__tree<VKPolylineGroupOverlay * {__strong}>::destroy(*(_QWORD **)&v151._hasContextChangedForAlternateRouteLines);
          std::__tree<VKPolylineGroupOverlay * {__strong}>::destroy((_QWORD *)v151._shareSections.__tree_.__begin_node_);
          std::__tree<VKPolylineGroupOverlay * {__strong}>::destroy(v152[0]);

          v28 = *(_QWORD *)(v7 + 24);
          v29 = *(id *)(v7 + 120);
          objc_msgSend(v29, "stopObserving:", v28);

          v30 = v21;
          v31 = (VKRouteContext *)v30;
          if (v148)
            v32 = v30;
          v33 = *(void **)(v7 + 24);
          *(_QWORD *)(v7 + 24) = v31;

          v34 = *(_QWORD *)(v7 + 24);
          v35 = *(id *)(v7 + 120);
          objc_msgSend(v35, "startObserving:", v34);

          v36 = *(_QWORD *)(v7 + 24);
          *(_BYTE *)(v7 + 252) = v36 != 0;
          if (!v36)
            md::LabelNavEtaLabeler::clearEtaFeatures((md::LabelNavEtaLabeler *)v7);
          std::__tree<std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,md::RouteLabelState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,md::RouteLabelState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},geo::linear_map<md::RouteRangeAnnotationRequest,md::RouteLabelState,std::equal_to<md::RouteRangeAnnotationRequest>,std::allocator<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>,std::vector<std::pair<md::RouteRangeAnnotationRequest,md::RouteLabelState>>>>,mdm::Allocator>>::destroy(v7 + 456, *(_QWORD **)(v7 + 464));
          *(_QWORD *)(v7 + 480) = 0;
          *(_QWORD *)(v7 + 456) = v7 + 464;
          *(_QWORD *)(v7 + 464) = 0;
          std::__tree<std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,mdm::Allocator>>::destroy(v7 + 488, *(_QWORD *)(v7 + 496));
          *(_QWORD *)(v7 + 512) = 0;
          *(_QWORD *)(v7 + 488) = v7 + 496;
          *(_QWORD *)(v7 + 496) = 0;
          std::__tree<std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,std::__map_value_compare<GEOComposedRoute * {__strong},std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,std::less<GEOComposedRoute * {__strong}>,true>,geo::StdAllocator<std::__value_type<GEOComposedRoute * {__strong},std::vector<md::RouteRangeAnnotationRequest,geo::StdAllocator<md::RouteRangeAnnotationRequest,mdm::Allocator>>>,mdm::Allocator>>::destroy(v7 + 520, *(_QWORD *)(v7 + 528));
          *(_QWORD *)(v7 + 544) = 0;
          *(_QWORD *)(v7 + 520) = v7 + 528;
          *(_QWORD *)(v7 + 528) = 0;
          md::LabelNavEtaLabeler::recreateRouteCollider((md::LabelNavEtaLabeler *)v7, v31);
          *(_BYTE *)(v7 + 449) = 1;
          md::LabelNavEtaLabeler::prepareAnnotatableSectionsRoutes((md::LabelNavEtaLabeler *)v7);
          goto LABEL_36;
        }
LABEL_66:
        operator delete(v151._locale);
        goto LABEL_31;
      }
    }
    else if ((SHIBYTE(v151._puckSnappedStopID) & 0x80000000) == 0)
    {
      goto LABEL_30;
    }
    operator delete(*(void **)&v151._puckLocation.longitude);
    if ((SHIBYTE(v151._accessPointExitName) & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_66;
  }
LABEL_36:

  v37 = *((_QWORD *)this + 8);
  v38 = v150;
  v39 = *(VKRouteContext **)(v37 + 24);
  v147 = v38;
  if (v39 == v38)
    goto LABEL_126;
  if (v148)
  {
    v155._accessPointEntryName = 0;
    if (!geo::_retain_ptr<VKRouteContext * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(v39, (void **)&v155._accessPointEntryName))
    {
      -[VKRouteContext routeInfo](v147, "routeInfo");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(v37 + 24), "routeInfo");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = v40 == v41;

      if (v42)
      {
        if (*(_QWORD *)(v37 + 24))
        {
          -[VKRouteContext alternateRoutes](v147, "alternateRoutes");
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          v70 = objc_msgSend(v69, "count");
          objc_msgSend(*(id *)(v37 + 24), "alternateRoutes");
          v71 = (void *)objc_claimAutoreleasedReturnValue();
          v72 = v70 != objc_msgSend(v71, "count");

          v73 = *(_QWORD *)(v37 + 24);
          _ZF = v73 == 0;
          if (v73)
            v75 = v72;
          else
            v75 = 1;
          v44 = !_ZF || v72;
          if ((v75 & 1) != 0)
          {
            v43 = 0;
            goto LABEL_41;
          }
          -[VKRouteContext alternateRoutes](v147, "alternateRoutes");
          v119 = (void *)objc_claimAutoreleasedReturnValue();
          v120 = objc_msgSend(v119, "count");
          objc_msgSend(*(id *)(v37 + 24), "alternateRoutes");
          v121 = (void *)objc_claimAutoreleasedReturnValue();
          v122 = v120 == objc_msgSend(v121, "count");

          if (!v122)
          {
            getSortedArrayOfRoutes(&v155, v147);
            getSortedArrayOfRoutes(&v151, *(void **)(v37 + 24));
            isa = (VKRouteInfo *)v151.super.isa;
            routeInfo = v151._routeInfo;
            v125 = (VKRouteInfo *)v155.super.isa;
            v126 = (char *)v151._routeInfo - (char *)v151.super.isa == (char *)v155._routeInfo - (char *)v155.super.isa
                && memcmp(v151.super.isa, v155.super.isa, (char *)v151._routeInfo - (char *)v151.super.isa) == 0;
            if (isa)
            {
              if (routeInfo != isa)
              {
                do
                {
                  anchorpoints = routeInfo[-1]._anchorpoints;
                  routeInfo = (VKRouteInfo *)((char *)routeInfo - 8);

                }
                while (routeInfo != isa);
                routeInfo = (VKRouteInfo *)v151.super.isa;
              }
              v151._routeInfo = isa;
              (*(void (**)(int64_t, VKRouteInfo *, _QWORD))(*(_QWORD *)v151._inspectedSegmentIndex
                                                                            + 40))(v151._inspectedSegmentIndex, routeInfo, *(_QWORD *)&v151._useType - (_QWORD)routeInfo);
              v125 = (VKRouteInfo *)v155.super.isa;
            }
            if (v125)
            {
              v128 = v155._routeInfo;
              v129 = (Class)v125;
              if (v155._routeInfo != v125)
              {
                do
                {
                  v130 = v128[-1]._anchorpoints;
                  v128 = (VKRouteInfo *)((char *)v128 - 8);

                }
                while (v128 != v125);
                v129 = v155.super.isa;
              }
              v155._routeInfo = v125;
              (*(void (**)(int64_t, Class, _QWORD))(*(_QWORD *)v155._inspectedSegmentIndex + 40))(v155._inspectedSegmentIndex, v129, *(_QWORD *)&v155._useType - (_QWORD)v129);
            }
            v43 = 0;
            v44 = !v126;
            goto LABEL_41;
          }
        }
        v43 = 0;
        v44 = 0;
        goto LABEL_41;
      }
    }
  }
  v43 = 1;
  v44 = 1;
LABEL_41:
  v45 = *(_QWORD *)(v37 + 24);
  v46 = *(id *)(v37 + 184);
  objc_msgSend(v46, "stopObserving:", v45);

  v47 = v147;
  v48 = v47;
  if (v148)
    v49 = v47;
  v50 = *(void **)(v37 + 24);
  *(_QWORD *)(v37 + 24) = v48;

  v51 = *(_QWORD *)(v37 + 24);
  v52 = *(id *)(v37 + 184);
  objc_msgSend(v52, "startObserving:", v51);

  if (v44)
  {
    if (v43)
      md::RouteLineSupport::resolveCurrentRouteLeg((md::RouteLineSupport *)v37);
    *(_BYTE *)(v37 + 250) = 1;
  }
  if (v43)
  {
    v53 = *(_QWORD *)(v37 + 200);
    *(_QWORD *)(v37 + 200) = 0;
    if (!v53)
      goto LABEL_56;
    v54 = *(uint64_t **)(v53 + 96);
    *(_QWORD *)(v53 + 96) = 0;
    if (v54)
      std::default_delete<md::LabelRouteCollisionInfo>::operator()[abi:nn180100](v54);
    v55 = *(_QWORD *)(v53 + 64);
    if (v55)
    {
      *(_QWORD *)(v53 + 72) = v55;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v53 + 88) + 40))(*(_QWORD *)(v53 + 88), v55, *(_QWORD *)(v53 + 80) - v55);
    }
    v56 = *(_QWORD *)(v53 + 32);
    if (v56)
    {
      *(_QWORD *)(v53 + 40) = v56;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v53 + 56) + 40))(*(_QWORD *)(v53 + 56), v56, *(_QWORD *)(v53 + 48) - v56);
    }
    *(_QWORD *)v53 = &off_1E42B4C30;

    MEMORY[0x1A1AF4E00](v53, 0x10A0C404022D907);
    if (!*(_QWORD *)(v37 + 200))
    {
LABEL_56:
      objc_msgSend(*(id *)(v37 + 24), "routeInfo");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "route");
      v145 = (void *)objc_claimAutoreleasedReturnValue();

      if (v145)
      {
        if (((*(_BYTE *)(v37 + 208) + 1) & 0xFE) != 0)
          v58 = *(_BYTE *)(v37 + 208) + 1;
        else
          v58 = 1;
        *(_BYTE *)(v37 + 208) = v58;
        v59 = operator new();
        v60 = *(_BYTE *)(v37 + 208);
        v61 = v145;
        *(_QWORD *)v59 = &off_1E42B4C30;
        *(_QWORD *)(v59 + 8) = v61;
        v143 = v61;
        *(_BYTE *)(v59 + 24) = v60;
        *(_QWORD *)(v59 + 32) = 0;
        *(_QWORD *)(v59 + 40) = 0;
        *(_QWORD *)(v59 + 48) = 0;
        {
          v131 = operator new();
          *(_QWORD *)(v131 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v131 + 24) = "VectorKitLabels";
          *(_OWORD *)(v131 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v131 = &off_1E42B5668;
          *(_QWORD *)(v131 + 8) = "VectorKitLabels";
          *(_OWORD *)(v131 + 72) = 0u;
          *(_OWORD *)(v131 + 88) = 0u;
          *(_OWORD *)(v131 + 104) = 0u;
          *(_OWORD *)(v131 + 120) = 0u;
          *(_OWORD *)(v131 + 136) = 0u;
          *(_OWORD *)(v131 + 152) = 0u;
          *(_OWORD *)(v131 + 168) = 0u;
          *(_OWORD *)(v131 + 184) = 0u;
          *(_OWORD *)(v131 + 200) = 0u;
          *(_OWORD *)(v131 + 216) = 0u;
          *(_OWORD *)(v131 + 232) = 0u;
          *(_QWORD *)(v131 + 248) = 0;
          *(_OWORD *)(v131 + 56) = 0u;
          v132 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v131 + 56), 0);
          if ((_DWORD)v132)
            geo::read_write_lock::logFailure(v132, (uint64_t)"initialization", v133);
          zone = malloc_create_zone(0, 0);
          *(_QWORD *)(v131 + 48) = zone;
          malloc_set_zone_name(zone, "VectorKitLabels");
          *(_QWORD *)(v131 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v131;
        }
        v63 = mdm::Allocator::instance(void)::alloc;
        *(_QWORD *)(v59 + 64) = 0;
        *(_QWORD *)(v59 + 56) = v63;
        *(_QWORD *)(v59 + 72) = 0;
        *(_QWORD *)(v59 + 80) = 0;
        {
          v135 = operator new();
          *(_QWORD *)(v135 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v135 + 24) = "VectorKitLabels";
          *(_OWORD *)(v135 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v135 = &off_1E42B5668;
          *(_QWORD *)(v135 + 8) = "VectorKitLabels";
          *(_OWORD *)(v135 + 72) = 0u;
          *(_OWORD *)(v135 + 88) = 0u;
          *(_OWORD *)(v135 + 104) = 0u;
          *(_OWORD *)(v135 + 120) = 0u;
          *(_OWORD *)(v135 + 136) = 0u;
          *(_OWORD *)(v135 + 152) = 0u;
          *(_OWORD *)(v135 + 168) = 0u;
          *(_OWORD *)(v135 + 184) = 0u;
          *(_OWORD *)(v135 + 200) = 0u;
          *(_OWORD *)(v135 + 216) = 0u;
          *(_OWORD *)(v135 + 232) = 0u;
          *(_QWORD *)(v135 + 248) = 0;
          *(_OWORD *)(v135 + 56) = 0u;
          v136 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v135 + 56), 0);
          if ((_DWORD)v136)
            geo::read_write_lock::logFailure(v136, (uint64_t)"initialization", v137);
          v138 = malloc_create_zone(0, 0);
          *(_QWORD *)(v135 + 48) = v138;
          malloc_set_zone_name(v138, "VectorKitLabels");
          *(_QWORD *)(v135 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v135;
        }
        *(_QWORD *)(v59 + 88) = mdm::Allocator::instance(void)::alloc;
        *(_QWORD *)(v59 + 96) = 0;
        v64 = objc_msgSend(*(id *)(v59 + 8), "pointCount", v143);
        v65 = v64;
        v66 = v64;
        v67 = *(_QWORD *)(v59 + 32);
        v68 = (*(_QWORD *)(v59 + 40) - v67) >> 4;
        if (v64 <= v68)
        {
          if (v64 < v68)
            *(_QWORD *)(v59 + 40) = v67 + 16 * v64;
        }
        else
        {
          std::vector<geo::Mercator2<double>,geo::StdAllocator<geo::Mercator2<double>,mdm::Allocator>>::__append(v59 + 32, v64 - v68);
        }
        v76 = *(_QWORD *)(v59 + 64);
        v77 = (*(_QWORD *)(v59 + 72) - v76) >> 2;
        if (v66 <= v77)
        {
          if (v66 < v77)
            *(_QWORD *)(v59 + 72) = v76 + 4 * v66;
        }
        else
        {
          std::vector<float,geo::StdAllocator<float,mdm::Allocator>>::__append(v59 + 64, v66 - v77);
        }
        if (v65)
        {
          v78 = 0;
          __asm { FMOV            V0.2D, #0.5 }
          v146 = _Q0;
          do
          {
            v83 = *(id *)(v59 + 8);
            objc_msgSend(v83, "pointAt:", v78);
            v149 = v84;
            v86 = v85;
            v88 = v87;

            v89 = tan(v86 * 0.00872664626 + 0.785398163);
            v90 = log(v89);
            v91.f64[0] = v149;
            v91.f64[1] = v90;
            *(float64x2_t *)(*(_QWORD *)(v59 + 32) + 16 * v78) = vmlaq_f64(v146, (float64x2_t)xmmword_19FFB32D0, v91);
            if (v88 == 1.79769313e308)
              v92 = 0.0;
            else
              v92 = v88;
            v93 = v92;
            *(float *)(*(_QWORD *)(v59 + 64) + 4 * v78++) = v93;
          }
          while (v66 != v78);
        }
        {
          v139 = operator new();
          *(_QWORD *)(v139 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v139 + 24) = "VectorKitLabels";
          *(_OWORD *)(v139 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v139 = &off_1E42B5668;
          *(_QWORD *)(v139 + 8) = "VectorKitLabels";
          *(_OWORD *)(v139 + 72) = 0u;
          *(_OWORD *)(v139 + 88) = 0u;
          *(_OWORD *)(v139 + 104) = 0u;
          *(_OWORD *)(v139 + 120) = 0u;
          *(_OWORD *)(v139 + 136) = 0u;
          *(_OWORD *)(v139 + 152) = 0u;
          *(_OWORD *)(v139 + 168) = 0u;
          *(_OWORD *)(v139 + 184) = 0u;
          *(_OWORD *)(v139 + 200) = 0u;
          *(_OWORD *)(v139 + 216) = 0u;
          *(_OWORD *)(v139 + 232) = 0u;
          *(_QWORD *)(v139 + 248) = 0;
          *(_OWORD *)(v139 + 56) = 0u;
          v140 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v139 + 56), 0);
          if ((_DWORD)v140)
            geo::read_write_lock::logFailure(v140, (uint64_t)"initialization", v141);
          v142 = malloc_create_zone(0, 0);
          *(_QWORD *)(v139 + 48) = v142;
          malloc_set_zone_name(v142, "VectorKitLabels");
          *(_QWORD *)(v139 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v139;
        }
        v95 = mdm::Allocator::instance(void)::alloc;
        v155._inspectedSegmentIndex = mdm::Allocator::instance(void)::alloc;
        v97 = *(_QWORD *)(v59 + 32);
        v96 = *(_QWORD *)(v59 + 40);
        v98 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                   + 16))(mdm::Allocator::instance(void)::alloc, 8, 4);
        v99 = v98;
        if (v98)
          *(_QWORD *)v98 = ((v96 - v97) << 28) & 0xFFFFFFFF00000000;
        v155._routeInfo = (VKRouteInfo *)(v98 + 8);
        *(_QWORD *)&v155._useType = v98 + 8;
        v155.super.isa = (Class)v98;
        v100 = (_QWORD *)operator new();
        md::LabelRouteCollisionInfo::LabelRouteCollisionInfo(v100, v59 + 32, v59 + 64, (uint64_t)&v155);
        v101 = *(uint64_t **)(v59 + 96);
        *(_QWORD *)(v59 + 96) = v100;
        if (v101)
          std::default_delete<md::LabelRouteCollisionInfo>::operator()[abi:nn180100](v101);
        if (v99)
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v95 + 40))(v95, v99, 8);

        v102 = *(_QWORD *)(v37 + 200);
        *(_QWORD *)(v37 + 200) = v59;
        if (v102)
        {
          v103 = *(uint64_t **)(v102 + 96);
          *(_QWORD *)(v102 + 96) = 0;
          if (v103)
            std::default_delete<md::LabelRouteCollisionInfo>::operator()[abi:nn180100](v103);
          v104 = *(_QWORD *)(v102 + 64);
          if (v104)
          {
            *(_QWORD *)(v102 + 72) = v104;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v102 + 88) + 40))(*(_QWORD *)(v102 + 88), v104, *(_QWORD *)(v102 + 80) - v104);
          }
          v105 = *(_QWORD *)(v102 + 32);
          if (v105)
          {
            *(_QWORD *)(v102 + 40) = v105;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v102 + 56) + 40))(*(_QWORD *)(v102 + 56), v105, *(_QWORD *)(v102 + 48) - v105);
          }
          *(_QWORD *)v102 = &off_1E42B4C30;

          MEMORY[0x1A1AF4E00](v102, 0x10A0C404022D907);
        }
      }

    }
  }
  if (!*(_QWORD *)(v37 + 24))
  {
    v106 = *(void **)(v37 + 240);
    *(_QWORD *)(v37 + 240) = 0;

    std::__tree<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,mdm::Allocator>>::destroy(v37 + 40, *(_QWORD *)(v37 + 48));
    *(_QWORD *)(v37 + 40) = v37 + 48;
    *(_QWORD *)(v37 + 48) = 0;
    v107 = *(std::__shared_weak_count **)(v37 + 80);
    *(_QWORD *)(v37 + 64) = 0;
    *(_QWORD *)(v37 + 72) = 0;
    *(_QWORD *)(v37 + 80) = 0;
    if (v107)
    {
      p_shared_owners = (unint64_t *)&v107->__shared_owners_;
      do
        v109 = __ldaxr(p_shared_owners);
      while (__stlxr(v109 - 1, p_shared_owners));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    v110 = *(_QWORD *)(v37 + 88);
    for (j = *(_QWORD *)(v37 + 96); j != v110; j -= 16)
    {
      v112 = *(std::__shared_weak_count **)(j - 8);
      if (v112)
      {
        v113 = (unint64_t *)&v112->__shared_owners_;
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (!v114)
        {
          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
          std::__shared_weak_count::__release_weak(v112);
        }
      }
    }
    *(_QWORD *)(v37 + 96) = v110;
    if (*(_QWORD *)(v37 + 160))
    {
      v115 = *(_QWORD **)(v37 + 144);
      if (v115)
      {
        do
        {
          v116 = (_QWORD *)*v115;
          (*(void (**)(_QWORD))(**(_QWORD **)(v37 + 152) + 40))(*(_QWORD *)(v37 + 152));
          v115 = v116;
        }
        while (v116);
      }
      *(_QWORD *)(v37 + 144) = 0;
      v117 = *(_QWORD *)(v37 + 128);
      if (v117)
      {
        for (k = 0; k != v117; ++k)
          *(_QWORD *)(*(_QWORD *)(v37 + 120) + 8 * k) = 0;
      }
      *(_QWORD *)(v37 + 160) = 0;
    }
    md::RouteLineSupport::clearRouteLabelFeatures((md::RouteLineSupport *)v37);
    ++*(_DWORD *)(v37 + 232);
  }
LABEL_126:

}

void sub_19F32CC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  std::vector<VKLabelNavRoadLabel * {__strong},geo::StdAllocator<VKLabelNavRoadLabel * {__strong},mdm::Allocator>>::~vector[abi:nn180100](&a56);

  _Unwind_Resume(a1);
}

void md::LabelTransitSupport::setRouteContext(md::LabelTransitSupport *this, VKRouteContext *a2)
{
  VKRouteContext *v4;
  VKRouteContext *v5;
  VKRouteContext *v6;
  VKRouteContext *v7;
  VKRouteContext *v8;
  VKRouteContext *v9;
  void *v10;
  VKRouteContextObserverThunk *v11;
  void *v12;
  void *v13;
  GEOComposedRoute *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  md::LabelTransitRoute *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  md::LabelManager *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  VKRouteContext *v33;
  VKRouteContext *v34;
  VKRouteContext *v35;
  void *v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  id v44;
  void *j;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  VKRouteWaypointInfo *v51;
  void *v52;
  char v53;
  _OWORD *v54;
  _OWORD *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  VKRouteWaypointInfo *v63;
  _OWORD *v64;
  _OWORD *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  BOOL v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  __int128 v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  char *v122;
  char *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  void *v128;
  void *v129;
  void *__p;
  char *v131;
  char *v132;
  void *v133;
  char *v134;
  uint64_t v135;
  __int128 v136;

  v4 = a2;
  v5 = v4;
  if (*((_BYTE *)this + 113))
  {
    v6 = (VKRouteContext *)*((_QWORD *)this + 6);
    if (v6 == v4)
      goto LABEL_161;
    v7 = v4;
    v8 = v7;
    if (v5)
      v9 = v7;
    v10 = (void *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v8;

    if (v5 && v6)
    {
      *((_BYTE *)this + 114) = 1;
      *(_BYTE *)(*((_QWORD *)this + 2) + 3328) = 1;
    }
    v133 = 0;
    v134 = 0;
    v135 = 0;
    __p = 0;
    v131 = 0;
    v132 = 0;
    md::LabelTransitSupport::setExternalTransitNodeFeatures((uint64_t)this, (uint64_t **)&v133, (uint64_t)&__p);
    if (v5)
    {
      v11 = -[VKRouteContextObserverThunk initWithRouteContext:transitSupport:]([VKRouteContextObserverThunk alloc], "initWithRouteContext:transitSupport:", v8, this);
      v12 = (void *)*((_QWORD *)this + 12);
      *((_QWORD *)this + 12) = v11;

      *((_BYTE *)this + 112) = 1;
      -[VKRouteContext routeInfo](v8, "routeInfo");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "route");
      v14 = (GEOComposedRoute *)(id)objc_claimAutoreleasedReturnValue();
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 42);
      *((_QWORD *)this + 41) = 0;
      *((_QWORD *)this + 42) = 0;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = *((_DWORD *)this + 90);
      if ((v18 + 1) > 1)
        v19 = v18 + 1;
      else
        v19 = 1;
      *((_DWORD *)this + 90) = v19;
      if (v14)
      {
        v20 = operator new(0x170uLL);
        v20[1] = 0;
        v20[2] = 0;
        *v20 = &off_1E42DB898;
        v21 = md::LabelTransitRoute::LabelTransitRoute((md::LabelTransitRoute *)(v20 + 3), v14, v19);
        v22 = (std::__shared_weak_count *)*((_QWORD *)this + 42);
        *((_QWORD *)this + 41) = v21;
        *((_QWORD *)this + 42) = v20;
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
      }
      v25 = (char *)this + 328;

      objc_storeStrong((id *)(*((_QWORD *)this + 41) + 8), a2);
      v133 = 0;
      v134 = 0;
      v135 = 0;
      __p = 0;
      v131 = 0;
      v132 = 0;
      md::LabelTransitRoute::generateTransitNodeFeatures(*((uint64_t ***)this + 41), (md::LabelExternalPointFeature ***)&v133);
      v26 = (md::LabelManager *)*((_QWORD *)this + 2);
      if (*(_BYTE *)(*((_QWORD *)v26 + 54) + 26) == 7)
        goto LABEL_124;
      v27 = *(_QWORD *)v25;
      v28 = *(_QWORD *)(*(_QWORD *)v25 + 312);
      for (i = *(_QWORD *)(v27 + 320); i != v28; i -= 16)
      {
        v30 = *(std::__shared_weak_count **)(i - 8);
        if (v30)
        {
          v31 = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
      }
      *(_QWORD *)(v27 + 320) = v28;
      objc_msgSend(*(id *)(v27 + 8), "routeInfo");
      v43 = objc_claimAutoreleasedReturnValue();
      v44 = *(id *)(v27 + 32);
      j = v44;
      v129 = (void *)v43;
      if (v43)
      {
        v128 = v44;
        objc_msgSend(v44, "legs");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        v47 = objc_msgSend(v46, "count");

        if (v47)
        {
          objc_msgSend(j, "legs");
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v48, "objectAtIndexedSubscript:", 0);
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v49, "origin");
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v129, "waypointInfoForWaypoint:", v50);
          v51 = (VKRouteWaypointInfo *)objc_claimAutoreleasedReturnValue();
          v127 = v27 + 312;

          if (v51)
          {
            -[VKRouteWaypointInfo waypoint](v51, "waypoint");
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            v53 = objc_msgSend(v52, "isCurrentLocation");

            if ((v53 & 1) == 0)
            {
              -[VKRouteWaypointInfo setIsOnSelectedRoute:](v51, "setIsOnSelectedRoute:", 1);
              md::LabelTransitRoute::buildFeatureForWaypoint((md::LabelTransitRoute *)&v136, v26, v51, 1);
              v54 = *(_OWORD **)(v27 + 320);
              if ((unint64_t)v54 >= *(_QWORD *)(v27 + 328))
              {
                v55 = std::vector<std::shared_ptr<md::RouteAnnotationLabelFeature>,geo::StdAllocator<std::shared_ptr<md::RouteAnnotationLabelFeature>,mdm::Allocator>>::__emplace_back_slow_path<std::shared_ptr<md::RouteAnnotationLabelFeature>>(v127, (uint64_t)&v136);
              }
              else
              {
                if (v54)
                {
                  *v54 = v136;
                  v136 = 0uLL;
                }
                v55 = v54 + 1;
              }
              *(_QWORD *)(v27 + 320) = v55;
              v56 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
              if (*((_QWORD *)&v136 + 1))
              {
                v57 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
                do
                  v58 = __ldaxr(v57);
                while (__stlxr(v58 - 1, v57));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                  std::__shared_weak_count::__release_weak(v56);
                }
              }
            }
          }

          objc_msgSend(v128, "legs");
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v128, "legs");
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v59, "objectAtIndexedSubscript:", objc_msgSend(v60, "count") - 1);
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v61, "destination");
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v129, "waypointInfoForWaypoint:", v62);
          v63 = (VKRouteWaypointInfo *)objc_claimAutoreleasedReturnValue();

          j = v128;
          if (v63)
          {
            -[VKRouteWaypointInfo setIsOnSelectedRoute:](v63, "setIsOnSelectedRoute:", 1);
            md::LabelTransitRoute::buildFeatureForWaypoint((md::LabelTransitRoute *)&v136, v26, v63, 0);
            v64 = *(_OWORD **)(v27 + 320);
            if ((unint64_t)v64 >= *(_QWORD *)(v27 + 328))
            {
              v65 = std::vector<std::shared_ptr<md::RouteAnnotationLabelFeature>,geo::StdAllocator<std::shared_ptr<md::RouteAnnotationLabelFeature>,mdm::Allocator>>::__emplace_back_slow_path<std::shared_ptr<md::RouteAnnotationLabelFeature>>(v127, (uint64_t)&v136);
            }
            else
            {
              if (v64)
              {
                *v64 = v136;
                v136 = 0uLL;
              }
              v65 = v64 + 1;
            }
            *(_QWORD *)(v27 + 320) = v65;
            v66 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
            if (*((_QWORD *)&v136 + 1))
            {
              v67 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
          }

          v70 = *(char **)(v27 + 312);
          v69 = *(char **)(v27 + 320);
          if (v69 - v70 >= 1)
          {
            v71 = (v69 - v70) >> 4;
            v73 = (char *)__p;
            v72 = v131;
            v74 = v131 - (_BYTE *)__p;
            v75 = (char *)__p + ((v131 - (_BYTE *)__p) & 0xFFFFFFFFFFFFFFF0);
            if (v71 <= (v132 - v131) >> 4)
            {
              v80 = v131 - v75;
              v81 = (v131 - v75) >> 4;
              if (v81 >= v71)
              {
                v82 = &v70[16 * v71];
                v84 = v131;
              }
              else
              {
                v82 = &v70[16 * v81];
                j = v128;
                if (v82 == v69)
                {
                  v84 = v131;
                }
                else
                {
                  v83 = &v70[16 * v81];
                  v84 = v131;
                  do
                  {
                    *(_QWORD *)v84 = *(_QWORD *)v83;
                    v85 = *((_QWORD *)v83 + 1);
                    *((_QWORD *)v84 + 1) = v85;
                    if (v85)
                    {
                      v86 = (unint64_t *)(v85 + 8);
                      do
                        v87 = __ldxr(v86);
                      while (__stxr(v87 + 1, v86));
                    }
                    v83 += 16;
                    v84 += 16;
                  }
                  while (v83 != v69);
                }
                v131 = v84;
                if (v80 < 1)
                  goto LABEL_123;
              }
              v103 = &v84[-16 * v71];
              v104 = v84;
              if (v103 < v72)
              {
                v105 = &v84[-16 * v71];
                v104 = v84;
                do
                {
                  *(_OWORD *)v104 = *(_OWORD *)v105;
                  v104 += 16;
                  *(_QWORD *)v105 = 0;
                  *((_QWORD *)v105 + 1) = 0;
                  v105 += 16;
                }
                while (v105 < v72);
              }
              v131 = v104;
              if (v84 != &v75[16 * v71])
              {
                do
                {
                  v111 = *((_OWORD *)v103 - 1);
                  v103 -= 16;
                  *(_QWORD *)v103 = 0;
                  *((_QWORD *)v103 + 1) = 0;
                  v112 = (std::__shared_weak_count *)*((_QWORD *)v84 - 1);
                  *((_OWORD *)v84 - 1) = v111;
                  v84 -= 16;
                  if (v112)
                  {
                    v113 = (unint64_t *)&v112->__shared_owners_;
                    do
                      v114 = __ldaxr(v113);
                    while (__stlxr(v114 - 1, v113));
                    if (!v114)
                    {
                      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                      std::__shared_weak_count::__release_weak(v112);
                    }
                  }
                }
                while (v103 != v75);
              }
              for (j = v128; v70 != v82; v75 += 16)
              {
                v116 = *(_QWORD *)v70;
                v115 = *((_QWORD *)v70 + 1);
                if (v115)
                {
                  v117 = (unint64_t *)(v115 + 8);
                  do
                    v118 = __ldxr(v117);
                  while (__stxr(v118 + 1, v117));
                }
                v119 = (std::__shared_weak_count *)*((_QWORD *)v75 + 1);
                *(_QWORD *)v75 = v116;
                *((_QWORD *)v75 + 1) = v115;
                if (v119)
                {
                  v120 = (unint64_t *)&v119->__shared_owners_;
                  do
                    v121 = __ldaxr(v120);
                  while (__stlxr(v121 - 1, v120));
                  if (!v121)
                  {
                    ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                    std::__shared_weak_count::__release_weak(v119);
                  }
                }
                v70 += 16;
              }
            }
            else
            {
              v76 = v74 >> 4;
              v77 = (v74 >> 4) + v71;
              if (v77 >> 60)
                abort();
              if ((v132 - (_BYTE *)__p) >> 3 > v77)
                v77 = (v132 - (_BYTE *)__p) >> 3;
              if ((unint64_t)(v132 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF0)
                v78 = 0xFFFFFFFFFFFFFFFLL;
              else
                v78 = v77;
              if (v78)
              {
                if (v78 >> 60)
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v79 = (char *)operator new(16 * v78);
              }
              else
              {
                v79 = 0;
              }
              v88 = &v79[16 * v76];
              v89 = &v88[16 * v71];
              v90 = v88;
              do
              {
                *(_QWORD *)v90 = *(_QWORD *)v70;
                v91 = *((_QWORD *)v70 + 1);
                *((_QWORD *)v90 + 1) = v91;
                if (v91)
                {
                  v92 = (unint64_t *)(v91 + 8);
                  do
                    v93 = __ldxr(v92);
                  while (__stxr(v93 + 1, v92));
                }
                v90 += 16;
                v70 += 16;
              }
              while (v90 != v89);
              v94 = (unint64_t)v74 >= 0x10;
              j = v128;
              if (v94)
              {
                v95 = 16 * v76;
                v96 = v73 - 16;
                do
                {
                  v97 = &v96[v95];
                  *(_OWORD *)&v79[v95 - 16] = *(_OWORD *)&v96[v95];
                  *(_QWORD *)v97 = 0;
                  *((_QWORD *)v97 + 1) = 0;
                  v95 -= 16;
                }
                while (v95);
                v88 = v79;
              }
              v98 = v131;
              if (v131 != v75)
              {
                do
                {
                  *(_OWORD *)v89 = *(_OWORD *)v75;
                  v89 += 16;
                  *(_QWORD *)v75 = 0;
                  *((_QWORD *)v75 + 1) = 0;
                  v75 += 16;
                }
                while (v75 != v98);
                v75 = v98;
              }
              v99 = (char *)__p;
              __p = v88;
              v131 = v89;
              v132 = &v79[16 * v78];
              while (v75 != v99)
              {
                v100 = (std::__shared_weak_count *)*((_QWORD *)v75 - 1);
                if (v100)
                {
                  v101 = (unint64_t *)&v100->__shared_owners_;
                  do
                    v102 = __ldaxr(v101);
                  while (__stlxr(v102 - 1, v101));
                  if (!v102)
                  {
                    ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                    std::__shared_weak_count::__release_weak(v100);
                  }
                }
                v75 -= 16;
              }
              if (v99)
                operator delete(v99);
            }
          }
        }
      }
LABEL_123:

LABEL_124:
      md::LabelTransitSupport::setExternalTransitNodeFeatures((uint64_t)this, (uint64_t **)&v133, (uint64_t)&__p);
      v106 = (char *)__p;
      if (__p)
      {
        v107 = v131;
        if (v131 != __p)
        {
          do
          {
            v108 = (std::__shared_weak_count *)*((_QWORD *)v107 - 1);
            if (v108)
            {
              v109 = (unint64_t *)&v108->__shared_owners_;
              do
                v110 = __ldaxr(v109);
              while (__stlxr(v110 - 1, v109));
              if (!v110)
              {
                ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                std::__shared_weak_count::__release_weak(v108);
              }
            }
            v107 -= 16;
          }
          while (v107 != v106);
          v106 = (char *)__p;
        }
        operator delete(v106);
      }
      v122 = (char *)v133;
      if (v133)
      {
        v123 = v134;
        if (v134 != v133)
        {
          do
          {
            v124 = (std::__shared_weak_count *)*((_QWORD *)v123 - 1);
            if (v124)
            {
              v125 = (unint64_t *)&v124->__shared_owners_;
              do
                v126 = __ldaxr(v125);
              while (__stlxr(v126 - 1, v125));
              if (!v126)
              {
                ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                std::__shared_weak_count::__release_weak(v124);
              }
            }
            v123 -= 16;
          }
          while (v123 != v122);
          v122 = (char *)v133;
        }
        operator delete(v122);
      }
      goto LABEL_161;
    }
    v37 = (void *)*((_QWORD *)this + 12);
    if (v37)
    {
      *((_QWORD *)this + 12) = 0;

    }
    v38 = (std::__shared_weak_count *)*((_QWORD *)this + 42);
    *((_QWORD *)this + 41) = 0;
    *((_QWORD *)this + 42) = 0;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = *((_DWORD *)this + 90);
    if ((v41 + 1) > 1)
      v42 = v41 + 1;
    else
      v42 = 1;
    *((_DWORD *)this + 90) = v42;
  }
  else
  {
    v33 = v4;
    v34 = v33;
    if (v33)
      v35 = v33;
    v36 = (void *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v34;

  }
LABEL_161:

}

void sub_19F32D84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, ...)
{
  void *v5;
  void *v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va2);

  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)va);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)va1);

  _Unwind_Resume(a1);
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8Textured31ScreenTexturedQuadPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7C58;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8Textured28Pos2DUVExtendedPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7BC8;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_5Point13PipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D76B8;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_5Debug8LineMeshEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7670;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_5Debug26InstancedBasePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7628;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_5Debug17LinePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7598;
}

uint64_t std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_7>,ggl::Textured::ScreenTexturedQuadPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D2B00;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_6>,ggl::Textured::Pos2DUVExtendedPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D2AB8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_5>,ggl::Point::PipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D2A70;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_4>,ggl::Debug::InstancedBasePipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D2A28;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_2>,ggl::Debug::LineMesh * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D2998;
}

uint64_t std::__function::__func<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1,std::allocator<md::DebugLayerRenderResources::DebugLayerRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&)::$_1>,ggl::Debug::LinePipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D2950;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0,std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;

  v1 = (uint64_t *)(a1 + 8);
  v2 = operator new(0x50uLL);
  *v2 = &off_1E42D0AF0;
  std::__compressed_pair_elem<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_19F32DAC8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t md::LandmarkRenderResources::LandmarkRenderResources(uint64_t a1, void *a2, _OWORD *a3, uint64_t a4)
{
  id v7;
  unsigned __int8 v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  unsigned __int8 v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int16x8_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int16x8_t v32;
  int32x4_t v33;
  int8x16_t v34;
  int32x4_t v35;
  int8x16_t v36;
  int32x4_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int16x8_t v47;
  int32x4_t v48;
  int8x16_t v49;
  int16x8_t v50;
  int32x4_t v51;
  int8x16_t v52;
  int32x4_t v53;
  int8x16_t v54;
  int32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int16x8_t v70;
  int32x4_t v71;
  int8x16_t v72;
  int16x8_t v73;
  int32x4_t v74;
  int8x16_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int32x4_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int16x8_t v85;
  int32x4_t v86;
  int8x16_t v87;
  int16x8_t v88;
  int32x4_t v89;
  int8x16_t v90;
  int32x4_t v91;
  int8x16_t v92;
  int32x4_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  std::__shared_weak_count *v98;
  unint64_t *p_shared_owners;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  _QWORD *v108;
  __int128 v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  _QWORD *v122;
  __int128 v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  _QWORD *v136;
  __int128 v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  _QWORD *v150;
  __int128 v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  _QWORD *v164;
  __int128 v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  _QWORD *v178;
  __int128 v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  _QWORD *v192;
  __int128 v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  _QWORD *v206;
  __int128 v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  _QWORD *v220;
  __int128 v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  _QWORD *v234;
  __int128 v235;
  uint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  unint64_t *v240;
  uint64_t *v241;
  unsigned __int8 v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _OWORD *v258;
  __int128 *v259;
  uint64_t v260;
  __int128 v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  _OWORD *v276;
  __int128 *v277;
  uint64_t v278;
  __int128 v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  _QWORD *v286;
  uint64_t v287;
  uint64_t *v288;
  unsigned __int8 v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  _OWORD *v305;
  __int128 *v306;
  uint64_t v307;
  __int128 v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  _OWORD *v323;
  __int128 *v324;
  uint64_t v325;
  __int128 v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  uint64_t *v335;
  __n128 v336;
  unsigned __int8 v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t *v340;
  unsigned __int8 v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  unint64_t v354;
  uint64_t v355;
  uint64_t v356;
  _OWORD *v357;
  __int128 *v358;
  uint64_t v359;
  __int128 v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t v374;
  _OWORD *v375;
  __int128 *v376;
  uint64_t v377;
  __int128 v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  _QWORD *v383;
  uint64_t v384;
  _QWORD *v385;
  uint64_t v386;
  uint64_t *v387;
  unsigned __int8 v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  _OWORD *v404;
  __int128 *v405;
  uint64_t v406;
  __int128 v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  unint64_t v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  _OWORD *v422;
  __int128 *v423;
  uint64_t v424;
  __int128 v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  _QWORD *v430;
  uint64_t v431;
  _QWORD *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  unint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  unint64_t v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  _OWORD *v447;
  __int128 *v448;
  uint64_t v449;
  __int128 v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  unint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  _OWORD *v465;
  __int128 *v466;
  uint64_t v467;
  __int128 v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  _QWORD *v473;
  uint64_t v474;
  _QWORD *v475;
  uint64_t v476;
  uint64_t *v477;
  unsigned __int8 v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  unint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  unint64_t v490;
  unint64_t v491;
  uint64_t v492;
  uint64_t v493;
  _OWORD *v494;
  __int128 *v495;
  uint64_t v496;
  __int128 v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  unint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  unint64_t v508;
  unint64_t v509;
  uint64_t v510;
  uint64_t v511;
  _OWORD *v512;
  __int128 *v513;
  uint64_t v514;
  __int128 v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  _QWORD *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  unint64_t *v532;
  uint64_t v533;
  uint64_t v534;
  _QWORD *v535;
  uint64_t v536;
  _QWORD *v537;
  uint64_t v538;
  id v540;
  int v541;
  uint64_t v542;
  ggl::LandmarkDepthShader *v543;
  unsigned __int8 v544;
  unsigned __int8 v545;
  unsigned __int8 v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  unsigned __int8 v559;
  unsigned __int8 v560;
  unsigned __int8 v561;
  uint64_t *v562;
  uint64_t *v563;
  uint64_t *v564;
  uint64_t *v565;
  uint64_t *v566;
  void *v567;
  uint64_t *v568;
  _BYTE v569[44];
  char v570;
  uint64_t v571;
  std::__shared_weak_count *v572;
  __int16 v573;
  char v574;
  __int128 v575;
  __int128 v576;
  _QWORD v577[3];
  _QWORD *v578;
  _QWORD v579[3];
  _QWORD *v580;
  _QWORD v581[3];
  _QWORD *v582;
  _QWORD v583[3];
  _QWORD *v584;
  _QWORD v585[3];
  _QWORD *v586;
  _QWORD v587[3];
  _QWORD *v588;
  _QWORD v589[3];
  _QWORD *v590;
  _QWORD v591[3];
  _QWORD *v592;
  _QWORD v593[3];
  _QWORD *v594;
  _QWORD v595[3];
  _QWORD *v596;
  _QWORD v597[3];
  _QWORD *v598;
  _QWORD v599[3];
  _QWORD *v600;
  _QWORD v601[3];
  _QWORD *v602;
  _QWORD v603[3];
  _QWORD *v604;
  uint64_t v605;

  v605 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  v565 = (uint64_t *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = 0u;
  v562 = (uint64_t *)(a1 + 32);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  if ((v8 & 1) == 0)
  {
    v540 = v7;
    v7 = v540;
    if (v541)
    {
      v542 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v542, "GeoGL", 0xA3D02C1100000005);
      v7 = v540;
    }
  }
  v567 = v7;
  v568 = (uint64_t *)(a1 + 24);
  v563 = (uint64_t *)(a1 + 8);
  v564 = (uint64_t *)(a1 + 40);
  v566 = (uint64_t *)(a1 + 88);
  *(_QWORD *)(a1 + 328) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  v9 = objc_msgSend(v7, "shaderLibrary", a1 + 280, a1 + 240, a1 + 224, a1 + 208, a1 + 192, a1 + 176, a1 + 160, a1 + 144, a1 + 128, a1 + 112, a1 + 96);
  +[VKPlatform sharedPlatform](VKPlatform, "sharedPlatform");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(a1 + 272) = objc_msgSend(v10, "supportsPerFragmentLighting");

  v11 = *(_QWORD *)(v9 + 80);
  v12 = *(_QWORD *)(v11 + 1304);
  v13 = *(_QWORD *)(v11 + 1312);
  *(_QWORD *)&v575 = v12;
  *((_QWORD *)&v575 + 1) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v571 = 0;
  v16 = (char *)operator new(0x198uLL);
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = 0;
  *(_QWORD *)v16 = &off_1E42DEE68;
  v17 = a3[1];
  *(_OWORD *)v569 = *a3;
  *(_OWORD *)&v569[16] = v17;
  if ((v18 & 1) == 0)
  {
    if ((_DWORD)v543)
    {
      if ((v544 & 1) == 0)
      {
        if ((_DWORD)v543)
        {
          if ((v559 & 1) == 0
          {
            if ((v561 & 1) == 0
            {
              ggl::MeshTyped<ggl::Landmark::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Landmark::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::Landmark::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Landmark::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43DD8 = 1;
          }
          ggl::LandmarkDepth::BuildingPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Landmark::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE57B658 = &ggl::LandmarkDepth::pipelineDataBuildingPipelineDeviceStructs(void)::ref;
          qword_1EE57B660 = 0;
          if ((v560 & 1) == 0
          {
            ggl::LandmarkDepth::pipelineDataBuildingPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1EE57B690 = ggl::Building::Scale::reflection(void)::reflection;
          }
          qword_1EE57B668 = (uint64_t)&ggl::LandmarkDepth::pipelineDataBuildingPipelineConstantStructs(void)::ref;
          unk_1EE57B670 = xmmword_19FFB35C0;
        }
      }
      ggl::LandmarkDepth::BuildingPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::LandmarkDepth::BuildingPipelineSetup::typedReflection(void)::ref;
      ggl::LandmarkDepthShader::typedReflection(v543);
      qword_1ECE31000 = (uint64_t)&ggl::LandmarkDepthShader::typedReflection(void)::ref;
      if ((v545 & 1) == 0
      {
        ggl::LandmarkDepth::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57B700 = 0;
        qword_1EE57B708 = (uint64_t)"";
        dword_1EE57B710 = 0;
        qword_1EE57B718 = (uint64_t)&ggl::LandmarkDepth::pipelineStateBuildingPipelineAttributeBinding_0(void)::attr;
        unk_1EE57B720 = 3;
      }
      qword_1ECE31008 = (uint64_t)&ggl::LandmarkDepth::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr;
      unk_1ECE31010 = 1;
      qword_1ECE31018 = 0;
      unk_1ECE31020 = 0;
      qword_1ECE31028 = (uint64_t)&ggl::LandmarkDepth::pipelineStateBuildingPipelineDeviceStructBinding(void)::ref;
      unk_1ECE31030 = 0;
      if ((v546 & 1) == 0
      {
        ggl::LandmarkDepth::pipelineStateBuildingPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57B6A0 = 0;
        qword_1EE57B6A8 = (uint64_t)"view";
        dword_1EE57B6B0 = 3;
        qword_1EE57B6B8 = (uint64_t)&ggl::LandmarkDepth::pipelineStateBuildingPipelineConstantViewBinding(void)::reflection;
        unk_1EE57B6C0 = xmmword_19FFB35A0;
        qword_1EE57B6D0 = 1;
        unk_1EE57B6D8 = "scale";
        dword_1EE57B6E0 = 3;
        qword_1EE57B6E8 = (uint64_t)&ggl::LandmarkDepth::pipelineStateBuildingPipelineConstantScaleBinding(void)::reflection;
        unk_1EE57B6F0 = 4;
      }
      qword_1ECE31038 = (uint64_t)&ggl::LandmarkDepth::pipelineStateBuildingPipelineConstantStructBinding(void)::ref;
      unk_1ECE31040 = 2;
    }
  }
  v19 = v575;
  if (*((_QWORD *)&v575 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v575 + 1) + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    *((_DWORD *)v16 + 14) = 0;
    *((_QWORD *)v16 + 5) = 0;
    *((_QWORD *)v16 + 6) = 0;
    *((_QWORD *)v16 + 3) = &off_1E42B6760;
    *((_QWORD *)v16 + 4) = 0;
    *((_QWORD *)v16 + 8) = &ggl::LandmarkDepth::BuildingPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v16 + 72) = v19;
    do
      v22 = __ldxr(v20);
    while (__stxr(v22 + 1, v20));
  }
  else
  {
    *((_DWORD *)v16 + 14) = 0;
    *((_QWORD *)v16 + 5) = 0;
    *((_QWORD *)v16 + 6) = 0;
    *((_QWORD *)v16 + 3) = &off_1E42B6760;
    *((_QWORD *)v16 + 4) = 0;
    *((_QWORD *)v16 + 8) = &ggl::LandmarkDepth::BuildingPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v16 + 72) = v19;
  }
  v16[136] = 0;
  *(_OWORD *)(v16 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v16 + 156) = 0;
  *(_QWORD *)(v16 + 172) = 0;
  *(_QWORD *)(v16 + 164) = 0;
  v16[184] = 0;
  *(_OWORD *)(v16 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v16 + 204) = 0;
  *(_QWORD *)(v16 + 220) = 0;
  *(_QWORD *)(v16 + 212) = 0;
  v16[232] = 0;
  *(_OWORD *)(v16 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v16 + 252) = 0;
  *(_QWORD *)(v16 + 268) = 0;
  *(_QWORD *)(v16 + 260) = 0;
  v23 = *(_OWORD *)&v569[16];
  *(_OWORD *)(v16 + 280) = *(_OWORD *)v569;
  *(_OWORD *)(v16 + 296) = v23;
  v16[312] = 0;
  *((_QWORD *)v16 + 48) = 0;
  *((_OWORD *)v16 + 22) = 0u;
  *((_OWORD *)v16 + 23) = 0u;
  *((_OWORD *)v16 + 20) = 0u;
  *((_OWORD *)v16 + 21) = 0u;
  *((_QWORD *)v16 + 49) = 0x100000001;
  v16[400] = 0;
  v16[88] = 0;
  *(_WORD *)(v16 + 89) = v573;
  v16[91] = v574;
  *(_OWORD *)(v16 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v16 + 108) = v571;
  *(_QWORD *)(v16 + 124) = 0;
  *(_QWORD *)(v16 + 116) = 0;
  v16[132] = 0;
  if (*((_QWORD *)&v19 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v19 + 1) + 16))(*((_QWORD *)&v19 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v19 + 1));
    }
  }
  v16[329] = 0;
  v26 = *(int8x16_t *)(v16 + 344);
  v27 = vceqzq_s8(*(int8x16_t *)(v16 + 328));
  v28 = vmovl_high_s8(v27);
  v29 = vmovl_s16(*(int16x4_t *)v28.i8);
  v30.i64[0] = v29.u32[0];
  v30.i64[1] = v29.u32[1];
  v31 = v30;
  v32 = vmovl_s8(*(int8x8_t *)v27.i8);
  v33 = vmovl_s16(*(int16x4_t *)v32.i8);
  *((_QWORD *)v16 + 3) = &off_1E42B65C0;
  v30.i64[0] = v33.u32[0];
  v30.i64[1] = v33.u32[1];
  v34 = v30;
  v35 = vmovl_high_s16(v28);
  v30.i64[0] = v35.u32[0];
  v30.i64[1] = v35.u32[1];
  v36 = v30;
  v37 = vmovl_high_s16(v32);
  v30.i64[0] = v37.u32[0];
  v30.i64[1] = v37.u32[1];
  v38 = v30;
  v30.i64[0] = v29.u32[2];
  v30.i64[1] = v29.u32[3];
  v39 = v30;
  v30.i64[0] = v33.u32[2];
  v30.i64[1] = v33.u32[3];
  v40 = v30;
  v30.i64[0] = v35.u32[2];
  v30.i64[1] = v35.u32[3];
  v41 = v30;
  v30.i64[0] = v37.u32[2];
  v30.i64[1] = v37.u32[3];
  v42 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v30);
  v43 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v41);
  v44 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v40);
  v45 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v36);
  v46 = vceqzq_s8(v26);
  v47 = vmovl_high_s8(v46);
  v48 = vmovl_s16(*(int16x4_t *)v47.i8);
  v30.i64[0] = v48.u32[0];
  v30.i64[1] = v48.u32[1];
  v49 = v30;
  v50 = vmovl_s8(*(int8x8_t *)v46.i8);
  v51 = vmovl_s16(*(int16x4_t *)v50.i8);
  v30.i64[0] = v51.u32[0];
  v30.i64[1] = v51.u32[1];
  v52 = v30;
  v53 = vmovl_high_s16(v47);
  v30.i64[0] = v53.u32[0];
  v30.i64[1] = v53.u32[1];
  v54 = v30;
  v55 = vmovl_high_s16(v50);
  v30.i64[0] = v55.u32[0];
  v30.i64[1] = v55.u32[1];
  v56 = v30;
  v30.i64[0] = v48.u32[2];
  v30.i64[1] = v48.u32[3];
  v57 = v30;
  v30.i64[0] = v51.u32[2];
  v30.i64[1] = v51.u32[3];
  v58 = v30;
  v30.i64[0] = v53.u32[2];
  v30.i64[1] = v53.u32[3];
  v59 = v30;
  v30.i64[0] = v55.u32[2];
  v30.i64[1] = v55.u32[3];
  v60 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v59);
  v61 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v49), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v31));
  v62 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v52), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v34));
  v63 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v54), v45);
  v64 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v56), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v38));
  v65 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v57), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v39));
  v66 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v58), v44);
  v67 = vorrq_s8(v60, v43);
  v68 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v30), v42);
  v69 = vceqzq_s8(*(int8x16_t *)(v16 + 360));
  v70 = vmovl_s8(*(int8x8_t *)v69.i8);
  v71 = vmovl_high_s16(v70);
  v30.i64[0] = v71.i32[2];
  v30.i64[1] = v71.i32[3];
  v72 = v30;
  v73 = vmovl_high_s8(v69);
  v74 = vmovl_high_s16(v73);
  v30.i64[0] = v74.i32[2];
  v30.i64[1] = v74.i32[3];
  v75 = v30;
  v76 = vmovl_s16(*(int16x4_t *)v70.i8);
  v30.i64[0] = v76.i32[2];
  v30.i64[1] = v76.i32[3];
  v77 = v30;
  v78 = vmovl_s16(*(int16x4_t *)v73.i8);
  v30.i64[0] = v78.i32[2];
  v30.i64[1] = v78.i32[3];
  v79 = v30;
  v30.i64[0] = v71.i32[0];
  v30.i64[1] = v71.i32[1];
  v80 = v30;
  v30.i64[0] = v74.i32[0];
  v30.i64[1] = v74.i32[1];
  v81 = v30;
  v30.i64[0] = v76.i32[0];
  v30.i64[1] = v76.i32[1];
  v82 = v30;
  v30.i64[0] = v78.i32[0];
  v30.i64[1] = v78.i32[1];
  v83 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v30);
  v84 = vceqzq_s8(*(int8x16_t *)(v16 + 376));
  v85 = vmovl_high_s8(v84);
  v86 = vmovl_s16(*(int16x4_t *)v85.i8);
  v30.i64[0] = v86.i32[0];
  v30.i64[1] = v86.i32[1];
  v87 = v30;
  v88 = vmovl_s8(*(int8x8_t *)v84.i8);
  v89 = vmovl_s16(*(int16x4_t *)v88.i8);
  v30.i64[0] = v89.i32[0];
  v30.i64[1] = v89.i32[1];
  v90 = v30;
  v91 = vmovl_high_s16(v85);
  v30.i64[0] = v91.i32[0];
  v30.i64[1] = v91.i32[1];
  v92 = v30;
  v93 = vmovl_high_s16(v88);
  v30.i64[0] = v93.i32[0];
  v30.i64[1] = v93.i32[1];
  v94 = v30;
  v30.i64[0] = v86.i32[2];
  v30.i64[1] = v86.i32[3];
  v95 = v30;
  v30.i64[0] = v89.i32[2];
  v30.i64[1] = v89.i32[3];
  v96 = v30;
  v30.i64[0] = v91.i32[2];
  v30.i64[1] = v91.i32[3];
  v97 = v30;
  v30.i64[0] = v93.i32[2];
  v30.i64[1] = v93.i32[3];
  *((_QWORD *)v16 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v90), vbicq_s8((int8x16_t)xmmword_19FFB3170, v82)), v62), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v87), v83), v61)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v94), vbicq_s8((int8x16_t)xmmword_19FFB3190, v80)), v64), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v92), vbicq_s8((int8x16_t)xmmword_19FFB3180, v81)),
                                               v63))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v96), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v77)), v66), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v95), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v79)), v65)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v30), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v72)), v68), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v97),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v75)),
                                               v67)))));
  v16[312] = 1;
  v98 = *(std::__shared_weak_count **)(a1 + 136);
  *(_QWORD *)(a1 + 128) = v16 + 24;
  *(_QWORD *)(a1 + 136) = v16;
  if (v98)
  {
    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
    do
      v100 = __ldaxr(p_shared_owners);
    while (__stlxr(v100 - 1, p_shared_owners));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  if (*((_QWORD *)&v575 + 1))
  {
    v101 = (unint64_t *)(*((_QWORD *)&v575 + 1) + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v575 + 1) + 16))(*((_QWORD *)&v575 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v575 + 1));
    }
  }
  v103 = *(_QWORD *)(v9 + 80);
  v104 = *(_QWORD *)(v103 + 1328);
  v105 = *(std::__shared_weak_count **)(v103 + 1336);
  v571 = v104;
  v572 = v105;
  if (v105)
  {
    v106 = (unint64_t *)&v105->__shared_owners_;
    do
      v107 = __ldxr(v106);
    while (__stxr(v107 + 1, v106));
  }
  memset(&v569[20], 0, 24);
  v569[0] = 0;
  *(_OWORD *)&v569[4] = xmmword_19FFB3060;
  v570 = 15;
  v108 = operator new(0x198uLL);
  v108[1] = 0;
  v108[2] = 0;
  *v108 = &off_1E42DECA8;
  v109 = a3[1];
  v575 = *a3;
  v576 = v109;
  v110 = ggl::LandmarkFlat::LandmarkPipelineState::LandmarkPipelineState((uint64_t)(v108 + 3), &v571, (uint64_t)v569, &v575);
  v111 = *(std::__shared_weak_count **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v110;
  *(_QWORD *)(a1 + 104) = v108;
  if (v111)
  {
    v112 = (unint64_t *)&v111->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v572;
  if (v572)
  {
    v115 = (unint64_t *)&v572->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = *(_QWORD *)(v9 + 80);
  v118 = *(_QWORD *)(v117 + 1328);
  v119 = *(std::__shared_weak_count **)(v117 + 1336);
  v571 = v118;
  v572 = v119;
  if (v119)
  {
    v120 = (unint64_t *)&v119->__shared_owners_;
    do
      v121 = __ldxr(v120);
    while (__stxr(v121 + 1, v120));
  }
  memset(&v569[24], 0, 20);
  v569[0] = 1;
  *(_OWORD *)&v569[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v569[20] = 7;
  v570 = 15;
  v122 = operator new(0x198uLL);
  v122[1] = 0;
  v122[2] = 0;
  *v122 = &off_1E42DECA8;
  v123 = a3[1];
  v575 = *a3;
  v576 = v123;
  v124 = ggl::LandmarkFlat::LandmarkPipelineState::LandmarkPipelineState((uint64_t)(v122 + 3), &v571, (uint64_t)v569, &v575);
  v125 = *(std::__shared_weak_count **)(a1 + 120);
  *(_QWORD *)(a1 + 112) = v124;
  *(_QWORD *)(a1 + 120) = v122;
  if (!v125)
    goto LABEL_48;
  v126 = (unint64_t *)&v125->__shared_owners_;
  do
    v127 = __ldaxr(v126);
  while (__stlxr(v127 - 1, v126));
  if (!v127)
  {
    ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
    std::__shared_weak_count::__release_weak(v125);
    v128 = v572;
    if (!v572)
      goto LABEL_52;
  }
  else
  {
LABEL_48:
    v128 = v572;
    if (!v572)
      goto LABEL_52;
  }
  v129 = (unint64_t *)&v128->__shared_owners_;
  do
    v130 = __ldaxr(v129);
  while (__stlxr(v130 - 1, v129));
  if (v130)
  {
LABEL_52:
    if (*(_BYTE *)(a1 + 272))
      goto LABEL_53;
    goto LABEL_107;
  }
  ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
  std::__shared_weak_count::__release_weak(v128);
  if (*(_BYTE *)(a1 + 272))
  {
LABEL_53:
    v131 = *(_QWORD *)(v9 + 80);
    v132 = *(_QWORD *)(v131 + 2456);
    v133 = *(std::__shared_weak_count **)(v131 + 2464);
    v571 = v132;
    v572 = v133;
    if (v133)
    {
      v134 = (unint64_t *)&v133->__shared_owners_;
      do
        v135 = __ldxr(v134);
      while (__stxr(v135 + 1, v134));
    }
    memset(&v569[20], 0, 24);
    v569[0] = 0;
    *(_OWORD *)&v569[4] = xmmword_19FFB3060;
    v570 = 15;
    v136 = operator new(0x198uLL);
    v136[1] = 0;
    v136[2] = 0;
    *v136 = &off_1E42E0D40;
    v137 = a3[1];
    v575 = *a3;
    v576 = v137;
    v138 = ggl::SpecularLandmark::LandmarkPipelineState::LandmarkPipelineState((uint64_t)(v136 + 3), &v571, (uint64_t)v569, &v575);
    v139 = *(std::__shared_weak_count **)(a1 + 152);
    *(_QWORD *)(a1 + 144) = v138;
    *(_QWORD *)(a1 + 152) = v136;
    if (v139)
    {
      v140 = (unint64_t *)&v139->__shared_owners_;
      do
        v141 = __ldaxr(v140);
      while (__stlxr(v141 - 1, v140));
      if (!v141)
      {
        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
        std::__shared_weak_count::__release_weak(v139);
      }
    }
    v142 = v572;
    if (v572)
    {
      v143 = (unint64_t *)&v572->__shared_owners_;
      do
        v144 = __ldaxr(v143);
      while (__stlxr(v144 - 1, v143));
      if (!v144)
      {
        ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
        std::__shared_weak_count::__release_weak(v142);
      }
    }
    v145 = *(_QWORD *)(v9 + 80);
    v146 = *(_QWORD *)(v145 + 824);
    v147 = *(std::__shared_weak_count **)(v145 + 832);
    v571 = v146;
    v572 = v147;
    if (v147)
    {
      v148 = (unint64_t *)&v147->__shared_owners_;
      do
        v149 = __ldxr(v148);
      while (__stxr(v149 + 1, v148));
    }
    memset(&v569[20], 0, 24);
    v569[0] = 0;
    *(_OWORD *)&v569[4] = xmmword_19FFB3060;
    v570 = 15;
    v150 = operator new(0x198uLL);
    v150[1] = 0;
    v150[2] = 0;
    *v150 = &off_1E42E3B68;
    v151 = a3[1];
    v575 = *a3;
    v576 = v151;
    v152 = ggl::FoggedSpecularLandmark::LandmarkPipelineState::LandmarkPipelineState((uint64_t)(v150 + 3), &v571, (uint64_t)v569, &v575);
    v153 = *(std::__shared_weak_count **)(a1 + 168);
    *(_QWORD *)(a1 + 160) = v152;
    *(_QWORD *)(a1 + 168) = v150;
    if (v153)
    {
      v154 = (unint64_t *)&v153->__shared_owners_;
      do
        v155 = __ldaxr(v154);
      while (__stlxr(v155 - 1, v154));
      if (!v155)
      {
        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
        std::__shared_weak_count::__release_weak(v153);
      }
    }
    v156 = v572;
    if (v572)
    {
      v157 = (unint64_t *)&v572->__shared_owners_;
      do
        v158 = __ldaxr(v157);
      while (__stlxr(v158 - 1, v157));
      if (!v158)
      {
        ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
        std::__shared_weak_count::__release_weak(v156);
      }
    }
    v159 = *(_QWORD *)(v9 + 80);
    v160 = *(_QWORD *)(v159 + 2456);
    v161 = *(std::__shared_weak_count **)(v159 + 2464);
    v571 = v160;
    v572 = v161;
    if (v161)
    {
      v162 = (unint64_t *)&v161->__shared_owners_;
      do
        v163 = __ldxr(v162);
      while (__stxr(v163 + 1, v162));
    }
    memset(&v569[24], 0, 20);
    v569[0] = 1;
    *(_OWORD *)&v569[4] = xmmword_19FFB35B0;
    *(_DWORD *)&v569[20] = 7;
    v570 = 15;
    v164 = operator new(0x198uLL);
    v164[1] = 0;
    v164[2] = 0;
    *v164 = &off_1E42E0D40;
    v165 = a3[1];
    v575 = *a3;
    v576 = v165;
    v166 = ggl::SpecularLandmark::LandmarkPipelineState::LandmarkPipelineState((uint64_t)(v164 + 3), &v571, (uint64_t)v569, &v575);
    v167 = *(std::__shared_weak_count **)(a1 + 184);
    *(_QWORD *)(a1 + 176) = v166;
    *(_QWORD *)(a1 + 184) = v164;
    if (v167)
    {
      v168 = (unint64_t *)&v167->__shared_owners_;
      do
        v169 = __ldaxr(v168);
      while (__stlxr(v169 - 1, v168));
      if (!v169)
      {
        ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
        std::__shared_weak_count::__release_weak(v167);
      }
    }
    v170 = v572;
    if (v572)
    {
      v171 = (unint64_t *)&v572->__shared_owners_;
      do
        v172 = __ldaxr(v171);
      while (__stlxr(v172 - 1, v171));
      if (!v172)
      {
        ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
        std::__shared_weak_count::__release_weak(v170);
      }
    }
    v173 = *(_QWORD *)(v9 + 80);
    v174 = *(_QWORD *)(v173 + 824);
    v175 = *(std::__shared_weak_count **)(v173 + 832);
    v571 = v174;
    v572 = v175;
    if (v175)
    {
      v176 = (unint64_t *)&v175->__shared_owners_;
      do
        v177 = __ldxr(v176);
      while (__stxr(v177 + 1, v176));
    }
    memset(&v569[24], 0, 20);
    v569[0] = 1;
    *(_OWORD *)&v569[4] = xmmword_19FFB35B0;
    *(_DWORD *)&v569[20] = 7;
    v570 = 15;
    v178 = operator new(0x198uLL);
    v178[1] = 0;
    v178[2] = 0;
    *v178 = &off_1E42E3B68;
    v179 = a3[1];
    v575 = *a3;
    v576 = v179;
    v180 = ggl::FoggedSpecularLandmark::LandmarkPipelineState::LandmarkPipelineState((uint64_t)(v178 + 3), &v571, (uint64_t)v569, &v575);
    v181 = *(std::__shared_weak_count **)(a1 + 200);
    *(_QWORD *)(a1 + 192) = v180;
    *(_QWORD *)(a1 + 200) = v178;
    if (v181)
    {
      v182 = (unint64_t *)&v181->__shared_owners_;
      do
        v183 = __ldaxr(v182);
      while (__stlxr(v183 - 1, v182));
      if (!v183)
      {
        ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
        std::__shared_weak_count::__release_weak(v181);
      }
    }
    v184 = v572;
    if (v572)
    {
      v185 = (unint64_t *)&v572->__shared_owners_;
      do
        v186 = __ldaxr(v185);
      while (__stlxr(v186 - 1, v185));
      goto LABEL_157;
    }
    goto LABEL_159;
  }
LABEL_107:
  v187 = *(_QWORD *)(v9 + 80);
  v188 = *(_QWORD *)(v187 + 560);
  v189 = *(std::__shared_weak_count **)(v187 + 568);
  v571 = v188;
  v572 = v189;
  if (v189)
  {
    v190 = (unint64_t *)&v189->__shared_owners_;
    do
      v191 = __ldxr(v190);
    while (__stxr(v191 + 1, v190));
  }
  memset(&v569[20], 0, 24);
  v569[0] = 0;
  *(_OWORD *)&v569[4] = xmmword_19FFB3060;
  v570 = 15;
  v192 = operator new(0x198uLL);
  v192[1] = 0;
  v192[2] = 0;
  *v192 = &off_1E42DF530;
  v193 = a3[1];
  v575 = *a3;
  v576 = v193;
  v194 = ggl::DiffuseLandmark::BuildingPipelineState::BuildingPipelineState((uint64_t)(v192 + 3), &v571, (uint64_t)v569, &v575);
  v195 = *(std::__shared_weak_count **)(a1 + 216);
  *(_QWORD *)(a1 + 208) = v194;
  *(_QWORD *)(a1 + 216) = v192;
  if (v195)
  {
    v196 = (unint64_t *)&v195->__shared_owners_;
    do
      v197 = __ldaxr(v196);
    while (__stlxr(v197 - 1, v196));
    if (!v197)
    {
      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
      std::__shared_weak_count::__release_weak(v195);
    }
  }
  v198 = v572;
  if (v572)
  {
    v199 = (unint64_t *)&v572->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v201 = *(_QWORD *)(v9 + 80);
  v202 = *(_QWORD *)(v201 + 752);
  v203 = *(std::__shared_weak_count **)(v201 + 760);
  v571 = v202;
  v572 = v203;
  if (v203)
  {
    v204 = (unint64_t *)&v203->__shared_owners_;
    do
      v205 = __ldxr(v204);
    while (__stxr(v205 + 1, v204));
  }
  memset(&v569[20], 0, 24);
  v569[0] = 0;
  *(_OWORD *)&v569[4] = xmmword_19FFB3060;
  v570 = 15;
  v206 = operator new(0x198uLL);
  v206[1] = 0;
  v206[2] = 0;
  *v206 = &off_1E42E39A8;
  v207 = a3[1];
  v575 = *a3;
  v576 = v207;
  v208 = ggl::FoggedDiffuseLandmark::LandmarkPipelineState::LandmarkPipelineState((uint64_t)(v206 + 3), &v571, (uint64_t)v569, &v575);
  v209 = *(std::__shared_weak_count **)(a1 + 232);
  *(_QWORD *)(a1 + 224) = v208;
  *(_QWORD *)(a1 + 232) = v206;
  if (v209)
  {
    v210 = (unint64_t *)&v209->__shared_owners_;
    do
      v211 = __ldaxr(v210);
    while (__stlxr(v211 - 1, v210));
    if (!v211)
    {
      ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
      std::__shared_weak_count::__release_weak(v209);
    }
  }
  v212 = v572;
  if (v572)
  {
    v213 = (unint64_t *)&v572->__shared_owners_;
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  v215 = *(_QWORD *)(v9 + 80);
  v216 = *(_QWORD *)(v215 + 560);
  v217 = *(std::__shared_weak_count **)(v215 + 568);
  v571 = v216;
  v572 = v217;
  if (v217)
  {
    v218 = (unint64_t *)&v217->__shared_owners_;
    do
      v219 = __ldxr(v218);
    while (__stxr(v219 + 1, v218));
  }
  memset(&v569[24], 0, 20);
  v569[0] = 1;
  *(_OWORD *)&v569[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v569[20] = 7;
  v570 = 15;
  v220 = operator new(0x198uLL);
  v220[1] = 0;
  v220[2] = 0;
  *v220 = &off_1E42DF530;
  v221 = a3[1];
  v575 = *a3;
  v576 = v221;
  v222 = ggl::DiffuseLandmark::BuildingPipelineState::BuildingPipelineState((uint64_t)(v220 + 3), &v571, (uint64_t)v569, &v575);
  v223 = *(std::__shared_weak_count **)(a1 + 248);
  *(_QWORD *)(a1 + 240) = v222;
  *(_QWORD *)(a1 + 248) = v220;
  if (v223)
  {
    v224 = (unint64_t *)&v223->__shared_owners_;
    do
      v225 = __ldaxr(v224);
    while (__stlxr(v225 - 1, v224));
    if (!v225)
    {
      ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
      std::__shared_weak_count::__release_weak(v223);
    }
  }
  v226 = v572;
  if (v572)
  {
    v227 = (unint64_t *)&v572->__shared_owners_;
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
  v229 = *(_QWORD *)(v9 + 80);
  v230 = *(_QWORD *)(v229 + 752);
  v231 = *(std::__shared_weak_count **)(v229 + 760);
  v571 = v230;
  v572 = v231;
  if (v231)
  {
    v232 = (unint64_t *)&v231->__shared_owners_;
    do
      v233 = __ldxr(v232);
    while (__stxr(v233 + 1, v232));
  }
  memset(&v569[24], 0, 20);
  v569[0] = 1;
  *(_OWORD *)&v569[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v569[20] = 7;
  v570 = 15;
  v234 = operator new(0x198uLL);
  v234[1] = 0;
  v234[2] = 0;
  *v234 = &off_1E42E39A8;
  v235 = a3[1];
  v575 = *a3;
  v576 = v235;
  v236 = ggl::FoggedDiffuseLandmark::LandmarkPipelineState::LandmarkPipelineState((uint64_t)(v234 + 3), &v571, (uint64_t)v569, &v575);
  v237 = *(std::__shared_weak_count **)(a1 + 264);
  *(_QWORD *)(a1 + 256) = v236;
  *(_QWORD *)(a1 + 264) = v234;
  if (v237)
  {
    v238 = (unint64_t *)&v237->__shared_owners_;
    do
      v239 = __ldaxr(v238);
    while (__stlxr(v239 - 1, v238));
    if (!v239)
    {
      ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
      std::__shared_weak_count::__release_weak(v237);
    }
  }
  v184 = v572;
  if (v572)
  {
    v240 = (unint64_t *)&v572->__shared_owners_;
    do
      v186 = __ldaxr(v240);
    while (__stlxr(v186 - 1, v240));
LABEL_157:
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
LABEL_159:
  v241 = (uint64_t *)operator new();
  v603[0] = &off_1E42D1B40;
  v603[1] = a1;
  v604 = v603;
  v601[0] = &off_1E42D6230;
  v602 = v601;
  v241[1] = 0;
  v241[2] = 0;
  *v241 = 0;
  {
    v547 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v547, "GeoGL", 0xA3D02C1100000005);
  }
  v243 = ggl::Allocator::instance(void)::alloc;
  v241[4] = 0;
  v241[3] = v243;
  v241[5] = 0;
  v241[6] = 0;
  {
    v548 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v548, "GeoGL", 0xA3D02C1100000005);
  }
  v241[7] = ggl::Allocator::instance(void)::alloc;
  v244 = (uint64_t)v604;
  if (!v604)
    goto LABEL_164;
  if (v604 != v603)
  {
    v244 = (*(uint64_t (**)(void))(*v604 + 16))();
LABEL_164:
    v241[11] = v244;
    goto LABEL_166;
  }
  v241[11] = (uint64_t)(v241 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v603[0] + 24))(v603, v241 + 8);
LABEL_166:
  v245 = (uint64_t)v602;
  if (!v602)
  {
LABEL_169:
    v241[15] = v245;
    goto LABEL_171;
  }
  if (v602 != v601)
  {
    v245 = (*(uint64_t (**)(void))(*v602 + 16))();
    goto LABEL_169;
  }
  v241[15] = (uint64_t)(v241 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v601[0] + 24))((uint64_t)v601, v241 + 12);
LABEL_171:
  v241[16] = 2000;
  v246 = *v241;
  if ((unint64_t)(v241[2] - *v241) > 0x31F)
    goto LABEL_184;
  v247 = v241[1];
  v248 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v241[3] + 16))(v241[3], 800, 8);
  v249 = v247 - v246;
  v250 = v248 + ((v247 - v246) & 0xFFFFFFFFFFFFFFF8);
  v252 = *v241;
  v251 = v241[1];
  v253 = v251 - *v241;
  if (v251 == *v241)
  {
    v255 = v248 + ((v247 - v246) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_182;
  }
  v254 = v253 - 8;
  if ((unint64_t)(v253 - 8) >= 0x58)
  {
    v255 = v248 + ((v247 - v246) & 0xFFFFFFFFFFFFFFF8);
    if (v251 - (v249 & 0xFFFFFFFFFFFFFFF8) - v248 >= 0x20)
    {
      v256 = v249 >> 3;
      v257 = (v254 >> 3) + 1;
      v258 = (_OWORD *)(v248 + 8 * v256 - 16);
      v259 = (__int128 *)(v251 - 16);
      v260 = v257 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v261 = *v259;
        *(v258 - 1) = *(v259 - 1);
        *v258 = v261;
        v258 -= 2;
        v259 -= 2;
        v260 -= 4;
      }
      while (v260);
      v255 = v250 - 8 * (v257 & 0x3FFFFFFFFFFFFFFCLL);
      v251 -= 8 * (v257 & 0x3FFFFFFFFFFFFFFCLL);
      if (v257 == (v257 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_181;
    }
  }
  else
  {
    v255 = v248 + ((v247 - v246) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v262 = *(_QWORD *)(v251 - 8);
    v251 -= 8;
    *(_QWORD *)(v255 - 8) = v262;
    v255 -= 8;
  }
  while (v251 != v252);
LABEL_181:
  v251 = *v241;
LABEL_182:
  *v241 = v255;
  v241[1] = v250;
  v263 = v241[2];
  v241[2] = v248 + 800;
  if (v251)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v241[3] + 40))(v241[3], v251, v263 - v251);
LABEL_184:
  v264 = v241[4];
  if ((unint64_t)(v241[6] - v264) > 0x31F)
    goto LABEL_197;
  v265 = v241[5];
  v266 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v241[7] + 16))(v241[7], 800, 8);
  v267 = v265 - v264;
  v268 = v266 + ((v265 - v264) & 0xFFFFFFFFFFFFFFF8);
  v270 = v241[4];
  v269 = v241[5];
  v271 = v269 - v270;
  if (v269 == v270)
  {
    v273 = v266 + ((v265 - v264) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_195;
  }
  v272 = v271 - 8;
  if ((unint64_t)(v271 - 8) >= 0x58)
  {
    v273 = v266 + ((v265 - v264) & 0xFFFFFFFFFFFFFFF8);
    if (v269 - (v267 & 0xFFFFFFFFFFFFFFF8) - v266 >= 0x20)
    {
      v274 = v267 >> 3;
      v275 = (v272 >> 3) + 1;
      v276 = (_OWORD *)(v266 + 8 * v274 - 16);
      v277 = (__int128 *)(v269 - 16);
      v278 = v275 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v279 = *v277;
        *(v276 - 1) = *(v277 - 1);
        *v276 = v279;
        v276 -= 2;
        v277 -= 2;
        v278 -= 4;
      }
      while (v278);
      v273 = v268 - 8 * (v275 & 0x3FFFFFFFFFFFFFFCLL);
      v269 -= 8 * (v275 & 0x3FFFFFFFFFFFFFFCLL);
      if (v275 == (v275 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_194;
    }
  }
  else
  {
    v273 = v266 + ((v265 - v264) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v280 = *(_QWORD *)(v269 - 8);
    v269 -= 8;
    *(_QWORD *)(v273 - 8) = v280;
    v273 -= 8;
  }
  while (v269 != v270);
LABEL_194:
  v269 = v241[4];
LABEL_195:
  v241[4] = v273;
  v241[5] = v268;
  v281 = v241[6];
  v241[6] = v266 + 800;
  if (v269)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v241[7] + 40))(v241[7], v269, v281 - v269);
LABEL_197:
  v282 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v241;
  if (v282)
  {
    v283 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v282);
    MEMORY[0x1A1AF4E00](v283, 0x10A0C40D234DDC7);
  }
  v284 = v602;
  if (v602 == v601)
  {
    v285 = 4;
    v284 = v601;
  }
  else
  {
    if (!v602)
      goto LABEL_204;
    v285 = 5;
  }
  (*(void (**)(void))(*v284 + 8 * v285))();
LABEL_204:
  v286 = v604;
  if (v604 == v603)
  {
    v287 = 4;
    v286 = v603;
    goto LABEL_208;
  }
  if (v604)
  {
    v287 = 5;
LABEL_208:
    (*(void (**)(void))(*v286 + 8 * v287))();
  }
  v288 = (uint64_t *)operator new();
  v599[0] = &off_1E42D1B88;
  v599[1] = a1;
  v600 = v599;
  v597[0] = &off_1E42D61E8;
  v598 = v597;
  v288[1] = 0;
  v288[2] = 0;
  *v288 = 0;
  {
    v549 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v549, "GeoGL", 0xA3D02C1100000005);
  }
  v290 = ggl::Allocator::instance(void)::alloc;
  v288[4] = 0;
  v288[3] = v290;
  v288[5] = 0;
  v288[6] = 0;
  {
    v550 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v550, "GeoGL", 0xA3D02C1100000005);
  }
  v288[7] = ggl::Allocator::instance(void)::alloc;
  v291 = (uint64_t)v600;
  if (!v600)
    goto LABEL_214;
  if (v600 != v599)
  {
    v291 = (*(uint64_t (**)(void))(*v600 + 16))();
LABEL_214:
    v288[11] = v291;
    goto LABEL_216;
  }
  v288[11] = (uint64_t)(v288 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v599[0] + 24))(v599, v288 + 8);
LABEL_216:
  v292 = (uint64_t)v598;
  if (!v598)
  {
LABEL_219:
    v288[15] = v292;
    goto LABEL_221;
  }
  if (v598 != v597)
  {
    v292 = (*(uint64_t (**)(void))(*v598 + 16))();
    goto LABEL_219;
  }
  v288[15] = (uint64_t)(v288 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v597[0] + 24))((uint64_t)v597, v288 + 12);
LABEL_221:
  v288[16] = 2000;
  v293 = *v288;
  if ((unint64_t)(v288[2] - *v288) > 0x31F)
    goto LABEL_234;
  v294 = v288[1];
  v295 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v288[3] + 16))(v288[3], 800, 8);
  v296 = v294 - v293;
  v297 = v295 + ((v294 - v293) & 0xFFFFFFFFFFFFFFF8);
  v299 = *v288;
  v298 = v288[1];
  v300 = v298 - *v288;
  if (v298 == *v288)
  {
    v302 = v295 + ((v294 - v293) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_232;
  }
  v301 = v300 - 8;
  if ((unint64_t)(v300 - 8) >= 0x58)
  {
    v302 = v295 + ((v294 - v293) & 0xFFFFFFFFFFFFFFF8);
    if (v298 - (v296 & 0xFFFFFFFFFFFFFFF8) - v295 >= 0x20)
    {
      v303 = v296 >> 3;
      v304 = (v301 >> 3) + 1;
      v305 = (_OWORD *)(v295 + 8 * v303 - 16);
      v306 = (__int128 *)(v298 - 16);
      v307 = v304 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v308 = *v306;
        *(v305 - 1) = *(v306 - 1);
        *v305 = v308;
        v305 -= 2;
        v306 -= 2;
        v307 -= 4;
      }
      while (v307);
      v302 = v297 - 8 * (v304 & 0x3FFFFFFFFFFFFFFCLL);
      v298 -= 8 * (v304 & 0x3FFFFFFFFFFFFFFCLL);
      if (v304 == (v304 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_231;
    }
  }
  else
  {
    v302 = v295 + ((v294 - v293) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v309 = *(_QWORD *)(v298 - 8);
    v298 -= 8;
    *(_QWORD *)(v302 - 8) = v309;
    v302 -= 8;
  }
  while (v298 != v299);
LABEL_231:
  v298 = *v288;
LABEL_232:
  *v288 = v302;
  v288[1] = v297;
  v310 = v288[2];
  v288[2] = v295 + 800;
  if (v298)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v288[3] + 40))(v288[3], v298, v310 - v298);
LABEL_234:
  v311 = v288[4];
  if ((unint64_t)(v288[6] - v311) > 0x31F)
    goto LABEL_247;
  v312 = v288[5];
  v313 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v288[7] + 16))(v288[7], 800, 8);
  v314 = v312 - v311;
  v315 = v313 + ((v312 - v311) & 0xFFFFFFFFFFFFFFF8);
  v317 = v288[4];
  v316 = v288[5];
  v318 = v316 - v317;
  if (v316 == v317)
  {
    v320 = v313 + ((v312 - v311) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_245;
  }
  v319 = v318 - 8;
  if ((unint64_t)(v318 - 8) >= 0x58)
  {
    v320 = v313 + ((v312 - v311) & 0xFFFFFFFFFFFFFFF8);
    if (v316 - (v314 & 0xFFFFFFFFFFFFFFF8) - v313 >= 0x20)
    {
      v321 = v314 >> 3;
      v322 = (v319 >> 3) + 1;
      v323 = (_OWORD *)(v313 + 8 * v321 - 16);
      v324 = (__int128 *)(v316 - 16);
      v325 = v322 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v326 = *v324;
        *(v323 - 1) = *(v324 - 1);
        *v323 = v326;
        v323 -= 2;
        v324 -= 2;
        v325 -= 4;
      }
      while (v325);
      v320 = v315 - 8 * (v322 & 0x3FFFFFFFFFFFFFFCLL);
      v316 -= 8 * (v322 & 0x3FFFFFFFFFFFFFFCLL);
      if (v322 == (v322 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_244;
    }
  }
  else
  {
    v320 = v313 + ((v312 - v311) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v327 = *(_QWORD *)(v316 - 8);
    v316 -= 8;
    *(_QWORD *)(v320 - 8) = v327;
    v320 -= 8;
  }
  while (v316 != v317);
LABEL_244:
  v316 = v288[4];
LABEL_245:
  v288[4] = v320;
  v288[5] = v315;
  v328 = v288[6];
  v288[6] = v313 + 800;
  if (v316)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v288[7] + 40))(v288[7], v316, v328 - v316);
LABEL_247:
  v329 = *v568;
  *v568 = (uint64_t)v288;
  if (v329)
  {
    v330 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v329);
    MEMORY[0x1A1AF4E00](v330, 0x10A0C40D234DDC7);
  }
  v331 = v598;
  if (v598 == v597)
  {
    v332 = 4;
    v331 = v597;
  }
  else
  {
    if (!v598)
      goto LABEL_254;
    v332 = 5;
  }
  (*(void (**)(void))(*v331 + 8 * v332))();
LABEL_254:
  v333 = v600;
  if (v600 == v599)
  {
    v334 = 4;
    v333 = v599;
  }
  else
  {
    if (!v600)
      goto LABEL_259;
    v334 = 5;
  }
  (*(void (**)(void))(*v333 + 8 * v334))();
LABEL_259:
  if (!*(_BYTE *)(a1 + 272))
  {
    v340 = (uint64_t *)operator new();
    v587[0] = &off_1E42D1C60;
    v587[1] = a1;
    v587[2] = a4;
    v588 = v587;
    v585[0] = &off_1E42D64B8;
    v586 = v585;
    v340[1] = 0;
    v340[2] = 0;
    *v340 = 0;
    {
      v555 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v555, "GeoGL", 0xA3D02C1100000005);
    }
    v342 = ggl::Allocator::instance(void)::alloc;
    v340[4] = 0;
    v340[3] = v342;
    v340[5] = 0;
    v340[6] = 0;
    {
      v556 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v556, "GeoGL", 0xA3D02C1100000005);
    }
    v340[7] = ggl::Allocator::instance(void)::alloc;
    v343 = (uint64_t)v588;
    if (v588)
    {
      if (v588 == v587)
      {
        v340[11] = (uint64_t)(v340 + 8);
        (*(void (**)(_QWORD *, uint64_t *))(v587[0] + 24))(v587, v340 + 8);
LABEL_364:
        v434 = (uint64_t)v586;
        if (v586)
        {
          if (v586 == v585)
          {
            v340[15] = (uint64_t)(v340 + 12);
            (*(void (**)(uint64_t, _QWORD *))(v585[0] + 24))((uint64_t)v585, v340 + 12);
LABEL_369:
            v340[16] = 2000;
            v435 = *v340;
            if ((unint64_t)(v340[2] - *v340) > 0x31F)
              goto LABEL_382;
            v436 = v340[1];
            v437 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v340[3] + 16))(v340[3], 800, 8);
            v438 = v436 - v435;
            v439 = v437 + ((v436 - v435) & 0xFFFFFFFFFFFFFFF8);
            v441 = *v340;
            v440 = v340[1];
            v442 = v440 - *v340;
            if (v440 == *v340)
            {
              v444 = v437 + ((v436 - v435) & 0xFFFFFFFFFFFFFFF8);
              goto LABEL_380;
            }
            v443 = v442 - 8;
            if ((unint64_t)(v442 - 8) >= 0x58)
            {
              v444 = v437 + ((v436 - v435) & 0xFFFFFFFFFFFFFFF8);
              if (v440 - (v438 & 0xFFFFFFFFFFFFFFF8) - v437 >= 0x20)
              {
                v445 = v438 >> 3;
                v446 = (v443 >> 3) + 1;
                v447 = (_OWORD *)(v437 + 8 * v445 - 16);
                v448 = (__int128 *)(v440 - 16);
                v449 = v446 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v450 = *v448;
                  *(v447 - 1) = *(v448 - 1);
                  *v447 = v450;
                  v447 -= 2;
                  v448 -= 2;
                  v449 -= 4;
                }
                while (v449);
                v444 = v439 - 8 * (v446 & 0x3FFFFFFFFFFFFFFCLL);
                v440 -= 8 * (v446 & 0x3FFFFFFFFFFFFFFCLL);
                if (v446 == (v446 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_379;
              }
            }
            else
            {
              v444 = v437 + ((v436 - v435) & 0xFFFFFFFFFFFFFFF8);
            }
            do
            {
              v451 = *(_QWORD *)(v440 - 8);
              v440 -= 8;
              *(_QWORD *)(v444 - 8) = v451;
              v444 -= 8;
            }
            while (v440 != v441);
LABEL_379:
            v440 = *v340;
LABEL_380:
            *v340 = v444;
            v340[1] = v439;
            v452 = v340[2];
            v340[2] = v437 + 800;
            if (v440)
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v340[3] + 40))(v340[3], v440, v452 - v440);
LABEL_382:
            v453 = v340[4];
            if ((unint64_t)(v340[6] - v453) > 0x31F)
              goto LABEL_395;
            v454 = v340[5];
            v455 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v340[7] + 16))(v340[7], 800, 8);
            v456 = v454 - v453;
            v457 = v455 + ((v454 - v453) & 0xFFFFFFFFFFFFFFF8);
            v459 = v340[4];
            v458 = v340[5];
            v460 = v458 - v459;
            if (v458 == v459)
            {
              v462 = v455 + ((v454 - v453) & 0xFFFFFFFFFFFFFFF8);
              goto LABEL_393;
            }
            v461 = v460 - 8;
            if ((unint64_t)(v460 - 8) >= 0x58)
            {
              v462 = v455 + ((v454 - v453) & 0xFFFFFFFFFFFFFFF8);
              if (v458 - (v456 & 0xFFFFFFFFFFFFFFF8) - v455 >= 0x20)
              {
                v463 = v456 >> 3;
                v464 = (v461 >> 3) + 1;
                v465 = (_OWORD *)(v455 + 8 * v463 - 16);
                v466 = (__int128 *)(v458 - 16);
                v467 = v464 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v468 = *v466;
                  *(v465 - 1) = *(v466 - 1);
                  *v465 = v468;
                  v465 -= 2;
                  v466 -= 2;
                  v467 -= 4;
                }
                while (v467);
                v462 = v457 - 8 * (v464 & 0x3FFFFFFFFFFFFFFCLL);
                v458 -= 8 * (v464 & 0x3FFFFFFFFFFFFFFCLL);
                if (v464 == (v464 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_392;
              }
            }
            else
            {
              v462 = v455 + ((v454 - v453) & 0xFFFFFFFFFFFFFFF8);
            }
            do
            {
              v469 = *(_QWORD *)(v458 - 8);
              v458 -= 8;
              *(_QWORD *)(v462 - 8) = v469;
              v462 -= 8;
            }
            while (v458 != v459);
LABEL_392:
            v458 = v340[4];
LABEL_393:
            v340[4] = v462;
            v340[5] = v457;
            v470 = v340[6];
            v340[6] = v455 + 800;
            if (v458)
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v340[7] + 40))(v340[7], v458, v470 - v458);
LABEL_395:
            v471 = *v563;
            *v563 = (uint64_t)v340;
            if (v471)
            {
              v472 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v471);
              MEMORY[0x1A1AF4E00](v472, 0x10A0C40D234DDC7);
            }
            v473 = v586;
            if (v586 == v585)
            {
              v474 = 4;
              v473 = v585;
            }
            else
            {
              if (!v586)
                goto LABEL_402;
              v474 = 5;
            }
            (*(void (**)(void))(*v473 + 8 * v474))();
LABEL_402:
            v475 = v588;
            if (v588 == v587)
            {
              v476 = 4;
              v475 = v587;
            }
            else
            {
              if (!v588)
              {
LABEL_407:
                v477 = (uint64_t *)operator new();
                v583[0] = &off_1E42D1CA8;
                v583[1] = a1;
                v583[2] = a4;
                v584 = v583;
                v581[0] = &off_1E42D6E00;
                v582 = v581;
                v477[1] = 0;
                v477[2] = 0;
                *v477 = 0;
                {
                  v557 = operator new();
                  ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v557, "GeoGL", 0xA3D02C1100000005);
                }
                v479 = ggl::Allocator::instance(void)::alloc;
                v477[4] = 0;
                v477[3] = v479;
                v477[5] = 0;
                v477[6] = 0;
                {
                  v558 = operator new();
                  ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v558, "GeoGL", 0xA3D02C1100000005);
                }
                v477[7] = ggl::Allocator::instance(void)::alloc;
                v480 = (uint64_t)v584;
                if (v584)
                {
                  if (v584 == v583)
                  {
                    v477[11] = (uint64_t)(v477 + 8);
                    (*(void (**)(_QWORD *, uint64_t *))(v583[0] + 24))(v583, v477 + 8);
LABEL_414:
                    v481 = (uint64_t)v582;
                    if (v582)
                    {
                      if (v582 == v581)
                      {
                        v477[15] = (uint64_t)(v477 + 12);
                        (*(void (**)(uint64_t, _QWORD *))(v581[0] + 24))((uint64_t)v581, v477 + 12);
LABEL_419:
                        v477[16] = 2000;
                        v482 = *v477;
                        if ((unint64_t)(v477[2] - *v477) > 0x31F)
                          goto LABEL_432;
                        v483 = v477[1];
                        v484 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v477[3] + 16))(v477[3], 800, 8);
                        v485 = v483 - v482;
                        v486 = v484 + ((v483 - v482) & 0xFFFFFFFFFFFFFFF8);
                        v488 = *v477;
                        v487 = v477[1];
                        v489 = v487 - *v477;
                        if (v487 == *v477)
                        {
                          v491 = v484 + ((v483 - v482) & 0xFFFFFFFFFFFFFFF8);
                          goto LABEL_430;
                        }
                        v490 = v489 - 8;
                        if ((unint64_t)(v489 - 8) >= 0x58)
                        {
                          v491 = v484 + ((v483 - v482) & 0xFFFFFFFFFFFFFFF8);
                          if (v487 - (v485 & 0xFFFFFFFFFFFFFFF8) - v484 >= 0x20)
                          {
                            v492 = v485 >> 3;
                            v493 = (v490 >> 3) + 1;
                            v494 = (_OWORD *)(v484 + 8 * v492 - 16);
                            v495 = (__int128 *)(v487 - 16);
                            v496 = v493 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              v497 = *v495;
                              *(v494 - 1) = *(v495 - 1);
                              *v494 = v497;
                              v494 -= 2;
                              v495 -= 2;
                              v496 -= 4;
                            }
                            while (v496);
                            v491 = v486 - 8 * (v493 & 0x3FFFFFFFFFFFFFFCLL);
                            v487 -= 8 * (v493 & 0x3FFFFFFFFFFFFFFCLL);
                            if (v493 == (v493 & 0x3FFFFFFFFFFFFFFCLL))
                              goto LABEL_429;
                          }
                        }
                        else
                        {
                          v491 = v484 + ((v483 - v482) & 0xFFFFFFFFFFFFFFF8);
                        }
                        do
                        {
                          v498 = *(_QWORD *)(v487 - 8);
                          v487 -= 8;
                          *(_QWORD *)(v491 - 8) = v498;
                          v491 -= 8;
                        }
                        while (v487 != v488);
LABEL_429:
                        v487 = *v477;
LABEL_430:
                        *v477 = v491;
                        v477[1] = v486;
                        v499 = v477[2];
                        v477[2] = v484 + 800;
                        if (v487)
                          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v477[3] + 40))(v477[3], v487, v499 - v487);
LABEL_432:
                        v500 = v477[4];
                        if ((unint64_t)(v477[6] - v500) > 0x31F)
                          goto LABEL_445;
                        v501 = v477[5];
                        v502 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v477[7] + 16))(v477[7], 800, 8);
                        v503 = v501 - v500;
                        v504 = v502 + ((v501 - v500) & 0xFFFFFFFFFFFFFFF8);
                        v506 = v477[4];
                        v505 = v477[5];
                        v507 = v505 - v506;
                        if (v505 == v506)
                        {
                          v509 = v502 + ((v501 - v500) & 0xFFFFFFFFFFFFFFF8);
                          goto LABEL_443;
                        }
                        v508 = v507 - 8;
                        if ((unint64_t)(v507 - 8) >= 0x58)
                        {
                          v509 = v502 + ((v501 - v500) & 0xFFFFFFFFFFFFFFF8);
                          if (v505 - (v503 & 0xFFFFFFFFFFFFFFF8) - v502 >= 0x20)
                          {
                            v510 = v503 >> 3;
                            v511 = (v508 >> 3) + 1;
                            v512 = (_OWORD *)(v502 + 8 * v510 - 16);
                            v513 = (__int128 *)(v505 - 16);
                            v514 = v511 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              v515 = *v513;
                              *(v512 - 1) = *(v513 - 1);
                              *v512 = v515;
                              v512 -= 2;
                              v513 -= 2;
                              v514 -= 4;
                            }
                            while (v514);
                            v509 = v504 - 8 * (v511 & 0x3FFFFFFFFFFFFFFCLL);
                            v505 -= 8 * (v511 & 0x3FFFFFFFFFFFFFFCLL);
                            if (v511 == (v511 & 0x3FFFFFFFFFFFFFFCLL))
                              goto LABEL_442;
                          }
                        }
                        else
                        {
                          v509 = v502 + ((v501 - v500) & 0xFFFFFFFFFFFFFFF8);
                        }
                        do
                        {
                          v516 = *(_QWORD *)(v505 - 8);
                          v505 -= 8;
                          *(_QWORD *)(v509 - 8) = v516;
                          v509 -= 8;
                        }
                        while (v505 != v506);
LABEL_442:
                        v505 = v477[4];
LABEL_443:
                        v477[4] = v509;
                        v477[5] = v504;
                        v517 = v477[6];
                        v477[6] = v502 + 800;
                        if (v505)
                          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v477[7] + 40))(v477[7], v505, v517 - v505);
LABEL_445:
                        v518 = *v562;
                        *v562 = (uint64_t)v477;
                        if (v518)
                        {
                          v519 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v518);
                          MEMORY[0x1A1AF4E00](v519, 0x10A0C40D234DDC7);
                        }
                        v520 = v582;
                        if (v582 == v581)
                        {
                          v521 = 4;
                          v520 = v581;
                        }
                        else
                        {
                          if (!v582)
                            goto LABEL_452;
                          v521 = 5;
                        }
                        (*(void (**)(void))(*v520 + 8 * v521))();
LABEL_452:
                        v432 = v584;
                        if (v584 == v583)
                        {
                          v433 = 4;
                          v432 = v583;
                          goto LABEL_456;
                        }
                        goto LABEL_453;
                      }
                      v481 = (*(uint64_t (**)(void))(*v582 + 16))();
                    }
                    v477[15] = v481;
                    goto LABEL_419;
                  }
                  v480 = (*(uint64_t (**)(void))(*v584 + 16))();
                }
                v477[11] = v480;
                goto LABEL_414;
              }
              v476 = 5;
            }
            (*(void (**)(void))(*v475 + 8 * v476))();
            goto LABEL_407;
          }
          v434 = (*(uint64_t (**)(void))(*v586 + 16))();
        }
        v340[15] = v434;
        goto LABEL_369;
      }
      v343 = (*(uint64_t (**)(void))(*v588 + 16))();
    }
    v340[11] = v343;
    goto LABEL_364;
  }
  v335 = (uint64_t *)operator new();
  v595[0] = &off_1E42D1BD0;
  v595[1] = a1;
  v595[2] = a4;
  v596 = v595;
  v593[0] = &off_1E42D6668;
  v594 = v593;
  v335[1] = 0;
  v335[2] = 0;
  *v335 = 0;
  {
    v551 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v551, "GeoGL", 0xA3D02C1100000005);
  }
  v338 = ggl::Allocator::instance(void)::alloc;
  v335[4] = 0;
  v335[3] = v338;
  v335[5] = 0;
  v335[6] = 0;
  {
    v552 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v552, "GeoGL", 0xA3D02C1100000005);
  }
  v335[7] = ggl::Allocator::instance(void)::alloc;
  v339 = (uint64_t)v596;
  if (!v596)
    goto LABEL_265;
  if (v596 != v595)
  {
    v339 = (*(uint64_t (**)(void))(*v596 + 16))();
LABEL_265:
    v335[11] = v339;
    goto LABEL_273;
  }
  v335[11] = (uint64_t)(v335 + 8);
  v336 = ((__n128 (*)(uint64_t, uint64_t))*(_QWORD *)(v595[0] + 24))((uint64_t)v595, (uint64_t)(v335 + 8));
LABEL_273:
  v344 = (uint64_t)v594;
  if (!v594)
  {
LABEL_276:
    v335[15] = v344;
    goto LABEL_278;
  }
  if (v594 != v593)
  {
    v344 = (*(uint64_t (**)(__n128))(*v594 + 16))(v336);
    goto LABEL_276;
  }
  v335[15] = (uint64_t)(v335 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v593[0] + 24))((uint64_t)v593, v335 + 12);
LABEL_278:
  v335[16] = 2000;
  v345 = *v335;
  if ((unint64_t)(v335[2] - *v335) > 0x31F)
    goto LABEL_291;
  v346 = v335[1];
  v347 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)v335[3] + 16))(v335[3], 800, 8, v336);
  v348 = v346 - v345;
  v349 = v347 + ((v346 - v345) & 0xFFFFFFFFFFFFFFF8);
  v351 = *v335;
  v350 = v335[1];
  v352 = v350 - *v335;
  if (v350 == *v335)
  {
    v354 = v347 + ((v346 - v345) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_289;
  }
  v353 = v352 - 8;
  if ((unint64_t)(v352 - 8) >= 0x58)
  {
    v354 = v347 + ((v346 - v345) & 0xFFFFFFFFFFFFFFF8);
    if (v350 - (v348 & 0xFFFFFFFFFFFFFFF8) - v347 >= 0x20)
    {
      v355 = v348 >> 3;
      v356 = (v353 >> 3) + 1;
      v357 = (_OWORD *)(v347 + 8 * v355 - 16);
      v358 = (__int128 *)(v350 - 16);
      v359 = v356 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v360 = *v358;
        *(v357 - 1) = *(v358 - 1);
        *v357 = v360;
        v357 -= 2;
        v358 -= 2;
        v359 -= 4;
      }
      while (v359);
      v354 = v349 - 8 * (v356 & 0x3FFFFFFFFFFFFFFCLL);
      v350 -= 8 * (v356 & 0x3FFFFFFFFFFFFFFCLL);
      if (v356 == (v356 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_288;
    }
  }
  else
  {
    v354 = v347 + ((v346 - v345) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v361 = *(_QWORD *)(v350 - 8);
    v350 -= 8;
    *(_QWORD *)(v354 - 8) = v361;
    v354 -= 8;
  }
  while (v350 != v351);
LABEL_288:
  v350 = *v335;
LABEL_289:
  *v335 = v354;
  v335[1] = v349;
  v362 = v335[2];
  v335[2] = v347 + 800;
  if (v350)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v335[3] + 40))(v335[3], v350, v362 - v350);
LABEL_291:
  v363 = v335[4];
  if ((unint64_t)(v335[6] - v363) > 0x31F)
    goto LABEL_304;
  v364 = v335[5];
  v365 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v335[7] + 16))(v335[7], 800, 8);
  v366 = v364 - v363;
  v367 = v365 + ((v364 - v363) & 0xFFFFFFFFFFFFFFF8);
  v369 = v335[4];
  v368 = v335[5];
  v370 = v368 - v369;
  if (v368 == v369)
  {
    v372 = v365 + ((v364 - v363) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_302;
  }
  v371 = v370 - 8;
  if ((unint64_t)(v370 - 8) >= 0x58)
  {
    v372 = v365 + ((v364 - v363) & 0xFFFFFFFFFFFFFFF8);
    if (v368 - (v366 & 0xFFFFFFFFFFFFFFF8) - v365 >= 0x20)
    {
      v373 = v366 >> 3;
      v374 = (v371 >> 3) + 1;
      v375 = (_OWORD *)(v365 + 8 * v373 - 16);
      v376 = (__int128 *)(v368 - 16);
      v377 = v374 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v378 = *v376;
        *(v375 - 1) = *(v376 - 1);
        *v375 = v378;
        v375 -= 2;
        v376 -= 2;
        v377 -= 4;
      }
      while (v377);
      v372 = v367 - 8 * (v374 & 0x3FFFFFFFFFFFFFFCLL);
      v368 -= 8 * (v374 & 0x3FFFFFFFFFFFFFFCLL);
      if (v374 == (v374 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_301;
    }
  }
  else
  {
    v372 = v365 + ((v364 - v363) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v379 = *(_QWORD *)(v368 - 8);
    v368 -= 8;
    *(_QWORD *)(v372 - 8) = v379;
    v372 -= 8;
  }
  while (v368 != v369);
LABEL_301:
  v368 = v335[4];
LABEL_302:
  v335[4] = v372;
  v335[5] = v367;
  v380 = v335[6];
  v335[6] = v365 + 800;
  if (v368)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v335[7] + 40))(v335[7], v368, v380 - v368);
LABEL_304:
  v381 = *v565;
  *v565 = (uint64_t)v335;
  if (v381)
  {
    v382 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v381);
    MEMORY[0x1A1AF4E00](v382, 0x10A0C40D234DDC7);
  }
  v383 = v594;
  if (v594 == v593)
  {
    v384 = 4;
    v383 = v593;
  }
  else
  {
    if (!v594)
      goto LABEL_311;
    v384 = 5;
  }
  (*(void (**)(void))(*v383 + 8 * v384))();
LABEL_311:
  v385 = v596;
  if (v596 == v595)
  {
    v386 = 4;
    v385 = v595;
    goto LABEL_315;
  }
  if (v596)
  {
    v386 = 5;
LABEL_315:
    (*(void (**)(void))(*v385 + 8 * v386))();
  }
  v387 = (uint64_t *)operator new();
  v591[1] = a1;
  v591[2] = a4;
  v592 = v591;
  v589[0] = &off_1E42D6FB0;
  v590 = v589;
  v591[0] = &off_1E42D1C18;
  v387[1] = 0;
  v387[2] = 0;
  *v387 = 0;
  {
    v553 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v553, "GeoGL", 0xA3D02C1100000005);
  }
  v389 = ggl::Allocator::instance(void)::alloc;
  v387[4] = 0;
  v387[3] = v389;
  v387[5] = 0;
  v387[6] = 0;
  {
    v554 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v554, "GeoGL", 0xA3D02C1100000005);
  }
  v387[7] = ggl::Allocator::instance(void)::alloc;
  v390 = (uint64_t)v592;
  if (!v592)
    goto LABEL_321;
  if (v592 != v591)
  {
    v390 = (*(uint64_t (**)(void))(*v592 + 16))();
LABEL_321:
    v387[11] = v390;
    goto LABEL_323;
  }
  v387[11] = (uint64_t)(v387 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v591[0] + 24))(v591, v387 + 8);
LABEL_323:
  v391 = (uint64_t)v590;
  if (!v590)
  {
LABEL_326:
    v387[15] = v391;
    goto LABEL_328;
  }
  if (v590 != v589)
  {
    v391 = (*(uint64_t (**)(void))(*v590 + 16))();
    goto LABEL_326;
  }
  v387[15] = (uint64_t)(v387 + 12);
  (*(void (**)(uint64_t, _QWORD *))(v589[0] + 24))((uint64_t)v589, v387 + 12);
LABEL_328:
  v387[16] = 2000;
  v392 = *v387;
  if ((unint64_t)(v387[2] - *v387) > 0x31F)
    goto LABEL_341;
  v393 = v387[1];
  v394 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v387[3] + 16))(v387[3], 800, 8);
  v395 = v393 - v392;
  v396 = v394 + ((v393 - v392) & 0xFFFFFFFFFFFFFFF8);
  v398 = *v387;
  v397 = v387[1];
  v399 = v397 - *v387;
  if (v397 == *v387)
  {
    v401 = v394 + ((v393 - v392) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_339;
  }
  v400 = v399 - 8;
  if ((unint64_t)(v399 - 8) >= 0x58)
  {
    v401 = v394 + ((v393 - v392) & 0xFFFFFFFFFFFFFFF8);
    if (v397 - (v395 & 0xFFFFFFFFFFFFFFF8) - v394 >= 0x20)
    {
      v402 = v395 >> 3;
      v403 = (v400 >> 3) + 1;
      v404 = (_OWORD *)(v394 + 8 * v402 - 16);
      v405 = (__int128 *)(v397 - 16);
      v406 = v403 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v407 = *v405;
        *(v404 - 1) = *(v405 - 1);
        *v404 = v407;
        v404 -= 2;
        v405 -= 2;
        v406 -= 4;
      }
      while (v406);
      v401 = v396 - 8 * (v403 & 0x3FFFFFFFFFFFFFFCLL);
      v397 -= 8 * (v403 & 0x3FFFFFFFFFFFFFFCLL);
      if (v403 == (v403 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_338;
    }
  }
  else
  {
    v401 = v394 + ((v393 - v392) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v408 = *(_QWORD *)(v397 - 8);
    v397 -= 8;
    *(_QWORD *)(v401 - 8) = v408;
    v401 -= 8;
  }
  while (v397 != v398);
LABEL_338:
  v397 = *v387;
LABEL_339:
  *v387 = v401;
  v387[1] = v396;
  v409 = v387[2];
  v387[2] = v394 + 800;
  if (v397)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v387[3] + 40))(v387[3], v397, v409 - v397);
LABEL_341:
  v410 = v387[4];
  if ((unint64_t)(v387[6] - v410) > 0x31F)
    goto LABEL_354;
  v411 = v387[5];
  v412 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v387[7] + 16))(v387[7], 800, 8);
  v413 = v411 - v410;
  v414 = v412 + ((v411 - v410) & 0xFFFFFFFFFFFFFFF8);
  v416 = v387[4];
  v415 = v387[5];
  v417 = v415 - v416;
  if (v415 == v416)
  {
    v419 = v412 + ((v411 - v410) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_352;
  }
  v418 = v417 - 8;
  if ((unint64_t)(v417 - 8) >= 0x58)
  {
    v419 = v412 + ((v411 - v410) & 0xFFFFFFFFFFFFFFF8);
    if (v415 - (v413 & 0xFFFFFFFFFFFFFFF8) - v412 >= 0x20)
    {
      v420 = v413 >> 3;
      v421 = (v418 >> 3) + 1;
      v422 = (_OWORD *)(v412 + 8 * v420 - 16);
      v423 = (__int128 *)(v415 - 16);
      v424 = v421 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v425 = *v423;
        *(v422 - 1) = *(v423 - 1);
        *v422 = v425;
        v422 -= 2;
        v423 -= 2;
        v424 -= 4;
      }
      while (v424);
      v419 = v414 - 8 * (v421 & 0x3FFFFFFFFFFFFFFCLL);
      v415 -= 8 * (v421 & 0x3FFFFFFFFFFFFFFCLL);
      if (v421 == (v421 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_351;
    }
  }
  else
  {
    v419 = v412 + ((v411 - v410) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v426 = *(_QWORD *)(v415 - 8);
    v415 -= 8;
    *(_QWORD *)(v419 - 8) = v426;
    v419 -= 8;
  }
  while (v415 != v416);
LABEL_351:
  v415 = v387[4];
LABEL_352:
  v387[4] = v419;
  v387[5] = v414;
  v427 = v387[6];
  v387[6] = v412 + 800;
  if (v415)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v387[7] + 40))(v387[7], v415, v427 - v415);
LABEL_354:
  v428 = *v564;
  *v564 = (uint64_t)v387;
  if (v428)
  {
    v429 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v428);
    MEMORY[0x1A1AF4E00](v429, 0x10A0C40D234DDC7);
  }
  v430 = v590;
  if (v590 == v589)
  {
    v431 = 4;
    v430 = v589;
  }
  else
  {
    if (!v590)
      goto LABEL_361;
    v431 = 5;
  }
  (*(void (**)(void))(*v430 + 8 * v431))();
LABEL_361:
  v432 = v592;
  if (v592 == v591)
  {
    v433 = 4;
    v432 = v591;
    goto LABEL_456;
  }
LABEL_453:
  if (!v432)
    goto LABEL_457;
  v433 = 5;
LABEL_456:
  (*(void (**)(void))(*v432 + 8 * v433))();
LABEL_457:
  v522 = operator new();
  *(_DWORD *)(v522 + 32) = 0;
  *(_QWORD *)(v522 + 16) = 0;
  *(_QWORD *)(v522 + 24) = 0;
  *(_QWORD *)v522 = &off_1E42B5DE8;
  *(_QWORD *)(v522 + 8) = 0;
  *(_QWORD *)(v522 + 36) = 256;
  *(_DWORD *)(v522 + 44) = 0;
  *(_QWORD *)(v522 + 48) = 0xFFFF0200000100;
  *(_WORD *)(v522 + 56) = 0;
  *(_BYTE *)(v522 + 58) = 3;
  *(_QWORD *)(v522 + 67) = 0;
  *(_QWORD *)(v522 + 59) = 0;
  *(_BYTE *)(v522 + 75) = 0;
  *(_QWORD *)(v522 + 132) = 0;
  *(_QWORD *)(v522 + 124) = 0;
  *(_WORD *)(v522 + 188) = 257;
  *(_QWORD *)(v522 + 192) = 0;
  *(_QWORD *)(v522 + 200) = 0;
  *(_BYTE *)(v522 + 208) = 0;
  v523 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v522;
  if (v523)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v523 + 8))(v523);
    v522 = *(_QWORD *)(a1 + 64);
  }
  *(_BYTE *)(v522 + 208) = 1;
  *(_BYTE *)(v522 + 58) = 3;
  *(_BYTE *)(v522 + 56) = 1;
  v524 = operator new();
  *(_DWORD *)(v524 + 32) = 0;
  *(_QWORD *)(v524 + 16) = 0;
  *(_QWORD *)(v524 + 24) = 0;
  *(_QWORD *)v524 = &off_1E42B5DE8;
  *(_QWORD *)(v524 + 8) = 0;
  *(_QWORD *)(v524 + 36) = 256;
  *(_DWORD *)(v524 + 44) = 0;
  *(_QWORD *)(v524 + 48) = 1;
  *(_WORD *)(v524 + 56) = 0;
  *(_BYTE *)(v524 + 58) = 3;
  *(_QWORD *)(v524 + 67) = 0;
  *(_QWORD *)(v524 + 59) = 0;
  *(_BYTE *)(v524 + 75) = 0;
  *(_QWORD *)(v524 + 132) = 0;
  *(_QWORD *)(v524 + 124) = 0;
  *(_WORD *)(v524 + 188) = 257;
  *(_QWORD *)(v524 + 192) = 0;
  *(_QWORD *)(v524 + 200) = 0;
  *(_BYTE *)(v524 + 208) = 0;
  v525 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v524;
  if (v525)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v525 + 8))(v525);
    v524 = *(_QWORD *)(a1 + 48);
  }
  *(_BYTE *)(v524 + 58) = 3;
  *(_BYTE *)(v524 + 56) = 1;
  v526 = operator new();
  *(_DWORD *)(v526 + 32) = 0;
  *(_QWORD *)(v526 + 16) = 0;
  *(_QWORD *)(v526 + 24) = 0;
  *(_QWORD *)v526 = &off_1E42B5DE8;
  *(_QWORD *)(v526 + 8) = 0;
  *(_QWORD *)(v526 + 36) = 0xC59C400000000100;
  *(_DWORD *)(v526 + 44) = 0;
  *(_QWORD *)(v526 + 48) = 1;
  *(_WORD *)(v526 + 56) = 0;
  *(_BYTE *)(v526 + 58) = 3;
  *(_QWORD *)(v526 + 67) = 0;
  *(_QWORD *)(v526 + 59) = 0;
  *(_BYTE *)(v526 + 75) = 0;
  *(_QWORD *)(v526 + 132) = 0;
  *(_QWORD *)(v526 + 124) = 0;
  *(_WORD *)(v526 + 188) = 257;
  *(_QWORD *)(v526 + 192) = 0;
  *(_QWORD *)(v526 + 200) = 0;
  *(_BYTE *)(v526 + 208) = 0;
  v527 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v526;
  if (v527)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v527 + 8))(v527);
    v526 = *(_QWORD *)(a1 + 56);
  }
  *(_BYTE *)(v526 + 58) = 3;
  *(_BYTE *)(v526 + 56) = 1;
  v528 = operator new();
  *(_DWORD *)(v528 + 32) = 0;
  *(_QWORD *)(v528 + 16) = 0;
  *(_QWORD *)(v528 + 24) = 0;
  *(_QWORD *)v528 = &off_1E42B5DE8;
  *(_QWORD *)(v528 + 8) = 0;
  *(_QWORD *)(v528 + 36) = 66304;
  *(_DWORD *)(v528 + 44) = 0;
  *(_QWORD *)(v528 + 48) = 1;
  *(_WORD *)(v528 + 56) = 0;
  *(_BYTE *)(v528 + 58) = 3;
  *(_QWORD *)(v528 + 67) = 0;
  *(_QWORD *)(v528 + 59) = 0;
  *(_BYTE *)(v528 + 75) = 0;
  *(_QWORD *)(v528 + 132) = 0;
  *(_QWORD *)(v528 + 124) = 0;
  *(_WORD *)(v528 + 188) = 257;
  *(_QWORD *)(v528 + 192) = 0;
  *(_QWORD *)(v528 + 200) = 0;
  *(_BYTE *)(v528 + 208) = 0;
  v529 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v528;
  if (v529)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v529 + 8))(v529);
    v528 = *(_QWORD *)(a1 + 72);
  }
  *(_BYTE *)(v528 + 58) = 3;
  *(_BYTE *)(v528 + 56) = 1;
  v530 = operator new();
  *(_DWORD *)(v530 + 32) = 0;
  *(_QWORD *)(v530 + 16) = 0;
  *(_QWORD *)(v530 + 24) = 0;
  *(_QWORD *)v530 = &off_1E42B5DE8;
  *(_QWORD *)(v530 + 8) = 0;
  *(_QWORD *)(v530 + 36) = 0xC59C400000010300;
  *(_DWORD *)(v530 + 44) = 0;
  *(_QWORD *)(v530 + 48) = 1;
  *(_WORD *)(v530 + 56) = 0;
  *(_BYTE *)(v530 + 58) = 3;
  *(_QWORD *)(v530 + 67) = 0;
  *(_QWORD *)(v530 + 59) = 0;
  *(_BYTE *)(v530 + 75) = 0;
  *(_QWORD *)(v530 + 132) = 0;
  *(_QWORD *)(v530 + 124) = 0;
  *(_WORD *)(v530 + 188) = 257;
  *(_QWORD *)(v530 + 192) = 0;
  *(_QWORD *)(v530 + 200) = 0;
  *(_BYTE *)(v530 + 208) = 0;
  v531 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v530;
  if (v531)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v531 + 8))(v531);
    v530 = *(_QWORD *)(a1 + 80);
  }
  *(_BYTE *)(v530 + 58) = 3;
  *(_BYTE *)(v530 + 56) = 1;
  v532 = (unint64_t *)operator new();
  v580 = v579;
  v577[0] = &off_1E42D60C8;
  v578 = v577;
  v579[0] = &off_1E42D1CF0;
  ggl::FragmentedPool<ggl::RenderItem>::FragmentedPool(v532, (uint64_t)v579, (uint64_t)v577);
  v533 = *v566;
  *v566 = (uint64_t)v532;
  if (v533)
  {
    v534 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v533);
    MEMORY[0x1A1AF4E00](v534, 0x10A0C40D234DDC7);
  }
  v535 = v578;
  if (v578 == v577)
  {
    v536 = 4;
    v535 = v577;
  }
  else
  {
    if (!v578)
      goto LABEL_474;
    v536 = 5;
  }
  (*(void (**)(void))(*v535 + 8 * v536))();
LABEL_474:
  v537 = v580;
  if (v580 == v579)
  {
    v538 = 4;
    v537 = v579;
    goto LABEL_478;
  }
  if (v580)
  {
    v538 = 5;
LABEL_478:
    (*(void (**)(void))(*v537 + 8 * v538))();
  }

  return a1;
}

void sub_19F330BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ggl::Batcher *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20,uint64_t *a21,uint64_t *a22,uint64_t *a23,uint64_t *a24,void *a25,uint64_t *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t *v61;
  _QWORD *v62;
  uint64_t *v63;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v65 = (_QWORD *)v61[11];
  if (v65 == v62)
  {
    v66 = 4;
  }
  else
  {
    if (!v65)
    {
      v67 = *v63;
      if (*v63)
        goto LABEL_16;
      goto LABEL_5;
    }
    v66 = 5;
    v62 = (_QWORD *)v61[11];
  }
  (*(void (**)(_QWORD *))(*v62 + 8 * v66))(v62);
  v67 = *v63;
  if (*v63)
  {
LABEL_16:
    v61[5] = v67;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61[7] + 40))(v61[7], v67, v61[6] - v67);
    v68 = *v61;
    if (!*v61)
    {
LABEL_7:
      v69 = (_QWORD *)a56;
      if ((char *)a56 == &a53)
      {
        v70 = 4;
        v69 = &a53;
      }
      else
      {
        if (!a56)
          goto LABEL_12;
        v70 = 5;
      }
      (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_12:
      v71 = (_QWORD *)a60;
      if ((char *)a60 == &a57)
      {
        v72 = 4;
        v71 = &a57;
      }
      else
      {
        if (!a60)
          goto LABEL_21;
        v72 = 5;
      }
      (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_21:
      MEMORY[0x1A1AF4E00](v61, 0x10A0C40D234DDC7);
      ggl::Batcher::~Batcher(a9);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)(v60 + 32));
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a10);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a11);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a12);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a13);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a14);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a15);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a16);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a17);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a18);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a19);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a24);
      v73 = v60[10];
      v60[10] = 0;
      if (v73)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
      v74 = v60[9];
      v60[9] = 0;
      if (v74)
        (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
      v75 = v60[8];
      v60[8] = 0;
      if (v75)
        (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
      v76 = v60[7];
      v60[7] = 0;
      if (v76)
        (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
      v77 = v60[6];
      v60[6] = 0;
      if (v77)
        (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a22);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a20);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a26);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a23);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a21);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](v60);

      _Unwind_Resume(a1);
    }
LABEL_6:
    v61[1] = v68;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61[3] + 40))(v61[3], v68, v61[2] - v68);
    goto LABEL_7;
  }
LABEL_5:
  v68 = *v61;
  if (!*v61)
    goto LABEL_7;
  goto LABEL_6;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_22FoggedSpecularLandmark21LandmarkPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6FB0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_16SpecularLandmark21LandmarkPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6668;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_13LandmarkDepth21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6230;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_12LandmarkFlat21LandmarkPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D61E8;
}

__n128 std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_3,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_3>,ggl::FoggedSpecularLandmark::LandmarkPipelineSetup * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D1C18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_2,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_2>,ggl::SpecularLandmark::LandmarkPipelineSetup * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D1BD0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_1,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_1>,ggl::LandmarkFlat::LandmarkPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D1B88;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_0,std::allocator<md::LandmarkRenderResources::LandmarkRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_0>,ggl::LandmarkDepth::BuildingPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D1B40;
  a2[1] = v2;
  return result;
}

uint64_t *md::LabelRenderer::LabelMeshRenderStateSet::LabelMeshRenderStateSet(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  v6 = operator new();
  *(_DWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)v6 = &off_1E42B5DE8;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 36) = a2;
  *(_DWORD *)(v6 + 44) = a3;
  *(_QWORD *)(v6 + 48) = 1;
  *(_WORD *)(v6 + 56) = 0;
  *(_BYTE *)(v6 + 58) = 3;
  *(_QWORD *)(v6 + 67) = 0;
  *(_QWORD *)(v6 + 59) = 0;
  *(_BYTE *)(v6 + 75) = 0;
  *(_QWORD *)(v6 + 132) = 0;
  *(_QWORD *)(v6 + 124) = 0;
  *(_WORD *)(v6 + 188) = 257;
  *(_QWORD *)(v6 + 192) = 0;
  *(_QWORD *)(v6 + 200) = 0;
  *(_BYTE *)(v6 + 208) = 0;
  v7 = *a1;
  *a1 = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = operator new();
  *(_DWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)v8 = &off_1E42B5DE8;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 36) = a2;
  *(_DWORD *)(v8 + 44) = a3;
  *(_QWORD *)(v8 + 48) = 0x8000800000000700;
  *(_WORD *)(v8 + 56) = 0;
  *(_BYTE *)(v8 + 58) = 3;
  *(_QWORD *)(v8 + 67) = 0;
  *(_QWORD *)(v8 + 59) = 0;
  *(_BYTE *)(v8 + 75) = 0;
  *(_QWORD *)(v8 + 132) = 0;
  *(_QWORD *)(v8 + 124) = 0;
  *(_WORD *)(v8 + 188) = 257;
  *(_QWORD *)(v8 + 192) = 0;
  *(_QWORD *)(v8 + 200) = 0;
  *(_BYTE *)(v8 + 208) = 0;
  v9 = a1[1];
  a1[1] = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = operator new();
  *(_DWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)v10 = &off_1E42B5DE8;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 36) = a2;
  *(_DWORD *)(v10 + 44) = a3;
  *(_QWORD *)(v10 + 48) = 0x80007F0000000500;
  *(_WORD *)(v10 + 56) = 0;
  *(_BYTE *)(v10 + 58) = 3;
  *(_QWORD *)(v10 + 67) = 0;
  *(_QWORD *)(v10 + 59) = 0;
  *(_BYTE *)(v10 + 75) = 0;
  *(_QWORD *)(v10 + 132) = 0;
  *(_QWORD *)(v10 + 124) = 0;
  *(_WORD *)(v10 + 188) = 257;
  *(_QWORD *)(v10 + 192) = 0;
  *(_QWORD *)(v10 + 200) = 0;
  *(_BYTE *)(v10 + 208) = 0;
  v11 = a1[3];
  a1[3] = v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = operator new();
  *(_DWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)v12 = &off_1E42B5DE8;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 36) = a2;
  *(_DWORD *)(v12 + 44) = a3;
  *(_QWORD *)(v12 + 48) = 0x8000FF0000000500;
  *(_WORD *)(v12 + 56) = 0;
  *(_BYTE *)(v12 + 58) = 3;
  *(_QWORD *)(v12 + 67) = 0;
  *(_QWORD *)(v12 + 59) = 0;
  *(_BYTE *)(v12 + 75) = 0;
  *(_QWORD *)(v12 + 132) = 0;
  *(_QWORD *)(v12 + 124) = 0;
  *(_WORD *)(v12 + 188) = 257;
  *(_QWORD *)(v12 + 192) = 0;
  *(_QWORD *)(v12 + 200) = 0;
  *(_BYTE *)(v12 + 208) = 0;
  v13 = a1[2];
  a1[2] = v12;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return a1;
}

void sub_19F3317F0(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = v1[3];
  v1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = v1[2];
  v1[2] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = v1[1];
  v1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *v1;
  *v1 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Glyph::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Glyph::DefaultVbo>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Icon::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Icon::DefaultVbo>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8SDFGlyph24SuperSamplePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7B38;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8SDFGlyph20DefaultPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7AF0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8SDFGlyph17HaloPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7AA8;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7Glyph3d29LowPrecisionHaloPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7A60;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7Glyph3d25LowPrecisionPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7A18;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7Glyph3d21RaymarchPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D79D0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7Glyph3d20DefaultPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7988;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Icon23MaskedIconPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D74C0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Icon21WaypointPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7478;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Icon17IconPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7430;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_24ColorGlyphWithNormalHalo20DefaultPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D70D0;
}

_QWORD *md::LabelsLogic::setNeedsLayoutCallback(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;
  _QWORD v21[3];
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  _QWORD v25[4];

  v25[3] = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v19 = v18;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v18);
    }
    else
    {
      v19 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v19 = 0;
  }
  v20 = a1;
  v22 = 0;
  v4 = operator new(0x30uLL);
  v5 = v4;
  *v4 = &off_1E42C8E58;
  v6 = v4 + 1;
  if (!v19)
  {
    v7 = v4 + 4;
    goto LABEL_10;
  }
  if (v19 != v18)
  {
    v7 = &v19;
    v4[4] = v19;
LABEL_10:
    *v7 = 0;
    v4[5] = a1;
    v22 = v4;
LABEL_11:
    v8 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 88) + 32);
    goto LABEL_12;
  }
  v4[4] = v6;
  (*(void (**)(_QWORD *))(v18[0] + 24))(v18);
  v12 = v19;
  v5[5] = v20;
  v22 = v5;
  if (v12 == v18)
  {
    v13 = 4;
    v12 = v18;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
  v5 = v22;
  v8 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 88) + 32);
  if (!v22)
  {
    v9 = 0;
    goto LABEL_13;
  }
  if (v22 != v21)
  {
LABEL_12:
    v9 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v5 + 16))(v5, v6);
LABEL_13:
    v24 = (_QWORD *)v9;
    goto LABEL_14;
  }
  v24 = v23;
  (*(void (**)(_QWORD *, _QWORD *))(v21[0] + 24))(v21, v23);
LABEL_14:
  if (v8 != v23)
  {
    v10 = v24;
    v11 = (_QWORD *)v8[3];
    if (v24 == v23)
    {
      if (v11 == v8)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v23[0] + 24))(v23, v25);
        (*(void (**)(_QWORD *))(*v24 + 32))(v24);
        v24 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)v8[3] + 24))(v8[3], v23);
        (*(void (**)(_QWORD))(*(_QWORD *)v8[3] + 32))(v8[3]);
        v8[3] = 0;
        v24 = v23;
        (*(void (**)(_QWORD *, _QWORD *))(v25[0] + 24))(v25, v8);
        (*(void (**)(_QWORD *))(v25[0] + 32))(v25);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v23[0] + 24))(v23, v8);
        (*(void (**)(_QWORD *))(*v24 + 32))(v24);
        v24 = (_QWORD *)v8[3];
      }
      v8[3] = v8;
    }
    else if (v11 == v8)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*v8 + 24))(v8, v23);
      (*(void (**)(_QWORD))(*(_QWORD *)v8[3] + 32))(v8[3]);
      v8[3] = v24;
      v24 = v23;
    }
    else
    {
      v24 = (_QWORD *)v8[3];
      v8[3] = v10;
    }
  }
  v14 = v24;
  if (v24 == v23)
  {
    v15 = 4;
    v14 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_35;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_35:
  result = v22;
  if (v22 == v21)
  {
    v17 = 4;
    result = v21;
  }
  else
  {
    if (!v22)
      return result;
    v17 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v17))();
}

void sub_19F331D08(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F331D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v19;
  uint64_t v20;

  v19 = a18;
  if (a18 == &a15)
  {
    v20 = 4;
    v19 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<md::LabelMapTile>,std::shared_ptr<md::LabelMapTile> const&>(unint64_t result, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  int8x8_t v25;
  uint8x8_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;

  v5 = result;
  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(result + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)result + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2)
                return result;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2)
              return result;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 32) + 16))(*(_QWORD *)(result + 32), 32, 8);
  v15 = result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = v8;
  *(_QWORD *)(result + 16) = *a3;
  v16 = a3[1];
  *(_QWORD *)(result + 24) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (float)(unint64_t)(*(_QWORD *)(v5 + 40) + 1);
  v20 = *(float *)(v5 + 48);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    if (v24 == 1)
    {
      v24 = 2;
    }
    else if ((v24 & (v24 - 1)) != 0)
    {
      result = std::__next_prime(v24);
      v24 = result;
    }
    v25 = *(int8x8_t *)(v5 + 8);
    if (v24 > *(_QWORD *)&v25)
      goto LABEL_37;
    if (v24 < *(_QWORD *)&v25)
    {
      result = vcvtps_u32_f32((float)*(unint64_t *)(v5 + 40) / *(float *)(v5 + 48));
      if (*(_QWORD *)&v25 < 3uLL || (v26 = (uint8x8_t)vcnt_s8(v25), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        result = std::__next_prime(result);
      }
      else
      {
        v27 = 1 << -(char)__clz(result - 1);
        if (result >= 2)
          result = v27;
      }
      if (v24 <= result)
        v24 = result;
      if (v24 < *(_QWORD *)&v25)
LABEL_37:
        result = std::__hash_table<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::__unordered_map_hasher<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,md::TrafficFeatureHash,std::equal_to<VKTrafficFeature * {__strong}>,true>,std::__unordered_map_equal<VKTrafficFeature * {__strong},std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,std::equal_to<VKTrafficFeature * {__strong}>,md::TrafficFeatureHash,true>,geo::StdAllocator<std::__hash_value_type<VKTrafficFeature * {__strong},md::RouteAnnotationLabelFeature *>,mdm::Allocator>>::__do_rehash<true>(v5, v24);
    }
    v9 = *(_QWORD *)(v5 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v28 = *(unint64_t **)(*(_QWORD *)v5 + 8 * v3);
  if (v28)
  {
    *(_QWORD *)v15 = *v28;
LABEL_61:
    *v28 = v15;
    goto LABEL_62;
  }
  *(_QWORD *)v15 = *(_QWORD *)(v5 + 24);
  *(_QWORD *)(v5 + 24) = v15;
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v3) = v5 + 24;
  if (*(_QWORD *)v15)
  {
    v29 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v29 >= v9)
        v29 %= v9;
    }
    else
    {
      v29 &= v9 - 1;
    }
    v28 = (unint64_t *)(*(_QWORD *)v5 + 8 * v29);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(v5 + 40);
  return result;
}

void sub_19F3320D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<md::LabelMapTile>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::shared_ptr<md::LabelMapTile>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  int8x8_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  void **v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  const void *v36;
  size_t v37;
  const void *v38;
  unint64_t v39;
  const void *v40;
  size_t v41;
  const void *v42;
  char *v43;
  char *v44;
  int64_t v45;
  void (***v46)(unint64_t);
  int8x8_t v47;
  unint64_t v48;
  uint8x8_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  unint64_t *v58;
  unint64_t *v59;
  BOOL v60;
  _QWORD *v61;
  _QWORD *i;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  int v67;
  uint64_t v68;
  char *v69;
  _BYTE *v70;
  int64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  void (***v74)(_QWORD);
  uint64_t *v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD v84[2];
  __int128 v85;
  char *v86;
  char *v87;
  void *__p[2];
  _BYTE v89[24];
  _BYTE *v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_24;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v5 <= 0x99BED48DEFBBD82BLL)
      v7 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_24;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_24;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_22;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_24;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_24;
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_11;
LABEL_22:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    v14 = 0;
    goto LABEL_25;
  }
  v14 = *(_QWORD *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if (((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1) & 1) != 0)
    goto LABEL_153;
  v15 = *(_QWORD **)(a2 + 8);
  v16 = (int8x8_t)v15[1];
  if (!*(_QWORD *)&v16)
    goto LABEL_153;
  v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    v18 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v16 <= 0x99BED48DEFBBD82BLL)
      v18 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v16;
  }
  else
  {
    v18 = (*(_QWORD *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v19 = *(_QWORD **)(*v15 + 8 * v18);
  if (!v19)
    goto LABEL_153;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_153;
  if (v17.u32[0] < 2uLL)
  {
    v21 = *(_QWORD *)&v16 - 1;
    while (1)
    {
      v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_47;
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_153;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_153;
    }
  }
  while (2)
  {
    v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(_QWORD *)&v16)
        v22 %= *(_QWORD *)&v16;
      if (v22 != v18)
        goto LABEL_153;
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_153;
      continue;
    }
    break;
  }
LABEL_47:
  v24 = v20[5];
  if (*(_QWORD *)(v24 + 8) != 0x99BED48DEFBBD82BLL)
    goto LABEL_153;
  v25 = *(_QWORD *)(v24 + 32);
  if (!v25)
    goto LABEL_153;
  (*(void (**)(unint64_t *, _QWORD))(*a1 + 160))(a1, *(_QWORD *)(v24 + 32));
  v26 = (unint64_t *)a1[22];
  if (v26 == a1 + 23)
    goto LABEL_126;
  while (2)
  {
    v27 = (int8x8_t)a1[12];
    if (!*(_QWORD *)&v27)
      goto LABEL_120;
    v28 = v26[4];
    v29 = *(_QWORD *)(v28 + 120);
    v30 = (uint8x8_t)vcnt_s8(v27);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      v31 = *(_QWORD *)(v28 + 120);
      if (v29 >= *(_QWORD *)&v27)
        v31 = v29 % *(_QWORD *)&v27;
    }
    else
    {
      v31 = (*(_QWORD *)&v27 - 1) & v29;
    }
    v32 = *(void ***)(a1[11] + 8 * v31);
    if (!v32)
      goto LABEL_120;
    v33 = (unint64_t *)*v32;
    if (!*v32)
      goto LABEL_120;
    if (v30.u32[0] < 2uLL)
    {
      v34 = *(_QWORD *)&v27 - 1;
      while (1)
      {
        v39 = v33[1];
        if (v39 == v29)
        {
          if (*((unsigned __int8 *)v33 + 16) == *(unsigned __int8 *)(v28 + 16)
            && *((unsigned __int16 *)v33 + 12) == *(unsigned __int16 *)(v28 + 24)
            && v33[12] == *(_QWORD *)(v28 + 96))
          {
            v40 = (const void *)v33[4];
            v41 = v33[5] - (_QWORD)v40;
            v42 = *(const void **)(v28 + 32);
            if (v41 == *(_QWORD *)(v28 + 40) - (_QWORD)v42 && !memcmp(v40, v42, v41))
              goto LABEL_80;
          }
        }
        else if ((v39 & v34) != v31)
        {
          goto LABEL_120;
        }
        v33 = (unint64_t *)*v33;
        if (!v33)
          goto LABEL_120;
      }
    }
    while (2)
    {
      v35 = v33[1];
      if (v35 != v29)
      {
        if (v35 >= *(_QWORD *)&v27)
          v35 %= *(_QWORD *)&v27;
        if (v35 != v31)
          goto LABEL_120;
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v33 + 16) != *(unsigned __int8 *)(v28 + 16)
        || *((unsigned __int16 *)v33 + 12) != *(unsigned __int16 *)(v28 + 24)
        || v33[12] != *(_QWORD *)(v28 + 96)
        || (v36 = (const void *)v33[4],
            v37 = v33[5] - (_QWORD)v36,
            v38 = *(const void **)(v28 + 32),
            v37 != *(_QWORD *)(v28 + 40) - (_QWORD)v38)
        || memcmp(v36, v38, v37))
      {
LABEL_62:
        v33 = (unint64_t *)*v33;
        if (!v33)
          goto LABEL_120;
        continue;
      }
      break;
    }
LABEL_80:
    v44 = (char *)a1[34];
    v43 = (char *)a1[35];
    if (v44 != v43)
    {
      while (*(_QWORD *)v44 != v33[16])
      {
        v44 += 8;
        if (v44 == v43)
        {
          v44 = (char *)a1[35];
          break;
        }
      }
    }
    v45 = v43 - (v44 + 8);
    if (v43 != v44 + 8)
      memmove(v44, v44 + 8, v43 - (v44 + 8));
    a1[35] = (unint64_t)&v44[v45];
    v46 = (void (***)(unint64_t))v33[16];
    if (v46 && a1[30])
    {
      (**v46)(v33[16]);
      *v46 = (void (**)(unint64_t))a1[33];
      a1[33] = (unint64_t)v46;
    }
    v47 = (int8x8_t)a1[12];
    v48 = v33[1];
    v49 = (uint8x8_t)vcnt_s8(v47);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      if (v48 >= *(_QWORD *)&v47)
        v48 %= *(_QWORD *)&v47;
    }
    else
    {
      v48 &= *(_QWORD *)&v47 - 1;
    }
    v50 = a1[11];
    v51 = *(unint64_t **)(v50 + 8 * v48);
    do
    {
      v52 = v51;
      v51 = (unint64_t *)*v51;
    }
    while (v51 != v33);
    if (v52 == a1 + 13)
      goto LABEL_106;
    v53 = v52[1];
    if (v49.u32[0] > 1uLL)
    {
      if (v53 >= *(_QWORD *)&v47)
        v53 %= *(_QWORD *)&v47;
    }
    else
    {
      v53 &= *(_QWORD *)&v47 - 1;
    }
    if (v53 != v48)
    {
LABEL_106:
      if (!*v33)
        goto LABEL_107;
      v54 = *(_QWORD *)(*v33 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(_QWORD *)&v47)
          v54 %= *(_QWORD *)&v47;
      }
      else
      {
        v54 &= *(_QWORD *)&v47 - 1;
      }
      if (v54 != v48)
LABEL_107:
        *(_QWORD *)(v50 + 8 * v48) = 0;
    }
    v55 = *v33;
    if (*v33)
    {
      v56 = *(_QWORD *)(v55 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v56 >= *(_QWORD *)&v47)
          v56 %= *(_QWORD *)&v47;
      }
      else
      {
        v56 &= *(_QWORD *)&v47 - 1;
      }
      if (v56 != v48)
      {
        *(_QWORD *)(a1[11] + 8 * v56) = v52;
        v55 = *v33;
      }
    }
    *v52 = v55;
    *v33 = 0;
    --a1[14];
    if (*((_BYTE *)v33 + 112))
      *((_BYTE *)v33 + 112) = 0;
    v57 = (void *)v33[4];
    if (v57 != (void *)v33[6])
      free(v57);
    operator delete(v33);
LABEL_120:
    v58 = (unint64_t *)v26[1];
    if (v58)
    {
      do
      {
        v59 = v58;
        v58 = (unint64_t *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        v59 = (unint64_t *)v26[2];
        v60 = *v59 == (_QWORD)v26;
        v26 = v59;
      }
      while (!v60);
    }
    v26 = v59;
    if (v59 != a1 + 23)
      continue;
    break;
  }
LABEL_126:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    v61 = (_QWORD *)a1[34];
    for (i = (_QWORD *)a1[35]; v61 != i; ++v61)
      (*(void (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 184))(a1, v25, *v61);
  }
  v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
  v64 = (char *)a1[35];
  v86 = v63;
  v87 = v64;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    v85 = *(_OWORD *)__p;
    v65 = (char *)a1[34];
LABEL_131:
    while (v65 != v63)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v65) & 1) == 0)
      {
        v66 = v63 - 8;
        while (v66 != v65)
        {
          v63 = v66;
          v67 = (*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v66);
          v66 = v63 - 8;
          if (v67)
          {
            v68 = *(_QWORD *)v65;
            *(_QWORD *)v65 = *(_QWORD *)v63;
            v65 += 8;
            *(_QWORD *)v63 = v68;
            goto LABEL_131;
          }
        }
        v63 = v65;
        break;
      }
      v65 += 8;
    }
    v84[0] = a1[34];
    v84[1] = v63;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v86);
    (*(void (**)(unint64_t *, uint64_t, __int128 *))(*a1 + 112))(a1, a2, &v85);
    (*(void (**)(unint64_t *, uint64_t, _QWORD *))(*a1 + 128))(a1, a2, v84);
    v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
    v64 = (char *)a1[35];
    v86 = v63;
    v87 = v64;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v63, v64, (v64 - v63) >> 3);
  v69 = v86;
  if (v86 != v87)
  {
    v70 = (_BYTE *)a1[35];
    v71 = v70 - v87;
    if (v70 != v87)
      memmove(v86, v87, v70 - v87);
    a1[35] = (unint64_t)&v69[v71];
  }
  v73 = (_QWORD *)a1[37];
  v72 = (_QWORD *)a1[38];
  if (v72 != v73)
  {
    do
    {
      v74 = (void (***)(_QWORD))*v73;
      if (*v73 && a1[30])
      {
        (**v74)(*v73);
        *v74 = (void (**)(_QWORD))a1[33];
        a1[33] = (unint64_t)v74;
      }
      ++v73;
    }
    while (v73 != v72);
    v72 = (_QWORD *)a1[37];
  }
  a1[38] = (unint64_t)v72;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_153:
  v75 = (uint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  v76 = (unint64_t *)a1[10];
  if (v76)
  {
    v77 = *v75;
    v78 = (uint64_t *)v75[1];
    if (v76 == a1 + 7)
    {
      v90 = v89;
      (*(void (**)(unint64_t *, _BYTE *))(*v76 + 24))(v76, v89);
    }
    else
    {
      v90 = (_BYTE *)(*(uint64_t (**)(unint64_t *))(*v76 + 16))(v76);
    }
    v79 = 126 - 2 * __clz(((uint64_t)v78 - v77) >> 3);
    if (v78 == (uint64_t *)v77)
      v80 = 0;
    else
      v80 = v79;
    std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **,false>(v77, v78, (uint64_t)v89, v80, 1);
    v81 = v90;
    if (v90 == v89)
    {
      v82 = 4;
      v81 = v89;
LABEL_164:
      (*(void (**)(void))(*v81 + 8 * v82))();
    }
    else if (v90)
    {
      v82 = 5;
      goto LABEL_164;
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t *, uint64_t))(*a1 + 152))(a1, v75, a2);
}

void sub_19F332A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (uint64_t *)a1[34];
  v1 = (uint64_t *)a1[35];
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1)
        return v1;
    }
    v4 = v1 - 1;
    while (v4 != v2)
    {
      v1 = v4;
      v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, v5))
      {
        v6 = *v2;
        *v2++ = *v1;
        *v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

void md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineEnteringRenderables(md::LayoutContext *this@<X1>, uint64_t a2@<X0>, char ***a3@<X8>)
{
  _QWORD *v3;
  int8x8_t v4;
  md::LayoutContext *v5;
  char ***v6;
  uint8x8_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char **v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t **v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  _QWORD *i;
  uint64_t v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char **v58;
  char **v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t *v62;
  uint64_t *v63;
  _QWORD *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count **v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count **v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  __int128 v80;
  _QWORD *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  char **v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _BYTE *v94;
  char **v95;
  unint64_t v96;
  uint64_t v97;
  _OWORD *v98;
  __int128 *v99;
  uint64_t v100;
  __int128 v101;
  char *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  BOOL v112;
  uint64_t v113;
  geo::read_write_lock *v114;
  const char *v115;
  malloc_zone_t *zone;
  uint64_t v117;
  geo::read_write_lock *v118;
  const char *v119;
  malloc_zone_t *v120;
  uint64_t v121;
  geo::read_write_lock *v122;
  const char *v123;
  malloc_zone_t *v124;
  uint64_t v125;
  geo::read_write_lock *v126;
  const char *v127;
  malloc_zone_t *v128;
  md::LayoutContext *v129;
  char ***v130;
  uint64_t *v131;
  char *v132;
  _QWORD *v133;
  uint64_t v135;
  std::__shared_weak_count *v136;
  __int16 v137[2];
  uint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  _QWORD *v148;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    return;
  v5 = this;
  v6 = a3;
  v7 = (uint8x8_t)vcnt_s8(v4);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = 0x3070CB6B3C7F21D3;
    if (*(_QWORD *)&v4 <= 0x3070CB6B3C7F21D3uLL)
      v8 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v4;
  }
  else
  {
    v8 = (*(_QWORD *)&v4 - 1) & 0x3070CB6B3C7F21D3;
  }
  v9 = *(_QWORD **)(*v3 + 8 * v8);
  if (!v9)
    return;
  v10 = (_QWORD *)*v9;
  if (!v10)
    return;
  if (v7.u32[0] < 2uLL)
  {
    v11 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v13 = v10[1];
      if (v13 == 0x3070CB6B3C7F21D3)
      {
        if (v10[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_22;
      }
      else if ((v13 & v11) != v8)
      {
        return;
      }
      v10 = (_QWORD *)*v10;
      if (!v10)
        return;
    }
  }
  while (1)
  {
    v12 = v10[1];
    if (v12 == 0x3070CB6B3C7F21D3)
      break;
    if (v12 >= *(_QWORD *)&v4)
      v12 %= *(_QWORD *)&v4;
    if (v12 != v8)
      return;
LABEL_11:
    v10 = (_QWORD *)*v10;
    if (!v10)
      return;
  }
  if (v10[2] != 0x3070CB6B3C7F21D3)
    goto LABEL_11;
LABEL_22:
  v14 = v10[5];
  if (*(_QWORD *)(v14 + 8) == 0x3070CB6B3C7F21D3)
  {
    v131 = *(uint64_t **)(v14 + 32);
    if (v131)
    {
      v15 = *(_QWORD *)(a2 + 192);
      if (v15)
      {
        if (v15 >> 61)
          abort();
        v16 = v15;
        v17 = (char **)operator new(8 * v15);
        *v6 = v17;
        v6[1] = v17;
        v6[2] = &v17[v16];
      }
      v18 = *(_QWORD **)(a2 + 176);
      if (v18 != (_QWORD *)(a2 + 184))
      {
        v129 = v5;
        v130 = v6;
        do
        {
          v20 = v18[4];
          v19 = (std::__shared_weak_count *)v18[5];
          v133 = v18;
          v139 = v20;
          v140 = v19;
          if (v19)
          {
            p_shared_owners = (unint64_t *)&v19->__shared_owners_;
            do
              v22 = __ldxr(p_shared_owners);
            while (__stxr(v22 + 1, p_shared_owners));
          }
          v137[0] = *(_WORD *)(v20 + 168);
          v138 = *(_QWORD *)(v20 + 172);
          v23 = *(double *)(v20 + 600);
          v24 = *(double *)(v20 + 608);
          md::LayoutContext::frameState(v5);
          v26 = *(unsigned __int8 *)(v25 + 128);
          md::GeometryContext::transformConstantData((double *)&v135, v131, (unsigned __int8 *)v137, v26, v23, v24);
          v27 = a2;
          v28 = *((_BYTE *)v133 + 48);
          v29 = *(char **)(a2 + 264);
          if (!v29)
          {
            v30 = (char *)malloc_type_malloc(*(_QWORD *)(a2 + 256), 0x160B39uLL);
            v31 = v30;
            v32 = (uint64_t **)(a2 + 232);
            while (1)
            {
              v33 = *v32;
              v34 = v32;
              if (!*v32)
                break;
              while (1)
              {
                v32 = (uint64_t **)v33;
                v35 = v33[4];
                if ((unint64_t)v30 < v35)
                  break;
                if (v35 >= (unint64_t)v30)
                  goto LABEL_43;
                v33 = v32[1];
                if (!v33)
                {
                  v34 = v32 + 1;
                  goto LABEL_40;
                }
              }
            }
LABEL_40:
            v36 = (uint64_t *)operator new(0x28uLL);
            v36[4] = (uint64_t)v31;
            *v36 = 0;
            v36[1] = 0;
            v36[2] = (uint64_t)v32;
            *v34 = v36;
            v37 = **(_QWORD **)(a2 + 224);
            if (v37)
            {
              *(_QWORD *)(a2 + 224) = v37;
              v36 = *v34;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 232), v36);
            ++*(_QWORD *)(a2 + 240);
LABEL_43:
            v29 = *(char **)(a2 + 264);
            v38 = 408 * *(_QWORD *)(a2 + 248) - 408;
            if ((v38 & 0x8000000000000000) == 0)
            {
              v39 = &v31[v38];
              do
              {
                *(_QWORD *)v39 = v29;
                v40 = v39 - 408;
                v29 = v39;
                v39 = v40;
              }
              while (v40 >= v31);
              v29 = v40 + 408;
            }
            v27 = a2;
            *(_QWORD *)(a2 + 264) = v29;
            v20 = v139;
            v19 = v140;
          }
          *(_QWORD *)(v27 + 264) = *(_QWORD *)v29;
          if (v19)
          {
            v41 = (unint64_t *)&v19->__shared_owners_;
            do
              v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
          }
          md::BaseMapTileDataRenderable::BaseMapTileDataRenderable((uint64_t)v29, v20, (uint64_t)v19, v28, (v26 - 1) < 3u, &v135);
          if (v19)
          {
            v43 = (unint64_t *)&v19->__shared_owners_;
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          *(_QWORD *)v29 = &off_1E426F2A0;
          v45 = v139;
          v46 = v140;
          *((_QWORD *)v29 + 48) = v139;
          *((_QWORD *)v29 + 49) = v46;
          if (v46)
          {
            v47 = (unint64_t *)&v46->__shared_owners_;
            do
              v48 = __ldxr(v47);
            while (__stxr(v48 + 1, v47));
          }
          *(_QWORD *)v29 = &off_1E426F460;
          *((_QWORD *)v29 + 50) = 0;
          if (*(_QWORD *)(v45 + 808))
          {
            v132 = v29;
            v141 = 0;
            v142 = 0;
            {
              v113 = operator new();
              *(_QWORD *)(v113 + 16) = 0x5ED09DD50000000FLL;
              *(_QWORD *)(v113 + 24) = "VectorKitLabels";
              *(_OWORD *)(v113 + 32) = xmmword_19FFB2E80;
              *(_QWORD *)v113 = &off_1E42B5668;
              *(_QWORD *)(v113 + 8) = "VectorKitLabels";
              *(_OWORD *)(v113 + 72) = 0u;
              *(_OWORD *)(v113 + 88) = 0u;
              *(_OWORD *)(v113 + 104) = 0u;
              *(_OWORD *)(v113 + 120) = 0u;
              *(_OWORD *)(v113 + 136) = 0u;
              *(_OWORD *)(v113 + 152) = 0u;
              *(_OWORD *)(v113 + 168) = 0u;
              *(_OWORD *)(v113 + 184) = 0u;
              *(_OWORD *)(v113 + 200) = 0u;
              *(_OWORD *)(v113 + 216) = 0u;
              *(_OWORD *)(v113 + 232) = 0u;
              *(_QWORD *)(v113 + 248) = 0;
              *(_OWORD *)(v113 + 56) = 0u;
              v114 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v113 + 56), 0);
              if ((_DWORD)v114)
                geo::read_write_lock::logFailure(v114, (uint64_t)"initialization", v115);
              zone = malloc_create_zone(0, 0);
              *(_QWORD *)(v113 + 48) = zone;
              malloc_set_zone_name(zone, "VectorKitLabels");
              *(_QWORD *)(v113 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              mdm::Allocator::instance(void)::alloc = v113;
            }
            v143 = mdm::Allocator::instance(void)::alloc;
            v144 = 0;
            {
              v117 = operator new();
              *(_QWORD *)(v117 + 16) = 0x5ED09DD50000000FLL;
              *(_QWORD *)(v117 + 24) = "VectorKitLabels";
              *(_OWORD *)(v117 + 32) = xmmword_19FFB2E80;
              *(_QWORD *)v117 = &off_1E42B5668;
              *(_QWORD *)(v117 + 8) = "VectorKitLabels";
              *(_OWORD *)(v117 + 72) = 0u;
              *(_OWORD *)(v117 + 88) = 0u;
              *(_OWORD *)(v117 + 104) = 0u;
              *(_OWORD *)(v117 + 120) = 0u;
              *(_OWORD *)(v117 + 136) = 0u;
              *(_OWORD *)(v117 + 152) = 0u;
              *(_OWORD *)(v117 + 168) = 0u;
              *(_OWORD *)(v117 + 184) = 0u;
              *(_OWORD *)(v117 + 200) = 0u;
              *(_OWORD *)(v117 + 216) = 0u;
              *(_OWORD *)(v117 + 232) = 0u;
              *(_QWORD *)(v117 + 248) = 0;
              *(_OWORD *)(v117 + 56) = 0u;
              v118 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v117 + 56), 0);
              if ((_DWORD)v118)
                geo::read_write_lock::logFailure(v118, (uint64_t)"initialization", v119);
              v120 = malloc_create_zone(0, 0);
              *(_QWORD *)(v117 + 48) = v120;
              malloc_set_zone_name(v120, "VectorKitLabels");
              *(_QWORD *)(v117 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              mdm::Allocator::instance(void)::alloc = v117;
            }
            v145 = mdm::Allocator::instance(void)::alloc;
            v146 = 0;
            v147 = 1065353216;
            for (i = *(_QWORD **)(v139 + 792); i; i = (_QWORD *)*i)
            {
              v60 = i[2];
              v148 = i + 2;
              v61 = std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const&>,std::tuple<>>((uint64_t)&v141, v60, &v148);
              v63 = (uint64_t *)i[4];
              v62 = (uint64_t *)i[5];
              if (v63 != v62)
              {
                v64 = v61;
                do
                {
                  v65 = (std::__shared_weak_count *)operator new(0x98uLL);
                  v65->__shared_owners_ = 0;
                  v65->__shared_weak_owners_ = 0;
                  v65->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCD60;
                  v66 = v65 + 1;
                  md::TrailJunctionRenderable::TrailJunctionRenderable((uint64_t)&v65[1], v63);
                  v67 = (std::__shared_weak_count **)v64[5];
                  v68 = v64[6];
                  if ((unint64_t)v67 >= v68)
                  {
                    v70 = v64[4];
                    v71 = ((uint64_t)v67 - v70) >> 4;
                    v72 = v71 + 1;
                    if ((unint64_t)(v71 + 1) >> 60)
                      abort();
                    v73 = v68 - v70;
                    if (v73 >> 3 > v72)
                      v72 = v73 >> 3;
                    if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF0)
                      v74 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v74 = v72;
                    if (v74)
                    {
                      v75 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v64[7] + 16))(v64[7], 16 * v74, 8);
                      v76 = (std::__shared_weak_count **)(v75 + 16 * v71);
                      v77 = v75 + 16 * v74;
                      if (v75)
                      {
                        *v76 = v66;
                        v76[1] = v65;
                        v65 = 0;
                      }
                    }
                    else
                    {
                      v77 = 0;
                      v76 = (std::__shared_weak_count **)(16 * v71);
                    }
                    v69 = v76 + 2;
                    v78 = (_QWORD *)v64[4];
                    v79 = (_QWORD *)v64[5];
                    if (v79 == v78)
                    {
                      v64[4] = v76;
                      v64[5] = v69;
                      v82 = v64[6];
                      v64[6] = v77;
                    }
                    else
                    {
                      do
                      {
                        v80 = *((_OWORD *)v79 - 1);
                        v79 -= 2;
                        *((_OWORD *)v76 - 1) = v80;
                        v76 -= 2;
                        *v79 = 0;
                        v79[1] = 0;
                      }
                      while (v79 != v78);
                      v79 = (_QWORD *)v64[4];
                      v81 = (_QWORD *)v64[5];
                      v64[4] = v76;
                      v64[5] = v69;
                      v82 = v64[6];
                      v64[6] = v77;
                      while (v81 != v79)
                      {
                        v83 = (std::__shared_weak_count *)*(v81 - 1);
                        if (v83)
                        {
                          v84 = (unint64_t *)&v83->__shared_owners_;
                          do
                            v85 = __ldaxr(v84);
                          while (__stlxr(v85 - 1, v84));
                          if (!v85)
                          {
                            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                            std::__shared_weak_count::__release_weak(v83);
                          }
                        }
                        v81 -= 2;
                      }
                    }
                    if (v79)
                      (*(void (**)(_QWORD, _QWORD *, uint64_t))(*(_QWORD *)v64[7] + 40))(v64[7], v79, v82 - (_QWORD)v79);
                  }
                  else
                  {
                    if (v67)
                    {
                      *v67 = v66;
                      v67[1] = v65;
                      v65 = 0;
                    }
                    v69 = v67 + 2;
                  }
                  v64[5] = v69;
                  if (v65)
                  {
                    v86 = (unint64_t *)&v65->__shared_owners_;
                    do
                      v87 = __ldaxr(v86);
                    while (__stlxr(v87 - 1, v86));
                    if (!v87)
                    {
                      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                      std::__shared_weak_count::__release_weak(v65);
                    }
                  }
                  v63 = (uint64_t *)((char *)v63 + 12);
                }
                while (v63 != v62);
              }
            }
            v52 = operator new();
            v6 = v130;
            std::unordered_map<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,geo::StdAllocator<std::pair<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>> const,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,mdm::Allocator>>::unordered_map(v52, (uint64_t)&v141);
            v5 = v129;
            *(_QWORD *)(v52 + 56) = 0;
            *(_QWORD *)(v52 + 64) = 0;
            {
              v121 = operator new();
              *(_QWORD *)(v121 + 16) = 0x5ED09DD50000000FLL;
              *(_QWORD *)(v121 + 24) = "VectorKitLabels";
              *(_OWORD *)(v121 + 32) = xmmword_19FFB2E80;
              *(_QWORD *)v121 = &off_1E42B5668;
              *(_QWORD *)(v121 + 8) = "VectorKitLabels";
              *(_OWORD *)(v121 + 72) = 0u;
              *(_OWORD *)(v121 + 88) = 0u;
              *(_OWORD *)(v121 + 104) = 0u;
              *(_OWORD *)(v121 + 120) = 0u;
              *(_OWORD *)(v121 + 136) = 0u;
              *(_OWORD *)(v121 + 152) = 0u;
              *(_OWORD *)(v121 + 168) = 0u;
              *(_OWORD *)(v121 + 184) = 0u;
              *(_OWORD *)(v121 + 200) = 0u;
              *(_OWORD *)(v121 + 216) = 0u;
              *(_OWORD *)(v121 + 232) = 0u;
              *(_QWORD *)(v121 + 248) = 0;
              *(_OWORD *)(v121 + 56) = 0u;
              v122 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v121 + 56), 0);
              if ((_DWORD)v122)
                geo::read_write_lock::logFailure(v122, (uint64_t)"initialization", v123);
              v124 = malloc_create_zone(0, 0);
              *(_QWORD *)(v121 + 48) = v124;
              malloc_set_zone_name(v124, "VectorKitLabels");
              *(_QWORD *)(v121 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              mdm::Allocator::instance(void)::alloc = v121;
              v5 = v129;
              v6 = v130;
            }
            *(_QWORD *)(v52 + 72) = mdm::Allocator::instance(void)::alloc;
            *(_QWORD *)(v52 + 80) = 0;
            {
              v125 = operator new();
              *(_QWORD *)(v125 + 16) = 0x5ED09DD50000000FLL;
              *(_QWORD *)(v125 + 24) = "VectorKitLabels";
              *(_OWORD *)(v125 + 32) = xmmword_19FFB2E80;
              *(_QWORD *)v125 = &off_1E42B5668;
              *(_QWORD *)(v125 + 8) = "VectorKitLabels";
              *(_OWORD *)(v125 + 72) = 0u;
              *(_OWORD *)(v125 + 88) = 0u;
              *(_OWORD *)(v125 + 104) = 0u;
              *(_OWORD *)(v125 + 120) = 0u;
              *(_OWORD *)(v125 + 136) = 0u;
              *(_OWORD *)(v125 + 152) = 0u;
              *(_OWORD *)(v125 + 168) = 0u;
              *(_OWORD *)(v125 + 184) = 0u;
              *(_OWORD *)(v125 + 200) = 0u;
              *(_OWORD *)(v125 + 216) = 0u;
              *(_OWORD *)(v125 + 232) = 0u;
              *(_QWORD *)(v125 + 248) = 0;
              *(_OWORD *)(v125 + 56) = 0u;
              v126 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v125 + 56), 0);
              if ((_DWORD)v126)
                geo::read_write_lock::logFailure(v126, (uint64_t)"initialization", v127);
              v128 = malloc_create_zone(0, 0);
              *(_QWORD *)(v125 + 48) = v128;
              malloc_set_zone_name(v128, "VectorKitLabels");
              *(_QWORD *)(v125 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              mdm::Allocator::instance(void)::alloc = v125;
              v5 = v129;
              v6 = v130;
            }
            *(_QWORD *)(v52 + 88) = mdm::Allocator::instance(void)::alloc;
            *(_QWORD *)(v52 + 96) = 0;
            *(_DWORD *)(v52 + 104) = 1065353216;
            *(_QWORD *)(v52 + 112) = 0;
            v29 = v132;
            v55 = *((_QWORD *)v132 + 50);
            *((_QWORD *)v132 + 50) = v52;
            if (v55)
              std::default_delete<md::TrailJunctionsResource>::operator()[abi:nn180100](v55);
            std::__hash_table<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::__unordered_map_hasher<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,std::__unordered_map_equal<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,std::equal_to<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,std::hash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,true>,geo::StdAllocator<std::__hash_value_type<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::vector<std::shared_ptr<md::TrailJunctionRenderable>,geo::StdAllocator<std::shared_ptr<md::TrailJunctionRenderable>,mdm::Allocator>>>,mdm::Allocator>>::__deallocate_node((uint64_t)&v141, v144);
            v56 = v141;
            v141 = 0;
            if (v56)
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v143 + 40))(v143, v56, 8 * v142);
          }
          v58 = v6[1];
          v57 = (unint64_t)v6[2];
          if ((unint64_t)v58 >= v57)
          {
            v88 = *v6;
            v89 = (char *)v58 - (char *)*v6;
            v90 = v89 >> 3;
            v91 = (v89 >> 3) + 1;
            if (v91 >> 61)
              abort();
            v92 = v57 - (_QWORD)v88;
            if (v92 >> 2 > v91)
              v91 = v92 >> 2;
            if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
              v93 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v93 = v91;
            if (v93)
            {
              if (v93 >> 61)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v94 = operator new(8 * v93);
            }
            else
            {
              v94 = 0;
            }
            v95 = (char **)&v94[8 * v90];
            *v95 = v29;
            v59 = v95 + 1;
            if (v58 == v88)
            {
              v88 = v58;
            }
            else
            {
              v96 = (char *)(v58 - 1) - (char *)v88;
              if (v96 < 0x58)
                goto LABEL_167;
              if ((unint64_t)((char *)v58 - &v94[v89]) < 0x20)
                goto LABEL_167;
              v97 = (v96 >> 3) + 1;
              v98 = &v94[8 * v90 - 16];
              v99 = (__int128 *)(v58 - 2);
              v100 = v97 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v101 = *v99;
                *(v98 - 1) = *(v99 - 1);
                *v98 = v101;
                v98 -= 2;
                v99 -= 2;
                v100 -= 4;
              }
              while (v100);
              v95 -= v97 & 0x3FFFFFFFFFFFFFFCLL;
              v58 -= v97 & 0x3FFFFFFFFFFFFFFCLL;
              if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_167:
                do
                {
                  v102 = *--v58;
                  *--v95 = v102;
                }
                while (v58 != v88);
                v88 = *v6;
              }
            }
            *v6 = v95;
            v6[1] = v59;
            v6[2] = (char **)&v94[8 * v93];
            if (v88)
              operator delete(v88);
          }
          else
          {
            *v58 = v29;
            v59 = v58 + 1;
          }
          v6[1] = v59;
          v103 = v136;
          if (v136)
          {
            v104 = (unint64_t *)&v136->__shared_owners_;
            do
              v105 = __ldaxr(v104);
            while (__stlxr(v105 - 1, v104));
            if (!v105)
            {
              ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
              std::__shared_weak_count::__release_weak(v103);
            }
          }
          v106 = v140;
          if (v140)
          {
            v107 = (unint64_t *)&v140->__shared_owners_;
            do
              v108 = __ldaxr(v107);
            while (__stlxr(v108 - 1, v107));
            if (!v108)
            {
              ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
              std::__shared_weak_count::__release_weak(v106);
            }
          }
          v109 = v133;
          v110 = (_QWORD *)v133[1];
          if (v110)
          {
            do
            {
              v111 = v110;
              v110 = (_QWORD *)*v110;
            }
            while (v110);
          }
          else
          {
            do
            {
              v111 = (_QWORD *)v109[2];
              v112 = *v111 == (_QWORD)v109;
              v109 = v111;
            }
            while (!v112);
          }
          v18 = v111;
        }
        while (v111 != (_QWORD *)(a2 + 184));
      }
    }
  }
}

void sub_19F3337D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  void *v28;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  v28 = *(void **)v26;
  if (*(_QWORD *)v26)
  {
    *(_QWORD *)(v26 + 8) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(a1);
}

_QWORD **md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  unsigned __int16 *i;
  unsigned __int16 *v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD *v33[3];
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = (uint64_t *)(a1 + 128);
  v5 = *(_OWORD *)(a1 + 128);
  v7 = (_QWORD *)(a1 + 160);
  v6 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 136) = v6;
  v8 = a1 + 136;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 152) = v5;
  v9 = *(_QWORD *)(a1 + 144);
  v10 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 144) = v10;
  *(_QWORD *)(a1 + 168) = v9;
  v11 = (uint64_t *)(v6 + 16);
  if (!v10)
    v11 = (uint64_t *)(a1 + 128);
  *v11 = v8;
  v12 = (_QWORD *)(*v7 + 16);
  if (!v9)
    v12 = (_QWORD *)(a1 + 152);
  v32 = a1 + 160;
  *v12 = v7;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)v8);
  *v4 = v8;
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  v14 = *(unsigned __int16 **)(v8 + 184);
  for (i = *(unsigned __int16 **)(v8 + 192); v14 != i; ++v14)
  {
    v16 = *v14;
    v17 = *a2;
    if ((v18 & 1) == 0
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
    }
    v19 = *(unsigned __int16 **)(v17 + 48);
    v20 = *(unsigned __int16 **)(v17 + 56);
    if (v19 == v20)
      goto LABEL_7;
    v21 = *(unsigned __int16 **)(v17 + 48);
    while (*v21 != v16)
    {
      v21 += 16;
      if (v21 == v20)
        goto LABEL_7;
    }
    if (v21 == v20)
    {
LABEL_7:
      v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v19 != v16)
      {
        v19 += 16;
        if (v19 == v20)
        {
          v19 = *(unsigned __int16 **)(v17 + 56);
          break;
        }
      }
      v15 = (uint64_t *)(v19 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (_QWORD *)*v15, v15 + 1);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  *(_QWORD *)(a1 + 176) = a1 + 184;
  v22 = (_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v23 = (_QWORD *)(a1 + 208);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 208));
  *(_QWORD *)(a1 + 200) = a1 + 208;
  v24 = (_QWORD *)(a1 + 200);
  *v23 = 0;
  v24[2] = 0;
  v25 = *(v24 - 9);
  v26 = *(v24 - 6);
  v27 = *v22;
  v38 = v8;
  v39 = v25;
  v36 = v32;
  v37 = v26;
  v34 = v22;
  v35 = v27;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v33, (uint64_t)&v39, &v38, (uint64_t)&v37, &v36, &v34);
  v28 = *(v24 - 6);
  v29 = *(v24 - 9);
  v30 = *v24;
  v38 = v32;
  v39 = v28;
  v36 = v8;
  v37 = v29;
  v34 = v24;
  v35 = v30;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v33, (uint64_t)&v39, &v38, (uint64_t)&v37, &v36, &v34);
}

void md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  float v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  _QWORD *v25;
  unint64_t v26;
  float32x2_t *v27;
  float64x2_t v28[8];

  v3 = *(_QWORD **)(a3 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_24;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_24;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_24;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_22;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_24;
LABEL_11:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_24;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_11;
LABEL_22:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v13 = 0;
LABEL_25:
  v14 = *a2;
  v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      v16 = *v14++;
      v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      v18 = vcvt_f32_f64(v28[1]);
      v19 = vcvt_f32_f64(v28[2]);
      v20 = vcvt_f32_f64(v28[3]);
      v21 = vcvt_f32_f64(v28[4]);
      v22 = vcvt_f32_f64(v28[5]);
      v23 = vcvt_f32_f64(v28[6]);
      v24 = vcvt_f32_f64(v28[7]);
      v25 = *(_QWORD **)(v16 + 216);
      v26 = v25[1];
      v27 = (float32x2_t *)v25[9];
      *v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26)
        v26 = v25[8];
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

void md::RoadRenderLayer::renderablesWillEnterView(uint64_t a1, __n128 a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  md::RoadLayer *v8;
  md::RoadLayer *v9;

  v4 = *a4;
  v5 = a4[1];
  if (*a4 != v5)
  {
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)v4 + 384);
      v8 = *(md::RoadLayer **)(v7 + 720);
      if (v8)
        a2 = md::RoadStyling::subscribeLayer((md::RoadStyling *)*(_QWORD *)(a1 + 480), v8, a2);
      v9 = *(md::RoadLayer **)(v7 + 736);
      if (v9)
        a2 = md::RoadStyling::subscribeLayer((md::RoadStyling *)*(_QWORD *)(a1 + 480), v9, a2);
      v4 += 8;
    }
    while (v4 != v5);
  }
}

void VKAnimationCurveEaseOut_block_invoke_6()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CD27D0], "functionWithName:", *MEMORY[0x1E0CD3050]);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)_ZZUb3_E14timingFunction;
  _ZZUb3_E14timingFunction = v0;

}

void ___ZN2md16LabelWorldTraits29initializeGlobalDebugSettingsEv_block_invoke()
{
  id v0;

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "labelStyleOverridesDisabled");
  md::DebugStreamingPOIFeatureID = GEOConfigGetUint64();

}

void sub_19F333EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void gss::StylesheetManager<gss::ScenePropertyID>::styleQueryForFeatureAttributes(unint64_t *a1, uint64_t a2, gss::FeatureAttributeSet *a3, gss::QueryOverrides *a4)
{
  pthread_rwlock_t *v6;
  geo::read_write_lock *v7;
  const char *v8;
  unsigned __int16 *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  int8x8_t v17;
  unint64_t v18;
  uint8x8_t v19;
  unint64_t v20;
  uint64_t ***v21;
  uint64_t **v22;
  unsigned __int16 *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  char *v27;
  unint64_t v29;
  uint64_t *v30;
  unsigned __int16 *v31;
  uint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  geo::read_write_lock *v40;
  const char *v41;
  std::__shared_weak_count *v42;
  gss::Allocator *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  geo::read_write_lock *v52;
  const char *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  geo::read_write_lock *v72;
  const char *v73;
  unsigned __int16 *v74;
  unint64_t v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  unint64_t v82;
  unint64_t v83;
  uint8x8_t v84;
  uint64_t ***v85;
  uint64_t **v86;
  unsigned __int16 *v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  char *v91;
  unint64_t v93;
  uint64_t *v94;
  unsigned __int16 *v95;
  uint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  float v102;
  float v103;
  _BOOL8 v104;
  unint64_t v105;
  unint64_t v106;
  size_t prime;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  size_t v113;
  size_t v114;
  size_t v115;
  _QWORD *i;
  size_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint8x8_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  size_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  geo::read_write_lock *v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  __int128 v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  _DWORD *v152;
  unsigned __int16 v153;
  unsigned __int16 v154;
  unsigned __int16 v155;
  char v156;
  __int128 v157;
  char v158;

  gss::StyleKey::StyleKey((gss::StyleKey *)&v148, a3, a4);
  v6 = (pthread_rwlock_t *)(a2 + 120);
  v7 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(a2 + 120));
  if ((_DWORD)v7)
    geo::read_write_lock::logFailure(v7, (uint64_t)"read lock", v8);
  v10 = (v149 - v148) >> 3;
  if (v149 != v148)
  {
    v11 = v148;
    do
    {
      v12 = ((v10 << 6) - 0x61C8864680B583EBLL + (v10 >> 2) + *(unsigned int *)v11) ^ v10;
      v10 = (*((unsigned __int16 *)v11 + 2) - 0x61C8864680B583EBLL + (v12 << 6) + (v12 >> 2)) ^ v12;
      v11 += 8;
    }
    while (v11 != v149);
  }
  if (v154)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    do
    {
      if (v15 < v154)
      {
        v14 = &v152[v15];
        v9 = (unsigned __int16 *)((char *)v152 + 2 * v15 + v153);
      }
      v13 ^= (*v9
            - 0x61C8864680B583EBLL
            + ((((v13 << 6) - 0x61C8864680B583EBLL + (v13 >> 2) + *v14) ^ v13) << 6)
            + ((((v13 << 6) - 0x61C8864680B583EBLL + (v13 >> 2) + *v14) ^ v13) >> 2)) ^ ((v13 << 6)
                                                                                       - 0x61C8864680B583EBLL
                                                                                       + (v13 >> 2)
                                                                                       + *v14);
      v16 = v15 + 1;
      if (v15 + 1 < v154)
        ++v15;
      else
        v15 = v154;
    }
    while (v16 < v154);
    v17 = *(int8x8_t *)(a2 + 40);
    if (!*(_QWORD *)&v17)
      goto LABEL_58;
  }
  else
  {
    v13 = 0;
    v17 = *(int8x8_t *)(a2 + 40);
    if (!*(_QWORD *)&v17)
      goto LABEL_58;
  }
  v18 = v13 ^ v10;
  v19 = (uint8x8_t)vcnt_s8(v17);
  v19.i16[0] = vaddlv_u8(v19);
  if (v19.u32[0] > 1uLL)
  {
    v20 = v18;
    if (v18 >= *(_QWORD *)&v17)
      v20 = v18 % *(_QWORD *)&v17;
  }
  else
  {
    v20 = (*(_QWORD *)&v17 - 1) & v18;
  }
  v21 = *(uint64_t ****)(*(_QWORD *)(a2 + 32) + 8 * v20);
  if (!v21)
    goto LABEL_58;
  v22 = *v21;
  if (!*v21)
    goto LABEL_58;
  v23 = (unsigned __int16 *)((char *)v152 + v153);
  while (1)
  {
    v24 = (unint64_t)v22[1];
    if (v24 != v18)
    {
      if (v19.u32[0] <= 1uLL)
      {
        v24 &= *(_QWORD *)&v17 - 1;
      }
      else if (v24 >= *(_QWORD *)&v17)
      {
        v24 %= *(_QWORD *)&v17;
      }
      if (v24 != v20)
        goto LABEL_58;
      goto LABEL_26;
    }
    v26 = v22[2];
    v25 = v22[3];
    if ((char *)v25 - (char *)v26 == v149 - v148)
    {
      if (v26 != v25)
      {
        v27 = v148;
        while (*(_DWORD *)v26 == *(_DWORD *)v27 && *((unsigned __int16 *)v26 + 2) == *((unsigned __int16 *)v27 + 2))
        {
          ++v26;
          v27 += 8;
          if (v26 == v25)
            goto LABEL_37;
        }
        goto LABEL_26;
      }
LABEL_37:
      v29 = *((unsigned __int16 *)v22 + 29);
      if ((_DWORD)v29 == v154)
      {
        if (!v154)
          goto LABEL_51;
        v30 = v22[6];
        if (*(_DWORD *)v30 == *v152)
        {
          v31 = (unsigned __int16 *)((char *)v30 + *((unsigned __int16 *)v22 + 28));
          if (*v31 == *v23)
            break;
        }
      }
    }
LABEL_26:
    v22 = (uint64_t **)*v22;
    if (!v22)
      goto LABEL_58;
  }
  v32 = 1;
  while (v29 != v32)
  {
    v33 = v32;
    if (*((_DWORD *)v30 + v32) == v152[v32])
    {
      ++v32;
      if (v31[v33] == v23[v33])
        continue;
    }
    if (v33 < v29)
      goto LABEL_26;
    break;
  }
  if (v22)
  {
LABEL_51:
    *a1 = 0;
    a1[1] = 0;
    v34 = (std::__shared_weak_count *)v22[9];
    if (v34)
    {
      v35 = std::__shared_weak_count::lock(v34);
      a1[1] = (unint64_t)v35;
      if (v35)
      {
        v36 = (unint64_t)v22[8];
        *a1 = v36;
        if (v36)
          goto LABEL_213;
        v37 = v35;
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v39 = __ldaxr(p_shared_owners);
        while (__stlxr(v39 - 1, p_shared_owners));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
    }
  }
LABEL_58:
  v40 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a2 + 120));
  if ((_DWORD)v40)
    geo::read_write_lock::logFailure(v40, (uint64_t)"unlock", v41);
  v42 = *(std::__shared_weak_count **)(a2 + 8);
  *(_QWORD *)&v147 = *(_QWORD *)a2;
  if (!v42 || (v43 = (gss::Allocator *)std::__shared_weak_count::lock(v42), (*((_QWORD *)&v147 + 1) = v43) == 0))
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
    __break(1u);
    return;
  }
  v44 = gss::Allocator::instance(v43);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v44 + 16))(v44, 352, 8);
  v46 = v45;
  *(_OWORD *)(v45 + 8) = 0u;
  *(_QWORD *)v45 = &off_1E42E5AB0;
  *(_QWORD *)(v45 + 24) = v44;
  v157 = v147;
  v47 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
  do
    v48 = __ldxr(v47);
  while (__stxr(v48 + 1, v47));
  v49 = *((_QWORD *)&v157 + 1);
  *(_QWORD *)(v45 + 48) = *((_QWORD *)&v157 + 1);
  *(_QWORD *)(v45 + 32) = &off_1E42C2A80;
  *(_QWORD *)(v45 + 40) = v147;
  if (v49)
  {
    v50 = (unint64_t *)(v49 + 16);
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  *(_OWORD *)(v45 + 56) = 0u;
  *(_OWORD *)(v45 + 232) = 0u;
  *(_OWORD *)(v45 + 248) = 0u;
  *(_OWORD *)(v45 + 200) = 0u;
  *(_OWORD *)(v45 + 216) = 0u;
  *(_OWORD *)(v45 + 168) = 0u;
  *(_OWORD *)(v45 + 184) = 0u;
  *(_OWORD *)(v45 + 136) = 0u;
  *(_OWORD *)(v45 + 152) = 0u;
  *(_OWORD *)(v45 + 104) = 0u;
  *(_OWORD *)(v45 + 120) = 0u;
  *(_OWORD *)(v45 + 72) = 0u;
  *(_OWORD *)(v45 + 88) = 0u;
  v52 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v45 + 64), 0);
  if ((_DWORD)v52)
    geo::read_write_lock::logFailure(v52, (uint64_t)"initialization", v53);
  if (!(_QWORD)v147)
  {
    v62 = 0;
    goto LABEL_90;
  }
  v54 = *(_QWORD *)(v147 + 520);
  v55 = *(std::__shared_weak_count **)(v147 + 528);
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  if (!v54)
  {
    v62 = 0;
    goto LABEL_84;
  }
  v58 = *(_QWORD *)(v147 + 520);
  v59 = *(std::__shared_weak_count **)(v147 + 528);
  if (!v59)
  {
    v62 = *(_DWORD *)(v58 + 248) - 1;
    if (v55)
      goto LABEL_85;
    goto LABEL_90;
  }
  v60 = (unint64_t *)&v59->__shared_owners_;
  do
    v61 = __ldxr(v60);
  while (__stxr(v61 + 1, v60));
  v62 = *(_DWORD *)(v58 + 248) - 1;
  do
    v63 = __ldaxr(v60);
  while (__stlxr(v63 - 1, v60));
  if (v63)
  {
LABEL_84:
    if (v55)
      goto LABEL_85;
    goto LABEL_90;
  }
  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
  std::__shared_weak_count::__release_weak(v59);
  if (!v55)
    goto LABEL_90;
LABEL_85:
  v64 = (unint64_t *)&v55->__shared_owners_;
  do
    v65 = __ldaxr(v64);
  while (__stlxr(v65 - 1, v64));
  if (!v65)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
LABEL_90:
  v66 = v46 + 32;
  *(_DWORD *)(v46 + 264) = v62;
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v157 + 1);
  if (*((_QWORD *)&v157 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v157 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  *(_QWORD *)(v46 + 32) = &off_1E42C2928;
  *(_QWORD *)(v46 + 280) = 0;
  *(_QWORD *)(v46 + 288) = 0;
  *(_QWORD *)(v46 + 272) = 0;
  *(_QWORD *)(v46 + 296) = gss::Allocator::instance(v52);
  if ((char **)(v46 + 272) != &v148)
    std::vector<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator>>::__assign_with_size[abi:nn180100]<std::pair<gss::StyleAttribute,unsigned short>*,std::pair<gss::StyleAttribute,unsigned short>*>((uint64_t *)(v46 + 272), (uint64_t)v148, v149, (v149 - v148) >> 3);
  *(_QWORD *)(v46 + 304) = 0;
  *(_QWORD *)(v46 + 311) = 0;
  *(_BYTE *)(v46 + 319) = 1;
  geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy((_QWORD *)(v46 + 304), (uint64_t)&v152);
  *(_OWORD *)(v46 + 320) = 0u;
  *(_OWORD *)(v46 + 336) = 0u;
  if (*((_QWORD *)&v147 + 1))
  {
    v70 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v147 + 1) + 16))(*((_QWORD *)&v147 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v147 + 1));
    }
  }
  *a1 = v66;
  a1[1] = v46;
  v72 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)(a2 + 120));
  if ((_DWORD)v72)
    geo::read_write_lock::logFailure(v72, (uint64_t)"write lock", v73);
  v75 = (v149 - v148) >> 3;
  if (v149 != v148)
  {
    v76 = v148;
    do
    {
      v77 = ((v75 << 6) - 0x61C8864680B583EBLL + (v75 >> 2) + *(unsigned int *)v76) ^ v75;
      v75 = (*((unsigned __int16 *)v76 + 2) - 0x61C8864680B583EBLL + (v77 << 6) + (v77 >> 2)) ^ v77;
      v76 += 8;
    }
    while (v76 != v149);
  }
  if (v154)
  {
    v78 = 0;
    v79 = 0;
    v80 = 0;
    do
    {
      if (v80 < v154)
      {
        v79 = &v152[v80];
        v74 = (unsigned __int16 *)((char *)v152 + 2 * v80 + v153);
      }
      v78 ^= (*v74
            - 0x61C8864680B583EBLL
            + ((((v78 << 6) - 0x61C8864680B583EBLL + (v78 >> 2) + *v79) ^ v78) << 6)
            + ((((v78 << 6) - 0x61C8864680B583EBLL + (v78 >> 2) + *v79) ^ v78) >> 2)) ^ ((v78 << 6)
                                                                                       - 0x61C8864680B583EBLL
                                                                                       + (v78 >> 2)
                                                                                       + *v79);
      v81 = v80 + 1;
      if (v80 + 1 < v154)
        ++v80;
      else
        v80 = v154;
    }
    while (v81 < v154);
  }
  else
  {
    v78 = 0;
  }
  v82 = v78 ^ v75;
  v83 = *(_QWORD *)(a2 + 40);
  if (!v83)
    goto LABEL_152;
  v84 = (uint8x8_t)vcnt_s8((int8x8_t)v83);
  v84.i16[0] = vaddlv_u8(v84);
  if (v84.u32[0] > 1uLL)
  {
    v66 = v78 ^ v75;
    if (v82 >= v83)
      v66 = v82 % v83;
  }
  else
  {
    v66 = (v83 - 1) & v82;
  }
  v85 = *(uint64_t ****)(*(_QWORD *)(a2 + 32) + 8 * v66);
  if (!v85 || (v86 = *v85) == 0)
  {
LABEL_152:
    v98 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 64) + 16))(*(_QWORD *)(a2 + 64), 80, 8);
    *(_QWORD *)&v157 = v98;
    *((_QWORD *)&v157 + 1) = a2 + 64;
    v158 = 0;
    *v98 = 0;
    v98[1] = v82;
    gss::StyleKey::StyleKey((gss::StyleKey *)(v98 + 2), (const gss::FeatureAttributeSet *)&v148, (const gss::QueryOverrides *)&v152);
    v98[8] = *a1;
    v99 = a1[1];
    v98[9] = v99;
    if (v99)
    {
      v100 = (unint64_t *)(v99 + 16);
      do
        v101 = __ldxr(v100);
      while (__stxr(v101 + 1, v100));
    }
    v158 = 1;
    v102 = (float)(unint64_t)(*(_QWORD *)(a2 + 72) + 1);
    v103 = *(float *)(a2 + 80);
    if (v83 && (float)(v103 * (float)v83) >= v102)
      goto LABEL_204;
    v104 = 1;
    if (v83 >= 3)
      v104 = (v83 & (v83 - 1)) != 0;
    v105 = v104 | (2 * v83);
    v106 = vcvtps_u32_f32(v102 / v103);
    if (v105 <= v106)
      prime = v106;
    else
      prime = v105;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v83 = *(_QWORD *)(a2 + 40);
    if (prime <= v83)
    {
      if (prime >= v83)
        goto LABEL_191;
      v120 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 72) / *(float *)(a2 + 80));
      if (v83 < 3 || (v121 = (uint8x8_t)vcnt_s8((int8x8_t)v83), v121.i16[0] = vaddlv_u8(v121), v121.u32[0] > 1uLL))
      {
        v120 = std::__next_prime(v120);
      }
      else
      {
        v122 = 1 << -(char)__clz(v120 - 1);
        if (v120 >= 2)
          v120 = v122;
      }
      if (prime <= v120)
        prime = v120;
      if (prime >= v83)
      {
        v83 = *(_QWORD *)(a2 + 40);
LABEL_191:
        if ((v83 & (v83 - 1)) != 0)
        {
          if (v82 >= v83)
            v66 = v82 % v83;
          else
            v66 = v82;
        }
        else
        {
          v66 = (v83 - 1) & v82;
        }
LABEL_204:
        v127 = *(_QWORD **)(*(_QWORD *)(a2 + 32) + 8 * v66);
        if (v127)
        {
          v128 = v157;
          *(_QWORD *)v157 = *v127;
          *v127 = v128;
        }
        else
        {
          v129 = v157;
          *(_QWORD *)v157 = *(_QWORD *)(a2 + 56);
          *(_QWORD *)(a2 + 56) = v129;
          *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v66) = a2 + 56;
          if (*(_QWORD *)v129)
          {
            v130 = *(_QWORD *)(*(_QWORD *)v129 + 8);
            if ((v83 & (v83 - 1)) != 0)
            {
              if (v130 >= v83)
                v130 %= v83;
            }
            else
            {
              v130 &= v83 - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v130) = v129;
          }
        }
        ++*(_QWORD *)(a2 + 72);
        goto LABEL_213;
      }
      if (!prime)
      {
        v134 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a2 + 32) = 0;
        if (v134)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 48) + 40))(*(_QWORD *)(a2 + 48), v134, 8 * *(_QWORD *)(a2 + 40));
        v83 = 0;
        *(_QWORD *)(a2 + 40) = 0;
        goto LABEL_191;
      }
    }
    v108 = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**(_QWORD **)(a2 + 48) + 16))(*(_QWORD *)(a2 + 48), 8 * prime, 8);
    v109 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = v108;
    if (v109)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 48) + 40))(*(_QWORD *)(a2 + 48), v109, 8 * *(_QWORD *)(a2 + 40));
    v110 = 0;
    *(_QWORD *)(a2 + 40) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v110++) = 0;
    while (prime != v110);
    v112 = a2 + 56;
    v111 = *(_QWORD **)(a2 + 56);
    if (!v111)
    {
LABEL_190:
      v83 = prime;
      goto LABEL_191;
    }
    v113 = v111[1];
    v114 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v115 = v113 & v114;
      *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v115) = v112;
      for (i = (_QWORD *)*v111; *v111; i = (_QWORD *)*v111)
      {
        v117 = i[1] & v114;
        if (v117 == v115)
        {
          v111 = i;
        }
        else
        {
          v118 = *(_QWORD *)(a2 + 32);
          if (*(_QWORD *)(v118 + 8 * v117))
          {
            *v111 = *i;
            v119 = 8 * v117;
            *i = **(_QWORD **)(*(_QWORD *)(a2 + 32) + v119);
            **(_QWORD **)(*(_QWORD *)(a2 + 32) + v119) = i;
          }
          else
          {
            *(_QWORD *)(v118 + 8 * v117) = v111;
            v111 = i;
            v115 = v117;
          }
        }
      }
      goto LABEL_190;
    }
    if (v113 >= prime)
      v113 %= prime;
    *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v113) = v112;
    v123 = (_QWORD *)*v111;
    if (!*v111)
      goto LABEL_190;
    while (1)
    {
      v125 = v123[1];
      if (v125 >= prime)
        v125 %= prime;
      if (v125 != v113)
      {
        v126 = *(_QWORD *)(a2 + 32);
        if (!*(_QWORD *)(v126 + 8 * v125))
        {
          *(_QWORD *)(v126 + 8 * v125) = v111;
          goto LABEL_195;
        }
        *v111 = *v123;
        v124 = 8 * v125;
        *v123 = **(_QWORD **)(*(_QWORD *)(a2 + 32) + v124);
        **(_QWORD **)(*(_QWORD *)(a2 + 32) + v124) = v123;
        v123 = v111;
      }
      v125 = v113;
LABEL_195:
      v111 = v123;
      v123 = (_QWORD *)*v123;
      v113 = v125;
      if (!v123)
        goto LABEL_190;
    }
  }
  v87 = (unsigned __int16 *)((char *)v152 + v153);
  while (1)
  {
    v88 = (unint64_t)v86[1];
    if (v88 != v82)
    {
      if (v84.u32[0] <= 1uLL)
      {
        v88 &= v83 - 1;
      }
      else if (v88 >= v83)
      {
        v88 %= v83;
      }
      if (v88 != v66)
        goto LABEL_152;
      goto LABEL_128;
    }
    v90 = v86[2];
    v89 = v86[3];
    if ((char *)v89 - (char *)v90 == v149 - v148)
    {
      if (v90 != v89)
      {
        v91 = v148;
        while (*(_DWORD *)v90 == *(_DWORD *)v91 && *((unsigned __int16 *)v90 + 2) == *((unsigned __int16 *)v91 + 2))
        {
          ++v90;
          v91 += 8;
          if (v90 == v89)
            goto LABEL_139;
        }
        goto LABEL_128;
      }
LABEL_139:
      v93 = *((unsigned __int16 *)v86 + 29);
      if ((_DWORD)v93 == v154)
      {
        if (!v154)
          break;
        v94 = v86[6];
        if (*(_DWORD *)v94 == *v152)
        {
          v95 = (unsigned __int16 *)((char *)v94 + *((unsigned __int16 *)v86 + 28));
          if (*v95 == *v87)
          {
            v96 = 1;
            do
            {
              if (v93 == v96)
                goto LABEL_230;
              v97 = v96;
              if (*((_DWORD *)v94 + v96) != v152[v96])
                break;
              ++v96;
            }
            while (v95[v97] == v87[v97]);
            if (v97 >= v93)
              break;
          }
        }
      }
    }
LABEL_128:
    v86 = (uint64_t **)*v86;
    if (!v86)
      goto LABEL_152;
  }
LABEL_230:
  v135 = (std::__shared_weak_count *)v86[9];
  if (!v135 || (v136 = std::__shared_weak_count::lock(v135)) == 0)
  {
    v138 = 0;
    v142 = *a1;
    v141 = a1[1];
    if (!v141)
      goto LABEL_240;
    goto LABEL_238;
  }
  v137 = (unint64_t)v86[8];
  if (v137)
  {
    v138 = (std::__shared_weak_count *)a1[1];
    *a1 = v137;
    a1[1] = (unint64_t)v136;
    if (v138)
    {
      v139 = (unint64_t *)&v138->__shared_owners_;
      do
        v140 = __ldaxr(v139);
      while (__stlxr(v140 - 1, v139));
      goto LABEL_245;
    }
    goto LABEL_246;
  }
  v138 = v136;
  v142 = *a1;
  v141 = a1[1];
  if (v141)
  {
LABEL_238:
    v143 = (unint64_t *)(v141 + 16);
    do
      v144 = __ldxr(v143);
    while (__stxr(v144 + 1, v143));
  }
LABEL_240:
  v145 = (std::__shared_weak_count *)v86[9];
  v86[8] = (uint64_t *)v142;
  v86[9] = (uint64_t *)v141;
  if (v145)
    std::__shared_weak_count::__release_weak(v145);
  if (!v138)
    goto LABEL_246;
  v146 = (unint64_t *)&v138->__shared_owners_;
  do
    v140 = __ldaxr(v146);
  while (__stlxr(v140 - 1, v146));
LABEL_245:
  if (!v140)
  {
    ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
    std::__shared_weak_count::__release_weak(v138);
    v6 = (pthread_rwlock_t *)(a2 + 120);
  }
  else
  {
LABEL_246:
    v6 = (pthread_rwlock_t *)(a2 + 120);
  }
LABEL_213:
  v131 = (geo::read_write_lock *)pthread_rwlock_unlock(v6);
  if ((_DWORD)v131)
    geo::read_write_lock::logFailure(v131, (uint64_t)"unlock", v132);
  if (!v156 && v152)
  {
    v133 = gss::Allocator::instance(v131);
    (*(void (**)(uint64_t, _DWORD *, _QWORD))(*(_QWORD *)v133 + 40))(v133, v152, v155);
    v152 = 0;
  }
  if (v148)
  {
    v149 = v148;
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v151 + 40))(v151, v148, v150 - (_QWORD)v148);
  }
}

void sub_19F334C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_rwlock_t *a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<gss::StyleKey,std::weak_ptr<gss::StylesheetQuery<gss::PropertyID>>>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<gss::StyleKey,std::weak_ptr<gss::StylesheetQuery<gss::PropertyID>>>,void *>,gss::Allocator>>>::reset[abi:nn180100]((uint64_t)&a17);
  geo::write_lock_guard::~write_lock_guard(&a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v17);
  gss::StyleKey::~StyleKey((gss::StyleKey *)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<gss::StylesheetQuery<gss::ScenePropertyID>,geo::StdAllocator<gss::StylesheetQuery<gss::ScenePropertyID>,gss::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 352);
}

__n128 __copy_helper_block_ea8_40c44_ZTSN3geo8optionalIN2gm6MatrixIdLi3ELi1EEEEE(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[2].n128_u8[8] = 0;
  if (a2[2].n128_u8[8])
  {
    result = a2[3];
    a1[4].n128_u64[0] = a2[4].n128_u64[0];
    a1[3] = result;
    a1[2].n128_u8[8] = 1;
  }
  return result;
}

void sub_19F334E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::DaVinciGroundLayerDataSource::setRegistryManager(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__sp_mut *sp_mut;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v6 = (const void *)(a1 + 792);
  if (a3)
  {
    v7 = (unint64_t *)(a3 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sp_mut = std::__get_sp_mut(v6);
  std::__sp_mut::lock(sp_mut);
  *(_QWORD *)(a1 + 792) = a2;
  v10 = *(std::__shared_weak_count **)(a1 + 800);
  *(_QWORD *)(a1 + 800) = a3;
  std::__sp_mut::unlock(sp_mut);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_19F334ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *md::LabelManager::LabelManager(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  __CFNotificationCenter *LocalCenter;
  const __CFString *v7;
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _WORD *v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  void *v41;
  void *v42;
  unint64_t *v43;
  unint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  float *v71;
  uint64_t v72;
  uint64_t v73;
  __int16 v74;
  _QWORD **v75;
  _QWORD *v76;
  _QWORD *v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  _QWORD *v103;
  _QWORD *v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  float v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  std::__shared_weak_count *v115;
  uint64_t (**v116)();
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  unsigned int v120;
  int v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  void *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  unsigned __int8 v140;
  uint64_t v141;
  unsigned __int8 v142;
  _QWORD *v143;
  uint64_t v144;
  unsigned __int8 v145;
  uint64_t v146;
  unsigned __int8 v147;
  uint64_t v148;
  unsigned int v149;
  unint64_t v150;
  unsigned __int8 v151;
  uint64_t v152;
  uint64_t v153;
  unsigned __int8 v154;
  unsigned __int8 v155;
  unsigned __int8 v156;
  unsigned __int8 v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned __int8 v161;
  unsigned __int8 v162;
  unsigned __int8 v163;
  unsigned __int8 v164;
  unsigned __int8 v165;
  unsigned __int8 v166;
  unsigned __int8 v167;
  unsigned __int8 v168;
  unsigned __int8 v169;
  unsigned __int8 v170;
  unsigned __int8 v171;
  unsigned __int8 v172;
  unsigned __int8 v173;
  unsigned __int8 v174;
  unsigned __int8 v175;
  unsigned __int8 v176;
  unsigned __int8 v177;
  unsigned __int8 v178;
  unsigned __int8 v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  __CFNotificationCenter *v183;
  unsigned __int8 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned __int8 v190;
  unsigned __int8 v191;
  unsigned __int8 v192;
  unsigned __int8 v193;
  uint64_t v194;
  unsigned __int8 v195;
  uint64_t v196;
  uint64_t v197;
  id v198;
  uint64_t v199;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unsigned __int8 v207;
  uint64_t v208;
  unsigned __int8 v209;
  unsigned __int8 v210;
  uint64_t v211;
  unsigned __int8 v212;
  char *v213;
  _QWORD *v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  unsigned __int8 v219;
  uint64_t v220;
  __int128 v221;
  uint64_t v222;
  unsigned __int8 v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  _QWORD *v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  _QWORD *v235;
  uint32x2_t *v236;
  uint32x2_t v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  __int128 v242;
  uint64_t v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  _QWORD *v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  _QWORD *v259;
  uint32x2_t *v260;
  uint32x2_t v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  __int128 v266;
  uint64_t v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  unint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  _QWORD *v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  _QWORD *v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _QWORD *v298;
  _QWORD *v299;
  __int128 v300;
  uint64_t v301;
  _QWORD *v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t *v305;
  unint64_t v306;
  int32x4_t *v307;
  int32x4_t *v308;
  unint64_t v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  int32x4_t v313;
  int32x4_t *v314;
  int32x4_t v315;
  int32x4_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unsigned __int8 v322;
  unsigned __int8 v323;
  uint64_t v324;
  __int128 v325;
  uint64_t v327;
  unsigned __int8 v328;
  uint64_t v329;
  BOOL v330;
  char v331;
  id v332;
  uint32x2_t *v333;
  uint64_t v334;
  id v335;
  uint32x2_t *v336;
  uint64_t v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  id v341;
  unint64_t v342;
  uint64_t v343;
  id v344;
  _QWORD *v345;
  _BYTE *v346;
  uint64_t v347;
  uint64_t v348;
  id v349;
  void *v350;
  _BYTE *v351;
  _BYTE *v352;
  uint64_t v353;
  uint64_t v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  unint64_t *v358;
  unint64_t v359;
  uint64_t v360;
  void *v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  unint64_t *v365;
  unint64_t v366;
  __int128 *v367;
  uint64_t v368;
  uint64_t (***v369)();
  uint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  NSObject *v375;
  const char *v376;
  unsigned int v377;
  dispatch_semaphore_t v378;
  void *v379;
  float v380;
  uint64_t v381;
  uint64_t v382;
  md::FontGlyphCache *isa;
  uint64_t v384;
  uint64_t v385;
  NSObject *v386;
  uint64_t v387;
  _QWORD *v388;
  uint64_t v389;
  uint64_t v390;
  NSObject *v391;
  uint64_t v392;
  _QWORD *v393;
  uint64_t v394;
  uint64_t v396;
  geo::read_write_lock *v397;
  const char *v398;
  malloc_zone_t *zone;
  uint64_t v400;
  geo::read_write_lock *v401;
  const char *v402;
  malloc_zone_t *v403;
  uint64_t v404;
  geo::read_write_lock *v405;
  const char *v406;
  malloc_zone_t *v407;
  uint64_t v408;
  geo::read_write_lock *v409;
  const char *v410;
  malloc_zone_t *v411;
  uint64_t v412;
  geo::read_write_lock *v413;
  const char *v414;
  malloc_zone_t *v415;
  uint64_t v416;
  geo::read_write_lock *v417;
  const char *v418;
  malloc_zone_t *v419;
  uint64_t v420;
  geo::read_write_lock *v421;
  const char *v422;
  malloc_zone_t *v423;
  uint64_t v424;
  geo::read_write_lock *v425;
  const char *v426;
  malloc_zone_t *v427;
  uint64_t v428;
  geo::read_write_lock *v429;
  const char *v430;
  malloc_zone_t *v431;
  uint64_t v432;
  geo::read_write_lock *v433;
  const char *v434;
  malloc_zone_t *v435;
  uint64_t v436;
  geo::read_write_lock *v437;
  const char *v438;
  malloc_zone_t *v439;
  uint64_t v440;
  geo::read_write_lock *v441;
  const char *v442;
  malloc_zone_t *v443;
  uint64_t v444;
  geo::read_write_lock *v445;
  const char *v446;
  malloc_zone_t *v447;
  uint64_t v448;
  geo::read_write_lock *v449;
  const char *v450;
  malloc_zone_t *v451;
  uint64_t v452;
  geo::read_write_lock *v453;
  const char *v454;
  malloc_zone_t *v455;
  uint64_t v456;
  geo::read_write_lock *v457;
  const char *v458;
  malloc_zone_t *v459;
  uint64_t v460;
  geo::read_write_lock *v461;
  const char *v462;
  malloc_zone_t *v463;
  uint64_t v464;
  geo::read_write_lock *v465;
  const char *v466;
  malloc_zone_t *v467;
  uint64_t v468;
  geo::read_write_lock *v469;
  const char *v470;
  malloc_zone_t *v471;
  uint64_t v472;
  geo::read_write_lock *v473;
  const char *v474;
  malloc_zone_t *v475;
  uint64_t v476;
  geo::read_write_lock *v477;
  const char *v478;
  malloc_zone_t *v479;
  uint64_t v480;
  geo::read_write_lock *v481;
  const char *v482;
  malloc_zone_t *v483;
  uint64_t v484;
  geo::read_write_lock *v485;
  const char *v486;
  malloc_zone_t *v487;
  uint64_t v488;
  geo::read_write_lock *v489;
  const char *v490;
  malloc_zone_t *v491;
  uint64_t v492;
  geo::read_write_lock *v493;
  const char *v494;
  malloc_zone_t *v495;
  uint64_t v496;
  geo::read_write_lock *v497;
  const char *v498;
  malloc_zone_t *v499;
  uint64_t v500;
  geo::read_write_lock *v501;
  const char *v502;
  malloc_zone_t *v503;
  uint64_t v504;
  geo::read_write_lock *v505;
  const char *v506;
  malloc_zone_t *v507;
  uint64_t v508;
  geo::read_write_lock *v509;
  const char *v510;
  malloc_zone_t *v511;
  uint64_t v512;
  geo::read_write_lock *v513;
  const char *v514;
  malloc_zone_t *v515;
  uint64_t v516;
  geo::read_write_lock *v517;
  const char *v518;
  malloc_zone_t *v519;
  uint64_t v520;
  geo::read_write_lock *v521;
  const char *v522;
  malloc_zone_t *v523;
  uint64_t v524;
  geo::read_write_lock *v525;
  const char *v526;
  malloc_zone_t *v527;
  uint64_t v528;
  geo::read_write_lock *v529;
  const char *v530;
  malloc_zone_t *v531;
  uint64_t v532;
  geo::read_write_lock *v533;
  const char *v534;
  malloc_zone_t *v535;
  uint64_t v536;
  geo::read_write_lock *v537;
  const char *v538;
  malloc_zone_t *v539;
  uint64_t v540;
  geo::read_write_lock *v541;
  const char *v542;
  malloc_zone_t *v543;
  uint64_t v544;
  geo::read_write_lock *v545;
  const char *v546;
  malloc_zone_t *v547;
  uint64_t v548;
  geo::read_write_lock *v549;
  const char *v550;
  malloc_zone_t *v551;
  uint64_t v552;
  geo::read_write_lock *v553;
  const char *v554;
  malloc_zone_t *v555;
  uint64_t v556;
  geo::read_write_lock *v557;
  const char *v558;
  malloc_zone_t *v559;
  uint64_t v560;
  geo::read_write_lock *v561;
  const char *v562;
  malloc_zone_t *v563;
  uint64_t v564;
  geo::read_write_lock *v565;
  const char *v566;
  malloc_zone_t *v567;
  uint64_t v568;
  geo::read_write_lock *v569;
  const char *v570;
  malloc_zone_t *v571;
  uint64_t v572;
  geo::read_write_lock *v573;
  const char *v574;
  malloc_zone_t *v575;
  uint64_t v576;
  geo::read_write_lock *v577;
  const char *v578;
  malloc_zone_t *v579;
  int v580;
  uint64_t v581;
  geo::read_write_lock *v582;
  const char *v583;
  malloc_zone_t *v584;
  uint64_t v585;
  geo::read_write_lock *v586;
  const char *v587;
  malloc_zone_t *v588;
  uint64_t v589;
  geo::read_write_lock *v590;
  const char *v591;
  malloc_zone_t *v592;
  uint64_t v593;
  uint64_t v594;
  int v595;
  uint64_t v596;
  id v597;
  uint64_t *v598;
  unsigned int v599;
  uint64_t v600;
  const __CFString *name;
  CFStringRef namea;
  __CFString *nameb;
  _QWORD *v604;
  uint64_t v605;
  uint64_t *v606;
  _QWORD v607[3];
  _QWORD *v608;
  _QWORD v609[3];
  _QWORD *v610;
  uint32x2_t v611[3];
  uint32x2_t *v612;
  uint32x2_t v613[3];
  uint32x2_t *v614;
  uint64_t (**v615)();
  std::__shared_weak_count *v616;
  std::__shared_weak_count *v617;
  uint32x2_t *v618;
  __int128 v619;
  __int128 v620;
  _BYTE __x[48];
  std::__shared_weak_count *v622;
  _QWORD v623[6];

  v623[3] = *MEMORY[0x1E0C80C00];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E4299F90;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  v7 = (const __CFString *)*MEMORY[0x1E0C99720];
  CFNotificationCenterAddObserver(LocalCenter, a1, (CFNotificationCallback)notificationHandler, (CFStringRef)*MEMORY[0x1E0C99720], 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  *a1 = &off_1E428CE88;
  MEMORY[0x1A1AF4B00](a1 + 3);
  a1[11] = &off_1E42B4D50;
  a1[12] = 0;
  v8 = *(id *)(a3 + 24);
  v9 = (void *)a1[12];
  a1[12] = v8;

  a1[14] = *(_QWORD *)(a3 + 112);
  v10 = *(_QWORD *)(a3 + 120);
  v606 = a1 + 14;
  a1[15] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  a1[17] = *(_QWORD *)(a3 + 88);
  *((_BYTE *)a1 + 128) = 0;
  v13 = *(_QWORD *)(a3 + 96);
  a1[18] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  a1[19] = *(_QWORD *)(a3 + 72);
  v16 = *(_QWORD *)(a3 + 80);
  a1[20] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  name = v7;
  v19 = operator new();
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = 0;
  v605 = a3;
  {
    v396 = operator new();
    *(_QWORD *)(v396 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v396 + 24) = "VectorKitLabels";
    *(_OWORD *)(v396 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v396 = &off_1E42B5668;
    *(_QWORD *)(v396 + 8) = "VectorKitLabels";
    *(_OWORD *)(v396 + 72) = 0u;
    *(_OWORD *)(v396 + 88) = 0u;
    *(_OWORD *)(v396 + 104) = 0u;
    *(_OWORD *)(v396 + 120) = 0u;
    *(_OWORD *)(v396 + 136) = 0u;
    *(_OWORD *)(v396 + 152) = 0u;
    *(_OWORD *)(v396 + 168) = 0u;
    *(_OWORD *)(v396 + 184) = 0u;
    *(_OWORD *)(v396 + 200) = 0u;
    *(_OWORD *)(v396 + 216) = 0u;
    *(_OWORD *)(v396 + 232) = 0u;
    *(_QWORD *)(v396 + 248) = 0;
    *(_OWORD *)(v396 + 56) = 0u;
    v397 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v396 + 56), 0);
    if ((_DWORD)v397)
      geo::read_write_lock::logFailure(v397, (uint64_t)"initialization", v398);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v396 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v396 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v396;
  }
  v21 = mdm::Allocator::instance(void)::alloc;
  *(_OWORD *)(v19 + 32) = 0u;
  *(_QWORD *)(v19 + 24) = v21;
  *(_OWORD *)(v19 + 48) = 0u;
  *(_OWORD *)(v19 + 64) = 0u;
  *(_OWORD *)(v19 + 80) = 0u;
  *(_OWORD *)(v19 + 96) = 0u;
  *(_OWORD *)(v19 + 112) = 0u;
  v22 = (_QWORD *)operator new();
  *v22 = off_1E42A3318;
  v22[1] = 0xBF80000000000000;
  v23 = *(_QWORD *)(v19 + 80);
  *(_QWORD *)(v19 + 80) = v22;
  if (v23)
  {
    MEMORY[0x1A1AF4E00](v23, 0x1081C40FC6463CFLL);
    v22 = *(_QWORD **)(v19 + 80);
  }
  *(_QWORD *)(v19 + 32) = v22;
  v24 = (_QWORD *)operator new();
  *v24 = &off_1E42A9608;
  v25 = *(_QWORD *)(v19 + 88);
  *(_QWORD *)(v19 + 88) = v24;
  if (v25)
  {
    MEMORY[0x1A1AF4E00](v25, 0x81C40B8603338);
    v24 = *(_QWORD **)(v19 + 88);
  }
  *(_QWORD *)(v19 + 48) = v24;
  v26 = (_QWORD *)operator new();
  *v26 = &off_1E42A7BA0;
  v27 = *(_QWORD *)(v19 + 96);
  *(_QWORD *)(v19 + 96) = v26;
  if (v27)
  {
    MEMORY[0x1A1AF4E00](v27, 0x81C40B8603338);
    v26 = *(_QWORD **)(v19 + 96);
  }
  *(_QWORD *)(v19 + 56) = v26;
  v28 = (_QWORD *)operator new();
  *v28 = &off_1E42A8AB8;
  v29 = *(_QWORD *)(v19 + 104);
  *(_QWORD *)(v19 + 104) = v28;
  if (v29)
  {
    MEMORY[0x1A1AF4E00](v29, 0x81C40B8603338);
    v28 = *(_QWORD **)(v19 + 104);
  }
  *(_QWORD *)(v19 + 64) = v28;
  v30 = (_QWORD *)operator new();
  *v30 = &off_1E42A9000;
  v31 = *(_QWORD *)(v19 + 112);
  *(_QWORD *)(v19 + 112) = v30;
  if (v31)
  {
    MEMORY[0x1A1AF4E00](v31, 0x81C40B8603338);
    v30 = *(_QWORD **)(v19 + 112);
  }
  *(_QWORD *)(v19 + 40) = v30;
  v32 = (_QWORD *)operator new();
  *v32 = &off_1E42A5CD8;
  v33 = *(_QWORD *)(v19 + 120);
  *(_QWORD *)(v19 + 120) = v32;
  if (v33)
  {
    MEMORY[0x1A1AF4E00](v33, 0x81C40B8603338);
    v32 = *(_QWORD **)(v19 + 120);
  }
  *(_QWORD *)(v19 + 72) = v32;
  a1[21] = v19;
  *((_DWORD *)a1 + 44) = *(_DWORD *)a3;
  a1[23] = *(_QWORD *)(a3 + 8);
  *((_BYTE *)a1 + 192) = 1;
  *((_DWORD *)a1 + 49) = 0;
  *((_WORD *)a1 + 100) = 1;
  a1[26] = &off_1E42B5550;
  a1[27] = 0;
  v34 = operator new();
  *(_QWORD *)v34 = off_1E4291C38;
  *(_QWORD *)(v34 + 8) = a1;
  *(_BYTE *)(v34 + 16) = a2;
  *(_DWORD *)(v34 + 17) = 0x1000000;
  *(_WORD *)(v34 + 21) = 256;
  *(_QWORD *)(v34 + 23) = 0;
  *(_DWORD *)(v34 + 31) = 0;
  *(_BYTE *)(v34 + 35) = -4;
  *(_OWORD *)(v34 + 36) = xmmword_19FFB4FE0;
  *(_DWORD *)(v34 + 52) = 10;
  *(_QWORD *)(v34 + 56) = 0x3FF0000000000000;
  *(_BYTE *)(v34 + 84) = 0;
  *(_BYTE *)(v34 + 88) = 0;
  *(_BYTE *)(v34 + 96) = 0;
  *(_BYTE *)(v34 + 104) = 0;
  *(_WORD *)(v34 + 106) = 0;
  *(_WORD *)(v34 + 109) = 0;
  *(_WORD *)(v34 + 112) = 0;
  *(_WORD *)(v34 + 115) = 0;
  *(_WORD *)(v34 + 118) = 0;
  *(_WORD *)(v34 + 121) = 0;
  *(_BYTE *)(v34 + 124) = 0;
  *(_BYTE *)(v34 + 80) = 0;
  *(_OWORD *)(v34 + 64) = xmmword_19FFB4FF0;
  if (md::LabelWorldTraits::initializeGlobalDebugSettings(void)::onceToken != -1)
    dispatch_once(&md::LabelWorldTraits::initializeGlobalDebugSettings(void)::onceToken, &__block_literal_global_15261);
  *(_DWORD *)(v34 + 52) = 5;
  v599 = a2;
  v35 = (_WORD *)(v34 + 107);
  v36 = (_QWORD *)(v34 + 110);
  switch((int)a2)
  {
    case 0:
    case 4:
      *(_BYTE *)(v34 + 17) = 1;
      +[VKSharedResourcesManager sharedResources](VKSharedResourcesManager, "sharedResources");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = v37;
      if (v37)
      {
        objc_msgSend(v37, "standardCommandBufferSelector");
        v36 = *(_QWORD **)__x;
        a2 = *(_QWORD *)&__x[8];
        if (*(_QWORD *)&__x[8])
        {
          v39 = (unint64_t *)(*(_QWORD *)&__x[8] + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)&__x[8] + 16))(*(_QWORD *)&__x[8]);
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__x[8]);
          }
        }
      }
      else
      {
        v36 = 0;
        *(_QWORD *)__x = 0;
        *(_QWORD *)&__x[8] = 0;
      }

      v59 = *((unsigned __int8 *)v36 + 56);
      if (*((_BYTE *)v36 + 56))
        v60 = 9;
      else
        v60 = 12;
      *(_BYTE *)(v34 + 33) = v60;
      if (v59)
        v61 = 9;
      else
        v61 = 14;
      *(_BYTE *)(v34 + 34) = v61;
      *(_DWORD *)(v34 + 36) = 1097859072;
      *(_BYTE *)(v34 + 35) = 0;
      *(_QWORD *)(v34 + 56) = 0x3E5ACB157F7410BCLL;
      *(_BYTE *)(v34 + 28) = 1;
      *(_BYTE *)(v34 + 19) = 1;
      *(_BYTE *)(v34 + 27) = v59;
      v62 = v36[1];
      if (*(_BYTE *)(v34 + 106))
        *(_BYTE *)(v34 + 106) = 0;
      *(_WORD *)(v34 + 104) = *(_WORD *)(v62 + 220);
      *(_BYTE *)(v34 + 106) = 1;
      v63 = v36[1];
      if (*(_BYTE *)(v34 + 112))
        *(_BYTE *)(v34 + 112) = 0;
      *(_WORD *)(v34 + 110) = *(_WORD *)(v63 + 218);
      *(_BYTE *)(v34 + 112) = 1;
      v64 = v36[1];
      if (*(_BYTE *)(v34 + 115))
        *(_BYTE *)(v34 + 115) = 0;
      *(_WORD *)(v34 + 113) = *(_WORD *)(v64 + 222);
      *(_BYTE *)(v34 + 115) = 1;
      v65 = v36[1];
      if (*(_BYTE *)(v34 + 118))
        *(_BYTE *)(v34 + 118) = 0;
      *(_WORD *)(v34 + 116) = *(_WORD *)(v65 + 228);
      *(_BYTE *)(v34 + 118) = 1;
      v66 = v36[1];
      if (*(_BYTE *)(v34 + 121))
        *(_BYTE *)(v34 + 121) = 0;
      *(_WORD *)(v34 + 119) = *(_WORD *)(v66 + 236);
      *(_BYTE *)(v34 + 121) = 1;
      v67 = v36[1];
      if (*(_BYTE *)(v34 + 124))
        *(_BYTE *)(v34 + 124) = 0;
      *(_WORD *)(v34 + 122) = *(_WORD *)(v67 + 242);
      goto LABEL_88;
    case 1:
      *(_WORD *)(v34 + 17) = 256;
      *(_WORD *)(v34 + 29) = 257;
      *(_BYTE *)(v34 + 31) = 1;
      +[VKSharedResourcesManager sharedResources](VKSharedResourcesManager, "sharedResources");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      v46 = v45;
      if (v45)
      {
        objc_msgSend(v45, "realisticCommandBufferSelector");
        v47 = *(_QWORD *)__x;
        a2 = *(_QWORD *)&__x[8];
        if (*(_QWORD *)&__x[8])
        {
          v48 = (unint64_t *)(*(_QWORD *)&__x[8] + 8);
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)&__x[8] + 16))(*(_QWORD *)&__x[8]);
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__x[8]);
          }
        }
      }
      else
      {
        v47 = 0;
        *(_QWORD *)__x = 0;
        *(_QWORD *)&__x[8] = 0;
      }

      v69 = *(_BYTE *)(v47 + 56);
      *(_BYTE *)(v34 + 33) = 2 * (v69 == 0);
      *(_BYTE *)(v34 + 34) = 4 * (v69 == 0);
      *(_DWORD *)(v34 + 36) = 1097859072;
      *(_BYTE *)(v34 + 27) = v69;
      v70 = *(_QWORD *)(v47 + 8);
      if (*(_BYTE *)(v34 + 112))
        *(_BYTE *)(v34 + 112) = 0;
      *(_WORD *)(v34 + 110) = *(_WORD *)(v70 + 30);
      goto LABEL_93;
    case 2:
      *(_OWORD *)(v34 + 64) = xmmword_19FFB5000;
      *(_BYTE *)(v34 + 17) = 0;
      *(_WORD *)(v34 + 20) = 256;
      *(_WORD *)(v34 + 32) = 4;
      *(_BYTE *)(v34 + 34) = 0;
      *(_BYTE *)(v34 + 84) = 1;
      *(_DWORD *)(v34 + 80) = 1099431936;
      *(_WORD *)(v34 + 23) = 257;
      *(_QWORD *)(v34 + 44) = 0x42C8000043C80000;
      *(_DWORD *)(v34 + 52) = 10;
      *(_WORD *)(v34 + 110) = 512;
      *(_BYTE *)(v34 + 112) = 1;
      goto LABEL_94;
    case 3:
      *(_BYTE *)(v34 + 17) = 1;
      *(_QWORD *)(v34 + 56) = 0x3E5ACB157F7410BCLL;
      *(_WORD *)(v34 + 20) = 0;
      *(_BYTE *)(v34 + 32) = 5;
      *(_WORD *)(v34 + 24) = 257;
      *(_DWORD *)(v34 + 52) = 15;
      *(_BYTE *)(v34 + 26) = 1;
      *(_DWORD *)(v34 + 80) = 1099431936;
      *(_BYTE *)(v34 + 84) = 1;
      if (!*(_BYTE *)(v34 + 96))
        *(_BYTE *)(v34 + 96) = 1;
      *(_QWORD *)(v34 + 88) = 0x4024000000000000;
      *(_WORD *)(v34 + 33) = 0;
      *(_WORD *)(v34 + 110) = 1536;
LABEL_93:
      *(_BYTE *)(v34 + 112) = 1;
LABEL_94:
      *v35 = *(_WORD *)v36;
      v68 = *(_BYTE *)(v34 + 112);
      goto LABEL_95;
    case 5:
    case 6:
      *(_BYTE *)(v34 + 17) = 0;
      +[VKSharedResourcesManager sharedResources](VKSharedResourcesManager, "sharedResources");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = v41;
      if (v41)
      {
        objc_msgSend(v41, "standardCommandBufferSelector");
        v36 = *(_QWORD **)__x;
        a2 = *(_QWORD *)&__x[8];
        if (*(_QWORD *)&__x[8])
        {
          v43 = (unint64_t *)(*(_QWORD *)&__x[8] + 8);
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)&__x[8] + 16))(*(_QWORD *)&__x[8]);
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__x[8]);
          }
        }
      }
      else
      {
        v36 = 0;
        *(_QWORD *)__x = 0;
        *(_QWORD *)&__x[8] = 0;
      }

      _ZF = *((_BYTE *)v36 + 56) == 0;
      if (*((_BYTE *)v36 + 56))
        v51 = 9;
      else
        v51 = 12;
      *(_BYTE *)(v34 + 33) = v51;
      if (_ZF)
        v52 = 14;
      else
        v52 = 9;
      *(_BYTE *)(v34 + 34) = v52;
      *(_DWORD *)(v34 + 36) = 1097859072;
      *(_WORD *)(v34 + 18) = 257;
      *(_BYTE *)(v34 + 35) = 4;
      *(_DWORD *)(v34 + 28) = 1;
      v53 = v36[1];
      if (*(_BYTE *)(v34 + 106))
        *(_BYTE *)(v34 + 106) = 0;
      *(_WORD *)(v34 + 104) = *(_WORD *)(v53 + 220);
      *(_BYTE *)(v34 + 106) = 1;
      v54 = v36[1];
      if (*(_BYTE *)(v34 + 112))
        *(_BYTE *)(v34 + 112) = 0;
      *(_WORD *)(v34 + 110) = *(_WORD *)(v54 + 218);
      *(_BYTE *)(v34 + 112) = 1;
      v55 = v36[1];
      if (*(_BYTE *)(v34 + 115))
        *(_BYTE *)(v34 + 115) = 0;
      *(_WORD *)(v34 + 113) = *(_WORD *)(v55 + 222);
      *(_BYTE *)(v34 + 115) = 1;
      v56 = v36[1];
      if (*(_BYTE *)(v34 + 118))
        *(_BYTE *)(v34 + 118) = 0;
      *(_WORD *)(v34 + 116) = *(_WORD *)(v56 + 228);
      *(_BYTE *)(v34 + 118) = 1;
      v57 = v36[1];
      if (*(_BYTE *)(v34 + 121))
        *(_BYTE *)(v34 + 121) = 0;
      *(_WORD *)(v34 + 119) = *(_WORD *)(v57 + 236);
      *(_BYTE *)(v34 + 121) = 1;
      v58 = v36[1];
      if (*(_BYTE *)(v34 + 124))
        *(_BYTE *)(v34 + 124) = 0;
      *(_WORD *)(v34 + 122) = *(_WORD *)(v58 + 242);
LABEL_88:
      *(_BYTE *)(v34 + 124) = 1;
      *v35 = *(_WORD *)(v34 + 113);
      v68 = *(_BYTE *)(v34 + 115);
LABEL_95:
      *(_BYTE *)(v34 + 109) = v68;
      break;
    default:
      break;
  }
  md::LabelsState::addObserver(*(_QWORD *)(*(_QWORD *)(v34 + 8) + 168), (md::LabelsStateObserver *)v34);
  v71 = (float *)(a1 + 29);
  a1[29] = v34;
  a1[30] = 0;
  v604 = a1 + 29;
  v72 = operator new();
  v73 = v72;
  if (!*(_BYTE *)(a1[29] + 112))
    goto LABEL_492;
  v74 = *(_WORD *)(a1[29] + 110);
  v75 = (_QWORD **)*v606;
  *(_QWORD *)v72 = &off_1E429CE08;
  *(_WORD *)(v72 + 8) = v74;
  *(_QWORD *)(v72 + 16) = v75;
  v76 = *v75;
  v77 = v75[1];
  if (v76 != v77)
  {
    while (*v76 != 0x348A0B0E758C07C2)
    {
      v76 += 5;
      if (v76 == v77)
        goto LABEL_108;
    }
  }
  if (v76 == v77)
  {
LABEL_108:
    v79 = 0;
  }
  else
  {
    v79 = v76[3];
    v78 = (std::__shared_weak_count *)v76[4];
    if (v78)
    {
      p_shared_owners = (unint64_t *)&v78->__shared_owners_;
      do
        v81 = __ldxr(p_shared_owners);
      while (__stxr(v81 + 1, p_shared_owners));
      do
        v82 = __ldaxr(p_shared_owners);
      while (__stlxr(v82 - 1, p_shared_owners));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
  }
  *(_QWORD *)(v73 + 24) = v79;
  v83 = *(_QWORD *)(v73 + 16);
  v84 = *(_QWORD **)v83;
  v85 = *(_QWORD **)(v83 + 8);
  if (v84 != v85)
  {
    while (*v84 != 0xD369A4D92C8FFE6CLL)
    {
      v84 += 5;
      if (v84 == v85)
        goto LABEL_120;
    }
  }
  if (v84 == v85)
  {
LABEL_120:
    v87 = 0;
  }
  else
  {
    v87 = v84[3];
    v86 = (std::__shared_weak_count *)v84[4];
    if (v86)
    {
      v88 = (unint64_t *)&v86->__shared_owners_;
      do
        v89 = __ldxr(v88);
      while (__stxr(v89 + 1, v88));
      do
        v90 = __ldaxr(v88);
      while (__stlxr(v90 - 1, v88));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
  }
  *(_QWORD *)(v73 + 32) = v87;
  v91 = **(uint64_t ***)(v73 + 16);
  if (v91 != *(uint64_t **)(*(_QWORD *)(v73 + 16) + 8) && *v91 != 0x18C980208A51BC99)
  {
    v92 = v91 + 5;
    do
    {
      v93 = *v92;
      v92 += 5;
    }
    while (v93 != 0x18C980208A51BC99);
    v91 = v92 - 5;
  }
  a2 = v91[3];
  v94 = (std::__shared_weak_count *)v91[4];
  if (v94)
  {
    v95 = (unint64_t *)&v94->__shared_owners_;
    do
      v96 = __ldxr(v95);
    while (__stxr(v96 + 1, v95));
    do
      v97 = __ldaxr(v95);
    while (__stlxr(v97 - 1, v95));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  *(_QWORD *)(v73 + 40) = a2;
  *(_BYTE *)(v73 + 48) = 0;
  *(_BYTE *)(v73 + 56) = 0;
  *(_QWORD *)(v73 + 64) = 850045863;
  *(_OWORD *)(v73 + 72) = 0u;
  *(_OWORD *)(v73 + 88) = 0u;
  *(_OWORD *)(v73 + 104) = 0u;
  *(_QWORD *)(v73 + 136) = 0;
  *(_QWORD *)(v73 + 120) = 0;
  *(_QWORD *)(v73 + 128) = v73 + 136;
  *(_QWORD *)(v73 + 160) = 0;
  v36 = (_QWORD *)(v73 + 160);
  *(_QWORD *)(v73 + 168) = 0;
  *(_QWORD *)(v73 + 144) = 0;
  *(_QWORD *)(v73 + 152) = v73 + 160;
  *(_QWORD *)__x = &off_1E42D0E08;
  *(_QWORD *)&__x[8] = v73;
  *(_QWORD *)&__x[24] = __x;
  *(_QWORD *)(v73 + 48) = md::MapEngineSignals::ThreadSafeSignal<unsigned long>::connect(a2, __x);
  *(_BYTE *)(v73 + 56) = 1;
  v98 = *(_QWORD **)&__x[24];
  v71 = (float *)(a1 + 29);
  if (*(_BYTE **)&__x[24] == __x)
  {
    v99 = 4;
    v98 = __x;
  }
  else
  {
    if (!*(_QWORD *)&__x[24])
      goto LABEL_137;
    v99 = 5;
  }
  (*(void (**)(void))(*v98 + 8 * v99))();
LABEL_137:
  a1[31] = v73;
  v100 = operator new();
  v101 = v100;
  *(_QWORD *)v100 = &off_1E429CE90;
  *(_QWORD *)(v100 + 8) = 0;
  v102 = (uint64_t *)(v100 + 8);
  *(_QWORD *)(v100 + 16) = 0;
  if (!*(_BYTE *)(*v604 + 112))
  {
LABEL_492:
    std::__throw_bad_optional_access[abi:nn180100]();
    goto LABEL_687;
  }
  *(_WORD *)(v100 + 24) = *(_WORD *)(*v604 + 110);
  v103 = *(_QWORD **)*v606;
  v104 = *(_QWORD **)(*v606 + 8);
  if (v103 != v104)
  {
    while (*v103 != 0xD369A4D92C8FFE6CLL)
    {
      v103 += 5;
      if (v103 == v104)
        goto LABEL_149;
    }
  }
  if (v103 == v104)
  {
LABEL_149:
    v106 = 0;
  }
  else
  {
    v106 = v103[3];
    v105 = (std::__shared_weak_count *)v103[4];
    if (v105)
    {
      v107 = (unint64_t *)&v105->__shared_owners_;
      do
        v108 = __ldxr(v107);
      while (__stxr(v108 + 1, v107));
      do
        v109 = __ldaxr(v107);
      while (__stlxr(v109 - 1, v107));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }
  }
  *(_QWORD *)(v101 + 32) = v106;
  *(_BYTE *)(v101 + 40) = 0;
  v110 = *((float *)a1 + 44);
  v111 = a1[23];
  v112 = a1[14];
  v113 = *(_QWORD **)v112;
  v114 = *(_QWORD **)(v112 + 8);
  if (v113 != v114)
  {
    while (*v113 != 0x6F66BE14E10A8F81)
    {
      v113 += 5;
      if (v113 == v114)
        goto LABEL_159;
    }
  }
  if (v113 == v114)
  {
LABEL_159:
    v116 = 0;
    v115 = 0;
  }
  else
  {
    v116 = (uint64_t (**)())v113[3];
    v115 = (std::__shared_weak_count *)v113[4];
    if (v115)
    {
      v117 = (unint64_t *)&v115->__shared_owners_;
      do
        v118 = __ldxr(v117);
      while (__stxr(v118 + 1, v117));
    }
  }
  v119 = operator new();
  v120 = __clz(v110 - 1);
  v121 = -v120 & 0x1F;
  __x[23] = 4;
  strcpy(__x, "Icon");
  v122 = (256 << (-(char)v120 & 0x1F));
  v615 = (uint64_t (**)())(v122 | ((unint64_t)((256 << (-(char)v120 & 0x1F)) >> 8) << 40));
  v613[0] = (uint32x2_t)v615;
  *(_QWORD *)&v619 = v116;
  *((_QWORD *)&v619 + 1) = v115;
  if (v115)
  {
    v123 = (unint64_t *)&v115->__shared_owners_;
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 1, v123));
  }
  v125 = ta2::TextureAtlas::TextureAtlas(v119, (__int128 *)__x, 0, 0xCu, (uint32x2_t *)&v615, v613, v111 != 0, &v619, a1[31]);
  v126 = *(_QWORD *)(v101 + 16);
  *(_QWORD *)(v101 + 16) = v125;
  if (v126)
    (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
  if (!v115)
    goto LABEL_169;
  v127 = (unint64_t *)&v115->__shared_owners_;
  do
    v128 = __ldaxr(v127);
  while (__stlxr(v128 - 1, v127));
  if (v128)
  {
LABEL_169:
    if ((__x[23] & 0x80000000) == 0)
      goto LABEL_171;
    goto LABEL_170;
  }
  ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
  std::__shared_weak_count::__release_weak(v115);
  if ((__x[23] & 0x80000000) != 0)
LABEL_170:
    operator delete(*(void **)__x);
LABEL_171:
  v129 = operator new();
  __x[23] = 5;
  strcpy(__x, "Glyph");
  v613[0] = (uint32x2_t)(v122 & 0x1FFFFFFFFFFLL | ((unint64_t)((512 << v121) >> 9) << 41));
  v611[0] = (uint32x2_t)(v122 & 0xFFFFFFFFFFLL | ((unint64_t)(v122 >> 8) << 40));
  v615 = v116;
  v616 = v115;
  if (v115)
  {
    v130 = (unint64_t *)&v115->__shared_owners_;
    do
      v131 = __ldxr(v130);
    while (__stxr(v131 + 1, v130));
  }
  v132 = ta2::TextureAtlas::TextureAtlas(v129, (__int128 *)__x, 1, 6u, v613, v611, v111 != 0, &v615, a1[31]);
  v133 = *v102;
  *v102 = v132;
  if (v133)
    (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
  if (v115)
  {
    v134 = (unint64_t *)&v115->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
      if ((__x[23] & 0x80000000) == 0)
        goto LABEL_182;
      goto LABEL_181;
    }
  }
  if ((__x[23] & 0x80000000) != 0)
LABEL_181:
    operator delete(*(void **)__x);
LABEL_182:
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v136 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(v101 + 40) = (a1[23] == 0) & ~objc_msgSend(v136, "disableIconTextureAtlas");

  if (v115)
  {
    v137 = (unint64_t *)&v115->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  a1[32] = v101;
  v139 = operator new();
  *(_QWORD *)v139 = v139;
  *(_QWORD *)(v139 + 8) = v139;
  *(_QWORD *)(v139 + 16) = 0;
  {
    v400 = operator new();
    *(_QWORD *)(v400 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v400 + 24) = "VectorKitLabels";
    *(_OWORD *)(v400 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v400 = &off_1E42B5668;
    *(_QWORD *)(v400 + 8) = "VectorKitLabels";
    *(_OWORD *)(v400 + 72) = 0u;
    *(_OWORD *)(v400 + 88) = 0u;
    *(_OWORD *)(v400 + 104) = 0u;
    *(_OWORD *)(v400 + 120) = 0u;
    *(_OWORD *)(v400 + 136) = 0u;
    *(_OWORD *)(v400 + 152) = 0u;
    *(_OWORD *)(v400 + 168) = 0u;
    *(_OWORD *)(v400 + 184) = 0u;
    *(_OWORD *)(v400 + 200) = 0u;
    *(_OWORD *)(v400 + 216) = 0u;
    *(_OWORD *)(v400 + 232) = 0u;
    *(_QWORD *)(v400 + 248) = 0;
    *(_OWORD *)(v400 + 56) = 0u;
    v401 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v400 + 56), 0);
    if ((_DWORD)v401)
      geo::read_write_lock::logFailure(v401, (uint64_t)"initialization", v402);
    v403 = malloc_create_zone(0, 0);
    *(_QWORD *)(v400 + 48) = v403;
    malloc_set_zone_name(v403, "VectorKitLabels");
    *(_QWORD *)(v400 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v400;
  }
  v141 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v139 + 32) = 0;
  *(_QWORD *)(v139 + 24) = v141;
  *(_QWORD *)(v139 + 40) = 0;
  {
    v404 = operator new();
    *(_QWORD *)(v404 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v404 + 24) = "VectorKitLabels";
    *(_OWORD *)(v404 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v404 = &off_1E42B5668;
    *(_QWORD *)(v404 + 8) = "VectorKitLabels";
    *(_OWORD *)(v404 + 72) = 0u;
    *(_OWORD *)(v404 + 88) = 0u;
    *(_OWORD *)(v404 + 104) = 0u;
    *(_OWORD *)(v404 + 120) = 0u;
    *(_OWORD *)(v404 + 136) = 0u;
    *(_OWORD *)(v404 + 152) = 0u;
    *(_OWORD *)(v404 + 168) = 0u;
    *(_OWORD *)(v404 + 184) = 0u;
    *(_OWORD *)(v404 + 200) = 0u;
    *(_OWORD *)(v404 + 216) = 0u;
    *(_OWORD *)(v404 + 232) = 0u;
    *(_QWORD *)(v404 + 248) = 0;
    *(_OWORD *)(v404 + 56) = 0u;
    v405 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v404 + 56), 0);
    if ((_DWORD)v405)
      geo::read_write_lock::logFailure(v405, (uint64_t)"initialization", v406);
    v407 = malloc_create_zone(0, 0);
    *(_QWORD *)(v404 + 48) = v407;
    malloc_set_zone_name(v407, "VectorKitLabels");
    *(_QWORD *)(v404 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v404;
  }
  *(_QWORD *)(v139 + 48) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v139 + 56) = 0;
  {
    v408 = operator new();
    *(_QWORD *)(v408 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v408 + 24) = "VectorKitLabels";
    *(_OWORD *)(v408 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v408 = &off_1E42B5668;
    *(_QWORD *)(v408 + 8) = "VectorKitLabels";
    *(_OWORD *)(v408 + 72) = 0u;
    *(_OWORD *)(v408 + 88) = 0u;
    *(_OWORD *)(v408 + 104) = 0u;
    *(_OWORD *)(v408 + 120) = 0u;
    *(_OWORD *)(v408 + 136) = 0u;
    *(_OWORD *)(v408 + 152) = 0u;
    *(_OWORD *)(v408 + 168) = 0u;
    *(_OWORD *)(v408 + 184) = 0u;
    *(_OWORD *)(v408 + 200) = 0u;
    *(_OWORD *)(v408 + 216) = 0u;
    *(_OWORD *)(v408 + 232) = 0u;
    *(_QWORD *)(v408 + 248) = 0;
    *(_OWORD *)(v408 + 56) = 0u;
    v409 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v408 + 56), 0);
    if ((_DWORD)v409)
      geo::read_write_lock::logFailure(v409, (uint64_t)"initialization", v410);
    v411 = malloc_create_zone(0, 0);
    *(_QWORD *)(v408 + 48) = v411;
    malloc_set_zone_name(v411, "VectorKitLabels");
    *(_QWORD *)(v408 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v408;
  }
  *(_QWORD *)(v139 + 64) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v139 + 72) = 0;
  *(_DWORD *)(v139 + 80) = 1065353216;
  *(_QWORD *)(v139 + 100) = 0;
  *(_QWORD *)(v139 + 92) = 0;
  *(_DWORD *)(v139 + 108) = 100;
  *(_QWORD *)(v139 + 112) = a1;
  *(_QWORD *)(v139 + 120) = 0;
  *(_QWORD *)(v139 + 128) = 0;
  *(_QWORD *)(v139 + 136) = 0;
  *(_DWORD *)(v139 + 88) = 500;
  if (!a1[23])
  {
    v143 = operator new(0x60uLL);
    v143[1] = 0;
    v143[2] = 0;
    *v143 = &off_1E42DBEF0;
    v143[3] = 850045863;
    *((_OWORD *)v143 + 2) = 0u;
    *((_OWORD *)v143 + 3) = 0u;
    *((_OWORD *)v143 + 4) = 0u;
    v143[10] = 0;
    v143[11] = v139;
    *(_QWORD *)(v139 + 120) = v143 + 3;
    *(_QWORD *)(v139 + 128) = v143;
  }
  a1[33] = v139;
  v144 = operator new();
  *(_QWORD *)v144 = 0;
  *(_QWORD *)(v144 + 8) = 0;
  *(_QWORD *)(v144 + 16) = a1;
  *(_QWORD *)(v144 + 24) = 0;
  *(_QWORD *)(v144 + 32) = 0;
  *(_QWORD *)(v144 + 40) = 0;
  {
    v412 = operator new();
    *(_QWORD *)(v412 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v412 + 24) = "VectorKitLabels";
    *(_OWORD *)(v412 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v412 = &off_1E42B5668;
    *(_QWORD *)(v412 + 8) = "VectorKitLabels";
    *(_OWORD *)(v412 + 72) = 0u;
    *(_OWORD *)(v412 + 88) = 0u;
    *(_OWORD *)(v412 + 104) = 0u;
    *(_OWORD *)(v412 + 120) = 0u;
    *(_OWORD *)(v412 + 136) = 0u;
    *(_OWORD *)(v412 + 152) = 0u;
    *(_OWORD *)(v412 + 168) = 0u;
    *(_OWORD *)(v412 + 184) = 0u;
    *(_OWORD *)(v412 + 200) = 0u;
    *(_OWORD *)(v412 + 216) = 0u;
    *(_OWORD *)(v412 + 232) = 0u;
    *(_QWORD *)(v412 + 248) = 0;
    *(_OWORD *)(v412 + 56) = 0u;
    v413 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v412 + 56), 0);
    if ((_DWORD)v413)
      geo::read_write_lock::logFailure(v413, (uint64_t)"initialization", v414);
    v415 = malloc_create_zone(0, 0);
    *(_QWORD *)(v412 + 48) = v415;
    malloc_set_zone_name(v415, "VectorKitLabels");
    *(_QWORD *)(v412 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v412;
  }
  *(_QWORD *)(v144 + 48) = mdm::Allocator::instance(void)::alloc;
  *(_DWORD *)(v144 + 56) = 0;
  *(_BYTE *)(v144 + 60) = 0;
  if (!*(_QWORD *)(*(_QWORD *)(v144 + 16) + 184))
  {
    v287 = operator new(0x60uLL);
    v287[1] = 0;
    v287[2] = 0;
    *v287 = &off_1E42DBF28;
    v287[3] = 850045863;
    *((_OWORD *)v287 + 2) = 0u;
    *((_OWORD *)v287 + 3) = 0u;
    *((_OWORD *)v287 + 4) = 0u;
    v287[10] = 0;
    v287[11] = v144;
    v288 = *(std::__shared_weak_count **)(v144 + 8);
    *(_QWORD *)v144 = v287 + 3;
    *(_QWORD *)(v144 + 8) = v287;
    if (v288)
    {
      v289 = (unint64_t *)&v288->__shared_owners_;
      do
        v290 = __ldaxr(v289);
      while (__stlxr(v290 - 1, v289));
      if (!v290)
      {
        ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
        std::__shared_weak_count::__release_weak(v288);
      }
    }
  }
  a1[34] = v144;
  v146 = operator new();
  *(_QWORD *)v146 = 0;
  *(_QWORD *)(v146 + 8) = 0;
  *(_QWORD *)(v146 + 16) = 0;
  *(_QWORD *)(v146 + 24) = a1;
  *(_QWORD *)(v146 + 32) = 0;
  *(_QWORD *)(v146 + 40) = 0;
  *(_QWORD *)(v146 + 48) = 0;
  {
    v416 = operator new();
    *(_QWORD *)(v416 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v416 + 24) = "VectorKitLabels";
    *(_OWORD *)(v416 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v416 = &off_1E42B5668;
    *(_QWORD *)(v416 + 8) = "VectorKitLabels";
    *(_OWORD *)(v416 + 72) = 0u;
    *(_OWORD *)(v416 + 88) = 0u;
    *(_OWORD *)(v416 + 104) = 0u;
    *(_OWORD *)(v416 + 120) = 0u;
    *(_OWORD *)(v416 + 136) = 0u;
    *(_OWORD *)(v416 + 152) = 0u;
    *(_OWORD *)(v416 + 168) = 0u;
    *(_OWORD *)(v416 + 184) = 0u;
    *(_OWORD *)(v416 + 200) = 0u;
    *(_OWORD *)(v416 + 216) = 0u;
    *(_OWORD *)(v416 + 232) = 0u;
    *(_QWORD *)(v416 + 248) = 0;
    *(_OWORD *)(v416 + 56) = 0u;
    v417 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v416 + 56), 0);
    if ((_DWORD)v417)
      geo::read_write_lock::logFailure(v417, (uint64_t)"initialization", v418);
    v419 = malloc_create_zone(0, 0);
    *(_QWORD *)(v416 + 48) = v419;
    malloc_set_zone_name(v419, "VectorKitLabels");
    *(_QWORD *)(v416 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v416;
  }
  *(_QWORD *)(v146 + 56) = mdm::Allocator::instance(void)::alloc;
  *(_DWORD *)(v146 + 64) = 0;
  *(_BYTE *)(v146 + 68) = 0;
  *(_BYTE *)(v146 + 72) = 0;
  *(_DWORD *)(v146 + 76) = 0;
  if (!*(_QWORD *)(*(_QWORD *)(v146 + 24) + 184))
  {
    v291 = operator new(0x60uLL);
    v291[1] = 0;
    v291[2] = 0;
    *v291 = &off_1E42DBF98;
    v291[3] = 850045863;
    *((_OWORD *)v291 + 2) = 0u;
    *((_OWORD *)v291 + 3) = 0u;
    *((_OWORD *)v291 + 4) = 0u;
    v291[10] = 0;
    v291[11] = v146;
    v292 = *(std::__shared_weak_count **)(v146 + 16);
    *(_QWORD *)(v146 + 8) = v291 + 3;
    *(_QWORD *)(v146 + 16) = v291;
    if (v292)
    {
      v293 = (unint64_t *)&v292->__shared_owners_;
      do
        v294 = __ldaxr(v293);
      while (__stlxr(v294 - 1, v293));
      if (!v294)
      {
        ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
        std::__shared_weak_count::__release_weak(v292);
      }
    }
  }
  v148 = operator new();
  v149 = (float)(*(float *)(*(_QWORD *)(*v604 + 8) + 176) * (float)*(unsigned int *)(*v604 + 52));
  *(_QWORD *)v148 = &off_1E4292220;
  *(_QWORD *)(v148 + 8) = 0;
  *(_QWORD *)(v148 + 16) = 0;
  *(_QWORD *)(v148 + 24) = 0;
  v150 = atomic_load(&md::SignedDistanceFieldGenerator::initializeHypotCache(void)::flag);
  if (v150 != -1)
  {
    *(_QWORD *)__x = &v615;
    *(_QWORD *)&v619 = __x;
    std::__call_once(&md::SignedDistanceFieldGenerator::initializeHypotCache(void)::flag, &v619, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<md::SignedDistanceFieldGenerator::initializeHypotCache(void)::$_0 &&>>);
  }
  *(_QWORD *)(v148 + 40) = 850045863;
  *(_DWORD *)(v148 + 32) = 128;
  *(_OWORD *)(v148 + 48) = 0u;
  *(_OWORD *)(v148 + 64) = 0u;
  *(_OWORD *)(v148 + 80) = 0u;
  *(_QWORD *)(v148 + 96) = 0;
  *(_DWORD *)(v148 + 104) = 4;
  *(_DWORD *)(v148 + 108) = v149;
  *(_QWORD *)(v148 + 112) = 16;
  *(_OWORD *)(v148 + 120) = 0u;
  *(_OWORD *)(v148 + 136) = 0u;
  *(_DWORD *)(v148 + 152) = 1065353216;
  *(_QWORD *)(v148 + 160) = v148 + 160;
  *(_QWORD *)(v148 + 168) = v148 + 160;
  *(_OWORD *)(v148 + 176) = 0u;
  *(_OWORD *)(v148 + 192) = 0u;
  {
    v420 = operator new();
    *(_QWORD *)(v420 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v420 + 24) = "VectorKitLabels";
    *(_OWORD *)(v420 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v420 = &off_1E42B5668;
    *(_QWORD *)(v420 + 8) = "VectorKitLabels";
    *(_OWORD *)(v420 + 72) = 0u;
    *(_OWORD *)(v420 + 88) = 0u;
    *(_OWORD *)(v420 + 104) = 0u;
    *(_OWORD *)(v420 + 120) = 0u;
    *(_OWORD *)(v420 + 136) = 0u;
    *(_OWORD *)(v420 + 152) = 0u;
    *(_OWORD *)(v420 + 168) = 0u;
    *(_OWORD *)(v420 + 184) = 0u;
    *(_OWORD *)(v420 + 200) = 0u;
    *(_OWORD *)(v420 + 216) = 0u;
    *(_OWORD *)(v420 + 232) = 0u;
    *(_QWORD *)(v420 + 248) = 0;
    *(_OWORD *)(v420 + 56) = 0u;
    v421 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v420 + 56), 0);
    if ((_DWORD)v421)
      geo::read_write_lock::logFailure(v421, (uint64_t)"initialization", v422);
    v423 = malloc_create_zone(0, 0);
    *(_QWORD *)(v420 + 48) = v423;
    malloc_set_zone_name(v423, "VectorKitLabels");
    *(_QWORD *)(v420 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v420;
  }
  v152 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v148 + 216) = 0;
  *(_QWORD *)(v148 + 208) = v152;
  *(_QWORD *)(v148 + 224) = 0;
  *(_QWORD *)(v148 + 232) = 0;
  {
    v424 = operator new();
    *(_QWORD *)(v424 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v424 + 24) = "VectorKitLabels";
    *(_OWORD *)(v424 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v424 = &off_1E42B5668;
    *(_QWORD *)(v424 + 8) = "VectorKitLabels";
    *(_OWORD *)(v424 + 72) = 0u;
    *(_OWORD *)(v424 + 88) = 0u;
    *(_OWORD *)(v424 + 104) = 0u;
    *(_OWORD *)(v424 + 120) = 0u;
    *(_OWORD *)(v424 + 136) = 0u;
    *(_OWORD *)(v424 + 152) = 0u;
    *(_OWORD *)(v424 + 168) = 0u;
    *(_OWORD *)(v424 + 184) = 0u;
    *(_OWORD *)(v424 + 200) = 0u;
    *(_OWORD *)(v424 + 216) = 0u;
    *(_OWORD *)(v424 + 232) = 0u;
    *(_QWORD *)(v424 + 248) = 0;
    *(_OWORD *)(v424 + 56) = 0u;
    v425 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v424 + 56), 0);
    if ((_DWORD)v425)
      geo::read_write_lock::logFailure(v425, (uint64_t)"initialization", v426);
    v427 = malloc_create_zone(0, 0);
    *(_QWORD *)(v424 + 48) = v427;
    malloc_set_zone_name(v427, "VectorKitLabels");
    *(_QWORD *)(v424 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v424;
  }
  v153 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v148 + 248) = 0;
  *(_QWORD *)(v148 + 240) = v153;
  *(_QWORD *)(v148 + 256) = 0;
  *(_QWORD *)(v148 + 264) = 0;
  {
    v428 = operator new();
    *(_QWORD *)(v428 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v428 + 24) = "VectorKitLabels";
    *(_OWORD *)(v428 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v428 = &off_1E42B5668;
    *(_QWORD *)(v428 + 8) = "VectorKitLabels";
    *(_OWORD *)(v428 + 72) = 0u;
    *(_OWORD *)(v428 + 88) = 0u;
    *(_OWORD *)(v428 + 104) = 0u;
    *(_OWORD *)(v428 + 120) = 0u;
    *(_OWORD *)(v428 + 136) = 0u;
    *(_OWORD *)(v428 + 152) = 0u;
    *(_OWORD *)(v428 + 168) = 0u;
    *(_OWORD *)(v428 + 184) = 0u;
    *(_OWORD *)(v428 + 200) = 0u;
    *(_OWORD *)(v428 + 216) = 0u;
    *(_OWORD *)(v428 + 232) = 0u;
    *(_QWORD *)(v428 + 248) = 0;
    *(_OWORD *)(v428 + 56) = 0u;
    v429 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v428 + 56), 0);
    if ((_DWORD)v429)
      geo::read_write_lock::logFailure(v429, (uint64_t)"initialization", v430);
    v431 = malloc_create_zone(0, 0);
    *(_QWORD *)(v428 + 48) = v431;
    malloc_set_zone_name(v431, "VectorKitLabels");
    *(_QWORD *)(v428 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v428;
  }
  *(_QWORD *)(v148 + 272) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v148 + 280) = 0;
  *(_QWORD *)(v148 + 288) = 0;
  *(_QWORD *)(v148 + 296) = 0;
  {
    v432 = operator new();
    *(_QWORD *)(v432 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v432 + 24) = "VectorKitLabels";
    *(_OWORD *)(v432 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v432 = &off_1E42B5668;
    *(_QWORD *)(v432 + 8) = "VectorKitLabels";
    *(_OWORD *)(v432 + 72) = 0u;
    *(_OWORD *)(v432 + 88) = 0u;
    *(_OWORD *)(v432 + 104) = 0u;
    *(_OWORD *)(v432 + 120) = 0u;
    *(_OWORD *)(v432 + 136) = 0u;
    *(_OWORD *)(v432 + 152) = 0u;
    *(_OWORD *)(v432 + 168) = 0u;
    *(_OWORD *)(v432 + 184) = 0u;
    *(_OWORD *)(v432 + 200) = 0u;
    *(_OWORD *)(v432 + 216) = 0u;
    *(_OWORD *)(v432 + 232) = 0u;
    *(_QWORD *)(v432 + 248) = 0;
    *(_OWORD *)(v432 + 56) = 0u;
    v433 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v432 + 56), 0);
    if ((_DWORD)v433)
      geo::read_write_lock::logFailure(v433, (uint64_t)"initialization", v434);
    v435 = malloc_create_zone(0, 0);
    *(_QWORD *)(v432 + 48) = v435;
    malloc_set_zone_name(v435, "VectorKitLabels");
    *(_QWORD *)(v432 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v432;
  }
  *(_QWORD *)(v148 + 304) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v148 + 312) = 0;
  *(_QWORD *)(v148 + 320) = 0;
  *(_QWORD *)(v148 + 328) = 0;
  {
    v436 = operator new();
    *(_QWORD *)(v436 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v436 + 24) = "VectorKitLabels";
    *(_OWORD *)(v436 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v436 = &off_1E42B5668;
    *(_QWORD *)(v436 + 8) = "VectorKitLabels";
    *(_OWORD *)(v436 + 72) = 0u;
    *(_OWORD *)(v436 + 88) = 0u;
    *(_OWORD *)(v436 + 104) = 0u;
    *(_OWORD *)(v436 + 120) = 0u;
    *(_OWORD *)(v436 + 136) = 0u;
    *(_OWORD *)(v436 + 152) = 0u;
    *(_OWORD *)(v436 + 168) = 0u;
    *(_OWORD *)(v436 + 184) = 0u;
    *(_OWORD *)(v436 + 200) = 0u;
    *(_OWORD *)(v436 + 216) = 0u;
    *(_OWORD *)(v436 + 232) = 0u;
    *(_QWORD *)(v436 + 248) = 0;
    *(_OWORD *)(v436 + 56) = 0u;
    v437 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v436 + 56), 0);
    if ((_DWORD)v437)
      geo::read_write_lock::logFailure(v437, (uint64_t)"initialization", v438);
    v439 = malloc_create_zone(0, 0);
    *(_QWORD *)(v436 + 48) = v439;
    malloc_set_zone_name(v439, "VectorKitLabels");
    *(_QWORD *)(v436 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v436;
  }
  *(_QWORD *)(v148 + 336) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v148 + 344) = 0;
  *(_QWORD *)(v148 + 352) = 0;
  *(_QWORD *)(v148 + 360) = 0;
  {
    v440 = operator new();
    *(_QWORD *)(v440 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v440 + 24) = "VectorKitLabels";
    *(_OWORD *)(v440 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v440 = &off_1E42B5668;
    *(_QWORD *)(v440 + 8) = "VectorKitLabels";
    *(_OWORD *)(v440 + 72) = 0u;
    *(_OWORD *)(v440 + 88) = 0u;
    *(_OWORD *)(v440 + 104) = 0u;
    *(_OWORD *)(v440 + 120) = 0u;
    *(_OWORD *)(v440 + 136) = 0u;
    *(_OWORD *)(v440 + 152) = 0u;
    *(_OWORD *)(v440 + 168) = 0u;
    *(_OWORD *)(v440 + 184) = 0u;
    *(_OWORD *)(v440 + 200) = 0u;
    *(_OWORD *)(v440 + 216) = 0u;
    *(_OWORD *)(v440 + 232) = 0u;
    *(_QWORD *)(v440 + 248) = 0;
    *(_OWORD *)(v440 + 56) = 0u;
    v441 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v440 + 56), 0);
    if ((_DWORD)v441)
      geo::read_write_lock::logFailure(v441, (uint64_t)"initialization", v442);
    v443 = malloc_create_zone(0, 0);
    *(_QWORD *)(v440 + 48) = v443;
    malloc_set_zone_name(v443, "VectorKitLabels");
    *(_QWORD *)(v440 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v440;
  }
  *(_QWORD *)(v148 + 368) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v148 + 376) = 0;
  *(_QWORD *)(v148 + 384) = 0;
  *(_QWORD *)(v148 + 392) = 0;
  {
    v444 = operator new();
    *(_QWORD *)(v444 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v444 + 24) = "VectorKitLabels";
    *(_OWORD *)(v444 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v444 = &off_1E42B5668;
    *(_QWORD *)(v444 + 8) = "VectorKitLabels";
    *(_OWORD *)(v444 + 72) = 0u;
    *(_OWORD *)(v444 + 88) = 0u;
    *(_OWORD *)(v444 + 104) = 0u;
    *(_OWORD *)(v444 + 120) = 0u;
    *(_OWORD *)(v444 + 136) = 0u;
    *(_OWORD *)(v444 + 152) = 0u;
    *(_OWORD *)(v444 + 168) = 0u;
    *(_OWORD *)(v444 + 184) = 0u;
    *(_OWORD *)(v444 + 200) = 0u;
    *(_OWORD *)(v444 + 216) = 0u;
    *(_OWORD *)(v444 + 232) = 0u;
    *(_QWORD *)(v444 + 248) = 0;
    *(_OWORD *)(v444 + 56) = 0u;
    v445 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v444 + 56), 0);
    if ((_DWORD)v445)
      geo::read_write_lock::logFailure(v445, (uint64_t)"initialization", v446);
    v447 = malloc_create_zone(0, 0);
    *(_QWORD *)(v444 + 48) = v447;
    malloc_set_zone_name(v447, "VectorKitLabels");
    *(_QWORD *)(v444 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v444;
    a3 = v605;
  }
  *(_QWORD *)(v148 + 400) = mdm::Allocator::instance(void)::alloc;
  *(_DWORD *)(v148 + 408) = 20;
  *(_DWORD *)(v148 + 436) = 0;
  *(_QWORD *)(v148 + 412) = 0;
  *(_QWORD *)(v148 + 428) = 0;
  *(_QWORD *)(v148 + 420) = 0;
  v158 = atomic_load(md::SDFGlyphRenderer::SDFGlyphRenderer(unsigned int,unsigned int,unsigned int)::flag);
  if (v158 != -1)
  {
    *(_QWORD *)__x = &v615;
    *(_QWORD *)&v619 = __x;
    std::__call_once(md::SDFGlyphRenderer::SDFGlyphRenderer(unsigned int,unsigned int,unsigned int)::flag, &v619, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<md::SDFGlyphRenderer::SDFGlyphRenderer(unsigned int,unsigned int,unsigned int)::$_0 &&>>);
    a3 = v605;
  }
  *(_DWORD *)(v148 + 408) = *(_QWORD *)(v148 + 112);
  v159 = *(_QWORD *)v146;
  *(_QWORD *)v146 = v148;
  if (v159)
    (*(void (**)(uint64_t))(*(_QWORD *)v159 + 16))(v159);
  a1[35] = v146;
  v160 = operator new();
  *(_QWORD *)v160 = 850045863;
  *(_OWORD *)(v160 + 8) = 0u;
  *(_OWORD *)(v160 + 24) = 0u;
  *(_OWORD *)(v160 + 40) = 0u;
  *(_OWORD *)(v160 + 56) = 0u;
  *(_QWORD *)(v160 + 72) = 0;
  {
    v448 = operator new();
    *(_QWORD *)(v448 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v448 + 24) = "VectorKitLabels";
    *(_OWORD *)(v448 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v448 = &off_1E42B5668;
    *(_QWORD *)(v448 + 8) = "VectorKitLabels";
    *(_OWORD *)(v448 + 72) = 0u;
    *(_OWORD *)(v448 + 88) = 0u;
    *(_OWORD *)(v448 + 104) = 0u;
    *(_OWORD *)(v448 + 120) = 0u;
    *(_OWORD *)(v448 + 136) = 0u;
    *(_OWORD *)(v448 + 152) = 0u;
    *(_OWORD *)(v448 + 168) = 0u;
    *(_OWORD *)(v448 + 184) = 0u;
    *(_OWORD *)(v448 + 200) = 0u;
    *(_OWORD *)(v448 + 216) = 0u;
    *(_OWORD *)(v448 + 232) = 0u;
    *(_QWORD *)(v448 + 248) = 0;
    *(_OWORD *)(v448 + 56) = 0u;
    v449 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v448 + 56), 0);
    if ((_DWORD)v449)
      geo::read_write_lock::logFailure(v449, (uint64_t)"initialization", v450);
    v451 = malloc_create_zone(0, 0);
    *(_QWORD *)(v448 + 48) = v451;
    malloc_set_zone_name(v451, "VectorKitLabels");
    *(_QWORD *)(v448 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v448;
    a3 = v605;
  }
  *(_QWORD *)(v160 + 80) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v160 + 88) = 0;
  {
    v452 = operator new();
    *(_QWORD *)(v452 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v452 + 24) = "VectorKitLabels";
    *(_OWORD *)(v452 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v452 = &off_1E42B5668;
    *(_QWORD *)(v452 + 8) = "VectorKitLabels";
    *(_OWORD *)(v452 + 72) = 0u;
    *(_OWORD *)(v452 + 88) = 0u;
    *(_OWORD *)(v452 + 104) = 0u;
    *(_OWORD *)(v452 + 120) = 0u;
    *(_OWORD *)(v452 + 136) = 0u;
    *(_OWORD *)(v452 + 152) = 0u;
    *(_OWORD *)(v452 + 168) = 0u;
    *(_OWORD *)(v452 + 184) = 0u;
    *(_OWORD *)(v452 + 200) = 0u;
    *(_OWORD *)(v452 + 216) = 0u;
    *(_OWORD *)(v452 + 232) = 0u;
    *(_QWORD *)(v452 + 248) = 0;
    *(_OWORD *)(v452 + 56) = 0u;
    v453 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v452 + 56), 0);
    if ((_DWORD)v453)
      geo::read_write_lock::logFailure(v453, (uint64_t)"initialization", v454);
    v455 = malloc_create_zone(0, 0);
    *(_QWORD *)(v452 + 48) = v455;
    malloc_set_zone_name(v455, "VectorKitLabels");
    *(_QWORD *)(v452 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v452;
    a3 = v605;
  }
  *(_QWORD *)(v160 + 96) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v160 + 104) = 0;
  *(_DWORD *)(v160 + 112) = 1065353216;
  *(_QWORD *)(v160 + 120) = 0;
  *(_QWORD *)(v160 + 128) = 0;
  {
    v456 = operator new();
    *(_QWORD *)(v456 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v456 + 24) = "VectorKitLabels";
    *(_OWORD *)(v456 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v456 = &off_1E42B5668;
    *(_QWORD *)(v456 + 8) = "VectorKitLabels";
    *(_OWORD *)(v456 + 72) = 0u;
    *(_OWORD *)(v456 + 88) = 0u;
    *(_OWORD *)(v456 + 104) = 0u;
    *(_OWORD *)(v456 + 120) = 0u;
    *(_OWORD *)(v456 + 136) = 0u;
    *(_OWORD *)(v456 + 152) = 0u;
    *(_OWORD *)(v456 + 168) = 0u;
    *(_OWORD *)(v456 + 184) = 0u;
    *(_OWORD *)(v456 + 200) = 0u;
    *(_OWORD *)(v456 + 216) = 0u;
    *(_OWORD *)(v456 + 232) = 0u;
    *(_QWORD *)(v456 + 248) = 0;
    *(_OWORD *)(v456 + 56) = 0u;
    v457 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v456 + 56), 0);
    if ((_DWORD)v457)
      geo::read_write_lock::logFailure(v457, (uint64_t)"initialization", v458);
    v459 = malloc_create_zone(0, 0);
    *(_QWORD *)(v456 + 48) = v459;
    malloc_set_zone_name(v459, "VectorKitLabels");
    *(_QWORD *)(v456 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v456;
    a3 = v605;
  }
  *(_QWORD *)(v160 + 136) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v160 + 144) = 0;
  {
    v460 = operator new();
    *(_QWORD *)(v460 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v460 + 24) = "VectorKitLabels";
    *(_OWORD *)(v460 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v460 = &off_1E42B5668;
    *(_QWORD *)(v460 + 8) = "VectorKitLabels";
    *(_OWORD *)(v460 + 72) = 0u;
    *(_OWORD *)(v460 + 88) = 0u;
    *(_OWORD *)(v460 + 104) = 0u;
    *(_OWORD *)(v460 + 120) = 0u;
    *(_OWORD *)(v460 + 136) = 0u;
    *(_OWORD *)(v460 + 152) = 0u;
    *(_OWORD *)(v460 + 168) = 0u;
    *(_OWORD *)(v460 + 184) = 0u;
    *(_OWORD *)(v460 + 200) = 0u;
    *(_OWORD *)(v460 + 216) = 0u;
    *(_OWORD *)(v460 + 232) = 0u;
    *(_QWORD *)(v460 + 248) = 0;
    *(_OWORD *)(v460 + 56) = 0u;
    v461 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v460 + 56), 0);
    if ((_DWORD)v461)
      geo::read_write_lock::logFailure(v461, (uint64_t)"initialization", v462);
    v463 = malloc_create_zone(0, 0);
    *(_QWORD *)(v460 + 48) = v463;
    malloc_set_zone_name(v463, "VectorKitLabels");
    *(_QWORD *)(v460 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v460;
    a3 = v605;
  }
  *(_QWORD *)(v160 + 152) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v160 + 160) = 0;
  *(_DWORD *)(v160 + 168) = 1065353216;
  *(_QWORD *)(v160 + 176) = 0;
  *(_QWORD *)(v160 + 184) = 0;
  {
    v464 = operator new();
    *(_QWORD *)(v464 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v464 + 24) = "VectorKitLabels";
    *(_OWORD *)(v464 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v464 = &off_1E42B5668;
    *(_QWORD *)(v464 + 8) = "VectorKitLabels";
    *(_OWORD *)(v464 + 72) = 0u;
    *(_OWORD *)(v464 + 88) = 0u;
    *(_OWORD *)(v464 + 104) = 0u;
    *(_OWORD *)(v464 + 120) = 0u;
    *(_OWORD *)(v464 + 136) = 0u;
    *(_OWORD *)(v464 + 152) = 0u;
    *(_OWORD *)(v464 + 168) = 0u;
    *(_OWORD *)(v464 + 184) = 0u;
    *(_OWORD *)(v464 + 200) = 0u;
    *(_OWORD *)(v464 + 216) = 0u;
    *(_OWORD *)(v464 + 232) = 0u;
    *(_QWORD *)(v464 + 248) = 0;
    *(_OWORD *)(v464 + 56) = 0u;
    v465 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v464 + 56), 0);
    if ((_DWORD)v465)
      geo::read_write_lock::logFailure(v465, (uint64_t)"initialization", v466);
    v467 = malloc_create_zone(0, 0);
    *(_QWORD *)(v464 + 48) = v467;
    malloc_set_zone_name(v467, "VectorKitLabels");
    *(_QWORD *)(v464 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v464;
    a3 = v605;
  }
  *(_QWORD *)(v160 + 192) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v160 + 200) = 0;
  {
    v468 = operator new();
    *(_QWORD *)(v468 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v468 + 24) = "VectorKitLabels";
    *(_OWORD *)(v468 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v468 = &off_1E42B5668;
    *(_QWORD *)(v468 + 8) = "VectorKitLabels";
    *(_OWORD *)(v468 + 72) = 0u;
    *(_OWORD *)(v468 + 88) = 0u;
    *(_OWORD *)(v468 + 104) = 0u;
    *(_OWORD *)(v468 + 120) = 0u;
    *(_OWORD *)(v468 + 136) = 0u;
    *(_OWORD *)(v468 + 152) = 0u;
    *(_OWORD *)(v468 + 168) = 0u;
    *(_OWORD *)(v468 + 184) = 0u;
    *(_OWORD *)(v468 + 200) = 0u;
    *(_OWORD *)(v468 + 216) = 0u;
    *(_OWORD *)(v468 + 232) = 0u;
    *(_QWORD *)(v468 + 248) = 0;
    *(_OWORD *)(v468 + 56) = 0u;
    v469 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v468 + 56), 0);
    if ((_DWORD)v469)
      geo::read_write_lock::logFailure(v469, (uint64_t)"initialization", v470);
    v471 = malloc_create_zone(0, 0);
    *(_QWORD *)(v468 + 48) = v471;
    malloc_set_zone_name(v471, "VectorKitLabels");
    *(_QWORD *)(v468 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v468;
    a3 = v605;
  }
  *(_QWORD *)(v160 + 208) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v160 + 216) = 0;
  *(_DWORD *)(v160 + 224) = 1065353216;
  *(_QWORD *)(v160 + 232) = 0;
  *(_QWORD *)(v160 + 240) = 0;
  {
    v472 = operator new();
    *(_QWORD *)(v472 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v472 + 24) = "VectorKitLabels";
    *(_OWORD *)(v472 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v472 = &off_1E42B5668;
    *(_QWORD *)(v472 + 8) = "VectorKitLabels";
    *(_OWORD *)(v472 + 72) = 0u;
    *(_OWORD *)(v472 + 88) = 0u;
    *(_OWORD *)(v472 + 104) = 0u;
    *(_OWORD *)(v472 + 120) = 0u;
    *(_OWORD *)(v472 + 136) = 0u;
    *(_OWORD *)(v472 + 152) = 0u;
    *(_OWORD *)(v472 + 168) = 0u;
    *(_OWORD *)(v472 + 184) = 0u;
    *(_OWORD *)(v472 + 200) = 0u;
    *(_OWORD *)(v472 + 216) = 0u;
    *(_OWORD *)(v472 + 232) = 0u;
    *(_QWORD *)(v472 + 248) = 0;
    *(_OWORD *)(v472 + 56) = 0u;
    v473 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v472 + 56), 0);
    if ((_DWORD)v473)
      geo::read_write_lock::logFailure(v473, (uint64_t)"initialization", v474);
    v475 = malloc_create_zone(0, 0);
    *(_QWORD *)(v472 + 48) = v475;
    malloc_set_zone_name(v475, "VectorKitLabels");
    *(_QWORD *)(v472 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v472;
    a3 = v605;
  }
  *(_QWORD *)(v160 + 248) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v160 + 256) = 0;
  {
    v476 = operator new();
    *(_QWORD *)(v476 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v476 + 24) = "VectorKitLabels";
    *(_OWORD *)(v476 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v476 = &off_1E42B5668;
    *(_QWORD *)(v476 + 8) = "VectorKitLabels";
    *(_OWORD *)(v476 + 72) = 0u;
    *(_OWORD *)(v476 + 88) = 0u;
    *(_OWORD *)(v476 + 104) = 0u;
    *(_OWORD *)(v476 + 120) = 0u;
    *(_OWORD *)(v476 + 136) = 0u;
    *(_OWORD *)(v476 + 152) = 0u;
    *(_OWORD *)(v476 + 168) = 0u;
    *(_OWORD *)(v476 + 184) = 0u;
    *(_OWORD *)(v476 + 200) = 0u;
    *(_OWORD *)(v476 + 216) = 0u;
    *(_OWORD *)(v476 + 232) = 0u;
    *(_QWORD *)(v476 + 248) = 0;
    *(_OWORD *)(v476 + 56) = 0u;
    v477 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v476 + 56), 0);
    if ((_DWORD)v477)
      geo::read_write_lock::logFailure(v477, (uint64_t)"initialization", v478);
    v479 = malloc_create_zone(0, 0);
    *(_QWORD *)(v476 + 48) = v479;
    malloc_set_zone_name(v479, "VectorKitLabels");
    *(_QWORD *)(v476 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v476;
    a3 = v605;
  }
  *(_QWORD *)(v160 + 264) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v160 + 272) = 0;
  *(_DWORD *)(v160 + 280) = 1065353216;
  *(_QWORD *)(v160 + 288) = 0;
  *(_QWORD *)(v160 + 296) = 0;
  {
    v480 = operator new();
    *(_QWORD *)(v480 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v480 + 24) = "VectorKitLabels";
    *(_OWORD *)(v480 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v480 = &off_1E42B5668;
    *(_QWORD *)(v480 + 8) = "VectorKitLabels";
    *(_OWORD *)(v480 + 72) = 0u;
    *(_OWORD *)(v480 + 88) = 0u;
    *(_OWORD *)(v480 + 104) = 0u;
    *(_OWORD *)(v480 + 120) = 0u;
    *(_OWORD *)(v480 + 136) = 0u;
    *(_OWORD *)(v480 + 152) = 0u;
    *(_OWORD *)(v480 + 168) = 0u;
    *(_OWORD *)(v480 + 184) = 0u;
    *(_OWORD *)(v480 + 200) = 0u;
    *(_OWORD *)(v480 + 216) = 0u;
    *(_OWORD *)(v480 + 232) = 0u;
    *(_QWORD *)(v480 + 248) = 0;
    *(_OWORD *)(v480 + 56) = 0u;
    v481 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v480 + 56), 0);
    if ((_DWORD)v481)
      geo::read_write_lock::logFailure(v481, (uint64_t)"initialization", v482);
    v483 = malloc_create_zone(0, 0);
    *(_QWORD *)(v480 + 48) = v483;
    malloc_set_zone_name(v483, "VectorKitLabels");
    *(_QWORD *)(v480 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v480;
    a3 = v605;
  }
  *(_QWORD *)(v160 + 304) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v160 + 312) = 0;
  {
    v484 = operator new();
    *(_QWORD *)(v484 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v484 + 24) = "VectorKitLabels";
    *(_OWORD *)(v484 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v484 = &off_1E42B5668;
    *(_QWORD *)(v484 + 8) = "VectorKitLabels";
    *(_OWORD *)(v484 + 72) = 0u;
    *(_OWORD *)(v484 + 88) = 0u;
    *(_OWORD *)(v484 + 104) = 0u;
    *(_OWORD *)(v484 + 120) = 0u;
    *(_OWORD *)(v484 + 136) = 0u;
    *(_OWORD *)(v484 + 152) = 0u;
    *(_OWORD *)(v484 + 168) = 0u;
    *(_OWORD *)(v484 + 184) = 0u;
    *(_OWORD *)(v484 + 200) = 0u;
    *(_OWORD *)(v484 + 216) = 0u;
    *(_OWORD *)(v484 + 232) = 0u;
    *(_QWORD *)(v484 + 248) = 0;
    *(_OWORD *)(v484 + 56) = 0u;
    v485 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v484 + 56), 0);
    if ((_DWORD)v485)
      geo::read_write_lock::logFailure(v485, (uint64_t)"initialization", v486);
    v487 = malloc_create_zone(0, 0);
    *(_QWORD *)(v484 + 48) = v487;
    malloc_set_zone_name(v487, "VectorKitLabels");
    *(_QWORD *)(v484 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v484;
    a3 = v605;
  }
  *(_QWORD *)(v160 + 320) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v160 + 328) = 0;
  *(_DWORD *)(v160 + 336) = 1065353216;
  *(_QWORD *)(v160 + 344) = 0;
  *(_QWORD *)(v160 + 352) = 0;
  {
    v488 = operator new();
    *(_QWORD *)(v488 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v488 + 24) = "VectorKitLabels";
    *(_OWORD *)(v488 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v488 = &off_1E42B5668;
    *(_QWORD *)(v488 + 8) = "VectorKitLabels";
    *(_OWORD *)(v488 + 72) = 0u;
    *(_OWORD *)(v488 + 88) = 0u;
    *(_OWORD *)(v488 + 104) = 0u;
    *(_OWORD *)(v488 + 120) = 0u;
    *(_OWORD *)(v488 + 136) = 0u;
    *(_OWORD *)(v488 + 152) = 0u;
    *(_OWORD *)(v488 + 168) = 0u;
    *(_OWORD *)(v488 + 184) = 0u;
    *(_OWORD *)(v488 + 200) = 0u;
    *(_OWORD *)(v488 + 216) = 0u;
    *(_OWORD *)(v488 + 232) = 0u;
    *(_QWORD *)(v488 + 248) = 0;
    *(_OWORD *)(v488 + 56) = 0u;
    v489 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v488 + 56), 0);
    if ((_DWORD)v489)
      geo::read_write_lock::logFailure(v489, (uint64_t)"initialization", v490);
    v491 = malloc_create_zone(0, 0);
    *(_QWORD *)(v488 + 48) = v491;
    malloc_set_zone_name(v491, "VectorKitLabels");
    *(_QWORD *)(v488 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v488;
    a3 = v605;
  }
  *(_QWORD *)(v160 + 360) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v160 + 368) = 0;
  {
    v492 = operator new();
    *(_QWORD *)(v492 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v492 + 24) = "VectorKitLabels";
    *(_OWORD *)(v492 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v492 = &off_1E42B5668;
    *(_QWORD *)(v492 + 8) = "VectorKitLabels";
    *(_OWORD *)(v492 + 72) = 0u;
    *(_OWORD *)(v492 + 88) = 0u;
    *(_OWORD *)(v492 + 104) = 0u;
    *(_OWORD *)(v492 + 120) = 0u;
    *(_OWORD *)(v492 + 136) = 0u;
    *(_OWORD *)(v492 + 152) = 0u;
    *(_OWORD *)(v492 + 168) = 0u;
    *(_OWORD *)(v492 + 184) = 0u;
    *(_OWORD *)(v492 + 200) = 0u;
    *(_OWORD *)(v492 + 216) = 0u;
    *(_OWORD *)(v492 + 232) = 0u;
    *(_QWORD *)(v492 + 248) = 0;
    *(_OWORD *)(v492 + 56) = 0u;
    v493 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v492 + 56), 0);
    if ((_DWORD)v493)
      geo::read_write_lock::logFailure(v493, (uint64_t)"initialization", v494);
    v495 = malloc_create_zone(0, 0);
    *(_QWORD *)(v492 + 48) = v495;
    malloc_set_zone_name(v495, "VectorKitLabels");
    *(_QWORD *)(v492 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v492;
    a3 = v605;
  }
  *(_QWORD *)(v160 + 376) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v160 + 384) = 0;
  *(_DWORD *)(v160 + 392) = 1065353216;
  *(_QWORD *)(v160 + 400) = 0;
  *(_QWORD *)(v160 + 408) = 0;
  {
    v496 = operator new();
    *(_QWORD *)(v496 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v496 + 24) = "VectorKitLabels";
    *(_OWORD *)(v496 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v496 = &off_1E42B5668;
    *(_QWORD *)(v496 + 8) = "VectorKitLabels";
    *(_OWORD *)(v496 + 72) = 0u;
    *(_OWORD *)(v496 + 88) = 0u;
    *(_OWORD *)(v496 + 104) = 0u;
    *(_OWORD *)(v496 + 120) = 0u;
    *(_OWORD *)(v496 + 136) = 0u;
    *(_OWORD *)(v496 + 152) = 0u;
    *(_OWORD *)(v496 + 168) = 0u;
    *(_OWORD *)(v496 + 184) = 0u;
    *(_OWORD *)(v496 + 200) = 0u;
    *(_OWORD *)(v496 + 216) = 0u;
    *(_OWORD *)(v496 + 232) = 0u;
    *(_QWORD *)(v496 + 248) = 0;
    *(_OWORD *)(v496 + 56) = 0u;
    v497 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v496 + 56), 0);
    if ((_DWORD)v497)
      geo::read_write_lock::logFailure(v497, (uint64_t)"initialization", v498);
    v499 = malloc_create_zone(0, 0);
    *(_QWORD *)(v496 + 48) = v499;
    malloc_set_zone_name(v499, "VectorKitLabels");
    *(_QWORD *)(v496 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v496;
    a3 = v605;
  }
  *(_QWORD *)(v160 + 416) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v160 + 424) = 0;
  {
    v500 = operator new();
    *(_QWORD *)(v500 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v500 + 24) = "VectorKitLabels";
    *(_OWORD *)(v500 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v500 = &off_1E42B5668;
    *(_QWORD *)(v500 + 8) = "VectorKitLabels";
    *(_OWORD *)(v500 + 72) = 0u;
    *(_OWORD *)(v500 + 88) = 0u;
    *(_OWORD *)(v500 + 104) = 0u;
    *(_OWORD *)(v500 + 120) = 0u;
    *(_OWORD *)(v500 + 136) = 0u;
    *(_OWORD *)(v500 + 152) = 0u;
    *(_OWORD *)(v500 + 168) = 0u;
    *(_OWORD *)(v500 + 184) = 0u;
    *(_OWORD *)(v500 + 200) = 0u;
    *(_OWORD *)(v500 + 216) = 0u;
    *(_OWORD *)(v500 + 232) = 0u;
    *(_QWORD *)(v500 + 248) = 0;
    *(_OWORD *)(v500 + 56) = 0u;
    v501 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v500 + 56), 0);
    if ((_DWORD)v501)
      geo::read_write_lock::logFailure(v501, (uint64_t)"initialization", v502);
    v503 = malloc_create_zone(0, 0);
    *(_QWORD *)(v500 + 48) = v503;
    malloc_set_zone_name(v503, "VectorKitLabels");
    *(_QWORD *)(v500 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v500;
    a3 = v605;
  }
  *(_QWORD *)(v160 + 432) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v160 + 440) = 0;
  *(_DWORD *)(v160 + 448) = 1065353216;
  *(_QWORD *)(v160 + 456) = 0;
  *(_QWORD *)(v160 + 464) = 0;
  {
    v504 = operator new();
    *(_QWORD *)(v504 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v504 + 24) = "VectorKitLabels";
    *(_OWORD *)(v504 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v504 = &off_1E42B5668;
    *(_QWORD *)(v504 + 8) = "VectorKitLabels";
    *(_OWORD *)(v504 + 72) = 0u;
    *(_OWORD *)(v504 + 88) = 0u;
    *(_OWORD *)(v504 + 104) = 0u;
    *(_OWORD *)(v504 + 120) = 0u;
    *(_OWORD *)(v504 + 136) = 0u;
    *(_OWORD *)(v504 + 152) = 0u;
    *(_OWORD *)(v504 + 168) = 0u;
    *(_OWORD *)(v504 + 184) = 0u;
    *(_OWORD *)(v504 + 200) = 0u;
    *(_OWORD *)(v504 + 216) = 0u;
    *(_OWORD *)(v504 + 232) = 0u;
    *(_QWORD *)(v504 + 248) = 0;
    *(_OWORD *)(v504 + 56) = 0u;
    v505 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v504 + 56), 0);
    if ((_DWORD)v505)
      geo::read_write_lock::logFailure(v505, (uint64_t)"initialization", v506);
    v507 = malloc_create_zone(0, 0);
    *(_QWORD *)(v504 + 48) = v507;
    malloc_set_zone_name(v507, "VectorKitLabels");
    *(_QWORD *)(v504 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v504;
    a3 = v605;
  }
  *(_QWORD *)(v160 + 472) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v160 + 480) = 0;
  {
    v508 = operator new();
    *(_QWORD *)(v508 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v508 + 24) = "VectorKitLabels";
    *(_OWORD *)(v508 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v508 = &off_1E42B5668;
    *(_QWORD *)(v508 + 8) = "VectorKitLabels";
    *(_OWORD *)(v508 + 72) = 0u;
    *(_OWORD *)(v508 + 88) = 0u;
    *(_OWORD *)(v508 + 104) = 0u;
    *(_OWORD *)(v508 + 120) = 0u;
    *(_OWORD *)(v508 + 136) = 0u;
    *(_OWORD *)(v508 + 152) = 0u;
    *(_OWORD *)(v508 + 168) = 0u;
    *(_OWORD *)(v508 + 184) = 0u;
    *(_OWORD *)(v508 + 200) = 0u;
    *(_OWORD *)(v508 + 216) = 0u;
    *(_OWORD *)(v508 + 232) = 0u;
    *(_QWORD *)(v508 + 248) = 0;
    *(_OWORD *)(v508 + 56) = 0u;
    v509 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v508 + 56), 0);
    if ((_DWORD)v509)
      geo::read_write_lock::logFailure(v509, (uint64_t)"initialization", v510);
    v511 = malloc_create_zone(0, 0);
    *(_QWORD *)(v508 + 48) = v511;
    malloc_set_zone_name(v511, "VectorKitLabels");
    *(_QWORD *)(v508 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v508;
    a3 = v605;
  }
  *(_QWORD *)(v160 + 488) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v160 + 496) = 0;
  *(_DWORD *)(v160 + 504) = 1065353216;
  *(_OWORD *)(v160 + 512) = 0u;
  {
    v512 = operator new();
    *(_QWORD *)(v512 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v512 + 24) = "VectorKitLabels";
    *(_OWORD *)(v512 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v512 = &off_1E42B5668;
    *(_QWORD *)(v512 + 8) = "VectorKitLabels";
    *(_OWORD *)(v512 + 72) = 0u;
    *(_OWORD *)(v512 + 88) = 0u;
    *(_OWORD *)(v512 + 104) = 0u;
    *(_OWORD *)(v512 + 120) = 0u;
    *(_OWORD *)(v512 + 136) = 0u;
    *(_OWORD *)(v512 + 152) = 0u;
    *(_OWORD *)(v512 + 168) = 0u;
    *(_OWORD *)(v512 + 184) = 0u;
    *(_OWORD *)(v512 + 200) = 0u;
    *(_OWORD *)(v512 + 216) = 0u;
    *(_OWORD *)(v512 + 232) = 0u;
    *(_QWORD *)(v512 + 248) = 0;
    *(_OWORD *)(v512 + 56) = 0u;
    v513 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v512 + 56), 0);
    if ((_DWORD)v513)
      geo::read_write_lock::logFailure(v513, (uint64_t)"initialization", v514);
    v515 = malloc_create_zone(0, 0);
    *(_QWORD *)(v512 + 48) = v515;
    malloc_set_zone_name(v515, "VectorKitLabels");
    *(_QWORD *)(v512 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v512;
    a3 = v605;
  }
  *(_QWORD *)(v160 + 528) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v160 + 536) = 0;
  {
    v516 = operator new();
    *(_QWORD *)(v516 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v516 + 24) = "VectorKitLabels";
    *(_OWORD *)(v516 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v516 = &off_1E42B5668;
    *(_QWORD *)(v516 + 8) = "VectorKitLabels";
    *(_OWORD *)(v516 + 72) = 0u;
    *(_OWORD *)(v516 + 88) = 0u;
    *(_OWORD *)(v516 + 104) = 0u;
    *(_OWORD *)(v516 + 120) = 0u;
    *(_OWORD *)(v516 + 136) = 0u;
    *(_OWORD *)(v516 + 152) = 0u;
    *(_OWORD *)(v516 + 168) = 0u;
    *(_OWORD *)(v516 + 184) = 0u;
    *(_OWORD *)(v516 + 200) = 0u;
    *(_OWORD *)(v516 + 216) = 0u;
    *(_OWORD *)(v516 + 232) = 0u;
    *(_QWORD *)(v516 + 248) = 0;
    *(_OWORD *)(v516 + 56) = 0u;
    v517 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v516 + 56), 0);
    if ((_DWORD)v517)
      geo::read_write_lock::logFailure(v517, (uint64_t)"initialization", v518);
    v519 = malloc_create_zone(0, 0);
    *(_QWORD *)(v516 + 48) = v519;
    malloc_set_zone_name(v519, "VectorKitLabels");
    *(_QWORD *)(v516 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v516;
    a3 = v605;
  }
  *(_QWORD *)(v160 + 544) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v160 + 552) = 0;
  *(_DWORD *)(v160 + 560) = 1065353216;
  *(_QWORD *)(v160 + 568) = 850045863;
  *(_QWORD *)(v160 + 640) = 0;
  *(_QWORD *)(v160 + 656) = 0;
  *(_QWORD *)(v160 + 648) = 0;
  *(_OWORD *)(v160 + 576) = 0u;
  *(_OWORD *)(v160 + 592) = 0u;
  *(_OWORD *)(v160 + 608) = 0u;
  *(_OWORD *)(v160 + 617) = 0u;
  {
    v520 = operator new();
    *(_QWORD *)(v520 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v520 + 24) = "VectorKitLabels";
    *(_OWORD *)(v520 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v520 = &off_1E42B5668;
    *(_QWORD *)(v520 + 8) = "VectorKitLabels";
    *(_OWORD *)(v520 + 72) = 0u;
    *(_OWORD *)(v520 + 88) = 0u;
    *(_OWORD *)(v520 + 104) = 0u;
    *(_OWORD *)(v520 + 120) = 0u;
    *(_OWORD *)(v520 + 136) = 0u;
    *(_OWORD *)(v520 + 152) = 0u;
    *(_OWORD *)(v520 + 168) = 0u;
    *(_OWORD *)(v520 + 184) = 0u;
    *(_OWORD *)(v520 + 200) = 0u;
    *(_OWORD *)(v520 + 216) = 0u;
    *(_OWORD *)(v520 + 232) = 0u;
    *(_QWORD *)(v520 + 248) = 0;
    *(_OWORD *)(v520 + 56) = 0u;
    v521 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v520 + 56), 0);
    if ((_DWORD)v521)
      geo::read_write_lock::logFailure(v521, (uint64_t)"initialization", v522);
    v523 = malloc_create_zone(0, 0);
    *(_QWORD *)(v520 + 48) = v523;
    malloc_set_zone_name(v523, "VectorKitLabels");
    *(_QWORD *)(v520 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v520;
    a3 = v605;
  }
  *(_QWORD *)(v160 + 664) = mdm::Allocator::instance(void)::alloc;
  *(_OWORD *)(v160 + 672) = xmmword_19FFB5010;
  a1[36] = v160;
  v180 = operator new();
  *(_DWORD *)(v180 + 16) = 1;
  *(_QWORD *)v180 = a1;
  *(_QWORD *)(v180 + 8) = 0x200000002;
  a1[37] = v180;
  v181 = (_QWORD *)operator new();
  v182 = a1[32];
  *v181 = &off_1E4299F90;
  v183 = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(v183, v181, (CFNotificationCallback)notificationHandler, name, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  *v181 = &off_1E42AF750;
  v181[1] = v182;
  v181[2] = 0;
  v181[3] = 0;
  v181[4] = 0;
  {
    v524 = operator new();
    *(_QWORD *)(v524 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v524 + 24) = "VectorKitLabels";
    *(_OWORD *)(v524 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v524 = &off_1E42B5668;
    *(_QWORD *)(v524 + 8) = "VectorKitLabels";
    *(_OWORD *)(v524 + 72) = 0u;
    *(_OWORD *)(v524 + 88) = 0u;
    *(_OWORD *)(v524 + 104) = 0u;
    *(_OWORD *)(v524 + 120) = 0u;
    *(_OWORD *)(v524 + 136) = 0u;
    *(_OWORD *)(v524 + 152) = 0u;
    *(_OWORD *)(v524 + 168) = 0u;
    *(_OWORD *)(v524 + 184) = 0u;
    *(_OWORD *)(v524 + 200) = 0u;
    *(_OWORD *)(v524 + 216) = 0u;
    *(_OWORD *)(v524 + 232) = 0u;
    *(_QWORD *)(v524 + 248) = 0;
    *(_OWORD *)(v524 + 56) = 0u;
    v525 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v524 + 56), 0);
    if ((_DWORD)v525)
      geo::read_write_lock::logFailure(v525, (uint64_t)"initialization", v526);
    v527 = malloc_create_zone(0, 0);
    *(_QWORD *)(v524 + 48) = v527;
    malloc_set_zone_name(v527, "VectorKitLabels");
    *(_QWORD *)(v524 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v524;
    a3 = v605;
  }
  v185 = mdm::Allocator::instance(void)::alloc;
  v181[6] = 0;
  v181[5] = v185;
  v181[7] = 0;
  v181[8] = 0;
  {
    v528 = operator new();
    *(_QWORD *)(v528 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v528 + 24) = "VectorKitLabels";
    *(_OWORD *)(v528 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v528 = &off_1E42B5668;
    *(_QWORD *)(v528 + 8) = "VectorKitLabels";
    *(_OWORD *)(v528 + 72) = 0u;
    *(_OWORD *)(v528 + 88) = 0u;
    *(_OWORD *)(v528 + 104) = 0u;
    *(_OWORD *)(v528 + 120) = 0u;
    *(_OWORD *)(v528 + 136) = 0u;
    *(_OWORD *)(v528 + 152) = 0u;
    *(_OWORD *)(v528 + 168) = 0u;
    *(_OWORD *)(v528 + 184) = 0u;
    *(_OWORD *)(v528 + 200) = 0u;
    *(_OWORD *)(v528 + 216) = 0u;
    *(_OWORD *)(v528 + 232) = 0u;
    *(_QWORD *)(v528 + 248) = 0;
    *(_OWORD *)(v528 + 56) = 0u;
    v529 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v528 + 56), 0);
    if ((_DWORD)v529)
      geo::read_write_lock::logFailure(v529, (uint64_t)"initialization", v530);
    v531 = malloc_create_zone(0, 0);
    *(_QWORD *)(v528 + 48) = v531;
    malloc_set_zone_name(v531, "VectorKitLabels");
    *(_QWORD *)(v528 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v528;
    a3 = v605;
  }
  v186 = mdm::Allocator::instance(void)::alloc;
  v181[10] = 0;
  v181[11] = 0;
  v181[9] = v186;
  *((_DWORD *)v181 + 24) = 0;
  v181[13] = 0;
  v181[14] = 0;
  *((_BYTE *)v181 + 120) = 0;
  v187 = operator new();
  v188 = md::FontGlyphCache::FontGlyphCache(v187, 1);
  v181[17] = 0;
  v181[16] = v188;
  v181[18] = 0;
  v181[19] = 0;
  *(_DWORD *)__x = 0;
  std::vector<unsigned int>::__append((std::vector<unsigned int> *)(v181 + 17), 9uLL, (std::vector<unsigned int>::const_reference)__x);
  a1[38] = v181;
  v189 = operator new();
  *(_QWORD *)(v189 + 8) = 0;
  *(_QWORD *)(v189 + 16) = 0;
  *(_QWORD *)v189 = a1;
  {
    v532 = operator new();
    *(_QWORD *)(v532 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v532 + 24) = "VectorKitLabels";
    *(_OWORD *)(v532 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v532 = &off_1E42B5668;
    *(_QWORD *)(v532 + 8) = "VectorKitLabels";
    *(_OWORD *)(v532 + 72) = 0u;
    *(_OWORD *)(v532 + 88) = 0u;
    *(_OWORD *)(v532 + 104) = 0u;
    *(_OWORD *)(v532 + 120) = 0u;
    *(_OWORD *)(v532 + 136) = 0u;
    *(_OWORD *)(v532 + 152) = 0u;
    *(_OWORD *)(v532 + 168) = 0u;
    *(_OWORD *)(v532 + 184) = 0u;
    *(_OWORD *)(v532 + 200) = 0u;
    *(_OWORD *)(v532 + 216) = 0u;
    *(_OWORD *)(v532 + 232) = 0u;
    *(_QWORD *)(v532 + 248) = 0;
    *(_OWORD *)(v532 + 56) = 0u;
    v533 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v532 + 56), 0);
    if ((_DWORD)v533)
      geo::read_write_lock::logFailure(v533, (uint64_t)"initialization", v534);
    v535 = malloc_create_zone(0, 0);
    *(_QWORD *)(v532 + 48) = v535;
    malloc_set_zone_name(v535, "VectorKitLabels");
    *(_QWORD *)(v532 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v532;
    a3 = v605;
  }
  *(_QWORD *)(v189 + 24) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v189 + 32) = 0;
  {
    v536 = operator new();
    *(_QWORD *)(v536 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v536 + 24) = "VectorKitLabels";
    *(_OWORD *)(v536 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v536 = &off_1E42B5668;
    *(_QWORD *)(v536 + 8) = "VectorKitLabels";
    *(_OWORD *)(v536 + 72) = 0u;
    *(_OWORD *)(v536 + 88) = 0u;
    *(_OWORD *)(v536 + 104) = 0u;
    *(_OWORD *)(v536 + 120) = 0u;
    *(_OWORD *)(v536 + 136) = 0u;
    *(_OWORD *)(v536 + 152) = 0u;
    *(_OWORD *)(v536 + 168) = 0u;
    *(_OWORD *)(v536 + 184) = 0u;
    *(_OWORD *)(v536 + 200) = 0u;
    *(_OWORD *)(v536 + 216) = 0u;
    *(_OWORD *)(v536 + 232) = 0u;
    *(_QWORD *)(v536 + 248) = 0;
    *(_OWORD *)(v536 + 56) = 0u;
    v537 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v536 + 56), 0);
    if ((_DWORD)v537)
      geo::read_write_lock::logFailure(v537, (uint64_t)"initialization", v538);
    v539 = malloc_create_zone(0, 0);
    *(_QWORD *)(v536 + 48) = v539;
    malloc_set_zone_name(v539, "VectorKitLabels");
    *(_QWORD *)(v536 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v536;
    a3 = v605;
  }
  *(_QWORD *)(v189 + 40) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v189 + 48) = 0;
  *(_DWORD *)(v189 + 56) = 1065353216;
  *(_QWORD *)(v189 + 64) = 0;
  *(_QWORD *)(v189 + 72) = 0;
  {
    v540 = operator new();
    *(_QWORD *)(v540 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v540 + 24) = "VectorKitLabels";
    *(_OWORD *)(v540 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v540 = &off_1E42B5668;
    *(_QWORD *)(v540 + 8) = "VectorKitLabels";
    *(_OWORD *)(v540 + 72) = 0u;
    *(_OWORD *)(v540 + 88) = 0u;
    *(_OWORD *)(v540 + 104) = 0u;
    *(_OWORD *)(v540 + 120) = 0u;
    *(_OWORD *)(v540 + 136) = 0u;
    *(_OWORD *)(v540 + 152) = 0u;
    *(_OWORD *)(v540 + 168) = 0u;
    *(_OWORD *)(v540 + 184) = 0u;
    *(_OWORD *)(v540 + 200) = 0u;
    *(_OWORD *)(v540 + 216) = 0u;
    *(_OWORD *)(v540 + 232) = 0u;
    *(_QWORD *)(v540 + 248) = 0;
    *(_OWORD *)(v540 + 56) = 0u;
    v541 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v540 + 56), 0);
    if ((_DWORD)v541)
      geo::read_write_lock::logFailure(v541, (uint64_t)"initialization", v542);
    v543 = malloc_create_zone(0, 0);
    *(_QWORD *)(v540 + 48) = v543;
    malloc_set_zone_name(v543, "VectorKitLabels");
    *(_QWORD *)(v540 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v540;
    a3 = v605;
  }
  *(_QWORD *)(v189 + 80) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v189 + 88) = 0;
  {
    v544 = operator new();
    *(_QWORD *)(v544 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v544 + 24) = "VectorKitLabels";
    *(_OWORD *)(v544 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v544 = &off_1E42B5668;
    *(_QWORD *)(v544 + 8) = "VectorKitLabels";
    *(_OWORD *)(v544 + 72) = 0u;
    *(_OWORD *)(v544 + 88) = 0u;
    *(_OWORD *)(v544 + 104) = 0u;
    *(_OWORD *)(v544 + 120) = 0u;
    *(_OWORD *)(v544 + 136) = 0u;
    *(_OWORD *)(v544 + 152) = 0u;
    *(_OWORD *)(v544 + 168) = 0u;
    *(_OWORD *)(v544 + 184) = 0u;
    *(_OWORD *)(v544 + 200) = 0u;
    *(_OWORD *)(v544 + 216) = 0u;
    *(_OWORD *)(v544 + 232) = 0u;
    *(_QWORD *)(v544 + 248) = 0;
    *(_OWORD *)(v544 + 56) = 0u;
    v545 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v544 + 56), 0);
    if ((_DWORD)v545)
      geo::read_write_lock::logFailure(v545, (uint64_t)"initialization", v546);
    v547 = malloc_create_zone(0, 0);
    *(_QWORD *)(v544 + 48) = v547;
    malloc_set_zone_name(v547, "VectorKitLabels");
    *(_QWORD *)(v544 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v544;
    a3 = v605;
  }
  *(_QWORD *)(v189 + 96) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v189 + 104) = 0;
  *(_DWORD *)(v189 + 112) = 1065353216;
  *(_BYTE *)(v189 + 124) = 0;
  *(_DWORD *)(v189 + 120) = *((_DWORD *)a1 + 44);
  a1[39] = v189;
  v194 = operator new();
  *(_QWORD *)v194 = a1;
  *(_DWORD *)(v194 + 8) = 0;
  *(_QWORD *)(v194 + 64) = 0;
  *(_QWORD *)(v194 + 72) = 0;
  *(_QWORD *)(v194 + 56) = 0;
  *(_QWORD *)(v194 + 28) = 0;
  *(_QWORD *)(v194 + 44) = 0;
  *(_QWORD *)(v194 + 36) = 0;
  {
    v548 = operator new();
    *(_QWORD *)(v548 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v548 + 24) = "VectorKitLabels";
    *(_OWORD *)(v548 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v548 = &off_1E42B5668;
    *(_QWORD *)(v548 + 8) = "VectorKitLabels";
    *(_OWORD *)(v548 + 72) = 0u;
    *(_OWORD *)(v548 + 88) = 0u;
    *(_OWORD *)(v548 + 104) = 0u;
    *(_OWORD *)(v548 + 120) = 0u;
    *(_OWORD *)(v548 + 136) = 0u;
    *(_OWORD *)(v548 + 152) = 0u;
    *(_OWORD *)(v548 + 168) = 0u;
    *(_OWORD *)(v548 + 184) = 0u;
    *(_OWORD *)(v548 + 200) = 0u;
    *(_OWORD *)(v548 + 216) = 0u;
    *(_OWORD *)(v548 + 232) = 0u;
    *(_QWORD *)(v548 + 248) = 0;
    *(_OWORD *)(v548 + 56) = 0u;
    v549 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v548 + 56), 0);
    if ((_DWORD)v549)
      geo::read_write_lock::logFailure(v549, (uint64_t)"initialization", v550);
    v551 = malloc_create_zone(0, 0);
    *(_QWORD *)(v548 + 48) = v551;
    malloc_set_zone_name(v551, "VectorKitLabels");
    *(_QWORD *)(v548 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v548;
    a3 = v605;
  }
  *(_QWORD *)(v194 + 80) = mdm::Allocator::instance(void)::alloc;
  *(_DWORD *)(v194 + 88) = 0;
  *(_BYTE *)(v194 + 92) = 0;
  *(_OWORD *)(v194 + 112) = 0u;
  *(_OWORD *)(v194 + 128) = 0u;
  *(_OWORD *)(v194 + 144) = 0u;
  a1[40] = v194;
  v196 = operator new();
  v197 = a1[29];
  v198 = (id)a1[12];
  namea = (CFStringRef)(a3 + 40);
  md::LabelRenderer::LabelRenderer(v196, v197, objc_msgSend(v198, "shaderLibrary"), (_OWORD *)(a3 + 40), *v606);
  a1[41] = v196;

  v199 = operator new();
  *(_QWORD *)v199 = 850045863;
  *(_OWORD *)(v199 + 8) = 0u;
  *(_OWORD *)(v199 + 24) = 0u;
  *(_OWORD *)(v199 + 40) = 0u;
  *(_QWORD *)(v199 + 56) = 0;
  *(_QWORD *)(v199 + 64) = 850045863;
  *(_OWORD *)(v199 + 72) = 0u;
  *(_OWORD *)(v199 + 88) = 0u;
  *(_OWORD *)(v199 + 104) = 0u;
  *(_QWORD *)(v199 + 120) = 0;
  *(_QWORD *)(v199 + 128) = a1;
  *(_QWORD *)(v199 + 136) = 0;
  *(_QWORD *)(v199 + 144) = 0;
  *(_DWORD *)(v199 + 152) = 1065353216;
  *(_DWORD *)(v199 + 156) = 16842752;
  *(_BYTE *)(v199 + 160) = 0;
  *(_QWORD *)(v199 + 161) = 0x1010000000000;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v199 + 172) = _D0;
  *(_WORD *)(v199 + 180) = 0;
  *(_QWORD *)(v199 + 184) = 0;
  *(_QWORD *)(v199 + 192) = 0;
  v204 = operator new();
  *(_OWORD *)(v204 + 74) = 0u;
  *(_OWORD *)(v204 + 48) = 0u;
  *(_OWORD *)(v204 + 64) = 0u;
  *(_OWORD *)(v204 + 16) = 0u;
  *(_OWORD *)(v204 + 32) = 0u;
  *(_OWORD *)v204 = 0u;
  v205 = operator new();
  *(_DWORD *)(v205 + 48) = 0;
  *(_OWORD *)(v205 + 16) = 0u;
  *(_OWORD *)(v205 + 32) = 0u;
  *(_OWORD *)v205 = 0u;
  v206 = *(_QWORD *)(v204 + 80);
  *(_QWORD *)(v204 + 80) = v205;
  if (v206)
    MEMORY[0x1A1AF4E00](v206, 0x1000C40F5825EE8);
  *(_QWORD *)(v199 + 200) = v204;
  *(_QWORD *)(v199 + 208) = v199 + 208;
  *(_QWORD *)(v199 + 216) = v199 + 208;
  *(_QWORD *)(v199 + 224) = 0;
  {
    v552 = operator new();
    *(_QWORD *)(v552 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v552 + 24) = "VectorKitLabels";
    *(_OWORD *)(v552 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v552 = &off_1E42B5668;
    *(_QWORD *)(v552 + 8) = "VectorKitLabels";
    *(_OWORD *)(v552 + 72) = 0u;
    *(_OWORD *)(v552 + 88) = 0u;
    *(_OWORD *)(v552 + 104) = 0u;
    *(_OWORD *)(v552 + 120) = 0u;
    *(_OWORD *)(v552 + 136) = 0u;
    *(_OWORD *)(v552 + 152) = 0u;
    *(_OWORD *)(v552 + 168) = 0u;
    *(_OWORD *)(v552 + 184) = 0u;
    *(_OWORD *)(v552 + 200) = 0u;
    *(_OWORD *)(v552 + 216) = 0u;
    *(_OWORD *)(v552 + 232) = 0u;
    *(_QWORD *)(v552 + 248) = 0;
    *(_OWORD *)(v552 + 56) = 0u;
    v553 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v552 + 56), 0);
    if ((_DWORD)v553)
      geo::read_write_lock::logFailure(v553, (uint64_t)"initialization", v554);
    v555 = malloc_create_zone(0, 0);
    *(_QWORD *)(v552 + 48) = v555;
    malloc_set_zone_name(v555, "VectorKitLabels");
    *(_QWORD *)(v552 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v552;
  }
  v208 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v199 + 240) = 0;
  *(_QWORD *)(v199 + 232) = v208;
  *(_QWORD *)(v199 + 248) = 0;
  {
    v556 = operator new();
    *(_QWORD *)(v556 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v556 + 24) = "VectorKitLabels";
    *(_OWORD *)(v556 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v556 = &off_1E42B5668;
    *(_QWORD *)(v556 + 8) = "VectorKitLabels";
    *(_OWORD *)(v556 + 72) = 0u;
    *(_OWORD *)(v556 + 88) = 0u;
    *(_OWORD *)(v556 + 104) = 0u;
    *(_OWORD *)(v556 + 120) = 0u;
    *(_OWORD *)(v556 + 136) = 0u;
    *(_OWORD *)(v556 + 152) = 0u;
    *(_OWORD *)(v556 + 168) = 0u;
    *(_OWORD *)(v556 + 184) = 0u;
    *(_OWORD *)(v556 + 200) = 0u;
    *(_OWORD *)(v556 + 216) = 0u;
    *(_OWORD *)(v556 + 232) = 0u;
    *(_QWORD *)(v556 + 248) = 0;
    *(_OWORD *)(v556 + 56) = 0u;
    v557 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v556 + 56), 0);
    if ((_DWORD)v557)
      geo::read_write_lock::logFailure(v557, (uint64_t)"initialization", v558);
    v559 = malloc_create_zone(0, 0);
    *(_QWORD *)(v556 + 48) = v559;
    malloc_set_zone_name(v559, "VectorKitLabels");
    *(_QWORD *)(v556 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v556;
  }
  *(_QWORD *)(v199 + 256) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v199 + 264) = 0;
  {
    v560 = operator new();
    *(_QWORD *)(v560 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v560 + 24) = "VectorKitLabels";
    *(_OWORD *)(v560 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v560 = &off_1E42B5668;
    *(_QWORD *)(v560 + 8) = "VectorKitLabels";
    *(_OWORD *)(v560 + 72) = 0u;
    *(_OWORD *)(v560 + 88) = 0u;
    *(_OWORD *)(v560 + 104) = 0u;
    *(_OWORD *)(v560 + 120) = 0u;
    *(_OWORD *)(v560 + 136) = 0u;
    *(_OWORD *)(v560 + 152) = 0u;
    *(_OWORD *)(v560 + 168) = 0u;
    *(_OWORD *)(v560 + 184) = 0u;
    *(_OWORD *)(v560 + 200) = 0u;
    *(_OWORD *)(v560 + 216) = 0u;
    *(_OWORD *)(v560 + 232) = 0u;
    *(_QWORD *)(v560 + 248) = 0;
    *(_OWORD *)(v560 + 56) = 0u;
    v561 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v560 + 56), 0);
    if ((_DWORD)v561)
      geo::read_write_lock::logFailure(v561, (uint64_t)"initialization", v562);
    v563 = malloc_create_zone(0, 0);
    *(_QWORD *)(v560 + 48) = v563;
    malloc_set_zone_name(v563, "VectorKitLabels");
    *(_QWORD *)(v560 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v560;
  }
  *(_QWORD *)(v199 + 272) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v199 + 280) = 0;
  *(_DWORD *)(v199 + 288) = 1065353216;
  *(_DWORD *)(v199 + 296) = 20;
  *(_QWORD *)(v199 + 308) = 0;
  *(_QWORD *)(v199 + 300) = 0;
  *(_DWORD *)(v199 + 316) = 100;
  *(_QWORD *)(v199 + 320) = v199 + 320;
  *(_QWORD *)(v199 + 328) = v199 + 320;
  *(_QWORD *)(v199 + 336) = 0;
  {
    v564 = operator new();
    *(_QWORD *)(v564 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v564 + 24) = "VectorKitLabels";
    *(_OWORD *)(v564 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v564 = &off_1E42B5668;
    *(_QWORD *)(v564 + 8) = "VectorKitLabels";
    *(_OWORD *)(v564 + 72) = 0u;
    *(_OWORD *)(v564 + 88) = 0u;
    *(_OWORD *)(v564 + 104) = 0u;
    *(_OWORD *)(v564 + 120) = 0u;
    *(_OWORD *)(v564 + 136) = 0u;
    *(_OWORD *)(v564 + 152) = 0u;
    *(_OWORD *)(v564 + 168) = 0u;
    *(_OWORD *)(v564 + 184) = 0u;
    *(_OWORD *)(v564 + 200) = 0u;
    *(_OWORD *)(v564 + 216) = 0u;
    *(_OWORD *)(v564 + 232) = 0u;
    *(_QWORD *)(v564 + 248) = 0;
    *(_OWORD *)(v564 + 56) = 0u;
    v565 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v564 + 56), 0);
    if ((_DWORD)v565)
      geo::read_write_lock::logFailure(v565, (uint64_t)"initialization", v566);
    v567 = malloc_create_zone(0, 0);
    *(_QWORD *)(v564 + 48) = v567;
    malloc_set_zone_name(v567, "VectorKitLabels");
    *(_QWORD *)(v564 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v564;
  }
  v211 = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v199 + 352) = 0;
  *(_QWORD *)(v199 + 360) = 0;
  *(_QWORD *)(v199 + 344) = v211;
  {
    v568 = operator new();
    *(_QWORD *)(v568 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v568 + 24) = "VectorKitLabels";
    *(_OWORD *)(v568 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v568 = &off_1E42B5668;
    *(_QWORD *)(v568 + 8) = "VectorKitLabels";
    *(_OWORD *)(v568 + 72) = 0u;
    *(_OWORD *)(v568 + 88) = 0u;
    *(_OWORD *)(v568 + 104) = 0u;
    *(_OWORD *)(v568 + 120) = 0u;
    *(_OWORD *)(v568 + 136) = 0u;
    *(_OWORD *)(v568 + 152) = 0u;
    *(_OWORD *)(v568 + 168) = 0u;
    *(_OWORD *)(v568 + 184) = 0u;
    *(_OWORD *)(v568 + 200) = 0u;
    *(_OWORD *)(v568 + 216) = 0u;
    *(_OWORD *)(v568 + 232) = 0u;
    *(_QWORD *)(v568 + 248) = 0;
    *(_OWORD *)(v568 + 56) = 0u;
    v569 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v568 + 56), 0);
    if ((_DWORD)v569)
      geo::read_write_lock::logFailure(v569, (uint64_t)"initialization", v570);
    v571 = malloc_create_zone(0, 0);
    *(_QWORD *)(v568 + 48) = v571;
    malloc_set_zone_name(v571, "VectorKitLabels");
    *(_QWORD *)(v568 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v568;
  }
  *(_QWORD *)(v199 + 368) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v199 + 376) = 0;
  {
    v572 = operator new();
    *(_QWORD *)(v572 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v572 + 24) = "VectorKitLabels";
    *(_OWORD *)(v572 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v572 = &off_1E42B5668;
    *(_QWORD *)(v572 + 8) = "VectorKitLabels";
    *(_OWORD *)(v572 + 72) = 0u;
    *(_OWORD *)(v572 + 88) = 0u;
    *(_OWORD *)(v572 + 104) = 0u;
    *(_OWORD *)(v572 + 120) = 0u;
    *(_OWORD *)(v572 + 136) = 0u;
    *(_OWORD *)(v572 + 152) = 0u;
    *(_OWORD *)(v572 + 168) = 0u;
    *(_OWORD *)(v572 + 184) = 0u;
    *(_OWORD *)(v572 + 200) = 0u;
    *(_OWORD *)(v572 + 216) = 0u;
    *(_OWORD *)(v572 + 232) = 0u;
    *(_QWORD *)(v572 + 248) = 0;
    *(_OWORD *)(v572 + 56) = 0u;
    v573 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v572 + 56), 0);
    if ((_DWORD)v573)
      geo::read_write_lock::logFailure(v573, (uint64_t)"initialization", v574);
    v575 = malloc_create_zone(0, 0);
    *(_QWORD *)(v572 + 48) = v575;
    malloc_set_zone_name(v575, "VectorKitLabels");
    *(_QWORD *)(v572 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v572;
  }
  *(_QWORD *)(v199 + 384) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v199 + 392) = 0;
  *(_DWORD *)(v199 + 400) = 1065353216;
  *(_QWORD *)(v199 + 420) = 0;
  *(_QWORD *)(v199 + 412) = 0;
  *(_DWORD *)(v199 + 428) = 100;
  *(_OWORD *)(v199 + 432) = 0u;
  *(_OWORD *)(v199 + 448) = 0u;
  *(_OWORD *)(v199 + 464) = 0u;
  *(_DWORD *)(v199 + 296) = 500;
  *(_DWORD *)(v199 + 408) = 500;
  v213 = (char *)operator new(0x1E8uLL);
  *((_QWORD *)v213 + 1) = 0;
  *((_QWORD *)v213 + 2) = 0;
  *(_QWORD *)v213 = &off_1E42DAC90;
  *(_OWORD *)(v213 + 40) = 0u;
  *(_OWORD *)(v213 + 56) = 0u;
  *(_OWORD *)(v213 + 72) = 0u;
  *(_OWORD *)(v213 + 88) = 0u;
  *((_QWORD *)v213 + 13) = 0;
  *(_OWORD *)(v213 + 24) = 0u;
  *((_DWORD *)v213 + 28) = 1065353216;
  *((_WORD *)v213 + 58) = 256;
  *(_QWORD *)(v213 + 118) = 0x1010000000000;
  v213[126] = 0;
  *((_QWORD *)v213 + 16) = 0x3F800000437F0000;
  *((_QWORD *)v213 + 17) = 0xFC00FC00FC00FC00;
  *((_WORD *)v213 + 72) = 256;
  *(_DWORD *)(v213 + 146) = 0;
  v213[150] = 0;
  *((_QWORD *)v213 + 19) = 0x3FF0000000000000;
  v213[160] = -1;
  *(_OWORD *)(v213 + 164) = 0u;
  *(_OWORD *)(v213 + 180) = 0u;
  *(_OWORD *)(v213 + 196) = 0u;
  *(_OWORD *)(v213 + 212) = 0u;
  *(_OWORD *)(v213 + 228) = 0u;
  *(_OWORD *)(v213 + 244) = 0u;
  *(_OWORD *)(v213 + 260) = 0u;
  *(_OWORD *)(v213 + 271) = 0u;
  *((_QWORD *)v213 + 49) = 0;
  v213[400] = 0;
  *(_WORD *)(v213 + 401) = 0;
  *((_OWORD *)v213 + 18) = 0u;
  *((_OWORD *)v213 + 19) = 0u;
  *((_OWORD *)v213 + 20) = 0u;
  *((_OWORD *)v213 + 21) = 0u;
  *((_OWORD *)v213 + 22) = 0u;
  *((_OWORD *)v213 + 23) = 0u;
  *(_DWORD *)(v213 + 383) = 0;
  *(_OWORD *)(v213 + 466) = 0u;
  *(_OWORD *)(v213 + 440) = 0u;
  *(_OWORD *)(v213 + 456) = 0u;
  *(_OWORD *)(v213 + 408) = 0u;
  *(_OWORD *)(v213 + 424) = 0u;
  v213[164] = 1;
  *(_WORD *)(v213 + 265) = 1;
  *((_DWORD *)v213 + 51) = -1;
  v213[274] = 2;
  *((_DWORD *)v213 + 55) = 1065353216;
  *((_DWORD *)v213 + 60) = 2139095039;
  *(_QWORD *)(v213 + 252) = 0x4334000000000000;
  *((_DWORD *)v213 + 65) = 1101004800;
  v213[285] = 4;
  v213[480] = 1;
  *(_QWORD *)(v199 + 432) = v213 + 24;
  *(_QWORD *)(v199 + 440) = v213;
  v214 = operator new(0x90uLL);
  v214[1] = 0;
  v214[2] = 0;
  *v214 = &off_1E4289FB8;
  memset_pattern16(v214 + 3, &unk_19FFB6370, 0x78uLL);
  md::LabelStyleContext::setScaleOptions((md::LabelStyleContext *)(v214 + 3), "\n{\n    text:   { small:.9, medium:1.0, large:1.3, xlarge:1.6, xxlarge:1.9, xxxlarge:2.2 },\n    halo:   { small:.9, medium:1.0, large:1.2, xlarge:1.4, xxlarge:1.6, xxxlarge:1.8 },\n    icon:   { small:.9, medium:1.0, large:1.0, xlarge:1.15, xxlarge:1.3, xxxlarge:1.45 },\n    shield: { small:.9, medium:1.0, large:1.0, xlarge:1.1, xxlarge:1.2, xxxlarge:1.3 },\n}\n");
  v215 = *(std::__shared_weak_count **)(v199 + 144);
  *(_QWORD *)(v199 + 136) = v214 + 3;
  *(_QWORD *)(v199 + 144) = v214;
  if (v215)
  {
    v216 = (unint64_t *)&v215->__shared_owners_;
    do
      v217 = __ldaxr(v216);
    while (__stlxr(v217 - 1, v216));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
  a1[43] = 0;
  a1[44] = 0;
  a1[42] = v199;
  v218 = operator new();
  v597 = (id)a1[12];
  v600 = objc_msgSend(v597, "shaderLibrary");
  *(_QWORD *)v218 = off_1E4292078;
  *(_QWORD *)(v218 + 8) = a1;
  *(_QWORD *)(v218 + 16) = 0;
  *(_QWORD *)(v218 + 24) = 0;
  *(_QWORD *)(v218 + 32) = 0;
  {
    v576 = operator new();
    *(_QWORD *)(v576 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v576 + 24) = "VectorKitLabels";
    *(_OWORD *)(v576 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v576 = &off_1E42B5668;
    *(_QWORD *)(v576 + 8) = "VectorKitLabels";
    *(_OWORD *)(v576 + 72) = 0u;
    *(_OWORD *)(v576 + 88) = 0u;
    *(_OWORD *)(v576 + 104) = 0u;
    *(_OWORD *)(v576 + 120) = 0u;
    *(_OWORD *)(v576 + 136) = 0u;
    *(_OWORD *)(v576 + 152) = 0u;
    *(_OWORD *)(v576 + 168) = 0u;
    *(_OWORD *)(v576 + 184) = 0u;
    *(_OWORD *)(v576 + 200) = 0u;
    *(_OWORD *)(v576 + 216) = 0u;
    *(_OWORD *)(v576 + 232) = 0u;
    *(_QWORD *)(v576 + 248) = 0;
    *(_OWORD *)(v576 + 56) = 0u;
    v577 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v576 + 56), 0);
    if ((_DWORD)v577)
      geo::read_write_lock::logFailure(v577, (uint64_t)"initialization", v578);
    v579 = malloc_create_zone(0, 0);
    *(_QWORD *)(v576 + 48) = v579;
    malloc_set_zone_name(v579, "VectorKitLabels");
    *(_QWORD *)(v576 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v576;
  }
  v220 = mdm::Allocator::instance(void)::alloc;
  v221 = 0uLL;
  *(_OWORD *)(v218 + 48) = 0u;
  *(_QWORD *)(v218 + 40) = v220;
  *(_OWORD *)(v218 + 64) = 0u;
  *(_OWORD *)(v218 + 80) = 0u;
  *(_OWORD *)(v218 + 96) = 0u;
  *(_QWORD *)(v218 + 112) = 0;
  if ((v220 & 1) == 0)
  {
    v221 = 0uLL;
    if (v580)
    {
      v581 = operator new();
      *(_QWORD *)(v581 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v581 + 24) = "VectorKitLabels";
      *(_OWORD *)(v581 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v581 = &off_1E42B5668;
      *(_QWORD *)(v581 + 8) = "VectorKitLabels";
      *(_OWORD *)(v581 + 72) = 0u;
      *(_OWORD *)(v581 + 88) = 0u;
      *(_OWORD *)(v581 + 104) = 0u;
      *(_OWORD *)(v581 + 120) = 0u;
      *(_OWORD *)(v581 + 136) = 0u;
      *(_OWORD *)(v581 + 152) = 0u;
      *(_OWORD *)(v581 + 168) = 0u;
      *(_OWORD *)(v581 + 184) = 0u;
      *(_OWORD *)(v581 + 200) = 0u;
      *(_OWORD *)(v581 + 216) = 0u;
      *(_OWORD *)(v581 + 232) = 0u;
      *(_QWORD *)(v581 + 248) = 0;
      *(_OWORD *)(v581 + 56) = 0u;
      v582 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v581 + 56), 0);
      if ((_DWORD)v582)
        geo::read_write_lock::logFailure(v582, (uint64_t)"initialization", v583);
      v584 = malloc_create_zone(0, 0);
      *(_QWORD *)(v581 + 48) = v584;
      malloc_set_zone_name(v584, "VectorKitLabels");
      *(_QWORD *)(v581 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v581;
      v221 = 0uLL;
    }
  }
  v222 = mdm::Allocator::instance(void)::alloc;
  *(_BYTE *)(v218 + 128) = 0;
  *(_QWORD *)(v218 + 120) = v222;
  *(_QWORD *)(v218 + 136) = 0x3FF0000000000000;
  *(_DWORD *)(v218 + 152) = 2139095039;
  *(_QWORD *)(v218 + 144) = vdupq_n_s32(0x7F7FFFFFu).u64[0];
  *(_OWORD *)(v218 + 160) = v221;
  *(_OWORD *)(v218 + 192) = v221;
  *(_WORD *)(v218 + 156) = 0;
  *(_OWORD *)(v218 + 176) = v221;
  *(_OWORD *)(v218 + 208) = v221;
  *(_OWORD *)(v218 + 224) = v221;
  *(_QWORD *)(v218 + 240) = 0;
  {
    v585 = operator new();
    *(_QWORD *)(v585 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v585 + 24) = "VectorKitLabels";
    *(_OWORD *)(v585 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v585 = &off_1E42B5668;
    *(_QWORD *)(v585 + 8) = "VectorKitLabels";
    *(_OWORD *)(v585 + 72) = 0u;
    *(_OWORD *)(v585 + 88) = 0u;
    *(_OWORD *)(v585 + 104) = 0u;
    *(_OWORD *)(v585 + 120) = 0u;
    *(_OWORD *)(v585 + 136) = 0u;
    *(_OWORD *)(v585 + 152) = 0u;
    *(_OWORD *)(v585 + 168) = 0u;
    *(_OWORD *)(v585 + 184) = 0u;
    *(_OWORD *)(v585 + 200) = 0u;
    *(_OWORD *)(v585 + 216) = 0u;
    *(_OWORD *)(v585 + 232) = 0u;
    *(_QWORD *)(v585 + 248) = 0;
    *(_OWORD *)(v585 + 56) = 0u;
    v586 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v585 + 56), 0);
    if ((_DWORD)v586)
      geo::read_write_lock::logFailure(v586, (uint64_t)"initialization", v587);
    v588 = malloc_create_zone(0, 0);
    *(_QWORD *)(v585 + 48) = v588;
    malloc_set_zone_name(v588, "VectorKitLabels");
    *(_QWORD *)(v585 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v585;
  }
  *(_QWORD *)(v218 + 248) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v218 + 256) = 0;
  *(_QWORD *)(v218 + 264) = 0;
  *(_QWORD *)(v218 + 272) = 0;
  {
    v589 = operator new();
    *(_QWORD *)(v589 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v589 + 24) = "VectorKitLabels";
    *(_OWORD *)(v589 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v589 = &off_1E42B5668;
    *(_QWORD *)(v589 + 8) = "VectorKitLabels";
    *(_OWORD *)(v589 + 72) = 0u;
    *(_OWORD *)(v589 + 88) = 0u;
    *(_OWORD *)(v589 + 104) = 0u;
    *(_OWORD *)(v589 + 120) = 0u;
    *(_OWORD *)(v589 + 136) = 0u;
    *(_OWORD *)(v589 + 152) = 0u;
    *(_OWORD *)(v589 + 168) = 0u;
    *(_OWORD *)(v589 + 184) = 0u;
    *(_OWORD *)(v589 + 200) = 0u;
    *(_OWORD *)(v589 + 216) = 0u;
    *(_OWORD *)(v589 + 232) = 0u;
    *(_QWORD *)(v589 + 248) = 0;
    *(_OWORD *)(v589 + 56) = 0u;
    v590 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v589 + 56), 0);
    if ((_DWORD)v590)
      geo::read_write_lock::logFailure(v590, (uint64_t)"initialization", v591);
    v592 = malloc_create_zone(0, 0);
    *(_QWORD *)(v589 + 48) = v592;
    malloc_set_zone_name(v592, "VectorKitLabels");
    *(_QWORD *)(v589 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v589;
  }
  *(_QWORD *)(v218 + 280) = mdm::Allocator::instance(void)::alloc;
  memset(&__x[20], 0, 25);
  __x[0] = 0;
  *(_OWORD *)&__x[4] = xmmword_19FFB3060;
  v224 = operator new();
  *(_DWORD *)(v224 + 32) = 0;
  *(_QWORD *)(v224 + 16) = 0;
  *(_QWORD *)(v224 + 24) = 0;
  *(_QWORD *)v224 = &off_1E42B5DE8;
  *(_QWORD *)(v224 + 8) = 0;
  *(_QWORD *)(v224 + 36) = 65792;
  *(_DWORD *)(v224 + 44) = 0;
  *(_QWORD *)(v224 + 48) = 1;
  *(_WORD *)(v224 + 56) = 0;
  *(_BYTE *)(v224 + 58) = 3;
  *(_QWORD *)(v224 + 67) = 0;
  *(_QWORD *)(v224 + 59) = 0;
  *(_BYTE *)(v224 + 75) = 0;
  *(_QWORD *)(v224 + 132) = 0;
  *(_QWORD *)(v224 + 124) = 0;
  *(_WORD *)(v224 + 188) = 257;
  *(_QWORD *)(v224 + 192) = 0;
  *(_QWORD *)(v224 + 200) = 0;
  *(_BYTE *)(v224 + 208) = 0;
  v225 = *(_QWORD *)(v218 + 176);
  *(_QWORD *)(v218 + 176) = v224;
  if (v225)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v225 + 8))(v225);
    v224 = *(_QWORD *)(v218 + 176);
  }
  *(_BYTE *)(v224 + 58) = 2;
  v226 = operator new(0xE8uLL);
  v226[1] = 0;
  v226[2] = 0;
  *v226 = &off_1E42E1408;
  v227 = ggl::BufferData::BufferData((uint64_t)(v226 + 3), qword_1EE5445B8, 2, 1, 6, 1);
  v226[28] = ggl::OcclusionLine::View::reflection(void)::reflection;
  v226[3] = &off_1E42B8F10;
  v228 = *(std::__shared_weak_count **)(v218 + 168);
  *(_QWORD *)(v218 + 160) = v227;
  *(_QWORD *)(v218 + 168) = v226;
  if (v228)
  {
    v229 = (unint64_t *)&v228->__shared_owners_;
    do
      v230 = __ldaxr(v229);
    while (__stlxr(v230 - 1, v229));
    if (!v230)
    {
      ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
      std::__shared_weak_count::__release_weak(v228);
    }
  }
  v231 = *(_QWORD **)(v218 + 160);
  v232 = v231[1];
  v233 = v231[9];
  *(_OWORD *)(v233 + 64) = xmmword_19FFB2D90;
  v234 = v231[8];
  if (v234 <= v232)
    v234 = v232;
  v231[7] = 0;
  *(_DWORD *)(v233 + 80) = 1086324736;
  if (v234 > v232)
    v232 = v234;
  v231[8] = v232;
  v235 = (_QWORD *)operator new();
  v236 = *(uint32x2_t **)(v600 + 80);
  v237 = v236[176];
  v615 = (uint64_t (**)())v236[175];
  v616 = (std::__shared_weak_count *)v237;
  if (v237)
  {
    v238 = (unint64_t *)(*(_QWORD *)&v237 + 8);
    do
      v239 = __ldxr(v238);
    while (__stxr(v239 + 1, v238));
  }
  v240 = (std::__shared_weak_count *)operator new(0x198uLL);
  v36 = a1 + 59;
  v240->__shared_owners_ = 0;
  v241 = (unint64_t *)&v240->__shared_owners_;
  v240->__shared_weak_owners_ = 0;
  v240->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEF10;
  v242 = *(_OWORD *)&namea->data;
  v619 = *(_OWORD *)&namea->isa;
  v620 = v242;
  ggl::OcclusionLine::OcclusionLinePipelineState::OcclusionLinePipelineState((uint64_t)&v240[1], &v615, (uint64_t)__x, &v619);
  ggl::OcclusionLine::OcclusionLinePipelineSetup::OcclusionLinePipelineSetup(v235, (uint64_t)&v240[1], v240, (uint64_t *)(v218 + 160));
  v243 = *(_QWORD *)(v218 + 184);
  *(_QWORD *)(v218 + 184) = v235;
  if (v243)
    (*(void (**)(uint64_t))(*(_QWORD *)v243 + 8))(v243);
  a3 = v605;
  do
    v244 = __ldaxr(v241);
  while (__stlxr(v244 - 1, v241));
  if (!v244)
  {
    ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
    std::__shared_weak_count::__release_weak(v240);
  }
  v245 = v616;
  if (v616)
  {
    v246 = (unint64_t *)&v616->__shared_owners_;
    do
      v247 = __ldaxr(v246);
    while (__stlxr(v247 - 1, v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
  v248 = operator new();
  *(_DWORD *)(v248 + 32) = 0;
  *(_QWORD *)(v248 + 16) = 0;
  *(_QWORD *)(v248 + 24) = 0;
  *(_QWORD *)v248 = &off_1E42B5DE8;
  *(_QWORD *)(v248 + 8) = 0;
  *(_QWORD *)(v248 + 36) = 65792;
  *(_DWORD *)(v248 + 44) = 0;
  *(_QWORD *)(v248 + 48) = 1;
  *(_WORD *)(v248 + 56) = 0;
  *(_BYTE *)(v248 + 58) = 3;
  *(_QWORD *)(v248 + 67) = 0;
  *(_QWORD *)(v248 + 59) = 0;
  *(_BYTE *)(v248 + 75) = 0;
  *(_QWORD *)(v248 + 132) = 0;
  *(_QWORD *)(v248 + 124) = 0;
  *(_WORD *)(v248 + 188) = 257;
  *(_QWORD *)(v248 + 192) = 0;
  *(_QWORD *)(v248 + 200) = 0;
  *(_BYTE *)(v248 + 208) = 0;
  v249 = *(_QWORD *)(v218 + 208);
  *(_QWORD *)(v218 + 208) = v248;
  if (v249)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v249 + 8))(v249);
    v248 = *(_QWORD *)(v218 + 208);
  }
  *(_BYTE *)(v248 + 58) = 0;
  v250 = operator new(0xE8uLL);
  v250[1] = 0;
  v250[2] = 0;
  *v250 = &off_1E42E1408;
  v251 = ggl::BufferData::BufferData((uint64_t)(v250 + 3), qword_1EE5445B8, 2, 1, 6, 1);
  v250[28] = ggl::OcclusionLine::View::reflection(void)::reflection;
  v250[3] = &off_1E42B8F10;
  v252 = *(std::__shared_weak_count **)(v218 + 200);
  *(_QWORD *)(v218 + 192) = v251;
  *(_QWORD *)(v218 + 200) = v250;
  if (v252)
  {
    v253 = (unint64_t *)&v252->__shared_owners_;
    do
      v254 = __ldaxr(v253);
    while (__stlxr(v254 - 1, v253));
    if (!v254)
    {
      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
      std::__shared_weak_count::__release_weak(v252);
    }
  }
  v255 = *(_QWORD **)(v218 + 192);
  v256 = v255[1];
  v257 = v255[9];
  *(_OWORD *)(v257 + 64) = xmmword_19FFB2D90;
  v258 = v255[8];
  if (v258 <= v256)
    v258 = v256;
  v255[7] = 0;
  *(_DWORD *)(v257 + 80) = 1086324736;
  if (v258 > v256)
    v256 = v258;
  v255[8] = v256;
  v259 = (_QWORD *)operator new();
  v260 = *(uint32x2_t **)(v600 + 80);
  v261 = v260[176];
  v615 = (uint64_t (**)())v260[175];
  v616 = (std::__shared_weak_count *)v261;
  if (v261)
  {
    v262 = (unint64_t *)(*(_QWORD *)&v261 + 8);
    do
      v263 = __ldxr(v262);
    while (__stxr(v263 + 1, v262));
  }
  v264 = (std::__shared_weak_count *)operator new(0x198uLL);
  v264->__shared_owners_ = 0;
  v265 = (unint64_t *)&v264->__shared_owners_;
  v264->__shared_weak_owners_ = 0;
  v264->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEF10;
  v266 = *(_OWORD *)&namea->data;
  v619 = *(_OWORD *)&namea->isa;
  v620 = v266;
  ggl::OcclusionLine::OcclusionLinePipelineState::OcclusionLinePipelineState((uint64_t)&v264[1], &v615, (uint64_t)__x, &v619);
  ggl::OcclusionLine::OcclusionLinePipelineSetup::OcclusionLinePipelineSetup(v259, (uint64_t)&v264[1], v264, (uint64_t *)(v218 + 192));
  v267 = *(_QWORD *)(v218 + 216);
  *(_QWORD *)(v218 + 216) = v259;
  if (v267)
    (*(void (**)(uint64_t))(*(_QWORD *)v267 + 8))(v267);
  do
    v268 = __ldaxr(v265);
  while (__stlxr(v268 - 1, v265));
  if (!v268)
  {
    ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
    std::__shared_weak_count::__release_weak(v264);
  }
  v269 = v616;
  if (v616)
  {
    v270 = (unint64_t *)&v616->__shared_owners_;
    do
      v271 = __ldaxr(v270);
    while (__stlxr(v271 - 1, v270));
    if (!v271)
    {
      ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
      std::__shared_weak_count::__release_weak(v269);
    }
  }
  v272 = *(_QWORD *)(v218 + 224);
  a2 = *(_QWORD *)(v218 + 232);
  v273 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v272) >> 3);
  if (v273 > 0x3E7)
  {
    if (a2 - v272 != 24000)
    {
      v282 = v272 + 24000;
      while (a2 != v282)
      {
        v283 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = 0;
        if (v283)
          (*(void (**)(uint64_t))(*(_QWORD *)v283 + 8))(v283);
        v284 = *(std::__shared_weak_count **)(a2 - 16);
        if (v284)
        {
          v285 = (unint64_t *)&v284->__shared_owners_;
          do
            v286 = __ldaxr(v285);
          while (__stlxr(v286 - 1, v285));
          if (!v286)
          {
            ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
            std::__shared_weak_count::__release_weak(v284);
          }
        }
        a2 -= 24;
      }
      *(_QWORD *)(v218 + 232) = v282;
    }
  }
  else
  {
    v274 = *(_QWORD *)(v218 + 240);
    if (0xAAAAAAAAAAAAAAABLL * ((v274 - a2) >> 3) >= 1000 - v273)
    {
      v295 = a2 + 24 * (1000 - v273);
      v296 = 24000 - 24 * v273;
      do
      {
        if (a2)
        {
          *(_QWORD *)a2 = 0;
          *(_QWORD *)(a2 + 8) = 0;
          *(_QWORD *)(a2 + 16) = 0;
        }
        a2 += 24;
        v296 -= 24;
      }
      while (v296);
      *(_QWORD *)(v218 + 232) = v295;
    }
    else
    {
      v275 = 0xAAAAAAAAAAAAAAABLL * ((v274 - v272) >> 3);
      v276 = 2 * v275;
      if (2 * v275 <= 0x3E8)
        v276 = 1000;
      if (v275 >= 0x555555555555555)
        a2 = 0xAAAAAAAAAAAAAAALL;
      else
        a2 = v276;
      v277 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v218 + 248) + 16))(*(_QWORD *)(v218 + 248), 24 * a2, 8);
      v278 = (_QWORD *)(v277 + 24 * v273);
      v279 = v277 + 24000;
      v280 = v273 - 1000;
      v281 = v278;
      do
      {
        if (v277)
        {
          *v281 = 0;
          v281[1] = 0;
          v281[2] = 0;
        }
        v281 += 3;
      }
      while (!__CFADD__(v280++, 1));
      v297 = v277 + 24 * a2;
      v298 = *(_QWORD **)(v218 + 224);
      v299 = *(_QWORD **)(v218 + 232);
      if (v299 == v298)
      {
        *(_QWORD *)(v218 + 224) = v278;
        *(_QWORD *)(v218 + 232) = v279;
        v303 = *(_QWORD *)(v218 + 240);
        *(_QWORD *)(v218 + 240) = v297;
      }
      else
      {
        do
        {
          v300 = *(_OWORD *)(v299 - 3);
          v299 -= 3;
          *(_OWORD *)(v278 - 3) = v300;
          v278 -= 3;
          *v299 = 0;
          v299[1] = 0;
          v301 = v299[2];
          v299[2] = 0;
          v278[2] = v301;
        }
        while (v299 != v298);
        v299 = *(_QWORD **)(v218 + 224);
        v302 = *(_QWORD **)(v218 + 232);
        *(_QWORD *)(v218 + 224) = v278;
        *(_QWORD *)(v218 + 232) = v279;
        v303 = *(_QWORD *)(v218 + 240);
        *(_QWORD *)(v218 + 240) = v297;
        while (v302 != v299)
        {
          v304 = *(v302 - 1);
          *(v302 - 1) = 0;
          if (v304)
            (*(void (**)(uint64_t))(*(_QWORD *)v304 + 8))(v304);
          a2 = *(v302 - 2);
          if (a2)
          {
            v305 = (unint64_t *)(a2 + 8);
            do
              v306 = __ldaxr(v305);
            while (__stlxr(v306 - 1, v305));
            if (!v306)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)a2);
            }
          }
          v302 -= 3;
        }
      }
      if (v299)
        (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v218 + 248) + 40))(*(_QWORD *)(v218 + 248), v299, v303 - (_QWORD)v299);
    }
  }
  v307 = *(int32x4_t **)(v218 + 256);
  v308 = *(int32x4_t **)(v218 + 264);
  v309 = (char *)v308 - (char *)v307;
  if ((unint64_t)((char *)v308 - (char *)v307) <= 0xF9F)
  {
    std::vector<unsigned int,geo::StdAllocator<unsigned int,mdm::Allocator>>::__append(v218 + 256, 1000 - (v309 >> 2));
    v71 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    v307 = *(int32x4_t **)(v218 + 256);
    v308 = *(int32x4_t **)(v218 + 264);
    goto LABEL_361;
  }
  v71 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if (v309 == 4000)
  {
LABEL_361:
    if (v307 == v308)
      goto LABEL_371;
    goto LABEL_364;
  }
  v308 = v307 + 250;
  *(_QWORD *)(v218 + 264) = v307 + 250;
LABEL_364:
  v310 = (char *)v308 - (char *)v307 - 4;
  if (v310 >= 0x1C)
  {
    v312 = (v310 >> 2) + 1;
    v311 = v312 & 0x7FFFFFFFFFFFFFF8;
    v313 = (int32x4_t)xmmword_19FFB2E90;
    v314 = v307 + 1;
    v315.i64[0] = 0x400000004;
    v315.i64[1] = 0x400000004;
    v316.i64[0] = 0x800000008;
    v316.i64[1] = 0x800000008;
    v317 = v312 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v314[-1] = v313;
      *v314 = vaddq_s32(v313, v315);
      v313 = vaddq_s32(v313, v316);
      v314 += 2;
      v317 -= 8;
    }
    while (v317);
    if (v312 == v311)
      goto LABEL_371;
    v307 = (int32x4_t *)((char *)v307 + 4 * (v312 & 0x7FFFFFFFFFFFFFF8));
  }
  else
  {
    LODWORD(v311) = 0;
  }
  do
  {
    v307->i32[0] = v311;
    v307 = (int32x4_t *)((char *)v307 + 4);
    LODWORD(v311) = v311 + 1;
  }
  while (v307 != v308);
LABEL_371:
  v318 = *(_QWORD *)(v218 + 8);
  v319 = *(_QWORD *)(v318 + 232);
  if (*(_BYTE *)(v319 + 109))
  {
    *(_WORD *)(v218 + 288) = *(_WORD *)(v319 + 107);
    *(_QWORD *)(v218 + 296) = 0;
    *(_QWORD *)(v218 + 304) = 0;
    md::LabelsState::addObserver(*(_QWORD *)(v318 + 168), (md::LabelsStateObserver *)v218);
    v320 = *(_QWORD *)(*(_QWORD *)(v218 + 8) + 232);
    *(_BYTE *)(v218 + 156) = *(_BYTE *)(v320 + 17) ^ 1;
    *(_BYTE *)(v218 + 128) = *(_BYTE *)(v320 + 16);
    *(_BYTE *)(v218 + 157) = *(_BYTE *)(v320 + 31);
    *(_DWORD *)(v218 + 144) = *(_DWORD *)(v320 + 40);
    *(int32x2_t *)(v218 + 148) = vrev64_s32(*(int32x2_t *)(v320 + 44));
    a1[45] = v218;

    v321 = operator new();
    *(_QWORD *)v321 = 0;
    *(_QWORD *)(v321 + 8) = 0;
    *(_DWORD *)(v321 + 16) = 0;
    a1[47] = 0;
    a1[48] = 0;
    a1[46] = v321;
    if ((v322 & 1) != 0)
      goto LABEL_373;
    goto LABEL_688;
  }
  std::__throw_bad_optional_access[abi:nn180100]();
LABEL_687:
  __break(1u);
LABEL_688:
  {
    v593 = operator new();
    *((_QWORD *)v71 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v593, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
LABEL_373:
  a1[49] = *((_QWORD *)v71 + 299);
  a1[50] = 0;
  v323 = atomic_load((unsigned __int8 *)a2);
  {
    v594 = operator new();
    *((_QWORD *)v71 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v594, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  a1[51] = *((_QWORD *)v71 + 299);
  a1[52] = 0;
  *((_DWORD *)a1 + 106) = 1065353216;
  v324 = a1[29];
  a1[54] = 0;
  a1[55] = v324;
  *((_BYTE *)a1 + 448) = *(_BYTE *)(v324 + 17);
  *(_QWORD *)((char *)a1 + 455) = 0;
  *(_QWORD *)((char *)a1 + 449) = 0;
  *((_BYTE *)a1 + 463) = 1;
  *((_BYTE *)a1 + 468) = 0;
  *((_DWORD *)a1 + 116) = 0;
  *(_OWORD *)v36 = xmmword_19FFB34C0;
  v325 = 0uLL;
  *(_OWORD *)(a1 + 61) = 0u;
  *((_DWORD *)a1 + 126) = 1065353216;
  *((_DWORD *)a1 + 229) = 0;
  *((_OWORD *)a1 + 63) = 0u;
  *((_OWORD *)a1 + 64) = 0u;
  *((_OWORD *)a1 + 61) = 0u;
  *((_OWORD *)a1 + 62) = 0u;
  *((_OWORD *)a1 + 59) = 0u;
  *((_OWORD *)a1 + 60) = 0u;
  *((_OWORD *)a1 + 58) = 0u;
  *(_OWORD *)((char *)a1 + 836) = 0u;
  *(_OWORD *)(a1 + 101) = 0u;
  *(_OWORD *)(a1 + 103) = 0u;
  *(_OWORD *)(a1 + 97) = 0u;
  *(_OWORD *)(a1 + 99) = 0u;
  *(_OWORD *)(a1 + 93) = 0u;
  *(_OWORD *)(a1 + 95) = 0u;
  *(_OWORD *)(a1 + 89) = 0u;
  *(_OWORD *)(a1 + 91) = 0u;
  *(_OWORD *)(a1 + 85) = 0u;
  *(_OWORD *)(a1 + 87) = 0u;
  *(_OWORD *)(a1 + 81) = 0u;
  *(_OWORD *)(a1 + 83) = 0u;
  *(_OWORD *)(a1 + 77) = 0u;
  *(_OWORD *)(a1 + 79) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(_OWORD *)(a1 + 75) = 0u;
  *(_OWORD *)(a1 + 69) = 0u;
  *(_OWORD *)(a1 + 71) = 0u;
  *(_OWORD *)((char *)a1 + 897) = 0u;
  *(_OWORD *)(a1 + 109) = 0u;
  *(_OWORD *)(a1 + 111) = 0u;
  *(_OWORD *)(a1 + 107) = 0u;
  a1[115] = 0x3FF0000000000000;
  a1[120] = 0x3FF0000000000000;
  a1[125] = 0x3FF0000000000000;
  *((_OWORD *)a1 + 68) = 0u;
  *((_OWORD *)a1 + 70) = 0u;
  *((_OWORD *)a1 + 66) = 0u;
  *((_OWORD *)a1 + 67) = 0u;
  *((_OWORD *)a1 + 69) = 0u;
  *((_OWORD *)a1 + 71) = 0u;
  *((_OWORD *)a1 + 72) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)a1 + 65) = _Q0;
  a1[136] = 0x3FF0000000000000;
  a1[141] = 0x3FF0000000000000;
  *((_OWORD *)a1 + 74) = 0u;
  *((_OWORD *)a1 + 75) = 0u;
  *((_OWORD *)a1 + 76) = 0u;
  *((_OWORD *)a1 + 77) = 0u;
  *((_OWORD *)a1 + 78) = 0u;
  *((_OWORD *)a1 + 79) = 0u;
  *((_OWORD *)a1 + 80) = 0u;
  *((_OWORD *)a1 + 73) = _Q0;
  a1[152] = 0x3FF0000000000000;
  a1[157] = 0x3FF0000000000000;
  *((_OWORD *)a1 + 84) = 0u;
  *((_OWORD *)a1 + 86) = 0u;
  *((_OWORD *)a1 + 82) = 0u;
  *((_OWORD *)a1 + 83) = 0u;
  *((_OWORD *)a1 + 85) = 0u;
  *((_OWORD *)a1 + 87) = 0u;
  *((_OWORD *)a1 + 88) = 0u;
  *((_OWORD *)a1 + 81) = _Q0;
  a1[168] = 0x3FF0000000000000;
  a1[173] = 0x3FF0000000000000;
  *((_OWORD *)a1 + 91) = 0u;
  *((_OWORD *)a1 + 90) = 0u;
  *((_OWORD *)a1 + 92) = 0u;
  a1[186] = 0;
  *((_OWORD *)a1 + 89) = _Q0;
  a1[183] = 0x3FF0000000000000;
  a1[187] = 0x3FF0000000000000;
  *((_OWORD *)a1 + 94) = xmmword_19FFB5020;
  *((_OWORD *)a1 + 95) = xmmword_19FFB5030;
  *((_OWORD *)a1 + 96) = xmmword_19FFB5030;
  *((_OWORD *)a1 + 97) = xmmword_19FFB5030;
  *((_OWORD *)a1 + 98) = xmmword_19FFB5030;
  a1[198] = 0x80000000800000;
  *(_OWORD *)(a1 + 201) = 0u;
  *(_OWORD *)(a1 + 199) = 0u;
  *((_DWORD *)a1 + 406) = 1065353216;
  *((_BYTE *)a1 + 1628) = 0;
  *((_BYTE *)a1 + 1632) = 0;
  *((_WORD *)a1 + 818) = 0;
  *((_BYTE *)a1 + 1713) = 0;
  *(_QWORD *)((char *)a1 + 1716) = 0x3DCCCCCD00000000;
  *(_OWORD *)((char *)a1 + 1668) = 0u;
  *(_OWORD *)(a1 + 207) = 0u;
  *(_OWORD *)(a1 + 205) = 0u;
  v327 = a1[29];
  a1[216] = v327;
  *((_BYTE *)a1 + 1736) = *(_BYTE *)(v327 + 17);
  *(_QWORD *)((char *)a1 + 1743) = 0;
  *(_QWORD *)((char *)a1 + 1737) = 0;
  *((_BYTE *)a1 + 1751) = 1;
  *((_BYTE *)a1 + 1756) = 0;
  *((_DWORD *)a1 + 438) = 0;
  *((_OWORD *)a1 + 110) = xmmword_19FFB34C0;
  *((_OWORD *)a1 + 111) = 0u;
  *((_DWORD *)a1 + 448) = 1065353216;
  *((_DWORD *)a1 + 551) = 0;
  *(_OWORD *)(a1 + 289) = 0u;
  *(_OWORD *)(a1 + 287) = 0u;
  *(_OWORD *)(a1 + 285) = 0u;
  *(_OWORD *)(a1 + 283) = 0u;
  *(_OWORD *)(a1 + 281) = 0u;
  *(_OWORD *)(a1 + 279) = 0u;
  *(_OWORD *)(a1 + 277) = 0u;
  *(_OWORD *)((char *)a1 + 2124) = 0u;
  *((_OWORD *)a1 + 132) = 0u;
  *((_OWORD *)a1 + 131) = 0u;
  *((_OWORD *)a1 + 130) = 0u;
  *((_OWORD *)a1 + 129) = 0u;
  *((_OWORD *)a1 + 128) = 0u;
  *((_OWORD *)a1 + 127) = 0u;
  *((_OWORD *)a1 + 126) = 0u;
  *((_OWORD *)a1 + 125) = 0u;
  *((_OWORD *)a1 + 124) = 0u;
  *((_OWORD *)a1 + 123) = 0u;
  *((_OWORD *)a1 + 122) = 0u;
  *((_OWORD *)a1 + 121) = 0u;
  *((_OWORD *)a1 + 120) = 0u;
  *((_OWORD *)a1 + 119) = 0u;
  *((_OWORD *)a1 + 118) = 0u;
  *((_OWORD *)a1 + 117) = 0u;
  *((_OWORD *)a1 + 116) = 0u;
  *((_OWORD *)a1 + 115) = 0u;
  *(_OWORD *)((char *)a1 + 2185) = 0u;
  *((_OWORD *)a1 + 136) = 0u;
  *((_OWORD *)a1 + 135) = 0u;
  *((_OWORD *)a1 + 134) = 0u;
  a1[276] = 0x3FF0000000000000;
  a1[281] = 0x3FF0000000000000;
  a1[286] = 0x3FF0000000000000;
  a1[291] = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 297) = 0u;
  *(_OWORD *)(a1 + 301) = 0u;
  *(_OWORD *)(a1 + 293) = 0u;
  *(_OWORD *)(a1 + 295) = 0u;
  *(_OWORD *)(a1 + 299) = 0u;
  *(_OWORD *)(a1 + 303) = 0u;
  *(_OWORD *)(a1 + 305) = 0u;
  a1[292] = 0x3FF0000000000000;
  a1[297] = 0x3FF0000000000000;
  a1[302] = 0x3FF0000000000000;
  a1[307] = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 313) = 0u;
  *(_OWORD *)(a1 + 317) = 0u;
  *(_OWORD *)(a1 + 321) = 0u;
  *(_OWORD *)(a1 + 319) = 0u;
  *(_OWORD *)(a1 + 315) = 0u;
  *(_OWORD *)(a1 + 311) = 0u;
  *(_OWORD *)(a1 + 309) = 0u;
  a1[308] = 0x3FF0000000000000;
  a1[313] = 0x3FF0000000000000;
  a1[318] = 0x3FF0000000000000;
  a1[323] = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 329) = 0u;
  *(_OWORD *)(a1 + 333) = 0u;
  *(_OWORD *)(a1 + 325) = 0u;
  *(_OWORD *)(a1 + 327) = 0u;
  *(_OWORD *)(a1 + 331) = 0u;
  *(_OWORD *)(a1 + 335) = 0u;
  *(_OWORD *)(a1 + 337) = 0u;
  a1[324] = 0x3FF0000000000000;
  a1[329] = 0x3FF0000000000000;
  a1[334] = 0x3FF0000000000000;
  a1[339] = 0x3FF0000000000000;
  a1[347] = 0;
  *(_OWORD *)(a1 + 345) = 0u;
  *(_OWORD *)(a1 + 343) = 0u;
  *(_OWORD *)(a1 + 341) = 0u;
  a1[340] = 0x3FF0000000000000;
  a1[344] = 0x3FF0000000000000;
  a1[348] = 0x3FF0000000000000;
  *((_OWORD *)v36 + 145) = xmmword_19FFB5020;
  *((_OWORD *)v36 + 146) = xmmword_19FFB5030;
  *((_OWORD *)v36 + 147) = xmmword_19FFB5030;
  *((_OWORD *)v36 + 148) = xmmword_19FFB5030;
  *((_OWORD *)v36 + 149) = xmmword_19FFB5030;
  a1[359] = 0x80000000800000;
  *((_OWORD *)a1 + 181) = 0u;
  *((_OWORD *)a1 + 180) = 0u;
  *((_DWORD *)a1 + 728) = 1065353216;
  *((_BYTE *)a1 + 2916) = 0;
  *((_BYTE *)a1 + 2920) = 0;
  *((_WORD *)a1 + 1462) = 0;
  *((_BYTE *)a1 + 3001) = 0;
  *((_DWORD *)a1 + 751) = 0;
  *(_OWORD *)((char *)a1 + 2956) = 0u;
  *((_OWORD *)a1 + 184) = 0u;
  *((_OWORD *)a1 + 183) = 0u;
  *((_DWORD *)a1 + 752) = 1036831949;
  a1[377] = 0;
  *((_BYTE *)a1 + 3024) = 1;
  *((_DWORD *)a1 + 757) = 0;
  *(_DWORD *)((char *)a1 + 3025) = 0;
  *((_WORD *)a1 + 1516) = 1;
  *((_WORD *)a1 + 1519) = 257;
  *(_DWORD *)((char *)a1 + 3034) = 16843009;
  *((_BYTE *)a1 + 3048) = 0;
  a1[380] = 0;
  *((_BYTE *)a1 + 3049) = 1;
  *((_BYTE *)a1 + 3060) = 0;
  *((_BYTE *)a1 + 3076) = 0;
  a1[391] = 0;
  *((_DWORD *)a1 + 784) = 0;
  a1[393] = 0;
  *((_BYTE *)a1 + 3152) = 0;
  *((_BYTE *)a1 + 3058) = 0;
  *(_QWORD *)((char *)a1 + 3050) = 0;
  *((_BYTE *)a1 + 3153) = 1;
  *(_OWORD *)(a1 + 395) = 0u;
  a1[397] = 850045863;
  *((_OWORD *)a1 + 203) = 0u;
  *((_OWORD *)a1 + 202) = 0u;
  *((_OWORD *)a1 + 201) = 0u;
  *((_OWORD *)a1 + 200) = 0u;
  *((_OWORD *)a1 + 199) = 0u;
  v328 = atomic_load((unsigned __int8 *)a2);
  if ((v328 & 1) == 0)
  {
    v325 = 0uLL;
    if (v595)
    {
      v596 = operator new();
      *((_QWORD *)v71 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v596, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v325 = 0uLL;
    }
  }
  nameb = (__CFString *)(a1 + 393);
  a1[408] = *((_QWORD *)v71 + 299);
  *((_DWORD *)v36 + 702) = 0;
  v36[350] = 0;
  *((_WORD *)a1 + 1652) = 0;
  *(_OWORD *)(a1 + 411) = v325;
  *(_QWORD *)((char *)a1 + 3308) = 0x13F800000;
  *(_QWORD *)((char *)a1 + 3316) = 0;
  *(_OWORD *)((char *)a1 + 3324) = v325;
  *(_QWORD *)((char *)a1 + 3340) = 0x3F80000000000000;
  *((_WORD *)a1 + 1674) = 0;
  *((_BYTE *)a1 + 3350) = 0;
  a1[419] = 0;
  *((_WORD *)a1 + 1680) = 1284;
  *((_WORD *)a1 + 1684) = 257;
  *(_DWORD *)((char *)a1 + 3378) = 0;
  *(_QWORD *)((char *)a1 + 3370) = 0;
  v329 = a1[23];
  _ZF = v329 == 0;
  v330 = v329 != 0;
  v331 = _ZF;
  *((_BYTE *)a1 + 3382) = v331;
  *((_BYTE *)a1 + 3383) = v330;
  *((_BYTE *)a1 + 3388) = 0;
  *((_DWORD *)a1 + 846) = 0;
  *(_WORD *)((char *)a1 + 3389) = 257;
  *(_DWORD *)((char *)v36 + 2919) = 0;
  *(_QWORD *)((char *)a1 + 3409) = 0;
  *(_OWORD *)((char *)a1 + 3396) = v325;
  a1[428] = 0;
  *(_DWORD *)((char *)a1 + 3431) = 0;
  *(_WORD *)((char *)a1 + 3435) = 9;
  v598 = a1 + 430;
  a1[432] = 0;
  *((_OWORD *)a1 + 215) = v325;
  a1[433] = &off_1E42B5110;
  a1[434] = 0;
  *((_OWORD *)a1 + 218) = v325;
  *((_OWORD *)a1 + 219) = v325;
  a1[440] = &off_1E42B4B90;
  a1[441] = 0;
  a1[443] = 1065353216;
  *((_DWORD *)a1 + 888) = 16777473;
  *((_BYTE *)a1 + 3556) = 0;
  a1[445] = 0xBF80000000000000;
  *((_DWORD *)a1 + 892) = 0;
  *((_BYTE *)a1 + 3572) = 1;
  *((_DWORD *)a1 + 900) = 0;
  a1[449] = 0;
  *(_OWORD *)(a1 + 447) = v325;
  *((_DWORD *)a1 + 902) = 0x10000;
  *((_BYTE *)a1 + 3612) = 1;
  *(_QWORD *)((char *)v36 + 3141) = 0;
  *(_DWORD *)((char *)v36 + 3149) = 16777473;
  *(_DWORD *)((char *)a1 + 3625) = 0;
  *((_BYTE *)a1 + 3629) = 0;
  *((_DWORD *)a1 + 908) = 1096810496;
  *((_BYTE *)a1 + 3668) = 0;
  *((_BYTE *)a1 + 3672) = 0;
  *((_BYTE *)a1 + 3676) = 0;
  *((_BYTE *)a1 + 3680) = 0;
  *((_WORD *)a1 + 1842) = 0;
  *((_BYTE *)a1 + 3686) = 0;
  *(_QWORD *)((char *)a1 + 3636) = 0;
  *(_DWORD *)((char *)a1 + 3643) = 0;
  a1[457] = 0;
  a1[456] = 0;
  *((_WORD *)a1 + 1832) = 0;
  v332 = **(id **)(a3 + 72);
  v614 = 0;
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::Monitorable((uint64_t)(a1 + 461), &VectorKitDebugConfig_LabelLogStyleQueries, v332, v613);
  v333 = v614;
  if (v614 == v613)
  {
    v334 = 4;
    v333 = v613;
  }
  else
  {
    if (!v614)
      goto LABEL_383;
    v334 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v333 + 8 * v334))();
LABEL_383:

  v335 = **(id **)(a3 + 72);
  v612 = 0;
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::Monitorable((uint64_t)(a1 + 471), &VectorKitDebugConfig_LabelLogMissingStyles, v335, v611);
  v336 = v612;
  if (v612 == v611)
  {
    v337 = 4;
    v336 = v611;
    goto LABEL_387;
  }
  if (v612)
  {
    v337 = 5;
LABEL_387:
    (*(void (**)(void))(*(_QWORD *)v336 + 8 * v337))();
  }

  a1[481] = 0;
  *(_QWORD *)((char *)a1 + 3853) = 0;
  v338 = (std::__shared_weak_count *)operator new(0x20uLL);
  v338->__shared_owners_ = 0;
  v339 = (unint64_t *)&v338->__shared_owners_;
  v338->__shared_weak_owners_ = 0;
  v338->__vftable = (std::__shared_weak_count_vtbl *)&off_1E428A370;
  LOBYTE(v338[1].__vftable) = 1;
  a1[483] = v338 + 1;
  a1[484] = v338;
  do
    v340 = __ldxr(v339);
  while (__stxr(v340 + 1, v339));
  v341 = **(id **)(v605 + 72);
  do
    v342 = __ldxr(v339);
  while (__stxr(v342 + 1, v339));
  v343 = operator new();
  v615 = &off_1E4279E28;
  v616 = v338 + 1;
  v617 = v338;
  v618 = (uint32x2_t *)&v615;
  v344 = v341;
  *(_OWORD *)v343 = VectorKitDebugConfig_HideLabels;
  *(_QWORD *)(v343 + 16) = 0;
  *(_QWORD *)(v343 + 24) = 0;
  *(_QWORD *)(v343 + 32) = 0;
  if (*(_DWORD *)v343 && *(_QWORD *)(v343 + 8))
    md::ConfigValue<GEOConfigKeyString,std::string>::_update(v343);
  *(_QWORD *)(v343 + 40) = 0;
  v345 = operator new(0x20uLL);
  v345[1] = 0;
  v345[2] = 0;
  *v345 = &off_1E428A338;
  *((_BYTE *)v345 + 24) = 1;
  *(_QWORD *)(v343 + 48) = v345 + 3;
  *(_QWORD *)(v343 + 56) = v345;
  v346 = (_BYTE *)(v343 + 64);
  v347 = (uint64_t)v618;
  if (!v618)
    goto LABEL_398;
  if (v618 != (uint32x2_t *)&v615)
  {
    v347 = (*(uint64_t (**)(void))(*(_QWORD *)v618 + 16))();
LABEL_398:
    *(_QWORD *)(v343 + 88) = v347;
    goto LABEL_400;
  }
  *(_QWORD *)(v343 + 88) = v346;
  ((void (*)(uint64_t (***)(), uint64_t))v615[3])(&v615, v343 + 64);
LABEL_400:
  v348 = (uint64_t)v618;
  if (!v618)
  {
LABEL_403:
    *((_QWORD *)&v620 + 1) = v348;
    goto LABEL_405;
  }
  if (v618 != (uint32x2_t *)&v615)
  {
    v348 = (*(uint64_t (**)(void))(*(_QWORD *)v618 + 16))();
    goto LABEL_403;
  }
  *((_QWORD *)&v620 + 1) = &v619;
  ((void (*)(uint64_t (***)(), __int128 *))v615[3])(&v615, &v619);
LABEL_405:
  v349 = v344;
  if (*(_QWORD *)(v343 + 40))
  {
    GEOConfigRemoveBlockListener();
    v350 = *(void **)(v343 + 40);
    *(_QWORD *)(v343 + 40) = 0;

  }
  v351 = (_BYTE *)*((_QWORD *)&v620 + 1);
  if (!*((_QWORD *)&v620 + 1))
    goto LABEL_410;
  if (*((__int128 **)&v620 + 1) != &v619)
  {
    v351 = (_BYTE *)(*(uint64_t (**)(void))(**((_QWORD **)&v620 + 1) + 16))();
LABEL_410:
    *(_QWORD *)&__x[24] = v351;
    goto LABEL_412;
  }
  *(_QWORD *)&__x[24] = __x;
  (*(void (**)(__int128 *, _BYTE *))(v619 + 24))(&v619, __x);
  v351 = *(_BYTE **)&__x[24];
LABEL_412:
  v352 = *(_BYTE **)(v343 + 88);
  if (v351 == __x)
  {
    if (v352 == v346)
    {
      (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)__x + 24))(__x, v623);
      (*(void (**)(_QWORD))(**(_QWORD **)&__x[24] + 32))(*(_QWORD *)&__x[24]);
      *(_QWORD *)&__x[24] = 0;
      (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v343 + 88) + 24))(*(_QWORD *)(v343 + 88), __x);
      (*(void (**)(_QWORD))(**(_QWORD **)(v343 + 88) + 32))(*(_QWORD *)(v343 + 88));
      *(_QWORD *)(v343 + 88) = 0;
      *(_QWORD *)&__x[24] = __x;
      (*(void (**)(_QWORD *, uint64_t))(v623[0] + 24))(v623, v343 + 64);
      (*(void (**)(_QWORD *))(v623[0] + 32))(v623);
      *(_QWORD *)(v343 + 88) = v346;
      v352 = *(_BYTE **)&__x[24];
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)__x + 24))(__x, v343 + 64);
      (*(void (**)(_QWORD))(**(_QWORD **)&__x[24] + 32))(*(_QWORD *)&__x[24]);
      v352 = *(_BYTE **)(v343 + 88);
      *(_QWORD *)&__x[24] = v352;
      *(_QWORD *)(v343 + 88) = v346;
    }
  }
  else
  {
    if (v352 == v346)
    {
      v352 = __x;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v343 + 64) + 24))(v343 + 64, __x);
      (*(void (**)(_QWORD))(**(_QWORD **)(v343 + 88) + 32))(*(_QWORD *)(v343 + 88));
      *(_QWORD *)(v343 + 88) = *(_QWORD *)&__x[24];
      *(_QWORD *)&__x[24] = __x;
      v353 = 4;
      goto LABEL_423;
    }
    *(_QWORD *)&__x[24] = *(_QWORD *)(v343 + 88);
    *(_QWORD *)(v343 + 88) = v351;
  }
  if (v352 == __x)
  {
    v353 = 4;
    v352 = __x;
  }
  else
  {
    if (!v352)
      goto LABEL_424;
    v353 = 5;
  }
LABEL_423:
  (*(void (**)(_BYTE *))(*(_QWORD *)v352 + 8 * v353))(v352);
LABEL_424:
  v354 = *(_QWORD *)(v343 + 48);
  v355 = *(std::__shared_weak_count **)(v343 + 56);
  if (v355)
  {
    v356 = (unint64_t *)&v355->__shared_owners_;
    do
      v357 = __ldxr(v356);
    while (__stxr(v357 + 1, v356));
  }
  *(_QWORD *)__x = MEMORY[0x1E0C809B0];
  *(_QWORD *)&__x[8] = 3321888768;
  *(_QWORD *)&__x[16] = ___ZN2md11MonitorableINS_11ConfigValueI18GEOConfigKeyStringNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE16setCallbackQueueEPU28objcproto17OS_dispatch_queue8NSObjectNS3_8functionIFvS9_EEE_block_invoke;
  *(_QWORD *)&__x[24] = &__block_descriptor_56_ea8_40c40_ZTSNSt3__110shared_ptrINS_6atomicIbEEEE_e14_v24__0___I_v_8l;
  *(_QWORD *)&__x[32] = v343;
  *(_QWORD *)&__x[40] = v354;
  v622 = v355;
  if (v355)
  {
    v358 = (unint64_t *)&v355->__shared_owners_;
    do
      v359 = __ldxr(v358);
    while (__stxr(v359 + 1, v358));
  }
  _GEOConfigAddBlockListenerForKey();
  v360 = objc_claimAutoreleasedReturnValue();
  v361 = *(void **)(v343 + 40);
  *(_QWORD *)(v343 + 40) = v360;

  v362 = v622;
  if (v622)
  {
    v363 = (unint64_t *)&v622->__shared_owners_;
    do
      v364 = __ldaxr(v363);
    while (__stlxr(v364 - 1, v363));
    if (!v364)
    {
      ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
      std::__shared_weak_count::__release_weak(v362);
    }
  }
  if (v355)
  {
    v365 = (unint64_t *)&v355->__shared_owners_;
    do
      v366 = __ldaxr(v365);
    while (__stlxr(v366 - 1, v365));
    if (!v366)
    {
      ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
      std::__shared_weak_count::__release_weak(v355);
    }
  }

  v367 = (__int128 *)*((_QWORD *)&v620 + 1);
  if (*((__int128 **)&v620 + 1) == &v619)
  {
    v368 = 4;
    v367 = &v619;
  }
  else
  {
    if (!*((_QWORD *)&v620 + 1))
      goto LABEL_445;
    v368 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v367 + 8 * v368))();
LABEL_445:

  v369 = (uint64_t (***)())v618;
  if (v618 == (uint32x2_t *)&v615)
  {
    v371 = 4;
    v369 = &v615;
    v370 = a1 + 481;
  }
  else
  {
    v370 = a1 + 481;
    if (!v618)
      goto LABEL_450;
    v371 = 5;
  }
  (*v369)[v371]();
LABEL_450:
  v372 = *v370;
  *v370 = v343;
  if (v372)
  {
    v373 = md::Monitorable<md::ConfigValue<GEOConfigKeyString,std::string>>::~Monitorable(v372);
    MEMORY[0x1A1AF4E00](v373, 0x10B2C40F4174BB0);
  }

  do
    v374 = __ldaxr(v339);
  while (__stlxr(v374 - 1, v339));
  if (!v374)
  {
    ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
    std::__shared_weak_count::__release_weak(v338);
  }
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v375 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v375, OS_LOG_TYPE_INFO))
  {
    if (v599 > 6)
      v376 = "<Invalid>";
    else
      v376 = off_1E42FB0E0[v599];
    *(_DWORD *)__x = 134218242;
    *(_QWORD *)&__x[4] = a1;
    *(_WORD *)&__x[12] = 2080;
    *(_QWORD *)&__x[14] = v376;
    _os_log_impl(&dword_19F029000, v375, OS_LOG_TYPE_INFO, "MDL:Create LabelManager:%p type=%s", __x, 0x16u);
  }

  do
    v377 = __ldaxr(md::LabelManager::_labelManagerInstanceCount);
  while (__stlxr(v377 + 1, md::LabelManager::_labelManagerInstanceCount));
  v378 = dispatch_semaphore_create(1);
  v379 = (void *)a1[27];
  a1[27] = v378;

  a1[54] = a1 + 55;
  atomic_store(a1[23] != 0, (unsigned __int8 *)a1 + 3058);
  v380 = *((float *)a1 + 44);
  *((float *)a1 + 886) = v380;
  md::LabelStyleCache::setContentScale((md::LabelStyleCache *)a1[42], v380);
  v381 = operator new();
  v382 = md::FontGlyphCache::FontGlyphCache(v381, 0);
  isa = (md::FontGlyphCache *)nameb->isa;
  nameb->isa = (void *)v382;
  if (isa)
  {
    md::FontGlyphCache::~FontGlyphCache(isa);
    MEMORY[0x1A1AF4E00]();
  }
  *(_QWORD *)(a1[38] + 104) = a1[35];
  md::LabelWorldTraits::createLabeler((md::LabelWorldTraits *)__x, (md::LabelManager *)*(unsigned __int8 *)(a1[29] + 16), (id *)a1);
  v384 = a1[30];
  a1[30] = *(_QWORD *)__x;
  if (v384)
    (*(void (**)(uint64_t))(*(_QWORD *)v384 + 8))(v384);
  a1[390] = 0;
  *((_OWORD *)a1 + 194) = 0u;
  *((_OWORD *)a1 + 193) = 0u;
  if (!a1[23])
  {
    v385 = operator new();
    v386 = *(id *)a1[19];
    v609[0] = &off_1E42CA6D0;
    v609[1] = a1;
    v610 = v609;
    gdc::Timer::Timer(v385, v386, v609);
    v387 = *v598;
    *v598 = v385;
    if (v387)
      (*(void (**)(uint64_t))(*(_QWORD *)v387 + 8))(v387);
    v388 = v610;
    if (v610 == v609)
    {
      v389 = 4;
      v388 = v609;
    }
    else
    {
      if (!v610)
        goto LABEL_477;
      v389 = 5;
    }
    (*(void (**)(void))(*v388 + 8 * v389))();
LABEL_477:

    v390 = operator new();
    v391 = *(id *)a1[19];
    v607[0] = &off_1E42CA718;
    v607[1] = a1;
    v608 = v607;
    gdc::Timer::Timer(v390, v391, v607);
    v392 = a1[431];
    a1[431] = v390;
    if (v392)
      (*(void (**)(uint64_t))(*(_QWORD *)v392 + 8))(v392);
    v393 = v608;
    if (v608 == v607)
    {
      v394 = 4;
      v393 = v607;
    }
    else
    {
      if (!v608)
      {
LABEL_484:

        goto LABEL_485;
      }
      v394 = 5;
    }
    (*(void (**)(void))(*v393 + 8 * v394))();
    goto LABEL_484;
  }
LABEL_485:
  *((float *)a1 + 827) = *((float *)a1 + 44) * 4.0;
  if (md::LabelManager::LabelManager(gdc::WorldType,md::LabelManagerCreationParams const&)::onceToken != -1)
    dispatch_once(&md::LabelManager::LabelManager(gdc::WorldType,md::LabelManagerCreationParams const&)::onceToken, &__block_literal_global_14503);
  md::LabelManager::updateDebugSettings((md::LabelManager *)a1);
  *((_BYTE *)a1 + 128) = 1;
  return a1;
}

void sub_19F33B754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, md::LabelLayoutContext *a12, std::recursive_mutex *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,_Unwind_Exception *exception_object,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  md::LabelsState **v46;
  uint64_t v47;
  void *v48;
  __CFNotificationCenter *LocalCenter;
  std::__shared_weak_count *v50;

  MEMORY[0x1A1AF4E00](v47, 0x10A1C4066F3BFFFLL);
  v46[26] = (md::LabelsState *)&off_1E42B5550;

  std::unique_ptr<md::LabelsState>::~unique_ptr[abi:nn180100](v46 + 21);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a14);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a26);
  v46[11] = (md::LabelsState *)&off_1E42B4D50;

  std::recursive_mutex::~recursive_mutex(a13);
  *v46 = (md::LabelsState *)&off_1E4299F90;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveEveryObserver(LocalCenter, v46);
  v50 = (std::__shared_weak_count *)v46[2];
  if (v50)
    std::__shared_weak_count::__release_weak(v50);
  _Unwind_Resume(a1);
}

void sub_19F33CAC8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[15];
  v0[15] = 0;
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0x81C40B8603338);
  v2 = v0[14];
  v0[14] = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0x81C40B8603338);
  v3 = v0[13];
  v0[13] = 0;
  if (v3)
    MEMORY[0x1A1AF4E00](v3, 0x81C40B8603338);
  v4 = v0[12];
  v0[12] = 0;
  if (v4)
    MEMORY[0x1A1AF4E00](v4, 0x81C40B8603338);
  v5 = v0[11];
  v0[11] = 0;
  if (v5)
    MEMORY[0x1A1AF4E00](v5, 0x81C40B8603338);
  v6 = v0[10];
  v0[10] = 0;
  if (v6)
    MEMORY[0x1A1AF4E00](v6, 0x1081C40FC6463CFLL);
  v7 = *v0;
  if (*v0)
  {
    v0[1] = v7;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v0[3] + 40))(v0[3], v7, v0[2] - v7);
  }
  MEMORY[0x1A1AF4E00](v0, 0xA0C4086860989);
  JUMPOUT(0x19F33CA68);
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, std::vector<unsigned int>::const_reference __x)
{
  unsigned int *value;
  std::vector<unsigned int>::pointer end;
  unsigned int *v8;
  std::vector<unsigned int>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  std::vector<unsigned int>::size_type v16;
  std::vector<unsigned int>::size_type v17;
  float32x4_t v18;
  float32x4_t *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  std::vector<unsigned int>::size_type v23;
  unsigned int *v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  unsigned int v35;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  v8 = end;
  if (__n <= value - end)
  {
    if (!__n)
    {
LABEL_21:
      this->__end_ = v8;
      return;
    }
    v16 = (__n - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v16 >= 0xF && (end >= __x + 1 || &end[__n] <= __x))
    {
      v17 = v16 + 1;
      v18 = vld1q_dup_f32((const float *)__x);
      v19 = (float32x4_t *)(end + 4);
      v20 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v17 == (v17 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_20;
      v8 = &end[v17 & 0x7FFFFFFFFFFFFFF8];
    }
    do
      *v8++ = *__x;
    while (v8 != &end[__n]);
LABEL_20:
    v8 = &end[__n];
    goto LABEL_21;
  }
  begin = this->__begin_;
  v10 = (char *)end - (char *)this->__begin_;
  v11 = v10 >> 2;
  v12 = (v10 >> 2) + __n;
  if (v12 >> 62)
    abort();
  v13 = (char *)value - (char *)begin;
  if (v13 >> 1 > v12)
    v12 = v13 >> 1;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
    v14 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 62)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v15 = operator new(4 * v14);
  }
  else
  {
    v15 = 0;
  }
  v21 = (unsigned int *)&v15[4 * v11];
  v22 = &v21[__n];
  v23 = (__n - 1) & 0x3FFFFFFFFFFFFFFFLL;
  v24 = v21;
  if (v23 >= 0x13)
  {
    if (v21 >= __x + 1 || (v24 = (unsigned int *)&v15[4 * v11], &v15[4 * __n + v10] <= (_BYTE *)__x))
    {
      v25 = (v23 + 1) & 0x7FFFFFFFFFFFFFF8;
      v26 = vld1q_dup_f32((const float *)__x);
      v27 = (float32x4_t *)&v15[4 * v11 + 16];
      v28 = v25;
      do
      {
        v27[-1] = v26;
        *v27 = v26;
        v27 += 2;
        v28 -= 8;
      }
      while (v28);
      if (v23 + 1 == v25)
        goto LABEL_31;
      v24 = &v21[v25];
    }
  }
  do
    *v24++ = *__x;
  while (v24 != v22);
LABEL_31:
  if (end != begin)
  {
    v29 = (char *)end - (char *)begin - 4;
    if (v29 < 0x2C)
      goto LABEL_45;
    if ((unint64_t)((char *)end - &v15[v10]) < 0x20)
      goto LABEL_45;
    v30 = (v29 >> 2) + 1;
    v8 = &end[-(v30 & 0x7FFFFFFFFFFFFFF8)];
    v31 = &v15[4 * v11 - 16];
    v32 = (__int128 *)(end - 4);
    v33 = v30 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v34 = *v32;
      *(v31 - 1) = *(v32 - 1);
      *v31 = v34;
      v31 -= 2;
      v32 -= 2;
      v33 -= 8;
    }
    while (v33);
    v21 -= v30 & 0x7FFFFFFFFFFFFFF8;
    if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_45:
      do
      {
        v35 = *--v8;
        *--v21 = v35;
      }
      while (v8 != begin);
    }
  }
  this->__begin_ = v21;
  this->__end_ = v22;
  this->__end_cap_.__value_ = (unsigned int *)&v15[4 * v14];
  if (begin)
    operator delete(begin);
}

uint64_t std::vector<unsigned int,geo::StdAllocator<unsigned int,mdm::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  uint64_t v27;

  v3 = result;
  v4 = *(_DWORD **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (a2 <= (v5 - (uint64_t)v4) >> 2)
  {
    if (a2)
    {
      v11 = 4 * a2;
      v12 = &v4[a2];
      do
      {
        if (v4)
          *v4 = 0;
        ++v4;
        v11 -= 4;
      }
      while (v11);
      v4 = v12;
    }
    *(_QWORD *)(result + 8) = v4;
  }
  else
  {
    v6 = (uint64_t)v4 - *(_QWORD *)result;
    v7 = v6 >> 2;
    v8 = (v6 >> 2) + a2;
    if (v8 >> 62)
      abort();
    v9 = v5 - *(_QWORD *)result;
    if (v9 >> 1 > v8)
      v8 = v9 >> 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
      v10 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 4 * v10, 4);
    else
      result = 0;
    v13 = (_DWORD *)(result + 4 * v7);
    v14 = 4 * a2;
    v15 = &v13[a2];
    v16 = v13;
    do
    {
      if (v16)
        *v16 = 0;
      ++v16;
      v14 -= 4;
    }
    while (v14);
    v17 = *(_QWORD *)v3;
    v18 = *(_QWORD *)(v3 + 8);
    if (v18 != *(_QWORD *)v3)
    {
      v19 = v18 - *(_QWORD *)v3 - 4;
      if (v19 < 0x2C)
        goto LABEL_35;
      if ((unint64_t)(v18 - (v6 + result)) < 0x20)
        goto LABEL_35;
      v20 = (v19 >> 2) + 1;
      v21 = v18 - 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
      v22 = (_OWORD *)(result + 4 * v7 - 16);
      v23 = (__int128 *)(v18 - 16);
      v24 = v20 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v25 = *v23;
        *(v22 - 1) = *(v23 - 1);
        *v22 = v25;
        v22 -= 2;
        v23 -= 2;
        v24 -= 8;
      }
      while (v24);
      v13 -= v20 & 0x7FFFFFFFFFFFFFF8;
      v18 = v21;
      if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_35:
        do
        {
          v26 = *(_DWORD *)(v18 - 4);
          v18 -= 4;
          *--v13 = v26;
        }
        while (v18 != v17);
      }
    }
    *(_QWORD *)v3 = v13;
    *(_QWORD *)(v3 + 8) = v15;
    v27 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + 4 * v10;
    if (v17)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v17, v27 - v17);
  }
  return result;
}

uint64_t md::LabelWorldTraits::createLabeler(md::LabelWorldTraits *this, md::LabelManager *a2, id *a3)
{
  md::LabelWorldTraits *v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  id v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  uint64_t v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  std::__shared_weak_count *v38;
  unint64_t v39;
  unint64_t *p_shared_weak_owners;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  md::LabelExternalMeshModerator *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  uint64_t v53;
  unsigned __int8 v54;
  md::MapNavLabeler **v55;
  uint64_t v56;
  md::MapNavLabeler *v57;
  md::MapNavLabeler *v58;
  uint64_t result;
  unsigned __int8 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unsigned __int8 v67;
  unsigned __int8 v68;
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t v71;
  geo::read_write_lock *v72;
  const char *v73;
  malloc_zone_t *zone;
  uint64_t v75;
  geo::read_write_lock *v76;
  const char *v77;
  malloc_zone_t *v78;
  uint64_t v79;
  geo::read_write_lock *v80;
  const char *v81;
  malloc_zone_t *v82;
  uint64_t v83;
  geo::read_write_lock *v84;
  const char *v85;
  malloc_zone_t *v86;
  uint64_t v87;
  geo::read_write_lock *v88;
  const char *v89;
  malloc_zone_t *v90;
  uint64_t v91;
  geo::read_write_lock *v92;
  const char *v93;
  malloc_zone_t *v94;
  uint64_t v95;
  geo::read_write_lock *v96;
  const char *v97;
  malloc_zone_t *v98;
  uint64_t v99;
  geo::read_write_lock *v100;
  const char *v101;
  malloc_zone_t *v102;
  uint64_t v103;
  geo::read_write_lock *v104;
  const char *v105;
  malloc_zone_t *v106;
  uint64_t v107;
  geo::read_write_lock *v108;
  const char *v109;
  malloc_zone_t *v110;
  uint64_t v111;
  geo::read_write_lock *v112;
  const char *v113;
  malloc_zone_t *v114;
  uint64_t v115;
  geo::read_write_lock *v116;
  const char *v117;
  malloc_zone_t *v118;
  uint64_t v119;
  geo::read_write_lock *v120;
  const char *v121;
  malloc_zone_t *v122;
  uint64_t v123;
  geo::read_write_lock *v124;
  const char *v125;
  malloc_zone_t *v126;
  uint64_t v127;
  geo::read_write_lock *v128;
  const char *v129;
  malloc_zone_t *v130;
  uint64_t v131;
  geo::read_write_lock *v132;
  const char *v133;
  malloc_zone_t *v134;
  uint64_t v135;
  geo::read_write_lock *v136;
  const char *v137;
  malloc_zone_t *v138;
  uint64_t v139;
  geo::read_write_lock *v140;
  const char *v141;
  malloc_zone_t *v142;
  uint64_t v143;
  geo::read_write_lock *v144;
  const char *v145;
  malloc_zone_t *v146;
  uint64_t v147;
  geo::read_write_lock *v148;
  const char *v149;
  malloc_zone_t *v150;
  uint64_t v151;
  geo::read_write_lock *v152;
  const char *v153;
  malloc_zone_t *v154;
  uint64_t v155;
  geo::read_write_lock *v156;
  const char *v157;
  malloc_zone_t *v158;
  md::LabelWorldTraits *v159;
  uint64_t v160;
  geo::read_write_lock *v161;
  const char *v162;
  malloc_zone_t *v163;
  md::LabelWorldTraits *v164;
  uint64_t v165;
  geo::read_write_lock *v166;
  const char *v167;
  malloc_zone_t *v168;
  md::LabelWorldTraits *v169;
  uint64_t v170;
  geo::read_write_lock *v171;
  const char *v172;
  malloc_zone_t *v173;
  id *v175;

  v4 = this;
  if (((1 << (char)a2) & 0x73) != 0)
  {
    v5 = operator new();
    *(_QWORD *)v5 = &off_1E4291880;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    {
      v71 = operator new();
      *(_QWORD *)(v71 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v71 + 24) = "VectorKitLabels";
      *(_OWORD *)(v71 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v71 = &off_1E42B5668;
      *(_QWORD *)(v71 + 8) = "VectorKitLabels";
      *(_OWORD *)(v71 + 72) = 0u;
      *(_OWORD *)(v71 + 88) = 0u;
      *(_OWORD *)(v71 + 104) = 0u;
      *(_OWORD *)(v71 + 120) = 0u;
      *(_OWORD *)(v71 + 136) = 0u;
      *(_OWORD *)(v71 + 152) = 0u;
      *(_OWORD *)(v71 + 168) = 0u;
      *(_OWORD *)(v71 + 184) = 0u;
      *(_OWORD *)(v71 + 200) = 0u;
      *(_OWORD *)(v71 + 216) = 0u;
      *(_OWORD *)(v71 + 232) = 0u;
      *(_QWORD *)(v71 + 248) = 0;
      *(_OWORD *)(v71 + 56) = 0u;
      v72 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v71 + 56), 0);
      if ((_DWORD)v72)
        geo::read_write_lock::logFailure(v72, (uint64_t)"initialization", v73);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v71 + 48) = zone;
      malloc_set_zone_name(zone, "VectorKitLabels");
      *(_QWORD *)(v71 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v71;
    }
    *(_QWORD *)(v5 + 32) = mdm::Allocator::instance(void)::alloc;
    *(_BYTE *)(v5 + 40) = -1;
    *(_QWORD *)v5 = &off_1E428BAA8;
    *(_QWORD *)(v5 + 48) = a3;
    *(_QWORD *)(v5 + 56) = 0;
    *(_QWORD *)(v5 + 64) = 0;
    v7 = operator new();
    v8 = *(id **)(v5 + 48);
    md::StandardLabeler::StandardLabeler((md::StandardLabeler *)v7, (md::LabelManager *)v8);
    *(_QWORD *)v7 = &off_1E4294B28;
    *(_QWORD *)(v7 + 8) = &unk_1E4294D18;
    *(_QWORD *)(v7 + 16) = &unk_1E4294D60;
    v9 = operator new();
    *(_QWORD *)(v9 + 8) = &unk_1E4297410;
    *(_QWORD *)v9 = &off_1E42973C8;
    *(_QWORD *)(v9 + 16) = v8;
    v10 = v8[12];
    v11 = (_QWORD *)objc_msgSend(v10, "dataOverrideManager");
    v175 = v8;
    v12 = v11[1];
    *(_QWORD *)(v9 + 24) = *v11;
    *(_QWORD *)(v9 + 32) = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }

    *(_QWORD *)(v9 + 128) = 0;
    *(_QWORD *)(v9 + 40) = &off_1E42B4B90;
    *(_QWORD *)(v9 + 48) = 0;
    *(_QWORD *)(v9 + 64) = &off_1E42B4B90;
    *(_QWORD *)(v9 + 72) = 0;
    *(_QWORD *)(v9 + 88) = &off_1E42B5210;
    *(_QWORD *)(v9 + 96) = 0;
    *(_QWORD *)(v9 + 136) = 0;
    *(_QWORD *)(v9 + 144) = 0;
    *(_DWORD *)(v9 + 112) = 0;
    {
      v75 = operator new();
      *(_QWORD *)(v75 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v75 + 24) = "VectorKitLabels";
      *(_OWORD *)(v75 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v75 = &off_1E42B5668;
      *(_QWORD *)(v75 + 8) = "VectorKitLabels";
      *(_OWORD *)(v75 + 72) = 0u;
      *(_OWORD *)(v75 + 88) = 0u;
      *(_OWORD *)(v75 + 104) = 0u;
      *(_OWORD *)(v75 + 120) = 0u;
      *(_OWORD *)(v75 + 136) = 0u;
      *(_OWORD *)(v75 + 152) = 0u;
      *(_OWORD *)(v75 + 168) = 0u;
      *(_OWORD *)(v75 + 184) = 0u;
      *(_OWORD *)(v75 + 200) = 0u;
      *(_OWORD *)(v75 + 216) = 0u;
      *(_OWORD *)(v75 + 232) = 0u;
      *(_QWORD *)(v75 + 248) = 0;
      *(_OWORD *)(v75 + 56) = 0u;
      v76 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v75 + 56), 0);
      if ((_DWORD)v76)
        geo::read_write_lock::logFailure(v76, (uint64_t)"initialization", v77);
      v78 = malloc_create_zone(0, 0);
      *(_QWORD *)(v75 + 48) = v78;
      malloc_set_zone_name(v78, "VectorKitLabels");
      *(_QWORD *)(v75 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v75;
    }
    v16 = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v9 + 160) = 0;
    *(_QWORD *)(v9 + 152) = v16;
    *(_QWORD *)(v9 + 168) = 0;
    {
      v79 = operator new();
      *(_QWORD *)(v79 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v79 + 24) = "VectorKitLabels";
      *(_OWORD *)(v79 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v79 = &off_1E42B5668;
      *(_QWORD *)(v79 + 8) = "VectorKitLabels";
      *(_OWORD *)(v79 + 72) = 0u;
      *(_OWORD *)(v79 + 88) = 0u;
      *(_OWORD *)(v79 + 104) = 0u;
      *(_OWORD *)(v79 + 120) = 0u;
      *(_OWORD *)(v79 + 136) = 0u;
      *(_OWORD *)(v79 + 152) = 0u;
      *(_OWORD *)(v79 + 168) = 0u;
      *(_OWORD *)(v79 + 184) = 0u;
      *(_OWORD *)(v79 + 200) = 0u;
      *(_OWORD *)(v79 + 216) = 0u;
      *(_OWORD *)(v79 + 232) = 0u;
      *(_QWORD *)(v79 + 248) = 0;
      *(_OWORD *)(v79 + 56) = 0u;
      v80 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v79 + 56), 0);
      if ((_DWORD)v80)
        geo::read_write_lock::logFailure(v80, (uint64_t)"initialization", v81);
      v82 = malloc_create_zone(0, 0);
      *(_QWORD *)(v79 + 48) = v82;
      malloc_set_zone_name(v82, "VectorKitLabels");
      *(_QWORD *)(v79 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v79;
    }
    *(_QWORD *)(v9 + 176) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v9 + 184) = 0;
    {
      v83 = operator new();
      *(_QWORD *)(v83 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v83 + 24) = "VectorKitLabels";
      *(_OWORD *)(v83 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v83 = &off_1E42B5668;
      *(_QWORD *)(v83 + 8) = "VectorKitLabels";
      *(_OWORD *)(v83 + 72) = 0u;
      *(_OWORD *)(v83 + 88) = 0u;
      *(_OWORD *)(v83 + 104) = 0u;
      *(_OWORD *)(v83 + 120) = 0u;
      *(_OWORD *)(v83 + 136) = 0u;
      *(_OWORD *)(v83 + 152) = 0u;
      *(_OWORD *)(v83 + 168) = 0u;
      *(_OWORD *)(v83 + 184) = 0u;
      *(_OWORD *)(v83 + 200) = 0u;
      *(_OWORD *)(v83 + 216) = 0u;
      *(_OWORD *)(v83 + 232) = 0u;
      *(_QWORD *)(v83 + 248) = 0;
      *(_OWORD *)(v83 + 56) = 0u;
      v84 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v83 + 56), 0);
      if ((_DWORD)v84)
        geo::read_write_lock::logFailure(v84, (uint64_t)"initialization", v85);
      v86 = malloc_create_zone(0, 0);
      *(_QWORD *)(v83 + 48) = v86;
      malloc_set_zone_name(v86, "VectorKitLabels");
      *(_QWORD *)(v83 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v83;
    }
    v18 = mdm::Allocator::instance(void)::alloc;
    *(_OWORD *)(v9 + 216) = 0u;
    *(_QWORD *)(v9 + 192) = v18;
    *(_QWORD *)(v9 + 200) = 0;
    *(_DWORD *)(v9 + 208) = 1065353216;
    *(_OWORD *)(v9 + 232) = 0u;
    *(_OWORD *)(v9 + 248) = 0u;
    {
      v87 = operator new();
      *(_QWORD *)(v87 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v87 + 24) = "VectorKitLabels";
      *(_OWORD *)(v87 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v87 = &off_1E42B5668;
      *(_QWORD *)(v87 + 8) = "VectorKitLabels";
      *(_OWORD *)(v87 + 72) = 0u;
      *(_OWORD *)(v87 + 88) = 0u;
      *(_OWORD *)(v87 + 104) = 0u;
      *(_OWORD *)(v87 + 120) = 0u;
      *(_OWORD *)(v87 + 136) = 0u;
      *(_OWORD *)(v87 + 152) = 0u;
      *(_OWORD *)(v87 + 168) = 0u;
      *(_OWORD *)(v87 + 184) = 0u;
      *(_OWORD *)(v87 + 200) = 0u;
      *(_OWORD *)(v87 + 216) = 0u;
      *(_OWORD *)(v87 + 232) = 0u;
      *(_QWORD *)(v87 + 248) = 0;
      *(_OWORD *)(v87 + 56) = 0u;
      v88 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v87 + 56), 0);
      if ((_DWORD)v88)
        geo::read_write_lock::logFailure(v88, (uint64_t)"initialization", v89);
      v90 = malloc_create_zone(0, 0);
      *(_QWORD *)(v87 + 48) = v90;
      malloc_set_zone_name(v90, "VectorKitLabels");
      *(_QWORD *)(v87 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v87;
    }
    *(_QWORD *)(v9 + 264) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v9 + 280) = 0;
    {
      v91 = operator new();
      *(_QWORD *)(v91 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v91 + 24) = "VectorKitLabels";
      *(_OWORD *)(v91 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v91 = &off_1E42B5668;
      *(_QWORD *)(v91 + 8) = "VectorKitLabels";
      *(_OWORD *)(v91 + 72) = 0u;
      *(_OWORD *)(v91 + 88) = 0u;
      *(_OWORD *)(v91 + 104) = 0u;
      *(_OWORD *)(v91 + 120) = 0u;
      *(_OWORD *)(v91 + 136) = 0u;
      *(_OWORD *)(v91 + 152) = 0u;
      *(_OWORD *)(v91 + 168) = 0u;
      *(_OWORD *)(v91 + 184) = 0u;
      *(_OWORD *)(v91 + 200) = 0u;
      *(_OWORD *)(v91 + 216) = 0u;
      *(_OWORD *)(v91 + 232) = 0u;
      *(_QWORD *)(v91 + 248) = 0;
      *(_OWORD *)(v91 + 56) = 0u;
      v92 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v91 + 56), 0);
      if ((_DWORD)v92)
        geo::read_write_lock::logFailure(v92, (uint64_t)"initialization", v93);
      v94 = malloc_create_zone(0, 0);
      *(_QWORD *)(v91 + 48) = v94;
      malloc_set_zone_name(v94, "VectorKitLabels");
      *(_QWORD *)(v91 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v91;
    }
    *(_QWORD *)(v9 + 288) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v9 + 296) = 0;
    *(_QWORD *)(v9 + 272) = v9 + 280;
    *(_QWORD *)(v9 + 304) = &off_1E42B4E30;
    *(_QWORD *)(v9 + 312) = 0;
    *(_QWORD *)(v9 + 368) = 0;
    *(_QWORD *)(v9 + 376) = 0;
    *(_DWORD *)(v9 + 360) = 0;
    *(_OWORD *)(v9 + 328) = 0u;
    *(_OWORD *)(v9 + 344) = 0u;
    {
      v95 = operator new();
      *(_QWORD *)(v95 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v95 + 24) = "VectorKitLabels";
      *(_OWORD *)(v95 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v95 = &off_1E42B5668;
      *(_QWORD *)(v95 + 8) = "VectorKitLabels";
      *(_OWORD *)(v95 + 72) = 0u;
      *(_OWORD *)(v95 + 88) = 0u;
      *(_OWORD *)(v95 + 104) = 0u;
      *(_OWORD *)(v95 + 120) = 0u;
      *(_OWORD *)(v95 + 136) = 0u;
      *(_OWORD *)(v95 + 152) = 0u;
      *(_OWORD *)(v95 + 168) = 0u;
      *(_OWORD *)(v95 + 184) = 0u;
      *(_OWORD *)(v95 + 200) = 0u;
      *(_OWORD *)(v95 + 216) = 0u;
      *(_OWORD *)(v95 + 232) = 0u;
      *(_QWORD *)(v95 + 248) = 0;
      *(_OWORD *)(v95 + 56) = 0u;
      v96 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v95 + 56), 0);
      if ((_DWORD)v96)
        geo::read_write_lock::logFailure(v96, (uint64_t)"initialization", v97);
      v98 = malloc_create_zone(0, 0);
      *(_QWORD *)(v95 + 48) = v98;
      malloc_set_zone_name(v98, "VectorKitLabels");
      *(_QWORD *)(v95 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v95;
    }
    *(_QWORD *)(v9 + 384) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v9 + 392) = 0;
    {
      v99 = operator new();
      *(_QWORD *)(v99 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v99 + 24) = "VectorKitLabels";
      *(_OWORD *)(v99 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v99 = &off_1E42B5668;
      *(_QWORD *)(v99 + 8) = "VectorKitLabels";
      *(_OWORD *)(v99 + 72) = 0u;
      *(_OWORD *)(v99 + 88) = 0u;
      *(_OWORD *)(v99 + 104) = 0u;
      *(_OWORD *)(v99 + 120) = 0u;
      *(_OWORD *)(v99 + 136) = 0u;
      *(_OWORD *)(v99 + 152) = 0u;
      *(_OWORD *)(v99 + 168) = 0u;
      *(_OWORD *)(v99 + 184) = 0u;
      *(_OWORD *)(v99 + 200) = 0u;
      *(_OWORD *)(v99 + 216) = 0u;
      *(_OWORD *)(v99 + 232) = 0u;
      *(_QWORD *)(v99 + 248) = 0;
      *(_OWORD *)(v99 + 56) = 0u;
      v100 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v99 + 56), 0);
      if ((_DWORD)v100)
        geo::read_write_lock::logFailure(v100, (uint64_t)"initialization", v101);
      v102 = malloc_create_zone(0, 0);
      *(_QWORD *)(v99 + 48) = v102;
      malloc_set_zone_name(v102, "VectorKitLabels");
      *(_QWORD *)(v99 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v99;
    }
    *(_QWORD *)(v9 + 400) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v9 + 408) = 0;
    *(_DWORD *)(v9 + 416) = 1065353216;
    md::LabelsState::addObserver(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 168), (md::LabelsStateObserver *)(v9 + 8));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 168) + 56) = v9;
    *(_QWORD *)(v7 + 392) = v9;
    v22 = operator new();
    *(_OWORD *)(v22 + 32) = 0u;
    *(_OWORD *)(v22 + 48) = 0u;
    *(_OWORD *)v22 = 0u;
    *(_OWORD *)(v22 + 16) = 0u;
    {
      v103 = operator new();
      *(_QWORD *)(v103 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v103 + 24) = "VectorKitLabels";
      *(_OWORD *)(v103 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v103 = &off_1E42B5668;
      *(_QWORD *)(v103 + 8) = "VectorKitLabels";
      *(_OWORD *)(v103 + 72) = 0u;
      *(_OWORD *)(v103 + 88) = 0u;
      *(_OWORD *)(v103 + 104) = 0u;
      *(_OWORD *)(v103 + 120) = 0u;
      *(_OWORD *)(v103 + 136) = 0u;
      *(_OWORD *)(v103 + 152) = 0u;
      *(_OWORD *)(v103 + 168) = 0u;
      *(_OWORD *)(v103 + 184) = 0u;
      *(_OWORD *)(v103 + 200) = 0u;
      *(_OWORD *)(v103 + 216) = 0u;
      *(_OWORD *)(v103 + 232) = 0u;
      *(_QWORD *)(v103 + 248) = 0;
      *(_OWORD *)(v103 + 56) = 0u;
      v104 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v103 + 56), 0);
      if ((_DWORD)v104)
        geo::read_write_lock::logFailure(v104, (uint64_t)"initialization", v105);
      v106 = malloc_create_zone(0, 0);
      *(_QWORD *)(v103 + 48) = v106;
      malloc_set_zone_name(v106, "VectorKitLabels");
      *(_QWORD *)(v103 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v103;
    }
    v24 = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v22 + 72) = 0;
    *(_QWORD *)(v22 + 64) = v24;
    *(_QWORD *)(v22 + 80) = 0;
    {
      v107 = operator new();
      *(_QWORD *)(v107 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v107 + 24) = "VectorKitLabels";
      *(_OWORD *)(v107 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v107 = &off_1E42B5668;
      *(_QWORD *)(v107 + 8) = "VectorKitLabels";
      *(_OWORD *)(v107 + 72) = 0u;
      *(_OWORD *)(v107 + 88) = 0u;
      *(_OWORD *)(v107 + 104) = 0u;
      *(_OWORD *)(v107 + 120) = 0u;
      *(_OWORD *)(v107 + 136) = 0u;
      *(_OWORD *)(v107 + 152) = 0u;
      *(_OWORD *)(v107 + 168) = 0u;
      *(_OWORD *)(v107 + 184) = 0u;
      *(_OWORD *)(v107 + 200) = 0u;
      *(_OWORD *)(v107 + 216) = 0u;
      *(_OWORD *)(v107 + 232) = 0u;
      *(_QWORD *)(v107 + 248) = 0;
      *(_OWORD *)(v107 + 56) = 0u;
      v108 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v107 + 56), 0);
      if ((_DWORD)v108)
        geo::read_write_lock::logFailure(v108, (uint64_t)"initialization", v109);
      v110 = malloc_create_zone(0, 0);
      *(_QWORD *)(v107 + 48) = v110;
      malloc_set_zone_name(v110, "VectorKitLabels");
      *(_QWORD *)(v107 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v107;
    }
    *(_QWORD *)(v22 + 88) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v22 + 96) = 0;
    {
      v111 = operator new();
      *(_QWORD *)(v111 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v111 + 24) = "VectorKitLabels";
      *(_OWORD *)(v111 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v111 = &off_1E42B5668;
      *(_QWORD *)(v111 + 8) = "VectorKitLabels";
      *(_OWORD *)(v111 + 72) = 0u;
      *(_OWORD *)(v111 + 88) = 0u;
      *(_OWORD *)(v111 + 104) = 0u;
      *(_OWORD *)(v111 + 120) = 0u;
      *(_OWORD *)(v111 + 136) = 0u;
      *(_OWORD *)(v111 + 152) = 0u;
      *(_OWORD *)(v111 + 168) = 0u;
      *(_OWORD *)(v111 + 184) = 0u;
      *(_OWORD *)(v111 + 200) = 0u;
      *(_OWORD *)(v111 + 216) = 0u;
      *(_OWORD *)(v111 + 232) = 0u;
      *(_QWORD *)(v111 + 248) = 0;
      *(_OWORD *)(v111 + 56) = 0u;
      v112 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v111 + 56), 0);
      if ((_DWORD)v112)
        geo::read_write_lock::logFailure(v112, (uint64_t)"initialization", v113);
      v114 = malloc_create_zone(0, 0);
      *(_QWORD *)(v111 + 48) = v114;
      malloc_set_zone_name(v114, "VectorKitLabels");
      *(_QWORD *)(v111 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v111;
    }
    *(_QWORD *)(v22 + 136) = 0;
    *(_QWORD *)(v22 + 104) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v22 + 112) = 0;
    *(_DWORD *)(v22 + 120) = 1065353216;
    {
      v115 = operator new();
      *(_QWORD *)(v115 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v115 + 24) = "VectorKitLabels";
      *(_OWORD *)(v115 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v115 = &off_1E42B5668;
      *(_QWORD *)(v115 + 8) = "VectorKitLabels";
      *(_OWORD *)(v115 + 72) = 0u;
      *(_OWORD *)(v115 + 88) = 0u;
      *(_OWORD *)(v115 + 104) = 0u;
      *(_OWORD *)(v115 + 120) = 0u;
      *(_OWORD *)(v115 + 136) = 0u;
      *(_OWORD *)(v115 + 152) = 0u;
      *(_OWORD *)(v115 + 168) = 0u;
      *(_OWORD *)(v115 + 184) = 0u;
      *(_OWORD *)(v115 + 200) = 0u;
      *(_OWORD *)(v115 + 216) = 0u;
      *(_OWORD *)(v115 + 232) = 0u;
      *(_QWORD *)(v115 + 248) = 0;
      *(_OWORD *)(v115 + 56) = 0u;
      v116 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v115 + 56), 0);
      if ((_DWORD)v116)
        geo::read_write_lock::logFailure(v116, (uint64_t)"initialization", v117);
      v118 = malloc_create_zone(0, 0);
      *(_QWORD *)(v115 + 48) = v118;
      malloc_set_zone_name(v118, "VectorKitLabels");
      *(_QWORD *)(v115 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v115;
    }
    v27 = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v22 + 168) = 0;
    *(_QWORD *)(v22 + 144) = v27;
    *(_QWORD *)(v22 + 152) = 0;
    *(_QWORD *)(v22 + 128) = v22 + 136;
    {
      v119 = operator new();
      *(_QWORD *)(v119 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v119 + 24) = "VectorKitLabels";
      *(_OWORD *)(v119 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v119 = &off_1E42B5668;
      *(_QWORD *)(v119 + 8) = "VectorKitLabels";
      *(_OWORD *)(v119 + 72) = 0u;
      *(_OWORD *)(v119 + 88) = 0u;
      *(_OWORD *)(v119 + 104) = 0u;
      *(_OWORD *)(v119 + 120) = 0u;
      *(_OWORD *)(v119 + 136) = 0u;
      *(_OWORD *)(v119 + 152) = 0u;
      *(_OWORD *)(v119 + 168) = 0u;
      *(_OWORD *)(v119 + 184) = 0u;
      *(_OWORD *)(v119 + 200) = 0u;
      *(_OWORD *)(v119 + 216) = 0u;
      *(_OWORD *)(v119 + 232) = 0u;
      *(_QWORD *)(v119 + 248) = 0;
      *(_OWORD *)(v119 + 56) = 0u;
      v120 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v119 + 56), 0);
      if ((_DWORD)v120)
        geo::read_write_lock::logFailure(v120, (uint64_t)"initialization", v121);
      v122 = malloc_create_zone(0, 0);
      *(_QWORD *)(v119 + 48) = v122;
      malloc_set_zone_name(v122, "VectorKitLabels");
      *(_QWORD *)(v119 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v119;
    }
    *(_QWORD *)(v22 + 192) = 0;
    *(_QWORD *)(v22 + 176) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v22 + 184) = 0;
    *(_QWORD *)(v22 + 160) = v22 + 168;
    *(_QWORD *)(v22 + 200) = 0;
    {
      v123 = operator new();
      *(_QWORD *)(v123 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v123 + 24) = "VectorKitLabels";
      *(_OWORD *)(v123 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v123 = &off_1E42B5668;
      *(_QWORD *)(v123 + 8) = "VectorKitLabels";
      *(_OWORD *)(v123 + 72) = 0u;
      *(_OWORD *)(v123 + 88) = 0u;
      *(_OWORD *)(v123 + 104) = 0u;
      *(_OWORD *)(v123 + 120) = 0u;
      *(_OWORD *)(v123 + 136) = 0u;
      *(_OWORD *)(v123 + 152) = 0u;
      *(_OWORD *)(v123 + 168) = 0u;
      *(_OWORD *)(v123 + 184) = 0u;
      *(_OWORD *)(v123 + 200) = 0u;
      *(_OWORD *)(v123 + 216) = 0u;
      *(_OWORD *)(v123 + 232) = 0u;
      *(_QWORD *)(v123 + 248) = 0;
      *(_OWORD *)(v123 + 56) = 0u;
      v124 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v123 + 56), 0);
      if ((_DWORD)v124)
        geo::read_write_lock::logFailure(v124, (uint64_t)"initialization", v125);
      v126 = malloc_create_zone(0, 0);
      *(_QWORD *)(v123 + 48) = v126;
      malloc_set_zone_name(v126, "VectorKitLabels");
      *(_QWORD *)(v123 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v123;
    }
    *(_QWORD *)(v22 + 208) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v22 + 216) = 0;
    {
      v127 = operator new();
      *(_QWORD *)(v127 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v127 + 24) = "VectorKitLabels";
      *(_OWORD *)(v127 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v127 = &off_1E42B5668;
      *(_QWORD *)(v127 + 8) = "VectorKitLabels";
      *(_OWORD *)(v127 + 72) = 0u;
      *(_OWORD *)(v127 + 88) = 0u;
      *(_OWORD *)(v127 + 104) = 0u;
      *(_OWORD *)(v127 + 120) = 0u;
      *(_OWORD *)(v127 + 136) = 0u;
      *(_OWORD *)(v127 + 152) = 0u;
      *(_OWORD *)(v127 + 168) = 0u;
      *(_OWORD *)(v127 + 184) = 0u;
      *(_OWORD *)(v127 + 200) = 0u;
      *(_OWORD *)(v127 + 216) = 0u;
      *(_OWORD *)(v127 + 232) = 0u;
      *(_QWORD *)(v127 + 248) = 0;
      *(_OWORD *)(v127 + 56) = 0u;
      v128 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v127 + 56), 0);
      if ((_DWORD)v128)
        geo::read_write_lock::logFailure(v128, (uint64_t)"initialization", v129);
      v130 = malloc_create_zone(0, 0);
      *(_QWORD *)(v127 + 48) = v130;
      malloc_set_zone_name(v130, "VectorKitLabels");
      *(_QWORD *)(v127 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v127;
    }
    v30 = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v22 + 248) = 0;
    *(_QWORD *)(v22 + 224) = v30;
    *(_QWORD *)(v22 + 232) = 0;
    *(_DWORD *)(v22 + 240) = 1065353216;
    *(_QWORD *)(v22 + 256) = 0;
    {
      v131 = operator new();
      *(_QWORD *)(v131 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v131 + 24) = "VectorKitLabels";
      *(_OWORD *)(v131 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v131 = &off_1E42B5668;
      *(_QWORD *)(v131 + 8) = "VectorKitLabels";
      *(_OWORD *)(v131 + 72) = 0u;
      *(_OWORD *)(v131 + 88) = 0u;
      *(_OWORD *)(v131 + 104) = 0u;
      *(_OWORD *)(v131 + 120) = 0u;
      *(_OWORD *)(v131 + 136) = 0u;
      *(_OWORD *)(v131 + 152) = 0u;
      *(_OWORD *)(v131 + 168) = 0u;
      *(_OWORD *)(v131 + 184) = 0u;
      *(_OWORD *)(v131 + 200) = 0u;
      *(_OWORD *)(v131 + 216) = 0u;
      *(_OWORD *)(v131 + 232) = 0u;
      *(_QWORD *)(v131 + 248) = 0;
      *(_OWORD *)(v131 + 56) = 0u;
      v132 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v131 + 56), 0);
      if ((_DWORD)v132)
        geo::read_write_lock::logFailure(v132, (uint64_t)"initialization", v133);
      v134 = malloc_create_zone(0, 0);
      *(_QWORD *)(v131 + 48) = v134;
      malloc_set_zone_name(v134, "VectorKitLabels");
      *(_QWORD *)(v131 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v131;
    }
    *(_QWORD *)(v22 + 264) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v22 + 272) = 0;
    {
      v135 = operator new();
      *(_QWORD *)(v135 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v135 + 24) = "VectorKitLabels";
      *(_OWORD *)(v135 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v135 = &off_1E42B5668;
      *(_QWORD *)(v135 + 8) = "VectorKitLabels";
      *(_OWORD *)(v135 + 72) = 0u;
      *(_OWORD *)(v135 + 88) = 0u;
      *(_OWORD *)(v135 + 104) = 0u;
      *(_OWORD *)(v135 + 120) = 0u;
      *(_OWORD *)(v135 + 136) = 0u;
      *(_OWORD *)(v135 + 152) = 0u;
      *(_OWORD *)(v135 + 168) = 0u;
      *(_OWORD *)(v135 + 184) = 0u;
      *(_OWORD *)(v135 + 200) = 0u;
      *(_OWORD *)(v135 + 216) = 0u;
      *(_OWORD *)(v135 + 232) = 0u;
      *(_QWORD *)(v135 + 248) = 0;
      *(_OWORD *)(v135 + 56) = 0u;
      v136 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v135 + 56), 0);
      if ((_DWORD)v136)
        geo::read_write_lock::logFailure(v136, (uint64_t)"initialization", v137);
      v138 = malloc_create_zone(0, 0);
      *(_QWORD *)(v135 + 48) = v138;
      malloc_set_zone_name(v138, "VectorKitLabels");
      *(_QWORD *)(v135 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v135;
    }
    *(_QWORD *)(v22 + 280) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v22 + 288) = 0;
    *(_DWORD *)(v22 + 296) = 1065353216;
    *(_QWORD *)(v22 + 304) = 850045863;
    *(_OWORD *)(v22 + 312) = 0u;
    *(_OWORD *)(v22 + 328) = 0u;
    *(_OWORD *)(v22 + 344) = 0u;
    *(_QWORD *)(v22 + 360) = 0;
    *(_QWORD *)(v22 + 368) = 850045863;
    *(_OWORD *)(v22 + 376) = 0u;
    *(_OWORD *)(v22 + 392) = 0u;
    *(_OWORD *)(v22 + 408) = 0u;
    *(_OWORD *)(v22 + 418) = 0u;
    *(_BYTE *)(v22 + 432) = v175[23] != 0;
    v32 = operator new(0x60uLL);
    v32[1] = 0;
    v32[2] = 0;
    *v32 = &off_1E42DBFD0;
    v32[3] = 850045863;
    *((_OWORD *)v32 + 2) = 0u;
    *((_OWORD *)v32 + 3) = 0u;
    *((_OWORD *)v32 + 4) = 0u;
    v32[10] = 0;
    v32[11] = v22;
    v33 = *(std::__shared_weak_count **)(v22 + 24);
    *(_QWORD *)(v22 + 16) = v32 + 3;
    *(_QWORD *)(v22 + 24) = v32;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(p_shared_owners);
      while (__stlxr(v35 - 1, p_shared_owners));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    *(_QWORD *)(v7 + 400) = v22;
    v36 = (std::__shared_weak_count *)operator new();
    v36->__shared_owners_ = 0;
    v37 = (unint64_t *)&v36->__shared_owners_;
    v36->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E7288;
    v36->__shared_weak_owners_ = 0;
    v36[1].__vftable = (std::__shared_weak_count_vtbl *)v22;
    *(_QWORD *)(v7 + 408) = v36;
    v38 = *(std::__shared_weak_count **)(v22 + 8);
    if (v38)
    {
      if (v38->__shared_owners_ != -1)
      {
LABEL_40:
        v46 = (md::LabelExternalMeshModerator *)operator new();
        md::LabelExternalMeshModerator::LabelExternalMeshModerator(v46, (md::LabelManager *)v175);
        *(_QWORD *)(v7 + 416) = v47;
        v48 = operator new();
        *(_QWORD *)v48 = &off_1E429CE50;
        *(_QWORD *)(v48 + 8) = v175;
        v49 = operator new(0x70uLL);
        v49[1] = 0;
        v49[2] = 0;
        *v49 = &off_1E42DD8C0;
        *(_QWORD *)(v48 + 16) = md::RouteAnnotationDedupingGroup::RouteAnnotationDedupingGroup((uint64_t)(v49 + 3), 0);
        *(_QWORD *)(v48 + 24) = v49;
        *(_OWORD *)(v48 + 32) = 0u;
        *(_OWORD *)(v48 + 48) = 0u;
        {
          v139 = operator new();
          *(_QWORD *)(v139 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v139 + 24) = "VectorKitLabels";
          *(_OWORD *)(v139 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v139 = &off_1E42B5668;
          *(_QWORD *)(v139 + 8) = "VectorKitLabels";
          *(_OWORD *)(v139 + 72) = 0u;
          *(_OWORD *)(v139 + 88) = 0u;
          *(_OWORD *)(v139 + 104) = 0u;
          *(_OWORD *)(v139 + 120) = 0u;
          *(_OWORD *)(v139 + 136) = 0u;
          *(_OWORD *)(v139 + 152) = 0u;
          *(_OWORD *)(v139 + 168) = 0u;
          *(_OWORD *)(v139 + 184) = 0u;
          *(_OWORD *)(v139 + 200) = 0u;
          *(_OWORD *)(v139 + 216) = 0u;
          *(_OWORD *)(v139 + 232) = 0u;
          *(_QWORD *)(v139 + 248) = 0;
          *(_OWORD *)(v139 + 56) = 0u;
          v140 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v139 + 56), 0);
          if ((_DWORD)v140)
            geo::read_write_lock::logFailure(v140, (uint64_t)"initialization", v141);
          v142 = malloc_create_zone(0, 0);
          *(_QWORD *)(v139 + 48) = v142;
          malloc_set_zone_name(v142, "VectorKitLabels");
          *(_QWORD *)(v139 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v139;
        }
        *(_QWORD *)(v48 + 64) = mdm::Allocator::instance(void)::alloc;
        *(_QWORD *)(v48 + 72) = 0;
        *(_QWORD *)(v48 + 80) = 0;
        *(_QWORD *)(v48 + 88) = 0;
        {
          v143 = operator new();
          *(_QWORD *)(v143 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v143 + 24) = "VectorKitLabels";
          *(_OWORD *)(v143 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v143 = &off_1E42B5668;
          *(_QWORD *)(v143 + 8) = "VectorKitLabels";
          *(_OWORD *)(v143 + 72) = 0u;
          *(_OWORD *)(v143 + 88) = 0u;
          *(_OWORD *)(v143 + 104) = 0u;
          *(_OWORD *)(v143 + 120) = 0u;
          *(_OWORD *)(v143 + 136) = 0u;
          *(_OWORD *)(v143 + 152) = 0u;
          *(_OWORD *)(v143 + 168) = 0u;
          *(_OWORD *)(v143 + 184) = 0u;
          *(_OWORD *)(v143 + 200) = 0u;
          *(_OWORD *)(v143 + 216) = 0u;
          *(_OWORD *)(v143 + 232) = 0u;
          *(_QWORD *)(v143 + 248) = 0;
          *(_OWORD *)(v143 + 56) = 0u;
          v144 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v143 + 56), 0);
          if ((_DWORD)v144)
            geo::read_write_lock::logFailure(v144, (uint64_t)"initialization", v145);
          v146 = malloc_create_zone(0, 0);
          *(_QWORD *)(v143 + 48) = v146;
          malloc_set_zone_name(v146, "VectorKitLabels");
          *(_QWORD *)(v143 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v143;
        }
        *(_QWORD *)(v48 + 96) = mdm::Allocator::instance(void)::alloc;
        *(_QWORD *)(v48 + 104) = 0;
        *(_QWORD *)(v48 + 112) = 0;
        *(_QWORD *)(v48 + 120) = 0;
        {
          v147 = operator new();
          *(_QWORD *)(v147 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v147 + 24) = "VectorKitLabels";
          *(_OWORD *)(v147 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v147 = &off_1E42B5668;
          *(_QWORD *)(v147 + 8) = "VectorKitLabels";
          *(_OWORD *)(v147 + 72) = 0u;
          *(_OWORD *)(v147 + 88) = 0u;
          *(_OWORD *)(v147 + 104) = 0u;
          *(_OWORD *)(v147 + 120) = 0u;
          *(_OWORD *)(v147 + 136) = 0u;
          *(_OWORD *)(v147 + 152) = 0u;
          *(_OWORD *)(v147 + 168) = 0u;
          *(_OWORD *)(v147 + 184) = 0u;
          *(_OWORD *)(v147 + 200) = 0u;
          *(_OWORD *)(v147 + 216) = 0u;
          *(_OWORD *)(v147 + 232) = 0u;
          *(_QWORD *)(v147 + 248) = 0;
          *(_OWORD *)(v147 + 56) = 0u;
          v148 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v147 + 56), 0);
          if ((_DWORD)v148)
            geo::read_write_lock::logFailure(v148, (uint64_t)"initialization", v149);
          v150 = malloc_create_zone(0, 0);
          *(_QWORD *)(v147 + 48) = v150;
          malloc_set_zone_name(v150, "VectorKitLabels");
          *(_QWORD *)(v147 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v147;
        }
        *(_QWORD *)(v48 + 128) = mdm::Allocator::instance(void)::alloc;
        *(_QWORD *)(v48 + 136) = 0xBF80000000000000;
        *(_QWORD *)(v48 + 144) = 0xBF80000000000000;
        *(_BYTE *)(v48 + 152) = 0;
        *(_QWORD *)(v48 + 160) = &off_1E42B53B0;
        *(_QWORD *)(v48 + 168) = 0;
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 8) + 168) + 48) = v48;
        *(_QWORD *)(v7 + 424) = v48;
        v53 = operator new();
        *(_QWORD *)v53 = 850045863;
        *(_OWORD *)(v53 + 8) = 0u;
        *(_OWORD *)(v53 + 24) = 0u;
        *(_OWORD *)(v53 + 40) = 0u;
        *(_OWORD *)(v53 + 56) = 0u;
        *(_OWORD *)(v53 + 72) = 0u;
        v55 = (md::MapNavLabeler **)(v5 + 56);
        {
          v151 = operator new();
          *(_QWORD *)(v151 + 16) = 0x5ED09DD50000000FLL;
          *(_QWORD *)(v151 + 24) = "VectorKitLabels";
          *(_OWORD *)(v151 + 32) = xmmword_19FFB2E80;
          *(_QWORD *)v151 = &off_1E42B5668;
          *(_QWORD *)(v151 + 8) = "VectorKitLabels";
          *(_OWORD *)(v151 + 72) = 0u;
          *(_OWORD *)(v151 + 88) = 0u;
          *(_OWORD *)(v151 + 104) = 0u;
          *(_OWORD *)(v151 + 120) = 0u;
          *(_OWORD *)(v151 + 136) = 0u;
          *(_OWORD *)(v151 + 152) = 0u;
          *(_OWORD *)(v151 + 168) = 0u;
          *(_OWORD *)(v151 + 184) = 0u;
          *(_OWORD *)(v151 + 200) = 0u;
          *(_OWORD *)(v151 + 216) = 0u;
          *(_OWORD *)(v151 + 232) = 0u;
          *(_QWORD *)(v151 + 248) = 0;
          *(_OWORD *)(v151 + 56) = 0u;
          v152 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v151 + 56), 0);
          if ((_DWORD)v152)
            geo::read_write_lock::logFailure(v152, (uint64_t)"initialization", v153);
          v154 = malloc_create_zone(0, 0);
          *(_QWORD *)(v151 + 48) = v154;
          malloc_set_zone_name(v154, "VectorKitLabels");
          *(_QWORD *)(v151 + 256) = os_log_create("com.apple.VectorKit", "Memory");
          mdm::Allocator::instance(void)::alloc = v151;
          v55 = (md::MapNavLabeler **)(v5 + 56);
        }
        *(_QWORD *)(v53 + 88) = mdm::Allocator::instance(void)::alloc;
        *(_QWORD *)(v7 + 432) = v53;
        *(_QWORD *)(v7 + 440) = 0;
        *(_DWORD *)(v7 + 448) = 0;
        *(_BYTE *)(v7 + 452) = 0;
        v56 = *(_QWORD *)(v5 + 64);
        *(_QWORD *)(v5 + 64) = v7;
        if (v56)
          (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
        v57 = (md::MapNavLabeler *)operator new();
        md::MapNavLabeler::MapNavLabeler(v57, *(md::LabelManager **)(v5 + 48));
        v58 = *v55;
        *v55 = v57;
        if (v58)
        {
          (*(void (**)(md::MapNavLabeler *))(*(_QWORD *)v58 + 8))(v58);
          v57 = *v55;
        }
        md::CompositeLabeler::addLabeler(v5, v57);
        result = md::CompositeLabeler::addLabeler(v5, *(md::Labeler **)(v5 + 64));
        v4 = this;
        goto LABEL_49;
      }
      do
        v39 = __ldxr(v37);
      while (__stxr(v39 + 1, v37));
      p_shared_weak_owners = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v41 = __ldxr(p_shared_weak_owners);
      while (__stxr(v41 + 1, p_shared_weak_owners));
      *(_QWORD *)v22 = v22;
      *(_QWORD *)(v22 + 8) = v36;
      std::__shared_weak_count::__release_weak(v38);
    }
    else
    {
      do
        v42 = __ldxr(v37);
      while (__stxr(v42 + 1, v37));
      v43 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
      *(_QWORD *)v22 = v22;
      *(_QWORD *)(v22 + 8) = v36;
    }
    do
      v45 = __ldaxr(v37);
    while (__stlxr(v45 - 1, v37));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
    goto LABEL_40;
  }
  if (a2 == 2)
  {
    v5 = operator new();
    *(_QWORD *)v5 = &off_1E4291880;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    {
      v155 = operator new();
      *(_QWORD *)(v155 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v155 + 24) = "VectorKitLabels";
      *(_OWORD *)(v155 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v155 = &off_1E42B5668;
      *(_QWORD *)(v155 + 8) = "VectorKitLabels";
      *(_OWORD *)(v155 + 72) = 0u;
      *(_OWORD *)(v155 + 88) = 0u;
      *(_OWORD *)(v155 + 104) = 0u;
      *(_OWORD *)(v155 + 120) = 0u;
      *(_OWORD *)(v155 + 136) = 0u;
      *(_OWORD *)(v155 + 152) = 0u;
      *(_OWORD *)(v155 + 168) = 0u;
      *(_OWORD *)(v155 + 184) = 0u;
      *(_OWORD *)(v155 + 200) = 0u;
      *(_OWORD *)(v155 + 216) = 0u;
      *(_OWORD *)(v155 + 232) = 0u;
      *(_QWORD *)(v155 + 248) = 0;
      *(_OWORD *)(v155 + 56) = 0u;
      v156 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v155 + 56), 0);
      if ((_DWORD)v156)
        geo::read_write_lock::logFailure(v156, (uint64_t)"initialization", v157);
      v158 = malloc_create_zone(0, 0);
      *(_QWORD *)(v155 + 48) = v158;
      malloc_set_zone_name(v158, "VectorKitLabels");
      *(_QWORD *)(v155 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v155;
    }
    *(_QWORD *)(v5 + 32) = mdm::Allocator::instance(void)::alloc;
    *(_BYTE *)(v5 + 40) = -1;
    *(_QWORD *)v5 = &off_1E428CF30;
    *(_QWORD *)(v5 + 48) = a3;
    *(_QWORD *)(v5 + 56) = 0;
    *(_QWORD *)(v5 + 64) = 0;
    *(_DWORD *)(v5 + 72) = 0;
    v61 = operator new();
    md::StandardLabeler::StandardLabeler((md::StandardLabeler *)v61, *(md::LabelManager **)(v5 + 48));
    *(_QWORD *)v61 = &off_1E4299528;
    *(_QWORD *)(v61 + 8) = &unk_1E4299708;
    *(_QWORD *)(v61 + 16) = &unk_1E4299750;
    *(_OWORD *)(v61 + 392) = 0u;
    *(_OWORD *)(v61 + 408) = 0u;
    *(_OWORD *)(v61 + 424) = 0u;
    *(_DWORD *)(v61 + 439) = 0;
    v62 = *(_QWORD *)(v5 + 56);
    *(_QWORD *)(v5 + 56) = v61;
    if (v62)
      (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
    v63 = operator new();
    v64 = *(_QWORD *)(v5 + 48);
    *(_QWORD *)v63 = &off_1E4291F28;
    *(_QWORD *)(v63 + 8) = v64;
    *(_QWORD *)(v63 + 16) = *(_QWORD *)(v64 + 320);
    v65 = (_QWORD *)operator new();
    *v65 = *(_QWORD *)(v63 + 8);
    *(_QWORD *)(v63 + 24) = v65;
    v66 = operator new();
    *(_QWORD *)v66 = *(_QWORD *)(v63 + 8);
    *(_QWORD *)(v66 + 16) = 0;
    {
      v159 = v4;
      v160 = operator new();
      *(_QWORD *)(v160 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v160 + 24) = "VectorKitLabels";
      *(_OWORD *)(v160 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v160 = &off_1E42B5668;
      *(_QWORD *)(v160 + 8) = "VectorKitLabels";
      *(_OWORD *)(v160 + 72) = 0u;
      *(_OWORD *)(v160 + 88) = 0u;
      *(_OWORD *)(v160 + 104) = 0u;
      *(_OWORD *)(v160 + 120) = 0u;
      *(_OWORD *)(v160 + 136) = 0u;
      *(_OWORD *)(v160 + 152) = 0u;
      *(_OWORD *)(v160 + 168) = 0u;
      *(_OWORD *)(v160 + 184) = 0u;
      *(_OWORD *)(v160 + 200) = 0u;
      *(_OWORD *)(v160 + 216) = 0u;
      *(_OWORD *)(v160 + 232) = 0u;
      *(_QWORD *)(v160 + 248) = 0;
      *(_OWORD *)(v160 + 56) = 0u;
      v161 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v160 + 56), 0);
      if ((_DWORD)v161)
        geo::read_write_lock::logFailure(v161, (uint64_t)"initialization", v162);
      v163 = malloc_create_zone(0, 0);
      *(_QWORD *)(v160 + 48) = v163;
      malloc_set_zone_name(v163, "VectorKitLabels");
      *(_QWORD *)(v160 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v160;
      v4 = v159;
    }
    *(_QWORD *)(v66 + 24) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v66 + 32) = 0;
    *(_QWORD *)(v66 + 8) = v66 + 16;
    *(_QWORD *)(v66 + 40) = 0;
    *(_QWORD *)(v66 + 48) = 0;
    {
      v164 = v4;
      v165 = operator new();
      *(_QWORD *)(v165 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v165 + 24) = "VectorKitLabels";
      *(_OWORD *)(v165 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v165 = &off_1E42B5668;
      *(_QWORD *)(v165 + 8) = "VectorKitLabels";
      *(_OWORD *)(v165 + 72) = 0u;
      *(_OWORD *)(v165 + 88) = 0u;
      *(_OWORD *)(v165 + 104) = 0u;
      *(_OWORD *)(v165 + 120) = 0u;
      *(_OWORD *)(v165 + 136) = 0u;
      *(_OWORD *)(v165 + 152) = 0u;
      *(_OWORD *)(v165 + 168) = 0u;
      *(_OWORD *)(v165 + 184) = 0u;
      *(_OWORD *)(v165 + 200) = 0u;
      *(_OWORD *)(v165 + 216) = 0u;
      *(_OWORD *)(v165 + 232) = 0u;
      *(_QWORD *)(v165 + 248) = 0;
      *(_OWORD *)(v165 + 56) = 0u;
      v166 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v165 + 56), 0);
      if ((_DWORD)v166)
        geo::read_write_lock::logFailure(v166, (uint64_t)"initialization", v167);
      v168 = malloc_create_zone(0, 0);
      *(_QWORD *)(v165 + 48) = v168;
      malloc_set_zone_name(v168, "VectorKitLabels");
      *(_QWORD *)(v165 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v165;
      v4 = v164;
    }
    *(_QWORD *)(v66 + 56) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v66 + 64) = 0;
    {
      v169 = v4;
      v170 = operator new();
      *(_QWORD *)(v170 + 16) = 0x5ED09DD50000000FLL;
      *(_QWORD *)(v170 + 24) = "VectorKitLabels";
      *(_OWORD *)(v170 + 32) = xmmword_19FFB2E80;
      *(_QWORD *)v170 = &off_1E42B5668;
      *(_QWORD *)(v170 + 8) = "VectorKitLabels";
      *(_OWORD *)(v170 + 72) = 0u;
      *(_OWORD *)(v170 + 88) = 0u;
      *(_OWORD *)(v170 + 104) = 0u;
      *(_OWORD *)(v170 + 120) = 0u;
      *(_OWORD *)(v170 + 136) = 0u;
      *(_OWORD *)(v170 + 152) = 0u;
      *(_OWORD *)(v170 + 168) = 0u;
      *(_OWORD *)(v170 + 184) = 0u;
      *(_OWORD *)(v170 + 200) = 0u;
      *(_OWORD *)(v170 + 216) = 0u;
      *(_OWORD *)(v170 + 232) = 0u;
      *(_QWORD *)(v170 + 248) = 0;
      *(_OWORD *)(v170 + 56) = 0u;
      v171 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v170 + 56), 0);
      if ((_DWORD)v171)
        geo::read_write_lock::logFailure(v171, (uint64_t)"initialization", v172);
      v173 = malloc_create_zone(0, 0);
      *(_QWORD *)(v170 + 48) = v173;
      malloc_set_zone_name(v173, "VectorKitLabels");
      *(_QWORD *)(v170 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      mdm::Allocator::instance(void)::alloc = v170;
      v4 = v169;
    }
    *(_QWORD *)(v66 + 72) = mdm::Allocator::instance(void)::alloc;
    *(_QWORD *)(v66 + 80) = 0;
    *(_DWORD *)(v66 + 88) = 1065353216;
    *(_BYTE *)(v66 + 96) = 0;
    *(_QWORD *)(v63 + 32) = v66;
    *(_QWORD *)(v63 + 40) = 0;
    *(_WORD *)(v63 + 48) = 3;
    *(_QWORD *)(v63 + 56) = 0;
    *(_QWORD *)(v63 + 64) = 0;
    *(_DWORD *)(v63 + 72) = 16842752;
    *(_QWORD *)(v63 + 184) = 0;
    *(_QWORD *)(v63 + 176) = 0;
    *(_OWORD *)(v63 + 76) = 0u;
    *(_OWORD *)(v63 + 92) = 0u;
    *(_OWORD *)(v63 + 108) = 0u;
    *(_OWORD *)(v63 + 124) = 0u;
    *(_OWORD *)(v63 + 140) = 0u;
    *(_OWORD *)(v63 + 152) = 0u;
    *(_QWORD *)(v63 + 168) = v63 + 176;
    *(_OWORD *)(v63 + 192) = 0u;
    *(_OWORD *)(v63 + 208) = 0u;
    *(_OWORD *)(v63 + 224) = 0u;
    *(_OWORD *)(v63 + 240) = 0u;
    *(_OWORD *)(v63 + 256) = 0u;
    *(_DWORD *)(v63 + 272) = 1065353216;
    *(_QWORD *)(v63 + 280) = 0;
    *(_WORD *)(v63 + 288) = 0;
    v70 = *(_QWORD *)(v5 + 64);
    *(_QWORD *)(v5 + 64) = v63;
    if (v70)
      (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
    md::CompositeLabeler::addLabeler(v5, *(md::Labeler **)(v5 + 56));
    result = md::CompositeLabeler::addLabeler(v5, *(md::Labeler **)(v5 + 64));
    *(_BYTE *)(*(_QWORD *)(v5 + 48) + 3572) = *(_BYTE *)(v5 + 73);
  }
  else
  {
    v5 = operator new();
    result = (uint64_t)md::ARWalkingLabeler::ARWalkingLabeler((md::ARWalkingLabeler *)v5, a3);
  }
LABEL_49:
  *(_QWORD *)v4 = v5;
  return result;
}

void sub_19F33F1BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10E1C40BDB5E51DLL);
  _Unwind_Resume(a1);
}

md::PostchainRenderLayer *md::PostchainRenderLayer::PostchainRenderLayer(md::PostchainRenderLayer *this, md::CartographicRenderer *a2, VKSharedResources *a3)
{
  VKSharedResources *v5;
  VKSharedResources *v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  _WORD *v26;
  _QWORD *v27;
  uint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  id v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  char *v102;
  unsigned __int8 v103;
  __int128 v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  __int128 v108;
  unint64_t *v109;
  unint64_t v110;
  int8x16_t v111;
  int16x8_t v112;
  int32x4_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int16x8_t v116;
  int32x4_t v117;
  int8x16_t v118;
  int32x4_t v119;
  int8x16_t v120;
  int32x4_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int16x8_t v131;
  int32x4_t v132;
  int8x16_t v133;
  int16x8_t v134;
  int32x4_t v135;
  int8x16_t v136;
  int32x4_t v137;
  int8x16_t v138;
  int32x4_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int16x8_t v154;
  int32x4_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int16x8_t v158;
  int32x4_t v159;
  int8x16_t v160;
  int16x8_t v161;
  int32x4_t v162;
  int8x16_t v163;
  int16x8_t v164;
  int32x4_t v165;
  int8x16_t v166;
  int32x4_t v167;
  int8x16_t v168;
  int32x4_t v169;
  int8x16_t v170;
  int32x4_t v171;
  int8x16_t v172;
  int32x4_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  int8x16_t v178;
  int8x16_t v179;
  int8x16_t v180;
  int8x16_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  _QWORD *v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t *v216;
  unint64_t v217;
  char *v218;
  unsigned __int8 v219;
  __int128 v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  int8x16_t v226;
  int16x8_t v227;
  int32x4_t v228;
  int8x16_t v229;
  int8x16_t v230;
  int16x8_t v231;
  int32x4_t v232;
  int8x16_t v233;
  int32x4_t v234;
  int8x16_t v235;
  int32x4_t v236;
  int8x16_t v237;
  int8x16_t v238;
  int8x16_t v239;
  int8x16_t v240;
  int8x16_t v241;
  int8x16_t v242;
  int8x16_t v243;
  int8x16_t v244;
  int8x16_t v245;
  int16x8_t v246;
  int32x4_t v247;
  int8x16_t v248;
  int16x8_t v249;
  int32x4_t v250;
  int8x16_t v251;
  int32x4_t v252;
  int8x16_t v253;
  int32x4_t v254;
  int8x16_t v255;
  int8x16_t v256;
  int8x16_t v257;
  int8x16_t v258;
  int8x16_t v259;
  int8x16_t v260;
  int8x16_t v261;
  int8x16_t v262;
  int8x16_t v263;
  int8x16_t v264;
  int8x16_t v265;
  int8x16_t v266;
  int8x16_t v267;
  int8x16_t v268;
  int16x8_t v269;
  int32x4_t v270;
  int16x8_t v271;
  int32x4_t v272;
  int32x4_t v273;
  int32x4_t v274;
  int8x16_t v275;
  int8x16_t v276;
  int8x16_t v277;
  int16x8_t v278;
  int32x4_t v279;
  int16x8_t v280;
  int32x4_t v281;
  int8x16_t v282;
  int8x16_t v283;
  int8x16_t v284;
  int32x4_t v285;
  int8x16_t v286;
  int8x16_t v287;
  int8x16_t v288;
  int32x4_t v289;
  int8x16_t v290;
  int8x16_t v291;
  int8x16_t v292;
  int8x16_t v293;
  int8x16_t v294;
  int8x16_t v295;
  int8x16_t v296;
  int8x16_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  unint64_t *v301;
  unint64_t v302;
  _QWORD *v303;
  _QWORD *v304;
  _QWORD *v305;
  uint64_t v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  unint64_t *v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  uint64_t v315;
  _QWORD *v316;
  uint64_t v317;
  _QWORD *v318;
  uint64_t v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  _QWORD *v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t *v332;
  unint64_t v333;
  char *v334;
  unsigned __int8 v335;
  __int128 v336;
  unint64_t *v337;
  unint64_t v338;
  unint64_t v339;
  __int128 v340;
  unint64_t *v341;
  unint64_t v342;
  int8x16_t v343;
  int16x8_t v344;
  int32x4_t v345;
  int8x16_t v346;
  int8x16_t v347;
  int16x8_t v348;
  int32x4_t v349;
  int8x16_t v350;
  int32x4_t v351;
  int8x16_t v352;
  int32x4_t v353;
  int8x16_t v354;
  int8x16_t v355;
  int8x16_t v356;
  int8x16_t v357;
  int8x16_t v358;
  int8x16_t v359;
  int8x16_t v360;
  int8x16_t v361;
  int8x16_t v362;
  int16x8_t v363;
  int32x4_t v364;
  int8x16_t v365;
  int16x8_t v366;
  int32x4_t v367;
  int8x16_t v368;
  int32x4_t v369;
  int8x16_t v370;
  int32x4_t v371;
  int8x16_t v372;
  int8x16_t v373;
  int8x16_t v374;
  int8x16_t v375;
  int8x16_t v376;
  int8x16_t v377;
  int8x16_t v378;
  int8x16_t v379;
  int8x16_t v380;
  int8x16_t v381;
  int8x16_t v382;
  int8x16_t v383;
  int8x16_t v384;
  int8x16_t v385;
  int16x8_t v386;
  int32x4_t v387;
  int16x8_t v388;
  int32x4_t v389;
  int32x4_t v390;
  int32x4_t v391;
  int8x16_t v392;
  int8x16_t v393;
  int8x16_t v394;
  int16x8_t v395;
  int32x4_t v396;
  int16x8_t v397;
  int32x4_t v398;
  int8x16_t v399;
  int8x16_t v400;
  int8x16_t v401;
  int32x4_t v402;
  int8x16_t v403;
  int8x16_t v404;
  int8x16_t v405;
  int32x4_t v406;
  int8x16_t v407;
  int8x16_t v408;
  int8x16_t v409;
  int8x16_t v410;
  int8x16_t v411;
  int8x16_t v412;
  int8x16_t v413;
  int8x16_t v414;
  std::__shared_weak_count *v415;
  unint64_t *v416;
  unint64_t v417;
  unint64_t *v418;
  unint64_t v419;
  _QWORD *v420;
  _QWORD *v421;
  _QWORD *v422;
  uint64_t v423;
  std::__shared_weak_count *v424;
  unint64_t *v425;
  unint64_t v426;
  unint64_t *v427;
  unint64_t v428;
  std::__shared_weak_count *v429;
  unint64_t *v430;
  unint64_t v431;
  _QWORD *v432;
  std::__shared_weak_count *v433;
  unint64_t *v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  unint64_t *v439;
  unint64_t v440;
  char *v441;
  unsigned __int8 v442;
  __int128 v443;
  unint64_t *v444;
  unint64_t v445;
  unint64_t v446;
  unint64_t *v447;
  unint64_t v448;
  int8x16_t v449;
  int16x8_t v450;
  int32x4_t v451;
  int8x16_t v452;
  int8x16_t v453;
  int16x8_t v454;
  int32x4_t v455;
  int8x16_t v456;
  int32x4_t v457;
  int8x16_t v458;
  int32x4_t v459;
  int8x16_t v460;
  int8x16_t v461;
  int8x16_t v462;
  int8x16_t v463;
  int8x16_t v464;
  int8x16_t v465;
  int8x16_t v466;
  int8x16_t v467;
  int8x16_t v468;
  int16x8_t v469;
  int32x4_t v470;
  int8x16_t v471;
  int16x8_t v472;
  int32x4_t v473;
  int8x16_t v474;
  int32x4_t v475;
  int8x16_t v476;
  int32x4_t v477;
  int8x16_t v478;
  int8x16_t v479;
  int8x16_t v480;
  int8x16_t v481;
  int8x16_t v482;
  int8x16_t v483;
  int8x16_t v484;
  int8x16_t v485;
  int8x16_t v486;
  int8x16_t v487;
  int8x16_t v488;
  int8x16_t v489;
  int8x16_t v490;
  int8x16_t v491;
  int16x8_t v492;
  int32x4_t v493;
  int16x8_t v494;
  int32x4_t v495;
  int32x4_t v496;
  int32x4_t v497;
  int8x16_t v498;
  int8x16_t v499;
  int8x16_t v500;
  int16x8_t v501;
  int32x4_t v502;
  int16x8_t v503;
  int32x4_t v504;
  int8x16_t v505;
  int8x16_t v506;
  int8x16_t v507;
  int32x4_t v508;
  int8x16_t v509;
  int8x16_t v510;
  int8x16_t v511;
  int32x4_t v512;
  int8x16_t v513;
  int8x16_t v514;
  int8x16_t v515;
  int8x16_t v516;
  int8x16_t v517;
  int8x16_t v518;
  int8x16_t v519;
  int8x16_t v520;
  std::__shared_weak_count *v521;
  unint64_t *v522;
  unint64_t v523;
  unint64_t *v524;
  unint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  unint64_t *v529;
  unint64_t v530;
  char *v531;
  unsigned __int8 v532;
  __int128 v533;
  unint64_t *v534;
  unint64_t v535;
  unint64_t v536;
  unint64_t *v537;
  unint64_t v538;
  int8x16_t v539;
  int16x8_t v540;
  int32x4_t v541;
  int8x16_t v542;
  int8x16_t v543;
  int16x8_t v544;
  int32x4_t v545;
  int8x16_t v546;
  int32x4_t v547;
  int8x16_t v548;
  int32x4_t v549;
  int8x16_t v550;
  int8x16_t v551;
  int8x16_t v552;
  int8x16_t v553;
  int8x16_t v554;
  int8x16_t v555;
  int8x16_t v556;
  int8x16_t v557;
  int8x16_t v558;
  int16x8_t v559;
  int32x4_t v560;
  int8x16_t v561;
  int16x8_t v562;
  int32x4_t v563;
  int8x16_t v564;
  int32x4_t v565;
  int8x16_t v566;
  int32x4_t v567;
  int8x16_t v568;
  int8x16_t v569;
  int8x16_t v570;
  int8x16_t v571;
  int8x16_t v572;
  int8x16_t v573;
  int8x16_t v574;
  int8x16_t v575;
  int8x16_t v576;
  int8x16_t v577;
  int8x16_t v578;
  int8x16_t v579;
  int8x16_t v580;
  int8x16_t v581;
  int16x8_t v582;
  int32x4_t v583;
  int16x8_t v584;
  int32x4_t v585;
  int32x4_t v586;
  int32x4_t v587;
  int8x16_t v588;
  int8x16_t v589;
  int8x16_t v590;
  int16x8_t v591;
  int32x4_t v592;
  int16x8_t v593;
  int32x4_t v594;
  int8x16_t v595;
  int8x16_t v596;
  int8x16_t v597;
  int32x4_t v598;
  int8x16_t v599;
  int8x16_t v600;
  int8x16_t v601;
  int32x4_t v602;
  int8x16_t v603;
  int8x16_t v604;
  int8x16_t v605;
  int8x16_t v606;
  int8x16_t v607;
  int8x16_t v608;
  int8x16_t v609;
  int8x16_t v610;
  std::__shared_weak_count *v611;
  unint64_t *v612;
  unint64_t v613;
  unint64_t *v614;
  unint64_t v615;
  _QWORD *v616;
  _QWORD *v617;
  _QWORD *v618;
  uint64_t v619;
  std::__shared_weak_count *v620;
  unint64_t *v621;
  unint64_t v622;
  unint64_t *v623;
  unint64_t v624;
  std::__shared_weak_count *v625;
  unint64_t *v626;
  unint64_t v627;
  uint64_t v628;
  _QWORD *v629;
  uint64_t v630;
  _QWORD *v631;
  uint64_t v632;
  unint64_t *v633;
  unint64_t v634;
  std::__shared_weak_count *v635;
  unint64_t *v636;
  unint64_t v637;
  _QWORD *v638;
  _QWORD *v639;
  _QWORD *v640;
  uint64_t v641;
  std::__shared_weak_count *v642;
  unint64_t *v643;
  unint64_t v644;
  unint64_t *v645;
  unint64_t v646;
  std::__shared_weak_count *v647;
  unint64_t *v648;
  unint64_t v649;
  uint64_t v650;
  _QWORD *v651;
  uint64_t v652;
  _QWORD *v653;
  uint64_t v654;
  unint64_t *v655;
  unint64_t v656;
  std::__shared_weak_count *v657;
  unint64_t *v658;
  unint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  unint64_t *v663;
  unint64_t v664;
  _QWORD *v665;
  uint64_t v666;
  std::__shared_weak_count *v667;
  unint64_t *v668;
  unint64_t v669;
  std::__shared_weak_count *v670;
  unint64_t *v671;
  unint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  unint64_t *v676;
  unint64_t v677;
  _QWORD *v678;
  uint64_t v679;
  std::__shared_weak_count *v680;
  unint64_t *v681;
  unint64_t v682;
  std::__shared_weak_count *v683;
  unint64_t *v684;
  unint64_t v685;
  _QWORD *v686;
  _QWORD *v687;
  _QWORD *v688;
  uint64_t v689;
  std::__shared_weak_count *v690;
  unint64_t *v691;
  unint64_t v692;
  unint64_t *v693;
  unint64_t v694;
  std::__shared_weak_count *v695;
  unint64_t *v696;
  unint64_t v697;
  _QWORD *v698;
  _QWORD *v699;
  _QWORD *v700;
  uint64_t v701;
  std::__shared_weak_count *v702;
  unint64_t *v703;
  unint64_t v704;
  unint64_t *v705;
  unint64_t v706;
  std::__shared_weak_count *v707;
  unint64_t *v708;
  unint64_t v709;
  _QWORD *v710;
  std::__shared_weak_count *v711;
  unint64_t *v712;
  unint64_t v713;
  _QWORD *v714;
  ggl::CommonMesh::Pos2UVMesh *v715;
  std::__shared_weak_count *v716;
  unint64_t *v717;
  unint64_t v718;
  uint64_t v719;
  unint64_t v720;
  uint64_t v721;
  unint64_t v722;
  std::__shared_weak_count *v723;
  unint64_t *v724;
  unint64_t v725;
  uint64_t v726;
  uint64_t v727;
  __int128 v728;
  uint64_t v729;
  _QWORD *v735;
  uint64_t v736;
  __int128 v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  std::__shared_weak_count *v741;
  unint64_t *v742;
  unint64_t v743;
  unint64_t v744;
  std::__shared_weak_count *v745;
  unint64_t *v746;
  unint64_t v747;
  unint64_t *v748;
  unint64_t v749;
  int64x2_t *v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  int64x2_t *v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  int64x2_t *v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  int64x2_t *v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  int64x2_t *v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  int64x2_t *v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  int64x2_t *v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  VKSharedResources *v785;
  _QWORD *v786;
  std::__shared_weak_count *v787;
  unint64_t *v788;
  unint64_t v789;
  unsigned __int8 v790;
  uint64_t v791;
  _QWORD *v792;
  uint64_t v793;
  std::__shared_weak_count *v794;
  unint64_t *v795;
  unint64_t v796;
  uint64_t v797;
  uint64_t v798;
  std::__shared_weak_count *v799;
  unint64_t *v800;
  unint64_t v801;
  _QWORD *v802;
  std::__shared_weak_count *v803;
  unint64_t *v804;
  unint64_t v805;
  std::__shared_weak_count *v806;
  unint64_t *v807;
  unint64_t v808;
  _QWORD *v809;
  _QWORD *v810;
  _QWORD *v811;
  uint64_t v812;
  std::__shared_weak_count *v813;
  unint64_t *v814;
  unint64_t v815;
  unint64_t *v816;
  unint64_t v817;
  std::__shared_weak_count *v818;
  unint64_t *v819;
  unint64_t v820;
  uint64_t v821;
  _QWORD *v822;
  uint64_t v823;
  _QWORD *v824;
  uint64_t v825;
  unint64_t *v826;
  unint64_t v827;
  std::__shared_weak_count *v828;
  unint64_t *v829;
  unint64_t v830;
  uint64_t v831;
  uint64_t v832;
  std::__shared_weak_count *v833;
  unint64_t *v834;
  unint64_t v835;
  _QWORD *v836;
  std::__shared_weak_count *v837;
  unint64_t *v838;
  unint64_t v839;
  std::__shared_weak_count *v840;
  unint64_t *v841;
  unint64_t v842;
  _QWORD *v843;
  _QWORD *v844;
  _QWORD *v845;
  uint64_t v846;
  std::__shared_weak_count *v847;
  unint64_t *v848;
  unint64_t v849;
  unint64_t *v850;
  unint64_t v851;
  std::__shared_weak_count *v852;
  unint64_t *v853;
  unint64_t v854;
  uint64_t v855;
  _QWORD *v856;
  uint64_t v857;
  _QWORD *v858;
  uint64_t v859;
  unint64_t *v860;
  unint64_t v861;
  std::__shared_weak_count *v862;
  unint64_t *v863;
  unint64_t v864;
  VKSharedResources *v865;
  _QWORD *v866;
  std::__shared_weak_count *v867;
  unint64_t *v868;
  unint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  unint64_t *v873;
  unint64_t v874;
  char *v875;
  unsigned __int8 v876;
  __int128 v877;
  unint64_t *v878;
  unint64_t v879;
  unint64_t v880;
  unint64_t *v881;
  unint64_t v882;
  int8x16_t v883;
  int16x8_t v884;
  int32x4_t v885;
  int8x16_t v886;
  int8x16_t v887;
  int16x8_t v888;
  int32x4_t v889;
  int8x16_t v890;
  int32x4_t v891;
  int8x16_t v892;
  int32x4_t v893;
  int8x16_t v894;
  int8x16_t v895;
  int8x16_t v896;
  int8x16_t v897;
  int8x16_t v898;
  int8x16_t v899;
  int8x16_t v900;
  int8x16_t v901;
  int8x16_t v902;
  int16x8_t v903;
  int32x4_t v904;
  int8x16_t v905;
  int16x8_t v906;
  int32x4_t v907;
  int8x16_t v908;
  int32x4_t v909;
  int8x16_t v910;
  int32x4_t v911;
  int8x16_t v912;
  int8x16_t v913;
  int8x16_t v914;
  int8x16_t v915;
  int8x16_t v916;
  int8x16_t v917;
  int8x16_t v918;
  int8x16_t v919;
  int8x16_t v920;
  int8x16_t v921;
  int8x16_t v922;
  int8x16_t v923;
  int8x16_t v924;
  int8x16_t v925;
  int16x8_t v926;
  int32x4_t v927;
  int16x8_t v928;
  int32x4_t v929;
  int32x4_t v930;
  int32x4_t v931;
  int8x16_t v932;
  int8x16_t v933;
  int8x16_t v934;
  int16x8_t v935;
  int32x4_t v936;
  int16x8_t v937;
  int32x4_t v938;
  int8x16_t v939;
  int8x16_t v940;
  int8x16_t v941;
  int32x4_t v942;
  int8x16_t v943;
  int8x16_t v944;
  int8x16_t v945;
  int32x4_t v946;
  int8x16_t v947;
  int8x16_t v948;
  int8x16_t v949;
  int8x16_t v950;
  int8x16_t v951;
  int8x16_t v952;
  int8x16_t v953;
  int8x16_t v954;
  std::__shared_weak_count *v955;
  unint64_t *v956;
  unint64_t v957;
  std::__shared_weak_count *v958;
  unint64_t *v959;
  unint64_t v960;
  _QWORD *v961;
  _QWORD *v962;
  _QWORD *v963;
  uint64_t v964;
  std::__shared_weak_count *v965;
  unint64_t *v966;
  unint64_t v967;
  unint64_t *v968;
  unint64_t v969;
  std::__shared_weak_count *v970;
  unint64_t *v971;
  unint64_t v972;
  VKSharedResources *v973;
  _QWORD *v974;
  std::__shared_weak_count *v975;
  unint64_t *v976;
  unint64_t v977;
  _QWORD *v978;
  uint64_t v979;
  std::__shared_weak_count *v980;
  unint64_t *v981;
  unint64_t v982;
  _QWORD *v983;
  uint64_t v984;
  std::__shared_weak_count *v985;
  unint64_t *v986;
  unint64_t v987;
  uint64_t v988;
  uint64_t v989;
  std::__shared_weak_count *v990;
  unint64_t *v991;
  unint64_t v992;
  _QWORD *v993;
  std::__shared_weak_count *v994;
  unint64_t *v995;
  unint64_t v996;
  std::__shared_weak_count *v997;
  unint64_t *v998;
  unint64_t v999;
  _QWORD *v1000;
  _QWORD *v1001;
  _QWORD *v1002;
  uint64_t v1003;
  std::__shared_weak_count *v1004;
  unint64_t *v1005;
  unint64_t v1006;
  unint64_t *v1007;
  unint64_t v1008;
  std::__shared_weak_count *v1009;
  unint64_t *v1010;
  unint64_t v1011;
  _QWORD *v1012;
  _QWORD *v1013;
  _QWORD *v1014;
  uint64_t v1015;
  std::__shared_weak_count *v1016;
  unint64_t *v1017;
  unint64_t v1018;
  unint64_t *v1019;
  unint64_t v1020;
  std::__shared_weak_count *v1021;
  unint64_t *v1022;
  unint64_t v1023;
  uint64_t v1024;
  _QWORD *v1025;
  uint64_t v1026;
  _QWORD *v1027;
  uint64_t v1028;
  unint64_t *v1029;
  unint64_t v1030;
  std::__shared_weak_count *v1031;
  unint64_t *v1032;
  unint64_t v1033;
  uint64_t v1034;
  _QWORD *v1035;
  uint64_t v1036;
  _QWORD *v1037;
  uint64_t v1038;
  unint64_t *v1039;
  unint64_t v1040;
  std::__shared_weak_count *v1041;
  unint64_t *v1042;
  unint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  std::__shared_weak_count *v1046;
  unint64_t *v1047;
  unint64_t v1048;
  _QWORD *v1049;
  std::__shared_weak_count *v1050;
  unint64_t *v1051;
  unint64_t v1052;
  std::__shared_weak_count *v1053;
  unint64_t *v1054;
  unint64_t v1055;
  _QWORD *v1056;
  _QWORD *v1057;
  _QWORD *v1058;
  uint64_t v1059;
  std::__shared_weak_count *v1060;
  unint64_t *v1061;
  unint64_t v1062;
  unint64_t *v1063;
  unint64_t v1064;
  std::__shared_weak_count *v1065;
  unint64_t *v1066;
  unint64_t v1067;
  _QWORD *v1068;
  _QWORD *v1069;
  _QWORD *v1070;
  uint64_t v1071;
  std::__shared_weak_count *v1072;
  unint64_t *v1073;
  unint64_t v1074;
  unint64_t *v1075;
  unint64_t v1076;
  std::__shared_weak_count *v1077;
  unint64_t *v1078;
  unint64_t v1079;
  uint64_t v1080;
  _QWORD *v1081;
  uint64_t v1082;
  _QWORD *v1083;
  uint64_t v1084;
  unint64_t *v1085;
  unint64_t v1086;
  std::__shared_weak_count *v1087;
  unint64_t *v1088;
  unint64_t v1089;
  uint64_t v1090;
  _QWORD *v1091;
  uint64_t v1092;
  _QWORD *v1093;
  uint64_t v1094;
  unint64_t *v1095;
  unint64_t v1096;
  std::__shared_weak_count *v1097;
  unint64_t *v1098;
  unint64_t v1099;
  VKSharedResources *v1100;
  _QWORD *v1101;
  std::__shared_weak_count *v1102;
  unint64_t *v1103;
  unint64_t v1104;
  _QWORD *v1105;
  uint64_t v1106;
  std::__shared_weak_count *v1107;
  unint64_t *v1108;
  unint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  unint64_t *v1113;
  unint64_t v1114;
  char *v1115;
  unsigned __int8 v1116;
  __int128 v1117;
  unint64_t *v1118;
  unint64_t v1119;
  unint64_t v1120;
  unint64_t *v1121;
  unint64_t v1122;
  int8x16_t v1123;
  int16x8_t v1124;
  int32x4_t v1125;
  int8x16_t v1126;
  int8x16_t v1127;
  int16x8_t v1128;
  int32x4_t v1129;
  int8x16_t v1130;
  int32x4_t v1131;
  int8x16_t v1132;
  int32x4_t v1133;
  int8x16_t v1134;
  int8x16_t v1135;
  int8x16_t v1136;
  int8x16_t v1137;
  int8x16_t v1138;
  int8x16_t v1139;
  int16x8_t v1140;
  int32x4_t v1141;
  int8x16_t v1142;
  int16x8_t v1143;
  int32x4_t v1144;
  int8x16_t v1145;
  int32x4_t v1146;
  int8x16_t v1147;
  int32x4_t v1148;
  int8x16_t v1149;
  int8x16_t v1150;
  int8x16_t v1151;
  int8x16_t v1152;
  int8x16_t v1153;
  int8x16_t v1154;
  int8x16_t v1155;
  int8x16_t v1156;
  int8x16_t v1157;
  int8x16_t v1158;
  int8x16_t v1159;
  int8x16_t v1160;
  int8x16_t v1161;
  int16x8_t v1162;
  int32x4_t v1163;
  int16x8_t v1164;
  int32x4_t v1165;
  int32x4_t v1166;
  int32x4_t v1167;
  int8x16_t v1168;
  int8x16_t v1169;
  int8x16_t v1170;
  int8x16_t v1171;
  int8x16_t v1172;
  int8x16_t v1173;
  int8x16_t v1174;
  int8x16_t v1175;
  int8x16_t v1176;
  int16x8_t v1177;
  int32x4_t v1178;
  int16x8_t v1179;
  int32x4_t v1180;
  int32x4_t v1181;
  int32x4_t v1182;
  int8x16_t v1183;
  int8x16_t v1184;
  int8x16_t v1185;
  int8x16_t v1186;
  int8x16_t v1187;
  int8x16_t v1188;
  int8x16_t v1189;
  std::__shared_weak_count *v1190;
  unint64_t *v1191;
  unint64_t v1192;
  std::__shared_weak_count *v1193;
  unint64_t *v1194;
  unint64_t v1195;
  _QWORD *v1196;
  _QWORD *v1197;
  _QWORD *v1198;
  uint64_t v1199;
  std::__shared_weak_count *v1200;
  unint64_t *v1201;
  unint64_t v1202;
  unint64_t *v1203;
  unint64_t v1204;
  std::__shared_weak_count *v1205;
  unint64_t *v1206;
  unint64_t v1207;
  uint64_t v1208;
  _QWORD *v1209;
  uint64_t v1210;
  _QWORD *v1211;
  uint64_t v1212;
  unint64_t *v1213;
  unint64_t v1214;
  std::__shared_weak_count *v1215;
  unint64_t *v1216;
  unint64_t v1217;
  int64x2_t *v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  int64x2_t *v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  int64x2_t *v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  int64x2_t *v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  int64x2_t *v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  int64x2_t *v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  int64x2_t *v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  int64x2_t *v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  __int128 v1258;
  _QWORD *v1259;
  int v1260;
  int v1261;
  unint64_t v1262;
  unint64_t v1263;
  std::__shared_weak_count *v1264;
  unint64_t *v1265;
  unint64_t v1266;
  unint64_t v1267;
  unint64_t v1268;
  _QWORD *v1269;
  int v1270;
  int v1271;
  unint64_t v1272;
  unint64_t v1273;
  unsigned __int8 v1275;
  unsigned __int8 v1276;
  unsigned __int8 v1277;
  unsigned __int8 v1278;
  unsigned __int8 v1279;
  unsigned __int8 v1280;
  unsigned __int8 v1281;
  unsigned __int8 v1282;
  unsigned __int8 v1283;
  unsigned __int8 v1284;
  unsigned __int8 v1285;
  ggl::StandardPostchainFGBlurShader *v1286;
  unsigned __int8 v1287;
  unsigned __int8 v1288;
  unsigned __int8 v1289;
  ggl::StandardPostchainBGBlurShader *v1290;
  unsigned __int8 v1291;
  unsigned __int8 v1292;
  unsigned __int8 v1293;
  uint64_t v1294;
  unsigned __int8 v1295;
  unsigned __int8 v1296;
  unsigned __int8 v1297;
  unsigned __int8 v1298;
  unsigned __int8 v1299;
  unsigned __int8 v1300;
  unsigned __int8 v1301;
  unsigned __int8 v1302;
  unsigned __int8 v1303;
  unsigned __int8 v1304;
  unsigned __int8 v1305;
  unsigned __int8 v1306;
  unsigned __int8 v1307;
  unsigned __int8 v1308;
  unsigned __int8 v1309;
  unsigned __int8 v1310;
  unsigned __int8 v1311;
  unsigned __int8 v1312;
  unsigned __int8 v1313;
  unsigned __int8 v1314;
  unsigned __int8 v1315;
  unsigned __int8 v1316;
  unsigned __int8 v1317;
  unsigned __int8 v1318;
  unsigned __int8 v1319;
  unsigned __int8 v1320;
  unsigned __int8 v1321;
  unsigned __int8 v1322;
  unsigned __int8 v1323;
  unsigned __int8 v1324;
  unsigned __int8 v1325;
  unsigned __int8 v1326;
  unsigned __int8 v1327;
  unsigned __int8 v1328;
  unsigned __int8 v1329;
  unsigned __int8 v1330;
  char *v1331;
  __int16 v1332;
  __int16 v1333;
  __int16 v1334;
  __int16 v1335;
  __int16 v1336;
  __int16 v1337;
  __int16 v1338;
  md::CartographicRenderer *v1339;
  VKSharedResources *v1340;
  __int128 v1341;
  __int128 v1342;
  __int16 v1343;
  uint64_t v1344;
  uint64_t v1345;
  std::__shared_weak_count *v1346;
  __int128 v1347;
  unint64_t v1348;
  uint64_t v1349;
  __int16 v1350;
  uint64_t v1351;
  uint64_t v1352;
  __int16 v1353;
  char v1354;
  uint64_t v1355;
  __int16 v1356;
  char v1357;
  __int128 v1358;
  unint64_t v1359;
  uint64_t v1360;
  std::__shared_weak_count *v1361;
  uint64_t v1362;
  std::__shared_weak_count *v1363;
  uint64_t v1364;
  std::__shared_weak_count *v1365;
  uint64_t v1366;
  std::__shared_weak_count *v1367;
  uint64_t v1368;
  std::__shared_weak_count *v1369;
  uint64_t v1370;
  std::__shared_weak_count *v1371;
  uint64_t v1372;
  std::__shared_weak_count *v1373;
  uint64_t v1374;
  std::__shared_weak_count *v1375;
  uint64_t v1376;
  std::__shared_weak_count *v1377;
  uint64_t v1378;
  std::__shared_weak_count *v1379;
  uint64_t v1380;
  std::__shared_weak_count *v1381;
  uint64_t v1382;
  std::__shared_weak_count *v1383;
  uint64_t v1384;
  std::__shared_weak_count *v1385;
  uint64_t v1386;
  std::__shared_weak_count *v1387;
  uint64_t v1388;
  std::__shared_weak_count *v1389;
  uint64_t v1390;
  std::__shared_weak_count *v1391;
  uint64_t v1392;
  std::__shared_weak_count *v1393;
  uint64_t v1394;
  std::__shared_weak_count *v1395;
  uint64_t v1396;
  std::__shared_weak_count *v1397;
  uint64_t v1398;
  std::__shared_weak_count *v1399;
  uint64_t v1400;
  std::__shared_weak_count *v1401;
  uint64_t v1402;
  std::__shared_weak_count *v1403;
  uint64_t v1404;
  std::__shared_weak_count *v1405;
  uint64_t v1406;
  std::__shared_weak_count *v1407;
  uint64_t v1408;
  std::__shared_weak_count *v1409;
  __int128 v1410;
  uint64_t v1411;
  uint64_t v1412;
  __int128 v1413;
  int v1414;
  uint64_t v1415;
  int v1416;
  _BYTE v1417[36];
  uint64_t v1418;
  char v1419;
  uint64_t v1420;

  v1420 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v1340 = v5;
  v1339 = a2;
  if (v5)
  {
    v6 = v5;
    -[VKSharedResources standardCommandBufferSelector](v5, "standardCommandBufferSelector");
    v7 = *(unsigned __int8 *)(*(_QWORD *)(v1406 + 32) + 123);
    -[VKSharedResources standardCommandBufferSelector](v6, "standardCommandBufferSelector");
    v8 = *(unsigned __int8 *)(*(_QWORD *)(v1404 + 32) + 123);
    -[VKSharedResources standardCommandBufferSelector](v6, "standardCommandBufferSelector");
    v9 = *(unsigned __int8 *)(*(_QWORD *)(v1402 + 32) + 123);
    -[VKSharedResources standardCommandBufferSelector](v6, "standardCommandBufferSelector");
    v10 = *(unsigned __int8 *)(*(_QWORD *)(v1400 + 32) + 123);
    -[VKSharedResources standardCommandBufferSelector](v6, "standardCommandBufferSelector");
    v11 = *(unsigned __int8 *)(*(_QWORD *)(v1398 + 32) + 123);
    -[VKSharedResources standardCommandBufferSelector](v6, "standardCommandBufferSelector");
    v12 = *(unsigned __int8 *)(*(_QWORD *)(v1396 + 32) + 123);
    -[VKSharedResources standardCommandBufferSelector](v6, "standardCommandBufferSelector");
    v13 = *(unsigned __int8 *)(*(_QWORD *)(v1394 + 32) + 123);
    -[VKSharedResources standardCommandBufferSelector](v6, "standardCommandBufferSelector");
    v1333 = v13;
    v1334 = v12;
    v1332 = *(unsigned __int8 *)(*(_QWORD *)(v1392 + 32) + 123);
    -[VKSharedResources standardCommandBufferSelector](v6, "standardCommandBufferSelector");
    v14 = v9;
    v15 = *(unsigned __int8 *)(*(_QWORD *)(v1390 + 32) + 123);
    -[VKSharedResources standardCommandBufferSelector](v6, "standardCommandBufferSelector");
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v1388 + 32) + 123);
    -[VKSharedResources standardCommandBufferSelector](v6, "standardCommandBufferSelector");
    v17 = *(unsigned __int8 *)(*(_QWORD *)(v1386 + 32) + 123);
    -[VKSharedResources standardCommandBufferSelector](v6, "standardCommandBufferSelector");
    v18 = v7 << 8;
    v1336 = v8 << 8;
    v1338 = v14 << 8;
    v19 = v10 << 8;
    v1337 = v11 << 8;
    v20 = v1334 << 8;
    v1335 = v1333 << 8;
    v21 = v1332 << 8;
    v22 = v15 << 8;
    v23 = v16 << 8;
    v24 = v17 << 8;
    v25 = *(unsigned __int8 *)(*(_QWORD *)(v1384 + 32) + 123);
  }
  else
  {
    v1407 = 0;
    v1406 = 0;
    v25 = *(unsigned __int8 *)(MEMORY[0x20] + 123);
    v24 = v25 << 8;
    v1405 = 0;
    v1404 = 0;
    v1403 = 0;
    v1402 = 0;
    v1401 = 0;
    v1400 = 0;
    v1399 = 0;
    v1398 = 0;
    v1397 = 0;
    v1396 = 0;
    v1395 = 0;
    v1394 = 0;
    v1392 = 0;
    v1393 = 0;
    v1391 = 0;
    v1390 = 0;
    v1388 = 0;
    v1389 = 0;
    v22 = v25 << 8;
    v1335 = v25 << 8;
    v1337 = v25 << 8;
    v1338 = v25 << 8;
    v18 = v25 << 8;
    v1386 = 0;
    v1387 = 0;
    v1336 = v25 << 8;
    v19 = v25 << 8;
    v20 = v25 << 8;
    v21 = v25 << 8;
    v23 = v25 << 8;
    v1384 = 0;
    v1385 = 0;
  }
  v26 = operator new(0x18uLL);
  *v26 = v18 | 0x11;
  v26[1] = v1336 | 0x12;
  v26[2] = v1338 | 0x13;
  v26[3] = v19 | 0x14;
  v26[4] = v1337 | 0x15;
  v26[5] = v20 | 0x16;
  v26[6] = v1335 | 0x17;
  v26[7] = v21 | 5;
  v26[8] = v22 | 4;
  v26[9] = v23 | 6;
  v26[10] = v24 | 7;
  v26[11] = (v25 << 8) | 8;
  *(_QWORD *)this = off_1E428C468;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v27 = operator new(0x18uLL);
  *(_OWORD *)v27 = *(_OWORD *)v26;
  v27[2] = *((_QWORD *)v26 + 2);
  *((_QWORD *)this + 2) = v27 + 3;
  *((_QWORD *)this + 3) = v27 + 3;
  *((_WORD *)this + 16) = 0;
  *((_BYTE *)this + 34) = 52;
  *(_QWORD *)this = off_1E429E2A8;
  *((_QWORD *)this + 1) = v27;
  *((_QWORD *)this + 5) = v1339;
  operator delete(v26);
  if (v1385)
  {
    p_shared_owners = &v1385->__shared_owners_;
    do
      v29 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v29 - 1, (unint64_t *)p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v1385->__on_zero_shared)(v1385);
      std::__shared_weak_count::__release_weak(v1385);
    }
  }
  if (v1387)
  {
    v30 = &v1387->__shared_owners_;
    do
      v31 = __ldaxr((unint64_t *)v30);
    while (__stlxr(v31 - 1, (unint64_t *)v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v1387->__on_zero_shared)(v1387);
      std::__shared_weak_count::__release_weak(v1387);
    }
  }
  if (v1389)
  {
    v32 = &v1389->__shared_owners_;
    do
      v33 = __ldaxr((unint64_t *)v32);
    while (__stlxr(v33 - 1, (unint64_t *)v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v1389->__on_zero_shared)(v1389);
      std::__shared_weak_count::__release_weak(v1389);
    }
  }
  if (v1391)
  {
    v34 = &v1391->__shared_owners_;
    do
      v35 = __ldaxr((unint64_t *)v34);
    while (__stlxr(v35 - 1, (unint64_t *)v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v1391->__on_zero_shared)(v1391);
      std::__shared_weak_count::__release_weak(v1391);
    }
  }
  if (v1393)
  {
    v36 = &v1393->__shared_owners_;
    do
      v37 = __ldaxr((unint64_t *)v36);
    while (__stlxr(v37 - 1, (unint64_t *)v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v1393->__on_zero_shared)(v1393);
      std::__shared_weak_count::__release_weak(v1393);
    }
  }
  if (v1395)
  {
    v38 = &v1395->__shared_owners_;
    do
      v39 = __ldaxr((unint64_t *)v38);
    while (__stlxr(v39 - 1, (unint64_t *)v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v1395->__on_zero_shared)(v1395);
      std::__shared_weak_count::__release_weak(v1395);
    }
  }
  if (v1397)
  {
    v40 = &v1397->__shared_owners_;
    do
      v41 = __ldaxr((unint64_t *)v40);
    while (__stlxr(v41 - 1, (unint64_t *)v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v1397->__on_zero_shared)(v1397);
      std::__shared_weak_count::__release_weak(v1397);
    }
  }
  if (v1399)
  {
    v42 = &v1399->__shared_owners_;
    do
      v43 = __ldaxr((unint64_t *)v42);
    while (__stlxr(v43 - 1, (unint64_t *)v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v1399->__on_zero_shared)(v1399);
      std::__shared_weak_count::__release_weak(v1399);
    }
  }
  if (v1401)
  {
    v44 = &v1401->__shared_owners_;
    do
      v45 = __ldaxr((unint64_t *)v44);
    while (__stlxr(v45 - 1, (unint64_t *)v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v1401->__on_zero_shared)(v1401);
      std::__shared_weak_count::__release_weak(v1401);
    }
  }
  if (v1403)
  {
    v46 = &v1403->__shared_owners_;
    do
      v47 = __ldaxr((unint64_t *)v46);
    while (__stlxr(v47 - 1, (unint64_t *)v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v1403->__on_zero_shared)(v1403);
      std::__shared_weak_count::__release_weak(v1403);
    }
  }
  if (v1405)
  {
    v48 = &v1405->__shared_owners_;
    do
      v49 = __ldaxr((unint64_t *)v48);
    while (__stlxr(v49 - 1, (unint64_t *)v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v1405->__on_zero_shared)(v1405);
      std::__shared_weak_count::__release_weak(v1405);
    }
  }
  if (v1407)
  {
    v50 = &v1407->__shared_owners_;
    do
      v51 = __ldaxr((unint64_t *)v50);
    while (__stlxr(v51 - 1, (unint64_t *)v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v1407->__on_zero_shared)(v1407);
      std::__shared_weak_count::__release_weak(v1407);
    }
  }
  *(_QWORD *)this = &off_1E429A428;
  -[VKSharedResources standardCommandBufferSelector](v1340, "standardCommandBufferSelector");
  v52 = v1383;
  *((_WORD *)this + 24) = (*(unsigned __int8 *)(*(_QWORD *)(v1382 + 32) + 123) << 8) | 0x11;
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  -[VKSharedResources standardCommandBufferSelector](v1340, "standardCommandBufferSelector");
  v55 = v1381;
  *((_WORD *)this + 25) = (*(unsigned __int8 *)(*(_QWORD *)(v1380 + 32) + 123) << 8) | 0x12;
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  -[VKSharedResources standardCommandBufferSelector](v1340, "standardCommandBufferSelector");
  v58 = v1379;
  *((_WORD *)this + 26) = (*(unsigned __int8 *)(*(_QWORD *)(v1378 + 32) + 123) << 8) | 0x13;
  if (v58)
  {
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  -[VKSharedResources standardCommandBufferSelector](v1340, "standardCommandBufferSelector");
  v61 = v1377;
  *((_WORD *)this + 27) = (*(unsigned __int8 *)(*(_QWORD *)(v1376 + 32) + 123) << 8) | 0x14;
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  -[VKSharedResources standardCommandBufferSelector](v1340, "standardCommandBufferSelector");
  v64 = v1375;
  *((_WORD *)this + 28) = (*(unsigned __int8 *)(*(_QWORD *)(v1374 + 32) + 123) << 8) | 0x15;
  if (v64)
  {
    v65 = (unint64_t *)&v64->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  -[VKSharedResources standardCommandBufferSelector](v1340, "standardCommandBufferSelector");
  v67 = v1373;
  *((_WORD *)this + 29) = (*(unsigned __int8 *)(*(_QWORD *)(v1372 + 32) + 123) << 8) | 0x16;
  if (v67)
  {
    v68 = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  -[VKSharedResources standardCommandBufferSelector](v1340, "standardCommandBufferSelector");
  v70 = v1371;
  *((_WORD *)this + 30) = (*(unsigned __int8 *)(*(_QWORD *)(v1370 + 32) + 123) << 8) | 0x17;
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  -[VKSharedResources standardCommandBufferSelector](v1340, "standardCommandBufferSelector");
  v73 = v1369;
  *((_WORD *)this + 31) = (*(unsigned __int8 *)(*(_QWORD *)(v1368 + 32) + 123) << 8) | 5;
  if (v73)
  {
    v74 = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  -[VKSharedResources standardCommandBufferSelector](v1340, "standardCommandBufferSelector");
  v76 = v1367;
  *((_WORD *)this + 32) = (*(unsigned __int8 *)(*(_QWORD *)(v1366 + 32) + 123) << 8) | 4;
  if (v76)
  {
    v77 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  -[VKSharedResources standardCommandBufferSelector](v1340, "standardCommandBufferSelector");
  v79 = v1365;
  *((_WORD *)this + 33) = (*(unsigned __int8 *)(*(_QWORD *)(v1364 + 32) + 123) << 8) | 6;
  if (v79)
  {
    v80 = (unint64_t *)&v79->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  -[VKSharedResources standardCommandBufferSelector](v1340, "standardCommandBufferSelector");
  v82 = v1363;
  *((_WORD *)this + 34) = (*(unsigned __int8 *)(*(_QWORD *)(v1362 + 32) + 123) << 8) | 7;
  if (v82)
  {
    v83 = (unint64_t *)&v82->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  -[VKSharedResources standardCommandBufferSelector](v1340, "standardCommandBufferSelector");
  v85 = v1361;
  *((_WORD *)this + 35) = (*(unsigned __int8 *)(*(_QWORD *)(v1360 + 32) + 123) << 8) | 8;
  if (v85)
  {
    v86 = (unint64_t *)&v85->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v1331 = (char *)this + 200;
  bzero((char *)this + 72, 0x328uLL);
  v88 = *((id *)v1339 + 13);
  v89 = objc_msgSend(v88, "format", (char *)this + 72);

  v90 = *(_DWORD *)v89;
  v1358 = *(_OWORD *)v89;
  v91 = *(_QWORD *)(v89 + 8);
  v1359 = *(_QWORD *)(v89 + 16);
  v1413 = *(_OWORD *)(v89 + 4);
  v1414 = *(_DWORD *)(v89 + 20);
  v92 = operator new(0xE8uLL);
  v92[1] = 0;
  v92[2] = 0;
  *v92 = &off_1E42E18A0;
  v93 = ggl::BufferData::BufferData((uint64_t)(v92 + 3), qword_1EE561038, 2, 1, 6, 1);
  v92[28] = ggl::PostchainCommon::CameraProperties::reflection(void)::reflection;
  v92[3] = &off_1E42B91D0;
  v94 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 9) = v93;
  *((_QWORD *)this + 10) = v92;
  if (v94)
  {
    v95 = (unint64_t *)&v94->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v1340, "shaderLibrary") + 80);
  v98 = *(_QWORD *)(v97 + 2480);
  v99 = *(_QWORD *)(v97 + 2488);
  *(_QWORD *)&v1347 = v98;
  *((_QWORD *)&v1347 + 1) = v99;
  if (v99)
  {
    v100 = (unint64_t *)(v99 + 8);
    do
      v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
  }
  *(_QWORD *)&v1341 = 0;
  v102 = (char *)operator new(0x198uLL);
  *((_QWORD *)v102 + 1) = 0;
  *((_QWORD *)v102 + 2) = 0;
  *(_QWORD *)v102 = &off_1E42E3318;
  *(_OWORD *)v1417 = *(_OWORD *)v89;
  *(_OWORD *)&v1417[16] = *(_OWORD *)(v89 + 16);
  if ((v103 & 1) == 0
  {
    if ((v1275 & 1) == 0
    {
      if ((v1302 & 1) == 0
      {
        if ((v1324 & 1) == 0
        {
          ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
        }
        ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
        unk_1ECE43AC8 = 1;
      }
      ggl::StandardPostchain::CompositePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
      unk_1EE57DA60 = &ggl::StandardPostchain::pipelineDataCompositePipelineDeviceStructs(void)::ref;
      qword_1EE57DA68 = 0;
      if ((v1303 & 1) == 0
      {
        ggl::StandardPostchain::pipelineDataCompositePipelineConstantStructs(void)::ref = (uint64_t)ggl::PostchainCommon::CameraProperties::reflection(void)::reflection;
      }
      qword_1EE57DA70 = (uint64_t)&ggl::StandardPostchain::pipelineDataCompositePipelineConstantStructs(void)::ref;
      unk_1EE57DA78 = xmmword_19FFB3050;
    }
    ggl::StandardPostchain::CompositePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::StandardPostchain::CompositePipelineSetup::typedReflection(void)::ref;
    if ((v1276 & 1) == 0
    {
      ggl::StandardPostchainCompositeShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainCompositeShader";
      if ((v1304 & 1) == 0
      {
        qword_1ECE356E8 = (uint64_t)"StandardPostchainCompositeShader";
        unk_1ECE356F0 = ggl::standardPostchainCompositeShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE356F8 = 1;
        unk_1ECE35700 = &ggl::standardPostchainCompositeShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE35708 = 0;
        unk_1ECE35710 = &ggl::standardPostchainCompositeShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE35718 = 0;
        unk_1ECE35720 = &ggl::standardPostchainCompositeShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::standardPostchainCompositeShaderVertexFunctionDescriptor(void)::ref = 3269181341;
        qword_1ECE35728 = 0;
        unk_1ECE35730 = &ggl::standardPostchainCompositeShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE35740 = 0;
        unk_1ECE35748 = 0;
        qword_1ECE35738 = 0;
      }
      qword_1ECE34928 = (uint64_t)&ggl::standardPostchainCompositeShaderVertexFunctionDescriptor(void)::ref;
      dword_1ECE34930 = -1025785955;
      if ((v1305 & 1) == 0
      {
        ggl::standardPostchainCompositeShaderFragmentFunctionDescriptor(void)::ref = 0x1DF746FA2;
        qword_1ECE35A20 = (uint64_t)"StandardPostchainCompositeShader";
        unk_1ECE35A28 = 0;
        qword_1ECE35A30 = 0;
        unk_1ECE35A38 = &ggl::standardPostchainCompositeShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE35A40 = 1;
        unk_1ECE35A48 = &ggl::standardPostchainCompositeShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE35A50 = 0;
        unk_1ECE35A58 = &ggl::standardPostchainCompositeShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE35A60 = 4;
        unk_1ECE35A68 = &ggl::standardPostchainCompositeShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE35A78 = 0;
        unk_1ECE35A80 = 0;
        qword_1ECE35A70 = 4;
      }
      qword_1ECE34938 = (uint64_t)&ggl::standardPostchainCompositeShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE34940 = -546017374;
      qword_1ECE34948 = (uint64_t)ggl::standardPostchainCompositeShaderShaderConstants(void)::ref;
      unk_1ECE34950 = 1;
      qword_1ECE34958 = (uint64_t)ggl::standardPostchainCompositeShaderShaderTextures(void)::ref;
      unk_1ECE34960 = 4;
      qword_1ECE34968 = (uint64_t)ggl::standardPostchainCompositeShaderShaderSamplers(void)::ref;
      unk_1ECE34970 = 4;
    }
    qword_1EE57DA98 = (uint64_t)&ggl::StandardPostchainCompositeShader::typedReflection(void)::ref;
    if ((v1277 & 1) == 0
    {
      ggl::StandardPostchain::pipelineStateCompositePipelineAttributeStructBinding(void)::attr = 0;
      *(_QWORD *)algn_1EE57DF88 = 0;
      qword_1EE57DF90 = (uint64_t)"";
      dword_1EE57DF98 = 0;
      qword_1EE57DFA0 = (uint64_t)&ggl::StandardPostchain::pipelineStateCompositePipelineAttributeBinding_0(void)::attr;
      unk_1EE57DFA8 = 2;
    }
    qword_1EE57DAA0 = (uint64_t)&ggl::StandardPostchain::pipelineStateCompositePipelineAttributeStructBinding(void)::attr;
    *(_QWORD *)algn_1EE57DAA8 = 1;
    qword_1EE57DAB0 = 0;
    unk_1EE57DAB8 = 4;
    qword_1EE57DAC0 = (uint64_t)&ggl::StandardPostchain::pipelineStateCompositePipelineDeviceStructBinding(void)::ref;
    unk_1EE57DAC8 = 0;
    if ((v1278 & 1) == 0
    {
      ggl::StandardPostchain::pipelineStateCompositePipelineConstantStructBinding(void)::ref = 0;
      *(_QWORD *)algn_1EE57DEE8 = 0;
      qword_1EE57DEF0 = (uint64_t)"cameraProperties";
      dword_1EE57DEF8 = 3;
      qword_1EE57DF00 = (uint64_t)&ggl::StandardPostchain::pipelineStateCompositePipelineConstantCameraPropertiesBinding(void)::reflection;
      unk_1EE57DF08 = 5;
    }
    qword_1EE57DAD0 = (uint64_t)&ggl::StandardPostchain::pipelineStateCompositePipelineConstantStructBinding(void)::ref;
    unk_1EE57DAD8 = 1;
  }
  v104 = v1347;
  if (*((_QWORD *)&v1347 + 1))
  {
    v105 = (unint64_t *)(*((_QWORD *)&v1347 + 1) + 8);
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 1, v105));
    *((_DWORD *)v102 + 14) = 0;
    *((_QWORD *)v102 + 5) = 0;
    *((_QWORD *)v102 + 6) = 0;
    *((_QWORD *)v102 + 3) = &off_1E42B6760;
    *((_QWORD *)v102 + 4) = 0;
    *((_QWORD *)v102 + 8) = &ggl::StandardPostchain::CompositePipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v102 + 72) = v104;
    do
      v107 = __ldxr(v105);
    while (__stxr(v107 + 1, v105));
  }
  else
  {
    *((_DWORD *)v102 + 14) = 0;
    *((_QWORD *)v102 + 5) = 0;
    *((_QWORD *)v102 + 6) = 0;
    *((_QWORD *)v102 + 3) = &off_1E42B6760;
    *((_QWORD *)v102 + 4) = 0;
    *((_QWORD *)v102 + 8) = &ggl::StandardPostchain::CompositePipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v102 + 72) = v104;
  }
  v102[136] = 0;
  *(_OWORD *)(v102 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v102 + 156) = 0;
  *(_QWORD *)(v102 + 172) = 0;
  *(_QWORD *)(v102 + 164) = 0;
  v102[184] = 0;
  *(_OWORD *)(v102 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v102 + 204) = 0;
  *(_QWORD *)(v102 + 220) = 0;
  *(_QWORD *)(v102 + 212) = 0;
  v102[232] = 0;
  *(_OWORD *)(v102 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v102 + 252) = 0;
  *(_QWORD *)(v102 + 268) = 0;
  *(_QWORD *)(v102 + 260) = 0;
  v108 = *(_OWORD *)&v1417[16];
  *(_OWORD *)(v102 + 280) = *(_OWORD *)v1417;
  *(_OWORD *)(v102 + 296) = v108;
  v102[312] = 0;
  *((_QWORD *)v102 + 48) = 0;
  *((_OWORD *)v102 + 22) = 0u;
  *((_OWORD *)v102 + 23) = 0u;
  *((_OWORD *)v102 + 20) = 0u;
  *((_OWORD *)v102 + 21) = 0u;
  *((_QWORD *)v102 + 49) = 0x100000001;
  v102[400] = 0;
  v102[88] = 0;
  *(_WORD *)(v102 + 89) = v1410;
  v102[91] = BYTE2(v1410);
  *(_OWORD *)(v102 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v102 + 108) = v1341;
  *((_DWORD *)v102 + 29) = 0;
  *((_QWORD *)v102 + 15) = 0;
  *((_DWORD *)v102 + 32) = 0;
  v102[132] = 15;
  if (*((_QWORD *)&v104 + 1))
  {
    v109 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v104 + 1) + 16))(*((_QWORD *)&v104 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v104 + 1));
    }
  }
  v102[329] = 0;
  v111 = vceqzq_s8(*(int8x16_t *)(v102 + 328));
  v112 = vmovl_high_s8(v111);
  v113 = vmovl_s16(*(int16x4_t *)v112.i8);
  v114.i64[0] = v113.u32[0];
  v114.i64[1] = v113.u32[1];
  v115 = v114;
  v116 = vmovl_s8(*(int8x8_t *)v111.i8);
  v117 = vmovl_s16(*(int16x4_t *)v116.i8);
  v114.i64[0] = v117.u32[0];
  v114.i64[1] = v117.u32[1];
  v118 = v114;
  v119 = vmovl_high_s16(v112);
  v114.i64[0] = v119.u32[0];
  v114.i64[1] = v119.u32[1];
  v120 = v114;
  v121 = vmovl_high_s16(v116);
  v114.i64[0] = v121.u32[0];
  v114.i64[1] = v121.u32[1];
  v122 = v114;
  v114.i64[0] = v113.u32[2];
  v114.i64[1] = v113.u32[3];
  v123 = v114;
  v114.i64[0] = v117.u32[2];
  v114.i64[1] = v117.u32[3];
  v124 = v114;
  v114.i64[0] = v119.u32[2];
  v114.i64[1] = v119.u32[3];
  v125 = v114;
  v114.i64[0] = v121.u32[2];
  v114.i64[1] = v121.u32[3];
  v126 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v114);
  v127 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v125);
  v128 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v124);
  v129 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v120);
  v130 = vceqzq_s8(*(int8x16_t *)(v102 + 344));
  v131 = vmovl_high_s8(v130);
  v132 = vmovl_s16(*(int16x4_t *)v131.i8);
  v114.i64[0] = v132.u32[0];
  v114.i64[1] = v132.u32[1];
  v133 = v114;
  v134 = vmovl_s8(*(int8x8_t *)v130.i8);
  v135 = vmovl_s16(*(int16x4_t *)v134.i8);
  v114.i64[0] = v135.u32[0];
  v114.i64[1] = v135.u32[1];
  v136 = v114;
  v137 = vmovl_high_s16(v131);
  v114.i64[0] = v137.u32[0];
  v114.i64[1] = v137.u32[1];
  v138 = v114;
  v139 = vmovl_high_s16(v134);
  v114.i64[0] = v139.u32[0];
  v114.i64[1] = v139.u32[1];
  v140 = v114;
  v114.i64[0] = v132.u32[2];
  v114.i64[1] = v132.u32[3];
  v141 = v114;
  v114.i64[0] = v135.u32[2];
  v114.i64[1] = v135.u32[3];
  v142 = v114;
  v114.i64[0] = v137.u32[2];
  v114.i64[1] = v137.u32[3];
  v143 = v114;
  v114.i64[0] = v139.u32[2];
  v114.i64[1] = v139.u32[3];
  v144 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v143);
  v145 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v133), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v115));
  v146 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v136), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v118));
  v147 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v138), v129);
  v148 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v140), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v122));
  v149 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v141), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v123));
  v150 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v142), v128);
  v151 = vorrq_s8(v144, v127);
  v152 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v114), v126);
  v153 = vceqzq_s8(*(int8x16_t *)(v102 + 360));
  v154 = vmovl_high_s8(v153);
  v155 = vmovl_s16(*(int16x4_t *)v154.i8);
  v114.i64[0] = v155.i32[0];
  v114.i64[1] = v155.i32[1];
  v156 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v114);
  v157 = vceqzq_s8(*(int8x16_t *)(v102 + 376));
  v158 = vmovl_high_s8(v157);
  v159 = vmovl_s16(*(int16x4_t *)v158.i8);
  v114.i64[0] = v159.i32[0];
  v114.i64[1] = v159.i32[1];
  v160 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v114), v156), v145);
  v161 = vmovl_s8(*(int8x8_t *)v153.i8);
  v162 = vmovl_s16(*(int16x4_t *)v161.i8);
  v114.i64[0] = v162.i32[0];
  v114.i64[1] = v162.i32[1];
  v163 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v114);
  v164 = vmovl_s8(*(int8x8_t *)v157.i8);
  v165 = vmovl_s16(*(int16x4_t *)v164.i8);
  v114.i64[0] = v165.i32[0];
  v114.i64[1] = v165.i32[1];
  v166 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v114), v163), v146);
  v167 = vmovl_high_s16(v154);
  v114.i64[0] = v167.i32[0];
  v114.i64[1] = v167.i32[1];
  v168 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v114);
  v169 = vmovl_high_s16(v158);
  v114.i64[0] = v169.i32[0];
  v114.i64[1] = v169.i32[1];
  v170 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v114), v168), v147);
  v171 = vmovl_high_s16(v161);
  v114.i64[0] = v171.i32[0];
  v114.i64[1] = v171.i32[1];
  v172 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v114);
  v173 = vmovl_high_s16(v164);
  v114.i64[0] = v173.i32[0];
  v114.i64[1] = v173.i32[1];
  v174 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v114), v172), v148);
  v114.i64[0] = v155.i32[2];
  v114.i64[1] = v155.i32[3];
  v175 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v114);
  v114.i64[0] = v159.i32[2];
  v114.i64[1] = v159.i32[3];
  v176 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v114), v175), v149);
  v114.i64[0] = v162.i32[2];
  v114.i64[1] = v162.i32[3];
  v177 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v114);
  v114.i64[0] = v165.i32[2];
  v114.i64[1] = v165.i32[3];
  v178 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v114), v177), v150);
  v114.i64[0] = v167.i32[2];
  v114.i64[1] = v167.i32[3];
  v179 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v114);
  v114.i64[0] = v169.i32[2];
  v114.i64[1] = v169.i32[3];
  v180 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v114), v179), v151);
  v114.i64[0] = v171.i32[2];
  v114.i64[1] = v171.i32[3];
  v181 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v114);
  v114.i64[0] = v173.i32[2];
  v114.i64[1] = v173.i32[3];
  *((_QWORD *)v102 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v166, v160), vorrq_s8(v174, v170)), (int64x2_t)vorrq_s8(vorrq_s8(v178, v176), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v114), v181), v152), v180))));
  *((_QWORD *)v102 + 3) = &off_1E42BA3B0;
  v102[312] = 1;
  v182 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 21) = v102 + 24;
  *((_QWORD *)this + 22) = v102;
  if (v182)
  {
    v183 = (unint64_t *)&v182->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  if (*((_QWORD *)&v1347 + 1))
  {
    v185 = (unint64_t *)(*((_QWORD *)&v1347 + 1) + 8);
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v1347 + 1) + 16))(*((_QWORD *)&v1347 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1347 + 1));
    }
  }
  v187 = operator new(0x100uLL);
  v188 = v187;
  v187[1] = 0;
  v187[2] = 0;
  *v187 = &off_1E42E32E0;
  v189 = v187 + 3;
  v190 = *((_QWORD *)this + 21);
  v191 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (v191)
  {
    v192 = (unint64_t *)&v191->__shared_owners_;
    do
      v193 = __ldxr(v192);
    while (__stxr(v193 + 1, v192));
    ggl::PipelineSetup::PipelineSetup(v187 + 3, v190, (uint64_t)v191);
    v194 = (unint64_t *)&v191->__shared_owners_;
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v187 + 3, v190, 0);
  }
  v188[3] = &off_1E42BA380;
  v196 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 23) = v189;
  *((_QWORD *)this + 24) = v188;
  if (v196)
  {
    v197 = (unint64_t *)&v196->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  v199 = *((_QWORD *)this + 23);
  v200 = *(_QWORD **)(v199 + 64);
  v200[1] = 0;
  v201 = *((_QWORD *)this + 9);
  *v200 = v201;
  v202 = *(_QWORD **)(v199 + 160);
  v203 = *((_QWORD *)this + 10);
  if (v203)
  {
    v204 = (unint64_t *)(v203 + 8);
    do
      v205 = __ldxr(v204);
    while (__stxr(v205 + 1, v204));
  }
  v206 = (std::__shared_weak_count *)v202[1];
  *v202 = v201;
  v202[1] = v203;
  if (v206)
  {
    v207 = (unint64_t *)&v206->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  v209 = operator new(0xF0uLL);
  v209[1] = 0;
  v209[2] = 0;
  *v209 = &off_1E42DEA08;
  v209[5] = 0;
  v209[6] = 0;
  v209[4] = 0;
  *((_DWORD *)v209 + 14) = 0;
  v209[3] = &off_1E42B5DE8;
  *(_QWORD *)((char *)v209 + 60) = 65537;
  *((_DWORD *)v209 + 17) = 0;
  v209[9] = 1;
  *((_WORD *)v209 + 40) = 0;
  *((_BYTE *)v209 + 82) = 3;
  *(_QWORD *)((char *)v209 + 91) = 0;
  *(_QWORD *)((char *)v209 + 83) = 0;
  *((_BYTE *)v209 + 99) = 0;
  *(_QWORD *)((char *)v209 + 156) = 0;
  *(_QWORD *)((char *)v209 + 148) = 0;
  *((_WORD *)v209 + 106) = 257;
  v209[27] = 0;
  v209[28] = 0;
  *((_BYTE *)v209 + 232) = 0;
  v210 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 19) = v209 + 3;
  *((_QWORD *)this + 20) = v209;
  if (v210)
  {
    v211 = (unint64_t *)&v210->__shared_owners_;
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
  *(_BYTE *)(*((_QWORD *)this + 19) + 58) = 3;
  v1355 = 0;
  v1352 = 0;
  v213 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v1340, "shaderLibrary") + 80);
  v214 = *(_QWORD *)(v213 + 2504);
  v215 = *(_QWORD *)(v213 + 2512);
  *(_QWORD *)v1417 = v214;
  *(_QWORD *)&v1417[8] = v215;
  if (v215)
  {
    v216 = (unint64_t *)(v215 + 8);
    do
      v217 = __ldxr(v216);
    while (__stxr(v217 + 1, v216));
  }
  v218 = (char *)operator new(0x198uLL);
  *((_QWORD *)v218 + 1) = 0;
  *((_QWORD *)v218 + 2) = 0;
  *(_QWORD *)v218 = &off_1E42E3388;
  if ((v219 & 1) == 0
  {
    if ((v1279 & 1) == 0
    {
      if ((v1306 & 1) == 0
      {
        if ((v1325 & 1) == 0
        {
          ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
        }
        ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
        unk_1ECE43AC8 = 1;
      }
      ggl::StandardPostchain::DepthSplitPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
      unk_1EE57DAF0 = &ggl::StandardPostchain::pipelineDataDepthSplitPipelineDeviceStructs(void)::ref;
      qword_1EE57DAF8 = 0;
      if ((v1307 & 1) == 0
      {
        ggl::StandardPostchain::pipelineDataDepthSplitPipelineConstantStructs(void)::ref = (uint64_t)ggl::PostchainCommon::CameraProperties::reflection(void)::reflection;
      }
      qword_1EE57DB00 = (uint64_t)&ggl::StandardPostchain::pipelineDataDepthSplitPipelineConstantStructs(void)::ref;
      *(_OWORD *)algn_1EE57DB08 = xmmword_19FFB2DB0;
    }
    ggl::StandardPostchain::DepthSplitPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::StandardPostchain::DepthSplitPipelineSetup::typedReflection(void)::ref;
    if ((v1280 & 1) == 0
    {
      ggl::StandardPostchainSplitFrameShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainSplitFrameShader";
      if ((v1308 & 1) == 0
      {
        qword_1ECE35848 = (uint64_t)"StandardPostchainSplitFrameShader";
        unk_1ECE35850 = ggl::standardPostchainSplitFrameShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE35858 = 1;
        unk_1ECE35860 = &ggl::standardPostchainSplitFrameShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE35868 = 0;
        unk_1ECE35870 = &ggl::standardPostchainSplitFrameShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE35878 = 0;
        unk_1ECE35880 = &ggl::standardPostchainSplitFrameShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::standardPostchainSplitFrameShaderVertexFunctionDescriptor(void)::ref = 1892780714;
        qword_1ECE35888 = 0;
        unk_1ECE35890 = &ggl::standardPostchainSplitFrameShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE358A0 = 0;
        unk_1ECE358A8 = 0;
        qword_1ECE35898 = 0;
      }
      qword_1ECE34988 = (uint64_t)&ggl::standardPostchainSplitFrameShaderVertexFunctionDescriptor(void)::ref;
      dword_1ECE34990 = 1892780714;
      if ((v1309 & 1) == 0
      {
        ggl::standardPostchainSplitFrameShaderFragmentFunctionDescriptor(void)::ref = 0x119C0B9BFLL;
        qword_1ECE35B80 = (uint64_t)"StandardPostchainSplitFrameShader";
        unk_1ECE35B88 = 0;
        qword_1ECE35B90 = 0;
        unk_1ECE35B98 = &ggl::standardPostchainSplitFrameShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE35BA0 = 1;
        unk_1ECE35BA8 = &ggl::standardPostchainSplitFrameShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE35BB0 = 0;
        unk_1ECE35BB8 = &ggl::standardPostchainSplitFrameShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE35BC0 = 2;
        unk_1ECE35BC8 = &ggl::standardPostchainSplitFrameShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE35BD8 = 0;
        unk_1ECE35BE0 = 0;
        qword_1ECE35BD0 = 2;
      }
      qword_1ECE34998 = (uint64_t)&ggl::standardPostchainSplitFrameShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE349A0 = 432060863;
      qword_1ECE349A8 = (uint64_t)ggl::standardPostchainSplitFrameShaderShaderConstants(void)::ref;
      unk_1ECE349B0 = 1;
      qword_1ECE349B8 = (uint64_t)ggl::standardPostchainSplitFrameShaderShaderTextures(void)::ref;
      unk_1ECE349C0 = 2;
      qword_1ECE349C8 = (uint64_t)ggl::standardPostchainSplitFrameShaderShaderSamplers(void)::ref;
      unk_1ECE349D0 = 2;
    }
    qword_1EE57DB28 = (uint64_t)&ggl::StandardPostchainSplitFrameShader::typedReflection(void)::ref;
    if ((v1281 & 1) == 0
    {
      ggl::StandardPostchain::pipelineStateDepthSplitPipelineAttributeStructBinding(void)::attr = 0;
      *(_QWORD *)algn_1EE57DFE8 = 0;
      qword_1EE57DFF0 = (uint64_t)"";
      dword_1EE57DFF8 = 0;
      qword_1EE57E000 = (uint64_t)&ggl::StandardPostchain::pipelineStateDepthSplitPipelineAttributeBinding_0(void)::attr;
      unk_1EE57E008 = 2;
    }
    qword_1EE57DB30 = (uint64_t)&ggl::StandardPostchain::pipelineStateDepthSplitPipelineAttributeStructBinding(void)::attr;
    *(_QWORD *)algn_1EE57DB38 = 1;
    qword_1EE57DB40 = 0;
    unk_1EE57DB48 = 2;
    qword_1EE57DB50 = (uint64_t)&ggl::StandardPostchain::pipelineStateDepthSplitPipelineDeviceStructBinding(void)::ref;
    unk_1EE57DB58 = 0;
    if ((v1282 & 1) == 0
    {
      ggl::StandardPostchain::pipelineStateDepthSplitPipelineConstantStructBinding(void)::ref = 0;
      *(_QWORD *)algn_1EE57DFB8 = 0;
      qword_1EE57DFC0 = (uint64_t)"cameraProperties";
      dword_1EE57DFC8 = 3;
      qword_1EE57DFD0 = (uint64_t)&ggl::StandardPostchain::pipelineStateDepthSplitPipelineConstantCameraPropertiesBinding(void)::reflection;
      unk_1EE57DFD8 = 5;
    }
    qword_1EE57DB60 = (uint64_t)&ggl::StandardPostchain::pipelineStateDepthSplitPipelineConstantStructBinding(void)::ref;
    unk_1EE57DB68 = 1;
  }
  v220 = *(_OWORD *)v1417;
  if (*(_QWORD *)&v1417[8])
  {
    v221 = (unint64_t *)(*(_QWORD *)&v1417[8] + 8);
    do
      v222 = __ldxr(v221);
    while (__stxr(v222 + 1, v221));
    *((_DWORD *)v218 + 14) = 0;
    *((_QWORD *)v218 + 5) = 0;
    *((_QWORD *)v218 + 6) = 0;
    *((_QWORD *)v218 + 3) = &off_1E42B6760;
    *((_QWORD *)v218 + 4) = 0;
    *((_QWORD *)v218 + 8) = &ggl::StandardPostchain::DepthSplitPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v218 + 72) = v220;
    do
      v223 = __ldxr(v221);
    while (__stxr(v223 + 1, v221));
  }
  else
  {
    *((_DWORD *)v218 + 14) = 0;
    *((_QWORD *)v218 + 5) = 0;
    *((_QWORD *)v218 + 6) = 0;
    *((_QWORD *)v218 + 3) = &off_1E42B6760;
    *((_QWORD *)v218 + 4) = 0;
    *((_QWORD *)v218 + 8) = &ggl::StandardPostchain::DepthSplitPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v218 + 9) = v220;
    *((_QWORD *)v218 + 10) = 0;
  }
  v218[184] = 0;
  *(_OWORD *)(v218 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v218 + 204) = 0;
  *(_QWORD *)(v218 + 220) = 0;
  *(_QWORD *)(v218 + 212) = 0;
  v218[232] = 0;
  *(_OWORD *)(v218 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v218 + 252) = 0;
  *(_QWORD *)(v218 + 268) = 0;
  *(_QWORD *)(v218 + 260) = 0;
  *((_DWORD *)v218 + 70) = v90;
  *((_DWORD *)v218 + 71) = v90;
  *((_QWORD *)v218 + 36) = v91;
  *((_QWORD *)v218 + 37) = 2;
  *((_QWORD *)v218 + 38) = 1;
  v218[312] = 0;
  *((_OWORD *)v218 + 20) = 0u;
  *((_OWORD *)v218 + 21) = 0u;
  *((_OWORD *)v218 + 22) = 0u;
  *((_OWORD *)v218 + 23) = 0u;
  *((_QWORD *)v218 + 48) = 0;
  *((_QWORD *)v218 + 49) = 0x100000001;
  v218[400] = 0;
  v218[88] = 0;
  v218[91] = v1357;
  *(_WORD *)(v218 + 89) = v1356;
  *(_OWORD *)(v218 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v218 + 108) = v1355;
  *(_QWORD *)(v218 + 124) = 0;
  *(_QWORD *)(v218 + 116) = 0;
  v218[132] = 15;
  v218[136] = 0;
  *(_WORD *)(v218 + 137) = v1353;
  v218[139] = v1354;
  *(_OWORD *)(v218 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v218 + 156) = v1352;
  *(_QWORD *)(v218 + 164) = 0;
  *(_QWORD *)(v218 + 172) = 0;
  v218[180] = 15;
  if (*((_QWORD *)&v220 + 1))
  {
    v224 = (unint64_t *)(*((_QWORD *)&v220 + 1) + 8);
    do
      v225 = __ldaxr(v224);
    while (__stlxr(v225 - 1, v224));
    if (!v225)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v220 + 1) + 16))(*((_QWORD *)&v220 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v220 + 1));
    }
  }
  v218[329] = 0;
  v226 = vceqzq_s8(*(int8x16_t *)(v218 + 328));
  v227 = vmovl_high_s8(v226);
  v228 = vmovl_s16(*(int16x4_t *)v227.i8);
  v229.i64[0] = v228.u32[0];
  v229.i64[1] = v228.u32[1];
  v230 = v229;
  v231 = vmovl_s8(*(int8x8_t *)v226.i8);
  v232 = vmovl_s16(*(int16x4_t *)v231.i8);
  v229.i64[0] = v232.u32[0];
  v229.i64[1] = v232.u32[1];
  v233 = v229;
  v234 = vmovl_high_s16(v227);
  v229.i64[0] = v234.u32[0];
  v229.i64[1] = v234.u32[1];
  v235 = v229;
  v236 = vmovl_high_s16(v231);
  v229.i64[0] = v236.u32[0];
  v229.i64[1] = v236.u32[1];
  v237 = v229;
  v229.i64[0] = v228.u32[2];
  v229.i64[1] = v228.u32[3];
  v238 = v229;
  v229.i64[0] = v232.u32[2];
  v229.i64[1] = v232.u32[3];
  v239 = v229;
  v229.i64[0] = v234.u32[2];
  v229.i64[1] = v234.u32[3];
  v240 = v229;
  v229.i64[0] = v236.u32[2];
  v229.i64[1] = v236.u32[3];
  v241 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v229);
  v242 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v240);
  v243 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v239);
  v244 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v235);
  v245 = vceqzq_s8(*(int8x16_t *)(v218 + 344));
  v246 = vmovl_high_s8(v245);
  v247 = vmovl_s16(*(int16x4_t *)v246.i8);
  v229.i64[0] = v247.u32[0];
  v229.i64[1] = v247.u32[1];
  v248 = v229;
  v249 = vmovl_s8(*(int8x8_t *)v245.i8);
  v250 = vmovl_s16(*(int16x4_t *)v249.i8);
  v229.i64[0] = v250.u32[0];
  v229.i64[1] = v250.u32[1];
  v251 = v229;
  v252 = vmovl_high_s16(v246);
  v229.i64[0] = v252.u32[0];
  v229.i64[1] = v252.u32[1];
  v253 = v229;
  v254 = vmovl_high_s16(v249);
  v229.i64[0] = v254.u32[0];
  v229.i64[1] = v254.u32[1];
  v255 = v229;
  v229.i64[0] = v247.u32[2];
  v229.i64[1] = v247.u32[3];
  v256 = v229;
  v229.i64[0] = v250.u32[2];
  v229.i64[1] = v250.u32[3];
  v257 = v229;
  v229.i64[0] = v252.u32[2];
  v229.i64[1] = v252.u32[3];
  v258 = v229;
  v229.i64[0] = v254.u32[2];
  v229.i64[1] = v254.u32[3];
  v259 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v258);
  v260 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v248), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v230));
  v261 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v251), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v233));
  v262 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v253), v244);
  v263 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v255), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v237));
  v264 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v256), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v238));
  v265 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v257), v243);
  v266 = vorrq_s8(v259, v242);
  v267 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v229), v241);
  v268 = vceqzq_s8(*(int8x16_t *)(v218 + 360));
  v269 = vmovl_s8(*(int8x8_t *)v268.i8);
  v270 = vmovl_high_s16(v269);
  v271 = vmovl_high_s8(v268);
  v272 = vmovl_high_s16(v271);
  v273 = vmovl_s16(*(int16x4_t *)v269.i8);
  v274 = vmovl_s16(*(int16x4_t *)v271.i8);
  v229.i64[0] = v273.i32[0];
  v229.i64[1] = v273.i32[1];
  v275 = v229;
  v229.i64[0] = v274.i32[0];
  v229.i64[1] = v274.i32[1];
  v276 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v229);
  v277 = vceqzq_s8(*(int8x16_t *)(v218 + 376));
  v278 = vmovl_high_s8(v277);
  v279 = vmovl_s16(*(int16x4_t *)v278.i8);
  v229.i64[0] = v279.i32[0];
  v229.i64[1] = v279.i32[1];
  v280 = vmovl_s8(*(int8x8_t *)v277.i8);
  v281 = vmovl_s16(*(int16x4_t *)v280.i8);
  v282 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v229), v276), v260);
  v229.i64[0] = v281.i32[0];
  v229.i64[1] = v281.i32[1];
  v283 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v229), vbicq_s8((int8x16_t)xmmword_19FFB3170, v275));
  v229.i64[0] = v272.i32[0];
  v229.i64[1] = v272.i32[1];
  v284 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v229);
  v285 = vmovl_high_s16(v278);
  v286 = vorrq_s8(v283, v261);
  v229.i64[0] = v285.i32[0];
  v229.i64[1] = v285.i32[1];
  v287 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v229), v284);
  v229.i64[0] = v270.i32[0];
  v229.i64[1] = v270.i32[1];
  v288 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v229);
  v289 = vmovl_high_s16(v280);
  v229.i64[0] = v289.i32[0];
  v229.i64[1] = v289.i32[1];
  v290 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v229), v288), v263);
  v229.i64[0] = v274.i32[2];
  v229.i64[1] = v274.i32[3];
  v291 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v229);
  v229.i64[0] = v279.i32[2];
  v229.i64[1] = v279.i32[3];
  v292 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v229), v291), v264);
  v229.i64[0] = v273.i32[2];
  v229.i64[1] = v273.i32[3];
  v293 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v229);
  v229.i64[0] = v281.i32[2];
  v229.i64[1] = v281.i32[3];
  v294 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v229), v293), v265);
  v229.i64[0] = v272.i32[2];
  v229.i64[1] = v272.i32[3];
  v295 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v229);
  v229.i64[0] = v285.i32[2];
  v229.i64[1] = v285.i32[3];
  v296 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v229), v295), v266);
  v229.i64[0] = v270.i32[2];
  v229.i64[1] = v270.i32[3];
  v297 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v229);
  v229.i64[0] = v289.i32[2];
  v229.i64[1] = v289.i32[3];
  *((_QWORD *)v218 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v286, v282), vorrq_s8(v290, vorrq_s8(v287, v262))), (int64x2_t)vorrq_s8(vorrq_s8(v294, v292), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v229), v297), v267), v296))));
  *((_QWORD *)v218 + 3) = &off_1E42BA400;
  v218[312] = 1;
  v298 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 30) = v218 + 24;
  *((_QWORD *)this + 31) = v218;
  if (v298)
  {
    v299 = (unint64_t *)&v298->__shared_owners_;
    do
      v300 = __ldaxr(v299);
    while (__stlxr(v300 - 1, v299));
    if (!v300)
    {
      ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
      std::__shared_weak_count::__release_weak(v298);
    }
  }
  if (*(_QWORD *)&v1417[8])
  {
    v301 = (unint64_t *)(*(_QWORD *)&v1417[8] + 8);
    do
      v302 = __ldaxr(v301);
    while (__stlxr(v302 - 1, v301));
    if (!v302)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v1417[8] + 16))(*(_QWORD *)&v1417[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v1417[8]);
    }
  }
  v303 = operator new(0x100uLL);
  v304 = v303;
  v303[1] = 0;
  v303[2] = 0;
  *v303 = &off_1E42E3350;
  v305 = v303 + 3;
  v306 = *((_QWORD *)this + 30);
  v307 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  if (v307)
  {
    v308 = (unint64_t *)&v307->__shared_owners_;
    do
      v309 = __ldxr(v308);
    while (__stxr(v309 + 1, v308));
    ggl::PipelineSetup::PipelineSetup(v303 + 3, v306, (uint64_t)v307);
    v310 = (unint64_t *)&v307->__shared_owners_;
    do
      v311 = __ldaxr(v310);
    while (__stlxr(v311 - 1, v310));
    if (!v311)
    {
      ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
      std::__shared_weak_count::__release_weak(v307);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v303 + 3, v306, 0);
  }
  v304[3] = &off_1E42BA3D0;
  v312 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 32) = v305;
  *((_QWORD *)this + 33) = v304;
  if (v312)
  {
    v313 = (unint64_t *)&v312->__shared_owners_;
    do
      v314 = __ldaxr(v313);
    while (__stlxr(v314 - 1, v313));
    if (!v314)
    {
      ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
      std::__shared_weak_count::__release_weak(v312);
    }
  }
  v315 = *((_QWORD *)this + 32);
  v316 = *(_QWORD **)(v315 + 64);
  v316[1] = 0;
  v317 = *((_QWORD *)this + 9);
  *v316 = v317;
  v318 = *(_QWORD **)(v315 + 160);
  v319 = *((_QWORD *)this + 10);
  if (v319)
  {
    v320 = (unint64_t *)(v319 + 8);
    do
      v321 = __ldxr(v320);
    while (__stxr(v321 + 1, v320));
  }
  v322 = (std::__shared_weak_count *)v318[1];
  *v318 = v317;
  v318[1] = v319;
  if (v322)
  {
    v323 = (unint64_t *)&v322->__shared_owners_;
    do
      v324 = __ldaxr(v323);
    while (__stlxr(v324 - 1, v323));
    if (!v324)
    {
      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
      std::__shared_weak_count::__release_weak(v322);
    }
  }
  v325 = operator new(0xF0uLL);
  v325[1] = 0;
  v325[2] = 0;
  *v325 = &off_1E42DEA08;
  v325[5] = 0;
  v325[6] = 0;
  v325[4] = 0;
  *((_DWORD *)v325 + 14) = 0;
  v325[3] = &off_1E42B5DE8;
  *(_QWORD *)((char *)v325 + 60) = 65537;
  *((_DWORD *)v325 + 17) = 0;
  v325[9] = 1;
  *((_WORD *)v325 + 40) = 0;
  *((_BYTE *)v325 + 82) = 3;
  *(_QWORD *)((char *)v325 + 91) = 0;
  *(_QWORD *)((char *)v325 + 83) = 0;
  *((_BYTE *)v325 + 99) = 0;
  *(_QWORD *)((char *)v325 + 156) = 0;
  *(_QWORD *)((char *)v325 + 148) = 0;
  *((_WORD *)v325 + 106) = 257;
  v325[27] = 0;
  v325[28] = 0;
  *((_BYTE *)v325 + 232) = 0;
  v326 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 28) = v325 + 3;
  *((_QWORD *)this + 29) = v325;
  if (v326)
  {
    v327 = (unint64_t *)&v326->__shared_owners_;
    do
      v328 = __ldaxr(v327);
    while (__stlxr(v328 - 1, v327));
    if (!v328)
    {
      ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
      std::__shared_weak_count::__release_weak(v326);
    }
  }
  *(_BYTE *)(*((_QWORD *)this + 28) + 58) = 3;
  v329 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v1340, "shaderLibrary") + 80);
  v330 = *(_QWORD *)(v329 + 2528);
  v331 = *(_QWORD *)(v329 + 2536);
  *(_QWORD *)&v1347 = v330;
  *((_QWORD *)&v1347 + 1) = v331;
  if (v331)
  {
    v332 = (unint64_t *)(v331 + 8);
    do
      v333 = __ldxr(v332);
    while (__stxr(v333 + 1, v332));
  }
  *(_QWORD *)&v1341 = 0;
  v334 = (char *)operator new(0x198uLL);
  *((_QWORD *)v334 + 1) = 0;
  *((_QWORD *)v334 + 2) = 0;
  *(_QWORD *)v334 = &off_1E42E3468;
  *(_OWORD *)v1417 = v1413;
  *(_DWORD *)&v1417[16] = v1414;
  if ((v335 & 1) == 0
  {
    if ((v1283 & 1) == 0
    {
      if ((v1310 & 1) == 0
      {
        if ((v1326 & 1) == 0
        {
          ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
        }
        ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
        unk_1ECE43AC8 = 1;
      }
      ggl::StandardPostchain::DownsampleCoCPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
      unk_1EE57DC10 = &ggl::StandardPostchain::pipelineDataDownsampleCoCPipelineDeviceStructs(void)::ref;
      qword_1EE57DC18 = 0;
      unk_1EE57DC20 = &ggl::StandardPostchain::pipelineDataDownsampleCoCPipelineConstantStructs(void)::ref;
      xmmword_1EE57DC28 = xmmword_19FFB2E40;
    }
    ggl::StandardPostchain::DownsampleCoCPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::StandardPostchain::DownsampleCoCPipelineSetup::typedReflection(void)::ref;
    if ((v1284 & 1) == 0
    {
      ggl::StandardPostchainDownsampleCoCShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainDownsampleCoCShader";
      if ((v1311 & 1) == 0
      {
        qword_1ECE35C68 = (uint64_t)"StandardPostchainDownsampleCoCShader";
        unk_1ECE35C70 = ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE35C78 = 1;
        unk_1ECE35C80 = &ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE35C88 = 0;
        unk_1ECE35C90 = &ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE35C98 = 0;
        unk_1ECE35CA0 = &ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::standardPostchainDownsampleCoCShaderVertexFunctionDescriptor(void)::ref = 579759095;
        qword_1ECE35CA8 = 0;
        unk_1ECE35CB0 = &ggl::standardPostchainDownsampleCoCShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE35CC0 = 0;
        unk_1ECE35CC8 = 0;
        qword_1ECE35CB8 = 0;
      }
      qword_1ECE34B08 = (uint64_t)&ggl::standardPostchainDownsampleCoCShaderVertexFunctionDescriptor(void)::ref;
      dword_1ECE34B10 = 579759095;
      if ((v1312 & 1) == 0
      {
        ggl::standardPostchainDownsampleCoCShaderFragmentFunctionDescriptor(void)::ref = 0x1C1D81A17;
        qword_1ECE35E30 = (uint64_t)"StandardPostchainDownsampleCoCShader";
        unk_1ECE35E38 = 0;
        qword_1ECE35E40 = 0;
        unk_1ECE35E48 = &ggl::standardPostchainDownsampleCoCShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE35E50 = 0;
        unk_1ECE35E58 = &ggl::standardPostchainDownsampleCoCShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE35E60 = 0;
        unk_1ECE35E68 = &ggl::standardPostchainDownsampleCoCShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE35E70 = 1;
        unk_1ECE35E78 = &ggl::standardPostchainDownsampleCoCShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE35E88 = 0;
        unk_1ECE35E90 = 0;
        qword_1ECE35E80 = 1;
      }
      qword_1ECE34B18 = (uint64_t)&ggl::standardPostchainDownsampleCoCShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE34B20 = -1042802153;
      qword_1ECE34B28 = (uint64_t)&ggl::standardPostchainDownsampleCoCShaderShaderConstants(void)::ref;
      unk_1ECE34B30 = 0;
      qword_1ECE34B38 = (uint64_t)ggl::standardPostchainDownsampleCoCShaderShaderTextures(void)::ref;
      unk_1ECE34B40 = 1;
      qword_1ECE34B48 = (uint64_t)ggl::standardPostchainDownsampleCoCShaderShaderSamplers(void)::ref;
      unk_1ECE34B50 = 1;
    }
    qword_1EE57DC48 = (uint64_t)&ggl::StandardPostchainDownsampleCoCShader::typedReflection(void)::ref;
    if ((v1285 & 1) == 0
    {
      ggl::StandardPostchain::pipelineStateDownsampleCoCPipelineAttributeStructBinding(void)::attr = 0;
      *(_QWORD *)algn_1EE57E088 = 0;
      qword_1EE57E090 = (uint64_t)"";
      dword_1EE57E098 = 0;
      qword_1EE57E0A0 = (uint64_t)&ggl::StandardPostchain::pipelineStateDownsampleCoCPipelineAttributeBinding_0(void)::attr;
      unk_1EE57E0A8 = 2;
    }
    qword_1EE57DC50 = (uint64_t)&ggl::StandardPostchain::pipelineStateDownsampleCoCPipelineAttributeStructBinding(void)::attr;
    *(_QWORD *)algn_1EE57DC58 = 1;
    qword_1EE57DC60 = 0;
    unk_1EE57DC68 = 1;
    qword_1EE57DC70 = (uint64_t)&ggl::StandardPostchain::pipelineStateDownsampleCoCPipelineDeviceStructBinding(void)::ref;
    unk_1EE57DC78 = 0;
    qword_1EE57DC80 = (uint64_t)&ggl::StandardPostchain::pipelineStateDownsampleCoCPipelineConstantStructBinding(void)::ref;
    unk_1EE57DC88 = 0;
  }
  v336 = v1347;
  if (*((_QWORD *)&v1347 + 1))
  {
    v337 = (unint64_t *)(*((_QWORD *)&v1347 + 1) + 8);
    do
      v338 = __ldxr(v337);
    while (__stxr(v338 + 1, v337));
    *((_DWORD *)v334 + 14) = 0;
    *((_QWORD *)v334 + 5) = 0;
    *((_QWORD *)v334 + 6) = 0;
    *((_QWORD *)v334 + 3) = &off_1E42B6760;
    *((_QWORD *)v334 + 4) = 0;
    *((_QWORD *)v334 + 8) = &ggl::StandardPostchain::DownsampleCoCPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v334 + 72) = v336;
    do
      v339 = __ldxr(v337);
    while (__stxr(v339 + 1, v337));
  }
  else
  {
    *((_DWORD *)v334 + 14) = 0;
    *((_QWORD *)v334 + 5) = 0;
    *((_QWORD *)v334 + 6) = 0;
    *((_QWORD *)v334 + 3) = &off_1E42B6760;
    *((_QWORD *)v334 + 4) = 0;
    *((_QWORD *)v334 + 8) = &ggl::StandardPostchain::DownsampleCoCPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v334 + 72) = v336;
  }
  v334[136] = 0;
  *(_OWORD *)(v334 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v334 + 156) = 0;
  *(_QWORD *)(v334 + 172) = 0;
  *(_QWORD *)(v334 + 164) = 0;
  v334[184] = 0;
  *(_OWORD *)(v334 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v334 + 204) = 0;
  *(_QWORD *)(v334 + 220) = 0;
  *(_QWORD *)(v334 + 212) = 0;
  v334[232] = 0;
  *(_OWORD *)(v334 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v334 + 252) = 0;
  *(_QWORD *)(v334 + 268) = 0;
  *(_QWORD *)(v334 + 260) = 0;
  *((_DWORD *)v334 + 70) = 2;
  v340 = *(_OWORD *)v1417;
  *((_DWORD *)v334 + 75) = *(_DWORD *)&v1417[16];
  *(_OWORD *)(v334 + 284) = v340;
  *((_QWORD *)v334 + 38) = 1;
  v334[312] = 0;
  *((_QWORD *)v334 + 48) = 0;
  *((_OWORD *)v334 + 22) = 0u;
  *((_OWORD *)v334 + 23) = 0u;
  *((_OWORD *)v334 + 20) = 0u;
  *((_OWORD *)v334 + 21) = 0u;
  *((_QWORD *)v334 + 49) = 0x100000001;
  v334[400] = 0;
  v334[88] = 0;
  *(_WORD *)(v334 + 89) = v1410;
  v334[91] = BYTE2(v1410);
  *(_OWORD *)(v334 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v334 + 108) = v1341;
  *((_DWORD *)v334 + 32) = 0;
  *((_QWORD *)v334 + 15) = 0;
  *((_DWORD *)v334 + 29) = 0;
  v334[132] = 15;
  if (*((_QWORD *)&v336 + 1))
  {
    v341 = (unint64_t *)(*((_QWORD *)&v336 + 1) + 8);
    do
      v342 = __ldaxr(v341);
    while (__stlxr(v342 - 1, v341));
    if (!v342)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v336 + 1) + 16))(*((_QWORD *)&v336 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v336 + 1));
    }
  }
  v334[329] = 0;
  v343 = vceqzq_s8(*(int8x16_t *)(v334 + 328));
  v344 = vmovl_high_s8(v343);
  v345 = vmovl_s16(*(int16x4_t *)v344.i8);
  v346.i64[0] = v345.u32[0];
  v346.i64[1] = v345.u32[1];
  v347 = v346;
  v348 = vmovl_s8(*(int8x8_t *)v343.i8);
  v349 = vmovl_s16(*(int16x4_t *)v348.i8);
  v346.i64[0] = v349.u32[0];
  v346.i64[1] = v349.u32[1];
  v350 = v346;
  v351 = vmovl_high_s16(v344);
  v346.i64[0] = v351.u32[0];
  v346.i64[1] = v351.u32[1];
  v352 = v346;
  v353 = vmovl_high_s16(v348);
  v346.i64[0] = v353.u32[0];
  v346.i64[1] = v353.u32[1];
  v354 = v346;
  v346.i64[0] = v345.u32[2];
  v346.i64[1] = v345.u32[3];
  v355 = v346;
  v346.i64[0] = v349.u32[2];
  v346.i64[1] = v349.u32[3];
  v356 = v346;
  v346.i64[0] = v351.u32[2];
  v346.i64[1] = v351.u32[3];
  v357 = v346;
  v346.i64[0] = v353.u32[2];
  v346.i64[1] = v353.u32[3];
  v358 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v346);
  v359 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v357);
  v360 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v356);
  v361 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v352);
  v362 = vceqzq_s8(*(int8x16_t *)(v334 + 344));
  v363 = vmovl_high_s8(v362);
  v364 = vmovl_s16(*(int16x4_t *)v363.i8);
  v346.i64[0] = v364.u32[0];
  v346.i64[1] = v364.u32[1];
  v365 = v346;
  v366 = vmovl_s8(*(int8x8_t *)v362.i8);
  v367 = vmovl_s16(*(int16x4_t *)v366.i8);
  v346.i64[0] = v367.u32[0];
  v346.i64[1] = v367.u32[1];
  v368 = v346;
  v369 = vmovl_high_s16(v363);
  v346.i64[0] = v369.u32[0];
  v346.i64[1] = v369.u32[1];
  v370 = v346;
  v371 = vmovl_high_s16(v366);
  v346.i64[0] = v371.u32[0];
  v346.i64[1] = v371.u32[1];
  v372 = v346;
  v346.i64[0] = v364.u32[2];
  v346.i64[1] = v364.u32[3];
  v373 = v346;
  v346.i64[0] = v367.u32[2];
  v346.i64[1] = v367.u32[3];
  v374 = v346;
  v346.i64[0] = v369.u32[2];
  v346.i64[1] = v369.u32[3];
  v375 = v346;
  v346.i64[0] = v371.u32[2];
  v346.i64[1] = v371.u32[3];
  v376 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v375);
  v377 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v365), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v347));
  v378 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v368), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v350));
  v379 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v370), v361);
  v380 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v372), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v354));
  v381 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v373), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v355));
  v382 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v374), v360);
  v383 = vorrq_s8(v376, v359);
  v384 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v346), v358);
  v385 = vceqzq_s8(*(int8x16_t *)(v334 + 360));
  v386 = vmovl_s8(*(int8x8_t *)v385.i8);
  v387 = vmovl_high_s16(v386);
  v388 = vmovl_high_s8(v385);
  v389 = vmovl_high_s16(v388);
  v390 = vmovl_s16(*(int16x4_t *)v386.i8);
  v391 = vmovl_s16(*(int16x4_t *)v388.i8);
  v346.i64[0] = v390.i32[0];
  v346.i64[1] = v390.i32[1];
  v392 = v346;
  v346.i64[0] = v391.i32[0];
  v346.i64[1] = v391.i32[1];
  v393 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v346);
  v394 = vceqzq_s8(*(int8x16_t *)(v334 + 376));
  v395 = vmovl_high_s8(v394);
  v396 = vmovl_s16(*(int16x4_t *)v395.i8);
  v346.i64[0] = v396.i32[0];
  v346.i64[1] = v396.i32[1];
  v397 = vmovl_s8(*(int8x8_t *)v394.i8);
  v398 = vmovl_s16(*(int16x4_t *)v397.i8);
  v399 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v346), v393), v377);
  v346.i64[0] = v398.i32[0];
  v346.i64[1] = v398.i32[1];
  v400 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v346), vbicq_s8((int8x16_t)xmmword_19FFB3170, v392));
  v346.i64[0] = v389.i32[0];
  v346.i64[1] = v389.i32[1];
  v401 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v346);
  v402 = vmovl_high_s16(v395);
  v403 = vorrq_s8(v400, v378);
  v346.i64[0] = v402.i32[0];
  v346.i64[1] = v402.i32[1];
  v404 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v346), v401);
  v346.i64[0] = v387.i32[0];
  v346.i64[1] = v387.i32[1];
  v405 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v346);
  v406 = vmovl_high_s16(v397);
  v346.i64[0] = v406.i32[0];
  v346.i64[1] = v406.i32[1];
  v407 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v346), v405), v380);
  v346.i64[0] = v391.i32[2];
  v346.i64[1] = v391.i32[3];
  v408 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v346);
  v346.i64[0] = v396.i32[2];
  v346.i64[1] = v396.i32[3];
  v409 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v346), v408), v381);
  v346.i64[0] = v390.i32[2];
  v346.i64[1] = v390.i32[3];
  v410 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v346);
  v346.i64[0] = v398.i32[2];
  v346.i64[1] = v398.i32[3];
  v411 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v346), v410), v382);
  v346.i64[0] = v389.i32[2];
  v346.i64[1] = v389.i32[3];
  v412 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v346);
  v346.i64[0] = v402.i32[2];
  v346.i64[1] = v402.i32[3];
  v413 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v346), v412), v383);
  v346.i64[0] = v387.i32[2];
  v346.i64[1] = v387.i32[3];
  v414 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v346);
  v346.i64[0] = v406.i32[2];
  v346.i64[1] = v406.i32[3];
  *((_QWORD *)v334 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v403, v399), vorrq_s8(v407, vorrq_s8(v404, v379))), (int64x2_t)vorrq_s8(vorrq_s8(v411, v409), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v346), v414), v384), v413))));
  *((_QWORD *)v334 + 3) = &off_1E42BA4A0;
  v334[312] = 1;
  v415 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 37) = v334 + 24;
  *((_QWORD *)this + 38) = v334;
  if (v415)
  {
    v416 = (unint64_t *)&v415->__shared_owners_;
    do
      v417 = __ldaxr(v416);
    while (__stlxr(v417 - 1, v416));
    if (!v417)
    {
      ((void (*)(std::__shared_weak_count *))v415->__on_zero_shared)(v415);
      std::__shared_weak_count::__release_weak(v415);
    }
  }
  if (*((_QWORD *)&v1347 + 1))
  {
    v418 = (unint64_t *)(*((_QWORD *)&v1347 + 1) + 8);
    do
      v419 = __ldaxr(v418);
    while (__stlxr(v419 - 1, v418));
    if (!v419)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v1347 + 1) + 16))(*((_QWORD *)&v1347 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1347 + 1));
    }
  }
  v420 = operator new(0x100uLL);
  v421 = v420;
  v420[1] = 0;
  v420[2] = 0;
  *v420 = &off_1E42E3430;
  v422 = v420 + 3;
  v423 = *((_QWORD *)this + 37);
  v424 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (v424)
  {
    v425 = (unint64_t *)&v424->__shared_owners_;
    do
      v426 = __ldxr(v425);
    while (__stxr(v426 + 1, v425));
    ggl::PipelineSetup::PipelineSetup(v420 + 3, v423, (uint64_t)v424);
    v427 = (unint64_t *)&v424->__shared_owners_;
    do
      v428 = __ldaxr(v427);
    while (__stlxr(v428 - 1, v427));
    if (!v428)
    {
      ((void (*)(std::__shared_weak_count *))v424->__on_zero_shared)(v424);
      std::__shared_weak_count::__release_weak(v424);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v420 + 3, v423, 0);
  }
  v421[3] = &off_1E42BA470;
  v429 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 39) = v422;
  *((_QWORD *)this + 40) = v421;
  if (v429)
  {
    v430 = (unint64_t *)&v429->__shared_owners_;
    do
      v431 = __ldaxr(v430);
    while (__stlxr(v431 - 1, v430));
    if (!v431)
    {
      ((void (*)(std::__shared_weak_count *))v429->__on_zero_shared)(v429);
      std::__shared_weak_count::__release_weak(v429);
    }
  }
  v432 = operator new(0xF0uLL);
  v432[1] = 0;
  v432[2] = 0;
  *v432 = &off_1E42DEA08;
  v432[5] = 0;
  v432[6] = 0;
  v432[4] = 0;
  *((_DWORD *)v432 + 14) = 0;
  v432[3] = &off_1E42B5DE8;
  *(_QWORD *)((char *)v432 + 60) = 65537;
  *((_DWORD *)v432 + 17) = 0;
  v432[9] = 1;
  *((_WORD *)v432 + 40) = 0;
  *((_BYTE *)v432 + 82) = 3;
  *(_QWORD *)((char *)v432 + 91) = 0;
  *(_QWORD *)((char *)v432 + 83) = 0;
  *((_BYTE *)v432 + 99) = 0;
  *(_QWORD *)((char *)v432 + 156) = 0;
  *(_QWORD *)((char *)v432 + 148) = 0;
  *((_WORD *)v432 + 106) = 257;
  v432[27] = 0;
  v432[28] = 0;
  *((_BYTE *)v432 + 232) = 0;
  v433 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 35) = v432 + 3;
  *((_QWORD *)this + 36) = v432;
  if (v433)
  {
    v434 = (unint64_t *)&v433->__shared_owners_;
    do
      v435 = __ldaxr(v434);
    while (__stlxr(v435 - 1, v434));
    if (!v435)
    {
      ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
      std::__shared_weak_count::__release_weak(v433);
    }
  }
  *(_BYTE *)(*((_QWORD *)this + 35) + 58) = 3;
  v436 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v1340, "shaderLibrary") + 80);
  v437 = *(_QWORD *)(v436 + 2576);
  v438 = *(_QWORD *)(v436 + 2584);
  *(_QWORD *)&v1347 = v437;
  *((_QWORD *)&v1347 + 1) = v438;
  if (v438)
  {
    v439 = (unint64_t *)(v438 + 8);
    do
      v440 = __ldxr(v439);
    while (__stxr(v440 + 1, v439));
  }
  *(_QWORD *)&v1341 = 0;
  v441 = (char *)operator new(0x198uLL);
  *((_QWORD *)v441 + 1) = 0;
  *((_QWORD *)v441 + 2) = 0;
  *(_QWORD *)v441 = &off_1E42E31C8;
  *(_OWORD *)v1417 = v1358;
  *(_QWORD *)&v1417[16] = v1359;
  if ((v442 & 1) == 0)
  {
    if ((_DWORD)v1286)
    {
      if ((v1287 & 1) == 0)
      {
        if ((_DWORD)v1286)
        {
          if ((v1313 & 1) == 0
          {
            if ((v1327 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
            unk_1ECE43AC8 = 1;
          }
          ggl::StandardPostchain::FGBlurPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
          unk_1EE57D8B0 = &ggl::StandardPostchain::pipelineDataFGBlurPipelineDeviceStructs(void)::ref;
          qword_1EE57D8B8 = 0;
          if ((v1314 & 1) == 0
          {
            ggl::StandardPostchain::pipelineDataFGBlurPipelineConstantStructs(void)::ref = (uint64_t)ggl::PostchainCommon::CameraProperties::reflection(void)::reflection;
          }
          qword_1EE57D8C0 = (uint64_t)&ggl::StandardPostchain::pipelineDataFGBlurPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE57D8C8 = xmmword_19FFB2DB0;
        }
      }
      ggl::StandardPostchain::FGBlurPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::StandardPostchain::FGBlurPipelineSetup::typedReflection(void)::ref;
      ggl::StandardPostchainFGBlurShader::typedReflection(v1286);
      qword_1EE57D8E8 = (uint64_t)&ggl::StandardPostchainFGBlurShader::typedReflection(void)::ref;
      if ((v1288 & 1) == 0
      {
        ggl::StandardPostchain::pipelineStateFGBlurPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57DE80 = 0;
        qword_1EE57DE88 = (uint64_t)"";
        dword_1EE57DE90 = 0;
        qword_1EE57DE98 = (uint64_t)&ggl::StandardPostchain::pipelineStateFGBlurPipelineAttributeBinding_0(void)::attr;
        unk_1EE57DEA0 = 2;
      }
      qword_1EE57D8F0 = (uint64_t)&ggl::StandardPostchain::pipelineStateFGBlurPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1EE57D8F8 = 1;
      qword_1EE57D900 = 0;
      unk_1EE57D908 = 2;
      qword_1EE57D910 = (uint64_t)&ggl::StandardPostchain::pipelineStateFGBlurPipelineDeviceStructBinding(void)::ref;
      unk_1EE57D918 = 0;
      if ((v1289 & 1) == 0
      {
        ggl::StandardPostchain::pipelineStateFGBlurPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57DE20 = 0;
        qword_1EE57DE28 = (uint64_t)"cameraProperties";
        dword_1EE57DE30 = 3;
        qword_1EE57DE38 = (uint64_t)&ggl::StandardPostchain::pipelineStateFGBlurPipelineConstantCameraPropertiesBinding(void)::reflection;
        unk_1EE57DE40 = 5;
      }
      qword_1EE57D920 = (uint64_t)&ggl::StandardPostchain::pipelineStateFGBlurPipelineConstantStructBinding(void)::ref;
      unk_1EE57D928 = 1;
    }
  }
  v443 = v1347;
  if (*((_QWORD *)&v1347 + 1))
  {
    v444 = (unint64_t *)(*((_QWORD *)&v1347 + 1) + 8);
    do
      v445 = __ldxr(v444);
    while (__stxr(v445 + 1, v444));
    *((_DWORD *)v441 + 14) = 0;
    *((_QWORD *)v441 + 5) = 0;
    *((_QWORD *)v441 + 6) = 0;
    *((_QWORD *)v441 + 3) = &off_1E42B6760;
    *((_QWORD *)v441 + 4) = 0;
    *((_QWORD *)v441 + 8) = &ggl::StandardPostchain::FGBlurPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v441 + 72) = v443;
    do
      v446 = __ldxr(v444);
    while (__stxr(v446 + 1, v444));
  }
  else
  {
    *((_DWORD *)v441 + 14) = 0;
    *((_QWORD *)v441 + 5) = 0;
    *((_QWORD *)v441 + 6) = 0;
    *((_QWORD *)v441 + 3) = &off_1E42B6760;
    *((_QWORD *)v441 + 4) = 0;
    *((_QWORD *)v441 + 8) = &ggl::StandardPostchain::FGBlurPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v441 + 72) = v443;
  }
  v441[136] = 0;
  *(_OWORD *)(v441 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v441 + 156) = 0;
  *(_QWORD *)(v441 + 172) = 0;
  *(_QWORD *)(v441 + 164) = 0;
  v441[184] = 0;
  *(_OWORD *)(v441 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v441 + 204) = 0;
  *(_QWORD *)(v441 + 220) = 0;
  *(_QWORD *)(v441 + 212) = 0;
  v441[232] = 0;
  *(_OWORD *)(v441 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v441 + 252) = 0;
  *(_QWORD *)(v441 + 268) = 0;
  *(_QWORD *)(v441 + 260) = 0;
  *((_QWORD *)v441 + 37) = *(_QWORD *)&v1417[16];
  *(_OWORD *)(v441 + 280) = *(_OWORD *)v1417;
  *((_QWORD *)v441 + 38) = 1;
  v441[312] = 0;
  *((_QWORD *)v441 + 48) = 0;
  *((_OWORD *)v441 + 22) = 0u;
  *((_OWORD *)v441 + 23) = 0u;
  *((_OWORD *)v441 + 20) = 0u;
  *((_OWORD *)v441 + 21) = 0u;
  *((_QWORD *)v441 + 49) = 0x100000001;
  v441[400] = 0;
  v441[88] = 0;
  *(_WORD *)(v441 + 89) = v1410;
  v441[91] = BYTE2(v1410);
  *(_OWORD *)(v441 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v441 + 108) = v1341;
  *((_DWORD *)v441 + 32) = 0;
  *((_QWORD *)v441 + 15) = 0;
  *((_DWORD *)v441 + 29) = 0;
  v441[132] = 15;
  if (*((_QWORD *)&v443 + 1))
  {
    v447 = (unint64_t *)(*((_QWORD *)&v443 + 1) + 8);
    do
      v448 = __ldaxr(v447);
    while (__stlxr(v448 - 1, v447));
    if (!v448)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v443 + 1) + 16))(*((_QWORD *)&v443 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v443 + 1));
    }
  }
  v441[329] = 0;
  v449 = vceqzq_s8(*(int8x16_t *)(v441 + 328));
  v450 = vmovl_high_s8(v449);
  v451 = vmovl_s16(*(int16x4_t *)v450.i8);
  v452.i64[0] = v451.u32[0];
  v452.i64[1] = v451.u32[1];
  v453 = v452;
  v454 = vmovl_s8(*(int8x8_t *)v449.i8);
  v455 = vmovl_s16(*(int16x4_t *)v454.i8);
  v452.i64[0] = v455.u32[0];
  v452.i64[1] = v455.u32[1];
  v456 = v452;
  v457 = vmovl_high_s16(v450);
  v452.i64[0] = v457.u32[0];
  v452.i64[1] = v457.u32[1];
  v458 = v452;
  v459 = vmovl_high_s16(v454);
  v452.i64[0] = v459.u32[0];
  v452.i64[1] = v459.u32[1];
  v460 = v452;
  v452.i64[0] = v451.u32[2];
  v452.i64[1] = v451.u32[3];
  v461 = v452;
  v452.i64[0] = v455.u32[2];
  v452.i64[1] = v455.u32[3];
  v462 = v452;
  v452.i64[0] = v457.u32[2];
  v452.i64[1] = v457.u32[3];
  v463 = v452;
  v452.i64[0] = v459.u32[2];
  v452.i64[1] = v459.u32[3];
  v464 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v452);
  v465 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v463);
  v466 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v462);
  v467 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v458);
  v468 = vceqzq_s8(*(int8x16_t *)(v441 + 344));
  v469 = vmovl_high_s8(v468);
  v470 = vmovl_s16(*(int16x4_t *)v469.i8);
  v452.i64[0] = v470.u32[0];
  v452.i64[1] = v470.u32[1];
  v471 = v452;
  v472 = vmovl_s8(*(int8x8_t *)v468.i8);
  v473 = vmovl_s16(*(int16x4_t *)v472.i8);
  v452.i64[0] = v473.u32[0];
  v452.i64[1] = v473.u32[1];
  v474 = v452;
  v475 = vmovl_high_s16(v469);
  v452.i64[0] = v475.u32[0];
  v452.i64[1] = v475.u32[1];
  v476 = v452;
  v477 = vmovl_high_s16(v472);
  v452.i64[0] = v477.u32[0];
  v452.i64[1] = v477.u32[1];
  v478 = v452;
  v452.i64[0] = v470.u32[2];
  v452.i64[1] = v470.u32[3];
  v479 = v452;
  v452.i64[0] = v473.u32[2];
  v452.i64[1] = v473.u32[3];
  v480 = v452;
  v452.i64[0] = v475.u32[2];
  v452.i64[1] = v475.u32[3];
  v481 = v452;
  v452.i64[0] = v477.u32[2];
  v452.i64[1] = v477.u32[3];
  v482 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v481);
  v483 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v471), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v453));
  v484 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v474), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v456));
  v485 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v476), v467);
  v486 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v478), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v460));
  v487 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v479), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v461));
  v488 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v480), v466);
  v489 = vorrq_s8(v482, v465);
  v490 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v452), v464);
  v491 = vceqzq_s8(*(int8x16_t *)(v441 + 360));
  v492 = vmovl_s8(*(int8x8_t *)v491.i8);
  v493 = vmovl_high_s16(v492);
  v494 = vmovl_high_s8(v491);
  v495 = vmovl_high_s16(v494);
  v496 = vmovl_s16(*(int16x4_t *)v492.i8);
  v497 = vmovl_s16(*(int16x4_t *)v494.i8);
  v452.i64[0] = v496.i32[0];
  v452.i64[1] = v496.i32[1];
  v498 = v452;
  v452.i64[0] = v497.i32[0];
  v452.i64[1] = v497.i32[1];
  v499 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v452);
  v500 = vceqzq_s8(*(int8x16_t *)(v441 + 376));
  v501 = vmovl_high_s8(v500);
  v502 = vmovl_s16(*(int16x4_t *)v501.i8);
  v452.i64[0] = v502.i32[0];
  v452.i64[1] = v502.i32[1];
  v503 = vmovl_s8(*(int8x8_t *)v500.i8);
  v504 = vmovl_s16(*(int16x4_t *)v503.i8);
  v505 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v452), v499), v483);
  v452.i64[0] = v504.i32[0];
  v452.i64[1] = v504.i32[1];
  v506 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v452), vbicq_s8((int8x16_t)xmmword_19FFB3170, v498));
  v452.i64[0] = v495.i32[0];
  v452.i64[1] = v495.i32[1];
  v507 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v452);
  v508 = vmovl_high_s16(v501);
  v509 = vorrq_s8(v506, v484);
  v452.i64[0] = v508.i32[0];
  v452.i64[1] = v508.i32[1];
  v510 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v452), v507);
  v452.i64[0] = v493.i32[0];
  v452.i64[1] = v493.i32[1];
  v511 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v452);
  v512 = vmovl_high_s16(v503);
  v452.i64[0] = v512.i32[0];
  v452.i64[1] = v512.i32[1];
  v513 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v452), v511), v486);
  v452.i64[0] = v497.i32[2];
  v452.i64[1] = v497.i32[3];
  v514 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v452);
  v452.i64[0] = v502.i32[2];
  v452.i64[1] = v502.i32[3];
  v515 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v452), v514), v487);
  v452.i64[0] = v496.i32[2];
  v452.i64[1] = v496.i32[3];
  v516 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v452);
  v452.i64[0] = v504.i32[2];
  v452.i64[1] = v504.i32[3];
  v517 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v452), v516), v488);
  v452.i64[0] = v495.i32[2];
  v452.i64[1] = v495.i32[3];
  v518 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v452);
  v452.i64[0] = v508.i32[2];
  v452.i64[1] = v508.i32[3];
  v519 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v452), v518), v489);
  v452.i64[0] = v493.i32[2];
  v452.i64[1] = v493.i32[3];
  v520 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v452);
  v452.i64[0] = v512.i32[2];
  v452.i64[1] = v512.i32[3];
  *((_QWORD *)v441 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v509, v505), vorrq_s8(v513, vorrq_s8(v510, v485))), (int64x2_t)vorrq_s8(vorrq_s8(v517, v515), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v452), v520), v490), v519))));
  *((_QWORD *)v441 + 3) = &off_1E42BA2C0;
  v441[312] = 1;
  v521 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  *((_QWORD *)this + 44) = v441 + 24;
  *((_QWORD *)this + 45) = v441;
  if (v521)
  {
    v522 = (unint64_t *)&v521->__shared_owners_;
    do
      v523 = __ldaxr(v522);
    while (__stlxr(v523 - 1, v522));
    if (!v523)
    {
      ((void (*)(std::__shared_weak_count *))v521->__on_zero_shared)(v521);
      std::__shared_weak_count::__release_weak(v521);
    }
  }
  if (*((_QWORD *)&v1347 + 1))
  {
    v524 = (unint64_t *)(*((_QWORD *)&v1347 + 1) + 8);
    do
      v525 = __ldaxr(v524);
    while (__stlxr(v525 - 1, v524));
    if (!v525)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v1347 + 1) + 16))(*((_QWORD *)&v1347 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1347 + 1));
    }
  }
  v526 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v1340, "shaderLibrary") + 80);
  v527 = *(_QWORD *)(v526 + 2552);
  v528 = *(_QWORD *)(v526 + 2560);
  *(_QWORD *)&v1347 = v527;
  *((_QWORD *)&v1347 + 1) = v528;
  if (v528)
  {
    v529 = (unint64_t *)(v528 + 8);
    do
      v530 = __ldxr(v529);
    while (__stxr(v530 + 1, v529));
  }
  *(_QWORD *)&v1341 = 0;
  v531 = (char *)operator new(0x198uLL);
  *((_QWORD *)v531 + 1) = 0;
  *((_QWORD *)v531 + 2) = 0;
  *(_QWORD *)v531 = &off_1E42E3158;
  *(_OWORD *)v1417 = v1358;
  *(_QWORD *)&v1417[16] = v1359;
  if ((v532 & 1) == 0)
  {
    if ((_DWORD)v1290)
    {
      if ((v1291 & 1) == 0)
      {
        if ((_DWORD)v1290)
        {
          if ((v1315 & 1) == 0
          {
            if ((v1328 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
            unk_1ECE43AC8 = 1;
          }
          ggl::StandardPostchain::BGBlurPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
          unk_1EE57D820 = &ggl::StandardPostchain::pipelineDataBGBlurPipelineDeviceStructs(void)::ref;
          qword_1EE57D828 = 0;
          if ((v1316 & 1) == 0
          {
            ggl::StandardPostchain::pipelineDataBGBlurPipelineConstantStructs(void)::ref = (uint64_t)ggl::PostchainCommon::CameraProperties::reflection(void)::reflection;
          }
          qword_1EE57D830 = (uint64_t)&ggl::StandardPostchain::pipelineDataBGBlurPipelineConstantStructs(void)::ref;
          unk_1EE57D838 = vdupq_n_s64(1uLL);
        }
      }
      ggl::StandardPostchain::BGBlurPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::StandardPostchain::BGBlurPipelineSetup::typedReflection(void)::ref;
      ggl::StandardPostchainBGBlurShader::typedReflection(v1290);
      qword_1EE57D858 = (uint64_t)&ggl::StandardPostchainBGBlurShader::typedReflection(void)::ref;
      if ((v1292 & 1) == 0
      {
        ggl::StandardPostchain::pipelineStateBGBlurPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57DE50 = 0;
        qword_1EE57DE58 = (uint64_t)"";
        dword_1EE57DE60 = 0;
        qword_1EE57DE68 = (uint64_t)&ggl::StandardPostchain::pipelineStateBGBlurPipelineAttributeBinding_0(void)::attr;
        unk_1EE57DE70 = 2;
      }
      qword_1EE57D860 = (uint64_t)&ggl::StandardPostchain::pipelineStateBGBlurPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1EE57D868 = 1;
      qword_1EE57D870 = 0;
      unk_1EE57D878 = 1;
      qword_1EE57D880 = (uint64_t)&ggl::StandardPostchain::pipelineStateBGBlurPipelineDeviceStructBinding(void)::ref;
      unk_1EE57D888 = 0;
      if ((v1293 & 1) == 0
      {
        ggl::StandardPostchain::pipelineStateBGBlurPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57DDF0 = 0;
        qword_1EE57DDF8 = (uint64_t)"cameraProperties";
        dword_1EE57DE00 = 3;
        qword_1EE57DE08 = (uint64_t)&ggl::StandardPostchain::pipelineStateBGBlurPipelineConstantCameraPropertiesBinding(void)::reflection;
        unk_1EE57DE10 = 5;
      }
      qword_1EE57D890 = (uint64_t)&ggl::StandardPostchain::pipelineStateBGBlurPipelineConstantStructBinding(void)::ref;
      unk_1EE57D898 = 1;
    }
  }
  v533 = v1347;
  if (*((_QWORD *)&v1347 + 1))
  {
    v534 = (unint64_t *)(*((_QWORD *)&v1347 + 1) + 8);
    do
      v535 = __ldxr(v534);
    while (__stxr(v535 + 1, v534));
    *((_DWORD *)v531 + 14) = 0;
    *((_QWORD *)v531 + 5) = 0;
    *((_QWORD *)v531 + 6) = 0;
    *((_QWORD *)v531 + 3) = &off_1E42B6760;
    *((_QWORD *)v531 + 4) = 0;
    *((_QWORD *)v531 + 8) = &ggl::StandardPostchain::BGBlurPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v531 + 72) = v533;
    do
      v536 = __ldxr(v534);
    while (__stxr(v536 + 1, v534));
  }
  else
  {
    *((_DWORD *)v531 + 14) = 0;
    *((_QWORD *)v531 + 5) = 0;
    *((_QWORD *)v531 + 6) = 0;
    *((_QWORD *)v531 + 3) = &off_1E42B6760;
    *((_QWORD *)v531 + 4) = 0;
    *((_QWORD *)v531 + 8) = &ggl::StandardPostchain::BGBlurPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v531 + 72) = v533;
  }
  v531[136] = 0;
  *(_OWORD *)(v531 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v531 + 156) = 0;
  *(_QWORD *)(v531 + 172) = 0;
  *(_QWORD *)(v531 + 164) = 0;
  v531[184] = 0;
  *(_OWORD *)(v531 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v531 + 204) = 0;
  *(_QWORD *)(v531 + 220) = 0;
  *(_QWORD *)(v531 + 212) = 0;
  v531[232] = 0;
  *(_OWORD *)(v531 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v531 + 252) = 0;
  *(_QWORD *)(v531 + 268) = 0;
  *(_QWORD *)(v531 + 260) = 0;
  *((_QWORD *)v531 + 37) = *(_QWORD *)&v1417[16];
  *(_OWORD *)(v531 + 280) = *(_OWORD *)v1417;
  *((_QWORD *)v531 + 38) = 1;
  v531[312] = 0;
  *((_QWORD *)v531 + 48) = 0;
  *((_OWORD *)v531 + 22) = 0u;
  *((_OWORD *)v531 + 23) = 0u;
  *((_OWORD *)v531 + 20) = 0u;
  *((_OWORD *)v531 + 21) = 0u;
  *((_QWORD *)v531 + 49) = 0x100000001;
  v531[400] = 0;
  v531[88] = 0;
  *(_WORD *)(v531 + 89) = v1410;
  v531[91] = BYTE2(v1410);
  *(_OWORD *)(v531 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v531 + 108) = v1341;
  *((_DWORD *)v531 + 32) = 0;
  *((_QWORD *)v531 + 15) = 0;
  *((_DWORD *)v531 + 29) = 0;
  v531[132] = 15;
  if (*((_QWORD *)&v533 + 1))
  {
    v537 = (unint64_t *)(*((_QWORD *)&v533 + 1) + 8);
    do
      v538 = __ldaxr(v537);
    while (__stlxr(v538 - 1, v537));
    if (!v538)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v533 + 1) + 16))(*((_QWORD *)&v533 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v533 + 1));
    }
  }
  v531[329] = 0;
  v539 = vceqzq_s8(*(int8x16_t *)(v531 + 328));
  v540 = vmovl_high_s8(v539);
  v541 = vmovl_s16(*(int16x4_t *)v540.i8);
  v542.i64[0] = v541.u32[0];
  v542.i64[1] = v541.u32[1];
  v543 = v542;
  v544 = vmovl_s8(*(int8x8_t *)v539.i8);
  v545 = vmovl_s16(*(int16x4_t *)v544.i8);
  v542.i64[0] = v545.u32[0];
  v542.i64[1] = v545.u32[1];
  v546 = v542;
  v547 = vmovl_high_s16(v540);
  v542.i64[0] = v547.u32[0];
  v542.i64[1] = v547.u32[1];
  v548 = v542;
  v549 = vmovl_high_s16(v544);
  v542.i64[0] = v549.u32[0];
  v542.i64[1] = v549.u32[1];
  v550 = v542;
  v542.i64[0] = v541.u32[2];
  v542.i64[1] = v541.u32[3];
  v551 = v542;
  v542.i64[0] = v545.u32[2];
  v542.i64[1] = v545.u32[3];
  v552 = v542;
  v542.i64[0] = v547.u32[2];
  v542.i64[1] = v547.u32[3];
  v553 = v542;
  v542.i64[0] = v549.u32[2];
  v542.i64[1] = v549.u32[3];
  v554 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v542);
  v555 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v553);
  v556 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v552);
  v557 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v548);
  v558 = vceqzq_s8(*(int8x16_t *)(v531 + 344));
  v559 = vmovl_high_s8(v558);
  v560 = vmovl_s16(*(int16x4_t *)v559.i8);
  v542.i64[0] = v560.u32[0];
  v542.i64[1] = v560.u32[1];
  v561 = v542;
  v562 = vmovl_s8(*(int8x8_t *)v558.i8);
  v563 = vmovl_s16(*(int16x4_t *)v562.i8);
  v542.i64[0] = v563.u32[0];
  v542.i64[1] = v563.u32[1];
  v564 = v542;
  v565 = vmovl_high_s16(v559);
  v542.i64[0] = v565.u32[0];
  v542.i64[1] = v565.u32[1];
  v566 = v542;
  v567 = vmovl_high_s16(v562);
  v542.i64[0] = v567.u32[0];
  v542.i64[1] = v567.u32[1];
  v568 = v542;
  v542.i64[0] = v560.u32[2];
  v542.i64[1] = v560.u32[3];
  v569 = v542;
  v542.i64[0] = v563.u32[2];
  v542.i64[1] = v563.u32[3];
  v570 = v542;
  v542.i64[0] = v565.u32[2];
  v542.i64[1] = v565.u32[3];
  v571 = v542;
  v542.i64[0] = v567.u32[2];
  v542.i64[1] = v567.u32[3];
  v572 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v571);
  v573 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v561), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v543));
  v574 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v564), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v546));
  v575 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v566), v557);
  v576 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v568), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v550));
  v577 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v569), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v551));
  v578 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v570), v556);
  v579 = vorrq_s8(v572, v555);
  v580 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v542), v554);
  v581 = vceqzq_s8(*(int8x16_t *)(v531 + 360));
  v582 = vmovl_s8(*(int8x8_t *)v581.i8);
  v583 = vmovl_high_s16(v582);
  v584 = vmovl_high_s8(v581);
  v585 = vmovl_high_s16(v584);
  v586 = vmovl_s16(*(int16x4_t *)v582.i8);
  v587 = vmovl_s16(*(int16x4_t *)v584.i8);
  v542.i64[0] = v586.i32[0];
  v542.i64[1] = v586.i32[1];
  v588 = v542;
  v542.i64[0] = v587.i32[0];
  v542.i64[1] = v587.i32[1];
  v589 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v542);
  v590 = vceqzq_s8(*(int8x16_t *)(v531 + 376));
  v591 = vmovl_high_s8(v590);
  v592 = vmovl_s16(*(int16x4_t *)v591.i8);
  v542.i64[0] = v592.i32[0];
  v542.i64[1] = v592.i32[1];
  v593 = vmovl_s8(*(int8x8_t *)v590.i8);
  v594 = vmovl_s16(*(int16x4_t *)v593.i8);
  v595 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v542), v589), v573);
  v542.i64[0] = v594.i32[0];
  v542.i64[1] = v594.i32[1];
  v596 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v542), vbicq_s8((int8x16_t)xmmword_19FFB3170, v588));
  v542.i64[0] = v585.i32[0];
  v542.i64[1] = v585.i32[1];
  v597 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v542);
  v598 = vmovl_high_s16(v591);
  v599 = vorrq_s8(v596, v574);
  v542.i64[0] = v598.i32[0];
  v542.i64[1] = v598.i32[1];
  v600 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v542), v597);
  v542.i64[0] = v583.i32[0];
  v542.i64[1] = v583.i32[1];
  v601 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v542);
  v602 = vmovl_high_s16(v593);
  v542.i64[0] = v602.i32[0];
  v542.i64[1] = v602.i32[1];
  v603 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v542), v601), v576);
  v542.i64[0] = v587.i32[2];
  v542.i64[1] = v587.i32[3];
  v604 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v542);
  v542.i64[0] = v592.i32[2];
  v542.i64[1] = v592.i32[3];
  v605 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v542), v604), v577);
  v542.i64[0] = v586.i32[2];
  v542.i64[1] = v586.i32[3];
  v606 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v542);
  v542.i64[0] = v594.i32[2];
  v542.i64[1] = v594.i32[3];
  v607 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v542), v606), v578);
  v542.i64[0] = v585.i32[2];
  v542.i64[1] = v585.i32[3];
  v608 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v542);
  v542.i64[0] = v598.i32[2];
  v542.i64[1] = v598.i32[3];
  v609 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v542), v608), v579);
  v542.i64[0] = v583.i32[2];
  v542.i64[1] = v583.i32[3];
  v610 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v542);
  v542.i64[0] = v602.i32[2];
  v542.i64[1] = v602.i32[3];
  *((_QWORD *)v531 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v599, v595), vorrq_s8(v603, vorrq_s8(v600, v575))), (int64x2_t)vorrq_s8(vorrq_s8(v607, v605), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v542), v610), v580), v609))));
  *((_QWORD *)v531 + 3) = &off_1E42BA270;
  v531[312] = 1;
  v611 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 46) = v531 + 24;
  *((_QWORD *)this + 47) = v531;
  if (v611)
  {
    v612 = (unint64_t *)&v611->__shared_owners_;
    do
      v613 = __ldaxr(v612);
    while (__stlxr(v613 - 1, v612));
    if (!v613)
    {
      ((void (*)(std::__shared_weak_count *))v611->__on_zero_shared)(v611);
      std::__shared_weak_count::__release_weak(v611);
    }
  }
  if (*((_QWORD *)&v1347 + 1))
  {
    v614 = (unint64_t *)(*((_QWORD *)&v1347 + 1) + 8);
    do
      v615 = __ldaxr(v614);
    while (__stlxr(v615 - 1, v614));
    if (!v615)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v1347 + 1) + 16))(*((_QWORD *)&v1347 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1347 + 1));
    }
  }
  v616 = operator new(0x100uLL);
  v617 = v616;
  v616[1] = 0;
  v616[2] = 0;
  *v616 = &off_1E42E3190;
  v618 = v616 + 3;
  v619 = *((_QWORD *)this + 44);
  v620 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (v620)
  {
    v621 = (unint64_t *)&v620->__shared_owners_;
    do
      v622 = __ldxr(v621);
    while (__stxr(v622 + 1, v621));
    ggl::PipelineSetup::PipelineSetup(v616 + 3, v619, (uint64_t)v620);
    v623 = (unint64_t *)&v620->__shared_owners_;
    do
      v624 = __ldaxr(v623);
    while (__stlxr(v624 - 1, v623));
    if (!v624)
    {
      ((void (*)(std::__shared_weak_count *))v620->__on_zero_shared)(v620);
      std::__shared_weak_count::__release_weak(v620);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v616 + 3, v619, 0);
  }
  v617[3] = &off_1E42BA290;
  v625 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
  *((_QWORD *)this + 48) = v618;
  *((_QWORD *)this + 49) = v617;
  if (v625)
  {
    v626 = (unint64_t *)&v625->__shared_owners_;
    do
      v627 = __ldaxr(v626);
    while (__stlxr(v627 - 1, v626));
    if (!v627)
    {
      ((void (*)(std::__shared_weak_count *))v625->__on_zero_shared)(v625);
      std::__shared_weak_count::__release_weak(v625);
    }
  }
  v628 = *((_QWORD *)this + 48);
  v629 = *(_QWORD **)(v628 + 64);
  v629[1] = 0;
  v630 = *((_QWORD *)this + 9);
  *v629 = v630;
  v631 = *(_QWORD **)(v628 + 160);
  v632 = *((_QWORD *)this + 10);
  if (v632)
  {
    v633 = (unint64_t *)(v632 + 8);
    do
      v634 = __ldxr(v633);
    while (__stxr(v634 + 1, v633));
  }
  v635 = (std::__shared_weak_count *)v631[1];
  *v631 = v630;
  v631[1] = v632;
  if (v635)
  {
    v636 = (unint64_t *)&v635->__shared_owners_;
    do
      v637 = __ldaxr(v636);
    while (__stlxr(v637 - 1, v636));
    if (!v637)
    {
      ((void (*)(std::__shared_weak_count *))v635->__on_zero_shared)(v635);
      std::__shared_weak_count::__release_weak(v635);
    }
  }
  v638 = operator new(0x100uLL);
  v639 = v638;
  v638[1] = 0;
  v638[2] = 0;
  *v638 = &off_1E42E3120;
  v640 = v638 + 3;
  v641 = *((_QWORD *)this + 46);
  v642 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
  if (v642)
  {
    v643 = (unint64_t *)&v642->__shared_owners_;
    do
      v644 = __ldxr(v643);
    while (__stxr(v644 + 1, v643));
    ggl::PipelineSetup::PipelineSetup(v638 + 3, v641, (uint64_t)v642);
    v645 = (unint64_t *)&v642->__shared_owners_;
    do
      v646 = __ldaxr(v645);
    while (__stlxr(v646 - 1, v645));
    if (!v646)
    {
      ((void (*)(std::__shared_weak_count *))v642->__on_zero_shared)(v642);
      std::__shared_weak_count::__release_weak(v642);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v638 + 3, v641, 0);
  }
  v639[3] = &off_1E42BA240;
  v647 = (std::__shared_weak_count *)*((_QWORD *)this + 51);
  *((_QWORD *)this + 50) = v640;
  *((_QWORD *)this + 51) = v639;
  if (v647)
  {
    v648 = (unint64_t *)&v647->__shared_owners_;
    do
      v649 = __ldaxr(v648);
    while (__stlxr(v649 - 1, v648));
    if (!v649)
    {
      ((void (*)(std::__shared_weak_count *))v647->__on_zero_shared)(v647);
      std::__shared_weak_count::__release_weak(v647);
    }
  }
  v650 = *((_QWORD *)this + 50);
  v651 = *(_QWORD **)(v650 + 64);
  v651[1] = 0;
  v652 = *((_QWORD *)this + 9);
  *v651 = v652;
  v653 = *(_QWORD **)(v650 + 160);
  v654 = *((_QWORD *)this + 10);
  if (v654)
  {
    v655 = (unint64_t *)(v654 + 8);
    do
      v656 = __ldxr(v655);
    while (__stxr(v656 + 1, v655));
  }
  v657 = (std::__shared_weak_count *)v653[1];
  *v653 = v652;
  v653[1] = v654;
  if (v657)
  {
    v658 = (unint64_t *)&v657->__shared_owners_;
    do
      v659 = __ldaxr(v658);
    while (__stlxr(v659 - 1, v658));
    if (!v659)
    {
      ((void (*)(std::__shared_weak_count *))v657->__on_zero_shared)(v657);
      std::__shared_weak_count::__release_weak(v657);
    }
  }
  v660 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v1340, "shaderLibrary") + 80);
  v661 = *(_QWORD *)(v660 + 2600);
  v662 = *(_QWORD *)(v660 + 2608);
  *(_QWORD *)&v1341 = v661;
  *((_QWORD *)&v1341 + 1) = v662;
  if (v662)
  {
    v663 = (unint64_t *)(v662 + 8);
    do
      v664 = __ldxr(v663);
    while (__stxr(v664 + 1, v663));
  }
  *(_QWORD *)&v1417[28] = 0;
  *(_QWORD *)&v1417[20] = 0;
  v1418 = 0;
  v1417[0] = 0;
  *(_OWORD *)&v1417[4] = xmmword_19FFB3060;
  v1419 = 15;
  v665 = operator new(0x198uLL);
  v665[1] = 0;
  v665[2] = 0;
  *v665 = &off_1E42E32A8;
  v1347 = v1358;
  v1348 = v1359;
  v1349 = 1;
  v666 = ggl::StandardPostchain::TentBlurPipelineState::TentBlurPipelineState((uint64_t)(v665 + 3), &v1341, (uint64_t)v1417, &v1347);
  v667 = (std::__shared_weak_count *)*((_QWORD *)this + 57);
  *((_QWORD *)this + 56) = v666;
  *((_QWORD *)this + 57) = v665;
  if (v667)
  {
    v668 = (unint64_t *)&v667->__shared_owners_;
    do
      v669 = __ldaxr(v668);
    while (__stlxr(v669 - 1, v668));
    if (!v669)
    {
      ((void (*)(std::__shared_weak_count *))v667->__on_zero_shared)(v667);
      std::__shared_weak_count::__release_weak(v667);
    }
  }
  v670 = (std::__shared_weak_count *)*((_QWORD *)&v1341 + 1);
  if (*((_QWORD *)&v1341 + 1))
  {
    v671 = (unint64_t *)(*((_QWORD *)&v1341 + 1) + 8);
    do
      v672 = __ldaxr(v671);
    while (__stlxr(v672 - 1, v671));
    if (!v672)
    {
      ((void (*)(std::__shared_weak_count *))v670->__on_zero_shared)(v670);
      std::__shared_weak_count::__release_weak(v670);
    }
  }
  v673 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v1340, "shaderLibrary") + 80);
  v674 = *(_QWORD *)(v673 + 2600);
  v675 = *(_QWORD *)(v673 + 2608);
  *(_QWORD *)&v1341 = v674;
  *((_QWORD *)&v1341 + 1) = v675;
  if (v675)
  {
    v676 = (unint64_t *)(v675 + 8);
    do
      v677 = __ldxr(v676);
    while (__stxr(v677 + 1, v676));
  }
  *(_QWORD *)&v1417[28] = 0;
  *(_QWORD *)&v1417[20] = 0;
  v1418 = 0;
  v1417[0] = 0;
  *(_OWORD *)&v1417[4] = xmmword_19FFB3060;
  v1419 = 15;
  v678 = operator new(0x198uLL);
  v678[1] = 0;
  v678[2] = 0;
  *v678 = &off_1E42E32A8;
  v1347 = v1358;
  v1348 = v1359;
  v1349 = 1;
  v679 = ggl::StandardPostchain::TentBlurPipelineState::TentBlurPipelineState((uint64_t)(v678 + 3), &v1341, (uint64_t)v1417, &v1347);
  v680 = (std::__shared_weak_count *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 58) = v679;
  *((_QWORD *)this + 59) = v678;
  if (v680)
  {
    v681 = (unint64_t *)&v680->__shared_owners_;
    do
      v682 = __ldaxr(v681);
    while (__stlxr(v682 - 1, v681));
    if (!v682)
    {
      ((void (*)(std::__shared_weak_count *))v680->__on_zero_shared)(v680);
      std::__shared_weak_count::__release_weak(v680);
    }
  }
  v683 = (std::__shared_weak_count *)*((_QWORD *)&v1341 + 1);
  if (*((_QWORD *)&v1341 + 1))
  {
    v684 = (unint64_t *)(*((_QWORD *)&v1341 + 1) + 8);
    do
      v685 = __ldaxr(v684);
    while (__stlxr(v685 - 1, v684));
    if (!v685)
    {
      ((void (*)(std::__shared_weak_count *))v683->__on_zero_shared)(v683);
      std::__shared_weak_count::__release_weak(v683);
    }
  }
  v686 = operator new(0x100uLL);
  v687 = v686;
  v686[1] = 0;
  v686[2] = 0;
  *v686 = &off_1E42E3270;
  v688 = v686 + 3;
  v689 = *((_QWORD *)this + 56);
  v690 = (std::__shared_weak_count *)*((_QWORD *)this + 57);
  if (v690)
  {
    v691 = (unint64_t *)&v690->__shared_owners_;
    do
      v692 = __ldxr(v691);
    while (__stxr(v692 + 1, v691));
    ggl::PipelineSetup::PipelineSetup(v686 + 3, v689, (uint64_t)v690);
    v693 = (unint64_t *)&v690->__shared_owners_;
    do
      v694 = __ldaxr(v693);
    while (__stlxr(v694 - 1, v693));
    if (!v694)
    {
      ((void (*)(std::__shared_weak_count *))v690->__on_zero_shared)(v690);
      std::__shared_weak_count::__release_weak(v690);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v686 + 3, v689, 0);
  }
  v687[3] = &off_1E42BA330;
  v695 = (std::__shared_weak_count *)*((_QWORD *)this + 61);
  *((_QWORD *)this + 60) = v688;
  *((_QWORD *)this + 61) = v687;
  if (v695)
  {
    v696 = (unint64_t *)&v695->__shared_owners_;
    do
      v697 = __ldaxr(v696);
    while (__stlxr(v697 - 1, v696));
    if (!v697)
    {
      ((void (*)(std::__shared_weak_count *))v695->__on_zero_shared)(v695);
      std::__shared_weak_count::__release_weak(v695);
    }
  }
  v698 = operator new(0x100uLL);
  v699 = v698;
  v698[1] = 0;
  v698[2] = 0;
  *v698 = &off_1E42E3270;
  v700 = v698 + 3;
  v701 = *((_QWORD *)this + 58);
  v702 = (std::__shared_weak_count *)*((_QWORD *)this + 59);
  if (v702)
  {
    v703 = (unint64_t *)&v702->__shared_owners_;
    do
      v704 = __ldxr(v703);
    while (__stxr(v704 + 1, v703));
    ggl::PipelineSetup::PipelineSetup(v698 + 3, v701, (uint64_t)v702);
    v705 = (unint64_t *)&v702->__shared_owners_;
    do
      v706 = __ldaxr(v705);
    while (__stlxr(v706 - 1, v705));
    if (!v706)
    {
      ((void (*)(std::__shared_weak_count *))v702->__on_zero_shared)(v702);
      std::__shared_weak_count::__release_weak(v702);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v698 + 3, v701, 0);
  }
  v699[3] = &off_1E42BA330;
  v707 = (std::__shared_weak_count *)*((_QWORD *)this + 63);
  *((_QWORD *)this + 62) = v700;
  *((_QWORD *)this + 63) = v699;
  if (v707)
  {
    v708 = (unint64_t *)&v707->__shared_owners_;
    do
      v709 = __ldaxr(v708);
    while (__stlxr(v709 - 1, v708));
    if (!v709)
    {
      ((void (*)(std::__shared_weak_count *))v707->__on_zero_shared)(v707);
      std::__shared_weak_count::__release_weak(v707);
    }
  }
  v710 = operator new(0xF0uLL);
  v710[1] = 0;
  v710[2] = 0;
  *v710 = &off_1E42DEA08;
  v710[5] = 0;
  v710[6] = 0;
  v710[4] = 0;
  *((_DWORD *)v710 + 14) = 0;
  v710[3] = &off_1E42B5DE8;
  *(_QWORD *)((char *)v710 + 60) = 65537;
  *((_DWORD *)v710 + 17) = 0;
  v710[9] = 1;
  *((_WORD *)v710 + 40) = 0;
  *((_BYTE *)v710 + 82) = 3;
  *(_QWORD *)((char *)v710 + 91) = 0;
  *(_QWORD *)((char *)v710 + 83) = 0;
  *((_BYTE *)v710 + 99) = 0;
  *(_QWORD *)((char *)v710 + 156) = 0;
  *(_QWORD *)((char *)v710 + 148) = 0;
  *((_WORD *)v710 + 106) = 257;
  v710[27] = 0;
  v710[28] = 0;
  *((_BYTE *)v710 + 232) = 0;
  v711 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 42) = v710 + 3;
  *((_QWORD *)this + 43) = v710;
  if (v711)
  {
    v712 = (unint64_t *)&v711->__shared_owners_;
    do
      v713 = __ldaxr(v712);
    while (__stlxr(v713 - 1, v712));
    if (!v713)
    {
      ((void (*)(std::__shared_weak_count *))v711->__on_zero_shared)(v711);
      std::__shared_weak_count::__release_weak(v711);
    }
  }
  *(_BYTE *)(*((_QWORD *)this + 42) + 58) = 3;
  v714 = operator new(0xA8uLL);
  v714[1] = 0;
  v714[2] = 0;
  *v714 = &off_1E42DE538;
  v715 = ggl::CommonMesh::Pos2UVMesh::Pos2UVMesh((ggl::CommonMesh::Pos2UVMesh *)(v714 + 3), "/Postchain/ScreenMesh");
  v716 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 25) = v715;
  *((_QWORD *)this + 26) = v714;
  if (v716)
  {
    v717 = (unint64_t *)&v716->__shared_owners_;
    do
      v718 = __ldaxr(v717);
    while (__stlxr(v718 - 1, v717));
    if (!v718)
    {
      ((void (*)(std::__shared_weak_count *))v716->__on_zero_shared)(v716);
      std::__shared_weak_count::__release_weak(v716);
    }
  }
  v719 = **(_QWORD **)(*(_QWORD *)v1331 + 64);
  v720 = 4 * *(_QWORD *)(v719 + 8);
  v721 = *(_QWORD *)(v719 + 72);
  v722 = *(_QWORD *)(v719 + 80) - v721;
  if (v720 != v722)
  {
    if (v720 <= v722)
    {
      if (v720 < v722)
        *(_QWORD *)(v719 + 80) = v721 + v720;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v719 + 72, v720 - v722);
    }
    v723 = *(std::__shared_weak_count **)(v719 + 32);
    *(_QWORD *)(v719 + 24) = 0;
    *(_QWORD *)(v719 + 32) = 0;
    if (v723)
    {
      v724 = (unint64_t *)&v723->__shared_owners_;
      do
        v725 = __ldaxr(v724);
      while (__stlxr(v725 - 1, v724));
      if (!v725)
      {
        ((void (*)(std::__shared_weak_count *))v723->__on_zero_shared)(v723);
        std::__shared_weak_count::__release_weak(v723);
      }
    }
    *(_QWORD *)(v719 + 120) = 0;
    *(_DWORD *)(v719 + 112) = 0;
    v726 = *(_QWORD *)(v719 + 80) - *(_QWORD *)(v719 + 72);
    *(_QWORD *)(v719 + 40) = 0;
    *(_QWORD *)(v719 + 48) = v726;
    *(_QWORD *)(v719 + 56) = 0;
    *(_QWORD *)(v719 + 64) = v726;
    v719 = **(_QWORD **)(*(_QWORD *)v1331 + 64);
  }
  v1347 = 0uLL;
  v727 = 4 * *(_QWORD *)(v719 + 8);
  *(_QWORD *)&v728 = 0;
  *((_QWORD *)&v728 + 1) = v719;
  v729 = *(_QWORD *)(v719 + 72);
  v1347 = v728;
  v1348 = 0;
  v1349 = v727;
  v1351 = v729;
  v1350 = 1;
  *(_QWORD *)v729 = 0;
  *(_QWORD *)(v729 + 8) = 0;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(v729 + 16) = xmmword_19FFB3960;
  *(_OWORD *)(v729 + 32) = _Q1;
  *(_OWORD *)(v729 + 48) = xmmword_19FFB3970;
  v735 = operator new(0xF8uLL);
  v735[1] = 0;
  v735[2] = 0;
  *v735 = &off_1E42DF1E8;
  v736 = ggl::BufferData::BufferData((uint64_t)(v735 + 3), 2, 1, 0, 6, 6);
  *((_DWORD *)v735 + 60) = 0;
  v735[3] = &off_1E42B6B88;
  v735[4] = 2;
  v735[28] = &unk_1E42B6BA8;
  v735[29] = "index data";
  v1345 = v736;
  v1346 = (std::__shared_weak_count *)v735;
  v1341 = 0uLL;
  *(_QWORD *)&v737 = 0;
  *((_QWORD *)&v737 + 1) = v736;
  v738 = v735[12];
  v1341 = v737;
  v1342 = xmmword_19FFB3400;
  v1344 = v738;
  v1343 = 1;
  *(_QWORD *)v738 = 0x200010000;
  *(_DWORD *)(v738 + 8) = 196610;
  v739 = *(_QWORD *)v1331;
  v740 = v1345;
  v741 = v1346;
  if (v1346)
  {
    v742 = (unint64_t *)&v1346->__shared_owners_;
    do
      v743 = __ldxr(v742);
    while (__stxr(v743 + 1, v742));
    do
      v744 = __ldxr(v742);
    while (__stxr(v744 + 1, v742));
  }
  v745 = *(std::__shared_weak_count **)(v739 + 104);
  *(_QWORD *)(v739 + 96) = v740;
  *(_QWORD *)(v739 + 104) = v741;
  if (v745)
  {
    v746 = (unint64_t *)&v745->__shared_owners_;
    do
      v747 = __ldaxr(v746);
    while (__stlxr(v747 - 1, v746));
    if (!v747)
    {
      ((void (*)(std::__shared_weak_count *))v745->__on_zero_shared)(v745);
      std::__shared_weak_count::__release_weak(v745);
    }
  }
  if (v741)
  {
    v748 = (unint64_t *)&v741->__shared_owners_;
    do
      v749 = __ldaxr(v748);
    while (__stlxr(v749 - 1, v748));
    if (!v749)
    {
      ((void (*)(std::__shared_weak_count *))v741->__on_zero_shared)(v741);
      std::__shared_weak_count::__release_weak(v741);
    }
  }
  v750 = (int64x2_t *)operator new();
  v751 = *((_QWORD *)this + 28);
  v752 = *((_QWORD *)this + 32);
  v753 = *((_QWORD *)this + 25);
  v750->i64[0] = (uint64_t)&off_1E42B59B0;
  v750[1].i64[0] = (uint64_t)"";
  v750[1].i64[1] = v751;
  v750[2].i64[0] = v752;
  v750[2].i32[2] = 0;
  v750[3].i64[0] = 0;
  v750[3].i32[2] = 1065353216;
  v750[4].i64[0] = v753;
  v750[4].i64[1] = 0;
  v750[5].i64[0] = 0;
  v750[5].i64[1] = 0;
  v750[6] = vdupq_n_s64(1uLL);
  v750[7].i64[0] = 0;
  v754 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = v750;
  if (v754)
    (*(void (**)(uint64_t))(*(_QWORD *)v754 + 8))(v754);
  v755 = (int64x2_t *)operator new();
  v756 = *((_QWORD *)this + 35);
  v757 = *((_QWORD *)this + 39);
  v758 = *((_QWORD *)this + 25);
  v755->i64[0] = (uint64_t)&off_1E42B59B0;
  v755[1].i64[0] = (uint64_t)"";
  v755[1].i64[1] = v756;
  v755[2].i64[0] = v757;
  v755[2].i32[2] = 0;
  v755[3].i64[0] = 0;
  v755[3].i32[2] = 1065353216;
  v755[4].i64[0] = v758;
  v755[4].i64[1] = 0;
  v755[5].i64[0] = 0;
  v755[5].i64[1] = 0;
  v755[6] = vdupq_n_s64(1uLL);
  v755[7].i64[0] = 0;
  v759 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = v755;
  if (v759)
    (*(void (**)(uint64_t))(*(_QWORD *)v759 + 8))(v759);
  v760 = (int64x2_t *)operator new();
  v761 = *((_QWORD *)this + 42);
  v762 = *((_QWORD *)this + 48);
  v763 = *((_QWORD *)this + 25);
  v760->i64[0] = (uint64_t)&off_1E42B59B0;
  v760[1].i64[0] = (uint64_t)"";
  v760[1].i64[1] = v761;
  v760[2].i64[0] = v762;
  v760[2].i32[2] = 0;
  v760[3].i64[0] = 0;
  v760[3].i32[2] = 1065353216;
  v760[4].i64[0] = v763;
  v760[4].i64[1] = 0;
  v760[5].i64[0] = 0;
  v760[5].i64[1] = 0;
  v760[6] = vdupq_n_s64(1uLL);
  v760[7].i64[0] = 0;
  v764 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = v760;
  if (v764)
    (*(void (**)(uint64_t))(*(_QWORD *)v764 + 8))(v764);
  v765 = (int64x2_t *)operator new();
  v766 = *((_QWORD *)this + 42);
  v767 = *((_QWORD *)this + 50);
  v768 = *((_QWORD *)this + 25);
  v765->i64[0] = (uint64_t)&off_1E42B59B0;
  v765[1].i64[0] = (uint64_t)"";
  v765[1].i64[1] = v766;
  v765[2].i64[0] = v767;
  v765[2].i32[2] = 0;
  v765[3].i64[0] = 0;
  v765[3].i32[2] = 1065353216;
  v765[4].i64[0] = v768;
  v765[4].i64[1] = 0;
  v765[5].i64[0] = 0;
  v765[5].i64[1] = 0;
  v765[6] = vdupq_n_s64(1uLL);
  v765[7].i64[0] = 0;
  v769 = *((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = v765;
  if (v769)
    (*(void (**)(uint64_t))(*(_QWORD *)v769 + 8))(v769);
  v770 = (int64x2_t *)operator new();
  v771 = *((_QWORD *)this + 42);
  v772 = *((_QWORD *)this + 60);
  v773 = *((_QWORD *)this + 25);
  v770->i64[0] = (uint64_t)&off_1E42B59B0;
  v770[1].i64[0] = (uint64_t)"";
  v770[1].i64[1] = v771;
  v770[2].i64[0] = v772;
  v770[2].i32[2] = 0;
  v770[3].i64[0] = 0;
  v770[3].i32[2] = 1065353216;
  v770[4].i64[0] = v773;
  v770[4].i64[1] = 0;
  v770[5].i64[0] = 0;
  v770[5].i64[1] = 0;
  v770[6] = vdupq_n_s64(1uLL);
  v770[7].i64[0] = 0;
  v774 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = v770;
  if (v774)
    (*(void (**)(uint64_t))(*(_QWORD *)v774 + 8))(v774);
  v775 = (int64x2_t *)operator new();
  v776 = *((_QWORD *)this + 42);
  v777 = *((_QWORD *)this + 62);
  v778 = *((_QWORD *)this + 25);
  v775->i64[0] = (uint64_t)&off_1E42B59B0;
  v775[1].i64[0] = (uint64_t)"";
  v775[1].i64[1] = v776;
  v775[2].i64[0] = v777;
  v775[2].i32[2] = 0;
  v775[3].i64[0] = 0;
  v775[3].i32[2] = 1065353216;
  v775[4].i64[0] = v778;
  v775[4].i64[1] = 0;
  v775[5].i64[0] = 0;
  v775[5].i64[1] = 0;
  v775[6] = vdupq_n_s64(1uLL);
  v775[7].i64[0] = 0;
  v779 = *((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = v775;
  if (v779)
    (*(void (**)(uint64_t))(*(_QWORD *)v779 + 8))(v779);
  v780 = (int64x2_t *)operator new();
  v781 = *((_QWORD *)this + 19);
  v782 = *((_QWORD *)this + 23);
  v783 = *((_QWORD *)this + 25);
  v780->i64[0] = (uint64_t)&off_1E42B59B0;
  v780[1].i64[0] = (uint64_t)"";
  v780[1].i64[1] = v781;
  v780[2].i64[0] = v782;
  v780[2].i32[2] = 0;
  v780[3].i64[0] = 0;
  v780[3].i32[2] = 1065353216;
  v780[4].i64[0] = v783;
  v780[4].i64[1] = 0;
  v780[5].i64[0] = 0;
  v780[5].i64[1] = 0;
  v780[6] = vdupq_n_s64(1uLL);
  v780[7].i64[0] = 0;
  v784 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = v780;
  if (v784)
    (*(void (**)(uint64_t))(*(_QWORD *)v784 + 8))(v784);
  v785 = v1340;
  v1416 = 0;
  v1415 = 0;
  v786 = operator new(0xF0uLL);
  v786[1] = 0;
  v786[2] = 0;
  *v786 = &off_1E42DEA08;
  v786[5] = 0;
  v786[6] = 0;
  v786[4] = 0;
  *((_DWORD *)v786 + 14) = 0;
  v786[3] = &off_1E42B5DE8;
  *(_QWORD *)((char *)v786 + 60) = 65537;
  *((_DWORD *)v786 + 17) = 0;
  v786[9] = 1;
  *((_WORD *)v786 + 40) = 0;
  *((_BYTE *)v786 + 82) = 3;
  *(_QWORD *)((char *)v786 + 91) = 0;
  *(_QWORD *)((char *)v786 + 83) = 0;
  *((_BYTE *)v786 + 99) = 0;
  *(_QWORD *)((char *)v786 + 156) = 0;
  *(_QWORD *)((char *)v786 + 148) = 0;
  *((_WORD *)v786 + 106) = 257;
  v786[27] = 0;
  v786[28] = 0;
  *((_BYTE *)v786 + 232) = 0;
  *((_QWORD *)this + 66) = v786 + 3;
  v787 = (std::__shared_weak_count *)*((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = v786;
  if (v787)
  {
    v788 = (unint64_t *)&v787->__shared_owners_;
    do
      v789 = __ldaxr(v788);
    while (__stlxr(v789 - 1, v788));
    if (!v789)
    {
      ((void (*)(std::__shared_weak_count *))v787->__on_zero_shared)(v787);
      std::__shared_weak_count::__release_weak(v787);
    }
  }
  *(_BYTE *)(*((_QWORD *)this + 66) + 58) = 3;
  {
    v1294 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1294, "GeoGL", 0xA3D02C1100000005);
  }
  v791 = ggl::Allocator::instance(void)::alloc;
  v792 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)ggl::Allocator::instance(void)::alloc
                                                                        + 16))(ggl::Allocator::instance(void)::alloc, 240, 8);
  *v792 = &off_1E42E1830;
  v792[1] = 0;
  v792[2] = 0;
  v792[3] = v791;
  v793 = ggl::BufferData::BufferData((uint64_t)(v792 + 4), qword_1EE5611B8, 2, 1, 6, 1);
  v792[29] = ggl::PostchainCommon::SSAOConstants::reflection(void)::reflection;
  v792[4] = &off_1E42B9190;
  v794 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 11) = v793;
  *((_QWORD *)this + 12) = v792;
  if (v794)
  {
    v795 = (unint64_t *)&v794->__shared_owners_;
    do
      v796 = __ldaxr(v795);
    while (__stlxr(v796 - 1, v795));
    if (!v796)
    {
      ((void (*)(std::__shared_weak_count *))v794->__on_zero_shared)(v794);
      std::__shared_weak_count::__release_weak(v794);
    }
  }
  v797 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v785, "shaderLibrary") + 80);
  v798 = *(_QWORD *)(v797 + 2696);
  v799 = *(std::__shared_weak_count **)(v797 + 2704);
  v1408 = v798;
  v1409 = v799;
  if (v799)
  {
    v800 = (unint64_t *)&v799->__shared_owners_;
    do
      v801 = __ldxr(v800);
    while (__stxr(v801 + 1, v800));
  }
  v1417[0] = 0;
  *(_OWORD *)&v1417[4] = xmmword_19FFB3060;
  *(_QWORD *)&v1417[28] = 0;
  v1418 = 0;
  *(_QWORD *)&v1417[20] = 0;
  v1419 = 15;
  v802 = operator new(0x198uLL);
  v802[1] = 0;
  v802[2] = 0;
  *v802 = &off_1E42E30E8;
  LODWORD(v1410) = 2;
  *(_QWORD *)((char *)&v1410 + 4) = v1415;
  HIDWORD(v1410) = v1416;
  v1411 = 1;
  v1412 = 1;
  *((_QWORD *)this + 68) = ggl::StandardPostchain::SSAOPipelineState::SSAOPipelineState((uint64_t)(v802 + 3), &v1408, (uint64_t)v1417, &v1410, 0);
  v803 = (std::__shared_weak_count *)*((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = v802;
  if (v803)
  {
    v804 = (unint64_t *)&v803->__shared_owners_;
    do
      v805 = __ldaxr(v804);
    while (__stlxr(v805 - 1, v804));
    if (!v805)
    {
      ((void (*)(std::__shared_weak_count *))v803->__on_zero_shared)(v803);
      std::__shared_weak_count::__release_weak(v803);
    }
  }
  v806 = v1409;
  if (v1409)
  {
    v807 = (unint64_t *)&v1409->__shared_owners_;
    do
      v808 = __ldaxr(v807);
    while (__stlxr(v808 - 1, v807));
    if (!v808)
    {
      ((void (*)(std::__shared_weak_count *))v806->__on_zero_shared)(v806);
      std::__shared_weak_count::__release_weak(v806);
    }
  }
  v809 = operator new(0x100uLL);
  v810 = v809;
  v809[1] = 0;
  v809[2] = 0;
  *v809 = &off_1E42E30B0;
  v811 = v809 + 3;
  v812 = *((_QWORD *)this + 68);
  v813 = (std::__shared_weak_count *)*((_QWORD *)this + 69);
  if (v813)
  {
    v814 = (unint64_t *)&v813->__shared_owners_;
    do
      v815 = __ldxr(v814);
    while (__stxr(v815 + 1, v814));
    ggl::PipelineSetup::PipelineSetup(v809 + 3, v812, (uint64_t)v813);
    v816 = (unint64_t *)&v813->__shared_owners_;
    do
      v817 = __ldaxr(v816);
    while (__stlxr(v817 - 1, v816));
    if (!v817)
    {
      ((void (*)(std::__shared_weak_count *))v813->__on_zero_shared)(v813);
      std::__shared_weak_count::__release_weak(v813);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v809 + 3, v812, 0);
  }
  v810[3] = &off_1E42BA1F0;
  *((_QWORD *)this + 72) = v811;
  v818 = (std::__shared_weak_count *)*((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = v810;
  if (v818)
  {
    v819 = (unint64_t *)&v818->__shared_owners_;
    do
      v820 = __ldaxr(v819);
    while (__stlxr(v820 - 1, v819));
    if (!v820)
    {
      ((void (*)(std::__shared_weak_count *))v818->__on_zero_shared)(v818);
      std::__shared_weak_count::__release_weak(v818);
    }
  }
  v821 = *((_QWORD *)this + 72);
  v822 = *(_QWORD **)(v821 + 64);
  v822[1] = 0;
  v823 = *((_QWORD *)this + 11);
  *v822 = v823;
  v824 = *(_QWORD **)(v821 + 160);
  v825 = *((_QWORD *)this + 12);
  if (v825)
  {
    v826 = (unint64_t *)(v825 + 8);
    do
      v827 = __ldxr(v826);
    while (__stxr(v827 + 1, v826));
  }
  v828 = (std::__shared_weak_count *)v824[1];
  *v824 = v823;
  v824[1] = v825;
  if (v828)
  {
    v829 = (unint64_t *)&v828->__shared_owners_;
    do
      v830 = __ldaxr(v829);
    while (__stlxr(v830 - 1, v829));
    if (!v830)
    {
      ((void (*)(std::__shared_weak_count *))v828->__on_zero_shared)(v828);
      std::__shared_weak_count::__release_weak(v828);
    }
  }
  v831 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v785, "shaderLibrary") + 80);
  v832 = *(_QWORD *)(v831 + 2696);
  v833 = *(std::__shared_weak_count **)(v831 + 2704);
  v1408 = v832;
  v1409 = v833;
  if (v833)
  {
    v834 = (unint64_t *)&v833->__shared_owners_;
    do
      v835 = __ldxr(v834);
    while (__stxr(v835 + 1, v834));
  }
  v1417[0] = 0;
  *(_OWORD *)&v1417[4] = xmmword_19FFB3060;
  *(_QWORD *)&v1417[28] = 0;
  v1418 = 0;
  *(_QWORD *)&v1417[20] = 0;
  v1419 = 15;
  v836 = operator new(0x198uLL);
  v836[1] = 0;
  v836[2] = 0;
  *v836 = &off_1E42E30E8;
  LODWORD(v1410) = 2;
  *(_QWORD *)((char *)&v1410 + 4) = v1415;
  HIDWORD(v1410) = v1416;
  v1411 = 1;
  v1412 = 1;
  *((_QWORD *)this + 70) = ggl::StandardPostchain::SSAOPipelineState::SSAOPipelineState((uint64_t)(v836 + 3), &v1408, (uint64_t)v1417, &v1410, 2);
  v837 = (std::__shared_weak_count *)*((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = v836;
  if (v837)
  {
    v838 = (unint64_t *)&v837->__shared_owners_;
    do
      v839 = __ldaxr(v838);
    while (__stlxr(v839 - 1, v838));
    if (!v839)
    {
      ((void (*)(std::__shared_weak_count *))v837->__on_zero_shared)(v837);
      std::__shared_weak_count::__release_weak(v837);
    }
  }
  v840 = v1409;
  if (v1409)
  {
    v841 = (unint64_t *)&v1409->__shared_owners_;
    do
      v842 = __ldaxr(v841);
    while (__stlxr(v842 - 1, v841));
    if (!v842)
    {
      ((void (*)(std::__shared_weak_count *))v840->__on_zero_shared)(v840);
      std::__shared_weak_count::__release_weak(v840);
    }
  }
  v843 = operator new(0x100uLL);
  v844 = v843;
  v843[1] = 0;
  v843[2] = 0;
  *v843 = &off_1E42E30B0;
  v845 = v843 + 3;
  v846 = *((_QWORD *)this + 70);
  v847 = (std::__shared_weak_count *)*((_QWORD *)this + 71);
  if (v847)
  {
    v848 = (unint64_t *)&v847->__shared_owners_;
    do
      v849 = __ldxr(v848);
    while (__stxr(v849 + 1, v848));
    ggl::PipelineSetup::PipelineSetup(v843 + 3, v846, (uint64_t)v847);
    v850 = (unint64_t *)&v847->__shared_owners_;
    do
      v851 = __ldaxr(v850);
    while (__stlxr(v851 - 1, v850));
    if (!v851)
    {
      ((void (*)(std::__shared_weak_count *))v847->__on_zero_shared)(v847);
      std::__shared_weak_count::__release_weak(v847);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v843 + 3, v846, 0);
  }
  v844[3] = &off_1E42BA1F0;
  *((_QWORD *)this + 74) = v845;
  v852 = (std::__shared_weak_count *)*((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = v844;
  if (v852)
  {
    v853 = (unint64_t *)&v852->__shared_owners_;
    do
      v854 = __ldaxr(v853);
    while (__stlxr(v854 - 1, v853));
    if (!v854)
    {
      ((void (*)(std::__shared_weak_count *))v852->__on_zero_shared)(v852);
      std::__shared_weak_count::__release_weak(v852);
    }
  }
  v855 = *((_QWORD *)this + 74);
  v856 = *(_QWORD **)(v855 + 64);
  v856[1] = 0;
  v857 = *((_QWORD *)this + 11);
  *v856 = v857;
  v858 = *(_QWORD **)(v855 + 160);
  v859 = *((_QWORD *)this + 12);
  if (v859)
  {
    v860 = (unint64_t *)(v859 + 8);
    do
      v861 = __ldxr(v860);
    while (__stxr(v861 + 1, v860));
  }
  v862 = (std::__shared_weak_count *)v858[1];
  *v858 = v857;
  v858[1] = v859;
  if (v862)
  {
    v863 = (unint64_t *)&v862->__shared_owners_;
    do
      v864 = __ldaxr(v863);
    while (__stlxr(v864 - 1, v863));
    if (!v864)
    {
      ((void (*)(std::__shared_weak_count *))v862->__on_zero_shared)(v862);
      std::__shared_weak_count::__release_weak(v862);
    }
  }

  v865 = v785;
  v866 = operator new(0xF0uLL);
  v866[1] = 0;
  v866[2] = 0;
  *v866 = &off_1E42DEA08;
  v866[5] = 0;
  v866[6] = 0;
  v866[4] = 0;
  *((_DWORD *)v866 + 14) = 0;
  v866[3] = &off_1E42B5DE8;
  *(_QWORD *)((char *)v866 + 60) = 65537;
  *((_DWORD *)v866 + 17) = 0;
  v866[9] = 1;
  *((_WORD *)v866 + 40) = 0;
  *((_BYTE *)v866 + 82) = 3;
  *(_QWORD *)((char *)v866 + 91) = 0;
  *(_QWORD *)((char *)v866 + 83) = 0;
  *((_BYTE *)v866 + 99) = 0;
  *(_QWORD *)((char *)v866 + 156) = 0;
  *(_QWORD *)((char *)v866 + 148) = 0;
  *((_WORD *)v866 + 106) = 257;
  v866[27] = 0;
  v866[28] = 0;
  *((_BYTE *)v866 + 232) = 0;
  *((_QWORD *)this + 78) = v866 + 3;
  v867 = (std::__shared_weak_count *)*((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = v866;
  if (v867)
  {
    v868 = (unint64_t *)&v867->__shared_owners_;
    do
      v869 = __ldaxr(v868);
    while (__stlxr(v869 - 1, v868));
    if (!v869)
    {
      ((void (*)(std::__shared_weak_count *))v867->__on_zero_shared)(v867);
      std::__shared_weak_count::__release_weak(v867);
    }
  }
  *(_BYTE *)(*((_QWORD *)this + 78) + 58) = 3;
  v870 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v865, "shaderLibrary") + 80);
  v871 = *(_QWORD *)(v870 + 2624);
  v872 = *(_QWORD *)(v870 + 2632);
  *(_QWORD *)v1417 = v871;
  *(_QWORD *)&v1417[8] = v872;
  if (v872)
  {
    v873 = (unint64_t *)(v872 + 8);
    do
      v874 = __ldxr(v873);
    while (__stxr(v874 + 1, v873));
  }
  *(_QWORD *)&v1410 = 0;
  v875 = (char *)operator new(0x198uLL);
  *((_QWORD *)v875 + 1) = 0;
  *((_QWORD *)v875 + 2) = 0;
  *(_QWORD *)v875 = &off_1E42E34D8;
  if ((v876 & 1) == 0
  {
    if ((v1295 & 1) == 0
    {
      if ((v1317 & 1) == 0
      {
        if ((v1329 & 1) == 0
        {
          ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
        }
        ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
        unk_1ECE43AC8 = 1;
      }
      ggl::StandardPostchain::DownsampleDepthPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
      unk_1EE57DCA0 = &ggl::StandardPostchain::pipelineDataDownsampleDepthPipelineDeviceStructs(void)::ref;
      qword_1EE57DCA8 = 0;
      unk_1EE57DCB0 = &ggl::StandardPostchain::pipelineDataDownsampleDepthPipelineConstantStructs(void)::ref;
      xmmword_1EE57DCB8 = xmmword_19FFB2E40;
    }
    ggl::StandardPostchain::DownsampleDepthPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::StandardPostchain::DownsampleDepthPipelineSetup::typedReflection(void)::ref;
    if ((v1296 & 1) == 0
    {
      ggl::StandardPostchainDownsampleDepthShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainDownsampleDepthShader";
      if ((v1318 & 1) == 0
      {
        qword_1ECE35EA8 = (uint64_t)"StandardPostchainDownsampleDepthShader";
        unk_1ECE35EB0 = ggl::standardPostchainDownsampleDepthShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE35EB8 = 1;
        unk_1ECE35EC0 = &ggl::standardPostchainDownsampleDepthShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE35EC8 = 0;
        unk_1ECE35ED0 = &ggl::standardPostchainDownsampleDepthShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE35ED8 = 0;
        unk_1ECE35EE0 = &ggl::standardPostchainDownsampleDepthShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::standardPostchainDownsampleDepthShaderVertexFunctionDescriptor(void)::ref = 2938732211;
        qword_1ECE35EE8 = 0;
        unk_1ECE35EF0 = &ggl::standardPostchainDownsampleDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE35F00 = 0;
        unk_1ECE35F08 = 0;
        qword_1ECE35EF8 = 0;
      }
      qword_1ECE34BB8 = (uint64_t)&ggl::standardPostchainDownsampleDepthShaderVertexFunctionDescriptor(void)::ref;
      dword_1ECE34BC0 = -1356235085;
      if ((v1319 & 1) == 0
      {
        ggl::standardPostchainDownsampleDepthShaderFragmentFunctionDescriptor(void)::ref = 0x13810F95ALL;
        qword_1ECE35F90 = (uint64_t)"StandardPostchainDownsampleDepthShader";
        unk_1ECE35F98 = 0;
        qword_1ECE35FA0 = 0;
        unk_1ECE35FA8 = &ggl::standardPostchainDownsampleDepthShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE35FB0 = 0;
        unk_1ECE35FB8 = &ggl::standardPostchainDownsampleDepthShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE35FC0 = 0;
        unk_1ECE35FC8 = &ggl::standardPostchainDownsampleDepthShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE35FD0 = 1;
        unk_1ECE35FD8 = &ggl::standardPostchainDownsampleDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE35FE8 = 0;
        unk_1ECE35FF0 = 0;
        qword_1ECE35FE0 = 1;
      }
      qword_1ECE34BC8 = (uint64_t)&ggl::standardPostchainDownsampleDepthShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE34BD0 = 940636506;
      qword_1ECE34BD8 = (uint64_t)&ggl::standardPostchainDownsampleDepthShaderShaderConstants(void)::ref;
      unk_1ECE34BE0 = 0;
      qword_1ECE34BE8 = (uint64_t)ggl::standardPostchainDownsampleDepthShaderShaderTextures(void)::ref;
      unk_1ECE34BF0 = 1;
      qword_1ECE34BF8 = (uint64_t)ggl::standardPostchainDownsampleDepthShaderShaderSamplers(void)::ref;
      unk_1ECE34C00 = 1;
    }
    qword_1EE57DCD8 = (uint64_t)&ggl::StandardPostchainDownsampleDepthShader::typedReflection(void)::ref;
    if ((v1297 & 1) == 0
    {
      ggl::StandardPostchain::pipelineStateDownsampleDepthPipelineAttributeStructBinding(void)::attr = 0;
      *(_QWORD *)algn_1EE57E0B8 = 0;
      qword_1EE57E0C0 = (uint64_t)"";
      dword_1EE57E0C8 = 0;
      qword_1EE57E0D0 = (uint64_t)&ggl::StandardPostchain::pipelineStateDownsampleDepthPipelineAttributeBinding_0(void)::attr;
      unk_1EE57E0D8 = 2;
    }
    qword_1EE57DCE0 = (uint64_t)&ggl::StandardPostchain::pipelineStateDownsampleDepthPipelineAttributeStructBinding(void)::attr;
    *(_QWORD *)algn_1EE57DCE8 = 1;
    qword_1EE57DCF0 = 0;
    unk_1EE57DCF8 = 1;
    qword_1EE57DD00 = (uint64_t)&ggl::StandardPostchain::pipelineStateDownsampleDepthPipelineDeviceStructBinding(void)::ref;
    unk_1EE57DD08 = 0;
    qword_1EE57DD10 = (uint64_t)&ggl::StandardPostchain::pipelineStateDownsampleDepthPipelineConstantStructBinding(void)::ref;
    unk_1EE57DD18 = 0;
  }
  v877 = *(_OWORD *)v1417;
  if (*(_QWORD *)&v1417[8])
  {
    v878 = (unint64_t *)(*(_QWORD *)&v1417[8] + 8);
    do
      v879 = __ldxr(v878);
    while (__stxr(v879 + 1, v878));
    *((_DWORD *)v875 + 14) = 0;
    *((_QWORD *)v875 + 5) = 0;
    *((_QWORD *)v875 + 6) = 0;
    *((_QWORD *)v875 + 3) = &off_1E42B6760;
    *((_QWORD *)v875 + 4) = 0;
    *((_QWORD *)v875 + 8) = &ggl::StandardPostchain::DownsampleDepthPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v875 + 72) = v877;
    do
      v880 = __ldxr(v878);
    while (__stxr(v880 + 1, v878));
  }
  else
  {
    *((_DWORD *)v875 + 14) = 0;
    *((_QWORD *)v875 + 5) = 0;
    *((_QWORD *)v875 + 6) = 0;
    *((_QWORD *)v875 + 3) = &off_1E42B6760;
    *((_QWORD *)v875 + 4) = 0;
    *((_QWORD *)v875 + 8) = &ggl::StandardPostchain::DownsampleDepthPipelineState::typedReflection(void)::ref;
    *((_QWORD *)v875 + 9) = v877;
    *((_QWORD *)v875 + 10) = 0;
  }
  v875[136] = 0;
  *(_OWORD *)(v875 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v875 + 156) = 0;
  *(_QWORD *)(v875 + 172) = 0;
  *(_QWORD *)(v875 + 164) = 0;
  v875[184] = 0;
  *(_OWORD *)(v875 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v875 + 204) = 0;
  *(_QWORD *)(v875 + 220) = 0;
  *(_QWORD *)(v875 + 212) = 0;
  v875[232] = 0;
  *(_OWORD *)(v875 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v875 + 252) = 0;
  *(_QWORD *)(v875 + 268) = 0;
  *(_QWORD *)(v875 + 260) = 0;
  *(_OWORD *)(v875 + 280) = xmmword_19FFB3410;
  *((_QWORD *)v875 + 37) = 1;
  *((_QWORD *)v875 + 38) = 1;
  v875[312] = 0;
  *((_QWORD *)v875 + 48) = 0;
  *((_OWORD *)v875 + 22) = 0u;
  *((_OWORD *)v875 + 23) = 0u;
  *((_OWORD *)v875 + 20) = 0u;
  *((_OWORD *)v875 + 21) = 0u;
  *((_QWORD *)v875 + 49) = 0x100000001;
  v875[400] = 0;
  v875[88] = 0;
  *(_WORD *)(v875 + 89) = v1408;
  v875[91] = BYTE2(v1408);
  *(_OWORD *)(v875 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v875 + 108) = v1410;
  *((_DWORD *)v875 + 29) = 0;
  *((_QWORD *)v875 + 15) = 0;
  *((_DWORD *)v875 + 32) = 0;
  v875[132] = 15;
  if (*((_QWORD *)&v877 + 1))
  {
    v881 = (unint64_t *)(*((_QWORD *)&v877 + 1) + 8);
    do
      v882 = __ldaxr(v881);
    while (__stlxr(v882 - 1, v881));
    if (!v882)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v877 + 1) + 16))(*((_QWORD *)&v877 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v877 + 1));
    }
  }
  v875[329] = 0;
  v883 = vceqzq_s8(*(int8x16_t *)(v875 + 328));
  v884 = vmovl_high_s8(v883);
  v885 = vmovl_s16(*(int16x4_t *)v884.i8);
  v886.i64[0] = v885.u32[0];
  v886.i64[1] = v885.u32[1];
  v887 = v886;
  v888 = vmovl_s8(*(int8x8_t *)v883.i8);
  v889 = vmovl_s16(*(int16x4_t *)v888.i8);
  v886.i64[0] = v889.u32[0];
  v886.i64[1] = v889.u32[1];
  v890 = v886;
  v891 = vmovl_high_s16(v884);
  v886.i64[0] = v891.u32[0];
  v886.i64[1] = v891.u32[1];
  v892 = v886;
  v893 = vmovl_high_s16(v888);
  v886.i64[0] = v893.u32[0];
  v886.i64[1] = v893.u32[1];
  v894 = v886;
  v886.i64[0] = v885.u32[2];
  v886.i64[1] = v885.u32[3];
  v895 = v886;
  v886.i64[0] = v889.u32[2];
  v886.i64[1] = v889.u32[3];
  v896 = v886;
  v886.i64[0] = v891.u32[2];
  v886.i64[1] = v891.u32[3];
  v897 = v886;
  v886.i64[0] = v893.u32[2];
  v886.i64[1] = v893.u32[3];
  v898 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v886);
  v899 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v897);
  v900 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v896);
  v901 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v892);
  v902 = vceqzq_s8(*(int8x16_t *)(v875 + 344));
  v903 = vmovl_high_s8(v902);
  v904 = vmovl_s16(*(int16x4_t *)v903.i8);
  v886.i64[0] = v904.u32[0];
  v886.i64[1] = v904.u32[1];
  v905 = v886;
  v906 = vmovl_s8(*(int8x8_t *)v902.i8);
  v907 = vmovl_s16(*(int16x4_t *)v906.i8);
  v886.i64[0] = v907.u32[0];
  v886.i64[1] = v907.u32[1];
  v908 = v886;
  v909 = vmovl_high_s16(v903);
  v886.i64[0] = v909.u32[0];
  v886.i64[1] = v909.u32[1];
  v910 = v886;
  v911 = vmovl_high_s16(v906);
  v886.i64[0] = v911.u32[0];
  v886.i64[1] = v911.u32[1];
  v912 = v886;
  v886.i64[0] = v904.u32[2];
  v886.i64[1] = v904.u32[3];
  v913 = v886;
  v886.i64[0] = v907.u32[2];
  v886.i64[1] = v907.u32[3];
  v914 = v886;
  v886.i64[0] = v909.u32[2];
  v886.i64[1] = v909.u32[3];
  v915 = v886;
  v886.i64[0] = v911.u32[2];
  v886.i64[1] = v911.u32[3];
  v916 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v915);
  v917 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v905), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v887));
  v918 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v908), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v890));
  v919 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v910), v901);
  v920 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v912), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v894));
  v921 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v913), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v895));
  v922 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v914), v900);
  v923 = vorrq_s8(v916, v899);
  v924 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v886), v898);
  v925 = vceqzq_s8(*(int8x16_t *)(v875 + 360));
  v926 = vmovl_s8(*(int8x8_t *)v925.i8);
  v927 = vmovl_high_s16(v926);
  v928 = vmovl_high_s8(v925);
  v929 = vmovl_high_s16(v928);
  v930 = vmovl_s16(*(int16x4_t *)v926.i8);
  v931 = vmovl_s16(*(int16x4_t *)v928.i8);
  v886.i64[0] = v930.i32[0];
  v886.i64[1] = v930.i32[1];
  v932 = v886;
  v886.i64[0] = v931.i32[0];
  v886.i64[1] = v931.i32[1];
  v933 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v886);
  v934 = vceqzq_s8(*(int8x16_t *)(v875 + 376));
  v935 = vmovl_high_s8(v934);
  v936 = vmovl_s16(*(int16x4_t *)v935.i8);
  v886.i64[0] = v936.i32[0];
  v886.i64[1] = v936.i32[1];
  v937 = vmovl_s8(*(int8x8_t *)v934.i8);
  v938 = vmovl_s16(*(int16x4_t *)v937.i8);
  v939 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v886), v933), v917);
  v886.i64[0] = v938.i32[0];
  v886.i64[1] = v938.i32[1];
  v940 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v886), vbicq_s8((int8x16_t)xmmword_19FFB3170, v932));
  v886.i64[0] = v929.i32[0];
  v886.i64[1] = v929.i32[1];
  v941 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v886);
  v942 = vmovl_high_s16(v935);
  v943 = vorrq_s8(v940, v918);
  v886.i64[0] = v942.i32[0];
  v886.i64[1] = v942.i32[1];
  v944 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v886), v941);
  v886.i64[0] = v927.i32[0];
  v886.i64[1] = v927.i32[1];
  v945 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v886);
  v946 = vmovl_high_s16(v937);
  v886.i64[0] = v946.i32[0];
  v886.i64[1] = v946.i32[1];
  v947 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v886), v945), v920);
  v886.i64[0] = v931.i32[2];
  v886.i64[1] = v931.i32[3];
  v948 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v886);
  v886.i64[0] = v936.i32[2];
  v886.i64[1] = v936.i32[3];
  v949 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v886), v948), v921);
  v886.i64[0] = v930.i32[2];
  v886.i64[1] = v930.i32[3];
  v950 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v886);
  v886.i64[0] = v938.i32[2];
  v886.i64[1] = v938.i32[3];
  v951 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v886), v950), v922);
  v886.i64[0] = v929.i32[2];
  v886.i64[1] = v929.i32[3];
  v952 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v886);
  v886.i64[0] = v942.i32[2];
  v886.i64[1] = v942.i32[3];
  v953 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v886), v952), v923);
  v886.i64[0] = v927.i32[2];
  v886.i64[1] = v927.i32[3];
  v954 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v886);
  v886.i64[0] = v946.i32[2];
  v886.i64[1] = v946.i32[3];
  *((_QWORD *)v875 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v943, v939), vorrq_s8(v947, vorrq_s8(v944, v919))), (int64x2_t)vorrq_s8(vorrq_s8(v951, v949), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v886), v954), v924), v953))));
  *((_QWORD *)v875 + 3) = &off_1E42BA4F0;
  v875[312] = 1;
  *((_QWORD *)this + 80) = v875 + 24;
  v955 = (std::__shared_weak_count *)*((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = v875;
  if (v955)
  {
    v956 = (unint64_t *)&v955->__shared_owners_;
    do
      v957 = __ldaxr(v956);
    while (__stlxr(v957 - 1, v956));
    if (!v957)
    {
      ((void (*)(std::__shared_weak_count *))v955->__on_zero_shared)(v955);
      std::__shared_weak_count::__release_weak(v955);
    }
  }
  v958 = *(std::__shared_weak_count **)&v1417[8];
  if (*(_QWORD *)&v1417[8])
  {
    v959 = (unint64_t *)(*(_QWORD *)&v1417[8] + 8);
    do
      v960 = __ldaxr(v959);
    while (__stlxr(v960 - 1, v959));
    if (!v960)
    {
      ((void (*)(std::__shared_weak_count *))v958->__on_zero_shared)(v958);
      std::__shared_weak_count::__release_weak(v958);
    }
  }
  v961 = operator new(0x100uLL);
  v962 = v961;
  v961[1] = 0;
  v961[2] = 0;
  *v961 = &off_1E42E34A0;
  v963 = v961 + 3;
  v964 = *((_QWORD *)this + 80);
  v965 = (std::__shared_weak_count *)*((_QWORD *)this + 81);
  if (v965)
  {
    v966 = (unint64_t *)&v965->__shared_owners_;
    do
      v967 = __ldxr(v966);
    while (__stxr(v967 + 1, v966));
    ggl::PipelineSetup::PipelineSetup(v961 + 3, v964, (uint64_t)v965);
    v968 = (unint64_t *)&v965->__shared_owners_;
    do
      v969 = __ldaxr(v968);
    while (__stlxr(v969 - 1, v968));
    if (!v969)
    {
      ((void (*)(std::__shared_weak_count *))v965->__on_zero_shared)(v965);
      std::__shared_weak_count::__release_weak(v965);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v961 + 3, v964, 0);
  }
  v962[3] = &off_1E42BA4C0;
  *((_QWORD *)this + 82) = v963;
  v970 = (std::__shared_weak_count *)*((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = v962;
  if (v970)
  {
    v971 = (unint64_t *)&v970->__shared_owners_;
    do
      v972 = __ldaxr(v971);
    while (__stlxr(v972 - 1, v971));
    if (!v972)
    {
      ((void (*)(std::__shared_weak_count *))v970->__on_zero_shared)(v970);
      std::__shared_weak_count::__release_weak(v970);
    }
  }

  v973 = v865;
  v974 = operator new(0xF0uLL);
  v974[1] = 0;
  v974[2] = 0;
  *v974 = &off_1E42DEA08;
  v974[5] = 0;
  v974[6] = 0;
  v974[4] = 0;
  *((_DWORD *)v974 + 14) = 0;
  v974[3] = &off_1E42B5DE8;
  *(_QWORD *)((char *)v974 + 60) = 65537;
  *((_DWORD *)v974 + 17) = 0;
  v974[9] = 1;
  *((_WORD *)v974 + 40) = 0;
  *((_BYTE *)v974 + 82) = 3;
  *(_QWORD *)((char *)v974 + 91) = 0;
  *(_QWORD *)((char *)v974 + 83) = 0;
  *((_BYTE *)v974 + 99) = 0;
  *(_QWORD *)((char *)v974 + 156) = 0;
  *(_QWORD *)((char *)v974 + 148) = 0;
  *((_WORD *)v974 + 106) = 257;
  v974[27] = 0;
  v974[28] = 0;
  *((_BYTE *)v974 + 232) = 0;
  *((_QWORD *)this + 85) = v974 + 3;
  v975 = (std::__shared_weak_count *)*((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = v974;
  if (v975)
  {
    v976 = (unint64_t *)&v975->__shared_owners_;
    do
      v977 = __ldaxr(v976);
    while (__stlxr(v977 - 1, v976));
    if (!v977)
    {
      ((void (*)(std::__shared_weak_count *))v975->__on_zero_shared)(v975);
      std::__shared_weak_count::__release_weak(v975);
    }
  }
  *(_BYTE *)(*((_QWORD *)this + 85) + 58) = 3;
  v978 = operator new(0xE8uLL);
  v978[1] = 0;
  v978[2] = 0;
  *v978 = &off_1E42E1868;
  v979 = ggl::BufferData::BufferData((uint64_t)(v978 + 3), qword_1EE561258, 2, 1, 6, 1);
  v978[28] = ggl::PostchainCommon::SsaoBlurParam::reflection(void)::reflection;
  v978[3] = &off_1E42B91B0;
  v980 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 13) = v979;
  *((_QWORD *)this + 14) = v978;
  if (v980)
  {
    v981 = (unint64_t *)&v980->__shared_owners_;
    do
      v982 = __ldaxr(v981);
    while (__stlxr(v982 - 1, v981));
    if (!v982)
    {
      ((void (*)(std::__shared_weak_count *))v980->__on_zero_shared)(v980);
      std::__shared_weak_count::__release_weak(v980);
    }
  }
  v983 = operator new(0xE8uLL);
  v983[1] = 0;
  v983[2] = 0;
  *v983 = &off_1E42E1868;
  v984 = ggl::BufferData::BufferData((uint64_t)(v983 + 3), qword_1EE561258, 2, 1, 6, 1);
  v983[28] = ggl::PostchainCommon::SsaoBlurParam::reflection(void)::reflection;
  v983[3] = &off_1E42B91B0;
  v985 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 15) = v984;
  *((_QWORD *)this + 16) = v983;
  if (v985)
  {
    v986 = (unint64_t *)&v985->__shared_owners_;
    do
      v987 = __ldaxr(v986);
    while (__stlxr(v987 - 1, v986));
    if (!v987)
    {
      ((void (*)(std::__shared_weak_count *))v985->__on_zero_shared)(v985);
      std::__shared_weak_count::__release_weak(v985);
    }
  }
  v988 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v973, "shaderLibrary") + 80);
  v989 = *(_QWORD *)(v988 + 2648);
  v990 = *(std::__shared_weak_count **)(v988 + 2656);
  v1408 = v989;
  v1409 = v990;
  if (v990)
  {
    v991 = (unint64_t *)&v990->__shared_owners_;
    do
      v992 = __ldxr(v991);
    while (__stxr(v992 + 1, v991));
  }
  v1417[0] = 0;
  *(_OWORD *)&v1417[4] = xmmword_19FFB3060;
  v1418 = 0;
  *(_OWORD *)&v1417[20] = 0uLL;
  v1419 = 15;
  v993 = operator new(0x198uLL);
  v993[1] = 0;
  v993[2] = 0;
  *v993 = &off_1E42E3238;
  v1410 = xmmword_19FFB35C0;
  v1411 = 1;
  v1412 = 1;
  *((_QWORD *)this + 87) = ggl::StandardPostchain::SSAOBlurPipelineState::SSAOBlurPipelineState((uint64_t)(v993 + 3), &v1408, (uint64_t)v1417, &v1410, 0);
  v994 = (std::__shared_weak_count *)*((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = v993;
  if (v994)
  {
    v995 = (unint64_t *)&v994->__shared_owners_;
    do
      v996 = __ldaxr(v995);
    while (__stlxr(v996 - 1, v995));
    if (!v996)
    {
      ((void (*)(std::__shared_weak_count *))v994->__on_zero_shared)(v994);
      std::__shared_weak_count::__release_weak(v994);
    }
  }
  v997 = v1409;
  if (v1409)
  {
    v998 = (unint64_t *)&v1409->__shared_owners_;
    do
      v999 = __ldaxr(v998);
    while (__stlxr(v999 - 1, v998));
    if (!v999)
    {
      ((void (*)(std::__shared_weak_count *))v997->__on_zero_shared)(v997);
      std::__shared_weak_count::__release_weak(v997);
    }
  }
  v1000 = operator new(0x100uLL);
  v1001 = v1000;
  v1000[1] = 0;
  v1000[2] = 0;
  *v1000 = &off_1E42E3200;
  v1002 = v1000 + 3;
  v1003 = *((_QWORD *)this + 87);
  v1004 = (std::__shared_weak_count *)*((_QWORD *)this + 88);
  if (v1004)
  {
    v1005 = (unint64_t *)&v1004->__shared_owners_;
    do
      v1006 = __ldxr(v1005);
    while (__stxr(v1006 + 1, v1005));
    ggl::PipelineSetup::PipelineSetup(v1000 + 3, v1003, (uint64_t)v1004);
    v1007 = (unint64_t *)&v1004->__shared_owners_;
    do
      v1008 = __ldaxr(v1007);
    while (__stlxr(v1008 - 1, v1007));
    if (!v1008)
    {
      ((void (*)(std::__shared_weak_count *))v1004->__on_zero_shared)(v1004);
      std::__shared_weak_count::__release_weak(v1004);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v1000 + 3, v1003, 0);
  }
  v1001[3] = &off_1E42BA2E0;
  *((_QWORD *)this + 91) = v1002;
  v1009 = (std::__shared_weak_count *)*((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = v1001;
  if (v1009)
  {
    v1010 = (unint64_t *)&v1009->__shared_owners_;
    do
      v1011 = __ldaxr(v1010);
    while (__stlxr(v1011 - 1, v1010));
    if (!v1011)
    {
      ((void (*)(std::__shared_weak_count *))v1009->__on_zero_shared)(v1009);
      std::__shared_weak_count::__release_weak(v1009);
    }
  }
  v1012 = operator new(0x100uLL);
  v1013 = v1012;
  v1012[1] = 0;
  v1012[2] = 0;
  *v1012 = &off_1E42E3200;
  v1014 = v1012 + 3;
  v1015 = *((_QWORD *)this + 87);
  v1016 = (std::__shared_weak_count *)*((_QWORD *)this + 88);
  if (v1016)
  {
    v1017 = (unint64_t *)&v1016->__shared_owners_;
    do
      v1018 = __ldxr(v1017);
    while (__stxr(v1018 + 1, v1017));
    ggl::PipelineSetup::PipelineSetup(v1012 + 3, v1015, (uint64_t)v1016);
    v1019 = (unint64_t *)&v1016->__shared_owners_;
    do
      v1020 = __ldaxr(v1019);
    while (__stlxr(v1020 - 1, v1019));
    if (!v1020)
    {
      ((void (*)(std::__shared_weak_count *))v1016->__on_zero_shared)(v1016);
      std::__shared_weak_count::__release_weak(v1016);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v1012 + 3, v1015, 0);
  }
  v1013[3] = &off_1E42BA2E0;
  *((_QWORD *)this + 95) = v1014;
  v1021 = (std::__shared_weak_count *)*((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = v1013;
  if (v1021)
  {
    v1022 = (unint64_t *)&v1021->__shared_owners_;
    do
      v1023 = __ldaxr(v1022);
    while (__stlxr(v1023 - 1, v1022));
    if (!v1023)
    {
      ((void (*)(std::__shared_weak_count *))v1021->__on_zero_shared)(v1021);
      std::__shared_weak_count::__release_weak(v1021);
    }
  }
  v1024 = *((_QWORD *)this + 91);
  v1025 = *(_QWORD **)(v1024 + 64);
  v1025[1] = 0;
  v1026 = *((_QWORD *)this + 13);
  *v1025 = v1026;
  v1027 = *(_QWORD **)(v1024 + 160);
  v1028 = *((_QWORD *)this + 14);
  if (v1028)
  {
    v1029 = (unint64_t *)(v1028 + 8);
    do
      v1030 = __ldxr(v1029);
    while (__stxr(v1030 + 1, v1029));
  }
  v1031 = (std::__shared_weak_count *)v1027[1];
  *v1027 = v1026;
  v1027[1] = v1028;
  if (v1031)
  {
    v1032 = (unint64_t *)&v1031->__shared_owners_;
    do
      v1033 = __ldaxr(v1032);
    while (__stlxr(v1033 - 1, v1032));
    if (!v1033)
    {
      ((void (*)(std::__shared_weak_count *))v1031->__on_zero_shared)(v1031);
      std::__shared_weak_count::__release_weak(v1031);
    }
  }
  v1034 = *((_QWORD *)this + 95);
  v1035 = *(_QWORD **)(v1034 + 64);
  v1035[1] = 0;
  v1036 = *((_QWORD *)this + 15);
  *v1035 = v1036;
  v1037 = *(_QWORD **)(v1034 + 160);
  v1038 = *((_QWORD *)this + 16);
  if (v1038)
  {
    v1039 = (unint64_t *)(v1038 + 8);
    do
      v1040 = __ldxr(v1039);
    while (__stxr(v1040 + 1, v1039));
  }
  v1041 = (std::__shared_weak_count *)v1037[1];
  *v1037 = v1036;
  v1037[1] = v1038;
  if (v1041)
  {
    v1042 = (unint64_t *)&v1041->__shared_owners_;
    do
      v1043 = __ldaxr(v1042);
    while (__stlxr(v1043 - 1, v1042));
    if (!v1043)
    {
      ((void (*)(std::__shared_weak_count *))v1041->__on_zero_shared)(v1041);
      std::__shared_weak_count::__release_weak(v1041);
    }
  }
  v1044 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v973, "shaderLibrary") + 80);
  v1045 = *(_QWORD *)(v1044 + 2648);
  v1046 = *(std::__shared_weak_count **)(v1044 + 2656);
  v1408 = v1045;
  v1409 = v1046;
  if (v1046)
  {
    v1047 = (unint64_t *)&v1046->__shared_owners_;
    do
      v1048 = __ldxr(v1047);
    while (__stxr(v1048 + 1, v1047));
  }
  v1417[0] = 0;
  *(_OWORD *)&v1417[4] = xmmword_19FFB3060;
  *(_QWORD *)&v1417[28] = 0;
  v1418 = 0;
  *(_QWORD *)&v1417[20] = 0;
  v1419 = 15;
  v1049 = operator new(0x198uLL);
  v1049[1] = 0;
  v1049[2] = 0;
  *v1049 = &off_1E42E3238;
  v1410 = xmmword_19FFB35C0;
  v1411 = 1;
  v1412 = 1;
  *((_QWORD *)this + 89) = ggl::StandardPostchain::SSAOBlurPipelineState::SSAOBlurPipelineState((uint64_t)(v1049 + 3), &v1408, (uint64_t)v1417, &v1410, 2);
  v1050 = (std::__shared_weak_count *)*((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = v1049;
  if (v1050)
  {
    v1051 = (unint64_t *)&v1050->__shared_owners_;
    do
      v1052 = __ldaxr(v1051);
    while (__stlxr(v1052 - 1, v1051));
    if (!v1052)
    {
      ((void (*)(std::__shared_weak_count *))v1050->__on_zero_shared)(v1050);
      std::__shared_weak_count::__release_weak(v1050);
    }
  }
  v1053 = v1409;
  if (v1409)
  {
    v1054 = (unint64_t *)&v1409->__shared_owners_;
    do
      v1055 = __ldaxr(v1054);
    while (__stlxr(v1055 - 1, v1054));
    if (!v1055)
    {
      ((void (*)(std::__shared_weak_count *))v1053->__on_zero_shared)(v1053);
      std::__shared_weak_count::__release_weak(v1053);
    }
  }
  v1056 = operator new(0x100uLL);
  v1057 = v1056;
  v1056[1] = 0;
  v1056[2] = 0;
  *v1056 = &off_1E42E3200;
  v1058 = v1056 + 3;
  v1059 = *((_QWORD *)this + 89);
  v1060 = (std::__shared_weak_count *)*((_QWORD *)this + 90);
  if (v1060)
  {
    v1061 = (unint64_t *)&v1060->__shared_owners_;
    do
      v1062 = __ldxr(v1061);
    while (__stxr(v1062 + 1, v1061));
    ggl::PipelineSetup::PipelineSetup(v1056 + 3, v1059, (uint64_t)v1060);
    v1063 = (unint64_t *)&v1060->__shared_owners_;
    do
      v1064 = __ldaxr(v1063);
    while (__stlxr(v1064 - 1, v1063));
    if (!v1064)
    {
      ((void (*)(std::__shared_weak_count *))v1060->__on_zero_shared)(v1060);
      std::__shared_weak_count::__release_weak(v1060);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v1056 + 3, v1059, 0);
  }
  v1057[3] = &off_1E42BA2E0;
  *((_QWORD *)this + 93) = v1058;
  v1065 = (std::__shared_weak_count *)*((_QWORD *)this + 94);
  *((_QWORD *)this + 94) = v1057;
  if (v1065)
  {
    v1066 = (unint64_t *)&v1065->__shared_owners_;
    do
      v1067 = __ldaxr(v1066);
    while (__stlxr(v1067 - 1, v1066));
    if (!v1067)
    {
      ((void (*)(std::__shared_weak_count *))v1065->__on_zero_shared)(v1065);
      std::__shared_weak_count::__release_weak(v1065);
    }
  }
  v1068 = operator new(0x100uLL);
  v1069 = v1068;
  v1068[1] = 0;
  v1068[2] = 0;
  *v1068 = &off_1E42E3200;
  v1070 = v1068 + 3;
  v1071 = *((_QWORD *)this + 89);
  v1072 = (std::__shared_weak_count *)*((_QWORD *)this + 90);
  if (v1072)
  {
    v1073 = (unint64_t *)&v1072->__shared_owners_;
    do
      v1074 = __ldxr(v1073);
    while (__stxr(v1074 + 1, v1073));
    ggl::PipelineSetup::PipelineSetup(v1068 + 3, v1071, (uint64_t)v1072);
    v1075 = (unint64_t *)&v1072->__shared_owners_;
    do
      v1076 = __ldaxr(v1075);
    while (__stlxr(v1076 - 1, v1075));
    if (!v1076)
    {
      ((void (*)(std::__shared_weak_count *))v1072->__on_zero_shared)(v1072);
      std::__shared_weak_count::__release_weak(v1072);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v1068 + 3, v1071, 0);
  }
  v1069[3] = &off_1E42BA2E0;
  *((_QWORD *)this + 97) = v1070;
  v1077 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = v1069;
  if (v1077)
  {
    v1078 = (unint64_t *)&v1077->__shared_owners_;
    do
      v1079 = __ldaxr(v1078);
    while (__stlxr(v1079 - 1, v1078));
    if (!v1079)
    {
      ((void (*)(std::__shared_weak_count *))v1077->__on_zero_shared)(v1077);
      std::__shared_weak_count::__release_weak(v1077);
    }
  }
  v1080 = *((_QWORD *)this + 93);
  v1081 = *(_QWORD **)(v1080 + 64);
  v1081[1] = 0;
  v1082 = *((_QWORD *)this + 13);
  *v1081 = v1082;
  v1083 = *(_QWORD **)(v1080 + 160);
  v1084 = *((_QWORD *)this + 14);
  if (v1084)
  {
    v1085 = (unint64_t *)(v1084 + 8);
    do
      v1086 = __ldxr(v1085);
    while (__stxr(v1086 + 1, v1085));
  }
  v1087 = (std::__shared_weak_count *)v1083[1];
  *v1083 = v1082;
  v1083[1] = v1084;
  if (v1087)
  {
    v1088 = (unint64_t *)&v1087->__shared_owners_;
    do
      v1089 = __ldaxr(v1088);
    while (__stlxr(v1089 - 1, v1088));
    if (!v1089)
    {
      ((void (*)(std::__shared_weak_count *))v1087->__on_zero_shared)(v1087);
      std::__shared_weak_count::__release_weak(v1087);
    }
  }
  v1090 = *((_QWORD *)this + 97);
  v1091 = *(_QWORD **)(v1090 + 64);
  v1091[1] = 0;
  v1092 = *((_QWORD *)this + 15);
  *v1091 = v1092;
  v1093 = *(_QWORD **)(v1090 + 160);
  v1094 = *((_QWORD *)this + 16);
  if (v1094)
  {
    v1095 = (unint64_t *)(v1094 + 8);
    do
      v1096 = __ldxr(v1095);
    while (__stxr(v1096 + 1, v1095));
  }
  v1097 = (std::__shared_weak_count *)v1093[1];
  *v1093 = v1092;
  v1093[1] = v1094;
  if (v1097)
  {
    v1098 = (unint64_t *)&v1097->__shared_owners_;
    do
      v1099 = __ldaxr(v1098);
    while (__stlxr(v1099 - 1, v1098));
    if (!v1099)
    {
      ((void (*)(std::__shared_weak_count *))v1097->__on_zero_shared)(v1097);
      std::__shared_weak_count::__release_weak(v1097);
    }
  }

  v1100 = v973;
  v1101 = operator new(0xF0uLL);
  v1101[1] = 0;
  v1101[2] = 0;
  *v1101 = &off_1E42DEA08;
  v1101[5] = 0;
  v1101[6] = 0;
  v1101[4] = 0;
  *((_DWORD *)v1101 + 14) = 0;
  v1101[3] = &off_1E42B5DE8;
  *(_QWORD *)((char *)v1101 + 60) = 65537;
  *((_DWORD *)v1101 + 17) = 0;
  v1101[9] = 1;
  *((_WORD *)v1101 + 40) = 0;
  *((_BYTE *)v1101 + 82) = 3;
  *(_QWORD *)((char *)v1101 + 91) = 0;
  *(_QWORD *)((char *)v1101 + 83) = 0;
  *((_BYTE *)v1101 + 99) = 0;
  *(_QWORD *)((char *)v1101 + 156) = 0;
  *(_QWORD *)((char *)v1101 + 148) = 0;
  *((_WORD *)v1101 + 106) = 257;
  v1101[27] = 0;
  v1101[28] = 0;
  *((_BYTE *)v1101 + 232) = 0;
  *((_QWORD *)this + 103) = v1101 + 3;
  v1102 = (std::__shared_weak_count *)*((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = v1101;
  if (v1102)
  {
    v1103 = (unint64_t *)&v1102->__shared_owners_;
    do
      v1104 = __ldaxr(v1103);
    while (__stlxr(v1104 - 1, v1103));
    if (!v1104)
    {
      ((void (*)(std::__shared_weak_count *))v1102->__on_zero_shared)(v1102);
      std::__shared_weak_count::__release_weak(v1102);
    }
  }
  *(_BYTE *)(*((_QWORD *)this + 103) + 58) = 3;
  v1105 = operator new(0xE8uLL);
  v1105[1] = 0;
  v1105[2] = 0;
  *v1105 = &off_1E42E18D8;
  v1106 = ggl::BufferData::BufferData((uint64_t)(v1105 + 3), qword_1EE561298, 2, 1, 6, 1);
  v1105[28] = ggl::PostchainCommon::SsaoUpsampleParam::reflection(void)::reflection;
  v1105[3] = &off_1E42B91F0;
  v1107 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 17) = v1106;
  *((_QWORD *)this + 18) = v1105;
  if (v1107)
  {
    v1108 = (unint64_t *)&v1107->__shared_owners_;
    do
      v1109 = __ldaxr(v1108);
    while (__stlxr(v1109 - 1, v1108));
    if (!v1109)
    {
      ((void (*)(std::__shared_weak_count *))v1107->__on_zero_shared)(v1107);
      std::__shared_weak_count::__release_weak(v1107);
    }
  }
  v1110 = *(_QWORD *)(-[VKSharedResources shaderLibrary](v1100, "shaderLibrary") + 80);
  v1111 = *(_QWORD *)(v1110 + 2672);
  v1112 = *(_QWORD *)(v1110 + 2680);
  *(_QWORD *)v1417 = v1111;
  *(_QWORD *)&v1417[8] = v1112;
  if (v1112)
  {
    v1113 = (unint64_t *)(v1112 + 8);
    do
      v1114 = __ldxr(v1113);
    while (__stxr(v1114 + 1, v1113));
  }
  *(_QWORD *)&v1410 = 0;
  v1115 = (char *)operator new(0x198uLL);
  *((_QWORD *)v1115 + 1) = 0;
  *((_QWORD *)v1115 + 2) = 0;
  *(_QWORD *)v1115 = &off_1E42E33F8;
  if ((v1116 & 1) == 0
  {
    if ((v1298 & 1) == 0
    {
      if ((v1320 & 1) == 0
      {
        if ((v1330 & 1) == 0
        {
          ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
        }
        ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
        unk_1ECE43AC8 = 1;
      }
      ggl::StandardPostchain::SSAOUpsamplePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
      unk_1EE57DB80 = &ggl::StandardPostchain::pipelineDataSSAOUpsamplePipelineDeviceStructs(void)::ref;
      qword_1EE57DB88 = 0;
      if ((v1321 & 1) == 0
      {
        ggl::StandardPostchain::pipelineDataSSAOUpsamplePipelineConstantStructs(void)::ref = (uint64_t)ggl::PostchainCommon::SsaoUpsampleParam::reflection(void)::reflection;
      }
      qword_1EE57DB90 = (uint64_t)&ggl::StandardPostchain::pipelineDataSSAOUpsamplePipelineConstantStructs(void)::ref;
      unk_1EE57DB98 = xmmword_19FFB3040;
    }
    ggl::StandardPostchain::SSAOUpsamplePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::StandardPostchain::SSAOUpsamplePipelineSetup::typedReflection(void)::ref;
    if ((v1299 & 1) == 0
    {
      ggl::StandardPostchainSSAOUpsampleShader::typedReflection(void)::ref = (uint64_t)"StandardPostchainSSAOUpsampleShader";
      if ((v1322 & 1) == 0
      {
        qword_1ECE35B08 = (uint64_t)"StandardPostchainSSAOUpsampleShader";
        unk_1ECE35B10 = ggl::standardPostchainSSAOUpsampleShaderVertShaderFunctionAttributes(void)::ref;
        qword_1ECE35B18 = 1;
        unk_1ECE35B20 = &ggl::standardPostchainSSAOUpsampleShaderVertShaderFunctionConstantMapping(void)::ref;
        qword_1ECE35B28 = 0;
        unk_1ECE35B30 = &ggl::standardPostchainSSAOUpsampleShaderVertShaderFunctionBufferMapping(void)::ref;
        qword_1ECE35B38 = 0;
        unk_1ECE35B40 = &ggl::standardPostchainSSAOUpsampleShaderVertShaderFunctionTextureMapping(void)::ref;
        ggl::standardPostchainSSAOUpsampleShaderVertexFunctionDescriptor(void)::ref = 1285258797;
        qword_1ECE35B48 = 0;
        unk_1ECE35B50 = &ggl::standardPostchainSSAOUpsampleShaderVertShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE35B60 = 0;
        unk_1ECE35B68 = 0;
        qword_1ECE35B58 = 0;
      }
      qword_1ECE34AA8 = (uint64_t)&ggl::standardPostchainSSAOUpsampleShaderVertexFunctionDescriptor(void)::ref;
      dword_1ECE34AB0 = 1285258797;
      if ((v1323 & 1) == 0
      {
        ggl::standardPostchainSSAOUpsampleShaderFragmentFunctionDescriptor(void)::ref = 0x1D7D2BD7CLL;
        qword_1ECE35DC0 = (uint64_t)"StandardPostchainSSAOUpsampleShader";
        unk_1ECE35DC8 = 0;
        qword_1ECE35DD0 = 0;
        unk_1ECE35DD8 = &ggl::standardPostchainSSAOUpsampleShaderFragShaderFunctionConstantMapping(void)::ref;
        qword_1ECE35DE0 = 1;
        unk_1ECE35DE8 = &ggl::standardPostchainSSAOUpsampleShaderFragShaderFunctionBufferMapping(void)::ref;
        qword_1ECE35DF0 = 0;
        unk_1ECE35DF8 = &ggl::standardPostchainSSAOUpsampleShaderFragShaderFunctionTextureMapping(void)::ref;
        qword_1ECE35E00 = 3;
        unk_1ECE35E08 = &ggl::standardPostchainSSAOUpsampleShaderFragShaderFunctionSamplerMapping(void)::ref;
        qword_1ECE35E18 = 0;
        unk_1ECE35E20 = 0;
        qword_1ECE35E10 = 3;
      }
      qword_1ECE34AB8 = (uint64_t)&ggl::standardPostchainSSAOUpsampleShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE34AC0 = -674054788;
      qword_1ECE34AC8 = (uint64_t)ggl::standardPostchainSSAOUpsampleShaderShaderConstants(void)::ref;
      unk_1ECE34AD0 = 1;
      qword_1ECE34AD8 = (uint64_t)ggl::standardPostchainSSAOUpsampleShaderShaderTextures(void)::ref;
      unk_1ECE34AE0 = 3;
      qword_1ECE34AE8 = (uint64_t)ggl::standardPostchainSSAOUpsampleShaderShaderSamplers(void)::ref;
      unk_1ECE34AF0 = 3;
    }
    qword_1EE57DBB8 = (uint64_t)&ggl::StandardPostchainSSAOUpsampleShader::typedReflection(void)::ref;
    if ((v1300 & 1) == 0
    {
      ggl::StandardPostchain::pipelineStateSSAOUpsamplePipelineAttributeStructBinding(void)::attr = 0;
      unk_1EE57E050 = 0;
      qword_1EE57E058 = (uint64_t)"";
      dword_1EE57E060 = 0;
      qword_1EE57E068 = (uint64_t)&ggl::StandardPostchain::pipelineStateSSAOUpsamplePipelineAttributeBinding_0(void)::attr;
      unk_1EE57E070 = 2;
    }
    qword_1EE57DBC0 = (uint64_t)&ggl::StandardPostchain::pipelineStateSSAOUpsamplePipelineAttributeStructBinding(void)::attr;
    *(_QWORD *)algn_1EE57DBC8 = 1;
    qword_1EE57DBD0 = 0;
    unk_1EE57DBD8 = 3;
    qword_1EE57DBE0 = (uint64_t)&ggl::StandardPostchain::pipelineStateSSAOUpsamplePipelineDeviceStructBinding(void)::ref;
    unk_1EE57DBE8 = 0;
    if ((v1301 & 1) == 0
    {
      ggl::StandardPostchain::pipelineStateSSAOUpsamplePipelineConstantStructBinding(void)::ref = 0;
      unk_1EE57E020 = 0;
      qword_1EE57E028 = (uint64_t)"upsampleParam";
      dword_1EE57E030 = 3;
      qword_1EE57E038 = (uint64_t)&ggl::StandardPostchain::pipelineStateSSAOUpsamplePipelineConstantUpsampleParamBinding(void)::reflection;
      unk_1EE57E040 = 1;
    }
    qword_1EE57DBF0 = (uint64_t)&ggl::StandardPostchain::pipelineStateSSAOUpsamplePipelineConstantStructBinding(void)::ref;
    unk_1EE57DBF8 = 1;
  }
  v1117 = *(_OWORD *)v1417;
  if (*(_QWORD *)&v1417[8])
  {
    v1118 = (unint64_t *)(*(_QWORD *)&v1417[8] + 8);
    do
      v1119 = __ldxr(v1118);
    while (__stxr(v1119 + 1, v1118));
    *((_DWORD *)v1115 + 14) = 0;
    *((_QWORD *)v1115 + 5) = 0;
    *((_QWORD *)v1115 + 6) = 0;
    *((_QWORD *)v1115 + 3) = &off_1E42B6760;
    *((_QWORD *)v1115 + 4) = 0;
    *((_QWORD *)v1115 + 8) = &ggl::StandardPostchain::SSAOUpsamplePipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v1115 + 72) = v1117;
    do
      v1120 = __ldxr(v1118);
    while (__stxr(v1120 + 1, v1118));
  }
  else
  {
    *((_DWORD *)v1115 + 14) = 0;
    *((_QWORD *)v1115 + 5) = 0;
    *((_QWORD *)v1115 + 6) = 0;
    *((_QWORD *)v1115 + 3) = &off_1E42B6760;
    *((_QWORD *)v1115 + 4) = 0;
    *((_QWORD *)v1115 + 8) = &ggl::StandardPostchain::SSAOUpsamplePipelineState::typedReflection(void)::ref;
    *((_QWORD *)v1115 + 9) = v1117;
    *((_QWORD *)v1115 + 10) = 0;
  }
  v1115[136] = 0;
  *(_OWORD *)(v1115 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v1115 + 156) = 0;
  *(_QWORD *)(v1115 + 172) = 0;
  *(_QWORD *)(v1115 + 164) = 0;
  v1115[184] = 0;
  *(_OWORD *)(v1115 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v1115 + 204) = 0;
  *(_QWORD *)(v1115 + 220) = 0;
  *(_QWORD *)(v1115 + 212) = 0;
  v1115[232] = 0;
  *(_OWORD *)(v1115 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v1115 + 252) = 0;
  *(_QWORD *)(v1115 + 268) = 0;
  *(_QWORD *)(v1115 + 260) = 0;
  *(_OWORD *)(v1115 + 280) = xmmword_19FFB35C0;
  *((_QWORD *)v1115 + 37) = 1;
  *((_QWORD *)v1115 + 38) = 1;
  v1115[312] = 0;
  *((_QWORD *)v1115 + 48) = 0;
  *((_OWORD *)v1115 + 22) = 0u;
  *((_OWORD *)v1115 + 23) = 0u;
  *((_OWORD *)v1115 + 20) = 0u;
  *((_OWORD *)v1115 + 21) = 0u;
  *((_QWORD *)v1115 + 49) = 0x100000001;
  v1115[400] = 0;
  v1115[88] = 0;
  *(_WORD *)(v1115 + 89) = v1408;
  v1115[91] = BYTE2(v1408);
  *(_OWORD *)(v1115 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v1115 + 108) = v1410;
  *((_DWORD *)v1115 + 29) = 0;
  *((_QWORD *)v1115 + 15) = 0;
  *((_DWORD *)v1115 + 32) = 0;
  v1115[132] = 15;
  if (*((_QWORD *)&v1117 + 1))
  {
    v1121 = (unint64_t *)(*((_QWORD *)&v1117 + 1) + 8);
    do
      v1122 = __ldaxr(v1121);
    while (__stlxr(v1122 - 1, v1121));
    if (!v1122)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v1117 + 1) + 16))(*((_QWORD *)&v1117 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1117 + 1));
    }
  }
  v1115[329] = 0;
  v1123 = vceqzq_s8(*(int8x16_t *)(v1115 + 328));
  v1124 = vmovl_s8(*(int8x8_t *)v1123.i8);
  v1125 = vmovl_high_s16(v1124);
  v1126.i64[0] = v1125.u32[2];
  v1126.i64[1] = v1125.u32[3];
  v1127 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v1126);
  v1128 = vmovl_high_s8(v1123);
  v1129 = vmovl_high_s16(v1128);
  v1126.i64[0] = v1129.u32[2];
  v1126.i64[1] = v1129.u32[3];
  v1130 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v1126);
  v1131 = vmovl_s16(*(int16x4_t *)v1124.i8);
  v1126.i64[0] = v1131.u32[2];
  v1126.i64[1] = v1131.u32[3];
  v1132 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v1126);
  v1133 = vmovl_s16(*(int16x4_t *)v1128.i8);
  v1126.i64[0] = v1133.u32[2];
  v1126.i64[1] = v1133.u32[3];
  v1134 = vbicq_s8((int8x16_t)xmmword_19FFB30A0, v1126);
  v1126.i64[0] = v1125.u32[0];
  v1126.i64[1] = v1125.u32[1];
  v1135 = vbicq_s8((int8x16_t)xmmword_19FFB30B0, v1126);
  v1126.i64[0] = v1129.u32[0];
  v1126.i64[1] = v1129.u32[1];
  v1136 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v1126);
  v1126.i64[0] = v1131.u32[0];
  v1126.i64[1] = v1131.u32[1];
  v1137 = vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v1126);
  v1126.i64[0] = v1133.u32[0];
  v1126.i64[1] = v1133.u32[1];
  v1138 = vbicq_s8((int8x16_t)xmmword_19FFB30D0, v1126);
  v1139 = vceqzq_s8(*(int8x16_t *)(v1115 + 344));
  v1140 = vmovl_s8(*(int8x8_t *)v1139.i8);
  v1141 = vmovl_high_s16(v1140);
  v1126.i64[0] = v1141.u32[2];
  v1126.i64[1] = v1141.u32[3];
  v1142 = vbicq_s8((int8x16_t)xmmword_19FFB30E0, v1126);
  v1143 = vmovl_high_s8(v1139);
  v1144 = vmovl_high_s16(v1143);
  v1126.i64[0] = v1144.u32[2];
  v1126.i64[1] = v1144.u32[3];
  v1145 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v1126);
  v1146 = vmovl_s16(*(int16x4_t *)v1140.i8);
  v1126.i64[0] = v1146.u32[2];
  v1126.i64[1] = v1146.u32[3];
  v1147 = vbicq_s8((int8x16_t)xmmword_19FFB3100, v1126);
  v1148 = vmovl_s16(*(int16x4_t *)v1143.i8);
  v1126.i64[0] = v1148.u32[2];
  v1126.i64[1] = v1148.u32[3];
  v1149 = vbicq_s8((int8x16_t)xmmword_19FFB3110, v1126);
  v1126.i64[0] = v1141.u32[0];
  v1126.i64[1] = v1141.u32[1];
  v1150 = vbicq_s8((int8x16_t)xmmword_19FFB3120, v1126);
  v1126.i64[0] = v1144.u32[0];
  v1126.i64[1] = v1144.u32[1];
  v1151 = vbicq_s8((int8x16_t)xmmword_19FFB3130, v1126);
  v1126.i64[0] = v1146.u32[0];
  v1126.i64[1] = v1146.u32[1];
  v1152 = vbicq_s8((int8x16_t)xmmword_19FFB3140, v1126);
  v1126.i64[0] = v1148.u32[0];
  v1126.i64[1] = v1148.u32[1];
  v1153 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v1126), v1138);
  v1154 = vorrq_s8(v1152, v1137);
  v1155 = vorrq_s8(v1151, v1136);
  v1156 = vorrq_s8(v1150, v1135);
  v1157 = vorrq_s8(v1149, v1134);
  v1158 = vorrq_s8(v1147, v1132);
  v1159 = vorrq_s8(v1145, v1130);
  v1160 = vorrq_s8(v1142, v1127);
  v1161 = vceqzq_s8(*(int8x16_t *)(v1115 + 360));
  v1162 = vmovl_s8(*(int8x8_t *)v1161.i8);
  v1163 = vmovl_high_s16(v1162);
  v1164 = vmovl_high_s8(v1161);
  v1165 = vmovl_high_s16(v1164);
  v1166 = vmovl_s16(*(int16x4_t *)v1162.i8);
  v1167 = vmovl_s16(*(int16x4_t *)v1164.i8);
  v1126.i64[0] = v1167.i32[0];
  v1126.i64[1] = v1167.i32[1];
  v1168 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v1126);
  v1126.i64[0] = v1166.i32[0];
  v1126.i64[1] = v1166.i32[1];
  v1169 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v1126);
  v1126.i64[0] = v1165.i32[0];
  v1126.i64[1] = v1165.i32[1];
  v1170 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v1126);
  v1126.i64[0] = v1163.i32[0];
  v1126.i64[1] = v1163.i32[1];
  v1171 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v1126);
  v1126.i64[0] = v1163.i32[2];
  v1126.i64[1] = v1163.i32[3];
  v1172 = v1126;
  v1126.i64[0] = v1165.i32[2];
  v1126.i64[1] = v1165.i32[3];
  v1173 = v1126;
  v1126.i64[0] = v1166.i32[2];
  v1126.i64[1] = v1166.i32[3];
  v1174 = v1126;
  v1126.i64[0] = v1167.i32[2];
  v1126.i64[1] = v1167.i32[3];
  v1175 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v1126);
  v1176 = vceqzq_s8(*(int8x16_t *)(v1115 + 376));
  v1177 = vmovl_high_s8(v1176);
  v1178 = vmovl_s16(*(int16x4_t *)v1177.i8);
  v1179 = vmovl_s8(*(int8x8_t *)v1176.i8);
  v1180 = vmovl_s16(*(int16x4_t *)v1179.i8);
  v1181 = vmovl_high_s16(v1177);
  v1182 = vmovl_high_s16(v1179);
  v1126.i64[0] = v1182.i32[2];
  v1126.i64[1] = v1182.i32[3];
  v1183 = vbicq_s8((int8x16_t)xmmword_19FFB31E0, v1126);
  v1126.i64[0] = v1181.i32[2];
  v1126.i64[1] = v1181.i32[3];
  v1184 = vbicq_s8((int8x16_t)xmmword_19FFB31F0, v1126);
  v1126.i64[0] = v1180.i32[2];
  v1126.i64[1] = v1180.i32[3];
  v1185 = vbicq_s8((int8x16_t)xmmword_19FFB3200, v1126);
  v1126.i64[0] = v1178.i32[2];
  v1126.i64[1] = v1178.i32[3];
  v1186 = vbicq_s8((int8x16_t)xmmword_19FFB3210, v1126);
  v1126.i64[0] = v1182.i32[0];
  v1126.i64[1] = v1182.i32[1];
  v1187 = vbicq_s8((int8x16_t)xmmword_19FFB3220, v1126);
  v1126.i64[0] = v1181.i32[0];
  v1126.i64[1] = v1181.i32[1];
  v1188 = vbicq_s8((int8x16_t)xmmword_19FFB3230, v1126);
  v1126.i64[0] = v1180.i32[0];
  v1126.i64[1] = v1180.i32[1];
  v1189 = vbicq_s8((int8x16_t)xmmword_19FFB3240, v1126);
  v1126.i64[0] = v1178.i32[0];
  v1126.i64[1] = v1178.i32[1];
  *((_QWORD *)v1115 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v1189, v1169), v1154), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v1126), v1168), v1153)), vorrq_s8(vorrq_s8(vorrq_s8(v1187, v1171), v1156), vorrq_s8(vorrq_s8(v1188, v1170), v1155))), (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v1185, vbicq_s8((int8x16_t)xmmword_19FFB31B0, v1174)), v1158), vorrq_s8(vorrq_s8(v1186, v1175), v1157)), vorrq_s8(vorrq_s8(vorrq_s8(v1183, vbicq_s8((int8x16_t)xmmword_19FFB31D0, v1172)),
                                                 v1160),
                                               vorrq_s8(vorrq_s8(v1184, vbicq_s8((int8x16_t)xmmword_19FFB31C0, v1173)), v1159)))));
  *((_QWORD *)v1115 + 3) = &off_1E42BA450;
  v1115[312] = 1;
  *((_QWORD *)this + 105) = v1115 + 24;
  v1190 = (std::__shared_weak_count *)*((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = v1115;
  if (v1190)
  {
    v1191 = (unint64_t *)&v1190->__shared_owners_;
    do
      v1192 = __ldaxr(v1191);
    while (__stlxr(v1192 - 1, v1191));
    if (!v1192)
    {
      ((void (*)(std::__shared_weak_count *))v1190->__on_zero_shared)(v1190);
      std::__shared_weak_count::__release_weak(v1190);
    }
  }
  v1193 = *(std::__shared_weak_count **)&v1417[8];
  if (*(_QWORD *)&v1417[8])
  {
    v1194 = (unint64_t *)(*(_QWORD *)&v1417[8] + 8);
    do
      v1195 = __ldaxr(v1194);
    while (__stlxr(v1195 - 1, v1194));
    if (!v1195)
    {
      ((void (*)(std::__shared_weak_count *))v1193->__on_zero_shared)(v1193);
      std::__shared_weak_count::__release_weak(v1193);
    }
  }
  v1196 = operator new(0x100uLL);
  v1197 = v1196;
  v1196[1] = 0;
  v1196[2] = 0;
  *v1196 = &off_1E42E33C0;
  v1198 = v1196 + 3;
  v1199 = *((_QWORD *)this + 105);
  v1200 = (std::__shared_weak_count *)*((_QWORD *)this + 106);
  if (v1200)
  {
    v1201 = (unint64_t *)&v1200->__shared_owners_;
    do
      v1202 = __ldxr(v1201);
    while (__stxr(v1202 + 1, v1201));
    ggl::PipelineSetup::PipelineSetup(v1196 + 3, v1199, (uint64_t)v1200);
    v1203 = (unint64_t *)&v1200->__shared_owners_;
    do
      v1204 = __ldaxr(v1203);
    while (__stlxr(v1204 - 1, v1203));
    if (!v1204)
    {
      ((void (*)(std::__shared_weak_count *))v1200->__on_zero_shared)(v1200);
      std::__shared_weak_count::__release_weak(v1200);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup(v1196 + 3, v1199, 0);
  }
  v1197[3] = &off_1E42BA420;
  *((_QWORD *)this + 107) = v1198;
  v1205 = (std::__shared_weak_count *)*((_QWORD *)this + 108);
  *((_QWORD *)this + 108) = v1197;
  if (v1205)
  {
    v1206 = (unint64_t *)&v1205->__shared_owners_;
    do
      v1207 = __ldaxr(v1206);
    while (__stlxr(v1207 - 1, v1206));
    if (!v1207)
    {
      ((void (*)(std::__shared_weak_count *))v1205->__on_zero_shared)(v1205);
      std::__shared_weak_count::__release_weak(v1205);
    }
  }
  v1208 = *((_QWORD *)this + 107);
  v1209 = *(_QWORD **)(v1208 + 64);
  v1209[1] = 0;
  v1210 = *((_QWORD *)this + 17);
  *v1209 = v1210;
  v1211 = *(_QWORD **)(v1208 + 160);
  v1212 = *((_QWORD *)this + 18);
  if (v1212)
  {
    v1213 = (unint64_t *)(v1212 + 8);
    do
      v1214 = __ldxr(v1213);
    while (__stxr(v1214 + 1, v1213));
  }
  v1215 = (std::__shared_weak_count *)v1211[1];
  *v1211 = v1210;
  v1211[1] = v1212;
  if (v1215)
  {
    v1216 = (unint64_t *)&v1215->__shared_owners_;
    do
      v1217 = __ldaxr(v1216);
    while (__stlxr(v1217 - 1, v1216));
    if (!v1217)
    {
      ((void (*)(std::__shared_weak_count *))v1215->__on_zero_shared)(v1215);
      std::__shared_weak_count::__release_weak(v1215);
    }
  }

  v1218 = (int64x2_t *)operator new();
  v1219 = *((_QWORD *)this + 66);
  v1220 = *((_QWORD *)this + 72);
  v1221 = *((_QWORD *)this + 25);
  v1218->i64[0] = (uint64_t)&off_1E42B59B0;
  v1218[1].i64[0] = (uint64_t)"";
  v1218[1].i64[1] = v1219;
  v1218[2].i64[0] = v1220;
  v1218[2].i32[2] = 0;
  v1218[3].i64[0] = 0;
  v1218[3].i32[2] = 1065353216;
  v1218[4].i64[0] = v1221;
  v1218[4].i64[1] = 0;
  v1218[5].i64[0] = 0;
  v1218[5].i64[1] = 0;
  v1218[6] = vdupq_n_s64(1uLL);
  v1218[7].i64[0] = 0;
  v1222 = *((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = v1218;
  if (v1222)
    (*(void (**)(uint64_t))(*(_QWORD *)v1222 + 8))(v1222);
  v1223 = (int64x2_t *)operator new();
  v1224 = *((_QWORD *)this + 66);
  v1225 = *((_QWORD *)this + 74);
  v1226 = *((_QWORD *)this + 25);
  v1223->i64[0] = (uint64_t)&off_1E42B59B0;
  v1223[1].i64[0] = (uint64_t)"";
  v1223[1].i64[1] = v1224;
  v1223[2].i64[0] = v1225;
  v1223[2].i32[2] = 0;
  v1223[3].i64[0] = 0;
  v1223[3].i32[2] = 1065353216;
  v1223[4].i64[0] = v1226;
  v1223[4].i64[1] = 0;
  v1223[5].i64[0] = 0;
  v1223[5].i64[1] = 0;
  v1223[6] = vdupq_n_s64(1uLL);
  v1223[7].i64[0] = 0;
  v1227 = *((_QWORD *)this + 77);
  *((_QWORD *)this + 77) = v1223;
  if (v1227)
    (*(void (**)(uint64_t))(*(_QWORD *)v1227 + 8))(v1227);
  v1228 = (int64x2_t *)operator new();
  v1229 = *((_QWORD *)this + 78);
  v1230 = *((_QWORD *)this + 82);
  v1231 = *((_QWORD *)this + 25);
  v1228->i64[0] = (uint64_t)&off_1E42B59B0;
  v1228[1].i64[0] = (uint64_t)"";
  v1228[1].i64[1] = v1229;
  v1228[2].i64[0] = v1230;
  v1228[2].i32[2] = 0;
  v1228[3].i64[0] = 0;
  v1228[3].i32[2] = 1065353216;
  v1228[4].i64[0] = v1231;
  v1228[4].i64[1] = 0;
  v1228[5].i64[0] = 0;
  v1228[5].i64[1] = 0;
  v1228[6] = vdupq_n_s64(1uLL);
  v1228[7].i64[0] = 0;
  v1232 = *((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = v1228;
  if (v1232)
    (*(void (**)(uint64_t))(*(_QWORD *)v1232 + 8))(v1232);
  v1233 = (int64x2_t *)operator new();
  v1234 = *((_QWORD *)this + 85);
  v1235 = *((_QWORD *)this + 91);
  v1236 = *((_QWORD *)this + 25);
  v1233->i64[0] = (uint64_t)&off_1E42B59B0;
  v1233[1].i64[0] = (uint64_t)"";
  v1233[1].i64[1] = v1234;
  v1233[2].i64[0] = v1235;
  v1233[2].i32[2] = 0;
  v1233[3].i64[0] = 0;
  v1233[3].i32[2] = 1065353216;
  v1233[4].i64[0] = v1236;
  v1233[4].i64[1] = 0;
  v1233[5].i64[0] = 0;
  v1233[5].i64[1] = 0;
  v1233[6] = vdupq_n_s64(1uLL);
  v1233[7].i64[0] = 0;
  v1237 = *((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = v1233;
  if (v1237)
    (*(void (**)(uint64_t))(*(_QWORD *)v1237 + 8))(v1237);
  v1238 = (int64x2_t *)operator new();
  v1239 = *((_QWORD *)this + 85);
  v1240 = *((_QWORD *)this + 95);
  v1241 = *((_QWORD *)this + 25);
  v1238->i64[0] = (uint64_t)&off_1E42B59B0;
  v1238[1].i64[0] = (uint64_t)"";
  v1238[1].i64[1] = v1239;
  v1238[2].i64[0] = v1240;
  v1238[2].i32[2] = 0;
  v1238[3].i64[0] = 0;
  v1238[3].i32[2] = 1065353216;
  v1238[4].i64[0] = v1241;
  v1238[4].i64[1] = 0;
  v1238[5].i64[0] = 0;
  v1238[5].i64[1] = 0;
  v1238[6] = vdupq_n_s64(1uLL);
  v1238[7].i64[0] = 0;
  v1242 = *((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = v1238;
  if (v1242)
    (*(void (**)(uint64_t))(*(_QWORD *)v1242 + 8))(v1242);
  v1243 = (int64x2_t *)operator new();
  v1244 = *((_QWORD *)this + 85);
  v1245 = *((_QWORD *)this + 93);
  v1246 = *((_QWORD *)this + 25);
  v1243->i64[0] = (uint64_t)&off_1E42B59B0;
  v1243[1].i64[0] = (uint64_t)"";
  v1243[1].i64[1] = v1244;
  v1243[2].i64[0] = v1245;
  v1243[2].i32[2] = 0;
  v1243[3].i64[0] = 0;
  v1243[3].i32[2] = 1065353216;
  v1243[4].i64[0] = v1246;
  v1243[4].i64[1] = 0;
  v1243[5].i64[0] = 0;
  v1243[5].i64[1] = 0;
  v1243[6] = vdupq_n_s64(1uLL);
  v1243[7].i64[0] = 0;
  v1247 = *((_QWORD *)this + 100);
  *((_QWORD *)this + 100) = v1243;
  if (v1247)
    (*(void (**)(uint64_t))(*(_QWORD *)v1247 + 8))(v1247);
  v1248 = (int64x2_t *)operator new();
  v1249 = *((_QWORD *)this + 85);
  v1250 = *((_QWORD *)this + 97);
  v1251 = *((_QWORD *)this + 25);
  v1248->i64[0] = (uint64_t)&off_1E42B59B0;
  v1248[1].i64[0] = (uint64_t)"";
  v1248[1].i64[1] = v1249;
  v1248[2].i64[0] = v1250;
  v1248[2].i32[2] = 0;
  v1248[3].i64[0] = 0;
  v1248[3].i32[2] = 1065353216;
  v1248[4].i64[0] = v1251;
  v1248[4].i64[1] = 0;
  v1248[5].i64[0] = 0;
  v1248[5].i64[1] = 0;
  v1248[6] = vdupq_n_s64(1uLL);
  v1248[7].i64[0] = 0;
  v1252 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = v1248;
  if (v1252)
    (*(void (**)(uint64_t))(*(_QWORD *)v1252 + 8))(v1252);
  v1253 = (int64x2_t *)operator new();
  v1254 = *((_QWORD *)this + 103);
  v1255 = *((_QWORD *)this + 107);
  v1256 = *((_QWORD *)this + 25);
  v1253->i64[0] = (uint64_t)&off_1E42B59B0;
  v1253[1].i64[0] = (uint64_t)"";
  v1253[1].i64[1] = v1254;
  v1253[2].i64[0] = v1255;
  v1253[2].i32[2] = 0;
  v1253[3].i64[0] = 0;
  v1253[3].i32[2] = 1065353216;
  v1253[4].i64[0] = v1256;
  v1253[4].i64[1] = 0;
  v1253[5].i64[0] = 0;
  v1253[5].i64[1] = 0;
  v1253[6] = vdupq_n_s64(1uLL);
  v1253[7].i64[0] = 0;
  v1257 = *((_QWORD *)this + 109);
  *((_QWORD *)this + 109) = v1253;
  if (v1257)
    (*(void (**)(uint64_t))(*(_QWORD *)v1257 + 8))(v1257);
  if (v1344)
  {
    v1258 = v1342;
    if (*((_QWORD *)&v1342 + 1) != (_QWORD)v1342)
    {
      v1259 = (_QWORD *)*((_QWORD *)&v1341 + 1);
      v1260 = v1343;
      v1261 = HIBYTE(v1343);
      if ((_QWORD)v1341 && *(_BYTE *)(*((_QWORD *)&v1341 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v1341 + 64))();
      if (v1260 && !v1261)
      {
        v1263 = v1259[7];
        v1262 = v1259[8];
        if (v1262 == v1263)
          v1263 = v1259[10] - v1259[9];
        if ((unint64_t)v1258 < v1263)
          v1263 = v1258;
        if (v1262 <= *((_QWORD *)&v1258 + 1))
          v1262 = *((_QWORD *)&v1258 + 1);
        if (v1262 == v1263)
          v1262 = v1263 + v1259[10] - v1259[9];
        v1259[7] = v1263;
        v1259[8] = v1262;
      }
    }
  }
  v1264 = v1346;
  if (v1346)
  {
    v1265 = (unint64_t *)&v1346->__shared_owners_;
    do
      v1266 = __ldaxr(v1265);
    while (__stlxr(v1266 - 1, v1265));
    if (!v1266)
    {
      ((void (*)(std::__shared_weak_count *))v1264->__on_zero_shared)(v1264);
      std::__shared_weak_count::__release_weak(v1264);
    }
  }
  if (v1351)
  {
    v1267 = v1348;
    v1268 = v1349;
    if (v1349 != v1348)
    {
      v1269 = (_QWORD *)*((_QWORD *)&v1347 + 1);
      v1270 = v1350;
      v1271 = HIBYTE(v1350);
      if ((_QWORD)v1347 && *(_BYTE *)(*((_QWORD *)&v1347 + 1) + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v1347 + 64))();
      if (v1270 && !v1271)
      {
        v1273 = v1269[7];
        v1272 = v1269[8];
        if (v1272 == v1273)
          v1273 = v1269[10] - v1269[9];
        if (v1267 < v1273)
          v1273 = v1267;
        if (v1272 <= v1268)
          v1272 = v1268;
        if (v1272 == v1273)
          v1272 = v1273 + v1269[10] - v1269[9];
        v1269[7] = v1273;
        v1269[8] = v1272;
      }
    }
  }

  return this;
}

void sub_19F346AC4(_Unwind_Exception *a1)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x400]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x410]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x420]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x430]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x440]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x450]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x460]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x470]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x480]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x490]);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x4A0]);

  _Unwind_Resume(a1);
}

_QWORD *ggl::PipelineSetup::PipelineSetup(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  int v60;
  uint64_t v61;
  geo::read_write_lock *v62;
  const char *v63;
  malloc_zone_t *zone;
  uint64_t v65;
  int v66;
  uint64_t v67;
  geo::read_write_lock *v68;
  const char *v69;
  malloc_zone_t *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  geo::read_write_lock *v74;
  const char *v75;
  malloc_zone_t *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  geo::read_write_lock *v80;
  const char *v81;
  malloc_zone_t *v82;
  int v83;
  uint64_t v84;
  geo::read_write_lock *v85;
  const char *v86;
  malloc_zone_t *v87;
  int v88;
  uint64_t v89;
  geo::read_write_lock *v90;
  const char *v91;
  malloc_zone_t *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;

  *a1 = off_1E42B6730;
  a1[1] = **(_QWORD **)(a2 + 40);
  a1[2] = a2;
  a1[3] = a3;
  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a1[4] = 0;
  a1[5] = 0;
  v6 = (uint64_t)(a1 + 4);
  a1[6] = 0;
  if ((v7 & 1) == 0)
  {
    v6 = (uint64_t)(a1 + 4);
    if (v60)
    {
      v61 = operator new();
      *(_QWORD *)(v61 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v61 + 24) = "GeoGL";
      *(_OWORD *)(v61 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v61 = &off_1E42B5668;
      *(_QWORD *)(v61 + 8) = "GeoGL";
      *(_OWORD *)(v61 + 72) = 0u;
      *(_OWORD *)(v61 + 88) = 0u;
      *(_OWORD *)(v61 + 104) = 0u;
      *(_OWORD *)(v61 + 120) = 0u;
      *(_OWORD *)(v61 + 136) = 0u;
      *(_OWORD *)(v61 + 152) = 0u;
      *(_OWORD *)(v61 + 168) = 0u;
      *(_OWORD *)(v61 + 184) = 0u;
      *(_OWORD *)(v61 + 200) = 0u;
      *(_OWORD *)(v61 + 216) = 0u;
      *(_OWORD *)(v61 + 232) = 0u;
      *(_QWORD *)(v61 + 248) = 0;
      *(_OWORD *)(v61 + 56) = 0u;
      v62 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v61 + 56), 0);
      if ((_DWORD)v62)
        geo::read_write_lock::logFailure(v62, (uint64_t)"initialization", v63);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v61 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v61 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v61;
      v6 = (uint64_t)(a1 + 4);
    }
  }
  v8 = ggl::Allocator::instance(void)::alloc;
  a1[8] = 0;
  a1[7] = v8;
  a1[9] = 0;
  a1[10] = 0;
  if ((v8 & 1) == 0)
  {
    v65 = v6;
    v6 = v65;
    if (v66)
    {
      v67 = operator new();
      *(_QWORD *)(v67 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v67 + 24) = "GeoGL";
      *(_OWORD *)(v67 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v67 = &off_1E42B5668;
      *(_QWORD *)(v67 + 8) = "GeoGL";
      *(_OWORD *)(v67 + 72) = 0u;
      *(_OWORD *)(v67 + 88) = 0u;
      *(_OWORD *)(v67 + 104) = 0u;
      *(_OWORD *)(v67 + 120) = 0u;
      *(_OWORD *)(v67 + 136) = 0u;
      *(_OWORD *)(v67 + 152) = 0u;
      *(_OWORD *)(v67 + 168) = 0u;
      *(_OWORD *)(v67 + 184) = 0u;
      *(_OWORD *)(v67 + 200) = 0u;
      *(_OWORD *)(v67 + 216) = 0u;
      *(_OWORD *)(v67 + 232) = 0u;
      *(_QWORD *)(v67 + 248) = 0;
      *(_OWORD *)(v67 + 56) = 0u;
      v68 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v67 + 56), 0);
      if ((_DWORD)v68)
        geo::read_write_lock::logFailure(v68, (uint64_t)"initialization", v69);
      v70 = malloc_create_zone(0, 0);
      *(_QWORD *)(v67 + 48) = v70;
      malloc_set_zone_name(v70, "GeoGL");
      *(_QWORD *)(v67 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v67;
      v6 = v65;
    }
  }
  v9 = ggl::Allocator::instance(void)::alloc;
  a1[12] = 0;
  a1[11] = v9;
  a1[13] = 0;
  a1[14] = 0;
  if ((v9 & 1) == 0)
  {
    v71 = v6;
    v6 = v71;
    if (v72)
    {
      v73 = operator new();
      *(_QWORD *)(v73 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v73 + 24) = "GeoGL";
      *(_OWORD *)(v73 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v73 = &off_1E42B5668;
      *(_QWORD *)(v73 + 8) = "GeoGL";
      *(_OWORD *)(v73 + 72) = 0u;
      *(_OWORD *)(v73 + 88) = 0u;
      *(_OWORD *)(v73 + 104) = 0u;
      *(_OWORD *)(v73 + 120) = 0u;
      *(_OWORD *)(v73 + 136) = 0u;
      *(_OWORD *)(v73 + 152) = 0u;
      *(_OWORD *)(v73 + 168) = 0u;
      *(_OWORD *)(v73 + 184) = 0u;
      *(_OWORD *)(v73 + 200) = 0u;
      *(_OWORD *)(v73 + 216) = 0u;
      *(_OWORD *)(v73 + 232) = 0u;
      *(_QWORD *)(v73 + 248) = 0;
      *(_OWORD *)(v73 + 56) = 0u;
      v74 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v73 + 56), 0);
      if ((_DWORD)v74)
        geo::read_write_lock::logFailure(v74, (uint64_t)"initialization", v75);
      v76 = malloc_create_zone(0, 0);
      *(_QWORD *)(v73 + 48) = v76;
      malloc_set_zone_name(v76, "GeoGL");
      *(_QWORD *)(v73 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v73;
      v6 = v71;
    }
  }
  v10 = ggl::Allocator::instance(void)::alloc;
  a1[16] = 0;
  a1[15] = v10;
  a1[17] = 0;
  a1[18] = 0;
  if ((v10 & 1) == 0)
  {
    v77 = v6;
    v6 = v77;
    if (v78)
    {
      v79 = operator new();
      *(_QWORD *)(v79 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v79 + 24) = "GeoGL";
      *(_OWORD *)(v79 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v79 = &off_1E42B5668;
      *(_QWORD *)(v79 + 8) = "GeoGL";
      *(_OWORD *)(v79 + 72) = 0u;
      *(_OWORD *)(v79 + 88) = 0u;
      *(_OWORD *)(v79 + 104) = 0u;
      *(_OWORD *)(v79 + 120) = 0u;
      *(_OWORD *)(v79 + 136) = 0u;
      *(_OWORD *)(v79 + 152) = 0u;
      *(_OWORD *)(v79 + 168) = 0u;
      *(_OWORD *)(v79 + 184) = 0u;
      *(_OWORD *)(v79 + 200) = 0u;
      *(_OWORD *)(v79 + 216) = 0u;
      *(_OWORD *)(v79 + 232) = 0u;
      *(_QWORD *)(v79 + 248) = 0;
      *(_OWORD *)(v79 + 56) = 0u;
      v80 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v79 + 56), 0);
      if ((_DWORD)v80)
        geo::read_write_lock::logFailure(v80, (uint64_t)"initialization", v81);
      v82 = malloc_create_zone(0, 0);
      *(_QWORD *)(v79 + 48) = v82;
      malloc_set_zone_name(v82, "GeoGL");
      *(_QWORD *)(v79 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v79;
      v6 = v77;
    }
  }
  v11 = ggl::Allocator::instance(void)::alloc;
  a1[20] = 0;
  a1[19] = v11;
  a1[21] = 0;
  a1[22] = 0;
  if ((v11 & 1) == 0)
  {
    v93 = v6;
    v6 = v93;
    if (v83)
    {
      v84 = operator new();
      *(_QWORD *)(v84 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v84 + 24) = "GeoGL";
      *(_OWORD *)(v84 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v84 = &off_1E42B5668;
      *(_QWORD *)(v84 + 8) = "GeoGL";
      *(_OWORD *)(v84 + 72) = 0u;
      *(_OWORD *)(v84 + 88) = 0u;
      *(_OWORD *)(v84 + 104) = 0u;
      *(_OWORD *)(v84 + 120) = 0u;
      *(_OWORD *)(v84 + 136) = 0u;
      *(_OWORD *)(v84 + 152) = 0u;
      *(_OWORD *)(v84 + 168) = 0u;
      *(_OWORD *)(v84 + 184) = 0u;
      *(_OWORD *)(v84 + 200) = 0u;
      *(_OWORD *)(v84 + 216) = 0u;
      *(_OWORD *)(v84 + 232) = 0u;
      *(_QWORD *)(v84 + 248) = 0;
      *(_OWORD *)(v84 + 56) = 0u;
      v85 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v84 + 56), 0);
      if ((_DWORD)v85)
        geo::read_write_lock::logFailure(v85, (uint64_t)"initialization", v86);
      v87 = malloc_create_zone(0, 0);
      *(_QWORD *)(v84 + 48) = v87;
      malloc_set_zone_name(v87, "GeoGL");
      *(_QWORD *)(v84 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v84;
      v6 = v93;
    }
  }
  v12 = ggl::Allocator::instance(void)::alloc;
  a1[24] = 0;
  a1[23] = v12;
  a1[25] = 0;
  a1[26] = 0;
  if ((v12 & 1) == 0)
  {
    v94 = v6;
    v6 = v94;
    if (v88)
    {
      v89 = operator new();
      *(_QWORD *)(v89 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v89 + 24) = "GeoGL";
      *(_OWORD *)(v89 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v89 = &off_1E42B5668;
      *(_QWORD *)(v89 + 8) = "GeoGL";
      *(_OWORD *)(v89 + 72) = 0u;
      *(_OWORD *)(v89 + 88) = 0u;
      *(_OWORD *)(v89 + 104) = 0u;
      *(_OWORD *)(v89 + 120) = 0u;
      *(_OWORD *)(v89 + 136) = 0u;
      *(_OWORD *)(v89 + 152) = 0u;
      *(_OWORD *)(v89 + 168) = 0u;
      *(_OWORD *)(v89 + 184) = 0u;
      *(_OWORD *)(v89 + 200) = 0u;
      *(_OWORD *)(v89 + 216) = 0u;
      *(_OWORD *)(v89 + 232) = 0u;
      *(_QWORD *)(v89 + 248) = 0;
      *(_OWORD *)(v89 + 56) = 0u;
      v90 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v89 + 56), 0);
      if ((_DWORD)v90)
        geo::read_write_lock::logFailure(v90, (uint64_t)"initialization", v91);
      v92 = malloc_create_zone(0, 0);
      *(_QWORD *)(v89 + 48) = v92;
      malloc_set_zone_name(v92, "GeoGL");
      *(_QWORD *)(v89 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v89;
      v6 = v94;
    }
  }
  a1[27] = ggl::Allocator::instance(void)::alloc;
  a1[28] = 0;
  v13 = (_QWORD *)a1[1];
  v14 = v13[2];
  v95 = 0uLL;
  v15 = a1[4];
  v16 = (a1[5] - v15) >> 4;
  if (v14 <= v16)
  {
    if (v14 < v16)
      a1[5] = v15 + 16 * v14;
  }
  else
  {
    std::vector<ggl::DeviceDataElement,geo::StdAllocator<ggl::DeviceDataElement,ggl::Allocator>>::__append(v6, v14 - v16, &v95);
    v13 = (_QWORD *)a1[1];
  }
  v17 = v13[4];
  v95 = 0uLL;
  v18 = a1[8];
  v19 = (a1[9] - v18) >> 4;
  if (v17 <= v19)
  {
    if (v17 < v19)
      a1[9] = v18 + 16 * v17;
  }
  else
  {
    std::vector<ggl::DeviceDataElement,geo::StdAllocator<ggl::DeviceDataElement,ggl::Allocator>>::__append((uint64_t)(a1 + 8), v17 - v19, &v95);
    v13 = (_QWORD *)a1[1];
  }
  v20 = v13[5];
  *(_QWORD *)&v95 = 0;
  v21 = a1[12];
  v22 = (a1[13] - v21) >> 3;
  if (v20 <= v22)
  {
    if (v20 < v22)
      a1[13] = v21 + 8 * v20;
  }
  else
  {
    std::vector<ggl::Texture *,geo::StdAllocator<ggl::Texture *,ggl::Allocator>>::__append((uint64_t)(a1 + 12), v20 - v22, &v95);
  }
  v23 = (uint64_t)(a1[5] - a1[4]) >> 4;
  v95 = 0uLL;
  v24 = a1[16];
  v25 = a1[17];
  v26 = (v25 - v24) >> 4;
  v27 = v23 - v26;
  if (v23 <= v26)
  {
    if (v23 < v26)
    {
      v28 = v24 + 16 * v23;
      if (v25 == v28)
      {
        a1[17] = v28;
      }
      else
      {
        do
        {
          v29 = *(std::__shared_weak_count **)(v25 - 8);
          if (v29)
          {
            p_shared_owners = (unint64_t *)&v29->__shared_owners_;
            do
              v31 = __ldaxr(p_shared_owners);
            while (__stlxr(v31 - 1, p_shared_owners));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *, unint64_t))v29->__on_zero_shared)(v29, v27);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          v25 -= 16;
        }
        while (v25 != v28);
        v32 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
        a1[17] = v28;
        if (v32)
        {
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v32->__on_zero_shared)(v32, v27);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
      }
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::BufferData>,geo::StdAllocator<std::shared_ptr<ggl::BufferData>,ggl::Allocator>>::__append((uint64_t)(a1 + 16), v27, &v95);
  }
  v35 = (uint64_t)(a1[9] - a1[8]) >> 4;
  v95 = 0uLL;
  v36 = a1[20];
  v37 = a1[21];
  v38 = (v37 - v36) >> 4;
  v39 = v35 - v38;
  if (v35 <= v38)
  {
    if (v35 < v38)
    {
      v40 = v36 + 16 * v35;
      if (v37 == v40)
      {
        a1[21] = v40;
      }
      else
      {
        do
        {
          v41 = *(std::__shared_weak_count **)(v37 - 8);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *, unint64_t))v41->__on_zero_shared)(v41, v39);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v37 -= 16;
        }
        while (v37 != v40);
        v44 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
        a1[21] = v40;
        if (v44)
        {
          v45 = (unint64_t *)&v44->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v44->__on_zero_shared)(v44, v39);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
      }
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::BufferData>,geo::StdAllocator<std::shared_ptr<ggl::BufferData>,ggl::Allocator>>::__append((uint64_t)(a1 + 20), v39, &v95);
  }
  v47 = (uint64_t)(a1[9] - a1[8]) >> 4;
  v95 = 0uLL;
  v48 = a1[24];
  v49 = a1[25];
  v50 = (v49 - v48) >> 4;
  v51 = v47 - v50;
  if (v47 <= v50)
  {
    if (v47 < v50)
    {
      v52 = v48 + 16 * v47;
      if (v49 == v52)
      {
        a1[25] = v52;
      }
      else
      {
        do
        {
          v53 = *(std::__shared_weak_count **)(v49 - 8);
          if (v53)
          {
            v54 = (unint64_t *)&v53->__shared_owners_;
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *, unint64_t))v53->__on_zero_shared)(v53, v51);
              std::__shared_weak_count::__release_weak(v53);
            }
          }
          v49 -= 16;
        }
        while (v49 != v52);
        v56 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
        a1[25] = v52;
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v56->__on_zero_shared)(v56, v51);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
      }
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::BufferData>,geo::StdAllocator<std::shared_ptr<ggl::BufferData>,ggl::Allocator>>::__append((uint64_t)(a1 + 24), v51, &v95);
  }
  return a1;
}

_QWORD *md::SceneQueryLogic::runBeforeLayoutAtVariableRate(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id *v12;
  uint64_t *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t *v23;
  int v24;
  int v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  gss::Allocator *p_buf;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  char v38;
  uint64_t v39;
  const GEOStyleAttributes *v40;
  gss::Allocator *v41;
  __int128 v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  int v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count **v61;
  int v62;
  int v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  int v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  float v86;
  float v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unsigned int *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  float *v102;
  float v103;
  _BOOL4 v104;
  BOOL v105;
  unsigned int v106;
  float v107;
  _BOOL4 v108;
  BOOL v109;
  unsigned int v110;
  char *v111;
  unint64_t *v112;
  double *v113;
  uint64_t v114;
  float *v115;
  float v116;
  BOOL v117;
  unsigned int v118;
  float v119;
  float v120;
  uint64_t v121;
  float *v122;
  float v123;
  BOOL v124;
  unsigned int v125;
  float v126;
  float v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  NSObject *v135;
  const char *v136;
  unint64_t *v137;
  unint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t **v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t *v147;
  char v148;
  uint64_t *v149;
  uint64_t **v150;
  uint64_t **v151;
  unsigned __int8 v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t *i;
  uint64_t ***v159;
  uint64_t *v160;
  uint64_t *v161;
  int v162;
  uint64_t **v163;
  uint64_t **v164;
  uint64_t **v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  void *v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t j;
  _QWORD *result;
  uint64_t v188;
  uint64_t *v189;
  _BOOL4 v190;
  int v191;
  uint64_t *v192;
  id v193;
  void *v194;
  __int128 v195;
  uint64_t v196[3];
  uint64_t v197;
  std::__shared_weak_count *v198;
  std::__shared_weak_count *v199;
  uint64_t v200;
  uint64_t v201;
  _BYTE v202[15];
  char v203;
  unsigned int *v204;
  unsigned int *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  char v210;
  __int128 v211;
  _QWORD v212[3];
  _QWORD *v213;
  _QWORD v214[3];
  _QWORD *v215;
  _QWORD v216[3];
  _QWORD *v217;
  __int128 buf;
  uint64_t v219;
  gss::Allocator *v220;
  unsigned __int8 v221;
  uint64_t v222;

  v222 = *MEMORY[0x1E0C80C00];
  v214[0] = &off_1E42CCB60;
  v214[1] = a2;
  v215 = v214;
  v212[0] = &off_1E42CCBA8;
  v212[1] = a2;
  v213 = v212;
  v217 = v216;
  v216[0] = &off_1E42CCBA8;
  v216[1] = a2;
  _ZNSt3__110__function6__funcIZN2md15SceneQueryLogic29runBeforeLayoutAtVariableRateERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_15RegistryContextENS2_17NavigationContextENS2_17StyleLogicContextENS2_15SettingsContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_17SceneQueryContextEE3__0NS_9allocatorISN_EEFvvEEclEv((uint64_t)v214);
  v8 = v213;
  if (v213 == v212)
  {
    v9 = 4;
    v8 = v212;
  }
  else
  {
    if (!v213)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v215;
  if (v215 == v214)
  {
    v11 = 4;
    v10 = v214;
  }
  else
  {
    if (!v215)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  v12 = (id *)a3[2];
  v192 = (uint64_t *)a3[3];
  v13 = (uint64_t *)a3[4];
  v14 = v12[5];
  v193 = v14;
  if (v14)
  {
    v15 = v14;
    objc_msgSend(v14, "routeInfo");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "route");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v194 = v17;

    v190 = objc_msgSend(v15, "useType") == 1;
  }
  else
  {
    v17 = 0;
    v190 = 0;
    v194 = 0;
  }
  v18 = geo::_retain_ptr<GEOComposedRoute * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(*(void **)(a1 + 304), &v194);
  v19 = v17;
  v20 = v19;
  if (v19)
    v21 = v19;
  v191 = v18;
  v22 = *(void **)(a1 + 304);
  *(_QWORD *)(a1 + 304) = v20;

  v23 = v13;
  v24 = *(unsigned __int8 *)(a1 + 369);
  v25 = *(unsigned __int8 *)v12;
  *(_BYTE *)(a1 + 369) = v25;
  v27 = *(_QWORD *)(a1 + 320);
  v26 = *(std::__shared_weak_count **)(a1 + 328);
  *(_QWORD *)&v211 = v27;
  *((_QWORD *)&v211 + 1) = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
  }
  v210 = 0;
  *(_QWORD *)&buf = &off_1E42CC968;
  *((_QWORD *)&buf + 1) = &v210;
  p_buf = (gss::Allocator *)&buf;
  v220 = (gss::Allocator *)&buf;
  v32 = (_BYTE *)v192[6];
  v31 = (_BYTE *)v192[7];
  if (v32 == v31)
  {
    v35 = 4;
LABEL_27:
    v33 = a2;
    v34 = v23;
    goto LABEL_28;
  }
  do
  {
    LOBYTE(v204) = *v32;
    if (!v220)
      goto LABEL_323;
    (*(void (**)(gss::Allocator *, unsigned int **))(*(_QWORD *)v220 + 48))(v220, &v204);
    ++v32;
  }
  while (v32 != v31);
  p_buf = v220;
  if (v220 == (gss::Allocator *)&buf)
  {
    v35 = 4;
    p_buf = (gss::Allocator *)&buf;
    goto LABEL_27;
  }
  v33 = a2;
  v34 = v23;
  if (!v220)
    goto LABEL_29;
  v35 = 5;
LABEL_28:
  p_buf = (gss::Allocator *)(*(uint64_t (**)(void))(*(_QWORD *)p_buf + 8 * v35))();
LABEL_29:
  if (v210)
  {
    v36 = *(unsigned __int8 *)(a1 + 369);
    if (*(_BYTE *)(a1 + 369))
      v37 = 0;
    else
      v37 = v24 == v25;
    if (v37)
      v38 = v191 ^ 1;
    else
      v38 = 1;
    if ((v38 & 1) == 0)
      goto LABEL_74;
    v208 = 0;
    v209 = 0;
    if (v36)
      goto LABEL_38;
    goto LABEL_63;
  }
  v49 = v191;
  if (v24 != v25)
    v49 = 0;
  if ((v49 & 1) == 0)
  {
    v50 = *(unsigned __int8 *)(a1 + 369);
    v208 = 0;
    v209 = 0;
    if (v50)
    {
LABEL_38:
      v204 = 0;
      v205 = 0;
      v206 = 0;
      v207 = gss::Allocator::instance(p_buf);
      v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v207 + 16))(v207, 16, 4);
      v204 = (unsigned int *)v39;
      v206 = v39 + 16;
      if (v39)
        *(_QWORD *)v39 = 65624;
      *(_QWORD *)(v39 + 8) = 0xB00000005;
      v205 = (unsigned int *)(v39 + 16);
      memset(v202, 0, sizeof(v202));
      v203 = 1;
      *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v202, 0x10002u) = 1;
      objc_msgSend(*(id *)(a1 + 304), "styleAttributes");
      v40 = (const GEOStyleAttributes *)objc_claimAutoreleasedReturnValue();
      md::createFeatureAttributeSet((md *)&v198, v40);

      gss::FeatureAttributeSet::setByReplacingAttributes((gss::Allocator *)&v198, &v204, v196);
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v195, *v192, (gss::FeatureAttributeSet *)v196, (gss::QueryOverrides *)v202);
      v42 = v195;
      v195 = 0uLL;
      v211 = v42;
      if (v26)
      {
        v43 = (unint64_t *)&v26->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v45 = (std::__shared_weak_count *)*((_QWORD *)&v195 + 1);
      if (*((_QWORD *)&v195 + 1))
      {
        v46 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      if (v196[0])
      {
        v196[1] = v196[0];
        v41 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v197 + 40))(v197, v196[0], v196[2] - v196[0]);
      }
      if (v198)
      {
        v199 = v198;
        v41 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, std::__shared_weak_count *, uint64_t))(*(_QWORD *)v201 + 40))(v201, v198, v200 - (_QWORD)v198);
      }
      if (!v202[14] && *(_QWORD *)v202)
      {
        v48 = gss::Allocator::instance(v41);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v48 + 40))(v48, *(_QWORD *)v202, *(unsigned __int16 *)&v202[12]);
      }
      if (v204)
      {
        v205 = v204;
        (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v207 + 40))(v207, v204, v206 - (_QWORD)v204);
      }
LABEL_68:
      v53 = v209;
      if (v209)
      {
        v54 = (unint64_t *)&v209->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
      v27 = v211;
      goto LABEL_74;
    }
LABEL_63:
    v211 = 0uLL;
    if (v26)
    {
      v51 = (unint64_t *)&v26->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    goto LABEL_68;
  }
LABEL_74:
  if (v26)
  {
    v56 = (unint64_t *)&v26->__shared_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  v58 = *(std::__shared_weak_count **)(a1 + 328);
  *(_QWORD *)(a1 + 320) = v27;
  *(_QWORD *)(a1 + 328) = v26;
  if (v58)
  {
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = (std::__shared_weak_count **)(a1 + 320);
  v62 = *(unsigned __int8 *)(a1 + 120);
  v63 = *(unsigned __int8 *)(a1 + 121);
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
  if (*((_QWORD *)&v211 + 1))
  {
    v65 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (!v63)
    v61 = 0;
  if (v62)
  {
    v67 = *(_QWORD *)(a1 + 320);
    v68 = *(std::__shared_weak_count **)(a1 + 328);
    *(_QWORD *)&buf = v67;
    *((_QWORD *)&buf + 1) = v68;
    if (v68)
    {
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
  }
  else
  {
    v68 = 0;
    v67 = 0;
    buf = 0uLL;
  }
  md::SceneQueryLogic::handleNavigationFlex(a1, v33, v67, (uint64_t)v68, v191 ^ 1, a4);
  if (!v68)
    goto LABEL_99;
  v71 = (unint64_t *)&v68->__shared_owners_;
  do
    v72 = __ldaxr(v71);
  while (__stlxr(v72 - 1, v71));
  if (v72)
  {
LABEL_99:
    if (v63)
      goto LABEL_100;
LABEL_105:
    v73 = 0;
    v74 = 0;
    v198 = 0;
    v199 = 0;
    goto LABEL_106;
  }
  ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
  std::__shared_weak_count::__release_weak(v68);
  if (!v63)
    goto LABEL_105;
LABEL_100:
  v74 = *v61;
  v73 = v61[1];
  v198 = *v61;
  v199 = v73;
  if (v73)
  {
    v75 = (unint64_t *)&v73->__shared_owners_;
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 1, v75));
  }
LABEL_106:
  v77 = *v34;
  v78 = v34[1];
  if (*v34 != v78)
  {
    while (*(_BYTE *)v77 != 21)
    {
      v77 += 16;
      if (v77 == v78)
        goto LABEL_114;
    }
  }
  if (v77 == v78)
  {
    v80 = 0;
    if (!v73)
      goto LABEL_119;
  }
  else if (*(_QWORD *)(v77 + 8))
  {
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    v80 = objc_msgSend(v79, "enableDaVinciStyleRoute");

    if (!v73)
      goto LABEL_119;
  }
  else
  {
LABEL_114:
    v80 = 0;
    if (!v73)
      goto LABEL_119;
  }
  v81 = (unint64_t *)&v73->__shared_owners_;
  do
    v82 = __ldxr(v81);
  while (__stxr(v82 + 1, v81));
LABEL_119:
  v83 = *(std::__shared_weak_count **)(a1 + 360);
  *(_QWORD *)(a1 + 352) = v74;
  *(_QWORD *)(a1 + 360) = v73;
  if (v83)
  {
    v84 = (unint64_t *)&v83->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
    v74 = *(std::__shared_weak_count **)(a1 + 352);
  }
  if (!v74)
  {
    LODWORD(v96) = 0;
    goto LABEL_213;
  }
  md::LayoutContext::zoomAtCentrePoint(*(int8x8_t **)(v33 + 8));
  v87 = v86;
  v88 = *(std::__shared_weak_count **)(a4 + 80);
  *(_QWORD *)(a4 + 72) = 0;
  *(_QWORD *)(a4 + 80) = 0;
  if (v88)
  {
    v89 = (unint64_t *)&v88->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = *(unsigned int **)(a1 + 352);
  v92 = *(std::__shared_weak_count **)(a1 + 360);
  v204 = v91;
  v205 = (unsigned int *)v92;
  if (v92)
  {
    v93 = (unint64_t *)&v92->__shared_owners_;
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 1, v93));
    *((_QWORD *)&buf + 1) = v92;
    do
      v95 = __ldxr(v93);
    while (__stxr(v95 + 1, v93));
  }
  else
  {
    *((_QWORD *)&buf + 1) = 0;
  }
  v219 = 0;
  v220 = 0;
  *(_QWORD *)&buf = v91;
  v221 = 0;
  if (v91)
    LODWORD(v91) = (*(uint64_t (**)(unsigned int *, uint64_t *))(*(_QWORD *)v91 + 48))(v91, &v219);
  v221 = v91;
  if (v92)
  {
    v97 = (unint64_t *)&v92->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
    LODWORD(v91) = v221;
  }
  if (!(_DWORD)v91)
    goto LABEL_209;
  v99 = buf;
  v100 = *(_QWORD *)(buf + 24);
  if ((int)v87 >= 0x17)
    v101 = 23;
  else
    v101 = (int)v87;
  v102 = *(float **)v100;
  if (!*(_QWORD *)v100)
  {
    v104 = 0;
    goto LABEL_160;
  }
  v103 = *v102;
  v104 = *v102 == 1.0;
  if (!*(_BYTE *)(v100 + 10) || (v103 != 0.0 ? (v105 = v103 == 1.0) : (v105 = 1), v105))
  {
LABEL_160:
    v106 = *(unsigned __int8 *)(v100 + v104 + 11);
    if (v106 != 2)
      goto LABEL_163;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(buf + 24), 0x190u, v101, 0) & 1) != 0)
    goto LABEL_164;
  v106 = 1;
LABEL_163:
  if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v100, 0x190u, v101, v106))
    goto LABEL_209;
LABEL_164:
  if (!v102)
  {
    v108 = 0;
    goto LABEL_173;
  }
  v107 = *v102;
  v108 = *v102 == 1.0;
  if (!*(_BYTE *)(v100 + 10) || (v107 != 0.0 ? (v109 = v107 == 1.0) : (v109 = 1), v109))
  {
LABEL_173:
    v110 = *(unsigned __int8 *)(v100 + v108 + 11);
    if (v110 != 2)
      goto LABEL_176;
  }
  if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v100, 0x191u, v101, 0) & 1) != 0)
    goto LABEL_177;
  v110 = 1;
LABEL_176:
  if (gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v100, 0x191u, v101, v110))
  {
LABEL_177:
    v111 = (char *)operator new(0x28uLL);
    *((_QWORD *)v111 + 1) = 0;
    v112 = (unint64_t *)(v111 + 8);
    *((_QWORD *)v111 + 2) = 0;
    *((_QWORD *)v111 + 3) = 0;
    v113 = (double *)(v111 + 24);
    *(_QWORD *)v111 = &off_1E42DB9E8;
    *((_QWORD *)v111 + 4) = 0;
    v204 = (unsigned int *)(v111 + 24);
    v205 = (unsigned int *)v111;
    v114 = *(_QWORD *)(v99 + 24);
    v115 = *(float **)v114;
    if (*(_QWORD *)v114
      && (v116 = *v115, LODWORD(v115) = *v115 == 1.0, *(_BYTE *)(v114 + 10))
      && (v116 != 0.0 ? (v117 = v116 == 1.0) : (v117 = 1), !v117)
      || (v118 = *(unsigned __int8 *)(v114 + v115 + 11), v116 = 0.0, v118 == 2))
    {
      LOBYTE(v196[0]) = 1;
      LOBYTE(v211) = 1;
      v119 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v114, 0x190u, v101, 0, v196);
      v120 = v119
           + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v114, 0x190u, v101, 1u, &v211)- v119)* v116);
    }
    else
    {
      v120 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v114, 0x190u, v101, v118, 0);
    }
    *v113 = v120;
    v121 = *(_QWORD *)(buf + 24);
    v122 = *(float **)v121;
    if (*(_QWORD *)v121
      && (v123 = *v122, LODWORD(v122) = *v122 == 1.0, *(_BYTE *)(v121 + 10))
      && (v123 != 0.0 ? (v124 = v123 == 1.0) : (v124 = 1), !v124)
      || (v125 = *(unsigned __int8 *)(v121 + v122 + 11), v123 = 0.0, v125 == 2))
    {
      LOBYTE(v196[0]) = 1;
      LOBYTE(v211) = 1;
      v126 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v121, 0x191u, v101, 0, v196);
      v127 = v126
           + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v121, 0x191u, v101, 1u, &v211)- v126)* v123);
    }
    else
    {
      v127 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(buf + 24), 0x191u, v101, v125, 0);
    }
    *((double *)v111 + 4) = v127;
    do
      v128 = __ldxr(v112);
    while (__stxr(v128 + 1, v112));
    v129 = *(std::__shared_weak_count **)(a4 + 80);
    *(_QWORD *)(a4 + 72) = v113;
    *(_QWORD *)(a4 + 80) = v111;
    if (v129)
    {
      v130 = (unint64_t *)&v129->__shared_owners_;
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
    }
    v132 = (std::__shared_weak_count *)v205;
    if (v205)
    {
      v133 = (unint64_t *)(v205 + 2);
      do
        v134 = __ldaxr(v133);
      while (__stlxr(v134 - 1, v133));
      if (!v134)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
    }
  }
LABEL_209:
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&buf);
  v96 = *(_QWORD *)(a1 + 352);
  if (v96)
  {
    v96 = *(_QWORD *)(a1 + 304);
    if (v96)
    {
      LODWORD(v96) = v80 & v190;
      if (!*(_BYTE *)(a1 + 369))
        LODWORD(v96) = 0;
    }
  }
LABEL_213:
  if (*(unsigned __int8 *)(a4 + 64) != (_DWORD)v96)
  {
    *(_BYTE *)(a4 + 64) = v96;
    if (GEOGetVectorKitSceneQueryLogicLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitSceneQueryLogicLog(void)::onceToken, &__block_literal_global_17866);
    v135 = GEOGetVectorKitSceneQueryLogicLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitSceneQueryLogicLog(void)::log, OS_LOG_TYPE_INFO))
    {
      if (*(_BYTE *)(a4 + 64))
        v136 = "YES";
      else
        v136 = "NO";
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v136;
      _os_log_impl(&dword_19F029000, v135, OS_LOG_TYPE_INFO, "RouteLineMaskingEnabled:%s", (uint8_t *)&buf, 0xCu);
    }
  }
  if (v73)
  {
    v137 = (unint64_t *)&v73->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (a1 + 272 != a4)
  {
    v139 = *(_QWORD **)(a1 + 272);
    v140 = (_QWORD *)(a1 + 280);
    if (!*(_QWORD *)(a4 + 16))
      goto LABEL_267;
    v141 = *(uint64_t **)a4;
    v143 = (uint64_t **)(a4 + 8);
    v142 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)a4 = a4 + 8;
    *(_QWORD *)(v142 + 16) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    v144 = v141[1] ? (uint64_t *)v141[1] : v141;
    if (v144)
    {
      v145 = (uint64_t *)v144[2];
      if (v145)
      {
        v146 = (uint64_t *)*v145;
        if ((uint64_t *)*v145 == v144)
        {
          *v145 = 0;
          while (1)
          {
            v189 = (uint64_t *)v145[1];
            if (!v189)
              break;
            do
            {
              v145 = v189;
              v189 = (uint64_t *)*v189;
            }
            while (v189);
          }
        }
        else
        {
          for (v145[1] = 0; v146; v146 = (uint64_t *)v145[1])
          {
            do
            {
              v145 = v146;
              v146 = (uint64_t *)*v146;
            }
            while (v146);
          }
        }
      }
      if (v139 == v140)
      {
        v155 = v139;
        v147 = v144;
      }
      else
      {
        do
        {
          v147 = v145;
          v148 = *((_BYTE *)v139 + 28);
          *((_BYTE *)v144 + 28) = v148;
          v144[4] = v139[4];
          v149 = *v143;
          v150 = (uint64_t **)(a4 + 8);
          v151 = (uint64_t **)(a4 + 8);
          if (*v143)
          {
            v152 = v148 - 1;
            do
            {
              while (1)
              {
                v150 = (uint64_t **)v149;
                if (v152 >= (*((_BYTE *)v149 + 28) - 1))
                  break;
                v149 = (uint64_t *)*v149;
                v151 = v150;
                if (!*v150)
                  goto LABEL_245;
              }
              v149 = (uint64_t *)v149[1];
            }
            while (v149);
            v151 = v150 + 1;
          }
LABEL_245:
          *v144 = 0;
          v144[1] = 0;
          v144[2] = (uint64_t)v150;
          *v151 = v144;
          v153 = **(_QWORD **)a4;
          if (v153)
          {
            *(_QWORD *)a4 = v153;
            v144 = *v151;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a4 + 8), v144);
          ++*(_QWORD *)(a4 + 16);
          if (v145)
          {
            v145 = (uint64_t *)v145[2];
            if (v145)
            {
              v156 = (uint64_t *)*v145;
              if ((uint64_t *)*v145 == v147)
              {
                *v145 = 0;
                while (1)
                {
                  v157 = (uint64_t *)v145[1];
                  if (!v157)
                    break;
                  do
                  {
                    v145 = v157;
                    v157 = (uint64_t *)*v157;
                  }
                  while (v157);
                }
              }
              else
              {
                for (v145[1] = 0; v156; v156 = (uint64_t *)v145[1])
                {
                  do
                  {
                    v145 = v156;
                    v156 = (uint64_t *)*v156;
                  }
                  while (v156);
                }
              }
            }
          }
          else
          {
            v145 = 0;
          }
          v154 = (_QWORD *)v139[1];
          if (v154)
          {
            do
            {
              v155 = v154;
              v154 = (_QWORD *)*v154;
            }
            while (v154);
          }
          else
          {
            do
            {
              v155 = (_QWORD *)v139[2];
              v37 = *v155 == (_QWORD)v139;
              v139 = v155;
            }
            while (!v37);
          }
          if (!v147)
            break;
          v144 = v147;
          v139 = v155;
        }
        while (v155 != v140);
      }
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v147);
      if (v145)
      {
        for (i = (uint64_t *)v145[2]; i; i = (uint64_t *)i[2])
          v145 = i;
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v145);
      }
    }
    else
    {
LABEL_267:
      v155 = v139;
    }
    if (v155 != v140)
    {
      v159 = (uint64_t ***)(a4 + 8);
      do
      {
        v160 = (uint64_t *)operator new(0x28uLL);
        v161 = v160;
        v162 = *((_DWORD *)v155 + 9);
        *(uint64_t *)((char *)v160 + 28) = *(_QWORD *)((char *)v155 + 28);
        *((_DWORD *)v160 + 9) = v162;
        v163 = *v159;
        v164 = (uint64_t **)(a4 + 8);
        v165 = (uint64_t **)(a4 + 8);
        if (*v159)
        {
          do
          {
            while (1)
            {
              v164 = v163;
              if ((*((_BYTE *)v160 + 28) - 1) >= (*((_BYTE *)v163 + 28)
                                                                                                 - 1))
                break;
              v163 = (uint64_t **)*v163;
              v165 = v164;
              if (!*v164)
                goto LABEL_283;
            }
            v163 = (uint64_t **)v163[1];
          }
          while (v163);
          v165 = v164 + 1;
        }
LABEL_283:
        *v160 = 0;
        v160[1] = 0;
        v160[2] = (uint64_t)v164;
        *v165 = v160;
        v166 = **(_QWORD **)a4;
        if (v166)
        {
          *(_QWORD *)a4 = v166;
          v161 = *v165;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a4 + 8), v161);
        ++*(_QWORD *)(a4 + 16);
        v167 = (_QWORD *)v155[1];
        if (v167)
        {
          do
          {
            v168 = v167;
            v167 = (_QWORD *)*v167;
          }
          while (v167);
        }
        else
        {
          do
          {
            v168 = (_QWORD *)v155[2];
            v37 = *v168 == (_QWORD)v155;
            v155 = v168;
          }
          while (!v37);
        }
        v155 = v168;
      }
      while (v168 != v140);
    }
  }
  v169 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 24) = 0;
  v170 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  v171 = *(void **)(a4 + 24);
  *(_QWORD *)(a4 + 24) = v170;
  if (v171)
    operator delete(v171);
  v172 = *(void **)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v169;
  if (v172)
    operator delete(v172);
  v173 = *(_QWORD *)(a4 + 40);
  v174 = *(_QWORD *)(a4 + 32);
  v175 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a4 + 32) = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v174;
  *(_QWORD *)(a4 + 40) = v175;
  *(_QWORD *)(a1 + 224) = v173;
  v176 = *(_QWORD *)(a4 + 48);
  *(_QWORD *)(a4 + 48) = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v176;
  v177 = *(_DWORD *)(a4 + 56);
  *(_DWORD *)(a4 + 56) = *(_DWORD *)(a1 + 240);
  *(_DWORD *)(a1 + 240) = v177;
  v178 = v193;
  if (*(_QWORD *)(a4 + 48))
  {
    v179 = *(_QWORD *)(a4 + 32);
    v180 = *(_QWORD *)(*(_QWORD *)(a4 + 40) + 8);
    if ((v179 & (v179 - 1)) != 0)
    {
      if (v180 >= v179)
        v180 %= v179;
    }
    else
    {
      v180 &= v179 - 1;
    }
    *(_QWORD *)(*(_QWORD *)(a4 + 24) + 8 * v180) = a4 + 40;
  }
  if (v176)
  {
    v181 = *(_QWORD *)(a1 + 216);
    v182 = *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8);
    if ((v181 & (v181 - 1)) != 0)
    {
      if (v182 >= v181)
        v182 %= v181;
    }
    else
    {
      v182 &= v181 - 1;
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 208) + 8 * v182) = a1 + 224;
    v183 = *(_QWORD **)(a1 + 224);
    if (v183)
    {
      do
      {
        v184 = (_QWORD *)*v183;
        operator delete(v183);
        v183 = v184;
      }
      while (v184);
    }
    *(_QWORD *)(a1 + 224) = 0;
    v185 = *(_QWORD *)(a1 + 216);
    if (v185)
    {
      for (j = 0; j != v185; ++j)
        *(_QWORD *)(*(_QWORD *)(a1 + 208) + 8 * j) = 0;
    }
    *(_QWORD *)(a1 + 232) = 0;
    v178 = v193;
  }

  if (!v217)
  {
LABEL_323:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v217 + 48))(v217);
  result = v217;
  if (v217 == v216)
  {
    v188 = 4;
    result = v216;
  }
  else
  {
    if (!v217)
      return result;
    v188 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v188))();
}

void sub_19F348C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker(v12 - 160);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);

  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v12 - 192));
  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<GEOComposedRoute * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::operator==(void *a1, void **a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;

  v3 = a1;
  v4 = *a2;
  v5 = v3;
  v6 = v4;
  if (v6 == v5)
    v7 = 1;
  else
    v7 = objc_msgSend(v5, "isEqual:", v6);

  return v7;
}

void sub_19F348FA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t md::StyleSettingsValueNode::value_as<float>(void *__src, size_t __n)
{
  void **v4;
  size_t v5;
  size_t v6;
  const char *v7;
  float v8;
  int v9;
  char *v11;
  void *__dst[2];
  int64_t v13;

  if (__n >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__n >= 0x17)
  {
    v5 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__n | 7) != 0x17)
      v5 = __n | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = (void *)__n;
    v13 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_8;
  }
  HIBYTE(v13) = __n;
  v4 = __dst;
  if (__n)
LABEL_8:
    memcpy(v4, __src, __n);
  *((_BYTE *)v4 + __n) = 0;
  v11 = 0;
  if (v13 >= 0)
    v7 = (const char *)__dst;
  else
    v7 = (const char *)__dst[0];
  v8 = strtof(v7, &v11);
  v9 = *v11;
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  if (v9)
    return 0;
  else
    return LODWORD(v8) | 0x100000000;
}

_QWORD *md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::layout(uint64_t a1, uint64_t **a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t (***v6)();
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int8x8_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  gss::Allocator *v53;
  uint64_t v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unsigned __int8 *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unsigned __int8 *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int8 *v103;
  unint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t *v107;
  int8x8_t v108;
  uint8x8_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  ggl::CommandBuffer *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unsigned int v125;
  ggl::CommandBuffer *v126;
  uint64_t v127;
  uint64_t v128;
  float32x4_t *v129;
  unsigned __int8 *v130;
  unsigned __int8 *v131;
  uint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  _QWORD *result;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unsigned __int8 *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  float32x4_t v148;
  ggl::CommandBuffer *v149;
  ggl::CommandBuffer *v150;
  char *v151;
  uint64_t v152;
  __int16 v153;
  uint64_t v154;
  char v155;
  _QWORD v156[2];
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  float32x4_t *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _QWORD v163[3];
  _QWORD *v164;
  uint64_t (**v165)();
  uint64_t **v166;
  uint64_t (***v167)();
  _QWORD v168[3];
  _QWORD *v169;
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  v165 = &off_1E42CF0C8;
  v166 = a2;
  v167 = &v165;
  v163[0] = &off_1E42CF080;
  v163[1] = a2;
  v164 = v163;
  v169 = v168;
  v168[0] = &off_1E42CF080;
  v168[1] = a2;
  std::__invoke_void_return_wrapper<void,true>::__call[abi:nn180100]<md::PolygonRenderLayer<(md::MapDataType)59,md::MapTileDataRenderable<md::PolygonTileData>>::layout(md::LayoutContext const&)::{lambda(void)#1} &>((uint64_t)&v166);
  v4 = v164;
  if (v164 == v163)
  {
    v5 = 4;
    v4 = v163;
  }
  else
  {
    if (!v164)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v167;
  if (v167 == &v165)
  {
    v7 = 4;
    v6 = &v165;
    goto LABEL_10;
  }
  if (v167)
  {
    v7 = 5;
LABEL_10:
    (*v6)[v7]();
  }
  v8 = mach_absolute_time();
  v9 = *(_QWORD *)(a1 + 272);
  v10 = *(_QWORD *)(a1 + 280);
  v156[0] = v9;
  v156[1] = v10;
  v11 = a2[1];
  v12 = (int8x8_t)v11[1];
  if (!*(_QWORD *)&v12)
  {
    v15 = 0;
    v16 = 0;
    goto LABEL_97;
  }
  v13 = (uint8x8_t)vcnt_s8(v12);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    v14 = 0xE42D19AFCA302E68;
    if (*(_QWORD *)&v12 <= 0xE42D19AFCA302E68)
      v14 = 0xE42D19AFCA302E68 % *(_QWORD *)&v12;
  }
  else
  {
    v14 = (*(_QWORD *)&v12 - 1) & 0xE42D19AFCA302E68;
  }
  v17 = *v11;
  v18 = *(_QWORD **)(v17 + 8 * v14);
  if (!v18)
    goto LABEL_35;
  v19 = (_QWORD *)*v18;
  if (!v19)
    goto LABEL_35;
  if (v13.u32[0] < 2uLL)
  {
    while (1)
    {
      v21 = v19[1];
      if (v21 == 0xE42D19AFCA302E68)
      {
        if (v19[2] == 0xE42D19AFCA302E68)
          goto LABEL_33;
      }
      else if ((v21 & (*(_QWORD *)&v12 - 1)) != v14)
      {
        goto LABEL_35;
      }
      v19 = (_QWORD *)*v19;
      if (!v19)
        goto LABEL_35;
    }
  }
  while (1)
  {
    v20 = v19[1];
    if (v20 == 0xE42D19AFCA302E68)
      break;
    if (v20 >= *(_QWORD *)&v12)
      v20 %= *(_QWORD *)&v12;
    if (v20 != v14)
      goto LABEL_35;
LABEL_22:
    v19 = (_QWORD *)*v19;
    if (!v19)
      goto LABEL_35;
  }
  if (v19[2] != 0xE42D19AFCA302E68)
    goto LABEL_22;
LABEL_33:
  v22 = v19[5];
  if (*(_QWORD *)(v22 + 8) == 0xE42D19AFCA302E68)
  {
    v16 = *(uint64_t **)(v22 + 32);
    goto LABEL_36;
  }
LABEL_35:
  v16 = 0;
LABEL_36:
  if (v13.u32[0] > 1uLL)
  {
    v23 = 0xFD5D5EC7C4E1E43ELL;
    if (*(_QWORD *)&v12 <= 0xFD5D5EC7C4E1E43ELL)
      v23 = 0xFD5D5EC7C4E1E43ELL % *(_QWORD *)&v12;
  }
  else
  {
    v23 = (*(_QWORD *)&v12 - 1) & 0xFD5D5EC7C4E1E43ELL;
  }
  v24 = *(_QWORD **)(v17 + 8 * v23);
  if (!v24)
    goto LABEL_58;
  v25 = (_QWORD *)*v24;
  if (!v25)
    goto LABEL_58;
  if (v13.u32[0] < 2uLL)
  {
    while (1)
    {
      v27 = v25[1];
      if (v27 == 0xFD5D5EC7C4E1E43ELL)
      {
        if (v25[2] == 0xFD5D5EC7C4E1E43ELL)
          goto LABEL_56;
      }
      else if ((v27 & (*(_QWORD *)&v12 - 1)) != v23)
      {
        goto LABEL_58;
      }
      v25 = (_QWORD *)*v25;
      if (!v25)
        goto LABEL_58;
    }
  }
  while (2)
  {
    v26 = v25[1];
    if (v26 != 0xFD5D5EC7C4E1E43ELL)
    {
      if (v26 >= *(_QWORD *)&v12)
        v26 %= *(_QWORD *)&v12;
      if (v26 != v23)
        goto LABEL_58;
      goto LABEL_45;
    }
    if (v25[2] != 0xFD5D5EC7C4E1E43ELL)
    {
LABEL_45:
      v25 = (_QWORD *)*v25;
      if (!v25)
        goto LABEL_58;
      continue;
    }
    break;
  }
LABEL_56:
  v28 = v25[5];
  if (*(_QWORD *)(v28 + 8) == 0xFD5D5EC7C4E1E43ELL)
  {
    v29 = *(_QWORD *)(v28 + 32);
    goto LABEL_59;
  }
LABEL_58:
  v29 = 0;
LABEL_59:
  if (v13.u32[0] > 1uLL)
  {
    v30 = 0x401D4CCE847AB1D1;
    if (*(_QWORD *)&v12 <= 0x401D4CCE847AB1D1uLL)
      v30 = 0x401D4CCE847AB1D1uLL % *(_QWORD *)&v12;
  }
  else
  {
    v30 = (*(_QWORD *)&v12 - 1) & 0x401D4CCE847AB1D1;
  }
  v31 = *(_QWORD **)(v17 + 8 * v30);
  if (!v31)
    goto LABEL_82;
  v32 = (_QWORD *)*v31;
  if (!v32)
    goto LABEL_82;
  if (v13.u32[0] < 2uLL)
  {
    v33 = *(_QWORD *)&v12 - 1;
    while (1)
    {
      v35 = v32[1];
      if (v35 == 0x401D4CCE847AB1D1)
      {
        if (v32[2] == 0x401D4CCE847AB1D1)
          goto LABEL_79;
      }
      else if ((v35 & v33) != v30)
      {
        goto LABEL_82;
      }
      v32 = (_QWORD *)*v32;
      if (!v32)
        goto LABEL_82;
    }
  }
  while (2)
  {
    v34 = v32[1];
    if (v34 != 0x401D4CCE847AB1D1)
    {
      if (v34 >= *(_QWORD *)&v12)
        v34 %= *(_QWORD *)&v12;
      if (v34 != v30)
        goto LABEL_82;
      goto LABEL_68;
    }
    if (v32[2] != 0x401D4CCE847AB1D1)
    {
LABEL_68:
      v32 = (_QWORD *)*v32;
      if (!v32)
        goto LABEL_82;
      continue;
    }
    break;
  }
LABEL_79:
  v36 = v32[5];
  if (*(_QWORD *)(v36 + 8) == 0x401D4CCE847AB1D1)
  {
    v15 = *(_QWORD *)(v36 + 32);
    if (!v29)
      goto LABEL_97;
    goto LABEL_83;
  }
LABEL_82:
  v15 = 0;
  if (!v29)
    goto LABEL_97;
LABEL_83:
  if (*(_BYTE *)(v29 + 312))
  {
    for (; v9 != v10; v9 += 8)
      md::updatePolyonGroupsTransitNodeRouteAttributes(*(int8x8_t **)(*(_QWORD *)v9 + 384), *(_QWORD **)(v29 + 288), v29 + 232);
    v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 96) + 1120);
    v38 = *(_QWORD *)(v37 + 16);
    if ((v38 & (v38 - 1)) != 0)
    {
      v40 = 0x1BCA10CB9934FB1BLL;
      if (v38 <= 0x1BCA10CB9934FB1BLL)
        v40 = 0x1BCA10CB9934FB1BLL % v38;
      v39 = *(_QWORD **)(*(_QWORD *)(v37 + 8) + 8 * v40);
      do
      {
        do
          v39 = (_QWORD *)*v39;
        while (v39[1] != 0x1BCA10CB9934FB1BLL);
      }
      while (v39[2] != 0x1BCA10CB9934FB1BLL);
    }
    else
    {
      v39 = *(_QWORD **)(*(_QWORD *)(v37 + 8) + 8 * ((v38 - 1) & 0x1BCA10CB9934FB1BLL));
      do
      {
        do
          v39 = (_QWORD *)*v39;
        while (v39[1] != 0x1BCA10CB9934FB1BLL);
      }
      while (v39[2] != 0x1BCA10CB9934FB1BLL);
    }
    *(_BYTE *)(v39[5] + 544) = 0;
  }
LABEL_97:
  v155 = 0;
  v41 = operator new(0x20uLL);
  *v41 = &off_1E42CF038;
  v41[1] = &v155;
  v41[2] = v156;
  v41[3] = a1;
  v162 = v41;
  v42 = (_BYTE *)v16[6];
  v43 = (_BYTE *)v16[7];
  if (v42 == v43)
  {
LABEL_102:
    v44 = 5;
LABEL_104:
    v41 = (_QWORD *)(*(uint64_t (**)(void))(*v41 + 8 * v44))();
    goto LABEL_105;
  }
  do
  {
    LOBYTE(v149) = *v42;
    if (!v162)
      goto LABEL_241;
    (*(void (**)(_BYTE *, ggl::CommandBuffer **))(*(_QWORD *)v162 + 48))(v162, &v149);
    ++v42;
  }
  while (v42 != v43);
  v41 = v162;
  if (v162 == v161)
  {
    v44 = 4;
    v41 = v161;
    goto LABEL_104;
  }
  if (v162)
    goto LABEL_102;
LABEL_105:
  if (v155 || !*(_QWORD *)(a1 + 464))
  {
    v45 = *(std::__shared_weak_count **)(a1 + 472);
    *(_QWORD *)(a1 + 464) = 0;
    *(_QWORD *)(a1 + 472) = 0;
    if (!v45)
      goto LABEL_244;
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
      if (*v16)
      {
LABEL_111:
        v48 = gss::Allocator::instance((gss::Allocator *)v41);
        v49 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, 16, 4);
        v50 = v49;
        if (v49)
          *v49 = 0x200000005;
        v49[1] = 0x1B00000003;
        v149 = 0;
        v150 = 0;
        v151 = 0;
        v152 = v48;
        v51 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, 16, 4);
        v149 = (ggl::CommandBuffer *)v51;
        v151 = v51 + 16;
        if (v51)
          *(_QWORD *)v51 = *v50;
        *((_QWORD *)v51 + 1) = v50[1];
        v150 = (ggl::CommandBuffer *)(v51 + 16);
        gss::FeatureAttributeSet::sort((gss::FeatureAttributeSet *)&v149);
        (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v48 + 40))(v48, v50, 16);
        v52 = *v16;
        *(_QWORD *)((char *)&v158 + 7) = 0;
        *(_QWORD *)&v158 = 0;
        HIBYTE(v158) = 1;
        gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v157, v52, (gss::FeatureAttributeSet *)&v149, (gss::QueryOverrides *)&v158);
        if (!BYTE14(v158) && (_QWORD)v158)
        {
          v54 = gss::Allocator::instance(v53);
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v54 + 40))(v54, v158, WORD6(v158));
        }
        v55 = v157;
        v157 = 0uLL;
        v56 = *(std::__shared_weak_count **)(a1 + 472);
        *(_OWORD *)(a1 + 464) = v55;
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v59 = (std::__shared_weak_count *)*((_QWORD *)&v157 + 1);
        if (*((_QWORD *)&v157 + 1))
        {
          v60 = (unint64_t *)(*((_QWORD *)&v157 + 1) + 8);
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        if (v149)
        {
          v150 = v149;
          (*(void (**)(uint64_t, ggl::CommandBuffer *, int64_t))(*(_QWORD *)v152 + 40))(v152, v149, v151 - (char *)v149);
        }
      }
    }
    else
    {
LABEL_244:
      if (*v16)
        goto LABEL_111;
    }
  }
  v62 = *(_QWORD *)(a1 + 352);
  *(_QWORD *)(v62 + 112) = 0;
  *(_QWORD *)(v62 + 120) = 0;
  md::PolygonRenderResources::resetPools(*(md::PolygonRenderResources **)(a1 + 368));
  md::LayoutContext::frameState((md::LayoutContext *)a2);
  *(_BYTE *)(a1 + 384) = *(unsigned __int8 *)(v63 + 128) - 1 < 3;
  if (v15)
  {
    *(_DWORD *)(a1 + 444) = *(_DWORD *)v15;
    *(_WORD *)(a1 + 428) = *(_WORD *)(v15 + 4);
    if (*(_BYTE *)(v15 + 16))
    {
      v64 = *(_QWORD *)(v15 + 8);
      v65 = (char *)operator new(8uLL);
      *(_QWORD *)v65 = v64;
      v66 = *(_BYTE **)(a1 + 392);
      *(_QWORD *)(a1 + 400) = v66;
      std::vector<unsigned long long>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>((char **)(a1 + 392), v66, v65, v65 + 8, 1);
      operator delete(v65);
    }
    else
    {
      *(_QWORD *)(a1 + 400) = *(_QWORD *)(a1 + 392);
    }
  }
  v67 = *(_QWORD *)(a1 + 368);
  v68 = *(_QWORD *)(v67 + 872);
  v158 = 0uLL;
  v159 = 0;
  md::PolygonLayoutCharacteristics::commandBufferInfo(&v158, (unsigned __int8 *)(a1 + 376), *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 8));
  v69 = v158;
  v70 = *(__int16 *)(v67 + 896);
  LOBYTE(v149) = 0;
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, v158, v70, 0, &v149);
  if (v68)
    *(_QWORD *)(v69 + 32) = v68;
  v71 = *(_QWORD *)(a1 + 368);
  v72 = *(_QWORD *)(v71 + 880);
  v158 = 0uLL;
  v159 = 0;
  md::PolygonLayoutCharacteristics::commandBufferInfo(&v158, (unsigned __int8 *)(a1 + 376), *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 8));
  v73 = *((_QWORD *)&v158 + 1);
  v74 = *(__int16 *)(v71 + 898);
  LOBYTE(v149) = 0;
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, *((uint64_t *)&v158 + 1), v74, 0, &v149);
  if (v72)
    *(_QWORD *)(v73 + 32) = v72;
  v75 = *(_QWORD *)(a1 + 368);
  v76 = *(_QWORD *)(v75 + 888);
  v158 = 0uLL;
  v159 = 0;
  md::PolygonLayoutCharacteristics::commandBufferInfo(&v158, (unsigned __int8 *)(a1 + 376), *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 8));
  v77 = v159;
  v78 = *(__int16 *)(v75 + 900);
  LOBYTE(v149) = 0;
  md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, v159, v78, 0, &v149);
  if (v76)
    *(_QWORD *)(v77 + 32) = v76;
  if (*(_BYTE *)(a1 + 424))
  {
    v79 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 8);
    v80 = v79[3];
    v81 = v79[4];
    v82 = v81 - v80;
    if (v81 == v80)
      goto LABEL_153;
    v83 = 0;
    v84 = v82 >> 3;
    while (1)
    {
      v85 = *(unsigned __int8 **)(v80 + 8 * v83);
      if (*v85 == *(unsigned __int8 *)(a1 + 422))
      {
        v86 = *((_QWORD *)v85 + 1);
        v87 = v79[15];
        if (v86 < (v79[16] - v87) >> 3)
          break;
      }
      if (++v83 >= v84)
        goto LABEL_153;
    }
    v88 = *(_QWORD *)(v87 + 8 * v86);
    if (!v88
      || (v89 = *(_QWORD *)(*(_QWORD *)(v88 + 24) + 8 * *(unsigned __int8 *)(a1 + 423))) == 0
      || !*(_BYTE *)(a1 + 428)
      || (v90 = *(char *)(*(_QWORD *)(a1 + 368) + 912),
          LOBYTE(v149) = 0,
          md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, v89, v90, 0, &v149), *(_QWORD *)(v89 + 32) = *(_QWORD *)(*(_QWORD *)(a1 + 368) + 920), *(_BYTE *)(a1 + 424)))
    {
LABEL_153:
      v91 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 8);
      v92 = v91[3];
      v93 = v91[4] - v92;
      if (v93)
      {
        v94 = 0;
        v95 = v93 >> 3;
        while (1)
        {
          v96 = *(unsigned __int8 **)(v92 + 8 * v94);
          if (*v96 == *(unsigned __int8 *)(a1 + 422))
          {
            v97 = *((_QWORD *)v96 + 1);
            v98 = v91[15];
            v99 = (v91[16] - v98) >> 3;
            if (v97 < v99)
              break;
          }
          if (++v94 >= v95)
            goto LABEL_168;
        }
        v100 = *(_QWORD *)(v98 + 8 * v97);
        if (v100)
        {
          v101 = *(_QWORD *)(*(_QWORD *)(v100 + 24) + 8 * *(unsigned __int8 *)(a1 + 423));
          if (v101)
          {
            if (*(_BYTE *)(a1 + 427))
            {
              v102 = 0;
              while (1)
              {
                v103 = *(unsigned __int8 **)(v92 + 8 * v102);
                if (*v103 == *(unsigned __int8 *)(a1 + 425))
                {
                  v104 = *((_QWORD *)v103 + 1);
                  if (v104 < v99)
                    break;
                }
                if (++v102 >= v95)
                  goto LABEL_168;
              }
              v105 = *(_QWORD *)(v98 + 8 * v104);
              if (v105 && *(_QWORD *)(*(_QWORD *)(v105 + 24) + 8 * *(unsigned __int8 *)(a1 + 426)))
              {
                v106 = *(char *)(*(_QWORD *)(a1 + 368) + 936);
                LOBYTE(v149) = 0;
                md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(a1, (md::LayoutContext *)a2, v101, v106, 0, &v149);
                *(_QWORD *)(v101 + 32) = *(_QWORD *)(*(_QWORD *)(a1 + 368) + 944);
              }
            }
          }
        }
      }
    }
  }
LABEL_168:
  *(_QWORD *)(*(_QWORD *)(a1 + 368) + 264) = 0;
  *(_BYTE *)(a1 + 440) = *(_BYTE *)(a1 + 360);
  *(_BYTE *)(a1 + 386) = *(_BYTE *)(a1 + 480);
  if (*(_BYTE *)(a1 + 361))
  {
    v107 = a2[1];
    v108 = (int8x8_t)v107[1];
    if (v108)
    {
      v109 = (uint8x8_t)vcnt_s8(v108);
      v109.i16[0] = vaddlv_u8(v109);
      if (v109.u32[0] > 1uLL)
      {
        v110 = 0x1AF456233693CD46;
        if (*(_QWORD *)&v108 <= 0x1AF456233693CD46uLL)
          v110 = 0x1AF456233693CD46uLL % *(_QWORD *)&v108;
      }
      else
      {
        v110 = (*(_QWORD *)&v108 - 1) & 0x1AF456233693CD46;
      }
      v111 = *(_QWORD **)(*v107 + 8 * v110);
      if (v111)
      {
        v112 = (_QWORD *)*v111;
        if (v112)
        {
          if (v109.u32[0] < 2uLL)
          {
            v113 = *(_QWORD *)&v108 - 1;
            while (1)
            {
              v115 = v112[1];
              if (v115 == 0x1AF456233693CD46)
              {
                if (v112[2] == 0x1AF456233693CD46)
                  goto LABEL_190;
              }
              else if ((v115 & v113) != v110)
              {
                goto LABEL_216;
              }
              v112 = (_QWORD *)*v112;
              if (!v112)
                goto LABEL_216;
            }
          }
          do
          {
            v114 = v112[1];
            if (v114 == 0x1AF456233693CD46)
            {
              if (v112[2] == 0x1AF456233693CD46)
              {
LABEL_190:
                v116 = v112[5];
                if (*(_QWORD *)(v116 + 8) == 0x1AF456233693CD46)
                {
                  v117 = *(_QWORD *)(v116 + 32);
                  if (v117)
                  {
                    v118 = *(ggl::CommandBuffer **)(a1 + 464);
                    v119 = *(std::__shared_weak_count **)(a1 + 472);
                    *(_QWORD *)&v158 = v118;
                    *((_QWORD *)&v158 + 1) = v119;
                    if (v119)
                    {
                      v120 = (unint64_t *)&v119->__shared_owners_;
                      do
                        v121 = __ldxr(v120);
                      while (__stxr(v121 + 1, v120));
                      v150 = (ggl::CommandBuffer *)v119;
                      do
                        v122 = __ldxr(v120);
                      while (__stxr(v122 + 1, v120));
                    }
                    else
                    {
                      v150 = 0;
                    }
                    v151 = 0;
                    v152 = 0;
                    v149 = v118;
                    LOBYTE(v153) = 0;
                    if (v118)
                      LODWORD(v118) = (*(uint64_t (**)(ggl::CommandBuffer *, char **))(*(_QWORD *)v118 + 48))(v118, &v151);
                    LOBYTE(v153) = (_BYTE)v118;
                    if (v119)
                    {
                      v123 = (unint64_t *)&v119->__shared_owners_;
                      do
                        v124 = __ldaxr(v123);
                      while (__stlxr(v124 - 1, v123));
                      if (!v124)
                      {
                        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                        std::__shared_weak_count::__release_weak(v119);
                      }
                      LODWORD(v118) = v153;
                    }
                    if ((_DWORD)v118)
                    {
                      if ((int)*(float *)(v117 + 3072) >= 0x17)
                        v125 = 23;
                      else
                        v125 = (int)*(float *)(v117 + 3072);
                      gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)&v158, *((_QWORD *)v149 + 3), 0x5Cu, v125, 2u, 0);
                      v148 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&v158)), (float32x4_t)vdupq_n_s32(0x37800080u));
                      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v149);
                      v126 = *(ggl::CommandBuffer **)(*(_QWORD *)(a1 + 368) + 968);
                      v160 = 0;
                      v158 = 0uLL;
                      v127 = *((_QWORD *)v126 + 1);
                      v149 = 0;
                      v150 = v126;
                      v151 = 0;
                      v152 = v127;
                      v153 = 1;
                      if (v127)
                        v128 = *((_QWORD *)v126 + 9);
                      else
                        v128 = 0;
                      v154 = v128;
                      ggl::BufferMemory::operator=((uint64_t *)&v158, (uint64_t)&v149);
                      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v149);
                      v129 = v160;
                      v160[4] = v148;
                      *(float32x4_t *)((char *)&v129[5] + 8) = (float32x4_t)xmmword_19FFB3480;
                      v129[5].i32[0] = 1065353216;
                      v129->i32[0] = 1065353216;
                      *(uint64_t *)((char *)&v129->i64[1] + 4) = 0;
                      *(uint64_t *)((char *)v129->i64 + 4) = 0;
                      v129[1].i32[1] = 1065353216;
                      v129[1].i64[1] = 0;
                      v129[2].i64[0] = 0;
                      v129[2].i32[2] = 1065353216;
                      *(uint64_t *)((char *)v129[3].i64 + 4) = 0;
                      *(uint64_t *)((char *)&v129[2].i64[1] + 4) = 0;
                      v129[3].i32[3] = 1065353216;
                      v149 = 0;
                      v150 = 0;
                      v151 = 0;
                      md::PolygonLayoutCharacteristics::commandBufferInfo(&v149, (unsigned __int8 *)(a1 + 376), *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 8));
                      md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::_layoutPolygonGround(a1, a2[1], v149);
                      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v158);
                    }
                    else
                    {
                      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v149);
                    }
                  }
                }
                break;
              }
            }
            else
            {
              if (v114 >= *(_QWORD *)&v108)
                v114 %= *(_QWORD *)&v108;
              if (v114 != v110)
                break;
            }
            v112 = (_QWORD *)*v112;
          }
          while (v112);
        }
      }
    }
  }
LABEL_216:
  md::preparePolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>((uint64_t **)(a1 + 272), a2[1], a1 + 376);
  md::layoutPolygonTiles<md::MapTileDataRenderable<md::PolygonTileData>>(a1 + 272, (uint64_t)a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 368), a1 + 376, *(_BYTE *)(a1 + 448));
  (*(void (**)(ggl::CommandBuffer **__return_ptr, uint64_t, uint64_t **))(*(_QWORD *)a1 + 32))(&v149, a1, a2);
  v130 = (unsigned __int8 *)v149;
  v131 = (unsigned __int8 *)v150;
  if (v149 == v150)
  {
    if (v149)
      goto LABEL_218;
  }
  else
  {
    do
    {
      v137 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 8);
      v138 = v137[3];
      v139 = v137[4];
      v140 = v139 - v138;
      if (v139 != v138)
      {
        v141 = 0;
        v142 = v140 >> 3;
        while (1)
        {
          v143 = *(unsigned __int8 **)(v138 + 8 * v141);
          if (*v143 == *v130)
          {
            v144 = *((_QWORD *)v143 + 1);
            v145 = v137[15];
            if (v144 < (v137[16] - v145) >> 3)
              break;
          }
          if (++v141 >= v142)
            goto LABEL_227;
        }
        v146 = *(_QWORD *)(v145 + 8 * v144);
        if (v146)
        {
          v147 = *(_QWORD *)(*(_QWORD *)(v146 + 24) + 8 * v130[1]);
          if (v147)
            ggl::CommandBuffer::stableSortRenderItems(*(__n128 **)(v147 + 72), *(char **)(v147 + 80));
        }
      }
LABEL_227:
      v130 += 2;
    }
    while (v130 != v131);
    v130 = (unsigned __int8 *)v149;
    if (v149)
    {
LABEL_218:
      v150 = (ggl::CommandBuffer *)v130;
      operator delete(v130);
    }
  }
  v132 = mach_absolute_time();
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
  v133 = (unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 120);
  do
    v134 = __ldaxr(v133);
  while (__stlxr(v134 + v132 - v8, v133));
  if (!v169)
  {
LABEL_241:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(_QWORD *))(*v169 + 48))(v169);
  result = v169;
  if (v169 == v168)
  {
    v136 = 4;
    result = v168;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v136))();
  }
  else if (v169)
  {
    v136 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v136))();
  }
  return result;
}

void sub_19F349FEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v4 = mach_absolute_time();
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
  v5 = (unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 120);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + v4 - v1, v5));
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v2 - 120));
  _Unwind_Resume(a1);
}

_QWORD *md::PolygonLayoutCharacteristics::commandBufferInfo(_QWORD *result, unsigned __int8 *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = a3[3];
  v4 = a3[4];
  if (v4 == v3)
  {
    *result = 0;
    v11 = result + 1;
LABEL_17:
    *v11 = 0;
    result[2] = 0;
    return result;
  }
  v5 = 0;
  while (1)
  {
    v6 = *(unsigned __int8 **)(v3 + 8 * v5);
    if (*v6 == a2[40])
    {
      v7 = *((_QWORD *)v6 + 1);
      v8 = a3[15];
      if (v7 < (a3[16] - v8) >> 3)
        break;
    }
    if (++v5 >= (unint64_t)((v4 - v3) >> 3))
      goto LABEL_8;
  }
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v9)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v9 + 24) + 8 * a2[41]);
    goto LABEL_9;
  }
LABEL_8:
  v10 = 0;
LABEL_9:
  *result = v10;
  v11 = result + 1;
  if (v4 == v3)
    goto LABEL_17;
  v12 = 0;
  while (1)
  {
    v13 = *(unsigned __int8 **)(v3 + 8 * v12);
    if (*v13 == a2[42])
    {
      v14 = *((_QWORD *)v13 + 1);
      v15 = a3[15];
      if (v14 < (a3[16] - v15) >> 3)
        break;
    }
    if (++v12 >= (unint64_t)((v4 - v3) >> 3))
    {
      v16 = 0;
      goto LABEL_19;
    }
  }
  v16 = *(_QWORD *)(v15 + 8 * v14);
  if (v16)
    v16 = *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * a2[43]);
LABEL_19:
  *v11 = v16;
  v17 = v4 - v3;
  if (v4 == v3)
  {
LABEL_27:
    result[2] = 0;
  }
  else
  {
    v18 = 0;
    v19 = v17 >> 3;
    while (1)
    {
      v20 = *(unsigned __int8 **)(v3 + 8 * v18);
      if (*v20 == a2[44])
      {
        v21 = *((_QWORD *)v20 + 1);
        v22 = a3[15];
        if (v21 < (a3[16] - v22) >> 3)
          break;
      }
      if (++v18 >= v19)
        goto LABEL_27;
    }
    v23 = *(_QWORD *)(v22 + 8 * v21);
    if (v23)
      v23 = *(_QWORD *)(*(_QWORD *)(v23 + 24) + 8 * a2[45]);
    result[2] = v23;
  }
  return result;
}

_QWORD *md::CartographicTiledVectorRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::layoutStencilTiles(uint64_t a1, md::LayoutContext *a2, uint64_t a3, int a4, char a5, _BYTE *a6)
{
  _QWORD *result;
  uint64_t *v8;
  int8x8_t v9;
  uint8x8_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t **v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  _QWORD *v45;
  unint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  _QWORD *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t *v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  uint64_t v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  _QWORD *v116;
  int8x8_t v117;
  uint8x8_t v118;
  uint64_t v119;
  _QWORD *v120;
  unsigned __int16 *v121;
  unsigned __int16 *v122;
  unsigned __int16 *v123;
  unsigned __int16 *v124;
  unsigned __int16 *v125;
  unsigned __int16 *v126;
  unsigned __int16 *v127;
  unsigned __int16 *v128;
  int v129;
  unsigned __int16 *v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  float64x2_t *v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t **v150;
  uint64_t *v151;
  uint64_t *v152;
  unsigned __int8 *v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _DWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  int v163;
  double v164;
  uint64_t v165;
  int v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  uint64_t v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  __int128 v191;
  _DWORD *v192;
  _DWORD *v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  double v197;
  double v198;
  uint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  int v208;
  double v209;
  double v210;
  double v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  uint64_t *v225;
  ggl::RenderItem *v226;
  uint64_t v227;
  _QWORD *v228;
  unint64_t v229;
  float32x4_t *v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  uint64_t *v234;
  _QWORD *v235;
  uint64_t v236;
  _QWORD *v237;
  unint64_t v238;
  float32x4_t *v239;
  _QWORD *v240;
  unint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  _OWORD *v258;
  __int128 *v259;
  uint64_t v260;
  __int128 v261;
  uint64_t v262;
  uint64_t v263;
  __int128 v264;
  _QWORD *v265;
  int v266;
  int v267;
  unint64_t v268;
  unint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  _QWORD *v277;
  __int128 v278;
  int64x2_t v279;
  int64x2_t v280;
  int v281;
  uint64_t v282;
  unint64_t v283;
  unsigned __int8 *v284;
  _QWORD *v286;
  uint64_t v287;
  _OWORD v288[8];
  __int128 v289;
  uint64_t v290;
  double v291;
  double v292;
  double v293;
  double v294;
  float64x2_t v295;
  double v296;
  double v297;
  double v298;
  double v299;
  _BYTE v300[48];
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  uint64_t v314;
  std::__shared_weak_count *v315;
  double v316;
  double v317;
  double v318;
  uint64_t v319;
  double v320;
  double v321;
  double v322;
  uint64_t v323;
  double v324;
  double v325;
  double v326;
  uint64_t v327;
  __int128 v328;
  uint64_t v329;
  uint64_t v330;
  _BYTE v331[80];
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  _QWORD v335[3];
  _QWORD *v336;
  uint64_t v337;

  v337 = *MEMORY[0x1E0C80C00];
  result = v335;
  v335[0] = &off_1E42D3D90;
  v336 = v335;
  v8 = (uint64_t *)*((_QWORD *)a2 + 1);
  v9 = (int8x8_t)v8[1];
  if (!*(_QWORD *)&v9)
  {
    v13 = 4;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
  }
  v11 = (uint8x8_t)vcnt_s8(v9);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    v12 = 0x3070CB6B3C7F21D3;
    if (*(_QWORD *)&v9 <= 0x3070CB6B3C7F21D3uLL)
      v12 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v9;
  }
  else
  {
    v12 = (*(_QWORD *)&v9 - 1) & 0x3070CB6B3C7F21D3;
  }
  v14 = *v8;
  v15 = *(_QWORD **)(v14 + 8 * v12);
  if (!v15)
    goto LABEL_25;
  v16 = (_QWORD *)*v15;
  if (!v16)
    goto LABEL_25;
  if (v11.u32[0] < 2uLL)
  {
    while (1)
    {
      v18 = v16[1];
      if (v18 == 0x3070CB6B3C7F21D3)
      {
        if (v16[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_23;
      }
      else if ((v18 & (*(_QWORD *)&v9 - 1)) != v12)
      {
        goto LABEL_25;
      }
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v17 = v16[1];
    if (v17 == 0x3070CB6B3C7F21D3)
      break;
    if (v17 >= *(_QWORD *)&v9)
      v17 %= *(_QWORD *)&v9;
    if (v17 != v12)
      goto LABEL_25;
LABEL_12:
    v16 = (_QWORD *)*v16;
    if (!v16)
      goto LABEL_25;
  }
  if (v16[2] != 0x3070CB6B3C7F21D3)
    goto LABEL_12;
LABEL_23:
  v19 = v16[5];
  if (*(_QWORD *)(v19 + 8) == 0x3070CB6B3C7F21D3)
  {
    v282 = *(_QWORD *)(v19 + 32);
    goto LABEL_26;
  }
LABEL_25:
  v282 = 0;
LABEL_26:
  if (v11.u32[0] > 1uLL)
  {
    v20 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v9 <= 0x99BED48DEFBBD82BLL)
      v20 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v9;
  }
  else
  {
    v20 = (*(_QWORD *)&v9 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v21 = *(_QWORD **)(v14 + 8 * v20);
  if (!v21)
    goto LABEL_49;
  v22 = (_QWORD *)*v21;
  if (!v22)
    goto LABEL_49;
  if (v11.u32[0] < 2uLL)
  {
    v23 = *(_QWORD *)&v9 - 1;
    while (1)
    {
      v25 = v22[1];
      if (v25 == 0x99BED48DEFBBD82BLL)
      {
        if (v22[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_46;
      }
      else if ((v25 & v23) != v20)
      {
        goto LABEL_49;
      }
      v22 = (_QWORD *)*v22;
      if (!v22)
        goto LABEL_49;
    }
  }
  while (1)
  {
    v24 = v22[1];
    if (v24 == 0x99BED48DEFBBD82BLL)
      break;
    if (v24 >= *(_QWORD *)&v9)
      v24 %= *(_QWORD *)&v9;
    if (v24 != v20)
      goto LABEL_49;
LABEL_35:
    v22 = (_QWORD *)*v22;
    if (!v22)
      goto LABEL_49;
  }
  if (v22[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_35;
LABEL_46:
  v26 = v22[5];
  if (*(_QWORD *)(v26 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_49:
    v274 = 0;
    if (v282)
      goto LABEL_50;
    goto LABEL_197;
  }
  v274 = *(_QWORD *)(v26 + 32);
  if (!v282)
    goto LABEL_197;
LABEL_50:
  if ((a5 & 1) != 0)
  {
LABEL_51:
    *(_BYTE *)(a1 + 360) = 1;
    goto LABEL_52;
  }
  v120 = *(_QWORD **)v274;
  v121 = *(unsigned __int16 **)(*(_QWORD *)v274 + 184);
  v122 = *(unsigned __int16 **)(*(_QWORD *)v274 + 192);
  if (v121 != v122)
  {
    v123 = (unsigned __int16 *)v120[15];
    do
    {
      v124 = (unsigned __int16 *)v120[14];
      if (v124 != v123)
      {
        v124 = (unsigned __int16 *)v120[14];
        while (*v124 != *v121)
        {
          v124 += 56;
          if (v124 == v123)
          {
            v124 = (unsigned __int16 *)v120[15];
            break;
          }
        }
      }
      if (!*((_BYTE *)v124 + 8))
        goto LABEL_51;
      ++v121;
    }
    while (v121 != v122);
  }
  v125 = (unsigned __int16 *)v120[26];
  v126 = (unsigned __int16 *)v120[27];
  if (v125 != v126)
  {
    v128 = (unsigned __int16 *)v120[14];
    v127 = (unsigned __int16 *)v120[15];
    do
    {
      v131 = v128;
      if (v128 != v127)
      {
        v131 = v128;
        while (*v131 != *v125)
        {
          v131 += 56;
          if (v131 == v127)
          {
            v131 = v127;
            break;
          }
        }
      }
      v129 = *((unsigned __int8 *)v131 + 8);
      ++v125;
      if (v129)
        _ZF = v125 == v126;
      else
        _ZF = 1;
    }
    while (!_ZF);
    if (!v129)
      goto LABEL_51;
  }
  v137 = *(unsigned __int8 *)(a1 + 48);
  v138 = *(unsigned __int8 *)(a1 + 49);
  *(_BYTE *)(a1 + 360) = v137 != v138;
  if (v137 == v138)
  {
LABEL_197:
    result = v335;
    v13 = 4;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
  }
LABEL_52:
  v27 = *(_QWORD **)(a1 + 352);
  v28 = v27[14];
  v283 = v27[15];
  v29 = *(uint64_t **)(a1 + 272);
  v30 = *(uint64_t **)(a1 + 280);
  if (v29 != v30)
  {
    do
    {
      v31 = *v29;
      if (!v336
        || (*(_QWORD *)v331 = *v29, (*(unsigned int (**)(_QWORD *, _BYTE *))(*v336 + 48))(v336, v331)))
      {
        v32 = *(_QWORD *)(v31 + 384);
        v33 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)(*(_QWORD *)v274 + 8), (unsigned __int8 *)(v32 + 16));
        if (v33)
        {
          v34 = 0xAAAAAAAAAAAAAAABLL * (v33[17] - v33[16]);
          if (*(unsigned __int8 *)(v32 + 168) == 255)
            v28 += v34;
          else
            v283 += v34;
        }
      }
      ++v29;
    }
    while (v29 != v30);
    v27 = *(_QWORD **)(a1 + 352);
  }
  v35 = v282 + 144;
  v36 = 128;
  if (*(unsigned __int8 *)(v282 + 320) - 1 >= 3)
    v35 = v282 + 128;
  else
    v36 = 144;
  v37 = *(_QWORD *)(v282 + v36);
  v38 = *(std::__shared_weak_count **)(v35 + 8);
  v314 = v37;
  v315 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(p_shared_owners);
    while (__stxr(v40 + 1, p_shared_owners));
  }
  v286 = v27;
  v287 = a1;
  if (v28 > (uint64_t)(v27[8] - v27[7]) >> 3)
  {
    __asm { FMOV            V0.4S, #1.0 }
    v278 = _Q0;
    v279 = vdupq_n_s64(1uLL);
    do
    {
      v48 = operator new();
      v49 = v48;
      *(_OWORD *)v48 = 0u;
      *(_OWORD *)(v48 + 16) = 0u;
      *(_OWORD *)(v48 + 32) = 0u;
      *(_OWORD *)(v48 + 48) = 0u;
      *(_OWORD *)(v48 + 64) = 0u;
      *(_QWORD *)(v48 + 8) = &off_1E42B59B0;
      *(_QWORD *)(v48 + 24) = "";
      *(_QWORD *)(v48 + 32) = 0;
      *(_DWORD *)(v48 + 48) = 0;
      *(_QWORD *)(v48 + 40) = 0;
      *(_DWORD *)(v48 + 64) = 1065353216;
      *(_OWORD *)(v48 + 88) = 0u;
      *(_OWORD *)(v48 + 72) = 0u;
      *(int64x2_t *)(v48 + 104) = v279;
      *(_QWORD *)(v48 + 120) = 0;
      v27 = v286;
      v51 = (uint64_t *)v286[8];
      v50 = v286[9];
      if ((unint64_t)v51 >= v50)
      {
        v53 = (char *)v286[7];
        v54 = ((char *)v51 - v53) >> 3;
        v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 61)
          abort();
        v56 = v50 - (_QWORD)v53;
        if (v56 >> 2 > v55)
          v55 = v56 >> 2;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
          v57 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v57 = v55;
        if (v57)
        {
          if (v57 >> 61)
LABEL_314:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v58 = (char *)operator new(8 * v57);
        }
        else
        {
          v58 = 0;
        }
        v59 = (uint64_t *)&v58[8 * v54];
        *v59 = v49;
        v52 = v59 + 1;
        if (v51 == (uint64_t *)v53)
        {
          v27 = v286;
        }
        else
        {
          v60 = (char *)(v51 - 1) - v53;
          if (v60 < 0x58)
            goto LABEL_319;
          if ((unint64_t)(v53 - v58) < 0x20)
            goto LABEL_319;
          v61 = (v60 >> 3) + 1;
          v62 = &v58[8 * v54 - 16];
          v63 = v51 - 2;
          v64 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v65 = *(_OWORD *)v63;
            *((_OWORD *)v62 - 1) = *((_OWORD *)v63 - 1);
            *(_OWORD *)v62 = v65;
            v62 -= 32;
            v63 -= 4;
            v64 -= 4;
          }
          while (v64);
          v59 -= v61 & 0x3FFFFFFFFFFFFFFCLL;
          v51 -= v61 & 0x3FFFFFFFFFFFFFFCLL;
          if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_319:
            do
            {
              v66 = *--v51;
              *--v59 = v66;
            }
            while (v51 != (uint64_t *)v53);
          }
          v27 = v286;
          v51 = (uint64_t *)v286[7];
        }
        v27[7] = v59;
        v27[8] = v52;
        v27[9] = &v58[8 * v57];
        if (v51)
          operator delete(v51);
      }
      else
      {
        *v51 = v48;
        v52 = v51 + 1;
      }
      v27[8] = v52;
      v67 = (_QWORD *)*(v52 - 1);
      v68 = (_QWORD *)operator new();
      v69 = *(_QWORD *)(v287 + 352);
      v70 = operator new(0xE8uLL);
      v70[1] = 0;
      v70[2] = 0;
      *v70 = &off_1E42E2278;
      v71 = ggl::BufferData::BufferData((uint64_t)(v70 + 3), qword_1EE54ADE0, 2, 1, 6, 1);
      v70[28] = ggl::Tile::View::reflection(void)::reflection;
      v70[3] = &off_1E42B97B0;
      *(_QWORD *)v331 = v71;
      *(_QWORD *)&v331[8] = v70;
      v317 = 0.0;
      v316 = 0.0;
      v72 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v72->__shared_owners_ = 0;
      v73 = (unint64_t *)&v72->__shared_owners_;
      v72->__shared_weak_owners_ = 0;
      v72->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1A28;
      v74 = ggl::BufferData::BufferData((uint64_t)&v72[1], qword_1EE55CC40, 2, 1, 6, 1);
      v72[9].__shared_owners_ = (uint64_t)ggl::PolygonSolidFill::SolidFill::reflection(void)::reflection;
      v72[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B92D0;
      *(_QWORD *)&v306.f64[0] = v74;
      *(_QWORD *)&v306.f64[1] = v72;
      ggl::PolygonSolidFill::MeshPipelineSetup::MeshPipelineSetup(v68, *(_QWORD *)(v69 + 24), *(std::__shared_weak_count **)(v69 + 32), (uint64_t *)v331, (uint64_t *)&v316, (uint64_t *)&v306);
      *v67 = v68;
      do
        v75 = __ldaxr(v73);
      while (__stlxr(v75 - 1, v73));
      a1 = v287;
      if (v75)
      {
        v76 = *(std::__shared_weak_count **)&v317;
        if (v317 == 0.0)
          goto LABEL_105;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
        v76 = *(std::__shared_weak_count **)&v317;
        if (v317 == 0.0)
          goto LABEL_105;
      }
      v77 = (unint64_t *)&v76->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (v78)
      {
LABEL_105:
        v79 = *(std::__shared_weak_count **)&v331[8];
        if (*(_QWORD *)&v331[8])
          goto LABEL_106;
        goto LABEL_70;
      }
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
      v79 = *(std::__shared_weak_count **)&v331[8];
      if (*(_QWORD *)&v331[8])
      {
LABEL_106:
        v80 = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
LABEL_70:
      v45 = *(_QWORD **)(*(_QWORD *)(*v67 + 64) + 32);
      v46 = v45[1];
      v47 = (_OWORD *)v45[9];
      *v47 = v278;
      v47[1] = xmmword_19FFB3480;
      v67[9] = v314;
      if (v45[8] > v46)
        v46 = v45[8];
      v45[7] = 0;
      v45[8] = v46;
    }
    while (v28 > (uint64_t)(v27[8] - v27[7]) >> 3);
  }
  if (v283 > (uint64_t)(v27[11] - v27[10]) >> 3)
  {
    v280 = vdupq_n_s64(1uLL);
    do
    {
      v82 = operator new();
      v83 = v82;
      *(_OWORD *)v82 = 0u;
      *(_OWORD *)(v82 + 16) = 0u;
      *(_OWORD *)(v82 + 32) = 0u;
      *(_OWORD *)(v82 + 48) = 0u;
      *(_OWORD *)(v82 + 64) = 0u;
      *(_QWORD *)(v82 + 8) = &off_1E42B59B0;
      *(_QWORD *)(v82 + 24) = "";
      *(_QWORD *)(v82 + 32) = 0;
      *(_DWORD *)(v82 + 48) = 0;
      *(_QWORD *)(v82 + 40) = 0;
      *(_DWORD *)(v82 + 64) = 1065353216;
      *(_OWORD *)(v82 + 88) = 0u;
      *(_OWORD *)(v82 + 72) = 0u;
      *(int64x2_t *)(v82 + 104) = v280;
      *(_QWORD *)(v82 + 120) = 0;
      v27 = v286;
      v85 = (uint64_t *)v286[11];
      v84 = v286[12];
      if ((unint64_t)v85 >= v84)
      {
        v87 = (char *)v286[10];
        v88 = ((char *)v85 - v87) >> 3;
        v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 61)
          abort();
        v90 = v84 - (_QWORD)v87;
        if (v90 >> 2 > v89)
          v89 = v90 >> 2;
        if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8)
          v91 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v91 = v89;
        if (v91)
        {
          if (v91 >> 61)
            goto LABEL_314;
          v92 = (char *)operator new(8 * v91);
        }
        else
        {
          v92 = 0;
        }
        v93 = (uint64_t *)&v92[8 * v88];
        *v93 = v83;
        v86 = v93 + 1;
        if (v85 == (uint64_t *)v87)
        {
          v27 = v286;
        }
        else
        {
          v94 = (char *)(v85 - 1) - v87;
          if (v94 < 0x58)
            goto LABEL_320;
          if ((unint64_t)(v87 - v92) < 0x20)
            goto LABEL_320;
          v95 = (v94 >> 3) + 1;
          v96 = &v92[8 * v88 - 16];
          v97 = v85 - 2;
          v98 = v95 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v99 = *(_OWORD *)v97;
            *((_OWORD *)v96 - 1) = *((_OWORD *)v97 - 1);
            *(_OWORD *)v96 = v99;
            v96 -= 32;
            v97 -= 4;
            v98 -= 4;
          }
          while (v98);
          v93 -= v95 & 0x3FFFFFFFFFFFFFFCLL;
          v85 -= v95 & 0x3FFFFFFFFFFFFFFCLL;
          if (v95 != (v95 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_320:
            do
            {
              v100 = *--v85;
              *--v93 = v100;
            }
            while (v85 != (uint64_t *)v87);
          }
          v27 = v286;
          v85 = (uint64_t *)v286[10];
        }
        v27[10] = v93;
        v27[11] = v86;
        v27[12] = &v92[8 * v91];
        if (v85)
          operator delete(v85);
      }
      else
      {
        *v85 = v82;
        v86 = v85 + 1;
      }
      v27[11] = v86;
      v101 = (_QWORD *)*(v86 - 1);
      v102 = (_QWORD *)operator new();
      v103 = *(_QWORD *)(v287 + 352);
      v104 = operator new(0xE8uLL);
      v104[1] = 0;
      v104[2] = 0;
      *v104 = &off_1E42E2278;
      v105 = ggl::BufferData::BufferData((uint64_t)(v104 + 3), qword_1EE54ADE0, 2, 1, 6, 1);
      v104[28] = ggl::Tile::View::reflection(void)::reflection;
      v104[3] = &off_1E42B97B0;
      *(_QWORD *)v331 = v105;
      *(_QWORD *)&v331[8] = v104;
      v317 = 0.0;
      v316 = 0.0;
      v106 = (std::__shared_weak_count *)operator new(0xE8uLL);
      v106->__shared_owners_ = 0;
      v107 = (unint64_t *)&v106->__shared_owners_;
      v106->__shared_weak_owners_ = 0;
      v106->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1A28;
      v108 = ggl::BufferData::BufferData((uint64_t)&v106[1], qword_1EE55CC40, 2, 1, 6, 1);
      v106[9].__shared_owners_ = (uint64_t)ggl::PolygonSolidFill::SolidFill::reflection(void)::reflection;
      v106[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B92D0;
      *(_QWORD *)&v306.f64[0] = v108;
      *(_QWORD *)&v306.f64[1] = v106;
      ggl::PolygonSolidFill::S2MeshPipelineSetup::S2MeshPipelineSetup(v102, *(_QWORD *)(v103 + 40), *(std::__shared_weak_count **)(v103 + 48), (uint64_t *)v331, (uint64_t *)&v316, (uint64_t *)&v306);
      *v101 = v102;
      do
        v109 = __ldaxr(v107);
      while (__stlxr(v109 - 1, v107));
      a1 = v287;
      if (v109)
      {
        v110 = *(std::__shared_weak_count **)&v317;
        if (v317 == 0.0)
          goto LABEL_147;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
        v110 = *(std::__shared_weak_count **)&v317;
        if (v317 == 0.0)
          goto LABEL_147;
      }
      v111 = (unint64_t *)&v110->__shared_owners_;
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (v112)
      {
LABEL_147:
        v113 = *(std::__shared_weak_count **)&v331[8];
        if (*(_QWORD *)&v331[8])
          goto LABEL_148;
        goto LABEL_114;
      }
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
      v113 = *(std::__shared_weak_count **)&v331[8];
      if (*(_QWORD *)&v331[8])
      {
LABEL_148:
        v114 = (unint64_t *)&v113->__shared_owners_;
        do
          v115 = __ldaxr(v114);
        while (__stlxr(v115 - 1, v114));
        if (!v115)
        {
          ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
          std::__shared_weak_count::__release_weak(v113);
        }
      }
LABEL_114:
      v101[9] = v314;
    }
    while (v283 > (uint64_t)(v27[11] - v27[10]) >> 3);
  }
  v116 = (_QWORD *)*((_QWORD *)a2 + 1);
  v117 = (int8x8_t)v116[1];
  if (!*(_QWORD *)&v117)
    goto LABEL_200;
  v118 = (uint8x8_t)vcnt_s8(v117);
  v118.i16[0] = vaddlv_u8(v118);
  if (v118.u32[0] > 1uLL)
  {
    v119 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v117 <= 0x1AF456233693CD46uLL)
      v119 = 0x1AF456233693CD46uLL % *(_QWORD *)&v117;
  }
  else
  {
    v119 = (*(_QWORD *)&v117 - 1) & 0x1AF456233693CD46;
  }
  v132 = *(_QWORD **)(*v116 + 8 * v119);
  if (!v132)
    goto LABEL_200;
  v133 = (_QWORD *)*v132;
  if (!v133)
    goto LABEL_200;
  if (v118.u32[0] < 2uLL)
  {
    v134 = *(_QWORD *)&v117 - 1;
    while (1)
    {
      v136 = v133[1];
      if (v136 == 0x1AF456233693CD46)
      {
        if (v133[2] == 0x1AF456233693CD46)
          goto LABEL_198;
      }
      else if ((v136 & v134) != v119)
      {
        goto LABEL_200;
      }
      v133 = (_QWORD *)*v133;
      if (!v133)
        goto LABEL_200;
    }
  }
  while (1)
  {
    v135 = v133[1];
    if (v135 == 0x1AF456233693CD46)
      break;
    if (v135 >= *(_QWORD *)&v117)
      v135 %= *(_QWORD *)&v117;
    if (v135 != v119)
      goto LABEL_200;
LABEL_184:
    v133 = (_QWORD *)*v133;
    if (!v133)
      goto LABEL_200;
  }
  if (v133[2] != 0x1AF456233693CD46)
    goto LABEL_184;
LABEL_198:
  v139 = v133[5];
  if (*(_QWORD *)(v139 + 8) == 0x1AF456233693CD46)
  {
    v140 = *(_QWORD *)(v139 + 32);
    goto LABEL_201;
  }
LABEL_200:
  v140 = 0;
LABEL_201:
  md::LayoutContext::frameState(a2);
  v281 = *(unsigned __int8 *)(v141 + 128);
  v142 = (float64x2_t *)(v140 + 808);
  if (*a6)
    v142 = (float64x2_t *)(a6 + 8);
  v143 = v142[5];
  v310 = v142[4];
  v311 = v143;
  v144 = v142[7];
  v312 = v142[6];
  v313 = v144;
  v145 = v142[1];
  v306 = *v142;
  v307 = v145;
  v146 = v142[3];
  v308 = v142[2];
  v309 = v146;
  v147 = *(_QWORD **)(a1 + 272);
  v273 = *(_QWORD **)(a1 + 280);
  if (v147 != v273)
  {
    while (1)
    {
      v277 = v147;
      v148 = *v147;
      if (!v336
        || (*(_QWORD *)v331 = *v147, ((*(uint64_t (**)(_QWORD *, _BYTE *))(*v336 + 48))(v336, v331) & 1) != 0))
      {
        v149 = *(_QWORD *)(v148 + 384);
        v150 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)(*(_QWORD *)v274 + 8), (unsigned __int8 *)(v149 + 16));
        if (v150)
        {
          v151 = v150[16];
          v152 = v150[17];
          if (v152 != v151)
            break;
        }
      }
LABEL_205:
      v147 = v277 + 1;
      if (v277 + 1 == v273)
        goto LABEL_302;
    }
    v284 = (unsigned __int8 *)(v149 + 168);
    while (2)
    {
      v153 = *(unsigned __int8 **)(v148 + 384);
      v154 = *(_QWORD **)(a1 + 352);
      if (v153[168] != 255)
      {
        v155 = v154[15];
        v156 = v27[10];
        v157 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v156 + 8 * v155) + 64) + 32);
        *(_OWORD *)v331 = 0uLL;
        v158 = *(_QWORD *)(v157 + 8);
        if (v158)
          v159 = *(_DWORD **)(v157 + 72);
        else
          v159 = 0;
        *(_QWORD *)&v191 = 0;
        *((_QWORD *)&v191 + 1) = v157;
        *(_OWORD *)v331 = v191;
        *(_QWORD *)&v331[16] = 0;
        *(_QWORD *)&v331[24] = v158;
        *(_QWORD *)&v331[40] = v159;
        *(_WORD *)&v331[32] = 1;
        v192 = (_DWORD *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v153 + 32))(v153);
        v159[8] = *v192;
        v159[9] = v192[1];
        v159[10] = v192[2];
        v193 = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v148 + 384) + 32))(*(_QWORD *)(v148 + 384));
        v159[12] = v193[3];
        v159[13] = v193[4];
        v159[14] = v193[5];
        *(_QWORD *)(*(_QWORD *)(v156 + 8 * v155) + 32) = **(_QWORD **)(a1 + 352);
        *(_QWORD *)(*(_QWORD *)(v156 + 8 * v155) + 40) = **(_QWORD **)(v156 + 8 * v155);
        v194 = *(uint64_t **)(v156 + 8 * v155);
        v194[7] = 0;
        *((_DWORD *)v194 + 12) = *(unsigned __int8 *)(v149 + 169) + a4;
        v195 = *v194;
        md::GeometryContext::transformConstantData(&v316, (uint64_t *)v282, v284, v281, 0.0, 0.0);
        v196 = *(_QWORD *)(v195 + 64);
        v197 = v316;
        v198 = v317;
        *(double *)(v196 + 16) = v316;
        *(_QWORD *)(v196 + 24) = 0;
        v199 = *(_QWORD *)(v195 + 160);
        if (v198 != 0.0)
        {
          v200 = (unint64_t *)(*(_QWORD *)&v198 + 8);
          do
            v201 = __ldxr(v200);
          while (__stxr(v201 + 1, v200));
        }
        v202 = *(std::__shared_weak_count **)(v199 + 24);
        *(double *)(v199 + 16) = v197;
        *(double *)(v199 + 24) = v198;
        if (!v202)
          goto LABEL_238;
        v203 = (unint64_t *)&v202->__shared_owners_;
        do
          v204 = __ldaxr(v203);
        while (__stlxr(v204 - 1, v203));
        if (!v204)
        {
          ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
          std::__shared_weak_count::__release_weak(v202);
          v205 = *(std::__shared_weak_count **)&v317;
          if (v317 != 0.0)
          {
LABEL_239:
            v206 = (unint64_t *)&v205->__shared_owners_;
            do
              v207 = __ldaxr(v206);
            while (__stlxr(v207 - 1, v206));
            if (!v207)
            {
              ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
              std::__shared_weak_count::__release_weak(v205);
            }
          }
        }
        else
        {
LABEL_238:
          v205 = *(std::__shared_weak_count **)&v317;
          if (v317 != 0.0)
            goto LABEL_239;
        }
        v231 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v308), v309);
        v232 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v310), v311);
        v233 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v312), v313);
        v234 = *(uint64_t **)(v156 + 8 * v155);
        v236 = *v234;
        v235 = v234 + 1;
        v237 = **(_QWORD ***)(v236 + 64);
        v238 = v237[1];
        v239 = (float32x4_t *)v237[9];
        *v239 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v306), v307);
        v239[1] = v231;
        v239[2] = v232;
        v239[3] = v233;
        if (v237[8] > v238)
          v238 = v237[8];
        v237[7] = 0;
        v237[8] = v238;
        v240 = *(_QWORD **)(a3 + 80);
        v241 = *(_QWORD *)(a3 + 88);
        if ((unint64_t)v240 < v241)
        {
          v242 = v287;
          if (v240)
            *v240 = v235;
          v243 = v240 + 1;
          goto LABEL_285;
        }
        v244 = *(_QWORD *)(a3 + 72);
        v245 = ((uint64_t)v240 - v244) >> 3;
        v246 = v245 + 1;
        if ((unint64_t)(v245 + 1) >> 61)
          abort();
        v247 = v241 - v244;
        if (v247 >> 2 > v246)
          v246 = v247 >> 2;
        if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFF8)
          v248 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v248 = v246;
        if (v248)
        {
          v249 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 96) + 16))(*(_QWORD *)(a3 + 96), 8 * v248, 8);
          v250 = (_QWORD *)(v249 + 8 * v245);
          v251 = v249 + 8 * v248;
          if (v249)
            *v250 = v235;
        }
        else
        {
          v251 = 0;
          v250 = (_QWORD *)(8 * v245);
        }
        v242 = v287;
        v253 = *(_QWORD *)(a3 + 72);
        v252 = *(_QWORD *)(a3 + 80);
        v254 = v252 - v253;
        if (v252 == v253)
        {
          v256 = v250;
          goto LABEL_283;
        }
        v255 = v254 - 8;
        if ((unint64_t)(v254 - 8) < 0x38)
        {
          v256 = v250;
        }
        else
        {
          v256 = v250;
          if ((unint64_t)(v252 - (_QWORD)v250) >= 0x20)
          {
            v257 = (v255 >> 3) + 1;
            v258 = v250 - 2;
            v259 = (__int128 *)(v252 - 16);
            v260 = v257 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v261 = *v259;
              *(v258 - 1) = *(v259 - 1);
              *v258 = v261;
              v258 -= 2;
              v259 -= 2;
              v260 -= 4;
            }
            while (v260);
            v256 = &v250[-(v257 & 0x3FFFFFFFFFFFFFFCLL)];
            v252 -= 8 * (v257 & 0x3FFFFFFFFFFFFFFCLL);
            if (v257 == (v257 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_282:
              v252 = *(_QWORD *)(a3 + 72);
LABEL_283:
              v243 = v250 + 1;
              *(_QWORD *)(a3 + 72) = v256;
              *(_QWORD *)(a3 + 80) = v250 + 1;
              v263 = *(_QWORD *)(a3 + 88);
              *(_QWORD *)(a3 + 88) = v251;
              if (v252)
                (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 96) + 40))(*(_QWORD *)(a3 + 96), v252, v263 - v252);
LABEL_285:
              *(_QWORD *)(a3 + 80) = v243;
              ++*(_QWORD *)(*(_QWORD *)(v242 + 352) + 120);
              if (*(_QWORD *)&v331[40])
              {
                v264 = *(_OWORD *)&v331[16];
                if (*(_QWORD *)&v331[24] != *(_QWORD *)&v331[16])
                {
                  v265 = *(_QWORD **)&v331[8];
                  v266 = v331[32];
                  v267 = v331[33];
                  if (*(_QWORD *)v331 && *(_BYTE *)(*(_QWORD *)&v331[8] + 17) != 2)
                    (*(void (**)(void))(**(_QWORD **)v331 + 64))();
                  if (v266 && !v267)
                  {
                    v268 = v265[7];
                    v269 = v265[8];
                    if (v269 == v268)
                      v268 = v265[10] - v265[9];
                    if ((unint64_t)v264 < v268)
                      v268 = v264;
                    if (v269 <= *((_QWORD *)&v264 + 1))
                      v269 = *((_QWORD *)&v264 + 1);
                    if (v269 == v268)
                      v269 = v268 + v265[10] - v265[9];
                    v265[7] = v268;
                    v265[8] = v269;
                  }
                }
              }
              a1 = v287;
LABEL_213:
              v27 = v286;
              v151 += 3;
              if (v151 == v152)
                goto LABEL_205;
              continue;
            }
          }
        }
        do
        {
          v262 = *(_QWORD *)(v252 - 8);
          v252 -= 8;
          *--v256 = v262;
        }
        while (v252 != v253);
        goto LABEL_282;
      }
      break;
    }
    v160 = v154[14];
    v161 = v27[7];
    *(_QWORD *)(*(_QWORD *)(v161 + 8 * v160) + 32) = *v154;
    *(_QWORD *)(*(_QWORD *)(v161 + 8 * v160) + 40) = **(_QWORD **)(v161 + 8 * v160);
    v162 = *(uint64_t **)(v161 + 8 * v160);
    v162[7] = 0;
    *((_DWORD *)v162 + 12) = *(unsigned __int8 *)(v149 + 169) + a4;
    if ((v281 - 1) > 2u)
    {
      v208 = 1 << *((_BYTE *)v151 + 1);
      v209 = 1.0 / (double)v208;
      v210 = v209 * (double)*((int *)v151 + 2);
      v211 = v209 * (double)(v208 + ~*((_DWORD *)v151 + 1));
      memset(&v300[8], 0, 32);
      *(double *)v300 = v209;
      *(double *)&v300[40] = v209;
      v301 = 0u;
      v302 = 0u;
      v303 = *(unint64_t *)&v209;
      *(double *)&v304 = v210;
      *((double *)&v304 + 1) = v211;
      v305 = xmmword_19FFB33A0;
      v212 = *v162;
      v213 = *(_QWORD *)(*v162 + 64);
      *(_QWORD *)(v213 + 24) = 0;
      v214 = v154[1];
      *(_QWORD *)(v213 + 16) = v214;
      v215 = *(_QWORD *)(v212 + 160);
      v216 = v154[2];
      if (v216)
      {
        v217 = (unint64_t *)(v216 + 8);
        do
          v218 = __ldxr(v217);
        while (__stxr(v218 + 1, v217));
      }
      v219 = *(std::__shared_weak_count **)(v215 + 24);
      *(_QWORD *)(v215 + 16) = v214;
      *(_QWORD *)(v215 + 24) = v216;
      if (v219)
      {
        v220 = (unint64_t *)&v219->__shared_owners_;
        do
          v221 = __ldaxr(v220);
        while (__stlxr(v221 - 1, v220));
        if (!v221)
        {
          ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
          v190 = v219;
LABEL_251:
          std::__shared_weak_count::__release_weak(v190);
        }
      }
    }
    else
    {
      v163 = 1 << *(_BYTE *)(v149 + 169);
      v164 = 1.0 / (double)v163;
      v165 = *(int *)(v149 + 176);
      v166 = v163 + ~*(_DWORD *)(v149 + 172);
      *(double *)v331 = v164 * (double)v165;
      *(double *)&v331[8] = v164 * (double)v166;
      *(double *)&v331[16] = v164 + (double)v165 * v164;
      *(double *)&v331[24] = v164 + (double)v166 * v164;
      gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v289, (double *)v331, 0.0, 0.0);
      v332.f64[1] = 0.0;
      memset(&v331[8], 0, 72);
      v334.f64[1] = 1.0;
      v333 = v295;
      v334.f64[0] = v296;
      *(double *)v331 = v297 - v295.f64[0];
      *(double *)&v331[40] = v298 - v295.f64[1];
      v332.f64[0] = v299 - v296;
      v167 = v292;
      v168 = v293;
      v169 = v167 + v167;
      v170 = (v167 + v167) * v167;
      v171 = (v168 + v168) * v168;
      v172 = v291;
      v173 = v172 + v172;
      v174 = (v172 + v172) * v292;
      v175 = (v168 + v168) * v294;
      v176 = v293 * (v172 + v172);
      v177 = 1.0 - (v172 + v172) * v172;
      v316 = 1.0 - (v170 + v171);
      v317 = v175 + v174;
      v320 = v174 - v175;
      v321 = v177 - v171;
      v324 = v294 * v169 + v176;
      v325 = v169 * v293 - v294 * v173;
      v318 = v176 - v294 * v169;
      v322 = v294 * v173 + v169 * v293;
      v326 = v177 - v170;
      v319 = 0;
      v323 = 0;
      v327 = 0;
      v328 = v289;
      v329 = v290;
      v330 = 0x3FF0000000000000;
      gm::operator*<double,4,4,4>((double *)v288, &v316, (double *)v331);
      *(_OWORD *)v300 = v288[0];
      *(_OWORD *)&v300[16] = v288[1];
      *(_OWORD *)&v300[32] = v288[2];
      v301 = v288[3];
      v302 = v288[4];
      v303 = v288[5];
      v304 = v288[6];
      v305 = v288[7];
      v178 = **(_QWORD **)(v161 + 8 * v160);
      md::GeometryContext::transformConstantData((double *)v331, (uint64_t *)v282, v284, v281, 0.0, 0.0);
      v179 = *(_QWORD *)(v178 + 64);
      v180 = *(_OWORD *)v331;
      *(_QWORD *)(v179 + 16) = *(_QWORD *)v331;
      *(_QWORD *)(v179 + 24) = 0;
      v181 = *(_QWORD *)(v178 + 160);
      if (*((_QWORD *)&v180 + 1))
      {
        v182 = (unint64_t *)(*((_QWORD *)&v180 + 1) + 8);
        do
          v183 = __ldxr(v182);
        while (__stxr(v183 + 1, v182));
      }
      v184 = *(std::__shared_weak_count **)(v181 + 24);
      *(_OWORD *)(v181 + 16) = v180;
      if (!v184)
        goto LABEL_225;
      v185 = (unint64_t *)&v184->__shared_owners_;
      do
        v186 = __ldaxr(v185);
      while (__stlxr(v186 - 1, v185));
      if (!v186)
      {
        ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
        std::__shared_weak_count::__release_weak(v184);
        v187 = *(std::__shared_weak_count **)&v331[8];
        if (*(_QWORD *)&v331[8])
          goto LABEL_226;
      }
      else
      {
LABEL_225:
        v187 = *(std::__shared_weak_count **)&v331[8];
        if (*(_QWORD *)&v331[8])
        {
LABEL_226:
          v188 = (unint64_t *)&v187->__shared_owners_;
          do
            v189 = __ldaxr(v188);
          while (__stlxr(v189 - 1, v188));
          if (!v189)
          {
            ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
            v190 = v187;
            goto LABEL_251;
          }
        }
      }
    }
    gm::operator*<double,4,4,4>((double *)v331, v306.f64, (double *)v300);
    v222 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v331[32]), *(float64x2_t *)&v331[48]);
    v223 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v331[64]), v332);
    v224 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v333), v334);
    v225 = *(uint64_t **)(v161 + 8 * v160);
    v227 = *v225;
    v226 = (ggl::RenderItem *)(v225 + 1);
    v228 = **(_QWORD ***)(v227 + 64);
    v229 = v228[1];
    v230 = (float32x4_t *)v228[9];
    *v230 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v331), *(float64x2_t *)&v331[16]);
    v230[1] = v222;
    v230[2] = v223;
    v230[3] = v224;
    if (v228[8] > v229)
      v229 = v228[8];
    v228[7] = 0;
    v228[8] = v229;
    ggl::CommandBuffer::pushRenderItem(a3, v226);
    a1 = v287;
    ++*(_QWORD *)(*(_QWORD *)(v287 + 352) + 112);
    goto LABEL_213;
  }
LABEL_302:
  v270 = v315;
  if (v315)
  {
    v271 = (unint64_t *)&v315->__shared_owners_;
    do
      v272 = __ldaxr(v271);
    while (__stlxr(v272 - 1, v271));
    if (!v272)
    {
      ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
      std::__shared_weak_count::__release_weak(v270);
    }
  }
  result = v336;
  if (v336 == v335)
  {
    v13 = 4;
    result = v335;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
  }
  else if (v336)
  {
    v13 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
  }
  return result;
}

void sub_19F34BAC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2A0]);
  v3 = *(_QWORD **)(v1 - 120);
  if (v3 == (_QWORD *)(v1 - 144))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 144);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(a1);
}

double grl::IconModifiers::setText(_QWORD *a1, std::string *this)
{
  std::string::size_type size;
  std::string::size_type v5;
  uint64_t v6;
  uint64_t **v7;
  double result;
  unsigned __int16 v9;
  std::string::size_type v10;
  uint64_t **v11;
  void **v12;
  std::string::size_type v13;
  uint64_t **v14;
  void **v15;
  unsigned __int16 v16;
  std::string v17;
  unsigned __int16 *v18;

  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if (size)
  {
    v5 = std::string::find(this, 10, 0);
    v6 = a1[12];
    a1 += 12;
    v7 = (uint64_t **)(a1 - 1);
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,std::string>,grl::Allocator>>::destroy((uint64_t)(a1 - 1), v6);
    a1[2] = 0;
    *(a1 - 1) = a1;
    *a1 = 0;
    if (v5 == -1)
    {
      v10 = 0;
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v10 = 0;
      do
      {
        std::string::basic_string(&v17, this, v10, v5, (std::allocator<char> *)&v18);
        v16 = v9;
        v18 = &v16;
        v11 = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,std::string>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(v7, v9, &v18);
        v12 = (void **)(v11 + 5);
        if (*((char *)v11 + 63) < 0)
          operator delete(*v12);
        ++v9;
        *(std::string *)v12 = v17;
        v10 = v5 + 1;
        v5 = std::string::find(this, 10, v5 + 1);
      }
      while (v5 != -1);
    }
    v13 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v13 & 0x80u) != 0)
      v13 = this->__r_.__value_.__l.__size_;
    if (v10 < v13)
    {
      std::string::basic_string(&v17, this, v10, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v18);
      v16 = v9;
      v18 = &v16;
      v14 = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,std::string>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(v7, v9, &v18);
      v15 = (void **)(v14 + 5);
      if (*((char *)v14 + 63) < 0)
        operator delete(*v15);
      result = *(double *)&v17.__r_.__value_.__l.__data_;
      *(std::string *)v15 = v17;
    }
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,std::string>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(uint64_t **a1, unsigned __int16 a2, _WORD **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((unsigned __int16 *)v5 + 16);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 64, 8);
    *(_WORD *)(v9 + 32) = **a3;
    *(_QWORD *)(v9 + 48) = 0;
    *(_QWORD *)(v9 + 56) = 0;
    *(_QWORD *)(v9 + 40) = 0;
    std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

_QWORD *md::DebugRenderLayer::layout(md::DebugRenderLayer *this, const md::LayoutContext *a2)
{
  double v2;
  float v3;
  float v4;
  const md::LayoutContext *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t v18;
  ggl::CommandBuffer *v19;
  uint64_t v20;
  _QWORD *v21;
  int8x8_t v22;
  uint8x8_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int8x8_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint8x8_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint8x8_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  char *v63;
  char *v64;
  char *v65;
  _QWORD *v66;
  uint64_t v67;
  _BOOL4 v68;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _OWORD *v89;
  __int128 *v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  _OWORD *v115;
  __int128 *v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t *v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  _OWORD *v141;
  __int128 *v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t *v150;
  _QWORD *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  _OWORD *v167;
  __int128 *v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t *v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  _OWORD *v193;
  __int128 *v194;
  uint64_t v195;
  __int128 v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  int8x8_t v201;
  uint8x8_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  _QWORD *v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  _QWORD *v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t **i;
  _QWORD *v220;
  unsigned int *v221;
  unsigned int *v222;
  uint64_t *v223;
  uint64_t *v224;
  uint64_t *v225;
  uint64_t *v226;
  uint64_t *v227;
  uint64_t *v228;
  __int128 v229;
  __int128 v230;
  float64x2_t v231;
  uint8x8_t v232;
  float64x2_t v233;
  uint64_t *v234;
  uint64_t *v235;
  uint64_t *v236;
  uint64_t *v237;
  uint64_t *v238;
  __int128 v239;
  __int128 v240;
  float64x2_t v241;
  uint8x8_t v242;
  float64x2_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  uint64_t *v247;
  uint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  __int128 v256;
  __int128 v257;
  float64x2_t v258;
  uint8x8_t v259;
  float64x2_t v260;
  int v261;
  ggl::CommandBuffer *v262;
  _QWORD *v263;
  uint64_t v264;
  __int128 v265;
  __int128 v266;
  float64x2_t v267;
  uint8x8_t v268;
  float64x2_t v269;
  int v270;
  ggl::CommandBuffer *v271;
  char *v272;
  uint64_t v273;
  __int128 v274;
  __int128 v275;
  float64x2_t v276;
  uint8x8_t v277;
  float64x2_t v278;
  int v279;
  ggl::CommandBuffer *v280;
  _QWORD *v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  float64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  ggl::DebugConsole *v293;
  ggl::DebugConsole *v294;
  id v295;
  double v296;
  double v297;
  float v298;
  float v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *p_shared_owners;
  unint64_t v303;
  uint64_t v304;
  std::__shared_weak_count *v305;
  double v306;
  float32x4_t *v307;
  unint64_t *v308;
  unint64_t v309;
  char v310;
  float v311;
  int v312;
  float v313;
  unint64_t *v314;
  unint64_t v315;
  unint64_t *v316;
  unint64_t v317;
  id v318;
  double v319;
  id v320;
  float64x2_t v321;
  float64_t v322;
  uint64_t v323;
  _QWORD *v324;
  int8x8_t v325;
  uint8x8_t v326;
  unint64_t v327;
  _QWORD *v328;
  _QWORD *v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  id v335;
  double v336;
  double v337;
  id v338;
  double v339;
  double v340;
  unsigned __int16 *v341;
  unsigned __int16 *v342;
  unsigned __int16 *j;
  char *v344;
  unint64_t v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  _OWORD *v349;
  char *v350;
  uint64_t v351;
  __int128 v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t *v355;
  float v356;
  float v357;
  double v358;
  double v359;
  uint64_t v363;
  double v364;
  unsigned int v365;
  unsigned int v366;
  int v367;
  double v368;
  double v369;
  double v370;
  double v371;
  double v372;
  double *v373;
  double v374;
  double *v375;
  double v376;
  double v377;
  double v378;
  double v379;
  double v380;
  float64x2_t v381;
  float64x2_t v382;
  float v385;
  float32x2_t v386;
  double v387;
  double v388;
  float v389;
  float32x2_t v390;
  float32x2_t v391;
  double v392;
  double v393;
  double v394;
  double v395;
  double v396;
  double v397;
  double v398;
  double v399;
  double v400;
  float64x2_t v401;
  double v402;
  double v403;
  double v404;
  double v406;
  double v407;
  double v408;
  double v409;
  double v410;
  double v411;
  double v412;
  double v413;
  double v414;
  double v415;
  double v416;
  float v417;
  float32x2_t v418;
  double v419;
  int32x2_t v420;
  int8x16_t *p_dst;
  std::string::size_type size;
  float64x2_t v423;
  float64_t v424;
  float64_t v425;
  QuadTile *v426;
  float64_t v427;
  float64x2_t v428;
  float64_t v429;
  float64_t v430;
  QuadTile *v431;
  float64_t v432;
  float64x2_t v433;
  float64_t v434;
  float64_t v435;
  QuadTile *v436;
  float64_t v437;
  float64x2_t v438;
  float64_t v439;
  float64_t v440;
  QuadTile *v441;
  float64_t v442;
  __int128 v443;
  uint64_t v444;
  float64_t v445;
  uint64_t v446;
  uint64_t v447;
  QuadTile *v448;
  ggl::CommandBuffer *v449;
  std::string::size_type v450;
  std::string *v451;
  float64_t v452;
  float64x2_t *v453;
  float64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  std::string *v458;
  uint64_t v459;
  _QWORD *v460;
  int8x8_t v461;
  uint8x8_t v462;
  unint64_t v463;
  _QWORD *v464;
  _QWORD *v465;
  uint64_t v466;
  unint64_t v467;
  uint64_t v468;
  uint64_t v469;
  _QWORD *v470;
  __int128 v471;
  uint64_t v473;
  uint64_t v474;
  uint64_t *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  unint64_t v479;
  unint64_t v480;
  unint64_t v481;
  _BOOL4 v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  int *v486;
  unint64_t v487;
  int v488;
  int v489;
  int v490;
  unint64_t v491;
  int *v492;
  int v493;
  uint64_t v494;
  uint64_t v495;
  BOOL v496;
  std::ios_base *v497;
  std::locale::id *v498;
  _QWORD *v499;
  const std::locale::facet *v500;
  _QWORD *v501;
  const std::locale::facet *v502;
  _QWORD *v503;
  const std::locale::facet *v504;
  std::string::size_type v505;
  std::string *v506;
  uint64_t v507;
  const void **v508;
  const void *v509;
  uint64_t v510;
  uint64_t v511;
  std::string *v512;
  std::string::size_type v513;
  _BYTE *v514;
  uint64_t v515;
  std::string *v516;
  std::string::size_type v517;
  ggl::CommandBuffer *v518;
  size_t v519;
  _BYTE *v520;
  size_t v521;
  _BYTE *v522;
  float64_t v523;
  float64x2_t *v524;
  float64_t v525;
  float64x2_t *v526;
  float64_t v527;
  uint64_t v528;
  uint64_t v529;
  _BYTE *v530;
  float32x2_t *v531;
  float64_t v532;
  uint64_t v533;
  uint64_t v534;
  _BYTE *v535;
  id v536;
  double v537;
  double v538;
  _QWORD *v539;
  int8x8_t v540;
  uint8x8_t v541;
  float32x2_t *v542;
  uint64_t v543;
  uint64_t v544;
  _QWORD *v545;
  _QWORD *v546;
  uint64_t v547;
  unint64_t v548;
  uint64_t v549;
  uint64_t v550;
  float64x2_t v551;
  float32x2_t v552;
  uint64_t v553;
  float v554;
  float v555;
  double v556;
  float32x2_t v557;
  float64x2_t v558;
  float v560;
  float v563;
  float v564;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t *v570;
  uint64_t v571;
  float v572;
  float32x2_t v573;
  int v574;
  uint64_t **v575;
  uint64_t **v576;
  uint64_t *v577;
  int v578;
  _DWORD *v579;
  uint64_t *v580;
  uint64_t v581;
  _BYTE *v582;
  uint64_t v583;
  uint64_t v584;
  unsigned int v585;
  const char *v586;
  size_t v587;
  std::string *v588;
  __int128 v589;
  std::string *v590;
  std::string::size_type v591;
  std::string *v592;
  int32x2_t v593;
  std::string::size_type v594;
  size_t v595;
  std::string *v596;
  size_t v597;
  unint64_t v598;
  std::string *v599;
  uint64_t v600;
  uint64_t v601;
  std::string *v602;
  double v603;
  int8x16_t *v604;
  std::string::size_type v605;
  _QWORD *v606;
  _BYTE *v607;
  float *v608;
  float *k;
  float32x2_t v610;
  float32x2_t v611;
  __int128 v612;
  float32x2_t v613;
  float32x2_t v614;
  float32x2_t v615;
  float32x2_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  _QWORD *v620;
  int8x8_t v621;
  uint8x8_t v622;
  unint64_t v623;
  _QWORD *v624;
  _QWORD *v625;
  uint64_t v626;
  unint64_t v627;
  uint64_t v628;
  _QWORD *v629;
  __int128 v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t *v634;
  unint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  unint64_t v639;
  unint64_t v640;
  unint64_t v641;
  uint64_t v642;
  uint64_t v643;
  int *v644;
  unint64_t v645;
  int v646;
  int v647;
  int v648;
  unint64_t v649;
  int *v650;
  int v651;
  std::string *v652;
  std::string::size_type v653;
  std::string *v654;
  std::string::size_type v655;
  ggl::CommandBuffer *v656;
  std::string::size_type v657;
  std::string *v658;
  float64_t v659;
  float64x2_t *v660;
  float64_t v661;
  uint64_t v662;
  _QWORD *v663;
  uint64_t v664;
  uint64_t v665;
  std::string *v666;
  uint64_t v667;
  _QWORD *v668;
  int8x8_t v669;
  uint8x8_t v670;
  uint64_t v671;
  _QWORD *v672;
  _QWORD *v673;
  uint64_t v674;
  unint64_t v675;
  uint64_t v676;
  __n128 v677;
  uint64_t v678;
  uint64_t v679;
  unint64_t *v680;
  unint64_t v681;
  int v682;
  int v683;
  _QWORD *v684;
  uint64_t *v685;
  unsigned int v686;
  uint64_t *v687;
  uint64_t v688;
  const std::ios_base *v689;
  void *rdbuf;
  std::ios_base::fmtflags fmtflags;
  int v692;
  const std::locale::facet *v693;
  char *v694;
  uint64_t width;
  BOOL v696;
  uint64_t v697;
  size_t v698;
  float64x2_t *v699;
  uint64_t v700;
  uint64_t v701;
  float64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t *v706;
  std::ios_base *v707;
  std::string::size_type v708;
  std::string *v709;
  float64_t v710;
  float64x2_t *v711;
  float64_t v712;
  uint64_t v713;
  uint64_t v714;
  std::string *v715;
  int64_t v716;
  const std::ios_base *v717;
  void *v718;
  std::ios_base::fmtflags v719;
  int v720;
  const std::locale::facet *v721;
  int v722;
  char *v723;
  std::string *v724;
  std::streamsize v725;
  std::streamsize v726;
  size_t v727;
  int64_t v728;
  std::string *v729;
  uint64_t v730;
  std::string *v731;
  float64x2_t *v732;
  uint64_t v733;
  uint64_t v734;
  float64_t v735;
  uint64_t v736;
  uint64_t v737;
  const std::ios_base *v738;
  void *v739;
  std::ios_base::fmtflags v740;
  int v741;
  const std::locale::facet *v742;
  char *v743;
  uint64_t v744;
  uint64_t v745;
  size_t v746;
  float64x2_t *v747;
  uint64_t v748;
  uint64_t v749;
  float64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  unsigned __int8 v754;
  unsigned __int8 v755;
  const char *v756;
  int64_t v757;
  const std::ios_base *v758;
  void *v759;
  std::ios_base::fmtflags v760;
  int v761;
  const std::locale::facet *v762;
  int v763;
  const char *v764;
  const char *v765;
  std::streamsize v766;
  std::streamsize v767;
  size_t v768;
  int64_t v769;
  const char *v770;
  uint64_t v771;
  const char *v772;
  float64x2_t *v773;
  uint64_t v774;
  uint64_t v775;
  float64_t v776;
  uint64_t v777;
  std::string::size_type v778;
  _BYTE *v779;
  uint64_t v780;
  uint64_t v781;
  const void **v782;
  const void *v783;
  uint64_t v784;
  uint64_t v785;
  std::string *v786;
  std::string::size_type v787;
  ggl::CommandBuffer *v788;
  size_t v789;
  float64x2_t *v790;
  unint64_t v791;
  const void **v792;
  const void *v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  std::__shared_weak_count *v797;
  unint64_t *v798;
  unint64_t v799;
  unint64_t v800;
  float64x2_t v801;
  float64_t v802;
  float64_t v803;
  uint64_t v804;
  std::__shared_weak_count *v805;
  unint64_t *v806;
  unint64_t v807;
  float64_t v808;
  float64x2_t v809;
  float64_t v810;
  float64_t v811;
  uint64_t v812;
  std::__shared_weak_count *v813;
  unint64_t *v814;
  unint64_t v815;
  float64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  unint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t **v824;
  uint64_t *v825;
  uint64_t *v826;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  double v831;
  double v832;
  double v833;
  double v834;
  double v835;
  id v836;
  double v837;
  id v838;
  double v839;
  uint64_t v840;
  float v841;
  float v842;
  float v843;
  float32x2_t v844;
  float32x2_t v845;
  float32x2_t v846;
  float32x2_t v847;
  float v848;
  float64x2_t v849;
  float32x2_t v850;
  float v851;
  float v852;
  float32x2_t v853;
  float32x2_t v854;
  float32x2_t v855;
  float32x2_t v856;
  uint64_t v857;
  char v858;
  char v859;
  float *v860;
  float *v861;
  float v862;
  char v863;
  float32x2_t v864;
  float32x2_t v865;
  uint64_t v866;
  float *v867;
  float *m;
  float32x2_t v869;
  float32x2_t v870;
  const md::LayoutContext *v871;
  float32x2_t *v872;
  __int128 v873;
  std::string::size_type v874;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  int v880;
  uint64_t v881;
  _OWORD *v882;
  uint64_t v883;
  unsigned int v884;
  unsigned int v885;
  unsigned int v886;
  unsigned int v887;
  unsigned int v888;
  unsigned int v889;
  unsigned int v890;
  unsigned int v891;
  float v892;
  float v893;
  unsigned int v894;
  unsigned int v895;
  float v896;
  float v897;
  unsigned int v898;
  unsigned int v899;
  float v900;
  float v901;
  float v902;
  float v903;
  float v904;
  float v905;
  float v906;
  float v907;
  float v908;
  float v909;
  float v910;
  float v911;
  float v912;
  float v913;
  float v914;
  float v915;
  float32x2_t v916;
  float32x2_t v917;
  float32x2_t v918;
  float v919;
  float v920;
  _QWORD *v921;
  uint64_t v922;
  _QWORD *v923;
  uint64_t v924;
  unint64_t *v925;
  uint64_t *v926;
  _QWORD *v927;
  ggl::CommandBuffer *v928;
  _QWORD *v929;
  ggl::CommandBuffer *v930;
  _QWORD *v931;
  std::__shared_weak_count *v932;
  unint64_t *v933;
  unint64_t v934;
  uint64_t v935;
  _DWORD *v936;
  float *v937;
  unint64_t v938;
  uint64_t v939;
  unint64_t v940;
  uint64_t v941;
  unint64_t v942;
  uint64_t v943;
  uint64_t v944;
  unint64_t v945;
  uint64_t v946;
  unint64_t v948;
  unint64_t v949;
  uint64_t v950;
  unint64_t v951;
  unint64_t v952;
  uint64_t v953;
  BOOL v954;
  unint64_t *v955;
  uint64_t *v956;
  float *v957;
  _DWORD *v958;
  unint64_t v959;
  uint64_t v960;
  unint64_t v961;
  uint64_t v962;
  unint64_t v963;
  uint64_t v964;
  uint64_t v965;
  unint64_t v966;
  uint64_t v967;
  unint64_t v969;
  unint64_t v970;
  uint64_t v971;
  unint64_t v972;
  unint64_t v973;
  uint64_t v974;
  BOOL v975;
  unsigned __int16 *v976;
  unsigned __int16 *v977;
  uint64_t v978;
  float64x2_t v980;
  unint64_t v982;
  unsigned __int16 *v983;
  unsigned __int16 *v984;
  uint64_t v985;
  double v986;
  double v987;
  double v988;
  double v989;
  double v990;
  double v991;
  double v992;
  uint64_t v993;
  float v994;
  float32x2_t v995;
  float v996;
  float v997;
  float32x4_t v998;
  float v999;
  float32x2_t v1000;
  float v1001;
  float v1002;
  _QWORD *v1003;
  unint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  __int128 v1007;
  uint64_t v1008;
  unint64_t *v1009;
  unint64_t v1010;
  std::__shared_weak_count *v1011;
  unint64_t *v1012;
  unint64_t v1013;
  std::__shared_weak_count *v1014;
  unint64_t *v1015;
  unint64_t v1016;
  void *v1017;
  int32x4_t v1018;
  int32x4_t v1019;
  _QWORD *v1020;
  unint64_t v1021;
  _OWORD *v1022;
  int32x2_t v1023;
  unint64_t v1024;
  float32x2_t v1025;
  float32x2_t v1026;
  float32x2_t v1027;
  float32x2_t v1028;
  float32x2_t v1031;
  float32x2_t v1032;
  std::string::size_type v1033;
  double v1034;
  float v1035;
  float v1036;
  float32x2_t v1037;
  unsigned int v1038;
  std::string::size_type v1039;
  uint64_t v1040;
  unsigned __int16 *v1041;
  unsigned __int16 *v1042;
  uint64_t v1043;
  unsigned __int16 *v1044;
  unsigned __int16 *v1045;
  unint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  unint64_t *v1050;
  uint64_t v1051;
  int v1052;
  unsigned __int8 v1053;
  unsigned __int16 *v1054;
  unsigned __int16 *v1055;
  unsigned __int16 *v1056;
  uint64_t *v1057;
  unint64_t v1058;
  std::__shared_weak_count *v1059;
  unint64_t *v1060;
  unint64_t v1061;
  char v1062;
  uint64_t v1063;
  signed int v1064;
  int v1065;
  signed int v1066;
  unint64_t v1067;
  BOOL v1068;
  _BOOL4 v1069;
  _BOOL4 v1070;
  unint64_t *v1071;
  unint64_t v1072;
  unint64_t v1073;
  unsigned int v1074;
  std::string::size_type v1075;
  std::string::size_type *p_size;
  uint64_t **v1077;
  unsigned int v1078;
  _BYTE *v1079;
  uint64_t *v1080;
  unsigned __int8 *v1081;
  unsigned __int8 *v1082;
  uint64_t v1083;
  std::string::size_type v1084;
  uint64_t *v1086;
  unsigned int v1087;
  uint64_t **v1088;
  uint64_t **v1089;
  unsigned int v1090;
  _BYTE *v1091;
  uint64_t *v1092;
  uint64_t *v1093;
  uint64_t v1094;
  uint64_t *v1095;
  uint64_t v1096;
  _BYTE *v1097;
  int v1098;
  uint64_t v1099;
  int v1100;
  uint64_t *v1101;
  uint64_t v1102;
  int v1103;
  uint64_t v1104;
  uint64_t *v1105;
  uint64_t v1106;
  std::string::size_type v1107;
  unsigned int v1108;
  std::string::size_type *v1109;
  std::string::size_type *v1110;
  unsigned int v1111;
  _BYTE *v1112;
  _BYTE *v1113;
  std::string::size_type v1114;
  uint64_t v1115;
  uint64_t *v1116;
  uint64_t v1117;
  _BYTE *v1118;
  int v1119;
  uint64_t v1120;
  int v1121;
  uint64_t *v1122;
  uint64_t v1123;
  int v1124;
  uint64_t v1125;
  _BYTE *v1126;
  uint64_t v1127;
  __int32 v1128;
  float v1129;
  float v1130;
  uint64_t v1131;
  _QWORD *v1132;
  unint64_t v1133;
  float32x2_t *v1134;
  unint64_t v1135;
  ggl::RenderItem *v1136;
  int32x2_t v1137;
  float32x2_t v1138;
  float32x2_t v1139;
  float32x2_t v1140;
  float32x2_t v1141;
  id v1143;
  int8x16_t *v1144;
  size_t v1145;
  double v1146;
  int32x2_t v1147;
  double v1148;
  int32x2_t v1149;
  double v1150;
  int32x2_t v1151;
  _BYTE *v1152;
  double v1153;
  int32x2_t v1154;
  std::string::size_type v1155;
  std::string::size_type v1156;
  std::string::size_type v1157;
  std::string::size_type v1158;
  int v1159;
  unint64_t v1160;
  unint64_t v1161;
  unint64_t v1162;
  __int8 v1164;
  __int8 v1165;
  unint64_t v1166;
  const char *v1167;
  id v1168;
  int8x16_t *v1169;
  size_t v1170;
  double v1171;
  int32x2_t v1172;
  _QWORD *v1173;
  _BYTE *v1174;
  unint64_t v1175;
  const char *v1176;
  id v1177;
  int8x16_t *v1178;
  size_t v1179;
  double v1180;
  int32x2_t v1181;
  std::string *v1182;
  std::string *v1183;
  int v1184;
  const char *v1185;
  const char *v1186;
  id v1187;
  int8x16_t *v1188;
  size_t v1189;
  double v1190;
  int32x2_t v1191;
  std::string *v1192;
  std::string *v1193;
  uint64_t v1194;
  uint64_t v1195;
  unint64_t v1196;
  uint64_t v1197;
  unint64_t v1198;
  _OWORD *v1199;
  float64_t v1200;
  float64_t v1201;
  float64_t v1202;
  float64_t v1203;
  unint64_t *v1204;
  unint64_t v1205;
  ggl::RenderItem *v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  float64_t v1212;
  float64_t v1213;
  float64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  float32x2_t *v1220;
  uint64_t v1221;
  uint64_t v1222;
  float32x4_t v1223;
  float32x4_t v1224;
  float32x4_t v1225;
  float32x4_t v1226;
  float64_t v1227;
  float64_t v1228;
  float64_t v1229;
  _OWORD *v1230;
  float64_t v1231;
  float64_t v1232;
  float64_t v1233;
  float64_t v1234;
  unint64_t *v1235;
  unint64_t v1236;
  ggl::RenderItem *v1237;
  _QWORD *result;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  _QWORD *v1242;
  float64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  float64_t v1246;
  uint64_t v1247;
  std::string::size_type v1248;
  unint64_t v1249;
  uint64_t v1250;
  __n128 v1251;
  uint64_t v1252;
  double v1253;
  double v1254;
  float64x2_t v1255;
  uint64_t *v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  float64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  float64_t v1264;
  uint64_t v1265;
  std::string::size_type v1266;
  double *v1267;
  uint64_t v1268;
  uint64_t v1269;
  float64x2_t v1270;
  float v1271;
  float64_t v1272;
  float v1273;
  uint64_t v1274;
  float __sb;
  float32x2_t __sba;
  uint64_t *__sbb;
  int32x2_t __sbc;
  uint64_t *v1279;
  float32x2_t v1280;
  uint64_t v1281;
  int v1282;
  float v1283;
  void *v1284;
  int v1285;
  char *__p;
  char *v1287;
  int v1288;
  float64_t v1289;
  float64x2_t v1290;
  int32x2_t v1291;
  char *v1292;
  double v1293;
  float64_t v1294;
  std::string::size_type v1295;
  float64_t v1296;
  float64x2_t v1297;
  int32x2_t v1298;
  double *v1299;
  double v1300;
  float64_t v1301;
  float32x2_t v1302;
  uint64_t v1303;
  std::string::size_type v1304;
  float64x2_t v1305;
  float64x2_t v1306;
  float v1307;
  double v1308;
  uint64_t v1309;
  float32x2_t v1310;
  float64_t v1311;
  std::string::size_type v1312;
  float64x2_t v1313;
  float64x2_t v1314;
  float v1315;
  _QWORD *v1316;
  double v1317;
  float32x2_t v1318;
  float64x2_t v1319;
  uint64_t *v1320;
  uint64_t v1321;
  double v1322;
  float v1323;
  std::string::size_type v1324;
  float64x2_t v1325;
  float32x2_t v1326;
  float64x2_t v1327;
  std::string::size_type v1328;
  float32x4_t v1329;
  uint64_t v1330;
  float64_t v1331;
  float64_t v1332;
  float v1333;
  __n128 v1334;
  __n128 v1335;
  float v1336;
  float32x4_t v1337;
  float32x4_t v1338;
  float64_t v1339;
  float64_t v1340;
  float64_t v1341;
  float64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1347;
  float32x4_t v1348;
  float32x4_t v1349;
  float32x2_t *v1350;
  ggl::DebugConsole *v1351[2];
  ggl::DebugConsole *v1352[2];
  const md::LayoutContext *v1353;
  md::LayoutContext *v1354[2];
  md::LayoutContext *v1355[2];
  std::string v1356;
  std::string *v1357;
  _OWORD *v1358;
  std::string v1359;
  __int128 v1360;
  __int128 v1361;
  __int128 v1362;
  __int128 v1363;
  float v1364;
  uint64_t v1365;
  uint64_t v1366;
  float v1367;
  uint64_t v1368;
  uint64_t v1369;
  float v1370;
  int v1371;
  float v1372;
  int v1373;
  float v1374;
  int v1375;
  void *v1376;
  void *v1377;
  uint64_t v1378;
  void *v1379;
  void *v1380;
  uint64_t v1381;
  void *v1382;
  void *v1383;
  uint64_t v1384;
  ggl::CommandBuffer *v1385;
  std::string v1386;
  std::string v1387;
  std::string v1388;
  std::string v1389;
  _BYTE v1390[32];
  _BYTE v1391[96];
  uint64_t v1392;
  float64x2_t __b[5];
  _BYTE v1394[48];
  _QWORD v1395[20];
  std::string __dst;
  uint64_t v1397;
  float v1398;
  float v1399;
  unint64_t v1400;
  float v1401;
  float v1402;
  unint64_t v1403;
  uint64_t v1404;
  unint64_t v1405;
  void *v1406;
  char v1407;
  unint64_t v1408;
  int v1409;
  uint64_t v1410;
  _QWORD v1411[3];
  _QWORD *v1412;
  _QWORD v1413[3];
  _QWORD *v1414;
  _QWORD v1415[3];
  _QWORD *v1416;
  uint64_t v1417;

  v5 = a2;
  v1417 = *MEMORY[0x1E0C80C00];
  v1413[0] = &off_1E42CD2F8;
  v1413[1] = a2;
  v1414 = v1413;
  v1411[0] = &off_1E42CD340;
  v1411[1] = a2;
  v1412 = v1411;
  v1416 = v1415;
  v1415[0] = &off_1E42CD340;
  v1415[1] = a2;
  std::__function::__func<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_10,std::allocator<md::DebugRenderLayer::layout(md::LayoutContext const&)::$_10>,void ()(void)>::operator()((uint64_t)v1413);
  v6 = v1412;
  if (v1412 == v1411)
  {
    v7 = 4;
    v6 = v1411;
  }
  else
  {
    if (!v1412)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = v1414;
  if (v1414 == v1413)
  {
    v9 = 4;
    v8 = v1413;
  }
  else
  {
    if (!v1414)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  v1385 = 0;
  v10 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 24) + 8);
  v11 = v10[3];
  v12 = v10[4];
  v13 = v12 - v11;
  if (v12 == v11)
  {
LABEL_18:
    v19 = 0;
  }
  else
  {
    v14 = 0;
    v15 = v13 >> 3;
    while (1)
    {
      v16 = *(unsigned __int8 **)(v11 + 8 * v14);
      if (*v16 == *((unsigned __int8 *)this + 136))
      {
        v17 = *((_QWORD *)v16 + 1);
        v18 = v10[15];
        if (v17 < (v10[16] - v18) >> 3)
          break;
      }
      if (++v14 >= v15)
        goto LABEL_18;
    }
    v19 = *(ggl::CommandBuffer **)(v18 + 8 * v17);
    if (v19)
      v19 = *(ggl::CommandBuffer **)(*((_QWORD *)v19 + 3) + 8 * *((unsigned __int8 *)this + 137));
  }
  v1385 = v19;
  v20 = *((_QWORD *)v19 + 9);
  if (*((_QWORD *)v19 + 10) != v20)
    *((_QWORD *)v19 + 10) = v20;
  *((_QWORD *)v19 + 4) = 0;
  v21 = (_QWORD *)*((_QWORD *)v5 + 1);
  v22 = (int8x8_t)v21[1];
  if (!*(_QWORD *)&v22)
  {
    v26 = 0;
    v27 = 0;
    __p = 0;
    v28 = (int8x8_t)v21[1];
    if (v28)
      goto LABEL_83;
    goto LABEL_121;
  }
  v23 = (uint8x8_t)vcnt_s8(v22);
  v23.i16[0] = vaddlv_u8(v23);
  v24 = v23.u32[0];
  if (v23.u32[0] > 1uLL)
  {
    v25 = 0xE75FAB3171C16149;
    if (*(_QWORD *)&v22 <= 0xE75FAB3171C16149)
      v25 = 0xE75FAB3171C16149 % *(_QWORD *)&v22;
  }
  else
  {
    v25 = (*(_QWORD *)&v22 - 1) & 0xE75FAB3171C16149;
  }
  v29 = *(_QWORD **)(*v21 + 8 * v25);
  if (!v29 || (v30 = (_QWORD *)*v29) == 0)
  {
    __p = 0;
    v33 = 0;
    goto LABEL_51;
  }
  if (v23.u32[0] < 2uLL)
  {
    while (1)
    {
      v32 = v30[1];
      if (v32 == 0xE75FAB3171C16149)
      {
        if (v30[2] == 0xE75FAB3171C16149)
          goto LABEL_45;
      }
      else if ((v32 & (*(_QWORD *)&v22 - 1)) != v25)
      {
        goto LABEL_48;
      }
      v30 = (_QWORD *)*v30;
      if (!v30)
        goto LABEL_48;
    }
  }
  while (1)
  {
    v31 = v30[1];
    if (v31 == 0xE75FAB3171C16149)
      break;
    if (v31 >= *(_QWORD *)&v22)
      v31 %= *(_QWORD *)&v22;
    if (v31 != v25)
      goto LABEL_48;
LABEL_33:
    v30 = (_QWORD *)*v30;
    if (!v30)
      goto LABEL_48;
  }
  if (v30[2] != 0xE75FAB3171C16149)
    goto LABEL_33;
LABEL_45:
  v34 = v30[5];
  if (*(_QWORD *)(v34 + 8) == 0xE75FAB3171C16149)
  {
    v35 = *(_QWORD *)(v34 + 32);
    if (v35)
    {
      v36 = (char *)operator new(8uLL);
      *(_QWORD *)v36 = v35;
      v33 = v36 + 8;
      v22 = (int8x8_t)v21[1];
      __p = v36;
      goto LABEL_49;
    }
  }
LABEL_48:
  v33 = 0;
  __p = 0;
LABEL_49:
  if (!*(_QWORD *)&v22)
    goto LABEL_82;
  v37 = (uint8x8_t)vcnt_s8(v22);
  v37.i16[0] = vaddlv_u8(v37);
  v24 = v37.u32[0];
LABEL_51:
  if (v24 > 1)
  {
    v38 = 0xBB644C924C2E1F27;
    if (*(_QWORD *)&v22 <= 0xBB644C924C2E1F27)
      v38 = 0xBB644C924C2E1F27 % *(_QWORD *)&v22;
  }
  else
  {
    v38 = (*(_QWORD *)&v22 - 1) & 0xBB644C924C2E1F27;
  }
  v39 = *(_QWORD **)(*v21 + 8 * v38);
  if (!v39)
    goto LABEL_82;
  v40 = (_QWORD *)*v39;
  if (!v40)
    goto LABEL_82;
  if (v24 < 2)
  {
    v41 = *(_QWORD *)&v22 - 1;
    while (1)
    {
      v43 = v40[1];
      if (v43 == 0xBB644C924C2E1F27)
      {
        if (v40[2] == 0xBB644C924C2E1F27)
          goto LABEL_71;
      }
      else if ((v43 & v41) != v38)
      {
        goto LABEL_82;
      }
      v40 = (_QWORD *)*v40;
      if (!v40)
        goto LABEL_82;
    }
  }
  while (1)
  {
    v42 = v40[1];
    if (v42 == 0xBB644C924C2E1F27)
      break;
    if (v42 >= *(_QWORD *)&v22)
      v42 %= *(_QWORD *)&v22;
    if (v42 != v38)
      goto LABEL_82;
LABEL_60:
    v40 = (_QWORD *)*v40;
    if (!v40)
      goto LABEL_82;
  }
  if (v40[2] != 0xBB644C924C2E1F27)
    goto LABEL_60;
LABEL_71:
  v44 = v40[5];
  if (*(_QWORD *)(v44 + 8) != 0xBB644C924C2E1F27 || (v45 = *(_QWORD *)(v44 + 32)) == 0)
  {
LABEL_82:
    v26 = v33;
    v27 = v33;
    v28 = (int8x8_t)v21[1];
    if (!*(_QWORD *)&v28)
      goto LABEL_121;
    goto LABEL_83;
  }
  v46 = v33 - __p;
  v47 = (v33 - __p) >> 3;
  v48 = v47 + 1;
  if ((unint64_t)(v47 + 1) >> 61)
    abort();
  if (v46 >> 2 > v48)
    v48 = v46 >> 2;
  if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
    v49 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v49 = v48;
  if (v49)
  {
    if (v49 >> 61)
      goto LABEL_1612;
    v50 = (char *)operator new(8 * v49);
  }
  else
  {
    v50 = 0;
  }
  v63 = &v50[8 * v47];
  v26 = &v50[8 * v49];
  *(_QWORD *)v63 = v45;
  v27 = v63 + 8;
  if (v33 != __p)
  {
    v63 = &v50[v46 & 7];
    memcpy(v63, &v33[-(v46 & 0xFFFFFFFFFFFFFFF8)], v46 & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p)
  {
    operator delete(__p);
    v21 = (_QWORD *)*((_QWORD *)v5 + 1);
  }
  __p = v63;
  v28 = (int8x8_t)v21[1];
  if (!*(_QWORD *)&v28)
    goto LABEL_121;
LABEL_83:
  v51 = (uint8x8_t)vcnt_s8(v28);
  v51.i16[0] = vaddlv_u8(v51);
  if (v51.u32[0] > 1uLL)
  {
    v52 = 0x3619066E3FB5F2CLL;
    if (*(_QWORD *)&v28 <= 0x3619066E3FB5F2CuLL)
      v52 = 0x3619066E3FB5F2CuLL % *(_QWORD *)&v28;
  }
  else
  {
    v52 = (*(_QWORD *)&v28 - 1) & 0x3619066E3FB5F2CLL;
  }
  v53 = *(_QWORD **)(*v21 + 8 * v52);
  if (!v53)
    goto LABEL_121;
  v54 = (_QWORD *)*v53;
  if (!v54)
    goto LABEL_121;
  if (v51.u32[0] < 2uLL)
  {
    v55 = *(_QWORD *)&v28 - 1;
    while (1)
    {
      v57 = v54[1];
      if (v57 == 0x3619066E3FB5F2CLL)
      {
        if (v54[2] == 0x3619066E3FB5F2CLL)
          goto LABEL_103;
      }
      else if ((v57 & v55) != v52)
      {
        goto LABEL_121;
      }
      v54 = (_QWORD *)*v54;
      if (!v54)
        goto LABEL_121;
    }
  }
  while (1)
  {
    v56 = v54[1];
    if (v56 == 0x3619066E3FB5F2CLL)
      break;
    if (v56 >= *(_QWORD *)&v28)
      v56 %= *(_QWORD *)&v28;
    if (v56 != v52)
      goto LABEL_121;
LABEL_92:
    v54 = (_QWORD *)*v54;
    if (!v54)
      goto LABEL_121;
  }
  if (v54[2] != 0x3619066E3FB5F2CLL)
    goto LABEL_92;
LABEL_103:
  v58 = v54[5];
  if (*(_QWORD *)(v58 + 8) != 0x3619066E3FB5F2CLL || (v59 = *(_QWORD *)(v58 + 32)) == 0)
  {
LABEL_121:
    v64 = v27;
    goto LABEL_122;
  }
  if (v27 < v26)
  {
    *(_QWORD *)v27 = v59;
    v27 += 8;
    goto LABEL_121;
  }
  v60 = (v27 - __p) >> 3;
  v61 = v60 + 1;
  if ((unint64_t)(v60 + 1) >> 61)
    abort();
  if ((v26 - __p) >> 2 > v61)
    v61 = (v26 - __p) >> 2;
  if ((unint64_t)(v26 - __p) >= 0x7FFFFFFFFFFFFFF8)
    v61 = 0x1FFFFFFFFFFFFFFFLL;
  if (v61)
  {
    if (!(v61 >> 61))
    {
      v62 = operator new(8 * v61);
      goto LABEL_464;
    }
LABEL_1612:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v62 = 0;
LABEL_464:
  v344 = &v62[8 * v60];
  *(_QWORD *)v344 = v59;
  v64 = v344 + 8;
  if (v27 == __p)
  {
LABEL_470:
    __p = v344;
    if (!v27)
      goto LABEL_122;
    goto LABEL_471;
  }
  v345 = v27 - __p - 8;
  if (v345 < 0x58 || (unint64_t)(__p - v62) < 0x20)
  {
    v346 = v27;
    goto LABEL_468;
  }
  v348 = (v345 >> 3) + 1;
  v346 = &v27[-8 * (v348 & 0x3FFFFFFFFFFFFFFCLL)];
  v349 = &v62[8 * v60 - 16];
  v350 = v27 - 16;
  v351 = v348 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v352 = *(_OWORD *)v350;
    *(v349 - 1) = *((_OWORD *)v350 - 1);
    *v349 = v352;
    v349 -= 2;
    v350 -= 32;
    v351 -= 4;
  }
  while (v351);
  v344 -= 8 * (v348 & 0x3FFFFFFFFFFFFFFCLL);
  if (v348 != (v348 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_468:
    v27 = __p;
    do
    {
      v347 = *((_QWORD *)v346 - 1);
      v346 -= 8;
      *((_QWORD *)v344 - 1) = v347;
      v344 -= 8;
    }
    while (v346 != __p);
    goto LABEL_470;
  }
  v27 = __p;
  __p = v344;
  if (v27)
LABEL_471:
    operator delete(v27);
LABEL_122:
  v1287 = v64;
  if (__p == v64)
  {
    v68 = 0;
  }
  else
  {
    v65 = __p + 8;
    while (1)
    {
      v66 = (_QWORD *)*((_QWORD *)v65 - 1);
      if (v66[8] || v66[10] != v66[11])
        break;
      v67 = v66[3];
      v68 = v67 != 0;
      if (v67)
        _ZF = 1;
      else
        _ZF = v65 == v64;
      v65 += 8;
      if (_ZF)
        goto LABEL_134;
    }
    v68 = 1;
  }
LABEL_134:
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(*((_QWORD *)this + 6) + 112));
  v70 = *(uint64_t **)(*((_QWORD *)this + 6) + 120);
  v71 = (uint64_t *)v70[4];
  v72 = (uint64_t *)v70[5];
  if (v71 == v72)
    goto LABEL_166;
  v73 = (_QWORD *)v70[1];
  while (2)
  {
    v74 = *v71;
    v75 = v70[2];
    if ((unint64_t)v73 < v75)
    {
      if (v73)
        *v73 = v74;
      ++v73;
      goto LABEL_137;
    }
    v76 = ((uint64_t)v73 - *v70) >> 3;
    if ((unint64_t)(v76 + 1) >> 61)
LABEL_609:
      abort();
    v77 = v75 - *v70;
    v78 = v77 >> 2;
    if (v77 >> 2 <= (unint64_t)(v76 + 1))
      v78 = v76 + 1;
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
      v79 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v79 = v78;
    if (v79)
    {
      v80 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v70[3] + 16))(v70[3], 8 * v79, 8);
      v81 = (_QWORD *)(v80 + 8 * v76);
      v82 = v80 + 8 * v79;
      if (v80)
        *v81 = v74;
    }
    else
    {
      v82 = 0;
      v81 = (_QWORD *)(8 * v76);
    }
    v84 = *v70;
    v83 = v70[1];
    v85 = v83 - *v70;
    if (v83 == *v70)
    {
      v87 = v81;
      goto LABEL_162;
    }
    v86 = v85 - 8;
    if ((unint64_t)(v85 - 8) < 0x38)
    {
      v87 = v81;
      do
      {
LABEL_160:
        v93 = *(_QWORD *)(v83 - 8);
        v83 -= 8;
        *--v87 = v93;
      }
      while (v83 != v84);
      goto LABEL_161;
    }
    v87 = v81;
    if ((unint64_t)(v83 - (_QWORD)v81) < 0x20)
      goto LABEL_160;
    v88 = (v86 >> 3) + 1;
    v89 = v81 - 2;
    v90 = (__int128 *)(v83 - 16);
    v91 = v88 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v92 = *v90;
      *(v89 - 1) = *(v90 - 1);
      *v89 = v92;
      v89 -= 2;
      v90 -= 2;
      v91 -= 4;
    }
    while (v91);
    v87 = &v81[-(v88 & 0x3FFFFFFFFFFFFFFCLL)];
    v83 -= 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
    if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_160;
LABEL_161:
    v83 = *v70;
LABEL_162:
    v73 = v81 + 1;
    *v70 = (uint64_t)v87;
    v70[1] = (uint64_t)(v81 + 1);
    v94 = v70[2];
    v70[2] = v82;
    if (v83)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v70[3] + 40))(v70[3], v83, v94 - v83);
LABEL_137:
    v70[1] = (uint64_t)v73;
    if (++v71 != v72)
      continue;
    break;
  }
  v95 = v70[4];
  if (v95 != v70[5])
    v70[5] = v95;
LABEL_166:
  v96 = *(uint64_t **)(*((_QWORD *)this + 6) + 136);
  v97 = (uint64_t *)v96[4];
  v98 = (uint64_t *)v96[5];
  if (v97 == v98)
    goto LABEL_198;
  v99 = (_QWORD *)v96[1];
  while (2)
  {
    v100 = *v97;
    v101 = v96[2];
    if ((unint64_t)v99 < v101)
    {
      if (v99)
        *v99 = v100;
      ++v99;
      goto LABEL_169;
    }
    v102 = ((uint64_t)v99 - *v96) >> 3;
    if ((unint64_t)(v102 + 1) >> 61)
      goto LABEL_609;
    v103 = v101 - *v96;
    v104 = v103 >> 2;
    if (v103 >> 2 <= (unint64_t)(v102 + 1))
      v104 = v102 + 1;
    if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8)
      v105 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v105 = v104;
    if (v105)
    {
      v106 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v96[3] + 16))(v96[3], 8 * v105, 8);
      v107 = (_QWORD *)(v106 + 8 * v102);
      v108 = v106 + 8 * v105;
      if (v106)
        *v107 = v100;
    }
    else
    {
      v108 = 0;
      v107 = (_QWORD *)(8 * v102);
    }
    v110 = *v96;
    v109 = v96[1];
    v111 = v109 - *v96;
    if (v109 == *v96)
    {
      v113 = v107;
      goto LABEL_194;
    }
    v112 = v111 - 8;
    if ((unint64_t)(v111 - 8) < 0x38)
    {
      v113 = v107;
      do
      {
LABEL_192:
        v119 = *(_QWORD *)(v109 - 8);
        v109 -= 8;
        *--v113 = v119;
      }
      while (v109 != v110);
      goto LABEL_193;
    }
    v113 = v107;
    if ((unint64_t)(v109 - (_QWORD)v107) < 0x20)
      goto LABEL_192;
    v114 = (v112 >> 3) + 1;
    v115 = v107 - 2;
    v116 = (__int128 *)(v109 - 16);
    v117 = v114 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v118 = *v116;
      *(v115 - 1) = *(v116 - 1);
      *v115 = v118;
      v115 -= 2;
      v116 -= 2;
      v117 -= 4;
    }
    while (v117);
    v113 = &v107[-(v114 & 0x3FFFFFFFFFFFFFFCLL)];
    v109 -= 8 * (v114 & 0x3FFFFFFFFFFFFFFCLL);
    if (v114 != (v114 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_192;
LABEL_193:
    v109 = *v96;
LABEL_194:
    v99 = v107 + 1;
    *v96 = (uint64_t)v113;
    v96[1] = (uint64_t)(v107 + 1);
    v120 = v96[2];
    v96[2] = v108;
    if (v109)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v96[3] + 40))(v96[3], v109, v120 - v109);
LABEL_169:
    v96[1] = (uint64_t)v99;
    if (++v97 != v98)
      continue;
    break;
  }
  v121 = v96[4];
  if (v121 != v96[5])
    v96[5] = v121;
LABEL_198:
  v122 = *(uint64_t **)(*((_QWORD *)this + 6) + 144);
  v123 = (uint64_t *)v122[4];
  v124 = (uint64_t *)v122[5];
  if (v123 == v124)
    goto LABEL_230;
  v125 = (_QWORD *)v122[1];
  while (2)
  {
    v126 = *v123;
    v127 = v122[2];
    if ((unint64_t)v125 < v127)
    {
      if (v125)
        *v125 = v126;
      ++v125;
      goto LABEL_201;
    }
    v128 = ((uint64_t)v125 - *v122) >> 3;
    if ((unint64_t)(v128 + 1) >> 61)
      goto LABEL_609;
    v129 = v127 - *v122;
    v130 = v129 >> 2;
    if (v129 >> 2 <= (unint64_t)(v128 + 1))
      v130 = v128 + 1;
    if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8)
      v131 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v131 = v130;
    if (v131)
    {
      v132 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v122[3] + 16))(v122[3], 8 * v131, 8);
      v133 = (_QWORD *)(v132 + 8 * v128);
      v134 = v132 + 8 * v131;
      if (v132)
        *v133 = v126;
    }
    else
    {
      v134 = 0;
      v133 = (_QWORD *)(8 * v128);
    }
    v136 = *v122;
    v135 = v122[1];
    v137 = v135 - *v122;
    if (v135 == *v122)
    {
      v139 = v133;
      goto LABEL_226;
    }
    v138 = v137 - 8;
    if ((unint64_t)(v137 - 8) < 0x38)
    {
      v139 = v133;
      do
      {
LABEL_224:
        v145 = *(_QWORD *)(v135 - 8);
        v135 -= 8;
        *--v139 = v145;
      }
      while (v135 != v136);
      goto LABEL_225;
    }
    v139 = v133;
    if ((unint64_t)(v135 - (_QWORD)v133) < 0x20)
      goto LABEL_224;
    v140 = (v138 >> 3) + 1;
    v141 = v133 - 2;
    v142 = (__int128 *)(v135 - 16);
    v143 = v140 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v144 = *v142;
      *(v141 - 1) = *(v142 - 1);
      *v141 = v144;
      v141 -= 2;
      v142 -= 2;
      v143 -= 4;
    }
    while (v143);
    v139 = &v133[-(v140 & 0x3FFFFFFFFFFFFFFCLL)];
    v135 -= 8 * (v140 & 0x3FFFFFFFFFFFFFFCLL);
    if (v140 != (v140 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_224;
LABEL_225:
    v135 = *v122;
LABEL_226:
    v125 = v133 + 1;
    *v122 = (uint64_t)v139;
    v122[1] = (uint64_t)(v133 + 1);
    v146 = v122[2];
    v122[2] = v134;
    if (v135)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v122[3] + 40))(v122[3], v135, v146 - v135);
LABEL_201:
    v122[1] = (uint64_t)v125;
    if (++v123 != v124)
      continue;
    break;
  }
  v147 = v122[4];
  if (v147 != v122[5])
    v122[5] = v147;
LABEL_230:
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(*((_QWORD *)this + 6) + 160));
  v148 = *(uint64_t **)(*((_QWORD *)this + 6) + 128);
  v149 = (uint64_t *)v148[4];
  v150 = (uint64_t *)v148[5];
  if (v149 == v150)
    goto LABEL_262;
  v151 = (_QWORD *)v148[1];
  while (2)
  {
    v152 = *v149;
    v153 = v148[2];
    if ((unint64_t)v151 < v153)
    {
      if (v151)
        *v151 = v152;
      ++v151;
      goto LABEL_233;
    }
    v154 = ((uint64_t)v151 - *v148) >> 3;
    if ((unint64_t)(v154 + 1) >> 61)
      goto LABEL_609;
    v155 = v153 - *v148;
    v156 = v155 >> 2;
    if (v155 >> 2 <= (unint64_t)(v154 + 1))
      v156 = v154 + 1;
    if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF8)
      v157 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v157 = v156;
    if (v157)
    {
      v158 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v148[3] + 16))(v148[3], 8 * v157, 8);
      v159 = (_QWORD *)(v158 + 8 * v154);
      v160 = v158 + 8 * v157;
      if (v158)
        *v159 = v152;
    }
    else
    {
      v160 = 0;
      v159 = (_QWORD *)(8 * v154);
    }
    v162 = *v148;
    v161 = v148[1];
    v163 = v161 - *v148;
    if (v161 == *v148)
    {
      v165 = v159;
      goto LABEL_258;
    }
    v164 = v163 - 8;
    if ((unint64_t)(v163 - 8) < 0x38)
    {
      v165 = v159;
      do
      {
LABEL_256:
        v171 = *(_QWORD *)(v161 - 8);
        v161 -= 8;
        *--v165 = v171;
      }
      while (v161 != v162);
      goto LABEL_257;
    }
    v165 = v159;
    if ((unint64_t)(v161 - (_QWORD)v159) < 0x20)
      goto LABEL_256;
    v166 = (v164 >> 3) + 1;
    v167 = v159 - 2;
    v168 = (__int128 *)(v161 - 16);
    v169 = v166 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v170 = *v168;
      *(v167 - 1) = *(v168 - 1);
      *v167 = v170;
      v167 -= 2;
      v168 -= 2;
      v169 -= 4;
    }
    while (v169);
    v165 = &v159[-(v166 & 0x3FFFFFFFFFFFFFFCLL)];
    v161 -= 8 * (v166 & 0x3FFFFFFFFFFFFFFCLL);
    if (v166 != (v166 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_256;
LABEL_257:
    v161 = *v148;
LABEL_258:
    v151 = v159 + 1;
    *v148 = (uint64_t)v165;
    v148[1] = (uint64_t)(v159 + 1);
    v172 = v148[2];
    v148[2] = v160;
    if (v161)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v148[3] + 40))(v148[3], v161, v172 - v161);
LABEL_233:
    v148[1] = (uint64_t)v151;
    if (++v149 != v150)
      continue;
    break;
  }
  v173 = v148[4];
  if (v173 != v148[5])
    v148[5] = v173;
LABEL_262:
  ggl::FragmentedPool<ggl::RenderItem>::pushAll(*(uint64_t **)(*((_QWORD *)this + 6) + 96));
  v174 = *(uint64_t **)(*((_QWORD *)this + 6) + 104);
  v175 = (uint64_t *)v174[4];
  v176 = (uint64_t *)v174[5];
  if (v175 == v176)
    goto LABEL_294;
  v177 = (_QWORD *)v174[1];
  while (2)
  {
    v178 = *v175;
    v179 = v174[2];
    if ((unint64_t)v177 < v179)
    {
      if (v177)
        *v177 = v178;
      ++v177;
      goto LABEL_265;
    }
    v180 = ((uint64_t)v177 - *v174) >> 3;
    if ((unint64_t)(v180 + 1) >> 61)
      goto LABEL_609;
    v181 = v179 - *v174;
    v182 = v181 >> 2;
    if (v181 >> 2 <= (unint64_t)(v180 + 1))
      v182 = v180 + 1;
    if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFF8)
      v183 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v183 = v182;
    if (v183)
    {
      v184 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v174[3] + 16))(v174[3], 8 * v183, 8);
      v185 = (_QWORD *)(v184 + 8 * v180);
      v186 = v184 + 8 * v183;
      if (v184)
        *v185 = v178;
    }
    else
    {
      v186 = 0;
      v185 = (_QWORD *)(8 * v180);
    }
    v188 = *v174;
    v187 = v174[1];
    v189 = v187 - *v174;
    if (v187 == *v174)
    {
      v191 = v185;
      goto LABEL_290;
    }
    v190 = v189 - 8;
    if ((unint64_t)(v189 - 8) < 0x38)
    {
      v191 = v185;
      do
      {
LABEL_288:
        v197 = *(_QWORD *)(v187 - 8);
        v187 -= 8;
        *--v191 = v197;
      }
      while (v187 != v188);
      goto LABEL_289;
    }
    v191 = v185;
    if ((unint64_t)(v187 - (_QWORD)v185) < 0x20)
      goto LABEL_288;
    v192 = (v190 >> 3) + 1;
    v193 = v185 - 2;
    v194 = (__int128 *)(v187 - 16);
    v195 = v192 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v196 = *v194;
      *(v193 - 1) = *(v194 - 1);
      *v193 = v196;
      v193 -= 2;
      v194 -= 2;
      v195 -= 4;
    }
    while (v195);
    v191 = &v185[-(v192 & 0x3FFFFFFFFFFFFFFCLL)];
    v187 -= 8 * (v192 & 0x3FFFFFFFFFFFFFFCLL);
    if (v192 != (v192 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_288;
LABEL_289:
    v187 = *v174;
LABEL_290:
    v177 = v185 + 1;
    *v174 = (uint64_t)v191;
    v174[1] = (uint64_t)(v185 + 1);
    v198 = v174[2];
    v174[2] = v186;
    if (v187)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v174[3] + 40))(v174[3], v187, v198 - v187);
LABEL_265:
    v174[1] = (uint64_t)v177;
    if (++v175 != v176)
      continue;
    break;
  }
  v199 = v174[4];
  if (v199 != v174[5])
    v174[5] = v199;
LABEL_294:
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v1284 = (void *)objc_claimAutoreleasedReturnValue();
  if (((v68 | objc_msgSend(v1284, "shouldDrawDebug")) & 1) == 0)
  {
    std::__hash_table<std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::__unordered_map_hasher<std::shared_ptr<geo::codec::VectorTile>,std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::hash<std::shared_ptr<geo::codec::VectorTile>>,std::equal_to<std::shared_ptr<geo::codec::VectorTile>>,true>,std::__unordered_map_equal<std::shared_ptr<geo::codec::VectorTile>,std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::equal_to<std::shared_ptr<geo::codec::VectorTile>>,std::hash<std::shared_ptr<geo::codec::VectorTile>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>>>::clear((_QWORD *)this + 7);
    goto LABEL_1581;
  }
  v200 = (uint64_t *)*((_QWORD *)v5 + 1);
  v201 = (int8x8_t)v200[1];
  v1353 = v5;
  if (!*(_QWORD *)&v201)
  {
    v1347 = 0;
    goto LABEL_343;
  }
  v202 = (uint8x8_t)vcnt_s8(v201);
  v202.i16[0] = vaddlv_u8(v202);
  if (v202.u32[0] > 1uLL)
  {
    v203 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v201 <= 0x1AF456233693CD46uLL)
      v203 = 0x1AF456233693CD46uLL % *(_QWORD *)&v201;
  }
  else
  {
    v203 = (*(_QWORD *)&v201 - 1) & 0x1AF456233693CD46;
  }
  v204 = *v200;
  v205 = *(_QWORD **)(v204 + 8 * v203);
  if (!v205)
    goto LABEL_320;
  v206 = (_QWORD *)*v205;
  if (!v206)
    goto LABEL_320;
  if (v202.u32[0] < 2uLL)
  {
    while (1)
    {
      v208 = v206[1];
      if (v208 == 0x1AF456233693CD46)
      {
        if (v206[2] == 0x1AF456233693CD46)
          goto LABEL_318;
      }
      else if ((v208 & (*(_QWORD *)&v201 - 1)) != v203)
      {
        goto LABEL_320;
      }
      v206 = (_QWORD *)*v206;
      if (!v206)
        goto LABEL_320;
    }
  }
  while (2)
  {
    v207 = v206[1];
    if (v207 != 0x1AF456233693CD46)
    {
      if (v207 >= *(_QWORD *)&v201)
        v207 %= *(_QWORD *)&v201;
      if (v207 != v203)
        goto LABEL_320;
      goto LABEL_307;
    }
    if (v206[2] != 0x1AF456233693CD46)
    {
LABEL_307:
      v206 = (_QWORD *)*v206;
      if (!v206)
        goto LABEL_320;
      continue;
    }
    break;
  }
LABEL_318:
  v209 = v206[5];
  if (*(_QWORD *)(v209 + 8) == 0x1AF456233693CD46)
  {
    v210 = *(_QWORD *)(v209 + 32);
    goto LABEL_321;
  }
LABEL_320:
  v210 = 0;
LABEL_321:
  if (v202.u32[0] > 1uLL)
  {
    v211 = 0x3070CB6B3C7F21D3;
    if (*(_QWORD *)&v201 <= 0x3070CB6B3C7F21D3uLL)
      v211 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v201;
  }
  else
  {
    v211 = (*(_QWORD *)&v201 - 1) & 0x3070CB6B3C7F21D3;
  }
  v212 = *(_QWORD **)(v204 + 8 * v211);
  v1347 = v210;
  if (!v212)
    goto LABEL_343;
  v213 = (_QWORD *)*v212;
  if (!v213)
    goto LABEL_343;
  if (v202.u32[0] < 2uLL)
  {
    v214 = *(_QWORD *)&v201 - 1;
    while (1)
    {
      v216 = v213[1];
      if (v216 == 0x3070CB6B3C7F21D3)
      {
        if (v213[2] == 0x3070CB6B3C7F21D3)
          goto LABEL_341;
      }
      else if ((v216 & v214) != v211)
      {
        goto LABEL_343;
      }
      v213 = (_QWORD *)*v213;
      if (!v213)
        goto LABEL_343;
    }
  }
  while (2)
  {
    v215 = v213[1];
    if (v215 != 0x3070CB6B3C7F21D3)
    {
      if (v215 >= *(_QWORD *)&v201)
        v215 %= *(_QWORD *)&v201;
      if (v215 != v211)
        goto LABEL_343;
      goto LABEL_330;
    }
    if (v213[2] != 0x3070CB6B3C7F21D3)
    {
LABEL_330:
      v213 = (_QWORD *)*v213;
      if (!v213)
        goto LABEL_343;
      continue;
    }
    break;
  }
LABEL_341:
  v217 = v213[5];
  if (*(_QWORD *)(v217 + 8) == 0x3070CB6B3C7F21D3)
  {
    v1320 = *(uint64_t **)(v217 + 32);
    goto LABEL_344;
  }
LABEL_343:
  v1320 = 0;
LABEL_344:
  v1383 = 0;
  v1382 = 0;
  v1384 = 0;
  v1380 = 0;
  v1379 = 0;
  v1381 = 0;
  v1377 = 0;
  v1376 = 0;
  v1378 = 0;
  if (__p != v1287)
  {
    v1349 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v218 = __p;
    while (1)
    {
      v1292 = v218;
      v1299 = *(double **)v218;
      for (i = *(uint64_t ***)(*(_QWORD *)v218 + 16); i; i = (uint64_t **)*i)
      {
        md::GeometryContext::transformConstantData((double *)v1390, v1320, (unsigned __int8 *)i[2], *(unsigned __int8 *)(v1347 + 3776), *((double *)i[2] + 54), *((double *)i[2] + 55));
        v223 = i[3];
        v224 = i[4];
        while (v223 != v224)
        {
          v234 = v223 + 2;
          if (*((_BYTE *)v223 + 8))
          {
            v235 = i[2];
            v236 = v235 + 38;
            v237 = v235 + 22;
            if (*(unsigned __int8 *)(v1347 + 3776) - 1 >= 3)
              v238 = v236;
            else
              v238 = v237;
            v239 = *((_OWORD *)v238 + 5);
            __b[4] = *((float64x2_t *)v238 + 4);
            *(_OWORD *)v1394 = v239;
            v240 = *((_OWORD *)v238 + 7);
            *(_OWORD *)&v1394[16] = *((_OWORD *)v238 + 6);
            *(_OWORD *)&v1394[32] = v240;
            v241 = *((float64x2_t *)v238 + 1);
            __b[0] = *(float64x2_t *)v238;
            __b[1] = v241;
            v243 = *((float64x2_t *)v238 + 3);
            __b[2] = *((float64x2_t *)v238 + 2);
            v242.i32[1] = HIDWORD(__b[2].f64[0]);
            __b[3] = v243;
            v242.i32[0] = *(_DWORD *)v223;
            *(float32x4_t *)&__dst.__r_.__value_.__l.__data_ = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v242))), v1349);
            md::DebugRenderLayer::renderTriangulatedLines((uint64_t)this, v5, __b[0].f64, &__dst, v234, (uint64_t)v1385, (uint64_t *)v1390, *((float *)v223 + 1));
          }
          else
          {
            v225 = i[2];
            v226 = v225 + 38;
            v227 = v225 + 22;
            if (*(unsigned __int8 *)(v1347 + 3776) - 1 >= 3)
              v228 = v226;
            else
              v228 = v227;
            v229 = *((_OWORD *)v228 + 5);
            __b[4] = *((float64x2_t *)v228 + 4);
            *(_OWORD *)v1394 = v229;
            v230 = *((_OWORD *)v228 + 7);
            *(_OWORD *)&v1394[16] = *((_OWORD *)v228 + 6);
            *(_OWORD *)&v1394[32] = v230;
            v231 = *((float64x2_t *)v228 + 1);
            __b[0] = *(float64x2_t *)v228;
            __b[1] = v231;
            v233 = *((float64x2_t *)v228 + 3);
            __b[2] = *((float64x2_t *)v228 + 2);
            v232.i32[1] = HIDWORD(__b[2].f64[0]);
            __b[3] = v233;
            v232.i32[0] = *(_DWORD *)v223;
            *(float32x4_t *)&__dst.__r_.__value_.__l.__data_ = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v232))), v1349);
            md::DebugRenderLayer::renderLines((uint64_t)this, *((_QWORD **)v5 + 1), __b[0].f64, &__dst, v234, (uint64_t)v1385, v1390);
          }
          v223 += 5;
        }
        v244 = *(std::__shared_weak_count **)&v1390[8];
        if (*(_QWORD *)&v1390[8])
        {
          v245 = (unint64_t *)(*(_QWORD *)&v1390[8] + 8);
          do
            v246 = __ldaxr(v245);
          while (__stlxr(v246 - 1, v245));
          if (!v246)
          {
            ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
            std::__shared_weak_count::__release_weak(v244);
          }
        }
      }
      v220 = (_QWORD *)*((_QWORD *)v1299 + 7);
      if (v220)
        break;
LABEL_349:
      md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)v1390);
      v221 = (unsigned int *)*((_QWORD *)v1299 + 13);
      v222 = (unsigned int *)*((_QWORD *)v1299 + 14);
      while (v221 != v222)
      {
        v247 = (uint64_t *)*((_QWORD *)v221 + 2);
        v248 = (uint64_t *)*((_QWORD *)v221 + 3);
        while (v247 != v248)
        {
          if (*((_BYTE *)v221 + 8))
          {
            memset(&v1394[8], 0, 32);
            memset(&__b[0].f64[1], 0, 72);
            __b[0].f64[0] = 1.0;
            __b[2].f64[1] = 1.0;
            *(_QWORD *)v1394 = 0x3FF0000000000000;
            *(_QWORD *)&v1394[40] = 0x3FF0000000000000;
            *(float32x4_t *)&__dst.__r_.__value_.__l.__data_ = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)*v221))), v1349);
            md::DebugRenderLayer::renderTriangulatedLines((uint64_t)this, v5, __b[0].f64, &__dst, v247, (uint64_t)v1385, (uint64_t *)v1390, *((float *)v221 + 1));
          }
          else
          {
            memset(&v1394[8], 0, 32);
            memset(&__b[0].f64[1], 0, 72);
            __b[0].f64[0] = 1.0;
            __b[2].f64[1] = 1.0;
            *(_QWORD *)v1394 = 0x3FF0000000000000;
            *(_QWORD *)&v1394[40] = 0x3FF0000000000000;
            *(float32x4_t *)&__dst.__r_.__value_.__l.__data_ = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)*v221))), v1349);
            md::DebugRenderLayer::renderLines((uint64_t)this, *((_QWORD **)v5 + 1), __b[0].f64, &__dst, v247, (uint64_t)v1385, v1390);
          }
          v247 += 3;
        }
        v221 += 10;
      }
      v285 = v1299[10];
      v286 = *((_QWORD *)v1299 + 11);
      if (*(_QWORD *)&v285 != v286)
      {
        while (1)
        {
          v1383 = v1382;
          v1377 = v1376;
          v287 = *(_QWORD *)(*(_QWORD *)&v285 + 16);
          v288 = *(_QWORD *)(*(_QWORD *)&v285 + 24);
          if (v287 != v288)
            break;
LABEL_398:
          *(_QWORD *)&v285 += 40;
          if (*(_QWORD *)&v285 == v286)
            goto LABEL_399;
        }
        while (1)
        {
          *(_QWORD *)&__b[0].f64[0] = this;
          *(_QWORD *)&__b[0].f64[1] = v5;
          __b[1].f64[0] = v285;
          __b[1].f64[1] = v285;
          *(_QWORD *)&__b[2].f64[0] = &v1385;
          *(_QWORD *)&__b[2].f64[1] = v1390;
          *(_QWORD *)&__b[3].f64[0] = this;
          *(_QWORD *)&__b[3].f64[1] = v5;
          __b[4].f64[0] = v285;
          __b[4].f64[1] = v285;
          *(_QWORD *)v1394 = &v1385;
          *(_QWORD *)&v1394[8] = v1390;
          *(_QWORD *)&v1394[16] = this;
          *(_QWORD *)&v1394[24] = v5;
          *(float64_t *)&v1394[32] = v285;
          *(float64_t *)&v1394[40] = v285;
          v1395[0] = &v1385;
          v1395[1] = v1390;
          v289 = *(unsigned int *)(v287 + 104);
          if ((_DWORD)v289 == -1)
            goto LABEL_414;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)__b;
          ((void (*)(std::string *, uint64_t))off_1E42EF1C0[v289])(&__dst, v287);
          v287 += 112;
          if (v287 == v288)
            goto LABEL_398;
        }
      }
LABEL_399:
      v290 = *(std::__shared_weak_count **)&v1390[8];
      if (*(_QWORD *)&v1390[8])
      {
        v291 = (unint64_t *)(*(_QWORD *)&v1390[8] + 8);
        do
          v292 = __ldaxr(v291);
        while (__stlxr(v292 - 1, v291));
        if (!v292)
        {
          ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
          std::__shared_weak_count::__release_weak(v290);
        }
      }
      v218 = v1292 + 8;
      if (v1292 + 8 == v1287)
        goto LABEL_404;
    }
    while (1)
    {
      v249 = v220[2];
      md::GeometryContext::transformConstantData((double *)v1390, v1320, (unsigned __int8 *)v249, *(unsigned __int8 *)(v1347 + 3776), *(double *)(v249 + 432), *(double *)(v249 + 440));
      v250 = v220[3];
      v1316 = v220;
      v1321 = v220[4];
      if (v250 != v1321)
        break;
LABEL_389:
      v282 = *(std::__shared_weak_count **)&v1390[8];
      if (*(_QWORD *)&v1390[8])
      {
        v283 = (unint64_t *)(*(_QWORD *)&v1390[8] + 8);
        do
          v284 = __ldaxr(v283);
        while (__stlxr(v284 - 1, v283));
        if (!v284)
        {
          ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
          std::__shared_weak_count::__release_weak(v282);
        }
      }
      v220 = (_QWORD *)*v1316;
      if (!*v1316)
        goto LABEL_349;
    }
    v1330 = v249 + 304;
    v251 = v249 + 176;
    while (1)
    {
      v1383 = v1382;
      v1377 = v1376;
      v1380 = v1379;
      v252 = *(_QWORD *)(v250 + 16);
      v253 = *(_QWORD *)(v250 + 24);
      if (v252 != v253)
        break;
LABEL_382:
      v255 = v1330;
      if (*(unsigned __int8 *)(v1347 + 3776) - 1 < 3)
        v255 = v251;
      v256 = *(_OWORD *)(v255 + 80);
      __b[4] = *(float64x2_t *)(v255 + 64);
      *(_OWORD *)v1394 = v256;
      v257 = *(_OWORD *)(v255 + 112);
      *(_OWORD *)&v1394[16] = *(_OWORD *)(v255 + 96);
      *(_OWORD *)&v1394[32] = v257;
      v258 = *(float64x2_t *)(v255 + 16);
      __b[0] = *(float64x2_t *)v255;
      __b[1] = v258;
      v260 = *(float64x2_t *)(v255 + 48);
      __b[2] = *(float64x2_t *)(v255 + 32);
      v259.i32[1] = HIDWORD(__b[2].f64[0]);
      __b[3] = v260;
      v259.i32[0] = *(_DWORD *)v250;
      *(float32x4_t *)&__dst.__r_.__value_.__l.__data_ = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v259))), v1349);
      v261 = *(unsigned __int8 *)(v250 + 12);
      v262 = v1385;
      v263 = (_QWORD *)md::DebugLayerRenderResources::unitBoxMesh(*((md::DebugLayerRenderResources **)this + 6));
      md::DebugRenderLayer::renderInstancedMesh((uint64_t)this, *((_QWORD **)v5 + 1), __b[0].f64, &__dst, v261 != 0, (uint64_t)v262, (uint64_t)&v1382, v263, (uint64_t *)v1390);
      v264 = v1330;
      if (*(unsigned __int8 *)(v1347 + 3776) - 1 < 3)
        v264 = v251;
      v265 = *(_OWORD *)(v264 + 80);
      __b[4] = *(float64x2_t *)(v264 + 64);
      *(_OWORD *)v1394 = v265;
      v266 = *(_OWORD *)(v264 + 112);
      *(_OWORD *)&v1394[16] = *(_OWORD *)(v264 + 96);
      *(_OWORD *)&v1394[32] = v266;
      v267 = *(float64x2_t *)(v264 + 16);
      __b[0] = *(float64x2_t *)v264;
      __b[1] = v267;
      v269 = *(float64x2_t *)(v264 + 48);
      __b[2] = *(float64x2_t *)(v264 + 32);
      v268.i32[1] = HIDWORD(__b[2].f64[0]);
      __b[3] = v269;
      v268.i32[0] = *(_DWORD *)v250;
      *(float32x4_t *)&__dst.__r_.__value_.__l.__data_ = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v268))), v1349);
      v270 = *(unsigned __int8 *)(v250 + 12);
      v271 = v1385;
      v272 = md::DebugLayerRenderResources::unitQuadMesh(*((md::DebugLayerRenderResources **)this + 6));
      md::DebugRenderLayer::renderInstancedMesh((uint64_t)this, *((_QWORD **)v5 + 1), __b[0].f64, &__dst, v270 != 0, (uint64_t)v271, (uint64_t)&v1379, v272, (uint64_t *)v1390);
      v273 = v1330;
      if (*(unsigned __int8 *)(v1347 + 3776) - 1 < 3)
        v273 = v251;
      v274 = *(_OWORD *)(v273 + 80);
      __b[4] = *(float64x2_t *)(v273 + 64);
      *(_OWORD *)v1394 = v274;
      v275 = *(_OWORD *)(v273 + 112);
      *(_OWORD *)&v1394[16] = *(_OWORD *)(v273 + 96);
      *(_OWORD *)&v1394[32] = v275;
      v276 = *(float64x2_t *)(v273 + 16);
      __b[0] = *(float64x2_t *)v273;
      __b[1] = v276;
      v278 = *(float64x2_t *)(v273 + 48);
      __b[2] = *(float64x2_t *)(v273 + 32);
      v277.i32[1] = HIDWORD(__b[2].f64[0]);
      __b[3] = v278;
      v277.i32[0] = *(_DWORD *)v250;
      *(float32x4_t *)&__dst.__r_.__value_.__l.__data_ = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v277))), v1349);
      v279 = *(unsigned __int8 *)(v250 + 12);
      v280 = v1385;
      v281 = (_QWORD *)md::DebugLayerRenderResources::icoSphere(*((md::DebugLayerRenderResources **)this + 6));
      md::DebugRenderLayer::renderInstancedMesh((uint64_t)this, *((_QWORD **)v5 + 1), __b[0].f64, &__dst, v279 != 0, (uint64_t)v280, (uint64_t)&v1376, v281, (uint64_t *)v1390);
      v250 += 40;
      if (v250 == v1321)
        goto LABEL_389;
    }
    while (1)
    {
      *(_QWORD *)&__b[0].f64[0] = &v1379;
      *(_QWORD *)&__b[0].f64[1] = &v1382;
      *(_QWORD *)&__b[1].f64[0] = &v1382;
      *(_QWORD *)&__b[1].f64[1] = &v1376;
      v254 = *(unsigned int *)(v252 + 52);
      if ((_DWORD)v254 == -1)
        break;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)__b;
      ((void (*)(std::string *, uint64_t))off_1E42EF1A0[v254])(&__dst, v252);
      v252 += 56;
      if (v252 == v253)
        goto LABEL_382;
    }
LABEL_414:
    std::__throw_bad_variant_access[abi:nn180100]();
LABEL_1616:
    __break(1u);
    JUMPOUT(0x19F353AF4);
  }
LABEL_404:
  if (!*(_QWORD *)v5)
    goto LABEL_1575;
  if ((objc_opt_respondsToSelector() & 1) == 0)
    goto LABEL_1575;
  v293 = (ggl::DebugConsole *)objc_msgSend(*(id *)v5, "debugConsoleForId:", 1);
  v294 = v293;
  if (!v293)
    goto LABEL_1575;
  ggl::DebugConsole::begin(v293);
  *((_QWORD *)v294 + 10) = 0;
  v1350 = (float32x2_t *)v294;
  ggl::DebugConsole::end((uint64_t)v294);
  v295 = *(id *)v5;
  objc_msgSend(v295, "sizeInPixels");
  v1253 = v297;
  v1254 = v296;

  v298 = v1254;
  v300 = *((_QWORD *)v5 + 4);
  v301 = (std::__shared_weak_count *)*((_QWORD *)v5 + 5);
  if (v301)
  {
    p_shared_owners = (unint64_t *)&v301->__shared_owners_;
    do
      v303 = __ldxr(p_shared_owners);
    while (__stxr(v303 + 1, p_shared_owners));
    v304 = *((_QWORD *)v5 + 4);
    v305 = (std::__shared_weak_count *)*((_QWORD *)v5 + 5);
    v306 = *(double *)(v300 + 64);
    v307 = (float32x4_t *)v294;
    if (v305)
    {
      v308 = (unint64_t *)&v305->__shared_owners_;
      do
        v309 = __ldxr(v308);
      while (__stxr(v309 + 1, v308));
      v310 = 0;
    }
    else
    {
      v310 = 1;
    }
    v300 = v304;
  }
  else
  {
    v305 = 0;
    v306 = *(double *)(v300 + 64);
    v310 = 1;
    v307 = (float32x4_t *)v294;
  }
  v311 = v306;
  v312 = *(unsigned __int8 *)(v300 + 72);
  v1366 = 0;
  v1365 = 0;
  v1364 = 2.0 / v298;
  v299 = v1253;
  v1367 = -2.0 / v299;
  v313 = v311 + -1.0;
  if (!v312)
    v313 = 1.0 - v311;
  v1369 = 0;
  v1368 = 0;
  v1370 = v313 * 0.5;
  v1371 = 0;
  v1372 = (float)-v298 / v298;
  v1373 = 1065353216;
  v1374 = (float)(v311 * 0.5) + 0.5;
  v1375 = 1065353216;
  if ((v310 & 1) == 0)
  {
    v314 = (unint64_t *)&v305->__shared_owners_;
    do
      v315 = __ldaxr(v314);
    while (__stlxr(v315 - 1, v314));
    if (!v315)
    {
      ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
      std::__shared_weak_count::__release_weak(v305);
    }
  }
  if (v301)
  {
    v316 = (unint64_t *)&v301->__shared_owners_;
    do
      v317 = __ldaxr(v316);
    while (__stlxr(v317 - 1, v316));
    if (!v317)
    {
      ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
      std::__shared_weak_count::__release_weak(v301);
    }
  }
  ggl::DebugConsole::setProjection((uint64_t)v307, &v1364);
  v318 = *(id *)(*((_QWORD *)this + 5) + 104);
  objc_msgSend(v318, "contentScale");
  v1331 = v319;
  v320 = *(id *)(*((_QWORD *)this + 5) + 104);
  objc_msgSend(v320, "contentScale");
  v321.f64[0] = v1331;
  v321.f64[1] = v322;
  v307[1] = vmulq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v321), v321), (float32x4_t)xmmword_19FFB49D0);

  v323 = (uint64_t)v294;
  ggl::DebugConsole::begin(v294);
  v324 = (_QWORD *)*((_QWORD *)v5 + 1);
  v325 = (int8x8_t)v324[1];
  if (!*(_QWORD *)&v325)
    goto LABEL_1575;
  v326 = (uint8x8_t)vcnt_s8(v325);
  v326.i16[0] = vaddlv_u8(v326);
  if (v326.u32[0] > 1uLL)
  {
    v327 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v325 <= 0x99BED48DEFBBD82BLL)
      v327 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v325;
  }
  else
  {
    v327 = (*(_QWORD *)&v325 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v328 = *(_QWORD **)(*v324 + 8 * v327);
  if (!v328)
    goto LABEL_1575;
  v329 = (_QWORD *)*v328;
  if (!v329)
    goto LABEL_1575;
  if (v326.u32[0] < 2uLL)
  {
    v330 = *(_QWORD *)&v325 - 1;
    while (1)
    {
      v332 = v329[1];
      if (v332 == 0x99BED48DEFBBD82BLL)
      {
        if (v329[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_451;
      }
      else if ((v332 & v330) != v327)
      {
        goto LABEL_1575;
      }
      v329 = (_QWORD *)*v329;
      if (!v329)
        goto LABEL_1575;
    }
  }
  while (2)
  {
    v331 = v329[1];
    if (v331 != 0x99BED48DEFBBD82BLL)
    {
      if (v331 >= *(_QWORD *)&v325)
        v331 %= *(_QWORD *)&v325;
      if (v331 != v327)
        goto LABEL_1575;
      goto LABEL_440;
    }
    if (v329[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_440:
      v329 = (_QWORD *)*v329;
      if (!v329)
        goto LABEL_1575;
      continue;
    }
    break;
  }
LABEL_451:
  v333 = v329[5];
  if (*(_QWORD *)(v333 + 8) != 0x99BED48DEFBBD82BLL)
    goto LABEL_1575;
  v334 = *(_QWORD *)(v333 + 32);
  if (!v334)
    goto LABEL_1575;
  v1256 = *(uint64_t **)(v333 + 32);
  v1285 = *(unsigned __int16 *)(*(_QWORD *)v334 + 282);
  if ((objc_msgSend(v1284, "paintKeysInView") & 1) != 0 || objc_msgSend(v1284, "paintS2KeysInView"))
  {
    *(_OWORD *)&v1359.__r_.__value_.__l.__data_ = xmmword_19FFB34C0;
    v335 = *(id *)v5;
    objc_msgSend(v335, "sizeInPixels");
    v337 = v336;
    v338 = *(id *)v5;
    objc_msgSend(v338, "sizeInPixels");
    v340 = v339;

    __b[0] = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v1347 + 808)), *(float64x2_t *)(v1347 + 824));
    __b[1] = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v1347 + 840)), *(float64x2_t *)(v1347 + 856));
    __b[2] = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v1347 + 872)), *(float64x2_t *)(v1347 + 888));
    __b[3] = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v1347 + 904)), *(float64x2_t *)(v1347 + 920));
    if (objc_msgSend(v1284, "paintKeysInView"))
    {
      v341 = *(unsigned __int16 **)(*v1256 + 112);
      v342 = *(unsigned __int16 **)(*v1256 + 120);
      if (v341 != v342)
      {
        while (*v341 != v1285)
        {
          v341 += 56;
          if (v341 == v342)
          {
            v341 = *(unsigned __int16 **)(*v1256 + 120);
            break;
          }
        }
      }
      for (j = v341 + 40;
            ;
            md::DebugRenderLayer::renderQuadTile((uint64_t)this, v5, (QuadTile *)(j + 8), (float32x4_t *)&v1359, (uint64_t)v1385, (uint64_t)v1350, (uint64_t)""))
      {
        j = *(unsigned __int16 **)j;
        if (!j)
          break;
      }
    }
    if (objc_msgSend(v1284, "paintS2KeysInView"))
    {
      v353 = *(_QWORD *)(*v1256 + 112);
      v354 = *(_QWORD *)(*v1256 + 120);
      if (v353 != v354)
      {
        while (*(_WORD *)v353 != 5)
        {
          v353 += 112;
          if (v353 == v354)
          {
            v353 = *(_QWORD *)(*v1256 + 120);
            break;
          }
        }
      }
      v355 = *(uint64_t **)(v353 + 80);
      if (v355)
      {
        v356 = v337;
        __sb = v356;
        v357 = v340;
        v1271 = v357;
        v358 = 1.0;
        v359 = 0.5;
        __asm { FMOV            V13.2S, #1.0 }
        v4 = 1.0;
        do
        {
          v363 = 0;
          v1389.__r_.__value_.__r.__words[0] = __PAIR64__(LODWORD(v1271), LODWORD(__sb));
          v364 = (double)(1 << *((_BYTE *)v355 + 17));
          v366 = *((_DWORD *)v355 + 5);
          v365 = *((_DWORD *)v355 + 6);
          v1390[8] = *((_BYTE *)v355 + 17);
          v1279 = v355;
          v367 = *((unsigned __int8 *)v355 + 16);
          *(_DWORD *)v1390 = v365;
          *(_DWORD *)&v1390[4] = v366;
          v1390[9] = v367;
          *(_QWORD *)&v1390[16] = &v1389;
          *(_QWORD *)&v1390[24] = __b;
          v1350[13].i32[0] = 1069547520;
          v1350[12].i32[0] = -16777216;
          v368 = v358 / v364;
          v369 = (double)v365 * v368;
          v370 = (double)v366 * v368;
          v371 = -(v369 - (double)(v365 + 1) * v368);
          v372 = -(v370 - (double)(v366 + 1) * v368);
          v1317 = v369;
          v1308 = v370;
          v1300 = v371;
          v1293 = v372;
          do
          {
            v373 = (double *)((char *)&_drawS2Cell(geo::QuadTile const&,geo::Color<float,4,(geo::ColorSpace)0> const&,gm::Matrix<float,2,1>,gm::Matrix<float,4,4> const&,ggl::DebugConsole *)::corners
                            + 16 * v363);
            v374 = *v373;
            v2 = v373[1];
            v375 = (double *)((char *)&_drawS2Cell(geo::QuadTile const&,geo::Color<float,4,(geo::ColorSpace)0> const&,gm::Matrix<float,2,1>,gm::Matrix<float,4,4> const&,ggl::DebugConsole *)::corners
                            + 16 * (++v363 & 3));
            v376 = *v375 - v374;
            v377 = v375[1] - v2;
            v3 = 0.0;
            do
            {
              v392 = v369 + (v374 + v376 * v3) * v371;
              if (v392 >= v359)
              {
                v393 = v392 * v392;
                v394 = -0.333333333;
                v395 = 1.33333333;
              }
              else
              {
                v393 = (v358 - v392) * (v358 - v392);
                v394 = 0.333333333;
                v395 = -1.33333333;
              }
              v396 = v394 + v393 * v395;
              v397 = v370 + (v2 + v377 * v3) * v372;
              if (v397 >= v359)
              {
                v398 = v397 * v397;
                v399 = -0.333333333;
                v400 = 1.33333333;
              }
              else
              {
                v398 = (v358 - v397) * (v358 - v397);
                v399 = 0.333333333;
                v400 = -1.33333333;
              }
              v401.f64[0] = v399 + v398 * v400;
              v402 = 1.0;
              switch(v367)
              {
                case 0:
                  break;
                case 1:
                  v402 = -v396;
                  v396 = 1.0;
                  break;
                case 2:
                  v402 = -v396;
                  v396 = -v401.f64[0];
                  goto LABEL_504;
                case 3:
                  v404 = -v401.f64[0];
                  v401.f64[0] = -v396;
                  v402 = -1.0;
                  v396 = v404;
                  break;
                case 4:
                  v402 = v399 + v398 * v400;
                  v403 = -v396;
                  v396 = -1.0;
                  v401.f64[0] = v403;
                  break;
                case 5:
                  v402 = v399 + v398 * v400;
                  v401.f64[0] = -1.0;
                  break;
                default:
                  v396 = 1.0;
LABEL_504:
                  v401.f64[0] = 1.0;
                  break;
              }
              v3 = v3 + 0.1;
              _S5 = HIDWORD(__b[1].f64[1]);
              v406 = v369 + (v374 + v376 * v3) * v371;
              if (v406 >= v359)
              {
                v407 = v406 * v406;
                v408 = -0.333333333;
                v409 = 1.33333333;
              }
              else
              {
                v407 = (v358 - v406) * (v358 - v406);
                v408 = 0.333333333;
                v409 = -1.33333333;
              }
              v380 = v408 + v407 * v409;
              v410 = v370 + (v2 + v377 * v3) * v372;
              if (v410 >= v359)
              {
                v411 = v410 * v410;
                v412 = -0.333333333;
                v413 = 1.33333333;
              }
              else
              {
                v411 = (v358 - v410) * (v358 - v410);
                v412 = 0.333333333;
                v413 = -1.33333333;
              }
              v379 = v412 + v411 * v413;
              v378 = 1.0;
              switch(v367)
              {
                case 0:
                  break;
                case 1:
                  v378 = -v380;
                  v380 = 1.0;
                  break;
                case 2:
                  v378 = -v380;
                  v380 = -v379;
                  v379 = 1.0;
                  break;
                case 3:
                  v414 = -v379;
                  v379 = -v380;
                  v378 = -1.0;
                  v380 = v414;
                  break;
                case 4:
                  v378 = v379;
                  v379 = -v380;
                  v380 = -1.0;
                  break;
                case 5:
                  v378 = v379;
                  v379 = -1.0;
                  break;
                default:
                  v380 = 1.0;
                  v379 = 1.0;
                  break;
              }
              v381.f64[0] = v358 / sqrt(v402 * v402 + v396 * v396 + v401.f64[0] * v401.f64[0]);
              v401.f64[1] = v381.f64[0];
              v382 = vmulq_f64(v401, (float64x2_t)xmmword_19FFB49E0);
              v381.f64[1] = v396;
              _Q0 = vmulq_f64(v382, v381);
              *(float *)v382.f64 = vmuld_lane_f64(v402, v382, 1);
              *(float32x2_t *)&_Q0.f64[0] = vcvt_f32_f64(_Q0);
              __asm { FMLA            S19, S5, V0.S[1] }
              v385 = vmlas_n_f32(_S19, *((float *)&__b[2].f64[1] + 1), *(float *)_Q0.f64);
              *(float *)v381.f64 = vmuls_lane_f32(*(float *)__b[1].f64, *(float32x2_t *)&_Q0.f64[0], 1);
              v386 = vmla_f32((float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(vmuls_lane_f32(*(float *)v382.f64, *(float32x2_t *)&__b[0].f64[0], 1)), LODWORD(__b[3].f64[0])), *(float32x2_t *)&_Q0.f64[0], (float32x2_t)__PAIR64__(HIDWORD(__b[1].f64[0]), LODWORD(__b[2].f64[0])));
              *(int32x2_t *)&_Q0.f64[0] = vdup_lane_s32(*(int32x2_t *)&_Q0.f64[0], 0);
              LODWORD(_Q0.f64[0]) = LODWORD(v382.f64[0]);
              *(float32x2_t *)&_Q0.f64[0] = vmul_n_f32(vadd_f32(vmla_f32(v386, *(float32x2_t *)&_Q0.f64[0], (float32x2_t)__PAIR64__(HIDWORD(__b[2].f64[0]), LODWORD(__b[0].f64[0]))), (float32x2_t)__PAIR64__(HIDWORD(__b[3].f64[0]), LODWORD(v381.f64[0]))), 1.0 / v385);
              LODWORD(v382.f64[0]) = vadd_f32(*(float32x2_t *)&_Q0.f64[0], _D13).u32[0];
              HIDWORD(v382.f64[0]) = vsub_f32(_D13, *(float32x2_t *)&_Q0).i32[1];
              *(float32x2_t *)&_Q0.f64[0] = vmul_f32((float32x2_t)v1389.__r_.__value_.__l.__data_, (float32x2_t)0x3F0000003F000000);
              v387 = v358 / sqrt(v378 * v378 + v380 * v380 + v379 * v379);
              v388 = v387 * 6378137.0 * v380;
              v389 = v387 * 6378137.0 * v378;
              *(float *)&v388 = v388;
              *(float *)&v387 = v379 * 6356752.31 * v387;
              v390 = vmul_n_f32(vmla_n_f32(vmla_n_f32(vmla_n_f32(*(float32x2_t *)&__b[3].f64[0], *(float32x2_t *)&__b[2].f64[0], *(float *)&v387), *(float32x2_t *)&__b[0].f64[0], v389), *(float32x2_t *)&__b[1].f64[0], *(float *)&v388), 1.0/ (float)((float)((float)(*((float *)&__b[3].f64[1] + 1)+ (float)(*((float *)&__b[2].f64[1] + 1) * *(float *)&v387))+ (float)(*((float *)&__b[0].f64[1] + 1) * v389))+ (float)(*((float *)&__b[1].f64[1] + 1) * *(float *)&v388)));
              v391.i32[0] = vadd_f32(v390, _D13).u32[0];
              v391.i32[1] = vsub_f32(_D13, v390).i32[1];
              __dst.__r_.__value_.__l.__data_ = (std::string::pointer)vmul_f32(v391, *(float32x2_t *)&_Q0.f64[0]);
              v1350[1] = vmul_f32(*(float32x2_t *)&v382.f64[0], *(float32x2_t *)&_Q0.f64[0]);
              ggl::DebugConsole::drawLine((uint64_t)v1350, (float *)&__dst);
              v358 = 1.0;
              v359 = 0.5;
              v369 = v1317;
              v370 = v1308;
              v371 = v1300;
              v372 = v1293;
            }
            while (v3 < 1.0);
          }
          while (v363 != 4);
          v417 = geo::S2CellCoordinates::xyzFromTileLocalST<double>((uint64_t)v1390, 0.5, 0.5) * 6378137.0;
          *(float *)&v415 = v415 * 6378137.0;
          *(float *)&v416 = v416 * 6356752.31;
          v418 = vmul_n_f32(vmla_n_f32(vmla_n_f32(vmla_n_f32(*(float32x2_t *)&__b[3].f64[0], *(float32x2_t *)&__b[0].f64[0], v417), *(float32x2_t *)&__b[1].f64[0], *(float *)&v415), *(float32x2_t *)&__b[2].f64[0], *(float *)&v416), 1.0/ (float)((float)((float)(*((float *)&__b[3].f64[1] + 1)+ (float)(*((float *)&__b[0].f64[1] + 1) * v417))+ (float)(*((float *)&__b[1].f64[1] + 1) * *(float *)&v415))+ (float)(*((float *)&__b[2].f64[1] + 1) * *(float *)&v416)));
          LODWORD(v415) = vadd_f32(v418, _D13).u32[0];
          HIDWORD(v415) = vsub_f32(_D13, v418).i32[1];
          v1350[1] = vmul_f32(vmul_f32((float32x2_t)v1389.__r_.__value_.__l.__data_, (float32x2_t)0x3F0000003F000000), *(float32x2_t *)&v415);
          v1350[13].i32[0] = 1056964608;
          v1350[5] = (float32x2_t)0x100000001;
          LOWORD(v1356.__r_.__value_.__l.__data_) = *((_WORD *)v1279 + 8);
          *(std::string::size_type *)((char *)v1356.__r_.__value_.__r.__words + 4) = *(uint64_t *)((char *)v1279 + 20);
          md::debugString<geo::QuadTile>(&__dst, &v1356);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_dst = (int8x16_t *)&__dst;
          else
            p_dst = (int8x16_t *)__dst.__r_.__value_.__r.__words[0];
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          else
            size = __dst.__r_.__value_.__l.__size_;
          ggl::DebugConsole::drawString((uint64_t)v1350, p_dst, size, v419, v420);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          v355 = (uint64_t *)*v1279;
          v358 = 1.0;
          v359 = 0.5;
        }
        while (*v1279);
      }
    }
    v323 = (uint64_t)v1350;
  }
  if (objc_msgSend(v1284, "paintStandardLabelMapData"))
  {
    md::SceneContext::renderData((md::SceneContext *)__b, *v1256, 18);
    v423 = __b[0];
    v424 = __b[1].f64[0];
    while (1)
    {
      v425 = v423.f64[0];
      if (*(_QWORD *)&v423.f64[0] == *(_QWORD *)&v424)
        break;
      v1339 = v423.f64[1];
      v426 = *(QuadTile **)(*(_QWORD *)&v423.f64[0] + 112);
      *(_OWORD *)v1390 = xmmword_19FFB2D90;
      md::DebugRenderLayer::renderQuadTile((uint64_t)this, v5, v426 + 7, (float32x4_t *)v1390, (uint64_t)v1385, v323, (uint64_t)"");
      *(_QWORD *)&v427 = *(_QWORD *)&v425 + 144;
      v423.f64[1] = v1339;
      if (*(_QWORD *)&v425 + 144 != *(_QWORD *)&v1339)
      {
        while (!*(_QWORD *)(*(_QWORD *)&v427 + 112))
        {
          *(_QWORD *)&v427 += 144;
          if (*(_QWORD *)&v427 == *(_QWORD *)&v1339)
          {
            v427 = v1339;
            break;
          }
        }
      }
      v423.f64[0] = v427;
    }
  }
  if (objc_msgSend(v1284, "paintRoadTileData"))
  {
    md::SceneContext::renderData((md::SceneContext *)__b, *v1256, 2);
    v428 = __b[0];
    v429 = __b[1].f64[0];
    while (1)
    {
      v430 = v428.f64[0];
      if (*(_QWORD *)&v428.f64[0] == *(_QWORD *)&v429)
        break;
      v1340 = v428.f64[1];
      v431 = *(QuadTile **)(*(_QWORD *)&v428.f64[0] + 112);
      *(_OWORD *)v1390 = xmmword_19FFB3480;
      md::DebugRenderLayer::renderQuadTile((uint64_t)this, v5, v431 + 7, (float32x4_t *)v1390, (uint64_t)v1385, v323, (uint64_t)"");
      *(_QWORD *)&v432 = *(_QWORD *)&v430 + 144;
      v428.f64[1] = v1340;
      if (*(_QWORD *)&v430 + 144 != *(_QWORD *)&v1340)
      {
        while (!*(_QWORD *)(*(_QWORD *)&v432 + 112))
        {
          *(_QWORD *)&v432 += 144;
          if (*(_QWORD *)&v432 == *(_QWORD *)&v1340)
          {
            v432 = v1340;
            break;
          }
        }
      }
      v428.f64[0] = v432;
    }
  }
  if (objc_msgSend(v1284, "paintPolygonLayerData"))
  {
    md::SceneContext::renderData((md::SceneContext *)__b, *v1256, 57);
    v433 = __b[0];
    v434 = __b[1].f64[0];
    while (1)
    {
      v435 = v433.f64[0];
      if (*(_QWORD *)&v433.f64[0] == *(_QWORD *)&v434)
        break;
      v1341 = v433.f64[1];
      v436 = *(QuadTile **)(*(_QWORD *)&v433.f64[0] + 112);
      *(_OWORD *)v1390 = xmmword_19FFB3970;
      md::DebugRenderLayer::renderQuadTile((uint64_t)this, v5, v436 + 7, (float32x4_t *)v1390, (uint64_t)v1385, v323, (uint64_t)"");
      *(_QWORD *)&v437 = *(_QWORD *)&v435 + 144;
      v433.f64[1] = v1341;
      if (*(_QWORD *)&v435 + 144 != *(_QWORD *)&v1341)
      {
        while (!*(_QWORD *)(*(_QWORD *)&v437 + 112))
        {
          *(_QWORD *)&v437 += 144;
          if (*(_QWORD *)&v437 == *(_QWORD *)&v1341)
          {
            v437 = v1341;
            break;
          }
        }
      }
      v433.f64[0] = v437;
    }
    md::SceneContext::renderData((md::SceneContext *)__b, *v1256, 1);
    v438 = __b[0];
    v439 = __b[1].f64[0];
    while (1)
    {
      v440 = v438.f64[0];
      if (*(_QWORD *)&v438.f64[0] == *(_QWORD *)&v439)
        break;
      v1342 = v438.f64[1];
      v441 = *(QuadTile **)(*(_QWORD *)&v438.f64[0] + 112);
      *(_OWORD *)v1390 = xmmword_19FFB3480;
      md::DebugRenderLayer::renderQuadTile((uint64_t)this, v5, v441 + 7, (float32x4_t *)v1390, (uint64_t)v1385, v323, (uint64_t)"");
      *(_QWORD *)&v442 = *(_QWORD *)&v440 + 144;
      v438.f64[1] = v1342;
      if (*(_QWORD *)&v440 + 144 != *(_QWORD *)&v1342)
      {
        while (!*(_QWORD *)(*(_QWORD *)&v442 + 112))
        {
          *(_QWORD *)&v442 += 144;
          if (*(_QWORD *)&v442 == *(_QWORD *)&v1342)
          {
            v442 = v1342;
            break;
          }
        }
      }
      v438.f64[0] = v442;
    }
  }
  if (objc_msgSend(v1284, "paintFlyoverTiles"))
  {
    md::SceneContext::renderData((md::SceneContext *)v1390, *v1256, 75);
    v443 = *(_OWORD *)v1390;
    v444 = *(_QWORD *)&v1390[16];
    v445 = *MEMORY[0x1E0DE4F50];
    v1309 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v1301 = *(double *)(MEMORY[0x1E0DE4F50] + 72);
    v446 = MEMORY[0x1E0DE4FB8] + 16;
    while (1)
    {
      v447 = v443;
      if ((_QWORD)v443 == v444)
        break;
      v1343 = *((_QWORD *)&v443 + 1);
      v448 = *(QuadTile **)(v443 + 112);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)__b);
      *(_OWORD *)&v1356.__r_.__value_.__l.__data_ = xmmword_19FFB4810;
      v449 = v1385;
      if ((v1394[40] & 0x10) != 0)
      {
        v452 = *(double *)&v1394[32];
        v453 = &__b[4];
        if (*(_QWORD *)&v1394[32] < *(_QWORD *)&__b[4].f64[1])
        {
          *(float64_t *)&v1394[32] = __b[4].f64[1];
          v452 = __b[4].f64[1];
          v453 = &__b[4];
        }
      }
      else
      {
        if ((v1394[40] & 8) == 0)
        {
          v450 = 0;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
          v451 = &__dst;
          goto LABEL_576;
        }
        v452 = __b[3].f64[1];
        v453 = (float64x2_t *)&__b[2].f64[1];
      }
      v454 = v453->f64[0];
      v450 = *(_QWORD *)&v452 - *(_QWORD *)&v453->f64[0];
      if (v450 > 0x7FFFFFFFFFFFFFF7)
        abort();
      if (v450 >= 0x17)
      {
        v455 = v444;
        v456 = (v450 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v450 | 7) != 0x17)
          v456 = v450 | 7;
        v457 = v456 + 1;
        v451 = (std::string *)operator new(v456 + 1);
        __dst.__r_.__value_.__r.__words[2] = v457 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v451;
        __dst.__r_.__value_.__l.__size_ = v450;
        v444 = v455;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = LOBYTE(v452) - LOBYTE(v453->f64[0]);
        v451 = &__dst;
        if (!v450)
          goto LABEL_575;
      }
      memmove(v451, *(const void **)&v454, v450);
LABEL_575:
      v5 = v1353;
LABEL_576:
      v451->__r_.__value_.__s.__data_[v450] = 0;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v458 = &__dst;
      else
        v458 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      md::DebugRenderLayer::renderQuadTile((uint64_t)this, v5, v448 + 7, (float32x4_t *)&v1356, (uint64_t)v449, (uint64_t)v1350, (uint64_t)v458);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      __b[0].f64[0] = v445;
      *(_QWORD *)((char *)__b[0].f64 + *(_QWORD *)(*(_QWORD *)&v445 - 24)) = v1309;
      __b[1].f64[0] = v1301;
      *(_QWORD *)&__b[1].f64[1] = v446;
      if ((v1394[31] & 0x80000000) != 0)
        operator delete(*(void **)&v1394[8]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A1AF4D64](v1395);
      v459 = v447 + 144;
      *((_QWORD *)&v443 + 1) = v1343;
      if (v447 + 144 != v1343)
      {
        while (!*(_QWORD *)(v459 + 112))
        {
          v459 += 144;
          if (v459 == v1343)
          {
            v459 = v1343;
            break;
          }
        }
      }
      *(_QWORD *)&v443 = v459;
    }
  }
  if (!objc_msgSend(v1284, "paintDaVinciTiles"))
    goto LABEL_832;
  v460 = (_QWORD *)*((_QWORD *)v5 + 1);
  v461 = (int8x8_t)v460[1];
  if (v461)
  {
    v462 = (uint8x8_t)vcnt_s8(v461);
    v462.i16[0] = vaddlv_u8(v462);
    if (v462.u32[0] > 1uLL)
    {
      v463 = 0xF014CCE28176CA44;
      if (*(_QWORD *)&v461 <= 0xF014CCE28176CA44)
        v463 = 0xF014CCE28176CA44 % *(_QWORD *)&v461;
    }
    else
    {
      v463 = (*(_QWORD *)&v461 - 1) & 0xF014CCE28176CA44;
    }
    v464 = *(_QWORD **)(*v460 + 8 * v463);
    if (v464)
    {
      v465 = (_QWORD *)*v464;
      if (v465)
      {
        if (v462.u32[0] < 2uLL)
        {
          v466 = *(_QWORD *)&v461 - 1;
          while (1)
          {
            v468 = v465[1];
            if (v468 == 0xF014CCE28176CA44)
            {
              if (v465[2] == 0xF014CCE28176CA44)
                goto LABEL_610;
            }
            else if ((v468 & v466) != v463)
            {
              goto LABEL_612;
            }
            v465 = (_QWORD *)*v465;
            if (!v465)
              goto LABEL_612;
          }
        }
        do
        {
          v467 = v465[1];
          if (v467 == 0xF014CCE28176CA44)
          {
            if (v465[2] == 0xF014CCE28176CA44)
            {
LABEL_610:
              v469 = v465[5];
              if (*(_QWORD *)(v469 + 8) == 0xF014CCE28176CA44)
              {
                v470 = *(_QWORD **)(v469 + 32);
                goto LABEL_613;
              }
              break;
            }
          }
          else
          {
            if (v467 >= *(_QWORD *)&v461)
              v467 %= *(_QWORD *)&v461;
            if (v467 != v463)
              break;
          }
          v465 = (_QWORD *)*v465;
        }
        while (v465);
      }
    }
  }
LABEL_612:
  v470 = 0;
LABEL_613:
  md::SceneContext::renderData((md::SceneContext *)&v1356, *v1256, 33);
  v471 = *(_OWORD *)&v1356.__r_.__value_.__l.__data_;
  v1266 = v1356.__r_.__value_.__r.__words[2];
  v1263 = MEMORY[0x1E0DE4FE0] + 64;
  v1257 = MEMORY[0x1E0DE4FB8] + 16;
  v1280 = (float32x2_t)vdup_n_s32(0x3EAAAAABu);
  __asm { FMOV            V1.2S, #1.0 }
  __sba = _D1;
  v1245 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v1246 = *MEMORY[0x1E0DE4F50];
  v1242 = v470;
  v1243 = *(double *)(MEMORY[0x1E0DE4F50] + 72);
  v1252 = *MEMORY[0x1E0DE4F60];
  v1259 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v1261 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v1250 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
LABEL_615:
  v1274 = *((_QWORD *)&v471 + 1);
  v473 = v471;
  if ((_QWORD)v471 != v1266)
  {
    v474 = *(_QWORD *)(v471 + 112);
    if (!v470)
    {
      v480 = 0;
      v482 = 0;
      v483 = 0;
      goto LABEL_644;
    }
    v475 = md::MeshRenderableContext::renderablesForRegistry(v470, *(_QWORD *)(v474 + 1320));
    v476 = *(_QWORD *)(v474 + 1320);
    v477 = *(_QWORD *)(v476 + 48);
    v478 = *(_QWORD *)(v476 + 56) - v477;
    if (v478)
    {
      v479 = v478 >> 3;
      if (v479 <= 1)
        v479 = 1;
      if (v479 >= 2)
      {
        v484 = 0;
        v485 = 0;
        v481 = v479 & 0xFFFFFFFFFFFFFFFELL;
        v486 = (int *)(v477 + 12);
        v487 = v479 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v488 = *(v486 - 2);
          v490 = *v486;
          v486 += 4;
          v489 = v490;
          if (v488 != -1)
            ++v484;
          if (v489 != -1)
            ++v485;
          v487 -= 2;
        }
        while (v487);
        v480 = v485 + v484;
        if (v479 == v481)
          goto LABEL_635;
      }
      else
      {
        v480 = 0;
        v481 = 0;
      }
      v491 = v479 - v481;
      v492 = (int *)(v477 + 8 * v481 + 4);
      do
      {
        v493 = *v492;
        v492 += 2;
        if (v493 != -1)
          ++v480;
        --v491;
      }
      while (v491);
    }
    else
    {
      v480 = 0;
    }
LABEL_635:
    v494 = v475[1];
    v483 = (v494 - *v475) >> 3;
    if (*v475 == v494)
    {
      v482 = 0;
    }
    else
    {
      v495 = *v475 + 8;
      do
      {
        v482 = *(_BYTE *)(*(_QWORD *)(v495 - 8) + 148) != 0;
        if (*(_BYTE *)(*(_QWORD *)(v495 - 8) + 148))
          v496 = 1;
        else
          v496 = v495 == v494;
        v495 += 8;
      }
      while (!v496);
    }
LABEL_644:
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)__b);
    *(_QWORD *)&v1391[80] = v1263;
    *(_QWORD *)v1390 = v1261;
    *(_QWORD *)&v1390[*(_QWORD *)(v1261 - 24)] = v1259;
    v497 = (std::ios_base *)&v1390[*(_QWORD *)(*(_QWORD *)v1390 - 24)];
    std::ios_base::init(v497, &v1390[8]);
    v1268 = v473;
    v497[1].__vftable = 0;
    v497[1].__fmtflags_ = -1;
    *(_QWORD *)v1390 = MEMORY[0x1E0DE4FE0] + 24;
    *(_QWORD *)&v1391[80] = MEMORY[0x1E0DE4FE0] + 64;
    std::streambuf::basic_streambuf();
    *(_QWORD *)&v1390[8] = v1257;
    memset(&v1391[40], 0, 32);
    *(_DWORD *)&v1391[72] = 16;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v1390, (uint64_t)"Tex Verts: ", 11);
    v498 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    v499 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v499 + *(_QWORD *)(*v499 - 24)));
    v500 = std::locale::use_facet((const std::locale *)&v1359, v498);
    ((void (*)(const std::locale::facet *, uint64_t))v500->__vftable[2].~facet_0)(v500, 10);
    std::locale::~locale((std::locale *)&v1359);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v499, (uint64_t)"2Elev Verts: ", 13);
    v501 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v501 + *(_QWORD *)(*v501 - 24)));
    v502 = std::locale::use_facet((const std::locale *)&v1359, v498);
    ((void (*)(const std::locale::facet *, uint64_t))v502->__vftable[2].~facet_0)(v502, 10);
    std::locale::~locale((std::locale *)&v1359);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v501, (uint64_t)"Indices: ", 9);
    v503 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v503 + *(_QWORD *)(*v503 - 24)));
    v504 = std::locale::use_facet((const std::locale *)&v1359, v498);
    ((void (*)(const std::locale::facet *, uint64_t))v504->__vftable[2].~facet_0)(v504, 10);
    std::locale::~locale((std::locale *)&v1359);
    std::ostream::put();
    std::ostream::flush();
    if ((v1391[72] & 0x10) != 0)
    {
      v507 = *(_QWORD *)&v1391[64];
      v508 = (const void **)&v1391[16];
      if (*(_QWORD *)&v1391[64] < *(_QWORD *)&v1391[24])
      {
        *(_QWORD *)&v1391[64] = *(_QWORD *)&v1391[24];
        v507 = *(_QWORD *)&v1391[24];
        v508 = (const void **)&v1391[16];
      }
    }
    else
    {
      if ((v1391[72] & 8) == 0)
      {
        v505 = 0;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
        v506 = &__dst;
        goto LABEL_658;
      }
      v507 = *(_QWORD *)&v1391[8];
      v508 = (const void **)&v1390[24];
    }
    v509 = *v508;
    v505 = v507 - (_QWORD)*v508;
    if (v505 > 0x7FFFFFFFFFFFFFF7)
      abort();
    if (v505 >= 0x17)
    {
      v510 = (v505 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v505 | 7) != 0x17)
        v510 = v505 | 7;
      v511 = v510 + 1;
      v506 = (std::string *)operator new(v510 + 1);
      __dst.__r_.__value_.__r.__words[2] = v511 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v506;
      __dst.__r_.__value_.__l.__size_ = v505;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v507 - *(_BYTE *)v508;
      v506 = &__dst;
      if (!v505)
      {
LABEL_658:
        v506->__r_.__value_.__s.__data_[v505] = 0;
        *(_QWORD *)v1390 = v1252;
        *(_QWORD *)&v1390[*(_QWORD *)(v1252 - 24)] = v1250;
        *(_QWORD *)&v1390[8] = MEMORY[0x1E0DE4FB8] + 16;
        if ((v1391[63] & 0x80000000) != 0)
          operator delete(*(void **)&v1391[40]);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1A1AF4D64](&v1391[80]);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v512 = &__dst;
        else
          v512 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v513 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        else
          v513 = __dst.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>((float64x2_t *)__b[1].f64, (uint64_t)v512, v513);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>((float64x2_t *)__b[1].f64, (uint64_t)"\nr:", 3);
        std::to_string((std::string *)v1390, v483);
        if (v1390[23] >= 0)
          v514 = v1390;
        else
          v514 = *(_BYTE **)v1390;
        if (v1390[23] >= 0)
          v515 = v1390[23];
        else
          v515 = *(_QWORD *)&v1390[8];
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>((float64x2_t *)__b[1].f64, (uint64_t)v514, v515);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>((float64x2_t *)__b[1].f64, (uint64_t)"\ne:", 3);
        std::to_string(&v1359, v480);
        if ((v1359.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v516 = &v1359;
        else
          v516 = (std::string *)v1359.__r_.__value_.__r.__words[0];
        if ((v1359.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v517 = HIBYTE(v1359.__r_.__value_.__r.__words[2]);
        else
          v517 = v1359.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>((float64x2_t *)__b[1].f64, (uint64_t)v516, v517);
        if (SHIBYTE(v1359.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v1359.__r_.__value_.__l.__data_);
          if ((v1390[23] & 0x80000000) == 0)
          {
LABEL_680:
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_681;
LABEL_690:
            operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_681:
            v1362 = xmmword_19FFB4810;
            v1363 = xmmword_19FFB49F0;
            v518 = v1385;
            if (v482)
            {
              if ((v1394[40] & 0x10) != 0)
              {
                v523 = *(double *)&v1394[32];
                v524 = &__b[4];
                if (*(_QWORD *)&v1394[32] < *(_QWORD *)&__b[4].f64[1])
                {
                  *(float64_t *)&v1394[32] = __b[4].f64[1];
                  v523 = __b[4].f64[1];
                  v524 = &__b[4];
                }
              }
              else
              {
                if ((v1394[40] & 8) == 0)
                {
                  v519 = 0;
                  v1390[23] = 0;
                  v520 = v1390;
                  goto LABEL_704;
                }
                v523 = __b[3].f64[1];
                v524 = (float64x2_t *)&__b[2].f64[1];
              }
              v527 = v524->f64[0];
              v519 = *(_QWORD *)&v523 - *(_QWORD *)&v524->f64[0];
              if (v519 > 0x7FFFFFFFFFFFFFF7)
                abort();
              if (v519 >= 0x17)
              {
                v528 = (v519 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v519 | 7) != 0x17)
                  v528 = v519 | 7;
                v529 = v528 + 1;
                v520 = operator new(v528 + 1);
                *(_QWORD *)&v1390[16] = v529 | 0x8000000000000000;
                *(_QWORD *)v1390 = v520;
                *(_QWORD *)&v1390[8] = v519;
              }
              else
              {
                v1390[23] = LOBYTE(v523) - LOBYTE(v524->f64[0]);
                v520 = v1390;
                if (!v519)
                  goto LABEL_704;
              }
              memmove(v520, *(const void **)&v527, v519);
LABEL_704:
              v520[v519] = 0;
              if (v1390[23] >= 0)
                v530 = v1390;
              else
                v530 = *(_BYTE **)v1390;
              v531 = v1350;
              md::DebugRenderLayer::renderSolidQuadTile((uint64_t)this, v1353, (QuadTile *)(v474 + 168), (float32x4_t *)&v1363, (uint64_t)v518, (uint64_t)v1350, (uint64_t)v530);
LABEL_721:
              if ((v1390[23] & 0x80000000) != 0)
                operator delete(*(void **)v1390);
              v531[5] = (float32x2_t)1;
              v536 = *(id *)v1353;
              objc_msgSend(v536, "sizeInPixels");
              v1332 = v537;
              objc_msgSend(*(id *)v1353, "sizeInPixels");
              v1322 = v538;

              LOWORD(v1359.__r_.__value_.__l.__data_) = *(_WORD *)(v474 + 168);
              *(std::string::size_type *)((char *)v1359.__r_.__value_.__r.__words + 4) = *(_QWORD *)(v474 + 172);
              v539 = (_QWORD *)*((_QWORD *)v1353 + 1);
              v540 = (int8x8_t)v539[1];
              if (!*(_QWORD *)&v540)
              {
                v544 = 0;
                v542 = v1350;
                goto LABEL_748;
              }
              v541 = (uint8x8_t)vcnt_s8(v540);
              v541.i16[0] = vaddlv_u8(v541);
              v542 = v1350;
              if (v541.u32[0] > 1uLL)
              {
                v543 = 0x1AF456233693CD46;
                if (*(_QWORD *)&v540 <= 0x1AF456233693CD46uLL)
                  v543 = 0x1AF456233693CD46uLL % *(_QWORD *)&v540;
              }
              else
              {
                v543 = (*(_QWORD *)&v540 - 1) & 0x1AF456233693CD46;
              }
              v545 = *(_QWORD **)(*v539 + 8 * v543);
              if (!v545)
                goto LABEL_747;
              v546 = (_QWORD *)*v545;
              if (!v546)
                goto LABEL_747;
              if (v541.u32[0] < 2uLL)
              {
                v547 = *(_QWORD *)&v540 - 1;
                while (1)
                {
                  v549 = v546[1];
                  if (v549 == 0x1AF456233693CD46)
                  {
                    if (v546[2] == 0x1AF456233693CD46)
                      goto LABEL_745;
                  }
                  else if ((v549 & v547) != v543)
                  {
                    goto LABEL_747;
                  }
                  v546 = (_QWORD *)*v546;
                  if (!v546)
                    goto LABEL_747;
                }
              }
              while (1)
              {
                v548 = v546[1];
                if (v548 == 0x1AF456233693CD46)
                {
                  if (v546[2] == 0x1AF456233693CD46)
                  {
LABEL_745:
                    v550 = v546[5];
                    if (*(_QWORD *)(v550 + 8) == 0x1AF456233693CD46)
                    {
                      v544 = *(_QWORD *)(v550 + 32);
                      goto LABEL_748;
                    }
LABEL_747:
                    v544 = 0;
LABEL_748:
                    md::LayoutContext::frameState(v1353);
                    v551.f64[0] = v1332;
                    v551.f64[1] = v1322;
                    v552 = vcvt_f32_f64(v551);
                    md::GeometryLogic::tileMatrix((md::GeometryLogic *)&__dst, *(unsigned __int8 *)(v553 + 128) - 1 < 3, (const QuadTile *)&v1359, 0.0, v1322);
                    gm::operator*<double,4,4,4>((double *)v1390, (double *)(v544 + 808), (double *)&__dst);
                    v554 = *(double *)&v1390[24];
                    v555 = *(double *)&v1391[24];
                    v556 = *(double *)&v1391[56];
                    v557 = vcvt_f32_f64(*(float64x2_t *)v1391);
                    v558 = *(float64x2_t *)&v1391[32];
                    _D4 = vcvt_f32_f64(*(float64x2_t *)&v1391[64]);
                    v560 = *(double *)&v1391[88];
                    v1318 = vcvt_f32_f64(*(float64x2_t *)v1390);
                    _D2 = vadd_f32(v557, v1318);
                    _S5 = 0.5;
                    v563 = vmlas_n_f32(_D4.f32[0], 0.5, _D2.f32[0]);
                    v1310 = _D4;
                    __asm { FMLA            S4, S5, V2.S[1] }
                    v1333 = v554;
                    v1323 = v555;
                    _D2.f32[0] = 1.0 / (float)(v560 + (float)((float)(v555 + v554) * 0.5));
                    v564 = _D2.f32[0] * v563;
                    _D2.f32[0] = 1.0 - (float)(_D2.f32[0] * _D4.f32[0]);
                    _D6 = vmul_f32(v552, (float32x2_t)0x3F0000003F000000);
                    _D4.f32[0] = vmlas_n_f32(_D6.f32[0], v564, _D6.f32[0]);
                    v1302 = _D6;
                    __asm { FMLA            S3, S2, V6.S[1] }
                    v542[1].i32[0] = _D4.i32[0];
                    v542[1].i32[1] = _S3;
                    v567 = *(_QWORD *)(v474 + 928);
                    v568 = *(_QWORD *)(v474 + 936);
                    if (v567 == v568)
                    {
                      ggl::DebugConsole::drawString((uint64_t)v542, (int8x16_t *)"no mesh errors\n", 0xFuLL, v556, *(int32x2_t *)&v558.f64[0]);
                    }
                    else
                    {
                      v569 = v474;
                      v570 = 0;
                      v571 = 0;
                      v572 = v556;
                      v573 = vcvt_f32_f64(v558);
                      *(_OWORD *)&v1390[8] = 0uLL;
                      *(_QWORD *)v1390 = &v1390[8];
                      while (1)
                      {
                        v574 = *(_DWORD *)(v567 + 40 * v571);
                        v575 = (uint64_t **)&v1390[8];
                        v576 = (uint64_t **)&v1390[8];
                        if (v570)
                        {
                          v577 = v570;
                          while (1)
                          {
                            while (1)
                            {
                              v576 = (uint64_t **)v577;
                              v578 = *((_DWORD *)v577 + 8);
                              if (v574 >= v578)
                                break;
                              v577 = *v576;
                              v575 = v576;
                              if (!*v576)
                                goto LABEL_757;
                            }
                            if (v578 >= v574)
                              break;
                            v577 = v576[1];
                            if (!v577)
                            {
                              v575 = v576 + 1;
                              goto LABEL_757;
                            }
                          }
                          v579 = v576;
                          v581 = v569;
                        }
                        else
                        {
LABEL_757:
                          v579 = operator new(0x30uLL);
                          v579[8] = v574;
                          *((_QWORD *)v579 + 5) = 0;
                          *(_QWORD *)v579 = 0;
                          *((_QWORD *)v579 + 1) = 0;
                          *((_QWORD *)v579 + 2) = v576;
                          *v575 = (uint64_t *)v579;
                          v580 = (uint64_t *)v579;
                          if (**(_QWORD **)v1390)
                          {
                            *(_QWORD *)v1390 = **(_QWORD **)v1390;
                            v580 = *v575;
                          }
                          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&v1390[8], v580);
                          ++*(_QWORD *)&v1390[16];
                          v581 = v569;
                          v568 = *(_QWORD *)(v569 + 936);
                          v567 = *(_QWORD *)(v569 + 928);
                        }
                        ++*((_QWORD *)v579 + 5);
                        if (0xCCCCCCCCCCCCCCCDLL * ((v568 - v567) >> 3) <= ++v571)
                          break;
                        v570 = *(uint64_t **)&v1390[8];
                      }
                      ggl::DebugConsole::drawString((uint64_t)v542, (int8x16_t *)"mesh errors:\n", 0xDuLL, v556, *(int32x2_t *)&v558.f64[0]);
                      v582 = *(_BYTE **)v1390;
                      if (*(_BYTE **)v1390 != &v1390[8])
                      {
                        while (2)
                        {
                          v583 = *((unsigned int *)v582 + 8);
                          if (v583 <= 6)
                          {
                            v584 = 4 * v583;
                            v3 = *(float *)((char *)&unk_1A001A2C8 + v584);
                            v552.i32[0] = *(_DWORD *)((char *)&unk_1A001A2E4 + v584);
                            LODWORD(v2) = *(_DWORD *)((char *)&unk_1A001A300 + v584);
                          }
                          v542[12].i8[0] = (int)(float)(v3 * 255.0);
                          v542[12].i8[1] = (int)(float)(v552.f32[0] * 255.0);
                          v542[12].i8[2] = (int)(float)(*(float *)&v2 * 255.0);
                          v542[12].i8[3] = -1;
                          v585 = *((_DWORD *)v582 + 8) - 1;
                          v586 = "invalid vertex";
                          if (v585 <= 5)
                            v586 = off_1E42FB030[v585];
                          *((_BYTE *)&v1387.__r_.__value_.__s + 23) = 8;
                          strcpy((char *)&v1387, " count: ");
                          v587 = strlen(v586);
                          v588 = std::string::insert(&v1387, 0, v586, v587);
                          v589 = *(_OWORD *)&v588->__r_.__value_.__l.__data_;
                          v1388.__r_.__value_.__r.__words[2] = v588->__r_.__value_.__r.__words[2];
                          *(_OWORD *)&v1388.__r_.__value_.__l.__data_ = v589;
                          v588->__r_.__value_.__l.__size_ = 0;
                          v588->__r_.__value_.__r.__words[2] = 0;
                          v588->__r_.__value_.__r.__words[0] = 0;
                          std::to_string(&v1386, *((_QWORD *)v582 + 5));
                          if ((v1386.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v590 = &v1386;
                          else
                            v590 = (std::string *)v1386.__r_.__value_.__r.__words[0];
                          if ((v1386.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v591 = HIBYTE(v1386.__r_.__value_.__r.__words[2]);
                          else
                            v591 = v1386.__r_.__value_.__l.__size_;
                          v592 = std::string::append(&v1388, (const std::string::value_type *)v590, v591);
                          v594 = v592->__r_.__value_.__r.__words[2];
                          *(_OWORD *)&v1389.__r_.__value_.__l.__data_ = *(_OWORD *)&v592->__r_.__value_.__l.__data_;
                          v1389.__r_.__value_.__r.__words[2] = v594;
                          v592->__r_.__value_.__l.__size_ = 0;
                          v592->__r_.__value_.__r.__words[2] = 0;
                          v592->__r_.__value_.__r.__words[0] = 0;
                          v595 = HIBYTE(v1389.__r_.__value_.__r.__words[2]);
                          if ((*((_BYTE *)&v1389.__r_.__value_.__s + 23) & 0x80) != 0)
                          {
                            v595 = (v1389.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                            if (v1389.__r_.__value_.__l.__size_ == v595)
                            {
                              if ((v1389.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                                abort();
                              v596 = (std::string *)v1389.__r_.__value_.__r.__words[0];
                              v597 = 0x7FFFFFFFFFFFFFF7;
                              if (v595 <= 0x3FFFFFFFFFFFFFF2)
                              {
LABEL_782:
                                if (v595 + 1 > 2 * v595)
                                  v598 = v595 + 1;
                                else
                                  v598 = 2 * v595;
                                if (v598 >= 0x17)
                                {
                                  v600 = (v598 & 0x7FFFFFFFFFFFFFF8) + 8;
                                  v601 = v598 | 7;
                                  if (v601 == 23)
                                    v601 = v600;
                                  v597 = v601 + 1;
                                }
                                else
                                {
                                  v597 = 23;
                                }
                              }
                              v602 = (std::string *)operator new(v597);
                              v599 = v602;
                              if (!v595 || (memmove(v602, v596, v595), v595 != 22))
                                operator delete(v596);
                              v1389.__r_.__value_.__r.__words[0] = (std::string::size_type)v599;
                              v1389.__r_.__value_.__r.__words[2] = v597 | 0x8000000000000000;
                            }
                            else
                            {
                              v595 = v1389.__r_.__value_.__l.__size_;
                              v599 = (std::string *)v1389.__r_.__value_.__r.__words[0];
                            }
                            v1389.__r_.__value_.__l.__size_ = v595 + 1;
                          }
                          else
                          {
                            if (HIBYTE(v1389.__r_.__value_.__r.__words[2]) == 22)
                            {
                              v596 = &v1389;
                              v595 = 22;
                              goto LABEL_782;
                            }
                            *((_BYTE *)&v1389.__r_.__value_.__s + 23) = (*((_BYTE *)&v1389.__r_.__value_.__s + 23) + 1) & 0x7F;
                            v599 = &v1389;
                          }
                          *(_WORD *)((char *)&v599->__r_.__value_.__l.__data_ + v595) = 10;
                          v603 = *(double *)&v1389.__r_.__value_.__l.__data_;
                          __dst = v1389;
                          memset(&v1389, 0, sizeof(v1389));
                          if (SHIBYTE(v1386.__r_.__value_.__r.__words[2]) < 0)
                          {
                            operator delete(v1386.__r_.__value_.__l.__data_);
                            if (SHIBYTE(v1388.__r_.__value_.__r.__words[2]) < 0)
                              goto LABEL_810;
LABEL_799:
                            if (SHIBYTE(v1387.__r_.__value_.__r.__words[2]) < 0)
LABEL_811:
                              operator delete(v1387.__r_.__value_.__l.__data_);
                          }
                          else
                          {
                            if ((SHIBYTE(v1388.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                              goto LABEL_799;
LABEL_810:
                            operator delete(v1388.__r_.__value_.__l.__data_);
                            if (SHIBYTE(v1387.__r_.__value_.__r.__words[2]) < 0)
                              goto LABEL_811;
                          }
                          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v604 = (int8x16_t *)&__dst;
                          else
                            v604 = (int8x16_t *)__dst.__r_.__value_.__r.__words[0];
                          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v605 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                          else
                            v605 = __dst.__r_.__value_.__l.__size_;
                          ggl::DebugConsole::drawString((uint64_t)v542, v604, v605, v603, v593);
                          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                          {
                            operator delete(__dst.__r_.__value_.__l.__data_);
                            v606 = (_QWORD *)*((_QWORD *)v582 + 1);
                            if (v606)
                              goto LABEL_813;
                            do
                            {
LABEL_815:
                              v607 = (_BYTE *)*((_QWORD *)v582 + 2);
                              _ZF = *(_QWORD *)v607 == (_QWORD)v582;
                              v582 = v607;
                            }
                            while (!_ZF);
                          }
                          else
                          {
                            v606 = (_QWORD *)*((_QWORD *)v582 + 1);
                            if (!v606)
                              goto LABEL_815;
                            do
                            {
LABEL_813:
                              v607 = v606;
                              v606 = (_QWORD *)*v606;
                            }
                            while (v606);
                          }
                          v582 = v607;
                          if (v607 == &v1390[8])
                            break;
                          continue;
                        }
                      }
                      v542[4] = (float32x2_t)0x41F0000041C00000;
                      v542[13].i32[0] = 1069547520;
                      v608 = *(float **)(v581 + 928);
                      for (k = *(float **)(v581 + 936); v608 != k; v608 += 10)
                      {
                        v617 = *(unsigned int *)v608;
                        if (v617 <= 6)
                        {
                          v618 = 4 * v617;
                          v3 = *(float *)((char *)&unk_1A001A2C8 + v618);
                          v4 = *(float *)((char *)&unk_1A001A2E4 + v618);
                          v552.i32[0] = *(_DWORD *)((char *)&unk_1A001A300 + v618);
                        }
                        v542[12].i8[0] = (int)(float)(v3 * 255.0);
                        v542[12].i8[1] = (int)(float)(v4 * 255.0);
                        v542[12].i8[2] = (int)(float)(v552.f32[0] * 255.0);
                        v542[12].i8[3] = -1;
                        v610 = vmul_n_f32(vmla_n_f32(vmla_n_f32(vmla_n_f32(v1310, v1318, v608[1]), v557, v608[2]), v573, v608[3]), 1.0/ (float)((float)((float)(v560 + (float)(v608[1] * v1333)) + (float)(v608[2] * v1323))+ (float)(v608[3] * v572)));
                        v611.i32[0] = vadd_f32(v610, __sba).u32[0];
                        v611.i32[1] = vsub_f32(__sba, v610).i32[1];
                        *(float32x2_t *)&v612 = vmul_f32(v611, v1302);
                        v613 = vmul_n_f32(vmla_n_f32(vmla_n_f32(vmla_n_f32(v1310, v1318, v608[4]), v557, v608[5]), v573, v608[6]), 1.0/ (float)((float)((float)(v560 + (float)(v608[4] * v1333)) + (float)(v608[5] * v1323))+ (float)(v608[6] * v572)));
                        v614.i32[0] = vadd_f32(v613, __sba).u32[0];
                        v614.i32[1] = vsub_f32(__sba, v613).i32[1];
                        *((float32x2_t *)&v612 + 1) = vmul_f32(v614, v1302);
                        v615 = vmul_n_f32(vmla_n_f32(vmla_n_f32(vmla_n_f32(v1310, v1318, v608[7]), v557, v608[8]), v573, v608[9]), 1.0/ (float)((float)((float)(v560 + (float)(v608[7] * v1333)) + (float)(v608[8] * v1323))+ (float)(v608[9] * v572)));
                        v616.i32[0] = vadd_f32(v615, __sba).u32[0];
                        v616.i32[1] = vsub_f32(__sba, v615).i32[1];
                        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v612;
                        v2 = COERCE_DOUBLE(vmul_f32(v616, v1302));
                        *(double *)&__dst.__r_.__value_.__r.__words[2] = v2;
                        v542[1] = vmul_f32(vadd_f32(vadd_f32(*(float32x2_t *)((char *)&v612 + 8), *(float32x2_t *)&v612), *(float32x2_t *)&v2), v1280);
                        ggl::DebugConsole::drawSymbol(v542, 0);
                        *(double *)&v542[1] = v2;
                        ggl::DebugConsole::drawLine((uint64_t)v542, (float *)&__dst);
                        ggl::DebugConsole::drawLine((uint64_t)v542, (float *)&__dst.__r_.__value_.__r.__words[1]);
                        ggl::DebugConsole::drawLine((uint64_t)v542, (float *)&__dst.__r_.__value_.__r.__words[2]);
                      }
                      v542[13].i32[0] = 1056964608;
                      v542[4] = (float32x2_t)0x4120000041000000;
                      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)&v1390[8]);
                    }
                    __b[0].f64[0] = v1246;
                    *(_QWORD *)((char *)__b[0].f64 + *(_QWORD *)(*(_QWORD *)&v1246 - 24)) = v1245;
                    v470 = v1242;
                    __b[1].f64[0] = v1243;
                    *(_QWORD *)&__b[1].f64[1] = MEMORY[0x1E0DE4FB8] + 16;
                    if ((v1394[31] & 0x80000000) != 0)
                      operator delete(*(void **)&v1394[8]);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x1A1AF4D64](v1395);
                    v619 = v1268 + 144;
                    if (v1268 + 144 != v1274)
                    {
                      while (!*(_QWORD *)(v619 + 112))
                      {
                        v619 += 144;
                        if (v619 == v1274)
                        {
                          v619 = v1274;
                          break;
                        }
                      }
                    }
                    *((_QWORD *)&v471 + 1) = v1274;
                    *(_QWORD *)&v471 = v619;
                    goto LABEL_615;
                  }
                }
                else
                {
                  if (v548 >= *(_QWORD *)&v540)
                    v548 %= *(_QWORD *)&v540;
                  if (v548 != v543)
                    goto LABEL_747;
                }
                v546 = (_QWORD *)*v546;
                if (!v546)
                  goto LABEL_747;
              }
            }
            if ((v1394[40] & 0x10) != 0)
            {
              v525 = *(double *)&v1394[32];
              v526 = &__b[4];
              if (*(_QWORD *)&v1394[32] < *(_QWORD *)&__b[4].f64[1])
              {
                *(float64_t *)&v1394[32] = __b[4].f64[1];
                v525 = __b[4].f64[1];
                v526 = &__b[4];
              }
            }
            else
            {
              if ((v1394[40] & 8) == 0)
              {
                v521 = 0;
                v1390[23] = 0;
                v522 = v1390;
                goto LABEL_717;
              }
              v525 = __b[3].f64[1];
              v526 = (float64x2_t *)&__b[2].f64[1];
            }
            v532 = v526->f64[0];
            v521 = *(_QWORD *)&v525 - *(_QWORD *)&v526->f64[0];
            if (v521 > 0x7FFFFFFFFFFFFFF7)
              abort();
            if (v521 >= 0x17)
            {
              v533 = (v521 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v521 | 7) != 0x17)
                v533 = v521 | 7;
              v534 = v533 + 1;
              v522 = operator new(v533 + 1);
              *(_QWORD *)&v1390[16] = v534 | 0x8000000000000000;
              *(_QWORD *)v1390 = v522;
              *(_QWORD *)&v1390[8] = v521;
            }
            else
            {
              v1390[23] = LOBYTE(v525) - LOBYTE(v526->f64[0]);
              v522 = v1390;
              if (!v521)
                goto LABEL_717;
            }
            memmove(v522, *(const void **)&v532, v521);
LABEL_717:
            v522[v521] = 0;
            if (v1390[23] >= 0)
              v535 = v1390;
            else
              v535 = *(_BYTE **)v1390;
            v531 = v1350;
            md::DebugRenderLayer::renderQuadTile((uint64_t)this, v1353, (QuadTile *)(v474 + 168), (float32x4_t *)&v1362, (uint64_t)v518, (uint64_t)v1350, (uint64_t)v535);
            goto LABEL_721;
          }
        }
        else if ((v1390[23] & 0x80000000) == 0)
        {
          goto LABEL_680;
        }
        operator delete(*(void **)v1390);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_681;
        goto LABEL_690;
      }
    }
    memmove(v506, v509, v505);
    goto LABEL_658;
  }
  v5 = v1353;
LABEL_832:
  if (objc_msgSend(v1284, "paintDaVinciBuildingTiles"))
  {
    v620 = (_QWORD *)*((_QWORD *)v5 + 1);
    v621 = (int8x8_t)v620[1];
    if (!*(_QWORD *)&v621)
      goto LABEL_853;
    v622 = (uint8x8_t)vcnt_s8(v621);
    v622.i16[0] = vaddlv_u8(v622);
    if (v622.u32[0] > 1uLL)
    {
      v623 = 0xF014CCE28176CA44;
      if (*(_QWORD *)&v621 <= 0xF014CCE28176CA44)
        v623 = 0xF014CCE28176CA44 % *(_QWORD *)&v621;
    }
    else
    {
      v623 = (*(_QWORD *)&v621 - 1) & 0xF014CCE28176CA44;
    }
    v624 = *(_QWORD **)(*v620 + 8 * v623);
    if (!v624 || (v625 = (_QWORD *)*v624) == 0)
    {
LABEL_853:
      v629 = 0;
      goto LABEL_854;
    }
    if (v622.u32[0] < 2uLL)
    {
      v626 = *(_QWORD *)&v621 - 1;
      while (1)
      {
        v628 = v625[1];
        if (v628 == 0xF014CCE28176CA44)
        {
          if (v625[2] == 0xF014CCE28176CA44)
            goto LABEL_1590;
        }
        else if ((v628 & v626) != v623)
        {
          goto LABEL_853;
        }
        v625 = (_QWORD *)*v625;
        if (!v625)
          goto LABEL_853;
      }
    }
    while (1)
    {
      v627 = v625[1];
      if (v627 == 0xF014CCE28176CA44)
      {
        if (v625[2] == 0xF014CCE28176CA44)
        {
LABEL_1590:
          v1240 = v625[5];
          if (*(_QWORD *)(v1240 + 8) == 0xF014CCE28176CA44)
            v629 = *(_QWORD **)(v1240 + 32);
          else
            v629 = 0;
          v5 = v1353;
LABEL_854:
          md::SceneContext::renderData((md::SceneContext *)v1390, *v1256, 54);
          v630 = *(_OWORD *)v1390;
          v631 = *(_QWORD *)&v1390[16];
          v1311 = *MEMORY[0x1E0DE4F50];
          v1303 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
          v1294 = *(double *)(MEMORY[0x1E0DE4F50] + 72);
          v1281 = MEMORY[0x1E0DE4FB8] + 16;
LABEL_856:
          v1344 = *((_QWORD *)&v630 + 1);
          v632 = v630;
          if ((_QWORD)v630 == v631)
            break;
          v633 = *(_QWORD *)(v630 + 112);
          if (v629)
          {
            v634 = md::MeshRenderableContext::renderablesForRegistry(v629, *(_QWORD *)(v633 + 1320));
            v635 = (v634[1] - *v634) >> 3;
            v636 = *(_QWORD *)(v633 + 1320);
            v637 = *(_QWORD *)(v636 + 48);
            v638 = *(_QWORD *)(v636 + 56) - v637;
            if (v638)
            {
              v639 = v638 >> 3;
              if (v639 <= 1)
                v639 = 1;
              if (v639 < 2)
              {
                v640 = 0;
                v641 = 0;
                goto LABEL_872;
              }
              v642 = 0;
              v643 = 0;
              v641 = v639 & 0xFFFFFFFFFFFFFFFELL;
              v644 = (int *)(v637 + 12);
              v645 = v639 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v646 = *(v644 - 2);
                v648 = *v644;
                v644 += 4;
                v647 = v648;
                if (v646 != -1)
                  ++v642;
                if (v647 != -1)
                  ++v643;
                v645 -= 2;
              }
              while (v645);
              v640 = v643 + v642;
              if (v639 != v641)
              {
LABEL_872:
                v649 = v639 - v641;
                v650 = (int *)(v637 + 8 * v641 + 4);
                do
                {
                  v651 = *v650;
                  v650 += 2;
                  if (v651 != -1)
                    ++v640;
                  --v649;
                }
                while (v649);
              }
            }
            else
            {
              v640 = 0;
            }
          }
          else
          {
            v640 = 0;
            v635 = 0;
          }
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)__b);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>((float64x2_t *)__b[1].f64, (uint64_t)"\nr:", 3);
          std::to_string(&__dst, v635);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v652 = &__dst;
          else
            v652 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v653 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          else
            v653 = __dst.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>((float64x2_t *)__b[1].f64, (uint64_t)v652, v653);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>((float64x2_t *)__b[1].f64, (uint64_t)"\ne:", 3);
          std::to_string(&v1356, v640);
          if ((v1356.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v654 = &v1356;
          else
            v654 = (std::string *)v1356.__r_.__value_.__r.__words[0];
          if ((v1356.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v655 = HIBYTE(v1356.__r_.__value_.__r.__words[2]);
          else
            v655 = v1356.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>((float64x2_t *)__b[1].f64, (uint64_t)v654, v655);
          if (SHIBYTE(v1356.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1356.__r_.__value_.__l.__data_);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          *(_OWORD *)&v1356.__r_.__value_.__l.__data_ = xmmword_19FFB4810;
          v656 = v1385;
          if ((v1394[40] & 0x10) != 0)
          {
            v659 = *(double *)&v1394[32];
            v660 = &__b[4];
            if (*(_QWORD *)&v1394[32] < *(_QWORD *)&__b[4].f64[1])
            {
              *(float64_t *)&v1394[32] = __b[4].f64[1];
              v659 = __b[4].f64[1];
              v660 = &__b[4];
            }
          }
          else
          {
            if ((v1394[40] & 8) == 0)
            {
              v657 = 0;
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
              v658 = &__dst;
LABEL_907:
              v658->__r_.__value_.__s.__data_[v657] = 0;
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v666 = &__dst;
              else
                v666 = (std::string *)__dst.__r_.__value_.__r.__words[0];
              md::DebugRenderLayer::renderQuadTile((uint64_t)this, v5, (QuadTile *)(v633 + 168), (float32x4_t *)&v1356, (uint64_t)v656, (uint64_t)v1350, (uint64_t)v666);
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__dst.__r_.__value_.__l.__data_);
              __b[0].f64[0] = v1311;
              *(_QWORD *)((char *)__b[0].f64 + *(_QWORD *)(*(_QWORD *)&v1311 - 24)) = v1303;
              __b[1].f64[0] = v1294;
              *(_QWORD *)&__b[1].f64[1] = v1281;
              if ((v1394[31] & 0x80000000) != 0)
                operator delete(*(void **)&v1394[8]);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x1A1AF4D64](v1395);
              v667 = v632 + 144;
              if (v632 + 144 != v1344)
              {
                while (!*(_QWORD *)(v667 + 112))
                {
                  v667 += 144;
                  if (v667 == v1344)
                  {
                    v667 = v1344;
                    break;
                  }
                }
              }
              *((_QWORD *)&v630 + 1) = v1344;
              *(_QWORD *)&v630 = v667;
              goto LABEL_856;
            }
            v659 = __b[3].f64[1];
            v660 = (float64x2_t *)&__b[2].f64[1];
          }
          v661 = v660->f64[0];
          v657 = *(_QWORD *)&v659 - *(_QWORD *)&v660->f64[0];
          if (v657 > 0x7FFFFFFFFFFFFFF7)
            abort();
          if (v657 >= 0x17)
          {
            v662 = v631;
            v663 = v629;
            v664 = (v657 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v657 | 7) != 0x17)
              v664 = v657 | 7;
            v665 = v664 + 1;
            v658 = (std::string *)operator new(v664 + 1);
            __dst.__r_.__value_.__r.__words[2] = v665 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v658;
            __dst.__r_.__value_.__l.__size_ = v657;
            v629 = v663;
            v631 = v662;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = LOBYTE(v659) - LOBYTE(v660->f64[0]);
            v658 = &__dst;
            if (!v657)
              goto LABEL_906;
          }
          memmove(v658, *(const void **)&v661, v657);
LABEL_906:
          v5 = v1353;
          goto LABEL_907;
        }
      }
      else
      {
        if (v627 >= *(_QWORD *)&v621)
          v627 %= *(_QWORD *)&v621;
        if (v627 != v623)
          goto LABEL_853;
      }
      v625 = (_QWORD *)*v625;
      if (!v625)
        goto LABEL_853;
    }
  }
  if (objc_msgSend(v1284, "paintDrapedPolygons"))
  {
    v668 = (_QWORD *)*((_QWORD *)v5 + 1);
    v669 = (int8x8_t)v668[1];
    if (!*(_QWORD *)&v669)
      goto LABEL_939;
    v670 = (uint8x8_t)vcnt_s8(v669);
    v670.i16[0] = vaddlv_u8(v670);
    if (v670.u32[0] > 1uLL)
    {
      v671 = 0x1B9039CBDAB12E5CLL;
      if (*(_QWORD *)&v669 <= 0x1B9039CBDAB12E5CuLL)
        v671 = 0x1B9039CBDAB12E5CuLL % *(_QWORD *)&v669;
    }
    else
    {
      v671 = (*(_QWORD *)&v669 - 1) & 0x1B9039CBDAB12E5CLL;
    }
    v672 = *(_QWORD **)(*v668 + 8 * v671);
    if (!v672 || (v673 = (_QWORD *)*v672) == 0)
    {
LABEL_939:
      v1247 = 0;
      goto LABEL_940;
    }
    if (v670.u32[0] < 2uLL)
    {
      v674 = *(_QWORD *)&v669 - 1;
      while (1)
      {
        v676 = v673[1];
        if (v676 == 0x1B9039CBDAB12E5CLL)
        {
          if (v673[2] == 0x1B9039CBDAB12E5CLL)
            goto LABEL_1592;
        }
        else if ((v676 & v674) != v671)
        {
          goto LABEL_939;
        }
        v673 = (_QWORD *)*v673;
        if (!v673)
          goto LABEL_939;
      }
    }
    while (1)
    {
      v675 = v673[1];
      if (v675 == 0x1B9039CBDAB12E5CLL)
      {
        if (v673[2] == 0x1B9039CBDAB12E5CLL)
        {
LABEL_1592:
          v1241 = v673[5];
          if (*(_QWORD *)(v1241 + 8) == 0x1B9039CBDAB12E5CLL)
            v1247 = *(_QWORD *)(v1241 + 32);
          else
            v1247 = 0;
          v5 = v1353;
LABEL_940:
          v1363 = xmmword_19FFB3480;
          md::SceneContext::renderData((md::SceneContext *)&v1356, *v1256, 58);
          v677 = *(__n128 *)&v1356.__r_.__value_.__l.__data_;
          v1248 = v1356.__r_.__value_.__r.__words[2];
          v1312 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
          v1304 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
          v1272 = *(double *)(MEMORY[0x1E0DE4F50] + 16);
          v1269 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
          v1264 = *(double *)(MEMORY[0x1E0DE4F50] + 32);
          v1262 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 40);
          v1295 = *MEMORY[0x1E0DE4F50];
          v1260 = *(double *)(MEMORY[0x1E0DE4F50] + 8);
          v1258 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 48);
          v1244 = MEMORY[0x1E0DE4FB8] + 16;
LABEL_942:
          if (v677.n128_u64[0] == v1248)
            break;
          v1251 = v677;
          v679 = *(_QWORD *)(v677.n128_u64[0] + 112);
          v678 = *(_QWORD *)(v677.n128_u64[0] + 120);
          v1249 = v677.n128_u64[0];
          *(_QWORD *)&v1362 = v679;
          *((_QWORD *)&v1362 + 1) = v678;
          if (v678)
          {
            v680 = (unint64_t *)(v678 + 8);
            do
              v681 = __ldxr(v680);
            while (__stxr(v681 + 1, v680));
          }
          v682 = *(unsigned __int8 *)(v679 + 169);
          v683 = *(unsigned __int8 *)(v679 + 168);
          v1388.__r_.__value_.__s.__data_[0] = *(_BYTE *)(v679 + 168);
          v1388.__r_.__value_.__s.__data_[1] = v682;
          v1324 = *(_QWORD *)(v679 + 172);
          *(std::string::size_type *)((char *)v1388.__r_.__value_.__r.__words + 4) = v1324;
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)&__dst);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__dst.__r_.__value_.__r.__words[2], (uint64_t)"stroke groups : ", 16);
          v684 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v684, (uint64_t)"\ndraped: ", 9);
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v1390);
          v685 = *(uint64_t **)(*(_QWORD *)(v1247 + 16) + 16);
          if (v685)
          {
            v686 = v1324;
            v1288 = v683;
            v1282 = v682;
            while (1)
            {
              v687 = (uint64_t *)v685[8];
              if (v687)
                break;
LABEL_948:
              v685 = (uint64_t *)*v685;
              if (!v685)
                goto LABEL_1102;
            }
            while (2)
            {
              if (*((unsigned __int8 *)v687 + 16) != v683
                || *((unsigned __int8 *)v687 + 17) != v682
                || *(uint64_t *)((char *)v687 + 20) != __PAIR64__(HIDWORD(v1324), v686)
                || *((_WORD *)v687 + 20) != 58)
              {
                goto LABEL_953;
              }
              MEMORY[0x1A1AF49E0](&v1359, &v1390[16]);
              v688 = MEMORY[0x1E0DE4FD0];
              if (v1359.__r_.__value_.__s.__data_[0])
              {
                v689 = (const std::ios_base *)&v1390[*(_QWORD *)(*(_QWORD *)&v1390[16] - 24) + 16];
                rdbuf = v689->__rdbuf_;
                fmtflags = v689->__fmtflags_;
                v692 = v689[1].__fmtflags_;
                if (v692 == -1)
                {
                  std::ios_base::getloc(v689);
                  v693 = std::locale::use_facet((const std::locale *)__b, MEMORY[0x1E0DE4A90]);
                  v692 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v693->__vftable[2].~facet_0)(v693, 32);
                  std::locale::~locale((std::locale *)__b);
                  v689[1].__fmtflags_ = v692;
                }
                if ((fmtflags & 0xB0) == 0x20)
                  v694 = "";
                else
                  v694 = "\n";
                if (!rdbuf)
                  goto LABEL_987;
                width = v689->__width_;
                v696 = width <= 1;
                v697 = width - 1;
                v698 = v696 ? 0 : v697;
                if (v694 - "\n" >= 1
                  && (*(uint64_t (**)(void *, const char *, int64_t))(*(_QWORD *)rdbuf + 96))(rdbuf, "\n", v694 - "\n") != v694 - "\n")
                {
                  goto LABEL_987;
                }
                if ((uint64_t)v698 >= 1)
                {
                  if (v698 > 0x7FFFFFFFFFFFFFF7)
                    abort();
                  if (v698 >= 0x17)
                  {
                    v700 = (v698 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v698 | 7) != 0x17)
                      v700 = v698 | 7;
                    v701 = v700 + 1;
                    v699 = (float64x2_t *)operator new(v700 + 1);
                    *(_QWORD *)&__b[1].f64[0] = v701 | 0x8000000000000000;
                    *(_QWORD *)&__b[0].f64[0] = v699;
                    *(_QWORD *)&__b[0].f64[1] = v698;
                  }
                  else
                  {
                    HIBYTE(__b[1].f64[0]) = v698;
                    v699 = __b;
                  }
                  memset(v699, v692, v698);
                  *((_BYTE *)v699->f64 + v698) = 0;
                  if (__b[1].f64[0] >= 0.0)
                    v702 = COERCE_DOUBLE(__b);
                  else
                    v702 = __b[0].f64[0];
                  v703 = (*(uint64_t (**)(void *, float64_t, size_t))(*(_QWORD *)rdbuf + 96))(rdbuf, COERCE_FLOAT64_T(*(_QWORD *)&v702), v698);
                  v704 = v703;
                  if (SHIBYTE(__b[1].f64[0]) < 0)
                  {
                    operator delete(*(void **)&__b[0].f64[0]);
                    if (v704 != v698)
                      goto LABEL_987;
                  }
                  else if (v703 != v698)
                  {
                    goto LABEL_987;
                  }
                }
                v705 = "\n" - v694 + 1;
                if (v705 < 1
                  || (*(uint64_t (**)(void *, char *, int64_t))(*(_QWORD *)rdbuf + 96))(rdbuf, v694, "\n" - v694 + 1) == v705)
                {
                  v689->__width_ = 0;
                }
                else
                {
LABEL_987:
                  std::ios_base::clear((std::ios_base *)&v1390[*(_QWORD *)(*(_QWORD *)&v1390[16] - 24) + 16], *(_DWORD *)&v1391[*(_QWORD *)(*(_QWORD *)&v1390[16] - 24) + 16] | 5);
                }
              }
              MEMORY[0x1A1AF49EC](&v1359);
              LOWORD(v1389.__r_.__value_.__l.__data_) = *((_WORD *)v685 + 8);
              v706 = v685;
              *(std::string::size_type *)((char *)v1389.__r_.__value_.__r.__words + 4) = *(uint64_t *)((char *)v685 + 20);
              v1395[0] = v688 + 104;
              *(_QWORD *)&__b[1].f64[0] = v688 + 64;
              __b[0].f64[0] = v1272;
              *(_QWORD *)((char *)__b[0].f64 + *(_QWORD *)(*(_QWORD *)&v1272 - 24)) = v1269;
              __b[0].f64[1] = 0.0;
              v707 = (std::ios_base *)((char *)__b + *(_QWORD *)(*(_QWORD *)&__b[0].f64[0] - 24));
              std::ios_base::init(v707, &__b[1].f64[1]);
              v707[1].__vftable = 0;
              v707[1].__fmtflags_ = -1;
              __b[1].f64[0] = v1264;
              *(_QWORD *)((char *)__b[1].f64 + *(_QWORD *)(*(_QWORD *)&v1264 - 24)) = v1262;
              __b[0].f64[0] = v1260;
              *(_QWORD *)((char *)__b[0].f64 + *(_QWORD *)(*(_QWORD *)&v1260 - 24)) = v1258;
              v1395[0] = v688 + 104;
              *(_QWORD *)&__b[0].f64[0] = v688 + 24;
              *(_QWORD *)&__b[1].f64[0] = v688 + 64;
              std::streambuf::basic_streambuf();
              *(_QWORD *)&__b[1].f64[1] = MEMORY[0x1E0DE4FB8] + 16;
              memset(&v1394[8], 0, 32);
              *(_DWORD *)&v1394[40] = 24;
              md::outputDebugString(&v1389, (float64x2_t *)__b[1].f64);
              if ((v1394[40] & 0x10) != 0)
              {
                v710 = *(double *)&v1394[32];
                v711 = &__b[4];
                if (*(_QWORD *)&v1394[32] < *(_QWORD *)&__b[4].f64[1])
                {
                  *(float64_t *)&v1394[32] = __b[4].f64[1];
                  v710 = __b[4].f64[1];
                  v711 = &__b[4];
                }
              }
              else
              {
                if ((v1394[40] & 8) == 0)
                {
                  v708 = 0;
                  *((_BYTE *)&v1359.__r_.__value_.__s + 23) = 0;
                  v709 = &v1359;
                  goto LABEL_1002;
                }
                v710 = __b[3].f64[1];
                v711 = (float64x2_t *)&__b[2].f64[1];
              }
              v712 = v711->f64[0];
              v708 = *(_QWORD *)&v710 - *(_QWORD *)&v711->f64[0];
              if (v708 > 0x7FFFFFFFFFFFFFF7)
                abort();
              if (v708 >= 0x17)
              {
                v713 = (v708 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v708 | 7) != 0x17)
                  v713 = v708 | 7;
                v714 = v713 + 1;
                v709 = (std::string *)operator new(v713 + 1);
                v1359.__r_.__value_.__r.__words[2] = v714 | 0x8000000000000000;
                v1359.__r_.__value_.__r.__words[0] = (std::string::size_type)v709;
                v1359.__r_.__value_.__l.__size_ = v708;
              }
              else
              {
                *((_BYTE *)&v1359.__r_.__value_.__s + 23) = LOBYTE(v710) - LOBYTE(v711->f64[0]);
                v709 = &v1359;
                if (!v708)
                {
LABEL_1002:
                  v709->__r_.__value_.__s.__data_[v708] = 0;
                  *(_QWORD *)&__b[0].f64[0] = v1295;
                  *(_QWORD *)((char *)__b[0].f64 + *(_QWORD *)(v1295 - 24)) = v1312;
                  *(_QWORD *)&__b[1].f64[0] = v1304;
                  *(_QWORD *)&__b[1].f64[1] = MEMORY[0x1E0DE4FB8] + 16;
                  if ((v1394[31] & 0x80000000) != 0)
                    operator delete(*(void **)&v1394[8]);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x1A1AF4D64](v1395);
                  if ((v1359.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v715 = &v1359;
                  else
                    v715 = (std::string *)v1359.__r_.__value_.__r.__words[0];
                  if ((v1359.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v716 = HIBYTE(v1359.__r_.__value_.__r.__words[2]);
                  else
                    v716 = v1359.__r_.__value_.__l.__size_;
                  MEMORY[0x1A1AF49E0](&v1386, &v1390[16]);
                  if (v1386.__r_.__value_.__s.__data_[0])
                  {
                    v717 = (const std::ios_base *)&v1390[*(_QWORD *)(*(_QWORD *)&v1390[16] - 24) + 16];
                    v718 = v717->__rdbuf_;
                    v719 = v717->__fmtflags_;
                    v720 = v717[1].__fmtflags_;
                    if (v720 == -1)
                    {
                      std::ios_base::getloc(v717);
                      v721 = std::locale::use_facet((const std::locale *)__b, MEMORY[0x1E0DE4A90]);
                      v720 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v721->__vftable[2].~facet_0)(v721, 32);
                      std::locale::~locale((std::locale *)__b);
                      v717[1].__fmtflags_ = v720;
                    }
                    v722 = v719 & 0xB0;
                    v723 = (char *)v715 + v716;
                    if (v722 == 32)
                      v724 = (std::string *)((char *)v715 + v716);
                    else
                      v724 = v715;
                    if (!v718)
                      goto LABEL_1039;
                    v725 = v717->__width_;
                    v696 = v725 <= v716;
                    v726 = v725 - v716;
                    v727 = v696 ? 0 : v726;
                    v728 = (char *)v724 - (char *)v715;
                    if ((char *)v724 - (char *)v715 >= 1)
                    {
                      v729 = v724;
                      v730 = (*(uint64_t (**)(void *, std::string *, int64_t))(*(_QWORD *)v718 + 96))(v718, v715, v728);
                      v724 = v729;
                      if (v730 != v728)
                        goto LABEL_1039;
                    }
                    if ((uint64_t)v727 >= 1)
                    {
                      if (v727 > 0x7FFFFFFFFFFFFFF7)
                        abort();
                      v731 = v724;
                      if (v727 >= 0x17)
                      {
                        v733 = (v727 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v727 | 7) != 0x17)
                          v733 = v727 | 7;
                        v734 = v733 + 1;
                        v732 = (float64x2_t *)operator new(v733 + 1);
                        *(_QWORD *)&__b[1].f64[0] = v734 | 0x8000000000000000;
                        *(_QWORD *)&__b[0].f64[0] = v732;
                        *(_QWORD *)&__b[0].f64[1] = v727;
                      }
                      else
                      {
                        HIBYTE(__b[1].f64[0]) = v727;
                        v732 = __b;
                      }
                      memset(v732, v720, v727);
                      *((_BYTE *)v732->f64 + v727) = 0;
                      if (__b[1].f64[0] >= 0.0)
                        v735 = COERCE_DOUBLE(__b);
                      else
                        v735 = __b[0].f64[0];
                      v736 = (*(uint64_t (**)(void *, float64_t, size_t))(*(_QWORD *)v718 + 96))(v718, COERCE_FLOAT64_T(*(_QWORD *)&v735), v727);
                      v737 = v736;
                      v724 = v731;
                      if (SHIBYTE(__b[1].f64[0]) < 0)
                      {
                        operator delete(*(void **)&__b[0].f64[0]);
                        v724 = v731;
                        if (v737 != v727)
                          goto LABEL_1039;
                      }
                      else if (v736 != v727)
                      {
                        goto LABEL_1039;
                      }
                    }
                    if (v723 - (char *)v724 < 1
                      || (*(uint64_t (**)(void *))(*(_QWORD *)v718 + 96))(v718) == v723 - (char *)v724)
                    {
                      v717->__width_ = 0;
                    }
                    else
                    {
LABEL_1039:
                      std::ios_base::clear((std::ios_base *)&v1390[*(_QWORD *)(*(_QWORD *)&v1390[16] - 24) + 16], *(_DWORD *)&v1391[*(_QWORD *)(*(_QWORD *)&v1390[16] - 24) + 16] | 5);
                    }
                  }
                  MEMORY[0x1A1AF49EC](&v1386);
                  MEMORY[0x1A1AF49E0](&v1386, &v1390[16]);
                  v685 = v706;
                  if (v1386.__r_.__value_.__s.__data_[0])
                  {
                    v738 = (const std::ios_base *)&v1390[*(_QWORD *)(*(_QWORD *)&v1390[16] - 24) + 16];
                    v739 = v738->__rdbuf_;
                    v740 = v738->__fmtflags_;
                    v741 = v738[1].__fmtflags_;
                    if (v741 == -1)
                    {
                      std::ios_base::getloc(v738);
                      v742 = std::locale::use_facet((const std::locale *)__b, MEMORY[0x1E0DE4A90]);
                      v741 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v742->__vftable[2].~facet_0)(v742, 32);
                      std::locale::~locale((std::locale *)__b);
                      v738[1].__fmtflags_ = v741;
                    }
                    if ((v740 & 0xB0) == 0x20)
                      v743 = "";
                    else
                      v743 = ":";
                    if (!v739)
                      goto LABEL_1069;
                    v744 = v738->__width_;
                    v696 = v744 <= 1;
                    v745 = v744 - 1;
                    v746 = v696 ? 0 : v745;
                    if (v743 - ":" >= 1
                      && (*(uint64_t (**)(void *, const char *, int64_t))(*(_QWORD *)v739 + 96))(v739, ":", v743 - ":") != v743 - ":")
                    {
                      goto LABEL_1069;
                    }
                    if ((uint64_t)v746 >= 1)
                    {
                      if (v746 > 0x7FFFFFFFFFFFFFF7)
                        abort();
                      if (v746 >= 0x17)
                      {
                        v748 = (v746 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v746 | 7) != 0x17)
                          v748 = v746 | 7;
                        v749 = v748 + 1;
                        v747 = (float64x2_t *)operator new(v748 + 1);
                        *(_QWORD *)&__b[1].f64[0] = v749 | 0x8000000000000000;
                        *(_QWORD *)&__b[0].f64[0] = v747;
                        *(_QWORD *)&__b[0].f64[1] = v746;
                      }
                      else
                      {
                        HIBYTE(__b[1].f64[0]) = v746;
                        v747 = __b;
                      }
                      memset(v747, v741, v746);
                      *((_BYTE *)v747->f64 + v746) = 0;
                      if (__b[1].f64[0] >= 0.0)
                        v750 = COERCE_DOUBLE(__b);
                      else
                        v750 = __b[0].f64[0];
                      v751 = (*(uint64_t (**)(void *, float64_t, size_t))(*(_QWORD *)v739 + 96))(v739, COERCE_FLOAT64_T(*(_QWORD *)&v750), v746);
                      v752 = v751;
                      if (SHIBYTE(__b[1].f64[0]) < 0)
                      {
                        operator delete(*(void **)&__b[0].f64[0]);
                        if (v752 != v746)
                          goto LABEL_1069;
                      }
                      else if (v751 != v746)
                      {
                        goto LABEL_1069;
                      }
                    }
                    v753 = ":" - v743 + 1;
                    if (v753 < 1
                      || (*(uint64_t (**)(void *, char *, int64_t))(*(_QWORD *)v739 + 96))(v739, v743, ":" - v743 + 1) == v753)
                    {
                      v738->__width_ = 0;
                    }
                    else
                    {
LABEL_1069:
                      std::ios_base::clear((std::ios_base *)&v1390[*(_QWORD *)(*(_QWORD *)&v1390[16] - 24) + 16], *(_DWORD *)&v1391[*(_QWORD *)(*(_QWORD *)&v1390[16] - 24) + 16] | 5);
                    }
                  }
                  MEMORY[0x1A1AF49EC](&v1386);
                  v686 = v1324;
                  if (SHIBYTE(v1359.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v1359.__r_.__value_.__l.__data_);
                  v754 = atomic_load((unsigned __int8 *)v687[8]);
                  v755 = v754 - 1;
                  v756 = "Pending";
                  if (v755 <= 2u)
                    v756 = off_1E42EF1D8[v755];
                  v757 = strlen(v756);
                  MEMORY[0x1A1AF49E0](&v1359, &v1390[16]);
                  if (v1359.__r_.__value_.__s.__data_[0])
                  {
                    v758 = (const std::ios_base *)&v1390[*(_QWORD *)(*(_QWORD *)&v1390[16] - 24) + 16];
                    v759 = v758->__rdbuf_;
                    v760 = v758->__fmtflags_;
                    v761 = v758[1].__fmtflags_;
                    if (v761 == -1)
                    {
                      std::ios_base::getloc(v758);
                      v762 = std::locale::use_facet((const std::locale *)__b, MEMORY[0x1E0DE4A90]);
                      v761 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v762->__vftable[2].~facet_0)(v762, 32);
                      std::locale::~locale((std::locale *)__b);
                      v758[1].__fmtflags_ = v761;
                    }
                    v763 = v760 & 0xB0;
                    v764 = &v756[v757];
                    if (v763 == 32)
                      v765 = &v756[v757];
                    else
                      v765 = v756;
                    if (!v759)
                      goto LABEL_951;
                    v766 = v758->__width_;
                    v696 = v766 <= v757;
                    v767 = v766 - v757;
                    v768 = v696 ? 0 : v767;
                    v769 = v765 - v756;
                    if (v765 - v756 >= 1)
                    {
                      v770 = v765;
                      v771 = (*(uint64_t (**)(void *, const char *, int64_t))(*(_QWORD *)v759 + 96))(v759, v756, v769);
                      v765 = v770;
                      if (v771 != v769)
                        goto LABEL_951;
                    }
                    if ((uint64_t)v768 >= 1)
                    {
                      if (v768 > 0x7FFFFFFFFFFFFFF7)
                        abort();
                      v772 = v765;
                      if (v768 >= 0x17)
                      {
                        v774 = (v768 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v768 | 7) != 0x17)
                          v774 = v768 | 7;
                        v775 = v774 + 1;
                        v773 = (float64x2_t *)operator new(v774 + 1);
                        *(_QWORD *)&__b[1].f64[0] = v775 | 0x8000000000000000;
                        *(_QWORD *)&__b[0].f64[0] = v773;
                        *(_QWORD *)&__b[0].f64[1] = v768;
                      }
                      else
                      {
                        HIBYTE(__b[1].f64[0]) = v768;
                        v773 = __b;
                      }
                      memset(v773, v761, v768);
                      *((_BYTE *)v773->f64 + v768) = 0;
                      if (__b[1].f64[0] >= 0.0)
                        v776 = COERCE_DOUBLE(__b);
                      else
                        v776 = __b[0].f64[0];
                      v777 = (*(uint64_t (**)(void *, float64_t, size_t))(*(_QWORD *)v759 + 96))(v759, COERCE_FLOAT64_T(*(_QWORD *)&v776), v768);
                      v765 = v772;
                      if (SHIBYTE(__b[1].f64[0]) < 0)
                      {
                        operator delete(*(void **)&__b[0].f64[0]);
                        v765 = v772;
                      }
                      if (v777 != v768)
                        goto LABEL_951;
                    }
                    if (v764 - v765 < 1
                      || (*(uint64_t (**)(void *))(*(_QWORD *)v759 + 96))(v759) == v764 - v765)
                    {
                      v758->__width_ = 0;
                      v686 = v1324;
                    }
                    else
                    {
LABEL_951:
                      std::ios_base::clear((std::ios_base *)&v1390[*(_QWORD *)(*(_QWORD *)&v1390[16] - 24) + 16], *(_DWORD *)&v1391[*(_QWORD *)(*(_QWORD *)&v1390[16] - 24) + 16] | 5);
                      v686 = v1324;
                    }
                  }
                  MEMORY[0x1A1AF49EC](&v1359);
                  v5 = v1353;
                  v682 = v1282;
                  v683 = v1288;
LABEL_953:
                  v687 = (uint64_t *)*v687;
                  if (!v687)
                    goto LABEL_948;
                  continue;
                }
              }
              break;
            }
            memmove(v709, *(const void **)&v712, v708);
            goto LABEL_1002;
          }
LABEL_1102:
          if ((v1391[88] & 0x10) != 0)
          {
            v781 = *(_QWORD *)&v1391[80];
            v782 = (const void **)&v1391[32];
            if (*(_QWORD *)&v1391[80] < *(_QWORD *)&v1391[40])
            {
              *(_QWORD *)&v1391[80] = *(_QWORD *)&v1391[40];
              v781 = *(_QWORD *)&v1391[40];
              v782 = (const void **)&v1391[32];
            }
          }
          else
          {
            if ((v1391[88] & 8) == 0)
            {
              v778 = 0;
              *((_BYTE *)&v1387.__r_.__value_.__s + 23) = 0;
              v779 = &v1387;
              v780 = (uint64_t)v1350;
              goto LABEL_1116;
            }
            v781 = *(_QWORD *)&v1391[24];
            v782 = (const void **)&v1391[8];
          }
          v783 = *v782;
          v778 = v781 - (_QWORD)*v782;
          if (v778 > 0x7FFFFFFFFFFFFFF7)
            abort();
          v780 = (uint64_t)v1350;
          if (v778 >= 0x17)
          {
            v784 = (v778 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v778 | 7) != 0x17)
              v784 = v778 | 7;
            v785 = v784 + 1;
            v779 = operator new(v784 + 1);
            v1387.__r_.__value_.__r.__words[2] = v785 | 0x8000000000000000;
            v1387.__r_.__value_.__r.__words[0] = (std::string::size_type)v779;
            v1387.__r_.__value_.__l.__size_ = v778;
          }
          else
          {
            *((_BYTE *)&v1387.__r_.__value_.__s + 23) = v781 - *(_BYTE *)v782;
            v779 = &v1387;
            if (!v778)
            {
LABEL_1116:
              v779[v778] = 0;
              *(_QWORD *)v1390 = v1295;
              *(_QWORD *)&v1390[*(_QWORD *)(v1295 - 24)] = v1312;
              *(_QWORD *)&v1390[16] = v1304;
              *(_QWORD *)&v1390[24] = v1244;
              if ((v1391[79] & 0x80000000) != 0)
                operator delete(*(void **)&v1391[56]);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x1A1AF4D64](&v1392);
              if ((v1387.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v786 = &v1387;
              else
                v786 = (std::string *)v1387.__r_.__value_.__r.__words[0];
              if ((v1387.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v787 = HIBYTE(v1387.__r_.__value_.__r.__words[2]);
              else
                v787 = v1387.__r_.__value_.__l.__size_;
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__dst.__r_.__value_.__r.__words[2], (uint64_t)v786, v787);
              if (SHIBYTE(v1387.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v1387.__r_.__value_.__l.__data_);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__dst.__r_.__value_.__r.__words[2], (uint64_t)"\nselected count : ", 18);
              std::ostream::operator<<();
              v788 = v1385;
              if ((v1409 & 0x10) != 0)
              {
                v791 = v1408;
                v792 = (const void **)&v1404;
                if (v1408 < v1405)
                {
                  v1408 = v1405;
                  v791 = v1405;
                  v792 = (const void **)&v1404;
                }
              }
              else
              {
                if ((v1409 & 8) == 0)
                {
                  v789 = 0;
                  HIBYTE(__b[1].f64[0]) = 0;
                  v790 = __b;
                  goto LABEL_1140;
                }
                v791 = v1403;
                v792 = (const void **)&v1400;
              }
              v793 = *v792;
              v789 = v791 - (_QWORD)*v792;
              if (v789 > 0x7FFFFFFFFFFFFFF7)
                abort();
              if (v789 >= 0x17)
              {
                v794 = (v789 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v789 | 7) != 0x17)
                  v794 = v789 | 7;
                v795 = v794 + 1;
                v790 = (float64x2_t *)operator new(v794 + 1);
                *(_QWORD *)&__b[1].f64[0] = v795 | 0x8000000000000000;
                *(_QWORD *)&__b[0].f64[0] = v790;
                *(_QWORD *)&__b[0].f64[1] = v789;
                v780 = (uint64_t)v1350;
              }
              else
              {
                HIBYTE(__b[1].f64[0]) = v791 - *(_BYTE *)v792;
                v790 = __b;
                if (!v789)
                {
LABEL_1140:
                  *((_BYTE *)v790->f64 + v789) = 0;
                  if (__b[1].f64[0] >= 0.0)
                    v796 = (uint64_t)__b;
                  else
                    v796 = *(_QWORD *)&__b[0].f64[0];
                  md::DebugRenderLayer::renderQuadTile((uint64_t)this, v5, (QuadTile *)&v1388, (float32x4_t *)&v1363, (uint64_t)v788, v780, v796);
                  if (SHIBYTE(__b[1].f64[0]) < 0)
                    operator delete(*(void **)&__b[0].f64[0]);
                  __dst.__r_.__value_.__r.__words[0] = v1295;
                  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + *(_QWORD *)(v1295 - 24)) = v1312;
                  __dst.__r_.__value_.__r.__words[2] = v1304;
                  v1397 = MEMORY[0x1E0DE4FB8] + 16;
                  if (v1407 < 0)
                    operator delete(v1406);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x1A1AF4D64](&v1410);
                  v797 = (std::__shared_weak_count *)*((_QWORD *)&v1362 + 1);
                  v677.n128_u64[1] = v1251.n128_u64[1];
                  if (*((_QWORD *)&v1362 + 1))
                  {
                    v798 = (unint64_t *)(*((_QWORD *)&v1362 + 1) + 8);
                    do
                      v799 = __ldaxr(v798);
                    while (__stlxr(v799 - 1, v798));
                    if (!v799)
                    {
                      ((void (*)(std::__shared_weak_count *, __n128))v797->__on_zero_shared)(v797, v1251);
                      std::__shared_weak_count::__release_weak(v797);
                      v677.n128_u64[1] = v1251.n128_u64[1];
                    }
                  }
                  v800 = v1249 + 144;
                  if (v1249 + 144 == v677.n128_u64[1])
                  {
                    v677.n128_u64[0] = v1249 + 144;
                  }
                  else
                  {
                    while (!*(_QWORD *)(v800 + 112))
                    {
                      v800 += 144;
                      if (v800 == v677.n128_u64[1])
                      {
                        v800 = v677.n128_u64[1];
                        break;
                      }
                    }
                    v677.n128_u64[0] = v800;
                  }
                  goto LABEL_942;
                }
              }
              memmove(v790, v793, v789);
              goto LABEL_1140;
            }
          }
          memmove(v779, v783, v778);
          goto LABEL_1116;
        }
      }
      else
      {
        if (v675 >= *(_QWORD *)&v669)
          v675 %= *(_QWORD *)&v669;
        if (v675 != v671)
          goto LABEL_939;
      }
      v673 = (_QWORD *)*v673;
      if (!v673)
        goto LABEL_939;
    }
  }
  if (objc_msgSend(v1284, "paintDaVinciElevationRaster"))
  {
    md::SceneContext::renderData((md::SceneContext *)__b, *v1256, 43);
    v801 = __b[0];
    v802 = __b[1].f64[0];
    while (1)
    {
      v803 = v801.f64[0];
      if (*(_QWORD *)&v801.f64[0] == *(_QWORD *)&v802)
        break;
      v1334 = (__n128)v801;
      v804 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)&v801.f64[0] + 112) + 72))(*(_QWORD *)(*(_QWORD *)&v801.f64[0] + 112));
      *(_QWORD *)&v801.f64[1] = v1334.n128_u64[1];
      if (v804)
      {
        if (*(_QWORD *)v804 != *(_QWORD *)(v804 + 8))
        {
          *(_WORD *)v1390 = *(_WORD *)(v804 + 56);
          *(_QWORD *)&v1390[4] = *(_QWORD *)(v804 + 60);
          md::ElevationRaster::texture((md::ElevationRaster *)&__dst, v804, *(float *)&v1390[4]);
          md::DebugRenderLayer::renderTexturedQuadTile(this, (uint64_t **)v5, (QuadTile *)v1390, (ggl::Texture2D *)__dst.__r_.__value_.__l.__data_, v1385, 1.0);
          v805 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
          *(_QWORD *)&v801.f64[1] = v1334.n128_u64[1];
          if (__dst.__r_.__value_.__l.__size_)
          {
            v806 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
            do
              v807 = __ldaxr(v806);
            while (__stlxr(v807 - 1, v806));
            if (!v807)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v805->__on_zero_shared)(v805, v1334);
              std::__shared_weak_count::__release_weak(v805);
              *(_QWORD *)&v801.f64[1] = v1334.n128_u64[1];
            }
          }
        }
      }
      *(_QWORD *)&v808 = *(_QWORD *)&v803 + 144;
      if (*(_QWORD *)&v803 + 144 != *(_QWORD *)&v801.f64[1])
      {
        while (!*(_QWORD *)(*(_QWORD *)&v808 + 112))
        {
          *(_QWORD *)&v808 += 144;
          if (*(_QWORD *)&v808 == *(_QWORD *)&v801.f64[1])
          {
            v808 = v801.f64[1];
            break;
          }
        }
      }
      v801.f64[0] = v808;
    }
    md::SceneContext::renderData((md::SceneContext *)__b, *v1256, 77);
    v809 = __b[0];
    v810 = __b[1].f64[0];
    while (1)
    {
      v811 = v809.f64[0];
      if (*(_QWORD *)&v809.f64[0] == *(_QWORD *)&v810)
        break;
      v1335 = (__n128)v809;
      v812 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)&v809.f64[0] + 112) + 72))(*(_QWORD *)(*(_QWORD *)&v809.f64[0] + 112));
      *(_QWORD *)&v809.f64[1] = v1335.n128_u64[1];
      if (v812)
      {
        if (*(_QWORD *)v812 != *(_QWORD *)(v812 + 8))
        {
          *(_WORD *)v1390 = *(_WORD *)(v812 + 56);
          *(_QWORD *)&v1390[4] = *(_QWORD *)(v812 + 60);
          md::ElevationRaster::texture((md::ElevationRaster *)&__dst, v812, *(float *)&v1390[4]);
          md::DebugRenderLayer::renderTexturedQuadTile(this, (uint64_t **)v5, (QuadTile *)v1390, (ggl::Texture2D *)__dst.__r_.__value_.__l.__data_, v1385, 1.0);
          v813 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
          *(_QWORD *)&v809.f64[1] = v1335.n128_u64[1];
          if (__dst.__r_.__value_.__l.__size_)
          {
            v814 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
            do
              v815 = __ldaxr(v814);
            while (__stlxr(v815 - 1, v814));
            if (!v815)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v813->__on_zero_shared)(v813, v1335);
              std::__shared_weak_count::__release_weak(v813);
              *(_QWORD *)&v809.f64[1] = v1335.n128_u64[1];
            }
          }
        }
      }
      *(_QWORD *)&v816 = *(_QWORD *)&v811 + 144;
      if (*(_QWORD *)&v811 + 144 != *(_QWORD *)&v809.f64[1])
      {
        while (!*(_QWORD *)(*(_QWORD *)&v816 + 112))
        {
          *(_QWORD *)&v816 += 144;
          if (*(_QWORD *)&v816 == *(_QWORD *)&v809.f64[1])
          {
            v816 = v809.f64[1];
            break;
          }
        }
      }
      v809.f64[0] = v816;
    }
  }
  if (objc_msgSend(v1284, "showShadowMapQuad"))
  {
    v817 = *(_QWORD *)(*((_QWORD *)this + 5) + 24);
    v818 = *(_QWORD *)(v817 + 96);
    if (v818
      && (v819 = *(_QWORD *)(v817 + 8),
          v820 = *(_QWORD *)(v818 + 32),
          v821 = *(_QWORD *)(v819 + 96),
          v820 < (*(_QWORD *)(v819 + 104) - v821) >> 3))
    {
      v822 = *(_QWORD *)(*(_QWORD *)(v821 + 8 * v820) + 16);
    }
    else
    {
      v822 = 0;
    }
    md::DebugRenderLayer::renderScreenTexturedQuad((uint64_t)this, v5, v822, (uint64_t)v1385, 0.000000119209317, 0.25, 0.25);
  }
  if (objc_msgSend(v1284, "paintDaVinciMeshBounds"))
  {
    v1361 = xmmword_19FFB4A00;
    md::DebugRenderLayer::paintLayerMeshBounds((uint64_t)this, (uint64_t)v5, (uint64_t)v1385, 33, *v1256, v1347, v1320, &v1361);
  }
  if (objc_msgSend(v1284, "paintDaVinciBuildingMeshBounds"))
  {
    v1360 = xmmword_19FFB4A10;
    md::DebugRenderLayer::paintLayerMeshBounds((uint64_t)this, (uint64_t)v5, (uint64_t)v1385, 54, *v1256, v1347, v1320, &v1360);
  }
  if (objc_msgSend(v1284, "paintDaVinciTileBoundaryVerts"))
  {
    v823 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 24);
    v824 = (uint64_t **)(*(uint64_t (**)(uint64_t, const md::LayoutContext *))(*(_QWORD *)v823 + 96))(v823, v1353);
    v825 = *v824;
    v826 = v824[1];
    if (*v824 != v826)
    {
      __asm { FMOV            V12.2S, #1.0 }
      __sbb = v824[1];
      do
      {
        v828 = *v825;
        v829 = *(_QWORD *)(*v825 + 384);
        if (*(_WORD *)(v829 + 24) == 33)
        {
          LOWORD(__dst.__r_.__value_.__l.__data_) = *(_WORD *)(v829 + 168);
          *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = *(_QWORD *)(v829 + 172);
          md::LayoutContext::frameState(v1353);
          md::GeometryLogic::tileMatrix((md::GeometryLogic *)__b, *(unsigned __int8 *)(v830 + 128) - 1 < 3, (const QuadTile *)&__dst, 0.0, v831);
          gm::operator*<double,4,4,4>((double *)v1390, (double *)(v1347 + 808), __b[0].f64);
          v832 = *(double *)&v1390[24];
          v833 = *(double *)&v1391[24];
          v834 = *(double *)&v1391[56];
          v1325 = *(float64x2_t *)v1390;
          v1313 = *(float64x2_t *)&v1391[32];
          v1319 = *(float64x2_t *)v1391;
          v1305 = *(float64x2_t *)&v1391[64];
          v835 = *(double *)&v1391[88];
          v836 = *(id *)v1353;
          objc_msgSend(v836, "sizeInPixels");
          v1296 = v837;
          v838 = *(id *)v1353;
          objc_msgSend(v838, "sizeInPixels");
          v1289 = v839;

          v840 = 0;
          v841 = v832;
          v1336 = v841;
          v842 = v833;
          v843 = v834;
          v844 = vcvt_f32_f64(v1325);
          v845 = vcvt_f32_f64(v1319);
          v846 = vcvt_f32_f64(v1313);
          v847 = vcvt_f32_f64(v1305);
          v848 = v835;
          v849.f64[0] = v1296;
          v849.f64[1] = v1289;
          v1350[4] = (float32x2_t)0x41A0000041800000;
          v850 = vmul_f32(vcvt_f32_f64(v849), (float32x2_t)0x3F0000003F000000);
          v851 = v842;
          v852 = v843;
          v853 = v844;
          v854 = v845;
          v855 = v846;
          v856 = v847;
          v1326 = v850;
          do
          {
            v857 = v828 + 56 * v840;
            if ((v840 & 0x7FFFFFFD) != 0)
              v858 = 0;
            else
              v858 = -1;
            if ((v840 & 0x7FFFFFFD) != 0)
              v859 = -1;
            else
              v859 = 0;
            v1350[12].i8[0] = v858;
            v1350[12].i8[1] = 0;
            v1350[12].i8[2] = v859;
            v1350[12].i8[3] = -1;
            v860 = *(float **)(v857 + 600);
            v861 = *(float **)(v857 + 608);
            v862 = 1.0;
            if (v860 != v861)
            {
              if ((v840 & 0x7FFFFFFD) != 0)
                v863 = 3;
              else
                v863 = 1;
              do
              {
                v864 = vmul_n_f32(vmla_n_f32(vmla_n_f32(vmla_n_f32(v847, v844, *v860), v845, v860[1]), v846, v860[2]), v862/ (float)((float)((float)(v848 + (float)(*v860 * v1336)) + (float)(v860[1] * v842))+ (float)(v860[2] * v843)));
                v865.i32[0] = vadd_f32(v864, _D12).u32[0];
                v865.i32[1] = vsub_f32(_D12, v864).i32[1];
                v1350[1] = vmul_f32(v865, v850);
                ggl::DebugConsole::drawSymbol(v1350, v863);
                v862 = 1.0;
                v850 = v1326;
                v847 = v856;
                v846 = v855;
                v845 = v854;
                v844 = v853;
                v843 = v852;
                v842 = v851;
                v860 += 3;
              }
              while (v860 != v861);
            }
            v1350[12].i32[0] = -16711936;
            v866 = v828 + 56 * v840;
            v867 = *(float **)(v866 + 624);
            for (m = *(float **)(v866 + 632); v867 != m; v867 += 3)
            {
              v869 = vmul_n_f32(vmla_n_f32(vmla_n_f32(vmla_n_f32(v847, v844, *v867), v845, v867[1]), v846, v867[2]), v862/ (float)((float)((float)(v848 + (float)(*v867 * v1336)) + (float)(v867[1] * v842))+ (float)(v867[2] * v843)));
              v870.i32[0] = vadd_f32(v869, _D12).u32[0];
              v870.i32[1] = vsub_f32(_D12, v869).i32[1];
              v1350[1] = vmul_f32(v870, v850);
              ggl::DebugConsole::drawSymbol(v1350, 3);
              v862 = 1.0;
              v850 = v1326;
              v847 = v856;
              v846 = v855;
              v845 = v854;
              v844 = v853;
              v843 = v852;
              v842 = v851;
            }
            ++v840;
          }
          while (v840 != 4);
          v1350[4] = (float32x2_t)0x4120000041000000;
          v826 = __sbb;
        }
        ++v825;
      }
      while (v825 != v826);
    }
  }
  v871 = v1353;
  v872 = v1350;
  if (objc_msgSend(v1284, "paintDaVinciDecalBounds"))
  {
    memset(&v1389, 0, sizeof(v1389));
    memset(&v1388, 0, sizeof(v1388));
    *(_OWORD *)&v1387.__r_.__value_.__l.__data_ = xmmword_19FFB4810;
    *(_OWORD *)&v1386.__r_.__value_.__l.__data_ = xmmword_19FFB2D90;
    md::SceneContext::renderData((md::SceneContext *)&v1359, *v1256, 33);
    v873 = *(_OWORD *)&v1359.__r_.__value_.__l.__data_;
    v874 = v1359.__r_.__value_.__r.__words[2];
    __asm { FMOV            V8.2S, #1.0 }
    v876 = v1347;
    while (1)
    {
      v1345 = *((_QWORD *)&v873 + 1);
      v877 = v873;
      if ((_QWORD)v873 == v874)
        break;
      v878 = *(_QWORD *)(v873 + 112);
      v879 = *(_QWORD *)(v878 + 1320);
      v880 = *(unsigned __int8 *)(v876 + 3776);
      v881 = 472;
      if ((v880 - 1) < 3)
        v881 = 344;
      v882 = (_OWORD *)(v878 + v881);
      *(_OWORD *)&v1391[32] = v882[4];
      *(_OWORD *)&v1391[48] = v882[5];
      *(_OWORD *)&v1391[64] = v882[6];
      *(_OWORD *)&v1391[80] = v882[7];
      *(_OWORD *)v1390 = *v882;
      *(_OWORD *)&v1390[16] = v882[1];
      *(_OWORD *)v1391 = v882[2];
      *(_OWORD *)&v1391[16] = v882[3];
      md::GeometryContext::transformConstantData((double *)&v1363, v1320, (unsigned __int8 *)(v878 + 168), v880, *(double *)(v878 + 600), *(double *)(v878 + 608));
      v883 = *(_QWORD *)(v876 + 5584);
      if (!v883)
        v883 = v876;
      gm::operator*<double,4,4,4>(__b[0].f64, (double *)(v883 + 808), (double *)v1390);
      *(float *)&v884 = __b[0].f64[0];
      *(float *)&v885 = __b[0].f64[1];
      __dst.__r_.__value_.__r.__words[0] = __PAIR64__(v885, v884);
      *(float *)&v886 = __b[1].f64[0];
      *(float *)&v887 = __b[1].f64[1];
      __dst.__r_.__value_.__l.__size_ = __PAIR64__(v887, v886);
      *(float *)&v888 = __b[2].f64[0];
      *(float *)&v889 = __b[2].f64[1];
      __dst.__r_.__value_.__r.__words[2] = __PAIR64__(v889, v888);
      *(float *)&v890 = __b[3].f64[0];
      *(float *)&v891 = __b[3].f64[1];
      v1397 = __PAIR64__(v891, v890);
      v892 = __b[4].f64[0];
      v893 = __b[4].f64[1];
      v1398 = v892;
      v1399 = v893;
      *(float *)&v894 = *(double *)v1394;
      *(float *)&v895 = *(double *)&v1394[8];
      v1400 = __PAIR64__(v895, v894);
      v896 = *(double *)&v1394[16];
      v897 = *(double *)&v1394[24];
      v1401 = v896;
      v1402 = v897;
      *(float *)&v898 = *(double *)&v1394[32];
      *(float *)&v899 = *(double *)&v1394[40];
      v1403 = __PAIR64__(v899, v898);
      v900 = *(float *)&v887 + *(float *)&v884;
      v901 = *(float *)&v891 + *(float *)&v888;
      v902 = *(float *)&v895 + v892;
      v903 = *(float *)&v899 + v896;
      v904 = *(float *)&v887 - *(float *)&v884;
      v905 = *(float *)&v891 - *(float *)&v888;
      v906 = *(float *)&v895 - v892;
      v907 = *(float *)&v899 - v896;
      v908 = *(float *)&v887 + *(float *)&v885;
      v909 = *(float *)&v891 + *(float *)&v889;
      v910 = *(float *)&v895 + v893;
      v911 = sqrtf((float)((float)(v908 * v908) + (float)(v909 * v909)) + (float)(v910 * v910));
      v912 = *(float *)&v887 - *(float *)&v885;
      v913 = *(float *)&v891 - *(float *)&v889;
      v914 = *(float *)&v895 - v893;
      v915 = *(float *)&v891 - *(float *)&v890;
      v916.i32[0] = v886;
      v916.f32[1] = *(float *)&v887 - *(float *)&v886;
      v917.i32[0] = v894;
      v917.f32[1] = *(float *)&v895 - *(float *)&v894;
      v918 = vdiv_f32(_D8, vsqrt_f32(vmla_f32(vmla_f32(vmul_f32(v916, v916), (float32x2_t)__PAIR64__(LODWORD(v915), v890), (float32x2_t)__PAIR64__(LODWORD(v915), v890)), v917, v917)));
      *(float *)__b[0].f64 = *(float *)&v886 * v918.f32[0];
      *((float *)__b[0].f64 + 1) = *(float *)&v890 * v918.f32[0];
      *(float *)&__b[0].f64[1] = *(float *)&v894 * v918.f32[0];
      v916.i32[0] = v898;
      *(float32x2_t *)((char *)&__b[0].f64[1] + 4) = vmul_f32(v918, v916);
      *(_QWORD *)((char *)__b[1].f64 + 4) = __PAIR64__(COERCE_UNSIGNED_INT(vmuls_lane_f32(*(float *)&v895 - *(float *)&v894, v918, 1)), COERCE_UNSIGNED_INT(vmuls_lane_f32(v915, v918, 1)));
      HIDWORD(__b[1].f64[1]) = vmuls_lane_f32(*(float *)&v899 - *(float *)&v898, v918, 1);
      *(float *)__b[2].f64 = (float)(1.0 / v911) * v908;
      *((float *)__b[2].f64 + 1) = (float)(1.0 / v911) * v909;
      *(float *)&__b[2].f64[1] = (float)(1.0 / v911) * v910;
      v918.f32[0] = 1.0 / sqrtf((float)((float)(v912 * v912) + (float)(v913 * v913)) + (float)(v914 * v914));
      *((float *)&__b[2].f64[1] + 1) = (float)(*(float *)&v899 + v897) * (float)(1.0 / v911);
      *(float *)__b[3].f64 = v918.f32[0] * v912;
      *((float *)__b[3].f64 + 1) = v918.f32[0] * v913;
      *(float *)&__b[3].f64[1] = v918.f32[0] * v914;
      v919 = 1.0 / sqrtf((float)((float)(v900 * v900) + (float)(v901 * v901)) + (float)(v902 * v902));
      *((float *)&__b[3].f64[1] + 1) = (float)(*(float *)&v899 - v897) * v918.f32[0];
      *(float *)__b[4].f64 = v919 * v900;
      *((float *)__b[4].f64 + 1) = v919 * v901;
      *(float *)&__b[4].f64[1] = v919 * v902;
      v920 = 1.0 / sqrtf((float)((float)(v904 * v904) + (float)(v905 * v905)) + (float)(v906 * v906));
      *((float *)&__b[4].f64[1] + 1) = v903 * v919;
      *(float *)v1394 = v920 * v904;
      *(float *)&v1394[4] = v920 * v905;
      *(float *)&v1394[8] = v920 * v906;
      *(float *)&v1394[12] = v907 * v920;
      geo::Frustum<float>::calculateCorners((float *)__b, (float *)&__dst);
      v921 = (_QWORD *)gdc::Registry::storage<md::components::Decal>(v879);
      v922 = gdc::Registry::storage<md::components::MeshInstance>(v879);
      v923 = (_QWORD *)v922;
      v924 = v922 + 32;
      v925 = (unint64_t *)v921[7];
      v926 = (uint64_t *)v921[8];
      if (*(_QWORD *)(v922 + 64) - *(_QWORD *)(v922 + 56) >= (unint64_t)((char *)v926 - (char *)v925))
        v927 = v921 + 4;
      else
        v927 = (_QWORD *)(v922 + 32);
      if (v921 + 4 == v927)
      {
        v1356.__r_.__value_.__r.__words[0] = (std::string::size_type)__b;
        v1356.__r_.__value_.__l.__size_ = (std::string::size_type)&v1363;
        v1356.__r_.__value_.__r.__words[2] = (std::string::size_type)&v1389;
        v1357 = &v1388;
        if (v925 != (unint64_t *)v926)
        {
          v936 = (_DWORD *)v921[10];
          do
          {
            v938 = *((unsigned int *)v925 + 1);
            v939 = v923[4];
            v940 = (v923[5] - v939) >> 3;
            if (v938 >> 7 < v940)
            {
              v941 = *(_QWORD *)(v939 + 8 * (v938 >> 7));
              if (v941)
              {
                v942 = *(unsigned __int16 *)(v941 + 2 * (v938 & 0x7F));
                v944 = v923[7];
                v943 = v923[8];
                v945 = (v943 - v944) >> 3;
                if (v945 > v942)
                {
                  v946 = v944 + 8 * v942;
                  if (v946 != v943 && *(_DWORD *)(v946 + 4) == (_DWORD)v938)
                  {
                    v948 = *v925;
                    v949 = *v925 >> 39;
                    if (v949 < v940
                      && (v950 = *(_QWORD *)(v939 + 8 * v949)) != 0
                      && (v951 = *(unsigned __int16 *)(v950 + 2 * (HIDWORD(v948) & 0x7F)), v945 > v951)
                      && ((v952 = HIDWORD(v948), v953 = v944 + 8 * v951, v953 != v943)
                        ? (v954 = *(_DWORD *)(v953 + 4) == (_DWORD)v952)
                        : (v954 = 0),
                          v954))
                    {
                      v937 = (float *)(v923[10] + 112 * v951);
                    }
                    else
                    {
                      v937 = (float *)v923[11];
                    }
                    md::DebugRenderLayer::layout(md::LayoutContext const&)::$_14::operator()((uint64_t)&v1356, v936, v937);
                  }
                }
              }
            }
            ++v936;
            ++v925;
          }
          while (v925 != (unint64_t *)v926);
        }
      }
      _ZF = v924 == (_QWORD)v927;
      v871 = v1353;
      v876 = v1347;
      if (_ZF)
      {
        v1356.__r_.__value_.__r.__words[0] = (std::string::size_type)__b;
        v1356.__r_.__value_.__l.__size_ = (std::string::size_type)&v1363;
        v1356.__r_.__value_.__r.__words[2] = (std::string::size_type)&v1389;
        v1357 = &v1388;
        v955 = (unint64_t *)v923[7];
        v956 = (uint64_t *)v923[8];
        if (v955 != (unint64_t *)v956)
        {
          v957 = (float *)v923[10];
          do
          {
            v959 = *((unsigned int *)v955 + 1);
            v960 = v921[4];
            v961 = (v921[5] - v960) >> 3;
            if (v959 >> 7 < v961)
            {
              v962 = *(_QWORD *)(v960 + 8 * (v959 >> 7));
              if (v962)
              {
                v963 = *(unsigned __int16 *)(v962 + 2 * (v959 & 0x7F));
                v965 = v921[7];
                v964 = v921[8];
                v966 = (v964 - v965) >> 3;
                if (v966 > v963)
                {
                  v967 = v965 + 8 * v963;
                  if (v967 != v964 && *(_DWORD *)(v967 + 4) == (_DWORD)v959)
                  {
                    v969 = *v955;
                    v970 = *v955 >> 39;
                    if (v970 < v961
                      && (v971 = *(_QWORD *)(v960 + 8 * v970)) != 0
                      && (v972 = *(unsigned __int16 *)(v971 + 2 * (HIDWORD(v969) & 0x7F)), v966 > v972)
                      && ((v973 = HIDWORD(v969), v974 = v965 + 8 * v972, v974 != v964)
                        ? (v975 = *(_DWORD *)(v974 + 4) == (_DWORD)v973)
                        : (v975 = 0),
                          v975))
                    {
                      v958 = (_DWORD *)(v921[10] + 4 * v972);
                    }
                    else
                    {
                      v958 = (_DWORD *)v921[11];
                    }
                    md::DebugRenderLayer::layout(md::LayoutContext const&)::$_14::operator()((uint64_t)&v1356, v958, v957);
                  }
                }
              }
            }
            v957 += 28;
            ++v955;
          }
          while (v955 != (unint64_t *)v956);
        }
      }
      v1389.__r_.__value_.__l.__size_ = v1389.__r_.__value_.__r.__words[0];
      v1388.__r_.__value_.__l.__size_ = v1388.__r_.__value_.__r.__words[0];
      v928 = v1385;
      v929 = (_QWORD *)md::DebugLayerRenderResources::unitBoxMesh(*((md::DebugLayerRenderResources **)this + 6));
      md::DebugRenderLayer::renderInstancedMesh((uint64_t)this, *((_QWORD **)v1353 + 1), (double *)v1390, &v1387, 1, (uint64_t)v928, (uint64_t)&v1389, v929, (uint64_t *)&v1363);
      v930 = v1385;
      v931 = (_QWORD *)md::DebugLayerRenderResources::unitBoxMesh(*((md::DebugLayerRenderResources **)this + 6));
      md::DebugRenderLayer::renderInstancedMesh((uint64_t)this, *((_QWORD **)v1353 + 1), (double *)v1390, &v1386, 1, (uint64_t)v930, (uint64_t)&v1388, v931, (uint64_t *)&v1363);
      v932 = (std::__shared_weak_count *)*((_QWORD *)&v1363 + 1);
      if (*((_QWORD *)&v1363 + 1))
      {
        v933 = (unint64_t *)(*((_QWORD *)&v1363 + 1) + 8);
        do
          v934 = __ldaxr(v933);
        while (__stlxr(v934 - 1, v933));
        if (!v934)
        {
          ((void (*)(std::__shared_weak_count *))v932->__on_zero_shared)(v932);
          std::__shared_weak_count::__release_weak(v932);
        }
      }
      v935 = v877 + 144;
      if (v877 + 144 != v1345)
      {
        while (!*(_QWORD *)(v935 + 112))
        {
          v935 += 144;
          if (v935 == v1345)
          {
            v935 = v1345;
            break;
          }
        }
      }
      *((_QWORD *)&v873 + 1) = v1345;
      *(_QWORD *)&v873 = v935;
    }
    if (v1388.__r_.__value_.__r.__words[0])
    {
      v1388.__r_.__value_.__l.__size_ = v1388.__r_.__value_.__r.__words[0];
      operator delete(v1388.__r_.__value_.__l.__data_);
    }
    v872 = v1350;
    if (v1389.__r_.__value_.__r.__words[0])
    {
      v1389.__r_.__value_.__l.__size_ = v1389.__r_.__value_.__r.__words[0];
      operator delete(v1389.__r_.__value_.__l.__data_);
    }
  }
  if ((objc_msgSend(v1284, "paintSelectedMapTiles") & 1) != 0 || objc_msgSend(v1284, "paintLoadReason"))
  {
    v976 = *(unsigned __int16 **)(*v1256 + 112);
    v977 = *(unsigned __int16 **)(*v1256 + 120);
    if (v976 == v977)
    {
      v978 = v1347;
    }
    else
    {
      v978 = v1347;
      while (*v976 != v1285)
      {
        v976 += 56;
        if (v976 == v977)
        {
          v976 = *(unsigned __int16 **)(*v1256 + 120);
          break;
        }
      }
    }
    __asm { FMOV            V8.2S, #1.0 }
    gdc::LayerDataCollector::virtualTilesBegin(&__dst, **((_QWORD **)v976 + 13), *(_QWORD *)(*((_QWORD *)v976 + 13) + 8));
    v980.f64[0] = v1254;
    v980.f64[1] = v1253;
    __asm { FMOV            V0.2D, #0.5 }
    v1255 = v980;
    v1270 = vmulq_f64(v980, _Q0);
    v1267 = (double *)(v978 + 808);
    v982 = 0x1E0CB3000;
    while (1)
    {
LABEL_1297:
      v983 = *(unsigned __int16 **)(*v1256 + 112);
      v984 = *(unsigned __int16 **)(*v1256 + 120);
      if (v983 != v984)
      {
        while (*v983 != v1285)
        {
          v983 += 56;
          if (v983 == v984)
          {
            v983 = *(unsigned __int16 **)(*v1256 + 120);
            break;
          }
        }
      }
      if (__dst.__r_.__value_.__r.__words[0] == *(_QWORD *)(*((_QWORD *)v983 + 13) + 8))
        break;
      LOWORD(v1356.__r_.__value_.__l.__data_) = *(_WORD *)(__dst.__r_.__value_.__r.__words[0] + 112);
      *(std::string::size_type *)((char *)v1356.__r_.__value_.__r.__words + 4) = *(_QWORD *)(__dst.__r_.__value_.__r.__words[0]
                                                                                           + 116);
      md::LayoutContext::frameState(v1353);
      md::GeometryLogic::tileMatrix((md::GeometryLogic *)__b, *(unsigned __int8 *)(v985 + 128) - 1 < 3, (const QuadTile *)&v1356, 0.0, v986);
      gm::operator*<double,4,4,4>((double *)v1390, v1267, __b[0].f64);
      v987 = *(double *)v1390;
      v988 = *(double *)&v1390[24];
      v1297 = *(float64x2_t *)&v1391[8];
      v1306 = *(float64x2_t *)&v1390[8];
      v1327 = *(float64x2_t *)&v1391[40];
      v1290 = *(float64x2_t *)&v1391[24];
      v989 = *(double *)v1391;
      v990 = *(double *)&v1391[56];
      v1314 = *(float64x2_t *)&v1391[72];
      v991 = *(double *)&v1391[64];
      v992 = *(double *)&v1391[88];
      v993 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*((_QWORD *)this + 6) + 112));
      v994 = v987;
      v995 = vcvt_f32_f64(v1306);
      v996 = v988;
      v997 = v989;
      v998 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v1290), v1327);
      v999 = v991;
      v1000 = vcvt_f32_f64(v1314);
      v1001 = v992;
      v1002 = v990;
      v1003 = *(_QWORD **)(*(_QWORD *)(v993 + 64) + 16);
      v1004 = v1003[1];
      v1005 = v1003[9];
      v1307 = v999;
      v1315 = v994;
      *(float *)v1005 = v994;
      __sbc = (int32x2_t)v995;
      v1283 = v997;
      *(float32x2_t *)(v1005 + 4) = v995;
      *(float *)(v1005 + 12) = v996;
      *(float *)(v1005 + 16) = v997;
      v1291 = (int32x2_t)vcvt_f32_f64(v1297);
      v1298 = (int32x2_t)v1000;
      *(int32x2_t *)(v1005 + 20) = v1291;
      v1273 = v998.f32[0];
      *(float32x4_t *)(v1005 + 28) = v998;
      *(float *)(v1005 + 44) = v1002;
      *(float *)(v1005 + 48) = v999;
      *(float32x2_t *)(v1005 + 52) = v1000;
      *(float *)(v1005 + 60) = v1001;
      if (v1003[8] > v1004)
        v1004 = v1003[8];
      v1003[7] = 0;
      v1003[8] = v1004;
      md::GeometryContext::transformConstantData((double *)v1390, v1320, (unsigned __int8 *)&v1356, *(unsigned __int8 *)(v1347 + 3776), 0.0, 0.0);
      v1006 = *(_QWORD *)(v993 + 64);
      v1007 = *(_OWORD *)v1390;
      *(_QWORD *)(v1006 + 32) = *(_QWORD *)v1390;
      *(_QWORD *)(v1006 + 40) = 0;
      v1008 = *(_QWORD *)(v993 + 160);
      if (*((_QWORD *)&v1007 + 1))
      {
        v1009 = (unint64_t *)(*((_QWORD *)&v1007 + 1) + 8);
        do
          v1010 = __ldxr(v1009);
        while (__stxr(v1010 + 1, v1009));
      }
      v1011 = *(std::__shared_weak_count **)(v1008 + 40);
      *(_OWORD *)(v1008 + 32) = v1007;
      if (v1011)
      {
        v1012 = (unint64_t *)&v1011->__shared_owners_;
        do
          v1013 = __ldaxr(v1012);
        while (__stlxr(v1013 - 1, v1012));
        if (!v1013)
        {
          ((void (*)(std::__shared_weak_count *))v1011->__on_zero_shared)(v1011);
          std::__shared_weak_count::__release_weak(v1011);
        }
      }
      v1014 = *(std::__shared_weak_count **)&v1390[8];
      if (*(_QWORD *)&v1390[8])
      {
        v1015 = (unint64_t *)(*(_QWORD *)&v1390[8] + 8);
        do
          v1016 = __ldaxr(v1015);
        while (__stlxr(v1016 - 1, v1015));
        if (!v1016)
        {
          ((void (*)(std::__shared_weak_count *))v1014->__on_zero_shared)(v1014);
          std::__shared_weak_count::__release_weak(v1014);
        }
      }
      *(_OWORD *)&v1390[8] = 0uLL;
      *(_QWORD *)v1390 = &v1390[8];
      *(_OWORD *)&v1359.__r_.__value_.__r.__words[1] = 0uLL;
      v1359.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1359.__r_.__value_.__l.__size_;
      *(_OWORD *)&v1389.__r_.__value_.__r.__words[1] = 0uLL;
      v1389.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1389.__r_.__value_.__l.__size_;
      memset(&v1388, 0, sizeof(v1388));
      v1017 = v1284;
      if (v1284
        && (objc_msgSend(v1284, "selectedMapTilesToPaint"), v1017 = v1284, LODWORD(v1388.__r_.__value_.__r.__words[1])))
      {
        v1018.i64[0] = *(std::string::size_type *)((char *)v1356.__r_.__value_.__r.__words + 4);
        v1018.i64[1] = v1388.__r_.__value_.__r.__words[0];
        *(int32x2_t *)v1019.i8 = vrev64_s32(*(int32x2_t *)((char *)&v1388.__r_.__value_.__r.__words[1] + 4));
        v1019.u64[1] = (unint64_t)vrev64_s32(*(int32x2_t *)((char *)v1356.__r_.__value_.__r.__words + 4));
        v1020 = **(_QWORD ***)(v993 + 64);
        v1021 = v1020[1];
        v1022 = (_OWORD *)v1020[9];
        if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vcgtq_s32(v1019, v1018)), 0xFuLL))) & 1) != 0
          || LODWORD(v1388.__r_.__value_.__r.__words[1]) != v1356.__r_.__value_.__s.__data_[1])
        {
          *v1022 = xmmword_19FFB34C0;
          v1135 = v1020[8];
          if (v1135 <= v1021)
            v1135 = v1021;
          v1020[7] = 0;
          v1020[8] = v1135;
        }
        else
        {
          v1023.i32[1] = 1059145646;
          *v1022 = xmmword_19FFB4A20;
          v1024 = v1020[8];
          if (v1024 <= v1021)
            v1024 = v1021;
          v1020[7] = 0;
          v1020[8] = v1024;
          *(float *)v1023.i32 = vmlas_n_f32(v1001 + (float)(v996 * 0.05), 0.95, v1273);
          v1025 = (float32x2_t)vdup_lane_s32(__sbc, 0);
          v1025.f32[0] = v1283;
          v1026 = (float32x2_t)vdup_lane_s32(v1291, 0);
          v1026.f32[0] = v1315;
          v1027 = (float32x2_t)vdup_lane_s32(v1298, 0);
          v1027.f32[0] = v1307;
          v1028 = vdiv_f32(vmla_f32(vmla_f32(v1027, (float32x2_t)0x3D4CCCCD3F733333, v1025), (float32x2_t)0x3F7333333D4CCCCDLL, v1026), (float32x2_t)vdup_lane_s32(v1023, 0));
          __asm { FMOV            V2.2S, #1.0 }
          v1026.i32[0] = vadd_f32(v1028, _D2).u32[0];
          v1026.i32[1] = vsub_f32(_D2, v1028).i32[1];
          v1350[12].i32[0] = 2139267077;
          __asm { FMOV            V2.2D, #-12.0 }
          v1031 = vcvt_f32_f64(vmlaq_f64(_Q2, vcvtq_f64_f32(v1026), v1270));
          v1032 = vmul_f32(v1028, (float32x2_t)0x3F0000003F000000);
          LODWORD(_Q2.f64[0]) = vadd_f32(v1032, (float32x2_t)0x3F0000003F000000).u32[0];
          HIDWORD(_Q2.f64[0]) = vsub_f32((float32x2_t)0x3F0000003F000000, v1032).i32[1];
          v1033 = (std::string::size_type)vcvt_f32_f64(vmlaq_f64((float64x2_t)vdupq_n_s64(0x406E400000000000uLL), vcvtq_f64_f32(*(float32x2_t *)&_Q2.f64[0]), v1255));
          v1387.__r_.__value_.__l.__data_ = (std::string::pointer)v1031;
          v1387.__r_.__value_.__l.__size_ = v1033;
          v1350[1] = v1031;
          ggl::DebugConsole::drawRectangleWithFill(v1350, (float32x2_t *)&v1387.__r_.__value_.__r.__words[1], *(float32_t *)&v1033);
        }
      }
      else
      {
        v1035 = 0.0;
        v1036 = 0.0;
        v1037 = _D8;
        if (objc_msgSend(v1017, "paintLoadReason"))
        {
          v1265 = v993;
          v1038 = 0;
          v1037 = 0;
          v1039 = __dst.__r_.__value_.__r.__words[0];
          while (v1039 != __dst.__r_.__value_.__l.__size_)
          {
            v1040 = *v1256;
            v1041 = *(unsigned __int16 **)(*v1256 + 112);
            v1042 = *(unsigned __int16 **)(*v1256 + 120);
            if (v1041 != v1042)
            {
              while (*v1041 != v1285)
              {
                v1041 += 56;
                if (v1041 == v1042)
                {
                  v1041 = *(unsigned __int16 **)(*v1256 + 120);
                  break;
                }
              }
            }
            v1043 = *((_QWORD *)v1041 + 13);
            v1044 = *(unsigned __int16 **)(v1043 + 24);
            v1045 = *(unsigned __int16 **)(v1043 + 32);
            if (v1044 != v1045)
            {
              while (*v1044 != *(unsigned __int16 *)(v1039 + 8))
              {
                v1044 += 16;
                if (v1044 == v1045)
                {
                  v1044 = v1045;
                  break;
                }
              }
            }
            v1328 = v1039;
            v1046 = *(_QWORD *)(v1039 + 136);
            v1047 = *((_QWORD *)v1044 + 1);
            if (0x8E38E38E38E38E39 * ((*((_QWORD *)v1044 + 2) - v1047) >> 4) <= v1046)
              abort();
            v1048 = v1047 + 144 * v1046;
            v1051 = *(_QWORD *)(v1048 + 112);
            v1050 = (unint64_t *)(v1048 + 112);
            v1049 = v1051;
            if (v1051)
            {
              v1052 = *(unsigned __int16 *)(v1049 + 24);
              if ((v1053 & 1) == 0
              {
                qword_1ECE2F300 = 0;
                qword_1ECE2F2F8 = 0;
                md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
                __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
              }
              v1054 = *(unsigned __int16 **)(v1040 + 48);
              v1055 = *(unsigned __int16 **)(v1040 + 56);
              if (v1054 == v1055)
                goto LABEL_1349;
              v1056 = *(unsigned __int16 **)(v1040 + 48);
              while (*v1056 != v1052)
              {
                v1056 += 16;
                if (v1056 == v1055)
                  goto LABEL_1349;
              }
              if (v1056 == v1055)
              {
LABEL_1349:
                v1057 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
              }
              else
              {
                while (*v1054 != v1052)
                {
                  v1054 += 16;
                  if (v1054 == v1055)
                  {
                    v1054 = *(unsigned __int16 **)(v1040 + 56);
                    break;
                  }
                }
                v1057 = (uint64_t *)(v1054 + 4);
              }
              v1058 = *v1050;
              v1059 = *(std::__shared_weak_count **)(v1047 + 144 * v1046 + 120);
              if (v1059)
              {
                v1060 = (unint64_t *)&v1059->__shared_owners_;
                do
                  v1061 = __ldxr(v1060);
                while (__stxr(v1061 + 1, v1060));
              }
              v1062 = 1;
              v1063 = v1057[1];
              if (v1063)
              {
                v1034 = (double)SLODWORD(v1356.__r_.__value_.__r.__words[1])
                      / (double)(1 << v1356.__r_.__value_.__s.__data_[1]);
                v1064 = vcvtmd_s64_f64(v1034);
                while (1)
                {
                  v1065 = *(unsigned __int8 *)(v1063 + 48);
                  v1066 = (char)v1065;
                  v1067 = *(_QWORD *)(v1063 + 32);
                  if (v1065 == v1064)
                    v1068 = v1058 < v1067;
                  else
                    v1068 = (char)v1065 > v1064;
                  if (!v1068)
                  {
                    v1069 = v1067 < v1058;
                    _ZF = v1066 == v1064;
                    v1070 = v1066 < v1064;
                    if (_ZF)
                      v1070 = v1069;
                    if (!v1070)
                    {
                      v1062 = 0;
                      if (!v1059)
                        goto LABEL_1371;
                      goto LABEL_1366;
                    }
                    v1063 += 8;
                  }
                  v1063 = *(_QWORD *)v1063;
                  if (!v1063)
                  {
                    v1062 = 1;
                    break;
                  }
                }
              }
              if (!v1059)
                goto LABEL_1371;
LABEL_1366:
              v1071 = (unint64_t *)&v1059->__shared_owners_;
              do
                v1072 = __ldaxr(v1071);
              while (__stlxr(v1072 - 1, v1071));
              if (!v1072)
              {
                ((void (*)(std::__shared_weak_count *))v1059->__on_zero_shared)(v1059);
                std::__shared_weak_count::__release_weak(v1059);
              }
LABEL_1371:
              v1073 = *v1050;
              if ((v1062 & 1) == 0)
              {
                v1074 = *(unsigned __int8 *)(v1073 + 16);
                v1075 = v1389.__r_.__value_.__l.__size_;
                p_size = &v1389.__r_.__value_.__l.__size_;
LABEL_1374:
                v1077 = (uint64_t **)p_size;
                if (v1075)
                {
                  while (1)
                  {
                    p_size = (std::string::size_type *)v1075;
                    v1078 = *(unsigned __int8 *)(v1075 + 28);
                    if (v1074 < v1078)
                    {
                      v1075 = *p_size;
                      goto LABEL_1374;
                    }
                    if (v1078 >= v1074)
                      break;
                    v1075 = p_size[1];
                    if (!v1075)
                    {
                      v1077 = (uint64_t **)(p_size + 1);
                      goto LABEL_1379;
                    }
                  }
                  v1079 = p_size;
                }
                else
                {
LABEL_1379:
                  v1079 = operator new(0x28uLL);
                  v1079[28] = v1074;
                  *((_DWORD *)v1079 + 8) = 0;
                  *(_QWORD *)v1079 = 0;
                  *((_QWORD *)v1079 + 1) = 0;
                  *((_QWORD *)v1079 + 2) = p_size;
                  *v1077 = (uint64_t *)v1079;
                  v1080 = (uint64_t *)v1079;
                  if (*(_QWORD *)v1389.__r_.__value_.__l.__data_)
                  {
                    v1389.__r_.__value_.__r.__words[0] = *(_QWORD *)v1389.__r_.__value_.__l.__data_;
                    v1080 = *v1077;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v1389.__r_.__value_.__l.__size_, v1080);
                  ++v1389.__r_.__value_.__r.__words[2];
                  v1073 = *v1050;
                }
                ++*((_DWORD *)v1079 + 8);
              }
              v1081 = *(unsigned __int8 **)(v1073 + 656);
              v1082 = *(unsigned __int8 **)(v1073 + 664);
              if (v1081 != v1082)
              {
                v1083 = *(_QWORD *)&v1390[16];
                v1084 = v1359.__r_.__value_.__r.__words[2];
                do
                {
                  v1086 = *(uint64_t **)&v1390[8];
                  v1087 = *v1081;
                  v1088 = (uint64_t **)&v1390[8];
LABEL_1389:
                  v1089 = v1088;
                  if (v1086)
                  {
                    while (1)
                    {
                      v1088 = (uint64_t **)v1086;
                      v1090 = *((unsigned __int8 *)v1086 + 28);
                      if (v1087 < v1090)
                      {
                        v1086 = *v1088;
                        goto LABEL_1389;
                      }
                      if (v1090 >= v1087)
                        break;
                      v1086 = v1088[1];
                      if (!v1086)
                      {
                        v1089 = v1088 + 1;
                        goto LABEL_1394;
                      }
                    }
                    v1103 = *((_DWORD *)v1088 + 8);
                    v1091 = v1088;
                  }
                  else
                  {
LABEL_1394:
                    v1091 = operator new(0x28uLL);
                    v1091[28] = v1087;
                    *((_DWORD *)v1091 + 8) = 0;
                    *(_QWORD *)v1091 = 0;
                    *((_QWORD *)v1091 + 1) = 0;
                    *((_QWORD *)v1091 + 2) = v1088;
                    *v1089 = (uint64_t *)v1091;
                    v1092 = (uint64_t *)v1091;
                    if (**(_QWORD **)v1390)
                    {
                      *(_QWORD *)v1390 = **(_QWORD **)v1390;
                      v1092 = *v1089;
                    }
                    v1093 = *(uint64_t **)&v1390[8];
                    _ZF = v1092 == *(uint64_t **)&v1390[8];
                    *((_BYTE *)v1092 + 24) = v1092 == *(uint64_t **)&v1390[8];
                    if (!_ZF)
                    {
                      do
                      {
                        v1094 = v1092[2];
                        if (*(_BYTE *)(v1094 + 24))
                          break;
                        v1095 = *(uint64_t **)(v1094 + 16);
                        v1096 = *v1095;
                        if (*v1095 == v1094)
                        {
                          v1099 = v1095[1];
                          if (!v1099
                            || (v1100 = *(unsigned __int8 *)(v1099 + 24), v1097 = (_BYTE *)(v1099 + 24), v1100))
                          {
                            if (*(uint64_t **)v1094 == v1092)
                            {
                              v1101 = (uint64_t *)v1092[2];
                            }
                            else
                            {
                              v1101 = *(uint64_t **)(v1094 + 8);
                              v1102 = *v1101;
                              *(_QWORD *)(v1094 + 8) = *v1101;
                              if (v1102)
                              {
                                *(_QWORD *)(v1102 + 16) = v1094;
                                v1095 = *(uint64_t **)(v1094 + 16);
                              }
                              v1101[2] = (uint64_t)v1095;
                              *(_QWORD *)(*(_QWORD *)(v1094 + 16) + 8 * (**(_QWORD **)(v1094 + 16) != v1094)) = v1101;
                              *v1101 = v1094;
                              *(_QWORD *)(v1094 + 16) = v1101;
                              v1095 = (uint64_t *)v1101[2];
                              v1094 = *v1095;
                            }
                            *((_BYTE *)v1101 + 24) = 1;
                            *((_BYTE *)v1095 + 24) = 0;
                            v1106 = *(_QWORD *)(v1094 + 8);
                            *v1095 = v1106;
                            if (v1106)
                              *(_QWORD *)(v1106 + 16) = v1095;
                            *(_QWORD *)(v1094 + 16) = v1095[2];
                            *(_QWORD *)(v1095[2] + 8 * (*(_QWORD *)v1095[2] != (_QWORD)v1095)) = v1094;
                            *(_QWORD *)(v1094 + 8) = v1095;
                            goto LABEL_1424;
                          }
                        }
                        else if (!v1096
                               || (v1098 = *(unsigned __int8 *)(v1096 + 24), v1097 = (_BYTE *)(v1096 + 24), v1098))
                        {
                          if (*(uint64_t **)v1094 == v1092)
                          {
                            v1104 = v1092[1];
                            *(_QWORD *)v1094 = v1104;
                            if (v1104)
                            {
                              *(_QWORD *)(v1104 + 16) = v1094;
                              v1095 = *(uint64_t **)(v1094 + 16);
                            }
                            v1092[2] = (uint64_t)v1095;
                            *(_QWORD *)(*(_QWORD *)(v1094 + 16) + 8 * (**(_QWORD **)(v1094 + 16) != v1094)) = v1092;
                            v1092[1] = v1094;
                            *(_QWORD *)(v1094 + 16) = v1092;
                            v1095 = (uint64_t *)v1092[2];
                          }
                          else
                          {
                            v1092 = (uint64_t *)v1092[2];
                          }
                          *((_BYTE *)v1092 + 24) = 1;
                          *((_BYTE *)v1095 + 24) = 0;
                          v1094 = v1095[1];
                          v1105 = *(uint64_t **)v1094;
                          v1095[1] = *(_QWORD *)v1094;
                          if (v1105)
                            v1105[2] = (uint64_t)v1095;
                          *(_QWORD *)(v1094 + 16) = v1095[2];
                          *(_QWORD *)(v1095[2] + 8 * (*(_QWORD *)v1095[2] != (_QWORD)v1095)) = v1094;
                          *(_QWORD *)v1094 = v1095;
LABEL_1424:
                          v1095[2] = v1094;
                          break;
                        }
                        *(_BYTE *)(v1094 + 24) = 1;
                        v1092 = v1095;
                        *((_BYTE *)v1095 + 24) = v1095 == v1093;
                        *v1097 = 1;
                      }
                      while (v1095 != v1093);
                    }
                    v1103 = 0;
                    *(_QWORD *)&v1390[16] = ++v1083;
                  }
                  *((_DWORD *)v1091 + 8) = v1103 + 1;
                  v1107 = v1359.__r_.__value_.__l.__size_;
                  v1108 = v1081[1];
                  v1109 = &v1359.__r_.__value_.__l.__size_;
                  v1110 = &v1359.__r_.__value_.__l.__size_;
                  if (v1359.__r_.__value_.__l.__size_)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v1110 = (std::string::size_type *)v1107;
                        v1111 = *(unsigned __int8 *)(v1107 + 28);
                        if (v1108 >= v1111)
                          break;
                        v1107 = *v1110;
                        v1109 = v1110;
                        if (!*v1110)
                          goto LABEL_1433;
                      }
                      if (v1111 >= v1108)
                        break;
                      v1107 = v1110[1];
                      if (!v1107)
                      {
                        v1109 = v1110 + 1;
                        goto LABEL_1433;
                      }
                    }
                    v1124 = *((_DWORD *)v1110 + 8);
                    v1112 = v1110;
                  }
                  else
                  {
LABEL_1433:
                    v1112 = operator new(0x28uLL);
                    v1112[28] = v1108;
                    *((_DWORD *)v1112 + 8) = 0;
                    *(_QWORD *)v1112 = 0;
                    *((_QWORD *)v1112 + 1) = 0;
                    *((_QWORD *)v1112 + 2) = v1110;
                    *v1109 = (std::string::size_type)v1112;
                    v1113 = v1112;
                    if (*(_QWORD *)v1359.__r_.__value_.__l.__data_)
                    {
                      v1359.__r_.__value_.__r.__words[0] = *(_QWORD *)v1359.__r_.__value_.__l.__data_;
                      v1113 = (_BYTE *)*v1109;
                    }
                    v1114 = v1359.__r_.__value_.__l.__size_;
                    _ZF = v1113 == (_BYTE *)v1359.__r_.__value_.__l.__size_;
                    v1113[24] = v1113 == (_BYTE *)v1359.__r_.__value_.__l.__size_;
                    if (!_ZF)
                    {
                      do
                      {
                        v1115 = *((_QWORD *)v1113 + 2);
                        if (*(_BYTE *)(v1115 + 24))
                          break;
                        v1116 = *(uint64_t **)(v1115 + 16);
                        v1117 = *v1116;
                        if (*v1116 == v1115)
                        {
                          v1120 = v1116[1];
                          if (!v1120
                            || (v1121 = *(unsigned __int8 *)(v1120 + 24), v1118 = (_BYTE *)(v1120 + 24), v1121))
                          {
                            if (*(_BYTE **)v1115 == v1113)
                            {
                              v1122 = (uint64_t *)*((_QWORD *)v1113 + 2);
                            }
                            else
                            {
                              v1122 = *(uint64_t **)(v1115 + 8);
                              v1123 = *v1122;
                              *(_QWORD *)(v1115 + 8) = *v1122;
                              if (v1123)
                              {
                                *(_QWORD *)(v1123 + 16) = v1115;
                                v1116 = *(uint64_t **)(v1115 + 16);
                              }
                              v1122[2] = (uint64_t)v1116;
                              *(_QWORD *)(*(_QWORD *)(v1115 + 16) + 8 * (**(_QWORD **)(v1115 + 16) != v1115)) = v1122;
                              *v1122 = v1115;
                              *(_QWORD *)(v1115 + 16) = v1122;
                              v1116 = (uint64_t *)v1122[2];
                              v1115 = *v1116;
                            }
                            *((_BYTE *)v1122 + 24) = 1;
                            *((_BYTE *)v1116 + 24) = 0;
                            v1127 = *(_QWORD *)(v1115 + 8);
                            *v1116 = v1127;
                            if (v1127)
                              *(_QWORD *)(v1127 + 16) = v1116;
                            *(_QWORD *)(v1115 + 16) = v1116[2];
                            *(_QWORD *)(v1116[2] + 8 * (*(_QWORD *)v1116[2] != (_QWORD)v1116)) = v1115;
                            *(_QWORD *)(v1115 + 8) = v1116;
                            goto LABEL_1463;
                          }
                        }
                        else if (!v1117
                               || (v1119 = *(unsigned __int8 *)(v1117 + 24), v1118 = (_BYTE *)(v1117 + 24), v1119))
                        {
                          if (*(_BYTE **)v1115 == v1113)
                          {
                            v1125 = *((_QWORD *)v1113 + 1);
                            *(_QWORD *)v1115 = v1125;
                            if (v1125)
                            {
                              *(_QWORD *)(v1125 + 16) = v1115;
                              v1116 = *(uint64_t **)(v1115 + 16);
                            }
                            *((_QWORD *)v1113 + 2) = v1116;
                            *(_QWORD *)(*(_QWORD *)(v1115 + 16) + 8 * (**(_QWORD **)(v1115 + 16) != v1115)) = v1113;
                            *((_QWORD *)v1113 + 1) = v1115;
                            *(_QWORD *)(v1115 + 16) = v1113;
                            v1116 = (uint64_t *)*((_QWORD *)v1113 + 2);
                          }
                          else
                          {
                            v1113 = (_BYTE *)*((_QWORD *)v1113 + 2);
                          }
                          v1113[24] = 1;
                          *((_BYTE *)v1116 + 24) = 0;
                          v1115 = v1116[1];
                          v1126 = *(_BYTE **)v1115;
                          v1116[1] = *(_QWORD *)v1115;
                          if (v1126)
                            *((_QWORD *)v1126 + 2) = v1116;
                          *(_QWORD *)(v1115 + 16) = v1116[2];
                          *(_QWORD *)(v1116[2] + 8 * (*(_QWORD *)v1116[2] != (_QWORD)v1116)) = v1115;
                          *(_QWORD *)v1115 = v1116;
LABEL_1463:
                          v1116[2] = v1115;
                          break;
                        }
                        *(_BYTE *)(v1115 + 24) = 1;
                        v1113 = v1116;
                        *((_BYTE *)v1116 + 24) = v1116 == (uint64_t *)v1114;
                        *v1118 = 1;
                      }
                      while (v1116 != (uint64_t *)v1114);
                    }
                    v1124 = 0;
                    v1359.__r_.__value_.__r.__words[2] = ++v1084;
                  }
                  *((_DWORD *)v1112 + 8) = v1124 + 1;
                  v1128 = 0;
                  v1129 = 0.0;
                  v1130 = 0.0;
                  if ((*v1081 - 1) <= 3u)
                  {
                    v1131 = 4 * (*v1081 - 1);
                    v1128 = *(_DWORD *)((char *)&xmmword_19FFB2D90 + v1131);
                    v1129 = *(float *)((char *)&xmmword_19FFB3980 + v1131);
                    v1130 = *(float *)((char *)&xmmword_19FFB3580 + v1131);
                  }
                  v1035 = v1130 + v1035;
                  v1036 = v1129 + v1036;
                  __asm { FMOV            V1.2S, #1.0 }
                  _D1.i32[0] = v1128;
                  v1037 = vadd_f32(_D1, v1037);
                  ++v1038;
                  v1081 += 24;
                }
                while (v1081 != v1082);
              }
            }
            v1039 = v1328 + 144;
            v982 = 0x1E0CB3000uLL;
          }
          if (v1038)
          {
            *(float *)&v1034 = (float)v1038;
            v1035 = v1035 / (float)v1038;
            v1036 = v1036 / (float)v1038;
            v1037 = vdiv_f32(v1037, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v1034, 0));
          }
          v993 = v1265;
        }
        v1132 = **(_QWORD ***)(v993 + 64);
        v1133 = v1132[1];
        v1134 = (float32x2_t *)v1132[9];
        v1134->f32[0] = v1035;
        v1134->f32[1] = v1036;
        v1134[1] = v1037;
        if (v1132[8] > v1133)
          v1133 = v1132[8];
        v1132[7] = 0;
        v1132[8] = v1133;
      }
      v1136 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*((_QWORD *)this + 6) + 160));
      *((_QWORD *)v1136 + 8) = *(_QWORD *)md::DebugLayerRenderResources::unitRectMesh(*((md::DebugLayerRenderResources **)this
                                                                                      + 6));
      *((_QWORD *)v1136 + 4) = v993;
      *((_QWORD *)v1136 + 3) = *(_QWORD *)(*((_QWORD *)this + 6) + 168);
      ggl::CommandBuffer::pushRenderItem((uint64_t)v1385, v1136);
      *(float *)v1137.i32 = vmlas_n_f32(v1001 + (float)(v996 * 0.05), 0.95, v1273);
      v1350[12].i32[0] = -65536;
      v1138 = (float32x2_t)vdup_lane_s32(__sbc, 0);
      v1138.f32[0] = v1283;
      v1139 = (float32x2_t)vdup_lane_s32(v1291, 0);
      v1139.f32[0] = v1315;
      v1140 = (float32x2_t)vdup_lane_s32(v1298, 0);
      v1140.f32[0] = v1307;
      v1141 = vdiv_f32(vmla_f32(vmla_f32(v1140, (float32x2_t)0x3D4CCCCD3F733333, v1138), (float32x2_t)0x3F7333333D4CCCCDLL, v1139), (float32x2_t)vdup_lane_s32(v1137, 0));
      __asm { FMOV            V1.2S, #1.0 }
      v1139.i32[0] = vadd_f32(v1141, _D1).u32[0];
      v1139.i32[1] = vsub_f32(_D1, v1141).i32[1];
      v1350[1] = vcvt_f32_f64(vmulq_f64(v1270, vcvtq_f64_f32(v1139)));
      objc_msgSend(*(id *)(v982 + 2368), "stringWithFormat:", CFSTR("%d.%d.%d\n"), HIDWORD(v1356.__r_.__value_.__r.__words[0]), LODWORD(v1356.__r_.__value_.__r.__words[1]), v1356.__r_.__value_.__s.__data_[1]);
      v1143 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v1144 = (int8x16_t *)objc_msgSend(v1143, "UTF8String");
      v1145 = strlen(v1144->i8);
      ggl::DebugConsole::drawString((uint64_t)v1350, v1144, v1145, v1146, v1147);
      if (objc_msgSend(v1284, "paintLoadReason"))
      {
        ggl::DebugConsole::drawString((uint64_t)v1350, (int8x16_t *)"\n", 1uLL, v1148, v1149);
        v1152 = *(_BYTE **)v1390;
        if (*(_BYTE **)v1390 != &v1390[8])
        {
          do
          {
            v1160 = v1152[28];
            v1161 = 0xFF0000uLL >> (8 * v1160);
            v1162 = 0xFF000000uLL >> (8 * v1160);
            _CF = v1160 >= 5;
            if (v1160 >= 5)
              v1164 = 0;
            else
              v1164 = 0xFF0000FF00uLL >> (8 * v1160);
            if (_CF)
              v1165 = 0;
            else
              v1165 = v1161;
            if (_CF)
              LOBYTE(v1162) = 0;
            v1350[12].i8[0] = v1162;
            v1350[12].i8[1] = v1165;
            v1350[12].i8[2] = v1164;
            v1350[12].i8[3] = -1;
            v1166 = v1152[28];
            v1167 = "<Invalid>";
            if (v1166 <= 4)
              v1167 = off_1E42FB0B8[v1166];
            objc_msgSend(*(id *)(v982 + 2368), "stringWithFormat:", CFSTR("%s x %d\n"), v1167, *((unsigned int *)v1152 + 8));
            v1168 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v1169 = (int8x16_t *)objc_msgSend(v1168, "UTF8String");
            v1170 = strlen(v1169->i8);
            ggl::DebugConsole::drawString((uint64_t)v1350, v1169, v1170, v1171, v1172);

            v1173 = (_QWORD *)*((_QWORD *)v1152 + 1);
            if (v1173)
            {
              do
              {
                v1174 = v1173;
                v1173 = (_QWORD *)*v1173;
              }
              while (v1173);
            }
            else
            {
              do
              {
                v1174 = (_BYTE *)*((_QWORD *)v1152 + 2);
                _ZF = *(_QWORD *)v1174 == (_QWORD)v1152;
                v1152 = v1174;
              }
              while (!_ZF);
            }
            v1152 = v1174;
          }
          while (v1174 != &v1390[8]);
        }
        ggl::DebugConsole::drawString((uint64_t)v1350, (int8x16_t *)"\n-------------\n", 0xFuLL, v1150, v1151);
        v1155 = v1359.__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)v1359.__r_.__value_.__l.__data_ != &v1359.__r_.__value_.__r.__words[1])
        {
          do
          {
            v1350[12].i32[0] = -65536;
            v1175 = *(unsigned __int8 *)(v1155 + 28);
            v1176 = "<Invalid>";
            if (v1175 <= 3)
              v1176 = off_1E42FB118[v1175];
            objc_msgSend(*(id *)(v982 + 2368), "stringWithFormat:", CFSTR("%s x %d\n"), v1176, *(unsigned int *)(v1155 + 32));
            v1177 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v1178 = (int8x16_t *)objc_msgSend(v1177, "UTF8String");
            v1179 = strlen(v1178->i8);
            ggl::DebugConsole::drawString((uint64_t)v1350, v1178, v1179, v1180, v1181);

            v1182 = *(std::string **)(v1155 + 8);
            if (v1182)
            {
              do
              {
                v1183 = v1182;
                v1182 = (std::string *)v1182->__r_.__value_.__r.__words[0];
              }
              while (v1182);
            }
            else
            {
              do
              {
                v1183 = *(std::string **)(v1155 + 16);
                _ZF = v1183->__r_.__value_.__r.__words[0] == v1155;
                v1155 = (std::string::size_type)v1183;
              }
              while (!_ZF);
            }
            v1155 = (std::string::size_type)v1183;
          }
          while (v1183 != (std::string *)&v1359.__r_.__value_.__r.__words[1]);
        }
        ggl::DebugConsole::drawString((uint64_t)v1350, (int8x16_t *)"\n-------------\n", 0xFuLL, v1153, v1154);
        v1156 = v1389.__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)v1389.__r_.__value_.__l.__data_ != &v1389.__r_.__value_.__r.__words[1])
        {
          do
          {
            v1350[12].i32[0] = -65536;
            v1184 = *(unsigned __int8 *)(v1156 + 28);
            v1185 = "Preliminary";
            if (v1184 != 1)
              v1185 = "<Invalid>";
            _ZF = v1184 == 0;
            v1186 = "Standard";
            if (!_ZF)
              v1186 = v1185;
            objc_msgSend(*(id *)(v982 + 2368), "stringWithFormat:", CFSTR("%s x %d\n"), v1186, *(unsigned int *)(v1156 + 32));
            v1187 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v1188 = (int8x16_t *)objc_msgSend(v1187, "UTF8String");
            v1189 = strlen(v1188->i8);
            ggl::DebugConsole::drawString((uint64_t)v1350, v1188, v1189, v1190, v1191);

            v1192 = *(std::string **)(v1156 + 8);
            if (v1192)
            {
              do
              {
                v1193 = v1192;
                v1192 = (std::string *)v1192->__r_.__value_.__r.__words[0];
              }
              while (v1192);
            }
            else
            {
              do
              {
                v1193 = *(std::string **)(v1156 + 16);
                _ZF = v1193->__r_.__value_.__r.__words[0] == v1156;
                v1156 = (std::string::size_type)v1193;
              }
              while (!_ZF);
            }
            v1156 = (std::string::size_type)v1193;
          }
          while (v1193 != (std::string *)&v1389.__r_.__value_.__r.__words[1]);
        }
      }

      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy((_QWORD *)v1389.__r_.__value_.__l.__size_);
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy((_QWORD *)v1359.__r_.__value_.__l.__size_);
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)&v1390[8]);
      v1157 = __dst.__r_.__value_.__l.__size_;
      __dst.__r_.__value_.__r.__words[0] = __dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__r.__words[2] == __dst.__r_.__value_.__l.__size_)
      {
LABEL_1296:
        __dst.__r_.__value_.__l.__size_ = v1157;
      }
      else
      {
        v1158 = __dst.__r_.__value_.__l.__size_ + 144;
        while (1)
        {
          if (v1158 == __dst.__r_.__value_.__r.__words[2])
          {
            __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[2];
            goto LABEL_1297;
          }
          if (*(unsigned __int8 *)(v1158 + 112) != *(unsigned __int8 *)(__dst.__r_.__value_.__l.__size_ + 112))
            break;
          v1157 += 144;
          if (*(unsigned __int8 *)(v1158 + 113) == *(unsigned __int8 *)(__dst.__r_.__value_.__l.__size_ + 113)
            && *(_DWORD *)(v1158 + 116) == *(_DWORD *)(__dst.__r_.__value_.__l.__size_ + 116))
          {
            v1159 = *(_DWORD *)(v1158 + 120);
            v1158 += 144;
            if (v1159 == *(_DWORD *)(__dst.__r_.__value_.__l.__size_ + 120))
              continue;
          }
          goto LABEL_1296;
        }
        __dst.__r_.__value_.__l.__size_ = v1158;
      }
    }
    v871 = v1353;
    v872 = v1350;
  }
  if (objc_msgSend(v1284, "shouldFreezeLayoutCamera"))
  {
    v1194 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*((_QWORD *)this + 6) + 112));
    v1195 = *(_QWORD *)(v1347 + 5584);
    if (!v1195)
      v1195 = v1347;
    gm::inverse<double>((double *)v1390, (double *)(v1195 + 808));
    gm::operator*<double,4,4,4>(__b[0].f64, (double *)(v1347 + 808), (double *)v1390);
    *(float32x4_t *)v1354 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(__b[0]), __b[1]);
    *(float32x4_t *)v1351 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(__b[2]), __b[3]);
    v1337 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(__b[4]), *(float64x2_t *)v1394);
    v1329 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v1394[16]), *(float64x2_t *)&v1394[32]);
    v1196 = *(_QWORD *)(*(_QWORD *)(v1194 + 64) + 16);
    v1358 = 0;
    *(_OWORD *)&v1356.__r_.__value_.__l.__data_ = 0uLL;
    v1197 = *(_QWORD *)(v1196 + 8);
    __dst.__r_.__value_.__r.__words[0] = 0;
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = v1196;
    v1397 = v1197;
    LOWORD(v1398) = 1;
    if (v1197)
      v1198 = *(_QWORD *)(v1196 + 72);
    else
      v1198 = 0;
    v1400 = v1198;
    ggl::BufferMemory::operator=((uint64_t *)&v1356, (uint64_t)&__dst);
    ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&__dst);
    v1199 = v1358;
    *v1358 = *(_OWORD *)v1354;
    v1199[1] = *(_OWORD *)v1351;
    v1199[2] = v1337;
    v1199[3] = v1329;
    ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v1356);
    v1200 = **(double **)(v1194 + 64);
    *(_QWORD *)&v1391[8] = 0;
    *(_OWORD *)v1390 = 0uLL;
    v1201 = *(double *)(*(_QWORD *)&v1200 + 8);
    __b[0].f64[0] = 0.0;
    __b[0].f64[1] = v1200;
    __b[1].f64[0] = 0.0;
    __b[1].f64[1] = v1201;
    LOWORD(__b[2].f64[0]) = 1;
    if (v1201 == 0.0)
      v1202 = 0.0;
    else
      v1202 = *(double *)(*(_QWORD *)&v1200 + 72);
    __b[2].f64[1] = v1202;
    ggl::BufferMemory::operator=((uint64_t *)v1390, (uint64_t)__b);
    ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)__b);
    **(_OWORD **)&v1391[8] = xmmword_19FFB2D90;
    ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)v1390);
    md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)__b);
    v1203 = __b[0].f64[1];
    ggl::Debug::BasePipelineSetup::setTransformConstantData(*(_QWORD *)(v1194 + 64), *(_QWORD *)(v1194 + 160), *(uint64_t *)&__b[0].f64[0], *(uint64_t *)&__b[0].f64[1]);
    if (v1203 != 0.0)
    {
      v1204 = (unint64_t *)(*(_QWORD *)&v1203 + 8);
      do
        v1205 = __ldaxr(v1204);
      while (__stlxr(v1205 - 1, v1204));
      if (!v1205)
      {
        (*(void (**)(float64_t))(**(_QWORD **)&v1203 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v1203));
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v1203);
      }
    }
    v1206 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*((_QWORD *)this + 6) + 160));
    *((_QWORD *)v1206 + 8) = *(_QWORD *)md::DebugLayerRenderResources::cameraBoxMesh(*((md::DebugLayerRenderResources **)this
                                                                                     + 6));
    *((_QWORD *)v1206 + 4) = v1194;
    *((_QWORD *)v1206 + 3) = *(_QWORD *)(*((_QWORD *)this + 6) + 168);
    ggl::CommandBuffer::pushRenderItem((uint64_t)v1385, v1206);
    if (*(_QWORD *)(v1347 + 5584))
      v1207 = *(_QWORD *)(v1347 + 5584);
    else
      v1207 = v1347;
    v1208 = *(_QWORD *)(v1207 + 2968);
    v1209 = *(_QWORD *)(v1207 + 2960);
    if (v1208 != v1209)
    {
      v1210 = *(_QWORD *)(*((_QWORD *)this + 6) + 224);
      if (!v1210)
      {
        std::make_shared[abi:nn180100]<ggl::CommonMesh::Pos4Mesh,char const(&)[20],void>((ggl::CommonMesh::Pos4Mesh **)__b);
        std::shared_ptr<md::LabelFeature>::operator=[abi:nn180100](*((_QWORD *)this + 6) + 224, (__int128 *)__b);
        std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)__b);
        v1208 = *(_QWORD *)(v1207 + 2968);
        v1209 = *(_QWORD *)(v1207 + 2960);
        v1210 = *(_QWORD *)(*((_QWORD *)this + 6) + 224);
      }
      v1211 = (v1208 - v1209) >> 3;
      ggl::BufferData::resize(**(ggl::BufferData ***)(v1210 + 64), v1211);
      v1212 = **(double **)(*(_QWORD *)(*((_QWORD *)this + 6) + 224) + 64);
      *(_QWORD *)&v1391[8] = 0;
      *(_OWORD *)v1390 = 0uLL;
      *(_QWORD *)&v1213 = *(_QWORD *)(*(_QWORD *)&v1212 + 8) * v1211;
      __b[0].f64[0] = 0.0;
      __b[0].f64[1] = v1212;
      __b[1].f64[0] = 0.0;
      __b[1].f64[1] = v1213;
      LOWORD(__b[2].f64[0]) = 1;
      if (v1213 == 0.0)
        v1214 = 0.0;
      else
        v1214 = *(double *)(*(_QWORD *)&v1212 + 72);
      __b[2].f64[1] = v1214;
      ggl::BufferMemory::operator=((uint64_t *)v1390, (uint64_t)__b);
      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)__b);
      v1215 = *(_QWORD *)(v1207 + 2960);
      v1216 = *(_QWORD *)(v1207 + 2968) - v1215;
      if (v1216)
      {
        v1217 = 0;
        v1218 = v1216 >> 4;
        _CF = v1216 >> 4 != 0;
        v1219 = (v1216 >> 4) - 1;
        if (v1219 == 0 || !_CF)
          v1218 = 1;
        v1220 = (float32x2_t *)(*(_QWORD *)&v1391[8] + 16);
        do
        {
          v1220[-2] = vcvt_f32_f64(*(float64x2_t *)(v1215 + 16 * v1217));
          v1220[-1] = (float32x2_t)0x3F80000000000000;
          if (v1219 == v1217)
            v1221 = 0;
          else
            v1221 = v1217 + 1;
          *v1220 = vcvt_f32_f64(*(float64x2_t *)(v1215 + 16 * v1221));
          v1220[1] = (float32x2_t)0x3F80000000000000;
          v1220 += 4;
          ++v1217;
        }
        while (v1218 != v1217);
      }
      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)v1390);
      v1222 = ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*((_QWORD *)this + 6) + 112));
      v1223 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v1347 + 808)), *(float64x2_t *)(v1347 + 824));
      v1224 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v1347 + 840)), *(float64x2_t *)(v1347 + 856));
      v1225 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v1347 + 872)), *(float64x2_t *)(v1347 + 888));
      v1226 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v1347 + 904)), *(float64x2_t *)(v1347 + 920));
      v1227 = *(double *)(*(_QWORD *)(v1222 + 64) + 16);
      *(_QWORD *)&v1391[8] = 0;
      *(_OWORD *)v1390 = 0uLL;
      v1228 = *(double *)(*(_QWORD *)&v1227 + 8);
      __b[0].f64[0] = 0.0;
      __b[0].f64[1] = v1227;
      __b[1].f64[0] = 0.0;
      __b[1].f64[1] = v1228;
      LOWORD(__b[2].f64[0]) = 1;
      *(float32x4_t *)v1352 = v1224;
      *(float32x4_t *)v1355 = v1223;
      v1348 = v1225;
      v1338 = v1226;
      if (v1228 == 0.0)
        v1229 = 0.0;
      else
        v1229 = *(double *)(*(_QWORD *)&v1227 + 72);
      __b[2].f64[1] = v1229;
      ggl::BufferMemory::operator=((uint64_t *)v1390, (uint64_t)__b);
      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)__b);
      v1230 = *(_OWORD **)&v1391[8];
      **(_OWORD **)&v1391[8] = *(_OWORD *)v1355;
      v1230[1] = *(_OWORD *)v1352;
      v1230[2] = v1348;
      v1230[3] = v1338;
      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)v1390);
      v1231 = **(double **)(v1222 + 64);
      *(_QWORD *)&v1391[8] = 0;
      *(_OWORD *)v1390 = 0uLL;
      v1232 = *(double *)(*(_QWORD *)&v1231 + 8);
      __b[0].f64[0] = 0.0;
      __b[0].f64[1] = v1231;
      __b[1].f64[0] = 0.0;
      __b[1].f64[1] = v1232;
      LOWORD(__b[2].f64[0]) = 1;
      if (v1232 == 0.0)
        v1233 = 0.0;
      else
        v1233 = *(double *)(*(_QWORD *)&v1231 + 72);
      __b[2].f64[1] = v1233;
      ggl::BufferMemory::operator=((uint64_t *)v1390, (uint64_t)__b);
      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)__b);
      **(_OWORD **)&v1391[8] = xmmword_19FFB3480;
      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)v1390);
      md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)__b);
      v1234 = __b[0].f64[1];
      ggl::Debug::BasePipelineSetup::setTransformConstantData(*(_QWORD *)(v1222 + 64), *(_QWORD *)(v1222 + 160), *(uint64_t *)&__b[0].f64[0], *(uint64_t *)&__b[0].f64[1]);
      if (v1234 != 0.0)
      {
        v1235 = (unint64_t *)(*(_QWORD *)&v1234 + 8);
        do
          v1236 = __ldaxr(v1235);
        while (__stlxr(v1236 - 1, v1235));
        if (!v1236)
        {
          (*(void (**)(float64_t))(**(_QWORD **)&v1234 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v1234));
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v1234);
        }
      }
      v1237 = (ggl::RenderItem *)ggl::FragmentedPool<ggl::RenderItem>::pop(*(_QWORD *)(*((_QWORD *)this + 6) + 160));
      *((_QWORD *)v1237 + 8) = *(_QWORD *)(*((_QWORD *)this + 6) + 224);
      *((_QWORD *)v1237 + 4) = v1222;
      *((_QWORD *)v1237 + 3) = *(_QWORD *)(*((_QWORD *)this + 6) + 168);
      ggl::CommandBuffer::pushRenderItem((uint64_t)v1385, v1237);
    }
  }
  md::DebugRenderLayer::paintModelTiles(this, v871, v872, v1385);
  ggl::DebugConsole::end((uint64_t)v872);
LABEL_1575:
  if (v1376)
  {
    v1377 = v1376;
    operator delete(v1376);
  }
  if (v1379)
  {
    v1380 = v1379;
    operator delete(v1379);
  }
  if (v1382)
  {
    v1383 = v1382;
    operator delete(v1382);
  }
LABEL_1581:

  if (__p)
    operator delete(__p);
  if (!v1416)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_1616;
  }
  (*(void (**)(_QWORD *))(*v1416 + 48))(v1416);
  result = v1416;
  if (v1416 == v1415)
  {
    v1239 = 4;
    result = v1415;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v1239))();
  }
  else if (v1416)
  {
    v1239 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v1239))();
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::__unordered_map_hasher<std::shared_ptr<geo::codec::VectorTile>,std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::hash<std::shared_ptr<geo::codec::VectorTile>>,std::equal_to<std::shared_ptr<geo::codec::VectorTile>>,true>,std::__unordered_map_equal<std::shared_ptr<geo::codec::VectorTile>,std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>,std::equal_to<std::shared_ptr<geo::codec::VectorTile>>,std::hash<std::shared_ptr<geo::codec::VectorTile>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<geo::codec::VectorTile>,std::shared_ptr<md::ModelTileDebugData>>>>::clear(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  if (!a1[3])
    return;
  v2 = (_QWORD *)a1[2];
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (std::__shared_weak_count *)v5[5];
    if (!v6)
      goto LABEL_13;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      v9 = (std::__shared_weak_count *)v5[3];
      if (v9)
      {
LABEL_14:
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
LABEL_13:
      v9 = (std::__shared_weak_count *)v5[3];
      if (v9)
        goto LABEL_14;
    }
    operator delete(v5);
  }
  a1[2] = 0;
  v3 = a1[1];
  if (v3)
  {
    for (i = 0; i != v3; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
  }
  a1[3] = 0;
}

void sub_19F35410C(_Unwind_Exception *a1)
{
  void *v1;
  std::__shared_weak_count *v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);

  _Unwind_Resume(a1);
}

md::LabelExternalPointFeature *md::LabelExternalPointFeature::LabelExternalPointFeature(md::LabelExternalPointFeature *this)
{
  unsigned __int8 v2;
  unint64_t v3;
  __int128 *v4;
  __int128 v5;
  int v6;
  _OWORD *v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  int v15;

  *((_WORD *)this + 4) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0x7FFFFFFF437C0000;
  *((_BYTE *)this + 88) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_BYTE *)this + 112) = 0;
  *(_QWORD *)this = &off_1E42A1F90;
  *((_BYTE *)this + 176) = 0;
  *((_BYTE *)this + 220) = 0;
  *((_BYTE *)this + 224) = 0;
  *((_BYTE *)this + 228) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_BYTE *)this + 216) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_DWORD *)((char *)this + 279) = 0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = &off_1E42B5130;
  *((_QWORD *)this + 42) = 0;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  {
    qword_1ECE2FD68 = 0;
    md::LabelPoint::NullPoint(void)::kNullLabelPoint = 0u;
    *(_OWORD *)&qword_1ECE2FD58 = 0u;
    dword_1ECE2FD70 = 2139095039;
    word_1ECE2FD74 = 256;
    byte_1ECE2FD76 = 1;
  }
  v4 = (__int128 *)*((_QWORD *)this + 25);
  v3 = *((_QWORD *)this + 26);
  if ((unint64_t)v4 >= v3)
  {
    v8 = (_OWORD *)*((_QWORD *)this + 24);
    v9 = 0xAAAAAAAAAAAAAAABLL * (v4 - v8) + 1;
    if (v9 > 0x555555555555555)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - (_QWORD)v8) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0x555555555555555)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v12 = (char *)operator new(48 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[16 * (v4 - v8)];
    *(_OWORD *)v13 = md::LabelPoint::NullPoint(void)::kNullLabelPoint;
    *((_QWORD *)v13 + 2) = qword_1ECE2FD58;
    *(_OWORD *)(v13 + 24) = unk_1ECE2FD60;
    *((_DWORD *)v13 + 10) = dword_1ECE2FD70;
    *(_DWORD *)(v13 + 43) = *(int *)((char *)&dword_1ECE2FD70 + 3);
    v7 = v13 + 48;
    if (v4 != v8)
    {
      do
      {
        v14 = *(v4 - 3);
        *((_QWORD *)v13 - 4) = *((_QWORD *)v4 - 4);
        *((_OWORD *)v13 - 3) = v14;
        *(_OWORD *)(v13 - 24) = *(__int128 *)((char *)v4 - 24);
        v15 = *((_DWORD *)v4 - 2);
        *(_DWORD *)(v13 - 5) = *(_DWORD *)((char *)v4 - 5);
        *((_DWORD *)v13 - 2) = v15;
        v13 -= 48;
        v4 -= 3;
      }
      while (v4 != v8);
      v4 = (__int128 *)*((_QWORD *)this + 24);
    }
    *((_QWORD *)this + 24) = v13;
    *((_QWORD *)this + 25) = v7;
    *((_QWORD *)this + 26) = &v12[48 * v11];
    if (v4)
      operator delete(v4);
  }
  else
  {
    v5 = md::LabelPoint::NullPoint(void)::kNullLabelPoint;
    *((_QWORD *)v4 + 2) = qword_1ECE2FD58;
    *v4 = v5;
    *(__int128 *)((char *)v4 + 24) = unk_1ECE2FD60;
    v6 = dword_1ECE2FD70;
    *(_DWORD *)((char *)v4 + 43) = *(int *)((char *)&dword_1ECE2FD70 + 3);
    *((_DWORD *)v4 + 10) = v6;
    v7 = v4 + 3;
  }
  *((_QWORD *)this + 25) = v7;
  return this;
}

void sub_19F3543F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  md::DynamicTrafficTileList *v4;
  uint64_t v5;
  void **v6;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  void *v11;

  md::DynamicTrafficTileList::~DynamicTrafficTileList(v4);
  v8 = *(void **)(v1 + 400);
  if (v8)
  {
    *(_QWORD *)(v1 + 408) = v8;
    operator delete(v8);
  }
  std::vector<md::LabelFeaturePlacementInfo>::~vector[abi:nn180100](v3);
  v9 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v1 + 360) = v9;
    operator delete(v9);
  }
  *(_QWORD *)(v1 + 328) = v5;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v2);
  v10 = *(std::__shared_weak_count **)(v1 + 304);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);

  v11 = *(void **)(v1 + 192);
  if (v11)
  {
    *(_QWORD *)(v1 + 200) = v11;
    operator delete(v11);
  }
  md::LabelExternalFeature::~LabelExternalFeature((md::LabelExternalFeature *)v1);
  _Unwind_Resume(a1);
}

void sub_19F3544FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t md::BuildingRenderResources::BuildingRenderResources(uint64_t a1, void *a2, _OWORD *a3, uint64_t a4)
{
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  unsigned __int8 v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  int8x16_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int16x8_t v30;
  int32x4_t v31;
  int8x16_t v32;
  int32x4_t v33;
  int8x16_t v34;
  int32x4_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int16x8_t v45;
  int32x4_t v46;
  int8x16_t v47;
  int16x8_t v48;
  int32x4_t v49;
  int8x16_t v50;
  int32x4_t v51;
  int8x16_t v52;
  int32x4_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int16x8_t v68;
  int32x4_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int16x8_t v72;
  int32x4_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int32x4_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  std::__shared_weak_count *v96;
  unint64_t *p_shared_owners;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  __int128 v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  _QWORD *v120;
  __int128 v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  char *v134;
  __int128 v135;
  unsigned __int8 v136;
  __int128 v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  __int128 v141;
  unint64_t *v142;
  unint64_t v143;
  int8x16_t v144;
  int16x8_t v145;
  int32x4_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int16x8_t v149;
  int32x4_t v150;
  int8x16_t v151;
  int32x4_t v152;
  int8x16_t v153;
  int32x4_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int16x8_t v164;
  int32x4_t v165;
  int8x16_t v166;
  int16x8_t v167;
  int32x4_t v168;
  int8x16_t v169;
  int32x4_t v170;
  int8x16_t v171;
  int32x4_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  int8x16_t v178;
  int8x16_t v179;
  int8x16_t v180;
  int8x16_t v181;
  int8x16_t v182;
  int8x16_t v183;
  int8x16_t v184;
  int8x16_t v185;
  int8x16_t v186;
  int16x8_t v187;
  int32x4_t v188;
  int16x8_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int8x16_t v193;
  int8x16_t v194;
  int8x16_t v195;
  int16x8_t v196;
  int32x4_t v197;
  int16x8_t v198;
  int32x4_t v199;
  int8x16_t v200;
  int8x16_t v201;
  int8x16_t v202;
  int32x4_t v203;
  int8x16_t v204;
  int8x16_t v205;
  int8x16_t v206;
  int32x4_t v207;
  int8x16_t v208;
  int8x16_t v209;
  int8x16_t v210;
  int8x16_t v211;
  int8x16_t v212;
  int8x16_t v213;
  int8x16_t v214;
  int8x16_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t *v225;
  unint64_t v226;
  char *v227;
  __int128 v228;
  unsigned __int8 v229;
  __int128 v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t v233;
  __int128 v234;
  unint64_t *v235;
  unint64_t v236;
  int8x16_t v237;
  int16x8_t v238;
  int32x4_t v239;
  int8x16_t v240;
  int8x16_t v241;
  int16x8_t v242;
  int32x4_t v243;
  int8x16_t v244;
  int32x4_t v245;
  int8x16_t v246;
  int32x4_t v247;
  int8x16_t v248;
  int8x16_t v249;
  int8x16_t v250;
  int8x16_t v251;
  int8x16_t v252;
  int8x16_t v253;
  int8x16_t v254;
  int8x16_t v255;
  int8x16_t v256;
  int16x8_t v257;
  int32x4_t v258;
  int8x16_t v259;
  int16x8_t v260;
  int32x4_t v261;
  int8x16_t v262;
  int32x4_t v263;
  int8x16_t v264;
  int32x4_t v265;
  int8x16_t v266;
  int8x16_t v267;
  int8x16_t v268;
  int8x16_t v269;
  int8x16_t v270;
  int8x16_t v271;
  int8x16_t v272;
  int8x16_t v273;
  int8x16_t v274;
  int8x16_t v275;
  int8x16_t v276;
  int8x16_t v277;
  int8x16_t v278;
  int8x16_t v279;
  int16x8_t v280;
  int32x4_t v281;
  int16x8_t v282;
  int32x4_t v283;
  int32x4_t v284;
  int32x4_t v285;
  int8x16_t v286;
  int8x16_t v287;
  int8x16_t v288;
  int16x8_t v289;
  int32x4_t v290;
  int16x8_t v291;
  int32x4_t v292;
  int8x16_t v293;
  int8x16_t v294;
  int8x16_t v295;
  int32x4_t v296;
  int8x16_t v297;
  int8x16_t v298;
  int8x16_t v299;
  int32x4_t v300;
  int8x16_t v301;
  int8x16_t v302;
  int8x16_t v303;
  int8x16_t v304;
  int8x16_t v305;
  int8x16_t v306;
  int8x16_t v307;
  int8x16_t v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t *v318;
  unint64_t v319;
  char *v320;
  __int128 v321;
  unsigned __int8 v322;
  __int128 v323;
  unint64_t *v324;
  unint64_t v325;
  unint64_t v326;
  __int128 v327;
  unint64_t *v328;
  unint64_t v329;
  int8x16_t v330;
  int16x8_t v331;
  int32x4_t v332;
  int8x16_t v333;
  int8x16_t v334;
  int16x8_t v335;
  int32x4_t v336;
  int8x16_t v337;
  int32x4_t v338;
  int8x16_t v339;
  int32x4_t v340;
  int8x16_t v341;
  int8x16_t v342;
  int8x16_t v343;
  int8x16_t v344;
  int8x16_t v345;
  int8x16_t v346;
  int8x16_t v347;
  int8x16_t v348;
  int8x16_t v349;
  int16x8_t v350;
  int32x4_t v351;
  int8x16_t v352;
  int16x8_t v353;
  int32x4_t v354;
  int8x16_t v355;
  int32x4_t v356;
  int8x16_t v357;
  int32x4_t v358;
  int8x16_t v359;
  int8x16_t v360;
  int8x16_t v361;
  int8x16_t v362;
  int8x16_t v363;
  int8x16_t v364;
  int8x16_t v365;
  int8x16_t v366;
  int8x16_t v367;
  int8x16_t v368;
  int8x16_t v369;
  int8x16_t v370;
  int8x16_t v371;
  int8x16_t v372;
  int16x8_t v373;
  int32x4_t v374;
  int16x8_t v375;
  int32x4_t v376;
  int32x4_t v377;
  int32x4_t v378;
  int8x16_t v379;
  int8x16_t v380;
  int8x16_t v381;
  int16x8_t v382;
  int32x4_t v383;
  int16x8_t v384;
  int32x4_t v385;
  int8x16_t v386;
  int8x16_t v387;
  int8x16_t v388;
  int32x4_t v389;
  int8x16_t v390;
  int8x16_t v391;
  int8x16_t v392;
  int32x4_t v393;
  int8x16_t v394;
  int8x16_t v395;
  int8x16_t v396;
  int8x16_t v397;
  int8x16_t v398;
  int8x16_t v399;
  int8x16_t v400;
  int8x16_t v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  std::__shared_weak_count *v405;
  unint64_t *v406;
  unint64_t v407;
  uint64_t v408;
  std::__shared_weak_count *v409;
  uint64_t v410;
  unint64_t *v411;
  unint64_t v412;
  _QWORD *v413;
  __int128 v414;
  uint64_t v415;
  std::__shared_weak_count *v416;
  unint64_t *v417;
  unint64_t v418;
  std::__shared_weak_count *v419;
  unint64_t *v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  std::__shared_weak_count *v424;
  unint64_t *v425;
  unint64_t v426;
  _QWORD *v427;
  __int128 v428;
  uint64_t v429;
  std::__shared_weak_count *v430;
  unint64_t *v431;
  unint64_t v432;
  std::__shared_weak_count *v433;
  unint64_t *v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t v437;
  std::__shared_weak_count *v438;
  unint64_t *v439;
  unint64_t v440;
  _QWORD *v441;
  __int128 v442;
  uint64_t v443;
  std::__shared_weak_count *v444;
  unint64_t *v445;
  unint64_t v446;
  std::__shared_weak_count *v447;
  unint64_t *v448;
  unint64_t v449;
  uint64_t v450;
  uint64_t v451;
  std::__shared_weak_count *v452;
  unint64_t *v453;
  unint64_t v454;
  _QWORD *v455;
  __int128 v456;
  uint64_t v457;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  std::__shared_weak_count *v461;
  unint64_t *v462;
  unint64_t v463;
  uint64_t v464;
  uint64_t v465;
  std::__shared_weak_count *v466;
  unint64_t *v467;
  unint64_t v468;
  _QWORD *v469;
  __int128 v470;
  uint64_t v471;
  std::__shared_weak_count *v472;
  unint64_t *v473;
  unint64_t v474;
  std::__shared_weak_count *v475;
  unint64_t *v476;
  unint64_t v477;
  uint64_t v478;
  uint64_t v479;
  std::__shared_weak_count *v480;
  unint64_t *v481;
  unint64_t v482;
  _QWORD *v483;
  __int128 v484;
  uint64_t v485;
  std::__shared_weak_count *v486;
  unint64_t *v487;
  unint64_t v488;
  std::__shared_weak_count *v489;
  unint64_t *v490;
  unint64_t v491;
  uint64_t v492;
  uint64_t v493;
  std::__shared_weak_count *v494;
  unint64_t *v495;
  unint64_t v496;
  _QWORD *v497;
  __int128 v498;
  uint64_t v499;
  std::__shared_weak_count *v500;
  unint64_t *v501;
  unint64_t v502;
  std::__shared_weak_count *v503;
  unint64_t *v504;
  unint64_t v505;
  uint64_t v506;
  uint64_t v507;
  std::__shared_weak_count *v508;
  unint64_t *v509;
  unint64_t v510;
  _QWORD *v511;
  __int128 v512;
  uint64_t v513;
  std::__shared_weak_count *v514;
  unint64_t *v515;
  unint64_t v516;
  std::__shared_weak_count *v517;
  unint64_t *v518;
  unint64_t v519;
  uint64_t v520;
  uint64_t v521;
  std::__shared_weak_count *v522;
  unint64_t *v523;
  unint64_t v524;
  _QWORD *v525;
  __int128 v526;
  uint64_t v527;
  std::__shared_weak_count *v528;
  unint64_t *v529;
  unint64_t v530;
  std::__shared_weak_count *v531;
  unint64_t *v532;
  unint64_t v533;
  uint64_t v534;
  uint64_t v535;
  std::__shared_weak_count *v536;
  unint64_t *v537;
  unint64_t v538;
  _QWORD *v539;
  __int128 v540;
  uint64_t v541;
  std::__shared_weak_count *v542;
  unint64_t *v543;
  unint64_t v544;
  std::__shared_weak_count *v545;
  unint64_t *v546;
  unint64_t v547;
  uint64_t v548;
  std::__shared_weak_count *v549;
  uint64_t v550;
  unint64_t *v551;
  unint64_t v552;
  _QWORD *v553;
  __int128 v554;
  uint64_t v555;
  std::__shared_weak_count *v556;
  unint64_t *v557;
  unint64_t v558;
  std::__shared_weak_count *v559;
  unint64_t *v560;
  unint64_t v561;
  uint64_t v562;
  uint64_t v563;
  std::__shared_weak_count *v564;
  unint64_t *v565;
  unint64_t v566;
  _QWORD *v567;
  __int128 v568;
  uint64_t v569;
  std::__shared_weak_count *v570;
  unint64_t *v571;
  unint64_t v572;
  std::__shared_weak_count *v573;
  unint64_t *v574;
  unint64_t v575;
  uint64_t v576;
  uint64_t v577;
  std::__shared_weak_count *v578;
  unint64_t *v579;
  unint64_t v580;
  _QWORD *v581;
  __int128 v582;
  uint64_t v583;
  std::__shared_weak_count *v584;
  unint64_t *v585;
  unint64_t v586;
  std::__shared_weak_count *v587;
  unint64_t *v588;
  unint64_t v589;
  uint64_t v590;
  uint64_t v591;
  std::__shared_weak_count *v592;
  unint64_t *v593;
  unint64_t v594;
  _QWORD *v595;
  __int128 v596;
  uint64_t v597;
  std::__shared_weak_count *v598;
  void *v599;
  unint64_t *v600;
  unint64_t v601;
  std::__shared_weak_count *v602;
  unint64_t *v603;
  unint64_t v604;
  uint64_t v605;
  uint64_t v606;
  std::__shared_weak_count *v607;
  unint64_t *v608;
  unint64_t v609;
  _QWORD *v610;
  __int128 v611;
  uint64_t v612;
  std::__shared_weak_count *v613;
  unint64_t *v614;
  unint64_t v615;
  std::__shared_weak_count *v616;
  unint64_t *v617;
  unint64_t v618;
  uint64_t v619;
  uint64_t v620;
  std::__shared_weak_count *v621;
  unint64_t *v622;
  unint64_t v623;
  _QWORD *v624;
  __int128 v625;
  uint64_t v626;
  std::__shared_weak_count *v627;
  unint64_t *v628;
  unint64_t v629;
  std::__shared_weak_count *v630;
  unint64_t *v631;
  unint64_t v632;
  uint64_t v633;
  uint64_t v634;
  std::__shared_weak_count *v635;
  unint64_t *v636;
  unint64_t v637;
  _QWORD *v638;
  __int128 v639;
  uint64_t v640;
  std::__shared_weak_count *v641;
  unint64_t *v642;
  unint64_t v643;
  std::__shared_weak_count *v644;
  unint64_t *v645;
  unint64_t v646;
  uint64_t v647;
  uint64_t v648;
  std::__shared_weak_count *v649;
  unint64_t *v650;
  unint64_t v651;
  _QWORD *v652;
  __int128 v653;
  uint64_t v654;
  std::__shared_weak_count *v655;
  unint64_t *v656;
  unint64_t v657;
  std::__shared_weak_count *v658;
  unint64_t *v659;
  unint64_t v660;
  uint64_t v661;
  uint64_t v662;
  std::__shared_weak_count *v663;
  unint64_t *v664;
  unint64_t v665;
  _QWORD *v666;
  __int128 v667;
  uint64_t v668;
  std::__shared_weak_count *v669;
  unint64_t *v670;
  unint64_t v671;
  std::__shared_weak_count *v672;
  unint64_t *v673;
  unint64_t v674;
  uint64_t v675;
  uint64_t v676;
  std::__shared_weak_count *v677;
  unint64_t *v678;
  unint64_t v679;
  _QWORD *v680;
  __int128 v681;
  uint64_t v682;
  std::__shared_weak_count *v683;
  unint64_t *v684;
  unint64_t v685;
  std::__shared_weak_count *v686;
  unint64_t *v687;
  unint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  unint64_t *v692;
  unint64_t v693;
  char *v694;
  __int128 v695;
  unsigned __int8 v696;
  __int128 v697;
  unint64_t *v698;
  unint64_t v699;
  unint64_t v700;
  __int128 v701;
  unint64_t *v702;
  unint64_t v703;
  int8x16_t v704;
  int16x8_t v705;
  int32x4_t v706;
  int8x16_t v707;
  int8x16_t v708;
  int16x8_t v709;
  int32x4_t v710;
  int8x16_t v711;
  int32x4_t v712;
  int8x16_t v713;
  int32x4_t v714;
  int8x16_t v715;
  int8x16_t v716;
  int8x16_t v717;
  int8x16_t v718;
  int8x16_t v719;
  int8x16_t v720;
  int8x16_t v721;
  int8x16_t v722;
  int8x16_t v723;
  int16x8_t v724;
  int32x4_t v725;
  int8x16_t v726;
  int16x8_t v727;
  int32x4_t v728;
  int8x16_t v729;
  int32x4_t v730;
  int8x16_t v731;
  int32x4_t v732;
  int8x16_t v733;
  int8x16_t v734;
  int8x16_t v735;
  int8x16_t v736;
  int8x16_t v737;
  int8x16_t v738;
  int8x16_t v739;
  int8x16_t v740;
  int8x16_t v741;
  int8x16_t v742;
  int8x16_t v743;
  int8x16_t v744;
  int8x16_t v745;
  int8x16_t v746;
  int16x8_t v747;
  int32x4_t v748;
  int16x8_t v749;
  int32x4_t v750;
  int32x4_t v751;
  int32x4_t v752;
  int8x16_t v753;
  int8x16_t v754;
  int8x16_t v755;
  int16x8_t v756;
  int32x4_t v757;
  int16x8_t v758;
  int32x4_t v759;
  int8x16_t v760;
  int8x16_t v761;
  int8x16_t v762;
  int32x4_t v763;
  int8x16_t v764;
  int8x16_t v765;
  int8x16_t v766;
  int32x4_t v767;
  int8x16_t v768;
  int8x16_t v769;
  int8x16_t v770;
  int8x16_t v771;
  int8x16_t v772;
  int8x16_t v773;
  int8x16_t v774;
  int8x16_t v775;
  std::__shared_weak_count *v776;
  unint64_t *v777;
  unint64_t v778;
  std::__shared_weak_count *v779;
  unint64_t *v780;
  unint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  unint64_t *v785;
  unint64_t v786;
  char *v787;
  __int128 v788;
  unsigned __int8 v789;
  __int128 v790;
  unint64_t *v791;
  unint64_t v792;
  unint64_t v793;
  __int128 v794;
  unint64_t *v795;
  unint64_t v796;
  int8x16_t v797;
  int16x8_t v798;
  int32x4_t v799;
  int8x16_t v800;
  int8x16_t v801;
  int16x8_t v802;
  int32x4_t v803;
  int8x16_t v804;
  int32x4_t v805;
  int8x16_t v806;
  int32x4_t v807;
  int8x16_t v808;
  int8x16_t v809;
  int8x16_t v810;
  int8x16_t v811;
  int8x16_t v812;
  int8x16_t v813;
  int16x8_t v814;
  int32x4_t v815;
  int8x16_t v816;
  int16x8_t v817;
  int32x4_t v818;
  int8x16_t v819;
  int32x4_t v820;
  int8x16_t v821;
  int32x4_t v822;
  int8x16_t v823;
  int8x16_t v824;
  int8x16_t v825;
  int8x16_t v826;
  int8x16_t v827;
  int8x16_t v828;
  int8x16_t v829;
  int8x16_t v830;
  int8x16_t v831;
  int8x16_t v832;
  int8x16_t v833;
  int8x16_t v834;
  int8x16_t v835;
  int16x8_t v836;
  int32x4_t v837;
  int16x8_t v838;
  int32x4_t v839;
  int32x4_t v840;
  int32x4_t v841;
  int8x16_t v842;
  int8x16_t v843;
  int8x16_t v844;
  int8x16_t v845;
  int8x16_t v846;
  int8x16_t v847;
  int8x16_t v848;
  int8x16_t v849;
  int8x16_t v850;
  int16x8_t v851;
  int32x4_t v852;
  int16x8_t v853;
  int32x4_t v854;
  int32x4_t v855;
  int32x4_t v856;
  int8x16_t v857;
  int8x16_t v858;
  int8x16_t v859;
  int8x16_t v860;
  int8x16_t v861;
  int8x16_t v862;
  int8x16_t v863;
  std::__shared_weak_count *v864;
  unint64_t *v865;
  unint64_t v866;
  std::__shared_weak_count *v867;
  unint64_t *v868;
  unint64_t v869;
  uint64_t *v870;
  unsigned __int8 v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  unint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  unint64_t v883;
  unint64_t v884;
  uint64_t v885;
  uint64_t v886;
  _OWORD *v887;
  __int128 *v888;
  uint64_t v889;
  __int128 v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  unint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  unint64_t v901;
  unint64_t v902;
  uint64_t v903;
  uint64_t v904;
  _OWORD *v905;
  __int128 *v906;
  uint64_t v907;
  __int128 v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  _QWORD *v913;
  uint64_t v914;
  _QWORD *v915;
  uint64_t v916;
  uint64_t *v917;
  unsigned __int8 v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  unint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  unint64_t v930;
  unint64_t v931;
  uint64_t v932;
  uint64_t v933;
  _OWORD *v934;
  __int128 *v935;
  uint64_t v936;
  __int128 v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  unint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  unint64_t v948;
  unint64_t v949;
  uint64_t v950;
  uint64_t v951;
  _OWORD *v952;
  __int128 *v953;
  uint64_t v954;
  __int128 v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  _QWORD *v960;
  uint64_t v961;
  _QWORD *v962;
  uint64_t v963;
  uint64_t *v964;
  unsigned __int8 v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  unint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  unint64_t v977;
  unint64_t v978;
  uint64_t v979;
  uint64_t v980;
  _OWORD *v981;
  __int128 *v982;
  uint64_t v983;
  __int128 v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  unint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  unint64_t v995;
  unint64_t v996;
  uint64_t v997;
  uint64_t v998;
  _OWORD *v999;
  __int128 *v1000;
  uint64_t v1001;
  __int128 v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  _QWORD *v1007;
  uint64_t v1008;
  _QWORD *v1009;
  uint64_t v1010;
  uint64_t *v1011;
  unsigned __int8 v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  unint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  unint64_t v1024;
  unint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  _OWORD *v1028;
  __int128 *v1029;
  uint64_t v1030;
  __int128 v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  unint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  unint64_t v1042;
  unint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  _OWORD *v1046;
  __int128 *v1047;
  uint64_t v1048;
  __int128 v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  _QWORD *v1054;
  uint64_t v1055;
  _QWORD *v1056;
  uint64_t v1057;
  uint64_t *v1058;
  unsigned __int8 v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  unint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  unint64_t v1071;
  unint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  _OWORD *v1075;
  __int128 *v1076;
  uint64_t v1077;
  __int128 v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  unint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  unint64_t v1089;
  unint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  _OWORD *v1093;
  __int128 *v1094;
  uint64_t v1095;
  __int128 v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  _QWORD *v1101;
  uint64_t v1102;
  _QWORD *v1103;
  uint64_t v1104;
  uint64_t *v1105;
  unsigned __int8 v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  unint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  unint64_t v1118;
  unint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  _OWORD *v1122;
  __int128 *v1123;
  uint64_t v1124;
  __int128 v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  unint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  unint64_t v1136;
  unint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  _OWORD *v1140;
  __int128 *v1141;
  uint64_t v1142;
  __int128 v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  _QWORD *v1148;
  uint64_t v1149;
  _QWORD *v1150;
  uint64_t v1151;
  uint64_t *v1152;
  unsigned __int8 v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t *v1156;
  unsigned __int8 v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  unint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  unint64_t v1169;
  unint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  _OWORD *v1173;
  __int128 *v1174;
  uint64_t v1175;
  __int128 v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  unint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  unint64_t v1187;
  unint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  _OWORD *v1191;
  __int128 *v1192;
  uint64_t v1193;
  __int128 v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  _QWORD *v1199;
  uint64_t v1200;
  _QWORD *v1201;
  uint64_t v1202;
  uint64_t *v1203;
  unsigned __int8 v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  unint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  unint64_t v1216;
  unint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  _OWORD *v1220;
  __int128 *v1221;
  uint64_t v1222;
  __int128 v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  unint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  unint64_t v1234;
  unint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  _OWORD *v1238;
  __int128 *v1239;
  uint64_t v1240;
  __int128 v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  _QWORD *v1246;
  uint64_t v1247;
  _QWORD *v1248;
  uint64_t v1249;
  uint64_t *v1250;
  unsigned __int8 v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  unint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  unint64_t v1263;
  unint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  _OWORD *v1267;
  __int128 *v1268;
  uint64_t v1269;
  __int128 v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  unint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  unint64_t v1281;
  unint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  _OWORD *v1285;
  __int128 *v1286;
  uint64_t v1287;
  __int128 v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  _QWORD *v1293;
  uint64_t v1294;
  _QWORD *v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  unint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t v1305;
  unint64_t v1306;
  unint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  _OWORD *v1310;
  __int128 *v1311;
  uint64_t v1312;
  __int128 v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  unint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  unint64_t v1324;
  unint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  _OWORD *v1328;
  __int128 *v1329;
  uint64_t v1330;
  __int128 v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  _QWORD *v1336;
  uint64_t v1337;
  _QWORD *v1338;
  uint64_t v1339;
  uint64_t *v1340;
  unsigned __int8 v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  unint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  unint64_t v1353;
  unint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  _OWORD *v1357;
  __int128 *v1358;
  uint64_t v1359;
  __int128 v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  unint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  unint64_t v1371;
  unint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  _OWORD *v1375;
  __int128 *v1376;
  uint64_t v1377;
  __int128 v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  _QWORD *v1383;
  uint64_t v1384;
  _QWORD *v1385;
  uint64_t v1386;
  uint64_t *v1387;
  unsigned __int8 v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  uint64_t v1395;
  unint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  unint64_t v1400;
  unint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  _OWORD *v1404;
  __int128 *v1405;
  uint64_t v1406;
  __int128 v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  unint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  unint64_t v1418;
  unint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  _OWORD *v1422;
  __int128 *v1423;
  uint64_t v1424;
  __int128 v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  _QWORD *v1430;
  uint64_t v1431;
  _QWORD *v1432;
  std::__shared_weak_count *v1433;
  unint64_t *v1434;
  unint64_t v1435;
  _BYTE *v1436;
  _QWORD *v1437;
  std::__shared_weak_count *v1438;
  unint64_t *v1439;
  unint64_t v1440;
  uint64_t v1441;
  _QWORD *v1442;
  std::__shared_weak_count *v1443;
  unint64_t *v1444;
  unint64_t v1445;
  uint64_t v1446;
  _QWORD *v1447;
  std::__shared_weak_count *v1448;
  unint64_t *v1449;
  unint64_t v1450;
  uint64_t v1451;
  _QWORD *v1452;
  std::__shared_weak_count *v1453;
  unint64_t *v1454;
  unint64_t v1455;
  uint64_t v1456;
  unint64_t *v1457;
  uint64_t v1458;
  uint64_t v1459;
  _QWORD *v1460;
  uint64_t v1461;
  _QWORD *v1462;
  uint64_t v1463;
  uint64_t *v1464;
  unsigned __int8 v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  unint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  unint64_t v1477;
  unint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  _OWORD *v1481;
  __int128 *v1482;
  uint64_t v1483;
  __int128 v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  unint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  unint64_t v1495;
  unint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  _OWORD *v1499;
  __int128 *v1500;
  uint64_t v1501;
  __int128 v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  _QWORD *v1507;
  uint64_t v1508;
  _QWORD *v1509;
  uint64_t v1510;
  _QWORD *v1511;
  std::__shared_weak_count *v1512;
  unint64_t *v1513;
  unint64_t v1514;
  uint64_t v1515;
  unint64_t *v1516;
  uint64_t v1517;
  uint64_t v1518;
  _QWORD *v1519;
  uint64_t v1520;
  _QWORD *v1521;
  uint64_t v1522;
  _QWORD *v1523;
  std::__shared_weak_count *v1524;
  unint64_t *v1525;
  unint64_t v1526;
  _BYTE *v1527;
  uint64_t *v1528;
  unsigned __int8 v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  unint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  unint64_t v1541;
  unint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  _OWORD *v1545;
  __int128 *v1546;
  uint64_t v1547;
  __int128 v1548;
  uint64_t v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  unint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  unint64_t v1559;
  unint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  _OWORD *v1563;
  __int128 *v1564;
  uint64_t v1565;
  __int128 v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  _QWORD *v1571;
  uint64_t v1572;
  _QWORD *v1573;
  uint64_t v1574;
  unint64_t *v1575;
  uint64_t v1576;
  uint64_t v1577;
  _QWORD *v1578;
  uint64_t v1579;
  _QWORD *v1580;
  uint64_t v1581;
  _QWORD *v1582;
  std::__shared_weak_count *v1583;
  unint64_t *v1584;
  unint64_t v1585;
  uint64_t v1586;
  uint64_t *v1587;
  unsigned __int8 v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  uint64_t v1594;
  uint64_t v1595;
  unint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  unint64_t v1600;
  unint64_t v1601;
  uint64_t v1602;
  uint64_t v1603;
  _OWORD *v1604;
  __int128 *v1605;
  uint64_t v1606;
  __int128 v1607;
  uint64_t v1608;
  uint64_t v1609;
  uint64_t v1610;
  uint64_t v1611;
  uint64_t v1612;
  uint64_t v1613;
  unint64_t v1614;
  uint64_t v1615;
  uint64_t v1616;
  uint64_t v1617;
  unint64_t v1618;
  unint64_t v1619;
  uint64_t v1620;
  uint64_t v1621;
  _OWORD *v1622;
  __int128 *v1623;
  uint64_t v1624;
  __int128 v1625;
  uint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  uint64_t v1629;
  _QWORD *v1630;
  uint64_t v1631;
  _QWORD *v1632;
  uint64_t v1633;
  uint64_t v1635;
  ggl::BuildingFlatStrokeShader *v1636;
  unsigned __int8 v1637;
  unsigned __int8 v1638;
  unsigned __int8 v1639;
  ggl::BuildingFacadeDepthShader *v1640;
  unsigned __int8 v1641;
  unsigned __int8 v1642;
  unsigned __int8 v1643;
  ggl::BuildingTopDepthShader *v1644;
  unsigned __int8 v1645;
  unsigned __int8 v1646;
  unsigned __int8 v1647;
  ggl::BuildingPointyRoofDepthShader *v1648;
  unsigned __int8 v1649;
  unsigned __int8 v1650;
  unsigned __int8 v1651;
  ggl::BuildingShadowShader *v1652;
  unsigned __int8 v1653;
  unsigned __int8 v1654;
  unsigned __int8 v1655;
  ggl::PrefilteredLineShader *v1656;
  unsigned __int8 v1657;
  unsigned __int8 v1658;
  unsigned __int8 v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  unsigned __int8 v1690;
  unsigned __int8 v1691;
  unsigned __int8 v1692;
  unsigned __int8 v1693;
  unsigned __int8 v1694;
  unsigned __int8 v1695;
  unsigned __int8 v1696;
  unsigned __int8 v1697;
  unsigned __int8 v1698;
  unsigned __int8 v1699;
  unsigned __int8 v1700;
  unsigned __int8 v1701;
  unsigned __int8 v1702;
  unsigned __int8 v1703;
  unsigned __int8 v1704;
  unsigned __int8 v1705;
  unsigned __int8 v1706;
  unsigned __int8 v1707;
  uint64_t *v1708;
  uint64_t *v1709;
  uint64_t *v1710;
  uint64_t *v1711;
  uint64_t *v1712;
  uint64_t *v1713;
  uint64_t *v1714;
  uint64_t *v1715;
  uint64_t *v1716;
  uint64_t *v1717;
  uint64_t *v1718;
  uint64_t *v1719;
  uint64_t *v1720;
  uint64_t *v1721;
  uint64_t *v1722;
  uint64_t *v1723;
  uint64_t *v1724;
  uint64_t *v1725;
  id v1726;
  void *v1727;
  __int16 v1728;
  char v1729;
  _BYTE v1730[44];
  char v1731;
  uint64_t v1732;
  std::__shared_weak_count *v1733;
  __int16 v1734;
  char v1735;
  __int128 v1736;
  __int128 v1737;
  _QWORD v1738[3];
  _QWORD *v1739;
  _QWORD v1740[3];
  _QWORD *v1741;
  _QWORD v1742[3];
  _QWORD *v1743;
  _QWORD v1744[3];
  _QWORD *v1745;
  _QWORD v1746[3];
  _QWORD *v1747;
  _QWORD v1748[3];
  _QWORD *v1749;
  _QWORD v1750[3];
  _QWORD *v1751;
  _QWORD v1752[3];
  _QWORD *v1753;
  _QWORD v1754[3];
  _QWORD *v1755;
  _QWORD v1756[3];
  _QWORD *v1757;
  _QWORD v1758[3];
  _QWORD *v1759;
  _QWORD v1760[3];
  _QWORD *v1761;
  _QWORD v1762[3];
  _QWORD *v1763;
  _QWORD v1764[3];
  _QWORD *v1765;
  _QWORD v1766[3];
  _QWORD *v1767;
  _QWORD v1768[3];
  _QWORD *v1769;
  _QWORD v1770[3];
  _QWORD *v1771;
  _QWORD v1772[3];
  _QWORD *v1773;
  _QWORD v1774[3];
  _QWORD *v1775;
  _QWORD v1776[3];
  _QWORD *v1777;
  _QWORD v1778[3];
  _QWORD *v1779;
  _QWORD v1780[3];
  _QWORD *v1781;
  _QWORD v1782[3];
  _QWORD *v1783;
  _QWORD v1784[3];
  _QWORD *v1785;
  _QWORD v1786[3];
  _QWORD *v1787;
  _QWORD v1788[3];
  _QWORD *v1789;
  _QWORD v1790[3];
  _QWORD *v1791;
  _QWORD v1792[3];
  _QWORD *v1793;
  _QWORD v1794[3];
  _QWORD *v1795;
  _QWORD v1796[3];
  _QWORD *v1797;
  _QWORD v1798[3];
  _QWORD *v1799;
  _QWORD v1800[3];
  _QWORD *v1801;
  _QWORD v1802[3];
  _QWORD *v1803;
  _QWORD v1804[3];
  _QWORD *v1805;
  _QWORD v1806[3];
  _QWORD *v1807;
  _QWORD v1808[3];
  _QWORD *v1809;
  uint64_t v1810;

  v1810 = *MEMORY[0x1E0C80C00];
  v1726 = a2;
  *(_DWORD *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  bzero((void *)(a1 + 8), 0x2F0uLL);
  {
    v1635 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1635, "GeoGL", 0xA3D02C1100000005);
  }
  v1713 = (uint64_t *)(a1 + 472);
  v1724 = (uint64_t *)(a1 + 488);
  v1725 = (uint64_t *)(a1 + 480);
  v1722 = (uint64_t *)(a1 + 504);
  v1723 = (uint64_t *)(a1 + 496);
  v1720 = (uint64_t *)(a1 + 528);
  v1721 = (uint64_t *)(a1 + 512);
  v1709 = (uint64_t *)(a1 + 536);
  v1710 = (uint64_t *)(a1 + 520);
  v1708 = (uint64_t *)(a1 + 544);
  v1717 = (uint64_t *)(a1 + 576);
  v1718 = (uint64_t *)(a1 + 560);
  v1715 = (uint64_t *)(a1 + 592);
  v1716 = (uint64_t *)(a1 + 584);
  *(_QWORD *)(a1 + 832) = ggl::Allocator::instance(void)::alloc;
  *(_QWORD *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  v1712 = (uint64_t *)(a1 + 736);
  *(_OWORD *)(a1 + 856) = 0u;
  v1719 = (uint64_t *)(a1 + 744);
  *(_QWORD *)(a1 + 880) = 32;
  v1714 = (uint64_t *)(a1 + 752);
  v1711 = (uint64_t *)(a1 + 600);
  v8 = malloc_type_malloc(0xF10uLL, 0xB644C221uLL);
  *v8 = 0;
  v8[1] = 0;
  *(_QWORD *)(a1 + 864) = v8;
  *(_QWORD *)(a1 + 872) = v8;
  v9 = objc_msgSend(v1726, "shaderLibrary", a1 + 784);
  *(_DWORD *)a1 = 1065353216;
  +[VKPlatform sharedPlatform](VKPlatform, "sharedPlatform");
  v1727 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(a1 + 768) = objc_msgSend(v1727, "supportsBuildingStrokes");
  *(_BYTE *)(a1 + 769) = objc_msgSend(v1727, "supports3DBuildingStrokes");
  *(_BYTE *)(a1 + 770) = objc_msgSend(v1727, "supportsBuildingShadows");
  *(_BYTE *)(a1 + 771) = objc_msgSend(v1727, "supports3DBuildings");
  *(_BYTE *)(a1 + 772) = objc_msgSend(v1727, "supportsPerFragmentLighting");
  v10 = *(_QWORD *)(v9 + 80);
  v12 = *(_QWORD *)(v10 + 176);
  v11 = *(_QWORD *)(v10 + 184);
  *(_QWORD *)&v1736 = v12;
  *((_QWORD *)&v1736 + 1) = v11;
  if (v11)
  {
    v13 = (unint64_t *)(v11 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = (char *)operator new(0x198uLL);
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = 0;
  *(_QWORD *)v15 = &off_1E42E35B8;
  v16 = a3[1];
  *(_OWORD *)v1730 = *a3;
  *(_OWORD *)&v1730[16] = v16;
  if ((v17 & 1) == 0)
  {
    if ((_DWORD)v1636)
    {
      if ((v1637 & 1) == 0)
      {
        if ((_DWORD)v1636)
        {
          if ((v1690 & 1) == 0
          {
            if ((v1702 & 1) == 0
            {
              ggl::MeshTyped<ggl::BuildingFlatStroke::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::BuildingFlatStroke::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::BuildingFlatStroke::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::BuildingFlatStroke::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43CB8 = 1;
          }
          ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::BuildingFlatStroke::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE57E428 = &ggl::BuildingFlatStroke::pipelineDataBuildingFlatStrokePipelineDeviceStructs(void)::ref;
          qword_1EE57E430 = 0;
          if ((v1691 & 1) == 0
          {
            ggl::BuildingFlatStroke::pipelineDataBuildingFlatStrokePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1EE57E460 = ggl::BuildingFlatStroke::Building::reflection(void)::reflection;
          }
          qword_1EE57E438 = (uint64_t)&ggl::BuildingFlatStroke::pipelineDataBuildingFlatStrokePipelineConstantStructs(void)::ref;
          unk_1EE57E440 = xmmword_19FFB35A0;
        }
      }
      ggl::BuildingFlatStroke::BuildingFlatStrokePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup::typedReflection(void)::ref;
      ggl::BuildingFlatStrokeShader::typedReflection(v1636);
      qword_1ECE316D0 = (uint64_t)&ggl::BuildingFlatStrokeShader::typedReflection(void)::ref;
      if ((v1638 & 1) == 0
      {
        ggl::BuildingFlatStroke::pipelineStateBuildingFlatStrokePipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57E4D0 = 0;
        qword_1EE57E4D8 = (uint64_t)"";
        dword_1EE57E4E0 = 0;
        qword_1EE57E4E8 = (uint64_t)&ggl::BuildingFlatStroke::pipelineStateBuildingFlatStrokePipelineAttributeBinding_0(void)::attr;
        unk_1EE57E4F0 = 2;
      }
      qword_1ECE316D8 = (uint64_t)&ggl::BuildingFlatStroke::pipelineStateBuildingFlatStrokePipelineAttributeStructBinding(void)::attr;
      unk_1ECE316E0 = 1;
      qword_1ECE316E8 = 0;
      unk_1ECE316F0 = 1;
      qword_1ECE316F8 = (uint64_t)&ggl::BuildingFlatStroke::pipelineStateBuildingFlatStrokePipelineDeviceStructBinding(void)::ref;
      unk_1ECE31700 = 0;
      if ((v1639 & 1) == 0
      {
        ggl::BuildingFlatStroke::pipelineStateBuildingFlatStrokePipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57E470 = 0;
        qword_1EE57E478 = (uint64_t)"view";
        dword_1EE57E480 = 3;
        qword_1EE57E488 = (uint64_t)&ggl::BuildingFlatStroke::pipelineStateBuildingFlatStrokePipelineConstantViewBinding(void)::reflection;
        *(_OWORD *)algn_1EE57E490 = xmmword_19FFB35A0;
        qword_1EE57E4A0 = 1;
        unk_1EE57E4A8 = "building";
        dword_1EE57E4B0 = 3;
        qword_1EE57E4B8 = (uint64_t)&ggl::BuildingFlatStroke::pipelineStateBuildingFlatStrokePipelineConstantBuildingBinding(void)::reflection;
        unk_1EE57E4C0 = 6;
      }
      qword_1ECE31708 = (uint64_t)&ggl::BuildingFlatStroke::pipelineStateBuildingFlatStrokePipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1ECE31710 = 2;
    }
  }
  v18 = v1736;
  if (*((_QWORD *)&v1736 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v1736 + 1) + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *((_DWORD *)v15 + 14) = 0;
    *((_QWORD *)v15 + 5) = 0;
    *((_QWORD *)v15 + 6) = 0;
    *((_QWORD *)v15 + 3) = &off_1E42B6760;
    *((_QWORD *)v15 + 4) = 0;
    *((_QWORD *)v15 + 8) = &ggl::BuildingFlatStroke::BuildingFlatStrokePipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v15 + 72) = v18;
    do
      v21 = __ldxr(v19);
    while (__stxr(v21 + 1, v19));
  }
  else
  {
    *((_DWORD *)v15 + 14) = 0;
    *((_QWORD *)v15 + 5) = 0;
    *((_QWORD *)v15 + 6) = 0;
    *((_QWORD *)v15 + 3) = &off_1E42B6760;
    *((_QWORD *)v15 + 4) = 0;
    *((_QWORD *)v15 + 8) = &ggl::BuildingFlatStroke::BuildingFlatStrokePipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v15 + 72) = v18;
  }
  v15[136] = 0;
  *(_OWORD *)(v15 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v15 + 156) = 0;
  *(_QWORD *)(v15 + 172) = 0;
  *(_QWORD *)(v15 + 164) = 0;
  v15[184] = 0;
  *(_OWORD *)(v15 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v15 + 204) = 0;
  *(_QWORD *)(v15 + 220) = 0;
  *(_QWORD *)(v15 + 212) = 0;
  v15[232] = 0;
  *(_OWORD *)(v15 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v15 + 252) = 0;
  *(_QWORD *)(v15 + 268) = 0;
  *(_QWORD *)(v15 + 260) = 0;
  v22 = *(_OWORD *)&v1730[16];
  *(_OWORD *)(v15 + 280) = *(_OWORD *)v1730;
  *(_OWORD *)(v15 + 296) = v22;
  v15[312] = 0;
  *((_QWORD *)v15 + 48) = 0;
  *((_OWORD *)v15 + 22) = 0u;
  *((_OWORD *)v15 + 23) = 0u;
  *((_OWORD *)v15 + 20) = 0u;
  *((_OWORD *)v15 + 21) = 0u;
  *((_QWORD *)v15 + 49) = 0x100000001;
  v15[400] = 0;
  v15[88] = 1;
  *(_WORD *)(v15 + 89) = v1734;
  v15[91] = v1735;
  *(_OWORD *)(v15 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v15 + 27) = 7;
  *((_QWORD *)v15 + 14) = 0;
  *((_QWORD *)v15 + 15) = 0;
  *((_DWORD *)v15 + 32) = 0;
  v15[132] = 15;
  if (*((_QWORD *)&v18 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v18 + 1) + 16))(*((_QWORD *)&v18 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v18 + 1));
    }
  }
  v15[329] = 0;
  v25 = vceqzq_s8(*(int8x16_t *)(v15 + 328));
  v26 = vmovl_high_s8(v25);
  v27 = vmovl_s16(*(int16x4_t *)v26.i8);
  v28.i64[0] = v27.u32[0];
  v28.i64[1] = v27.u32[1];
  v29 = v28;
  v30 = vmovl_s8(*(int8x8_t *)v25.i8);
  v31 = vmovl_s16(*(int16x4_t *)v30.i8);
  v28.i64[0] = v31.u32[0];
  v28.i64[1] = v31.u32[1];
  v32 = v28;
  v33 = vmovl_high_s16(v26);
  v28.i64[0] = v33.u32[0];
  v28.i64[1] = v33.u32[1];
  v34 = v28;
  v35 = vmovl_high_s16(v30);
  v28.i64[0] = v35.u32[0];
  v28.i64[1] = v35.u32[1];
  v36 = v28;
  v28.i64[0] = v27.u32[2];
  v28.i64[1] = v27.u32[3];
  v37 = v28;
  v28.i64[0] = v31.u32[2];
  v28.i64[1] = v31.u32[3];
  v38 = v28;
  v28.i64[0] = v33.u32[2];
  v28.i64[1] = v33.u32[3];
  v39 = v28;
  v28.i64[0] = v35.u32[2];
  v28.i64[1] = v35.u32[3];
  v40 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v28);
  v41 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v39);
  v42 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v38);
  v43 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v34);
  v44 = vceqzq_s8(*(int8x16_t *)(v15 + 344));
  v45 = vmovl_high_s8(v44);
  v46 = vmovl_s16(*(int16x4_t *)v45.i8);
  v28.i64[0] = v46.u32[0];
  v28.i64[1] = v46.u32[1];
  v47 = v28;
  v48 = vmovl_s8(*(int8x8_t *)v44.i8);
  v49 = vmovl_s16(*(int16x4_t *)v48.i8);
  v28.i64[0] = v49.u32[0];
  v28.i64[1] = v49.u32[1];
  v50 = v28;
  v51 = vmovl_high_s16(v45);
  v28.i64[0] = v51.u32[0];
  v28.i64[1] = v51.u32[1];
  v52 = v28;
  v53 = vmovl_high_s16(v48);
  v28.i64[0] = v53.u32[0];
  v28.i64[1] = v53.u32[1];
  v54 = v28;
  v28.i64[0] = v46.u32[2];
  v28.i64[1] = v46.u32[3];
  v55 = v28;
  v28.i64[0] = v49.u32[2];
  v28.i64[1] = v49.u32[3];
  v56 = v28;
  v28.i64[0] = v51.u32[2];
  v28.i64[1] = v51.u32[3];
  v57 = v28;
  v28.i64[0] = v53.u32[2];
  v28.i64[1] = v53.u32[3];
  v58 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v57);
  v59 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v47), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v29));
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v50), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v32));
  v61 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v52), v43);
  v62 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v54), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v36));
  v63 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v55), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v37));
  v64 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v56), v42);
  v65 = vorrq_s8(v58, v41);
  v66 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v28), v40);
  v67 = vceqzq_s8(*(int8x16_t *)(v15 + 360));
  v68 = vmovl_high_s8(v67);
  v69 = vmovl_s16(*(int16x4_t *)v68.i8);
  v28.i64[0] = v69.i32[0];
  v28.i64[1] = v69.i32[1];
  v70 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v28);
  v71 = vceqzq_s8(*(int8x16_t *)(v15 + 376));
  v72 = vmovl_high_s8(v71);
  v73 = vmovl_s16(*(int16x4_t *)v72.i8);
  v28.i64[0] = v73.i32[0];
  v28.i64[1] = v73.i32[1];
  v74 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v28), v70), v59);
  v75 = vmovl_s8(*(int8x8_t *)v67.i8);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v28.i64[0] = v76.i32[0];
  v28.i64[1] = v76.i32[1];
  v77 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v28);
  v78 = vmovl_s8(*(int8x8_t *)v71.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v28.i64[0] = v79.i32[0];
  v28.i64[1] = v79.i32[1];
  v80 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v28), v77), v60);
  v81 = vmovl_high_s16(v68);
  v28.i64[0] = v81.i32[0];
  v28.i64[1] = v81.i32[1];
  v82 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v28);
  v83 = vmovl_high_s16(v72);
  v28.i64[0] = v83.i32[0];
  v28.i64[1] = v83.i32[1];
  v84 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v28), v82), v61);
  v85 = vmovl_high_s16(v75);
  v28.i64[0] = v85.i32[0];
  v28.i64[1] = v85.i32[1];
  v86 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v28);
  v87 = vmovl_high_s16(v78);
  v28.i64[0] = v87.i32[0];
  v28.i64[1] = v87.i32[1];
  v88 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v28), v86), v62);
  v28.i64[0] = v69.i32[2];
  v28.i64[1] = v69.i32[3];
  v89 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v28);
  v28.i64[0] = v73.i32[2];
  v28.i64[1] = v73.i32[3];
  v90 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v28), v89), v63);
  v28.i64[0] = v76.i32[2];
  v28.i64[1] = v76.i32[3];
  v91 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v28);
  v28.i64[0] = v79.i32[2];
  v28.i64[1] = v79.i32[3];
  v92 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v28), v91), v64);
  v28.i64[0] = v81.i32[2];
  v28.i64[1] = v81.i32[3];
  v93 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v28);
  v28.i64[0] = v83.i32[2];
  v28.i64[1] = v83.i32[3];
  v94 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v28), v93), v65);
  v28.i64[0] = v85.i32[2];
  v28.i64[1] = v85.i32[3];
  v95 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v28);
  v28.i64[0] = v87.i32[2];
  v28.i64[1] = v87.i32[3];
  *((_QWORD *)v15 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v80, v74), vorrq_s8(v88, v84)), (int64x2_t)vorrq_s8(vorrq_s8(v92, v90), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v28), v95), v66), v94))));
  *((_QWORD *)v15 + 3) = &off_1E42BA6A0;
  v15[312] = 1;
  v96 = *(std::__shared_weak_count **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v15 + 24;
  *(_QWORD *)(a1 + 32) = v15;
  if (v96)
  {
    p_shared_owners = (unint64_t *)&v96->__shared_owners_;
    do
      v98 = __ldaxr(p_shared_owners);
    while (__stlxr(v98 - 1, p_shared_owners));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  if (*((_QWORD *)&v1736 + 1))
  {
    v99 = (unint64_t *)(*((_QWORD *)&v1736 + 1) + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v1736 + 1) + 16))(*((_QWORD *)&v1736 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1736 + 1));
    }
  }
  v101 = *(_QWORD *)(v9 + 80);
  v103 = *(_QWORD *)(v101 + 152);
  v102 = *(std::__shared_weak_count **)(v101 + 160);
  v1732 = v103;
  v1733 = v102;
  if (v102)
  {
    v104 = (unint64_t *)&v102->__shared_owners_;
    do
      v105 = __ldxr(v104);
    while (__stxr(v105 + 1, v104));
  }
  memset(&v1730[20], 0, 24);
  v1730[0] = 0;
  *(_OWORD *)&v1730[4] = xmmword_19FFB3060;
  v1731 = 15;
  v106 = operator new(0x198uLL);
  v106[1] = 0;
  v106[2] = 0;
  *v106 = &off_1E42DEB58;
  v107 = a3[1];
  v1736 = *a3;
  v1737 = v107;
  v108 = ggl::BuildingFlat::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v106 + 3), &v1732, (uint64_t)v1730, &v1736);
  v109 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v108;
  *(_QWORD *)(a1 + 48) = v106;
  if (v109)
  {
    v110 = (unint64_t *)&v109->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = v1733;
  if (v1733)
  {
    v113 = (unint64_t *)&v1733->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = *(_QWORD *)(v9 + 80);
  v117 = *(_QWORD *)(v115 + 152);
  v116 = *(std::__shared_weak_count **)(v115 + 160);
  v1732 = v117;
  v1733 = v116;
  if (v116)
  {
    v118 = (unint64_t *)&v116->__shared_owners_;
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
  }
  memset(&v1730[24], 0, 20);
  v1730[0] = 1;
  *(_OWORD *)&v1730[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v1730[20] = 7;
  v1731 = 15;
  v120 = operator new(0x198uLL);
  v120[1] = 0;
  v120[2] = 0;
  *v120 = &off_1E42DEB58;
  v121 = a3[1];
  v1736 = *a3;
  v1737 = v121;
  v122 = ggl::BuildingFlat::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v120 + 3), &v1732, (uint64_t)v1730, &v1736);
  v123 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v122;
  *(_QWORD *)(a1 + 64) = v120;
  if (v123)
  {
    v124 = (unint64_t *)&v123->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = v1733;
  if (v1733)
  {
    v127 = (unint64_t *)&v1733->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = *(_QWORD *)(v9 + 80);
  v131 = *(_QWORD *)(v129 + 128);
  v130 = *(_QWORD *)(v129 + 136);
  *(_QWORD *)&v1736 = v131;
  *((_QWORD *)&v1736 + 1) = v130;
  if (v130)
  {
    v132 = (unint64_t *)(v130 + 8);
    do
      v133 = __ldxr(v132);
    while (__stxr(v133 + 1, v132));
  }
  v1732 = 0;
  v134 = (char *)operator new(0x198uLL);
  *((_QWORD *)v134 + 1) = 0;
  *((_QWORD *)v134 + 2) = 0;
  *(_QWORD *)v134 = &off_1E42E3698;
  v135 = a3[1];
  *(_OWORD *)v1730 = *a3;
  *(_OWORD *)&v1730[16] = v135;
  if ((v136 & 1) == 0)
  {
    if ((_DWORD)v1640)
    {
      if ((v1641 & 1) == 0)
      {
        if ((_DWORD)v1640)
        {
          if ((v1692 & 1) == 0
          {
            if ((v1703 & 1) == 0
            {
              ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::BuildingFacade::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43BF8 = 1;
          }
          ggl::BuildingFacadeDepth::BuildingPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::BuildingFacade::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE57E6F8 = &ggl::BuildingFacadeDepth::pipelineDataBuildingPipelineDeviceStructs(void)::ref;
          qword_1EE57E700 = 0;
          if ((v1693 & 1) == 0
          {
            ggl::BuildingFacadeDepth::pipelineDataBuildingPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1EE57E730 = ggl::Building::Scale::reflection(void)::reflection;
          }
          qword_1EE57E708 = (uint64_t)&ggl::BuildingFacadeDepth::pipelineDataBuildingPipelineConstantStructs(void)::ref;
          unk_1EE57E710 = xmmword_19FFB35C0;
        }
      }
      ggl::BuildingFacadeDepth::BuildingPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::BuildingFacadeDepth::BuildingPipelineSetup::typedReflection(void)::ref;
      ggl::BuildingFacadeDepthShader::typedReflection(v1640);
      qword_1ECE31780 = (uint64_t)&ggl::BuildingFacadeDepthShader::typedReflection(void)::ref;
      if ((v1642 & 1) == 0
      {
        ggl::BuildingFacadeDepth::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57E7A0 = 0;
        qword_1EE57E7A8 = (uint64_t)"";
        dword_1EE57E7B0 = 0;
        qword_1EE57E7B8 = (uint64_t)&ggl::BuildingFacadeDepth::pipelineStateBuildingPipelineAttributeBinding_0(void)::attr;
        unk_1EE57E7C0 = 2;
      }
      qword_1ECE31788 = (uint64_t)&ggl::BuildingFacadeDepth::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr;
      unk_1ECE31790 = 1;
      qword_1ECE31798 = 0;
      unk_1ECE317A0 = 0;
      qword_1ECE317A8 = (uint64_t)&ggl::BuildingFacadeDepth::pipelineStateBuildingPipelineDeviceStructBinding(void)::ref;
      unk_1ECE317B0 = 0;
      if ((v1643 & 1) == 0
      {
        ggl::BuildingFacadeDepth::pipelineStateBuildingPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57E740 = 0;
        qword_1EE57E748 = (uint64_t)"view";
        dword_1EE57E750 = 3;
        qword_1EE57E758 = (uint64_t)&ggl::BuildingFacadeDepth::pipelineStateBuildingPipelineConstantViewBinding(void)::reflection;
        unk_1EE57E760 = xmmword_19FFB35A0;
        qword_1EE57E770 = 1;
        unk_1EE57E778 = "scale";
        dword_1EE57E780 = 3;
        qword_1EE57E788 = (uint64_t)&ggl::BuildingFacadeDepth::pipelineStateBuildingPipelineConstantScaleBinding(void)::reflection;
        unk_1EE57E790 = 4;
      }
      qword_1ECE317B8 = (uint64_t)&ggl::BuildingFacadeDepth::pipelineStateBuildingPipelineConstantStructBinding(void)::ref;
      unk_1ECE317C0 = 2;
    }
  }
  v137 = v1736;
  if (*((_QWORD *)&v1736 + 1))
  {
    v138 = (unint64_t *)(*((_QWORD *)&v1736 + 1) + 8);
    do
      v139 = __ldxr(v138);
    while (__stxr(v139 + 1, v138));
    *((_DWORD *)v134 + 14) = 0;
    *((_QWORD *)v134 + 5) = 0;
    *((_QWORD *)v134 + 6) = 0;
    *((_QWORD *)v134 + 3) = &off_1E42B6760;
    *((_QWORD *)v134 + 4) = 0;
    *((_QWORD *)v134 + 8) = &ggl::BuildingFacadeDepth::BuildingPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v134 + 72) = v137;
    do
      v140 = __ldxr(v138);
    while (__stxr(v140 + 1, v138));
  }
  else
  {
    *((_DWORD *)v134 + 14) = 0;
    *((_QWORD *)v134 + 5) = 0;
    *((_QWORD *)v134 + 6) = 0;
    *((_QWORD *)v134 + 3) = &off_1E42B6760;
    *((_QWORD *)v134 + 4) = 0;
    *((_QWORD *)v134 + 8) = &ggl::BuildingFacadeDepth::BuildingPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v134 + 72) = v137;
  }
  v134[136] = 0;
  *(_OWORD *)(v134 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v134 + 156) = 0;
  *(_QWORD *)(v134 + 172) = 0;
  *(_QWORD *)(v134 + 164) = 0;
  v134[184] = 0;
  *(_OWORD *)(v134 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v134 + 204) = 0;
  *(_QWORD *)(v134 + 220) = 0;
  *(_QWORD *)(v134 + 212) = 0;
  v134[232] = 0;
  *(_OWORD *)(v134 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v134 + 252) = 0;
  *(_QWORD *)(v134 + 268) = 0;
  *(_QWORD *)(v134 + 260) = 0;
  v141 = *(_OWORD *)&v1730[16];
  *(_OWORD *)(v134 + 280) = *(_OWORD *)v1730;
  *(_OWORD *)(v134 + 296) = v141;
  v134[312] = 0;
  *((_QWORD *)v134 + 48) = 0;
  *((_OWORD *)v134 + 22) = 0u;
  *((_OWORD *)v134 + 23) = 0u;
  *((_OWORD *)v134 + 20) = 0u;
  *((_OWORD *)v134 + 21) = 0u;
  *((_QWORD *)v134 + 49) = 0x100000001;
  v134[400] = 0;
  v134[88] = 0;
  *(_WORD *)(v134 + 89) = v1728;
  v134[91] = v1729;
  *(_OWORD *)(v134 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v134 + 108) = v1732;
  *(_QWORD *)(v134 + 124) = 0;
  *(_QWORD *)(v134 + 116) = 0;
  v134[132] = 0;
  if (*((_QWORD *)&v137 + 1))
  {
    v142 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v137 + 1) + 16))(*((_QWORD *)&v137 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v137 + 1));
    }
  }
  v134[329] = 0;
  v144 = vceqzq_s8(*(int8x16_t *)(v134 + 328));
  v145 = vmovl_high_s8(v144);
  v146 = vmovl_s16(*(int16x4_t *)v145.i8);
  v147.i64[0] = v146.u32[0];
  v147.i64[1] = v146.u32[1];
  v148 = v147;
  v149 = vmovl_s8(*(int8x8_t *)v144.i8);
  v150 = vmovl_s16(*(int16x4_t *)v149.i8);
  v147.i64[0] = v150.u32[0];
  v147.i64[1] = v150.u32[1];
  v151 = v147;
  v152 = vmovl_high_s16(v145);
  v147.i64[0] = v152.u32[0];
  v147.i64[1] = v152.u32[1];
  v153 = v147;
  v154 = vmovl_high_s16(v149);
  v147.i64[0] = v154.u32[0];
  v147.i64[1] = v154.u32[1];
  v155 = v147;
  v147.i64[0] = v146.u32[2];
  v147.i64[1] = v146.u32[3];
  v156 = v147;
  v147.i64[0] = v150.u32[2];
  v147.i64[1] = v150.u32[3];
  v157 = v147;
  v147.i64[0] = v152.u32[2];
  v147.i64[1] = v152.u32[3];
  v158 = v147;
  v147.i64[0] = v154.u32[2];
  v147.i64[1] = v154.u32[3];
  v159 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v147);
  v160 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v158);
  v161 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v157);
  v162 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v153);
  v163 = vceqzq_s8(*(int8x16_t *)(v134 + 344));
  v164 = vmovl_high_s8(v163);
  v165 = vmovl_s16(*(int16x4_t *)v164.i8);
  v147.i64[0] = v165.u32[0];
  v147.i64[1] = v165.u32[1];
  v166 = v147;
  v167 = vmovl_s8(*(int8x8_t *)v163.i8);
  v168 = vmovl_s16(*(int16x4_t *)v167.i8);
  v147.i64[0] = v168.u32[0];
  v147.i64[1] = v168.u32[1];
  v169 = v147;
  v170 = vmovl_high_s16(v164);
  v147.i64[0] = v170.u32[0];
  v147.i64[1] = v170.u32[1];
  v171 = v147;
  v172 = vmovl_high_s16(v167);
  v147.i64[0] = v172.u32[0];
  v147.i64[1] = v172.u32[1];
  v173 = v147;
  v147.i64[0] = v165.u32[2];
  v147.i64[1] = v165.u32[3];
  v174 = v147;
  v147.i64[0] = v168.u32[2];
  v147.i64[1] = v168.u32[3];
  v175 = v147;
  v147.i64[0] = v170.u32[2];
  v147.i64[1] = v170.u32[3];
  v176 = v147;
  v147.i64[0] = v172.u32[2];
  v147.i64[1] = v172.u32[3];
  v177 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v176);
  v178 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v166), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v148));
  v179 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v169), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v151));
  v180 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v171), v162);
  v181 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v173), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v155));
  v182 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v174), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v156));
  v183 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v175), v161);
  v184 = vorrq_s8(v177, v160);
  v185 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v147), v159);
  v186 = vceqzq_s8(*(int8x16_t *)(v134 + 360));
  v187 = vmovl_s8(*(int8x8_t *)v186.i8);
  v188 = vmovl_high_s16(v187);
  v189 = vmovl_high_s8(v186);
  v190 = vmovl_high_s16(v189);
  v191 = vmovl_s16(*(int16x4_t *)v187.i8);
  v192 = vmovl_s16(*(int16x4_t *)v189.i8);
  v147.i64[0] = v191.i32[0];
  v147.i64[1] = v191.i32[1];
  v193 = v147;
  v147.i64[0] = v192.i32[0];
  v147.i64[1] = v192.i32[1];
  v194 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v147);
  v195 = vceqzq_s8(*(int8x16_t *)(v134 + 376));
  v196 = vmovl_high_s8(v195);
  v197 = vmovl_s16(*(int16x4_t *)v196.i8);
  v147.i64[0] = v197.i32[0];
  v147.i64[1] = v197.i32[1];
  v198 = vmovl_s8(*(int8x8_t *)v195.i8);
  v199 = vmovl_s16(*(int16x4_t *)v198.i8);
  v200 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v147), v194), v178);
  v147.i64[0] = v199.i32[0];
  v147.i64[1] = v199.i32[1];
  v201 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v147), vbicq_s8((int8x16_t)xmmword_19FFB3170, v193));
  v147.i64[0] = v190.i32[0];
  v147.i64[1] = v190.i32[1];
  v202 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v147);
  v203 = vmovl_high_s16(v196);
  v204 = vorrq_s8(v201, v179);
  v147.i64[0] = v203.i32[0];
  v147.i64[1] = v203.i32[1];
  v205 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v147), v202);
  v147.i64[0] = v188.i32[0];
  v147.i64[1] = v188.i32[1];
  v206 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v147);
  v207 = vmovl_high_s16(v198);
  v147.i64[0] = v207.i32[0];
  v147.i64[1] = v207.i32[1];
  v208 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v147), v206), v181);
  v147.i64[0] = v192.i32[2];
  v147.i64[1] = v192.i32[3];
  v209 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v147);
  v147.i64[0] = v197.i32[2];
  v147.i64[1] = v197.i32[3];
  v210 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v147), v209), v182);
  v147.i64[0] = v191.i32[2];
  v147.i64[1] = v191.i32[3];
  v211 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v147);
  v147.i64[0] = v199.i32[2];
  v147.i64[1] = v199.i32[3];
  v212 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v147), v211), v183);
  v147.i64[0] = v190.i32[2];
  v147.i64[1] = v190.i32[3];
  v213 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v147);
  v147.i64[0] = v203.i32[2];
  v147.i64[1] = v203.i32[3];
  v214 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v147), v213), v184);
  v147.i64[0] = v188.i32[2];
  v147.i64[1] = v188.i32[3];
  v215 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v147);
  v147.i64[0] = v207.i32[2];
  v147.i64[1] = v207.i32[3];
  *((_QWORD *)v134 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v204, v200), vorrq_s8(v208, vorrq_s8(v205, v180))), (int64x2_t)vorrq_s8(vorrq_s8(v212, v210), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v147), v215), v185), v214))));
  *((_QWORD *)v134 + 3) = &off_1E42BA868;
  v134[312] = 1;
  v216 = *(std::__shared_weak_count **)(a1 + 80);
  *(_QWORD *)(a1 + 72) = v134 + 24;
  *(_QWORD *)(a1 + 80) = v134;
  if (v216)
  {
    v217 = (unint64_t *)&v216->__shared_owners_;
    do
      v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
  }
  v219 = (std::__shared_weak_count *)*((_QWORD *)&v1736 + 1);
  if (*((_QWORD *)&v1736 + 1))
  {
    v220 = (unint64_t *)(*((_QWORD *)&v1736 + 1) + 8);
    do
      v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
    }
  }
  v222 = *(_QWORD *)(v9 + 80);
  v224 = *(_QWORD *)(v222 + 248);
  v223 = *(_QWORD *)(v222 + 256);
  *(_QWORD *)&v1736 = v224;
  *((_QWORD *)&v1736 + 1) = v223;
  if (v223)
  {
    v225 = (unint64_t *)(v223 + 8);
    do
      v226 = __ldxr(v225);
    while (__stxr(v226 + 1, v225));
  }
  v1732 = 0;
  v227 = (char *)operator new(0x198uLL);
  *((_QWORD *)v227 + 1) = 0;
  *((_QWORD *)v227 + 2) = 0;
  *(_QWORD *)v227 = &off_1E42E08E0;
  v228 = a3[1];
  *(_OWORD *)v1730 = *a3;
  *(_OWORD *)&v1730[16] = v228;
  if ((v229 & 1) == 0)
  {
    if ((_DWORD)v1644)
    {
      if ((v1645 & 1) == 0)
      {
        if ((_DWORD)v1644)
        {
          if ((v1694 & 1) == 0
          {
            if ((v1704 & 1) == 0
            {
              ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::compressedVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r;
            unk_1ECE43B18 = 1;
          }
          ggl::BuildingTopDepth::CompressedMeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r;
          unk_1EE57C980 = &ggl::BuildingTopDepth::pipelineDataCompressedMeshPipelineDeviceStructs(void)::ref;
          qword_1EE57C988 = 0;
          if ((v1695 & 1) == 0
          {
            ggl::BuildingTopDepth::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(_QWORD *)algn_1EE57C9B8 = ggl::Building::Scale::reflection(void)::reflection;
          }
          qword_1EE57C990 = (uint64_t)&ggl::BuildingTopDepth::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref;
          unk_1EE57C998 = xmmword_19FFB35C0;
        }
      }
      ggl::BuildingTopDepth::CompressedMeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::BuildingTopDepth::CompressedMeshPipelineSetup::typedReflection(void)::ref;
      ggl::BuildingTopDepthShader::typedReflection(v1644);
      qword_1ECE31388 = (uint64_t)&ggl::BuildingTopDepthShader::typedReflection(void)::ref;
      if ((v1646 & 1) == 0
      {
        ggl::BuildingTopDepth::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE57CA28 = 0;
        qword_1EE57CA30 = (uint64_t)"";
        dword_1EE57CA38 = 0;
        qword_1EE57CA40 = (uint64_t)&ggl::BuildingTopDepth::pipelineStateCompressedMeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE57CA48 = 1;
      }
      qword_1ECE31390 = (uint64_t)&ggl::BuildingTopDepth::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1ECE31398 = 1;
      qword_1ECE313A0 = 0;
      unk_1ECE313A8 = 0;
      qword_1ECE313B0 = (uint64_t)&ggl::BuildingTopDepth::pipelineStateCompressedMeshPipelineDeviceStructBinding(void)::ref;
      unk_1ECE313B8 = 0;
      if ((v1647 & 1) == 0
      {
        ggl::BuildingTopDepth::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE57C9C8 = 0;
        qword_1EE57C9D0 = (uint64_t)"view";
        dword_1EE57C9D8 = 3;
        qword_1EE57C9E0 = (uint64_t)&ggl::BuildingTopDepth::pipelineStateCompressedMeshPipelineConstantViewBinding(void)::reflection;
        unk_1EE57C9E8 = xmmword_19FFB35A0;
        qword_1EE57C9F8 = 1;
        unk_1EE57CA00 = "scale";
        dword_1EE57CA08 = 3;
        qword_1EE57CA10 = (uint64_t)&ggl::BuildingTopDepth::pipelineStateCompressedMeshPipelineConstantScaleBinding(void)::reflection;
        unk_1EE57CA18 = 4;
      }
      qword_1ECE313C0 = (uint64_t)&ggl::BuildingTopDepth::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref;
      unk_1ECE313C8 = 2;
    }
  }
  v230 = v1736;
  if (*((_QWORD *)&v1736 + 1))
  {
    v231 = (unint64_t *)(*((_QWORD *)&v1736 + 1) + 8);
    do
      v232 = __ldxr(v231);
    while (__stxr(v232 + 1, v231));
    *((_DWORD *)v227 + 14) = 0;
    *((_QWORD *)v227 + 5) = 0;
    *((_QWORD *)v227 + 6) = 0;
    *((_QWORD *)v227 + 3) = &off_1E42B6760;
    *((_QWORD *)v227 + 4) = 0;
    *((_QWORD *)v227 + 8) = &ggl::BuildingTopDepth::CompressedMeshPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v227 + 72) = v230;
    do
      v233 = __ldxr(v231);
    while (__stxr(v233 + 1, v231));
  }
  else
  {
    *((_DWORD *)v227 + 14) = 0;
    *((_QWORD *)v227 + 5) = 0;
    *((_QWORD *)v227 + 6) = 0;
    *((_QWORD *)v227 + 3) = &off_1E42B6760;
    *((_QWORD *)v227 + 4) = 0;
    *((_QWORD *)v227 + 8) = &ggl::BuildingTopDepth::CompressedMeshPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v227 + 72) = v230;
  }
  v227[136] = 0;
  *(_OWORD *)(v227 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v227 + 156) = 0;
  *(_QWORD *)(v227 + 172) = 0;
  *(_QWORD *)(v227 + 164) = 0;
  v227[184] = 0;
  *(_OWORD *)(v227 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v227 + 204) = 0;
  *(_QWORD *)(v227 + 220) = 0;
  *(_QWORD *)(v227 + 212) = 0;
  v227[232] = 0;
  *(_OWORD *)(v227 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v227 + 252) = 0;
  *(_QWORD *)(v227 + 268) = 0;
  *(_QWORD *)(v227 + 260) = 0;
  v234 = *(_OWORD *)&v1730[16];
  *(_OWORD *)(v227 + 280) = *(_OWORD *)v1730;
  *(_OWORD *)(v227 + 296) = v234;
  v227[312] = 0;
  *((_QWORD *)v227 + 48) = 0;
  *((_OWORD *)v227 + 22) = 0u;
  *((_OWORD *)v227 + 23) = 0u;
  *((_OWORD *)v227 + 20) = 0u;
  *((_OWORD *)v227 + 21) = 0u;
  *((_QWORD *)v227 + 49) = 0x100000001;
  v227[400] = 0;
  v227[88] = 0;
  *(_WORD *)(v227 + 89) = v1728;
  v227[91] = v1729;
  *(_OWORD *)(v227 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v227 + 108) = v1732;
  *(_QWORD *)(v227 + 124) = 0;
  *(_QWORD *)(v227 + 116) = 0;
  v227[132] = 0;
  if (*((_QWORD *)&v230 + 1))
  {
    v235 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
    do
      v236 = __ldaxr(v235);
    while (__stlxr(v236 - 1, v235));
    if (!v236)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v230 + 1) + 16))(*((_QWORD *)&v230 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v230 + 1));
    }
  }
  v227[329] = 0;
  v237 = vceqzq_s8(*(int8x16_t *)(v227 + 328));
  v238 = vmovl_high_s8(v237);
  v239 = vmovl_s16(*(int16x4_t *)v238.i8);
  v240.i64[0] = v239.u32[0];
  v240.i64[1] = v239.u32[1];
  v241 = v240;
  v242 = vmovl_s8(*(int8x8_t *)v237.i8);
  v243 = vmovl_s16(*(int16x4_t *)v242.i8);
  v240.i64[0] = v243.u32[0];
  v240.i64[1] = v243.u32[1];
  v244 = v240;
  v245 = vmovl_high_s16(v238);
  v240.i64[0] = v245.u32[0];
  v240.i64[1] = v245.u32[1];
  v246 = v240;
  v247 = vmovl_high_s16(v242);
  v240.i64[0] = v247.u32[0];
  v240.i64[1] = v247.u32[1];
  v248 = v240;
  v240.i64[0] = v239.u32[2];
  v240.i64[1] = v239.u32[3];
  v249 = v240;
  v240.i64[0] = v243.u32[2];
  v240.i64[1] = v243.u32[3];
  v250 = v240;
  v240.i64[0] = v245.u32[2];
  v240.i64[1] = v245.u32[3];
  v251 = v240;
  v240.i64[0] = v247.u32[2];
  v240.i64[1] = v247.u32[3];
  v252 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v240);
  v253 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v251);
  v254 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v250);
  v255 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v246);
  v256 = vceqzq_s8(*(int8x16_t *)(v227 + 344));
  v257 = vmovl_high_s8(v256);
  v258 = vmovl_s16(*(int16x4_t *)v257.i8);
  v240.i64[0] = v258.u32[0];
  v240.i64[1] = v258.u32[1];
  v259 = v240;
  v260 = vmovl_s8(*(int8x8_t *)v256.i8);
  v261 = vmovl_s16(*(int16x4_t *)v260.i8);
  v240.i64[0] = v261.u32[0];
  v240.i64[1] = v261.u32[1];
  v262 = v240;
  v263 = vmovl_high_s16(v257);
  v240.i64[0] = v263.u32[0];
  v240.i64[1] = v263.u32[1];
  v264 = v240;
  v265 = vmovl_high_s16(v260);
  v240.i64[0] = v265.u32[0];
  v240.i64[1] = v265.u32[1];
  v266 = v240;
  v240.i64[0] = v258.u32[2];
  v240.i64[1] = v258.u32[3];
  v267 = v240;
  v240.i64[0] = v261.u32[2];
  v240.i64[1] = v261.u32[3];
  v268 = v240;
  v240.i64[0] = v263.u32[2];
  v240.i64[1] = v263.u32[3];
  v269 = v240;
  v240.i64[0] = v265.u32[2];
  v240.i64[1] = v265.u32[3];
  v270 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v269);
  v271 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v259), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v241));
  v272 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v262), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v244));
  v273 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v264), v255);
  v274 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v266), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v248));
  v275 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v267), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v249));
  v276 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v268), v254);
  v277 = vorrq_s8(v270, v253);
  v278 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v240), v252);
  v279 = vceqzq_s8(*(int8x16_t *)(v227 + 360));
  v280 = vmovl_s8(*(int8x8_t *)v279.i8);
  v281 = vmovl_high_s16(v280);
  v282 = vmovl_high_s8(v279);
  v283 = vmovl_high_s16(v282);
  v284 = vmovl_s16(*(int16x4_t *)v280.i8);
  v285 = vmovl_s16(*(int16x4_t *)v282.i8);
  v240.i64[0] = v284.i32[0];
  v240.i64[1] = v284.i32[1];
  v286 = v240;
  v240.i64[0] = v285.i32[0];
  v240.i64[1] = v285.i32[1];
  v287 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v240);
  v288 = vceqzq_s8(*(int8x16_t *)(v227 + 376));
  v289 = vmovl_high_s8(v288);
  v290 = vmovl_s16(*(int16x4_t *)v289.i8);
  v240.i64[0] = v290.i32[0];
  v240.i64[1] = v290.i32[1];
  v291 = vmovl_s8(*(int8x8_t *)v288.i8);
  v292 = vmovl_s16(*(int16x4_t *)v291.i8);
  v293 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v240), v287), v271);
  v240.i64[0] = v292.i32[0];
  v240.i64[1] = v292.i32[1];
  v294 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v240), vbicq_s8((int8x16_t)xmmword_19FFB3170, v286));
  v240.i64[0] = v283.i32[0];
  v240.i64[1] = v283.i32[1];
  v295 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v240);
  v296 = vmovl_high_s16(v289);
  v297 = vorrq_s8(v294, v272);
  v240.i64[0] = v296.i32[0];
  v240.i64[1] = v296.i32[1];
  v298 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v240), v295);
  v240.i64[0] = v281.i32[0];
  v240.i64[1] = v281.i32[1];
  v299 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v240);
  v300 = vmovl_high_s16(v291);
  v240.i64[0] = v300.i32[0];
  v240.i64[1] = v300.i32[1];
  v301 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v240), v299), v274);
  v240.i64[0] = v285.i32[2];
  v240.i64[1] = v285.i32[3];
  v302 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v240);
  v240.i64[0] = v290.i32[2];
  v240.i64[1] = v290.i32[3];
  v303 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v240), v302), v275);
  v240.i64[0] = v284.i32[2];
  v240.i64[1] = v284.i32[3];
  v304 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v240);
  v240.i64[0] = v292.i32[2];
  v240.i64[1] = v292.i32[3];
  v305 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v240), v304), v276);
  v240.i64[0] = v283.i32[2];
  v240.i64[1] = v283.i32[3];
  v306 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v240);
  v240.i64[0] = v296.i32[2];
  v240.i64[1] = v296.i32[3];
  v307 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v240), v306), v277);
  v240.i64[0] = v281.i32[2];
  v240.i64[1] = v281.i32[3];
  v308 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v240);
  v240.i64[0] = v300.i32[2];
  v240.i64[1] = v300.i32[3];
  *((_QWORD *)v227 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v297, v293), vorrq_s8(v301, vorrq_s8(v298, v273))), (int64x2_t)vorrq_s8(vorrq_s8(v305, v303), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v240), v308), v278), v307))));
  *((_QWORD *)v227 + 3) = &off_1E42B8650;
  v227[312] = 1;
  v309 = *(std::__shared_weak_count **)(a1 + 96);
  *(_QWORD *)(a1 + 88) = v227 + 24;
  *(_QWORD *)(a1 + 96) = v227;
  if (v309)
  {
    v310 = (unint64_t *)&v309->__shared_owners_;
    do
      v311 = __ldaxr(v310);
    while (__stlxr(v311 - 1, v310));
    if (!v311)
    {
      ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
      std::__shared_weak_count::__release_weak(v309);
    }
  }
  v312 = (std::__shared_weak_count *)*((_QWORD *)&v1736 + 1);
  if (*((_QWORD *)&v1736 + 1))
  {
    v313 = (unint64_t *)(*((_QWORD *)&v1736 + 1) + 8);
    do
      v314 = __ldaxr(v313);
    while (__stlxr(v314 - 1, v313));
    if (!v314)
    {
      ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
      std::__shared_weak_count::__release_weak(v312);
    }
  }
  v315 = *(_QWORD *)(v9 + 80);
  v317 = *(_QWORD *)(v315 + 200);
  v316 = *(_QWORD *)(v315 + 208);
  *(_QWORD *)&v1736 = v317;
  *((_QWORD *)&v1736 + 1) = v316;
  if (v316)
  {
    v318 = (unint64_t *)(v316 + 8);
    do
      v319 = __ldxr(v318);
    while (__stxr(v319 + 1, v318));
  }
  v1732 = 0;
  v320 = (char *)operator new(0x198uLL);
  *((_QWORD *)v320 + 1) = 0;
  *((_QWORD *)v320 + 2) = 0;
  *(_QWORD *)v320 = &off_1E42E3C80;
  v321 = a3[1];
  *(_OWORD *)v1730 = *a3;
  *(_OWORD *)&v1730[16] = v321;
  if ((v322 & 1) == 0)
  {
    if ((_DWORD)v1648)
    {
      if ((v1649 & 1) == 0)
      {
        if ((_DWORD)v1648)
        {
          if ((v1696 & 1) == 0
          {
            if ((v1705 & 1) == 0
            {
              ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::BuildingPointyRoof::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43CE0 = 1;
          }
          ggl::BuildingPointyRoofDepth::BuildingPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::BuildingPointyRoof::DefaultVbo>::typedReflection(void)::r;
          unk_1EE57F7F0 = &ggl::BuildingPointyRoofDepth::pipelineDataBuildingPipelineDeviceStructs(void)::ref;
          qword_1EE57F7F8 = 0;
          if ((v1697 & 1) == 0
          {
            ggl::BuildingPointyRoofDepth::pipelineDataBuildingPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(_QWORD *)algn_1EE57F828 = ggl::Building::Scale::reflection(void)::reflection;
          }
          qword_1EE57F800 = (uint64_t)&ggl::BuildingPointyRoofDepth::pipelineDataBuildingPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE57F808 = xmmword_19FFB35C0;
        }
      }
      ggl::BuildingPointyRoofDepth::BuildingPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::BuildingPointyRoofDepth::BuildingPipelineSetup::typedReflection(void)::ref;
      ggl::BuildingPointyRoofDepthShader::typedReflection(v1648);
      qword_1ECE31B78 = (uint64_t)&ggl::BuildingPointyRoofDepthShader::typedReflection(void)::ref;
      if ((v1650 & 1) == 0
      {
        ggl::BuildingPointyRoofDepth::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE57F898 = 0;
        qword_1EE57F8A0 = (uint64_t)"";
        dword_1EE57F8A8 = 0;
        qword_1EE57F8B0 = (uint64_t)&ggl::BuildingPointyRoofDepth::pipelineStateBuildingPipelineAttributeBinding_0(void)::attr;
        unk_1EE57F8B8 = 2;
      }
      qword_1ECE31B80 = (uint64_t)&ggl::BuildingPointyRoofDepth::pipelineStateBuildingPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1ECE31B88 = 1;
      qword_1ECE31B90 = 0;
      unk_1ECE31B98 = 0;
      qword_1ECE31BA0 = (uint64_t)&ggl::BuildingPointyRoofDepth::pipelineStateBuildingPipelineDeviceStructBinding(void)::ref;
      unk_1ECE31BA8 = 0;
      if ((v1651 & 1) == 0
      {
        ggl::BuildingPointyRoofDepth::pipelineStateBuildingPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE57F838 = 0;
        qword_1EE57F840 = (uint64_t)"view";
        dword_1EE57F848 = 3;
        qword_1EE57F850 = (uint64_t)&ggl::BuildingPointyRoofDepth::pipelineStateBuildingPipelineConstantViewBinding(void)::reflection;
        unk_1EE57F858 = xmmword_19FFB35A0;
        qword_1EE57F868 = 1;
        unk_1EE57F870 = "scale";
        dword_1EE57F878 = 3;
        qword_1EE57F880 = (uint64_t)&ggl::BuildingPointyRoofDepth::pipelineStateBuildingPipelineConstantScaleBinding(void)::reflection;
        unk_1EE57F888 = 4;
      }
      qword_1ECE31BB0 = (uint64_t)&ggl::BuildingPointyRoofDepth::pipelineStateBuildingPipelineConstantStructBinding(void)::ref;
      unk_1ECE31BB8 = 2;
    }
  }
  v323 = v1736;
  if (*((_QWORD *)&v1736 + 1))
  {
    v324 = (unint64_t *)(*((_QWORD *)&v1736 + 1) + 8);
    do
      v325 = __ldxr(v324);
    while (__stxr(v325 + 1, v324));
    *((_DWORD *)v320 + 14) = 0;
    *((_QWORD *)v320 + 5) = 0;
    *((_QWORD *)v320 + 6) = 0;
    *((_QWORD *)v320 + 3) = &off_1E42B6760;
    *((_QWORD *)v320 + 4) = 0;
    *((_QWORD *)v320 + 8) = &ggl::BuildingPointyRoofDepth::BuildingPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v320 + 72) = v323;
    do
      v326 = __ldxr(v324);
    while (__stxr(v326 + 1, v324));
  }
  else
  {
    *((_DWORD *)v320 + 14) = 0;
    *((_QWORD *)v320 + 5) = 0;
    *((_QWORD *)v320 + 6) = 0;
    *((_QWORD *)v320 + 3) = &off_1E42B6760;
    *((_QWORD *)v320 + 4) = 0;
    *((_QWORD *)v320 + 8) = &ggl::BuildingPointyRoofDepth::BuildingPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v320 + 72) = v323;
  }
  v320[136] = 0;
  *(_OWORD *)(v320 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v320 + 156) = 0;
  *(_QWORD *)(v320 + 172) = 0;
  *(_QWORD *)(v320 + 164) = 0;
  v320[184] = 0;
  *(_OWORD *)(v320 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v320 + 204) = 0;
  *(_QWORD *)(v320 + 220) = 0;
  *(_QWORD *)(v320 + 212) = 0;
  v320[232] = 0;
  *(_OWORD *)(v320 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v320 + 252) = 0;
  *(_QWORD *)(v320 + 268) = 0;
  *(_QWORD *)(v320 + 260) = 0;
  v327 = *(_OWORD *)&v1730[16];
  *(_OWORD *)(v320 + 280) = *(_OWORD *)v1730;
  *(_OWORD *)(v320 + 296) = v327;
  v320[312] = 0;
  *((_QWORD *)v320 + 48) = 0;
  *((_OWORD *)v320 + 22) = 0u;
  *((_OWORD *)v320 + 23) = 0u;
  *((_OWORD *)v320 + 20) = 0u;
  *((_OWORD *)v320 + 21) = 0u;
  *((_QWORD *)v320 + 49) = 0x100000001;
  v320[400] = 0;
  v320[88] = 0;
  *(_WORD *)(v320 + 89) = v1728;
  v320[91] = v1729;
  *(_OWORD *)(v320 + 92) = xmmword_19FFB3060;
  *(_QWORD *)(v320 + 108) = v1732;
  *(_QWORD *)(v320 + 124) = 0;
  *(_QWORD *)(v320 + 116) = 0;
  v320[132] = 0;
  if (*((_QWORD *)&v323 + 1))
  {
    v328 = (unint64_t *)(*((_QWORD *)&v323 + 1) + 8);
    do
      v329 = __ldaxr(v328);
    while (__stlxr(v329 - 1, v328));
    if (!v329)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v323 + 1) + 16))(*((_QWORD *)&v323 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v323 + 1));
    }
  }
  v320[329] = 0;
  v330 = vceqzq_s8(*(int8x16_t *)(v320 + 328));
  v331 = vmovl_high_s8(v330);
  v332 = vmovl_s16(*(int16x4_t *)v331.i8);
  v333.i64[0] = v332.u32[0];
  v333.i64[1] = v332.u32[1];
  v334 = v333;
  v335 = vmovl_s8(*(int8x8_t *)v330.i8);
  v336 = vmovl_s16(*(int16x4_t *)v335.i8);
  v333.i64[0] = v336.u32[0];
  v333.i64[1] = v336.u32[1];
  v337 = v333;
  v338 = vmovl_high_s16(v331);
  v333.i64[0] = v338.u32[0];
  v333.i64[1] = v338.u32[1];
  v339 = v333;
  v340 = vmovl_high_s16(v335);
  v333.i64[0] = v340.u32[0];
  v333.i64[1] = v340.u32[1];
  v341 = v333;
  v333.i64[0] = v332.u32[2];
  v333.i64[1] = v332.u32[3];
  v342 = v333;
  v333.i64[0] = v336.u32[2];
  v333.i64[1] = v336.u32[3];
  v343 = v333;
  v333.i64[0] = v338.u32[2];
  v333.i64[1] = v338.u32[3];
  v344 = v333;
  v333.i64[0] = v340.u32[2];
  v333.i64[1] = v340.u32[3];
  v345 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v333);
  v346 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v344);
  v347 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v343);
  v348 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v339);
  v349 = vceqzq_s8(*(int8x16_t *)(v320 + 344));
  v350 = vmovl_high_s8(v349);
  v351 = vmovl_s16(*(int16x4_t *)v350.i8);
  v333.i64[0] = v351.u32[0];
  v333.i64[1] = v351.u32[1];
  v352 = v333;
  v353 = vmovl_s8(*(int8x8_t *)v349.i8);
  v354 = vmovl_s16(*(int16x4_t *)v353.i8);
  v333.i64[0] = v354.u32[0];
  v333.i64[1] = v354.u32[1];
  v355 = v333;
  v356 = vmovl_high_s16(v350);
  v333.i64[0] = v356.u32[0];
  v333.i64[1] = v356.u32[1];
  v357 = v333;
  v358 = vmovl_high_s16(v353);
  v333.i64[0] = v358.u32[0];
  v333.i64[1] = v358.u32[1];
  v359 = v333;
  v333.i64[0] = v351.u32[2];
  v333.i64[1] = v351.u32[3];
  v360 = v333;
  v333.i64[0] = v354.u32[2];
  v333.i64[1] = v354.u32[3];
  v361 = v333;
  v333.i64[0] = v356.u32[2];
  v333.i64[1] = v356.u32[3];
  v362 = v333;
  v333.i64[0] = v358.u32[2];
  v333.i64[1] = v358.u32[3];
  v363 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v362);
  v364 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v352), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v334));
  v365 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v355), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v337));
  v366 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v357), v348);
  v367 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v359), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v341));
  v368 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v360), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v342));
  v369 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v361), v347);
  v370 = vorrq_s8(v363, v346);
  v371 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v333), v345);
  v372 = vceqzq_s8(*(int8x16_t *)(v320 + 360));
  v373 = vmovl_s8(*(int8x8_t *)v372.i8);
  v374 = vmovl_high_s16(v373);
  v375 = vmovl_high_s8(v372);
  v376 = vmovl_high_s16(v375);
  v377 = vmovl_s16(*(int16x4_t *)v373.i8);
  v378 = vmovl_s16(*(int16x4_t *)v375.i8);
  v333.i64[0] = v377.i32[0];
  v333.i64[1] = v377.i32[1];
  v379 = v333;
  v333.i64[0] = v378.i32[0];
  v333.i64[1] = v378.i32[1];
  v380 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v333);
  v381 = vceqzq_s8(*(int8x16_t *)(v320 + 376));
  v382 = vmovl_high_s8(v381);
  v383 = vmovl_s16(*(int16x4_t *)v382.i8);
  v333.i64[0] = v383.i32[0];
  v333.i64[1] = v383.i32[1];
  v384 = vmovl_s8(*(int8x8_t *)v381.i8);
  v385 = vmovl_s16(*(int16x4_t *)v384.i8);
  v386 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v333), v380), v364);
  v333.i64[0] = v385.i32[0];
  v333.i64[1] = v385.i32[1];
  v387 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v333), vbicq_s8((int8x16_t)xmmword_19FFB3170, v379));
  v333.i64[0] = v376.i32[0];
  v333.i64[1] = v376.i32[1];
  v388 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v333);
  v389 = vmovl_high_s16(v382);
  v390 = vorrq_s8(v387, v365);
  v333.i64[0] = v389.i32[0];
  v333.i64[1] = v389.i32[1];
  v391 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v333), v388);
  v333.i64[0] = v374.i32[0];
  v333.i64[1] = v374.i32[1];
  v392 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v333);
  v393 = vmovl_high_s16(v384);
  v333.i64[0] = v393.i32[0];
  v333.i64[1] = v393.i32[1];
  v394 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v333), v392), v367);
  v333.i64[0] = v378.i32[2];
  v333.i64[1] = v378.i32[3];
  v395 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v333);
  v333.i64[0] = v383.i32[2];
  v333.i64[1] = v383.i32[3];
  v396 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v333), v395), v368);
  v333.i64[0] = v377.i32[2];
  v333.i64[1] = v377.i32[3];
  v397 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v333);
  v333.i64[0] = v385.i32[2];
  v333.i64[1] = v385.i32[3];
  v398 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v333), v397), v369);
  v333.i64[0] = v376.i32[2];
  v333.i64[1] = v376.i32[3];
  v399 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v333);
  v333.i64[0] = v389.i32[2];
  v333.i64[1] = v389.i32[3];
  v400 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v333), v399), v370);
  v333.i64[0] = v374.i32[2];
  v333.i64[1] = v374.i32[3];
  v401 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v333);
  v333.i64[0] = v393.i32[2];
  v333.i64[1] = v393.i32[3];
  *((_QWORD *)v320 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v390, v386), vorrq_s8(v394, vorrq_s8(v391, v366))), (int64x2_t)vorrq_s8(vorrq_s8(v398, v396), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v333), v401), v371), v400))));
  *((_QWORD *)v320 + 3) = &off_1E42BB130;
  v320[312] = 1;
  v402 = *(std::__shared_weak_count **)(a1 + 112);
  *(_QWORD *)(a1 + 104) = v320 + 24;
  *(_QWORD *)(a1 + 112) = v320;
  if (v402)
  {
    v403 = (unint64_t *)&v402->__shared_owners_;
    do
      v404 = __ldaxr(v403);
    while (__stlxr(v404 - 1, v403));
    if (!v404)
    {
      ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
      std::__shared_weak_count::__release_weak(v402);
    }
  }
  v405 = (std::__shared_weak_count *)*((_QWORD *)&v1736 + 1);
  if (*((_QWORD *)&v1736 + 1))
  {
    v406 = (unint64_t *)(*((_QWORD *)&v1736 + 1) + 8);
    do
      v407 = __ldaxr(v406);
    while (__stlxr(v407 - 1, v406));
    if (!v407)
    {
      ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
      std::__shared_weak_count::__release_weak(v405);
    }
  }
  v408 = *(_QWORD *)(v9 + 80);
  v410 = *(_QWORD *)(v408 + 488);
  v409 = *(std::__shared_weak_count **)(v408 + 496);
  v1732 = v410;
  v1733 = v409;
  if (v409)
  {
    v411 = (unint64_t *)&v409->__shared_owners_;
    do
      v412 = __ldxr(v411);
    while (__stxr(v412 + 1, v411));
  }
  memset(&v1730[20], 0, 24);
  v1730[0] = 0;
  *(_OWORD *)&v1730[4] = xmmword_19FFB3060;
  v1731 = 15;
  v413 = operator new(0x198uLL);
  v413[1] = 0;
  v413[2] = 0;
  *v413 = &off_1E42DF4F8;
  v414 = a3[1];
  v1736 = *a3;
  v1737 = v414;
  v415 = ggl::DiffuseBuilding::BuildingPipelineState::BuildingPipelineState((uint64_t)(v413 + 3), &v1732, (uint64_t)v1730, &v1736);
  v416 = *(std::__shared_weak_count **)(a1 + 128);
  *(_QWORD *)(a1 + 120) = v415;
  *(_QWORD *)(a1 + 128) = v413;
  if (v416)
  {
    v417 = (unint64_t *)&v416->__shared_owners_;
    do
      v418 = __ldaxr(v417);
    while (__stlxr(v418 - 1, v417));
    if (!v418)
    {
      ((void (*)(std::__shared_weak_count *))v416->__on_zero_shared)(v416);
      std::__shared_weak_count::__release_weak(v416);
    }
  }
  v419 = v1733;
  if (v1733)
  {
    v420 = (unint64_t *)&v1733->__shared_owners_;
    do
      v421 = __ldaxr(v420);
    while (__stlxr(v421 - 1, v420));
    if (!v421)
    {
      ((void (*)(std::__shared_weak_count *))v419->__on_zero_shared)(v419);
      std::__shared_weak_count::__release_weak(v419);
    }
  }
  v422 = *(_QWORD *)(v9 + 80);
  v423 = *(_QWORD *)(v422 + 536);
  v424 = *(std::__shared_weak_count **)(v422 + 544);
  v1732 = v423;
  v1733 = v424;
  if (v424)
  {
    v425 = (unint64_t *)&v424->__shared_owners_;
    do
      v426 = __ldxr(v425);
    while (__stxr(v426 + 1, v425));
  }
  memset(&v1730[20], 0, 24);
  v1730[0] = 0;
  *(_OWORD *)&v1730[4] = xmmword_19FFB3060;
  v1731 = 15;
  v427 = operator new(0x198uLL);
  v427[1] = 0;
  v427[2] = 0;
  *v427 = &off_1E42E35F0;
  v428 = a3[1];
  v1736 = *a3;
  v1737 = v428;
  v429 = ggl::DiffuseBuildingTop::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v427 + 3), &v1732, (uint64_t)v1730, &v1736);
  v430 = *(std::__shared_weak_count **)(a1 + 144);
  *(_QWORD *)(a1 + 136) = v429;
  *(_QWORD *)(a1 + 144) = v427;
  if (v430)
  {
    v431 = (unint64_t *)&v430->__shared_owners_;
    do
      v432 = __ldaxr(v431);
    while (__stlxr(v432 - 1, v431));
    if (!v432)
    {
      ((void (*)(std::__shared_weak_count *))v430->__on_zero_shared)(v430);
      std::__shared_weak_count::__release_weak(v430);
    }
  }
  v433 = v1733;
  if (v1733)
  {
    v434 = (unint64_t *)&v1733->__shared_owners_;
    do
      v435 = __ldaxr(v434);
    while (__stlxr(v435 - 1, v434));
    if (!v435)
    {
      ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
      std::__shared_weak_count::__release_weak(v433);
    }
  }
  v436 = *(_QWORD *)(v9 + 80);
  v437 = *(_QWORD *)(v436 + 704);
  v438 = *(std::__shared_weak_count **)(v436 + 712);
  v1732 = v437;
  v1733 = v438;
  if (v438)
  {
    v439 = (unint64_t *)&v438->__shared_owners_;
    do
      v440 = __ldxr(v439);
    while (__stxr(v440 + 1, v439));
  }
  memset(&v1730[20], 0, 24);
  v1730[0] = 0;
  *(_OWORD *)&v1730[4] = xmmword_19FFB3060;
  v1731 = 15;
  v441 = operator new(0x198uLL);
  v441[1] = 0;
  v441[2] = 0;
  *v441 = &off_1E42E3970;
  v442 = a3[1];
  v1736 = *a3;
  v1737 = v442;
  v443 = ggl::FoggedDiffuseBuilding::BuildingPipelineState::BuildingPipelineState((uint64_t)(v441 + 3), &v1732, (uint64_t)v1730, &v1736);
  v444 = *(std::__shared_weak_count **)(a1 + 160);
  *(_QWORD *)(a1 + 152) = v443;
  *(_QWORD *)(a1 + 160) = v441;
  if (v444)
  {
    v445 = (unint64_t *)&v444->__shared_owners_;
    do
      v446 = __ldaxr(v445);
    while (__stlxr(v446 - 1, v445));
    if (!v446)
    {
      ((void (*)(std::__shared_weak_count *))v444->__on_zero_shared)(v444);
      std::__shared_weak_count::__release_weak(v444);
    }
  }
  v447 = v1733;
  if (v1733)
  {
    v448 = (unint64_t *)&v1733->__shared_owners_;
    do
      v449 = __ldaxr(v448);
    while (__stlxr(v449 - 1, v448));
    if (!v449)
    {
      ((void (*)(std::__shared_weak_count *))v447->__on_zero_shared)(v447);
      std::__shared_weak_count::__release_weak(v447);
    }
  }
  v450 = *(_QWORD *)(v9 + 80);
  v451 = *(_QWORD *)(v450 + 728);
  v452 = *(std::__shared_weak_count **)(v450 + 736);
  v1732 = v451;
  v1733 = v452;
  if (v452)
  {
    v453 = (unint64_t *)&v452->__shared_owners_;
    do
      v454 = __ldxr(v453);
    while (__stxr(v454 + 1, v453));
  }
  memset(&v1730[20], 0, 24);
  v1730[0] = 0;
  *(_OWORD *)&v1730[4] = xmmword_19FFB3060;
  v1731 = 15;
  v455 = operator new(0x198uLL);
  v455[1] = 0;
  v455[2] = 0;
  *v455 = &off_1E42E3D98;
  v456 = a3[1];
  v1736 = *a3;
  v1737 = v456;
  v457 = ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v455 + 3), &v1732, (uint64_t)v1730, &v1736);
  v458 = *(std::__shared_weak_count **)(a1 + 176);
  *(_QWORD *)(a1 + 168) = v457;
  *(_QWORD *)(a1 + 176) = v455;
  if (v458)
  {
    v459 = (unint64_t *)&v458->__shared_owners_;
    do
      v460 = __ldaxr(v459);
    while (__stlxr(v460 - 1, v459));
    if (!v460)
    {
      ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
      std::__shared_weak_count::__release_weak(v458);
    }
  }
  v461 = v1733;
  if (v1733)
  {
    v462 = (unint64_t *)&v1733->__shared_owners_;
    do
      v463 = __ldaxr(v462);
    while (__stlxr(v463 - 1, v462));
    if (!v463)
    {
      ((void (*)(std::__shared_weak_count *))v461->__on_zero_shared)(v461);
      std::__shared_weak_count::__release_weak(v461);
    }
  }
  v464 = *(_QWORD *)(v9 + 80);
  v465 = *(_QWORD *)(v464 + 512);
  v466 = *(std::__shared_weak_count **)(v464 + 520);
  v1732 = v465;
  v1733 = v466;
  if (v466)
  {
    v467 = (unint64_t *)&v466->__shared_owners_;
    do
      v468 = __ldxr(v467);
    while (__stxr(v468 + 1, v467));
  }
  memset(&v1730[20], 0, 24);
  v1730[0] = 0;
  *(_OWORD *)&v1730[4] = xmmword_19FFB3060;
  v1731 = 15;
  v469 = operator new(0x198uLL);
  v469[1] = 0;
  v469[2] = 0;
  *v469 = &off_1E42E3DD0;
  v470 = a3[1];
  v1736 = *a3;
  v1737 = v470;
  v471 = ggl::DiffuseBuildingPointyRoof::BuildingPipelineState::BuildingPipelineState((uint64_t)(v469 + 3), &v1732, (uint64_t)v1730, &v1736);
  v472 = *(std::__shared_weak_count **)(a1 + 192);
  *(_QWORD *)(a1 + 184) = v471;
  *(_QWORD *)(a1 + 192) = v469;
  if (v472)
  {
    v473 = (unint64_t *)&v472->__shared_owners_;
    do
      v474 = __ldaxr(v473);
    while (__stlxr(v474 - 1, v473));
    if (!v474)
    {
      ((void (*)(std::__shared_weak_count *))v472->__on_zero_shared)(v472);
      std::__shared_weak_count::__release_weak(v472);
    }
  }
  v475 = v1733;
  if (v1733)
  {
    v476 = (unint64_t *)&v1733->__shared_owners_;
    do
      v477 = __ldaxr(v476);
    while (__stlxr(v477 - 1, v476));
    if (!v477)
    {
      ((void (*)(std::__shared_weak_count *))v475->__on_zero_shared)(v475);
      std::__shared_weak_count::__release_weak(v475);
    }
  }
  v478 = *(_QWORD *)(v9 + 80);
  v479 = *(_QWORD *)(v478 + 2384);
  v480 = *(std::__shared_weak_count **)(v478 + 2392);
  v1732 = v479;
  v1733 = v480;
  if (v480)
  {
    v481 = (unint64_t *)&v480->__shared_owners_;
    do
      v482 = __ldxr(v481);
    while (__stxr(v482 + 1, v481));
  }
  memset(&v1730[20], 0, 24);
  v1730[0] = 0;
  *(_OWORD *)&v1730[4] = xmmword_19FFB3060;
  v1731 = 15;
  v483 = operator new(0x198uLL);
  v483[1] = 0;
  v483[2] = 0;
  *v483 = &off_1E42E0D08;
  v484 = a3[1];
  v1736 = *a3;
  v1737 = v484;
  v485 = ggl::SpecularBuilding::BuildingPipelineState::BuildingPipelineState((uint64_t)(v483 + 3), &v1732, (uint64_t)v1730, &v1736);
  v486 = *(std::__shared_weak_count **)(a1 + 208);
  *(_QWORD *)(a1 + 200) = v485;
  *(_QWORD *)(a1 + 208) = v483;
  if (v486)
  {
    v487 = (unint64_t *)&v486->__shared_owners_;
    do
      v488 = __ldaxr(v487);
    while (__stlxr(v488 - 1, v487));
    if (!v488)
    {
      ((void (*)(std::__shared_weak_count *))v486->__on_zero_shared)(v486);
      std::__shared_weak_count::__release_weak(v486);
    }
  }
  v489 = v1733;
  if (v1733)
  {
    v490 = (unint64_t *)&v1733->__shared_owners_;
    do
      v491 = __ldaxr(v490);
    while (__stlxr(v491 - 1, v490));
    if (!v491)
    {
      ((void (*)(std::__shared_weak_count *))v489->__on_zero_shared)(v489);
      std::__shared_weak_count::__release_weak(v489);
    }
  }
  v492 = *(_QWORD *)(v9 + 80);
  v493 = *(_QWORD *)(v492 + 2432);
  v494 = *(std::__shared_weak_count **)(v492 + 2440);
  v1732 = v493;
  v1733 = v494;
  if (v494)
  {
    v495 = (unint64_t *)&v494->__shared_owners_;
    do
      v496 = __ldxr(v495);
    while (__stxr(v496 + 1, v495));
  }
  memset(&v1730[20], 0, 24);
  v1730[0] = 0;
  *(_OWORD *)&v1730[4] = xmmword_19FFB3060;
  v1731 = 15;
  v497 = operator new(0x198uLL);
  v497[1] = 0;
  v497[2] = 0;
  *v497 = &off_1E42E3820;
  v498 = a3[1];
  v1736 = *a3;
  v1737 = v498;
  v499 = ggl::SpecularBuildingTop::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v497 + 3), &v1732, (uint64_t)v1730, &v1736);
  v500 = *(std::__shared_weak_count **)(a1 + 224);
  *(_QWORD *)(a1 + 216) = v499;
  *(_QWORD *)(a1 + 224) = v497;
  if (v500)
  {
    v501 = (unint64_t *)&v500->__shared_owners_;
    do
      v502 = __ldaxr(v501);
    while (__stlxr(v502 - 1, v501));
    if (!v502)
    {
      ((void (*)(std::__shared_weak_count *))v500->__on_zero_shared)(v500);
      std::__shared_weak_count::__release_weak(v500);
    }
  }
  v503 = v1733;
  if (v1733)
  {
    v504 = (unint64_t *)&v1733->__shared_owners_;
    do
      v505 = __ldaxr(v504);
    while (__stlxr(v505 - 1, v504));
    if (!v505)
    {
      ((void (*)(std::__shared_weak_count *))v503->__on_zero_shared)(v503);
      std::__shared_weak_count::__release_weak(v503);
    }
  }
  v506 = *(_QWORD *)(v9 + 80);
  v507 = *(_QWORD *)(v506 + 776);
  v508 = *(std::__shared_weak_count **)(v506 + 784);
  v1732 = v507;
  v1733 = v508;
  if (v508)
  {
    v509 = (unint64_t *)&v508->__shared_owners_;
    do
      v510 = __ldxr(v509);
    while (__stxr(v510 + 1, v509));
  }
  memset(&v1730[20], 0, 24);
  v1730[0] = 0;
  *(_OWORD *)&v1730[4] = xmmword_19FFB3060;
  v1731 = 15;
  v511 = operator new(0x198uLL);
  v511[1] = 0;
  v511[2] = 0;
  *v511 = &off_1E42E3B30;
  v512 = a3[1];
  v1736 = *a3;
  v1737 = v512;
  v513 = ggl::FoggedSpecularBuilding::BuildingPipelineState::BuildingPipelineState((uint64_t)(v511 + 3), &v1732, (uint64_t)v1730, &v1736);
  v514 = *(std::__shared_weak_count **)(a1 + 240);
  *(_QWORD *)(a1 + 232) = v513;
  *(_QWORD *)(a1 + 240) = v511;
  if (v514)
  {
    v515 = (unint64_t *)&v514->__shared_owners_;
    do
      v516 = __ldaxr(v515);
    while (__stlxr(v516 - 1, v515));
    if (!v516)
    {
      ((void (*)(std::__shared_weak_count *))v514->__on_zero_shared)(v514);
      std::__shared_weak_count::__release_weak(v514);
    }
  }
  v517 = v1733;
  if (v1733)
  {
    v518 = (unint64_t *)&v1733->__shared_owners_;
    do
      v519 = __ldaxr(v518);
    while (__stlxr(v519 - 1, v518));
    if (!v519)
    {
      ((void (*)(std::__shared_weak_count *))v517->__on_zero_shared)(v517);
      std::__shared_weak_count::__release_weak(v517);
    }
  }
  v520 = *(_QWORD *)(v9 + 80);
  v521 = *(_QWORD *)(v520 + 800);
  v522 = *(std::__shared_weak_count **)(v520 + 808);
  v1732 = v521;
  v1733 = v522;
  if (v522)
  {
    v523 = (unint64_t *)&v522->__shared_owners_;
    do
      v524 = __ldxr(v523);
    while (__stxr(v524 + 1, v523));
  }
  memset(&v1730[20], 0, 24);
  v1730[0] = 0;
  *(_OWORD *)&v1730[4] = xmmword_19FFB3060;
  v1731 = 15;
  v525 = operator new(0x198uLL);
  v525[1] = 0;
  v525[2] = 0;
  *v525 = &off_1E42E3E78;
  v526 = a3[1];
  v1736 = *a3;
  v1737 = v526;
  v527 = ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v525 + 3), &v1732, (uint64_t)v1730, &v1736);
  v528 = *(std::__shared_weak_count **)(a1 + 256);
  *(_QWORD *)(a1 + 248) = v527;
  *(_QWORD *)(a1 + 256) = v525;
  if (v528)
  {
    v529 = (unint64_t *)&v528->__shared_owners_;
    do
      v530 = __ldaxr(v529);
    while (__stlxr(v530 - 1, v529));
    if (!v530)
    {
      ((void (*)(std::__shared_weak_count *))v528->__on_zero_shared)(v528);
      std::__shared_weak_count::__release_weak(v528);
    }
  }
  v531 = v1733;
  if (v1733)
  {
    v532 = (unint64_t *)&v1733->__shared_owners_;
    do
      v533 = __ldaxr(v532);
    while (__stlxr(v533 - 1, v532));
    if (!v533)
    {
      ((void (*)(std::__shared_weak_count *))v531->__on_zero_shared)(v531);
      std::__shared_weak_count::__release_weak(v531);
    }
  }
  v534 = *(_QWORD *)(v9 + 80);
  v535 = *(_QWORD *)(v534 + 2408);
  v536 = *(std::__shared_weak_count **)(v534 + 2416);
  v1732 = v535;
  v1733 = v536;
  if (v536)
  {
    v537 = (unint64_t *)&v536->__shared_owners_;
    do
      v538 = __ldxr(v537);
    while (__stxr(v538 + 1, v537));
  }
  memset(&v1730[20], 0, 24);
  v1730[0] = 0;
  *(_OWORD *)&v1730[4] = xmmword_19FFB3060;
  v1731 = 15;
  v539 = operator new(0x198uLL);
  v539[1] = 0;
  v539[2] = 0;
  *v539 = &off_1E42E3F58;
  v540 = a3[1];
  v1736 = *a3;
  v1737 = v540;
  v541 = ggl::SpecularBuildingPointyRoof::BuildingPipelineState::BuildingPipelineState((uint64_t)(v539 + 3), &v1732, (uint64_t)v1730, &v1736);
  v542 = *(std::__shared_weak_count **)(a1 + 272);
  *(_QWORD *)(a1 + 264) = v541;
  *(_QWORD *)(a1 + 272) = v539;
  if (v542)
  {
    v543 = (unint64_t *)&v542->__shared_owners_;
    do
      v544 = __ldaxr(v543);
    while (__stlxr(v544 - 1, v543));
    if (!v544)
    {
      ((void (*)(std::__shared_weak_count *))v542->__on_zero_shared)(v542);
      std::__shared_weak_count::__release_weak(v542);
    }
  }
  v545 = v1733;
  if (v1733)
  {
    v546 = (unint64_t *)&v1733->__shared_owners_;
    do
      v547 = __ldaxr(v546);
    while (__stlxr(v547 - 1, v546));
    if (!v547)
    {
      ((void (*)(std::__shared_weak_count *))v545->__on_zero_shared)(v545);
      std::__shared_weak_count::__release_weak(v545);
    }
  }
  v548 = *(_QWORD *)(v9 + 80);
  v550 = *(_QWORD *)(v548 + 488);
  v549 = *(std::__shared_weak_count **)(v548 + 496);
  v1732 = v550;
  v1733 = v549;
  if (v549)
  {
    v551 = (unint64_t *)&v549->__shared_owners_;
    do
      v552 = __ldxr(v551);
    while (__stxr(v552 + 1, v551));
  }
  memset(&v1730[24], 0, 20);
  v1730[0] = 1;
  *(_OWORD *)&v1730[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v1730[20] = 7;
  v1731 = 15;
  v553 = operator new(0x198uLL);
  v553[1] = 0;
  v553[2] = 0;
  *v553 = &off_1E42DF4F8;
  v554 = a3[1];
  v1736 = *a3;
  v1737 = v554;
  v555 = ggl::DiffuseBuilding::BuildingPipelineState::BuildingPipelineState((uint64_t)(v553 + 3), &v1732, (uint64_t)v1730, &v1736);
  v556 = *(std::__shared_weak_count **)(a1 + 288);
  *(_QWORD *)(a1 + 280) = v555;
  *(_QWORD *)(a1 + 288) = v553;
  if (v556)
  {
    v557 = (unint64_t *)&v556->__shared_owners_;
    do
      v558 = __ldaxr(v557);
    while (__stlxr(v558 - 1, v557));
    if (!v558)
    {
      ((void (*)(std::__shared_weak_count *))v556->__on_zero_shared)(v556);
      std::__shared_weak_count::__release_weak(v556);
    }
  }
  v559 = v1733;
  if (v1733)
  {
    v560 = (unint64_t *)&v1733->__shared_owners_;
    do
      v561 = __ldaxr(v560);
    while (__stlxr(v561 - 1, v560));
    if (!v561)
    {
      ((void (*)(std::__shared_weak_count *))v559->__on_zero_shared)(v559);
      std::__shared_weak_count::__release_weak(v559);
    }
  }
  v562 = *(_QWORD *)(v9 + 80);
  v563 = *(_QWORD *)(v562 + 536);
  v564 = *(std::__shared_weak_count **)(v562 + 544);
  v1732 = v563;
  v1733 = v564;
  if (v564)
  {
    v565 = (unint64_t *)&v564->__shared_owners_;
    do
      v566 = __ldxr(v565);
    while (__stxr(v566 + 1, v565));
  }
  memset(&v1730[24], 0, 20);
  v1730[0] = 1;
  *(_OWORD *)&v1730[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v1730[20] = 7;
  v1731 = 15;
  v567 = operator new(0x198uLL);
  v567[1] = 0;
  v567[2] = 0;
  *v567 = &off_1E42E35F0;
  v568 = a3[1];
  v1736 = *a3;
  v1737 = v568;
  v569 = ggl::DiffuseBuildingTop::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v567 + 3), &v1732, (uint64_t)v1730, &v1736);
  v570 = *(std::__shared_weak_count **)(a1 + 304);
  *(_QWORD *)(a1 + 296) = v569;
  *(_QWORD *)(a1 + 304) = v567;
  if (v570)
  {
    v571 = (unint64_t *)&v570->__shared_owners_;
    do
      v572 = __ldaxr(v571);
    while (__stlxr(v572 - 1, v571));
    if (!v572)
    {
      ((void (*)(std::__shared_weak_count *))v570->__on_zero_shared)(v570);
      std::__shared_weak_count::__release_weak(v570);
    }
  }
  v573 = v1733;
  if (v1733)
  {
    v574 = (unint64_t *)&v1733->__shared_owners_;
    do
      v575 = __ldaxr(v574);
    while (__stlxr(v575 - 1, v574));
    if (!v575)
    {
      ((void (*)(std::__shared_weak_count *))v573->__on_zero_shared)(v573);
      std::__shared_weak_count::__release_weak(v573);
    }
  }
  v576 = *(_QWORD *)(v9 + 80);
  v577 = *(_QWORD *)(v576 + 704);
  v578 = *(std::__shared_weak_count **)(v576 + 712);
  v1732 = v577;
  v1733 = v578;
  if (v578)
  {
    v579 = (unint64_t *)&v578->__shared_owners_;
    do
      v580 = __ldxr(v579);
    while (__stxr(v580 + 1, v579));
  }
  memset(&v1730[24], 0, 20);
  v1730[0] = 1;
  *(_OWORD *)&v1730[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v1730[20] = 7;
  v1731 = 15;
  v581 = operator new(0x198uLL);
  v581[1] = 0;
  v581[2] = 0;
  *v581 = &off_1E42E3970;
  v582 = a3[1];
  v1736 = *a3;
  v1737 = v582;
  v583 = ggl::FoggedDiffuseBuilding::BuildingPipelineState::BuildingPipelineState((uint64_t)(v581 + 3), &v1732, (uint64_t)v1730, &v1736);
  v584 = *(std::__shared_weak_count **)(a1 + 320);
  *(_QWORD *)(a1 + 312) = v583;
  *(_QWORD *)(a1 + 320) = v581;
  if (v584)
  {
    v585 = (unint64_t *)&v584->__shared_owners_;
    do
      v586 = __ldaxr(v585);
    while (__stlxr(v586 - 1, v585));
    if (!v586)
    {
      ((void (*)(std::__shared_weak_count *))v584->__on_zero_shared)(v584);
      std::__shared_weak_count::__release_weak(v584);
    }
  }
  v587 = v1733;
  if (v1733)
  {
    v588 = (unint64_t *)&v1733->__shared_owners_;
    do
      v589 = __ldaxr(v588);
    while (__stlxr(v589 - 1, v588));
    if (!v589)
    {
      ((void (*)(std::__shared_weak_count *))v587->__on_zero_shared)(v587);
      std::__shared_weak_count::__release_weak(v587);
    }
  }
  v590 = *(_QWORD *)(v9 + 80);
  v591 = *(_QWORD *)(v590 + 728);
  v592 = *(std::__shared_weak_count **)(v590 + 736);
  v1732 = v591;
  v1733 = v592;
  if (v592)
  {
    v593 = (unint64_t *)&v592->__shared_owners_;
    do
      v594 = __ldxr(v593);
    while (__stxr(v594 + 1, v593));
  }
  memset(&v1730[24], 0, 20);
  v1730[0] = 1;
  *(_OWORD *)&v1730[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v1730[20] = 7;
  v1731 = 15;
  v595 = operator new(0x198uLL);
  v595[1] = 0;
  v595[2] = 0;
  *v595 = &off_1E42E3D98;
  v596 = a3[1];
  v1736 = *a3;
  v1737 = v596;
  v597 = ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v595 + 3), &v1732, (uint64_t)v1730, &v1736);
  v598 = *(std::__shared_weak_count **)(a1 + 336);
  *(_QWORD *)(a1 + 328) = v597;
  *(_QWORD *)(a1 + 336) = v595;
  v599 = v1727;
  if (v598)
  {
    v600 = (unint64_t *)&v598->__shared_owners_;
    do
      v601 = __ldaxr(v600);
    while (__stlxr(v601 - 1, v600));
    if (!v601)
    {
      ((void (*)(std::__shared_weak_count *))v598->__on_zero_shared)(v598);
      std::__shared_weak_count::__release_weak(v598);
    }
  }
  v602 = v1733;
  if (v1733)
  {
    v603 = (unint64_t *)&v1733->__shared_owners_;
    do
      v604 = __ldaxr(v603);
    while (__stlxr(v604 - 1, v603));
    if (!v604)
    {
      ((void (*)(std::__shared_weak_count *))v602->__on_zero_shared)(v602);
      std::__shared_weak_count::__release_weak(v602);
    }
  }
  v605 = *(_QWORD *)(v9 + 80);
  v606 = *(_QWORD *)(v605 + 512);
  v607 = *(std::__shared_weak_count **)(v605 + 520);
  v1732 = v606;
  v1733 = v607;
  if (v607)
  {
    v608 = (unint64_t *)&v607->__shared_owners_;
    do
      v609 = __ldxr(v608);
    while (__stxr(v609 + 1, v608));
  }
  memset(&v1730[24], 0, 20);
  v1730[0] = 1;
  *(_OWORD *)&v1730[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v1730[20] = 7;
  v1731 = 15;
  v610 = operator new(0x198uLL);
  v610[1] = 0;
  v610[2] = 0;
  *v610 = &off_1E42E3DD0;
  v611 = a3[1];
  v1736 = *a3;
  v1737 = v611;
  v612 = ggl::DiffuseBuildingPointyRoof::BuildingPipelineState::BuildingPipelineState((uint64_t)(v610 + 3), &v1732, (uint64_t)v1730, &v1736);
  v613 = *(std::__shared_weak_count **)(a1 + 352);
  *(_QWORD *)(a1 + 344) = v612;
  *(_QWORD *)(a1 + 352) = v610;
  if (v613)
  {
    v614 = (unint64_t *)&v613->__shared_owners_;
    do
      v615 = __ldaxr(v614);
    while (__stlxr(v615 - 1, v614));
    if (!v615)
    {
      ((void (*)(std::__shared_weak_count *))v613->__on_zero_shared)(v613);
      std::__shared_weak_count::__release_weak(v613);
    }
  }
  v616 = v1733;
  if (v1733)
  {
    v617 = (unint64_t *)&v1733->__shared_owners_;
    do
      v618 = __ldaxr(v617);
    while (__stlxr(v618 - 1, v617));
    if (!v618)
    {
      ((void (*)(std::__shared_weak_count *))v616->__on_zero_shared)(v616);
      std::__shared_weak_count::__release_weak(v616);
    }
  }
  v619 = *(_QWORD *)(v9 + 80);
  v620 = *(_QWORD *)(v619 + 2384);
  v621 = *(std::__shared_weak_count **)(v619 + 2392);
  v1732 = v620;
  v1733 = v621;
  if (v621)
  {
    v622 = (unint64_t *)&v621->__shared_owners_;
    do
      v623 = __ldxr(v622);
    while (__stxr(v623 + 1, v622));
  }
  memset(&v1730[24], 0, 20);
  v1730[0] = 1;
  *(_OWORD *)&v1730[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v1730[20] = 7;
  v1731 = 15;
  v624 = operator new(0x198uLL);
  v624[1] = 0;
  v624[2] = 0;
  *v624 = &off_1E42E0D08;
  v625 = a3[1];
  v1736 = *a3;
  v1737 = v625;
  v626 = ggl::SpecularBuilding::BuildingPipelineState::BuildingPipelineState((uint64_t)(v624 + 3), &v1732, (uint64_t)v1730, &v1736);
  v627 = *(std::__shared_weak_count **)(a1 + 368);
  *(_QWORD *)(a1 + 360) = v626;
  *(_QWORD *)(a1 + 368) = v624;
  if (v627)
  {
    v628 = (unint64_t *)&v627->__shared_owners_;
    do
      v629 = __ldaxr(v628);
    while (__stlxr(v629 - 1, v628));
    if (!v629)
    {
      ((void (*)(std::__shared_weak_count *))v627->__on_zero_shared)(v627);
      std::__shared_weak_count::__release_weak(v627);
    }
  }
  v630 = v1733;
  if (v1733)
  {
    v631 = (unint64_t *)&v1733->__shared_owners_;
    do
      v632 = __ldaxr(v631);
    while (__stlxr(v632 - 1, v631));
    if (!v632)
    {
      ((void (*)(std::__shared_weak_count *))v630->__on_zero_shared)(v630);
      std::__shared_weak_count::__release_weak(v630);
    }
  }
  v633 = *(_QWORD *)(v9 + 80);
  v634 = *(_QWORD *)(v633 + 2432);
  v635 = *(std::__shared_weak_count **)(v633 + 2440);
  v1732 = v634;
  v1733 = v635;
  if (v635)
  {
    v636 = (unint64_t *)&v635->__shared_owners_;
    do
      v637 = __ldxr(v636);
    while (__stxr(v637 + 1, v636));
  }
  memset(&v1730[24], 0, 20);
  v1730[0] = 1;
  *(_OWORD *)&v1730[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v1730[20] = 7;
  v1731 = 15;
  v638 = operator new(0x198uLL);
  v638[1] = 0;
  v638[2] = 0;
  *v638 = &off_1E42E3820;
  v639 = a3[1];
  v1736 = *a3;
  v1737 = v639;
  v640 = ggl::SpecularBuildingTop::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v638 + 3), &v1732, (uint64_t)v1730, &v1736);
  v641 = *(std::__shared_weak_count **)(a1 + 384);
  *(_QWORD *)(a1 + 376) = v640;
  *(_QWORD *)(a1 + 384) = v638;
  if (v641)
  {
    v642 = (unint64_t *)&v641->__shared_owners_;
    do
      v643 = __ldaxr(v642);
    while (__stlxr(v643 - 1, v642));
    if (!v643)
    {
      ((void (*)(std::__shared_weak_count *))v641->__on_zero_shared)(v641);
      std::__shared_weak_count::__release_weak(v641);
    }
  }
  v644 = v1733;
  if (v1733)
  {
    v645 = (unint64_t *)&v1733->__shared_owners_;
    do
      v646 = __ldaxr(v645);
    while (__stlxr(v646 - 1, v645));
    if (!v646)
    {
      ((void (*)(std::__shared_weak_count *))v644->__on_zero_shared)(v644);
      std::__shared_weak_count::__release_weak(v644);
    }
  }
  v647 = *(_QWORD *)(v9 + 80);
  v648 = *(_QWORD *)(v647 + 776);
  v649 = *(std::__shared_weak_count **)(v647 + 784);
  v1732 = v648;
  v1733 = v649;
  if (v649)
  {
    v650 = (unint64_t *)&v649->__shared_owners_;
    do
      v651 = __ldxr(v650);
    while (__stxr(v651 + 1, v650));
  }
  memset(&v1730[24], 0, 20);
  v1730[0] = 1;
  *(_OWORD *)&v1730[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v1730[20] = 7;
  v1731 = 15;
  v652 = operator new(0x198uLL);
  v652[1] = 0;
  v652[2] = 0;
  *v652 = &off_1E42E3B30;
  v653 = a3[1];
  v1736 = *a3;
  v1737 = v653;
  v654 = ggl::FoggedSpecularBuilding::BuildingPipelineState::BuildingPipelineState((uint64_t)(v652 + 3), &v1732, (uint64_t)v1730, &v1736);
  v655 = *(std::__shared_weak_count **)(a1 + 400);
  *(_QWORD *)(a1 + 392) = v654;
  *(_QWORD *)(a1 + 400) = v652;
  if (v655)
  {
    v656 = (unint64_t *)&v655->__shared_owners_;
    do
      v657 = __ldaxr(v656);
    while (__stlxr(v657 - 1, v656));
    if (!v657)
    {
      ((void (*)(std::__shared_weak_count *))v655->__on_zero_shared)(v655);
      std::__shared_weak_count::__release_weak(v655);
    }
  }
  v658 = v1733;
  if (v1733)
  {
    v659 = (unint64_t *)&v1733->__shared_owners_;
    do
      v660 = __ldaxr(v659);
    while (__stlxr(v660 - 1, v659));
    if (!v660)
    {
      ((void (*)(std::__shared_weak_count *))v658->__on_zero_shared)(v658);
      std::__shared_weak_count::__release_weak(v658);
    }
  }
  v661 = *(_QWORD *)(v9 + 80);
  v662 = *(_QWORD *)(v661 + 800);
  v663 = *(std::__shared_weak_count **)(v661 + 808);
  v1732 = v662;
  v1733 = v663;
  if (v663)
  {
    v664 = (unint64_t *)&v663->__shared_owners_;
    do
      v665 = __ldxr(v664);
    while (__stxr(v665 + 1, v664));
  }
  memset(&v1730[24], 0, 20);
  v1730[0] = 1;
  *(_OWORD *)&v1730[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v1730[20] = 7;
  v1731 = 15;
  v666 = operator new(0x198uLL);
  v666[1] = 0;
  v666[2] = 0;
  *v666 = &off_1E42E3E78;
  v667 = a3[1];
  v1736 = *a3;
  v1737 = v667;
  v668 = ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineState::CompressedMeshPipelineState((uint64_t)(v666 + 3), &v1732, (uint64_t)v1730, &v1736);
  v669 = *(std::__shared_weak_count **)(a1 + 416);
  *(_QWORD *)(a1 + 408) = v668;
  *(_QWORD *)(a1 + 416) = v666;
  if (v669)
  {
    v670 = (unint64_t *)&v669->__shared_owners_;
    do
      v671 = __ldaxr(v670);
    while (__stlxr(v671 - 1, v670));
    if (!v671)
    {
      ((void (*)(std::__shared_weak_count *))v669->__on_zero_shared)(v669);
      std::__shared_weak_count::__release_weak(v669);
    }
  }
  v672 = v1733;
  if (v1733)
  {
    v673 = (unint64_t *)&v1733->__shared_owners_;
    do
      v674 = __ldaxr(v673);
    while (__stlxr(v674 - 1, v673));
    if (!v674)
    {
      ((void (*)(std::__shared_weak_count *))v672->__on_zero_shared)(v672);
      std::__shared_weak_count::__release_weak(v672);
    }
  }
  v675 = *(_QWORD *)(v9 + 80);
  v676 = *(_QWORD *)(v675 + 2408);
  v677 = *(std::__shared_weak_count **)(v675 + 2416);
  v1732 = v676;
  v1733 = v677;
  if (v677)
  {
    v678 = (unint64_t *)&v677->__shared_owners_;
    do
      v679 = __ldxr(v678);
    while (__stxr(v679 + 1, v678));
  }
  memset(&v1730[24], 0, 20);
  v1730[0] = 1;
  *(_OWORD *)&v1730[4] = xmmword_19FFB35B0;
  *(_DWORD *)&v1730[20] = 7;
  v1731 = 15;
  v680 = operator new(0x198uLL);
  v680[1] = 0;
  v680[2] = 0;
  *v680 = &off_1E42E3F58;
  v681 = a3[1];
  v1736 = *a3;
  v1737 = v681;
  v682 = ggl::SpecularBuildingPointyRoof::BuildingPipelineState::BuildingPipelineState((uint64_t)(v680 + 3), &v1732, (uint64_t)v1730, &v1736);
  v683 = *(std::__shared_weak_count **)(a1 + 432);
  *(_QWORD *)(a1 + 424) = v682;
  *(_QWORD *)(a1 + 432) = v680;
  if (v683)
  {
    v684 = (unint64_t *)&v683->__shared_owners_;
    do
      v685 = __ldaxr(v684);
    while (__stlxr(v685 - 1, v684));
    if (!v685)
    {
      ((void (*)(std::__shared_weak_count *))v683->__on_zero_shared)(v683);
      std::__shared_weak_count::__release_weak(v683);
    }
  }
  v686 = v1733;
  if (v1733)
  {
    v687 = (unint64_t *)&v1733->__shared_owners_;
    do
      v688 = __ldaxr(v687);
    while (__stlxr(v688 - 1, v687));
    if (!v688)
    {
      ((void (*)(std::__shared_weak_count *))v686->__on_zero_shared)(v686);
      std::__shared_weak_count::__release_weak(v686);
    }
  }
  v689 = *(_QWORD *)(v9 + 80);
  v691 = *(_QWORD *)(v689 + 224);
  v690 = *(_QWORD *)(v689 + 232);
  *(_QWORD *)&v1736 = v691;
  *((_QWORD *)&v1736 + 1) = v690;
  if (v690)
  {
    v692 = (unint64_t *)(v690 + 8);
    do
      v693 = __ldxr(v692);
    while (__stxr(v693 + 1, v692));
  }
  v694 = (char *)operator new(0x198uLL);
  *((_QWORD *)v694 + 1) = 0;
  *((_QWORD *)v694 + 2) = 0;
  *(_QWORD *)v694 = &off_1E42DF0D0;
  v695 = a3[1];
  *(_OWORD *)v1730 = *a3;
  *(_OWORD *)&v1730[16] = v695;
  if ((v696 & 1) == 0)
  {
    if ((_DWORD)v1652)
    {
      if ((v1653 & 1) == 0)
      {
        if ((_DWORD)v1652)
        {
          if ((v1698 & 1) == 0
          {
            if ((v1706 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::attributesReflection(void)::r;
            unk_1ECE43AC8 = 1;
          }
          ggl::BuildingShadow::MeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2UV>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE57BB98 = &ggl::BuildingShadow::pipelineDataMeshPipelineDeviceStructs(void)::ref;
          qword_1EE57BBA0 = 0;
          if ((v1699 & 1) == 0
          {
            ggl::BuildingShadow::pipelineDataMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1EE57BBD0 = ggl::BuildingShadow::Shadow::reflection(void)::reflection;
          }
          qword_1EE57BBA8 = (uint64_t)&ggl::BuildingShadow::pipelineDataMeshPipelineConstantStructs(void)::ref;
          unk_1EE57BBB0 = xmmword_19FFB35A0;
        }
      }
      ggl::BuildingShadow::MeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::BuildingShadow::MeshPipelineSetup::typedReflection(void)::ref;
      ggl::BuildingShadowShader::typedReflection(v1652);
      qword_1ECE311F0 = (uint64_t)&ggl::BuildingShadowShader::typedReflection(void)::ref;
      if ((v1654 & 1) == 0
      {
        ggl::BuildingShadow::pipelineStateMeshPipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57BC40 = 0;
        qword_1EE57BC48 = (uint64_t)"";
        dword_1EE57BC50 = 0;
        qword_1EE57BC58 = (uint64_t)&ggl::BuildingShadow::pipelineStateMeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE57BC60 = 2;
      }
      qword_1ECE311F8 = (uint64_t)&ggl::BuildingShadow::pipelineStateMeshPipelineAttributeStructBinding(void)::attr;
      unk_1ECE31200 = 1;
      qword_1ECE31208 = 0;
      unk_1ECE31210 = 1;
      qword_1ECE31218 = (uint64_t)&ggl::BuildingShadow::pipelineStateMeshPipelineDeviceStructBinding(void)::ref;
      unk_1ECE31220 = 0;
      if ((v1655 & 1) == 0
      {
        ggl::BuildingShadow::pipelineStateMeshPipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57BBE0 = 0;
        qword_1EE57BBE8 = (uint64_t)"view";
        dword_1EE57BBF0 = 3;
        qword_1EE57BBF8 = (uint64_t)&ggl::BuildingShadow::pipelineStateMeshPipelineConstantViewBinding(void)::reflection;
        unk_1EE57BC00 = xmmword_19FFB35A0;
        qword_1EE57BC10 = 1;
        unk_1EE57BC18 = "shadow";
        dword_1EE57BC20 = 3;
        qword_1EE57BC28 = (uint64_t)&ggl::BuildingShadow::pipelineStateMeshPipelineConstantShadowBinding(void)::reflection;
        unk_1EE57BC30 = 2;
      }
      qword_1ECE31228 = (uint64_t)&ggl::BuildingShadow::pipelineStateMeshPipelineConstantStructBinding(void)::ref;
      unk_1ECE31230 = 2;
      v599 = v1727;
    }
  }
  v697 = v1736;
  if (*((_QWORD *)&v1736 + 1))
  {
    v698 = (unint64_t *)(*((_QWORD *)&v1736 + 1) + 8);
    do
      v699 = __ldxr(v698);
    while (__stxr(v699 + 1, v698));
    *((_DWORD *)v694 + 14) = 0;
    *((_QWORD *)v694 + 5) = 0;
    *((_QWORD *)v694 + 6) = 0;
    *((_QWORD *)v694 + 3) = &off_1E42B6760;
    *((_QWORD *)v694 + 4) = 0;
    *((_QWORD *)v694 + 8) = &ggl::BuildingShadow::MeshPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v694 + 72) = v697;
    do
      v700 = __ldxr(v698);
    while (__stxr(v700 + 1, v698));
  }
  else
  {
    *((_DWORD *)v694 + 14) = 0;
    *((_QWORD *)v694 + 5) = 0;
    *((_QWORD *)v694 + 6) = 0;
    *((_QWORD *)v694 + 3) = &off_1E42B6760;
    *((_QWORD *)v694 + 4) = 0;
    *((_QWORD *)v694 + 8) = &ggl::BuildingShadow::MeshPipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v694 + 72) = v697;
  }
  v694[136] = 0;
  *(_OWORD *)(v694 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v694 + 156) = 0;
  *(_QWORD *)(v694 + 172) = 0;
  *(_QWORD *)(v694 + 164) = 0;
  v694[184] = 0;
  *(_OWORD *)(v694 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v694 + 204) = 0;
  *(_QWORD *)(v694 + 220) = 0;
  *(_QWORD *)(v694 + 212) = 0;
  v694[232] = 0;
  *(_OWORD *)(v694 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v694 + 252) = 0;
  *(_QWORD *)(v694 + 268) = 0;
  *(_QWORD *)(v694 + 260) = 0;
  v701 = *(_OWORD *)&v1730[16];
  *(_OWORD *)(v694 + 280) = *(_OWORD *)v1730;
  *(_OWORD *)(v694 + 296) = v701;
  v694[312] = 0;
  *((_QWORD *)v694 + 48) = 0;
  *((_OWORD *)v694 + 22) = 0u;
  *((_OWORD *)v694 + 23) = 0u;
  *((_OWORD *)v694 + 20) = 0u;
  *((_OWORD *)v694 + 21) = 0u;
  *((_QWORD *)v694 + 49) = 0x100000001;
  v694[400] = 0;
  v694[88] = 1;
  *(_WORD *)(v694 + 89) = v1732;
  v694[91] = BYTE2(v1732);
  *(_OWORD *)(v694 + 92) = xmmword_19FFB35D0;
  *((_DWORD *)v694 + 27) = 7;
  *((_QWORD *)v694 + 14) = 0;
  *((_QWORD *)v694 + 15) = 0;
  *((_DWORD *)v694 + 32) = 0;
  v694[132] = 15;
  if (*((_QWORD *)&v697 + 1))
  {
    v702 = (unint64_t *)(*((_QWORD *)&v697 + 1) + 8);
    do
      v703 = __ldaxr(v702);
    while (__stlxr(v703 - 1, v702));
    if (!v703)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v697 + 1) + 16))(*((_QWORD *)&v697 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v697 + 1));
    }
  }
  v694[329] = 0;
  v704 = vceqzq_s8(*(int8x16_t *)(v694 + 328));
  v705 = vmovl_high_s8(v704);
  v706 = vmovl_s16(*(int16x4_t *)v705.i8);
  v707.i64[0] = v706.u32[0];
  v707.i64[1] = v706.u32[1];
  v708 = v707;
  v709 = vmovl_s8(*(int8x8_t *)v704.i8);
  v710 = vmovl_s16(*(int16x4_t *)v709.i8);
  v707.i64[0] = v710.u32[0];
  v707.i64[1] = v710.u32[1];
  v711 = v707;
  v712 = vmovl_high_s16(v705);
  v707.i64[0] = v712.u32[0];
  v707.i64[1] = v712.u32[1];
  v713 = v707;
  v714 = vmovl_high_s16(v709);
  v707.i64[0] = v714.u32[0];
  v707.i64[1] = v714.u32[1];
  v715 = v707;
  v707.i64[0] = v706.u32[2];
  v707.i64[1] = v706.u32[3];
  v716 = v707;
  v707.i64[0] = v710.u32[2];
  v707.i64[1] = v710.u32[3];
  v717 = v707;
  v707.i64[0] = v712.u32[2];
  v707.i64[1] = v712.u32[3];
  v718 = v707;
  v707.i64[0] = v714.u32[2];
  v707.i64[1] = v714.u32[3];
  v719 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v707);
  v720 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v718);
  v721 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v717);
  v722 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v713);
  v723 = vceqzq_s8(*(int8x16_t *)(v694 + 344));
  v724 = vmovl_high_s8(v723);
  v725 = vmovl_s16(*(int16x4_t *)v724.i8);
  v707.i64[0] = v725.u32[0];
  v707.i64[1] = v725.u32[1];
  v726 = v707;
  v727 = vmovl_s8(*(int8x8_t *)v723.i8);
  v728 = vmovl_s16(*(int16x4_t *)v727.i8);
  v707.i64[0] = v728.u32[0];
  v707.i64[1] = v728.u32[1];
  v729 = v707;
  v730 = vmovl_high_s16(v724);
  v707.i64[0] = v730.u32[0];
  v707.i64[1] = v730.u32[1];
  v731 = v707;
  v732 = vmovl_high_s16(v727);
  v707.i64[0] = v732.u32[0];
  v707.i64[1] = v732.u32[1];
  v733 = v707;
  v707.i64[0] = v725.u32[2];
  v707.i64[1] = v725.u32[3];
  v734 = v707;
  v707.i64[0] = v728.u32[2];
  v707.i64[1] = v728.u32[3];
  v735 = v707;
  v707.i64[0] = v730.u32[2];
  v707.i64[1] = v730.u32[3];
  v736 = v707;
  v707.i64[0] = v732.u32[2];
  v707.i64[1] = v732.u32[3];
  v737 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v736);
  v738 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v726), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v708));
  v739 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v729), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v711));
  v740 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v731), v722);
  v741 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v733), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v715));
  v742 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v734), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v716));
  v743 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v735), v721);
  v744 = vorrq_s8(v737, v720);
  v745 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v707), v719);
  v746 = vceqzq_s8(*(int8x16_t *)(v694 + 360));
  v747 = vmovl_s8(*(int8x8_t *)v746.i8);
  v748 = vmovl_high_s16(v747);
  v749 = vmovl_high_s8(v746);
  v750 = vmovl_high_s16(v749);
  v751 = vmovl_s16(*(int16x4_t *)v747.i8);
  v752 = vmovl_s16(*(int16x4_t *)v749.i8);
  v707.i64[0] = v751.i32[0];
  v707.i64[1] = v751.i32[1];
  v753 = v707;
  v707.i64[0] = v752.i32[0];
  v707.i64[1] = v752.i32[1];
  v754 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v707);
  v755 = vceqzq_s8(*(int8x16_t *)(v694 + 376));
  v756 = vmovl_high_s8(v755);
  v757 = vmovl_s16(*(int16x4_t *)v756.i8);
  v707.i64[0] = v757.i32[0];
  v707.i64[1] = v757.i32[1];
  v758 = vmovl_s8(*(int8x8_t *)v755.i8);
  v759 = vmovl_s16(*(int16x4_t *)v758.i8);
  v760 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v707), v754), v738);
  v707.i64[0] = v759.i32[0];
  v707.i64[1] = v759.i32[1];
  v761 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v707), vbicq_s8((int8x16_t)xmmword_19FFB3170, v753));
  v707.i64[0] = v750.i32[0];
  v707.i64[1] = v750.i32[1];
  v762 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v707);
  v763 = vmovl_high_s16(v756);
  v764 = vorrq_s8(v761, v739);
  v707.i64[0] = v763.i32[0];
  v707.i64[1] = v763.i32[1];
  v765 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v707), v762);
  v707.i64[0] = v748.i32[0];
  v707.i64[1] = v748.i32[1];
  v766 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v707);
  v767 = vmovl_high_s16(v758);
  v707.i64[0] = v767.i32[0];
  v707.i64[1] = v767.i32[1];
  v768 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v707), v766), v741);
  v707.i64[0] = v752.i32[2];
  v707.i64[1] = v752.i32[3];
  v769 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v707);
  v707.i64[0] = v757.i32[2];
  v707.i64[1] = v757.i32[3];
  v770 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v707), v769), v742);
  v707.i64[0] = v751.i32[2];
  v707.i64[1] = v751.i32[3];
  v771 = vbicq_s8((int8x16_t)xmmword_19FFB31B0, v707);
  v707.i64[0] = v759.i32[2];
  v707.i64[1] = v759.i32[3];
  v772 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v707), v771), v743);
  v707.i64[0] = v750.i32[2];
  v707.i64[1] = v750.i32[3];
  v773 = vbicq_s8((int8x16_t)xmmword_19FFB31C0, v707);
  v707.i64[0] = v763.i32[2];
  v707.i64[1] = v763.i32[3];
  v774 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31F0, v707), v773), v744);
  v707.i64[0] = v748.i32[2];
  v707.i64[1] = v748.i32[3];
  v775 = vbicq_s8((int8x16_t)xmmword_19FFB31D0, v707);
  v707.i64[0] = v767.i32[2];
  v707.i64[1] = v767.i32[3];
  *((_QWORD *)v694 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v764, v760), vorrq_s8(v768, vorrq_s8(v765, v740))), (int64x2_t)vorrq_s8(vorrq_s8(v772, v770), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v707), v775), v745), v774))));
  *((_QWORD *)v694 + 3) = &off_1E42B69D8;
  v694[312] = 1;
  v776 = *(std::__shared_weak_count **)(a1 + 448);
  *(_QWORD *)(a1 + 440) = v694 + 24;
  *(_QWORD *)(a1 + 448) = v694;
  if (v776)
  {
    v777 = (unint64_t *)&v776->__shared_owners_;
    do
      v778 = __ldaxr(v777);
    while (__stlxr(v778 - 1, v777));
    if (!v778)
    {
      ((void (*)(std::__shared_weak_count *))v776->__on_zero_shared)(v776);
      std::__shared_weak_count::__release_weak(v776);
    }
  }
  v779 = (std::__shared_weak_count *)*((_QWORD *)&v1736 + 1);
  if (*((_QWORD *)&v1736 + 1))
  {
    v780 = (unint64_t *)(*((_QWORD *)&v1736 + 1) + 8);
    do
      v781 = __ldaxr(v780);
    while (__stlxr(v781 - 1, v780));
    if (!v781)
    {
      ((void (*)(std::__shared_weak_count *))v779->__on_zero_shared)(v779);
      std::__shared_weak_count::__release_weak(v779);
    }
  }
  v782 = *(_QWORD *)(v9 + 80);
  v783 = *(_QWORD *)(v782 + 1952);
  v784 = *(_QWORD *)(v782 + 1960);
  *(_QWORD *)&v1736 = v783;
  *((_QWORD *)&v1736 + 1) = v784;
  if (v784)
  {
    v785 = (unint64_t *)(v784 + 8);
    do
      v786 = __ldxr(v785);
    while (__stxr(v786 + 1, v785));
  }
  v787 = (char *)operator new(0x198uLL);
  *((_QWORD *)v787 + 1) = 0;
  *((_QWORD *)v787 + 2) = 0;
  *(_QWORD *)v787 = &off_1E42DF728;
  v788 = a3[1];
  *(_OWORD *)v1730 = *a3;
  *(_OWORD *)&v1730[16] = v788;
  if ((v789 & 1) == 0)
  {
    if ((_DWORD)v1656)
    {
      if ((v1657 & 1) == 0)
      {
        if ((_DWORD)v1656)
        {
          if ((v1700 & 1) == 0
          {
            if ((v1707 & 1) == 0
            {
              ggl::MeshTyped<ggl::PrefilteredLine::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PrefilteredLine::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::PrefilteredLine::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PrefilteredLine::DefaultVbo>::attributesReflection(void)::r;
            unk_1ECE43C40 = 1;
          }
          ggl::PrefilteredLine::PrefilteredLinePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PrefilteredLine::DefaultVbo>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE57C788 = &ggl::PrefilteredLine::pipelineDataPrefilteredLinePipelineDeviceStructs(void)::ref;
          qword_1EE57C790 = 0;
          if ((v1701 & 1) == 0
          {
            ggl::PrefilteredLine::pipelineDataPrefilteredLinePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            unk_1EE57C7C0 = ggl::PrefilteredLine::Style::reflection(void)::reflection;
            qword_1EE57C7C8 = (uint64_t)ggl::Fog::Skyfog::reflection(void)::reflection;
          }
          qword_1EE57C798 = (uint64_t)&ggl::PrefilteredLine::pipelineDataPrefilteredLinePipelineConstantStructs(void)::ref;
          unk_1EE57C7A0 = xmmword_19FFB35E0;
        }
      }
      ggl::PrefilteredLine::PrefilteredLinePipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PrefilteredLine::PrefilteredLinePipelineSetup::typedReflection(void)::ref;
      ggl::PrefilteredLineShader::typedReflection(v1656);
      qword_1ECE312E0 = (uint64_t)&ggl::PrefilteredLineShader::typedReflection(void)::ref;
      if ((v1658 & 1) == 0
      {
        ggl::PrefilteredLine::pipelineStatePrefilteredLinePipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE57C870 = 0;
        qword_1EE57C878 = (uint64_t)"";
        dword_1EE57C880 = 0;
        qword_1EE57C888 = (uint64_t)&ggl::PrefilteredLine::pipelineStatePrefilteredLinePipelineAttributeBinding_0(void)::attr;
        unk_1EE57C890 = 2;
      }
      qword_1ECE312E8 = (uint64_t)&ggl::PrefilteredLine::pipelineStatePrefilteredLinePipelineAttributeStructBinding(void)::attr;
      unk_1ECE312F0 = 1;
      qword_1ECE312F8 = 0;
      unk_1ECE31300 = 1;
      qword_1ECE31308 = (uint64_t)&ggl::PrefilteredLine::pipelineStatePrefilteredLinePipelineDeviceStructBinding(void)::ref;
      unk_1ECE31310 = 0;
      if ((v1659 & 1) == 0
      {
        ggl::PrefilteredLine::pipelineStatePrefilteredLinePipelineConstantStructBinding(void)::ref = 0;
        unk_1EE57C7E0 = 0;
        qword_1EE57C7E8 = (uint64_t)"view";
        dword_1EE57C7F0 = 3;
        qword_1EE57C7F8 = (uint64_t)&ggl::PrefilteredLine::pipelineStatePrefilteredLinePipelineConstantViewBinding(void)::reflection;
        unk_1EE57C800 = xmmword_19FFB35A0;
        qword_1EE57C810 = 1;
        unk_1EE57C818 = "style";
        dword_1EE57C820 = 3;
        qword_1EE57C828 = (uint64_t)&ggl::PrefilteredLine::pipelineStatePrefilteredLinePipelineConstantStyleBinding(void)::reflection;
        *(_OWORD *)algn_1EE57C830 = xmmword_19FFB35F0;
        qword_1EE57C840 = 2;
        unk_1EE57C848 = "skyfog";
        dword_1EE57C850 = 3;
        qword_1EE57C858 = (uint64_t)&ggl::PrefilteredLine::pipelineStatePrefilteredLinePipelineConstantSkyfogBinding(void)::reflection;
        unk_1EE57C860 = 6;
      }
      qword_1ECE31318 = (uint64_t)&ggl::PrefilteredLine::pipelineStatePrefilteredLinePipelineConstantStructBinding(void)::ref;
      unk_1ECE31320 = 3;
      v599 = v1727;
    }
  }
  v790 = v1736;
  if (*((_QWORD *)&v1736 + 1))
  {
    v791 = (unint64_t *)(*((_QWORD *)&v1736 + 1) + 8);
    do
      v792 = __ldxr(v791);
    while (__stxr(v792 + 1, v791));
    *((_DWORD *)v787 + 14) = 0;
    *((_QWORD *)v787 + 5) = 0;
    *((_QWORD *)v787 + 6) = 0;
    *((_QWORD *)v787 + 3) = &off_1E42B6760;
    *((_QWORD *)v787 + 4) = 0;
    *((_QWORD *)v787 + 8) = &ggl::PrefilteredLine::PrefilteredLinePipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v787 + 72) = v790;
    do
      v793 = __ldxr(v791);
    while (__stxr(v793 + 1, v791));
  }
  else
  {
    *((_DWORD *)v787 + 14) = 0;
    *((_QWORD *)v787 + 5) = 0;
    *((_QWORD *)v787 + 6) = 0;
    *((_QWORD *)v787 + 3) = &off_1E42B6760;
    *((_QWORD *)v787 + 4) = 0;
    *((_QWORD *)v787 + 8) = &ggl::PrefilteredLine::PrefilteredLinePipelineState::typedReflection(void)::ref;
    *(_OWORD *)(v787 + 72) = v790;
  }
  v787[136] = 0;
  *(_OWORD *)(v787 + 140) = xmmword_19FFB3060;
  *(_QWORD *)(v787 + 156) = 0;
  *(_QWORD *)(v787 + 172) = 0;
  *(_QWORD *)(v787 + 164) = 0;
  v787[184] = 0;
  *(_OWORD *)(v787 + 188) = xmmword_19FFB3060;
  *(_QWORD *)(v787 + 204) = 0;
  *(_QWORD *)(v787 + 220) = 0;
  *(_QWORD *)(v787 + 212) = 0;
  v787[232] = 0;
  *(_OWORD *)(v787 + 236) = xmmword_19FFB3060;
  *(_QWORD *)(v787 + 252) = 0;
  *(_QWORD *)(v787 + 268) = 0;
  *(_QWORD *)(v787 + 260) = 0;
  v794 = *(_OWORD *)&v1730[16];
  *(_OWORD *)(v787 + 280) = *(_OWORD *)v1730;
  *(_OWORD *)(v787 + 296) = v794;
  v787[312] = 0;
  *((_QWORD *)v787 + 48) = 0;
  *((_OWORD *)v787 + 22) = 0u;
  *((_OWORD *)v787 + 23) = 0u;
  *((_OWORD *)v787 + 20) = 0u;
  *((_OWORD *)v787 + 21) = 0u;
  *((_QWORD *)v787 + 49) = 0x100000001;
  v787[400] = 0;
  v787[88] = 1;
  *(_WORD *)(v787 + 89) = v1732;
  v787[91] = BYTE2(v1732);
  *(_OWORD *)(v787 + 92) = xmmword_19FFB35B0;
  *((_DWORD *)v787 + 27) = 7;
  *((_QWORD *)v787 + 14) = 0;
  *((_QWORD *)v787 + 15) = 0;
  *((_DWORD *)v787 + 32) = 0;
  v787[132] = 15;
  if (*((_QWORD *)&v790 + 1))
  {
    v795 = (unint64_t *)(*((_QWORD *)&v790 + 1) + 8);
    do
      v796 = __ldaxr(v795);
    while (__stlxr(v796 - 1, v795));
    if (!v796)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v790 + 1) + 16))(*((_QWORD *)&v790 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v790 + 1));
    }
  }
  v787[329] = 0;
  v797 = vceqzq_s8(*(int8x16_t *)(v787 + 328));
  v798 = vmovl_s8(*(int8x8_t *)v797.i8);
  v799 = vmovl_high_s16(v798);
  v800.i64[0] = v799.u32[2];
  v800.i64[1] = v799.u32[3];
  v801 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v800);
  v802 = vmovl_high_s8(v797);
  v803 = vmovl_high_s16(v802);
  v800.i64[0] = v803.u32[2];
  v800.i64[1] = v803.u32[3];
  v804 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v800);
  v805 = vmovl_s16(*(int16x4_t *)v798.i8);
  v800.i64[0] = v805.u32[2];
  v800.i64[1] = v805.u32[3];
  v806 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v800);
  v807 = vmovl_s16(*(int16x4_t *)v802.i8);
  v800.i64[0] = v807.u32[2];
  v800.i64[1] = v807.u32[3];
  v808 = vbicq_s8((int8x16_t)xmmword_19FFB30A0, v800);
  v800.i64[0] = v799.u32[0];
  v800.i64[1] = v799.u32[1];
  v809 = vbicq_s8((int8x16_t)xmmword_19FFB30B0, v800);
  v800.i64[0] = v803.u32[0];
  v800.i64[1] = v803.u32[1];
  v810 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v800);
  v800.i64[0] = v805.u32[0];
  v800.i64[1] = v805.u32[1];
  v811 = vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v800);
  v800.i64[0] = v807.u32[0];
  v800.i64[1] = v807.u32[1];
  v812 = vbicq_s8((int8x16_t)xmmword_19FFB30D0, v800);
  v813 = vceqzq_s8(*(int8x16_t *)(v787 + 344));
  v814 = vmovl_s8(*(int8x8_t *)v813.i8);
  v815 = vmovl_high_s16(v814);
  v800.i64[0] = v815.u32[2];
  v800.i64[1] = v815.u32[3];
  v816 = vbicq_s8((int8x16_t)xmmword_19FFB30E0, v800);
  v817 = vmovl_high_s8(v813);
  v818 = vmovl_high_s16(v817);
  v800.i64[0] = v818.u32[2];
  v800.i64[1] = v818.u32[3];
  v819 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v800);
  v820 = vmovl_s16(*(int16x4_t *)v814.i8);
  v800.i64[0] = v820.u32[2];
  v800.i64[1] = v820.u32[3];
  v821 = vbicq_s8((int8x16_t)xmmword_19FFB3100, v800);
  v822 = vmovl_s16(*(int16x4_t *)v817.i8);
  v800.i64[0] = v822.u32[2];
  v800.i64[1] = v822.u32[3];
  v823 = vbicq_s8((int8x16_t)xmmword_19FFB3110, v800);
  v800.i64[0] = v815.u32[0];
  v800.i64[1] = v815.u32[1];
  v824 = vbicq_s8((int8x16_t)xmmword_19FFB3120, v800);
  v800.i64[0] = v818.u32[0];
  v800.i64[1] = v818.u32[1];
  v825 = vbicq_s8((int8x16_t)xmmword_19FFB3130, v800);
  v800.i64[0] = v820.u32[0];
  v800.i64[1] = v820.u32[1];
  v826 = vbicq_s8((int8x16_t)xmmword_19FFB3140, v800);
  v800.i64[0] = v822.u32[0];
  v800.i64[1] = v822.u32[1];
  v827 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v800), v812);
  v828 = vorrq_s8(v826, v811);
  v829 = vorrq_s8(v825, v810);
  v830 = vorrq_s8(v824, v809);
  v831 = vorrq_s8(v823, v808);
  v832 = vorrq_s8(v821, v806);
  v833 = vorrq_s8(v819, v804);
  v834 = vorrq_s8(v816, v801);
  v835 = vceqzq_s8(*(int8x16_t *)(v787 + 360));
  v836 = vmovl_s8(*(int8x8_t *)v835.i8);
  v837 = vmovl_high_s16(v836);
  v838 = vmovl_high_s8(v835);
  v839 = vmovl_high_s16(v838);
  v840 = vmovl_s16(*(int16x4_t *)v836.i8);
  v841 = vmovl_s16(*(int16x4_t *)v838.i8);
  v800.i64[0] = v841.i32[0];
  v800.i64[1] = v841.i32[1];
  v842 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v800);
  v800.i64[0] = v840.i32[0];
  v800.i64[1] = v840.i32[1];
  v843 = vbicq_s8((int8x16_t)xmmword_19FFB3170, v800);
  v800.i64[0] = v839.i32[0];
  v800.i64[1] = v839.i32[1];
  v844 = vbicq_s8((int8x16_t)xmmword_19FFB3180, v800);
  v800.i64[0] = v837.i32[0];
  v800.i64[1] = v837.i32[1];
  v845 = vbicq_s8((int8x16_t)xmmword_19FFB3190, v800);
  v800.i64[0] = v837.i32[2];
  v800.i64[1] = v837.i32[3];
  v846 = v800;
  v800.i64[0] = v839.i32[2];
  v800.i64[1] = v839.i32[3];
  v847 = v800;
  v800.i64[0] = v840.i32[2];
  v800.i64[1] = v840.i32[3];
  v848 = v800;
  v800.i64[0] = v841.i32[2];
  v800.i64[1] = v841.i32[3];
  v849 = vbicq_s8((int8x16_t)xmmword_19FFB31A0, v800);
  v850 = vceqzq_s8(*(int8x16_t *)(v787 + 376));
  v851 = vmovl_high_s8(v850);
  v852 = vmovl_s16(*(int16x4_t *)v851.i8);
  v853 = vmovl_s8(*(int8x8_t *)v850.i8);
  v854 = vmovl_s16(*(int16x4_t *)v853.i8);
  v855 = vmovl_high_s16(v851);
  v856 = vmovl_high_s16(v853);
  v800.i64[0] = v856.i32[2];
  v800.i64[1] = v856.i32[3];
  v857 = vbicq_s8((int8x16_t)xmmword_19FFB31E0, v800);
  v800.i64[0] = v855.i32[2];
  v800.i64[1] = v855.i32[3];
  v858 = vbicq_s8((int8x16_t)xmmword_19FFB31F0, v800);
  v800.i64[0] = v854.i32[2];
  v800.i64[1] = v854.i32[3];
  v859 = vbicq_s8((int8x16_t)xmmword_19FFB3200, v800);
  v800.i64[0] = v852.i32[2];
  v800.i64[1] = v852.i32[3];
  v860 = vbicq_s8((int8x16_t)xmmword_19FFB3210, v800);
  v800.i64[0] = v856.i32[0];
  v800.i64[1] = v856.i32[1];
  v861 = vbicq_s8((int8x16_t)xmmword_19FFB3220, v800);
  v800.i64[0] = v855.i32[0];
  v800.i64[1] = v855.i32[1];
  v862 = vbicq_s8((int8x16_t)xmmword_19FFB3230, v800);
  v800.i64[0] = v854.i32[0];
  v800.i64[1] = v854.i32[1];
  v863 = vbicq_s8((int8x16_t)xmmword_19FFB3240, v800);
  v800.i64[0] = v852.i32[0];
  v800.i64[1] = v852.i32[1];
  *((_QWORD *)v787 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v863, v843), v828), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v800), v842), v827)), vorrq_s8(vorrq_s8(vorrq_s8(v861, v845), v830), vorrq_s8(vorrq_s8(v862, v844), v829))), (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v859, vbicq_s8((int8x16_t)xmmword_19FFB31B0, v848)), v832), vorrq_s8(vorrq_s8(v860, v849), v831)), vorrq_s8(vorrq_s8(vorrq_s8(v857, vbicq_s8((int8x16_t)xmmword_19FFB31D0, v846)),
                                                v834),
                                              vorrq_s8(vorrq_s8(v858, vbicq_s8((int8x16_t)xmmword_19FFB31C0, v847)), v833)))));
  *((_QWORD *)v787 + 3) = &off_1E42B7358;
  v787[312] = 1;
  v864 = *(std::__shared_weak_count **)(a1 + 464);
  *(_QWORD *)(a1 + 456) = v787 + 24;
  *(_QWORD *)(a1 + 464) = v787;
  if (v864)
  {
    v865 = (unint64_t *)&v864->__shared_owners_;
    do
      v866 = __ldaxr(v865);
    while (__stlxr(v866 - 1, v865));
    if (!v866)
    {
      ((void (*)(std::__shared_weak_count *))v864->__on_zero_shared)(v864);
      std::__shared_weak_count::__release_weak(v864);
    }
  }
  v867 = (std::__shared_weak_count *)*((_QWORD *)&v1736 + 1);
  if (*((_QWORD *)&v1736 + 1))
  {
    v868 = (unint64_t *)(*((_QWORD *)&v1736 + 1) + 8);
    do
      v869 = __ldaxr(v868);
    while (__stlxr(v869 - 1, v868));
    if (!v869)
    {
      ((void (*)(std::__shared_weak_count *))v867->__on_zero_shared)(v867);
      std::__shared_weak_count::__release_weak(v867);
    }
  }
  v870 = (uint64_t *)operator new();
  v1808[0] = &off_1E42D13F0;
  v1808[1] = a1;
  v1809 = v1808;
  v1806[0] = &off_1E42D61A0;
  v1807 = v1806;
  v870[1] = 0;
  v870[2] = 0;
  *v870 = 0;
  {
    v1660 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1660, "GeoGL", 0xA3D02C1100000005);
  }
  v872 = ggl::Allocator::instance(void)::alloc;
  v870[4] = 0;
  v870[3] = v872;
  v870[5] = 0;
  v870[6] = 0;
  {
    v1661 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1661, "GeoGL", 0xA3D02C1100000005);
  }
  v870[7] = ggl::Allocator::instance(void)::alloc;
  v873 = (uint64_t)v1809;
  if (!v1809)
    goto LABEL_449;
  if (v1809 != v1808)
  {
    v873 = (*(uint64_t (**)(void))(*v1809 + 16))();
LABEL_449:
    v870[11] = v873;
    goto LABEL_451;
  }
  v870[11] = (uint64_t)(v870 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v1808[0] + 24))(v1808, v870 + 8);
LABEL_451:
  v874 = (uint64_t)v1807;
  if (!v1807)
  {
LABEL_454:
    v870[15] = v874;
    goto LABEL_456;
  }
  if (v1807 != v1806)
  {
    v874 = (*(uint64_t (**)(void))(*v1807 + 16))();
    goto LABEL_454;
  }
  v870[15] = (uint64_t)(v870 + 12);
  (*(void (**)(_QWORD *, uint64_t *))(v1806[0] + 24))(v1806, v870 + 12);
LABEL_456:
  v870[16] = 2000;
  v875 = *v870;
  if ((unint64_t)(v870[2] - *v870) > 0x31F)
    goto LABEL_469;
  v876 = v870[1];
  v877 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v870[3] + 16))(v870[3], 800, 8);
  v878 = v876 - v875;
  v879 = v877 + ((v876 - v875) & 0xFFFFFFFFFFFFFFF8);
  v881 = *v870;
  v880 = v870[1];
  v882 = v880 - *v870;
  if (v880 == *v870)
  {
    v884 = v877 + ((v876 - v875) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_467;
  }
  v883 = v882 - 8;
  if ((unint64_t)(v882 - 8) >= 0x58)
  {
    v884 = v877 + ((v876 - v875) & 0xFFFFFFFFFFFFFFF8);
    if (v880 - (v878 & 0xFFFFFFFFFFFFFFF8) - v877 >= 0x20)
    {
      v885 = v878 >> 3;
      v886 = (v883 >> 3) + 1;
      v887 = (_OWORD *)(v877 + 8 * v885 - 16);
      v888 = (__int128 *)(v880 - 16);
      v889 = v886 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v890 = *v888;
        *(v887 - 1) = *(v888 - 1);
        *v887 = v890;
        v887 -= 2;
        v888 -= 2;
        v889 -= 4;
      }
      while (v889);
      v884 = v879 - 8 * (v886 & 0x3FFFFFFFFFFFFFFCLL);
      v880 -= 8 * (v886 & 0x3FFFFFFFFFFFFFFCLL);
      if (v886 == (v886 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_466;
    }
  }
  else
  {
    v884 = v877 + ((v876 - v875) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v891 = *(_QWORD *)(v880 - 8);
    v880 -= 8;
    *(_QWORD *)(v884 - 8) = v891;
    v884 -= 8;
  }
  while (v880 != v881);
LABEL_466:
  v880 = *v870;
LABEL_467:
  *v870 = v884;
  v870[1] = v879;
  v892 = v870[2];
  v870[2] = v877 + 800;
  if (v880)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v870[3] + 40))(v870[3], v880, v892 - v880);
LABEL_469:
  v893 = v870[4];
  if ((unint64_t)(v870[6] - v893) > 0x31F)
    goto LABEL_482;
  v894 = v870[5];
  v895 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v870[7] + 16))(v870[7], 800, 8);
  v896 = v894 - v893;
  v897 = v895 + ((v894 - v893) & 0xFFFFFFFFFFFFFFF8);
  v899 = v870[4];
  v898 = v870[5];
  v900 = v898 - v899;
  if (v898 == v899)
  {
    v902 = v895 + ((v894 - v893) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_480;
  }
  v901 = v900 - 8;
  if ((unint64_t)(v900 - 8) >= 0x58)
  {
    v902 = v895 + ((v894 - v893) & 0xFFFFFFFFFFFFFFF8);
    if (v898 - (v896 & 0xFFFFFFFFFFFFFFF8) - v895 >= 0x20)
    {
      v903 = v896 >> 3;
      v904 = (v901 >> 3) + 1;
      v905 = (_OWORD *)(v895 + 8 * v903 - 16);
      v906 = (__int128 *)(v898 - 16);
      v907 = v904 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v908 = *v906;
        *(v905 - 1) = *(v906 - 1);
        *v905 = v908;
        v905 -= 2;
        v906 -= 2;
        v907 -= 4;
      }
      while (v907);
      v902 = v897 - 8 * (v904 & 0x3FFFFFFFFFFFFFFCLL);
      v898 -= 8 * (v904 & 0x3FFFFFFFFFFFFFFCLL);
      if (v904 == (v904 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_479;
    }
  }
  else
  {
    v902 = v895 + ((v894 - v893) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v909 = *(_QWORD *)(v898 - 8);
    v898 -= 8;
    *(_QWORD *)(v902 - 8) = v909;
    v902 -= 8;
  }
  while (v898 != v899);
LABEL_479:
  v898 = v870[4];
LABEL_480:
  v870[4] = v902;
  v870[5] = v897;
  v910 = v870[6];
  v870[6] = v895 + 800;
  if (v898)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v870[7] + 40))(v870[7], v898, v910 - v898);
LABEL_482:
  v911 = *v1725;
  *v1725 = (uint64_t)v870;
  if (v911)
  {
    v912 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v911);
    MEMORY[0x1A1AF4E00](v912, 0x10A0C40D234DDC7);
  }
  v913 = v1807;
  if (v1807 == v1806)
  {
    v914 = 4;
    v913 = v1806;
  }
  else
  {
    if (!v1807)
      goto LABEL_489;
    v914 = 5;
  }
  (*(void (**)(void))(*v913 + 8 * v914))();
LABEL_489:
  v915 = v1809;
  if (v1809 == v1808)
  {
    v916 = 4;
    v915 = v1808;
    goto LABEL_493;
  }
  if (v1809)
  {
    v916 = 5;
LABEL_493:
    (*(void (**)(void))(*v915 + 8 * v916))();
  }
  v917 = (uint64_t *)operator new();
  v1804[0] = &off_1E42D1438;
  v1804[1] = a1;
  v1805 = v1804;
  v1802[0] = &off_1E42D6CE0;
  v1803 = v1802;
  v917[1] = 0;
  v917[2] = 0;
  *v917 = 0;
  {
    v1662 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1662, "GeoGL", 0xA3D02C1100000005);
  }
  v919 = ggl::Allocator::instance(void)::alloc;
  v917[4] = 0;
  v917[3] = v919;
  v917[5] = 0;
  v917[6] = 0;
  {
    v1663 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1663, "GeoGL", 0xA3D02C1100000005);
  }
  v917[7] = ggl::Allocator::instance(void)::alloc;
  v920 = (uint64_t)v1805;
  if (!v1805)
    goto LABEL_499;
  if (v1805 != v1804)
  {
    v920 = (*(uint64_t (**)(void))(*v1805 + 16))();
LABEL_499:
    v917[11] = v920;
    goto LABEL_501;
  }
  v917[11] = (uint64_t)(v917 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v1804[0] + 24))(v1804, v917 + 8);
LABEL_501:
  v921 = (uint64_t)v1803;
  if (!v1803)
  {
LABEL_504:
    v917[15] = v921;
    goto LABEL_506;
  }
  if (v1803 != v1802)
  {
    v921 = (*(uint64_t (**)(void))(*v1803 + 16))();
    goto LABEL_504;
  }
  v917[15] = (uint64_t)(v917 + 12);
  (*(void (**)(_QWORD *, uint64_t *))(v1802[0] + 24))(v1802, v917 + 12);
LABEL_506:
  v917[16] = 2000;
  v922 = *v917;
  if ((unint64_t)(v917[2] - *v917) > 0x31F)
    goto LABEL_519;
  v923 = v917[1];
  v924 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v917[3] + 16))(v917[3], 800, 8);
  v925 = v923 - v922;
  v926 = v924 + ((v923 - v922) & 0xFFFFFFFFFFFFFFF8);
  v928 = *v917;
  v927 = v917[1];
  v929 = v927 - *v917;
  if (v927 == *v917)
  {
    v931 = v924 + ((v923 - v922) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_517;
  }
  v930 = v929 - 8;
  if ((unint64_t)(v929 - 8) >= 0x58)
  {
    v931 = v924 + ((v923 - v922) & 0xFFFFFFFFFFFFFFF8);
    if (v927 - (v925 & 0xFFFFFFFFFFFFFFF8) - v924 >= 0x20)
    {
      v932 = v925 >> 3;
      v933 = (v930 >> 3) + 1;
      v934 = (_OWORD *)(v924 + 8 * v932 - 16);
      v935 = (__int128 *)(v927 - 16);
      v936 = v933 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v937 = *v935;
        *(v934 - 1) = *(v935 - 1);
        *v934 = v937;
        v934 -= 2;
        v935 -= 2;
        v936 -= 4;
      }
      while (v936);
      v931 = v926 - 8 * (v933 & 0x3FFFFFFFFFFFFFFCLL);
      v927 -= 8 * (v933 & 0x3FFFFFFFFFFFFFFCLL);
      if (v933 == (v933 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_516;
    }
  }
  else
  {
    v931 = v924 + ((v923 - v922) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v938 = *(_QWORD *)(v927 - 8);
    v927 -= 8;
    *(_QWORD *)(v931 - 8) = v938;
    v931 -= 8;
  }
  while (v927 != v928);
LABEL_516:
  v927 = *v917;
LABEL_517:
  *v917 = v931;
  v917[1] = v926;
  v939 = v917[2];
  v917[2] = v924 + 800;
  if (v927)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v917[3] + 40))(v917[3], v927, v939 - v927);
LABEL_519:
  v940 = v917[4];
  if ((unint64_t)(v917[6] - v940) > 0x31F)
    goto LABEL_532;
  v941 = v917[5];
  v942 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v917[7] + 16))(v917[7], 800, 8);
  v943 = v941 - v940;
  v944 = v942 + ((v941 - v940) & 0xFFFFFFFFFFFFFFF8);
  v946 = v917[4];
  v945 = v917[5];
  v947 = v945 - v946;
  if (v945 == v946)
  {
    v949 = v942 + ((v941 - v940) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_530;
  }
  v948 = v947 - 8;
  if ((unint64_t)(v947 - 8) >= 0x58)
  {
    v949 = v942 + ((v941 - v940) & 0xFFFFFFFFFFFFFFF8);
    if (v945 - (v943 & 0xFFFFFFFFFFFFFFF8) - v942 >= 0x20)
    {
      v950 = v943 >> 3;
      v951 = (v948 >> 3) + 1;
      v952 = (_OWORD *)(v942 + 8 * v950 - 16);
      v953 = (__int128 *)(v945 - 16);
      v954 = v951 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v955 = *v953;
        *(v952 - 1) = *(v953 - 1);
        *v952 = v955;
        v952 -= 2;
        v953 -= 2;
        v954 -= 4;
      }
      while (v954);
      v949 = v944 - 8 * (v951 & 0x3FFFFFFFFFFFFFFCLL);
      v945 -= 8 * (v951 & 0x3FFFFFFFFFFFFFFCLL);
      if (v951 == (v951 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_529;
    }
  }
  else
  {
    v949 = v942 + ((v941 - v940) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v956 = *(_QWORD *)(v945 - 8);
    v945 -= 8;
    *(_QWORD *)(v949 - 8) = v956;
    v949 -= 8;
  }
  while (v945 != v946);
LABEL_529:
  v945 = v917[4];
LABEL_530:
  v917[4] = v949;
  v917[5] = v944;
  v957 = v917[6];
  v917[6] = v942 + 800;
  if (v945)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v917[7] + 40))(v917[7], v945, v957 - v945);
LABEL_532:
  v958 = *v1724;
  *v1724 = (uint64_t)v917;
  if (v958)
  {
    v959 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v958);
    MEMORY[0x1A1AF4E00](v959, 0x10A0C40D234DDC7);
  }
  v960 = v1803;
  if (v1803 == v1802)
  {
    v961 = 4;
    v960 = v1802;
  }
  else
  {
    if (!v1803)
      goto LABEL_539;
    v961 = 5;
  }
  (*(void (**)(void))(*v960 + 8 * v961))();
LABEL_539:
  v962 = v1805;
  if (v1805 == v1804)
  {
    v963 = 4;
    v962 = v1804;
    goto LABEL_543;
  }
  if (v1805)
  {
    v963 = 5;
LABEL_543:
    (*(void (**)(void))(*v962 + 8 * v963))();
  }
  v964 = (uint64_t *)operator new();
  v1800[0] = &off_1E42D1480;
  v1800[1] = a1;
  v1801 = v1800;
  v1798[0] = &off_1E42D6590;
  v1799 = v1798;
  v964[1] = 0;
  v964[2] = 0;
  *v964 = 0;
  {
    v1664 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1664, "GeoGL", 0xA3D02C1100000005);
  }
  v966 = ggl::Allocator::instance(void)::alloc;
  v964[4] = 0;
  v964[3] = v966;
  v964[5] = 0;
  v964[6] = 0;
  {
    v1665 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1665, "GeoGL", 0xA3D02C1100000005);
  }
  v964[7] = ggl::Allocator::instance(void)::alloc;
  v967 = (uint64_t)v1801;
  if (!v1801)
    goto LABEL_549;
  if (v1801 != v1800)
  {
    v967 = (*(uint64_t (**)(void))(*v1801 + 16))();
LABEL_549:
    v964[11] = v967;
    goto LABEL_551;
  }
  v964[11] = (uint64_t)(v964 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v1800[0] + 24))(v1800, v964 + 8);
LABEL_551:
  v968 = (uint64_t)v1799;
  if (!v1799)
  {
LABEL_554:
    v964[15] = v968;
    goto LABEL_556;
  }
  if (v1799 != v1798)
  {
    v968 = (*(uint64_t (**)(void))(*v1799 + 16))();
    goto LABEL_554;
  }
  v964[15] = (uint64_t)(v964 + 12);
  (*(void (**)(_QWORD *, uint64_t *))(v1798[0] + 24))(v1798, v964 + 12);
LABEL_556:
  v964[16] = 2000;
  v969 = *v964;
  if ((unint64_t)(v964[2] - *v964) > 0x31F)
    goto LABEL_569;
  v970 = v964[1];
  v971 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v964[3] + 16))(v964[3], 800, 8);
  v972 = v970 - v969;
  v973 = v971 + ((v970 - v969) & 0xFFFFFFFFFFFFFFF8);
  v975 = *v964;
  v974 = v964[1];
  v976 = v974 - *v964;
  if (v974 == *v964)
  {
    v978 = v971 + ((v970 - v969) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_567;
  }
  v977 = v976 - 8;
  if ((unint64_t)(v976 - 8) >= 0x58)
  {
    v978 = v971 + ((v970 - v969) & 0xFFFFFFFFFFFFFFF8);
    if (v974 - (v972 & 0xFFFFFFFFFFFFFFF8) - v971 >= 0x20)
    {
      v979 = v972 >> 3;
      v980 = (v977 >> 3) + 1;
      v981 = (_OWORD *)(v971 + 8 * v979 - 16);
      v982 = (__int128 *)(v974 - 16);
      v983 = v980 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v984 = *v982;
        *(v981 - 1) = *(v982 - 1);
        *v981 = v984;
        v981 -= 2;
        v982 -= 2;
        v983 -= 4;
      }
      while (v983);
      v978 = v973 - 8 * (v980 & 0x3FFFFFFFFFFFFFFCLL);
      v974 -= 8 * (v980 & 0x3FFFFFFFFFFFFFFCLL);
      if (v980 == (v980 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_566;
    }
  }
  else
  {
    v978 = v971 + ((v970 - v969) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v985 = *(_QWORD *)(v974 - 8);
    v974 -= 8;
    *(_QWORD *)(v978 - 8) = v985;
    v978 -= 8;
  }
  while (v974 != v975);
LABEL_566:
  v974 = *v964;
LABEL_567:
  *v964 = v978;
  v964[1] = v973;
  v986 = v964[2];
  v964[2] = v971 + 800;
  if (v974)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v964[3] + 40))(v964[3], v974, v986 - v974);
LABEL_569:
  v987 = v964[4];
  if ((unint64_t)(v964[6] - v987) > 0x31F)
    goto LABEL_582;
  v988 = v964[5];
  v989 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v964[7] + 16))(v964[7], 800, 8);
  v990 = v988 - v987;
  v991 = v989 + ((v988 - v987) & 0xFFFFFFFFFFFFFFF8);
  v993 = v964[4];
  v992 = v964[5];
  v994 = v992 - v993;
  if (v992 == v993)
  {
    v996 = v989 + ((v988 - v987) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_580;
  }
  v995 = v994 - 8;
  if ((unint64_t)(v994 - 8) >= 0x58)
  {
    v996 = v989 + ((v988 - v987) & 0xFFFFFFFFFFFFFFF8);
    if (v992 - (v990 & 0xFFFFFFFFFFFFFFF8) - v989 >= 0x20)
    {
      v997 = v990 >> 3;
      v998 = (v995 >> 3) + 1;
      v999 = (_OWORD *)(v989 + 8 * v997 - 16);
      v1000 = (__int128 *)(v992 - 16);
      v1001 = v998 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1002 = *v1000;
        *(v999 - 1) = *(v1000 - 1);
        *v999 = v1002;
        v999 -= 2;
        v1000 -= 2;
        v1001 -= 4;
      }
      while (v1001);
      v996 = v991 - 8 * (v998 & 0x3FFFFFFFFFFFFFFCLL);
      v992 -= 8 * (v998 & 0x3FFFFFFFFFFFFFFCLL);
      if (v998 == (v998 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_579;
    }
  }
  else
  {
    v996 = v989 + ((v988 - v987) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1003 = *(_QWORD *)(v992 - 8);
    v992 -= 8;
    *(_QWORD *)(v996 - 8) = v1003;
    v996 -= 8;
  }
  while (v992 != v993);
LABEL_579:
  v992 = v964[4];
LABEL_580:
  v964[4] = v996;
  v964[5] = v991;
  v1004 = v964[6];
  v964[6] = v989 + 800;
  if (v992)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v964[7] + 40))(v964[7], v992, v1004 - v992);
LABEL_582:
  v1005 = *v1723;
  *v1723 = (uint64_t)v964;
  if (v1005)
  {
    v1006 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1005);
    MEMORY[0x1A1AF4E00](v1006, 0x10A0C40D234DDC7);
  }
  v1007 = v1799;
  if (v1799 == v1798)
  {
    v1008 = 4;
    v1007 = v1798;
  }
  else
  {
    if (!v1799)
      goto LABEL_589;
    v1008 = 5;
  }
  (*(void (**)(void))(*v1007 + 8 * v1008))();
LABEL_589:
  v1009 = v1801;
  if (v1801 == v1800)
  {
    v1010 = 4;
    v1009 = v1800;
    goto LABEL_593;
  }
  if (v1801)
  {
    v1010 = 5;
LABEL_593:
    (*(void (**)(void))(*v1009 + 8 * v1010))();
  }
  v1011 = (uint64_t *)operator new();
  v1796[0] = &off_1E42D14C8;
  v1796[1] = a1;
  v1797 = v1796;
  v1794[0] = &off_1E42D7040;
  v1795 = v1794;
  v1011[1] = 0;
  v1011[2] = 0;
  *v1011 = 0;
  {
    v1666 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1666, "GeoGL", 0xA3D02C1100000005);
  }
  v1013 = ggl::Allocator::instance(void)::alloc;
  v1011[4] = 0;
  v1011[3] = v1013;
  v1011[5] = 0;
  v1011[6] = 0;
  {
    v1667 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1667, "GeoGL", 0xA3D02C1100000005);
  }
  v1011[7] = ggl::Allocator::instance(void)::alloc;
  v1014 = (uint64_t)v1797;
  if (!v1797)
    goto LABEL_599;
  if (v1797 != v1796)
  {
    v1014 = (*(uint64_t (**)(void))(*v1797 + 16))();
LABEL_599:
    v1011[11] = v1014;
    goto LABEL_601;
  }
  v1011[11] = (uint64_t)(v1011 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v1796[0] + 24))(v1796, v1011 + 8);
LABEL_601:
  v1015 = (uint64_t)v1795;
  if (!v1795)
  {
LABEL_604:
    v1011[15] = v1015;
    goto LABEL_606;
  }
  if (v1795 != v1794)
  {
    v1015 = (*(uint64_t (**)(void))(*v1795 + 16))();
    goto LABEL_604;
  }
  v1011[15] = (uint64_t)(v1011 + 12);
  (*(void (**)(_QWORD *, uint64_t *))(v1794[0] + 24))(v1794, v1011 + 12);
LABEL_606:
  v1011[16] = 2000;
  v1016 = *v1011;
  if ((unint64_t)(v1011[2] - *v1011) > 0x31F)
    goto LABEL_619;
  v1017 = v1011[1];
  v1018 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1011[3] + 16))(v1011[3], 800, 8);
  v1019 = v1017 - v1016;
  v1020 = v1018 + ((v1017 - v1016) & 0xFFFFFFFFFFFFFFF8);
  v1022 = *v1011;
  v1021 = v1011[1];
  v1023 = v1021 - *v1011;
  if (v1021 == *v1011)
  {
    v1025 = v1018 + ((v1017 - v1016) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_617;
  }
  v1024 = v1023 - 8;
  if ((unint64_t)(v1023 - 8) >= 0x58)
  {
    v1025 = v1018 + ((v1017 - v1016) & 0xFFFFFFFFFFFFFFF8);
    if (v1021 - (v1019 & 0xFFFFFFFFFFFFFFF8) - v1018 >= 0x20)
    {
      v1026 = v1019 >> 3;
      v1027 = (v1024 >> 3) + 1;
      v1028 = (_OWORD *)(v1018 + 8 * v1026 - 16);
      v1029 = (__int128 *)(v1021 - 16);
      v1030 = v1027 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1031 = *v1029;
        *(v1028 - 1) = *(v1029 - 1);
        *v1028 = v1031;
        v1028 -= 2;
        v1029 -= 2;
        v1030 -= 4;
      }
      while (v1030);
      v1025 = v1020 - 8 * (v1027 & 0x3FFFFFFFFFFFFFFCLL);
      v1021 -= 8 * (v1027 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1027 == (v1027 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_616;
    }
  }
  else
  {
    v1025 = v1018 + ((v1017 - v1016) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1032 = *(_QWORD *)(v1021 - 8);
    v1021 -= 8;
    *(_QWORD *)(v1025 - 8) = v1032;
    v1025 -= 8;
  }
  while (v1021 != v1022);
LABEL_616:
  v1021 = *v1011;
LABEL_617:
  *v1011 = v1025;
  v1011[1] = v1020;
  v1033 = v1011[2];
  v1011[2] = v1018 + 800;
  if (v1021)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1011[3] + 40))(v1011[3], v1021, v1033 - v1021);
LABEL_619:
  v1034 = v1011[4];
  if ((unint64_t)(v1011[6] - v1034) > 0x31F)
    goto LABEL_632;
  v1035 = v1011[5];
  v1036 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1011[7] + 16))(v1011[7], 800, 8);
  v1037 = v1035 - v1034;
  v1038 = v1036 + ((v1035 - v1034) & 0xFFFFFFFFFFFFFFF8);
  v1040 = v1011[4];
  v1039 = v1011[5];
  v1041 = v1039 - v1040;
  if (v1039 == v1040)
  {
    v1043 = v1036 + ((v1035 - v1034) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_630;
  }
  v1042 = v1041 - 8;
  if ((unint64_t)(v1041 - 8) >= 0x58)
  {
    v1043 = v1036 + ((v1035 - v1034) & 0xFFFFFFFFFFFFFFF8);
    if (v1039 - (v1037 & 0xFFFFFFFFFFFFFFF8) - v1036 >= 0x20)
    {
      v1044 = v1037 >> 3;
      v1045 = (v1042 >> 3) + 1;
      v1046 = (_OWORD *)(v1036 + 8 * v1044 - 16);
      v1047 = (__int128 *)(v1039 - 16);
      v1048 = v1045 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1049 = *v1047;
        *(v1046 - 1) = *(v1047 - 1);
        *v1046 = v1049;
        v1046 -= 2;
        v1047 -= 2;
        v1048 -= 4;
      }
      while (v1048);
      v1043 = v1038 - 8 * (v1045 & 0x3FFFFFFFFFFFFFFCLL);
      v1039 -= 8 * (v1045 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1045 == (v1045 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_629;
    }
  }
  else
  {
    v1043 = v1036 + ((v1035 - v1034) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1050 = *(_QWORD *)(v1039 - 8);
    v1039 -= 8;
    *(_QWORD *)(v1043 - 8) = v1050;
    v1043 -= 8;
  }
  while (v1039 != v1040);
LABEL_629:
  v1039 = v1011[4];
LABEL_630:
  v1011[4] = v1043;
  v1011[5] = v1038;
  v1051 = v1011[6];
  v1011[6] = v1036 + 800;
  if (v1039)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1011[7] + 40))(v1011[7], v1039, v1051 - v1039);
LABEL_632:
  v1052 = *v1722;
  *v1722 = (uint64_t)v1011;
  if (v1052)
  {
    v1053 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1052);
    MEMORY[0x1A1AF4E00](v1053, 0x10A0C40D234DDC7);
  }
  v1054 = v1795;
  if (v1795 == v1794)
  {
    v1055 = 4;
    v1054 = v1794;
  }
  else
  {
    if (!v1795)
      goto LABEL_639;
    v1055 = 5;
  }
  (*(void (**)(void))(*v1054 + 8 * v1055))();
LABEL_639:
  v1056 = v1797;
  if (v1797 == v1796)
  {
    v1057 = 4;
    v1056 = v1796;
    goto LABEL_643;
  }
  if (v1797)
  {
    v1057 = 5;
LABEL_643:
    (*(void (**)(void))(*v1056 + 8 * v1057))();
  }
  v1058 = (uint64_t *)operator new();
  v1792[0] = &off_1E42D1510;
  v1792[1] = a1;
  v1792[2] = a4;
  v1793 = v1792;
  v1790[0] = &off_1E42D6470;
  v1791 = v1790;
  v1058[1] = 0;
  v1058[2] = 0;
  *v1058 = 0;
  {
    v1668 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1668, "GeoGL", 0xA3D02C1100000005);
  }
  v1060 = ggl::Allocator::instance(void)::alloc;
  v1058[4] = 0;
  v1058[3] = v1060;
  v1058[5] = 0;
  v1058[6] = 0;
  {
    v1669 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1669, "GeoGL", 0xA3D02C1100000005);
  }
  v1058[7] = ggl::Allocator::instance(void)::alloc;
  v1061 = (uint64_t)v1793;
  if (!v1793)
    goto LABEL_649;
  if (v1793 != v1792)
  {
    v1061 = (*(uint64_t (**)(void))(*v1793 + 16))();
LABEL_649:
    v1058[11] = v1061;
    goto LABEL_651;
  }
  v1058[11] = (uint64_t)(v1058 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v1792[0] + 24))(v1792, v1058 + 8);
LABEL_651:
  v1062 = (uint64_t)v1791;
  if (!v1791)
  {
LABEL_654:
    v1058[15] = v1062;
    goto LABEL_656;
  }
  if (v1791 != v1790)
  {
    v1062 = (*(uint64_t (**)(void))(*v1791 + 16))();
    goto LABEL_654;
  }
  v1058[15] = (uint64_t)(v1058 + 12);
  (*(void (**)(_QWORD *, uint64_t *))(v1790[0] + 24))(v1790, v1058 + 12);
LABEL_656:
  v1058[16] = 2000;
  v1063 = *v1058;
  if ((unint64_t)(v1058[2] - *v1058) > 0x31F)
    goto LABEL_669;
  v1064 = v1058[1];
  v1065 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1058[3] + 16))(v1058[3], 800, 8);
  v1066 = v1064 - v1063;
  v1067 = v1065 + ((v1064 - v1063) & 0xFFFFFFFFFFFFFFF8);
  v1069 = *v1058;
  v1068 = v1058[1];
  v1070 = v1068 - *v1058;
  if (v1068 == *v1058)
  {
    v1072 = v1065 + ((v1064 - v1063) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_667;
  }
  v1071 = v1070 - 8;
  if ((unint64_t)(v1070 - 8) >= 0x58)
  {
    v1072 = v1065 + ((v1064 - v1063) & 0xFFFFFFFFFFFFFFF8);
    if (v1068 - (v1066 & 0xFFFFFFFFFFFFFFF8) - v1065 >= 0x20)
    {
      v1073 = v1066 >> 3;
      v1074 = (v1071 >> 3) + 1;
      v1075 = (_OWORD *)(v1065 + 8 * v1073 - 16);
      v1076 = (__int128 *)(v1068 - 16);
      v1077 = v1074 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1078 = *v1076;
        *(v1075 - 1) = *(v1076 - 1);
        *v1075 = v1078;
        v1075 -= 2;
        v1076 -= 2;
        v1077 -= 4;
      }
      while (v1077);
      v1072 = v1067 - 8 * (v1074 & 0x3FFFFFFFFFFFFFFCLL);
      v1068 -= 8 * (v1074 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1074 == (v1074 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_666;
    }
  }
  else
  {
    v1072 = v1065 + ((v1064 - v1063) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1079 = *(_QWORD *)(v1068 - 8);
    v1068 -= 8;
    *(_QWORD *)(v1072 - 8) = v1079;
    v1072 -= 8;
  }
  while (v1068 != v1069);
LABEL_666:
  v1068 = *v1058;
LABEL_667:
  *v1058 = v1072;
  v1058[1] = v1067;
  v1080 = v1058[2];
  v1058[2] = v1065 + 800;
  if (v1068)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1058[3] + 40))(v1058[3], v1068, v1080 - v1068);
LABEL_669:
  v1081 = v1058[4];
  if ((unint64_t)(v1058[6] - v1081) > 0x31F)
    goto LABEL_682;
  v1082 = v1058[5];
  v1083 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1058[7] + 16))(v1058[7], 800, 8);
  v1084 = v1082 - v1081;
  v1085 = v1083 + ((v1082 - v1081) & 0xFFFFFFFFFFFFFFF8);
  v1087 = v1058[4];
  v1086 = v1058[5];
  v1088 = v1086 - v1087;
  if (v1086 == v1087)
  {
    v1090 = v1083 + ((v1082 - v1081) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_680;
  }
  v1089 = v1088 - 8;
  if ((unint64_t)(v1088 - 8) >= 0x58)
  {
    v1090 = v1083 + ((v1082 - v1081) & 0xFFFFFFFFFFFFFFF8);
    if (v1086 - (v1084 & 0xFFFFFFFFFFFFFFF8) - v1083 >= 0x20)
    {
      v1091 = v1084 >> 3;
      v1092 = (v1089 >> 3) + 1;
      v1093 = (_OWORD *)(v1083 + 8 * v1091 - 16);
      v1094 = (__int128 *)(v1086 - 16);
      v1095 = v1092 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1096 = *v1094;
        *(v1093 - 1) = *(v1094 - 1);
        *v1093 = v1096;
        v1093 -= 2;
        v1094 -= 2;
        v1095 -= 4;
      }
      while (v1095);
      v1090 = v1085 - 8 * (v1092 & 0x3FFFFFFFFFFFFFFCLL);
      v1086 -= 8 * (v1092 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1092 == (v1092 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_679;
    }
  }
  else
  {
    v1090 = v1083 + ((v1082 - v1081) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1097 = *(_QWORD *)(v1086 - 8);
    v1086 -= 8;
    *(_QWORD *)(v1090 - 8) = v1097;
    v1090 -= 8;
  }
  while (v1086 != v1087);
LABEL_679:
  v1086 = v1058[4];
LABEL_680:
  v1058[4] = v1090;
  v1058[5] = v1085;
  v1098 = v1058[6];
  v1058[6] = v1083 + 800;
  if (v1086)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1058[7] + 40))(v1058[7], v1086, v1098 - v1086);
LABEL_682:
  v1099 = *v1721;
  *v1721 = (uint64_t)v1058;
  if (v1099)
  {
    v1100 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1099);
    MEMORY[0x1A1AF4E00](v1100, 0x10A0C40D234DDC7);
  }
  v1101 = v1791;
  if (v1791 == v1790)
  {
    v1102 = 4;
    v1101 = v1790;
  }
  else
  {
    if (!v1791)
      goto LABEL_689;
    v1102 = 5;
  }
  (*(void (**)(void))(*v1101 + 8 * v1102))();
LABEL_689:
  v1103 = v1793;
  if (v1793 == v1792)
  {
    v1104 = 4;
    v1103 = v1792;
    goto LABEL_693;
  }
  if (v1793)
  {
    v1104 = 5;
LABEL_693:
    (*(void (**)(void))(*v1103 + 8 * v1104))();
  }
  v1105 = (uint64_t *)operator new();
  v1788[0] = &off_1E42D1558;
  v1788[1] = a1;
  v1788[2] = a4;
  v1789 = v1788;
  v1786[0] = &off_1E42D6DB8;
  v1787 = v1786;
  v1105[1] = 0;
  v1105[2] = 0;
  *v1105 = 0;
  {
    v1670 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1670, "GeoGL", 0xA3D02C1100000005);
  }
  v1107 = ggl::Allocator::instance(void)::alloc;
  v1105[4] = 0;
  v1105[3] = v1107;
  v1105[5] = 0;
  v1105[6] = 0;
  {
    v1671 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1671, "GeoGL", 0xA3D02C1100000005);
  }
  v1105[7] = ggl::Allocator::instance(void)::alloc;
  v1108 = (uint64_t)v1789;
  if (!v1789)
    goto LABEL_699;
  if (v1789 != v1788)
  {
    v1108 = (*(uint64_t (**)(void))(*v1789 + 16))();
LABEL_699:
    v1105[11] = v1108;
    goto LABEL_701;
  }
  v1105[11] = (uint64_t)(v1105 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v1788[0] + 24))(v1788, v1105 + 8);
LABEL_701:
  v1109 = (uint64_t)v1787;
  if (!v1787)
  {
LABEL_704:
    v1105[15] = v1109;
    goto LABEL_706;
  }
  if (v1787 != v1786)
  {
    v1109 = (*(uint64_t (**)(void))(*v1787 + 16))();
    goto LABEL_704;
  }
  v1105[15] = (uint64_t)(v1105 + 12);
  (*(void (**)(_QWORD *, uint64_t *))(v1786[0] + 24))(v1786, v1105 + 12);
LABEL_706:
  v1105[16] = 2000;
  v1110 = *v1105;
  if ((unint64_t)(v1105[2] - *v1105) > 0x31F)
    goto LABEL_719;
  v1111 = v1105[1];
  v1112 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1105[3] + 16))(v1105[3], 800, 8);
  v1113 = v1111 - v1110;
  v1114 = v1112 + ((v1111 - v1110) & 0xFFFFFFFFFFFFFFF8);
  v1116 = *v1105;
  v1115 = v1105[1];
  v1117 = v1115 - *v1105;
  if (v1115 == *v1105)
  {
    v1119 = v1112 + ((v1111 - v1110) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_717;
  }
  v1118 = v1117 - 8;
  if ((unint64_t)(v1117 - 8) >= 0x58)
  {
    v1119 = v1112 + ((v1111 - v1110) & 0xFFFFFFFFFFFFFFF8);
    if (v1115 - (v1113 & 0xFFFFFFFFFFFFFFF8) - v1112 >= 0x20)
    {
      v1120 = v1113 >> 3;
      v1121 = (v1118 >> 3) + 1;
      v1122 = (_OWORD *)(v1112 + 8 * v1120 - 16);
      v1123 = (__int128 *)(v1115 - 16);
      v1124 = v1121 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1125 = *v1123;
        *(v1122 - 1) = *(v1123 - 1);
        *v1122 = v1125;
        v1122 -= 2;
        v1123 -= 2;
        v1124 -= 4;
      }
      while (v1124);
      v1119 = v1114 - 8 * (v1121 & 0x3FFFFFFFFFFFFFFCLL);
      v1115 -= 8 * (v1121 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1121 == (v1121 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_716;
    }
  }
  else
  {
    v1119 = v1112 + ((v1111 - v1110) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1126 = *(_QWORD *)(v1115 - 8);
    v1115 -= 8;
    *(_QWORD *)(v1119 - 8) = v1126;
    v1119 -= 8;
  }
  while (v1115 != v1116);
LABEL_716:
  v1115 = *v1105;
LABEL_717:
  *v1105 = v1119;
  v1105[1] = v1114;
  v1127 = v1105[2];
  v1105[2] = v1112 + 800;
  if (v1115)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1105[3] + 40))(v1105[3], v1115, v1127 - v1115);
LABEL_719:
  v1128 = v1105[4];
  if ((unint64_t)(v1105[6] - v1128) > 0x31F)
    goto LABEL_732;
  v1129 = v1105[5];
  v1130 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1105[7] + 16))(v1105[7], 800, 8);
  v1131 = v1129 - v1128;
  v1132 = v1130 + ((v1129 - v1128) & 0xFFFFFFFFFFFFFFF8);
  v1134 = v1105[4];
  v1133 = v1105[5];
  v1135 = v1133 - v1134;
  if (v1133 == v1134)
  {
    v1137 = v1130 + ((v1129 - v1128) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_730;
  }
  v1136 = v1135 - 8;
  if ((unint64_t)(v1135 - 8) >= 0x58)
  {
    v1137 = v1130 + ((v1129 - v1128) & 0xFFFFFFFFFFFFFFF8);
    if (v1133 - (v1131 & 0xFFFFFFFFFFFFFFF8) - v1130 >= 0x20)
    {
      v1138 = v1131 >> 3;
      v1139 = (v1136 >> 3) + 1;
      v1140 = (_OWORD *)(v1130 + 8 * v1138 - 16);
      v1141 = (__int128 *)(v1133 - 16);
      v1142 = v1139 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1143 = *v1141;
        *(v1140 - 1) = *(v1141 - 1);
        *v1140 = v1143;
        v1140 -= 2;
        v1141 -= 2;
        v1142 -= 4;
      }
      while (v1142);
      v1137 = v1132 - 8 * (v1139 & 0x3FFFFFFFFFFFFFFCLL);
      v1133 -= 8 * (v1139 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1139 == (v1139 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_729;
    }
  }
  else
  {
    v1137 = v1130 + ((v1129 - v1128) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1144 = *(_QWORD *)(v1133 - 8);
    v1133 -= 8;
    *(_QWORD *)(v1137 - 8) = v1144;
    v1137 -= 8;
  }
  while (v1133 != v1134);
LABEL_729:
  v1133 = v1105[4];
LABEL_730:
  v1105[4] = v1137;
  v1105[5] = v1132;
  v1145 = v1105[6];
  v1105[6] = v1130 + 800;
  if (v1133)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1105[7] + 40))(v1105[7], v1133, v1145 - v1133);
LABEL_732:
  v1146 = *v1720;
  *v1720 = (uint64_t)v1105;
  if (v1146)
  {
    v1147 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1146);
    MEMORY[0x1A1AF4E00](v1147, 0x10A0C40D234DDC7);
  }
  v1148 = v1787;
  if (v1787 == v1786)
  {
    v1149 = 4;
    v1148 = v1786;
  }
  else
  {
    if (!v1787)
      goto LABEL_739;
    v1149 = 5;
  }
  (*(void (**)(void))(*v1148 + 8 * v1149))();
LABEL_739:
  v1150 = v1789;
  if (v1789 == v1788)
  {
    v1151 = 4;
    v1150 = v1788;
  }
  else
  {
    if (!v1789)
      goto LABEL_744;
    v1151 = 5;
  }
  (*(void (**)(void))(*v1150 + 8 * v1151))();
LABEL_744:
  if (!*(_BYTE *)(a1 + 772))
  {
    v1156 = (uint64_t *)operator new();
    v1772[0] = &off_1E42D1678;
    v1772[1] = a1;
    v1772[2] = a4;
    v1773 = v1772;
    v1770[0] = &off_1E42D6C98;
    v1771 = v1770;
    v1156[1] = 0;
    v1156[2] = 0;
    *v1156 = 0;
    {
      v1684 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1684, "GeoGL", 0xA3D02C1100000005);
    }
    v1158 = ggl::Allocator::instance(void)::alloc;
    v1156[4] = 0;
    v1156[3] = v1158;
    v1156[5] = 0;
    v1156[6] = 0;
    {
      v1685 = operator new();
      ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1685, "GeoGL", 0xA3D02C1100000005);
    }
    v1156[7] = ggl::Allocator::instance(void)::alloc;
    v1159 = (uint64_t)v1773;
    if (v1773)
    {
      if (v1773 == v1772)
      {
        v1156[11] = (uint64_t)(v1156 + 8);
        (*(void (**)(_QWORD *, uint64_t *))(v1772[0] + 24))(v1772, v1156 + 8);
LABEL_899:
        v1297 = (uint64_t)v1771;
        if (v1771)
        {
          if (v1771 == v1770)
          {
            v1156[15] = (uint64_t)(v1156 + 12);
            (*(void (**)(_QWORD *, uint64_t *))(v1770[0] + 24))(v1770, v1156 + 12);
LABEL_904:
            v1156[16] = 2000;
            v1298 = *v1156;
            if ((unint64_t)(v1156[2] - *v1156) > 0x31F)
              goto LABEL_917;
            v1299 = v1156[1];
            v1300 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1156[3] + 16))(v1156[3], 800, 8);
            v1301 = v1299 - v1298;
            v1302 = v1300 + ((v1299 - v1298) & 0xFFFFFFFFFFFFFFF8);
            v1304 = *v1156;
            v1303 = v1156[1];
            v1305 = v1303 - *v1156;
            if (v1303 == *v1156)
            {
              v1307 = v1300 + ((v1299 - v1298) & 0xFFFFFFFFFFFFFFF8);
              goto LABEL_915;
            }
            v1306 = v1305 - 8;
            if ((unint64_t)(v1305 - 8) >= 0x58)
            {
              v1307 = v1300 + ((v1299 - v1298) & 0xFFFFFFFFFFFFFFF8);
              if (v1303 - (v1301 & 0xFFFFFFFFFFFFFFF8) - v1300 >= 0x20)
              {
                v1308 = v1301 >> 3;
                v1309 = (v1306 >> 3) + 1;
                v1310 = (_OWORD *)(v1300 + 8 * v1308 - 16);
                v1311 = (__int128 *)(v1303 - 16);
                v1312 = v1309 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v1313 = *v1311;
                  *(v1310 - 1) = *(v1311 - 1);
                  *v1310 = v1313;
                  v1310 -= 2;
                  v1311 -= 2;
                  v1312 -= 4;
                }
                while (v1312);
                v1307 = v1302 - 8 * (v1309 & 0x3FFFFFFFFFFFFFFCLL);
                v1303 -= 8 * (v1309 & 0x3FFFFFFFFFFFFFFCLL);
                if (v1309 == (v1309 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_914;
              }
            }
            else
            {
              v1307 = v1300 + ((v1299 - v1298) & 0xFFFFFFFFFFFFFFF8);
            }
            do
            {
              v1314 = *(_QWORD *)(v1303 - 8);
              v1303 -= 8;
              *(_QWORD *)(v1307 - 8) = v1314;
              v1307 -= 8;
            }
            while (v1303 != v1304);
LABEL_914:
            v1303 = *v1156;
LABEL_915:
            *v1156 = v1307;
            v1156[1] = v1302;
            v1315 = v1156[2];
            v1156[2] = v1300 + 800;
            if (v1303)
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1156[3] + 40))(v1156[3], v1303, v1315 - v1303);
LABEL_917:
            v1316 = v1156[4];
            if ((unint64_t)(v1156[6] - v1316) > 0x31F)
              goto LABEL_930;
            v1317 = v1156[5];
            v1318 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1156[7] + 16))(v1156[7], 800, 8);
            v1319 = v1317 - v1316;
            v1320 = v1318 + ((v1317 - v1316) & 0xFFFFFFFFFFFFFFF8);
            v1322 = v1156[4];
            v1321 = v1156[5];
            v1323 = v1321 - v1322;
            if (v1321 == v1322)
            {
              v1325 = v1318 + ((v1317 - v1316) & 0xFFFFFFFFFFFFFFF8);
              goto LABEL_928;
            }
            v1324 = v1323 - 8;
            if ((unint64_t)(v1323 - 8) >= 0x58)
            {
              v1325 = v1318 + ((v1317 - v1316) & 0xFFFFFFFFFFFFFFF8);
              if (v1321 - (v1319 & 0xFFFFFFFFFFFFFFF8) - v1318 >= 0x20)
              {
                v1326 = v1319 >> 3;
                v1327 = (v1324 >> 3) + 1;
                v1328 = (_OWORD *)(v1318 + 8 * v1326 - 16);
                v1329 = (__int128 *)(v1321 - 16);
                v1330 = v1327 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v1331 = *v1329;
                  *(v1328 - 1) = *(v1329 - 1);
                  *v1328 = v1331;
                  v1328 -= 2;
                  v1329 -= 2;
                  v1330 -= 4;
                }
                while (v1330);
                v1325 = v1320 - 8 * (v1327 & 0x3FFFFFFFFFFFFFFCLL);
                v1321 -= 8 * (v1327 & 0x3FFFFFFFFFFFFFFCLL);
                if (v1327 == (v1327 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_927;
              }
            }
            else
            {
              v1325 = v1318 + ((v1317 - v1316) & 0xFFFFFFFFFFFFFFF8);
            }
            do
            {
              v1332 = *(_QWORD *)(v1321 - 8);
              v1321 -= 8;
              *(_QWORD *)(v1325 - 8) = v1332;
              v1325 -= 8;
            }
            while (v1321 != v1322);
LABEL_927:
            v1321 = v1156[4];
LABEL_928:
            v1156[4] = v1325;
            v1156[5] = v1320;
            v1333 = v1156[6];
            v1156[6] = v1318 + 800;
            if (v1321)
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1156[7] + 40))(v1156[7], v1321, v1333 - v1321);
LABEL_930:
            v1334 = *v1710;
            *v1710 = (uint64_t)v1156;
            if (v1334)
            {
              v1335 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1334);
              MEMORY[0x1A1AF4E00](v1335, 0x10A0C40D234DDC7);
            }
            v1336 = v1771;
            if (v1771 == v1770)
            {
              v1337 = 4;
              v1336 = v1770;
            }
            else
            {
              if (!v1771)
                goto LABEL_937;
              v1337 = 5;
            }
            (*(void (**)(void))(*v1336 + 8 * v1337))();
LABEL_937:
            v1338 = v1773;
            if (v1773 == v1772)
            {
              v1339 = 4;
              v1338 = v1772;
            }
            else
            {
              if (!v1773)
              {
LABEL_942:
                v1340 = (uint64_t *)operator new();
                v1768[1] = a1;
                v1768[2] = a4;
                v1769 = v1768;
                v1766[0] = &off_1E42D7118;
                v1767 = v1766;
                v1768[0] = &off_1E42D16C0;
                v1340[1] = 0;
                v1340[2] = 0;
                *v1340 = 0;
                {
                  v1686 = operator new();
                  ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1686, "GeoGL", 0xA3D02C1100000005);
                }
                v1342 = ggl::Allocator::instance(void)::alloc;
                v1340[4] = 0;
                v1340[3] = v1342;
                v1340[5] = 0;
                v1340[6] = 0;
                {
                  v1687 = operator new();
                  ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1687, "GeoGL", 0xA3D02C1100000005);
                }
                v1340[7] = ggl::Allocator::instance(void)::alloc;
                v1343 = (uint64_t)v1769;
                if (v1769)
                {
                  if (v1769 == v1768)
                  {
                    v1340[11] = (uint64_t)(v1340 + 8);
                    (*(void (**)(_QWORD *, uint64_t *))(v1768[0] + 24))(v1768, v1340 + 8);
LABEL_949:
                    v1344 = (uint64_t)v1767;
                    if (v1767)
                    {
                      if (v1767 == v1766)
                      {
                        v1340[15] = (uint64_t)(v1340 + 12);
                        (*(void (**)(_QWORD *, uint64_t *))(v1766[0] + 24))(v1766, v1340 + 12);
LABEL_954:
                        v1340[16] = 2000;
                        v1345 = *v1340;
                        if ((unint64_t)(v1340[2] - *v1340) > 0x31F)
                          goto LABEL_967;
                        v1346 = v1340[1];
                        v1347 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1340[3] + 16))(v1340[3], 800, 8);
                        v1348 = v1346 - v1345;
                        v1349 = v1347 + ((v1346 - v1345) & 0xFFFFFFFFFFFFFFF8);
                        v1351 = *v1340;
                        v1350 = v1340[1];
                        v1352 = v1350 - *v1340;
                        if (v1350 == *v1340)
                        {
                          v1354 = v1347 + ((v1346 - v1345) & 0xFFFFFFFFFFFFFFF8);
                          goto LABEL_965;
                        }
                        v1353 = v1352 - 8;
                        if ((unint64_t)(v1352 - 8) >= 0x58)
                        {
                          v1354 = v1347 + ((v1346 - v1345) & 0xFFFFFFFFFFFFFFF8);
                          if (v1350 - (v1348 & 0xFFFFFFFFFFFFFFF8) - v1347 >= 0x20)
                          {
                            v1355 = v1348 >> 3;
                            v1356 = (v1353 >> 3) + 1;
                            v1357 = (_OWORD *)(v1347 + 8 * v1355 - 16);
                            v1358 = (__int128 *)(v1350 - 16);
                            v1359 = v1356 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              v1360 = *v1358;
                              *(v1357 - 1) = *(v1358 - 1);
                              *v1357 = v1360;
                              v1357 -= 2;
                              v1358 -= 2;
                              v1359 -= 4;
                            }
                            while (v1359);
                            v1354 = v1349 - 8 * (v1356 & 0x3FFFFFFFFFFFFFFCLL);
                            v1350 -= 8 * (v1356 & 0x3FFFFFFFFFFFFFFCLL);
                            if (v1356 == (v1356 & 0x3FFFFFFFFFFFFFFCLL))
                              goto LABEL_964;
                          }
                        }
                        else
                        {
                          v1354 = v1347 + ((v1346 - v1345) & 0xFFFFFFFFFFFFFFF8);
                        }
                        do
                        {
                          v1361 = *(_QWORD *)(v1350 - 8);
                          v1350 -= 8;
                          *(_QWORD *)(v1354 - 8) = v1361;
                          v1354 -= 8;
                        }
                        while (v1350 != v1351);
LABEL_964:
                        v1350 = *v1340;
LABEL_965:
                        *v1340 = v1354;
                        v1340[1] = v1349;
                        v1362 = v1340[2];
                        v1340[2] = v1347 + 800;
                        if (v1350)
                          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1340[3] + 40))(v1340[3], v1350, v1362 - v1350);
LABEL_967:
                        v1363 = v1340[4];
                        if ((unint64_t)(v1340[6] - v1363) > 0x31F)
                          goto LABEL_980;
                        v1364 = v1340[5];
                        v1365 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1340[7] + 16))(v1340[7], 800, 8);
                        v1366 = v1364 - v1363;
                        v1367 = v1365 + ((v1364 - v1363) & 0xFFFFFFFFFFFFFFF8);
                        v1369 = v1340[4];
                        v1368 = v1340[5];
                        v1370 = v1368 - v1369;
                        if (v1368 == v1369)
                        {
                          v1372 = v1365 + ((v1364 - v1363) & 0xFFFFFFFFFFFFFFF8);
                          goto LABEL_978;
                        }
                        v1371 = v1370 - 8;
                        if ((unint64_t)(v1370 - 8) >= 0x58)
                        {
                          v1372 = v1365 + ((v1364 - v1363) & 0xFFFFFFFFFFFFFFF8);
                          if (v1368 - (v1366 & 0xFFFFFFFFFFFFFFF8) - v1365 >= 0x20)
                          {
                            v1373 = v1366 >> 3;
                            v1374 = (v1371 >> 3) + 1;
                            v1375 = (_OWORD *)(v1365 + 8 * v1373 - 16);
                            v1376 = (__int128 *)(v1368 - 16);
                            v1377 = v1374 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              v1378 = *v1376;
                              *(v1375 - 1) = *(v1376 - 1);
                              *v1375 = v1378;
                              v1375 -= 2;
                              v1376 -= 2;
                              v1377 -= 4;
                            }
                            while (v1377);
                            v1372 = v1367 - 8 * (v1374 & 0x3FFFFFFFFFFFFFFCLL);
                            v1368 -= 8 * (v1374 & 0x3FFFFFFFFFFFFFFCLL);
                            if (v1374 == (v1374 & 0x3FFFFFFFFFFFFFFCLL))
                              goto LABEL_977;
                          }
                        }
                        else
                        {
                          v1372 = v1365 + ((v1364 - v1363) & 0xFFFFFFFFFFFFFFF8);
                        }
                        do
                        {
                          v1379 = *(_QWORD *)(v1368 - 8);
                          v1368 -= 8;
                          *(_QWORD *)(v1372 - 8) = v1379;
                          v1372 -= 8;
                        }
                        while (v1368 != v1369);
LABEL_977:
                        v1368 = v1340[4];
LABEL_978:
                        v1340[4] = v1372;
                        v1340[5] = v1367;
                        v1380 = v1340[6];
                        v1340[6] = v1365 + 800;
                        if (v1368)
                          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1340[7] + 40))(v1340[7], v1368, v1380 - v1368);
LABEL_980:
                        v1381 = *v1709;
                        *v1709 = (uint64_t)v1340;
                        if (v1381)
                        {
                          v1382 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1381);
                          MEMORY[0x1A1AF4E00](v1382, 0x10A0C40D234DDC7);
                        }
                        v1383 = v1767;
                        if (v1767 == v1766)
                        {
                          v1384 = 4;
                          v1383 = v1766;
                        }
                        else
                        {
                          if (!v1767)
                            goto LABEL_987;
                          v1384 = 5;
                        }
                        (*(void (**)(void))(*v1383 + 8 * v1384))();
LABEL_987:
                        v1385 = v1769;
                        if (v1769 == v1768)
                        {
                          v1386 = 4;
                          v1385 = v1768;
                        }
                        else
                        {
                          if (!v1769)
                          {
LABEL_992:
                            v1387 = (uint64_t *)operator new();
                            v1764[1] = a1;
                            v1764[2] = a4;
                            v1765 = v1764;
                            v1762[0] = &off_1E42D7160;
                            v1763 = v1762;
                            v1764[0] = &off_1E42D1708;
                            v1387[1] = 0;
                            v1387[2] = 0;
                            *v1387 = 0;
                            if ((v1388 & 1) == 0
                            {
                              v1688 = operator new();
                              ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1688, "GeoGL", 0xA3D02C1100000005);
                            }
                            v1389 = ggl::Allocator::instance(void)::alloc;
                            v1387[4] = 0;
                            v1387[3] = v1389;
                            v1387[5] = 0;
                            v1387[6] = 0;
                            if ((v1389 & 1) == 0
                            {
                              v1689 = operator new();
                              ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1689, "GeoGL", 0xA3D02C1100000005);
                            }
                            v1387[7] = ggl::Allocator::instance(void)::alloc;
                            v1390 = (uint64_t)v1765;
                            if (v1765)
                            {
                              if (v1765 == v1764)
                              {
                                v1387[11] = (uint64_t)(v1387 + 8);
                                (*(void (**)(_QWORD *, uint64_t *))(v1764[0] + 24))(v1764, v1387 + 8);
LABEL_999:
                                v1391 = (uint64_t)v1763;
                                if (v1763)
                                {
                                  if (v1763 == v1762)
                                  {
                                    v1387[15] = (uint64_t)(v1387 + 12);
                                    (*(void (**)(_QWORD *, uint64_t *))(v1762[0] + 24))(v1762, v1387 + 12);
LABEL_1004:
                                    v1387[16] = 2000;
                                    v1392 = *v1387;
                                    if ((unint64_t)(v1387[2] - *v1387) > 0x31F)
                                      goto LABEL_1017;
                                    v1393 = v1387[1];
                                    v1394 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1387[3]
                                                                                                 + 16))(v1387[3], 800, 8);
                                    v1395 = v1393 - v1392;
                                    v1396 = v1394 + ((v1393 - v1392) & 0xFFFFFFFFFFFFFFF8);
                                    v1398 = *v1387;
                                    v1397 = v1387[1];
                                    v1399 = v1397 - *v1387;
                                    if (v1397 == *v1387)
                                    {
                                      v1401 = v1394 + ((v1393 - v1392) & 0xFFFFFFFFFFFFFFF8);
                                      goto LABEL_1015;
                                    }
                                    v1400 = v1399 - 8;
                                    if ((unint64_t)(v1399 - 8) >= 0x58)
                                    {
                                      v1401 = v1394 + ((v1393 - v1392) & 0xFFFFFFFFFFFFFFF8);
                                      if (v1397 - (v1395 & 0xFFFFFFFFFFFFFFF8) - v1394 >= 0x20)
                                      {
                                        v1402 = v1395 >> 3;
                                        v1403 = (v1400 >> 3) + 1;
                                        v1404 = (_OWORD *)(v1394 + 8 * v1402 - 16);
                                        v1405 = (__int128 *)(v1397 - 16);
                                        v1406 = v1403 & 0x3FFFFFFFFFFFFFFCLL;
                                        do
                                        {
                                          v1407 = *v1405;
                                          *(v1404 - 1) = *(v1405 - 1);
                                          *v1404 = v1407;
                                          v1404 -= 2;
                                          v1405 -= 2;
                                          v1406 -= 4;
                                        }
                                        while (v1406);
                                        v1401 = v1396 - 8 * (v1403 & 0x3FFFFFFFFFFFFFFCLL);
                                        v1397 -= 8 * (v1403 & 0x3FFFFFFFFFFFFFFCLL);
                                        if (v1403 == (v1403 & 0x3FFFFFFFFFFFFFFCLL))
                                          goto LABEL_1014;
                                      }
                                    }
                                    else
                                    {
                                      v1401 = v1394 + ((v1393 - v1392) & 0xFFFFFFFFFFFFFFF8);
                                    }
                                    do
                                    {
                                      v1408 = *(_QWORD *)(v1397 - 8);
                                      v1397 -= 8;
                                      *(_QWORD *)(v1401 - 8) = v1408;
                                      v1401 -= 8;
                                    }
                                    while (v1397 != v1398);
LABEL_1014:
                                    v1397 = *v1387;
LABEL_1015:
                                    *v1387 = v1401;
                                    v1387[1] = v1396;
                                    v1409 = v1387[2];
                                    v1387[2] = v1394 + 800;
                                    if (v1397)
                                      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1387[3] + 40))(v1387[3], v1397, v1409 - v1397);
LABEL_1017:
                                    v1410 = v1387[4];
                                    if ((unint64_t)(v1387[6] - v1410) > 0x31F)
                                      goto LABEL_1030;
                                    v1411 = v1387[5];
                                    v1412 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1387[7]
                                                                                                 + 16))(v1387[7], 800, 8);
                                    v1413 = v1411 - v1410;
                                    v1414 = v1412 + ((v1411 - v1410) & 0xFFFFFFFFFFFFFFF8);
                                    v1416 = v1387[4];
                                    v1415 = v1387[5];
                                    v1417 = v1415 - v1416;
                                    if (v1415 == v1416)
                                    {
                                      v1419 = v1412 + ((v1411 - v1410) & 0xFFFFFFFFFFFFFFF8);
                                      goto LABEL_1028;
                                    }
                                    v1418 = v1417 - 8;
                                    if ((unint64_t)(v1417 - 8) >= 0x58)
                                    {
                                      v1419 = v1412 + ((v1411 - v1410) & 0xFFFFFFFFFFFFFFF8);
                                      if (v1415 - (v1413 & 0xFFFFFFFFFFFFFFF8) - v1412 >= 0x20)
                                      {
                                        v1420 = v1413 >> 3;
                                        v1421 = (v1418 >> 3) + 1;
                                        v1422 = (_OWORD *)(v1412 + 8 * v1420 - 16);
                                        v1423 = (__int128 *)(v1415 - 16);
                                        v1424 = v1421 & 0x3FFFFFFFFFFFFFFCLL;
                                        do
                                        {
                                          v1425 = *v1423;
                                          *(v1422 - 1) = *(v1423 - 1);
                                          *v1422 = v1425;
                                          v1422 -= 2;
                                          v1423 -= 2;
                                          v1424 -= 4;
                                        }
                                        while (v1424);
                                        v1419 = v1414 - 8 * (v1421 & 0x3FFFFFFFFFFFFFFCLL);
                                        v1415 -= 8 * (v1421 & 0x3FFFFFFFFFFFFFFCLL);
                                        if (v1421 == (v1421 & 0x3FFFFFFFFFFFFFFCLL))
                                          goto LABEL_1027;
                                      }
                                    }
                                    else
                                    {
                                      v1419 = v1412 + ((v1411 - v1410) & 0xFFFFFFFFFFFFFFF8);
                                    }
                                    do
                                    {
                                      v1426 = *(_QWORD *)(v1415 - 8);
                                      v1415 -= 8;
                                      *(_QWORD *)(v1419 - 8) = v1426;
                                      v1419 -= 8;
                                    }
                                    while (v1415 != v1416);
LABEL_1027:
                                    v1415 = v1387[4];
LABEL_1028:
                                    v1387[4] = v1419;
                                    v1387[5] = v1414;
                                    v1427 = v1387[6];
                                    v1387[6] = v1412 + 800;
                                    if (v1415)
                                      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1387[7] + 40))(v1387[7], v1415, v1427 - v1415);
LABEL_1030:
                                    v1428 = *v1708;
                                    *v1708 = (uint64_t)v1387;
                                    if (v1428)
                                    {
                                      v1429 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1428);
                                      MEMORY[0x1A1AF4E00](v1429, 0x10A0C40D234DDC7);
                                    }
                                    v1430 = v1763;
                                    if (v1763 == v1762)
                                    {
                                      v1431 = 4;
                                      v1430 = v1762;
                                    }
                                    else
                                    {
                                      if (!v1763)
                                        goto LABEL_1037;
                                      v1431 = 5;
                                    }
                                    (*(void (**)(void))(*v1430 + 8 * v1431))();
LABEL_1037:
                                    v1295 = v1765;
                                    if (v1765 == v1764)
                                    {
                                      v1296 = 4;
                                      v1295 = v1764;
                                      goto LABEL_1041;
                                    }
                                    goto LABEL_1038;
                                  }
                                  v1391 = (*(uint64_t (**)(void))(*v1763 + 16))();
                                }
                                v1387[15] = v1391;
                                goto LABEL_1004;
                              }
                              v1390 = (*(uint64_t (**)(void))(*v1765 + 16))();
                            }
                            v1387[11] = v1390;
                            goto LABEL_999;
                          }
                          v1386 = 5;
                        }
                        (*(void (**)(void))(*v1385 + 8 * v1386))();
                        goto LABEL_992;
                      }
                      v1344 = (*(uint64_t (**)(void))(*v1767 + 16))();
                    }
                    v1340[15] = v1344;
                    goto LABEL_954;
                  }
                  v1343 = (*(uint64_t (**)(void))(*v1769 + 16))();
                }
                v1340[11] = v1343;
                goto LABEL_949;
              }
              v1339 = 5;
            }
            (*(void (**)(void))(*v1338 + 8 * v1339))();
            goto LABEL_942;
          }
          v1297 = (*(uint64_t (**)(void))(*v1771 + 16))();
        }
        v1156[15] = v1297;
        goto LABEL_904;
      }
      v1159 = (*(uint64_t (**)(void))(*v1773 + 16))();
    }
    v1156[11] = v1159;
    goto LABEL_899;
  }
  v1152 = (uint64_t *)operator new();
  v1784[0] = &off_1E42D15A0;
  v1784[1] = a1;
  v1784[2] = a4;
  v1785 = v1784;
  v1782[0] = &off_1E42D6D70;
  v1783 = v1782;
  v1152[1] = 0;
  v1152[2] = 0;
  *v1152 = 0;
  {
    v1672 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1672, "GeoGL", 0xA3D02C1100000005);
  }
  v1154 = ggl::Allocator::instance(void)::alloc;
  v1152[4] = 0;
  v1152[3] = v1154;
  v1152[5] = 0;
  v1152[6] = 0;
  {
    v1673 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1673, "GeoGL", 0xA3D02C1100000005);
  }
  v1152[7] = ggl::Allocator::instance(void)::alloc;
  v1155 = (uint64_t)v1785;
  if (!v1785)
    goto LABEL_750;
  if (v1785 != v1784)
  {
    v1155 = (*(uint64_t (**)(void))(*v1785 + 16))();
LABEL_750:
    v1152[11] = v1155;
    goto LABEL_758;
  }
  v1152[11] = (uint64_t)(v1152 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v1784[0] + 24))(v1784, v1152 + 8);
LABEL_758:
  v1160 = (uint64_t)v1783;
  if (!v1783)
  {
LABEL_761:
    v1152[15] = v1160;
    goto LABEL_763;
  }
  if (v1783 != v1782)
  {
    v1160 = (*(uint64_t (**)(void))(*v1783 + 16))();
    goto LABEL_761;
  }
  v1152[15] = (uint64_t)(v1152 + 12);
  (*(void (**)(_QWORD *, uint64_t *))(v1782[0] + 24))(v1782, v1152 + 12);
LABEL_763:
  v1152[16] = 2000;
  v1161 = *v1152;
  if ((unint64_t)(v1152[2] - *v1152) > 0x31F)
    goto LABEL_776;
  v1162 = v1152[1];
  v1163 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1152[3] + 16))(v1152[3], 800, 8);
  v1164 = v1162 - v1161;
  v1165 = v1163 + ((v1162 - v1161) & 0xFFFFFFFFFFFFFFF8);
  v1167 = *v1152;
  v1166 = v1152[1];
  v1168 = v1166 - *v1152;
  if (v1166 == *v1152)
  {
    v1170 = v1163 + ((v1162 - v1161) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_774;
  }
  v1169 = v1168 - 8;
  if ((unint64_t)(v1168 - 8) >= 0x58)
  {
    v1170 = v1163 + ((v1162 - v1161) & 0xFFFFFFFFFFFFFFF8);
    if (v1166 - (v1164 & 0xFFFFFFFFFFFFFFF8) - v1163 >= 0x20)
    {
      v1171 = v1164 >> 3;
      v1172 = (v1169 >> 3) + 1;
      v1173 = (_OWORD *)(v1163 + 8 * v1171 - 16);
      v1174 = (__int128 *)(v1166 - 16);
      v1175 = v1172 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1176 = *v1174;
        *(v1173 - 1) = *(v1174 - 1);
        *v1173 = v1176;
        v1173 -= 2;
        v1174 -= 2;
        v1175 -= 4;
      }
      while (v1175);
      v1170 = v1165 - 8 * (v1172 & 0x3FFFFFFFFFFFFFFCLL);
      v1166 -= 8 * (v1172 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1172 == (v1172 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_773;
    }
  }
  else
  {
    v1170 = v1163 + ((v1162 - v1161) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1177 = *(_QWORD *)(v1166 - 8);
    v1166 -= 8;
    *(_QWORD *)(v1170 - 8) = v1177;
    v1170 -= 8;
  }
  while (v1166 != v1167);
LABEL_773:
  v1166 = *v1152;
LABEL_774:
  *v1152 = v1170;
  v1152[1] = v1165;
  v1178 = v1152[2];
  v1152[2] = v1163 + 800;
  if (v1166)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1152[3] + 40))(v1152[3], v1166, v1178 - v1166);
LABEL_776:
  v1179 = v1152[4];
  if ((unint64_t)(v1152[6] - v1179) > 0x31F)
    goto LABEL_789;
  v1180 = v1152[5];
  v1181 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1152[7] + 16))(v1152[7], 800, 8);
  v1182 = v1180 - v1179;
  v1183 = v1181 + ((v1180 - v1179) & 0xFFFFFFFFFFFFFFF8);
  v1185 = v1152[4];
  v1184 = v1152[5];
  v1186 = v1184 - v1185;
  if (v1184 == v1185)
  {
    v1188 = v1181 + ((v1180 - v1179) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_787;
  }
  v1187 = v1186 - 8;
  if ((unint64_t)(v1186 - 8) >= 0x58)
  {
    v1188 = v1181 + ((v1180 - v1179) & 0xFFFFFFFFFFFFFFF8);
    if (v1184 - (v1182 & 0xFFFFFFFFFFFFFFF8) - v1181 >= 0x20)
    {
      v1189 = v1182 >> 3;
      v1190 = (v1187 >> 3) + 1;
      v1191 = (_OWORD *)(v1181 + 8 * v1189 - 16);
      v1192 = (__int128 *)(v1184 - 16);
      v1193 = v1190 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1194 = *v1192;
        *(v1191 - 1) = *(v1192 - 1);
        *v1191 = v1194;
        v1191 -= 2;
        v1192 -= 2;
        v1193 -= 4;
      }
      while (v1193);
      v1188 = v1183 - 8 * (v1190 & 0x3FFFFFFFFFFFFFFCLL);
      v1184 -= 8 * (v1190 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1190 == (v1190 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_786;
    }
  }
  else
  {
    v1188 = v1181 + ((v1180 - v1179) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1195 = *(_QWORD *)(v1184 - 8);
    v1184 -= 8;
    *(_QWORD *)(v1188 - 8) = v1195;
    v1188 -= 8;
  }
  while (v1184 != v1185);
LABEL_786:
  v1184 = v1152[4];
LABEL_787:
  v1152[4] = v1188;
  v1152[5] = v1183;
  v1196 = v1152[6];
  v1152[6] = v1181 + 800;
  if (v1184)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1152[7] + 40))(v1152[7], v1184, v1196 - v1184);
LABEL_789:
  v1197 = *v1718;
  *v1718 = (uint64_t)v1152;
  if (v1197)
  {
    v1198 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1197);
    MEMORY[0x1A1AF4E00](v1198, 0x10A0C40D234DDC7);
  }
  v1199 = v1783;
  if (v1783 == v1782)
  {
    v1200 = 4;
    v1199 = v1782;
  }
  else
  {
    if (!v1783)
      goto LABEL_796;
    v1200 = 5;
  }
  (*(void (**)(void))(*v1199 + 8 * v1200))();
LABEL_796:
  v1201 = v1785;
  if (v1785 == v1784)
  {
    v1202 = 4;
    v1201 = v1784;
    goto LABEL_800;
  }
  if (v1785)
  {
    v1202 = 5;
LABEL_800:
    (*(void (**)(void))(*v1201 + 8 * v1202))();
  }
  v1203 = (uint64_t *)operator new();
  v1780[0] = &off_1E42D15E8;
  v1780[1] = a1;
  v1780[2] = a4;
  v1781 = v1780;
  v1778[0] = &off_1E42D71A8;
  v1779 = v1778;
  v1203[1] = 0;
  v1203[2] = 0;
  *v1203 = 0;
  {
    v1674 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1674, "GeoGL", 0xA3D02C1100000005);
  }
  v1205 = ggl::Allocator::instance(void)::alloc;
  v1203[4] = 0;
  v1203[3] = v1205;
  v1203[5] = 0;
  v1203[6] = 0;
  {
    v1675 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1675, "GeoGL", 0xA3D02C1100000005);
  }
  v1203[7] = ggl::Allocator::instance(void)::alloc;
  v1206 = (uint64_t)v1781;
  if (!v1781)
    goto LABEL_806;
  if (v1781 != v1780)
  {
    v1206 = (*(uint64_t (**)(void))(*v1781 + 16))();
LABEL_806:
    v1203[11] = v1206;
    goto LABEL_808;
  }
  v1203[11] = (uint64_t)(v1203 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v1780[0] + 24))(v1780, v1203 + 8);
LABEL_808:
  v1207 = (uint64_t)v1779;
  if (!v1779)
  {
LABEL_811:
    v1203[15] = v1207;
    goto LABEL_813;
  }
  if (v1779 != v1778)
  {
    v1207 = (*(uint64_t (**)(void))(*v1779 + 16))();
    goto LABEL_811;
  }
  v1203[15] = (uint64_t)(v1203 + 12);
  (*(void (**)(_QWORD *, uint64_t *))(v1778[0] + 24))(v1778, v1203 + 12);
LABEL_813:
  v1203[16] = 2000;
  v1208 = *v1203;
  if ((unint64_t)(v1203[2] - *v1203) > 0x31F)
    goto LABEL_826;
  v1209 = v1203[1];
  v1210 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1203[3] + 16))(v1203[3], 800, 8);
  v1211 = v1209 - v1208;
  v1212 = v1210 + ((v1209 - v1208) & 0xFFFFFFFFFFFFFFF8);
  v1214 = *v1203;
  v1213 = v1203[1];
  v1215 = v1213 - *v1203;
  if (v1213 == *v1203)
  {
    v1217 = v1210 + ((v1209 - v1208) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_824;
  }
  v1216 = v1215 - 8;
  if ((unint64_t)(v1215 - 8) >= 0x58)
  {
    v1217 = v1210 + ((v1209 - v1208) & 0xFFFFFFFFFFFFFFF8);
    if (v1213 - (v1211 & 0xFFFFFFFFFFFFFFF8) - v1210 >= 0x20)
    {
      v1218 = v1211 >> 3;
      v1219 = (v1216 >> 3) + 1;
      v1220 = (_OWORD *)(v1210 + 8 * v1218 - 16);
      v1221 = (__int128 *)(v1213 - 16);
      v1222 = v1219 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1223 = *v1221;
        *(v1220 - 1) = *(v1221 - 1);
        *v1220 = v1223;
        v1220 -= 2;
        v1221 -= 2;
        v1222 -= 4;
      }
      while (v1222);
      v1217 = v1212 - 8 * (v1219 & 0x3FFFFFFFFFFFFFFCLL);
      v1213 -= 8 * (v1219 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1219 == (v1219 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_823;
    }
  }
  else
  {
    v1217 = v1210 + ((v1209 - v1208) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1224 = *(_QWORD *)(v1213 - 8);
    v1213 -= 8;
    *(_QWORD *)(v1217 - 8) = v1224;
    v1217 -= 8;
  }
  while (v1213 != v1214);
LABEL_823:
  v1213 = *v1203;
LABEL_824:
  *v1203 = v1217;
  v1203[1] = v1212;
  v1225 = v1203[2];
  v1203[2] = v1210 + 800;
  if (v1213)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1203[3] + 40))(v1203[3], v1213, v1225 - v1213);
LABEL_826:
  v1226 = v1203[4];
  if ((unint64_t)(v1203[6] - v1226) > 0x31F)
    goto LABEL_839;
  v1227 = v1203[5];
  v1228 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1203[7] + 16))(v1203[7], 800, 8);
  v1229 = v1227 - v1226;
  v1230 = v1228 + ((v1227 - v1226) & 0xFFFFFFFFFFFFFFF8);
  v1232 = v1203[4];
  v1231 = v1203[5];
  v1233 = v1231 - v1232;
  if (v1231 == v1232)
  {
    v1235 = v1228 + ((v1227 - v1226) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_837;
  }
  v1234 = v1233 - 8;
  if ((unint64_t)(v1233 - 8) >= 0x58)
  {
    v1235 = v1228 + ((v1227 - v1226) & 0xFFFFFFFFFFFFFFF8);
    if (v1231 - (v1229 & 0xFFFFFFFFFFFFFFF8) - v1228 >= 0x20)
    {
      v1236 = v1229 >> 3;
      v1237 = (v1234 >> 3) + 1;
      v1238 = (_OWORD *)(v1228 + 8 * v1236 - 16);
      v1239 = (__int128 *)(v1231 - 16);
      v1240 = v1237 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1241 = *v1239;
        *(v1238 - 1) = *(v1239 - 1);
        *v1238 = v1241;
        v1238 -= 2;
        v1239 -= 2;
        v1240 -= 4;
      }
      while (v1240);
      v1235 = v1230 - 8 * (v1237 & 0x3FFFFFFFFFFFFFFCLL);
      v1231 -= 8 * (v1237 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1237 == (v1237 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_836;
    }
  }
  else
  {
    v1235 = v1228 + ((v1227 - v1226) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1242 = *(_QWORD *)(v1231 - 8);
    v1231 -= 8;
    *(_QWORD *)(v1235 - 8) = v1242;
    v1235 -= 8;
  }
  while (v1231 != v1232);
LABEL_836:
  v1231 = v1203[4];
LABEL_837:
  v1203[4] = v1235;
  v1203[5] = v1230;
  v1243 = v1203[6];
  v1203[6] = v1228 + 800;
  if (v1231)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1203[7] + 40))(v1203[7], v1231, v1243 - v1231);
LABEL_839:
  v1244 = *v1717;
  *v1717 = (uint64_t)v1203;
  if (v1244)
  {
    v1245 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1244);
    MEMORY[0x1A1AF4E00](v1245, 0x10A0C40D234DDC7);
  }
  v1246 = v1779;
  if (v1779 == v1778)
  {
    v1247 = 4;
    v1246 = v1778;
  }
  else
  {
    if (!v1779)
      goto LABEL_846;
    v1247 = 5;
  }
  (*(void (**)(void))(*v1246 + 8 * v1247))();
LABEL_846:
  v1248 = v1781;
  if (v1781 == v1780)
  {
    v1249 = 4;
    v1248 = v1780;
    goto LABEL_850;
  }
  if (v1781)
  {
    v1249 = 5;
LABEL_850:
    (*(void (**)(void))(*v1248 + 8 * v1249))();
  }
  v1250 = (uint64_t *)operator new();
  v1776[0] = &off_1E42D1630;
  v1776[1] = a1;
  v1776[2] = a4;
  v1777 = v1776;
  v1774[0] = &off_1E42D7238;
  v1775 = v1774;
  v1250[1] = 0;
  v1250[2] = 0;
  *v1250 = 0;
  {
    v1676 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1676, "GeoGL", 0xA3D02C1100000005);
  }
  v1252 = ggl::Allocator::instance(void)::alloc;
  v1250[4] = 0;
  v1250[3] = v1252;
  v1250[5] = 0;
  v1250[6] = 0;
  {
    v1677 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1677, "GeoGL", 0xA3D02C1100000005);
  }
  v1250[7] = ggl::Allocator::instance(void)::alloc;
  v1253 = (uint64_t)v1777;
  if (!v1777)
    goto LABEL_856;
  if (v1777 != v1776)
  {
    v1253 = (*(uint64_t (**)(void))(*v1777 + 16))();
LABEL_856:
    v1250[11] = v1253;
    goto LABEL_858;
  }
  v1250[11] = (uint64_t)(v1250 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v1776[0] + 24))(v1776, v1250 + 8);
LABEL_858:
  v1254 = (uint64_t)v1775;
  if (!v1775)
  {
LABEL_861:
    v1250[15] = v1254;
    goto LABEL_863;
  }
  if (v1775 != v1774)
  {
    v1254 = (*(uint64_t (**)(void))(*v1775 + 16))();
    goto LABEL_861;
  }
  v1250[15] = (uint64_t)(v1250 + 12);
  (*(void (**)(_QWORD *, uint64_t *))(v1774[0] + 24))(v1774, v1250 + 12);
LABEL_863:
  v1250[16] = 2000;
  v1255 = *v1250;
  if ((unint64_t)(v1250[2] - *v1250) > 0x31F)
    goto LABEL_876;
  v1256 = v1250[1];
  v1257 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1250[3] + 16))(v1250[3], 800, 8);
  v1258 = v1256 - v1255;
  v1259 = v1257 + ((v1256 - v1255) & 0xFFFFFFFFFFFFFFF8);
  v1261 = *v1250;
  v1260 = v1250[1];
  v1262 = v1260 - *v1250;
  if (v1260 == *v1250)
  {
    v1264 = v1257 + ((v1256 - v1255) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_874;
  }
  v1263 = v1262 - 8;
  if ((unint64_t)(v1262 - 8) >= 0x58)
  {
    v1264 = v1257 + ((v1256 - v1255) & 0xFFFFFFFFFFFFFFF8);
    if (v1260 - (v1258 & 0xFFFFFFFFFFFFFFF8) - v1257 >= 0x20)
    {
      v1265 = v1258 >> 3;
      v1266 = (v1263 >> 3) + 1;
      v1267 = (_OWORD *)(v1257 + 8 * v1265 - 16);
      v1268 = (__int128 *)(v1260 - 16);
      v1269 = v1266 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1270 = *v1268;
        *(v1267 - 1) = *(v1268 - 1);
        *v1267 = v1270;
        v1267 -= 2;
        v1268 -= 2;
        v1269 -= 4;
      }
      while (v1269);
      v1264 = v1259 - 8 * (v1266 & 0x3FFFFFFFFFFFFFFCLL);
      v1260 -= 8 * (v1266 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1266 == (v1266 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_873;
    }
  }
  else
  {
    v1264 = v1257 + ((v1256 - v1255) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1271 = *(_QWORD *)(v1260 - 8);
    v1260 -= 8;
    *(_QWORD *)(v1264 - 8) = v1271;
    v1264 -= 8;
  }
  while (v1260 != v1261);
LABEL_873:
  v1260 = *v1250;
LABEL_874:
  *v1250 = v1264;
  v1250[1] = v1259;
  v1272 = v1250[2];
  v1250[2] = v1257 + 800;
  if (v1260)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1250[3] + 40))(v1250[3], v1260, v1272 - v1260);
LABEL_876:
  v1273 = v1250[4];
  if ((unint64_t)(v1250[6] - v1273) > 0x31F)
    goto LABEL_889;
  v1274 = v1250[5];
  v1275 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1250[7] + 16))(v1250[7], 800, 8);
  v1276 = v1274 - v1273;
  v1277 = v1275 + ((v1274 - v1273) & 0xFFFFFFFFFFFFFFF8);
  v1279 = v1250[4];
  v1278 = v1250[5];
  v1280 = v1278 - v1279;
  if (v1278 == v1279)
  {
    v1282 = v1275 + ((v1274 - v1273) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_887;
  }
  v1281 = v1280 - 8;
  if ((unint64_t)(v1280 - 8) >= 0x58)
  {
    v1282 = v1275 + ((v1274 - v1273) & 0xFFFFFFFFFFFFFFF8);
    if (v1278 - (v1276 & 0xFFFFFFFFFFFFFFF8) - v1275 >= 0x20)
    {
      v1283 = v1276 >> 3;
      v1284 = (v1281 >> 3) + 1;
      v1285 = (_OWORD *)(v1275 + 8 * v1283 - 16);
      v1286 = (__int128 *)(v1278 - 16);
      v1287 = v1284 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1288 = *v1286;
        *(v1285 - 1) = *(v1286 - 1);
        *v1285 = v1288;
        v1285 -= 2;
        v1286 -= 2;
        v1287 -= 4;
      }
      while (v1287);
      v1282 = v1277 - 8 * (v1284 & 0x3FFFFFFFFFFFFFFCLL);
      v1278 -= 8 * (v1284 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1284 == (v1284 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_886;
    }
  }
  else
  {
    v1282 = v1275 + ((v1274 - v1273) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1289 = *(_QWORD *)(v1278 - 8);
    v1278 -= 8;
    *(_QWORD *)(v1282 - 8) = v1289;
    v1282 -= 8;
  }
  while (v1278 != v1279);
LABEL_886:
  v1278 = v1250[4];
LABEL_887:
  v1250[4] = v1282;
  v1250[5] = v1277;
  v1290 = v1250[6];
  v1250[6] = v1275 + 800;
  if (v1278)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1250[7] + 40))(v1250[7], v1278, v1290 - v1278);
LABEL_889:
  v1291 = *v1716;
  *v1716 = (uint64_t)v1250;
  if (v1291)
  {
    v1292 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1291);
    MEMORY[0x1A1AF4E00](v1292, 0x10A0C40D234DDC7);
  }
  v1293 = v1775;
  if (v1775 == v1774)
  {
    v1294 = 4;
    v1293 = v1774;
  }
  else
  {
    if (!v1775)
      goto LABEL_896;
    v1294 = 5;
  }
  (*(void (**)(void))(*v1293 + 8 * v1294))();
LABEL_896:
  v1295 = v1777;
  if (v1777 == v1776)
  {
    v1296 = 4;
    v1295 = v1776;
LABEL_1041:
    (*(void (**)(void))(*v1295 + 8 * v1296))();
    goto LABEL_1042;
  }
LABEL_1038:
  if (v1295)
  {
    v1296 = 5;
    goto LABEL_1041;
  }
LABEL_1042:
  v1432 = operator new(0xF0uLL);
  v1432[1] = 0;
  v1432[2] = 0;
  *v1432 = &off_1E42DEA08;
  v1432[5] = 0;
  v1432[6] = 0;
  v1432[4] = 0;
  *((_DWORD *)v1432 + 14) = 0;
  v1432[3] = &off_1E42B5DE8;
  *(_QWORD *)((char *)v1432 + 60) = 768;
  *((_DWORD *)v1432 + 17) = 0;
  v1432[9] = 0xFF000202020100;
  *((_WORD *)v1432 + 40) = 0;
  *((_BYTE *)v1432 + 82) = 3;
  *(_QWORD *)((char *)v1432 + 91) = 0;
  *(_QWORD *)((char *)v1432 + 83) = 0;
  *((_BYTE *)v1432 + 99) = 0;
  *(_QWORD *)((char *)v1432 + 156) = 0;
  *(_QWORD *)((char *)v1432 + 148) = 0;
  *((_WORD *)v1432 + 106) = 257;
  v1432[27] = 0;
  v1432[28] = 0;
  *((_BYTE *)v1432 + 232) = 0;
  *(_QWORD *)(a1 + 624) = v1432 + 3;
  v1433 = *(std::__shared_weak_count **)(a1 + 632);
  *(_QWORD *)(a1 + 632) = v1432;
  if (v1433)
  {
    v1434 = (unint64_t *)&v1433->__shared_owners_;
    do
      v1435 = __ldaxr(v1434);
    while (__stlxr(v1435 - 1, v1434));
    if (!v1435)
    {
      ((void (*)(std::__shared_weak_count *))v1433->__on_zero_shared)(v1433);
      std::__shared_weak_count::__release_weak(v1433);
    }
  }
  v1436 = *(_BYTE **)(a1 + 624);
  v1436[208] = 1;
  v1436[58] = 3;
  v1436[56] = 1;
  v1437 = operator new(0xF0uLL);
  v1437[1] = 0;
  v1437[2] = 0;
  *v1437 = &off_1E42DEA08;
  v1437[5] = 0;
  v1437[6] = 0;
  v1437[4] = 0;
  *((_DWORD *)v1437 + 14) = 0;
  v1437[3] = &off_1E42B5DE8;
  *(_QWORD *)((char *)v1437 + 60) = 66304;
  *((_DWORD *)v1437 + 17) = 0;
  v1437[9] = 1;
  *((_WORD *)v1437 + 40) = 0;
  *((_BYTE *)v1437 + 82) = 3;
  *(_QWORD *)((char *)v1437 + 91) = 0;
  *(_QWORD *)((char *)v1437 + 83) = 0;
  *((_BYTE *)v1437 + 99) = 0;
  *(_QWORD *)((char *)v1437 + 156) = 0;
  *(_QWORD *)((char *)v1437 + 148) = 0;
  *((_WORD *)v1437 + 106) = 257;
  v1437[27] = 0;
  v1437[28] = 0;
  *((_BYTE *)v1437 + 232) = 0;
  *(_QWORD *)(a1 + 640) = v1437 + 3;
  v1438 = *(std::__shared_weak_count **)(a1 + 648);
  *(_QWORD *)(a1 + 648) = v1437;
  if (v1438)
  {
    v1439 = (unint64_t *)&v1438->__shared_owners_;
    do
      v1440 = __ldaxr(v1439);
    while (__stlxr(v1440 - 1, v1439));
    if (!v1440)
    {
      ((void (*)(std::__shared_weak_count *))v1438->__on_zero_shared)(v1438);
      std::__shared_weak_count::__release_weak(v1438);
    }
  }
  v1441 = *(_QWORD *)(a1 + 640);
  *(_BYTE *)(v1441 + 58) = 3;
  *(_BYTE *)(v1441 + 56) = 1;
  v1442 = operator new(0xF0uLL);
  v1442[1] = 0;
  v1442[2] = 0;
  *v1442 = &off_1E42DEA08;
  v1442[5] = 0;
  v1442[6] = 0;
  v1442[4] = 0;
  *((_DWORD *)v1442 + 14) = 0;
  v1442[3] = &off_1E42B5DE8;
  *(_QWORD *)((char *)v1442 + 60) = 0xC59C400000010300;
  *((_DWORD *)v1442 + 17) = 0;
  v1442[9] = 1;
  *((_WORD *)v1442 + 40) = 0;
  *((_BYTE *)v1442 + 82) = 3;
  *(_QWORD *)((char *)v1442 + 91) = 0;
  *(_QWORD *)((char *)v1442 + 83) = 0;
  *((_BYTE *)v1442 + 99) = 0;
  *(_QWORD *)((char *)v1442 + 156) = 0;
  *(_QWORD *)((char *)v1442 + 148) = 0;
  *((_WORD *)v1442 + 106) = 257;
  v1442[27] = 0;
  v1442[28] = 0;
  *((_BYTE *)v1442 + 232) = 0;
  *(_QWORD *)(a1 + 656) = v1442 + 3;
  v1443 = *(std::__shared_weak_count **)(a1 + 664);
  *(_QWORD *)(a1 + 664) = v1442;
  if (v1443)
  {
    v1444 = (unint64_t *)&v1443->__shared_owners_;
    do
      v1445 = __ldaxr(v1444);
    while (__stlxr(v1445 - 1, v1444));
    if (!v1445)
    {
      ((void (*)(std::__shared_weak_count *))v1443->__on_zero_shared)(v1443);
      std::__shared_weak_count::__release_weak(v1443);
    }
  }
  v1446 = *(_QWORD *)(a1 + 656);
  *(_BYTE *)(v1446 + 58) = 3;
  *(_BYTE *)(v1446 + 56) = 1;
  v1447 = operator new(0xF0uLL);
  v1447[1] = 0;
  v1447[2] = 0;
  *v1447 = &off_1E42DEA08;
  v1447[5] = 0;
  v1447[6] = 0;
  v1447[4] = 0;
  *((_DWORD *)v1447 + 14) = 0;
  v1447[3] = &off_1E42B5DE8;
  *(_QWORD *)((char *)v1447 + 60) = 256;
  *((_DWORD *)v1447 + 17) = 0;
  v1447[9] = 1;
  *((_WORD *)v1447 + 40) = 0;
  *((_BYTE *)v1447 + 82) = 3;
  *(_QWORD *)((char *)v1447 + 91) = 0;
  *(_QWORD *)((char *)v1447 + 83) = 0;
  *((_BYTE *)v1447 + 99) = 0;
  *(_QWORD *)((char *)v1447 + 156) = 0;
  *(_QWORD *)((char *)v1447 + 148) = 0;
  *((_WORD *)v1447 + 106) = 257;
  v1447[27] = 0;
  v1447[28] = 0;
  *((_BYTE *)v1447 + 232) = 0;
  *(_QWORD *)(a1 + 672) = v1447 + 3;
  v1448 = *(std::__shared_weak_count **)(a1 + 680);
  *(_QWORD *)(a1 + 680) = v1447;
  if (v1448)
  {
    v1449 = (unint64_t *)&v1448->__shared_owners_;
    do
      v1450 = __ldaxr(v1449);
    while (__stlxr(v1450 - 1, v1449));
    if (!v1450)
    {
      ((void (*)(std::__shared_weak_count *))v1448->__on_zero_shared)(v1448);
      std::__shared_weak_count::__release_weak(v1448);
    }
  }
  v1451 = *(_QWORD *)(a1 + 672);
  *(_BYTE *)(v1451 + 58) = 3;
  *(_BYTE *)(v1451 + 56) = 1;
  v1452 = operator new(0xF0uLL);
  v1452[1] = 0;
  v1452[2] = 0;
  *v1452 = &off_1E42DEA08;
  v1452[5] = 0;
  v1452[6] = 0;
  v1452[4] = 0;
  *((_DWORD *)v1452 + 14) = 0;
  v1452[3] = &off_1E42B5DE8;
  *(_QWORD *)((char *)v1452 + 60) = 0xC59C400000000100;
  *((_DWORD *)v1452 + 17) = 0;
  v1452[9] = 1;
  *((_WORD *)v1452 + 40) = 0;
  *((_BYTE *)v1452 + 82) = 3;
  *(_QWORD *)((char *)v1452 + 91) = 0;
  *(_QWORD *)((char *)v1452 + 83) = 0;
  *((_BYTE *)v1452 + 99) = 0;
  *(_QWORD *)((char *)v1452 + 156) = 0;
  *(_QWORD *)((char *)v1452 + 148) = 0;
  *((_WORD *)v1452 + 106) = 257;
  v1452[27] = 0;
  v1452[28] = 0;
  *((_BYTE *)v1452 + 232) = 0;
  *(_QWORD *)(a1 + 688) = v1452 + 3;
  v1453 = *(std::__shared_weak_count **)(a1 + 696);
  *(_QWORD *)(a1 + 696) = v1452;
  if (v1453)
  {
    v1454 = (unint64_t *)&v1453->__shared_owners_;
    do
      v1455 = __ldaxr(v1454);
    while (__stlxr(v1455 - 1, v1454));
    if (!v1455)
    {
      ((void (*)(std::__shared_weak_count *))v1453->__on_zero_shared)(v1453);
      std::__shared_weak_count::__release_weak(v1453);
    }
  }
  v1456 = *(_QWORD *)(a1 + 688);
  *(_BYTE *)(v1456 + 58) = 3;
  *(_BYTE *)(v1456 + 56) = 1;
  v1457 = (unint64_t *)operator new();
  v1761 = v1760;
  v1758[0] = &off_1E42D60C8;
  v1759 = v1758;
  v1760[0] = &off_1E42D1750;
  ggl::FragmentedPool<ggl::RenderItem>::FragmentedPool(v1457, (uint64_t)v1760, (uint64_t)v1758);
  v1458 = *v1719;
  *v1719 = (uint64_t)v1457;
  if (v1458)
  {
    v1459 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1458);
    MEMORY[0x1A1AF4E00](v1459, 0x10A0C40D234DDC7);
  }
  v1460 = v1759;
  if (v1759 == v1758)
  {
    v1461 = 4;
    v1460 = v1758;
  }
  else
  {
    if (!v1759)
      goto LABEL_1074;
    v1461 = 5;
  }
  (*(void (**)(void))(*v1460 + 8 * v1461))();
LABEL_1074:
  v1462 = v1761;
  if (v1761 == v1760)
  {
    v1463 = 4;
    v1462 = v1760;
  }
  else
  {
    if (!v1761)
      goto LABEL_1079;
    v1463 = 5;
  }
  (*(void (**)(void))(*v1462 + 8 * v1463))();
LABEL_1079:
  if (!*(_BYTE *)(a1 + 770))
    goto LABEL_1147;
  v1464 = (uint64_t *)operator new();
  v1756[0] = &off_1E42D1798;
  v1756[1] = a1;
  v1757 = v1756;
  v1754[0] = &off_1E42D6308;
  v1755 = v1754;
  v1464[1] = 0;
  v1464[2] = 0;
  *v1464 = 0;
  {
    v1678 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1678, "GeoGL", 0xA3D02C1100000005);
  }
  v1466 = ggl::Allocator::instance(void)::alloc;
  v1464[4] = 0;
  v1464[3] = v1466;
  v1464[5] = 0;
  v1464[6] = 0;
  {
    v1679 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1679, "GeoGL", 0xA3D02C1100000005);
  }
  v1464[7] = ggl::Allocator::instance(void)::alloc;
  v1467 = (uint64_t)v1757;
  if (!v1757)
    goto LABEL_1085;
  if (v1757 != v1756)
  {
    v1467 = (*(uint64_t (**)(void))(*v1757 + 16))();
LABEL_1085:
    v1464[11] = v1467;
    goto LABEL_1087;
  }
  v1464[11] = (uint64_t)(v1464 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v1756[0] + 24))(v1756, v1464 + 8);
LABEL_1087:
  v1468 = (uint64_t)v1755;
  if (!v1755)
  {
LABEL_1090:
    v1464[15] = v1468;
    goto LABEL_1092;
  }
  if (v1755 != v1754)
  {
    v1468 = (*(uint64_t (**)(void))(*v1755 + 16))();
    goto LABEL_1090;
  }
  v1464[15] = (uint64_t)(v1464 + 12);
  (*(void (**)(_QWORD *, uint64_t *))(v1754[0] + 24))(v1754, v1464 + 12);
LABEL_1092:
  v1464[16] = 2000;
  v1469 = *v1464;
  if ((unint64_t)(v1464[2] - *v1464) > 0x31F)
    goto LABEL_1105;
  v1470 = v1464[1];
  v1471 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1464[3] + 16))(v1464[3], 800, 8);
  v1472 = v1470 - v1469;
  v1473 = v1471 + ((v1470 - v1469) & 0xFFFFFFFFFFFFFFF8);
  v1475 = *v1464;
  v1474 = v1464[1];
  v1476 = v1474 - *v1464;
  if (v1474 == *v1464)
  {
    v1478 = v1471 + ((v1470 - v1469) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1103;
  }
  v1477 = v1476 - 8;
  if ((unint64_t)(v1476 - 8) >= 0x58)
  {
    v1478 = v1471 + ((v1470 - v1469) & 0xFFFFFFFFFFFFFFF8);
    if (v1474 - (v1472 & 0xFFFFFFFFFFFFFFF8) - v1471 >= 0x20)
    {
      v1479 = v1472 >> 3;
      v1480 = (v1477 >> 3) + 1;
      v1481 = (_OWORD *)(v1471 + 8 * v1479 - 16);
      v1482 = (__int128 *)(v1474 - 16);
      v1483 = v1480 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1484 = *v1482;
        *(v1481 - 1) = *(v1482 - 1);
        *v1481 = v1484;
        v1481 -= 2;
        v1482 -= 2;
        v1483 -= 4;
      }
      while (v1483);
      v1478 = v1473 - 8 * (v1480 & 0x3FFFFFFFFFFFFFFCLL);
      v1474 -= 8 * (v1480 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1480 == (v1480 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1102;
    }
  }
  else
  {
    v1478 = v1471 + ((v1470 - v1469) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1485 = *(_QWORD *)(v1474 - 8);
    v1474 -= 8;
    *(_QWORD *)(v1478 - 8) = v1485;
    v1478 -= 8;
  }
  while (v1474 != v1475);
LABEL_1102:
  v1474 = *v1464;
LABEL_1103:
  *v1464 = v1478;
  v1464[1] = v1473;
  v1486 = v1464[2];
  v1464[2] = v1471 + 800;
  if (v1474)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1464[3] + 40))(v1464[3], v1474, v1486 - v1474);
LABEL_1105:
  v1487 = v1464[4];
  if ((unint64_t)(v1464[6] - v1487) > 0x31F)
    goto LABEL_1118;
  v1488 = v1464[5];
  v1489 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1464[7] + 16))(v1464[7], 800, 8);
  v1490 = v1488 - v1487;
  v1491 = v1489 + ((v1488 - v1487) & 0xFFFFFFFFFFFFFFF8);
  v1493 = v1464[4];
  v1492 = v1464[5];
  v1494 = v1492 - v1493;
  if (v1492 == v1493)
  {
    v1496 = v1489 + ((v1488 - v1487) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_1116;
  }
  v1495 = v1494 - 8;
  if ((unint64_t)(v1494 - 8) >= 0x58)
  {
    v1496 = v1489 + ((v1488 - v1487) & 0xFFFFFFFFFFFFFFF8);
    if (v1492 - (v1490 & 0xFFFFFFFFFFFFFFF8) - v1489 >= 0x20)
    {
      v1497 = v1490 >> 3;
      v1498 = (v1495 >> 3) + 1;
      v1499 = (_OWORD *)(v1489 + 8 * v1497 - 16);
      v1500 = (__int128 *)(v1492 - 16);
      v1501 = v1498 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1502 = *v1500;
        *(v1499 - 1) = *(v1500 - 1);
        *v1499 = v1502;
        v1499 -= 2;
        v1500 -= 2;
        v1501 -= 4;
      }
      while (v1501);
      v1496 = v1491 - 8 * (v1498 & 0x3FFFFFFFFFFFFFFCLL);
      v1492 -= 8 * (v1498 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1498 == (v1498 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1115;
    }
  }
  else
  {
    v1496 = v1489 + ((v1488 - v1487) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v1503 = *(_QWORD *)(v1492 - 8);
    v1492 -= 8;
    *(_QWORD *)(v1496 - 8) = v1503;
    v1496 -= 8;
  }
  while (v1492 != v1493);
LABEL_1115:
  v1492 = v1464[4];
LABEL_1116:
  v1464[4] = v1496;
  v1464[5] = v1491;
  v1504 = v1464[6];
  v1464[6] = v1489 + 800;
  if (v1492)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1464[7] + 40))(v1464[7], v1492, v1504 - v1492);
LABEL_1118:
  v1505 = *v1715;
  *v1715 = (uint64_t)v1464;
  if (v1505)
  {
    v1506 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1505);
    MEMORY[0x1A1AF4E00](v1506, 0x10A0C40D234DDC7);
  }
  v1507 = v1755;
  v599 = v1727;
  if (v1755 == v1754)
  {
    v1508 = 4;
    v1507 = v1754;
  }
  else
  {
    if (!v1755)
      goto LABEL_1125;
    v1508 = 5;
  }
  (*(void (**)(void))(*v1507 + 8 * v1508))();
LABEL_1125:
  v1509 = v1757;
  if (v1757 == v1756)
  {
    v1510 = 4;
    v1509 = v1756;
    goto LABEL_1129;
  }
  if (v1757)
  {
    v1510 = 5;
LABEL_1129:
    (*(void (**)(void))(*v1509 + 8 * v1510))();
  }
  v1511 = operator new(0xF0uLL);
  v1511[1] = 0;
  v1511[2] = 0;
  *v1511 = &off_1E42DEA08;
  v1511[5] = 0;
  v1511[6] = 0;
  v1511[4] = 0;
  *((_DWORD *)v1511 + 14) = 0;
  v1511[3] = &off_1E42B5DE8;
  *(_QWORD *)((char *)v1511 + 60) = 65792;
  *((_DWORD *)v1511 + 17) = 0;
  v1511[9] = 1;
  *((_WORD *)v1511 + 40) = 0;
  *((_BYTE *)v1511 + 82) = 3;
  *(_QWORD *)((char *)v1511 + 91) = 0;
  *(_QWORD *)((char *)v1511 + 83) = 0;
  *((_BYTE *)v1511 + 99) = 0;
  *(_QWORD *)((char *)v1511 + 156) = 0;
  *(_QWORD *)((char *)v1511 + 148) = 0;
  *((_WORD *)v1511 + 106) = 257;
  v1511[27] = 0;
  v1511[28] = 0;
  *((_BYTE *)v1511 + 232) = 0;
  *(_QWORD *)(a1 + 720) = v1511 + 3;
  v1512 = *(std::__shared_weak_count **)(a1 + 728);
  *(_QWORD *)(a1 + 728) = v1511;
  if (v1512)
  {
    v1513 = (unint64_t *)&v1512->__shared_owners_;
    do
      v1514 = __ldaxr(v1513);
    while (__stlxr(v1514 - 1, v1513));
    if (!v1514)
    {
      ((void (*)(std::__shared_weak_count *))v1512->__on_zero_shared)(v1512);
      std::__shared_weak_count::__release_weak(v1512);
    }
  }
  v1515 = *(_QWORD *)(a1 + 720);
  *(_BYTE *)(v1515 + 58) = 3;
  *(_BYTE *)(v1515 + 56) = 1;
  v1516 = (unint64_t *)operator new();
  v1753 = v1752;
  v1750[0] = &off_1E42D60C8;
  v1751 = v1750;
  v1752[0] = &off_1E42D17E0;
  ggl::FragmentedPool<ggl::RenderItem>::FragmentedPool(v1516, (uint64_t)v1752, (uint64_t)v1750);
  v1517 = *v1714;
  *v1714 = (uint64_t)v1516;
  if (v1517)
  {
    v1518 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1517);
    MEMORY[0x1A1AF4E00](v1518, 0x10A0C40D234DDC7);
  }
  v1519 = v1751;
  if (v1751 == v1750)
  {
    v1520 = 4;
    v1519 = v1750;
  }
  else
  {
    if (!v1751)
      goto LABEL_1142;
    v1520 = 5;
  }
  (*(void (**)(void))(*v1519 + 8 * v1520))();
LABEL_1142:
  v1521 = v1753;
  if (v1753 == v1752)
  {
    v1522 = 4;
    v1521 = v1752;
  }
  else
  {
    if (!v1753)
      goto LABEL_1147;
    v1522 = 5;
  }
  (*(void (**)(void))(*v1521 + 8 * v1522))();
LABEL_1147:
  if (!*(_BYTE *)(a1 + 768))
    goto LABEL_1203;
  v1523 = operator new(0xF0uLL);
  v1523[1] = 0;
  v1523[2] = 0;
  *v1523 = &off_1E42DEA08;
  v1523[5] = 0;
  v1523[6] = 0;
  v1523[4] = 0;
  *((_DWORD *)v1523 + 14) = 0;
  v1523[3] = &off_1E42B5DE8;
  *(_QWORD *)((char *)v1523 + 60) = 768;
  *((_DWORD *)v1523 + 17) = 0;
  v1523[9] = 0xFF000202020100;
  *((_WORD *)v1523 + 40) = 0;
  *((_BYTE *)v1523 + 82) = 3;
  *(_QWORD *)((char *)v1523 + 91) = 0;
  *(_QWORD *)((char *)v1523 + 83) = 0;
  *((_BYTE *)v1523 + 99) = 0;
  *(_QWORD *)((char *)v1523 + 156) = 0;
  *(_QWORD *)((char *)v1523 + 148) = 0;
  *((_WORD *)v1523 + 106) = 257;
  v1523[27] = 0;
  v1523[28] = 0;
  *((_BYTE *)v1523 + 232) = 0;
  *(_QWORD *)(a1 + 608) = v1523 + 3;
  v1524 = *(std::__shared_weak_count **)(a1 + 616);
  *(_QWORD *)(a1 + 616) = v1523;
  if (v1524)
  {
    v1525 = (unint64_t *)&v1524->__shared_owners_;
    do
      v1526 = __ldaxr(v1525);
    while (__stlxr(v1526 - 1, v1525));
    if (!v1526)
    {
      ((void (*)(std::__shared_weak_count *))v1524->__on_zero_shared)(v1524);
      std::__shared_weak_count::__release_weak(v1524);
    }
  }
  v1527 = *(_BYTE **)(a1 + 608);
  v1527[208] = 1;
  v1527[58] = 3;
  v1527[56] = 0;
  v1528 = (uint64_t *)operator new();
  v1748[0] = &off_1E42D1828;
  v1748[1] = a1;
  v1749 = v1748;
  v1746[0] = &off_1E42D6C50;
  v1747 = v1746;
  v1528[1] = 0;
  v1528[2] = 0;
  *v1528 = 0;
  {
    v1680 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1680, "GeoGL", 0xA3D02C1100000005);
  }
  v1530 = ggl::Allocator::instance(void)::alloc;
  v1528[4] = 0;
  v1528[3] = v1530;
  v1528[5] = 0;
  v1528[6] = 0;
  {
    v1681 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1681, "GeoGL", 0xA3D02C1100000005);
  }
  v1528[7] = ggl::Allocator::instance(void)::alloc;
  v1531 = (uint64_t)v1749;
  if (!v1749)
    goto LABEL_1158;
  if (v1749 != v1748)
  {
    v1531 = (*(uint64_t (**)(void))(*v1749 + 16))();
LABEL_1158:
    v1528[11] = v1531;
    goto LABEL_1160;
  }
  v1528[11] = (uint64_t)(v1528 + 8);
  (*(void (**)(_QWORD *, uint64_t *))(v1748[0] + 24))(v1748, v1528 + 8);
LABEL_1160:
  v1532 = (uint64_t)v1747;
  if (!v1747)
  {
LABEL_1163:
    v1528[15] = v1532;
    goto LABEL_1165;
  }
  if (v1747 != v1746)
  {
    v1532 = (*(uint64_t (**)(void))(*v1747 + 16))();
    goto LABEL_1163;
  }
  v1528[15] = (uint64_t)(v1528 + 12);
  (*(void (**)(_QWORD *, uint64_t *))(v1746[0] + 24))(v1746, v1528 + 12);
LABEL_1165:
  v1528[16] = 2000;
  v1533 = *v1528;
  if ((unint64_t)(v1528[2] - *v1528) > 0x31F)
    goto LABEL_1178;
  v1534 = v1528[1];
  v1535 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1528[3] + 16))(v1528[3], 800, 8);
  v1536 = v1534 - v1533;
  v1537 = v1535 + ((v1534 - v1533) & 0xFFFFFFFFFFFFFFF8);
  v1539 = *v1528;
  v1538 = v1528[1];
  v1540 = v1538 - *v1528;
  if (v1538 == *v1528)
  {
    v1542 = v1535 + ((v1534 - v1533) & 0xFFFFFFFFFFFFFFF8);
    v599 = v1727;
    goto LABEL_1176;
  }
  v1541 = v1540 - 8;
  v599 = v1727;
  if ((unint64_t)(v1540 - 8) >= 0x58)
  {
    v1542 = v1537;
    if (v1538 - (v1536 & 0xFFFFFFFFFFFFFFF8) - v1535 >= 0x20)
    {
      v1543 = v1536 >> 3;
      v1544 = (v1541 >> 3) + 1;
      v1545 = (_OWORD *)(v1535 + 8 * v1543 - 16);
      v1546 = (__int128 *)(v1538 - 16);
      v1547 = v1544 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1548 = *v1546;
        *(v1545 - 1) = *(v1546 - 1);
        *v1545 = v1548;
        v1545 -= 2;
        v1546 -= 2;
        v1547 -= 4;
      }
      while (v1547);
      v1542 = v1537 - 8 * (v1544 & 0x3FFFFFFFFFFFFFFCLL);
      v1538 -= 8 * (v1544 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1544 == (v1544 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1175;
    }
  }
  else
  {
    v1542 = v1537;
  }
  do
  {
    v1549 = *(_QWORD *)(v1538 - 8);
    v1538 -= 8;
    *(_QWORD *)(v1542 - 8) = v1549;
    v1542 -= 8;
  }
  while (v1538 != v1539);
LABEL_1175:
  v1538 = *v1528;
LABEL_1176:
  *v1528 = v1542;
  v1528[1] = v1537;
  v1550 = v1528[2];
  v1528[2] = v1535 + 800;
  if (v1538)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1528[3] + 40))(v1528[3], v1538, v1550 - v1538);
LABEL_1178:
  v1551 = v1528[4];
  if ((unint64_t)(v1528[6] - v1551) > 0x31F)
    goto LABEL_1191;
  v1552 = v1528[5];
  v1553 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1528[7] + 16))(v1528[7], 800, 8);
  v1554 = v1552 - v1551;
  v1555 = v1553 + ((v1552 - v1551) & 0xFFFFFFFFFFFFFFF8);
  v1557 = v1528[4];
  v1556 = v1528[5];
  v1558 = v1556 - v1557;
  if (v1556 == v1557)
  {
    v1560 = v1553 + ((v1552 - v1551) & 0xFFFFFFFFFFFFFFF8);
    v599 = v1727;
    goto LABEL_1189;
  }
  v1559 = v1558 - 8;
  v599 = v1727;
  if ((unint64_t)(v1558 - 8) >= 0x58)
  {
    v1560 = v1555;
    if (v1556 - (v1554 & 0xFFFFFFFFFFFFFFF8) - v1553 >= 0x20)
    {
      v1561 = v1554 >> 3;
      v1562 = (v1559 >> 3) + 1;
      v1563 = (_OWORD *)(v1553 + 8 * v1561 - 16);
      v1564 = (__int128 *)(v1556 - 16);
      v1565 = v1562 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v1566 = *v1564;
        *(v1563 - 1) = *(v1564 - 1);
        *v1563 = v1566;
        v1563 -= 2;
        v1564 -= 2;
        v1565 -= 4;
      }
      while (v1565);
      v1560 = v1555 - 8 * (v1562 & 0x3FFFFFFFFFFFFFFCLL);
      v1556 -= 8 * (v1562 & 0x3FFFFFFFFFFFFFFCLL);
      if (v1562 == (v1562 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_1188;
    }
  }
  else
  {
    v1560 = v1555;
  }
  do
  {
    v1567 = *(_QWORD *)(v1556 - 8);
    v1556 -= 8;
    *(_QWORD *)(v1560 - 8) = v1567;
    v1560 -= 8;
  }
  while (v1556 != v1557);
LABEL_1188:
  v1556 = v1528[4];
LABEL_1189:
  v1528[4] = v1560;
  v1528[5] = v1555;
  v1568 = v1528[6];
  v1528[6] = v1553 + 800;
  if (v1556)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1528[7] + 40))(v1528[7], v1556, v1568 - v1556);
LABEL_1191:
  v1569 = *v1713;
  *v1713 = (uint64_t)v1528;
  if (v1569)
  {
    v1570 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1569);
    MEMORY[0x1A1AF4E00](v1570, 0x10A0C40D234DDC7);
  }
  v1571 = v1747;
  if (v1747 == v1746)
  {
    v1572 = 4;
    v1571 = v1746;
  }
  else
  {
    if (!v1747)
      goto LABEL_1198;
    v1572 = 5;
  }
  (*(void (**)(void))(*v1571 + 8 * v1572))();
LABEL_1198:
  v1573 = v1749;
  if (v1749 == v1748)
  {
    v1574 = 4;
    v1573 = v1748;
  }
  else
  {
    if (!v1749)
      goto LABEL_1203;
    v1574 = 5;
  }
  (*(void (**)(void))(*v1573 + 8 * v1574))();
LABEL_1203:
  if (*(_BYTE *)(a1 + 769))
  {
    v1575 = (unint64_t *)operator new();
    v1745 = v1744;
    v1742[0] = &off_1E42D60C8;
    v1743 = v1742;
    v1744[0] = &off_1E42D1870;
    ggl::FragmentedPool<ggl::RenderItem>::FragmentedPool(v1575, (uint64_t)v1744, (uint64_t)v1742);
    v1576 = *v1712;
    *v1712 = (uint64_t)v1575;
    if (v1576)
    {
      v1577 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1576);
      MEMORY[0x1A1AF4E00](v1577, 0x10A0C40D234DDC7);
    }
    v1578 = v1743;
    if (v1743 == v1742)
    {
      v1579 = 4;
      v1578 = v1742;
    }
    else
    {
      if (!v1743)
        goto LABEL_1211;
      v1579 = 5;
    }
    (*(void (**)(void))(*v1578 + 8 * v1579))();
LABEL_1211:
    v1580 = v1745;
    if (v1745 == v1744)
    {
      v1581 = 4;
      v1580 = v1744;
    }
    else
    {
      if (!v1745)
      {
LABEL_1216:
        v1582 = operator new(0xF0uLL);
        v1582[1] = 0;
        v1582[2] = 0;
        *v1582 = &off_1E42DEA08;
        v1582[5] = 0;
        v1582[6] = 0;
        v1582[4] = 0;
        *((_DWORD *)v1582 + 14) = 0;
        v1582[3] = &off_1E42B5DE8;
        *((_DWORD *)v1582 + 17) = -1063256064;
        *(_QWORD *)((char *)v1582 + 60) = 65792;
        v1582[9] = 1;
        *((_WORD *)v1582 + 40) = 0;
        *((_BYTE *)v1582 + 82) = 3;
        *(_QWORD *)((char *)v1582 + 91) = 0;
        *(_QWORD *)((char *)v1582 + 83) = 0;
        *((_BYTE *)v1582 + 99) = 0;
        *(_QWORD *)((char *)v1582 + 148) = 0;
        *(_QWORD *)((char *)v1582 + 156) = 0;
        *((_WORD *)v1582 + 106) = 257;
        v1582[27] = 0;
        v1582[28] = 0;
        *((_BYTE *)v1582 + 232) = 0;
        *(_QWORD *)(a1 + 704) = v1582 + 3;
        v1583 = *(std::__shared_weak_count **)(a1 + 712);
        *(_QWORD *)(a1 + 712) = v1582;
        if (v1583)
        {
          v1584 = (unint64_t *)&v1583->__shared_owners_;
          do
            v1585 = __ldaxr(v1584);
          while (__stlxr(v1585 - 1, v1584));
          if (!v1585)
          {
            ((void (*)(std::__shared_weak_count *))v1583->__on_zero_shared)(v1583);
            std::__shared_weak_count::__release_weak(v1583);
          }
        }
        v1586 = *(_QWORD *)(a1 + 704);
        *(_BYTE *)(v1586 + 58) = 3;
        *(_BYTE *)(v1586 + 56) = 1;
        v1587 = (uint64_t *)operator new();
        v1740[0] = &off_1E42D18B8;
        v1740[1] = a1;
        v1741 = v1740;
        v1738[0] = &off_1E42D6500;
        v1739 = v1738;
        v1587[1] = 0;
        v1587[2] = 0;
        *v1587 = 0;
        {
          v1682 = operator new();
          ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1682, "GeoGL", 0xA3D02C1100000005);
        }
        v1589 = ggl::Allocator::instance(void)::alloc;
        v1587[4] = 0;
        v1587[3] = v1589;
        v1587[5] = 0;
        v1587[6] = 0;
        {
          v1683 = operator new();
          ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v1683, "GeoGL", 0xA3D02C1100000005);
        }
        v1587[7] = ggl::Allocator::instance(void)::alloc;
        v1590 = (uint64_t)v1741;
        if (v1741)
        {
          if (v1741 == v1740)
          {
            v1587[11] = (uint64_t)(v1587 + 8);
            (*(void (**)(_QWORD *, uint64_t *))(v1740[0] + 24))(v1740, v1587 + 8);
LABEL_1228:
            v1591 = (uint64_t)v1739;
            if (v1739)
            {
              if (v1739 == v1738)
              {
                v1587[15] = (uint64_t)(v1587 + 12);
                (*(void (**)(uint64_t, _QWORD *))(v1738[0] + 24))((uint64_t)v1738, v1587 + 12);
LABEL_1233:
                v1587[16] = 2000;
                v1592 = *v1587;
                if ((unint64_t)(v1587[2] - *v1587) > 0x31F)
                  goto LABEL_1246;
                v1593 = v1587[1];
                v1594 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1587[3] + 16))(v1587[3], 800, 8);
                v1595 = v1593 - v1592;
                v1596 = v1594 + ((v1593 - v1592) & 0xFFFFFFFFFFFFFFF8);
                v1598 = *v1587;
                v1597 = v1587[1];
                v1599 = v1597 - *v1587;
                if (v1597 == *v1587)
                {
                  v1601 = v1594 + ((v1593 - v1592) & 0xFFFFFFFFFFFFFFF8);
                  goto LABEL_1244;
                }
                v1600 = v1599 - 8;
                if ((unint64_t)(v1599 - 8) >= 0x58)
                {
                  v1601 = v1594 + ((v1593 - v1592) & 0xFFFFFFFFFFFFFFF8);
                  if (v1597 - (v1595 & 0xFFFFFFFFFFFFFFF8) - v1594 >= 0x20)
                  {
                    v1602 = v1595 >> 3;
                    v1603 = (v1600 >> 3) + 1;
                    v1604 = (_OWORD *)(v1594 + 8 * v1602 - 16);
                    v1605 = (__int128 *)(v1597 - 16);
                    v1606 = v1603 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v1607 = *v1605;
                      *(v1604 - 1) = *(v1605 - 1);
                      *v1604 = v1607;
                      v1604 -= 2;
                      v1605 -= 2;
                      v1606 -= 4;
                    }
                    while (v1606);
                    v1601 = v1596 - 8 * (v1603 & 0x3FFFFFFFFFFFFFFCLL);
                    v1597 -= 8 * (v1603 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v1603 == (v1603 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_1243;
                  }
                }
                else
                {
                  v1601 = v1594 + ((v1593 - v1592) & 0xFFFFFFFFFFFFFFF8);
                }
                do
                {
                  v1608 = *(_QWORD *)(v1597 - 8);
                  v1597 -= 8;
                  *(_QWORD *)(v1601 - 8) = v1608;
                  v1601 -= 8;
                }
                while (v1597 != v1598);
LABEL_1243:
                v1597 = *v1587;
LABEL_1244:
                *v1587 = v1601;
                v1587[1] = v1596;
                v1609 = v1587[2];
                v1587[2] = v1594 + 800;
                if (v1597)
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1587[3] + 40))(v1587[3], v1597, v1609 - v1597);
LABEL_1246:
                v1610 = v1587[4];
                if ((unint64_t)(v1587[6] - v1610) > 0x31F)
                  goto LABEL_1259;
                v1611 = v1587[5];
                v1612 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1587[7] + 16))(v1587[7], 800, 8);
                v1613 = v1611 - v1610;
                v1614 = v1612 + ((v1611 - v1610) & 0xFFFFFFFFFFFFFFF8);
                v1616 = v1587[4];
                v1615 = v1587[5];
                v1617 = v1615 - v1616;
                if (v1615 == v1616)
                {
                  v1619 = v1612 + ((v1611 - v1610) & 0xFFFFFFFFFFFFFFF8);
                  goto LABEL_1257;
                }
                v1618 = v1617 - 8;
                if ((unint64_t)(v1617 - 8) >= 0x58)
                {
                  v1619 = v1612 + ((v1611 - v1610) & 0xFFFFFFFFFFFFFFF8);
                  if (v1615 - (v1613 & 0xFFFFFFFFFFFFFFF8) - v1612 >= 0x20)
                  {
                    v1620 = v1613 >> 3;
                    v1621 = (v1618 >> 3) + 1;
                    v1622 = (_OWORD *)(v1612 + 8 * v1620 - 16);
                    v1623 = (__int128 *)(v1615 - 16);
                    v1624 = v1621 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v1625 = *v1623;
                      *(v1622 - 1) = *(v1623 - 1);
                      *v1622 = v1625;
                      v1622 -= 2;
                      v1623 -= 2;
                      v1624 -= 4;
                    }
                    while (v1624);
                    v1619 = v1614 - 8 * (v1621 & 0x3FFFFFFFFFFFFFFCLL);
                    v1615 -= 8 * (v1621 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v1621 == (v1621 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_1256;
                  }
                }
                else
                {
                  v1619 = v1612 + ((v1611 - v1610) & 0xFFFFFFFFFFFFFFF8);
                }
                do
                {
                  v1626 = *(_QWORD *)(v1615 - 8);
                  v1615 -= 8;
                  *(_QWORD *)(v1619 - 8) = v1626;
                  v1619 -= 8;
                }
                while (v1615 != v1616);
LABEL_1256:
                v1615 = v1587[4];
LABEL_1257:
                v1587[4] = v1619;
                v1587[5] = v1614;
                v1627 = v1587[6];
                v1587[6] = v1612 + 800;
                if (v1615)
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1587[7] + 40))(v1587[7], v1615, v1627 - v1615);
LABEL_1259:
                v1628 = *v1711;
                *v1711 = (uint64_t)v1587;
                if (v1628)
                {
                  v1629 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v1628);
                  MEMORY[0x1A1AF4E00](v1629, 0x10A0C40D234DDC7);
                }
                v1630 = v1739;
                if (v1739 == v1738)
                {
                  v1631 = 4;
                  v1630 = v1738;
                }
                else
                {
                  if (!v1739)
                    goto LABEL_1266;
                  v1631 = 5;
                }
                (*(void (**)(void))(*v1630 + 8 * v1631))();
LABEL_1266:
                v1632 = v1741;
                if (v1741 == v1740)
                {
                  v1633 = 4;
                  v1632 = v1740;
                }
                else
                {
                  if (!v1741)
                  {
LABEL_1271:
                    *(_QWORD *)(a1 + 760) = 0;
                    goto LABEL_1272;
                  }
                  v1633 = 5;
                }
                (*(void (**)(void))(*v1632 + 8 * v1633))();
                goto LABEL_1271;
              }
              v1591 = (*(uint64_t (**)(void))(*v1739 + 16))();
            }
            v1587[15] = v1591;
            goto LABEL_1233;
          }
          v1590 = (*(uint64_t (**)(void))(*v1741 + 16))();
        }
        v1587[11] = v1590;
        goto LABEL_1228;
      }
      v1581 = 5;
    }
    (*(void (**)(void))(*v1580 + 8 * v1581))();
    goto LABEL_1216;
  }
LABEL_1272:

  return a1;
}

void sub_19F35D48C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ggl::Batcher *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t *a13, uint64_t a14, uint64_t *a15, uint64_t *a16, uint64_t *a17, uint64_t a18, uint64_t a19, uint64_t *a20,uint64_t *a21,uint64_t *a22,uint64_t *a23,uint64_t a24,uint64_t *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t *a31,uint64_t *a32,uint64_t *a33,uint64_t *a34,uint64_t *a35,uint64_t *a36,void *a37,void *a38)
{
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  unint64_t *v49;
  uint64_t v50;

  STACK[0x300] = a1;
  v43 = (_QWORD *)v40[11];
  if (v43 == v41)
  {
    v44 = 4;
  }
  else
  {
    if (!v43)
    {
      v45 = *v39;
      if (*v39)
        goto LABEL_16;
      goto LABEL_5;
    }
    v44 = 5;
    v41 = (_QWORD *)v40[11];
  }
  (*(void (**)(_QWORD *))(*v41 + 8 * v44))(v41);
  v45 = *v39;
  if (*v39)
  {
LABEL_16:
    v40[5] = v45;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v40[7] + 40))(v40[7], v45, v40[6] - v45);
    v46 = *v40;
    if (!*v40)
    {
LABEL_7:
      v47 = *(unint64_t **)(v42 + 408);
      if (v47 == &STACK[0x518])
      {
        v48 = 4;
        v47 = &STACK[0x518];
      }
      else
      {
        if (!v47)
          goto LABEL_12;
        v48 = 5;
      }
      (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_12:
      v49 = *(unint64_t **)(v42 + 440);
      if (v49 == &STACK[0x538])
      {
        v50 = 4;
        v49 = &STACK[0x538];
      }
      else
      {
        if (!v49)
          goto LABEL_21;
        v50 = 5;
      }
      (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_21:
      MEMORY[0x1A1AF4E00](v40, 0x10A0C40D234DDC7);

      md::RenderItemPool::~RenderItemPool((md::RenderItemPool *)(v38 + 864));
      STACK[0x2F0] = v38 + 72;
      STACK[0x2E0] = v38 + 88;
      STACK[0x2D0] = v38 + 104;
      STACK[0x2C0] = v38 + 120;
      STACK[0x2B0] = v38 + 136;
      STACK[0x2A0] = v38 + 152;
      STACK[0x290] = v38 + 168;
      STACK[0x280] = v38 + 184;
      STACK[0x270] = v38 + 200;
      STACK[0x260] = v38 + 216;
      STACK[0x250] = v38 + 232;
      STACK[0x240] = v38 + 248;
      STACK[0x230] = v38 + 264;
      STACK[0x220] = v38 + 280;
      STACK[0x210] = v38 + 296;
      STACK[0x200] = v38 + 312;
      ggl::Batcher::~Batcher(a9);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a17);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a25);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a15);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a19);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a14);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a26);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a27);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a28);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a29);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a30);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a18);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a13);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a20);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a21);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a22);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)(v38 + 568));
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a23);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100]((uint64_t *)(v38 + 552));
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a10);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a11);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a31);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a12);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a32);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a33);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a34);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a35);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a36);
      std::unique_ptr<ggl::FragmentedPool<ggl::RenderItem>>::~unique_ptr[abi:nn180100](a16);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v38 + 456);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v38 + 440);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v38 + 424);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v38 + 408);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v38 + 392);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v38 + 376);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v38 + 360);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v38 + 344);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v38 + 328);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x200]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x210]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x220]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x230]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x240]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x250]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x260]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x270]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x280]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x290]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x2A0]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x2B0]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x2C0]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x2D0]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x2E0]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](STACK[0x2F0]);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v38 + 56);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v38 + 40);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v38 + 24);

      _Unwind_Resume((_Unwind_Exception *)STACK[0x300]);
    }
LABEL_6:
    v40[1] = v46;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v40[3] + 40))(v40[3], v46, v40[2] - v46);
    goto LABEL_7;
  }
LABEL_5:
  v46 = *v40;
  if (!*v40)
    goto LABEL_7;
  goto LABEL_6;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_26SpecularBuildingPointyRoof21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7238;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_25FoggedSpecularBuildingTop27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D71A8;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_23BuildingPointyRoofDepth21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D7040;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_21FoggedDiffuseBuilding21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6DB8;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_19SpecularBuildingTop27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6D70;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_19BuildingFacadeDepth21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6CE0;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_18BuildingFlatStroke31BuildingFlatStrokePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6C50;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_16BuildingTopDepth27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6590;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_15PrefilteredLine28PrefilteredLinePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6500;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_15DiffuseBuilding21BuildingPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6470;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_14BuildingShadow17MeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D6308;
}

void _ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_12BuildingFlat27CompressedMeshPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEPNS0_6__baseISB_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42D61A0;
}

uint64_t std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_17,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_17>,ggl::PrefilteredLine::PrefilteredLinePipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D18B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_15,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_15>,ggl::BuildingFlatStroke::BuildingFlatStrokePipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D1828;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_13,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_13>,ggl::BuildingShadow::MeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D1798;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_8,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_8>,ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D1630;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_7,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_7>,ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D15E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_6,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_6>,ggl::SpecularBuildingTop::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D15A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_5,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_5>,ggl::FoggedDiffuseBuilding::BuildingPipelineSetup * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D1558;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_4,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_4>,ggl::DiffuseBuilding::BuildingPipelineSetup * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D1510;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_3,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_3>,ggl::BuildingPointyRoofDepth::BuildingPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D14C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_2,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_2>,ggl::BuildingTopDepth::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D1480;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_1,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_1>,ggl::BuildingFacadeDepth::BuildingPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D1438;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_0,std::allocator<md::BuildingRenderResources::BuildingRenderResources(VKSharedResources *,ggl::RenderTargetFormat const&,std::shared_ptr<ggl::ConstantDataTyped<ggl::Building::Fade>> &)::$_0>,ggl::BuildingFlat::CompressedMeshPipelineSetup * ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D13F0;
  a2[1] = v2;
  return result;
}

void ggl::GridShader::typedReflection(ggl::GridShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::GridShader::typedReflection(void)::ref = (uint64_t)"GridShader";
      ggl::gridShaderVertexFunctionDescriptor(v2);
      qword_1ECE38A98 = (uint64_t)&ggl::gridShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<17ul>("GridShaderVertex");
      dword_1ECE38AA0 = (int)v3;
      ggl::gridShaderFragmentFunctionDescriptor(v3);
      qword_1ECE38AA8 = (uint64_t)&ggl::gridShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE38AB0 = ggl::crc32::compute<19ul>("GridShaderFragment");
      qword_1ECE38AB8 = (uint64_t)ggl::gridShaderShaderConstants(void)::ref;
      unk_1ECE38AC0 = 4;
      qword_1ECE38AC8 = (uint64_t)&ggl::gridShaderShaderTextures(void)::ref;
      unk_1ECE38AD0 = 0;
      qword_1ECE38AD8 = (uint64_t)&ggl::gridShaderShaderSamplers(void)::ref;
      unk_1ECE38AE0 = 0;
    }
  }
}

void ggl::gridShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::gridShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("GridShaderFragment");
      *(_DWORD *)algn_1ECE3CB0C = 1;
      qword_1ECE3CB10 = (uint64_t)"GridShader";
      unk_1ECE3CB18 = 0;
      qword_1ECE3CB20 = 0;
      unk_1ECE3CB28 = &ggl::gridShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3CB30 = 2;
      unk_1ECE3CB38 = &ggl::gridShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3CB40 = 0;
      unk_1ECE3CB48 = &ggl::gridShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3CB50 = 0;
      unk_1ECE3CB58 = &ggl::gridShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3CB68 = 0;
      unk_1ECE3CB70 = 0;
      qword_1ECE3CB60 = 0;
    }
  }
}

void ggl::gridShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::gridShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<17ul>("GridShaderVertex");
      *(_DWORD *)algn_1ECE3C444 = 0;
      qword_1ECE3C448 = (uint64_t)"GridShader";
      unk_1ECE3C450 = ggl::gridShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3C458 = 1;
      unk_1ECE3C460 = &ggl::gridShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3C468 = 4;
      unk_1ECE3C470 = &ggl::gridShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3C478 = 0;
      unk_1ECE3C480 = &ggl::gridShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3C488 = 0;
      unk_1ECE3C490 = &ggl::gridShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3C4A0 = 0;
      unk_1ECE3C4A8 = 0;
      qword_1ECE3C498 = 0;
    }
  }
}

void ggl::Grid::GridPipelineSetup::~GridPipelineSetup(ggl::Grid::GridPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

os_log_t ___ZL30GEOGetVectorKitTextureAtlasLogv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.VectorKit", "TextureAtlas");
  GEOGetVectorKitTextureAtlasLog(void)::log = (uint64_t)result;
  return result;
}

void geo::codec::Asset::~Asset(geo::codec::Asset *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  void *v31;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 31));
  v2 = *((_QWORD *)this + 26);
  if (v2)
  {
    v3 = *((_QWORD *)this + 27);
    v4 = *((_QWORD *)this + 26);
    if (v3 != v2)
    {
      do
      {
        v5 = *(_QWORD *)(v3 - 56);
        if (v5)
        {
          *(_QWORD *)(v3 - 48) = v5;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 - 32) + 40))(*(_QWORD *)(v3 - 32), v5, *(_QWORD *)(v3 - 40) - v5);
        }
        v6 = *(_QWORD *)(v3 - 88);
        if (v6)
        {
          *(_QWORD *)(v3 - 80) = v6;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 - 64) + 40))(*(_QWORD *)(v3 - 64), v6, *(_QWORD *)(v3 - 72) - v6);
        }
        v7 = *(_QWORD *)(v3 - 120);
        if (v7)
        {
          *(_QWORD *)(v3 - 112) = v7;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 - 96) + 40))(*(_QWORD *)(v3 - 96), v7, *(_QWORD *)(v3 - 104) - v7);
        }
        v8 = *(_QWORD *)(v3 - 152);
        if (v8)
        {
          *(_QWORD *)(v3 - 144) = v8;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 - 128) + 40))(*(_QWORD *)(v3 - 128), v8, *(_QWORD *)(v3 - 136) - v8);
        }
        v3 -= 152;
      }
      while (v3 != v2);
      v4 = *((_QWORD *)this + 26);
    }
    *((_QWORD *)this + 27) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 29) + 40))(*((_QWORD *)this + 29), v4, *((_QWORD *)this + 28) - v4);
  }
  v9 = (uint64_t *)*((_QWORD *)this + 22);
  if (v9)
  {
    do
    {
      v14 = (uint64_t *)*v9;
      v15 = v9[3];
      if (v15)
      {
        v9[4] = v15;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9[6] + 40))(v9[6], v15, v9[5] - v15);
      }
      (*(void (**)(_QWORD, uint64_t *, uint64_t))(**((_QWORD **)this + 23) + 40))(*((_QWORD *)this + 23), v9, 56);
      v9 = v14;
    }
    while (v14);
  }
  v10 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v10)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 21) + 40))(*((_QWORD *)this + 21), v10, 8 * *((_QWORD *)this + 20));
  v11 = *((_QWORD *)this + 15);
  if (v11)
  {
    v12 = *((_QWORD *)this + 16);
    v13 = *((_QWORD *)this + 15);
    if (v12 != v11)
    {
      do
      {
        v16 = *(std::__shared_weak_count **)(v12 - 8);
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v16->__on_zero_shared)(v16, v13);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v12 -= 16;
      }
      while (v12 != v11);
      v13 = *((_QWORD *)this + 15);
    }
    *((_QWORD *)this + 16) = v11;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 18) + 40))(*((_QWORD *)this + 18), v13, *((_QWORD *)this + 17) - v13);
  }
  v19 = *((_QWORD *)this + 11);
  if (v19)
  {
    *((_QWORD *)this + 12) = v19;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 14) + 40))(*((_QWORD *)this + 14), v19, *((_QWORD *)this + 13) - v19);
  }
  v20 = *((_QWORD *)this + 7);
  if (v20)
  {
    *((_QWORD *)this + 8) = v20;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 10) + 40))(*((_QWORD *)this + 10), v20, *((_QWORD *)this + 9) - v20);
  }
  v21 = *((_QWORD *)this + 3);
  if (v21)
  {
    v22 = *((_QWORD *)this + 4);
    v23 = *((_QWORD *)this + 3);
    if (v22 != v21)
    {
      do
      {
        v24 = v22 - 552;
        geo::codec::MaterialSheet::~MaterialSheet((geo::codec::MaterialSheet *)(v22 - 544));
        v22 = v24;
      }
      while (v24 != v21);
      v23 = *((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v21;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), v23, *((_QWORD *)this + 5) - v23);
  }
  v25 = *(_QWORD **)this;
  if (*(_QWORD *)this)
  {
    v26 = (_QWORD *)*((_QWORD *)this + 1);
    v27 = *(_QWORD **)this;
    if (v26 != v25)
    {
      do
      {
        v28 = (_QWORD *)*(v26 - 3);
        if (v28)
        {
          do
          {
            v29 = (_QWORD *)*v28;
            operator delete(v28);
            v28 = v29;
          }
          while (v29);
        }
        v31 = (void *)*(v26 - 5);
        v26 -= 5;
        v30 = v31;
        *v26 = 0;
        if (v31)
          operator delete(v30);
      }
      while (v26 != v25);
      v27 = *(_QWORD **)this;
    }
    *((_QWORD *)this + 1) = v25;
    operator delete(v27);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;

  std::__tree<std::__value_type<gm::Range<unsigned short>,unsigned char>,std::__map_value_compare<gm::Range<unsigned short>,std::__value_type<gm::Range<unsigned short>,unsigned char>,geo::range_map<unsigned short,unsigned char,std::less<unsigned short>,std::allocator<std::pair<gm::Range<unsigned short> const,unsigned char>>>::RangeCompare,true>,std::allocator<std::__value_type<gm::Range<unsigned short>,unsigned char>>>::destroy((uint64_t)this + 240, *((_QWORD **)this + 31));
  v2 = *((_QWORD *)this + 26);
  if (v2)
  {
    v3 = *((_QWORD *)this + 27);
    v4 = *((_QWORD *)this + 26);
    if (v3 != v2)
    {
      do
        geo::codec::Mesh::~Mesh((geo::codec::Mesh *)(v3 - 152));
      while (v3 != v2);
      v4 = *((_QWORD *)this + 26);
    }
    *((_QWORD *)this + 27) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 29) + 40))(*((_QWORD *)this + 29), v4, *((_QWORD *)this + 28) - v4);
  }
  std::__hash_table<std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,geo::StdAllocator<std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,geo::codec::Allocator>>::~__hash_table((uint64_t *)this + 19);
  v5 = *((_QWORD *)this + 15);
  if (v5)
  {
    v6 = *((_QWORD *)this + 16);
    v7 = *((_QWORD *)this + 15);
    if (v6 != v5)
    {
      do
      {
        v8 = *(std::__shared_weak_count **)(v6 - 8);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v7);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v6 -= 16;
      }
      while (v6 != v5);
      v7 = *((_QWORD *)this + 15);
    }
    *((_QWORD *)this + 16) = v5;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 18) + 40))(*((_QWORD *)this + 18), v7, *((_QWORD *)this + 17) - v7);
  }
  v11 = *((_QWORD *)this + 11);
  if (v11)
  {
    *((_QWORD *)this + 12) = v11;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 14) + 40))(*((_QWORD *)this + 14), v11, *((_QWORD *)this + 13) - v11);
  }
  v12 = *((_QWORD *)this + 7);
  if (v12)
  {
    *((_QWORD *)this + 8) = v12;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 10) + 40))(*((_QWORD *)this + 10), v12, *((_QWORD *)this + 9) - v12);
  }
  v13 = *((_QWORD *)this + 3);
  if (v13)
  {
    v14 = *((_QWORD *)this + 4);
    v15 = *((_QWORD *)this + 3);
    if (v14 != v13)
    {
      do
      {
        v16 = v14 - 552;
        geo::codec::MaterialSheet::~MaterialSheet((geo::codec::MaterialSheet *)(v14 - 544));
        v14 = v16;
      }
      while (v16 != v13);
      v15 = *((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v13;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), v15, *((_QWORD *)this + 5) - v15);
  }
  v17 = *(_QWORD **)this;
  if (*(_QWORD *)this)
  {
    v18 = (_QWORD *)*((_QWORD *)this + 1);
    v19 = *(_QWORD **)this;
    if (v18 != v17)
    {
      do
      {
        v20 = (_QWORD *)*(v18 - 3);
        if (v20)
        {
          do
          {
            v21 = (_QWORD *)*v20;
            operator delete(v20);
            v20 = v21;
          }
          while (v21);
        }
        v23 = (void *)*(v18 - 5);
        v18 -= 5;
        v22 = v23;
        *v18 = 0;
        if (v23)
          operator delete(v22);
      }
      while (v18 != v17);
      v19 = *(_QWORD **)this;
    }
    *((_QWORD *)this + 1) = v17;
    operator delete(v19);
  }
}

void std::__tree<std::__value_type<gm::Range<unsigned short>,unsigned char>,std::__map_value_compare<gm::Range<unsigned short>,std::__value_type<gm::Range<unsigned short>,unsigned char>,geo::range_map<unsigned short,unsigned char,std::less<unsigned short>,std::allocator<std::pair<gm::Range<unsigned short> const,unsigned char>>>::RangeCompare,true>,std::allocator<std::__value_type<gm::Range<unsigned short>,unsigned char>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<gm::Range<unsigned short>,unsigned char>,std::__map_value_compare<gm::Range<unsigned short>,std::__value_type<gm::Range<unsigned short>,unsigned char>,geo::range_map<unsigned short,unsigned char,std::less<unsigned short>,std::allocator<std::pair<gm::Range<unsigned short> const,unsigned char>>>::RangeCompare,true>,std::allocator<std::__value_type<gm::Range<unsigned short>,unsigned char>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<gm::Range<unsigned short>,unsigned char>,std::__map_value_compare<gm::Range<unsigned short>,std::__value_type<gm::Range<unsigned short>,unsigned char>,geo::range_map<unsigned short,unsigned char,std::less<unsigned short>,std::allocator<std::pair<gm::Range<unsigned short> const,unsigned char>>>::RangeCompare,true>,std::allocator<std::__value_type<gm::Range<unsigned short>,unsigned char>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,geo::StdAllocator<std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,geo::codec::Allocator>>::~__hash_table(uint64_t *a1)
{
  uint64_t *i;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  for (i = (uint64_t *)a1[3]; i; i = v3)
  {
    v3 = (uint64_t *)*i;
    v4 = i[3];
    if (v4)
    {
      i[4] = v4;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)i[6] + 40))(i[6], v4, i[5] - v4);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1[4] + 40))(a1[4], i, 56);
  }
  v5 = *a1;
  *a1 = 0;
  if (v5)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[2] + 40))(a1[2], v5, 8 * a1[1]);
  return a1;
}

BOOL md::RoadLayerDataSource::updateRequest(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  _BOOL8 result;

  result = md::TrafficLayerDataSource::updateRequest(a1, a2, a3, a4);
  *(_BYTE *)(a1 + 800) = result;
  return result;
}

BOOL md::TrafficLayerDataSource::updateRequest(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *v4;
  _BOOL8 v5;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _WORD *v19;
  _WORD *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _WORD *v29;
  _WORD *v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  _WORD *v34;
  _WORD *v35;
  _WORD *v36;
  _WORD *v37;
  _WORD *v38;
  uint64_t v39;
  int32x2_t *v40;
  __int32 v41;
  int v42;
  int v43;
  int32x2_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  int v54;
  unsigned __int8 *v55;
  uint64_t *v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  unsigned __int8 *v62;
  unint64_t v63;
  unint64_t v64;
  unsigned int v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unsigned int v72;
  unsigned __int8 *v73;
  char v74;
  int v75;
  int v76;
  int v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char v86[32];
  unint64_t v87;
  uint64_t v88;
  unsigned __int8 v89[4];
  int32x2_t v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  int v96;
  char v97[8];

  if (!*(_BYTE *)(a1 + 752))
    return 0;
  v4 = a2;
  if (*(unsigned __int8 *)(*(_QWORD *)(*a2 + 16) + 8) < 7u)
    return 0;
  v9 = (_WORD *)*a4;
  v10 = (_WORD *)a4[1];
  if ((_WORD *)*a4 != v10)
  {
    while (*v9 != 9)
    {
      v9 += 24;
      if (v9 == v10)
        goto LABEL_19;
    }
  }
  if (v9 == v10 || *((_QWORD *)v9 + 4) != 1)
  {
LABEL_19:
    v12 = 0;
    goto LABEL_20;
  }
  v11 = *((_QWORD *)v9 + 3);
  v12 = *(_QWORD *)(v11 + 112);
  v13 = *(std::__shared_weak_count **)(v11 + 120);
  if (!v13)
  {
LABEL_20:
    v94 = v12;
    v95 = 0;
    goto LABEL_21;
  }
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  v94 = v12;
  v95 = v13;
  v16 = (unint64_t *)&v13->__shared_owners_;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  do
    v18 = __ldaxr(v16);
  while (__stlxr(v18 - 1, v16));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_21:
  v19 = (_WORD *)*a4;
  v20 = (_WORD *)a4[1];
  if ((_WORD *)*a4 != v20)
  {
    while (*v19 != 17)
    {
      v19 += 24;
      if (v19 == v20)
        goto LABEL_35;
    }
  }
  if (v19 == v20 || *((_QWORD *)v19 + 4) != 1)
  {
LABEL_35:
    v22 = 0;
    goto LABEL_36;
  }
  v21 = *((_QWORD *)v19 + 3);
  v22 = *(_QWORD *)(v21 + 112);
  v23 = *(std::__shared_weak_count **)(v21 + 120);
  if (!v23)
  {
LABEL_36:
    v92 = v22;
    v93 = 0;
    goto LABEL_37;
  }
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  v92 = v22;
  v93 = v23;
  v26 = (unint64_t *)&v23->__shared_owners_;
  do
    v27 = __ldxr(v26);
  while (__stxr(v27 + 1, v26));
  do
    v28 = __ldaxr(v26);
  while (__stlxr(v28 - 1, v26));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_37:
  v29 = (_WORD *)*a4;
  v30 = (_WORD *)a4[1];
  if ((_WORD *)*a4 != v30)
  {
    while (*v29 != 16)
    {
      v29 += 24;
      if (v29 == v30)
        goto LABEL_43;
    }
  }
  if (v29 == v30 || !v92)
  {
LABEL_43:
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
    v32 = *v4;
    if (v31 && !*(_BYTE *)(v32 + 210))
    {
      v33 = (_QWORD *)(v32 + 144);
      v75 = 1;
    }
    else
    {
      v75 = 0;
      v33 = (_QWORD *)(v32 + 120);
    }
    v34 = (_WORD *)*v33;
    v35 = (_WORD *)v33[1];
    if (v34 == v35)
      goto LABEL_67;
    v36 = v34;
    while (*v36 != 17)
    {
      v36 += 24;
      if (v36 == v35)
        goto LABEL_67;
    }
    if (v36 == v35)
      goto LABEL_67;
    v37 = v34;
    while (*v37 != 17)
    {
      v37 += 24;
      if (v37 == v35)
      {
        v37 = v35;
        break;
      }
    }
    if (!*((_QWORD *)v37 + 4))
      goto LABEL_67;
    v38 = v34;
    while (*v38 != 16)
    {
      v38 += 24;
      if (v38 == v35)
        goto LABEL_67;
    }
    if (v38 == v35)
      goto LABEL_67;
    while (*v34 != 16)
    {
      v34 += 24;
      if (v34 == v35)
      {
        v34 = v35;
        break;
      }
    }
    if (!*((_QWORD *)v34 + 4))
    {
LABEL_67:
      v39 = *(_QWORD *)(a1 + 24);
      if (v39)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v39 + 24))(&v91, v39, 16);
        v5 = (_BYTE)v91 != 0;
        if ((_BYTE)v91)
        {
          v72 = HIDWORD(v91);
          v40 = *(int32x2_t **)(v94 + 8);
          v41 = v40[1].i32[0];
          v42 = v41;
          v89[0] = v40[1].i32[1];
          v43 = v89[0];
          v89[1] = v41;
          v44 = *v40;
          v77 = HIDWORD(*(unint64_t *)v40);
          v90 = vrev64_s32(*v40);
          v45 = *v4;
          v46 = *(_QWORD *)(*v4 + 112);
          v74 = *(_BYTE *)*v4;
          LOBYTE(v81) = v74;
          WORD1(v81) = 17;
          HIDWORD(v81) = 2147483646;
          v82 = v86;
          v83 = v86;
          v84 = v86;
          v85 = 32;
          v87 = 0;
          LODWORD(v78) = v44.i32[0];
          geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v82, v86, (char *)&v78, (char *)&v78 + 4);
          LODWORD(v78) = v77;
          geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v82, v83, (char *)&v78, (char *)&v78 + 4);
          LODWORD(v78) = v42;
          geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v82, v83, (char *)&v78, (char *)&v78 + 4);
          LODWORD(v78) = v43;
          geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v82, v83, (char *)&v78, (char *)&v78 + 4);
          v47 = (unsigned __int8 *)v82;
          v48 = v83 - (_BYTE *)v82;
          if (v83 == v82)
          {
            v49 = 0;
          }
          else
          {
            v49 = 0;
            if (v48 <= 1)
              v48 = 1;
            do
            {
              v50 = *v47++;
              v49 ^= (v49 << 6) - 0x61C8864680B583EBLL + (v49 >> 2) + v50;
              --v48;
            }
            while (v48);
          }
          v87 = v49;
          v88 = v46;
          gdc::LayerDataRequest::request(v45, (uint64_t)&v81, v75);
          if (v82 != v84)
            free(v82);
          (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(&v81, *(_QWORD *)(a1 + 24), 17);
          v51 = HIDWORD(v81);
          v78 = 0;
          v79 = 0;
          v80 = 0;
          (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(&v81, *(_QWORD *)(a1 + 24), 16);
          v52 = 0;
          if ((_DWORD)v51)
          {
            v53 = HIDWORD(v81);
            if (HIDWORD(v81))
            {
              if (v51 >= HIDWORD(v81))
              {
                v52 = 0;
              }
              else
              {
                v52 = 0;
                do
                {
                  ++v52;
                  v51 *= 2;
                }
                while (v51 < HIDWORD(v81));
              }
              while (v51 > v53)
              {
                --v52;
                v53 *= 2;
              }
            }
          }
          if (v52 + v42 >= v72)
            v54 = -v52;
          else
            v54 = v42 - v72;
          md::TileAdjustmentHelpers::enumerateResourceTilesWithZAdjustment(v54, 16, *(_QWORD *)(a1 + 24), v89, 0, (uint64_t *)&v78);
          v55 = v78;
          v73 = v79;
          if (v78 != v79)
          {
            do
            {
              v56 = v4;
              v57 = (_BYTE *)*v4;
              v58 = *(_QWORD *)(*v4 + 112);
              v59 = *(_QWORD *)(v55 + 4);
              v76 = v59;
              v60 = v55[1];
              v61 = *v55;
              LOBYTE(v81) = v74;
              WORD1(v81) = 16;
              HIDWORD(v81) = 2147483646;
              v82 = v86;
              v83 = v86;
              v84 = v86;
              v85 = 32;
              v87 = 0;
              v96 = HIDWORD(v59);
              geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v82, v86, (char *)&v96, v97);
              v96 = v76;
              geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v82, v83, (char *)&v96, v97);
              v96 = v60;
              geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v82, v83, (char *)&v96, v97);
              v96 = v61;
              geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v82, v83, (char *)&v96, v97);
              v62 = (unsigned __int8 *)v82;
              v63 = v83 - (_BYTE *)v82;
              if (v83 == v82)
              {
                v64 = 0;
              }
              else
              {
                v64 = 0;
                if (v63 <= 1)
                  v63 = 1;
                do
                {
                  v65 = *v62++;
                  v64 ^= (v64 << 6) - 0x61C8864680B583EBLL + (v64 >> 2) + v65;
                  --v63;
                }
                while (v63);
              }
              v87 = v64;
              v88 = v58;
              gdc::LayerDataRequest::request((uint64_t)v57, (uint64_t)&v81, v75);
              v4 = v56;
              if (v82 != v84)
                free(v82);
              v55 += 24;
            }
            while (v55 != v73);
            v55 = v78;
          }
          v5 = 1;
          if (v55)
          {
            v79 = v55;
            operator delete(v55);
          }
        }
        goto LABEL_104;
      }
    }
  }
  v5 = 0;
LABEL_104:
  v66 = v93;
  if (v93)
  {
    v67 = (unint64_t *)&v93->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = v95;
  if (v95)
  {
    v70 = (unint64_t *)&v95->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  return v5;
}

void sub_19F35FD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v16 - 128);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v16 - 112);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_40c70_ZTSNSt3__110shared_ptrIN3gss17StylesheetManagerINS1_10PropertyIDEEEEE56c69_ZTSNSt3__110shared_ptrIN3gss16ClientStyleStateINS1_10PropertyIDEEEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[8];
  result[7] = a2[7];
  result[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)23>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x9E43BC98CDFB9D64;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x9E43BC98CDFB9D64;
      if (*(_QWORD *)&v3 <= 0x9E43BC98CDFB9D64)
        v5 = 0x9E43BC98CDFB9D64 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x9E43BC98CDFB9D64;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x9E43BC98CDFB9D64)
            {
              if (v7[2] == 0x9E43BC98CDFB9D64)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x9E43BC98CDFB9D64)
          {
            if (v7[2] == 0x9E43BC98CDFB9D64)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::overlayComponents::FoundationMeshType<gss::MeshType::TerrainAndWaterSurface>]";
  *(_QWORD *)(v11 + 24) = 80;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3858;
  *(_QWORD *)(v11 + 8) = 0x9E43BC98CDFB9D64;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x9E43BC98CDFB9D64, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x9E43BC98CDFB9D64;
  v15[1] = "md::overlayComponents::FoundationMeshType<gss::MeshType::TerrainAndWaterSurface>]";
  v15[2] = 80;
  gdc::Registry::_registerStorageDataSignals(a1, 0x9E43BC98CDFB9D64, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F360028(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::overlayComponents::FoundationMeshType<(gss::MeshType)0>>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xD0623BC7489D09BBLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xD0623BC7489D09BBLL;
      if (*(_QWORD *)&v3 <= 0xD0623BC7489D09BBLL)
        v5 = 0xD0623BC7489D09BBLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xD0623BC7489D09BBLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xD0623BC7489D09BBLL)
            {
              if (v7[2] == 0xD0623BC7489D09BBLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xD0623BC7489D09BBLL)
          {
            if (v7[2] == 0xD0623BC7489D09BBLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::overlayComponents::FoundationMeshType<gss::MeshType::RoadSurface>]";
  *(_QWORD *)(v11 + 24) = 69;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B37C8;
  *(_QWORD *)(v11 + 8) = 0xD0623BC7489D09BBLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xD0623BC7489D09BBLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xD0623BC7489D09BBLL;
  v15[1] = "md::overlayComponents::FoundationMeshType<gss::MeshType::RoadSurface>]";
  v15[2] = 69;
  gdc::Registry::_registerStorageDataSignals(a1, 0xD0623BC7489D09BBLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F360250(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_19F36037C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN3gss10StyleSheetINS_15ScenePropertyIDEE13dispatch_loadEbNSt3__18functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  std::__throw_bad_function_call[abi:nn180100]();
  return ___ZN3gss10StyleSheetINS_10PropertyIDEE13dispatch_loadEbNSt3__18functionIFvvEEE_block_invoke(v3);
}

uint64_t ___ZN3gss10StyleSheetINS_10PropertyIDEE13dispatch_loadEbNSt3__18functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  std::__throw_bad_function_call[abi:nn180100]();
  return std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>>>::__emplace_unique_key_args<md::TileSelectionTileSetType,std::piecewise_construct_t const&,std::tuple<md::TileSelectionTileSetType const&>,std::tuple<>>();
}

_QWORD *std::__hash_table<std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>,std::__unordered_map_hasher<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,true>,std::__unordered_map_equal<md::TileSelectionTileSetType,std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>,std::equal_to<md::TileSelectionTileSetType>,std::hash<md::TileSelectionTileSetType>,true>,std::allocator<std::__hash_value_type<md::TileSelectionTileSetType,md::TileSelectionTypeUpdateRate>>>::__emplace_unique_key_args<md::TileSelectionTileSetType,std::piecewise_construct_t const&,std::tuple<md::TileSelectionTileSetType const&>,std::tuple<>>(uint64_t a1, unsigned __int16 a2, _WORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((unsigned __int16 *)v10 + 8) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_WORD *)v10 + 8) = *a3;
  *((_BYTE *)v10 + 18) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_34;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_34:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19F360744(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19F360A70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::Logic<md::GeometryLogic,md::GeometryContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_allocateContext(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _BYTE v22[56];
  uint64_t v23;
  _BYTE v24[72];

  v4 = (_QWORD *)operator new();
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v11, a1);
  v5 = operator new();
  v6 = v11;
  *(_OWORD *)(v5 + 16) = v12;
  v7 = v14;
  *(_OWORD *)(v5 + 32) = v13;
  *(_OWORD *)(v5 + 48) = v7;
  *(_OWORD *)v5 = v6;
  v8 = v16;
  *(_OWORD *)(v5 + 64) = v15;
  *(_OWORD *)(v5 + 80) = v8;
  v9 = v18;
  *(_OWORD *)(v5 + 96) = v17;
  *(_OWORD *)(v5 + 112) = v9;
  v10 = v20;
  *(_OWORD *)(v5 + 128) = v19;
  v11 = 0uLL;
  v12 = 0uLL;
  v13 = 0uLL;
  v14 = 0uLL;
  v15 = 0uLL;
  v16 = 0uLL;
  v17 = 0uLL;
  v18 = 0uLL;
  *(_OWORD *)(v5 + 144) = v10;
  v19 = 0uLL;
  v20 = 0uLL;
  std::list<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,std::allocator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry>>::list((_QWORD *)(v5 + 160), (uint64_t)&v21);
  std::unordered_map<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>,std::allocator<std::pair<md::GeometryContext::SplineKey const,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>>>::unordered_map(v5 + 184, (uint64_t)v22);
  *(_OWORD *)(v5 + 224) = *(_OWORD *)&v22[40];
  std::list<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,std::allocator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry>>::list((_QWORD *)(v5 + 240), (uint64_t)&v23);
  std::unordered_map<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>,std::allocator<std::pair<md::GeometryContext::SplineKey const,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>>>::unordered_map(v5 + 264, (uint64_t)v24);
  *(_OWORD *)(v5 + 304) = *(_OWORD *)&v24[40];
  *(_BYTE *)(v5 + 320) = v24[56];
  v4[2] = "md::GeometryContext]";
  v4[3] = 19;
  v4[4] = v5;
  *v4 = &off_1E42B0CD0;
  v4[1] = 0x3070CB6B3C7F21D3;
  *a2 = v4;
  md::GeometryContext::~GeometryContext((md::GeometryContext *)&v11);
}

void sub_19F360C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = v22;
  if (v18[32])
  {
    v25 = v18[30];
    v26 = (uint64_t *)v18[31];
    v27 = *v26;
    *(_QWORD *)(v27 + 8) = *(_QWORD *)(v25 + 8);
    **(_QWORD **)(v25 + 8) = v27;
    v18[32] = 0;
    if (v26 != v21)
    {
      do
      {
        v28 = (uint64_t *)v26[1];
        v29 = (std::__shared_weak_count *)v26[6];
        if (v29)
        {
          p_shared_owners = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(p_shared_owners);
          while (__stlxr(v31 - 1, p_shared_owners));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        operator delete(v26);
        v26 = v28;
      }
      while (v28 != v21);
    }
  }
  geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::~MarkedLRUCache(v20);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v19);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v23);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a12);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a13);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a14);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a15);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a16);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v33);
  v32 = std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v18);
  MEMORY[0x1A1AF4E00](v32, 0x10A0C40296A7848);
  md::GeometryContext::~GeometryContext((md::GeometryContext *)&a17);
  MEMORY[0x1A1AF4E00](v17, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

void sub_19F360E0C()
{
  JUMPOUT(0x19F360DECLL);
}

uint64_t std::unordered_map<md::GeometryContext::SplineKey,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>,std::allocator<std::pair<md::GeometryContext::SplineKey const,std::__list_iterator<geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry,void *>>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  size_t prime;
  int8x8_t v6;
  BOOL v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t **v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  __int128 v29;
  float v30;
  float v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime != 1)
  {
    if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(*(_QWORD *)(a2 + 8));
      v6 = *(int8x8_t *)(a1 + 8);
      v7 = prime >= *(_QWORD *)&v6;
      if (prime > *(_QWORD *)&v6)
        goto LABEL_17;
    }
    else
    {
      v6 = 0;
      v7 = 1;
      if (prime)
        goto LABEL_17;
    }
    if (v7)
      goto LABEL_18;
    v8 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v6 < 3uLL || (v9 = (uint8x8_t)vcnt_s8(v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      v8 = std::__next_prime(v8);
    }
    else
    {
      v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2)
        v8 = v10;
    }
    if (prime <= v8)
      prime = v8;
    if (prime >= *(_QWORD *)&v6)
      goto LABEL_18;
    goto LABEL_17;
  }
  prime = 2;
LABEL_17:
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
LABEL_18:
  v11 = *(uint64_t **)(a2 + 16);
  if (!v11)
    return a1;
  v12 = (_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 8);
LABEL_20:
  while (2)
  {
    v14 = *((int *)v11 + 4);
    v15 = *((unsigned __int8 *)v11 + 24);
    v16 = (v14
         - 0x61C8864680B583EBLL
         + ((v15 - 0x61C8864680B583EBLL) << 6)
         + ((unint64_t)(v15 - 0x61C8864680B583EBLL) >> 2)) ^ (v15 - 0x61C8864680B583EBLL);
    v17 = *((int *)v11 + 5);
    v18 = (v17 - 0x61C8864680B583EBLL + (v16 << 6) + (v16 >> 2)) ^ v16;
    v19 = *((int *)v11 + 7);
    v20 = *((int *)v11 + 8);
    v21 = (v19 - 0x61C8864680B583EBLL + (v18 << 6) + (v18 >> 2)) ^ v18;
    v22 = (v20 - 0x61C8864680B583EBLL + (v21 << 6) + (v21 >> 2)) ^ v21;
    if (v13)
    {
      v23 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.u32[0] > 1uLL)
      {
        v2 = (v20 - 0x61C8864680B583EBLL + (v21 << 6) + (v21 >> 2)) ^ v21;
        if (v22 >= v13)
          v2 = v22 % v13;
      }
      else
      {
        v2 = v22 & (v13 - 1);
      }
      v24 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v2);
      if (v24)
      {
        v25 = *v24;
        if (v25)
        {
          if (v23.u32[0] < 2uLL)
          {
            while (1)
            {
              v27 = v25[1];
              if (v27 == v22)
              {
                if (*((_DWORD *)v25 + 4) == (_DWORD)v14
                  && __PAIR64__(*((unsigned __int8 *)v25 + 24), *((_DWORD *)v25 + 5)) == __PAIR64__(v15, v17)
                  && *(uint64_t *)((char *)v25 + 28) == __PAIR64__(v20, v19))
                {
                  goto LABEL_44;
                }
              }
              else if ((v27 & (v13 - 1)) != v2)
              {
                goto LABEL_46;
              }
              v25 = (uint64_t *)*v25;
              if (!v25)
                goto LABEL_46;
            }
          }
          do
          {
            v26 = v25[1];
            if (v26 == v22)
            {
              if (*((_DWORD *)v25 + 4) == (_DWORD)v14
                && __PAIR64__(*((unsigned __int8 *)v25 + 24), *((_DWORD *)v25 + 5)) == __PAIR64__(v15, v17)
                && *(uint64_t *)((char *)v25 + 28) == __PAIR64__(v20, v19))
              {
LABEL_44:
                v11 = (uint64_t *)*v11;
                if (!v11)
                  return a1;
                goto LABEL_20;
              }
            }
            else
            {
              if (v26 >= v13)
                v26 %= v13;
              if (v26 != v2)
                break;
            }
            v25 = (uint64_t *)*v25;
          }
          while (v25);
        }
      }
    }
LABEL_46:
    v28 = operator new(0x30uLL);
    *v28 = 0;
    v28[1] = v22;
    v29 = *((_OWORD *)v11 + 2);
    *((_OWORD *)v28 + 1) = *((_OWORD *)v11 + 1);
    *((_OWORD *)v28 + 2) = v29;
    v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
    v31 = *(float *)(a1 + 32);
    if (!v13 || (float)(v31 * (float)v13) < v30)
    {
      v32 = v13 < 3 || (v13 & (v13 - 1)) != 0;
      v33 = v32 | (2 * v13);
      v34 = vcvtps_u32_f32(v30 / v31);
      if (v33 <= v34)
        v35 = v34;
      else
        v35 = v33;
      if (v35 == 1)
      {
        v35 = 2;
      }
      else if ((v35 & (v35 - 1)) != 0)
      {
        v35 = std::__next_prime(v35);
        v13 = *(_QWORD *)(a1 + 8);
      }
      if (v35 > v13)
        goto LABEL_59;
      if (v35 < v13)
      {
        v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v13 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
        {
          v36 = std::__next_prime(v36);
        }
        else
        {
          v38 = 1 << -(char)__clz(v36 - 1);
          if (v36 >= 2)
            v36 = v38;
        }
        if (v35 <= v36)
          v35 = v36;
        if (v35 < v13)
LABEL_59:
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, v35);
      }
      v13 = *(_QWORD *)(a1 + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v22 >= v13)
          v2 = v22 % v13;
        else
          v2 = v22;
      }
      else
      {
        v2 = (v13 - 1) & v22;
      }
    }
    v39 = *(_QWORD *)a1;
    v40 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
    if (v40)
    {
      *v28 = *v40;
      goto LABEL_83;
    }
    *v28 = *v12;
    *v12 = v28;
    *(_QWORD *)(v39 + 8 * v2) = v12;
    if (*v28)
    {
      v41 = *(_QWORD *)(*v28 + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v41 >= v13)
          v41 %= v13;
      }
      else
      {
        v41 &= v13 - 1;
      }
      v40 = (_QWORD *)(*(_QWORD *)a1 + 8 * v41);
LABEL_83:
      *v40 = v28;
    }
    ++*(_QWORD *)(a1 + 24);
    v11 = (uint64_t *)*v11;
    if (v11)
      continue;
    return a1;
  }
}

void sub_19F361298(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

double md::Logic<md::GeometryLogic,md::GeometryContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 320) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 160) = a1 + 160;
  *(_QWORD *)(a1 + 168) = a1 + 160;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 1065353216;
  *(_QWORD *)(a1 + 224) = a1 + 160;
  *(_QWORD *)(a1 + 240) = a1 + 240;
  *(_QWORD *)(a1 + 248) = a1 + 240;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 1065353216;
  *(_QWORD *)(a1 + 304) = a1 + 240;
  return result;
}

void md::GeometryContext::~GeometryContext(md::GeometryContext *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;

  geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::~MarkedLRUCache((uint64_t *)this + 30);
  geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::~MarkedLRUCache((uint64_t *)this + 20);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (!v14)
    goto LABEL_25;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
    if (!v17)
      goto LABEL_31;
  }
  else
  {
LABEL_25:
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
    if (!v17)
      goto LABEL_31;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_31:
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v20)
    goto LABEL_35;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    v23 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v23)
      goto LABEL_41;
  }
  else
  {
LABEL_35:
    v23 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (!v23)
      goto LABEL_41;
  }
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_41:
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v26)
    goto LABEL_45;
  v27 = (unint64_t *)&v26->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    v29 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v29)
      return;
  }
  else
  {
LABEL_45:
    v29 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v29)
      return;
  }
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
}

void geo::Cache<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>,std::hash<grl::FontKey>,geo::LRUPolicy>::insert(uint64_t a1, esl::FontKey *this, CFTypeRef cf)
{
  unint64_t v3;
  void **v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  std::string *v13;
  uint64_t *v14;
  std::string *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  BOOL v26;
  void (**v27)(grl::FontKey *__hidden);
  void (**v28)(grl::FontKey *__hidden);
  std::string *v29;
  std::string *v30;
  float v31;
  float v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  int8x8_t prime;
  void *v37;
  void *v38;
  uint64_t v39;
  void (*v40)(grl::FontKey *__hidden);
  unint64_t v41;
  uint8x8_t v42;
  unint64_t v43;
  uint8x8_t v44;
  uint64_t v45;
  void (*v46)(grl::FontKey *__hidden);
  unint64_t v47;
  _QWORD *v48;
  void (***v49)(grl::FontKey *__hidden);
  unint64_t v50;
  uint64_t v51;
  const void *v52;
  uint64_t *v53;
  uint64_t v54;
  _QWORD *v55;
  void *v56;
  void (**v57)(grl::FontKey *__hidden);
  CFTypeRef cfa;
  void (*v59)(grl::FontKey *__hidden);
  void (**v60)(grl::FontKey *__hidden);
  __int128 v61;
  char v62;
  int v63;
  char v64;
  int v65;
  char v66;
  std::string v67;
  std::string v68;
  std::vector<int> v69;
  char v70;
  uint64_t (**v71)();
  CFTypeRef v72;
  uint64_t v73[4];

  v7 = (void **)(a1 + 8);
  if (cf)
    CFRetain(cf);
  v8 = std::__hash_table<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::__unordered_map_hasher<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::hash<grl::FontKey>,std::equal_to<grl::FontKey>,true>,std::__unordered_map_equal<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::equal_to<grl::FontKey>,std::hash<grl::FontKey>,true>,std::allocator<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>>>::find<grl::FontKey>(v7, this);
  if (v8)
  {
    v3 = (unint64_t)v8;
    v9 = (uint64_t *)v8[18];
    v10 = *v9;
    *(_QWORD *)(v10 + 8) = v9[1];
    *(_QWORD *)v9[1] = v10;
    --*(_QWORD *)(a1 + 64);
    std::__destroy_at[abi:nn180100]<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,0>((esl::FontKey *)(v9 + 2));
    operator delete(v9);
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&v60, v7, (_QWORD *)v3);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,void *>>>>::reset[abi:nn180100]((uint64_t *)&v60);
  }
  v11 = (char *)operator new(0xA8uLL);
  v12 = v11;
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = &off_1E42B0650;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 8);
  v11[40] = 0;
  if (*((_BYTE *)this + 24))
  {
    *((_DWORD *)v11 + 11) = *((_DWORD *)this + 7);
    v11[40] = 1;
  }
  v11[48] = 0;
  if (*((_BYTE *)this + 32))
  {
    *((_DWORD *)v11 + 13) = *((_DWORD *)this + 9);
    v11[48] = 1;
  }
  v11[56] = *((_BYTE *)this + 40);
  v13 = (std::string *)(v11 + 64);
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *((const std::string::value_type **)this + 6), *((_QWORD *)this + 7));
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    *((_QWORD *)v12 + 10) = *((_QWORD *)this + 8);
  }
  v14 = (uint64_t *)(a1 + 48);
  v15 = (std::string *)(v12 + 88);
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
    *((_QWORD *)v12 + 13) = *((_QWORD *)this + 11);
  }
  std::vector<int>::vector((std::vector<int> *)(v12 + 112), (const std::vector<int> *)this + 4);
  v12[136] = *((_BYTE *)this + 120);
  *((_QWORD *)v12 + 2) = &off_1E42C2828;
  *((_QWORD *)v12 + 18) = &off_1E42B4970;
  if (cf)
    CFRetain(cf);
  cfa = cf;
  *((_QWORD *)v12 + 19) = cf;
  v16 = *(_QWORD **)(a1 + 56);
  *(_QWORD *)v12 = v14;
  *((_QWORD *)v12 + 1) = v16;
  *v16 = v12;
  v17 = *(_QWORD *)(a1 + 64) + 1;
  *(_QWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 64) = v17;
  v18 = esl::FontKey::hash(this);
  v19 = *(_QWORD *)(a1 + 16);
  v59 = (void (*)(grl::FontKey *__hidden))v18;
  if (v19)
  {
    v20 = v18;
    v21 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
    v21.i16[0] = vaddlv_u8(v21);
    v22 = v21.u32[0];
    if (v21.u32[0] > 1uLL)
    {
      v3 = v18;
      if (v18 >= v19)
        v3 = v18 % v19;
    }
    else
    {
      v3 = (v19 - 1) & v18;
    }
    v23 = (_QWORD *)*((_QWORD *)*v7 + v3);
    if (v23)
    {
      v24 = (_QWORD *)*v23;
      if (*v23)
      {
        do
        {
          v25 = v24[1];
          if (v25 == v20)
          {
            v26 = esl::FontKey::operator==((uint64_t)(v24 + 2), (uint64_t)this);
            v20 = (unint64_t)v59;
            if (v26)
              goto LABEL_100;
          }
          else
          {
            if (v22 > 1)
            {
              if (v25 >= v19)
                v25 %= v19;
            }
            else
            {
              v25 &= v19 - 1;
            }
            if (v25 != v3)
              break;
          }
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
    }
  }
  v27 = (void (**)(grl::FontKey *__hidden))operator new(0x98uLL);
  v28 = v27;
  v60 = v27;
  *(_QWORD *)&v61 = a1 + 24;
  v57 = (void (**)(grl::FontKey *__hidden))(a1 + 24);
  *v27 = 0;
  v27[1] = v59;
  v27[2] = (void (*)(grl::FontKey *__hidden))&off_1E42B0650;
  *(_OWORD *)(v27 + 3) = *(_OWORD *)((char *)this + 8);
  *((_BYTE *)v27 + 40) = 0;
  if (*((_BYTE *)this + 24))
  {
    *((_DWORD *)v27 + 11) = *((_DWORD *)this + 7);
    *((_BYTE *)v27 + 40) = 1;
  }
  *((_BYTE *)v27 + 48) = 0;
  if (*((_BYTE *)this + 32))
  {
    *((_DWORD *)v27 + 13) = *((_DWORD *)this + 9);
    *((_BYTE *)v27 + 48) = 1;
  }
  *((_BYTE *)v27 + 56) = *((_BYTE *)this + 40);
  v29 = (std::string *)(v27 + 8);
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v29, *((const std::string::value_type **)this + 6), *((_QWORD *)this + 7));
  }
  else
  {
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    v28[10] = (void (*)(grl::FontKey *__hidden))*((_QWORD *)this + 8);
  }
  v30 = (std::string *)(v28 + 11);
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v30, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
  }
  else
  {
    *(_OWORD *)&v30->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
    v28[13] = (void (*)(grl::FontKey *__hidden))*((_QWORD *)this + 11);
  }
  std::vector<int>::vector((std::vector<int> *)(v28 + 14), (const std::vector<int> *)this + 4);
  *((_BYTE *)v28 + 136) = *((_BYTE *)this + 120);
  v28[2] = (void (*)(grl::FontKey *__hidden))&off_1E42C2828;
  v28[18] = (void (*)(grl::FontKey *__hidden))v12;
  BYTE8(v61) = 1;
  v31 = (float)(unint64_t)(*(_QWORD *)(a1 + 32) + 1);
  v32 = *(float *)(a1 + 40);
  if (!v19 || (float)(v32 * (float)v19) < v31)
  {
    v33 = v19 < 3 || (v19 & (v19 - 1)) != 0;
    v3 = (unint64_t)v59;
    v34 = v33 | (2 * v19);
    v35 = vcvtps_u32_f32(v31 / v32);
    if (v34 <= v35)
      prime = (int8x8_t)v35;
    else
      prime = (int8x8_t)v34;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      v3 = (unint64_t)v59;
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v19 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)&prime > v19)
      goto LABEL_57;
    if (*(_QWORD *)&prime < v19)
    {
      v43 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 32) / *(float *)(a1 + 40));
      if (v19 < 3 || (v44 = (uint8x8_t)vcnt_s8((int8x8_t)v19), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
      {
        v43 = std::__next_prime(v43);
        v3 = (unint64_t)v59;
      }
      else
      {
        v45 = 1 << -(char)__clz(v43 - 1);
        if (v43 >= 2)
          v43 = v45;
      }
      if (*(_QWORD *)&prime <= v43)
        prime = (int8x8_t)v43;
      if (*(_QWORD *)&prime >= v19)
      {
        v19 = *(_QWORD *)(a1 + 16);
      }
      else
      {
        if (prime)
        {
LABEL_57:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v37 = operator new(8 * *(_QWORD *)&prime);
          v38 = *v7;
          *v7 = v37;
          if (v38)
            operator delete(v38);
          v39 = 0;
          *(int8x8_t *)(a1 + 16) = prime;
          do
            *((_QWORD *)*v7 + v39++) = 0;
          while (*(_QWORD *)&prime != v39);
          v40 = *v57;
          if (*v57)
          {
            v41 = *((_QWORD *)v40 + 1);
            v42 = (uint8x8_t)vcnt_s8(prime);
            v42.i16[0] = vaddlv_u8(v42);
            if (v42.u32[0] > 1uLL)
            {
              if (v41 >= *(_QWORD *)&prime)
                v41 %= *(_QWORD *)&prime;
            }
            else
            {
              v41 &= *(_QWORD *)&prime - 1;
            }
            *((_QWORD *)*v7 + v41) = v57;
            v46 = *(void (**)(grl::FontKey *__hidden))v40;
            if (*(_QWORD *)v40)
            {
              do
              {
                v47 = *((_QWORD *)v46 + 1);
                if (v42.u32[0] > 1uLL)
                {
                  if (v47 >= *(_QWORD *)&prime)
                    v47 %= *(_QWORD *)&prime;
                }
                else
                {
                  v47 &= *(_QWORD *)&prime - 1;
                }
                if (v47 != v41)
                {
                  if (!*((_QWORD *)*v7 + v47))
                  {
                    *((_QWORD *)*v7 + v47) = v40;
                    goto LABEL_82;
                  }
                  *(_QWORD *)v40 = *(_QWORD *)v46;
                  *(_QWORD *)v46 = **((_QWORD **)*v7 + v47);
                  **((_QWORD **)*v7 + v47) = v46;
                  v46 = v40;
                }
                v47 = v41;
LABEL_82:
                v40 = v46;
                v46 = *(void (**)(grl::FontKey *__hidden))v46;
                v41 = v47;
              }
              while (v46);
            }
          }
          v19 = (unint64_t)prime;
          v3 = (unint64_t)v59;
          goto LABEL_86;
        }
        v56 = *v7;
        *v7 = 0;
        if (v56)
        {
          operator delete(v56);
          v3 = (unint64_t)v59;
        }
        v19 = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
    }
LABEL_86:
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v3 >= v19)
        v3 %= v19;
    }
    else
    {
      v3 &= v19 - 1;
    }
  }
  v48 = *v7;
  v49 = (void (***)(grl::FontKey *__hidden))*((_QWORD *)*v7 + v3);
  if (v49)
  {
    *v28 = (void (*)(grl::FontKey *__hidden))*v49;
LABEL_98:
    *v49 = v28;
    goto LABEL_99;
  }
  *v28 = *v57;
  *v57 = (void (*)(grl::FontKey *__hidden))v28;
  v48[v3] = v57;
  if (*v28)
  {
    v50 = *((_QWORD *)*v28 + 1);
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v50 >= v19)
        v50 %= v19;
    }
    else
    {
      v50 &= v19 - 1;
    }
    v49 = (void (***)(grl::FontKey *__hidden))((char *)*v7 + 8 * v50);
    goto LABEL_98;
  }
LABEL_99:
  v60 = 0;
  ++*(_QWORD *)(a1 + 32);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,void *>>>>::reset[abi:nn180100]((uint64_t *)&v60);
LABEL_100:
  if (cfa)
    CFRelease(cfa);
  while (*(_QWORD *)(a1 + 64) > *(_QWORD *)a1)
  {
    v51 = *v14;
    v60 = &off_1E42B0650;
    v61 = *(_OWORD *)(v51 + 24);
    v62 = 0;
    if (*(_BYTE *)(v51 + 40))
    {
      v63 = *(_DWORD *)(v51 + 44);
      v62 = 1;
    }
    v64 = 0;
    if (*(_BYTE *)(v51 + 48))
    {
      v65 = *(_DWORD *)(v51 + 52);
      v64 = 1;
    }
    v66 = *(_BYTE *)(v51 + 56);
    if (*(char *)(v51 + 87) < 0)
      std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)(v51 + 64), *(_QWORD *)(v51 + 72));
    else
      v67 = *(std::string *)(v51 + 64);
    if (*(char *)(v51 + 111) < 0)
      std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)(v51 + 88), *(_QWORD *)(v51 + 96));
    else
      v68 = *(std::string *)(v51 + 88);
    std::vector<int>::vector(&v69, (const std::vector<int> *)(v51 + 112));
    v70 = *(_BYTE *)(v51 + 136);
    v60 = &off_1E42C2828;
    v71 = &off_1E42B4970;
    v52 = *(const void **)(v51 + 152);
    if (v52)
      CFRetain(v52);
    v72 = v52;
    v53 = *(uint64_t **)(a1 + 48);
    v54 = *v53;
    *(_QWORD *)(v54 + 8) = v53[1];
    *(_QWORD *)v53[1] = v54;
    --*(_QWORD *)(a1 + 64);
    std::__destroy_at[abi:nn180100]<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,0>((esl::FontKey *)(v53 + 2));
    operator delete(v53);
    v55 = std::__hash_table<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::__unordered_map_hasher<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::hash<grl::FontKey>,std::equal_to<grl::FontKey>,true>,std::__unordered_map_equal<grl::FontKey,std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::equal_to<grl::FontKey>,std::hash<grl::FontKey>,true>,std::allocator<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>>>::find<grl::FontKey>(v7, (esl::FontKey *)&v60);
    if (v55)
    {
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)v73, v7, v55);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<grl::FontKey,std::__list_iterator<std::pair<grl::FontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,void *>>>>::reset[abi:nn180100](v73);
    }
    v71 = &off_1E42B4970;
    if (v72)
      CFRelease(v72);
    esl::FontKey::~FontKey((esl::FontKey *)&v60);
  }
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, const std::vector<int> *__x)
{
  int *end;
  std::vector<int>::pointer begin;
  size_t v5;
  int *v6;
  int *v7;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  begin = __x->__begin_;
  end = __x->__end_;
  v5 = (char *)end - (char *)__x->__begin_;
  if (end != __x->__begin_)
  {
    if ((char *)end - (char *)__x->__begin_ < 0)
      abort();
    v6 = (int *)operator new((char *)end - (char *)__x->__begin_);
    this->__begin_ = v6;
    this->__end_ = v6;
    v7 = (int *)((char *)v6 + v5);
    this->__end_cap_.__value_ = (int *)((char *)v6 + v5);
    memmove(v6, begin, v5);
    this->__end_ = v7;
  }
  return this;
}

void sub_19F361ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void geo::SkylineBin::resize(uint64_t a1, int a2, int a3, char a4, int a5)
{
  _DWORD *v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  char *v16;
  char v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  _DWORD *v25;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_BYTE *)(a1 + 56) = a4;
  *(_DWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 16) = 0;
  v8 = *(_DWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  v9 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)v8 >= v9)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)v8) >> 2);
    v12 = 2 * v11;
    if (2 * v11 <= 1)
      v12 = 1;
    if (v11 >= 0xAAAAAAAAAAAAAAALL)
      v13 = 0x1555555555555555;
    else
      v13 = v12;
    if (v13 > 0x1555555555555555)
      goto LABEL_23;
    v14 = 3 * v13;
    v15 = operator new(12 * v13);
    v16 = (char *)&v15[v14];
    *(_QWORD *)v15 = 0;
    v15[2] = a2;
    v10 = v15 + 3;
    *(_QWORD *)(a1 + 32) = v15;
    *(_QWORD *)(a1 + 40) = v15 + 3;
    *(_QWORD *)(a1 + 48) = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_QWORD *)v8 = 0;
    v10 = v8 + 3;
    v8[2] = a2;
  }
  *(_QWORD *)(a1 + 40) = v10;
  if (!*(_BYTE *)(a1 + 56))
    return;
  v17 = *(_BYTE *)(a1 + 28);
  *(_DWORD *)(a1 + 72) = a2;
  *(_DWORD *)(a1 + 76) = a3;
  *(_WORD *)(a1 + 84) = 769;
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 144) = v17;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
  v18 = *(_DWORD **)(a1 + 120);
  *(_QWORD *)(a1 + 128) = v18;
  v19 = *(_QWORD *)(a1 + 136);
  if ((unint64_t)v18 >= v19)
  {
    v20 = v19 - (_QWORD)v18;
    v21 = v20 >> 3;
    if ((unint64_t)(v20 >> 3) <= 1)
      v21 = 1;
    v22 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0;
    v23 = 0xFFFFFFFFFFFFFFFLL;
    if (!v22)
      v23 = v21;
    if (!(v23 >> 60))
    {
      v24 = 4 * v23;
      v25 = operator new(16 * v23);
      *(_QWORD *)v25 = 0;
      v25[2] = a2;
      v25[3] = a3;
      *(_QWORD *)(a1 + 120) = v25;
      *(_QWORD *)(a1 + 128) = v25 + 4;
      *(_QWORD *)(a1 + 136) = &v25[v24];
      if (v18)
        operator delete(v18);
      goto LABEL_21;
    }
LABEL_23:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  *(_QWORD *)v18 = 0;
  v18[2] = a2;
  v18[3] = a3;
LABEL_21:
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 120);
}

void sub_19F3622B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::prepare(_BYTE *a1)
{
  uint64_t result;
  char v3;

  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 104))(a1);
  v3 = a1[49];
  a1[481] = v3 - a1[48] + 2;
  a1[480] = v3 + 1;
  return result;
}

uint64_t md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  int8x8_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  void **v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  const void *v36;
  size_t v37;
  const void *v38;
  unint64_t v39;
  const void *v40;
  size_t v41;
  const void *v42;
  char *v43;
  char *v44;
  int64_t v45;
  void (***v46)(unint64_t);
  int8x8_t v47;
  unint64_t v48;
  uint8x8_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  unint64_t *v58;
  unint64_t *v59;
  BOOL v60;
  _QWORD *v61;
  _QWORD *i;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  int v67;
  uint64_t v68;
  char *v69;
  _BYTE *v70;
  int64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  void (***v74)(_QWORD);
  uint64_t *v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD v84[2];
  __int128 v85;
  char *v86;
  char *v87;
  void *__p[2];
  _BYTE v89[24];
  _BYTE *v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_24;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v5 <= 0x99BED48DEFBBD82BLL)
      v7 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_24;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_24;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_22;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_24;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_24;
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL)
    goto LABEL_11;
LABEL_22:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    v14 = 0;
    goto LABEL_25;
  }
  v14 = *(_QWORD *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if (((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1) & 1) != 0)
    goto LABEL_153;
  v15 = *(_QWORD **)(a2 + 8);
  v16 = (int8x8_t)v15[1];
  if (!*(_QWORD *)&v16)
    goto LABEL_153;
  v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    v18 = 0x99BED48DEFBBD82BLL;
    if (*(_QWORD *)&v16 <= 0x99BED48DEFBBD82BLL)
      v18 = 0x99BED48DEFBBD82BLL % *(_QWORD *)&v16;
  }
  else
  {
    v18 = (*(_QWORD *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  v19 = *(_QWORD **)(*v15 + 8 * v18);
  if (!v19)
    goto LABEL_153;
  v20 = (_QWORD *)*v19;
  if (!v20)
    goto LABEL_153;
  if (v17.u32[0] < 2uLL)
  {
    v21 = *(_QWORD *)&v16 - 1;
    while (1)
    {
      v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL)
          goto LABEL_47;
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_153;
      }
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_153;
    }
  }
  while (2)
  {
    v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(_QWORD *)&v16)
        v22 %= *(_QWORD *)&v16;
      if (v22 != v18)
        goto LABEL_153;
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_153;
      continue;
    }
    break;
  }
LABEL_47:
  v24 = v20[5];
  if (*(_QWORD *)(v24 + 8) != 0x99BED48DEFBBD82BLL)
    goto LABEL_153;
  v25 = *(_QWORD *)(v24 + 32);
  if (!v25)
    goto LABEL_153;
  (*(void (**)(unint64_t *, _QWORD))(*a1 + 160))(a1, *(_QWORD *)(v24 + 32));
  v26 = (unint64_t *)a1[22];
  if (v26 == a1 + 23)
    goto LABEL_126;
  while (2)
  {
    v27 = (int8x8_t)a1[12];
    if (!*(_QWORD *)&v27)
      goto LABEL_120;
    v28 = v26[4];
    v29 = *(_QWORD *)(v28 + 120);
    v30 = (uint8x8_t)vcnt_s8(v27);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      v31 = *(_QWORD *)(v28 + 120);
      if (v29 >= *(_QWORD *)&v27)
        v31 = v29 % *(_QWORD *)&v27;
    }
    else
    {
      v31 = (*(_QWORD *)&v27 - 1) & v29;
    }
    v32 = *(void ***)(a1[11] + 8 * v31);
    if (!v32)
      goto LABEL_120;
    v33 = (unint64_t *)*v32;
    if (!*v32)
      goto LABEL_120;
    if (v30.u32[0] < 2uLL)
    {
      v34 = *(_QWORD *)&v27 - 1;
      while (1)
      {
        v39 = v33[1];
        if (v39 == v29)
        {
          if (*((unsigned __int8 *)v33 + 16) == *(unsigned __int8 *)(v28 + 16)
            && *((unsigned __int16 *)v33 + 12) == *(unsigned __int16 *)(v28 + 24)
            && v33[12] == *(_QWORD *)(v28 + 96))
          {
            v40 = (const void *)v33[4];
            v41 = v33[5] - (_QWORD)v40;
            v42 = *(const void **)(v28 + 32);
            if (v41 == *(_QWORD *)(v28 + 40) - (_QWORD)v42 && !memcmp(v40, v42, v41))
              goto LABEL_80;
          }
        }
        else if ((v39 & v34) != v31)
        {
          goto LABEL_120;
        }
        v33 = (unint64_t *)*v33;
        if (!v33)
          goto LABEL_120;
      }
    }
    while (2)
    {
      v35 = v33[1];
      if (v35 != v29)
      {
        if (v35 >= *(_QWORD *)&v27)
          v35 %= *(_QWORD *)&v27;
        if (v35 != v31)
          goto LABEL_120;
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v33 + 16) != *(unsigned __int8 *)(v28 + 16)
        || *((unsigned __int16 *)v33 + 12) != *(unsigned __int16 *)(v28 + 24)
        || v33[12] != *(_QWORD *)(v28 + 96)
        || (v36 = (const void *)v33[4],
            v37 = v33[5] - (_QWORD)v36,
            v38 = *(const void **)(v28 + 32),
            v37 != *(_QWORD *)(v28 + 40) - (_QWORD)v38)
        || memcmp(v36, v38, v37))
      {
LABEL_62:
        v33 = (unint64_t *)*v33;
        if (!v33)
          goto LABEL_120;
        continue;
      }
      break;
    }
LABEL_80:
    v44 = (char *)a1[34];
    v43 = (char *)a1[35];
    if (v44 != v43)
    {
      while (*(_QWORD *)v44 != v33[16])
      {
        v44 += 8;
        if (v44 == v43)
        {
          v44 = (char *)a1[35];
          break;
        }
      }
    }
    v45 = v43 - (v44 + 8);
    if (v43 != v44 + 8)
      memmove(v44, v44 + 8, v43 - (v44 + 8));
    a1[35] = (unint64_t)&v44[v45];
    v46 = (void (***)(unint64_t))v33[16];
    if (v46 && a1[30])
    {
      (**v46)(v33[16]);
      *v46 = (void (**)(unint64_t))a1[33];
      a1[33] = (unint64_t)v46;
    }
    v47 = (int8x8_t)a1[12];
    v48 = v33[1];
    v49 = (uint8x8_t)vcnt_s8(v47);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      if (v48 >= *(_QWORD *)&v47)
        v48 %= *(_QWORD *)&v47;
    }
    else
    {
      v48 &= *(_QWORD *)&v47 - 1;
    }
    v50 = a1[11];
    v51 = *(unint64_t **)(v50 + 8 * v48);
    do
    {
      v52 = v51;
      v51 = (unint64_t *)*v51;
    }
    while (v51 != v33);
    if (v52 == a1 + 13)
      goto LABEL_106;
    v53 = v52[1];
    if (v49.u32[0] > 1uLL)
    {
      if (v53 >= *(_QWORD *)&v47)
        v53 %= *(_QWORD *)&v47;
    }
    else
    {
      v53 &= *(_QWORD *)&v47 - 1;
    }
    if (v53 != v48)
    {
LABEL_106:
      if (!*v33)
        goto LABEL_107;
      v54 = *(_QWORD *)(*v33 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(_QWORD *)&v47)
          v54 %= *(_QWORD *)&v47;
      }
      else
      {
        v54 &= *(_QWORD *)&v47 - 1;
      }
      if (v54 != v48)
LABEL_107:
        *(_QWORD *)(v50 + 8 * v48) = 0;
    }
    v55 = *v33;
    if (*v33)
    {
      v56 = *(_QWORD *)(v55 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v56 >= *(_QWORD *)&v47)
          v56 %= *(_QWORD *)&v47;
      }
      else
      {
        v56 &= *(_QWORD *)&v47 - 1;
      }
      if (v56 != v48)
      {
        *(_QWORD *)(a1[11] + 8 * v56) = v52;
        v55 = *v33;
      }
    }
    *v52 = v55;
    *v33 = 0;
    --a1[14];
    if (*((_BYTE *)v33 + 112))
      *((_BYTE *)v33 + 112) = 0;
    v57 = (void *)v33[4];
    if (v57 != (void *)v33[6])
      free(v57);
    operator delete(v33);
LABEL_120:
    v58 = (unint64_t *)v26[1];
    if (v58)
    {
      do
      {
        v59 = v58;
        v58 = (unint64_t *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        v59 = (unint64_t *)v26[2];
        v60 = *v59 == (_QWORD)v26;
        v26 = v59;
      }
      while (!v60);
    }
    v26 = v59;
    if (v59 != a1 + 23)
      continue;
    break;
  }
LABEL_126:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    v61 = (_QWORD *)a1[34];
    for (i = (_QWORD *)a1[35]; v61 != i; ++v61)
      (*(void (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 184))(a1, v25, *v61);
  }
  v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
  v64 = (char *)a1[35];
  v86 = v63;
  v87 = v64;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    v85 = *(_OWORD *)__p;
    v65 = (char *)a1[34];
LABEL_131:
    while (v65 != v63)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v65) & 1) == 0)
      {
        v66 = v63 - 8;
        while (v66 != v65)
        {
          v63 = v66;
          v67 = (*(uint64_t (**)(unint64_t *, uint64_t, _QWORD))(*a1 + 136))(a1, a2, *(_QWORD *)v66);
          v66 = v63 - 8;
          if (v67)
          {
            v68 = *(_QWORD *)v65;
            *(_QWORD *)v65 = *(_QWORD *)v63;
            v65 += 8;
            *(_QWORD *)v63 = v68;
            goto LABEL_131;
          }
        }
        v63 = v65;
        break;
      }
      v65 += 8;
    }
    v84[0] = a1[34];
    v84[1] = v63;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v86);
    (*(void (**)(unint64_t *, uint64_t, __int128 *))(*a1 + 112))(a1, a2, &v85);
    (*(void (**)(unint64_t *, uint64_t, _QWORD *))(*a1 + 128))(a1, a2, v84);
    v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
    v64 = (char *)a1[35];
    v86 = v63;
    v87 = v64;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v63, v64, (v64 - v63) >> 3);
  v69 = v86;
  if (v86 != v87)
  {
    v70 = (_BYTE *)a1[35];
    v71 = v70 - v87;
    if (v70 != v87)
      memmove(v86, v87, v70 - v87);
    a1[35] = (unint64_t)&v69[v71];
  }
  v73 = (_QWORD *)a1[37];
  v72 = (_QWORD *)a1[38];
  if (v72 != v73)
  {
    do
    {
      v74 = (void (***)(_QWORD))*v73;
      if (*v73 && a1[30])
      {
        (**v74)(*v73);
        *v74 = (void (**)(_QWORD))a1[33];
        a1[33] = (unint64_t)v74;
      }
      ++v73;
    }
    while (v73 != v72);
    v72 = (_QWORD *)a1[37];
  }
  a1[38] = (unint64_t)v72;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_153:
  v75 = (uint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  v76 = (unint64_t *)a1[10];
  if (v76)
  {
    v77 = *v75;
    v78 = (uint64_t *)v75[1];
    if (v76 == a1 + 7)
    {
      v90 = v89;
      (*(void (**)(unint64_t *, _BYTE *))(*v76 + 24))(v76, v89);
    }
    else
    {
      v90 = (_BYTE *)(*(uint64_t (**)(unint64_t *))(*v76 + 16))(v76);
    }
    v79 = 126 - 2 * __clz(((uint64_t)v78 - v77) >> 3);
    if (v78 == (uint64_t *)v77)
      v80 = 0;
    else
      v80 = v79;
    std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::MapTileDataRenderable<md::PolygonTileData> *,md::MapTileDataRenderable<md::PolygonTileData> *)> &,md::MapTileDataRenderable<md::PolygonTileData> **,false>(v77, v78, (uint64_t)v89, v80, 1);
    v81 = v90;
    if (v90 == v89)
    {
      v82 = 4;
      v81 = v89;
LABEL_164:
      (*(void (**)(void))(*v81 + 8 * v82))();
    }
    else if (v90)
    {
      v82 = 5;
      goto LABEL_164;
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t *, uint64_t))(*a1 + 152))(a1, v75, a2);
}

void sub_19F362C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::_determineExitingRenderables(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (uint64_t *)a1[34];
  v1 = (uint64_t *)a1[35];
  if (v2 != v1)
  {
    while (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, *v2))
    {
      ++v2;
LABEL_4:
      if (v2 == v1)
        return v1;
    }
    v4 = v1 - 1;
    while (v4 != v2)
    {
      v1 = v4;
      v5 = *v4--;
      if (md::CartographicTiledRenderLayer<md::RoadTileDataRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::RoadTileDataRenderable*)#1}::operator()(a1, v5))
      {
        v6 = *v2;
        *v2++ = *v1;
        *v1 = v6;
        goto LABEL_4;
      }
    }
  }
  return v2;
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::_determineEnteringRenderables(md::LayoutContext *this@<X1>, _QWORD *a2@<X0>, char ***a3@<X8>)
{
  _QWORD *v3;
  int8x8_t v4;
  _QWORD *v6;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  int v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t **v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  char **v49;
  char **v50;
  char **v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  char **v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  __int128 *v63;
  uint64_t v64;
  __int128 v65;
  char *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  BOOL v75;
  uint64_t **v76;
  _QWORD *v77;
  uint64_t *v78;
  _QWORD *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  __int16 v82[2];
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = (int8x8_t)v3[1];
  if (v4)
  {
    v6 = a2;
    v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = 0x3070CB6B3C7F21D3;
      if (*(_QWORD *)&v4 <= 0x3070CB6B3C7F21D3uLL)
        v9 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v4;
    }
    else
    {
      v9 = (*(_QWORD *)&v4 - 1) & 0x3070CB6B3C7F21D3;
    }
    v10 = *(_QWORD **)(*v3 + 8 * v9);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          v12 = *(_QWORD *)&v4 - 1;
          while (1)
          {
            v14 = v11[1];
            if (v14 == 0x3070CB6B3C7F21D3)
            {
              if (v11[2] == 0x3070CB6B3C7F21D3)
                goto LABEL_22;
            }
            else if ((v14 & v12) != v9)
            {
              return;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              return;
          }
        }
        while (1)
        {
          v13 = v11[1];
          if (v13 == 0x3070CB6B3C7F21D3)
            break;
          if (v13 >= *(_QWORD *)&v4)
            v13 %= *(_QWORD *)&v4;
          if (v13 != v9)
            return;
LABEL_11:
          v11 = (_QWORD *)*v11;
          if (!v11)
            return;
        }
        if (v11[2] != 0x3070CB6B3C7F21D3)
          goto LABEL_11;
LABEL_22:
        v15 = v11[5];
        if (*(_QWORD *)(v15 + 8) == 0x3070CB6B3C7F21D3)
        {
          v78 = *(uint64_t **)(v15 + 32);
          if (v78)
          {
            v16 = a2[24];
            if (v16)
            {
              if (v16 >> 61)
                abort();
              v17 = v16;
              v18 = (char **)operator new(8 * v16);
              *a3 = v18;
              a3[1] = v18;
              a3[2] = &v18[v17];
            }
            v19 = (_QWORD *)v6[22];
            v77 = v6 + 23;
            if (v19 != v6 + 23)
            {
              v76 = (uint64_t **)(v6 + 29);
              v79 = v6;
              do
              {
                v21 = v19[4];
                v20 = (std::__shared_weak_count *)v19[5];
                v84 = v21;
                v85 = v20;
                if (v20)
                {
                  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
                  do
                    v23 = __ldxr(p_shared_owners);
                  while (__stxr(v23 + 1, p_shared_owners));
                }
                v82[0] = *(_WORD *)(v21 + 168);
                v83 = *(_QWORD *)(v21 + 172);
                v24 = *(double *)(v21 + 600);
                v25 = *(double *)(v21 + 608);
                md::LayoutContext::frameState(this);
                v27 = *(unsigned __int8 *)(v26 + 128);
                md::GeometryContext::transformConstantData((double *)&v80, v78, (unsigned __int8 *)v82, v27, v24, v25);
                v28 = *((_BYTE *)v19 + 48);
                v29 = (char *)v6[33];
                if (!v29)
                {
                  v30 = (char *)malloc_type_malloc(v6[32], 0x160B39uLL);
                  v31 = v30;
                  v32 = v76;
                  while (1)
                  {
                    v33 = *v32;
                    v34 = v32;
                    if (!*v32)
                      break;
                    while (1)
                    {
                      v32 = (uint64_t **)v33;
                      v35 = v33[4];
                      if ((unint64_t)v30 < v35)
                        break;
                      if (v35 >= (unint64_t)v30)
                        goto LABEL_43;
                      v33 = v32[1];
                      if (!v33)
                      {
                        v34 = v32 + 1;
                        goto LABEL_40;
                      }
                    }
                  }
LABEL_40:
                  v36 = (uint64_t *)operator new(0x28uLL);
                  v36[4] = (uint64_t)v31;
                  *v36 = 0;
                  v36[1] = 0;
                  v36[2] = (uint64_t)v32;
                  *v34 = v36;
                  v37 = *(_QWORD *)v79[28];
                  if (v37)
                  {
                    v79[28] = v37;
                    v36 = *v34;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v79[29], v36);
                  ++v79[30];
LABEL_43:
                  v6 = v79;
                  v29 = (char *)v79[33];
                  v38 = 400 * v79[31] - 400;
                  if ((v38 & 0x8000000000000000) == 0)
                  {
                    v39 = &v31[v38];
                    do
                    {
                      *(_QWORD *)v39 = v29;
                      v40 = v39 - 400;
                      v29 = v39;
                      v39 = v40;
                    }
                    while (v40 >= v31);
                    v29 = v40 + 400;
                  }
                  v79[33] = v29;
                }
                v6[33] = *(_QWORD *)v29;
                if (v20)
                {
                  v41 = (unint64_t *)&v20->__shared_owners_;
                  do
                    v42 = __ldxr(v41);
                  while (__stxr(v42 + 1, v41));
                }
                md::BaseMapTileDataRenderable::BaseMapTileDataRenderable((uint64_t)v29, v21, (uint64_t)v20, v28, (v27 - 1) < 3u, &v80);
                if (v20)
                {
                  v43 = (unint64_t *)&v20->__shared_owners_;
                  do
                    v44 = __ldaxr(v43);
                  while (__stlxr(v44 - 1, v43));
                  if (!v44)
                  {
                    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                    std::__shared_weak_count::__release_weak(v20);
                  }
                }
                *(_QWORD *)v29 = &off_1E426F320;
                v45 = v85;
                *((_QWORD *)v29 + 48) = v84;
                *((_QWORD *)v29 + 49) = v45;
                if (v45)
                {
                  v46 = (unint64_t *)&v45->__shared_owners_;
                  do
                    v47 = __ldxr(v46);
                  while (__stxr(v47 + 1, v46));
                }
                v49 = a3[1];
                v48 = (unint64_t)a3[2];
                if ((unint64_t)v49 < v48)
                {
                  *v49 = v29;
                  v50 = v49 + 1;
                  goto LABEL_83;
                }
                v51 = *a3;
                v52 = (char *)v49 - (char *)*a3;
                v53 = v52 >> 3;
                v54 = (v52 >> 3) + 1;
                if (v54 >> 61)
                  abort();
                v55 = v48 - (_QWORD)v51;
                if (v55 >> 2 > v54)
                  v54 = v55 >> 2;
                if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
                  v56 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v56 = v54;
                if (v56)
                {
                  if (v56 >> 61)
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v57 = operator new(8 * v56);
                }
                else
                {
                  v57 = 0;
                }
                v58 = (char **)&v57[8 * v53];
                *v58 = v29;
                v50 = v58 + 1;
                if (v49 == v51)
                {
                  v51 = v49;
                  v6 = v79;
                }
                else
                {
                  v59 = (char *)(v49 - 1) - (char *)v51;
                  if (v59 < 0x58)
                  {
                    v6 = v79;
                    do
                    {
LABEL_79:
                      v66 = *--v49;
                      *--v58 = v66;
                    }
                    while (v49 != v51);
                    v51 = *a3;
                    goto LABEL_81;
                  }
                  v60 = (char *)v49 - &v57[v52];
                  v6 = v79;
                  if (v60 < 0x20)
                    goto LABEL_79;
                  v61 = (v59 >> 3) + 1;
                  v62 = &v57[8 * v53 - 16];
                  v63 = (__int128 *)(v49 - 2);
                  v64 = v61 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v65 = *v63;
                    *(v62 - 1) = *(v63 - 1);
                    *v62 = v65;
                    v62 -= 2;
                    v63 -= 2;
                    v64 -= 4;
                  }
                  while (v64);
                  v58 -= v61 & 0x3FFFFFFFFFFFFFFCLL;
                  v49 -= v61 & 0x3FFFFFFFFFFFFFFCLL;
                  if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_79;
                }
LABEL_81:
                *a3 = v58;
                a3[1] = v50;
                a3[2] = (char **)&v57[8 * v56];
                if (v51)
                  operator delete(v51);
LABEL_83:
                a3[1] = v50;
                v67 = v81;
                if (!v81)
                  goto LABEL_87;
                v68 = (unint64_t *)&v81->__shared_owners_;
                do
                  v69 = __ldaxr(v68);
                while (__stlxr(v69 - 1, v68));
                if (!v69)
                {
                  ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                  std::__shared_weak_count::__release_weak(v67);
                  v70 = v85;
                  if (!v85)
                    goto LABEL_91;
                }
                else
                {
LABEL_87:
                  v70 = v85;
                  if (!v85)
                    goto LABEL_91;
                }
                v71 = (unint64_t *)&v70->__shared_owners_;
                do
                  v72 = __ldaxr(v71);
                while (__stlxr(v72 - 1, v71));
                if (v72)
                {
LABEL_91:
                  v73 = (_QWORD *)v19[1];
                  if (!v73)
                    goto LABEL_97;
                  goto LABEL_92;
                }
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
                v73 = (_QWORD *)v19[1];
                if (!v73)
                {
                  do
                  {
LABEL_97:
                    v74 = (_QWORD *)v19[2];
                    v75 = *v74 == (_QWORD)v19;
                    v19 = v74;
                  }
                  while (!v75);
                  goto LABEL_29;
                }
                do
                {
LABEL_92:
                  v74 = v73;
                  v73 = (_QWORD *)*v73;
                }
                while (v73);
LABEL_29:
                v19 = v74;
              }
              while (v74 != v77);
            }
          }
        }
      }
    }
  }
}

void sub_19F363324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  v8 = *(void **)v6;
  if (*(_QWORD *)v6)
  {
    *(_QWORD *)(v6 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

_QWORD **md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  unsigned __int16 *i;
  unsigned __int16 *v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD *v33[3];
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = (uint64_t *)(a1 + 128);
  v5 = *(_OWORD *)(a1 + 128);
  v7 = (_QWORD *)(a1 + 160);
  v6 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 136) = v6;
  v8 = a1 + 136;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 152) = v5;
  v9 = *(_QWORD *)(a1 + 144);
  v10 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 144) = v10;
  *(_QWORD *)(a1 + 168) = v9;
  v11 = (uint64_t *)(v6 + 16);
  if (!v10)
    v11 = (uint64_t *)(a1 + 128);
  *v11 = v8;
  v12 = (_QWORD *)(*v7 + 16);
  if (!v9)
    v12 = (_QWORD *)(a1 + 152);
  v32 = a1 + 160;
  *v12 = v7;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)v8);
  *v4 = v8;
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  v14 = *(unsigned __int16 **)(v8 + 184);
  for (i = *(unsigned __int16 **)(v8 + 192); v14 != i; ++v14)
  {
    v16 = *v14;
    v17 = *a2;
    if ((v18 & 1) == 0
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
    }
    v19 = *(unsigned __int16 **)(v17 + 48);
    v20 = *(unsigned __int16 **)(v17 + 56);
    if (v19 == v20)
      goto LABEL_7;
    v21 = *(unsigned __int16 **)(v17 + 48);
    while (*v21 != v16)
    {
      v21 += 16;
      if (v21 == v20)
        goto LABEL_7;
    }
    if (v21 == v20)
    {
LABEL_7:
      v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v19 != v16)
      {
        v19 += 16;
        if (v19 == v20)
        {
          v19 = *(unsigned __int16 **)(v17 + 56);
          break;
        }
      }
      v15 = (uint64_t *)(v19 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (_QWORD *)*v15, v15 + 1);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 184));
  *(_QWORD *)(a1 + 176) = a1 + 184;
  v22 = (_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v23 = (_QWORD *)(a1 + 208);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(a1 + 208));
  *(_QWORD *)(a1 + 200) = a1 + 208;
  v24 = (_QWORD *)(a1 + 200);
  *v23 = 0;
  v24[2] = 0;
  v25 = *(v24 - 9);
  v26 = *(v24 - 6);
  v27 = *v22;
  v38 = v8;
  v39 = v25;
  v36 = v32;
  v37 = v26;
  v34 = v22;
  v35 = v27;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v33, (uint64_t)&v39, &v38, (uint64_t)&v37, &v36, &v34);
  v28 = *(v24 - 6);
  v29 = *(v24 - 9);
  v30 = *v24;
  v38 = v32;
  v39 = v28;
  v36 = v8;
  v37 = v29;
  v34 = v24;
  v35 = v30;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v33, (uint64_t)&v39, &v38, (uint64_t)&v37, &v36, &v34);
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  _QWORD *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  float v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  _QWORD *v25;
  unint64_t v26;
  float32x2_t *v27;
  float64x2_t v28[8];

  v3 = *(_QWORD **)(a3 + 8);
  v4 = (int8x8_t)v3[1];
  if (!*(_QWORD *)&v4)
    goto LABEL_24;
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v4 <= 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *(_QWORD **)(*v3 + 8 * v6);
  if (!v7)
    goto LABEL_24;
  v8 = (_QWORD *)*v7;
  if (!v8)
    goto LABEL_24;
  if (v5.u32[0] < 2uLL)
  {
    v9 = *(_QWORD *)&v4 - 1;
    while (1)
    {
      v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46)
          goto LABEL_22;
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v10 = v8[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_24;
LABEL_11:
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_24;
  }
  if (v8[2] != 0x1AF456233693CD46)
    goto LABEL_11;
LABEL_22:
  v12 = v8[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v13 = 0;
LABEL_25:
  v14 = *a2;
  v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      v16 = *v14++;
      v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      v18 = vcvt_f32_f64(v28[1]);
      v19 = vcvt_f32_f64(v28[2]);
      v20 = vcvt_f32_f64(v28[3]);
      v21 = vcvt_f32_f64(v28[4]);
      v22 = vcvt_f32_f64(v28[5]);
      v23 = vcvt_f32_f64(v28[6]);
      v24 = vcvt_f32_f64(v28[7]);
      v25 = *(_QWORD **)(v16 + 216);
      v26 = v25[1];
      v27 = (float32x2_t *)v25[9];
      *v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26)
        v26 = v25[8];
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

void md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::renderablesWillEnterView(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *a3;
  v4 = a3[1];
  if (*a3 != v4)
  {
    do
    {
      v5 = *v3++;
      md::PolygonRenderLayer<(md::MapDataType)41,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(_QWORD **)(v5 + 384), 1);
    }
    while (v3 != v4);
  }
}

void md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::renderablesWillEnterView(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *a3;
  v4 = a3[1];
  if (*a3 != v4)
  {
    do
    {
      v5 = *v3++;
      md::PolygonRenderLayer<(md::MapDataType)1,md::MapTileDataRenderable<md::PolygonTileData>>::updateStyles(*(_QWORD **)(v5 + 384), 1);
    }
    while (v3 != v4);
  }
}

void md::GlobeSkyRenderLayer::~GlobeSkyRenderLayer(md::GlobeSkyRenderLayer *this)
{
  md::GlobeSkyRenderResources *v2;
  void *v3;

  *(_QWORD *)this = &off_1E4297268;
  v2 = (md::GlobeSkyRenderResources *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
  {
    md::GlobeSkyRenderResources::~GlobeSkyRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  *(_QWORD *)this = off_1E428C468;
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1A1AF4E00);
}

{
  md::GlobeSkyRenderResources *v2;
  void *v3;

  *(_QWORD *)this = &off_1E4297268;
  v2 = (md::GlobeSkyRenderResources *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
  {
    md::GlobeSkyRenderResources::~GlobeSkyRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  *(_QWORD *)this = off_1E428C468;
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

void ggl::GlobeAtmosphereShader::typedReflection(ggl::GlobeAtmosphereShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::GlobeAtmosphereShader::typedReflection(void)::ref = (uint64_t)"GlobeAtmosphereShader";
      ggl::globeAtmosphereShaderVertexFunctionDescriptor(v2);
      qword_1ECE44330 = (uint64_t)&ggl::globeAtmosphereShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<28ul>("GlobeAtmosphereShaderVertex");
      dword_1ECE44338 = (int)v3;
      ggl::globeAtmosphereShaderFragmentFunctionDescriptor(v3);
      qword_1ECE44340 = (uint64_t)&ggl::globeAtmosphereShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE44348 = ggl::crc32::compute<30ul>("GlobeAtmosphereShaderFragment");
      qword_1ECE44350 = (uint64_t)ggl::globeAtmosphereShaderShaderConstants(void)::ref;
      unk_1ECE44358 = 2;
      qword_1ECE44360 = (uint64_t)&ggl::globeAtmosphereShaderShaderTextures(void)::ref;
      unk_1ECE44368 = 0;
      qword_1ECE44370 = (uint64_t)&ggl::globeAtmosphereShaderShaderSamplers(void)::ref;
      unk_1ECE44378 = 0;
    }
  }
}

void ggl::globeAtmosphereShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::globeAtmosphereShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("GlobeAtmosphereShaderFragment");
      *(_DWORD *)algn_1ECE44B54 = 1;
      qword_1ECE44B58 = (uint64_t)"GlobeAtmosphereShader";
      unk_1ECE44B60 = 0;
      qword_1ECE44B68 = 0;
      unk_1ECE44B70 = &ggl::globeAtmosphereShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE44B78 = 2;
      unk_1ECE44B80 = &ggl::globeAtmosphereShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE44B88 = 0;
      unk_1ECE44B90 = &ggl::globeAtmosphereShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE44B98 = 0;
      unk_1ECE44BA0 = &ggl::globeAtmosphereShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE44BB0 = 0;
      unk_1ECE44BB8 = 0;
      qword_1ECE44BA8 = 0;
    }
  }
}

void ggl::globeAtmosphereShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::globeAtmosphereShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("GlobeAtmosphereShaderVertex");
      *(_DWORD *)algn_1ECE43E8C = 0;
      qword_1ECE43E90 = (uint64_t)"GlobeAtmosphereShader";
      unk_1ECE43E98 = ggl::globeAtmosphereShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE43EA0 = 1;
      unk_1ECE43EA8 = &ggl::globeAtmosphereShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE43EB0 = 2;
      unk_1ECE43EB8 = &ggl::globeAtmosphereShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE43EC0 = 0;
      unk_1ECE43EC8 = &ggl::globeAtmosphereShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE43ED0 = 0;
      unk_1ECE43ED8 = &ggl::globeAtmosphereShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE43EE8 = 0;
      unk_1ECE43EF0 = 0;
      qword_1ECE43EE0 = 0;
    }
  }
}

void ggl::GlobeStarsShader::typedReflection(ggl::GlobeStarsShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::GlobeStarsShader::typedReflection(void)::ref = (uint64_t)"GlobeStarsShader";
      ggl::globeStarsShaderVertexFunctionDescriptor(v2);
      qword_1ECE440B0 = (uint64_t)&ggl::globeStarsShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<23ul>("GlobeStarsShaderVertex");
      dword_1ECE440B8 = (int)v3;
      ggl::globeStarsShaderFragmentFunctionDescriptor(v3);
      qword_1ECE440C0 = (uint64_t)&ggl::globeStarsShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE440C8 = ggl::crc32::compute<25ul>("GlobeStarsShaderFragment");
      qword_1ECE440D0 = (uint64_t)ggl::globeStarsShaderShaderConstants(void)::ref;
      unk_1ECE440D8 = 1;
      qword_1ECE440E0 = (uint64_t)&ggl::globeStarsShaderShaderTextures(void)::ref;
      unk_1ECE440E8 = 0;
      qword_1ECE440F0 = (uint64_t)&ggl::globeStarsShaderShaderSamplers(void)::ref;
      unk_1ECE440F8 = 0;
    }
  }
}

void ggl::globeStarsShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::globeStarsShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("GlobeStarsShaderFragment");
      *(_DWORD *)algn_1ECE445D4 = 1;
      qword_1ECE445D8 = (uint64_t)"GlobeStarsShader";
      unk_1ECE445E0 = 0;
      qword_1ECE445E8 = 0;
      unk_1ECE445F0 = &ggl::globeStarsShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE445F8 = 0;
      unk_1ECE44600 = &ggl::globeStarsShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE44608 = 0;
      unk_1ECE44610 = &ggl::globeStarsShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE44618 = 0;
      unk_1ECE44620 = &ggl::globeStarsShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE44630 = 0;
      unk_1ECE44638 = 0;
      qword_1ECE44628 = 0;
    }
  }
}

void ggl::globeStarsShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::globeStarsShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<23ul>("GlobeStarsShaderVertex");
      *(_DWORD *)algn_1ECE444EC = 0;
      qword_1ECE444F0 = (uint64_t)"GlobeStarsShader";
      unk_1ECE444F8 = ggl::globeStarsShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE44500 = 1;
      unk_1ECE44508 = &ggl::globeStarsShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE44510 = 1;
      unk_1ECE44518 = &ggl::globeStarsShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE44520 = 0;
      unk_1ECE44528 = &ggl::globeStarsShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE44530 = 0;
      unk_1ECE44538 = &ggl::globeStarsShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE44548 = 0;
      unk_1ECE44550 = 0;
      qword_1ECE44540 = 0;
    }
  }
}

uint64_t grl::TextLayerRenderer::TextLayerRenderer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int16 a6)
{
  _OWORD *v11;
  std::string::size_type size;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CTFont *v16;
  NSObject *v17;
  CTFontRef CopyWithAttributes;
  const __CTFont *v19;
  _OWORD *v20;
  std::string::size_type v21;
  float v22;
  CTFontRef v23;
  double v24;
  const __CTFont *v25;
  uint64_t v26;
  NSObject *v27;
  const __CTLine *v28;
  float v29;
  float v30;
  float v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t **v38;
  const __CTLine *v39;
  float v40;
  NSObject *v41;
  const __CTLine *v42;
  float OpticalBounds;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t **v50;
  const __CTLine *v51;
  float TextDescent;
  NSObject *v53;
  unsigned __int16 v55;
  char v56;
  uint64_t (**v57)();
  CFTypeRef cf;
  uint64_t (**v59)();
  CFTypeRef v60;
  uint64_t (**v61)();
  CFTypeRef v62;
  uint64_t (**v63)();
  CFTypeRef v64;
  uint64_t (**v65)();
  CFTypeRef v66;
  uint64_t (**v67)();
  CFTypeRef v68;
  unsigned __int16 v69;
  std::string v70;
  int v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  *(_WORD *)(a1 + 8) = 3;
  *(_BYTE *)(a1 + 10) = 1;
  *(_QWORD *)a1 = &off_1E42C2648;
  grl::codec::TextLayerData::TextLayerData((grl::codec::TextLayerData *)(a1 + 16), (const grl::codec::TextLayerData *)a2);
  *(_BYTE *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 312) = &off_1E42B4990;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 336) = &off_1E42B4990;
  *(_QWORD *)(a1 + 344) = 0;
  v11 = (_OWORD *)(a2 + 144);
  if (*(char *)(a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)(a2 + 144), *(_QWORD *)(a2 + 152));
  }
  else
  {
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = *v11;
    v70.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 160);
  }
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v70.__r_.__value_.__l.__size_;
    operator delete(v70.__r_.__value_.__l.__data_);
    if (!size)
      return a1;
  }
  else if (!*((_BYTE *)&v70.__r_.__value_.__s + 23))
  {
    return a1;
  }
  v55 = a6;
  if (*(char *)(a2 + 63) < 0)
    std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  else
    v70 = *(std::string *)(a2 + 40);
  v13 = a5;
  v14 = std::__tree<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::__map_value_compare<std::string,std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::less<std::string>,true>,geo::StdAllocator<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>>::find<std::string>(a4, (const void **)&v70.__r_.__value_.__l.__data_);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
  v15 = a4 + 8;
  if (a4 + 8 != v14)
  {
    v16 = *(const __CTFont **)(v14 + 64);
    if (v16)
      goto LABEL_21;
  }
  if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
    dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
  v17 = GEOGetGeoResourceLibRendererLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
  {
    LODWORD(v70.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + 4) = (std::string::size_type)"fontIt != fonts.end() && fontIt->second.get()";
    WORD2(v70.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v70.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
    HIWORD(v70.__r_.__value_.__r.__words[2]) = 1024;
    v71 = 528;
    _os_log_impl(&dword_19F029000, v17, OS_LOG_TYPE_ERROR, "TextLayerRender: Digit font not given.: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v70, 0x1Cu);
  }
  if (v15 == v14 || (v16 = *(const __CTFont **)(v14 + 64)) == 0)
  {
    v19 = 0;
  }
  else
  {
LABEL_21:
    CopyWithAttributes = CTFontCreateCopyWithAttributes(v16, *(float *)(a2 + 64), 0, 0);
    v19 = CopyWithAttributes;
    if (CopyWithAttributes)
    {
      CFRetain(CopyWithAttributes);
      v56 = 0;
      goto LABEL_25;
    }
  }
  v56 = 1;
LABEL_25:
  v20 = (_OWORD *)(a2 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = *v20;
    v70.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 104);
  }
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
  {
    v21 = v70.__r_.__value_.__l.__size_;
    operator delete(v70.__r_.__value_.__l.__data_);
    if (v21)
      goto LABEL_30;
  }
  else if (*((_BYTE *)&v70.__r_.__value_.__s + 23))
  {
LABEL_30:
    if (*(char *)(a2 + 111) < 0)
    {
      std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)(a2 + 88), *(_QWORD *)(a2 + 96));
    }
    else
    {
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = *v20;
      v70.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 104);
    }
    v26 = std::__tree<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::__map_value_compare<std::string,std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,std::less<std::string>,true>,geo::StdAllocator<std::__value_type<std::string,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,grl::Allocator>>::find<std::string>(a4, (const void **)&v70.__r_.__value_.__l.__data_);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v70.__r_.__value_.__l.__data_);
    if (v15 == v26 || (v25 = *(const __CTFont **)(v26 + 64)) == 0)
    {
      if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
      v27 = GEOGetGeoResourceLibRendererLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v70.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + 4) = (std::string::size_type)"nonDigitFontIt != fonts.end() && nonDigitFontIt->second.get()";
        WORD2(v70.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v70.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
        HIWORD(v70.__r_.__value_.__r.__words[2]) = 1024;
        v71 = 544;
        _os_log_impl(&dword_19F029000, v27, OS_LOG_TYPE_ERROR, "TextLayerRender: Non-digit font not given.: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v70, 0x1Cu);
      }
      v23 = v19;
      if (v15 == v26)
        goto LABEL_49;
      v25 = *(const __CTFont **)(v26 + 64);
      v23 = v19;
      if (!v25)
        goto LABEL_49;
    }
    v24 = *(float *)(a2 + 112);
    goto LABEL_47;
  }
  v22 = *(float *)(a2 + 112);
  v23 = v19;
  if (*(float *)(a2 + 64) != v22)
  {
    v24 = v22;
    v25 = v19;
LABEL_47:
    v23 = CTFontCreateCopyWithAttributes(v25, v24, 0, 0);
    if ((v56 & 1) == 0)
      CFRelease(v19);
  }
LABEL_49:
  LODWORD(v70.__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 32);
  grl::createCGColor((__int32 *)&v70, &v67);
  LODWORD(v70.__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 84);
  grl::createCGColor((__int32 *)&v70, &v65);
  LODWORD(v70.__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 68);
  grl::createCGColor((__int32 *)&v70, &v63);
  LODWORD(v70.__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 116);
  grl::createCGColor((__int32 *)&v70, &v61);
  if (*(char *)(a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)(a2 + 144), *(_QWORD *)(a2 + 152));
  }
  else
  {
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = *v11;
    v70.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 160);
  }
  grl::createCTLine((grl::Allocator *)&v70, (uint64_t)v19, (uint64_t)v23, v68, v66, 0, 0, &v59, 0.0, 0.0, 0.0, 0.0);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
  if (v60)
  {
    geo::_retain_ptr<__CTLine const*,geo::_retain_cf<__CTLine const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::operator=(a1 + 312, v60);
    v29 = *(float *)(a2 + 72);
    v30 = *(float *)(a2 + 120);
    if (v29 > 0.0 || v30 > 0.0)
    {
      if (*(char *)(a2 + 167) < 0)
      {
        std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)(a2 + 144), *(_QWORD *)(a2 + 152));
        v29 = *(float *)(a2 + 72);
        v30 = *(float *)(a2 + 120);
      }
      else
      {
        *(_OWORD *)&v70.__r_.__value_.__l.__data_ = *v11;
        v70.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 160);
      }
      grl::createCTLine((grl::Allocator *)&v70, (uint64_t)v19, (uint64_t)v23, v68, v66, (uint64_t)v64, (uint64_t)v62, &v57, v29, v30, *(float *)(a2 + 64), *(float *)(a2 + 112));
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      if (cf)
      {
        geo::_retain_ptr<__CTLine const*,geo::_retain_cf<__CTLine const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::operator=(a1 + 336, cf);
        OpticalBounds = grl::getOpticalBounds((grl *)cf, v42);
        v45 = v44;
        v47 = v46;
        v49 = v48;
        v69 = v55;
        v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
        v50 = std::__tree<std::__value_type<unsigned short,gm::Box<float,2>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,gm::Box<float,2>>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,gm::Box<float,2>>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)(v13 + 32), &v69, (uint64_t)&std::piecewise_construct, &v70);
        *((float *)v50 + 8) = OpticalBounds;
        *((_DWORD *)v50 + 9) = v45;
        *((_DWORD *)v50 + 10) = v47;
        *((_DWORD *)v50 + 11) = v49;
        TextDescent = grl::getTextDescent((grl *)cf, v51);
        v69 = v55;
        v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
        *((float *)std::__tree<std::__value_type<unsigned short,float>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,float>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,float>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)(v13 + 64), &v69, (uint64_t)&std::piecewise_construct, &v70)+ 8) = TextDescent;
      }
      else
      {
        if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
        v53 = GEOGetGeoResourceLibRendererLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v70.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + 4) = (std::string::size_type)"!GRL_UNIQUE_NAME(didTriggerAssert)";
          WORD2(v70.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v70.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
          HIWORD(v70.__r_.__value_.__r.__words[2]) = 1024;
          v71 = 568;
          _os_log_impl(&dword_19F029000, v53, OS_LOG_TYPE_ERROR, "Failed to generate text line for text layer.: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v70, 0x1Cu);
        }
      }
      v57 = &off_1E42B4990;
      if (cf)
        CFRelease(cf);
    }
    else
    {
      v31 = grl::getOpticalBounds((grl *)v60, v28);
      v33 = v32;
      v35 = v34;
      v37 = v36;
      LOWORD(v57) = v55;
      v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
      v38 = std::__tree<std::__value_type<unsigned short,gm::Box<float,2>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,gm::Box<float,2>>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,gm::Box<float,2>>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)(v13 + 32), (unsigned __int16 *)&v57, (uint64_t)&std::piecewise_construct, &v70);
      *((float *)v38 + 8) = v31;
      *((_DWORD *)v38 + 9) = v33;
      *((_DWORD *)v38 + 10) = v35;
      *((_DWORD *)v38 + 11) = v37;
      v40 = grl::getTextDescent((grl *)v60, v39);
      LOWORD(v57) = v55;
      v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
      *((float *)std::__tree<std::__value_type<unsigned short,float>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,float>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,float>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)(v13 + 64), (unsigned __int16 *)&v57, (uint64_t)&std::piecewise_construct, &v70)+ 8) = v40;
    }
  }
  else
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
    v41 = GEOGetGeoResourceLibRendererLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v70.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + 4) = (std::string::size_type)"!GRL_UNIQUE_NAME(didTriggerAssert)";
      WORD2(v70.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v70.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/LayerRenderer.cpp";
      HIWORD(v70.__r_.__value_.__r.__words[2]) = 1024;
      v71 = 560;
      _os_log_impl(&dword_19F029000, v41, OS_LOG_TYPE_ERROR, "Failed to generate text line for text layer.: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v70, 0x1Cu);
    }
  }
  v59 = &off_1E42B4990;
  if (v60)
    CFRelease(v60);
  v61 = &off_1E42B4850;
  if (v62)
    CFRelease(v62);
  v63 = &off_1E42B4850;
  if (v64)
    CFRelease(v64);
  v65 = &off_1E42B4850;
  if (v66)
    CFRelease(v66);
  v67 = &off_1E42B4850;
  if (v68)
    CFRelease(v68);
  if (v23)
    CFRelease(v23);
  if ((v56 & 1) == 0)
    CFRelease(v19);
  return a1;
}

void grl::createCGColor(__int32 *a1@<X0>, _QWORD *a2@<X8>)
{
  CGColorSpace *v4;
  uint8x8_t v5;
  CGColorSpace *v6;
  float32x4_t v7;
  CGColorRef v8;
  NSObject *v9;
  NSObject *v10;
  uint8_t v11[16];
  CGFloat components[2];
  float64x2_t v13;

  v4 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
  if (v4)
  {
    v6 = v4;
    v5.i32[0] = *a1;
    v7 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v5))), (float32x4_t)vdupq_n_s32(0x3B808081u));
    *(float64x2_t *)components = vcvtq_f64_f32(*(float32x2_t *)v7.f32);
    v13 = vcvt_hight_f64_f32(v7);
    v8 = CGColorCreate(v4, components);
    if (!v8)
    {
      if (GEOGetGeoResourceLibCoreGraphicsLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibCoreGraphicsLog::onceToken, &__block_literal_global_28_0);
      v9 = GEOGetGeoResourceLibCoreGraphicsLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreGraphicsLog::log, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v11 = 0;
        _os_log_impl(&dword_19F029000, v9, OS_LOG_TYPE_ERROR, "Failed to create a CGColor.", v11, 2u);
      }
    }
    *a2 = &off_1E42B4850;
    a2[1] = v8;
    CFRelease(v6);
  }
  else
  {
    if (GEOGetGeoResourceLibCoreGraphicsLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibCoreGraphicsLog::onceToken, &__block_literal_global_28_0);
    v10 = GEOGetGeoResourceLibCoreGraphicsLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreGraphicsLog::log, OS_LOG_TYPE_ERROR))
    {
      LOWORD(components[0]) = 0;
      _os_log_impl(&dword_19F029000, v10, OS_LOG_TYPE_ERROR, "Nullptr color space being used to generate a CGColor.", (uint8_t *)components, 2u);
    }
    *a2 = &off_1E42B4850;
    a2[1] = 0;
  }
}

uint64_t **std::__tree<std::__value_type<unsigned short,float>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,float>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,float>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  uint64_t v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int16 *)v6 + 14);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 40, 8);
    *(_WORD *)(v11 + 28) = **a4;
    *(_DWORD *)(v11 + 32) = 0;
    std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **std::__tree<std::__value_type<unsigned short,gm::Box<float,2>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,gm::Box<float,2>>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,gm::Box<float,2>>,grl::Allocator>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  uint64_t v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int16 *)v6 + 14);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 48, 8);
    *(_WORD *)(v11 + 28) = **a4;
    std::__tree<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,std::less<unsigned short>,true>,geo::StdAllocator<std::__value_type<unsigned short,grl::codec::ResourcePack::ChapterInfo>,grl::Allocator>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

float grl::getOpticalBounds(grl *this, const __CTLine *a2)
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  float MinX;
  NSObject *v7;
  uint8_t v9[16];
  CGRect BoundsWithOptions;
  CGRect v11;
  CGRect v12;
  CGRect v13;

  if (this)
  {
    BoundsWithOptions = CTLineGetBoundsWithOptions(this, 0x10uLL);
    x = BoundsWithOptions.origin.x;
    y = BoundsWithOptions.origin.y;
    width = BoundsWithOptions.size.width;
    height = BoundsWithOptions.size.height;
    MinX = CGRectGetMinX(BoundsWithOptions);
    v11.origin.x = x;
    v11.origin.y = y;
    v11.size.width = width;
    v11.size.height = height;
    CGRectGetMinY(v11);
    v12.origin.x = x;
    v12.origin.y = y;
    v12.size.width = width;
    v12.size.height = height;
    CGRectGetMaxX(v12);
    v13.origin.x = x;
    v13.origin.y = y;
    v13.size.width = width;
    v13.size.height = height;
    CGRectGetMaxY(v13);
  }
  else
  {
    if (GEOGetGeoResourceLibCoreGraphicsLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibCoreGraphicsLog::onceToken, &__block_literal_global_28_0);
    v7 = GEOGetGeoResourceLibCoreGraphicsLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreGraphicsLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_19F029000, v7, OS_LOG_TYPE_ERROR, "Input CTLine must be a valid pointer to get font bounds.", v9, 2u);
    }
    return 0.0;
  }
  return MinX;
}

float grl::getTextDescent(grl *this, const __CTLine *a2)
{
  float v2;
  float v3;
  NSObject *v4;
  uint64_t v6;
  CGFloat descent;
  CGFloat ascent[2];

  if (this)
  {
    descent = 0.0;
    ascent[0] = 0.0;
    v6 = 0;
    CTLineGetTypographicBounds(this, ascent, &descent, (CGFloat *)&v6);
    v2 = descent;
    return fabsf(v2);
  }
  else
  {
    if (GEOGetGeoResourceLibCoreGraphicsLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibCoreGraphicsLog::onceToken, &__block_literal_global_28_0);
    v4 = GEOGetGeoResourceLibCoreGraphicsLog::log;
    v3 = 0.0;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreGraphicsLog::log, OS_LOG_TYPE_ERROR))
    {
      LOWORD(ascent[0]) = 0;
      _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_ERROR, "Input CTLine must be a valid pointer to get text descent.", (uint8_t *)ascent, 2u);
    }
  }
  return v3;
}

void grl::createCTLine(grl::Allocator *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const void *a4@<X3>, const void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>, float a9@<S0>, float a10@<S1>, float a11@<S2>, float a12@<S3>)
{
  uint64_t v13;
  grl::Allocator *v23;
  _QWORD *v24;
  _QWORD *v25;
  const void **v26;
  char *v27;
  _QWORD *v28;
  const void **v29;
  char *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  const void **v34;
  char *v35;
  _QWORD *v36;
  const void **v37;
  const void **v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  NSObject *v45;
  char *v46;
  const void **v47;
  const void **v48;
  const void **v49;
  const void **v50;
  const void *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const void **v57;
  const void *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  const void **v67;
  const void **v68;
  char *v69;
  const void **v70;
  const void *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const void **v77;
  const void *v78;
  uint64_t *v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  const void **v88;
  uint64_t v89;
  CFNumberRef *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  const void **v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  const void **v111;
  const void *v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  CFNumberRef v117;
  const char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  CFNumberRef *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  const void **v144;
  const void *v145;
  CFIndex v146;
  const char *v147;
  CFStringRef v148;
  const __CFString *v149;
  CFIndex v150;
  CFDictionaryRef v151;
  const __CFDictionary *v152;
  CFDictionaryRef v153;
  const __CFDictionary *v154;
  const __CFAttributedString *v155;
  CFMutableAttributedStringRef MutableCopy;
  __CFAttributedString *v157;
  CFIndex v158;
  uint64_t v159;
  unsigned int CharacterAtIndex;
  CTLineRef v161;
  NSObject *v162;
  const char *v163;
  NSObject *v164;
  const char *v165;
  NSObject *v166;
  const char *v167;
  NSObject *v168;
  const char *v169;
  NSObject *v170;
  const char *v171;
  NSObject *v172;
  const char *v173;
  _QWORD *v174;
  const void *v175;
  const char *v176;
  _QWORD *v177;
  uint64_t v178;
  CFNumberRef v180;
  const __CFNumber *v181;
  CFNumberRef v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  grl::Allocator *v187;
  uint64_t v188;
  grl::Allocator *v189;
  grl::Allocator *v190;
  const void **cf;
  CFTypeRef cfa;
  char *cfb;
  char *cfc;
  const __CFAttributedString *cfd;
  const void *v196;
  char *v197;
  unint64_t v198;
  char *v199;
  uint8_t buf[4];
  const char *v201;
  uint64_t v202;
  CFRange v203;

  v202 = *MEMORY[0x1E0C80C00];
  v13 = *((unsigned __int8 *)a1 + 23);
  if ((v13 & 0x80u) != 0)
    v13 = *((_QWORD *)a1 + 1);
  if (v13)
  {
    v174 = a8;
    v23 = (grl::Allocator *)grl::Allocator::instance(a1);
    v190 = (grl::Allocator *)grl::Allocator::instance(v23);
    v189 = (grl::Allocator *)grl::Allocator::instance(v190);
    v188 = grl::Allocator::instance(v189);
    v24 = (_QWORD *)MEMORY[0x1E0CA8188];
    v187 = v23;
    v175 = a5;
    v176 = (const char *)a1;
    if (a2)
    {
      v25 = (_QWORD *)(*(uint64_t (**)(grl::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, 8, 8);
      v26 = (const void **)v25;
      v27 = (char *)(v25 + 1);
      if (v25)
        *v25 = *v24;
      v28 = (_QWORD *)(*(uint64_t (**)(grl::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v190 + 16))(v190, 8, 8);
      v29 = (const void **)v28;
      v30 = (char *)(v28 + 1);
      if (v28)
        *v28 = a2;
      v31 = v27;
      if (a3)
      {
LABEL_10:
        v32 = v31;
        v33 = (_QWORD *)(*(uint64_t (**)(grl::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v189 + 16))(v189, 8, 8);
        v34 = (const void **)v33;
        v35 = (char *)(v33 + 1);
        if (v33)
          *v33 = *v24;
        v36 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v188 + 16))(v188, 8, 8);
        v37 = (const void **)v36;
        v177 = v36 + 1;
        if (v36)
          *v36 = a3;
        v31 = v32;
        if (a4)
        {
LABEL_15:
          v38 = (const void **)v31;
          v39 = v31 - (char *)v26;
          v40 = (v31 - (char *)v26) >> 3;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61)
            goto LABEL_333;
          v196 = a4;
          if (v39 >> 2 > v41)
            v41 = v39 >> 2;
          v42 = (unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v41;
          if (v42)
          {
            v43 = (*(uint64_t (**)(grl::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v187 + 16))(v187, 8 * v42, 8);
            v44 = (_QWORD *)(v43 + 8 * v40);
            v199 = (char *)(v43 + 8 * v42);
            if (v43)
              *v44 = *MEMORY[0x1E0CA8550];
          }
          else
          {
            v199 = 0;
            v44 = (_QWORD *)(8 * v40);
          }
          v49 = v38;
          v48 = (const void **)v44;
          if (v38 != v26)
          {
            v50 = v38;
            v48 = (const void **)v44;
            do
            {
              v51 = *--v50;
              *--v48 = v51;
            }
            while (v50 != v26);
            v49 = v26;
          }
          if (v49)
            (*(void (**)(grl::Allocator *, const void **, int64_t))(*(_QWORD *)v187 + 40))(v187, v49, (char *)v38 - (char *)v49);
          v52 = v30 - (char *)v29;
          v53 = (v30 - (char *)v29) >> 3;
          v54 = v53 + 1;
          if ((unint64_t)(v53 + 1) >> 61)
            goto LABEL_333;
          if (v52 >> 2 > v54)
            v54 = v52 >> 2;
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
            v55 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v55 = v54;
          if (v55)
          {
            v56 = (*(uint64_t (**)(grl::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v190 + 16))(v190, 8 * v55, 8);
            v47 = (const void **)(v56 + 8 * v53);
            v198 = v56 + 8 * v55;
            if (v56)
              *v47 = v196;
          }
          else
          {
            v198 = 0;
            v47 = (const void **)(8 * v53);
          }
          v31 = (char *)(v44 + 1);
          v46 = (char *)(v47 + 1);
          if (v30 == (char *)v29)
          {
            v29 = (const void **)v30;
            if (v30)
            {
LABEL_53:
              v59 = v31;
              (*(void (**)(grl::Allocator *, const void **, int64_t))(*(_QWORD *)v190 + 40))(v190, v29, v30 - (char *)v29);
              v31 = v59;
            }
          }
          else
          {
            v57 = (const void **)v30;
            do
            {
              v58 = *--v57;
              *--v47 = v58;
            }
            while (v57 != v29);
            if (v29)
              goto LABEL_53;
          }
LABEL_54:
          cf = (const void **)v31;
          if (!v175)
          {
            v66 = v177;
            v184 = (unint64_t)v177;
            v67 = v37;
            v197 = v35;
            v68 = v34;
LABEL_90:
            v79 = (uint64_t *)MEMORY[0x1E0CA85C8];
            if (a6)
            {
              v80 = *MEMORY[0x1E0CA85C8];
              if (v31 >= v199)
              {
                v83 = (v31 - (char *)v48) >> 3;
                v84 = v83 + 1;
                if ((unint64_t)(v83 + 1) >> 61)
                  goto LABEL_333;
                if ((v199 - (char *)v48) >> 2 > v84)
                  v84 = (v199 - (char *)v48) >> 2;
                if ((unint64_t)(v199 - (char *)v48) >= 0x7FFFFFFFFFFFFFF8)
                  v85 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v85 = v84;
                if (v85)
                {
                  v86 = (*(uint64_t (**)(grl::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v187 + 16))(v187, 8 * v85, 8);
                  v87 = (_QWORD *)(v86 + 8 * v83);
                  v85 = v86 + 8 * v85;
                  if (v86)
                    *v87 = v80;
                }
                else
                {
                  v87 = (_QWORD *)(8 * v83);
                }
                v88 = cf;
                v81 = (char *)(v87 + 1);
                if (cf != v48)
                {
                  do
                  {
                    v89 = (uint64_t)*--v88;
                    *--v87 = v89;
                  }
                  while (v88 != v48);
                  v88 = v48;
                }
                v48 = (const void **)v87;
                if (v88)
                  (*(void (**)(grl::Allocator *, const void **, int64_t))(*(_QWORD *)v187 + 40))(v187, v88, v199 - (char *)v88);
                v199 = (char *)v85;
              }
              else
              {
                if (v31)
                  *(_QWORD *)v31 = v80;
                v81 = v31 + 8;
              }
              if ((unint64_t)v46 >= v198)
              {
                v91 = (v46 - (char *)v47) >> 3;
                v92 = v91 + 1;
                if ((unint64_t)(v91 + 1) >> 61)
                  goto LABEL_333;
                if ((uint64_t)(v198 - (_QWORD)v47) >> 2 > v92)
                  v92 = (uint64_t)(v198 - (_QWORD)v47) >> 2;
                if (v198 - (unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
                  v93 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v93 = v92;
                if (v93)
                {
                  v94 = (*(uint64_t (**)(grl::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v190 + 16))(v190, 8 * v93, 8);
                  v95 = (_QWORD *)(v94 + 8 * v91);
                  v93 = v94 + 8 * v93;
                  if (v94)
                    *v95 = a6;
                }
                else
                {
                  v95 = (_QWORD *)(8 * v91);
                }
                v90 = (CFNumberRef *)(v95 + 1);
                if (v46 != (char *)v47)
                {
                  do
                  {
                    v96 = *((_QWORD *)v46 - 1);
                    v46 -= 8;
                    *--v95 = v96;
                  }
                  while (v46 != (char *)v47);
                  v46 = (char *)v47;
                }
                v47 = (const void **)v95;
                if (v46)
                  (*(void (**)(grl::Allocator *, char *, unint64_t))(*(_QWORD *)v190 + 40))(v190, v46, v198 - (_QWORD)v46);
                v198 = v93;
              }
              else
              {
                if (v46)
                  *(_QWORD *)v46 = a6;
                v90 = (CFNumberRef *)(v46 + 8);
              }
              *(float *)buf = (float)(a9 / a11) / 0.01;
              v183 = CFNumberCreate(0, kCFNumberFloatType, buf);
              if (v81 >= v199)
              {
                v97 = (v81 - (char *)v48) >> 3;
                v98 = v97 + 1;
                if ((unint64_t)(v97 + 1) >> 61)
                  goto LABEL_333;
                v99 = v199 - (char *)v48;
                if ((v199 - (char *)v48) >> 2 > v98)
                  v98 = (v199 - (char *)v48) >> 2;
                if (v99 >= 0x7FFFFFFFFFFFFFF8)
                  v100 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v100 = v98;
                if (v100)
                {
                  v178 = *MEMORY[0x1E0CA85D0];
                  cfa = (CFTypeRef)(v199 - (char *)v48);
                  v101 = (*(uint64_t (**)(grl::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v187 + 16))(v187, 8 * v100, 8);
                  v102 = (_QWORD *)(v101 + 8 * v97);
                  v199 = (char *)(v101 + 8 * v100);
                  if (v101)
                    *v102 = v178;
                  v99 = (unint64_t)cfa;
                }
                else
                {
                  v199 = 0;
                  v102 = (_QWORD *)(8 * v97);
                }
                v31 = (char *)(v102 + 1);
                if (v81 == (char *)v48)
                  goto LABEL_150;
                do
                {
                  v103 = *((_QWORD *)v81 - 1);
                  v81 -= 8;
                  *--v102 = v103;
                }
                while (v81 != (char *)v48);
                if (v48)
                {
LABEL_150:
                  v104 = v48;
                  v105 = v31;
                  (*(void (**)(grl::Allocator *, const void **, unint64_t))(*(_QWORD *)v187 + 40))(v187, v104, v99);
                  v31 = v105;
                }
                v48 = (const void **)v102;
              }
              else
              {
                *(_QWORD *)v81 = *MEMORY[0x1E0CA85D0];
                v31 = v81 + 8;
              }
              v82 = v184;
              if ((unint64_t)v90 >= v198)
              {
                v106 = ((char *)v90 - (char *)v47) >> 3;
                v107 = v106 + 1;
                if ((unint64_t)(v106 + 1) >> 61)
                  goto LABEL_333;
                v108 = v198 - (_QWORD)v47;
                if ((uint64_t)(v198 - (_QWORD)v47) >> 2 > v107)
                  v107 = (uint64_t)(v198 - (_QWORD)v47) >> 2;
                if (v108 >= 0x7FFFFFFFFFFFFFF8)
                  v109 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v109 = v107;
                if (v109)
                {
                  cfb = v31;
                  v110 = (*(uint64_t (**)(grl::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v190 + 16))(v190, 8 * v109, 8);
                  v111 = (const void **)(v110 + 8 * v106);
                  v198 = v110 + 8 * v109;
                  if (v110)
                    *v111 = v183;
                  v82 = v184;
                  v31 = cfb;
                }
                else
                {
                  v198 = 0;
                  v111 = (const void **)(8 * v106);
                  v82 = v184;
                }
                if (v90 == (CFNumberRef *)v47)
                  goto LABEL_168;
                do
                {
                  v112 = *--v90;
                  *--v111 = v112;
                }
                while (v90 != (CFNumberRef *)v47);
                if (v47)
                {
LABEL_168:
                  v113 = v108;
                  v114 = v31;
                  (*(void (**)(grl::Allocator *, const void **, unint64_t))(*(_QWORD *)v190 + 40))(v190, v47, v113);
                  v31 = v114;
                }
                v47 = v111;
              }
              else
              {
                *v90 = v183;
              }
              v79 = (uint64_t *)MEMORY[0x1E0CA85C8];
            }
            else
            {
              v183 = 0;
              v82 = v184;
            }
            cfc = v31;
            if (!a7)
            {
              v117 = 0;
              v118 = v176;
LABEL_247:
              if ((unint64_t)((v35 - (char *)v68) >> 3) >= 0x7FFFFFFFFFFFFFFFLL)
                v146 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v146 = (v35 - (char *)v68) >> 3;
              if (v118[23] >= 0)
                v147 = v118;
              else
                v147 = *(const char **)v118;
              v148 = CFStringCreateWithCString(0, v147, 0x8000100u);
              if (v148)
              {
                v149 = v148;
                if ((unint64_t)((cfc - (char *)v48) >> 3) >= 0x7FFFFFFFFFFFFFFFLL)
                  v150 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v150 = (cfc - (char *)v48) >> 3;
                v151 = CFDictionaryCreate(0, v48, v47, v150, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                if (v151)
                {
                  v152 = v151;
                  v153 = CFDictionaryCreate(0, v68, v67, v146, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  if (v153)
                  {
                    v154 = v153;
                    v155 = CFAttributedStringCreate(0, v149, v152);
                    v181 = v117;
                    if (v155)
                    {
                      v186 = v82;
                      cfd = v155;
                      MutableCopy = CFAttributedStringCreateMutableCopy(0, 0, v155);
                      if (MutableCopy)
                      {
                        v157 = MutableCopy;
                        if (CFStringGetLength(v149) >= 1)
                        {
                          v158 = 0;
                          v159 = MEMORY[0x1E0C80978];
                          do
                          {
                            CharacterAtIndex = CFStringGetCharacterAtIndex(v149, v158);
                            if (CharacterAtIndex > 0xFF
                              || (*(_DWORD *)(v159 + 4 * CharacterAtIndex + 60) & 0x400) == 0)
                            {
                              v203.location = v158;
                              v203.length = 1;
                              CFAttributedStringSetAttributes(v157, v203, v154, 0);
                            }
                            ++v158;
                          }
                          while (v158 < CFStringGetLength(v149));
                        }
                        v161 = CTLineCreateWithAttributedString(v157);
                        if (!v161)
                        {
                          if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
                            dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
                          v162 = GEOGetGeoResourceLibCoreFoundationLog::log;
                          if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
                          {
                            if (v176[23] >= 0)
                              v163 = v176;
                            else
                              v163 = *(const char **)v176;
                            *(float *)buf = 4.8149e-34;
                            v201 = v163;
                            _os_log_impl(&dword_19F029000, v162, OS_LOG_TYPE_ERROR, "Failed to create a CFMutableAttributedString for a CTLine for string \"%s\"", buf, 0xCu);
                          }
                        }
                        *v174 = &off_1E42B4990;
                        v174[1] = v161;
                        CFRelease(v157);
                        v82 = v186;
                      }
                      else
                      {
                        if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
                          dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
                        v172 = GEOGetGeoResourceLibCoreFoundationLog::log;
                        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
                        {
                          if (v118[23] >= 0)
                            v173 = v118;
                          else
                            v173 = *(const char **)v118;
                          *(float *)buf = 4.8149e-34;
                          v201 = v173;
                          _os_log_impl(&dword_19F029000, v172, OS_LOG_TYPE_ERROR, "Failed to create a CFMutableAttributedString for a CTLine for string \"%s\"", buf, 0xCu);
                        }
                        *v174 = &off_1E42B4990;
                        v174[1] = 0;
                      }
                      CFRelease(cfd);
                    }
                    else
                    {
                      if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
                        dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
                      v170 = GEOGetGeoResourceLibCoreFoundationLog::log;
                      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
                      {
                        if (v118[23] >= 0)
                          v171 = v118;
                        else
                          v171 = *(const char **)v118;
                        *(float *)buf = 4.8149e-34;
                        v201 = v171;
                        _os_log_impl(&dword_19F029000, v170, OS_LOG_TYPE_ERROR, "Failed to create a CFAttributedString for a CTLine for string \"%s\"", buf, 0xCu);
                      }
                      *v174 = &off_1E42B4990;
                      v174[1] = 0;
                    }
                    v117 = v181;
                    CFRelease(v154);
                  }
                  else
                  {
                    if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
                      dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
                    v168 = GEOGetGeoResourceLibCoreFoundationLog::log;
                    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
                    {
                      if (v118[23] >= 0)
                        v169 = v118;
                      else
                        v169 = *(const char **)v118;
                      *(float *)buf = 4.8149e-34;
                      v201 = v169;
                      _os_log_impl(&dword_19F029000, v168, OS_LOG_TYPE_ERROR, "Failed to create a CFDictionary for a CTLine for string \"%s\"", buf, 0xCu);
                    }
                    *v174 = &off_1E42B4990;
                    v174[1] = 0;
                  }
                  CFRelease(v152);
                }
                else
                {
                  if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
                    dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
                  v166 = GEOGetGeoResourceLibCoreFoundationLog::log;
                  if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
                  {
                    if (v118[23] >= 0)
                      v167 = v118;
                    else
                      v167 = *(const char **)v118;
                    *(float *)buf = 4.8149e-34;
                    v201 = v167;
                    _os_log_impl(&dword_19F029000, v166, OS_LOG_TYPE_ERROR, "Failed to create a CFDictionary to create a CTLine for string \"%s\"", buf, 0xCu);
                  }
                  *v174 = &off_1E42B4990;
                  v174[1] = 0;
                }
                CFRelease(v149);
              }
              else
              {
                if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
                  dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
                v164 = GEOGetGeoResourceLibCoreFoundationLog::log;
                if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
                {
                  if (v118[23] >= 0)
                    v165 = v118;
                  else
                    v165 = *(const char **)v118;
                  *(float *)buf = 4.8149e-34;
                  v201 = v165;
                  _os_log_impl(&dword_19F029000, v164, OS_LOG_TYPE_ERROR, "Failed to create CFString from %s.", buf, 0xCu);
                }
                *v174 = &off_1E42B4990;
                v174[1] = 0;
              }
              if (v183)
                CFRelease(v183);
              if (v117)
                CFRelease(v117);
              if (v67)
                (*(void (**)(uint64_t, const void **, unint64_t))(*(_QWORD *)v188 + 40))(v188, v67, v82 - (_QWORD)v67);
              if (v68)
                (*(void (**)(grl::Allocator *, const void **, int64_t))(*(_QWORD *)v189 + 40))(v189, v68, v197 - (char *)v68);
              if (v47)
                (*(void (**)(grl::Allocator *, const void **, unint64_t))(*(_QWORD *)v190 + 40))(v190, v47, v198 - (_QWORD)v47);
              if (v48)
                (*(void (**)(grl::Allocator *, const void **, int64_t))(*(_QWORD *)v187 + 40))(v187, v48, v199 - (char *)v48);
              return;
            }
            v115 = *v79;
            if (v35 >= v197)
            {
              v119 = (v35 - (char *)v68) >> 3;
              v120 = v119 + 1;
              if ((unint64_t)(v119 + 1) >> 61)
                goto LABEL_333;
              if ((v197 - (char *)v68) >> 2 > v120)
                v120 = (v197 - (char *)v68) >> 2;
              if ((unint64_t)(v197 - (char *)v68) >= 0x7FFFFFFFFFFFFFF8)
                v121 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v121 = v120;
              if (v121)
              {
                v122 = (*(uint64_t (**)(grl::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v189 + 16))(v189, 8 * v121, 8);
                v123 = (_QWORD *)(v122 + 8 * v119);
                v121 = v122 + 8 * v121;
                if (v122)
                  *v123 = v115;
              }
              else
              {
                v123 = (_QWORD *)(8 * v119);
              }
              v116 = (char *)(v123 + 1);
              if (v35 != (char *)v68)
              {
                do
                {
                  v124 = *((_QWORD *)v35 - 1);
                  v35 -= 8;
                  *--v123 = v124;
                }
                while (v35 != (char *)v68);
                v35 = (char *)v68;
              }
              v68 = (const void **)v123;
              if (v35)
                (*(void (**)(grl::Allocator *, char *, int64_t))(*(_QWORD *)v189 + 40))(v189, v35, v197 - v35);
              v197 = (char *)v121;
            }
            else
            {
              if (v35)
                *(_QWORD *)v35 = v115;
              v116 = v35 + 8;
            }
            if ((unint64_t)v66 >= v82)
            {
              v126 = (const void **)v66 - v67;
              v127 = v126 + 1;
              if ((unint64_t)(v126 + 1) >> 61)
                goto LABEL_333;
              if ((uint64_t)(v82 - (_QWORD)v67) >> 2 > v127)
                v127 = (uint64_t)(v82 - (_QWORD)v67) >> 2;
              if (v82 - (unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
                v128 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v128 = v127;
              if (v128)
              {
                v129 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v188 + 16))(v188, 8 * v128, 8);
                v130 = (_QWORD *)(v129 + 8 * v126);
                v128 = v129 + 8 * v128;
                if (v129)
                  *v130 = a7;
              }
              else
              {
                v130 = (_QWORD *)(8 * v126);
              }
              v125 = (CFNumberRef *)(v130 + 1);
              if (v66 != v67)
              {
                do
                {
                  v131 = *--v66;
                  *--v130 = v131;
                }
                while (v66 != v67);
                v66 = v67;
              }
              v67 = (const void **)v130;
              if (v66)
                (*(void (**)(uint64_t, _QWORD *, unint64_t))(*(_QWORD *)v188 + 40))(v188, v66, v82 - (_QWORD)v66);
              v82 = v128;
            }
            else
            {
              if (v66)
                *v66 = a7;
              v125 = (CFNumberRef *)(v66 + 1);
            }
            *(float *)buf = (float)(a10 / a12) / 0.01;
            v180 = CFNumberCreate(0, kCFNumberFloatType, buf);
            v132 = *MEMORY[0x1E0CA85D0];
            v118 = v176;
            if (v116 >= v197)
            {
              v185 = v82;
              v133 = (v116 - (char *)v68) >> 3;
              v134 = v133 + 1;
              if ((unint64_t)(v133 + 1) >> 61)
                goto LABEL_333;
              v135 = v197 - (char *)v68;
              if ((v197 - (char *)v68) >> 2 > v134)
                v134 = (v197 - (char *)v68) >> 2;
              if (v135 >= 0x7FFFFFFFFFFFFFF8)
                v136 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v136 = v134;
              if (v136)
              {
                v137 = (*(uint64_t (**)(grl::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v189 + 16))(v189, 8 * v136, 8);
                v138 = (_QWORD *)(v137 + 8 * v133);
                v197 = (char *)(v137 + 8 * v136);
                if (v137)
                  *v138 = v132;
              }
              else
              {
                v197 = 0;
                v138 = (_QWORD *)(8 * v133);
              }
              v118 = v176;
              v35 = (char *)(v138 + 1);
              if (v116 == (char *)v68)
                goto LABEL_228;
              do
              {
                v139 = *((_QWORD *)v116 - 1);
                v116 -= 8;
                *--v138 = v139;
              }
              while (v116 != (char *)v68);
              if (v68)
LABEL_228:
                (*(void (**)(grl::Allocator *, const void **, unint64_t))(*(_QWORD *)v189 + 40))(v189, v68, v135);
              v68 = (const void **)v138;
              v82 = v185;
            }
            else
            {
              *(_QWORD *)v116 = v132;
              v35 = v116 + 8;
            }
            if ((unint64_t)v125 < v82)
            {
              *v125 = v180;
              v117 = v180;
              goto LABEL_247;
            }
            v140 = ((char *)v125 - (char *)v67) >> 3;
            v141 = v140 + 1;
            if (!((unint64_t)(v140 + 1) >> 61))
            {
              v142 = v82 - (_QWORD)v67;
              if ((uint64_t)(v82 - (_QWORD)v67) >> 2 > v141)
                v141 = (uint64_t)(v82 - (_QWORD)v67) >> 2;
              if (v142 >= 0x7FFFFFFFFFFFFFF8)
                v82 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v82 = v141;
              if (v82)
              {
                v143 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v188 + 16))(v188, 8 * v82, 8);
                v144 = (const void **)(v143 + 8 * v140);
                v82 = v143 + 8 * v82;
                if (v143)
                  *v144 = v180;
              }
              else
              {
                v144 = (const void **)(8 * v140);
              }
              if (v125 == (CFNumberRef *)v67)
                goto LABEL_245;
              do
              {
                v145 = *--v125;
                *--v144 = v145;
              }
              while (v125 != (CFNumberRef *)v67);
              if (v67)
LABEL_245:
                (*(void (**)(uint64_t, const void **, unint64_t))(*(_QWORD *)v188 + 40))(v188, v67, v142);
              v67 = v144;
              v117 = v180;
              goto LABEL_247;
            }
LABEL_333:
            abort();
          }
          v60 = v35 - (char *)v34;
          v61 = (v35 - (char *)v34) >> 3;
          v62 = v61 + 1;
          if ((unint64_t)(v61 + 1) >> 61)
            goto LABEL_333;
          if (v60 >> 2 > v62)
            v62 = v60 >> 2;
          v63 = (unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v62;
          if (v63)
          {
            v64 = (*(uint64_t (**)(grl::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v189 + 16))(v189, 8 * v63, 8);
            v65 = (_QWORD *)(v64 + 8 * v61);
            v197 = (char *)(v64 + 8 * v63);
            if (v64)
              *v65 = *MEMORY[0x1E0CA8550];
          }
          else
          {
            v197 = 0;
            v65 = (_QWORD *)(8 * v61);
          }
          v69 = v35;
          v68 = (const void **)v65;
          if (v35 != (char *)v34)
          {
            v70 = (const void **)v35;
            v68 = (const void **)v65;
            do
            {
              v71 = *--v70;
              *--v68 = v71;
            }
            while (v70 != v34);
            v69 = (char *)v34;
          }
          if (v69)
            (*(void (**)(grl::Allocator *, char *, int64_t))(*(_QWORD *)v189 + 40))(v189, v69, v35 - v69);
          v72 = (char *)v177 - (char *)v37;
          v73 = (const void **)v177 - v37;
          v74 = v73 + 1;
          if ((unint64_t)(v73 + 1) >> 61)
            goto LABEL_333;
          if (v72 >> 2 > v74)
            v74 = v72 >> 2;
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
            v75 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v75 = v74;
          if (v75)
          {
            v76 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v188 + 16))(v188, 8 * v75, 8);
            v67 = (const void **)(v76 + 8 * v73);
            v184 = v76 + 8 * v75;
            if (v76)
              *v67 = v175;
          }
          else
          {
            v184 = 0;
            v67 = (const void **)(8 * v73);
          }
          v35 = (char *)(v65 + 1);
          v66 = v67 + 1;
          if (v177 == v37)
          {
            v37 = (const void **)v177;
            if (!v177)
              goto LABEL_89;
          }
          else
          {
            v77 = (const void **)v177;
            do
            {
              v78 = *--v77;
              *--v67 = v78;
            }
            while (v77 != v37);
            if (!v37)
              goto LABEL_89;
          }
          (*(void (**)(uint64_t, const void **, int64_t))(*(_QWORD *)v188 + 40))(v188, v37, (char *)v177 - (char *)v37);
LABEL_89:
          v31 = (char *)cf;
          goto LABEL_90;
        }
LABEL_31:
        v198 = (unint64_t)v30;
        v199 = v31;
        v46 = v30;
        v47 = v29;
        v48 = v26;
        goto LABEL_54;
      }
    }
    else
    {
      v30 = 0;
      v29 = 0;
      v31 = 0;
      v26 = 0;
      if (a3)
        goto LABEL_10;
    }
    v177 = 0;
    v37 = 0;
    v35 = 0;
    v34 = 0;
    if (a4)
      goto LABEL_15;
    goto LABEL_31;
  }
  if (GEOGetGeoResourceLibRendererLog::onceToken != -1)
    dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_10_0);
  v45 = GEOGetGeoResourceLibRendererLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19F029000, v45, OS_LOG_TYPE_ERROR, "Input text must be non-empty to create a CTLine.", buf, 2u);
  }
  *a8 = &off_1E42B4990;
  a8[1] = 0;
}

uint64_t geo::_retain_ptr<__CTLine const*,geo::_retain_cf<__CTLine const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>::operator=(uint64_t a1, CFTypeRef cf)
{
  const void *v4;

  if (cf)
    CFRetain(cf);
  v4 = *(const void **)(a1 + 8);
  if (v4)
    CFRelease(v4);
  *(_QWORD *)(a1 + 8) = cf;
  return a1;
}

void md::Logic<md::OverlaysLogic,md::OverlaysContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>,gdc::TypeList<>>>::_allocateContext(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _OWORD v39[2];
  __int128 v40;
  uint64_t v41;
  __int16 v42;
  __int128 v43;
  uint64_t v44;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v22, a1);
  v5 = operator new();
  v6 = v22;
  v7 = v23;
  v22 = 0;
  v23 = 0;
  *(_QWORD *)v5 = v6;
  *(_QWORD *)(v5 + 8) = v7;
  v9 = v24;
  v8 = v25;
  *(_QWORD *)(v5 + 16) = v24;
  *(_QWORD *)(v5 + 24) = v8;
  *(_DWORD *)(v5 + 32) = v26;
  if (v8)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7)
        v10 %= v7;
    }
    else
    {
      v10 &= v7 - 1;
    }
    *(_QWORD *)(v6 + 8 * v10) = v5 + 16;
    v24 = 0;
    v25 = 0;
  }
  v11 = v27;
  v12 = v28;
  v13 = v29;
  v14 = v30;
  *(_QWORD *)(v5 + 56) = v29;
  v27 = 0;
  v28 = 0;
  *(_QWORD *)(v5 + 40) = v11;
  *(_QWORD *)(v5 + 48) = v12;
  *(_QWORD *)(v5 + 64) = v14;
  *(_DWORD *)(v5 + 72) = v31;
  if (v14)
  {
    v15 = *(_QWORD *)(v13 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v15 >= v12)
        v15 %= v12;
    }
    else
    {
      v15 &= v12 - 1;
    }
    *(_QWORD *)(v11 + 8 * v15) = v5 + 56;
    v29 = 0;
    v30 = 0;
  }
  v17 = v36;
  v16 = v37;
  *(_QWORD *)(v5 + 128) = v36;
  v18 = v33;
  *(_OWORD *)(v5 + 80) = v32;
  *(_OWORD *)(v5 + 96) = v18;
  v19 = v34;
  v20 = v35;
  v34 = 0;
  v35 = 0;
  *(_QWORD *)(v5 + 112) = v19;
  *(_QWORD *)(v5 + 120) = v20;
  *(_QWORD *)(v5 + 136) = v16;
  *(_DWORD *)(v5 + 144) = v38;
  if (v16)
  {
    v21 = *(_QWORD *)(v17 + 8);
    if ((v20 & (v20 - 1)) != 0)
    {
      if (v21 >= v20)
        v21 %= v20;
    }
    else
    {
      v21 &= v20 - 1;
    }
    *(_QWORD *)(v19 + 8 * v21) = v5 + 128;
    v36 = 0;
    v37 = 0;
  }
  *(_OWORD *)(v5 + 152) = v39[0];
  *(_OWORD *)(v5 + 162) = *(_OWORD *)((char *)v39 + 10);
  *(_OWORD *)(v5 + 184) = v40;
  *(_QWORD *)(v5 + 200) = v41;
  v40 = 0uLL;
  *(_WORD *)(v5 + 208) = v42;
  *(_OWORD *)(v5 + 216) = v43;
  *(_QWORD *)(v5 + 232) = v44;
  v41 = 0;
  v43 = 0uLL;
  v44 = 0;
  v4[2] = "md::OverlaysContext]";
  v4[3] = 19;
  v4[4] = v5;
  *v4 = &off_1E42B0D20;
  v4[1] = 0xADE8F13E6C18D970;
  *a2 = v4;
  md::OverlaysContext::~OverlaysContext((md::OverlaysContext *)&v22);
}

void sub_19F365F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  md::OverlaysContext::~OverlaysContext((md::OverlaysContext *)&a9);
  MEMORY[0x1A1AF4E00](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

double md::Logic<md::OverlaysLogic,md::OverlaysContext,md::LogicDependencies<gdc::TypeList<md::PendingSceneContext,md::ElevationContext,md::CameraContext,md::PendingRegistryContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_WORD *)(a1 + 176) = 257;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_WORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  return result;
}

double md::Logic<md::CameraLogic,md::CameraContext,md::LogicDependencies<gdc::TypeList<md::ElevationContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  int64x2_t v2;
  uint64_t v3;
  int64x2_t v4;
  int64x2_t v5;
  _OWORD *v6;
  double result;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  double *v16[3];

  v2 = vdupq_n_s64(0xC00921FB54442D18);
  *(int64x2_t *)(a1 + 8) = v2;
  v3 = a1 + 264;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  v4 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 136) = v4;
  v5 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(int64x2_t *)(a1 + 152) = v5;
  *(int64x2_t *)(a1 + 168) = v4;
  *(int64x2_t *)(a1 + 184) = v5;
  *(int64x2_t *)(a1 + 200) = v4;
  *(int64x2_t *)(a1 + 216) = v5;
  *(int64x2_t *)(a1 + 232) = v4;
  *(int64x2_t *)(a1 + 248) = v5;
  *(int64x2_t *)(a1 + 264) = v4;
  *(int64x2_t *)(a1 + 280) = v5;
  *(int64x2_t *)(a1 + 296) = v4;
  *(int64x2_t *)(a1 + 312) = v5;
  *(_BYTE *)(a1 + 328) = 1;
  *(_BYTE *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  v13 = v2;
  *(_OWORD *)(a1 + 464) = xmmword_19FFB4C90;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_QWORD *)(a1 + 544) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 936) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 944) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 956) = 2;
  *(_QWORD *)(a1 + 1392) = 0;
  v6 = (_OWORD *)(a1 + 1400);
  *(int64x2_t *)(a1 + 1408) = v2;
  *(_QWORD *)(a1 + 1520) = 0;
  *(_QWORD *)(a1 + 1512) = 0;
  *(_QWORD *)(a1 + 1528) = 0;
  *(_QWORD *)(a1 + 1472) = 0;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(int64x2_t *)(a1 + 1536) = v4;
  *(int64x2_t *)(a1 + 1552) = v5;
  *(int64x2_t *)(a1 + 1568) = v4;
  *(int64x2_t *)(a1 + 1584) = v5;
  *(int64x2_t *)(a1 + 1600) = v4;
  *(int64x2_t *)(a1 + 1616) = v5;
  *(int64x2_t *)(a1 + 1632) = v4;
  *(int64x2_t *)(a1 + 1648) = v5;
  *(int64x2_t *)(a1 + 1664) = v4;
  *(int64x2_t *)(a1 + 1680) = v5;
  v14 = v5;
  v15 = v4;
  *(int64x2_t *)(a1 + 1696) = v4;
  *(int64x2_t *)(a1 + 1712) = v5;
  *(_BYTE *)(a1 + 1728) = 1;
  *(_BYTE *)(a1 + 1736) = 0;
  *(_BYTE *)(a1 + 1752) = 0;
  v6[23] = 0u;
  v6[24] = 0u;
  *(_QWORD *)(a1 + 1840) = 0;
  *(_QWORD *)(a1 + 1832) = 0;
  *(_DWORD *)(a1 + 1848) = 0;
  *(_QWORD *)(a1 + 1864) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 1872) = 0x4059000000000000;
  v6[32] = 0u;
  v6[33] = 0u;
  v6[30] = 0u;
  v6[31] = 0u;
  *(_QWORD *)(a1 + 1944) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 2336) = xmmword_19FFB3310;
  *(_DWORD *)(a1 + 2356) = 2;
  *(_QWORD *)(a1 + 2768) = 0;
  memset(v16, 0, sizeof(v16));
  *(_QWORD *)(a1 + 2960) = 0;
  *(_QWORD *)(a1 + 2976) = 0;
  *(_QWORD *)(a1 + 2968) = 0;
  geo::ConvexHull2<double>::getConvexHullPoints(v16, (_QWORD *)(a1 + 2960), (float64x2_t)xmmword_19FFB3310);
  *(_DWORD *)(v3 + 2816) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *(_QWORD *)(v3 + 2808) = _Q0;
  *(_BYTE *)(a1 + 3084) = 1;
  *(_OWORD *)(a1 + 3288) = 0u;
  *(_OWORD *)(a1 + 3304) = 0u;
  *(_OWORD *)(a1 + 3320) = 0u;
  *(_QWORD *)(a1 + 3336) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 3728) = xmmword_19FFB3310;
  *(_DWORD *)(a1 + 3748) = 2;
  *(_BYTE *)(a1 + 3776) = 0;
  *(_BYTE *)(a1 + 3784) = 0;
  *(int64x2_t *)(a1 + 3800) = v13;
  *(_QWORD *)(a1 + 3904) = 0;
  *(_OWORD *)(a1 + 3912) = 0u;
  *(_QWORD *)(a1 + 3864) = 0;
  *(_OWORD *)(a1 + 3816) = 0u;
  *(_OWORD *)(a1 + 3832) = 0u;
  *(_OWORD *)(a1 + 3848) = 0u;
  *(int64x2_t *)(a1 + 3928) = v15;
  *(int64x2_t *)(a1 + 3944) = v14;
  *(int64x2_t *)(a1 + 3960) = v15;
  *(int64x2_t *)(a1 + 3976) = v14;
  *(int64x2_t *)(a1 + 3992) = v15;
  *(int64x2_t *)(a1 + 4008) = v14;
  *(int64x2_t *)(a1 + 4024) = v15;
  *(int64x2_t *)(a1 + 4040) = v14;
  *(int64x2_t *)(a1 + 4056) = v15;
  *(int64x2_t *)(a1 + 4072) = v14;
  *(int64x2_t *)(a1 + 4088) = v15;
  *(int64x2_t *)(a1 + 4104) = v14;
  *(_BYTE *)(a1 + 4120) = 1;
  *(_BYTE *)(a1 + 4128) = 0;
  *(_BYTE *)(a1 + 4144) = 0;
  *(_OWORD *)(a1 + 4176) = 0u;
  *(_OWORD *)(a1 + 4160) = 0u;
  *(_DWORD *)(a1 + 4240) = 0;
  *(_OWORD *)(a1 + 4224) = 0u;
  *(_OWORD *)(a1 + 4256) = xmmword_19FFB4C90;
  *(_OWORD *)(a1 + 4320) = 0u;
  *(_OWORD *)(a1 + 4304) = 0u;
  *(_OWORD *)(a1 + 4288) = 0u;
  *(_OWORD *)(a1 + 4272) = 0u;
  *(_QWORD *)(a1 + 4336) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 4728) = xmmword_19FFB3310;
  *(_DWORD *)(a1 + 4748) = 2;
  *(_QWORD *)(a1 + 5240) = 0;
  *(_OWORD *)(a1 + 5480) = 0u;
  *(_OWORD *)(a1 + 5464) = 0u;
  *(_OWORD *)(a1 + 5448) = 0u;
  *(_OWORD *)(a1 + 5432) = 0u;
  *(_OWORD *)(a1 + 5416) = 0u;
  *(_OWORD *)(a1 + 5400) = 0u;
  *(_OWORD *)(a1 + 5384) = 0u;
  *(_OWORD *)(a1 + 5220) = 0u;
  *(_OWORD *)(a1 + 5208) = 0u;
  *(_OWORD *)(a1 + 5192) = 0u;
  *(_OWORD *)(a1 + 5176) = 0u;
  *(_OWORD *)(a1 + 5160) = 0u;
  *(_QWORD *)(a1 + 5376) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 5416) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 5456) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 5496) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 5512) = 0u;
  *(_OWORD *)(a1 + 5528) = 0u;
  *(_OWORD *)(a1 + 5544) = 0u;
  *(_OWORD *)(a1 + 5576) = 0u;
  result = 0.0078125;
  *(_QWORD *)(a1 + 5592) = 0x3F80000000000000;
  return result;
}

void sub_19F3662A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 2968) = v5;
    operator delete(v5);
  }
  if (*(_BYTE *)(v1 + 1752))
    *(_BYTE *)(v1 + 1752) = 0;
  if (*(_BYTE *)(v1 + 1736))
    *(_BYTE *)(v1 + 1736) = 0;
  if (*(_BYTE *)(v1 + 352))
    *(_BYTE *)(v1 + 352) = 0;
  if (*(_BYTE *)(v1 + 336))
    *(_BYTE *)(v1 + 336) = 0;
  _Unwind_Resume(exception_object);
}

void ___ZL39GEOGetVectorKitVKGeoResourceProviderLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "VKGeoResourceProvider");
  v1 = (void *)GEOGetVectorKitVKGeoResourceProviderLog(void)::log;
  GEOGetVectorKitVKGeoResourceProviderLog(void)::log = (uint64_t)v0;

}

void ___ZL37GEOGetVectorKitMeshRenderableLogicLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "MeshRenderableLogic");
  v1 = (void *)GEOGetVectorKitMeshRenderableLogicLog(void)::log;
  GEOGetVectorKitMeshRenderableLogicLog(void)::log = (uint64_t)v0;

}

void ___ZL36GEOGetVectorKitNonTiledAssetLogicLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "NonTiledAssetLogic");
  v1 = (void *)GEOGetVectorKitNonTiledAssetLogicLog(void)::log;
  GEOGetVectorKitNonTiledAssetLogicLog(void)::log = (uint64_t)v0;

}

void ___ZL33GEOGetVectorKitSceneQueryLogicLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "SceneQueryLogic");
  v1 = (void *)GEOGetVectorKitSceneQueryLogicLog(void)::log;
  GEOGetVectorKitSceneQueryLogicLog(void)::log = (uint64_t)v0;

}

void ___ZL33GEOGetVectorKitRegistryManagerLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "RegistryManager");
  v1 = (void *)GEOGetVectorKitRegistryManagerLog(void)::log;
  GEOGetVectorKitRegistryManagerLog(void)::log = (uint64_t)v0;

}

void ___ZL31GEOGetVectorKitLabelSettingsLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "LabelSettings");
  v1 = (void *)GEOGetVectorKitLabelSettingsLog(void)::log;
  GEOGetVectorKitLabelSettingsLog(void)::log = (uint64_t)v0;

}

void ___ZL30GEOGetVectorKitStateCaptureLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "StateCapture");
  v1 = (void *)GEOGetVectorKitStateCaptureLog(void)::log;
  GEOGetVectorKitStateCaptureLog(void)::log = (uint64_t)v0;

}

void ___ZL28GEOGetVectorKitStyleLogicLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "StyleLogic");
  v1 = (void *)GEOGetVectorKitStyleLogicLog(void)::log;
  GEOGetVectorKitStyleLogicLog(void)::log = (uint64_t)v0;

}

void sub_19F3665CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::GeoResourceProvider::dataForResourceName(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  id v16;

  objc_msgSend(MEMORY[0x1E0D27410], "sharedManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((char *)a1 + 23) >= 0)
    v5 = a1;
  else
    v5 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "dataForResourceWithName:fallbackBundle:fallbackNameHandler:", v6, 0, &__block_literal_global_24223);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7 && objc_msgSend(v7, "length"))
    v8 = v7;
  else
    v8 = 0;

  v9 = objc_retainAutorelease(v8);
  v10 = (const void *)objc_msgSend(v9, "bytes");
  v16 = objc_retainAutorelease(v9);
  v11 = objc_msgSend(v16, "bytes");
  v12 = objc_msgSend(v16, "length");
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v13 = v11 + v12 - (_QWORD)v10;
  if (v13)
  {
    if ((v13 & 0x8000000000000000) != 0)
      abort();
    v14 = (char *)operator new(v13);
    *a2 = v14;
    v15 = &v14[v13];
    a2[2] = &v14[v13];
    memcpy(v14, v10, v13);
    a2[1] = v15;
  }

}

void sub_19F366708(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F3668B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

double md::Logic<md::SkyLogic,md::SkyLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::_allocateContext@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  double result;
  __int128 v7;
  _OWORD v8[2];
  char v9;

  v4 = (_QWORD *)operator new();
  (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(v8, a1);
  v5 = operator new();
  result = *(double *)v8;
  v7 = v8[1];
  *(_OWORD *)v5 = v8[0];
  *(_OWORD *)(v5 + 16) = v7;
  *(_BYTE *)(v5 + 32) = v9;
  v4[2] = "md::SkyLogicContext]";
  v4[3] = 19;
  v4[4] = v5;
  *v4 = &off_1E42B0D98;
  v4[1] = 0x7C7EC6C7C111B0D0;
  *a2 = v4;
  return result;
}

void sub_19F3669FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

double md::Logic<md::SkyLogic,md::SkyLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::allocateContext@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.000407606188;
  *(_OWORD *)a1 = xmmword_19FFB4F60;
  *(_OWORD *)(a1 + 16) = xmmword_19FFB4F70;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

uint64_t *md::LogicBase::addDependencies<md::CameraContext,md::StyleLogicContext>(uint64_t *result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;

  v1 = result;
  v3 = (uint64_t **)(result + 10);
  v2 = (uint64_t *)result[10];
  v4 = (uint64_t **)(result + 10);
  v5 = (uint64_t **)(result + 10);
  if (v2)
  {
    v6 = (uint64_t *)result[10];
    while (1)
    {
      while (1)
      {
        v5 = (uint64_t **)v6;
        v7 = v6[4];
        if (v7 <= 0x1AF456233693CD46)
          break;
        v6 = *v5;
        v4 = v5;
        if (!*v5)
          goto LABEL_8;
      }
      if (v7 == 0x1AF456233693CD46)
        break;
      v6 = v5[1];
      if (!v6)
      {
        v4 = v5 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v8 = (uint64_t *)operator new(0x38uLL);
    v8[4] = 0x1AF456233693CD46;
    v8[5] = (uint64_t)"md::CameraContext]";
    v8[6] = 17;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v5;
    *v4 = v8;
    v9 = *(_QWORD *)v1[9];
    if (v9)
    {
      v1[9] = v9;
      v10 = *v4;
    }
    else
    {
      v10 = v8;
    }
    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v1[10], v10);
    v2 = (uint64_t *)v1[10];
    ++v1[11];
  }
  v11 = v3;
  if (v2)
  {
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v2;
        v12 = v2[4];
        if (v12 <= 0xE42D19AFCA302E68)
          break;
        v2 = *v11;
        v3 = v11;
        if (!*v11)
          goto LABEL_19;
      }
      if (v12 == 0xE42D19AFCA302E68)
        break;
      v2 = v11[1];
      if (!v2)
      {
        v3 = v11 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v13 = (uint64_t *)operator new(0x38uLL);
    v13[4] = 0xE42D19AFCA302E68;
    v13[5] = (uint64_t)"md::StyleLogicContext]";
    v13[6] = 21;
    *v13 = 0;
    v13[1] = 0;
    v13[2] = (uint64_t)v11;
    *v3 = v13;
    v14 = *(_QWORD *)v1[9];
    if (v14)
    {
      v1[9] = v14;
      v15 = *v3;
    }
    else
    {
      v15 = v13;
    }
    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v1[10], v15);
    ++v1[11];
  }
  return result;
}

void ggl::CircleMultiStrokeShader::typedReflection(ggl::CircleMultiStrokeShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::CircleMultiStrokeShader::typedReflection(void)::ref = (uint64_t)"CircleMultiStrokeShader";
      ggl::circleMultiStrokeShaderVertexFunctionDescriptor(v2);
      qword_1ECE30160 = (uint64_t)&ggl::circleMultiStrokeShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<30ul>("CircleMultiStrokeShaderVertex");
      dword_1ECE30168 = (int)v3;
      ggl::circleMultiStrokeShaderFragmentFunctionDescriptor(v3);
      qword_1ECE30170 = (uint64_t)&ggl::circleMultiStrokeShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE30178 = ggl::crc32::compute<32ul>("CircleMultiStrokeShaderFragment");
      qword_1ECE30180 = (uint64_t)ggl::circleMultiStrokeShaderShaderConstants(void)::ref;
      unk_1ECE30188 = 4;
      qword_1ECE30190 = (uint64_t)&ggl::circleMultiStrokeShaderShaderTextures(void)::ref;
      unk_1ECE30198 = 0;
      qword_1ECE301A0 = (uint64_t)&ggl::circleMultiStrokeShaderShaderSamplers(void)::ref;
      unk_1ECE301A8 = 0;
    }
  }
}

void ggl::circleMultiStrokeShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::circleMultiStrokeShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("CircleMultiStrokeShaderVertex");
      *(_DWORD *)algn_1ECE3062C = 0;
      qword_1ECE30630 = (uint64_t)"CircleMultiStrokeShader";
      unk_1ECE30638 = ggl::circleMultiStrokeShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE30640 = 1;
      unk_1ECE30648 = &ggl::circleMultiStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE30650 = 4;
      unk_1ECE30658 = &ggl::circleMultiStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE30660 = 0;
      unk_1ECE30668 = &ggl::circleMultiStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE30670 = 0;
      unk_1ECE30678 = &ggl::circleMultiStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE30688 = 0;
      unk_1ECE30690 = 0;
      qword_1ECE30680 = 0;
    }
  }
}

void ggl::CircleShader::typedReflection(ggl::CircleShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::CircleShader::typedReflection(void)::ref = (uint64_t)"CircleShader";
      ggl::circleShaderVertexFunctionDescriptor(v2);
      qword_1ECE38ED8 = (uint64_t)&ggl::circleShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<19ul>("CircleShaderVertex");
      dword_1ECE38EE0 = (int)v3;
      ggl::circleShaderFragmentFunctionDescriptor(v3);
      qword_1ECE38EE8 = (uint64_t)&ggl::circleShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE38EF0 = ggl::crc32::compute<21ul>("CircleShaderFragment");
      qword_1ECE38EF8 = (uint64_t)ggl::circleShaderShaderConstants(void)::ref;
      unk_1ECE38F00 = 3;
      qword_1ECE38F08 = (uint64_t)&ggl::circleShaderShaderTextures(void)::ref;
      unk_1ECE38F10 = 0;
      qword_1ECE38F18 = (uint64_t)&ggl::circleShaderShaderSamplers(void)::ref;
      unk_1ECE38F20 = 0;
    }
  }
}

void ggl::circleShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::circleShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("CircleShaderFragment");
      *(_DWORD *)algn_1ECE3D00C = 1;
      qword_1ECE3D010 = (uint64_t)"CircleShader";
      unk_1ECE3D018 = 0;
      qword_1ECE3D020 = 0;
      unk_1ECE3D028 = &ggl::circleShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3D030 = 2;
      unk_1ECE3D038 = &ggl::circleShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3D040 = 0;
      unk_1ECE3D048 = &ggl::circleShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3D050 = 0;
      unk_1ECE3D058 = &ggl::circleShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3D068 = 0;
      unk_1ECE3D070 = 0;
      qword_1ECE3D060 = 0;
    }
  }
}

void ggl::circleShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::circleShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("CircleShaderVertex");
      *(_DWORD *)algn_1ECE3C944 = 0;
      qword_1ECE3C948 = (uint64_t)"CircleShader";
      unk_1ECE3C950 = ggl::circleShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3C958 = 1;
      unk_1ECE3C960 = &ggl::circleShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3C968 = 2;
      unk_1ECE3C970 = &ggl::circleShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3C978 = 0;
      unk_1ECE3C980 = &ggl::circleShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3C988 = 0;
      unk_1ECE3C990 = &ggl::circleShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3C9A0 = 0;
      unk_1ECE3C9A8 = 0;
      qword_1ECE3C998 = 0;
    }
  }
}

void md::SkyRenderLayer::~SkyRenderLayer(md::SkyRenderLayer *this)
{
  md::SkyRenderResources *v2;
  void *v3;

  *(_QWORD *)this = &off_1E428FDA0;
  v2 = (md::SkyRenderResources *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
  {
    md::SkyRenderResources::~SkyRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  *(_QWORD *)this = off_1E428C468;
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1A1AF4E00);
}

{
  md::SkyRenderResources *v2;
  void *v3;

  *(_QWORD *)this = &off_1E428FDA0;
  v2 = (md::SkyRenderResources *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
  {
    md::SkyRenderResources::~SkyRenderResources(v2);
    MEMORY[0x1A1AF4E00]();
  }
  *(_QWORD *)this = off_1E428C468;
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

void ggl::SkyShader::typedReflection(ggl::SkyShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::SkyShader::typedReflection(void)::ref = (uint64_t)"SkyShader";
      ggl::skyShaderVertexFunctionDescriptor(v2);
      qword_1ECE3C1B8 = (uint64_t)&ggl::skyShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<16ul>("SkyShaderVertex");
      dword_1ECE3C1C0 = (int)v3;
      ggl::skyShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3C1C8 = (uint64_t)&ggl::skyShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3C1D0 = ggl::crc32::compute<18ul>("SkyShaderFragment");
      qword_1ECE3C1D8 = (uint64_t)ggl::skyShaderShaderConstants(void)::ref;
      unk_1ECE3C1E0 = 1;
      qword_1ECE3C1E8 = (uint64_t)&ggl::skyShaderShaderTextures(void)::ref;
      unk_1ECE3C1F0 = 0;
      qword_1ECE3C1F8 = (uint64_t)&ggl::skyShaderShaderSamplers(void)::ref;
      unk_1ECE3C200 = 0;
    }
  }
}

void ggl::skyShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::skyShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<18ul>("SkyShaderFragment");
      *(_DWORD *)algn_1ECE3C85C = 1;
      qword_1ECE3C860 = (uint64_t)"SkyShader";
      unk_1ECE3C868 = 0;
      qword_1ECE3C870 = 0;
      unk_1ECE3C878 = &ggl::skyShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3C880 = 1;
      unk_1ECE3C888 = &ggl::skyShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3C890 = 0;
      unk_1ECE3C898 = &ggl::skyShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3C8A0 = 0;
      unk_1ECE3C8A8 = &ggl::skyShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3C8B8 = 0;
      unk_1ECE3C8C0 = 0;
      qword_1ECE3C8B0 = 0;
    }
  }
}

void ggl::skyShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::skyShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<16ul>("SkyShaderVertex");
      *(_DWORD *)algn_1ECE3C2E4 = 0;
      qword_1ECE3C2E8 = (uint64_t)"SkyShader";
      unk_1ECE3C2F0 = ggl::skyShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3C2F8 = 1;
      unk_1ECE3C300 = &ggl::skyShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3C308 = 1;
      unk_1ECE3C310 = &ggl::skyShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3C318 = 0;
      unk_1ECE3C320 = &ggl::skyShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3C328 = 0;
      unk_1ECE3C330 = &ggl::skyShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3C340 = 0;
      unk_1ECE3C348 = 0;
      qword_1ECE3C338 = 0;
    }
  }
}

void ggl::FogShader::typedReflection(ggl::FogShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::FogShader::typedReflection(void)::ref = (uint64_t)"FogShader";
      ggl::fogShaderVertexFunctionDescriptor(v2);
      qword_1ECE3C0A8 = (uint64_t)&ggl::fogShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<16ul>("FogShaderVertex");
      dword_1ECE3C0B0 = (int)v3;
      ggl::fogShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3C0B8 = (uint64_t)&ggl::fogShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3C0C0 = ggl::crc32::compute<18ul>("FogShaderFragment");
      qword_1ECE3C0C8 = (uint64_t)ggl::fogShaderShaderConstants(void)::ref;
      unk_1ECE3C0D0 = 2;
      qword_1ECE3C0D8 = (uint64_t)&ggl::fogShaderShaderTextures(void)::ref;
      unk_1ECE3C0E0 = 0;
      qword_1ECE3C0E8 = (uint64_t)&ggl::fogShaderShaderSamplers(void)::ref;
      unk_1ECE3C0F0 = 0;
    }
  }
}

void ggl::fogShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::fogShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<18ul>("FogShaderFragment");
      *(_DWORD *)algn_1ECE3C77C = 1;
      qword_1ECE3C780 = (uint64_t)"FogShader";
      unk_1ECE3C788 = 0;
      qword_1ECE3C790 = 0;
      unk_1ECE3C798 = &ggl::fogShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3C7A0 = 0;
      unk_1ECE3C7A8 = &ggl::fogShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3C7B0 = 0;
      unk_1ECE3C7B8 = &ggl::fogShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3C7C0 = 0;
      unk_1ECE3C7C8 = &ggl::fogShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3C7D8 = 0;
      unk_1ECE3C7E0 = 0;
      qword_1ECE3C7D0 = 0;
    }
  }
}

void ggl::fogShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::fogShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<16ul>("FogShaderVertex");
      *(_DWORD *)algn_1ECE3C274 = 0;
      qword_1ECE3C278 = (uint64_t)"FogShader";
      unk_1ECE3C280 = ggl::fogShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3C288 = 1;
      unk_1ECE3C290 = &ggl::fogShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3C298 = 2;
      unk_1ECE3C2A0 = &ggl::fogShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3C2A8 = 0;
      unk_1ECE3C2B0 = &ggl::fogShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3C2B8 = 0;
      unk_1ECE3C2C0 = &ggl::fogShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3C2D0 = 0;
      unk_1ECE3C2D8 = 0;
      qword_1ECE3C2C8 = 0;
    }
  }
}

void ggl::Fog::FogPipelineSetup::~FogPipelineSetup(ggl::Fog::FogPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

void grl::FontKey::createDescriptor(grl::FontKey *this@<X0>, _QWORD *a2@<X8>)
{
  const __CFArray *Mutable;
  int v5;
  grl *v6;
  void *v7;
  NSObject *v8;
  _QWORD *v9;
  NSObject *v10;
  _QWORD *v11;
  NSObject *v12;
  _QWORD *v13;
  NSObject *v14;
  _QWORD *v15;
  const void **v16;
  const void **v17;
  const void **v18;
  uint64_t (*v19)();
  uint64_t (**v20)();
  __CFDictionary *v21;
  __CFDictionary *v22;
  __CFDictionary **v23;
  int *v24;
  int *v25;
  int v26;
  int v27;
  int v28;
  uint64_t (*v29)();
  char *v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (**v37)();
  unint64_t v38;
  uint64_t (**v39)();
  uint64_t (**v40)();
  uint64_t (*v41)();
  unint64_t v42;
  CFArrayRef v43;
  CFArrayRef *v44;
  CFArrayRef *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  CFArrayRef *v51;
  uint64_t v52;
  CFArrayRef *v53;
  CFArrayRef *v54;
  const __CFArray *v55;
  char *v56;
  const __CTFontDescriptor *v57;
  const __CTFontDescriptor *v58;
  const __CTFontDescriptor *CopyWithAttributes;
  int v60;
  NSObject *v61;
  _QWORD *v62;
  const char *v63;
  NSObject *v64;
  _QWORD *v65;
  const char *v66;
  _QWORD *v67;
  float v68;
  const __CTFont *v69;
  const __CTFont *v70;
  const __CFArray *v71;
  const __CFArray *v72;
  CFIndex Count;
  CFIndex v74;
  CFIndex v75;
  const void *v76;
  const void *ValueAtIndex;
  CFTypeID v78;
  const __CFNumber *v79;
  const __CFNumber *v80;
  CFTypeID v81;
  CFComparisonResult v82;
  CFComparisonResult v83;
  CFComparisonResult v84;
  __CFDictionary *v85;
  float v86;
  int v87;
  __CFDictionary *v88;
  uint64_t v89;
  _QWORD *v90;
  const char *v91;
  NSObject *v92;
  uint32_t v93;
  _QWORD *v94;
  const void *v95;
  CTFontDescriptorRef v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  const __CTFont *cf;
  char v101;
  uint64_t (**v102)();
  CFStringRef name;
  uint64_t (**v104)();
  CFDictionaryRef attributes;
  uint64_t (***v106)();
  CFArrayRef *v107;
  CFArrayRef *v108;
  char *v109;
  uint64_t v110;
  uint64_t (**v111)();
  void *value;
  unint64_t v113;
  uint64_t v114;
  uint64_t (**v115)();
  CFArrayRef theArray;
  uint64_t (**v117)();
  CFTypeRef v118;
  uint64_t (**v119)();
  __CFDictionary *v120;
  _BYTE buf[22];
  __int16 v122;
  const char *v123;
  __int16 v124;
  int v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  grl::createCFMutableDictionary(&v119);
  if (v120)
  {
    grl::createCFMutableDictionary(&v117);
    if (!v118)
    {
      if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
      v10 = GEOGetGeoResourceLibCoreFoundationLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
      {
        v11 = (_QWORD *)((char *)this + 72);
        if (*((char *)this + 95) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v11;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
        v122 = 2080;
        v123 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/FontKey.cpp";
        v124 = 1024;
        v125 = 64;
        _os_log_impl(&dword_19F029000, v10, OS_LOG_TYPE_ERROR, "Failed to create variations dictionary for font \"%s\".: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x26u);
      }
      *a2 = &off_1E42B4930;
      a2[1] = 0;
      goto LABEL_214;
    }
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v115 = &off_1E42B48B0;
    theArray = Mutable;
    if (!Mutable)
    {
      if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
        dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
      v12 = GEOGetGeoResourceLibCoreFoundationLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
      {
        v13 = (_QWORD *)((char *)this + 72);
        if (*((char *)this + 95) < 0)
          v13 = (_QWORD *)*v13;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v13;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
        v122 = 2080;
        v123 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/FontKey.cpp";
        v124 = 1024;
        v125 = 68;
        _os_log_impl(&dword_19F029000, v12, OS_LOG_TYPE_ERROR, "Failed to create settings array for font \"%s\".: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x26u);
      }
      *a2 = &off_1E42B4930;
      a2[1] = 0;
      goto LABEL_212;
    }
    v5 = *((unsigned __int8 *)this + 10);
    if (*((unsigned __int8 *)this + 9) | v5)
    {
      v6 = *((_BYTE *)this + 9) ? (grl *)(v5 | 0x40u) : (grl *)*((unsigned __int8 *)this + 10);
      grl::createCFNumber(v6, &v111);
      v7 = value;
      if (value)
      {
        CFDictionarySetValue(v120, (const void *)*MEMORY[0x1E0CA8400], value);
      }
      else
      {
        if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
        v14 = GEOGetGeoResourceLibCoreFoundationLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
        {
          v15 = (_QWORD *)((char *)this + 72);
          if (*((char *)this + 95) < 0)
            v15 = (_QWORD *)*v15;
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = v15;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
          v122 = 2080;
          v123 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/FontKey.cpp";
          v124 = 1024;
          v125 = 89;
          _os_log_impl(&dword_19F029000, v14, OS_LOG_TYPE_ERROR, "Failed to create CFNumber for CTFontSymbolicTraits, for font name \"%s\".: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x26u);
        }
        *a2 = &off_1E42B4930;
        a2[1] = 0;
      }
      v111 = &off_1E42B48D0;
      Mutable = (const __CFArray *)value;
      if (value)
        CFRelease(value);
      if (!v7)
      {
LABEL_212:
        v115 = &off_1E42B48B0;
        if (theArray)
          CFRelease(theArray);
LABEL_214:
        v117 = &off_1E42B4810;
        if (v118)
          CFRelease(v118);
        goto LABEL_216;
      }
    }
    if (*((_BYTE *)this + 13))
    {
      if (*((_BYTE *)this + 12))
        v16 = (const void **)MEMORY[0x1E0CA8440];
      else
        v16 = (const void **)MEMORY[0x1E0CA8430];
      v17 = (const void **)MEMORY[0x1E0CA8420];
      if (*((_BYTE *)this + 12))
        v17 = (const void **)MEMORY[0x1E0CA8428];
      if (*((_BYTE *)this + 8))
        v18 = v17;
      else
        v18 = v16;
      CFDictionarySetValue(v120, (const void *)*MEMORY[0x1E0CA8450], *v18);
    }
    v19 = (uint64_t (*)())*MEMORY[0x1E0CA8470];
    v111 = 0;
    value = 0;
    v113 = 0;
    v114 = grl::Allocator::instance(Mutable);
    v20 = (uint64_t (**)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v114 + 16))(v114, 16, 8);
    v111 = v20;
    v113 = (unint64_t)(v20 + 2);
    if (v20)
      *v20 = (uint64_t (*)())*MEMORY[0x1E0CA8418];
    v20[1] = v19;
    value = v20 + 2;
    v21 = v120;
    v22 = (__CFDictionary *)v118;
    v108 = 0;
    v109 = 0;
    v107 = 0;
    v110 = grl::Allocator::instance((grl::Allocator *)v20);
    v23 = (__CFDictionary **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v110 + 16))(v110, 16, 8);
    v107 = v23;
    v109 = (char *)(v23 + 2);
    if (v23)
      *v23 = v21;
    v23[1] = v22;
    v108 = v23 + 2;
    v106 = &v115;
    v24 = (int *)*((_QWORD *)this + 12);
    v25 = (int *)*((_QWORD *)this + 13);
    while (v24 != v25)
    {
      v27 = *v24++;
      v26 = v27;
      if (v27 >= 0)
        v28 = v26;
      else
        v28 = -v26;
      grl::FontKey::createDescriptor(void)const::$_0::operator()((uint64_t)&v106, (grl *)0x23, (grl *)(__PAIR64__(v28, v26) >> 31));
    }
    if (*((_BYTE *)this + 120))
      grl::FontKey::createDescriptor(void)const::$_0::operator()((uint64_t)&v106, (grl *)0x25, (grl *)*((unsigned __int8 *)this + 120));
    if (!CFArrayGetCount(theArray))
    {
LABEL_103:
      grl::createCFDictionary((uint64_t)&v111, (uint64_t)&v107, &v104);
      if (!attributes)
      {
        if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
        v61 = GEOGetGeoResourceLibCoreFoundationLog::log;
        if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
          goto LABEL_117;
        v62 = (_QWORD *)((char *)this + 72);
        if (*((char *)this + 95) < 0)
          v62 = (_QWORD *)*v62;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v62;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
        v122 = 2080;
        v123 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/FontKey.cpp";
        v124 = 1024;
        v125 = 158;
        v63 = "Failed to create CFDictionary for font traits for font name \"%s\".: Assertion with expression - %s : Fail"
              "ed in file - %s line - %i";
        goto LABEL_116;
      }
      if (*((_BYTE *)this + 13))
      {
        if ((*((char *)this + 71) & 0x80000000) == 0)
        {
          if (*((_BYTE *)this + 71))
            goto LABEL_107;
LABEL_125:
          CopyWithAttributes = CTFontDescriptorCreateWithAttributes(attributes);
          goto LABEL_137;
        }
        if (!*((_QWORD *)this + 7))
          goto LABEL_125;
      }
LABEL_107:
      grl::createCFString((uint64_t)this + 48, &v102);
      if (name)
      {
        v57 = CTFontDescriptorCreateWithNameAndSize(name, *((float *)this + 4));
        if (v57)
        {
          v58 = v57;
          CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v57, attributes);
          CFRelease(v58);
          v60 = 1;
          goto LABEL_134;
        }
        if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
        v64 = GEOGetGeoResourceLibCoreFoundationLog::log;
        if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
        {
LABEL_133:
          CopyWithAttributes = 0;
          v60 = 0;
          *a2 = &off_1E42B4930;
          a2[1] = 0;
LABEL_134:
          v102 = &off_1E42B48F0;
          if (name)
            CFRelease(name);
          if (!v60)
            goto LABEL_204;
LABEL_137:
          v68 = *((float *)this + 5);
          if (v68 == 100.0 && *((_BYTE *)this + 40) == 3)
          {
            if (CopyWithAttributes)
            {
              *a2 = &off_1E42B4930;
              a2[1] = CopyWithAttributes;
              goto LABEL_206;
            }
            if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
              dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
            v61 = GEOGetGeoResourceLibCoreFoundationLog::log;
            if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
            {
LABEL_117:
              *a2 = &off_1E42B4930;
              a2[1] = 0;
LABEL_206:
              v104 = &off_1E42B4910;
              if (attributes)
                CFRelease(attributes);
              if (v107)
              {
                v108 = v107;
                (*(void (**)(uint64_t, CFArrayRef *, int64_t))(*(_QWORD *)v110 + 40))(v110, v107, v109 - (char *)v107);
              }
              if (v111)
              {
                value = v111;
                (*(void (**)(uint64_t, uint64_t (**)(), unint64_t))(*(_QWORD *)v114 + 40))(v114, v111, v113 - (_QWORD)v111);
              }
              goto LABEL_212;
            }
            v94 = (_QWORD *)((char *)this + 72);
            if (*((char *)this + 95) < 0)
              v94 = (_QWORD *)*v94;
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = v94;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
            v122 = 2080;
            v123 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/FontKey.cpp";
            v124 = 1024;
            v125 = 184;
            v63 = "Failed to create CTFontDescriptor for font name \"%s\".: Assertion with expression - %s : Failed in fi"
                  "le - %s line - %i";
LABEL_116:
            _os_log_impl(&dword_19F029000, v61, OS_LOG_TYPE_ERROR, v63, buf, 0x26u);
            goto LABEL_117;
          }
          if (v68 != 100.0 || *((_BYTE *)this + 24))
          {
            v69 = CTFontCreateWithFontDescriptor(CopyWithAttributes, *((float *)this + 4), 0);
            if (!v69)
            {
              if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
                dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
              v89 = GEOGetGeoResourceLibCoreFoundationLog::log;
              if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
                goto LABEL_203;
              v90 = (_QWORD *)((char *)this + 72);
              if (*((char *)this + 95) < 0)
                v90 = (_QWORD *)*v90;
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v90;
              v91 = "Failed to create CTFont for font name \"%s\".";
              v92 = v89;
              v93 = 12;
LABEL_202:
              _os_log_impl(&dword_19F029000, v92, OS_LOG_TYPE_ERROR, v91, buf, v93);
LABEL_203:
              *a2 = &off_1E42B4930;
              a2[1] = 0;
LABEL_204:
              if (CopyWithAttributes)
                CFRelease(CopyWithAttributes);
              goto LABEL_206;
            }
            v70 = v69;
            v71 = CTFontCopyVariationAxes(v69);
            if (v71)
            {
              v72 = v71;
              cf = v70;
              Count = CFArrayGetCount(v71);
              if (Count >= 1)
              {
                v74 = Count;
                v75 = 0;
                v101 = 0;
                v76 = (const void *)*MEMORY[0x1E0CA8488];
                while (1)
                {
                  ValueAtIndex = CFArrayGetValueAtIndex(v72, v75);
                  v78 = CFGetTypeID(ValueAtIndex);
                  if (v78 == CFDictionaryGetTypeID())
                  {
                    v79 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, v76);
                    if (v79)
                    {
                      v80 = v79;
                      v81 = CFGetTypeID(v79);
                      if (v81 == CFNumberGetTypeID())
                      {
                        grl::createCFNumber((grl *)0x77676874, buf);
                        v82 = CFNumberCompare(v80, *(CFNumberRef *)&buf[8], 0);
                        *(_QWORD *)buf = &off_1E42B48D0;
                        if (*(_QWORD *)&buf[8])
                          CFRelease(*(CFTypeRef *)&buf[8]);
                        if (v82 == kCFCompareEqualTo)
                        {
                          esl::toFontWeightAxisValue(*((unsigned __int8 *)this + 40), (uint64_t)&v102);
                          if ((_BYTE)v102)
                          {
                            if (*((_BYTE *)this + 24))
                            {
                              v87 = *((unsigned __int8 *)this + 40);
                              if (v87 != 8)
                              {
                                esl::toFontWeightAxisValue((v87 + 1), (uint64_t)buf);
                                *((float *)&v102 + 1) = *((float *)&v102 + 1)
                                                      + (float)(*((float *)this + 7)
                                                              * (float)(*(float *)&buf[4] - *((float *)&v102 + 1)));
                              }
                            }
                            v88 = (__CFDictionary *)v118;
                            grl::createCFNumber(*((float *)&v102 + 1), buf);
                            CFDictionarySetValue(v88, v80, *(const void **)&buf[8]);
                            *(_QWORD *)buf = &off_1E42B48D0;
                            if (*(_QWORD *)&buf[8])
                              CFRelease(*(CFTypeRef *)&buf[8]);
                            v101 = 1;
                          }
                          goto LABEL_170;
                        }
                        grl::createCFNumber((grl *)0x77647468, buf);
                        v83 = CFNumberCompare(v80, *(CFNumberRef *)&buf[8], 0);
                        *(_QWORD *)buf = &off_1E42B48D0;
                        if (*(_QWORD *)&buf[8])
                          CFRelease(*(CFTypeRef *)&buf[8]);
                        if (v83)
                        {
                          grl::createCFNumber((grl *)0x6F70737A, buf);
                          v84 = CFNumberCompare(v80, *(CFNumberRef *)&buf[8], 0);
                          *(_QWORD *)buf = &off_1E42B48D0;
                          if (*(_QWORD *)&buf[8])
                            CFRelease(*(CFTypeRef *)&buf[8]);
                          if (v84)
                            goto LABEL_170;
                          v85 = (__CFDictionary *)v118;
                          v86 = *((float *)this + 4);
                        }
                        else
                        {
                          v85 = (__CFDictionary *)v118;
                          v86 = *((float *)this + 5);
                        }
                        grl::createCFNumber(v86, buf);
                        CFDictionarySetValue(v85, v80, *(const void **)&buf[8]);
                        *(_QWORD *)buf = &off_1E42B48D0;
                        if (*(_QWORD *)&buf[8])
                          CFRelease(*(CFTypeRef *)&buf[8]);
                      }
                    }
                  }
LABEL_170:
                  if (v74 == ++v75)
                    goto LABEL_186;
                }
              }
              v101 = 0;
LABEL_186:
              CFRelease(v72);
              CFRelease(cf);
              if ((v101 & 1) != 0)
              {
LABEL_190:
                grl::createCFDictionary((uint64_t)&v111, (uint64_t)&v107, buf);
                if (attributes)
                  CFRelease(attributes);
                attributes = *(CFDictionaryRef *)&buf[8];
                v96 = CTFontDescriptorCreateCopyWithAttributes(CopyWithAttributes, *(CFDictionaryRef *)&buf[8]);
                if (CopyWithAttributes)
                  CFRelease(CopyWithAttributes);
                if (v96)
                {
                  *a2 = &off_1E42B4930;
                  a2[1] = v96;
                  goto LABEL_206;
                }
                if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
                  dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
                v61 = GEOGetGeoResourceLibCoreFoundationLog::log;
                if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
                  goto LABEL_117;
                v99 = (_QWORD *)((char *)this + 72);
                if (*((char *)this + 95) < 0)
                  v99 = (_QWORD *)*v99;
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)&buf[4] = v99;
                *(_WORD *)&buf[12] = 2080;
                *(_QWORD *)&buf[14] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
                v122 = 2080;
                v123 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/FontKey.cpp";
                v124 = 1024;
                v125 = 254;
                v63 = "Failed to create CTFontDescriptor for font name \"%s\".: Assertion with expression - %s : Failed i"
                      "n file - %s line - %i";
                goto LABEL_116;
              }
            }
            else
            {
              CFRelease(v70);
            }
          }
          esl::toCGWeight(*((unsigned __int8 *)this + 40), (uint64_t)&v102);
          if ((_BYTE)v102)
          {
            grl::createCFNumber(*((float *)&v102 + 1), buf);
            v95 = *(const void **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
              CFDictionarySetValue(v120, (const void *)*MEMORY[0x1E0CA84E8], *(const void **)&buf[8]);
              CFRelease(v95);
              goto LABEL_190;
            }
          }
          if (GEOGetGeoResourceLibFontLog::onceToken != -1)
            dispatch_once(&GEOGetGeoResourceLibFontLog::onceToken, &__block_literal_global_13_0);
          v97 = GEOGetGeoResourceLibFontLog::log;
          if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibFontLog::log, OS_LOG_TYPE_ERROR))
            goto LABEL_203;
          v98 = (_QWORD *)((char *)this + 72);
          if (*((char *)this + 95) < 0)
            v98 = (_QWORD *)*v98;
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = v98;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
          v122 = 2080;
          v123 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/FontKey.cpp";
          v124 = 1024;
          v125 = 245;
          v91 = "Failed to create a CFNumber for font weight for font name \"%s\".: Assertion with expression - %s : Fail"
                "ed in file - %s line - %i";
          v92 = v97;
          v93 = 38;
          goto LABEL_202;
        }
        v67 = (_QWORD *)((char *)this + 72);
        if (*((char *)this + 95) < 0)
          v67 = (_QWORD *)*v67;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v67;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
        v122 = 2080;
        v123 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/FontKey.cpp";
        v124 = 1024;
        v125 = 176;
        v66 = "Failed to create CTFontDescriptor for font name \"%s\".: Assertion with expression - %s : Failed in file - %s line - %i";
      }
      else
      {
        if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
          dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
        v64 = GEOGetGeoResourceLibCoreFoundationLog::log;
        if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
          goto LABEL_133;
        v65 = (_QWORD *)((char *)this + 72);
        if (*((char *)this + 95) < 0)
          v65 = (_QWORD *)*v65;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v65;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
        v122 = 2080;
        v123 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/FontKey.cpp";
        v124 = 1024;
        v125 = 170;
        v66 = "Failed to generate a CFString for font name \"%s\".: Assertion with expression - %s : Failed in file - %s line - %i";
      }
      _os_log_impl(&dword_19F029000, v64, OS_LOG_TYPE_ERROR, v66, buf, 0x26u);
      goto LABEL_133;
    }
    v29 = (uint64_t (*)())*MEMORY[0x1E0CA8320];
    v30 = (char *)value;
    if ((unint64_t)value >= v113)
    {
      v32 = ((_BYTE *)value - (_BYTE *)v111) >> 3;
      v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 61)
        goto LABEL_225;
      v34 = v113 - (_QWORD)v111;
      if ((uint64_t)(v113 - (_QWORD)v111) >> 2 > v33)
        v33 = v34 >> 2;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
        v35 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v35 = v33;
      if (v35)
      {
        v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v114 + 16))(v114, 8 * v35, 8);
        v37 = (uint64_t (**)())(v36 + 8 * v32);
        v38 = v36 + 8 * v35;
        if (v36)
          *v37 = v29;
      }
      else
      {
        v38 = 0;
        v37 = (uint64_t (**)())(8 * v32);
      }
      v31 = v37 + 1;
      v40 = v111;
      v39 = (uint64_t (**)())value;
      if (value != v111)
      {
        do
        {
          v41 = *--v39;
          *--v37 = v41;
        }
        while (v39 != v40);
        v39 = v111;
      }
      v111 = v37;
      value = v31;
      v42 = v113;
      v113 = v38;
      if (v39)
        (*(void (**)(uint64_t, uint64_t (**)(), unint64_t))(*(_QWORD *)v114 + 40))(v114, v39, v42 - (_QWORD)v39);
    }
    else
    {
      if (value)
        *(_QWORD *)value = v29;
      v31 = v30 + 8;
    }
    value = v31;
    v43 = theArray;
    v44 = v108;
    if (v108 < (CFArrayRef *)v109)
    {
      if (v108)
        *v108 = theArray;
      v45 = v44 + 1;
LABEL_102:
      v108 = v45;
      goto LABEL_103;
    }
    v46 = v108 - v107;
    v47 = v46 + 1;
    if (!((unint64_t)(v46 + 1) >> 61))
    {
      v48 = v109 - (char *)v107;
      if ((v109 - (char *)v107) >> 2 > v47)
        v47 = v48 >> 2;
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
        v49 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v49 = v47;
      if (v49)
      {
        v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v110 + 16))(v110, 8 * v49, 8);
        v51 = (CFArrayRef *)(v50 + 8 * v46);
        v52 = v50 + 8 * v49;
        if (v50)
          *v51 = v43;
      }
      else
      {
        v52 = 0;
        v51 = (CFArrayRef *)(8 * v46);
      }
      v45 = v51 + 1;
      v54 = v107;
      v53 = v108;
      if (v108 != v107)
      {
        do
        {
          v55 = *--v53;
          *--v51 = v55;
        }
        while (v53 != v54);
        v53 = v107;
      }
      v107 = v51;
      v108 = v45;
      v56 = v109;
      v109 = (char *)v52;
      if (v53)
        (*(void (**)(uint64_t, CFArrayRef *, int64_t))(*(_QWORD *)v110 + 40))(v110, v53, v56 - (char *)v53);
      goto LABEL_102;
    }
LABEL_225:
    abort();
  }
  if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
    dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
  v8 = GEOGetGeoResourceLibCoreFoundationLog::log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
  {
    v9 = (_QWORD *)((char *)this + 72);
    if (*((char *)this + 95) < 0)
      v9 = (_QWORD *)*v9;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = v9;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "!GRL_UNIQUE_NAME(didTriggerAssert)";
    v122 = 2080;
    v123 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/FontKey.cpp";
    v124 = 1024;
    v125 = 60;
    _os_log_impl(&dword_19F029000, v8, OS_LOG_TYPE_ERROR, "Failed to create traits dictionary for font \"%s\".: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x26u);
  }
  *a2 = &off_1E42B4930;
  a2[1] = 0;
LABEL_216:
  v119 = &off_1E42B4810;
  if (v120)
    CFRelease(v120);
}

void grl::createCFNumber(grl *this@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  CFNumberRef v4;
  NSObject *v5;
  int valuePtr;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (this >= 0x7FFFFFFF)
    v3 = 0x7FFFFFFF;
  else
    v3 = (int)this;
  valuePtr = v3;
  v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  *a2 = &off_1E42B48D0;
  a2[1] = v4;
  if (!v4)
  {
    if (GEOGetGeoResourceLibMathLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibMathLog::onceToken, &__block_literal_global_19_0);
    v5 = GEOGetGeoResourceLibMathLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibMathLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v8 = "result";
      v9 = 2080;
      v10 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/CoreGraphicsUtilities.cpp";
      v11 = 1024;
      v12 = 20;
      _os_log_impl(&dword_19F029000, v5, OS_LOG_TYPE_ERROR, "Failed to generate CFNumber for uint32_t.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
    }
  }
}

void grl::createCFMutableDictionary(_QWORD *a1@<X8>)
{
  CFMutableDictionaryRef Mutable;
  NSObject *v4;
  uint8_t v5[16];

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
    v4 = GEOGetGeoResourceLibCoreFoundationLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_ERROR, "Failed to create CFMutableDictionary.", v5, 2u);
    }
  }
  *a1 = &off_1E42B4810;
  a1[1] = Mutable;
}

void grl::createCFNumber(float a1@<S0>, _QWORD *a2@<X8>)
{
  CFNumberRef v4;
  NSObject *v5;
  float valuePtr;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  valuePtr = a1;
  v4 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *a2 = &off_1E42B48D0;
  a2[1] = v4;
  if (!v4)
  {
    if (GEOGetGeoResourceLibMathLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibMathLog::onceToken, &__block_literal_global_19_0);
    v5 = GEOGetGeoResourceLibMathLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibMathLog::log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v8 = "result";
      v9 = 2080;
      v10 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoResourceLib/GeoResourceLib/CoreGraphicsUtilities.cpp";
      v11 = 1024;
      v12 = 28;
      _os_log_impl(&dword_19F029000, v5, OS_LOG_TYPE_ERROR, "Failed to generate CFNumber for float.: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
    }
  }
}

CFDictionaryRef grl::createCFDictionary@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  CFIndex v6;
  CFDictionaryRef result;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  __int16 v11;
  uint8_t buf[2];

  v4 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v4 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
  {
    if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
    v8 = GEOGetGeoResourceLibCoreFoundationLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    *(_WORD *)buf = 0;
    v9 = "Creating CFDictionary with missmatching number of keys and values.";
    v10 = buf;
    goto LABEL_14;
  }
  v5 = v4 >> 3;
  if (v5 >= 0x7FFFFFFFFFFFFFFFLL)
    v6 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v6 = v5;
  result = CFDictionaryCreate(0, *(const void ***)a1, *(const void ***)a2, v6, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!result)
  {
    if (GEOGetGeoResourceLibCoreFoundationLog::onceToken != -1)
      dispatch_once(&GEOGetGeoResourceLibCoreFoundationLog::onceToken, &__block_literal_global_25_0);
    v8 = GEOGetGeoResourceLibCoreFoundationLog::log;
    if (!os_log_type_enabled((os_log_t)GEOGetGeoResourceLibCoreFoundationLog::log, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    v11 = 0;
    v9 = "Failed to create CFDictionary.";
    v10 = (uint8_t *)&v11;
LABEL_14:
    _os_log_impl(&dword_19F029000, v8, OS_LOG_TYPE_ERROR, v9, v10, 2u);
LABEL_15:
    result = 0;
  }
  *a3 = &off_1E42B4910;
  a3[1] = result;
  return result;
}

uint64_t esl::toFontWeightAxisValue@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;

  switch((int)result)
  {
    case 0:
      *(_BYTE *)a2 = 1;
      v2 = 1128792064;
      goto LABEL_12;
    case 1:
      *(_BYTE *)a2 = 1;
      v2 = 1133903872;
      goto LABEL_12;
    case 2:
      *(_BYTE *)a2 = 1;
      v2 = 1120403456;
      goto LABEL_12;
    case 3:
      *(_BYTE *)a2 = 1;
      v2 = 1137180672;
      goto LABEL_12;
    case 4:
      *(_BYTE *)a2 = 1;
      v2 = 1140457472;
      goto LABEL_12;
    case 5:
      *(_BYTE *)a2 = 1;
      v2 = 1142292480;
      goto LABEL_12;
    case 6:
      *(_BYTE *)a2 = 1;
      v2 = 1143930880;
      goto LABEL_12;
    case 7:
      *(_BYTE *)a2 = 1;
      v2 = 1145569280;
      goto LABEL_12;
    case 8:
      *(_BYTE *)a2 = 1;
      v2 = 1147207680;
LABEL_12:
      *(_DWORD *)(a2 + 4) = v2;
      break;
    default:
      *(_BYTE *)a2 = 0;
      break;
  }
  return result;
}

float esl::toCGWeight@<S0>(int a1@<W0>, uint64_t a2@<X8>)
{
  double *v2;
  float result;

  switch(a1)
  {
    case 0:
      v2 = (double *)MEMORY[0x1E0CA84F0];
      goto LABEL_12;
    case 1:
      v2 = (double *)MEMORY[0x1E0CA84C0];
      goto LABEL_12;
    case 2:
      v2 = (double *)MEMORY[0x1E0CA84E0];
      goto LABEL_12;
    case 3:
      v2 = (double *)MEMORY[0x1E0CA84D0];
      goto LABEL_12;
    case 4:
      v2 = (double *)MEMORY[0x1E0CA84C8];
      goto LABEL_12;
    case 5:
      v2 = (double *)MEMORY[0x1E0CA84D8];
      goto LABEL_12;
    case 6:
      v2 = (double *)MEMORY[0x1E0CA84B0];
      goto LABEL_12;
    case 7:
      v2 = (double *)MEMORY[0x1E0CA84B8];
      goto LABEL_12;
    case 8:
      v2 = (double *)MEMORY[0x1E0CA84A8];
LABEL_12:
      result = *v2;
      *(_BYTE *)a2 = 1;
      *(float *)(a2 + 4) = result;
      break;
    default:
      *(_BYTE *)a2 = 0;
      break;
  }
  return result;
}

void ggl::MaskedIconShader::typedReflection(ggl::MaskedIconShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::MaskedIconShader::typedReflection(void)::ref = (uint64_t)"MaskedIconShader";
      ggl::maskedIconShaderVertexFunctionDescriptor(v2);
      qword_1ECE30050 = (uint64_t)&ggl::maskedIconShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<23ul>("MaskedIconShaderVertex");
      dword_1ECE30058 = (int)v3;
      ggl::maskedIconShaderFragmentFunctionDescriptor(v3);
      qword_1ECE30060 = (uint64_t)&ggl::maskedIconShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE30068 = ggl::crc32::compute<25ul>("MaskedIconShaderFragment");
      qword_1ECE30070 = (uint64_t)ggl::maskedIconShaderShaderConstants(void)::ref;
      unk_1ECE30078 = 5;
      qword_1ECE30080 = (uint64_t)ggl::maskedIconShaderShaderTextures(void)::ref;
      unk_1ECE30088 = 3;
      qword_1ECE30090 = (uint64_t)ggl::maskedIconShaderShaderSamplers(void)::ref;
      unk_1ECE30098 = 3;
    }
  }
}

void ggl::maskedIconShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::maskedIconShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("MaskedIconShaderFragment");
      *(_DWORD *)algn_1ECE30544 = 1;
      qword_1ECE30548 = (uint64_t)"MaskedIconShader";
      unk_1ECE30550 = 0;
      qword_1ECE30558 = 0;
      unk_1ECE30560 = &ggl::maskedIconShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE30568 = 1;
      unk_1ECE30570 = &ggl::maskedIconShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE30578 = 0;
      unk_1ECE30580 = &ggl::maskedIconShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE30588 = 1;
      unk_1ECE30590 = &ggl::maskedIconShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE305A0 = 0;
      unk_1ECE305A8 = 0;
      qword_1ECE30598 = 1;
    }
  }
}

void ggl::maskedIconShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::maskedIconShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<23ul>("MaskedIconShaderVertex");
      *(_DWORD *)algn_1ECE3045C = 0;
      qword_1ECE30460 = (uint64_t)"MaskedIconShader";
      unk_1ECE30468 = ggl::maskedIconShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE30470 = 1;
      unk_1ECE30478 = &ggl::maskedIconShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE30480 = 4;
      unk_1ECE30488 = &ggl::maskedIconShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE30490 = 0;
      unk_1ECE30498 = &ggl::maskedIconShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE304A0 = 2;
      unk_1ECE304A8 = &ggl::maskedIconShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE304B8 = 0;
      unk_1ECE304C0 = 0;
      qword_1ECE304B0 = 2;
    }
  }
}

void ggl::WaypointShader::typedReflection(ggl::WaypointShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::WaypointShader::typedReflection(void)::ref = (uint64_t)"WaypointShader";
      ggl::waypointShaderVertexFunctionDescriptor(v2);
      qword_1ECE34400 = (uint64_t)&ggl::waypointShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<21ul>("WaypointShaderVertex");
      dword_1ECE34408 = (int)v3;
      ggl::waypointShaderFragmentFunctionDescriptor(v3);
      qword_1ECE34410 = (uint64_t)&ggl::waypointShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE34418 = ggl::crc32::compute<23ul>("WaypointShaderFragment");
      qword_1ECE34420 = (uint64_t)ggl::waypointShaderShaderConstants(void)::ref;
      unk_1ECE34428 = 5;
      qword_1ECE34430 = (uint64_t)ggl::waypointShaderShaderTextures(void)::ref;
      unk_1ECE34438 = 2;
      qword_1ECE34440 = (uint64_t)ggl::waypointShaderShaderSamplers(void)::ref;
      unk_1ECE34448 = 2;
    }
  }
}

void ggl::waypointShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::waypointShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<23ul>("WaypointShaderFragment");
      *(_DWORD *)algn_1ECE34CF4 = 1;
      qword_1ECE34CF8 = (uint64_t)"WaypointShader";
      unk_1ECE34D00 = 0;
      qword_1ECE34D08 = 0;
      unk_1ECE34D10 = &ggl::waypointShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE34D18 = 1;
      unk_1ECE34D20 = &ggl::waypointShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE34D28 = 0;
      unk_1ECE34D30 = &ggl::waypointShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE34D38 = 0;
      unk_1ECE34D40 = &ggl::waypointShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE34D50 = 0;
      unk_1ECE34D58 = 0;
      qword_1ECE34D48 = 0;
    }
  }
}

void ggl::waypointShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::waypointShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("WaypointShaderVertex");
      *(_DWORD *)algn_1ECE34C0C = 0;
      qword_1ECE34C10 = (uint64_t)"WaypointShader";
      unk_1ECE34C18 = ggl::waypointShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE34C20 = 1;
      unk_1ECE34C28 = &ggl::waypointShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE34C30 = 4;
      unk_1ECE34C38 = &ggl::waypointShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE34C40 = 0;
      unk_1ECE34C48 = &ggl::waypointShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE34C50 = 2;
      unk_1ECE34C58 = &ggl::waypointShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE34C68 = 0;
      unk_1ECE34C70 = 0;
      qword_1ECE34C60 = 2;
    }
  }
}

void sub_19F368F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_13,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_13>,void ()(md::Venue const*,md::VenueBuilding const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4FD8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_12,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_12>,void ()(VKARWalkingElevationRequestFailureInfo *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4F90;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_10,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_10>,void ()(VKARWalkingFeatureDidUpdateInfo *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4F00;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_11,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_11>,void ()(VKARWalkingFeatureSet *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4F48;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_16,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_16>,void ()(VKAnimation *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D50B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_21,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_21>,void ()(unsigned long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D5218;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_14,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_14>,void ()(md::Venue const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D5020;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_9,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_9>,void ()(md::MuninJunction const*,md::MuninRoadEdge const*,BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4EB8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_19,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_19>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D5188;
  a2[1] = v2;
  return result;
}

void __destroy_helper_block_ea8_40c70_ZTSNSt3__110shared_ptrIN3gss17StylesheetManagerINS1_10PropertyIDEEEEE56c69_ZTSNSt3__110shared_ptrIN3gss16ClientStyleStateINS1_10PropertyIDEEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_19F3693DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *md::LabelsLogic::setDidLayoutCallback(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;
  _QWORD v21[3];
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  _QWORD v25[4];

  v25[3] = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v19 = v18;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v18);
    }
    else
    {
      v19 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v19 = 0;
  }
  v20 = a1;
  v22 = 0;
  v4 = operator new(0x30uLL);
  v5 = v4;
  *v4 = &off_1E42C8E10;
  v6 = v4 + 1;
  if (!v19)
  {
    v7 = v4 + 4;
    goto LABEL_10;
  }
  if (v19 != v18)
  {
    v7 = &v19;
    v4[4] = v19;
LABEL_10:
    *v7 = 0;
    v4[5] = a1;
    v22 = v4;
LABEL_11:
    v8 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 88) + 64);
    goto LABEL_12;
  }
  v4[4] = v6;
  (*(void (**)(_QWORD *))(v18[0] + 24))(v18);
  v12 = v19;
  v5[5] = v20;
  v22 = v5;
  if (v12 == v18)
  {
    v13 = 4;
    v12 = v18;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
  v5 = v22;
  v8 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 88) + 64);
  if (!v22)
  {
    v9 = 0;
    goto LABEL_13;
  }
  if (v22 != v21)
  {
LABEL_12:
    v9 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*v5 + 16))(v5, v6);
LABEL_13:
    v24 = (_QWORD *)v9;
    goto LABEL_14;
  }
  v24 = v23;
  (*(void (**)(_QWORD *, _QWORD *))(v21[0] + 24))(v21, v23);
LABEL_14:
  if (v8 != v23)
  {
    v10 = v24;
    v11 = (_QWORD *)v8[3];
    if (v24 == v23)
    {
      if (v11 == v8)
      {
        (*(void (**)(_QWORD *, _QWORD *))(v23[0] + 24))(v23, v25);
        (*(void (**)(_QWORD *))(*v24 + 32))(v24);
        v24 = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)v8[3] + 24))(v8[3], v23);
        (*(void (**)(_QWORD))(*(_QWORD *)v8[3] + 32))(v8[3]);
        v8[3] = 0;
        v24 = v23;
        (*(void (**)(_QWORD *, _QWORD *))(v25[0] + 24))(v25, v8);
        (*(void (**)(_QWORD *))(v25[0] + 32))(v25);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(v23[0] + 24))(v23, v8);
        (*(void (**)(_QWORD *))(*v24 + 32))(v24);
        v24 = (_QWORD *)v8[3];
      }
      v8[3] = v8;
    }
    else if (v11 == v8)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*v8 + 24))(v8, v23);
      (*(void (**)(_QWORD))(*(_QWORD *)v8[3] + 32))(v8[3]);
      v8[3] = v24;
      v24 = v23;
    }
    else
    {
      v24 = (_QWORD *)v8[3];
      v8[3] = v10;
    }
  }
  v14 = v24;
  if (v24 == v23)
  {
    v15 = 4;
    v14 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_35;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_35:
  result = v22;
  if (v22 == v21)
  {
    v17 = 4;
    result = v21;
  }
  else
  {
    if (!v22)
      return result;
    v17 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v17))();
}

void sub_19F369718(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19F369724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v19;
  uint64_t v20;

  v19 = a18;
  if (a18 == &a15)
  {
    v20 = 4;
    v19 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_8,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_8>,void ()(md::LabelManager *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D4E70;
  a2[1] = v2;
  return result;
}

uint64_t `non-virtual thunk to'md::MapNavLabeler::navMode(md::MapNavLabeler *this)
{
  return *((unsigned __int8 *)this + 122);
}

uint64_t `non-virtual thunk to'md::MapNavLabeler::setNavMode(uint64_t result, char a2)
{
  *(_BYTE *)(result + 122) = a2;
  return result;
}

void geo::concurrent_queue_base<std::function<void ()(void)>,geo::BasicStoragePolicy<std::function<void ()(void)>>>::close(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  *(_BYTE *)a1 = 1;
  v3 = *(_QWORD *)(a1 + 160);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 152);
    while (1)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + ((v4 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v4 & 0x7F);
      v6 = *(_QWORD **)(v5 + 24);
      if (v6 == (_QWORD *)v5)
        break;
      if (v6)
      {
        v7 = 5;
LABEL_8:
        (*(void (**)(void))(*v6 + 8 * v7))();
        v4 = *(_QWORD *)(a1 + 152);
        v3 = *(_QWORD *)(a1 + 160);
      }
      --v3;
      *(_QWORD *)(a1 + 152) = ++v4;
      *(_QWORD *)(a1 + 160) = v3;
      if (v4 >= 0x100)
      {
        operator delete(**(void ***)(a1 + 128));
        *(_QWORD *)(a1 + 128) += 8;
        v3 = *(_QWORD *)(a1 + 160);
        v4 = *(_QWORD *)(a1 + 152) - 128;
        *(_QWORD *)(a1 + 152) = v4;
      }
      if (!v3)
        goto LABEL_11;
    }
    v6 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + ((v4 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v4 & 0x7F));
    v7 = 4;
    goto LABEL_8;
  }
LABEL_11:
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 72));
  std::mutex::unlock(v2);
}

void sub_19F369A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t ggl::Renderer::setPerformanceHUDScale(uint64_t this, float a2)
{
  *(float *)(this + 44) = a2;
  return this;
}

void sub_19F369B4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F369C1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F36A26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  std::__shared_weak_count *v20;
  std::__shared_weak_count_vtbl **v21;
  std::__shared_weak_count_vtbl *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *on_zero_shared_weak;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *shared_owners;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *v33;
  unint64_t v34;
  void *v35;

  v23 = *v21;
  if (*v21)
  {
    v24 = v20[3].__vftable;
    v25 = *v21;
    if (v24 != v23)
    {
      do
      {
        on_zero_shared_weak = (std::__shared_weak_count *)v24[-1].__on_zero_shared_weak;
        if (on_zero_shared_weak)
        {
          p_shared_owners = (unint64_t *)&on_zero_shared_weak->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))on_zero_shared_weak->__on_zero_shared)(on_zero_shared_weak);
            std::__shared_weak_count::__release_weak(on_zero_shared_weak);
          }
        }
        v24 = (std::__shared_weak_count_vtbl *)((char *)v24 - 16);
      }
      while (v24 != v23);
      v25 = *v21;
    }
    v20[3].__vftable = v23;
    operator delete(v25);
  }
  shared_owners = (std::__shared_weak_count *)v20[2].__shared_owners_;
  if (shared_owners)
  {
    v30 = (unint64_t *)&shared_owners->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
      std::__shared_weak_count::__release_weak(shared_owners);
    }
  }
  shared_weak_owners = (std::__shared_weak_count *)v20[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    v33 = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v35);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t ggl::MetalSwapchain::resize(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;

  v7 = a1[5];
  v8 = a1[6];
  v6 = a1 + 5;
  if (v8 != v7)
  {
    do
    {
      v9 = *(std::__shared_weak_count **)(v8 - 8);
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v8 -= 16;
    }
    while (v8 != v7);
    v8 = *v6;
  }
  a1[6] = v7;
  v12 = a1[12];
  v13 = (v7 - v8) >> 4;
  v14 = v12 - v13;
  if (v12 <= v13)
  {
    if (v12 < v13)
    {
      v15 = v8 + 16 * v12;
      while (v7 != v15)
      {
        v16 = *(std::__shared_weak_count **)(v7 - 8);
        if (v16)
        {
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v16->__on_zero_shared)(v16, v14);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v7 -= 16;
      }
      a1[6] = v15;
    }
  }
  else
  {
    std::vector<std::shared_ptr<ggl::Data>>::__append((uint64_t)v6, v14);
  }
  a1[13] = 0;
  a1[9] = a2;
  a1[10] = a3;
  return objc_msgSend(*(id *)(a1[3] + 16), "setDrawableSize:", (double)a2, (double)a3);
}

uint64_t md::MapEngine::setDisplayRate(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id *v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  double v15;

  v2 = *(_QWORD *)(this + 64);
  if (v2)
  {
    v3 = this;
    if (*(_BYTE *)(this + 1242))
    {
      v5 = *(void **)(v2 + 72);
      v4 = (id *)(v2 + 72);
      objc_msgSend(v5, "maximumRefreshRate");
      v7 = 1.0;
      v9 = 1.0 / v8;
      *(float *)&v9 = (float)(int)llround(v9);
    }
    else
    {
      +[VKPlatform sharedPlatform](VKPlatform, "sharedPlatform");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "explicitDefaultRefreshRate");

      v13 = *(_QWORD *)(v3 + 64);
      if ((unint64_t)(a2 + 1) <= 1 && v12)
      {
        *(float *)&v9 = (float)v12;
      }
      else
      {
        if (a2 == -1)
          v14 = 0;
        else
          v14 = a2;
        if (v14 <= 0)
        {
          objc_msgSend(*(id *)(v13 + 72), "maximumRefreshRate");
          v7 = 1.0;
          v9 = 1.0 / v15;
          v14 = llround(v9);
        }
        *(float *)&v9 = (float)v14;
      }
      v4 = (id *)(v13 + 72);
    }
    LODWORD(v7) = LODWORD(v9);
    LODWORD(v6) = LODWORD(v9);
    return objc_msgSend(*v4, "setPreferredFrameRateRange:", v9, v7, v6);
  }
  return this;
}

void sub_19F36A63C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F36A77C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F36B6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

double ___ZN2md9LabelPoolC2EPNS_12LabelManagerERNS_25LabelCustomFeatureSupportERNS_25ScreenLabelFeatureSupportE_block_invoke()
{
  unint64_t v0;
  unint64_t v1;
  double result;
  mach_timebase_info info;

  mach_timebase_info(&info);
  LODWORD(v0) = info.numer;
  LODWORD(v1) = info.denom;
  result = (double)v1 * 5.0 / ((double)v0 * 0.000001);
  MaxMachTimeDiffPerLabelTileUpdate = (unint64_t)result;
  return result;
}

uint64_t *md::LogicBase::addDependencies<md::ARLogicContext,md::NavigationContext>(uint64_t *result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;

  v1 = result;
  v3 = (uint64_t **)(result + 10);
  v2 = (uint64_t *)result[10];
  v4 = (uint64_t **)(result + 10);
  v5 = (uint64_t **)(result + 10);
  if (v2)
  {
    v6 = (uint64_t *)result[10];
    while (1)
    {
      while (1)
      {
        v5 = (uint64_t **)v6;
        v7 = v6[4];
        if (v7 <= 0x37F8C546A65FE3EELL)
          break;
        v6 = *v5;
        v4 = v5;
        if (!*v5)
          goto LABEL_8;
      }
      if (v7 == 0x37F8C546A65FE3EELL)
        break;
      v6 = v5[1];
      if (!v6)
      {
        v4 = v5 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v8 = (uint64_t *)operator new(0x38uLL);
    v8[4] = 0x37F8C546A65FE3EELL;
    v8[5] = (uint64_t)"md::ARLogicContext]";
    v8[6] = 18;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v5;
    *v4 = v8;
    v9 = *(_QWORD *)v1[9];
    if (v9)
    {
      v1[9] = v9;
      v10 = *v4;
    }
    else
    {
      v10 = v8;
    }
    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v1[10], v10);
    v2 = (uint64_t *)v1[10];
    ++v1[11];
  }
  v11 = v3;
  if (v2)
  {
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v2;
        v12 = v2[4];
        if (v12 <= 0x1B8B241A8D896A1DLL)
          break;
        v2 = *v11;
        v3 = v11;
        if (!*v11)
          goto LABEL_19;
      }
      if (v12 == 0x1B8B241A8D896A1DLL)
        break;
      v2 = v11[1];
      if (!v2)
      {
        v3 = v11 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v13 = (uint64_t *)operator new(0x38uLL);
    v13[4] = 0x1B8B241A8D896A1DLL;
    v13[5] = (uint64_t)"md::NavigationContext]";
    v13[6] = 21;
    *v13 = 0;
    v13[1] = 0;
    v13[2] = (uint64_t)v11;
    *v3 = v13;
    v14 = *(_QWORD *)v1[9];
    if (v14)
    {
      v1[9] = v14;
      v15 = *v3;
    }
    else
    {
      v15 = v13;
    }
    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v1[10], v15);
    ++v1[11];
  }
  return result;
}

uint64_t *md::LogicBase::addDependencies<md::CameraContext,md::SceneContext>(uint64_t *result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;

  v1 = result;
  v3 = (uint64_t **)(result + 10);
  v2 = (uint64_t *)result[10];
  v4 = (uint64_t **)(result + 10);
  v5 = (uint64_t **)(result + 10);
  if (v2)
  {
    v6 = (uint64_t *)result[10];
    while (1)
    {
      while (1)
      {
        v5 = (uint64_t **)v6;
        v7 = v6[4];
        if (v7 <= 0x1AF456233693CD46)
          break;
        v6 = *v5;
        v4 = v5;
        if (!*v5)
          goto LABEL_8;
      }
      if (v7 == 0x1AF456233693CD46)
        break;
      v6 = v5[1];
      if (!v6)
      {
        v4 = v5 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v8 = (uint64_t *)operator new(0x38uLL);
    v8[4] = 0x1AF456233693CD46;
    v8[5] = (uint64_t)"md::CameraContext]";
    v8[6] = 17;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v5;
    *v4 = v8;
    v9 = *(_QWORD *)v1[9];
    if (v9)
    {
      v1[9] = v9;
      v10 = *v4;
    }
    else
    {
      v10 = v8;
    }
    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v1[10], v10);
    v2 = (uint64_t *)v1[10];
    ++v1[11];
  }
  v11 = v3;
  if (v2)
  {
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v2;
        v12 = v2[4];
        if (v12 <= 0x99BED48DEFBBD82BLL)
          break;
        v2 = *v11;
        v3 = v11;
        if (!*v11)
          goto LABEL_19;
      }
      if (v12 == 0x99BED48DEFBBD82BLL)
        break;
      v2 = v11[1];
      if (!v2)
      {
        v3 = v11 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    v13 = (uint64_t *)operator new(0x38uLL);
    v13[4] = 0x99BED48DEFBBD82BLL;
    v13[5] = (uint64_t)"md::SceneContext]";
    v13[6] = 16;
    *v13 = 0;
    v13[1] = 0;
    v13[2] = (uint64_t)v11;
    *v3 = v13;
    v14 = *(_QWORD *)v1[9];
    if (v14)
    {
      v1[9] = v14;
      v15 = *v3;
    }
    else
    {
      v15 = v13;
    }
    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v1[10], v15);
    ++v1[11];
  }
  return result;
}

double ___ZN2md12LabelManagerC2EN3gdc9WorldTypeERKNS_26LabelManagerCreationParamsE_block_invoke()
{
  unint64_t v0;
  unint64_t v1;
  double result;
  mach_timebase_info info;

  mach_timebase_info(&info);
  LODWORD(v0) = info.numer;
  LODWORD(v1) = info.denom;
  result = (double)v1 * 300.0 / ((double)v0 * 0.000001);
  MaxCollisionIntervalInMachTime = (unint64_t)result;
  return result;
}

void md::DaVinciMetaLayerDataSource::createLayerData(uint64_t a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  geo::codec::VectorTile **v15;
  geo::codec::VectorTile *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int shared_owners_low;
  unint64_t v24;
  unsigned int v25;
  BOOL v26;
  uint64_t shared_owners;
  unint64_t v28;
  uint64_t *p_shared_weak_owners;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  _BYTE *v69;
  unint64_t v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  _QWORD *v73;
  _WORD *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  _QWORD v79[2];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    while (*(_WORD *)v5 != 29)
    {
      v5 += 48;
      if (v5 == v6)
        goto LABEL_16;
    }
  }
  if (v5 == v6 || *(_QWORD *)(v5 + 32) != 1)
  {
LABEL_16:
    v9 = 0;
LABEL_17:
    v78 = 0;
    if (!v9)
      goto LABEL_73;
    goto LABEL_18;
  }
  v7 = *(_QWORD *)(v5 + 24);
  v9 = *(_QWORD *)(v7 + 112);
  v8 = *(std::__shared_weak_count **)(v7 + 120);
  if (!v8)
    goto LABEL_17;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v78 = v8;
  v12 = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (v14)
  {
    if (!v9)
    {
LABEL_73:
      v73 = operator new(0x340uLL);
      v73[1] = 0;
      v73[2] = 0;
      *v73 = &off_1E42DC040;
      v80 = 0;
      v81 = 0;
      v82 = 0;
      v79[0] = 0;
      v79[1] = 0;
      md::MapTileData::MapTileData((uint64_t)(v73 + 3), a1, (uint64_t)&v80, (uint64_t)v79, 1);
      v73[3] = &off_1E4297008;
      v73[82] = &unk_1E4297048;
      *(_QWORD *)((char *)v73 + 740) = 0;
      *((_OWORD *)v73 + 47) = 0u;
      *((_OWORD *)v73 + 48) = 0u;
      *((_OWORD *)v73 + 49) = 0u;
      *((_OWORD *)v73 + 50) = 0u;
      v73[102] = 0;
      *((_WORD *)v73 + 412) = 1;
      *((_DWORD *)v73 + 207) = 1;
      *((_BYTE *)v73 + 748) = 0;
      std::vector<BOOL>::resize((uint64_t)(v73 + 97), 1uLL);
      *(_QWORD *)v73[97] &= ~1uLL;
      std::vector<BOOL>::resize((uint64_t)(v73 + 94), 1uLL);
      *(_QWORD *)v73[94] &= ~1uLL;
      v74 = (_WORD *)v73[100];
      v75 = v73[101] - (_QWORD)v74;
      if (v75)
      {
        if (v75 >= 3)
          v73[101] = v74 + 1;
      }
      else
      {
        std::vector<md::DaVinciMetaTileData::PackedElevationRange>::__append((uint64_t)(v73 + 100), 1uLL);
        v74 = (_WORD *)v73[100];
      }
      *v74 = 0;
      *a3 = v73 + 3;
      a3[1] = v73;
      v72 = v78;
      if (v78)
        goto LABEL_78;
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v9)
      goto LABEL_73;
  }
LABEL_18:
  v16 = *(geo::codec::VectorTile **)(v9 + 144);
  v15 = (geo::codec::VectorTile **)(v9 + 144);
  if (!geo::codec::VectorTile::daVinciMetaData(v16))
    goto LABEL_73;
  v17 = (std::__shared_weak_count *)operator new(0x340uLL);
  v17->__shared_owners_ = 0;
  v18 = (unint64_t *)&v17->__shared_owners_;
  v17->__shared_weak_owners_ = 0;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC040;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  md::MapTileData::MapTileData((uint64_t)&v17[1], a1, (uint64_t)&v80, (uint64_t)v15, 1);
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E4297008;
  v17[27].__shared_owners_ = (uint64_t)&unk_1E4297048;
  v19 = &v17[33].__shared_owners_;
  *(_OWORD *)&v17[31].__shared_owners_ = 0u;
  v17[32].std::__shared_count = 0u;
  *(_OWORD *)&v17[32].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v17[33].__shared_owners_ = 0u;
  v17[34].__vftable = 0;
  v20 = geo::codec::VectorTile::daVinciMetaData(*v15);
  *(uint64_t *)((char *)&v17[30].__shared_weak_owners_ + 4) = *(_QWORD *)v20;
  v21 = *(unsigned __int16 *)(v20 + 8);
  LOWORD(v17[34].__shared_owners_) = v21;
  v22 = 31 - __clz(v21);
  if (!v21)
    LOBYTE(v22) = 0;
  BYTE4(v17[31].__vftable) = v22;
  std::vector<BOOL>::resize((uint64_t)&v17[32].__shared_owners_, v21 * v21);
  std::vector<BOOL>::resize((uint64_t)&v17[31].__shared_owners_, LOWORD(v17[34].__shared_owners_) * LOWORD(v17[34].__shared_owners_));
  HIDWORD(v17[34].__shared_owners_) = 0;
  shared_owners_low = LOWORD(v17[34].__shared_owners_);
  if (shared_owners_low <= 1)
  {
    v24 = 0;
    p_shared_weak_owners = &v17[33].__shared_weak_owners_;
    shared_owners = v17[33].__shared_owners_;
    if (!((v17[33].__shared_weak_owners_ - shared_owners) >> 1))
      goto LABEL_28;
    goto LABEL_27;
  }
  LODWORD(v24) = 0;
  v25 = LOWORD(v17[34].__shared_owners_);
  do
  {
    v24 = v24 + v25 * v25;
    v26 = v25 > 3;
    v25 >>= 1;
  }
  while (v26);
  HIDWORD(v17[34].__shared_owners_) = v24;
  shared_owners = v17[33].__shared_owners_;
  v28 = (v17[33].__shared_weak_owners_ - shared_owners) >> 1;
  if (v24 > v28)
  {
    std::vector<md::DaVinciMetaTileData::PackedElevationRange>::__append((uint64_t)&v17[33].__shared_owners_, v24 - v28);
    shared_owners_low = LOWORD(v17[34].__shared_owners_);
    goto LABEL_28;
  }
  p_shared_weak_owners = &v17[33].__shared_weak_owners_;
  if (v28 > v24)
LABEL_27:
    *p_shared_weak_owners = shared_owners + 2 * v24;
LABEL_28:
  if (!shared_owners_low)
    goto LABEL_62;
  v30 = 0;
  v31 = 0;
  v32 = v17[32].__shared_owners_;
  v33 = v17[31].__shared_owners_;
  v34 = *(_QWORD *)(v20 + 24);
  v35 = *v19;
  v36 = *v19 + 1;
  v37 = 2 * shared_owners_low;
  v38 = *(_QWORD *)(v20 + 16) + 1;
  while (2)
  {
    v39 = v38;
    v40 = v36;
    v41 = v30;
    v42 = shared_owners_low;
    do
    {
      v44 = *(_BYTE *)(v34 + v41);
      v45 = v41 >> 6;
      v46 = 1 << v41;
      if ((v44 & 2) != 0)
      {
        *(_QWORD *)(v32 + 8 * v45) |= v46;
        if ((v44 & 1) == 0)
        {
LABEL_32:
          v43 = *(_QWORD *)(v33 + 8 * v45) & ~v46;
          goto LABEL_33;
        }
      }
      else
      {
        *(_QWORD *)(v32 + 8 * v45) &= ~v46;
        if ((v44 & 1) == 0)
          goto LABEL_32;
      }
      v43 = *(_QWORD *)(v33 + 8 * v45) | v46;
LABEL_33:
      *(_QWORD *)(v33 + 8 * v45) = v43;
      *(_WORD *)(v40 - 1) = *(_WORD *)(v39 - 1);
      v40 += 2;
      v39 += 2;
      ++v41;
      --v42;
    }
    while (v42);
    ++v31;
    v30 += shared_owners_low;
    v36 += v37;
    v38 += v37;
    if (v31 != shared_owners_low)
      continue;
    break;
  }
  if (shared_owners_low >= 4)
  {
    v47 = 0;
    do
    {
      v48 = (unsigned __int16)shared_owners_low;
      if ((unsigned __int16)shared_owners_low < 2u)
        break;
      v49 = 0;
      v50 = 0;
      shared_owners_low = (unsigned __int16)shared_owners_low >> 1;
      v51 = v48 * v48;
      v52 = shared_owners_low <= 1 ? 1 : shared_owners_low;
      v53 = 2 * v48;
      v54 = v48;
      do
      {
        v55 = v49;
        v56 = v54;
        v57 = v51;
        v58 = v52;
        do
        {
          v59 = (unsigned __int8 *)(v35 + 2 * (v47 + v55));
          v60 = (unsigned __int8 *)(v35 + 2 * (v47 + v55 + 1));
          v61 = *v60;
          if (v61 >= *v59)
            v61 = *v59;
          v62 = v59[1];
          v63 = v60[1];
          if (v62 > v63)
            v63 = v62;
          v64 = (unsigned __int8 *)(v35 + 2 * (v47 + v56));
          v65 = (unsigned __int8 *)(v35 + 2 * (v47 + v56 + 1));
          v66 = *v65;
          if (v66 >= *v64)
            v66 = *v64;
          v67 = v64[1];
          v68 = v65[1];
          if (v67 > v68)
            v68 = v67;
          if (v66 < v61)
            LOBYTE(v61) = v66;
          v69 = (_BYTE *)(v35 + 2 * (v47 + v57));
          *v69 = v61;
          if (v63 <= v68)
            LOBYTE(v63) = v68;
          v69[1] = v63;
          ++v57;
          v56 += 2;
          v55 += 2;
          --v58;
        }
        while (v58);
        ++v50;
        v51 += shared_owners_low;
        v54 += v53;
        v49 += v53;
      }
      while (v50 != (_DWORD)v52);
      v47 += v48 * v48;
    }
    while (v48 >= 8);
  }
LABEL_62:
  *a3 = v17 + 1;
  a3[1] = v17;
  do
    v70 = __ldxr(v18);
  while (__stxr(v70 + 1, v18));
  do
    v71 = __ldaxr(v18);
  while (__stlxr(v71 - 1, v18));
  if (v71)
  {
    v72 = v78;
    if (!v78)
      return;
LABEL_78:
    v76 = (unint64_t *)&v72->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    v72 = v78;
    if (v78)
      goto LABEL_78;
  }
}

void sub_19F36C2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  md::MapTileData *v11;
  void **v12;
  void **v13;
  void **v14;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v16 = *v14;
  if (*v14)
  {
    v10[33].__shared_weak_owners_ = (uint64_t)v16;
    operator delete(v16);
    v17 = *v13;
    if (!*v13)
    {
LABEL_3:
      v18 = *v12;
      if (!*v12)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v17 = *v13;
    if (!*v13)
      goto LABEL_3;
  }
  operator delete(v17);
  v18 = *v12;
  if (!*v12)
  {
LABEL_5:
    md::MapTileData::~MapTileData(v11);
    std::__shared_weak_count::~__shared_weak_count(v10);
    operator delete(v19);
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(v18);
  goto LABEL_5;
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  void *__dst;
  __int128 v18;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = a2 - v3;
  if (a2 <= v3)
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = v5 << 6;
    if (v5 << 6 < v4 || v3 > (v5 << 6) - v4)
    {
      __dst = 0;
      v18 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0)
        abort();
      v8 = v5 << 7;
      if (v8 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v8 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v6 <= 0x3FFFFFFFFFFFFFFELL)
        v9 = v8;
      else
        v9 = 0x7FFFFFFFFFFFFFFFLL;
      std::vector<BOOL>::reserve((uint64_t)&__dst, v9);
      v10 = *(void **)a1;
      v11 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v18 = v11 + v4;
      v12 = (char *)__dst;
      if (v11 < 1)
      {
        LODWORD(v15) = 0;
        v14 = (char *)__dst;
      }
      else
      {
        v13 = (unint64_t)v11 >> 6;
        if ((unint64_t)v11 >= 0x40)
          memmove(__dst, v10, 8 * v13);
        v14 = &v12[8 * v13];
        v15 = v11 & 0x3F;
        if (v15)
          *(_QWORD *)v14 = *(_QWORD *)v14 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v15) | *((_QWORD *)v10 + v13) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v15);
        v10 = *(void **)a1;
      }
      *(_QWORD *)a1 = v12;
      *(_OWORD *)(a1 + 8) = v18;
      if (v10)
        operator delete(v10);
    }
    else
    {
      v14 = (char *)(*(_QWORD *)a1 + 8 * (v3 >> 6));
      v15 = *(_QWORD *)(a1 + 8) & 0x3FLL;
      *(_QWORD *)(a1 + 8) = a2;
    }
    if (v4)
    {
      if ((_DWORD)v15)
      {
        if ((64 - v15) >= v4)
          v16 = v4;
        else
          v16 = (64 - v15);
        *(_QWORD *)v14 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v15 - v16)) & (-1 << v15));
        v14 += 8;
        v4 -= v16;
      }
      if (v4 >= 0x40)
        bzero(v14, 8 * (v4 >> 6));
      if ((v4 & 0x3F) != 0)
        *(_QWORD *)&v14[8 * (v4 >> 6)] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v4 & 0x3F));
    }
  }
}

void sub_19F36C4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ggl::TransitNodeColorizedShader::typedReflection(ggl::TransitNodeColorizedShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::TransitNodeColorizedShader::typedReflection(void)::ref = (uint64_t)"TransitNodeColorizedShader";
      ggl::transitNodeColorizedShaderVertexFunctionDescriptor(v2);
      qword_1ECE3B3D8 = (uint64_t)&ggl::transitNodeColorizedShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<33ul>("TransitNodeColorizedShaderVertex");
      dword_1ECE3B3E0 = (int)v3;
      ggl::transitNodeColorizedShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3B3E8 = (uint64_t)&ggl::transitNodeColorizedShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3B3F0 = ggl::crc32::compute<35ul>("TransitNodeColorizedShaderFragment");
      qword_1ECE3B3F8 = (uint64_t)ggl::transitNodeColorizedShaderShaderConstants(void)::ref;
      unk_1ECE3B400 = 1;
      qword_1ECE3B408 = (uint64_t)ggl::transitNodeColorizedShaderShaderTextures(void)::ref;
      unk_1ECE3B410 = 1;
      qword_1ECE3B418 = (uint64_t)&ggl::transitNodeColorizedShaderShaderSamplers(void)::ref;
      unk_1ECE3B420 = 1;
    }
  }
}

void ggl::transitNodeColorizedShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::transitNodeColorizedShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<35ul>("TransitNodeColorizedShaderFragment");
      *(_DWORD *)algn_1ECE41EAC = 1;
      qword_1ECE41EB0 = (uint64_t)"TransitNodeColorizedShader";
      unk_1ECE41EB8 = 0;
      qword_1ECE41EC0 = 0;
      unk_1ECE41EC8 = &ggl::transitNodeColorizedShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE41ED0 = 0;
      unk_1ECE41ED8 = &ggl::transitNodeColorizedShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE41EE0 = 0;
      unk_1ECE41EE8 = &ggl::transitNodeColorizedShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41EF0 = 1;
      unk_1ECE41EF8 = &ggl::transitNodeColorizedShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE41F08 = 0;
      unk_1ECE41F10 = 0;
      qword_1ECE41F00 = 1;
    }
  }
}

void ggl::transitNodeColorizedShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::transitNodeColorizedShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("TransitNodeColorizedShaderVertex");
      *(_DWORD *)algn_1ECE41624 = 0;
      qword_1ECE41628 = (uint64_t)"TransitNodeColorizedShader";
      unk_1ECE41630 = ggl::transitNodeColorizedShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE41638 = 1;
      unk_1ECE41640 = &ggl::transitNodeColorizedShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE41648 = 1;
      unk_1ECE41650 = &ggl::transitNodeColorizedShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE41658 = 0;
      unk_1ECE41660 = &ggl::transitNodeColorizedShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41668 = 0;
      unk_1ECE41670 = &ggl::transitNodeColorizedShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE41680 = 0;
      unk_1ECE41688 = 0;
      qword_1ECE41678 = 0;
    }
  }
}

void ggl::HillshadeFillMaskShader::typedReflection(ggl::HillshadeFillMaskShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::HillshadeFillMaskShader::typedReflection(void)::ref = (uint64_t)"HillshadeFillMaskShader";
      ggl::hillshadeFillMaskShaderVertexFunctionDescriptor(v2);
      qword_1EE585F48 = (uint64_t)&ggl::hillshadeFillMaskShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<30ul>("HillshadeFillMaskShaderVertex");
      dword_1EE585F50 = (int)v3;
      ggl::hillshadeFillMaskShaderFragmentFunctionDescriptor(v3);
      qword_1EE585F58 = (uint64_t)&ggl::hillshadeFillMaskShaderFragmentFunctionDescriptor(void)::ref;
      dword_1EE585F60 = ggl::crc32::compute<32ul>("HillshadeFillMaskShaderFragment");
      qword_1EE585F68 = (uint64_t)ggl::hillshadeFillMaskShaderShaderConstants(void)::ref;
      unk_1EE585F70 = 3;
      qword_1EE585F78 = (uint64_t)&ggl::hillshadeFillMaskShaderShaderTextures(void)::ref;
      unk_1EE585F80 = 0;
      qword_1EE585F88 = (uint64_t)&ggl::hillshadeFillMaskShaderShaderSamplers(void)::ref;
      unk_1EE585F90 = 0;
    }
  }
}

void ggl::hillshadeFillMaskShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::hillshadeFillMaskShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("HillshadeFillMaskShaderFragment");
      *(_DWORD *)algn_1EE58601C = 1;
      qword_1EE586020 = (uint64_t)"HillshadeFillMaskShader";
      unk_1EE586028 = 0;
      qword_1EE586030 = 0;
      unk_1EE586038 = &ggl::hillshadeFillMaskShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1EE586040 = 0;
      unk_1EE586048 = &ggl::hillshadeFillMaskShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1EE586050 = 0;
      unk_1EE586058 = &ggl::hillshadeFillMaskShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1EE586060 = 0;
      unk_1EE586068 = &ggl::hillshadeFillMaskShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1EE586078 = 0;
      unk_1EE586080 = 0;
      qword_1EE586070 = 0;
    }
  }
}

void ggl::hillshadeFillMaskShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::hillshadeFillMaskShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("HillshadeFillMaskShaderVertex");
      *(_DWORD *)algn_1EE585FA4 = 0;
      qword_1EE585FA8 = (uint64_t)"HillshadeFillMaskShader";
      unk_1EE585FB0 = ggl::hillshadeFillMaskShaderVertShaderFunctionAttributes(void)::ref;
      qword_1EE585FB8 = 1;
      unk_1EE585FC0 = &ggl::hillshadeFillMaskShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1EE585FC8 = 3;
      unk_1EE585FD0 = &ggl::hillshadeFillMaskShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1EE585FD8 = 0;
      unk_1EE585FE0 = &ggl::hillshadeFillMaskShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1EE585FE8 = 0;
      unk_1EE585FF0 = &ggl::hillshadeFillMaskShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1EE586000 = 0;
      unk_1EE586008 = 0;
      qword_1EE585FF8 = 0;
    }
  }
}

void ggl::BuildingTopDepthShader::typedReflection(ggl::BuildingTopDepthShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::BuildingTopDepthShader::typedReflection(void)::ref = (uint64_t)"BuildingTopDepthShader";
      ggl::buildingTopDepthShaderVertexFunctionDescriptor(v2);
      qword_1ECE3A6D8 = (uint64_t)&ggl::buildingTopDepthShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<29ul>("BuildingTopDepthShaderVertex");
      dword_1ECE3A6E0 = (int)v3;
      ggl::buildingTopDepthShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3A6E8 = (uint64_t)&ggl::buildingTopDepthShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3A6F0 = ggl::crc32::compute<31ul>("BuildingTopDepthShaderFragment");
      qword_1ECE3A6F8 = (uint64_t)ggl::buildingTopDepthShaderShaderConstants(void)::ref;
      unk_1ECE3A700 = 2;
      qword_1ECE3A708 = (uint64_t)&ggl::buildingTopDepthShaderShaderTextures(void)::ref;
      unk_1ECE3A710 = 0;
      qword_1ECE3A718 = (uint64_t)&ggl::buildingTopDepthShaderShaderSamplers(void)::ref;
      unk_1ECE3A720 = 0;
    }
  }
}

void ggl::buildingTopDepthShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::buildingTopDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("BuildingTopDepthShaderFragment");
      *(_DWORD *)algn_1ECE4056C = 1;
      qword_1ECE40570 = (uint64_t)"BuildingTopDepthShader";
      unk_1ECE40578 = 0;
      qword_1ECE40580 = 0;
      unk_1ECE40588 = &ggl::buildingTopDepthShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE40590 = 0;
      unk_1ECE40598 = &ggl::buildingTopDepthShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE405A0 = 0;
      unk_1ECE405A8 = &ggl::buildingTopDepthShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE405B0 = 0;
      unk_1ECE405B8 = &ggl::buildingTopDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE405C8 = 0;
      unk_1ECE405D0 = 0;
      qword_1ECE405C0 = 0;
    }
  }
}

void ggl::buildingTopDepthShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::buildingTopDepthShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("BuildingTopDepthShaderVertex");
      *(_DWORD *)algn_1ECE3F814 = 0;
      qword_1ECE3F818 = (uint64_t)"BuildingTopDepthShader";
      unk_1ECE3F820 = ggl::buildingTopDepthShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3F828 = 1;
      unk_1ECE3F830 = &ggl::buildingTopDepthShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3F838 = 2;
      unk_1ECE3F840 = &ggl::buildingTopDepthShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3F848 = 0;
      unk_1ECE3F850 = &ggl::buildingTopDepthShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3F858 = 0;
      unk_1ECE3F860 = &ggl::buildingTopDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3F870 = 0;
      unk_1ECE3F878 = 0;
      qword_1ECE3F868 = 0;
    }
  }
}

void ggl::VenueWallShadowShader::typedReflection(ggl::VenueWallShadowShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::VenueWallShadowShader::typedReflection(void)::ref = (uint64_t)"VenueWallShadowShader";
      ggl::venueWallShadowShaderVertexFunctionDescriptor(v2);
      qword_1ECE3A678 = (uint64_t)&ggl::venueWallShadowShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<28ul>("VenueWallShadowShaderVertex");
      dword_1ECE3A680 = (int)v3;
      ggl::venueWallShadowShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3A688 = (uint64_t)&ggl::venueWallShadowShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3A690 = ggl::crc32::compute<30ul>("VenueWallShadowShaderFragment");
      qword_1ECE3A698 = (uint64_t)ggl::venueWallShadowShaderShaderConstants(void)::ref;
      unk_1ECE3A6A0 = 2;
      qword_1ECE3A6A8 = (uint64_t)&ggl::venueWallShadowShaderShaderTextures(void)::ref;
      unk_1ECE3A6B0 = 0;
      qword_1ECE3A6B8 = (uint64_t)&ggl::venueWallShadowShaderShaderSamplers(void)::ref;
      unk_1ECE3A6C0 = 0;
    }
  }
}

void ggl::venueWallShadowShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::venueWallShadowShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("VenueWallShadowShaderFragment");
      *(_DWORD *)algn_1ECE4048C = 1;
      qword_1ECE40490 = (uint64_t)"VenueWallShadowShader";
      unk_1ECE40498 = 0;
      qword_1ECE404A0 = 0;
      unk_1ECE404A8 = &ggl::venueWallShadowShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE404B0 = 0;
      unk_1ECE404B8 = &ggl::venueWallShadowShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE404C0 = 0;
      unk_1ECE404C8 = &ggl::venueWallShadowShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE404D0 = 0;
      unk_1ECE404D8 = &ggl::venueWallShadowShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE404E8 = 0;
      unk_1ECE404F0 = 0;
      qword_1ECE404E0 = 0;
    }
  }
}

void ggl::venueWallShadowShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::venueWallShadowShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("VenueWallShadowShaderVertex");
      *(_DWORD *)algn_1ECE3F734 = 0;
      qword_1ECE3F738 = (uint64_t)"VenueWallShadowShader";
      unk_1ECE3F740 = ggl::venueWallShadowShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3F748 = 1;
      unk_1ECE3F750 = &ggl::venueWallShadowShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3F758 = 2;
      unk_1ECE3F760 = &ggl::venueWallShadowShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3F768 = 0;
      unk_1ECE3F770 = &ggl::venueWallShadowShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3F778 = 0;
      unk_1ECE3F780 = &ggl::venueWallShadowShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3F790 = 0;
      unk_1ECE3F798 = 0;
      qword_1ECE3F788 = 0;
    }
  }
}

void ggl::TransitNodeRGBShader::typedReflection(ggl::TransitNodeRGBShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::TransitNodeRGBShader::typedReflection(void)::ref = (uint64_t)"TransitNodeRGBShader";
      ggl::transitNodeRGBShaderVertexFunctionDescriptor(v2);
      qword_1ECE3A340 = (uint64_t)&ggl::transitNodeRGBShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<27ul>("TransitNodeRGBShaderVertex");
      dword_1ECE3A348 = (int)v3;
      ggl::transitNodeRGBShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3A350 = (uint64_t)&ggl::transitNodeRGBShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3A358 = ggl::crc32::compute<29ul>("TransitNodeRGBShaderFragment");
      qword_1ECE3A360 = (uint64_t)ggl::transitNodeRGBShaderShaderConstants(void)::ref;
      unk_1ECE3A368 = 1;
      qword_1ECE3A370 = (uint64_t)ggl::transitNodeRGBShaderShaderTextures(void)::ref;
      unk_1ECE3A378 = 1;
      qword_1ECE3A380 = (uint64_t)&ggl::transitNodeRGBShaderShaderSamplers(void)::ref;
      unk_1ECE3A388 = 1;
    }
  }
}

void ggl::transitNodeRGBShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::transitNodeRGBShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("TransitNodeRGBShaderFragment");
      *(_DWORD *)algn_1ECE3FDA4 = 1;
      qword_1ECE3FDA8 = (uint64_t)"TransitNodeRGBShader";
      unk_1ECE3FDB0 = 0;
      qword_1ECE3FDB8 = 0;
      unk_1ECE3FDC0 = &ggl::transitNodeRGBShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3FDC8 = 0;
      unk_1ECE3FDD0 = &ggl::transitNodeRGBShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3FDD8 = 0;
      unk_1ECE3FDE0 = &ggl::transitNodeRGBShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3FDE8 = 1;
      unk_1ECE3FDF0 = &ggl::transitNodeRGBShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3FE00 = 0;
      unk_1ECE3FE08 = 0;
      qword_1ECE3FDF8 = 1;
    }
  }
}

void ggl::transitNodeRGBShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::transitNodeRGBShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("TransitNodeRGBShaderVertex");
      *(_DWORD *)algn_1ECE3EE1C = 0;
      qword_1ECE3EE20 = (uint64_t)"TransitNodeRGBShader";
      unk_1ECE3EE28 = ggl::transitNodeRGBShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3EE30 = 1;
      unk_1ECE3EE38 = &ggl::transitNodeRGBShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3EE40 = 1;
      unk_1ECE3EE48 = &ggl::transitNodeRGBShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3EE50 = 0;
      unk_1ECE3EE58 = &ggl::transitNodeRGBShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3EE60 = 0;
      unk_1ECE3EE68 = &ggl::transitNodeRGBShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3EE78 = 0;
      unk_1ECE3EE80 = 0;
      qword_1ECE3EE70 = 0;
    }
  }
}

void ggl::OcclusionLineShader::typedReflection(ggl::OcclusionLineShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::OcclusionLineShader::typedReflection(void)::ref = (uint64_t)"OcclusionLineShader";
      ggl::occlusionLineShaderVertexFunctionDescriptor(v2);
      qword_1ECE39EF8 = (uint64_t)&ggl::occlusionLineShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<26ul>("OcclusionLineShaderVertex");
      dword_1ECE39F00 = (int)v3;
      ggl::occlusionLineShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39F08 = (uint64_t)&ggl::occlusionLineShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39F10 = ggl::crc32::compute<28ul>("OcclusionLineShaderFragment");
      qword_1ECE39F18 = (uint64_t)ggl::occlusionLineShaderShaderConstants(void)::ref;
      unk_1ECE39F20 = 1;
      qword_1ECE39F28 = (uint64_t)&ggl::occlusionLineShaderShaderTextures(void)::ref;
      unk_1ECE39F30 = 0;
      qword_1ECE39F38 = (uint64_t)&ggl::occlusionLineShaderShaderSamplers(void)::ref;
      unk_1ECE39F40 = 0;
    }
  }
}

void ggl::occlusionLineShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::occlusionLineShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("OcclusionLineShaderFragment");
      *(_DWORD *)algn_1ECE3F31C = 1;
      qword_1ECE3F320 = (uint64_t)"OcclusionLineShader";
      unk_1ECE3F328 = 0;
      qword_1ECE3F330 = 0;
      unk_1ECE3F338 = &ggl::occlusionLineShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3F340 = 1;
      unk_1ECE3F348 = &ggl::occlusionLineShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3F350 = 0;
      unk_1ECE3F358 = &ggl::occlusionLineShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3F360 = 0;
      unk_1ECE3F368 = &ggl::occlusionLineShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3F378 = 0;
      unk_1ECE3F380 = 0;
      qword_1ECE3F370 = 0;
    }
  }
}

void ggl::occlusionLineShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::occlusionLineShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("OcclusionLineShaderVertex");
      *(_DWORD *)algn_1ECE3E424 = 0;
      qword_1ECE3E428 = (uint64_t)"OcclusionLineShader";
      unk_1ECE3E430 = ggl::occlusionLineShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3E438 = 1;
      unk_1ECE3E440 = &ggl::occlusionLineShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3E448 = 1;
      unk_1ECE3E450 = &ggl::occlusionLineShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3E458 = 0;
      unk_1ECE3E460 = &ggl::occlusionLineShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3E468 = 0;
      unk_1ECE3E470 = &ggl::occlusionLineShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3E480 = 0;
      unk_1ECE3E488 = 0;
      qword_1ECE3E478 = 0;
    }
  }
}

void ggl::LandmarkDepthShader::typedReflection(ggl::LandmarkDepthShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::LandmarkDepthShader::typedReflection(void)::ref = (uint64_t)"LandmarkDepthShader";
      ggl::landmarkDepthShaderVertexFunctionDescriptor(v2);
      qword_1ECE39E40 = (uint64_t)&ggl::landmarkDepthShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<26ul>("LandmarkDepthShaderVertex");
      dword_1ECE39E48 = (int)v3;
      ggl::landmarkDepthShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39E50 = (uint64_t)&ggl::landmarkDepthShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39E58 = ggl::crc32::compute<28ul>("LandmarkDepthShaderFragment");
      qword_1ECE39E60 = (uint64_t)ggl::landmarkDepthShaderShaderConstants(void)::ref;
      unk_1ECE39E68 = 2;
      qword_1ECE39E70 = (uint64_t)&ggl::landmarkDepthShaderShaderTextures(void)::ref;
      unk_1ECE39E78 = 0;
      qword_1ECE39E80 = (uint64_t)&ggl::landmarkDepthShaderShaderSamplers(void)::ref;
      unk_1ECE39E88 = 0;
    }
  }
}

void ggl::landmarkDepthShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::landmarkDepthShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("LandmarkDepthShaderFragment");
      *(_DWORD *)algn_1ECE3F234 = 1;
      qword_1ECE3F238 = (uint64_t)"LandmarkDepthShader";
      unk_1ECE3F240 = 0;
      qword_1ECE3F248 = 0;
      unk_1ECE3F250 = &ggl::landmarkDepthShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3F258 = 0;
      unk_1ECE3F260 = &ggl::landmarkDepthShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3F268 = 0;
      unk_1ECE3F270 = &ggl::landmarkDepthShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3F278 = 0;
      unk_1ECE3F280 = &ggl::landmarkDepthShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3F290 = 0;
      unk_1ECE3F298 = 0;
      qword_1ECE3F288 = 0;
    }
  }
}

void ggl::landmarkDepthShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::landmarkDepthShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("LandmarkDepthShaderVertex");
      *(_DWORD *)algn_1ECE3E33C = 0;
      qword_1ECE3E340 = (uint64_t)"LandmarkDepthShader";
      unk_1ECE3E348 = ggl::landmarkDepthShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3E350 = 1;
      unk_1ECE3E358 = &ggl::landmarkDepthShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3E360 = 2;
      unk_1ECE3E368 = &ggl::landmarkDepthShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3E370 = 0;
      unk_1ECE3E378 = &ggl::landmarkDepthShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3E380 = 0;
      unk_1ECE3E388 = &ggl::landmarkDepthShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3E398 = 0;
      unk_1ECE3E3A0 = 0;
      qword_1ECE3E390 = 0;
    }
  }
}

void ggl::BuildingFlatShader::typedReflection(ggl::BuildingFlatShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::BuildingFlatShader::typedReflection(void)::ref = (uint64_t)"BuildingFlatShader";
      ggl::buildingFlatShaderVertexFunctionDescriptor(v2);
      qword_1ECE399E8 = (uint64_t)&ggl::buildingFlatShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<25ul>("BuildingFlatShaderVertex");
      dword_1ECE399F0 = (int)v3;
      ggl::buildingFlatShaderFragmentFunctionDescriptor(v3);
      qword_1ECE399F8 = (uint64_t)&ggl::buildingFlatShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39A00 = ggl::crc32::compute<27ul>("BuildingFlatShaderFragment");
      qword_1ECE39A08 = (uint64_t)ggl::buildingFlatShaderShaderConstants(void)::ref;
      unk_1ECE39A10 = 2;
      qword_1ECE39A18 = (uint64_t)&ggl::buildingFlatShaderShaderTextures(void)::ref;
      unk_1ECE39A20 = 0;
      qword_1ECE39A28 = (uint64_t)&ggl::buildingFlatShaderShaderSamplers(void)::ref;
      unk_1ECE39A30 = 0;
    }
  }
}

void ggl::buildingFlatShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::buildingFlatShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("BuildingFlatShaderFragment");
      *(_DWORD *)algn_1ECE3E82C = 1;
      qword_1ECE3E830 = (uint64_t)"BuildingFlatShader";
      unk_1ECE3E838 = 0;
      qword_1ECE3E840 = 0;
      unk_1ECE3E848 = &ggl::buildingFlatShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3E850 = 0;
      unk_1ECE3E858 = &ggl::buildingFlatShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3E860 = 0;
      unk_1ECE3E868 = &ggl::buildingFlatShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3E870 = 0;
      unk_1ECE3E878 = &ggl::buildingFlatShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3E888 = 0;
      unk_1ECE3E890 = 0;
      qword_1ECE3E880 = 0;
    }
  }
}

void ggl::buildingFlatShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::buildingFlatShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("BuildingFlatShaderVertex");
      *(_DWORD *)algn_1ECE3DCF4 = 0;
      qword_1ECE3DCF8 = (uint64_t)"BuildingFlatShader";
      unk_1ECE3DD00 = ggl::buildingFlatShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3DD08 = 1;
      unk_1ECE3DD10 = &ggl::buildingFlatShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3DD18 = 2;
      unk_1ECE3DD20 = &ggl::buildingFlatShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3DD28 = 0;
      unk_1ECE3DD30 = &ggl::buildingFlatShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3DD38 = 0;
      unk_1ECE3DD40 = &ggl::buildingFlatShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3DD50 = 0;
      unk_1ECE3DD58 = 0;
      qword_1ECE3DD48 = 0;
    }
  }
}

void ggl::GlowAlphaShader::typedReflection(ggl::GlowAlphaShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::GlowAlphaShader::typedReflection(void)::ref = (uint64_t)"GlowAlphaShader";
      ggl::glowAlphaShaderVertexFunctionDescriptor(v2);
      qword_1ECE39398 = (uint64_t)&ggl::glowAlphaShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<22ul>("GlowAlphaShaderVertex");
      dword_1ECE393A0 = (int)v3;
      ggl::glowAlphaShaderFragmentFunctionDescriptor(v3);
      qword_1ECE393A8 = (uint64_t)&ggl::glowAlphaShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE393B0 = ggl::crc32::compute<24ul>("GlowAlphaShaderFragment");
      qword_1ECE393B8 = (uint64_t)ggl::glowAlphaShaderShaderConstants(void)::ref;
      unk_1ECE393C0 = 3;
      qword_1ECE393C8 = (uint64_t)&ggl::glowAlphaShaderShaderTextures(void)::ref;
      unk_1ECE393D0 = 0;
      qword_1ECE393D8 = (uint64_t)&ggl::glowAlphaShaderShaderSamplers(void)::ref;
      unk_1ECE393E0 = 0;
    }
  }
}

void ggl::glowAlphaShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::glowAlphaShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("GlowAlphaShaderFragment");
      *(_DWORD *)algn_1ECE3D8EC = 1;
      qword_1ECE3D8F0 = (uint64_t)"GlowAlphaShader";
      unk_1ECE3D8F8 = 0;
      qword_1ECE3D900 = 0;
      unk_1ECE3D908 = &ggl::glowAlphaShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3D910 = 0;
      unk_1ECE3D918 = &ggl::glowAlphaShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3D920 = 0;
      unk_1ECE3D928 = &ggl::glowAlphaShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3D930 = 0;
      unk_1ECE3D938 = &ggl::glowAlphaShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3D948 = 0;
      unk_1ECE3D950 = 0;
      qword_1ECE3D940 = 0;
    }
  }
}

void ggl::glowAlphaShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::glowAlphaShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<22ul>("GlowAlphaShaderVertex");
      *(_DWORD *)algn_1ECE3D324 = 0;
      qword_1ECE3D328 = (uint64_t)"GlowAlphaShader";
      unk_1ECE3D330 = ggl::glowAlphaShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3D338 = 1;
      unk_1ECE3D340 = &ggl::glowAlphaShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3D348 = 3;
      unk_1ECE3D350 = &ggl::glowAlphaShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3D358 = 0;
      unk_1ECE3D360 = &ggl::glowAlphaShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3D368 = 0;
      unk_1ECE3D370 = &ggl::glowAlphaShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3D380 = 0;
      unk_1ECE3D388 = 0;
      qword_1ECE3D378 = 0;
    }
  }
}

void ggl::LineShader::typedReflection(ggl::LineShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::LineShader::typedReflection(void)::ref = (uint64_t)"LineShader";
      ggl::lineShaderVertexFunctionDescriptor(v2);
      qword_1ECE38B48 = (uint64_t)&ggl::lineShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<17ul>("LineShaderVertex");
      dword_1ECE38B50 = (int)v3;
      ggl::lineShaderFragmentFunctionDescriptor(v3);
      qword_1ECE38B58 = (uint64_t)&ggl::lineShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE38B60 = ggl::crc32::compute<19ul>("LineShaderFragment");
      qword_1ECE38B68 = (uint64_t)ggl::lineShaderShaderConstants(void)::ref;
      unk_1ECE38B70 = 2;
      qword_1ECE38B78 = (uint64_t)&ggl::lineShaderShaderTextures(void)::ref;
      unk_1ECE38B80 = 0;
      qword_1ECE38B88 = (uint64_t)&ggl::lineShaderShaderSamplers(void)::ref;
      unk_1ECE38B90 = 0;
    }
  }
}

void ggl::lineShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::lineShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("LineShaderFragment");
      *(_DWORD *)algn_1ECE3CBFC = 1;
      qword_1ECE3CC00 = (uint64_t)"LineShader";
      unk_1ECE3CC08 = 0;
      qword_1ECE3CC10 = 0;
      unk_1ECE3CC18 = &ggl::lineShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3CC20 = 1;
      unk_1ECE3CC28 = &ggl::lineShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3CC30 = 0;
      unk_1ECE3CC38 = &ggl::lineShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3CC40 = 0;
      unk_1ECE3CC48 = &ggl::lineShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3CC58 = 0;
      unk_1ECE3CC60 = 0;
      qword_1ECE3CC50 = 0;
    }
  }
}

void ggl::lineShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::lineShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<17ul>("LineShaderVertex");
      *(_DWORD *)algn_1ECE3C534 = 0;
      qword_1ECE3C538 = (uint64_t)"LineShader";
      unk_1ECE3C540 = ggl::lineShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3C548 = 1;
      unk_1ECE3C550 = &ggl::lineShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3C558 = 1;
      unk_1ECE3C560 = &ggl::lineShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3C568 = 0;
      unk_1ECE3C570 = &ggl::lineShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3C578 = 0;
      unk_1ECE3C580 = &ggl::lineShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3C590 = 0;
      unk_1ECE3C598 = 0;
      qword_1ECE3C588 = 0;
    }
  }
}

void ggl::DottedRouteLineShader::typedReflection(ggl::DottedRouteLineShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::DottedRouteLineShader::typedReflection(void)::ref = (uint64_t)"DottedRouteLineShader";
      ggl::dottedRouteLineShaderVertexFunctionDescriptor(v2);
      qword_1ECE30108 = (uint64_t)&ggl::dottedRouteLineShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<28ul>("DottedRouteLineShaderVertex");
      dword_1ECE30110 = (int)v3;
      ggl::dottedRouteLineShaderFragmentFunctionDescriptor(v3);
      qword_1ECE30118 = (uint64_t)&ggl::dottedRouteLineShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE30120 = ggl::crc32::compute<30ul>("DottedRouteLineShaderFragment");
      qword_1ECE30128 = (uint64_t)ggl::dottedRouteLineShaderShaderConstants(void)::ref;
      unk_1ECE30130 = 3;
      qword_1ECE30138 = (uint64_t)&ggl::dottedRouteLineShaderShaderTextures(void)::ref;
      unk_1ECE30140 = 0;
      qword_1ECE30148 = (uint64_t)&ggl::dottedRouteLineShaderShaderSamplers(void)::ref;
      unk_1ECE30150 = 0;
    }
  }
}

void ggl::dottedRouteLineShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::dottedRouteLineShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("DottedRouteLineShaderFragment");
      *(_DWORD *)algn_1ECE3069C = 1;
      qword_1ECE306A0 = (uint64_t)"DottedRouteLineShader";
      unk_1ECE306A8 = 0;
      qword_1ECE306B0 = 0;
      unk_1ECE306B8 = &ggl::dottedRouteLineShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE306C0 = 2;
      unk_1ECE306C8 = &ggl::dottedRouteLineShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE306D0 = 0;
      unk_1ECE306D8 = &ggl::dottedRouteLineShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE306E0 = 0;
      unk_1ECE306E8 = &ggl::dottedRouteLineShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE306F8 = 0;
      unk_1ECE30700 = 0;
      qword_1ECE306F0 = 0;
    }
  }
}

void ggl::dottedRouteLineShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::dottedRouteLineShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("DottedRouteLineShaderVertex");
      *(_DWORD *)algn_1ECE305B4 = 0;
      qword_1ECE305B8 = (uint64_t)"DottedRouteLineShader";
      unk_1ECE305C0 = ggl::dottedRouteLineShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE305C8 = 1;
      unk_1ECE305D0 = &ggl::dottedRouteLineShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE305D8 = 3;
      unk_1ECE305E0 = &ggl::dottedRouteLineShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE305E8 = 0;
      unk_1ECE305F0 = &ggl::dottedRouteLineShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE305F8 = 0;
      unk_1ECE30600 = &ggl::dottedRouteLineShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE30610 = 0;
      unk_1ECE30618 = 0;
      qword_1ECE30608 = 0;
    }
  }
}

void ggl::RouteLineMaskShader::typedReflection(ggl::RouteLineMaskShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::RouteLineMaskShader::typedReflection(void)::ref = (uint64_t)"RouteLineMaskShader";
      ggl::routeLineMaskShaderVertexFunctionDescriptor(v2);
      qword_1ECE44280 = (uint64_t)&ggl::routeLineMaskShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<26ul>("RouteLineMaskShaderVertex");
      dword_1ECE44288 = (int)v3;
      ggl::routeLineMaskShaderFragmentFunctionDescriptor(v3);
      qword_1ECE44290 = (uint64_t)&ggl::routeLineMaskShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE44298 = ggl::crc32::compute<28ul>("RouteLineMaskShaderFragment");
      qword_1ECE442A0 = (uint64_t)ggl::routeLineMaskShaderShaderConstants(void)::ref;
      unk_1ECE442A8 = 3;
      qword_1ECE442B0 = (uint64_t)&ggl::routeLineMaskShaderShaderTextures(void)::ref;
      unk_1ECE442B8 = 0;
      qword_1ECE442C0 = (uint64_t)&ggl::routeLineMaskShaderShaderSamplers(void)::ref;
      unk_1ECE442C8 = 0;
    }
  }
}

void ggl::routeLineMaskShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::routeLineMaskShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("RouteLineMaskShaderFragment");
      *(_DWORD *)algn_1ECE454B4 = 1;
      qword_1ECE454B8 = (uint64_t)"RouteLineMaskShader";
      unk_1ECE454C0 = 0;
      qword_1ECE454C8 = 0;
      unk_1ECE454D0 = &ggl::routeLineMaskShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE454D8 = 1;
      unk_1ECE454E0 = &ggl::routeLineMaskShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE454E8 = 0;
      unk_1ECE454F0 = &ggl::routeLineMaskShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE454F8 = 0;
      unk_1ECE45500 = &ggl::routeLineMaskShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE45510 = 0;
      unk_1ECE45518 = 0;
      qword_1ECE45508 = 0;
    }
  }
}

void ggl::routeLineMaskShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::routeLineMaskShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("RouteLineMaskShaderVertex");
      *(_DWORD *)algn_1ECE447AC = 0;
      qword_1ECE447B0 = (uint64_t)"RouteLineMaskShader";
      unk_1ECE447B8 = ggl::routeLineMaskShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE447C0 = 1;
      unk_1ECE447C8 = &ggl::routeLineMaskShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE447D0 = 3;
      unk_1ECE447D8 = &ggl::routeLineMaskShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE447E0 = 0;
      unk_1ECE447E8 = &ggl::routeLineMaskShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE447F0 = 0;
      unk_1ECE447F8 = &ggl::routeLineMaskShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE44808 = 0;
      unk_1ECE44810 = 0;
      qword_1ECE44800 = 0;
    }
  }
}

void ggl::DebugLineShader::typedReflection(ggl::DebugLineShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::DebugLineShader::typedReflection(void)::ref = (uint64_t)"DebugLineShader";
      ggl::debugLineShaderVertexFunctionDescriptor(v2);
      qword_1ECE34458 = (uint64_t)&ggl::debugLineShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<22ul>("DebugLineShaderVertex");
      dword_1ECE34460 = (int)v3;
      ggl::debugLineShaderFragmentFunctionDescriptor(v3);
      qword_1ECE34468 = (uint64_t)&ggl::debugLineShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE34470 = ggl::crc32::compute<24ul>("DebugLineShaderFragment");
      qword_1ECE34478 = (uint64_t)ggl::debugLineShaderShaderConstants(void)::ref;
      unk_1ECE34480 = 4;
      qword_1ECE34488 = (uint64_t)&ggl::debugLineShaderShaderTextures(void)::ref;
      unk_1ECE34490 = 0;
      qword_1ECE34498 = (uint64_t)&ggl::debugLineShaderShaderSamplers(void)::ref;
      unk_1ECE344A0 = 0;
    }
  }
}

void ggl::debugLineShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::debugLineShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("DebugLineShaderFragment");
      *(_DWORD *)algn_1ECE34D6C = 1;
      qword_1ECE34D70 = (uint64_t)"DebugLineShader";
      unk_1ECE34D78 = 0;
      qword_1ECE34D80 = 0;
      unk_1ECE34D88 = &ggl::debugLineShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE34D90 = 1;
      unk_1ECE34D98 = &ggl::debugLineShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE34DA0 = 0;
      unk_1ECE34DA8 = &ggl::debugLineShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE34DB0 = 0;
      unk_1ECE34DB8 = &ggl::debugLineShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE34DC8 = 0;
      unk_1ECE34DD0 = 0;
      qword_1ECE34DC0 = 0;
    }
  }
}

void ggl::debugLineShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::debugLineShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<22ul>("DebugLineShaderVertex");
      *(_DWORD *)algn_1ECE34C84 = 0;
      qword_1ECE34C88 = (uint64_t)"DebugLineShader";
      unk_1ECE34C90 = ggl::debugLineShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE34C98 = 1;
      unk_1ECE34CA0 = &ggl::debugLineShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE34CA8 = 4;
      unk_1ECE34CB0 = &ggl::debugLineShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE34CB8 = 0;
      unk_1ECE34CC0 = &ggl::debugLineShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE34CC8 = 0;
      unk_1ECE34CD0 = &ggl::debugLineShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE34CE0 = 0;
      unk_1ECE34CE8 = 0;
      qword_1ECE34CD8 = 0;
    }
  }
}

void ggl::PointShader::typedReflection(ggl::PointShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::PointShader::typedReflection(void)::ref = (uint64_t)"PointShader";
      ggl::pointShaderVertexFunctionDescriptor(v2);
      qword_1ECE38D70 = (uint64_t)&ggl::pointShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<18ul>("PointShaderVertex");
      dword_1ECE38D78 = (int)v3;
      ggl::pointShaderFragmentFunctionDescriptor(v3);
      qword_1ECE38D80 = (uint64_t)&ggl::pointShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE38D88 = ggl::crc32::compute<20ul>("PointShaderFragment");
      qword_1ECE38D90 = (uint64_t)ggl::pointShaderShaderConstants(void)::ref;
      unk_1ECE38D98 = 2;
      qword_1ECE38DA0 = (uint64_t)&ggl::pointShaderShaderTextures(void)::ref;
      unk_1ECE38DA8 = 0;
      qword_1ECE38DB0 = (uint64_t)&ggl::pointShaderShaderSamplers(void)::ref;
      unk_1ECE38DB8 = 0;
    }
  }
}

void ggl::pointShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::pointShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<20ul>("PointShaderFragment");
      *(_DWORD *)algn_1ECE3CF24 = 1;
      qword_1ECE3CF28 = (uint64_t)"PointShader";
      unk_1ECE3CF30 = 0;
      qword_1ECE3CF38 = 0;
      unk_1ECE3CF40 = &ggl::pointShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3CF48 = 1;
      unk_1ECE3CF50 = &ggl::pointShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3CF58 = 0;
      unk_1ECE3CF60 = &ggl::pointShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3CF68 = 0;
      unk_1ECE3CF70 = &ggl::pointShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3CF80 = 0;
      unk_1ECE3CF88 = 0;
      qword_1ECE3CF78 = 0;
    }
  }
}

void ggl::pointShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::pointShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<18ul>("PointShaderVertex");
      *(_DWORD *)algn_1ECE3C7EC = 0;
      qword_1ECE3C7F0 = (uint64_t)"PointShader";
      unk_1ECE3C7F8 = ggl::pointShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3C800 = 1;
      unk_1ECE3C808 = &ggl::pointShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3C810 = 2;
      unk_1ECE3C818 = &ggl::pointShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3C820 = 0;
      unk_1ECE3C828 = &ggl::pointShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3C830 = 0;
      unk_1ECE3C838 = &ggl::pointShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3C848 = 0;
      unk_1ECE3C850 = 0;
      qword_1ECE3C840 = 0;
    }
  }
}

void ggl::DebugShader::typedReflection(ggl::DebugShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::DebugShader::typedReflection(void)::ref = (uint64_t)"DebugShader";
      ggl::debugShaderVertexFunctionDescriptor(v2);
      qword_1ECE38D08 = (uint64_t)&ggl::debugShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<18ul>("DebugShaderVertex");
      dword_1ECE38D10 = (int)v3;
      ggl::debugShaderFragmentFunctionDescriptor(v3);
      qword_1ECE38D18 = (uint64_t)&ggl::debugShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE38D20 = ggl::crc32::compute<20ul>("DebugShaderFragment");
      qword_1ECE38D28 = (uint64_t)ggl::debugShaderShaderConstants(void)::ref;
      unk_1ECE38D30 = 3;
      qword_1ECE38D38 = (uint64_t)&ggl::debugShaderShaderTextures(void)::ref;
      unk_1ECE38D40 = 0;
      qword_1ECE38D48 = (uint64_t)&ggl::debugShaderShaderSamplers(void)::ref;
      unk_1ECE38D50 = 0;
    }
  }
}

void ggl::debugShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::debugShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<20ul>("DebugShaderFragment");
      *(_DWORD *)algn_1ECE3CDCC = 1;
      qword_1ECE3CDD0 = (uint64_t)"DebugShader";
      unk_1ECE3CDD8 = 0;
      qword_1ECE3CDE0 = 0;
      unk_1ECE3CDE8 = &ggl::debugShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3CDF0 = 1;
      unk_1ECE3CDF8 = &ggl::debugShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3CE00 = 0;
      unk_1ECE3CE08 = &ggl::debugShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3CE10 = 0;
      unk_1ECE3CE18 = &ggl::debugShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3CE28 = 0;
      unk_1ECE3CE30 = 0;
      qword_1ECE3CE20 = 0;
    }
  }
}

void ggl::debugShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::debugShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<18ul>("DebugShaderVertex");
      *(_DWORD *)algn_1ECE3C704 = 0;
      qword_1ECE3C708 = (uint64_t)"DebugShader";
      unk_1ECE3C710 = ggl::debugShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3C718 = 1;
      unk_1ECE3C720 = &ggl::debugShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3C728 = 3;
      unk_1ECE3C730 = &ggl::debugShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3C738 = 0;
      unk_1ECE3C740 = &ggl::debugShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3C748 = 0;
      unk_1ECE3C750 = &ggl::debugShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3C760 = 0;
      unk_1ECE3C768 = 0;
      qword_1ECE3C758 = 0;
    }
  }
}

void ggl::GlowShader::typedReflection(ggl::GlowShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::GlowShader::typedReflection(void)::ref = (uint64_t)"GlowShader";
      ggl::glowShaderVertexFunctionDescriptor(v2);
      qword_1ECE38A40 = (uint64_t)&ggl::glowShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<17ul>("GlowShaderVertex");
      dword_1ECE38A48 = (int)v3;
      ggl::glowShaderFragmentFunctionDescriptor(v3);
      qword_1ECE38A50 = (uint64_t)&ggl::glowShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE38A58 = ggl::crc32::compute<19ul>("GlowShaderFragment");
      qword_1ECE38A60 = (uint64_t)ggl::glowShaderShaderConstants(void)::ref;
      unk_1ECE38A68 = 3;
      qword_1ECE38A70 = (uint64_t)&ggl::glowShaderShaderTextures(void)::ref;
      unk_1ECE38A78 = 0;
      qword_1ECE38A80 = (uint64_t)&ggl::glowShaderShaderSamplers(void)::ref;
      unk_1ECE38A88 = 0;
    }
  }
}

void ggl::glowShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::glowShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("GlowShaderFragment");
      *(_DWORD *)algn_1ECE3CA94 = 1;
      qword_1ECE3CA98 = (uint64_t)"GlowShader";
      unk_1ECE3CAA0 = 0;
      qword_1ECE3CAA8 = 0;
      unk_1ECE3CAB0 = &ggl::glowShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3CAB8 = 1;
      unk_1ECE3CAC0 = &ggl::glowShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3CAC8 = 0;
      unk_1ECE3CAD0 = &ggl::glowShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3CAD8 = 0;
      unk_1ECE3CAE0 = &ggl::glowShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3CAF0 = 0;
      unk_1ECE3CAF8 = 0;
      qword_1ECE3CAE8 = 0;
    }
  }
}

void ggl::glowShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::glowShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<17ul>("GlowShaderVertex");
      *(_DWORD *)algn_1ECE3C3CC = 0;
      qword_1ECE3C3D0 = (uint64_t)"GlowShader";
      unk_1ECE3C3D8 = ggl::glowShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3C3E0 = 1;
      unk_1ECE3C3E8 = &ggl::glowShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3C3F0 = 3;
      unk_1ECE3C3F8 = &ggl::glowShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3C400 = 0;
      unk_1ECE3C408 = &ggl::glowShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3C410 = 0;
      unk_1ECE3C418 = &ggl::glowShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3C428 = 0;
      unk_1ECE3C430 = 0;
      qword_1ECE3C420 = 0;
    }
  }
}

void ggl::PatternedRouteLineShader::typedReflection(ggl::PatternedRouteLineShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::PatternedRouteLineShader::typedReflection(void)::ref = (uint64_t)"PatternedRouteLineShader";
      ggl::patternedRouteLineShaderVertexFunctionDescriptor(v2);
      qword_1ECE3AE10 = (uint64_t)&ggl::patternedRouteLineShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<31ul>("PatternedRouteLineShaderVertex");
      dword_1ECE3AE18 = (int)v3;
      ggl::patternedRouteLineShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3AE20 = (uint64_t)&ggl::patternedRouteLineShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3AE28 = ggl::crc32::compute<33ul>("PatternedRouteLineShaderFragment");
      qword_1ECE3AE30 = (uint64_t)ggl::patternedRouteLineShaderShaderConstants(void)::ref;
      unk_1ECE3AE38 = 4;
      qword_1ECE3AE40 = (uint64_t)ggl::patternedRouteLineShaderShaderTextures(void)::ref;
      unk_1ECE3AE48 = 1;
      qword_1ECE3AE50 = (uint64_t)ggl::patternedRouteLineShaderShaderSamplers(void)::ref;
      unk_1ECE3AE58 = 1;
    }
  }
}

void ggl::patternedRouteLineShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::patternedRouteLineShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("PatternedRouteLineShaderFragment");
      *(_DWORD *)algn_1ECE413D4 = 1;
      qword_1ECE413D8 = (uint64_t)"PatternedRouteLineShader";
      unk_1ECE413E0 = 0;
      qword_1ECE413E8 = 0;
      unk_1ECE413F0 = &ggl::patternedRouteLineShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE413F8 = 1;
      unk_1ECE41400 = &ggl::patternedRouteLineShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE41408 = 0;
      unk_1ECE41410 = &ggl::patternedRouteLineShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41418 = 1;
      unk_1ECE41420 = &ggl::patternedRouteLineShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE41430 = 0;
      unk_1ECE41438 = 0;
      qword_1ECE41428 = 1;
    }
  }
}

void ggl::patternedRouteLineShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::patternedRouteLineShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("PatternedRouteLineShaderVertex");
      *(_DWORD *)algn_1ECE4073C = 0;
      qword_1ECE40740 = (uint64_t)"PatternedRouteLineShader";
      unk_1ECE40748 = ggl::patternedRouteLineShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE40750 = 1;
      unk_1ECE40758 = &ggl::patternedRouteLineShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE40760 = 3;
      unk_1ECE40768 = &ggl::patternedRouteLineShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE40770 = 0;
      unk_1ECE40778 = &ggl::patternedRouteLineShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE40780 = 0;
      unk_1ECE40788 = &ggl::patternedRouteLineShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE40798 = 0;
      unk_1ECE407A0 = 0;
      qword_1ECE40790 = 0;
    }
  }
}

void ggl::MaskingOverlayFillShader::typedReflection(ggl::MaskingOverlayFillShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::MaskingOverlayFillShader::typedReflection(void)::ref = (uint64_t)"MaskingOverlayFillShader";
      ggl::maskingOverlayFillShaderVertexFunctionDescriptor(v2);
      qword_1ECE30278 = (uint64_t)&ggl::maskingOverlayFillShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<31ul>("MaskingOverlayFillShaderVertex");
      dword_1ECE30280 = (int)v3;
      ggl::maskingOverlayFillShaderFragmentFunctionDescriptor(v3);
      qword_1ECE30288 = (uint64_t)&ggl::maskingOverlayFillShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE30290 = ggl::crc32::compute<33ul>("MaskingOverlayFillShaderFragment");
      qword_1ECE30298 = (uint64_t)ggl::maskingOverlayFillShaderShaderConstants(void)::ref;
      unk_1ECE302A0 = 3;
      qword_1ECE302A8 = (uint64_t)ggl::maskingOverlayFillShaderShaderTextures(void)::ref;
      unk_1ECE302B0 = 1;
      qword_1ECE302B8 = (uint64_t)ggl::maskingOverlayFillShaderShaderSamplers(void)::ref;
      unk_1ECE302C0 = 1;
    }
  }
}

void ggl::maskingOverlayFillShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::maskingOverlayFillShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("MaskingOverlayFillShaderFragment");
      *(_DWORD *)algn_1ECE30A3C = 1;
      qword_1ECE30A40 = (uint64_t)"MaskingOverlayFillShader";
      unk_1ECE30A48 = 0;
      qword_1ECE30A50 = 0;
      unk_1ECE30A58 = &ggl::maskingOverlayFillShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE30A60 = 1;
      unk_1ECE30A68 = &ggl::maskingOverlayFillShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE30A70 = 0;
      unk_1ECE30A78 = &ggl::maskingOverlayFillShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE30A80 = 1;
      unk_1ECE30A88 = &ggl::maskingOverlayFillShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE30A98 = 0;
      unk_1ECE30AA0 = 0;
      qword_1ECE30A90 = 1;
    }
  }
}

void ggl::maskingOverlayFillShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::maskingOverlayFillShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("MaskingOverlayFillShaderVertex");
      *(_DWORD *)algn_1ECE307F4 = 0;
      qword_1ECE307F8 = (uint64_t)"MaskingOverlayFillShader";
      unk_1ECE30800 = ggl::maskingOverlayFillShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE30808 = 1;
      unk_1ECE30810 = &ggl::maskingOverlayFillShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE30818 = 3;
      unk_1ECE30820 = &ggl::maskingOverlayFillShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE30828 = 0;
      unk_1ECE30830 = &ggl::maskingOverlayFillShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE30838 = 0;
      unk_1ECE30840 = &ggl::maskingOverlayFillShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE30850 = 0;
      unk_1ECE30858 = 0;
      qword_1ECE30848 = 0;
    }
  }
}

void ggl::BuildingFlatStrokeShader::typedReflection(ggl::BuildingFlatStrokeShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::BuildingFlatStrokeShader::typedReflection(void)::ref = (uint64_t)"BuildingFlatStrokeShader";
      ggl::buildingFlatStrokeShaderVertexFunctionDescriptor(v2);
      qword_1ECE3AD00 = (uint64_t)&ggl::buildingFlatStrokeShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<31ul>("BuildingFlatStrokeShaderVertex");
      dword_1ECE3AD08 = (int)v3;
      ggl::buildingFlatStrokeShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3AD10 = (uint64_t)&ggl::buildingFlatStrokeShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3AD18 = ggl::crc32::compute<33ul>("BuildingFlatStrokeShaderFragment");
      qword_1ECE3AD20 = (uint64_t)ggl::buildingFlatStrokeShaderShaderConstants(void)::ref;
      unk_1ECE3AD28 = 2;
      qword_1ECE3AD30 = (uint64_t)ggl::buildingFlatStrokeShaderShaderTextures(void)::ref;
      unk_1ECE3AD38 = 1;
      qword_1ECE3AD40 = (uint64_t)&ggl::buildingFlatStrokeShaderShaderSamplers(void)::ref;
      unk_1ECE3AD48 = 1;
    }
  }
}

void ggl::buildingFlatStrokeShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::buildingFlatStrokeShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("BuildingFlatStrokeShaderFragment");
      *(_DWORD *)algn_1ECE41274 = 1;
      qword_1ECE41278 = (uint64_t)"BuildingFlatStrokeShader";
      unk_1ECE41280 = 0;
      qword_1ECE41288 = 0;
      unk_1ECE41290 = &ggl::buildingFlatStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE41298 = 0;
      unk_1ECE412A0 = &ggl::buildingFlatStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE412A8 = 0;
      unk_1ECE412B0 = &ggl::buildingFlatStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE412B8 = 1;
      unk_1ECE412C0 = &ggl::buildingFlatStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE412D0 = 0;
      unk_1ECE412D8 = 0;
      qword_1ECE412C8 = 1;
    }
  }
}

void ggl::buildingFlatStrokeShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::buildingFlatStrokeShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("BuildingFlatStrokeShaderVertex");
      *(_DWORD *)algn_1ECE404FC = 0;
      qword_1ECE40500 = (uint64_t)"BuildingFlatStrokeShader";
      unk_1ECE40508 = ggl::buildingFlatStrokeShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE40510 = 1;
      unk_1ECE40518 = &ggl::buildingFlatStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE40520 = 2;
      unk_1ECE40528 = &ggl::buildingFlatStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE40530 = 0;
      unk_1ECE40538 = &ggl::buildingFlatStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE40540 = 0;
      unk_1ECE40548 = &ggl::buildingFlatStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE40558 = 0;
      unk_1ECE40560 = 0;
      qword_1ECE40550 = 0;
    }
  }
}

void ggl::OuterShadowRibbonShader::typedReflection(ggl::OuterShadowRibbonShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::OuterShadowRibbonShader::typedReflection(void)::ref = (uint64_t)"OuterShadowRibbonShader";
      ggl::outerShadowRibbonShaderVertexFunctionDescriptor(v2);
      qword_1ECE3AB40 = (uint64_t)&ggl::outerShadowRibbonShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<30ul>("OuterShadowRibbonShaderVertex");
      dword_1ECE3AB48 = (int)v3;
      ggl::outerShadowRibbonShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3AB50 = (uint64_t)&ggl::outerShadowRibbonShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3AB58 = ggl::crc32::compute<32ul>("OuterShadowRibbonShaderFragment");
      qword_1ECE3AB60 = (uint64_t)ggl::outerShadowRibbonShaderShaderConstants(void)::ref;
      unk_1ECE3AB68 = 3;
      qword_1ECE3AB70 = (uint64_t)ggl::outerShadowRibbonShaderShaderTextures(void)::ref;
      unk_1ECE3AB78 = 1;
      qword_1ECE3AB80 = (uint64_t)&ggl::outerShadowRibbonShaderShaderSamplers(void)::ref;
      unk_1ECE3AB88 = 1;
    }
  }
}

void ggl::outerShadowRibbonShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::outerShadowRibbonShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("OuterShadowRibbonShaderFragment");
      *(_DWORD *)algn_1ECE40DF4 = 1;
      qword_1ECE40DF8 = (uint64_t)"OuterShadowRibbonShader";
      unk_1ECE40E00 = 0;
      qword_1ECE40E08 = 0;
      unk_1ECE40E10 = &ggl::outerShadowRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE40E18 = 1;
      unk_1ECE40E20 = &ggl::outerShadowRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE40E28 = 0;
      unk_1ECE40E30 = &ggl::outerShadowRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE40E38 = 1;
      unk_1ECE40E40 = &ggl::outerShadowRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE40E50 = 0;
      unk_1ECE40E58 = 0;
      qword_1ECE40E48 = 1;
    }
  }
}

void ggl::outerShadowRibbonShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::outerShadowRibbonShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("OuterShadowRibbonShaderVertex");
      *(_DWORD *)algn_1ECE400EC = 0;
      qword_1ECE400F0 = (uint64_t)"OuterShadowRibbonShader";
      unk_1ECE400F8 = ggl::outerShadowRibbonShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE40100 = 1;
      unk_1ECE40108 = &ggl::outerShadowRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE40110 = 3;
      unk_1ECE40118 = &ggl::outerShadowRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE40120 = 0;
      unk_1ECE40128 = &ggl::outerShadowRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE40130 = 0;
      unk_1ECE40138 = &ggl::outerShadowRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE40148 = 0;
      unk_1ECE40150 = 0;
      qword_1ECE40140 = 0;
    }
  }
}

void ggl::RouteLineTrafficShader::typedReflection(ggl::RouteLineTrafficShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::RouteLineTrafficShader::typedReflection(void)::ref = (uint64_t)"RouteLineTrafficShader";
      ggl::routeLineTrafficShaderVertexFunctionDescriptor(v2);
      qword_1ECE3A7F0 = (uint64_t)&ggl::routeLineTrafficShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<29ul>("RouteLineTrafficShaderVertex");
      dword_1ECE3A7F8 = (int)v3;
      ggl::routeLineTrafficShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3A800 = (uint64_t)&ggl::routeLineTrafficShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3A808 = ggl::crc32::compute<31ul>("RouteLineTrafficShaderFragment");
      qword_1ECE3A810 = (uint64_t)ggl::routeLineTrafficShaderShaderConstants(void)::ref;
      unk_1ECE3A818 = 3;
      qword_1ECE3A820 = (uint64_t)ggl::routeLineTrafficShaderShaderTextures(void)::ref;
      unk_1ECE3A828 = 1;
      qword_1ECE3A830 = (uint64_t)&ggl::routeLineTrafficShaderShaderSamplers(void)::ref;
      unk_1ECE3A838 = 1;
    }
  }
}

void ggl::routeLineTrafficShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::routeLineTrafficShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("RouteLineTrafficShaderFragment");
      *(_DWORD *)algn_1ECE40894 = 1;
      qword_1ECE40898 = (uint64_t)"RouteLineTrafficShader";
      unk_1ECE408A0 = 0;
      qword_1ECE408A8 = 0;
      unk_1ECE408B0 = &ggl::routeLineTrafficShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE408B8 = 1;
      unk_1ECE408C0 = &ggl::routeLineTrafficShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE408C8 = 0;
      unk_1ECE408D0 = &ggl::routeLineTrafficShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE408D8 = 1;
      unk_1ECE408E0 = &ggl::routeLineTrafficShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE408F0 = 0;
      unk_1ECE408F8 = 0;
      qword_1ECE408E8 = 1;
    }
  }
}

void ggl::routeLineTrafficShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::routeLineTrafficShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("RouteLineTrafficShaderVertex");
      *(_DWORD *)algn_1ECE3FADC = 0;
      qword_1ECE3FAE0 = (uint64_t)"RouteLineTrafficShader";
      unk_1ECE3FAE8 = ggl::routeLineTrafficShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3FAF0 = 1;
      unk_1ECE3FAF8 = &ggl::routeLineTrafficShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3FB00 = 3;
      unk_1ECE3FB08 = &ggl::routeLineTrafficShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3FB10 = 0;
      unk_1ECE3FB18 = &ggl::routeLineTrafficShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3FB20 = 0;
      unk_1ECE3FB28 = &ggl::routeLineTrafficShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3FB38 = 0;
      unk_1ECE3FB40 = 0;
      qword_1ECE3FB30 = 0;
    }
  }
}

void ggl::VenueWallEndCapShader::typedReflection(ggl::VenueWallEndCapShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::VenueWallEndCapShader::typedReflection(void)::ref = (uint64_t)"VenueWallEndCapShader";
      ggl::venueWallEndCapShaderVertexFunctionDescriptor(v2);
      qword_1ECE3A620 = (uint64_t)&ggl::venueWallEndCapShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<28ul>("VenueWallEndCapShaderVertex");
      dword_1ECE3A628 = (int)v3;
      ggl::venueWallEndCapShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3A630 = (uint64_t)&ggl::venueWallEndCapShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3A638 = ggl::crc32::compute<30ul>("VenueWallEndCapShaderFragment");
      qword_1ECE3A640 = (uint64_t)ggl::venueWallEndCapShaderShaderConstants(void)::ref;
      unk_1ECE3A648 = 4;
      qword_1ECE3A650 = (uint64_t)ggl::venueWallEndCapShaderShaderTextures(void)::ref;
      unk_1ECE3A658 = 1;
      qword_1ECE3A660 = (uint64_t)&ggl::venueWallEndCapShaderShaderSamplers(void)::ref;
      unk_1ECE3A668 = 1;
    }
  }
}

void ggl::venueWallEndCapShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::venueWallEndCapShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("VenueWallEndCapShaderFragment");
      *(_DWORD *)algn_1ECE40414 = 1;
      qword_1ECE40418 = (uint64_t)"VenueWallEndCapShader";
      unk_1ECE40420 = 0;
      qword_1ECE40428 = 0;
      unk_1ECE40430 = &ggl::venueWallEndCapShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE40438 = 0;
      unk_1ECE40440 = &ggl::venueWallEndCapShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE40448 = 0;
      unk_1ECE40450 = &ggl::venueWallEndCapShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE40458 = 1;
      unk_1ECE40460 = &ggl::venueWallEndCapShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE40470 = 0;
      unk_1ECE40478 = 0;
      qword_1ECE40468 = 1;
    }
  }
}

void ggl::venueWallEndCapShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::venueWallEndCapShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("VenueWallEndCapShaderVertex");
      *(_DWORD *)algn_1ECE3F6BC = 0;
      qword_1ECE3F6C0 = (uint64_t)"VenueWallEndCapShader";
      unk_1ECE3F6C8 = ggl::venueWallEndCapShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3F6D0 = 1;
      unk_1ECE3F6D8 = &ggl::venueWallEndCapShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3F6E0 = 4;
      unk_1ECE3F6E8 = &ggl::venueWallEndCapShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3F6F0 = 0;
      unk_1ECE3F6F8 = &ggl::venueWallEndCapShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3F700 = 0;
      unk_1ECE3F708 = &ggl::venueWallEndCapShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3F718 = 0;
      unk_1ECE3F720 = 0;
      qword_1ECE3F710 = 0;
    }
  }
}

void ggl::PrefilteredLineShader::typedReflection(ggl::PrefilteredLineShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::PrefilteredLineShader::typedReflection(void)::ref = (uint64_t)"PrefilteredLineShader";
      ggl::prefilteredLineShaderVertexFunctionDescriptor(v2);
      qword_1ECE3A570 = (uint64_t)&ggl::prefilteredLineShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<28ul>("PrefilteredLineShaderVertex");
      dword_1ECE3A578 = (int)v3;
      ggl::prefilteredLineShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3A580 = (uint64_t)&ggl::prefilteredLineShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3A588 = ggl::crc32::compute<30ul>("PrefilteredLineShaderFragment");
      qword_1ECE3A590 = (uint64_t)ggl::prefilteredLineShaderShaderConstants(void)::ref;
      unk_1ECE3A598 = 3;
      qword_1ECE3A5A0 = (uint64_t)ggl::prefilteredLineShaderShaderTextures(void)::ref;
      unk_1ECE3A5A8 = 1;
      qword_1ECE3A5B0 = (uint64_t)&ggl::prefilteredLineShaderShaderSamplers(void)::ref;
      unk_1ECE3A5B8 = 1;
    }
  }
}

void ggl::prefilteredLineShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::prefilteredLineShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("PrefilteredLineShaderFragment");
      *(_DWORD *)algn_1ECE401D4 = 1;
      qword_1ECE401D8 = (uint64_t)"PrefilteredLineShader";
      unk_1ECE401E0 = 0;
      qword_1ECE401E8 = 0;
      unk_1ECE401F0 = &ggl::prefilteredLineShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE401F8 = 0;
      unk_1ECE40200 = &ggl::prefilteredLineShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE40208 = 0;
      unk_1ECE40210 = &ggl::prefilteredLineShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE40218 = 1;
      unk_1ECE40220 = &ggl::prefilteredLineShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE40230 = 0;
      unk_1ECE40238 = 0;
      qword_1ECE40228 = 1;
    }
  }
}

void ggl::prefilteredLineShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::prefilteredLineShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("PrefilteredLineShaderVertex");
      *(_DWORD *)algn_1ECE3F4EC = 0;
      qword_1ECE3F4F0 = (uint64_t)"PrefilteredLineShader";
      unk_1ECE3F4F8 = ggl::prefilteredLineShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3F500 = 1;
      unk_1ECE3F508 = &ggl::prefilteredLineShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3F510 = 3;
      unk_1ECE3F518 = &ggl::prefilteredLineShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3F520 = 0;
      unk_1ECE3F528 = &ggl::prefilteredLineShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3F530 = 0;
      unk_1ECE3F538 = &ggl::prefilteredLineShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3F548 = 0;
      unk_1ECE3F550 = 0;
      qword_1ECE3F540 = 0;
    }
  }
}

void ggl::InstancedDebugShader::typedReflection(ggl::InstancedDebugShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::InstancedDebugShader::typedReflection(void)::ref = (uint64_t)"InstancedDebugShader";
      ggl::instancedDebugShaderVertexFunctionDescriptor(v2);
      qword_1ECE442D8 = (uint64_t)&ggl::instancedDebugShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<27ul>("InstancedDebugShaderVertex");
      dword_1ECE442E0 = (int)v3;
      ggl::instancedDebugShaderFragmentFunctionDescriptor(v3);
      qword_1ECE442E8 = (uint64_t)&ggl::instancedDebugShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE442F0 = ggl::crc32::compute<29ul>("InstancedDebugShaderFragment");
      qword_1ECE442F8 = (uint64_t)ggl::instancedDebugShaderShaderConstants(void)::ref;
      unk_1ECE44300 = 3;
      qword_1ECE44308 = (uint64_t)&ggl::instancedDebugShaderShaderTextures(void)::ref;
      unk_1ECE44310 = 0;
      qword_1ECE44318 = (uint64_t)&ggl::instancedDebugShaderShaderSamplers(void)::ref;
      unk_1ECE44320 = 0;
    }
  }
}

void ggl::instancedDebugShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::instancedDebugShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("InstancedDebugShaderFragment");
      *(_DWORD *)algn_1ECE44AE4 = 1;
      qword_1ECE44AE8 = (uint64_t)"InstancedDebugShader";
      unk_1ECE44AF0 = 0;
      qword_1ECE44AF8 = 0;
      unk_1ECE44B00 = &ggl::instancedDebugShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE44B08 = 1;
      unk_1ECE44B10 = &ggl::instancedDebugShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE44B18 = 0;
      unk_1ECE44B20 = &ggl::instancedDebugShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE44B28 = 0;
      unk_1ECE44B30 = &ggl::instancedDebugShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE44B40 = 0;
      unk_1ECE44B48 = 0;
      qword_1ECE44B38 = 0;
    }
  }
}

void ggl::instancedDebugShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::instancedDebugShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("InstancedDebugShaderVertex");
      *(_DWORD *)algn_1ECE44894 = 0;
      qword_1ECE44898 = (uint64_t)"InstancedDebugShader";
      unk_1ECE448A0 = ggl::instancedDebugShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE448A8 = 2;
      unk_1ECE448B0 = &ggl::instancedDebugShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE448B8 = 3;
      unk_1ECE448C0 = &ggl::instancedDebugShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE448C8 = 1;
      unk_1ECE448D0 = &ggl::instancedDebugShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE448D8 = 0;
      unk_1ECE448E0 = &ggl::instancedDebugShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE448F0 = 0;
      unk_1ECE448F8 = 0;
      qword_1ECE448E8 = 0;
    }
  }
}

void ggl::BuildingShadowShader::typedReflection(ggl::BuildingShadowShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::BuildingShadowShader::typedReflection(void)::ref = (uint64_t)"BuildingShadowShader";
      ggl::buildingShadowShaderVertexFunctionDescriptor(v2);
      qword_1ECE3A170 = (uint64_t)&ggl::buildingShadowShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<27ul>("BuildingShadowShaderVertex");
      dword_1ECE3A178 = (int)v3;
      ggl::buildingShadowShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3A180 = (uint64_t)&ggl::buildingShadowShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3A188 = ggl::crc32::compute<29ul>("BuildingShadowShaderFragment");
      qword_1ECE3A190 = (uint64_t)ggl::buildingShadowShaderShaderConstants(void)::ref;
      unk_1ECE3A198 = 2;
      qword_1ECE3A1A0 = (uint64_t)ggl::buildingShadowShaderShaderTextures(void)::ref;
      unk_1ECE3A1A8 = 1;
      qword_1ECE3A1B0 = (uint64_t)&ggl::buildingShadowShaderShaderSamplers(void)::ref;
      unk_1ECE3A1B8 = 1;
    }
  }
}

void ggl::buildingShadowShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::buildingShadowShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("BuildingShadowShaderFragment");
      *(_DWORD *)algn_1ECE3F7A4 = 1;
      qword_1ECE3F7A8 = (uint64_t)"BuildingShadowShader";
      unk_1ECE3F7B0 = 0;
      qword_1ECE3F7B8 = 0;
      unk_1ECE3F7C0 = &ggl::buildingShadowShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3F7C8 = 1;
      unk_1ECE3F7D0 = &ggl::buildingShadowShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3F7D8 = 0;
      unk_1ECE3F7E0 = &ggl::buildingShadowShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3F7E8 = 1;
      unk_1ECE3F7F0 = &ggl::buildingShadowShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3F800 = 0;
      unk_1ECE3F808 = 0;
      qword_1ECE3F7F8 = 1;
    }
  }
}

void ggl::buildingShadowShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::buildingShadowShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("BuildingShadowShaderVertex");
      *(_DWORD *)algn_1ECE3E89C = 0;
      qword_1ECE3E8A0 = (uint64_t)"BuildingShadowShader";
      unk_1ECE3E8A8 = ggl::buildingShadowShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3E8B0 = 1;
      unk_1ECE3E8B8 = &ggl::buildingShadowShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3E8C0 = 2;
      unk_1ECE3E8C8 = &ggl::buildingShadowShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3E8D0 = 0;
      unk_1ECE3E8D8 = &ggl::buildingShadowShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3E8E0 = 0;
      unk_1ECE3E8E8 = &ggl::buildingShadowShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3E8F8 = 0;
      unk_1ECE3E900 = 0;
      qword_1ECE3E8F0 = 0;
    }
  }
}

void ggl::ManeuverPointShader::typedReflection(ggl::ManeuverPointShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::ManeuverPointShader::typedReflection(void)::ref = (uint64_t)"ManeuverPointShader";
      ggl::maneuverPointShaderVertexFunctionDescriptor(v2);
      qword_1ECE39EA0 = (uint64_t)&ggl::maneuverPointShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<26ul>("ManeuverPointShaderVertex");
      dword_1ECE39EA8 = (int)v3;
      ggl::maneuverPointShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39EB0 = (uint64_t)&ggl::maneuverPointShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39EB8 = ggl::crc32::compute<28ul>("ManeuverPointShaderFragment");
      qword_1ECE39EC0 = (uint64_t)ggl::maneuverPointShaderShaderConstants(void)::ref;
      unk_1ECE39EC8 = 2;
      qword_1ECE39ED0 = (uint64_t)ggl::maneuverPointShaderShaderTextures(void)::ref;
      unk_1ECE39ED8 = 1;
      qword_1ECE39EE0 = (uint64_t)&ggl::maneuverPointShaderShaderSamplers(void)::ref;
      unk_1ECE39EE8 = 1;
    }
  }
}

void ggl::maneuverPointShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::maneuverPointShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("ManeuverPointShaderFragment");
      *(_DWORD *)algn_1ECE3F2A4 = 1;
      qword_1ECE3F2A8 = (uint64_t)"ManeuverPointShader";
      unk_1ECE3F2B0 = 0;
      qword_1ECE3F2B8 = 0;
      unk_1ECE3F2C0 = &ggl::maneuverPointShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3F2C8 = 1;
      unk_1ECE3F2D0 = &ggl::maneuverPointShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3F2D8 = 0;
      unk_1ECE3F2E0 = &ggl::maneuverPointShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3F2E8 = 1;
      unk_1ECE3F2F0 = &ggl::maneuverPointShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3F300 = 0;
      unk_1ECE3F308 = 0;
      qword_1ECE3F2F8 = 1;
    }
  }
}

void ggl::maneuverPointShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::maneuverPointShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("ManeuverPointShaderVertex");
      *(_DWORD *)algn_1ECE3E3AC = 0;
      qword_1ECE3E3B0 = (uint64_t)"ManeuverPointShader";
      unk_1ECE3E3B8 = ggl::maneuverPointShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3E3C0 = 1;
      unk_1ECE3E3C8 = &ggl::maneuverPointShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3E3D0 = 2;
      unk_1ECE3E3D8 = &ggl::maneuverPointShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3E3E0 = 0;
      unk_1ECE3E3E8 = &ggl::maneuverPointShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3E3F0 = 0;
      unk_1ECE3E3F8 = &ggl::maneuverPointShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3E408 = 0;
      unk_1ECE3E410 = 0;
      qword_1ECE3E400 = 0;
    }
  }
}

void ggl::VenueWallTopShader::typedReflection(ggl::VenueWallTopShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::VenueWallTopShader::typedReflection(void)::ref = (uint64_t)"VenueWallTopShader";
      ggl::venueWallTopShaderVertexFunctionDescriptor(v2);
      qword_1ECE39CD0 = (uint64_t)&ggl::venueWallTopShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<25ul>("VenueWallTopShaderVertex");
      dword_1ECE39CD8 = (int)v3;
      ggl::venueWallTopShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39CE0 = (uint64_t)&ggl::venueWallTopShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39CE8 = ggl::crc32::compute<27ul>("VenueWallTopShaderFragment");
      qword_1ECE39CF0 = (uint64_t)ggl::venueWallTopShaderShaderConstants(void)::ref;
      unk_1ECE39CF8 = 3;
      qword_1ECE39D00 = (uint64_t)ggl::venueWallTopShaderShaderTextures(void)::ref;
      unk_1ECE39D08 = 1;
      qword_1ECE39D10 = (uint64_t)ggl::venueWallTopShaderShaderSamplers(void)::ref;
      unk_1ECE39D18 = 1;
    }
  }
}

void ggl::venueWallTopShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::venueWallTopShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("VenueWallTopShaderFragment");
      *(_DWORD *)algn_1ECE3EE94 = 1;
      qword_1ECE3EE98 = (uint64_t)"VenueWallTopShader";
      unk_1ECE3EEA0 = 0;
      qword_1ECE3EEA8 = 0;
      unk_1ECE3EEB0 = &ggl::venueWallTopShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3EEB8 = 0;
      unk_1ECE3EEC0 = &ggl::venueWallTopShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3EEC8 = 0;
      unk_1ECE3EED0 = &ggl::venueWallTopShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3EED8 = 1;
      unk_1ECE3EEE0 = &ggl::venueWallTopShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3EEF0 = 0;
      unk_1ECE3EEF8 = 0;
      qword_1ECE3EEE8 = 1;
    }
  }
}

void ggl::venueWallTopShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::venueWallTopShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("VenueWallTopShaderVertex");
      *(_DWORD *)algn_1ECE3E0FC = 0;
      qword_1ECE3E100 = (uint64_t)"VenueWallTopShader";
      unk_1ECE3E108 = ggl::venueWallTopShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3E110 = 1;
      unk_1ECE3E118 = &ggl::venueWallTopShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3E120 = 3;
      unk_1ECE3E128 = &ggl::venueWallTopShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3E130 = 0;
      unk_1ECE3E138 = &ggl::venueWallTopShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3E140 = 0;
      unk_1ECE3E148 = &ggl::venueWallTopShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3E158 = 0;
      unk_1ECE3E160 = 0;
      qword_1ECE3E150 = 0;
    }
  }
}

void ggl::LandmarkFlatShader::typedReflection(ggl::LandmarkFlatShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::LandmarkFlatShader::typedReflection(void)::ref = (uint64_t)"LandmarkFlatShader";
      ggl::landmarkFlatShaderVertexFunctionDescriptor(v2);
      qword_1ECE39B60 = (uint64_t)&ggl::landmarkFlatShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<25ul>("LandmarkFlatShaderVertex");
      dword_1ECE39B68 = (int)v3;
      ggl::landmarkFlatShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39B70 = (uint64_t)&ggl::landmarkFlatShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39B78 = ggl::crc32::compute<27ul>("LandmarkFlatShaderFragment");
      qword_1ECE39B80 = (uint64_t)ggl::landmarkFlatShaderShaderConstants(void)::ref;
      unk_1ECE39B88 = 4;
      qword_1ECE39B90 = (uint64_t)ggl::landmarkFlatShaderShaderTextures(void)::ref;
      unk_1ECE39B98 = 1;
      qword_1ECE39BA0 = (uint64_t)&ggl::landmarkFlatShaderShaderSamplers(void)::ref;
      unk_1ECE39BA8 = 1;
    }
  }
}

void ggl::landmarkFlatShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::landmarkFlatShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("LandmarkFlatShaderFragment");
      *(_DWORD *)algn_1ECE3EB54 = 1;
      qword_1ECE3EB58 = (uint64_t)"LandmarkFlatShader";
      unk_1ECE3EB60 = 0;
      qword_1ECE3EB68 = 0;
      unk_1ECE3EB70 = &ggl::landmarkFlatShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3EB78 = 1;
      unk_1ECE3EB80 = &ggl::landmarkFlatShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3EB88 = 0;
      unk_1ECE3EB90 = &ggl::landmarkFlatShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3EB98 = 1;
      unk_1ECE3EBA0 = &ggl::landmarkFlatShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3EBB0 = 0;
      unk_1ECE3EBB8 = 0;
      qword_1ECE3EBA8 = 1;
    }
  }
}

void ggl::landmarkFlatShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::landmarkFlatShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("LandmarkFlatShaderVertex");
      *(_DWORD *)algn_1ECE3DF2C = 0;
      qword_1ECE3DF30 = (uint64_t)"LandmarkFlatShader";
      unk_1ECE3DF38 = ggl::landmarkFlatShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3DF40 = 1;
      unk_1ECE3DF48 = &ggl::landmarkFlatShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3DF50 = 4;
      unk_1ECE3DF58 = &ggl::landmarkFlatShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3DF60 = 0;
      unk_1ECE3DF68 = &ggl::landmarkFlatShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3DF70 = 0;
      unk_1ECE3DF78 = &ggl::landmarkFlatShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3DF88 = 0;
      unk_1ECE3DF90 = 0;
      qword_1ECE3DF80 = 0;
    }
  }
}

void ggl::VenueWallShader::typedReflection(ggl::VenueWallShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::VenueWallShader::typedReflection(void)::ref = (uint64_t)"VenueWallShader";
      ggl::venueWallShaderVertexFunctionDescriptor(v2);
      qword_1ECE39510 = (uint64_t)&ggl::venueWallShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<22ul>("VenueWallShaderVertex");
      dword_1ECE39518 = (int)v3;
      ggl::venueWallShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39520 = (uint64_t)&ggl::venueWallShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39528 = ggl::crc32::compute<24ul>("VenueWallShaderFragment");
      qword_1ECE39530 = (uint64_t)ggl::venueWallShaderShaderConstants(void)::ref;
      unk_1ECE39538 = 4;
      qword_1ECE39540 = (uint64_t)ggl::venueWallShaderShaderTextures(void)::ref;
      unk_1ECE39548 = 1;
      qword_1ECE39550 = (uint64_t)ggl::venueWallShaderShaderSamplers(void)::ref;
      unk_1ECE39558 = 1;
    }
  }
}

void ggl::venueWallShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::venueWallShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("VenueWallShaderFragment");
      *(_DWORD *)algn_1ECE3DC84 = 1;
      qword_1ECE3DC88 = (uint64_t)"VenueWallShader";
      unk_1ECE3DC90 = 0;
      qword_1ECE3DC98 = 0;
      unk_1ECE3DCA0 = &ggl::venueWallShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3DCA8 = 0;
      unk_1ECE3DCB0 = &ggl::venueWallShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3DCB8 = 0;
      unk_1ECE3DCC0 = &ggl::venueWallShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3DCC8 = 1;
      unk_1ECE3DCD0 = &ggl::venueWallShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3DCE0 = 0;
      unk_1ECE3DCE8 = 0;
      qword_1ECE3DCD8 = 1;
    }
  }
}

void ggl::venueWallShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::venueWallShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<22ul>("VenueWallShaderVertex");
      *(_DWORD *)algn_1ECE3D55C = 0;
      qword_1ECE3D560 = (uint64_t)"VenueWallShader";
      unk_1ECE3D568 = ggl::venueWallShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3D570 = 1;
      unk_1ECE3D578 = &ggl::venueWallShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3D580 = 4;
      unk_1ECE3D588 = &ggl::venueWallShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3D590 = 0;
      unk_1ECE3D598 = &ggl::venueWallShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3D5A0 = 0;
      unk_1ECE3D5A8 = &ggl::venueWallShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3D5B8 = 0;
      unk_1ECE3D5C0 = 0;
      qword_1ECE3D5B0 = 0;
    }
  }
}

void ggl::RouteLineShader::typedReflection(ggl::RouteLineShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::RouteLineShader::typedReflection(void)::ref = (uint64_t)"RouteLineShader";
      ggl::routeLineShaderVertexFunctionDescriptor(v2);
      qword_1ECE39450 = (uint64_t)&ggl::routeLineShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<22ul>("RouteLineShaderVertex");
      dword_1ECE39458 = (int)v3;
      ggl::routeLineShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39460 = (uint64_t)&ggl::routeLineShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39468 = ggl::crc32::compute<24ul>("RouteLineShaderFragment");
      qword_1ECE39470 = (uint64_t)ggl::routeLineShaderShaderConstants(void)::ref;
      unk_1ECE39478 = 3;
      qword_1ECE39480 = (uint64_t)ggl::routeLineShaderShaderTextures(void)::ref;
      unk_1ECE39488 = 1;
      qword_1ECE39490 = (uint64_t)ggl::routeLineShaderShaderSamplers(void)::ref;
      unk_1ECE39498 = 1;
    }
  }
}

void ggl::routeLineShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::routeLineShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("RouteLineShaderFragment");
      *(_DWORD *)algn_1ECE3DA44 = 1;
      qword_1ECE3DA48 = (uint64_t)"RouteLineShader";
      unk_1ECE3DA50 = 0;
      qword_1ECE3DA58 = 0;
      unk_1ECE3DA60 = &ggl::routeLineShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3DA68 = 1;
      unk_1ECE3DA70 = &ggl::routeLineShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3DA78 = 0;
      unk_1ECE3DA80 = &ggl::routeLineShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3DA88 = 1;
      unk_1ECE3DA90 = &ggl::routeLineShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3DAA0 = 0;
      unk_1ECE3DAA8 = 0;
      qword_1ECE3DA98 = 1;
    }
  }
}

void ggl::routeLineShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::routeLineShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<22ul>("RouteLineShaderVertex");
      *(_DWORD *)algn_1ECE3D47C = 0;
      qword_1ECE3D480 = (uint64_t)"RouteLineShader";
      unk_1ECE3D488 = ggl::routeLineShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3D490 = 1;
      unk_1ECE3D498 = &ggl::routeLineShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3D4A0 = 3;
      unk_1ECE3D4A8 = &ggl::routeLineShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3D4B0 = 0;
      unk_1ECE3D4B8 = &ggl::routeLineShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3D4C0 = 0;
      unk_1ECE3D4C8 = &ggl::routeLineShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3D4D8 = 0;
      unk_1ECE3D4E0 = 0;
      qword_1ECE3D4D0 = 0;
    }
  }
}

void ggl::IconShader::typedReflection(ggl::IconShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::IconShader::typedReflection(void)::ref = (uint64_t)"IconShader";
      ggl::iconShaderVertexFunctionDescriptor(v2);
      qword_1ECE38AF0 = (uint64_t)&ggl::iconShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<17ul>("IconShaderVertex");
      dword_1ECE38AF8 = (int)v3;
      ggl::iconShaderFragmentFunctionDescriptor(v3);
      qword_1ECE38B00 = (uint64_t)&ggl::iconShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE38B08 = ggl::crc32::compute<19ul>("IconShaderFragment");
      qword_1ECE38B10 = (uint64_t)ggl::iconShaderShaderConstants(void)::ref;
      unk_1ECE38B18 = 3;
      qword_1ECE38B20 = (uint64_t)ggl::iconShaderShaderTextures(void)::ref;
      unk_1ECE38B28 = 2;
      qword_1ECE38B30 = (uint64_t)ggl::iconShaderShaderSamplers(void)::ref;
      unk_1ECE38B38 = 2;
    }
  }
}

void ggl::iconShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::iconShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<19ul>("IconShaderFragment");
      *(_DWORD *)algn_1ECE3CB84 = 1;
      qword_1ECE3CB88 = (uint64_t)"IconShader";
      unk_1ECE3CB90 = 0;
      qword_1ECE3CB98 = 0;
      unk_1ECE3CBA0 = &ggl::iconShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3CBA8 = 1;
      unk_1ECE3CBB0 = &ggl::iconShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3CBB8 = 0;
      unk_1ECE3CBC0 = &ggl::iconShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3CBC8 = 1;
      unk_1ECE3CBD0 = &ggl::iconShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3CBE0 = 0;
      unk_1ECE3CBE8 = 0;
      qword_1ECE3CBD8 = 1;
    }
  }
}

void ggl::iconShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::iconShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<17ul>("IconShaderVertex");
      *(_DWORD *)algn_1ECE3C4BC = 0;
      qword_1ECE3C4C0 = (uint64_t)"IconShader";
      unk_1ECE3C4C8 = ggl::iconShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3C4D0 = 1;
      unk_1ECE3C4D8 = &ggl::iconShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3C4E0 = 2;
      unk_1ECE3C4E8 = &ggl::iconShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3C4F0 = 0;
      unk_1ECE3C4F8 = &ggl::iconShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3C500 = 1;
      unk_1ECE3C508 = &ggl::iconShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3C518 = 0;
      unk_1ECE3C520 = 0;
      qword_1ECE3C510 = 1;
    }
  }
}

void ggl::TexturedSolidRibbonShader::typedReflection(ggl::TexturedSolidRibbonShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::TexturedSolidRibbonShader::typedReflection(void)::ref = (uint64_t)"TexturedSolidRibbonShader";
      ggl::texturedSolidRibbonShaderVertexFunctionDescriptor(v2);
      qword_1ECE3B318 = (uint64_t)&ggl::texturedSolidRibbonShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<32ul>("TexturedSolidRibbonShaderVertex");
      dword_1ECE3B320 = (int)v3;
      ggl::texturedSolidRibbonShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3B328 = (uint64_t)&ggl::texturedSolidRibbonShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3B330 = ggl::crc32::compute<34ul>("TexturedSolidRibbonShaderFragment");
      qword_1ECE3B338 = (uint64_t)ggl::texturedSolidRibbonShaderShaderConstants(void)::ref;
      unk_1ECE3B340 = 4;
      qword_1ECE3B348 = (uint64_t)ggl::texturedSolidRibbonShaderShaderTextures(void)::ref;
      unk_1ECE3B350 = 2;
      qword_1ECE3B358 = (uint64_t)ggl::texturedSolidRibbonShaderShaderSamplers(void)::ref;
      unk_1ECE3B360 = 2;
    }
  }
}

void ggl::texturedSolidRibbonShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::texturedSolidRibbonShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("TexturedSolidRibbonShaderFragment");
      *(_DWORD *)algn_1ECE41C6C = 1;
      qword_1ECE41C80 = 0;
      unk_1ECE41C88 = &ggl::texturedSolidRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE41C70 = (uint64_t)"TexturedSolidRibbonShader";
      unk_1ECE41C78 = 0;
      qword_1ECE41C90 = 1;
      unk_1ECE41C98 = &ggl::texturedSolidRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE41CA0 = 0;
      unk_1ECE41CA8 = &ggl::texturedSolidRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41CB0 = 2;
      unk_1ECE41CB8 = &ggl::texturedSolidRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE41CC8 = 0;
      unk_1ECE41CD0 = 0;
      qword_1ECE41CC0 = 2;
    }
  }
}

void ggl::texturedSolidRibbonShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::texturedSolidRibbonShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("TexturedSolidRibbonShaderVertex");
      *(_DWORD *)algn_1ECE41184 = 0;
      qword_1ECE41188 = (uint64_t)"TexturedSolidRibbonShader";
      unk_1ECE41190 = ggl::texturedSolidRibbonShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE41198 = 1;
      unk_1ECE411A0 = &ggl::texturedSolidRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE411A8 = 4;
      unk_1ECE411B0 = &ggl::texturedSolidRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE411B8 = 0;
      unk_1ECE411C0 = &ggl::texturedSolidRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE411C8 = 0;
      unk_1ECE411D0 = &ggl::texturedSolidRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE411E0 = 0;
      unk_1ECE411E8 = 0;
      qword_1ECE411D8 = 0;
    }
  }
}

void ggl::TexturedSRGBBlendShader::typedReflection(ggl::TexturedSRGBBlendShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::TexturedSRGBBlendShader::typedReflection(void)::ref = (uint64_t)"TexturedSRGBBlendShader";
      ggl::texturedSRGBBlendShaderVertexFunctionDescriptor(v2);
      qword_1ECE3AC50 = (uint64_t)&ggl::texturedSRGBBlendShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<30ul>("TexturedSRGBBlendShaderVertex");
      dword_1ECE3AC58 = (int)v3;
      ggl::texturedSRGBBlendShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3AC60 = (uint64_t)&ggl::texturedSRGBBlendShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3AC68 = ggl::crc32::compute<32ul>("TexturedSRGBBlendShaderFragment");
      qword_1ECE3AC70 = (uint64_t)ggl::texturedSRGBBlendShaderShaderConstants(void)::ref;
      unk_1ECE3AC78 = 5;
      qword_1ECE3AC80 = (uint64_t)ggl::texturedSRGBBlendShaderShaderTextures(void)::ref;
      unk_1ECE3AC88 = 1;
      qword_1ECE3AC90 = (uint64_t)ggl::texturedSRGBBlendShaderShaderSamplers(void)::ref;
      unk_1ECE3AC98 = 1;
    }
  }
}

void ggl::texturedSRGBBlendShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::texturedSRGBBlendShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("TexturedSRGBBlendShaderFragment");
      *(_DWORD *)algn_1ECE41114 = 1;
      qword_1ECE41118 = (uint64_t)"TexturedSRGBBlendShader";
      unk_1ECE41120 = 0;
      qword_1ECE41128 = 0;
      unk_1ECE41130 = &ggl::texturedSRGBBlendShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE41138 = 2;
      unk_1ECE41140 = &ggl::texturedSRGBBlendShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE41148 = 0;
      unk_1ECE41150 = &ggl::texturedSRGBBlendShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41158 = 1;
      unk_1ECE41160 = &ggl::texturedSRGBBlendShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE41170 = 0;
      unk_1ECE41178 = 0;
      qword_1ECE41168 = 1;
    }
  }
}

void ggl::texturedSRGBBlendShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::texturedSRGBBlendShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("TexturedSRGBBlendShaderVertex");
      *(_DWORD *)algn_1ECE402BC = 0;
      qword_1ECE402C0 = (uint64_t)"TexturedSRGBBlendShader";
      unk_1ECE402C8 = ggl::texturedSRGBBlendShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE402D0 = 1;
      unk_1ECE402D8 = &ggl::texturedSRGBBlendShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE402E0 = 3;
      unk_1ECE402E8 = &ggl::texturedSRGBBlendShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE402F0 = 0;
      unk_1ECE402F8 = &ggl::texturedSRGBBlendShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE40300 = 0;
      unk_1ECE40308 = &ggl::texturedSRGBBlendShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE40318 = 0;
      unk_1ECE40320 = 0;
      qword_1ECE40310 = 0;
    }
  }
}

void ggl::SpecularLandmarkShader::typedReflection(ggl::SpecularLandmarkShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::SpecularLandmarkShader::typedReflection(void)::ref = (uint64_t)"SpecularLandmarkShader";
      ggl::specularLandmarkShaderVertexFunctionDescriptor(v2);
      qword_1ECE3A8A0 = (uint64_t)&ggl::specularLandmarkShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<29ul>("SpecularLandmarkShaderVertex");
      dword_1ECE3A8A8 = (int)v3;
      ggl::specularLandmarkShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3A8B0 = (uint64_t)&ggl::specularLandmarkShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3A8B8 = ggl::crc32::compute<31ul>("SpecularLandmarkShaderFragment");
      qword_1ECE3A8C0 = (uint64_t)ggl::specularLandmarkShaderShaderConstants(void)::ref;
      unk_1ECE3A8C8 = 7;
      qword_1ECE3A8D0 = (uint64_t)ggl::specularLandmarkShaderShaderTextures(void)::ref;
      unk_1ECE3A8D8 = 1;
      qword_1ECE3A8E0 = (uint64_t)&ggl::specularLandmarkShaderShaderSamplers(void)::ref;
      unk_1ECE3A8E8 = 1;
    }
  }
}

void ggl::specularLandmarkShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::specularLandmarkShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("SpecularLandmarkShaderFragment");
      *(_DWORD *)algn_1ECE409F4 = 1;
      qword_1ECE409F8 = (uint64_t)"SpecularLandmarkShader";
      unk_1ECE40A00 = 0;
      qword_1ECE40A08 = 0;
      unk_1ECE40A10 = &ggl::specularLandmarkShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE40A18 = 4;
      unk_1ECE40A20 = &ggl::specularLandmarkShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE40A28 = 0;
      unk_1ECE40A30 = &ggl::specularLandmarkShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE40A38 = 1;
      unk_1ECE40A40 = &ggl::specularLandmarkShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE40A50 = 0;
      unk_1ECE40A58 = 0;
      qword_1ECE40A48 = 1;
    }
  }
}

void ggl::specularLandmarkShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::specularLandmarkShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("SpecularLandmarkShaderVertex");
      *(_DWORD *)algn_1ECE3FBCC = 0;
      qword_1ECE3FBD0 = (uint64_t)"SpecularLandmarkShader";
      unk_1ECE3FBD8 = ggl::specularLandmarkShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3FBE0 = 1;
      unk_1ECE3FBE8 = &ggl::specularLandmarkShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3FBF0 = 6;
      unk_1ECE3FBF8 = &ggl::specularLandmarkShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3FC00 = 0;
      unk_1ECE3FC08 = &ggl::specularLandmarkShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3FC10 = 0;
      unk_1ECE3FC18 = &ggl::specularLandmarkShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3FC28 = 0;
      unk_1ECE3FC30 = 0;
      qword_1ECE3FC20 = 0;
    }
  }
}

void ggl::SpecularBuildingShader::typedReflection(ggl::SpecularBuildingShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::SpecularBuildingShader::typedReflection(void)::ref = (uint64_t)"SpecularBuildingShader";
      ggl::specularBuildingShaderVertexFunctionDescriptor(v2);
      qword_1ECE3A848 = (uint64_t)&ggl::specularBuildingShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<29ul>("SpecularBuildingShaderVertex");
      dword_1ECE3A850 = (int)v3;
      ggl::specularBuildingShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3A858 = (uint64_t)&ggl::specularBuildingShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3A860 = ggl::crc32::compute<31ul>("SpecularBuildingShaderFragment");
      qword_1ECE3A868 = (uint64_t)ggl::specularBuildingShaderShaderConstants(void)::ref;
      unk_1ECE3A870 = 7;
      qword_1ECE3A878 = (uint64_t)ggl::specularBuildingShaderShaderTextures(void)::ref;
      unk_1ECE3A880 = 1;
      qword_1ECE3A888 = (uint64_t)&ggl::specularBuildingShaderShaderSamplers(void)::ref;
      unk_1ECE3A890 = 1;
    }
  }
}

void ggl::specularBuildingShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::specularBuildingShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("SpecularBuildingShaderFragment");
      *(_DWORD *)algn_1ECE4097C = 1;
      qword_1ECE40980 = (uint64_t)"SpecularBuildingShader";
      unk_1ECE40988 = 0;
      qword_1ECE40990 = 0;
      unk_1ECE40998 = &ggl::specularBuildingShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE409A0 = 4;
      unk_1ECE409A8 = &ggl::specularBuildingShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE409B0 = 0;
      unk_1ECE409B8 = &ggl::specularBuildingShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE409C0 = 1;
      unk_1ECE409C8 = &ggl::specularBuildingShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE409D8 = 0;
      unk_1ECE409E0 = 0;
      qword_1ECE409D0 = 1;
    }
  }
}

void ggl::specularBuildingShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::specularBuildingShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("SpecularBuildingShaderVertex");
      *(_DWORD *)algn_1ECE3FB54 = 0;
      qword_1ECE3FB58 = (uint64_t)"SpecularBuildingShader";
      unk_1ECE3FB60 = ggl::specularBuildingShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3FB68 = 1;
      unk_1ECE3FB70 = &ggl::specularBuildingShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3FB78 = 6;
      unk_1ECE3FB80 = &ggl::specularBuildingShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3FB88 = 0;
      unk_1ECE3FB90 = &ggl::specularBuildingShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3FB98 = 0;
      unk_1ECE3FBA0 = &ggl::specularBuildingShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3FBB0 = 0;
      unk_1ECE3FBB8 = 0;
      qword_1ECE3FBA8 = 0;
    }
  }
}

void ggl::DiffuseBuildingShader::typedReflection(ggl::DiffuseBuildingShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::DiffuseBuildingShader::typedReflection(void)::ref = (uint64_t)"DiffuseBuildingShader";
      ggl::diffuseBuildingShaderVertexFunctionDescriptor(v2);
      qword_1ECE3A3A0 = (uint64_t)&ggl::diffuseBuildingShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<28ul>("DiffuseBuildingShaderVertex");
      dword_1ECE3A3A8 = (int)v3;
      ggl::diffuseBuildingShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3A3B0 = (uint64_t)&ggl::diffuseBuildingShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3A3B8 = ggl::crc32::compute<30ul>("DiffuseBuildingShaderFragment");
      qword_1ECE3A3C0 = (uint64_t)ggl::diffuseBuildingShaderShaderConstants(void)::ref;
      unk_1ECE3A3C8 = 7;
      qword_1ECE3A3D0 = (uint64_t)ggl::diffuseBuildingShaderShaderTextures(void)::ref;
      unk_1ECE3A3D8 = 1;
      qword_1ECE3A3E0 = (uint64_t)&ggl::diffuseBuildingShaderShaderSamplers(void)::ref;
      unk_1ECE3A3E8 = 1;
    }
  }
}

void ggl::diffuseBuildingShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::diffuseBuildingShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("DiffuseBuildingShaderFragment");
      *(_DWORD *)algn_1ECE3FE94 = 1;
      qword_1ECE3FE98 = (uint64_t)"DiffuseBuildingShader";
      unk_1ECE3FEA0 = 0;
      qword_1ECE3FEA8 = 0;
      unk_1ECE3FEB0 = &ggl::diffuseBuildingShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3FEB8 = 3;
      unk_1ECE3FEC0 = &ggl::diffuseBuildingShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3FEC8 = 0;
      unk_1ECE3FED0 = &ggl::diffuseBuildingShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3FED8 = 1;
      unk_1ECE3FEE0 = &ggl::diffuseBuildingShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3FEF0 = 0;
      unk_1ECE3FEF8 = 0;
      qword_1ECE3FEE8 = 1;
    }
  }
}

void ggl::diffuseBuildingShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::diffuseBuildingShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("DiffuseBuildingShaderVertex");
      *(_DWORD *)algn_1ECE3EF7C = 0;
      qword_1ECE3EF80 = (uint64_t)"DiffuseBuildingShader";
      unk_1ECE3EF88 = ggl::diffuseBuildingShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3EF90 = 1;
      unk_1ECE3EF98 = &ggl::diffuseBuildingShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3EFA0 = 6;
      unk_1ECE3EFA8 = &ggl::diffuseBuildingShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3EFB0 = 0;
      unk_1ECE3EFB8 = &ggl::diffuseBuildingShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3EFC0 = 0;
      unk_1ECE3EFC8 = &ggl::diffuseBuildingShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3EFD8 = 0;
      unk_1ECE3EFE0 = 0;
      qword_1ECE3EFD0 = 0;
    }
  }
}

void ggl::PolygonStrokeShader::typedReflection(ggl::PolygonStrokeShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::PolygonStrokeShader::typedReflection(void)::ref = (uint64_t)"PolygonStrokeShader";
      ggl::polygonStrokeShaderVertexFunctionDescriptor(v2);
      qword_1ECE39FB0 = (uint64_t)&ggl::polygonStrokeShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<26ul>("PolygonStrokeShaderVertex");
      dword_1ECE39FB8 = (int)v3;
      ggl::polygonStrokeShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39FC0 = (uint64_t)&ggl::polygonStrokeShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39FC8 = ggl::crc32::compute<28ul>("PolygonStrokeShaderFragment");
      qword_1ECE39FD0 = (uint64_t)ggl::polygonStrokeShaderShaderConstants(void)::ref;
      unk_1ECE39FD8 = 3;
      qword_1ECE39FE0 = (uint64_t)ggl::polygonStrokeShaderShaderTextures(void)::ref;
      unk_1ECE39FE8 = 2;
      qword_1ECE39FF0 = (uint64_t)ggl::polygonStrokeShaderShaderSamplers(void)::ref;
      unk_1ECE39FF8 = 2;
    }
  }
}

void ggl::polygonStrokeShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::polygonStrokeShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("PolygonStrokeShaderFragment");
      *(_DWORD *)algn_1ECE3F474 = 1;
      qword_1ECE3F488 = 0;
      unk_1ECE3F490 = &ggl::polygonStrokeShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3F478 = (uint64_t)"PolygonStrokeShader";
      unk_1ECE3F480 = 0;
      qword_1ECE3F498 = 1;
      unk_1ECE3F4A0 = &ggl::polygonStrokeShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3F4A8 = 0;
      unk_1ECE3F4B0 = &ggl::polygonStrokeShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3F4B8 = 2;
      unk_1ECE3F4C0 = &ggl::polygonStrokeShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3F4D0 = 0;
      unk_1ECE3F4D8 = 0;
      qword_1ECE3F4C8 = 2;
    }
  }
}

void ggl::polygonStrokeShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::polygonStrokeShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("PolygonStrokeShaderVertex");
      *(_DWORD *)algn_1ECE3E57C = 0;
      qword_1ECE3E580 = (uint64_t)"PolygonStrokeShader";
      unk_1ECE3E588 = ggl::polygonStrokeShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3E590 = 1;
      unk_1ECE3E598 = &ggl::polygonStrokeShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3E5A0 = 3;
      unk_1ECE3E5A8 = &ggl::polygonStrokeShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3E5B0 = 0;
      unk_1ECE3E5B8 = &ggl::polygonStrokeShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3E5C0 = 0;
      unk_1ECE3E5C8 = &ggl::polygonStrokeShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3E5D8 = 0;
      unk_1ECE3E5E0 = 0;
      qword_1ECE3E5D0 = 0;
    }
  }
}

void ggl::Glyph3dLowPrecisionShader::typedReflection(ggl::Glyph3dLowPrecisionShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::Glyph3dLowPrecisionShader::typedReflection(void)::ref = (uint64_t)"Glyph3dLowPrecisionShader";
      ggl::glyph3dLowPrecisionShaderVertexFunctionDescriptor(v2);
      qword_1ECE3B020 = (uint64_t)&ggl::glyph3dLowPrecisionShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<32ul>("Glyph3dLowPrecisionShaderVertex");
      dword_1ECE3B028 = (int)v3;
      ggl::glyph3dLowPrecisionShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3B030 = (uint64_t)&ggl::glyph3dLowPrecisionShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3B038 = ggl::crc32::compute<34ul>("Glyph3dLowPrecisionShaderFragment");
      qword_1ECE3B040 = (uint64_t)ggl::glyph3dLowPrecisionShaderShaderConstants(void)::ref;
      unk_1ECE3B048 = 6;
      qword_1ECE3B050 = (uint64_t)ggl::glyph3dLowPrecisionShaderShaderTextures(void)::ref;
      unk_1ECE3B058 = 3;
      qword_1ECE3B060 = (uint64_t)ggl::glyph3dLowPrecisionShaderShaderSamplers(void)::ref;
      unk_1ECE3B068 = 3;
    }
  }
}

void ggl::glyph3dLowPrecisionShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::glyph3dLowPrecisionShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("Glyph3dLowPrecisionShaderFragment");
      *(_DWORD *)algn_1ECE41864 = 1;
      qword_1ECE41868 = (uint64_t)"Glyph3dLowPrecisionShader";
      unk_1ECE41870 = 0;
      qword_1ECE41878 = 0;
      unk_1ECE41880 = &ggl::glyph3dLowPrecisionShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE41888 = 2;
      unk_1ECE41890 = &ggl::glyph3dLowPrecisionShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE41898 = 0;
      unk_1ECE418A0 = &ggl::glyph3dLowPrecisionShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE418A8 = 1;
      unk_1ECE418B0 = &ggl::glyph3dLowPrecisionShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE418C0 = 0;
      unk_1ECE418C8 = 0;
      qword_1ECE418B8 = 1;
    }
  }
}

void ggl::glyph3dLowPrecisionShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::glyph3dLowPrecisionShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("Glyph3dLowPrecisionShaderVertex");
      *(_DWORD *)algn_1ECE40D0C = 0;
      qword_1ECE40D10 = (uint64_t)"Glyph3dLowPrecisionShader";
      unk_1ECE40D18 = ggl::glyph3dLowPrecisionShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE40D20 = 1;
      unk_1ECE40D28 = &ggl::glyph3dLowPrecisionShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE40D30 = 4;
      unk_1ECE40D38 = &ggl::glyph3dLowPrecisionShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE40D40 = 0;
      unk_1ECE40D48 = &ggl::glyph3dLowPrecisionShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE40D50 = 2;
      unk_1ECE40D58 = &ggl::glyph3dLowPrecisionShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE40D68 = 0;
      unk_1ECE40D70 = 0;
      qword_1ECE40D60 = 2;
    }
  }
}

void ggl::Glyph3dRaymarchShader::typedReflection(ggl::Glyph3dRaymarchShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::Glyph3dRaymarchShader::typedReflection(void)::ref = (uint64_t)"Glyph3dRaymarchShader";
      ggl::glyph3dRaymarchShaderVertexFunctionDescriptor(v2);
      qword_1ECE44390 = (uint64_t)&ggl::glyph3dRaymarchShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<28ul>("Glyph3dRaymarchShaderVertex");
      dword_1ECE44398 = (int)v3;
      ggl::glyph3dRaymarchShaderFragmentFunctionDescriptor(v3);
      qword_1ECE443A0 = (uint64_t)&ggl::glyph3dRaymarchShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE443A8 = ggl::crc32::compute<30ul>("Glyph3dRaymarchShaderFragment");
      qword_1ECE443B0 = (uint64_t)ggl::glyph3dRaymarchShaderShaderConstants(void)::ref;
      unk_1ECE443B8 = 6;
      qword_1ECE443C0 = (uint64_t)ggl::glyph3dRaymarchShaderShaderTextures(void)::ref;
      unk_1ECE443C8 = 3;
      qword_1ECE443D0 = (uint64_t)ggl::glyph3dRaymarchShaderShaderSamplers(void)::ref;
      unk_1ECE443D8 = 3;
    }
  }
}

void ggl::glyph3dRaymarchShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::glyph3dRaymarchShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("Glyph3dRaymarchShaderFragment");
      *(_DWORD *)algn_1ECE44BC4 = 1;
      qword_1ECE44BC8 = (uint64_t)"Glyph3dRaymarchShader";
      unk_1ECE44BD0 = 0;
      qword_1ECE44BD8 = 0;
      unk_1ECE44BE0 = &ggl::glyph3dRaymarchShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE44BE8 = 2;
      unk_1ECE44BF0 = &ggl::glyph3dRaymarchShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE44BF8 = 0;
      unk_1ECE44C00 = &ggl::glyph3dRaymarchShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE44C08 = 1;
      unk_1ECE44C10 = &ggl::glyph3dRaymarchShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE44C20 = 0;
      unk_1ECE44C28 = 0;
      qword_1ECE44C18 = 1;
    }
  }
}

void ggl::glyph3dRaymarchShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::glyph3dRaymarchShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("Glyph3dRaymarchShaderVertex");
      *(_DWORD *)algn_1ECE44A6C = 0;
      qword_1ECE44A70 = (uint64_t)"Glyph3dRaymarchShader";
      unk_1ECE44A78 = ggl::glyph3dRaymarchShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE44A80 = 1;
      unk_1ECE44A88 = &ggl::glyph3dRaymarchShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE44A90 = 4;
      unk_1ECE44A98 = &ggl::glyph3dRaymarchShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE44AA0 = 0;
      unk_1ECE44AA8 = &ggl::glyph3dRaymarchShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE44AB0 = 2;
      unk_1ECE44AB8 = &ggl::glyph3dRaymarchShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE44AC8 = 0;
      unk_1ECE44AD0 = 0;
      qword_1ECE44AC0 = 2;
    }
  }
}

void ggl::SDFGlyphHaloShader::typedReflection(ggl::SDFGlyphHaloShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::SDFGlyphHaloShader::typedReflection(void)::ref = (uint64_t)"SDFGlyphHaloShader";
      ggl::sDFGlyphHaloShaderVertexFunctionDescriptor(v2);
      qword_1ECE39BC0 = (uint64_t)&ggl::sDFGlyphHaloShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<25ul>("SDFGlyphHaloShaderVertex");
      dword_1ECE39BC8 = (int)v3;
      ggl::sDFGlyphHaloShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39BD0 = (uint64_t)&ggl::sDFGlyphHaloShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39BD8 = ggl::crc32::compute<27ul>("SDFGlyphHaloShaderFragment");
      qword_1ECE39BE0 = (uint64_t)ggl::sDFGlyphHaloShaderShaderConstants(void)::ref;
      unk_1ECE39BE8 = 6;
      qword_1ECE39BF0 = (uint64_t)ggl::sDFGlyphHaloShaderShaderTextures(void)::ref;
      unk_1ECE39BF8 = 3;
      qword_1ECE39C00 = (uint64_t)ggl::sDFGlyphHaloShaderShaderSamplers(void)::ref;
      unk_1ECE39C08 = 3;
    }
  }
}

void ggl::sDFGlyphHaloShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::sDFGlyphHaloShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("SDFGlyphHaloShaderFragment");
      *(_DWORD *)algn_1ECE3EC44 = 1;
      qword_1ECE3EC48 = (uint64_t)"SDFGlyphHaloShader";
      unk_1ECE3EC50 = 0;
      qword_1ECE3EC58 = 0;
      unk_1ECE3EC60 = &ggl::sDFGlyphHaloShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3EC68 = 2;
      unk_1ECE3EC70 = &ggl::sDFGlyphHaloShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3EC78 = 0;
      unk_1ECE3EC80 = &ggl::sDFGlyphHaloShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3EC88 = 1;
      unk_1ECE3EC90 = &ggl::sDFGlyphHaloShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3ECA0 = 0;
      unk_1ECE3ECA8 = 0;
      qword_1ECE3EC98 = 1;
    }
  }
}

void ggl::sDFGlyphHaloShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::sDFGlyphHaloShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("SDFGlyphHaloShaderVertex");
      *(_DWORD *)algn_1ECE3DF9C = 0;
      qword_1ECE3DFA0 = (uint64_t)"SDFGlyphHaloShader";
      unk_1ECE3DFA8 = ggl::sDFGlyphHaloShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3DFB0 = 1;
      unk_1ECE3DFB8 = &ggl::sDFGlyphHaloShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3DFC0 = 4;
      unk_1ECE3DFC8 = &ggl::sDFGlyphHaloShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3DFD0 = 0;
      unk_1ECE3DFD8 = &ggl::sDFGlyphHaloShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3DFE0 = 2;
      unk_1ECE3DFE8 = &ggl::sDFGlyphHaloShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3DFF8 = 0;
      unk_1ECE3E000 = 0;
      qword_1ECE3DFF0 = 2;
    }
  }
}

void ggl::SDFGlyphShader::typedReflection(ggl::SDFGlyphShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::SDFGlyphShader::typedReflection(void)::ref = (uint64_t)"SDFGlyphShader";
      ggl::sDFGlyphShaderVertexFunctionDescriptor(v2);
      qword_1ECE39280 = (uint64_t)&ggl::sDFGlyphShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<21ul>("SDFGlyphShaderVertex");
      dword_1ECE39288 = (int)v3;
      ggl::sDFGlyphShaderFragmentFunctionDescriptor(v3);
      qword_1ECE39290 = (uint64_t)&ggl::sDFGlyphShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE39298 = ggl::crc32::compute<23ul>("SDFGlyphShaderFragment");
      qword_1ECE392A0 = (uint64_t)ggl::sDFGlyphShaderShaderConstants(void)::ref;
      unk_1ECE392A8 = 6;
      qword_1ECE392B0 = (uint64_t)ggl::sDFGlyphShaderShaderTextures(void)::ref;
      unk_1ECE392B8 = 3;
      qword_1ECE392C0 = (uint64_t)ggl::sDFGlyphShaderShaderSamplers(void)::ref;
      unk_1ECE392C8 = 3;
    }
  }
}

void ggl::sDFGlyphShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::sDFGlyphShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<23ul>("SDFGlyphShaderFragment");
      *(_DWORD *)algn_1ECE3D644 = 1;
      qword_1ECE3D648 = (uint64_t)"SDFGlyphShader";
      unk_1ECE3D650 = 0;
      qword_1ECE3D658 = 0;
      unk_1ECE3D660 = &ggl::sDFGlyphShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3D668 = 2;
      unk_1ECE3D670 = &ggl::sDFGlyphShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3D678 = 0;
      unk_1ECE3D680 = &ggl::sDFGlyphShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3D688 = 1;
      unk_1ECE3D690 = &ggl::sDFGlyphShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3D6A0 = 0;
      unk_1ECE3D6A8 = 0;
      qword_1ECE3D698 = 1;
    }
  }
}

void ggl::sDFGlyphShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::sDFGlyphShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<21ul>("SDFGlyphShaderVertex");
      *(_DWORD *)algn_1ECE3D15C = 0;
      qword_1ECE3D160 = (uint64_t)"SDFGlyphShader";
      unk_1ECE3D168 = ggl::sDFGlyphShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3D170 = 1;
      unk_1ECE3D178 = &ggl::sDFGlyphShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3D180 = 4;
      unk_1ECE3D188 = &ggl::sDFGlyphShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3D190 = 0;
      unk_1ECE3D198 = &ggl::sDFGlyphShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3D1A0 = 2;
      unk_1ECE3D1A8 = &ggl::sDFGlyphShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3D1B8 = 0;
      unk_1ECE3D1C0 = 0;
      qword_1ECE3D1B0 = 2;
    }
  }
}

void ggl::Glyph3dShader::typedReflection(ggl::Glyph3dShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::Glyph3dShader::typedReflection(void)::ref = (uint64_t)"Glyph3dShader";
      ggl::glyph3dShaderVertexFunctionDescriptor(v2);
      qword_1ECE391C0 = (uint64_t)&ggl::glyph3dShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<20ul>("Glyph3dShaderVertex");
      dword_1ECE391C8 = (int)v3;
      ggl::glyph3dShaderFragmentFunctionDescriptor(v3);
      qword_1ECE391D0 = (uint64_t)&ggl::glyph3dShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE391D8 = ggl::crc32::compute<22ul>("Glyph3dShaderFragment");
      qword_1ECE391E0 = (uint64_t)ggl::glyph3dShaderShaderConstants(void)::ref;
      unk_1ECE391E8 = 6;
      qword_1ECE391F0 = (uint64_t)ggl::glyph3dShaderShaderTextures(void)::ref;
      unk_1ECE391F8 = 3;
      qword_1ECE39200 = (uint64_t)ggl::glyph3dShaderShaderSamplers(void)::ref;
      unk_1ECE39208 = 3;
    }
  }
}

void ggl::glyph3dShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::glyph3dShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<22ul>("Glyph3dShaderFragment");
      *(_DWORD *)algn_1ECE3D394 = 1;
      qword_1ECE3D398 = (uint64_t)"Glyph3dShader";
      unk_1ECE3D3A0 = 0;
      qword_1ECE3D3A8 = 0;
      unk_1ECE3D3B0 = &ggl::glyph3dShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3D3B8 = 2;
      unk_1ECE3D3C0 = &ggl::glyph3dShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3D3C8 = 0;
      unk_1ECE3D3D0 = &ggl::glyph3dShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3D3D8 = 1;
      unk_1ECE3D3E0 = &ggl::glyph3dShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3D3F0 = 0;
      unk_1ECE3D3F8 = 0;
      qword_1ECE3D3E8 = 1;
    }
  }
}

void ggl::glyph3dShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::glyph3dShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<20ul>("Glyph3dShaderVertex");
      *(_DWORD *)algn_1ECE3CEAC = 0;
      qword_1ECE3CEB0 = (uint64_t)"Glyph3dShader";
      unk_1ECE3CEB8 = ggl::glyph3dShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3CEC0 = 1;
      unk_1ECE3CEC8 = &ggl::glyph3dShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3CED0 = 4;
      unk_1ECE3CED8 = &ggl::glyph3dShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3CEE0 = 0;
      unk_1ECE3CEE8 = &ggl::glyph3dShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3CEF0 = 2;
      unk_1ECE3CEF8 = &ggl::glyph3dShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3CF08 = 0;
      unk_1ECE3CF10 = 0;
      qword_1ECE3CF00 = 2;
    }
  }
}

void ggl::ScreenTexturedQuadShader::typedReflection(ggl::ScreenTexturedQuadShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::ScreenTexturedQuadShader::typedReflection(void)::ref = (uint64_t)"ScreenTexturedQuadShader";
      ggl::screenTexturedQuadShaderVertexFunctionDescriptor(v2);
      qword_1ECE302D0 = (uint64_t)&ggl::screenTexturedQuadShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<31ul>("ScreenTexturedQuadShaderVertex");
      dword_1ECE302D8 = (int)v3;
      ggl::screenTexturedQuadShaderFragmentFunctionDescriptor(v3);
      qword_1ECE302E0 = (uint64_t)&ggl::screenTexturedQuadShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE302E8 = ggl::crc32::compute<33ul>("ScreenTexturedQuadShaderFragment");
      qword_1ECE302F0 = (uint64_t)ggl::screenTexturedQuadShaderShaderConstants(void)::ref;
      unk_1ECE302F8 = 1;
      qword_1ECE30300 = (uint64_t)ggl::screenTexturedQuadShaderShaderTextures(void)::ref;
      unk_1ECE30308 = 1;
      qword_1ECE30310 = (uint64_t)ggl::screenTexturedQuadShaderShaderSamplers(void)::ref;
      unk_1ECE30318 = 1;
    }
  }
}

void ggl::screenTexturedQuadShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::screenTexturedQuadShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("ScreenTexturedQuadShaderVertex");
      *(_DWORD *)algn_1ECE3086C = 0;
      qword_1ECE30870 = (uint64_t)"ScreenTexturedQuadShader";
      unk_1ECE30878 = ggl::screenTexturedQuadShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE30880 = 1;
      unk_1ECE30888 = &ggl::screenTexturedQuadShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE30890 = 1;
      unk_1ECE30898 = &ggl::screenTexturedQuadShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE308A0 = 0;
      unk_1ECE308A8 = &ggl::screenTexturedQuadShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE308B0 = 0;
      unk_1ECE308B8 = &ggl::screenTexturedQuadShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE308C8 = 0;
      unk_1ECE308D0 = 0;
      qword_1ECE308C0 = 0;
    }
  }
}

void sub_19F3720F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

void ggl::PolygonSolidFillS2Shader::typedReflection(ggl::PolygonSolidFillS2Shader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::PolygonSolidFillS2Shader::typedReflection(void)::ref = (uint64_t)"PolygonSolidFillS2Shader";
      ggl::polygonSolidFillS2ShaderVertexFunctionDescriptor(v2);
      qword_1ECE329A0 = (uint64_t)&ggl::polygonSolidFillS2ShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<31ul>("PolygonSolidFillS2ShaderVertex");
      dword_1ECE329A8 = (int)v3;
      ggl::polygonSolidFillS2ShaderFragmentFunctionDescriptor(v3);
      qword_1ECE329B0 = (uint64_t)&ggl::polygonSolidFillS2ShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE329B8 = ggl::crc32::compute<33ul>("PolygonSolidFillS2ShaderFragment");
      qword_1ECE329C0 = (uint64_t)ggl::polygonSolidFillS2ShaderShaderConstants(void)::ref;
      unk_1ECE329C8 = 3;
      qword_1ECE329D0 = (uint64_t)&ggl::polygonSolidFillS2ShaderShaderTextures(void)::ref;
      unk_1ECE329D8 = 0;
      qword_1ECE329E0 = (uint64_t)&ggl::polygonSolidFillS2ShaderShaderSamplers(void)::ref;
      unk_1ECE329E8 = 0;
    }
  }
}

void ggl::polygonSolidFillS2ShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::polygonSolidFillS2ShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("PolygonSolidFillS2ShaderVertex");
      *(_DWORD *)algn_1ECE3308C = 0;
      qword_1ECE33090 = (uint64_t)"PolygonSolidFillS2Shader";
      unk_1ECE33098 = ggl::polygonSolidFillS2ShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE330A0 = 1;
      unk_1ECE330A8 = &ggl::polygonSolidFillS2ShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE330B0 = 3;
      unk_1ECE330B8 = &ggl::polygonSolidFillS2ShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE330C0 = 0;
      unk_1ECE330C8 = &ggl::polygonSolidFillS2ShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE330D0 = 0;
      unk_1ECE330D8 = &ggl::polygonSolidFillS2ShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE330E8 = 0;
      unk_1ECE330F0 = 0;
      qword_1ECE330E0 = 0;
    }
  }
}

void ggl::DiffuseBuildingTopShader::typedReflection(ggl::DiffuseBuildingTopShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::DiffuseBuildingTopShader::typedReflection(void)::ref = (uint64_t)"DiffuseBuildingTopShader";
      ggl::diffuseBuildingTopShaderVertexFunctionDescriptor(v2);
      qword_1ECE3AD58 = (uint64_t)&ggl::diffuseBuildingTopShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<31ul>("DiffuseBuildingTopShaderVertex");
      dword_1ECE3AD60 = (int)v3;
      ggl::diffuseBuildingTopShaderFragmentFunctionDescriptor(v3);
      qword_1ECE3AD68 = (uint64_t)&ggl::diffuseBuildingTopShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE3AD70 = ggl::crc32::compute<33ul>("DiffuseBuildingTopShaderFragment");
      qword_1ECE3AD78 = (uint64_t)ggl::diffuseBuildingTopShaderShaderConstants(void)::ref;
      unk_1ECE3AD80 = 7;
      qword_1ECE3AD88 = (uint64_t)&ggl::diffuseBuildingTopShaderShaderTextures(void)::ref;
      unk_1ECE3AD90 = 0;
      qword_1ECE3AD98 = (uint64_t)&ggl::diffuseBuildingTopShaderShaderSamplers(void)::ref;
      unk_1ECE3ADA0 = 0;
    }
  }
}

void ggl::diffuseBuildingTopShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::diffuseBuildingTopShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("DiffuseBuildingTopShaderVertex");
      *(_DWORD *)algn_1ECE405E4 = 0;
      qword_1ECE405E8 = (uint64_t)"DiffuseBuildingTopShader";
      unk_1ECE405F0 = ggl::diffuseBuildingTopShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE405F8 = 1;
      unk_1ECE40600 = &ggl::diffuseBuildingTopShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE40608 = 6;
      unk_1ECE40610 = &ggl::diffuseBuildingTopShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE40618 = 0;
      unk_1ECE40620 = &ggl::diffuseBuildingTopShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE40628 = 0;
      unk_1ECE40630 = &ggl::diffuseBuildingTopShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE40640 = 0;
      unk_1ECE40648 = 0;
      qword_1ECE40638 = 0;
    }
  }
}

void ggl::PolygonStrokeMaskShader::typedReflection(ggl::PolygonStrokeMaskShader *this)
{
  unsigned __int8 v1;
  ggl *v2;
  ggl *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      ggl::PolygonStrokeMaskShader::typedReflection(void)::ref = (uint64_t)"PolygonStrokeMaskShader";
      ggl::polygonStrokeMaskShaderVertexFunctionDescriptor(v2);
      qword_1ECE30220 = (uint64_t)&ggl::polygonStrokeMaskShaderVertexFunctionDescriptor(void)::ref;
      v3 = (ggl *)ggl::crc32::compute<30ul>("PolygonStrokeMaskShaderVertex");
      dword_1ECE30228 = (int)v3;
      ggl::polygonStrokeMaskShaderFragmentFunctionDescriptor(v3);
      qword_1ECE30230 = (uint64_t)&ggl::polygonStrokeMaskShaderFragmentFunctionDescriptor(void)::ref;
      dword_1ECE30238 = ggl::crc32::compute<32ul>("PolygonStrokeMaskShaderFragment");
      qword_1ECE30240 = (uint64_t)ggl::polygonStrokeMaskShaderShaderConstants(void)::ref;
      unk_1ECE30248 = 3;
      qword_1ECE30250 = (uint64_t)ggl::polygonStrokeMaskShaderShaderTextures(void)::ref;
      unk_1ECE30258 = 1;
      qword_1ECE30260 = (uint64_t)&ggl::polygonStrokeMaskShaderShaderSamplers(void)::ref;
      unk_1ECE30268 = 1;
    }
  }
}

void ggl::polygonStrokeMaskShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::polygonStrokeMaskShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("PolygonStrokeMaskShaderVertex");
      *(_DWORD *)algn_1ECE3077C = 0;
      qword_1ECE30780 = (uint64_t)"PolygonStrokeMaskShader";
      unk_1ECE30788 = ggl::polygonStrokeMaskShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE30790 = 1;
      unk_1ECE30798 = &ggl::polygonStrokeMaskShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE307A0 = 3;
      unk_1ECE307A8 = &ggl::polygonStrokeMaskShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE307B0 = 0;
      unk_1ECE307B8 = &ggl::polygonStrokeMaskShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE307C0 = 0;
      unk_1ECE307C8 = &ggl::polygonStrokeMaskShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE307D8 = 0;
      unk_1ECE307E0 = 0;
      qword_1ECE307D0 = 0;
    }
  }
}

void ggl::imageCopyShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::imageCopyShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("ImageCopyShaderFragment");
      *(_DWORD *)algn_1ECE3D964 = 1;
      qword_1ECE3D968 = (uint64_t)"ImageCopyShader";
      unk_1ECE3D970 = 0;
      qword_1ECE3D978 = 0;
      unk_1ECE3D980 = &ggl::imageCopyShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3D988 = 0;
      unk_1ECE3D990 = &ggl::imageCopyShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3D998 = 0;
      unk_1ECE3D9A0 = &ggl::imageCopyShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3D9A8 = 1;
      unk_1ECE3D9B0 = &ggl::imageCopyShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3D9C0 = 0;
      unk_1ECE3D9C8 = 0;
      qword_1ECE3D9B8 = 1;
    }
  }
}

void ggl::imageCopyShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::imageCopyShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<22ul>("ImageCopyShaderVertex");
      *(_DWORD *)algn_1ECE3D40C = 0;
      qword_1ECE3D410 = (uint64_t)"ImageCopyShader";
      unk_1ECE3D418 = ggl::imageCopyShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3D420 = 1;
      unk_1ECE3D428 = &ggl::imageCopyShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3D430 = 0;
      unk_1ECE3D438 = &ggl::imageCopyShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3D440 = 0;
      unk_1ECE3D448 = &ggl::imageCopyShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3D450 = 0;
      unk_1ECE3D458 = &ggl::imageCopyShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3D468 = 0;
      unk_1ECE3D470 = 0;
      qword_1ECE3D460 = 0;
    }
  }
}

void ggl::flyoverPostchainFGBlurShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverPostchainFGBlurShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<37ul>("FlyoverPostchainFGBlurShaderFragment");
      *(_DWORD *)algn_1ECE352CC = 1;
      qword_1ECE352E0 = 0;
      unk_1ECE352E8 = &ggl::flyoverPostchainFGBlurShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE352D0 = (uint64_t)"FlyoverPostchainFGBlurShader";
      unk_1ECE352D8 = 0;
      qword_1ECE352F0 = 1;
      unk_1ECE352F8 = &ggl::flyoverPostchainFGBlurShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE35300 = 0;
      unk_1ECE35308 = &ggl::flyoverPostchainFGBlurShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE35310 = 2;
      unk_1ECE35318 = &ggl::flyoverPostchainFGBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE35328 = 0;
      unk_1ECE35330 = 0;
      qword_1ECE35320 = 2;
    }
  }
}

void ggl::flyoverPostchainBGBlurShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverPostchainBGBlurShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<37ul>("FlyoverPostchainBGBlurShaderFragment");
      *(_DWORD *)algn_1ECE3525C = 1;
      qword_1ECE35260 = (uint64_t)"FlyoverPostchainBGBlurShader";
      unk_1ECE35268 = 0;
      qword_1ECE35270 = 0;
      unk_1ECE35278 = &ggl::flyoverPostchainBGBlurShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE35280 = 1;
      unk_1ECE35288 = &ggl::flyoverPostchainBGBlurShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE35290 = 0;
      unk_1ECE35298 = &ggl::flyoverPostchainBGBlurShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE352A0 = 1;
      unk_1ECE352A8 = &ggl::flyoverPostchainBGBlurShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE352B8 = 0;
      unk_1ECE352C0 = 0;
      qword_1ECE352B0 = 1;
    }
  }
}

void ggl::flyoverPostchainFGBlurShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverPostchainFGBlurShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<35ul>("FlyoverPostchainFGBlurShaderVertex");
      *(_DWORD *)algn_1ECE35094 = 0;
      qword_1ECE35098 = (uint64_t)"FlyoverPostchainFGBlurShader";
      unk_1ECE350A0 = ggl::flyoverPostchainFGBlurShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE350A8 = 1;
      unk_1ECE350B0 = &ggl::flyoverPostchainFGBlurShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE350B8 = 0;
      unk_1ECE350C0 = &ggl::flyoverPostchainFGBlurShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE350C8 = 0;
      unk_1ECE350D0 = &ggl::flyoverPostchainFGBlurShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE350D8 = 0;
      unk_1ECE350E0 = &ggl::flyoverPostchainFGBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE350F0 = 0;
      unk_1ECE350F8 = 0;
      qword_1ECE350E8 = 0;
    }
  }
}

void ggl::flyoverPostchainBGBlurShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverPostchainBGBlurShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<35ul>("FlyoverPostchainBGBlurShaderVertex");
      *(_DWORD *)algn_1ECE35024 = 0;
      qword_1ECE35028 = (uint64_t)"FlyoverPostchainBGBlurShader";
      unk_1ECE35030 = ggl::flyoverPostchainBGBlurShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE35038 = 1;
      unk_1ECE35040 = &ggl::flyoverPostchainBGBlurShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE35048 = 0;
      unk_1ECE35050 = &ggl::flyoverPostchainBGBlurShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE35058 = 0;
      unk_1ECE35060 = &ggl::flyoverPostchainBGBlurShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE35068 = 0;
      unk_1ECE35070 = &ggl::flyoverPostchainBGBlurShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE35080 = 0;
      unk_1ECE35088 = 0;
      qword_1ECE35078 = 0;
    }
  }
}

void ggl::stenciledAlphaClearShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::stenciledAlphaClearShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("StenciledAlphaClearShaderFragment");
      *(_DWORD *)algn_1ECE41BF4 = 1;
      qword_1ECE41BF8 = (uint64_t)"StenciledAlphaClearShader";
      unk_1ECE41C00 = 0;
      qword_1ECE41C08 = 0;
      unk_1ECE41C10 = &ggl::stenciledAlphaClearShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE41C18 = 0;
      unk_1ECE41C20 = &ggl::stenciledAlphaClearShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE41C28 = 0;
      unk_1ECE41C30 = &ggl::stenciledAlphaClearShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41C38 = 0;
      unk_1ECE41C40 = &ggl::stenciledAlphaClearShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE41C50 = 0;
      unk_1ECE41C58 = 0;
      qword_1ECE41C48 = 0;
    }
  }
}

void ggl::flyoverBorderRibbonShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverBorderRibbonShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<34ul>("FlyoverBorderRibbonShaderFragment");
      *(_DWORD *)algn_1ECE4170C = 1;
      qword_1ECE41720 = 0;
      unk_1ECE41728 = &ggl::flyoverBorderRibbonShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE41710 = (uint64_t)"FlyoverBorderRibbonShader";
      unk_1ECE41718 = 0;
      qword_1ECE41730 = 1;
      unk_1ECE41738 = &ggl::flyoverBorderRibbonShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE41740 = 0;
      unk_1ECE41748 = &ggl::flyoverBorderRibbonShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE41750 = 2;
      unk_1ECE41758 = &ggl::flyoverBorderRibbonShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE41768 = 0;
      unk_1ECE41770 = 0;
      qword_1ECE41760 = 2;
    }
  }
}

void ggl::flyoverMorphBorderShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverMorphBorderShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<33ul>("FlyoverMorphBorderShaderFragment");
      *(_DWORD *)algn_1ECE41364 = 1;
      qword_1ECE41368 = (uint64_t)"FlyoverMorphBorderShader";
      unk_1ECE41370 = 0;
      qword_1ECE41378 = 0;
      unk_1ECE41380 = &ggl::flyoverMorphBorderShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE41388 = 3;
      unk_1ECE41390 = &ggl::flyoverMorphBorderShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE41398 = 0;
      unk_1ECE413A0 = &ggl::flyoverMorphBorderShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE413A8 = 4;
      unk_1ECE413B0 = &ggl::flyoverMorphBorderShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE413C0 = 0;
      unk_1ECE413C8 = 0;
      qword_1ECE413B8 = 4;
    }
  }
}

void ggl::stenciledAlphaClearShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::stenciledAlphaClearShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("StenciledAlphaClearShaderVertex");
      *(_DWORD *)algn_1ECE4109C = 0;
      qword_1ECE410A0 = (uint64_t)"StenciledAlphaClearShader";
      unk_1ECE410A8 = ggl::stenciledAlphaClearShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE410B0 = 1;
      unk_1ECE410B8 = &ggl::stenciledAlphaClearShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE410C0 = 0;
      unk_1ECE410C8 = &ggl::stenciledAlphaClearShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE410D0 = 0;
      unk_1ECE410D8 = &ggl::stenciledAlphaClearShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE410E0 = 0;
      unk_1ECE410E8 = &ggl::stenciledAlphaClearShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE410F8 = 0;
      unk_1ECE41100 = 0;
      qword_1ECE410F0 = 0;
    }
  }
}

void ggl::flyoverMorphNightShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverMorphNightShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("FlyoverMorphNightShaderFragment");
      *(_DWORD *)algn_1ECE40C94 = 1;
      qword_1ECE40C98 = (uint64_t)"FlyoverMorphNightShader";
      unk_1ECE40CA0 = 0;
      qword_1ECE40CA8 = 0;
      unk_1ECE40CB0 = &ggl::flyoverMorphNightShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE40CB8 = 3;
      unk_1ECE40CC0 = &ggl::flyoverMorphNightShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE40CC8 = 0;
      unk_1ECE40CD0 = &ggl::flyoverMorphNightShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE40CD8 = 4;
      unk_1ECE40CE0 = &ggl::flyoverMorphNightShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE40CF0 = 0;
      unk_1ECE40CF8 = 0;
      qword_1ECE40CE8 = 4;
    }
  }
}

void ggl::flyoverBorderRibbonShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverBorderRibbonShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<32ul>("FlyoverBorderRibbonShaderVertex");
      *(_DWORD *)algn_1ECE40C24 = 0;
      qword_1ECE40C28 = (uint64_t)"FlyoverBorderRibbonShader";
      unk_1ECE40C30 = ggl::flyoverBorderRibbonShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE40C38 = 1;
      unk_1ECE40C40 = &ggl::flyoverBorderRibbonShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE40C48 = 5;
      unk_1ECE40C50 = &ggl::flyoverBorderRibbonShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE40C58 = 0;
      unk_1ECE40C60 = &ggl::flyoverBorderRibbonShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE40C68 = 0;
      unk_1ECE40C70 = &ggl::flyoverBorderRibbonShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE40C80 = 0;
      unk_1ECE40C88 = 0;
      qword_1ECE40C78 = 0;
    }
  }
}

void ggl::flyoverMorphBorderShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverMorphBorderShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<31ul>("FlyoverMorphBorderShaderVertex");
      *(_DWORD *)algn_1ECE4065C = 0;
      qword_1ECE40660 = (uint64_t)"FlyoverMorphBorderShader";
      unk_1ECE40668 = ggl::flyoverMorphBorderShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE40670 = 1;
      unk_1ECE40678 = &ggl::flyoverMorphBorderShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE40680 = 6;
      unk_1ECE40688 = &ggl::flyoverMorphBorderShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE40690 = 0;
      unk_1ECE40698 = &ggl::flyoverMorphBorderShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE406A0 = 1;
      unk_1ECE406A8 = &ggl::flyoverMorphBorderShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE406B8 = 0;
      unk_1ECE406C0 = 0;
      qword_1ECE406B0 = 1;
    }
  }
}

void ggl::tileBaseSurfaceShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::tileBaseSurfaceShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("TileBaseSurfaceShaderFragment");
      *(_DWORD *)algn_1ECE4032C = 1;
      qword_1ECE40330 = (uint64_t)"TileBaseSurfaceShader";
      unk_1ECE40338 = 0;
      qword_1ECE40340 = 0;
      unk_1ECE40348 = &ggl::tileBaseSurfaceShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE40350 = 1;
      unk_1ECE40358 = &ggl::tileBaseSurfaceShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE40360 = 0;
      unk_1ECE40368 = &ggl::tileBaseSurfaceShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE40370 = 0;
      unk_1ECE40378 = &ggl::tileBaseSurfaceShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE40388 = 0;
      unk_1ECE40390 = 0;
      qword_1ECE40380 = 0;
    }
  }
}

void ggl::flyoverNightDimShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverNightDimShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("FlyoverNightDimShaderFragment");
      *(_DWORD *)algn_1ECE40074 = 1;
      qword_1ECE40078 = (uint64_t)"FlyoverNightDimShader";
      unk_1ECE40080 = 0;
      qword_1ECE40088 = 0;
      unk_1ECE40090 = &ggl::flyoverNightDimShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE40098 = 1;
      unk_1ECE400A0 = &ggl::flyoverNightDimShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE400A8 = 0;
      unk_1ECE400B0 = &ggl::flyoverNightDimShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE400B8 = 0;
      unk_1ECE400C0 = &ggl::flyoverNightDimShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE400D0 = 0;
      unk_1ECE400D8 = 0;
      qword_1ECE400C8 = 0;
    }
  }
}

void ggl::flyoverMorphNightShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverMorphNightShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("FlyoverMorphNightShaderVertex");
      *(_DWORD *)algn_1ECE3FFFC = 0;
      qword_1ECE40000 = (uint64_t)"FlyoverMorphNightShader";
      unk_1ECE40008 = ggl::flyoverMorphNightShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE40010 = 1;
      unk_1ECE40018 = &ggl::flyoverMorphNightShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE40020 = 6;
      unk_1ECE40028 = &ggl::flyoverMorphNightShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE40030 = 0;
      unk_1ECE40038 = &ggl::flyoverMorphNightShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE40040 = 1;
      unk_1ECE40048 = &ggl::flyoverMorphNightShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE40058 = 0;
      unk_1ECE40060 = 0;
      qword_1ECE40050 = 1;
    }
  }
}

void ggl::flyoverManeuverShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverManeuverShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<30ul>("FlyoverManeuverShaderFragment");
      *(_DWORD *)algn_1ECE3FF84 = 1;
      qword_1ECE3FF88 = (uint64_t)"FlyoverManeuverShader";
      unk_1ECE3FF90 = 0;
      qword_1ECE3FF98 = 0;
      unk_1ECE3FFA0 = &ggl::flyoverManeuverShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3FFA8 = 1;
      unk_1ECE3FFB0 = &ggl::flyoverManeuverShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3FFB8 = 0;
      unk_1ECE3FFC0 = &ggl::flyoverManeuverShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3FFC8 = 1;
      unk_1ECE3FFD0 = &ggl::flyoverManeuverShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3FFE0 = 0;
      unk_1ECE3FFE8 = 0;
      qword_1ECE3FFD8 = 1;
    }
  }
}

void ggl::flyoverTrafficShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverTrafficShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("FlyoverTrafficShaderFragment");
      *(_DWORD *)algn_1ECE3F8FC = 1;
      qword_1ECE3F900 = (uint64_t)"FlyoverTrafficShader";
      unk_1ECE3F908 = 0;
      qword_1ECE3F910 = 0;
      unk_1ECE3F918 = &ggl::flyoverTrafficShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3F920 = 3;
      unk_1ECE3F928 = &ggl::flyoverTrafficShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3F930 = 0;
      unk_1ECE3F938 = &ggl::flyoverTrafficShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3F940 = 0;
      unk_1ECE3F948 = &ggl::flyoverTrafficShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3F958 = 0;
      unk_1ECE3F960 = 0;
      qword_1ECE3F950 = 0;
    }
  }
}

void ggl::flyoverOverlayShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverOverlayShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<29ul>("FlyoverOverlayShaderFragment");
      *(_DWORD *)algn_1ECE3F884 = 1;
      qword_1ECE3F888 = (uint64_t)"FlyoverOverlayShader";
      unk_1ECE3F890 = 0;
      qword_1ECE3F898 = 0;
      unk_1ECE3F8A0 = &ggl::flyoverOverlayShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3F8A8 = 2;
      unk_1ECE3F8B0 = &ggl::flyoverOverlayShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3F8B8 = 0;
      unk_1ECE3F8C0 = &ggl::flyoverOverlayShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3F8C8 = 1;
      unk_1ECE3F8D0 = &ggl::flyoverOverlayShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3F8E0 = 0;
      unk_1ECE3F8E8 = 0;
      qword_1ECE3F8D8 = 1;
    }
  }
}

void ggl::tileBaseSurfaceShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::tileBaseSurfaceShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("TileBaseSurfaceShaderVertex");
      *(_DWORD *)algn_1ECE3F564 = 0;
      qword_1ECE3F568 = (uint64_t)"TileBaseSurfaceShader";
      unk_1ECE3F570 = ggl::tileBaseSurfaceShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3F578 = 1;
      unk_1ECE3F580 = &ggl::tileBaseSurfaceShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3F588 = 2;
      unk_1ECE3F590 = &ggl::tileBaseSurfaceShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3F598 = 0;
      unk_1ECE3F5A0 = &ggl::tileBaseSurfaceShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3F5A8 = 0;
      unk_1ECE3F5B0 = &ggl::tileBaseSurfaceShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3F5C0 = 0;
      unk_1ECE3F5C8 = 0;
      qword_1ECE3F5B8 = 0;
    }
  }
}

void ggl::flyoverNightDimShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverNightDimShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("FlyoverNightDimShaderVertex");
      *(_DWORD *)algn_1ECE3F1BC = 0;
      qword_1ECE3F1C0 = (uint64_t)"FlyoverNightDimShader";
      unk_1ECE3F1C8 = ggl::flyoverNightDimShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3F1D0 = 1;
      unk_1ECE3F1D8 = &ggl::flyoverNightDimShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3F1E0 = 1;
      unk_1ECE3F1E8 = &ggl::flyoverNightDimShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3F1F0 = 0;
      unk_1ECE3F1F8 = &ggl::flyoverNightDimShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3F200 = 0;
      unk_1ECE3F208 = &ggl::flyoverNightDimShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3F218 = 0;
      unk_1ECE3F220 = 0;
      qword_1ECE3F210 = 0;
    }
  }
}

void ggl::flyoverMaskedShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverMaskedShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("FlyoverMaskedShaderFragment");
      *(_DWORD *)algn_1ECE3F14C = 1;
      qword_1ECE3F150 = (uint64_t)"FlyoverMaskedShader";
      unk_1ECE3F158 = 0;
      qword_1ECE3F160 = 0;
      unk_1ECE3F168 = &ggl::flyoverMaskedShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3F170 = 2;
      unk_1ECE3F178 = &ggl::flyoverMaskedShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3F180 = 0;
      unk_1ECE3F188 = &ggl::flyoverMaskedShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3F190 = 2;
      unk_1ECE3F198 = &ggl::flyoverMaskedShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3F1A8 = 0;
      unk_1ECE3F1B0 = 0;
      qword_1ECE3F1A0 = 2;
    }
  }
}

void ggl::flyoverManeuverShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverManeuverShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("FlyoverManeuverShaderVertex");
      *(_DWORD *)algn_1ECE3F0DC = 0;
      qword_1ECE3F0E0 = (uint64_t)"FlyoverManeuverShader";
      unk_1ECE3F0E8 = ggl::flyoverManeuverShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3F0F0 = 1;
      unk_1ECE3F0F8 = &ggl::flyoverManeuverShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3F100 = 3;
      unk_1ECE3F108 = &ggl::flyoverManeuverShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3F110 = 0;
      unk_1ECE3F118 = &ggl::flyoverManeuverShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3F120 = 0;
      unk_1ECE3F128 = &ggl::flyoverManeuverShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3F138 = 0;
      unk_1ECE3F140 = 0;
      qword_1ECE3F130 = 0;
    }
  }
}

void ggl::flyoverBorderShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverBorderShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<28ul>("FlyoverBorderShaderFragment");
      *(_DWORD *)algn_1ECE3F06C = 1;
      qword_1ECE3F070 = (uint64_t)"FlyoverBorderShader";
      unk_1ECE3F078 = 0;
      qword_1ECE3F080 = 0;
      unk_1ECE3F088 = &ggl::flyoverBorderShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3F090 = 2;
      unk_1ECE3F098 = &ggl::flyoverBorderShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3F0A0 = 0;
      unk_1ECE3F0A8 = &ggl::flyoverBorderShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3F0B0 = 3;
      unk_1ECE3F0B8 = &ggl::flyoverBorderShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3F0C8 = 0;
      unk_1ECE3F0D0 = 0;
      qword_1ECE3F0C0 = 3;
    }
  }
}

void ggl::flyoverTrafficShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverTrafficShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("FlyoverTrafficShaderVertex");
      *(_DWORD *)algn_1ECE3EAE4 = 0;
      qword_1ECE3EAE8 = (uint64_t)"FlyoverTrafficShader";
      unk_1ECE3EAF0 = ggl::flyoverTrafficShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3EAF8 = 1;
      unk_1ECE3EB00 = &ggl::flyoverTrafficShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3EB08 = 4;
      unk_1ECE3EB10 = &ggl::flyoverTrafficShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3EB18 = 0;
      unk_1ECE3EB20 = &ggl::flyoverTrafficShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3EB28 = 0;
      unk_1ECE3EB30 = &ggl::flyoverTrafficShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3EB40 = 0;
      unk_1ECE3EB48 = 0;
      qword_1ECE3EB38 = 0;
    }
  }
}

void ggl::flyoverRouteShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverRouteShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("FlyoverRouteShaderFragment");
      *(_DWORD *)algn_1ECE3EA74 = 1;
      qword_1ECE3EA78 = (uint64_t)"FlyoverRouteShader";
      unk_1ECE3EA80 = 0;
      qword_1ECE3EA88 = 0;
      unk_1ECE3EA90 = &ggl::flyoverRouteShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3EA98 = 1;
      unk_1ECE3EAA0 = &ggl::flyoverRouteShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3EAA8 = 0;
      unk_1ECE3EAB0 = &ggl::flyoverRouteShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3EAB8 = 1;
      unk_1ECE3EAC0 = &ggl::flyoverRouteShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3EAD0 = 0;
      unk_1ECE3EAD8 = 0;
      qword_1ECE3EAC8 = 1;
    }
  }
}

void ggl::flyoverOverlayShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverOverlayShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("FlyoverOverlayShaderVertex");
      *(_DWORD *)algn_1ECE3E9FC = 0;
      qword_1ECE3EA00 = (uint64_t)"FlyoverOverlayShader";
      unk_1ECE3EA08 = ggl::flyoverOverlayShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3EA10 = 1;
      unk_1ECE3EA18 = &ggl::flyoverOverlayShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3EA20 = 3;
      unk_1ECE3EA28 = &ggl::flyoverOverlayShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3EA30 = 0;
      unk_1ECE3EA38 = &ggl::flyoverOverlayShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3EA40 = 0;
      unk_1ECE3EA48 = &ggl::flyoverOverlayShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3EA58 = 0;
      unk_1ECE3EA60 = 0;
      qword_1ECE3EA50 = 0;
    }
  }
}

void ggl::flyoverNightShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverNightShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("FlyoverNightShaderFragment");
      *(_DWORD *)algn_1ECE3E984 = 1;
      qword_1ECE3E988 = (uint64_t)"FlyoverNightShader";
      unk_1ECE3E990 = 0;
      qword_1ECE3E998 = 0;
      unk_1ECE3E9A0 = &ggl::flyoverNightShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3E9A8 = 2;
      unk_1ECE3E9B0 = &ggl::flyoverNightShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3E9B8 = 0;
      unk_1ECE3E9C0 = &ggl::flyoverNightShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3E9C8 = 2;
      unk_1ECE3E9D0 = &ggl::flyoverNightShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3E9E0 = 0;
      unk_1ECE3E9E8 = 0;
      qword_1ECE3E9D8 = 2;
    }
  }
}

void ggl::flyoverMorphShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverMorphShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<27ul>("FlyoverMorphShaderFragment");
      *(_DWORD *)algn_1ECE3E914 = 1;
      qword_1ECE3E918 = (uint64_t)"FlyoverMorphShader";
      unk_1ECE3E920 = 0;
      qword_1ECE3E928 = 0;
      unk_1ECE3E930 = &ggl::flyoverMorphShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3E938 = 3;
      unk_1ECE3E940 = &ggl::flyoverMorphShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3E948 = 0;
      unk_1ECE3E950 = &ggl::flyoverMorphShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3E958 = 2;
      unk_1ECE3E960 = &ggl::flyoverMorphShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3E970 = 0;
      unk_1ECE3E978 = 0;
      qword_1ECE3E968 = 2;
    }
  }
}

void ggl::flyoverMaskedShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverMaskedShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("FlyoverMaskedShaderVertex");
      *(_DWORD *)algn_1ECE3E2C4 = 0;
      qword_1ECE3E2C8 = (uint64_t)"FlyoverMaskedShader";
      unk_1ECE3E2D0 = ggl::flyoverMaskedShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3E2D8 = 1;
      unk_1ECE3E2E0 = &ggl::flyoverMaskedShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3E2E8 = 5;
      unk_1ECE3E2F0 = &ggl::flyoverMaskedShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3E2F8 = 0;
      unk_1ECE3E300 = &ggl::flyoverMaskedShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3E308 = 1;
      unk_1ECE3E310 = &ggl::flyoverMaskedShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3E320 = 0;
      unk_1ECE3E328 = 0;
      qword_1ECE3E318 = 1;
    }
  }
}

void ggl::flyoverBorderShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverBorderShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("FlyoverBorderShaderVertex");
      *(_DWORD *)algn_1ECE3E254 = 0;
      qword_1ECE3E258 = (uint64_t)"FlyoverBorderShader";
      unk_1ECE3E260 = ggl::flyoverBorderShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3E268 = 1;
      unk_1ECE3E270 = &ggl::flyoverBorderShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3E278 = 5;
      unk_1ECE3E280 = &ggl::flyoverBorderShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3E288 = 0;
      unk_1ECE3E290 = &ggl::flyoverBorderShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3E298 = 1;
      unk_1ECE3E2A0 = &ggl::flyoverBorderShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3E2B0 = 0;
      unk_1ECE3E2B8 = 0;
      qword_1ECE3E2A8 = 1;
    }
  }
}

void ggl::earthCoronaShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::earthCoronaShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<26ul>("EarthCoronaShaderFragment");
      *(_DWORD *)algn_1ECE3E1E4 = 1;
      qword_1ECE3E1E8 = (uint64_t)"EarthCoronaShader";
      unk_1ECE3E1F0 = 0;
      qword_1ECE3E1F8 = 0;
      unk_1ECE3E200 = &ggl::earthCoronaShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3E208 = 1;
      unk_1ECE3E210 = &ggl::earthCoronaShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3E218 = 0;
      unk_1ECE3E220 = &ggl::earthCoronaShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3E228 = 1;
      unk_1ECE3E230 = &ggl::earthCoronaShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3E240 = 0;
      unk_1ECE3E248 = 0;
      qword_1ECE3E238 = 1;
    }
  }
}

void ggl::flyoverRouteShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverRouteShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("FlyoverRouteShaderVertex");
      *(_DWORD *)algn_1ECE3DEBC = 0;
      qword_1ECE3DEC0 = (uint64_t)"FlyoverRouteShader";
      unk_1ECE3DEC8 = ggl::flyoverRouteShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3DED0 = 1;
      unk_1ECE3DED8 = &ggl::flyoverRouteShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3DEE0 = 3;
      unk_1ECE3DEE8 = &ggl::flyoverRouteShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3DEF0 = 0;
      unk_1ECE3DEF8 = &ggl::flyoverRouteShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3DF00 = 0;
      unk_1ECE3DF08 = &ggl::flyoverRouteShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3DF18 = 0;
      unk_1ECE3DF20 = 0;
      qword_1ECE3DF10 = 0;
    }
  }
}

void ggl::flyoverNightShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverNightShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("FlyoverNightShaderVertex");
      *(_DWORD *)algn_1ECE3DE4C = 0;
      qword_1ECE3DE50 = (uint64_t)"FlyoverNightShader";
      unk_1ECE3DE58 = ggl::flyoverNightShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3DE60 = 1;
      unk_1ECE3DE68 = &ggl::flyoverNightShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3DE70 = 5;
      unk_1ECE3DE78 = &ggl::flyoverNightShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3DE80 = 0;
      unk_1ECE3DE88 = &ggl::flyoverNightShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3DE90 = 1;
      unk_1ECE3DE98 = &ggl::flyoverNightShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3DEA8 = 0;
      unk_1ECE3DEB0 = 0;
      qword_1ECE3DEA0 = 1;
    }
  }
}

void ggl::flyoverMorphShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverMorphShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<25ul>("FlyoverMorphShaderVertex");
      *(_DWORD *)algn_1ECE3DDDC = 0;
      qword_1ECE3DDE0 = (uint64_t)"FlyoverMorphShader";
      unk_1ECE3DDE8 = ggl::flyoverMorphShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3DDF0 = 1;
      unk_1ECE3DDF8 = &ggl::flyoverMorphShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3DE00 = 6;
      unk_1ECE3DE08 = &ggl::flyoverMorphShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3DE10 = 0;
      unk_1ECE3DE18 = &ggl::flyoverMorphShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3DE20 = 1;
      unk_1ECE3DE28 = &ggl::flyoverMorphShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3DE38 = 0;
      unk_1ECE3DE40 = 0;
      qword_1ECE3DE30 = 1;
    }
  }
}

void ggl::solidLineShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::solidLineShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("SolidLineShaderFragment");
      *(_DWORD *)algn_1ECE3DAB4 = 1;
      qword_1ECE3DAB8 = (uint64_t)"SolidLineShader";
      unk_1ECE3DAC0 = 0;
      qword_1ECE3DAC8 = 0;
      unk_1ECE3DAD0 = &ggl::solidLineShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3DAD8 = 1;
      unk_1ECE3DAE0 = &ggl::solidLineShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3DAE8 = 0;
      unk_1ECE3DAF0 = &ggl::solidLineShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3DAF8 = 0;
      unk_1ECE3DB00 = &ggl::solidLineShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3DB10 = 0;
      unk_1ECE3DB18 = 0;
      qword_1ECE3DB08 = 0;
    }
  }
}

void ggl::earthCoronaShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::earthCoronaShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<24ul>("EarthCoronaShaderVertex");
      *(_DWORD *)algn_1ECE3D87C = 0;
      qword_1ECE3D880 = (uint64_t)"EarthCoronaShader";
      unk_1ECE3D888 = ggl::earthCoronaShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3D890 = 1;
      unk_1ECE3D898 = &ggl::earthCoronaShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3D8A0 = 1;
      unk_1ECE3D8A8 = &ggl::earthCoronaShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3D8B0 = 0;
      unk_1ECE3D8B8 = &ggl::earthCoronaShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3D8C0 = 0;
      unk_1ECE3D8C8 = &ggl::earthCoronaShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3D8D8 = 0;
      unk_1ECE3D8E0 = 0;
      qword_1ECE3D8D0 = 0;
    }
  }
}

void ggl::solidLineShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::solidLineShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<22ul>("SolidLineShaderVertex");
      *(_DWORD *)algn_1ECE3D4EC = 0;
      qword_1ECE3D4F0 = (uint64_t)"SolidLineShader";
      unk_1ECE3D4F8 = ggl::solidLineShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3D500 = 1;
      unk_1ECE3D508 = &ggl::solidLineShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3D510 = 2;
      unk_1ECE3D518 = &ggl::solidLineShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3D520 = 0;
      unk_1ECE3D528 = &ggl::solidLineShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3D530 = 0;
      unk_1ECE3D538 = &ggl::solidLineShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3D548 = 0;
      unk_1ECE3D550 = 0;
      qword_1ECE3D540 = 0;
    }
  }
}

void ggl::flyoverShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<22ul>("FlyoverShaderFragment");
      *(_DWORD *)algn_1ECE3D2B4 = 1;
      qword_1ECE3D2B8 = (uint64_t)"FlyoverShader";
      unk_1ECE3D2C0 = 0;
      qword_1ECE3D2C8 = 0;
      unk_1ECE3D2D0 = &ggl::flyoverShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3D2D8 = 2;
      unk_1ECE3D2E0 = &ggl::flyoverShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3D2E8 = 0;
      unk_1ECE3D2F0 = &ggl::flyoverShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3D2F8 = 1;
      unk_1ECE3D300 = &ggl::flyoverShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3D310 = 0;
      unk_1ECE3D318 = 0;
      qword_1ECE3D308 = 1;
    }
  }
}

void ggl::starsShaderFragmentFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::starsShaderFragmentFunctionDescriptor(void)::ref = ggl::crc32::compute<20ul>("StarsShaderFragment");
      *(_DWORD *)algn_1ECE3CF9C = 1;
      qword_1ECE3CFA0 = (uint64_t)"StarsShader";
      unk_1ECE3CFA8 = 0;
      qword_1ECE3CFB0 = 0;
      unk_1ECE3CFB8 = &ggl::starsShaderFragShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3CFC0 = 0;
      unk_1ECE3CFC8 = &ggl::starsShaderFragShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3CFD0 = 0;
      unk_1ECE3CFD8 = &ggl::starsShaderFragShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3CFE0 = 0;
      unk_1ECE3CFE8 = &ggl::starsShaderFragShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3CFF8 = 0;
      unk_1ECE3D000 = 0;
      qword_1ECE3CFF0 = 0;
    }
  }
}

void ggl::flyoverShaderVertexFunctionDescriptor(ggl *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      ggl::flyoverShaderVertexFunctionDescriptor(void)::ref = ggl::crc32::compute<20ul>("FlyoverShaderVertex");
      *(_DWORD *)algn_1ECE3CE3C = 0;
      qword_1ECE3CE40 = (uint64_t)"FlyoverShader";
      unk_1ECE3CE48 = ggl::flyoverShaderVertShaderFunctionAttributes(void)::ref;
      qword_1ECE3CE50 = 1;
      unk_1ECE3CE58 = &ggl::flyoverShaderVertShaderFunctionConstantMapping(void)::ref;
      qword_1ECE3CE60 = 5;
      unk_1ECE3CE68 = &ggl::flyoverShaderVertShaderFunctionBufferMapping(void)::ref;
      qword_1ECE3CE70 = 0;
      unk_1ECE3CE78 = &ggl::flyoverShaderVertShaderFunctionTextureMapping(void)::ref;
      qword_1ECE3CE80 = 1;
      unk_1ECE3CE88 = &ggl::flyoverShaderVertShaderFunctionSamplerMapping(void)::ref;
      qword_1ECE3CE98 = 0;
      unk_1ECE3CEA0 = 0;
      qword_1ECE3CE90 = 1;
    }
  }
}

