void std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*a1);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void ggl::AlphaAtlas::generateTexture(ggl::AlphaAtlas *this, unsigned int a2, unsigned int a3, float a4, float a5, float a6, float a7)
{
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  float v15;
  _BYTE *v22;
  int32x2_t v23;
  int32x2_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float32x2_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  float v36;
  float v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float v41;
  float v42;
  float32x2_t v43;
  float32x2_t v44;
  uint64_t v45;
  float v46;
  float v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float v51;
  float v52;
  float v53;
  float32x2_t v56;
  float v57;
  float v58;
  float32x2_t v59;

  v10 = operator new(0x60uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_1E42DEFB8;
  v11 = v10 + 3;
  v12 = ggl::TextureData2D::TextureData2D((uint64_t)(v10 + 3), a2, a2, 8u, 2, 0);
  *(_QWORD *)this = v10 + 3;
  *((_QWORD *)this + 1) = v10;
  v13 = (void *)(*(uint64_t (**)(_QWORD *, _QWORD))(v10[3] + 16))(v12, 0);
  memset(v13, 128, v10[11]);
  v14 = 0;
  v15 = 1.0;
  __asm { FMOV            V0.2S, #1.0 }
  v59 = _D0;
  __asm { FMOV            V0.2S, #3.0 }
  v56 = _D0;
  v53 = 1.0 / a4;
  while (1)
  {
    v22 = (_BYTE *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v11 + 16))(v11, v14);
    v25 = a2 >> v14;
    v26 = a3 >> v14;
    if (a3 >> v14 >= v25)
      v27 = a2 >> v14;
    else
      v27 = a3 >> v14;
    *(float *)v23.i32 = a5;
    if (v27 > 2)
      *(float *)v23.i32 = v15;
    v28 = 0.5;
    if (v26 && (_DWORD)v25)
    {
      v29 = (float)v25;
      v30 = fminf(fmaxf((float)((float)v27 - *(float *)v23.i32) + -0.5, 0.0), (float)v25 * v53);
      v31 = 1.0 / (float)v25;
      v57 = 1.0 / (float)v26;
      v58 = (float)v26;
      *(float *)v24.i32 = -*(float *)v23.i32;
      v32 = (float32x2_t)vdup_lane_s32(v24, 0);
      v33 = 0;
      v34 = 0;
      if (*(float *)v23.i32 == 0.0)
      {
        do
        {
          v35 = 0;
          v36 = (float)((float)((float)v34 + v28) * v57) * v58;
          do
          {
            v37 = hypotf((float)((float)((float)v35 + v28) * v31) * v29, v36);
            v28 = 0.5;
            v38.f32[0] = v37 + v30;
            v38.f32[1] = v37 - v30;
            v39 = (float32x2_t)vand_s8((int8x8_t)vcge_f32(v38, v32), (int8x8_t)v59);
            v40 = vmul_f32(vmul_f32(v39, v39), vmla_f32(v56, (float32x2_t)0xC0000000C0000000, v39));
            v41 = fmaxf(vsub_f32(v40, (float32x2_t)vdup_lane_s32((int32x2_t)v40, 1)).f32[0], 0.0);
            if (v41 <= 1.0)
              v42 = v41 * 255.0;
            else
              v42 = 255.0;
            v22[(v33 + v35++)] = llroundf(v42);
          }
          while (v25 != v35);
          ++v34;
          v33 += v25;
        }
        while (v34 != v26);
      }
      else
      {
        v43 = (float32x2_t)vdup_lane_s32(v23, 0);
        v44 = vdiv_f32(v59, v43);
        do
        {
          v45 = 0;
          v46 = (float)((float)((float)v34 + v28) * v57) * v58;
          do
          {
            v47 = hypotf((float)((float)((float)v45 + v28) * v31) * v29, v46);
            v28 = 0.5;
            v48.f32[0] = v47 + v30;
            v48.f32[1] = v47 - v30;
            v49 = vmul_f32(vadd_f32(vminnm_f32(vmaxnm_f32(v32, v48), v43), v43), vmul_f32((float32x2_t)0x3F0000003F000000, v44));
            v50 = vmul_f32(vmul_f32(v49, v49), vmla_f32(v56, (float32x2_t)0xC0000000C0000000, v49));
            v51 = fmaxf(vsub_f32(v50, (float32x2_t)vdup_lane_s32((int32x2_t)v50, 1)).f32[0], 0.0);
            if (v51 <= 1.0)
              v52 = v51 * 255.0;
            else
              v52 = 255.0;
            v22[(v33 + v45++)] = llroundf(v52);
          }
          while (v25 != v45);
          ++v34;
          v33 += v25;
        }
        while (v34 != v26);
      }
    }
    if ((_DWORD)v14 == 7)
      break;
    v14 = (v14 + 1);
    v15 = 1.0;
  }
  *v22 = 25;
}

void md::DaVinciGroundTileData::_buildNormals(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int **a4, uint16x4_t *a5, _QWORD *a6, unint64_t **a7, uint64_t *a8, float a9, std::vector<unsigned int> *a10, uint64_t a11, uint64_t a12, gdc::DCEL **a13)
{
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t v21;
  unint64_t v22;
  std::vector<unsigned int>::pointer begin;
  uint64_t v24;
  uint32x4_t *v25;
  uint16x4_t *v26;
  uint64_t v27;
  uint16x8_t v28;
  uint32x4_t v29;
  uint32x4_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned __int16 *v33;
  unsigned int v34;
  _QWORD *v35;
  char **v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint8_t *v40;
  gdc::DCEL *v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int *v47;
  char v48;
  char *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char **v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int i;
  unsigned int v62;
  int v63;
  int v64;
  int v65;
  _DWORD *v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char v84;
  char *v85;
  NSObject *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  float v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  float *v104;
  int8x8_t v105;
  uint8x8_t v106;
  unint64_t v107;
  uint64_t **v108;
  uint64_t *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  float *v114;
  int8x8_t v115;
  int v116;
  unsigned int v117;
  uint64_t v118;
  float *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int *v123;
  uint64_t v124;
  unsigned int v125;
  float *v126;
  float v127;
  float v128;
  float v129;
  unsigned int *v130;
  uint64_t v131;
  unsigned int v132;
  float *v133;
  unsigned int *v134;
  uint64_t v135;
  unsigned int v136;
  float *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  float v144;
  float v145;
  float v146;
  BOOL v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  float *v151;
  float *v152;
  __int128 v153;
  float *v154;
  float v155;
  float v156;
  float v157;
  float v158;
  NSObject *v159;
  NSObject *v160;
  unsigned int v161;
  uint64_t v162;
  int v163;
  float v164;
  float v165;
  float v166;
  float *v167;
  float v168;
  float v169;
  float v170;
  float v171;
  unint64_t v172;
  unint64_t v173;
  char *v174;
  float *v175;
  float *v176;
  float *v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  unsigned int *j;
  unint64_t v182;
  int8x8_t v183;
  uint8x8_t v184;
  unint64_t v185;
  NSObject *v186;
  int v187;
  uint64_t **v188;
  uint64_t *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  NSObject *v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  NSObject *v197;
  unsigned int v198;
  int v199;
  NSObject *v200;
  float v201;
  float v202;
  float v203;
  int v204;
  int v205;
  NSObject *v206;
  uint8x8_t v207;
  unint64_t v208;
  uint64_t **v209;
  uint64_t *v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  float *v214;
  unint64_t k;
  uint64_t *v216;
  unsigned int v217;
  uint64_t v218;
  unsigned int v219;
  float *v220;
  float *v221;
  float v222;
  float v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  float *v235;
  uint64_t v236;
  int v237;
  float **v238;
  float *v239;
  uint64_t *v240;
  char *v241;
  unint64_t v242;
  unint64_t v243;
  char *v244;
  char *v245;
  uint64_t v246;
  int v247;
  unint64_t v248;
  int8x8_t v249;
  uint8x8_t v250;
  unint64_t v251;
  uint64_t **v252;
  uint64_t *v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  NSObject *v257;
  uint64_t v258;
  NSObject *v259;
  NSObject *v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  unsigned __int8 v264;
  gdc::DCEL *v265;
  std::__shared_weak_count *v266;
  unint64_t *p_shared_owners;
  unint64_t v268;
  _QWORD *v269;
  _QWORD *v270;
  void *v271;
  uint64_t v272;
  unint64_t *v273;
  float v274;
  int v275;
  uint64_t v277;
  float *v278;
  unsigned int v279;
  char *v280;
  unsigned int v281;
  uint64_t v282;
  char *v283;
  float *v284;
  int v285;
  unint64_t v286;
  float v287;
  int v288;
  float v289;
  float v290;
  float v291;
  unint64_t **v294;
  unsigned int v295;
  _QWORD *v296;
  uint64_t v297;
  gdc::DCEL *v298;
  unsigned int *__p;
  float *__pa;
  unsigned int v303;
  void *v304[2];
  void *v305[2];
  int v306;
  _QWORD v307[3];
  _QWORD *v308;
  uint8_t buf[8];
  _DWORD *v310;
  _DWORD *v311;
  uint8_t v312[8];
  __int16 v313;
  double v314;
  __int16 v315;
  _QWORD v316[5];

  *(_QWORD *)((char *)&v316[2] + 4) = *MEMORY[0x1E0C80C00];
  v21 = a3;
  v22 = a10->__end_ - a10->__begin_;
  if (a3 <= v22)
  {
    if (a3 < v22)
      a10->__end_ = &a10->__begin_[a3];
  }
  else
  {
    std::vector<unsigned int>::__append(a10, a3 - v22);
  }
  if (a3)
  {
    begin = a10->__begin_;
    if (a3 > 0xF)
    {
      v24 = v21 & 0xFFFFFFF0;
      v25 = (uint32x4_t *)(begin + 8);
      v26 = a5 + 2;
      v27 = v24;
      do
      {
        v28 = *(uint16x8_t *)v26[-2].i8;
        v29 = vmovl_u16(*v26);
        v30 = vmovl_high_u16(*(uint16x8_t *)v26->i8);
        v25[-2] = vmovl_u16(*(uint16x4_t *)v28.i8);
        v25[-1] = vmovl_high_u16(v28);
        *v25 = v29;
        v25[1] = v30;
        v25 += 4;
        v26 += 4;
        v27 -= 16;
      }
      while (v27);
      if (v24 == v21)
        goto LABEL_13;
    }
    else
    {
      v24 = 0;
    }
    v31 = v21 - v24;
    v32 = &begin[v24];
    v33 = (unsigned __int16 *)a5 + v24;
    do
    {
      v34 = *v33++;
      *v32++ = v34;
      --v31;
    }
    while (v31);
  }
LABEL_13:
  *(_OWORD *)v304 = 0u;
  *(_OWORD *)v305 = 0u;
  v306 = 1065353216;
  v303 = 0;
  v35 = operator new(0x38uLL);
  *v35 = &off_1E42D0A60;
  v35[1] = a5;
  v35[2] = a11;
  v35[3] = a1;
  v35[4] = &v303;
  v35[5] = v304;
  v35[6] = a4;
  v308 = v35;
  v296 = a13 + 2;
  if (a13)
    v36 = (char **)(a13 + 2);
  else
    v36 = 0;
  v298 = (gdc::DCEL *)operator new();
  v37 = (uint64_t)v308;
  if (!v308)
    goto LABEL_19;
  if (v308 != v307)
  {
    v37 = (*(uint64_t (**)(void))(*v308 + 16))();
LABEL_19:
    *(_QWORD *)((char *)v316 + 4) = v37;
    goto LABEL_21;
  }
  *(_QWORD *)((char *)v316 + 4) = v312;
  (*(void (**)(_QWORD *, uint8_t *))(v307[0] + 24))(v307, v312);
LABEL_21:
  v282 = a1;
  *((_QWORD *)v298 + 8) = 0;
  *((_OWORD *)v298 + 2) = 0u;
  *((_OWORD *)v298 + 3) = 0u;
  *(_OWORD *)v298 = 0u;
  *((_OWORD *)v298 + 1) = 0u;
  if (*(float *)&a2 != 0.0)
  {
    v38 = (char *)operator new(4 * a2);
    *((_QWORD *)v298 + 6) = v38;
    v39 = &v38[4 * a2];
    *((_QWORD *)v298 + 8) = v39;
    memset(v38, 255, 4 * a2);
    *((_QWORD *)v298 + 7) = v39;
  }
  v40 = *(uint8_t **)((char *)v316 + 4);
  if (*(_QWORD *)((char *)v316 + 4))
  {
    if (*(uint8_t **)((char *)v316 + 4) == v312)
    {
      *((_QWORD *)v298 + 12) = (char *)v298 + 72;
      (*(void (**)(uint8_t *))(*(_QWORD *)v312 + 24))(v312);
    }
    else
    {
      *((_QWORD *)v298 + 12) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)((char *)v316 + 4) + 16))(*(_QWORD *)((char *)v316 + 4));
    }
    v40 = *(uint8_t **)((char *)v316 + 4);
    v41 = v298;
  }
  else
  {
    v41 = v298;
    *((_QWORD *)v298 + 12) = 0;
  }
  *((_QWORD *)v41 + 13) = 0;
  *((_QWORD *)v41 + 14) = 0;
  *((_QWORD *)v41 + 15) = 0;
  if (v40 == v312)
  {
    v42 = 4;
    v40 = v312;
  }
  else
  {
    if (!v40)
      goto LABEL_34;
    v42 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v40 + 8 * v42))();
LABEL_34:
  v43 = *a4;
  v44 = a4[1];
  v294 = a7;
  v291 = *(float *)&a2;
  *(float *)&v45 = 0.0;
  if (*a4 != v44)
  {
    do
    {
      if (!*((_BYTE *)v43 + 12))
        v45 += (v43[1] - *v43) / 3;
      v43 += 4;
    }
    while (v43 != v44);
  }
  v290 = *(float *)&v45;
  gdc::DCEL::reserveFaces(v298, v45);
  v47 = *a4;
  v46 = a4[1];
  if (*a4 != v46)
  {
    v48 = 0;
    __p = a4[1];
    do
    {
      if (*((_BYTE *)v47 + 12))
      {
        if (!a13)
          goto LABEL_43;
        v51 = v36[1];
        v50 = (unint64_t)v36[2];
        if ((unint64_t)v51 < v50)
        {
          *v51 = 0;
          v51[8] = 0;
          v49 = v51 + 12;
        }
        else
        {
          v52 = (char *)*v296;
          v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v51[-*v296] >> 2);
          v54 = v53 + 1;
          if (v53 + 1 > 0x1555555555555555)
            abort();
          v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - (_QWORD)v52) >> 2);
          if (2 * v55 > v54)
            v54 = 2 * v55;
          if (v55 >= 0xAAAAAAAAAAAAAAALL)
            v56 = 0x1555555555555555;
          else
            v56 = v54;
          if (v56)
          {
            if (v56 > 0x1555555555555555)
              goto LABEL_429;
            v57 = (char *)operator new(12 * v56);
          }
          else
          {
            v57 = 0;
          }
          v76 = &v57[12 * v53];
          *v76 = 0;
          v76[8] = 0;
          v77 = v76;
          if (v51 != v52)
          {
            do
            {
              v78 = *(_QWORD *)(v51 - 12);
              v51 -= 12;
              v79 = v51[8];
              *(_QWORD *)(v77 - 12) = v78;
              v77 -= 12;
              v77[8] = v79;
            }
            while (v51 != v52);
            v51 = *v36;
          }
          v80 = &v57[12 * v56];
          v49 = v76 + 12;
          *v36 = v77;
          v36[1] = v76 + 12;
          v36[2] = v80;
          if (v51)
            operator delete(v51);
        }
      }
      else
      {
        v58 = v36;
        if ((v48 & 1) == 0)
          v303 = *v47;
        v60 = *((_QWORD *)v298 + 3);
        v59 = *((_QWORD *)v298 + 4);
        for (i = *v47; i < v47[1]; i += 3)
        {
          v62 = v47[2];
          v63 = a5->u16[i];
          v64 = a5->u16[i + 1];
          v65 = a5->u16[i + 2];
          v66 = operator new(0xCuLL);
          v310 = v66 + 3;
          v311 = v66 + 3;
          *v66 = v62 + v63;
          v66[1] = v62 + v64;
          v66[2] = v62 + v65;
          *(_QWORD *)buf = v66;
          gdc::DCEL::addFace(v298, (unsigned int **)buf);
          operator delete(v66);
        }
        if (!a13)
        {
          v48 = 1;
          v46 = __p;
          v36 = v58;
          goto LABEL_43;
        }
        v46 = __p;
        v67 = ((*((_QWORD *)v298 + 4) - *((_QWORD *)v298 + 3)) << 30) & 0xFFFFFFFF00000000 | ((unint64_t)(v59 - v60) >> 2);
        v36 = v58;
        v69 = v58[1];
        v68 = (unint64_t)v58[2];
        if ((unint64_t)v69 >= v68)
        {
          v70 = (char *)*v296;
          v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v69[-*v296] >> 2);
          v72 = v71 + 1;
          if (v71 + 1 > 0x1555555555555555)
            abort();
          v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - (_QWORD)v70) >> 2);
          if (2 * v73 > v72)
            v72 = 2 * v73;
          if (v73 >= 0xAAAAAAAAAAAAAAALL)
            v74 = 0x1555555555555555;
          else
            v74 = v72;
          if (v74)
          {
            if (v74 > 0x1555555555555555)
              goto LABEL_429;
            v75 = (char *)operator new(12 * v74);
          }
          else
          {
            v75 = 0;
          }
          v81 = &v75[12 * v71];
          *(_QWORD *)v81 = v67;
          v81[8] = 1;
          v82 = v81;
          if (v69 != v70)
          {
            do
            {
              v83 = *(_QWORD *)(v69 - 12);
              v69 -= 12;
              v84 = v69[8];
              *(_QWORD *)(v82 - 12) = v83;
              v82 -= 12;
              v82[8] = v84;
            }
            while (v69 != v70);
            v69 = *v58;
          }
          v85 = &v75[12 * v74];
          v49 = v81 + 12;
          *v58 = v82;
          v58[1] = v81 + 12;
          v58[2] = v85;
          if (v69)
            operator delete(v69);
          v48 = 1;
        }
        else
        {
          *(_QWORD *)v69 = v67;
          v48 = 1;
          v69[8] = 1;
          v49 = v69 + 12;
        }
      }
      v36[1] = v49;
LABEL_43:
      v47 += 4;
    }
    while (v47 != v46);
  }
  if (LODWORD(v290) != ((*((_QWORD *)v298 + 4) - *((_QWORD *)v298 + 3)) >> 2))
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v86 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
    {
      v87 = (*((_QWORD *)v298 + 4) - *((_QWORD *)v298 + 3)) >> 2;
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v87;
      LOWORD(v310) = 1024;
      *(float *)((char *)&v310 + 2) = v290;
      _os_log_impl(&dword_19F029000, v86, OS_LOG_TYPE_ERROR, "face count does not match (%d to %d)", buf, 0xEu);
    }

  }
  v88 = v308;
  if (v308 == v307)
  {
    v89 = 4;
    v88 = v307;
  }
  else
  {
    if (!v308)
      goto LABEL_98;
    v89 = 5;
  }
  (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_98:
  v274 = cosf(a9);
  v91 = (unint64_t)(float)((float)LODWORD(v291) * 1.6);
  v92 = *a8;
  if (0xAAAAAAAAAAAAAAABLL * ((a8[2] - *a8) >> 2) < v91)
  {
    if (v91 > 0x1555555555555555)
      abort();
    v93 = a8[1];
    v94 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a8[3] + 16))(a8[3], 12 * v91, 4);
    v96 = *a8;
    v95 = a8[1];
    v97 = v94 + 12 * ((v93 - v92) / 12);
    if (v95 == *a8)
    {
      v100 = a8;
    }
    else
    {
      do
      {
        v98 = *(_QWORD *)(v95 - 12);
        v95 -= 12;
        v99 = *(_DWORD *)(v95 + 8);
        *(_QWORD *)(v97 - 12) = v98;
        v97 -= 12;
        *(_DWORD *)(v97 + 8) = v99;
      }
      while (v95 != v96);
      v100 = a8;
      v95 = *a8;
    }
    *v100 = v97;
    v100[1] = v94 + 12 * ((v93 - v92) / 12);
    v101 = v100[2];
    v100[2] = v94 + 12 * v91;
    if (v95)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a8[3] + 40))(a8[3], v95, v101 - v95);
  }
  v102 = v294[1] - *v294;
  v272 = LODWORD(v291);
  if (LODWORD(v291) <= v102)
  {
    if (LODWORD(v291) < v102)
      v294[1] = &(*v294)[LODWORD(v291)];
  }
  else
  {
    std::vector<gm::Matrix<float,2,1>>::__append((uint64_t)v294, LODWORD(v291) - v102);
  }
  if (v291 == 0.0)
  {
    v104 = 0;
    v264 = 0;
    __pa = 0;
    goto LABEL_410;
  }
  v103 = 0;
  v275 = 0;
  v104 = 0;
  v285 = 0;
  v281 = 0;
  v280 = 0;
  __pa = 0;
  v284 = 0;
  v273 = *v294;
  while (2)
  {
    v105 = (int8x8_t)a6[1];
    if (v105)
    {
      v106 = (uint8x8_t)vcnt_s8(v105);
      v106.i16[0] = vaddlv_u8(v106);
      if (v106.u32[0] > 1uLL)
      {
        v107 = v103;
        if (*(_QWORD *)&v105 <= v103)
          v107 = v103 % *(_QWORD *)&v105;
      }
      else
      {
        v107 = (*(_QWORD *)&v105 + 0xFFFFFFFFLL) & v103;
      }
      v108 = *(uint64_t ***)(*a6 + 8 * v107);
      if (v108)
      {
        v109 = *v108;
        if (v109)
        {
          if (v106.u32[0] < 2uLL)
          {
            v110 = *(_QWORD *)&v105 - 1;
            while (1)
            {
              v112 = v109[1];
              if (v112 == v103)
              {
                if (v103 == *((_DWORD *)v109 + 4))
                  goto LABEL_134;
              }
              else if ((v112 & v110) != v107)
              {
                goto LABEL_135;
              }
              v109 = (uint64_t *)*v109;
              if (!v109)
                goto LABEL_135;
            }
          }
          do
          {
            v111 = v109[1];
            if (v111 == v103)
            {
              if (v103 == *((_DWORD *)v109 + 4))
              {
LABEL_134:
                *((_DWORD *)v109 + 5) = -1431655765 * ((unint64_t)(a8[1] - *a8) >> 2);
                break;
              }
            }
            else
            {
              if (v111 >= *(_QWORD *)&v105)
                v111 %= *(_QWORD *)&v105;
              if (v111 != v107)
                break;
            }
            v109 = (uint64_t *)*v109;
          }
          while (v109);
        }
      }
    }
LABEL_135:
    v286 = v103;
    v113 = *(unsigned int *)(*((_QWORD *)v298 + 6) + 4 * v103);
    if ((_DWORD)v113 == -1)
    {
      v114 = __pa;
      v115 = (int8x8_t)v304[1];
      if (v304[1])
        goto LABEL_296;
LABEL_315:
      v214 = __pa;
      if (__pa == v114)
      {
        v210 = 0;
        v240 = 0;
        goto LABEL_341;
      }
      k = 0xAAAAAAAAAAAAAAABLL * (v114 - __pa);
      goto LABEL_317;
    }
    v116 = 0;
    v295 = 0;
    v117 = 0;
    v118 = *(_QWORD *)v298;
    v297 = *(unsigned int *)(*((_QWORD *)v298 + 6) + 4 * v103);
    v119 = v104;
    v120 = v297;
    while (1)
    {
      v121 = *(unsigned int *)(v118 + 16 * v120 + 12);
      if ((_DWORD)v121 == -1)
      {
        v116 = 0;
      }
      else
      {
        v122 = *(unsigned int *)(*((_QWORD *)v298 + 3) + 4 * v121);
        v123 = (unsigned int *)(v118 + 16 * v122);
        v125 = *v123;
        v124 = v123[1];
        v126 = (float *)(v282 + 12 * v125);
        v128 = *v126;
        v127 = v126[1];
        v129 = v126[2];
        if ((_DWORD)v124 != (_DWORD)v122)
        {
          v130 = (unsigned int *)(v118 + 16 * v124);
          v132 = *v130;
          v131 = v130[1];
          v133 = (float *)(v282 + 12 * v132);
          v14 = *v133;
          v13 = v133[1];
          a9 = v133[2];
          if ((_DWORD)v131 != (_DWORD)v122)
          {
            v134 = (unsigned int *)(v118 + 16 * v131);
            v136 = *v134;
            v135 = v134[1];
            v137 = (float *)(v282 + 12 * v136);
            v16 = v137[1];
            v15 = v137[2];
            if ((_DWORD)v135 == (_DWORD)v122
              || (v138 = *(unsigned int *)(v118 + 16 * v135 + 4), (_DWORD)v138 == (_DWORD)v122)
              || (v139 = *(unsigned int *)(v118 + 16 * v138 + 4), (_DWORD)v139 == (_DWORD)v122)
              || (v140 = *(unsigned int *)(v118 + 16 * v139 + 4), (_DWORD)v140 == (_DWORD)v122)
              || (v141 = *(unsigned int *)(v118 + 16 * v140 + 4), (_DWORD)v141 == (_DWORD)v122)
              || (v142 = *(unsigned int *)(v118 + 16 * v141 + 4), (_DWORD)v142 == (_DWORD)v122)
              || (v143 = *(unsigned int *)(v118 + 16 * v142 + 4), (_DWORD)v143 == (_DWORD)v122)
              || *(_DWORD *)(v118 + 16 * v143 + 4) == (_DWORD)v122)
            {
              v90 = *v137;
            }
            else
            {
              v287 = *v137;
              if (GEOGetGeoDisplayCoreDCELLog::onceToken != -1)
                dispatch_once(&GEOGetGeoDisplayCoreDCELLog::onceToken, &__block_literal_global_10_42066);
              v159 = (id)GEOGetGeoDisplayCoreDCELLog::log;
              if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v312 = 67109120;
                *(_DWORD *)&v312[4] = v121;
                _os_log_impl(&dword_19F029000, v159, OS_LOG_TYPE_ERROR, "iterated over too many vertices in polygon for face %d", v312, 8u);
              }

              v90 = v287;
            }
          }
        }
        v144 = v14 - v128;
        v145 = v13 - v127;
        v90 = v90 - v128;
        v146 = v15 - v129;
        v13 = -(float)((float)((float)(v16 - v127) * (float)(a9 - v129))
                     - (float)((float)(v15 - v129) * (float)(v13 - v127)));
        v14 = -(float)((float)((float)(v15 - v129) * (float)(v14 - v128)) - (float)(v90 * (float)(a9 - v129)));
        v15 = -(float)((float)(v90 * v145) - (float)((float)(v16 - v127) * v144));
        v16 = (float)((float)((float)(v90 * v90) + (float)((float)(v16 - v127) * (float)(v16 - v127)))
                    + (float)(v146 * v146))
            * (float)((float)((float)((float)(a9 - v129) * (float)(a9 - v129)) + (float)(v145 * v145))
                    + (float)(v144 * v144));
        a9 = (float)((float)(v15 * v15) + (float)(v13 * v13)) + (float)(v14 * v14);
        v147 = a9 == 0.0;
        if (v104 >= v284)
        {
          v148 = 0xCCCCCCCCCCCCCCCDLL * (v104 - v119) + 1;
          if (v148 > 0xCCCCCCCCCCCCCCCLL)
            std::__throw_bad_array_new_length[abi:nn180100]();
          if (0x999999999999999ALL * (v284 - v119) > v148)
            v148 = 0x999999999999999ALL * (v284 - v119);
          v149 = 0xCCCCCCCCCCCCCCCDLL * (v284 - v119) >= 0x666666666666666 ? 0xCCCCCCCCCCCCCCCLL : v148;
          if (v149)
          {
            if (v149 > 0xCCCCCCCCCCCCCCCLL)
              goto LABEL_429;
            v150 = (char *)operator new(20 * v149);
          }
          else
          {
            v150 = 0;
          }
          v151 = (float *)&v150[4 * (v104 - v119)];
          *v151 = v13;
          v151[1] = v14;
          v151[2] = v15;
          v151[3] = v16;
          *((_BYTE *)v151 + 16) = v147;
          if (v104 == v119)
          {
            v154 = v104;
            v119 = (float *)&v150[4 * (v104 - v119)];
          }
          else
          {
            v152 = (float *)&v150[4 * (v104 - v119)];
            do
            {
              v153 = *(_OWORD *)(v104 - 5);
              *(v152 - 1) = *(v104 - 1);
              *(_OWORD *)(v152 - 5) = v153;
              v152 -= 5;
              v104 -= 5;
            }
            while (v104 != v119);
            v154 = v119;
            v119 = v152;
          }
          v284 = (float *)&v150[20 * v149];
          v104 = v151 + 5;
          if (v154)
            operator delete(v154);
        }
        else
        {
          *v104 = v13;
          v104[1] = v14;
          v104[2] = v15;
          v104[3] = v16;
          *((_BYTE *)v104 + 16) = v147;
          v104 += 5;
        }
        v155 = 1.0 / sqrtf(a9);
        v156 = v155 * v13;
        v157 = v155 * v14;
        v158 = v155 * v15;
        if (v297 == v113)
        {
          if (v116)
          {
            v90 = (float)((float)(v156 * v289) + (float)(v157 * v290)) + (float)(v158 * v291);
            v297 = v113;
            if (v90 < v274)
            {
              v295 = -1 - 858993459 * ((unint64_t)((char *)v104 - (char *)v119) >> 2);
              v297 = v120;
            }
          }
        }
        if (a9 != 0.0)
        {
          v116 = 1;
          v290 = v157;
          v291 = v158;
          v289 = v156;
        }
      }
      if (v117 >= 0x64)
        break;
      ++v117;
      v118 = *(_QWORD *)v298;
      v120 = *(unsigned int *)(*(_QWORD *)v298 + 16 * (v120 ^ 1) + 4);
      if (v120 == v113)
        goto LABEL_191;
    }
    if (GEOGetGeoDisplayCoreDCELLog::onceToken != -1)
      dispatch_once(&GEOGetGeoDisplayCoreDCELLog::onceToken, &__block_literal_global_10_42066);
    v160 = (id)GEOGetGeoDisplayCoreDCELLog::log;
    if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v312 = 67109120;
      *(_DWORD *)&v312[4] = v113;
      _os_log_impl(&dword_19F029000, v160, OS_LOG_TYPE_ERROR, "iterating over too many half edges in walkCWEdgesIncidentToVertex incident to half edge %d", v312, 8u);
    }

    v118 = *(_QWORD *)v298;
LABEL_191:
    v288 = 0;
    v161 = 0;
    v279 = v303;
    v277 = -1 - 0x3333333333333333 * (v104 - v119);
    v278 = v119;
    v114 = __pa;
    v162 = v297;
    while (1)
    {
      v163 = *(_DWORD *)(v118 + 16 * v162 + 12);
      if (v163 == -1)
      {
        v288 = 0;
        if (v161 >= 0x64)
          break;
        goto LABEL_193;
      }
      v283 = (char *)&v119[5 * v295 + 4];
      if (*v283)
      {
        ++v281;
        v13 = 0.0;
        v14 = 0.0;
        a9 = 0.0;
        v164 = 0.0;
        v165 = 0.0;
        v166 = 0.0;
        if (v114 != __pa)
          goto LABEL_202;
      }
      else
      {
        v167 = &v119[5 * v295];
        v168 = v167[1];
        v90 = v167[2];
        v169 = 1.0 / sqrtf((float)((float)(*v167 * *v167) + (float)(v168 * v168)) + (float)(v90 * v90));
        v164 = v169 * *v167;
        v165 = v169 * v168;
        v166 = v169 * v90;
        v170 = 1.0 / v167[3];
        v13 = *v167 * v170;
        v14 = v168 * v170;
        a9 = v90 * v170;
        if (v288 && (float)((float)((float)(v164 * v289) + (float)(v165 * v290)) + (float)(v166 * v291)) >= v274)
        {
LABEL_202:
          v171 = *(v114 - 2) + v14;
          *(v114 - 3) = *(v114 - 3) + v13;
          *(v114 - 2) = v171;
          *(v114 - 1) = *(v114 - 1) + a9;
          goto LABEL_221;
        }
      }
      if (v114 >= (float *)v280)
      {
        v172 = 0xAAAAAAAAAAAAAAABLL * (v114 - __pa) + 1;
        if (v172 > 0x1555555555555555)
          abort();
        if (0x5555555555555556 * ((v280 - (char *)__pa) >> 2) > v172)
          v172 = 0x5555555555555556 * ((v280 - (char *)__pa) >> 2);
        v173 = 0xAAAAAAAAAAAAAAABLL * ((v280 - (char *)__pa) >> 2) >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v172;
        if (v173)
        {
          if (v173 > 0x1555555555555555)
            goto LABEL_429;
          v174 = (char *)operator new(12 * v173);
        }
        else
        {
          v174 = 0;
        }
        v175 = (float *)&v174[4 * (v114 - __pa)];
        *v175 = v13;
        v175[1] = v14;
        v175[2] = a9;
        v176 = v175;
        if (v114 == __pa)
        {
          v177 = __pa;
        }
        else
        {
          v177 = __pa;
          do
          {
            v178 = *(_QWORD *)(v114 - 3);
            v114 -= 3;
            v179 = *((_DWORD *)v114 + 2);
            *(_QWORD *)(v176 - 3) = v178;
            v176 -= 3;
            *((_DWORD *)v176 + 2) = v179;
          }
          while (v114 != __pa);
        }
        v280 = &v174[12 * v173];
        v114 = v175 + 3;
        if (v177)
          operator delete(v177);
        __pa = v176;
      }
      else
      {
        *v114 = v13;
        v114[1] = v14;
        v114[2] = a9;
        v114 += 3;
      }
LABEL_221:
      v180 = 3 * v163 + v279;
      for (j = *a4; ; j += 4)
      {
        if (j == a4[1])
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
          v186 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled(v186, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v312 = 67109120;
            *(_DWORD *)&v312[4] = 3 * v163 + v279;
            _os_log_impl(&dword_19F029000, v186, OS_LOG_TYPE_DEBUG, "Could not find vertex offset for index %d", v312, 8u);
          }

          LODWORD(v182) = 0;
          v187 = 0;
          goto LABEL_256;
        }
        if (*j <= v180 && j[1] > v180)
          break;
      }
      v182 = j[2];
      v183 = (int8x8_t)a6[1];
      if (v183)
      {
        v184 = (uint8x8_t)vcnt_s8(v183);
        v184.i16[0] = vaddlv_u8(v184);
        if (v184.u32[0] > 1uLL)
        {
          v185 = v182;
          if (*(_QWORD *)&v183 <= v182)
            v185 = v182 % *(_QWORD *)&v183;
        }
        else
        {
          v185 = (v183.i32[0] - 1) & v182;
        }
        v188 = *(uint64_t ***)(*a6 + 8 * v185);
        if (v188)
        {
          v189 = *v188;
          if (v189)
          {
            if (v184.u32[0] < 2uLL)
            {
              v190 = *(_QWORD *)&v183 - 1;
              while (1)
              {
                v192 = v189[1];
                if (v192 == v182)
                {
                  if (*((_DWORD *)v189 + 4) == (_DWORD)v182)
                    goto LABEL_289;
                }
                else if ((v192 & v190) != v185)
                {
                  goto LABEL_251;
                }
                v189 = (uint64_t *)*v189;
                if (!v189)
                  goto LABEL_251;
              }
            }
            do
            {
              v191 = v189[1];
              if (v191 == v182)
              {
                if (*((_DWORD *)v189 + 4) == (_DWORD)v182)
                {
LABEL_289:
                  v187 = *((_DWORD *)v189 + 5);
                  goto LABEL_256;
                }
              }
              else
              {
                if (v191 >= *(_QWORD *)&v183)
                  v191 %= *(_QWORD *)&v183;
                if (v191 != v185)
                  break;
              }
              v189 = (uint64_t *)*v189;
            }
            while (v189);
          }
        }
      }
LABEL_251:
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v193 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v193, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v312 = 67109376;
        *(_DWORD *)&v312[4] = v286;
        v313 = 1024;
        LODWORD(v314) = v182;
        _os_log_impl(&dword_19F029000, v193, OS_LOG_TYPE_DEBUG, "On vertex %d Vertex offset %d not processed yet", v312, 0xEu);
      }

      v187 = v182;
LABEL_256:
      v194 = *a8;
      v195 = a8[1];
      if (v180 > 0xFFFFFFFC)
      {
LABEL_260:
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v197 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v197, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v312 = 67109120;
          *(_DWORD *)&v312[4] = v163;
          _os_log_impl(&dword_19F029000, v197, OS_LOG_TYPE_ERROR, "cant find index for tri %d", v312, 8u);
        }

        v119 = v278;
        LODWORD(v180) = 0;
      }
      else
      {
        v196 = (v180 + 3);
        while (v275 - (_DWORD)v182 != a5->u16[v180])
        {
          if (++v180 >= v196)
            goto LABEL_260;
        }
        v119 = v278;
      }
      v198 = ~v187
           - 1431655765 * ((unint64_t)((char *)v114 - (char *)__pa) >> 2)
           - 1431655765 * ((unint64_t)(v195 - v194) >> 2);
      v199 = v285;
      if (HIWORD(v198))
        v199 = 1;
      v285 = v199;
      if (v180 >= a3)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v200 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v200, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v312 = 67109376;
          *(_DWORD *)&v312[4] = v180;
          v313 = 1024;
          LODWORD(v314) = a3;
          _os_log_impl(&dword_19F029000, v200, OS_LOG_TYPE_ERROR, "index is too large : %d (indexCount = %d)", v312, 0xEu);
        }

      }
      else
      {
        a10->__begin_[v180] = v198;
      }
      if (*v283)
        v201 = v291;
      else
        v201 = v166;
      v202 = v290;
      if (!*v283)
        v202 = v165;
      v290 = v202;
      v291 = v201;
      v203 = v289;
      if (!*v283)
        v203 = v164;
      v289 = v203;
      v204 = v288;
      if (!*v283)
        v204 = 1;
      v288 = v204;
      v205 = v277 == v295 ? 0 : v295 + 1;
      v295 = v205;
      if (v161 >= 0x64)
        break;
LABEL_193:
      ++v161;
      v118 = *(_QWORD *)v298;
      v162 = *(unsigned int *)(*(_QWORD *)v298 + 16 * (v162 ^ 1) + 4);
      if (v162 == v297)
        goto LABEL_295;
    }
    if (GEOGetGeoDisplayCoreDCELLog::onceToken != -1)
      dispatch_once(&GEOGetGeoDisplayCoreDCELLog::onceToken, &__block_literal_global_10_42066);
    v206 = (id)GEOGetGeoDisplayCoreDCELLog::log;
    if (os_log_type_enabled(v206, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v312 = 67109120;
      *(_DWORD *)&v312[4] = v297;
      _os_log_impl(&dword_19F029000, v206, OS_LOG_TYPE_ERROR, "iterating over too many half edges in walkCWEdgesIncidentToVertex incident to half edge %d", v312, 8u);
    }

LABEL_295:
    v104 = v119;
    v115 = (int8x8_t)v304[1];
    if (!v304[1])
      goto LABEL_315;
LABEL_296:
    v207 = (uint8x8_t)vcnt_s8(v115);
    v207.i16[0] = vaddlv_u8(v207);
    if (v207.u32[0] > 1uLL)
    {
      v208 = v286;
      if (*(_QWORD *)&v115 <= v286)
        v208 = v286 % *(_QWORD *)&v115;
    }
    else
    {
      v208 = (*(_QWORD *)&v115 + 0xFFFFFFFFLL) & v286;
    }
    v209 = (uint64_t **)*((_QWORD *)v304[0] + v208);
    if (!v209)
      goto LABEL_315;
    v210 = *v209;
    if (!*v209)
      goto LABEL_315;
    if (v207.u32[0] < 2uLL)
    {
      v211 = *(_QWORD *)&v115 - 1;
      while (1)
      {
        v213 = v210[1];
        if (v213 == v286)
        {
          if (v286 == *((_DWORD *)v210 + 4))
            goto LABEL_395;
        }
        else if ((v213 & v211) != v208)
        {
          goto LABEL_315;
        }
        v210 = (uint64_t *)*v210;
        if (!v210)
          goto LABEL_315;
      }
    }
    while (2)
    {
      v212 = v210[1];
      if (v212 != v286)
      {
        if (v212 >= *(_QWORD *)&v115)
          v212 %= *(_QWORD *)&v115;
        if (v212 != v208)
          goto LABEL_315;
        goto LABEL_305;
      }
      if (v286 != *((_DWORD *)v210 + 4))
      {
LABEL_305:
        v210 = (uint64_t *)*v210;
        if (!v210)
          goto LABEL_315;
        continue;
      }
      break;
    }
LABEL_395:
    v240 = v210;
    do
      v240 = (uint64_t *)*v240;
    while (v240 && v286 == *((_DWORD *)v240 + 4));
LABEL_341:
    if (v114 >= (float *)v280)
    {
      v242 = 0xAAAAAAAAAAAAAAABLL * (v114 - __pa) + 1;
      if (v242 > 0x1555555555555555)
        abort();
      if (0x5555555555555556 * ((v280 - (char *)__pa) >> 2) > v242)
        v242 = 0x5555555555555556 * ((v280 - (char *)__pa) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * ((v280 - (char *)__pa) >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v243 = 0x1555555555555555;
      else
        v243 = v242;
      if (!v243)
      {
        v244 = 0;
        goto LABEL_353;
      }
      if (v243 <= 0x1555555555555555)
      {
        v244 = (char *)operator new(12 * v243);
LABEL_353:
        v245 = &v244[4 * (v114 - __pa)];
        *((_DWORD *)v245 + 2) = 1065353216;
        *(_QWORD *)v245 = 0;
        v241 = v245;
        if (v114 != __pa)
        {
          v241 = &v244[4 * (v114 - __pa)];
          do
          {
            v246 = *(_QWORD *)(v114 - 3);
            v114 -= 3;
            v247 = *((_DWORD *)v114 + 2);
            *(_QWORD *)(v241 - 12) = v246;
            v241 -= 12;
            *((_DWORD *)v241 + 2) = v247;
          }
          while (v114 != __pa);
        }
        v280 = &v244[12 * v243];
        if (__pa)
          operator delete(__pa);
        v114 = (float *)v245;
        goto LABEL_359;
      }
LABEL_429:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    v114[2] = 1.0;
    *(_QWORD *)v114 = 0;
    v241 = (char *)__pa;
LABEL_359:
    v114 += 3;
    v214 = (float *)v241;
    for (k = 0xAAAAAAAAAAAAAAABLL * (((char *)v114 - v241) >> 2); v210 != v240; v210 = (uint64_t *)*v210)
    {
      while (1)
      {
        v248 = *((unsigned int *)v210 + 5);
        v249 = (int8x8_t)a6[1];
        if (v249)
        {
          v250 = (uint8x8_t)vcnt_s8(v249);
          v250.i16[0] = vaddlv_u8(v250);
          if (v250.u32[0] > 1uLL)
          {
            v251 = *((unsigned int *)v210 + 5);
            if (*(_QWORD *)&v249 <= v248)
              v251 = v248 % *(_QWORD *)&v249;
          }
          else
          {
            v251 = (v249.i32[0] - 1) & v248;
          }
          v252 = *(uint64_t ***)(*a6 + 8 * v251);
          if (v252)
          {
            v253 = *v252;
            if (v253)
            {
              if (v250.u32[0] < 2uLL)
              {
                v254 = *(_QWORD *)&v249 - 1;
                while (1)
                {
                  v256 = v253[1];
                  if (v256 == v248)
                  {
                    if (*((_DWORD *)v253 + 4) == v248)
                      goto LABEL_394;
                  }
                  else if ((v256 & v254) != v251)
                  {
                    goto LABEL_382;
                  }
                  v253 = (uint64_t *)*v253;
                  if (!v253)
                    goto LABEL_382;
                }
              }
              do
              {
                v255 = v253[1];
                if (v255 == v248)
                {
                  if (*((_DWORD *)v253 + 4) == v248)
                  {
LABEL_394:
                    LODWORD(v248) = *((_DWORD *)v253 + 5);
                    goto LABEL_387;
                  }
                }
                else
                {
                  if (v255 >= *(_QWORD *)&v249)
                    v255 %= *(_QWORD *)&v249;
                  if (v255 != v251)
                    break;
                }
                v253 = (uint64_t *)*v253;
              }
              while (v253);
            }
          }
        }
LABEL_382:
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v257 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v257, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v312 = 67109376;
          *(_DWORD *)&v312[4] = v286;
          v313 = 1024;
          LODWORD(v314) = v248;
          _os_log_impl(&dword_19F029000, v257, OS_LOG_TYPE_DEBUG, "On vertex %d Vertex offset %d not processed yet", v312, 0xEu);
        }

LABEL_387:
        v258 = *((unsigned int *)v210 + 6);
        if (v258 >= a3)
          break;
        a10->__begin_[v258] = k + ~(_DWORD)v248 - 1431655765 * ((unint64_t)(a8[1] - *a8) >> 2);
        v210 = (uint64_t *)*v210;
        if (v210 == v240)
          goto LABEL_317;
      }
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
      v259 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v259, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v312 = 67109376;
        *(_DWORD *)&v312[4] = v258;
        v313 = 1024;
        LODWORD(v314) = a3;
        _os_log_impl(&dword_19F029000, v259, OS_LOG_TYPE_ERROR, "(bad) index is too large : %d (indexCount = %d)", v312, 0xEu);
      }

    }
LABEL_317:
    v216 = a8;
    v217 = -1431655765 * ((a8[1] - *a8) >> 2);
    *v273++ = v217 | ((unint64_t)(v217 + k) << 32);
    __pa = v214;
    if (v114 != v214)
    {
      v218 = 0;
      v219 = 0;
      v220 = (float *)a8[1];
      do
      {
        v221 = &v214[3 * v218];
        v222 = v221[1];
        v90 = v221[2];
        v223 = 1.0 / sqrtf((float)((float)(*v221 * *v221) + (float)(v222 * v222)) + (float)(v90 * v90));
        v14 = v223 * *v221;
        v13 = v223 * v222;
        a9 = v223 * v90;
        v224 = v216[2];
        if ((unint64_t)v220 >= v224)
        {
          v225 = *v216;
          v226 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v220 - v225) >> 2);
          v227 = v226 + 1;
          if (v226 + 1 > 0x1555555555555555)
            abort();
          v228 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v224 - v225) >> 2);
          if (2 * v228 > v227)
            v227 = 2 * v228;
          if (v228 >= 0xAAAAAAAAAAAAAAALL)
            v229 = 0x1555555555555555;
          else
            v229 = v227;
          if (v229)
          {
            v230 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a8[3] + 16))(a8[3], 12 * v229, 4);
            v231 = v230 + 12 * v226;
            v232 = v230 + 12 * v229;
            if (v230)
            {
              *(float *)v231 = v14;
              *(float *)(v231 + 4) = v13;
              *(float *)(v231 + 8) = a9;
            }
          }
          else
          {
            v232 = 0;
            v231 = 12 * v226;
          }
          v234 = *a8;
          v233 = a8[1];
          v235 = (float *)v231;
          if (v233 == *a8)
          {
            v238 = (float **)a8;
          }
          else
          {
            do
            {
              v236 = *(_QWORD *)(v233 - 12);
              v233 -= 12;
              v237 = *(_DWORD *)(v233 + 8);
              *(_QWORD *)(v235 - 3) = v236;
              v235 -= 3;
              *((_DWORD *)v235 + 2) = v237;
            }
            while (v233 != v234);
            v238 = (float **)a8;
            v233 = *a8;
          }
          v220 = (float *)(v231 + 12);
          *v238 = v235;
          v238[1] = (float *)(v231 + 12);
          v239 = v238[2];
          v238[2] = (float *)v232;
          if (v233)
            (*(void (**)(float *, uint64_t, uint64_t))(*(_QWORD *)v238[3] + 40))(v238[3], v233, (uint64_t)v239 - v233);
        }
        else
        {
          if (v220)
          {
            *v220 = v14;
            v220[1] = v13;
            v220[2] = a9;
          }
          v220 += 3;
        }
        v216 = a8;
        a8[1] = (uint64_t)v220;
        v218 = ++v219;
      }
      while (k > v219);
    }
    v103 = v286 + 1;
    ++v275;
    if (v286 + 1 != v272)
      continue;
    break;
  }
  if (v281)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v260 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v260, OS_LOG_TYPE_DEBUG))
    {
      v261 = *(char *)(a12 + 23);
      v262 = *(_QWORD *)a12;
      *(_DWORD *)v312 = 67109634;
      *(_DWORD *)&v312[4] = v281 / 3;
      if (v261 >= 0)
        v263 = a12;
      else
        v263 = v262;
      v313 = 2048;
      v314 = (float)((float)((float)v281 * 100.0) / (float)a3);
      v315 = 2080;
      v316[0] = v263;
      _os_log_impl(&dword_19F029000, v260, OS_LOG_TYPE_DEBUG, "Ground Tile Data Error: %d (%3.2f%%) degenerate triangles in tile %s", v312, 0x1Cu);
    }

  }
  v264 = v285;
LABEL_410:
  LODWORD(a10[1].__begin_) = v264;
  if (a13)
  {
    v265 = (gdc::DCEL *)operator new();
    *(_QWORD *)v265 = &off_1E42E7560;
    *((_QWORD *)v265 + 1) = 0;
    *((_QWORD *)v265 + 2) = 0;
    *((_QWORD *)v265 + 3) = v298;
    v266 = (std::__shared_weak_count *)a13[1];
    *a13 = v298;
    a13[1] = v265;
    if (v266)
    {
      p_shared_owners = (unint64_t *)&v266->__shared_owners_;
      do
        v268 = __ldaxr(p_shared_owners);
      while (__stlxr(v268 - 1, p_shared_owners));
      if (!v268)
      {
        ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
        std::__shared_weak_count::__release_weak(v266);
      }
    }
    v298 = 0;
  }
  if (v104)
    operator delete(v104);
  if (__pa)
    operator delete(__pa);
  if (v298)
    std::default_delete<gdc::DCEL>::operator()[abi:nn180100]((uint64_t)v298);
  v269 = v305[0];
  if (v305[0])
  {
    do
    {
      v270 = (_QWORD *)*v269;
      operator delete(v269);
      v269 = v270;
    }
    while (v270);
  }
  v271 = v304[0];
  v304[0] = 0;
  if (v271)
    operator delete(v271);
}

void sub_19F02C944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  void *v56;

  if (v56)
    operator delete(v56);
  if (__p)
    operator delete(__p);
  std::default_delete<gdc::DCEL>::operator()[abi:nn180100](a42);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void gdc::DCEL::addFace(_QWORD *a1, unsigned int **a2)
{
  unsigned int *v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int **v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  char *v24;
  uint64_t v25;
  NSObject *v26;
  unsigned int *v27;
  int v28;
  NSObject *v29;
  unsigned int v30;
  NSObject *v31;
  uint64_t v32;
  NSObject *v33;
  _BOOL4 v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  int *v38;
  _DWORD *v39;
  int *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  int *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  int *v51;
  uint64_t v52;
  __int128 v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  unint64_t v58;
  NSObject *v59;
  int v60;
  unint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  char *v67;
  uint64_t v68;
  NSObject *v69;
  NSObject *v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  _DWORD *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int *v107;
  int v108;
  unsigned int *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  _DWORD *v119;
  uint64_t v120;
  unsigned int v121;
  char *v122;
  char *v123;
  _DWORD *v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  char *v128;
  uint64_t v129;
  char *v130;
  _DWORD *v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  _DWORD *v135;
  uint64_t v136;
  unsigned int v137;
  char *v138;
  _DWORD *v139;
  unsigned int v140;
  unsigned int v141;
  char *v142;
  _DWORD *v143;
  uint64_t v144;
  unsigned int v145;
  char *v146;
  unsigned int *v147;
  uint64_t v148;
  unsigned int v149;
  char *v150;
  _DWORD *v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  NSObject *v155;
  NSObject *v156;
  _BOOL4 v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int *v162;
  unsigned int *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  NSObject *v168;
  NSObject *v169;
  _BOOL4 v170;
  unsigned int v171;
  int v172;
  uint64_t v173;
  NSObject *v174;
  _BOOL4 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _DWORD *v179;
  uint64_t v180;
  unsigned int v181;
  char *v182;
  _DWORD *v183;
  uint64_t v184;
  unsigned int v185;
  char *v186;
  _DWORD *v187;
  uint64_t v188;
  unsigned int v189;
  char *v190;
  _DWORD *v191;
  uint64_t v192;
  unsigned int v193;
  char *v194;
  _DWORD *v195;
  uint64_t v196;
  unsigned int v197;
  char *v198;
  _DWORD *v199;
  uint64_t v200;
  unsigned int v201;
  unsigned int v202;
  _BYTE *v203;
  unsigned int *v204;
  uint64_t v205;
  _DWORD *v206;
  uint64_t v207;
  unsigned int v208;
  unsigned int v209;
  uint64_t v210;
  unint64_t v211;
  int __sz;
  unsigned int *__p;
  int v215;
  int v216;
  uint8_t buf[8];
  __int16 v218;
  unsigned int v219;
  __int16 v220;
  int v221;
  uint64_t v222;

  v222 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = (char *)a2[1] - (char *)*a2;
  if ((unint64_t)v3 < 0xC)
    return;
  if ((unint64_t)v3 >= 0x7FFFFFFFFFFFFFFDLL)
LABEL_246:
    abort();
  v5 = v3 >> 2;
  v6 = (a1[4] - a1[3]) >> 2;
  v211 = (char *)a2[1] - (char *)*a2;
  v7 = (unsigned int *)operator new(2 * v3);
  v8 = v7;
  v9 = v7;
  v10 = (v5 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v11 = a2;
  if (!v10)
    goto LABEL_8;
  v12 = (v10 + 1) & 0x3FFFFFFFFFFFFFFELL;
  v13 = (char *)(v7 + 2);
  v14 = v12;
  do
  {
    *((_DWORD *)v13 - 2) = 0;
    *(_DWORD *)v13 = 0;
    *(v13 - 4) = 0;
    v13[4] = 0;
    v13 += 16;
    v14 -= 2;
  }
  while (v14);
  if (v10 + 1 != v12)
  {
    v9 = &v7[2 * v12];
    do
    {
LABEL_8:
      *v9 = 0;
      *((_BYTE *)v9 + 4) = 0;
      v9 += 2;
    }
    while (v9 != &v7[2 * v5]);
  }
  __sz = v6;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  LODWORD(v18) = 0;
  __p = v7;
  do
  {
    v19 = v2[v15];
    v20 = a1[6];
    if (v19 >= (a1[7] - v20) >> 2)
    {
      if (GEOGetGeoDisplayCoreDCELLog::onceToken != -1)
        dispatch_once(&GEOGetGeoDisplayCoreDCELLog::onceToken, &__block_literal_global_10_42066);
      v28 = __sz;
      v29 = GEOGetGeoDisplayCoreDCELLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreDCELLog::log, OS_LOG_TYPE_INFO))
      {
        v30 = (*a2)[v15];
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = __sz;
        v218 = 1024;
        v219 = v30;
        _os_log_impl(&dword_19F029000, v29, OS_LOG_TYPE_INFO, "Face %d references non-existent vertex %d.  It will be ignored.", buf, 0xEu);
      }
      *(_QWORD *)buf = a1;
      v216 = 0;
LABEL_45:
      v215 = v28;
      goto LABEL_46;
    }
    v18 = (v18 + 1);
    v21 = v18 % v5;
    v22 = *(unsigned int *)(v20 + 4 * v19);
    if ((_DWORD)v22 == -1)
    {
LABEL_17:
      v25 = 0xFFFFFFFFLL;
    }
    else
    {
      v23 = 0;
      v24 = (char *)*a1;
      v25 = v22;
      while (*(_DWORD *)&v24[16 * (v25 ^ 1)] != v2[v21])
      {
        if (v23 >= 0x64)
        {
          if (GEOGetGeoDisplayCoreDCELLog::onceToken != -1)
            dispatch_once(&GEOGetGeoDisplayCoreDCELLog::onceToken, &__block_literal_global_10_42066);
          v26 = GEOGetGeoDisplayCoreDCELLog::log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreDCELLog::log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v22;
            _os_log_impl(&dword_19F029000, v26, OS_LOG_TYPE_ERROR, "iterating over too many half edges in walkCWEdgesIncidentToVertex incident to half edge %d", buf, 8u);
          }
          v25 = 0xFFFFFFFFLL;
          v11 = a2;
          v8 = __p;
          break;
        }
        ++v23;
        v25 = *(unsigned int *)&v24[16 * (v25 ^ 1) + 4];
        if (v25 == v22)
          goto LABEL_17;
      }
    }
    v27 = &v8[2 * v15];
    *v27 = v25;
    *((_BYTE *)v27 + 4) = v25 == 0xFFFFFFFFLL;
    v2 = *v11;
    if ((*v11)[v15] == (*v11)[v21])
    {
      if (GEOGetGeoDisplayCoreDCELLog::onceToken != -1)
        dispatch_once(&GEOGetGeoDisplayCoreDCELLog::onceToken, &__block_literal_global_10_42066);
      v31 = GEOGetGeoDisplayCoreDCELLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreDCELLog::log, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = __sz;
        _os_log_impl(&dword_19F029000, v31, OS_LOG_TYPE_INFO, "Face %d is degenerate.  It will be ignored.", buf, 8u);
      }
      *(_QWORD *)buf = a1;
      v215 = __sz;
      v216 = 1;
      goto LABEL_46;
    }
    if (v25 != 0xFFFFFFFFLL && *(_DWORD *)(*a1 + 16 * v25 + 12) != -1)
      ++v17;
    v16 |= v25 == 0xFFFFFFFFLL;
    v15 = v18;
  }
  while (v5 > v18);
  if (v17)
  {
    v32 = v11[1] - v2;
    if (GEOGetGeoDisplayCoreDCELLog::onceToken != -1)
      dispatch_once(&GEOGetGeoDisplayCoreDCELLog::onceToken, &__block_literal_global_10_42066);
    v33 = GEOGetGeoDisplayCoreDCELLog::log;
    v34 = os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreDCELLog::log, OS_LOG_TYPE_INFO);
    if (v32 != v17)
    {
      if (v34)
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = __sz;
        v218 = 1024;
        v219 = v17;
        _os_log_impl(&dword_19F029000, v33, OS_LOG_TYPE_INFO, "Face %d has %d complex edges.  It will be ignored.", buf, 0xEu);
      }
      *(_QWORD *)buf = a1;
      v215 = __sz;
      v216 = 2;
      goto LABEL_46;
    }
    v28 = __sz;
    if (v34)
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = __sz;
      _os_log_impl(&dword_19F029000, v33, OS_LOG_TYPE_INFO, "Face %d is duplicate.  It will be ignored.", buf, 8u);
    }
    *(_QWORD *)buf = a1;
    v216 = 4;
    goto LABEL_45;
  }
  v55 = __sz;
  if ((v16 & 1) == 0)
  {
    v56 = *(_DWORD *)(*a1 + 16 * (*v8 ^ 1) + 12);
    if (v56 != -1)
    {
      v57 = 2;
      v58 = 1;
      while (*(_DWORD *)(*a1 + 16 * (v8[2 * v58] ^ 1) + 12) == v56)
      {
        v58 = v57++;
        if (v5 <= v58)
        {
          if (GEOGetGeoDisplayCoreDCELLog::onceToken != -1)
            dispatch_once(&GEOGetGeoDisplayCoreDCELLog::onceToken, &__block_literal_global_10_42066);
          v59 = GEOGetGeoDisplayCoreDCELLog::log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreDCELLog::log, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = __sz;
            _os_log_impl(&dword_19F029000, v59, OS_LOG_TYPE_INFO, "Opposite Winding Face detected at face %d.  It will be ignored.", buf, 8u);
          }
          *(_QWORD *)buf = a1;
          v60 = 5;
          goto LABEL_103;
        }
      }
    }
  }
  v61 = 0;
  v62 = 0;
  do
  {
    v63 = LOBYTE(v8[2 * v61 + 1]);
    v61 = (v62 + 1);
    if (v63)
    {
      v64 = v2[v61 % v5];
      v65 = *(unsigned int *)(a1[6] + 4 * v64);
      if ((_DWORD)v65 != -1)
      {
        v66 = 0;
        v67 = (char *)*a1;
        v68 = *(unsigned int *)(a1[6] + 4 * v64);
        while (*(_DWORD *)&v67[16 * v68 + 12] != -1)
        {
          if (v66 >= 0x64)
          {
            if (GEOGetGeoDisplayCoreDCELLog::onceToken != -1)
              dispatch_once(&GEOGetGeoDisplayCoreDCELLog::onceToken, &__block_literal_global_10_42066);
            v69 = GEOGetGeoDisplayCoreDCELLog::log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreDCELLog::log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = v65;
              _os_log_impl(&dword_19F029000, v69, OS_LOG_TYPE_ERROR, "iterating over too many half edges in walkCWEdgesIncidentToVertex incident to half edge %d", buf, 8u);
              goto LABEL_98;
            }
LABEL_100:
            v70 = GEOGetGeoDisplayCoreDCELLog::log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreDCELLog::log, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)&buf[4] = __sz;
              v218 = 1024;
              v219 = v64;
              _os_log_impl(&dword_19F029000, v70, OS_LOG_TYPE_INFO, "Adding Face %d would yield complex vertex @ %d", buf, 0xEu);
            }
            *(_QWORD *)buf = a1;
            v60 = 3;
LABEL_103:
            v215 = __sz;
            v216 = v60;
LABEL_46:
            v35 = a1[12];
            if (v35)
            {
              (*(void (**)(uint64_t, uint8_t *, int *, int *))(*(_QWORD *)v35 + 48))(v35, buf, &v216, &v215);
              v36 = -1;
              v8 = __p;
              goto LABEL_48;
            }
            std::__throw_bad_function_call[abi:nn180100]();
            goto LABEL_248;
          }
          ++v66;
          v68 = *(unsigned int *)&v67[16 * (v68 ^ 1) + 4];
          if (v68 == v65)
            goto LABEL_98;
        }
        if (v68 == 0xFFFFFFFFLL)
        {
LABEL_98:
          if (GEOGetGeoDisplayCoreDCELLog::onceToken != -1)
            dispatch_once(&GEOGetGeoDisplayCoreDCELLog::onceToken, &__block_literal_global_10_42066);
          goto LABEL_100;
        }
      }
    }
    v62 = v61;
  }
  while (v5 > v61);
  v71 = 0;
  LODWORD(v72) = 0;
  do
  {
    v73 = &v8[2 * v71];
    if (!*((_BYTE *)v73 + 4))
    {
      v72 = (v72 + 1);
      goto LABEL_106;
    }
    v72 = (v72 + 1);
    v74 = (*v11)[v71];
    v209 = (*v11)[v72 % v5];
    v76 = (char *)*a1;
    v75 = (char *)a1[1];
    v210 = (uint64_t)&v75[-*a1];
    v77 = v210 >> 4;
    v78 = (v210 >> 4) + 2;
    v79 = (char *)a1[2];
    if (v78 <= (uint64_t)&v79[-*a1] >> 4)
    {
      v82 = (char *)a1[1];
      if (v75 < v79)
        goto LABEL_116;
    }
    else
    {
      if (v78 >> 60)
        goto LABEL_246;
      v80 = 16 * v78;
      v81 = (char *)operator new(16 * v78);
      v82 = &v81[16 * v77];
      v83 = v82;
      if (v75 != v76)
      {
        v84 = &v81[16 * v77];
        do
        {
          v83 = v84 - 16;
          *((_OWORD *)v84 - 1) = *((_OWORD *)v75 - 1);
          v75 -= 16;
          v84 -= 16;
        }
        while (v75 != v76);
      }
      v79 = &v81[v80];
      *a1 = v83;
      a1[1] = v82;
      a1[2] = &v81[v80];
      v11 = a2;
      v8 = __p;
      v55 = __sz;
      if (v76)
      {
        operator delete(v76);
        v11 = a2;
        v8 = __p;
        v82 = (char *)a1[1];
        v79 = (char *)a1[2];
      }
      if (v82 < v79)
      {
LABEL_116:
        *(_DWORD *)v82 = v74;
        *(_QWORD *)(v82 + 4) = -1;
        v85 = v82 + 16;
        *((_DWORD *)v82 + 3) = v55;
        goto LABEL_133;
      }
    }
    v86 = (char *)*a1;
    v87 = (uint64_t)&v82[-*a1] >> 4;
    v88 = v87 + 1;
    if ((unint64_t)(v87 + 1) >> 60)
      goto LABEL_246;
    v89 = v79 - v86;
    if (v89 >> 3 > v88)
      v88 = v89 >> 3;
    if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF0)
      v90 = 0xFFFFFFFFFFFFFFFLL;
    else
      v90 = v88;
    if (v90)
    {
      if (v90 >> 60)
        goto LABEL_248;
      v91 = (char *)operator new(16 * v90);
      v11 = a2;
      v8 = __p;
    }
    else
    {
      v91 = 0;
    }
    v92 = &v91[16 * v87];
    *(_DWORD *)v92 = v74;
    *(_QWORD *)(v92 + 4) = -1;
    *((_DWORD *)v92 + 3) = v55;
    v93 = v92;
    if (v82 != v86)
    {
      do
      {
        *((_OWORD *)v93 - 1) = *((_OWORD *)v82 - 1);
        v93 -= 16;
        v82 -= 16;
      }
      while (v82 != v86);
      v82 = (char *)*a1;
    }
    v79 = &v91[16 * v90];
    v85 = v92 + 16;
    *a1 = v93;
    a1[1] = v92 + 16;
    a1[2] = v79;
    if (v82)
    {
      operator delete(v82);
      v11 = a2;
      v8 = __p;
      v79 = (char *)a1[2];
    }
LABEL_133:
    a1[1] = v85;
    if (v85 >= v79)
    {
      v95 = (char *)*a1;
      v96 = (uint64_t)&v85[-*a1] >> 4;
      v97 = v96 + 1;
      if ((unint64_t)(v96 + 1) >> 60)
        goto LABEL_246;
      v98 = v79 - v95;
      if (v98 >> 3 > v97)
        v97 = v98 >> 3;
      if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF0)
        v99 = 0xFFFFFFFFFFFFFFFLL;
      else
        v99 = v97;
      if (v99)
      {
        if (v99 >> 60)
          goto LABEL_248;
        v100 = (char *)operator new(16 * v99);
        v11 = a2;
        v8 = __p;
      }
      else
      {
        v100 = 0;
      }
      v101 = &v100[16 * v96];
      *(_DWORD *)v101 = v209;
      v102 = &v100[16 * v99];
      *((_DWORD *)v101 + 3) = -1;
      *(_QWORD *)(v101 + 4) = -1;
      v94 = v101 + 16;
      if (v85 == v95)
      {
        *a1 = v101;
        a1[1] = v94;
        a1[2] = v102;
      }
      else
      {
        do
        {
          *((_OWORD *)v101 - 1) = *((_OWORD *)v85 - 1);
          v101 -= 16;
          v85 -= 16;
        }
        while (v85 != v95);
        v85 = (char *)*a1;
        *a1 = v101;
        a1[1] = v94;
        a1[2] = v102;
        if (!v85)
          goto LABEL_151;
      }
      operator delete(v85);
      v11 = a2;
      v8 = __p;
    }
    else
    {
      *(_DWORD *)v85 = v209;
      *((_DWORD *)v85 + 3) = -1;
      v94 = v85 + 16;
      *(_QWORD *)(v85 + 4) = -1;
    }
LABEL_151:
    a1[1] = v94;
    *v73 = (unint64_t)v210 >> 4;
LABEL_106:
    v71 = v72;
  }
  while (v5 > v72);
  v103 = 0;
  if (v5 <= 1)
    v104 = 1;
  else
    v104 = v5;
  do
  {
    v105 = v103++;
    if (v103 == v5)
      v106 = 0;
    else
      v106 = v105 + 1;
    v107 = &v8[2 * v105];
    v108 = *((unsigned __int8 *)v107 + 4);
    v109 = &v8[2 * v106];
    v110 = *((unsigned __int8 *)v109 + 4);
    if (!(v110 | v108))
      continue;
    v111 = *v107;
    v112 = *v109;
    v113 = v111 ^ 1;
    v114 = v112 ^ 1;
    if (v108 != v110)
    {
      v117 = (char *)*a1;
      if (v108)
      {
        v114 = *(unsigned int *)&v117[16 * v112 + 8];
        v123 = &v117[16 * v114];
        v126 = *((_DWORD *)v123 + 1);
        v124 = v123 + 4;
        v125 = v126;
        if (v126 != -1)
          *(_DWORD *)&v117[16 * v125 + 8] = -1;
        *v124 = v113;
        v122 = &v117[16 * v113];
      }
      else
      {
        v130 = &v117[16 * v114];
        v133 = *((_DWORD *)v130 + 1);
        v131 = v130 + 4;
        v132 = v133;
        if (v133 != -1)
          *(_DWORD *)&v117[16 * v132 + 8] = -1;
        v134 = *(unsigned int *)&v117[16 * v111 + 4];
        *v131 = v134;
        v122 = &v117[16 * v134];
      }
      goto LABEL_178;
    }
    v115 = (*v11)[v106];
    v116 = *(unsigned int *)(a1[6] + 4 * v115);
    if ((_DWORD)v116 == -1)
    {
      v117 = (char *)*a1;
      v118 = *a1 + 16 * v114;
      v121 = *(_DWORD *)(v118 + 4);
      v119 = (_DWORD *)(v118 + 4);
      v120 = v121;
      if (v121 != -1)
        *(_DWORD *)&v117[16 * v120 + 8] = -1;
      *v119 = v113;
      v122 = &v117[16 * v113];
LABEL_178:
      v137 = *((_DWORD *)v122 + 2);
      v135 = v122 + 8;
      v136 = v137;
      if (v137 != -1)
        *(_DWORD *)&v117[16 * v136 + 4] = -1;
      *v135 = v114;
      continue;
    }
    v127 = 0;
    v128 = (char *)*a1;
    v129 = *(unsigned int *)(a1[6] + 4 * v115);
    while (*(_DWORD *)&v128[16 * v129 + 12] != -1)
    {
      if (v127 >= 0x64)
      {
        if (GEOGetGeoDisplayCoreDCELLog::onceToken != -1)
          dispatch_once(&GEOGetGeoDisplayCoreDCELLog::onceToken, &__block_literal_global_10_42066);
        v155 = GEOGetGeoDisplayCoreDCELLog::log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreDCELLog::log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v116;
          _os_log_impl(&dword_19F029000, v155, OS_LOG_TYPE_ERROR, "iterating over too many half edges in walkCWEdgesIncidentToVertex incident to half edge %d", buf, 8u);
          goto LABEL_194;
        }
LABEL_196:
        v156 = GEOGetGeoDisplayCoreDCELLog::log;
        v157 = os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreDCELLog::log, OS_LOG_TYPE_INFO);
        v11 = a2;
        v8 = __p;
        if (v157)
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v115;
          _os_log_impl(&dword_19F029000, v156, OS_LOG_TYPE_INFO, "Could not find boundary at vertex %d", buf, 8u);
          v11 = a2;
          v8 = __p;
        }
        goto LABEL_156;
      }
      ++v127;
      v129 = *(unsigned int *)&v128[16 * (v129 ^ 1) + 4];
      if (v129 == v116)
        goto LABEL_194;
    }
    if (v129 == 0xFFFFFFFFLL)
    {
LABEL_194:
      if (GEOGetGeoDisplayCoreDCELLog::onceToken != -1)
        dispatch_once(&GEOGetGeoDisplayCoreDCELLog::onceToken, &__block_literal_global_10_42066);
      goto LABEL_196;
    }
    v138 = &v128[16 * v129];
    v141 = *((_DWORD *)v138 + 2);
    v139 = v138 + 8;
    v140 = v141;
    v142 = &v128[16 * v141];
    v145 = *((_DWORD *)v142 + 1);
    v143 = v142 + 4;
    v144 = v145;
    if (v145 != -1)
      *(_DWORD *)&v128[16 * v144 + 8] = -1;
    *v143 = v113;
    v146 = &v128[16 * v113];
    v149 = *((_DWORD *)v146 + 2);
    v147 = (unsigned int *)(v146 + 8);
    v148 = v149;
    if (v149 != -1)
      *(_DWORD *)&v128[16 * v148 + 4] = -1;
    *v147 = v140;
    v150 = &v128[16 * v114];
    v153 = *((_DWORD *)v150 + 1);
    v151 = v150 + 4;
    v152 = v153;
    if (v153 != -1)
      *(_DWORD *)&v128[16 * v152 + 8] = -1;
    *v151 = v129;
    v154 = *v139;
    if ((_DWORD)v154 != -1)
      *(_DWORD *)&v128[16 * v154 + 4] = -1;
    *v139 = v114;
LABEL_156:
    ;
  }
  while (v103 != v104);
  v158 = 0;
  v159 = (char *)*a1;
  do
  {
    v160 = v158 + 1;
    if (v158 + 1 == v5)
      v161 = 0;
    else
      v161 = v158 + 1;
    v162 = &v8[2 * v158];
    v163 = &v8[2 * v161];
    v164 = *v162;
    v165 = *v163;
    if (!(*((unsigned __int8 *)v163 + 4) | *((unsigned __int8 *)v162 + 4)) && *(_DWORD *)&v159[16 * v164 + 4] != v165)
    {
      v166 = 101;
      v167 = v165 ^ 1;
      while (--v166)
      {
        v167 = *(unsigned int *)&v159[16 * v167 + 4] ^ 1;
        if (*(_DWORD *)&v159[16 * v167 + 12] == -1)
          goto LABEL_214;
      }
      if (GEOGetGeoDisplayCoreDCELLog::onceToken != -1)
        dispatch_once(&GEOGetGeoDisplayCoreDCELLog::onceToken, &__block_literal_global_10_42066);
      v168 = GEOGetGeoDisplayCoreDCELLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreDCELLog::log, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v165 ^ 1;
        _os_log_impl(&dword_19F029000, v168, OS_LOG_TYPE_INFO, "iterating for next gap too much for halfedge %d!", buf, 8u);
      }
      v167 = v165 ^ 1;
      v11 = a2;
      v8 = __p;
LABEL_214:
      if (v167 == v164)
      {
        if (GEOGetGeoDisplayCoreDCELLog::onceToken != -1)
          dispatch_once(&GEOGetGeoDisplayCoreDCELLog::onceToken, &__block_literal_global_10_42066);
        v169 = GEOGetGeoDisplayCoreDCELLog::log;
        v170 = os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreDCELLog::log, OS_LOG_TYPE_INFO);
        v11 = a2;
        v8 = __p;
        if (v170)
        {
          v171 = (*a2)[v158];
          v172 = *(_DWORD *)(*a1 + 16 * v164 + 4);
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)&buf[4] = v171;
          v218 = 1024;
          v219 = v165;
          v220 = 1024;
          v221 = v172;
          _os_log_impl(&dword_19F029000, v169, OS_LOG_TYPE_INFO, "no other gap found at vertex %d, yet mismatched next/prev halfedge link (nextinner = %d, next(curInner) = %d)", buf, 0x14u);
          v11 = a2;
          v8 = __p;
        }
      }
      v173 = *(unsigned int *)(*a1 + 16 * v167 + 4);
      if (*(_DWORD *)(*a1 + 16 * v173 + 12) != -1)
      {
        if (GEOGetGeoDisplayCoreDCELLog::onceToken != -1)
          dispatch_once(&GEOGetGeoDisplayCoreDCELLog::onceToken, &__block_literal_global_10_42066);
        v174 = GEOGetGeoDisplayCoreDCELLog::log;
        v175 = os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreDCELLog::log, OS_LOG_TYPE_INFO);
        v11 = a2;
        v8 = __p;
        if (v175)
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v167;
          _os_log_impl(&dword_19F029000, v174, OS_LOG_TYPE_INFO, "next halfedge to %d should also be boundary", buf, 8u);
          v11 = a2;
          v8 = __p;
        }
      }
      v159 = (char *)*a1;
      v176 = *(unsigned int *)(*a1 + 16 * v164 + 4);
      v177 = *(unsigned int *)(*a1 + 16 * v165 + 8);
      v178 = *a1 + 16 * v167;
      v181 = *(_DWORD *)(v178 + 4);
      v179 = (_DWORD *)(v178 + 4);
      v180 = v181;
      if (v181 != -1)
        *(_DWORD *)&v159[16 * v180 + 8] = -1;
      *v179 = v176;
      v182 = &v159[16 * v176];
      v185 = *((_DWORD *)v182 + 2);
      v183 = v182 + 8;
      v184 = v185;
      if (v185 != -1)
        *(_DWORD *)&v159[16 * v184 + 4] = -1;
      *v183 = v167;
      v186 = &v159[16 * v177];
      v189 = *((_DWORD *)v186 + 1);
      v187 = v186 + 4;
      v188 = v189;
      if (v189 != -1)
        *(_DWORD *)&v159[16 * v188 + 8] = -1;
      *v187 = v173;
      v190 = &v159[16 * v173];
      v193 = *((_DWORD *)v190 + 2);
      v191 = v190 + 8;
      v192 = v193;
      if (v193 != -1)
        *(_DWORD *)&v159[16 * v192 + 4] = -1;
      *v191 = v177;
    }
    v194 = &v159[16 * v164];
    v197 = *((_DWORD *)v194 + 1);
    v195 = v194 + 4;
    v196 = v197;
    if (v197 != -1)
      *(_DWORD *)&v159[16 * v196 + 8] = -1;
    *v195 = v165;
    v198 = &v159[16 * v165];
    v201 = *((_DWORD *)v198 + 2);
    v199 = v198 + 8;
    v200 = v201;
    if (v201 != -1)
      *(_DWORD *)&v159[16 * v200 + 4] = -1;
    *v199 = v164;
    v158 = v160;
  }
  while (v160 != v104);
  v202 = 0;
  v203 = v8 + 1;
  do
  {
    if (!*v203)
      *(_DWORD *)&v159[16 * *((unsigned int *)v203 - 1) + 12] = __sz;
    ++v202;
    v203 += 8;
  }
  while (v202 < (v211 >> 2));
  v204 = *v11;
  v205 = a1[6];
  v206 = v8;
  do
  {
    v208 = *v204++;
    v207 = v208;
    if (*(_DWORD *)(v205 + 4 * v208) == -1)
      *(_DWORD *)(v205 + 4 * v207) = *v206;
    v206 += 2;
    --v104;
  }
  while (v104);
  v36 = *v8;
LABEL_48:
  v38 = (int *)a1[4];
  v37 = a1[5];
  if ((unint64_t)v38 < v37)
  {
    *v38 = v36;
    v39 = v38 + 1;
    goto LABEL_69;
  }
  v40 = (int *)a1[3];
  v41 = v38 - v40;
  v42 = v41 + 1;
  if ((unint64_t)(v41 + 1) >> 62)
    goto LABEL_246;
  v43 = v37 - (_QWORD)v40;
  if (v43 >> 1 > v42)
    v42 = v43 >> 1;
  if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
    v44 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v44 = v42;
  if (v44)
  {
    if (!(v44 >> 62))
    {
      v45 = operator new(4 * v44);
      v8 = __p;
      goto LABEL_60;
    }
LABEL_248:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v45 = 0;
LABEL_60:
  v46 = (int *)&v45[4 * v41];
  v47 = &v45[4 * v44];
  *v46 = v36;
  v39 = v46 + 1;
  if (v38 != v40)
  {
    v48 = (char *)v38 - (char *)v40 - 4;
    if (v48 < 0x2C)
      goto LABEL_251;
    if ((unint64_t)((char *)v40 - v45) < 0x20)
      goto LABEL_251;
    v49 = (v48 >> 2) + 1;
    v50 = &v45[4 * v41 - 16];
    v51 = v38 - 4;
    v52 = v49 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v53 = *(_OWORD *)v51;
      *(v50 - 1) = *((_OWORD *)v51 - 1);
      *v50 = v53;
      v50 -= 2;
      v51 -= 8;
      v52 -= 8;
    }
    while (v52);
    v46 -= v49 & 0x7FFFFFFFFFFFFFF8;
    v38 -= v49 & 0x7FFFFFFFFFFFFFF8;
    if (v49 != (v49 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_251:
      do
      {
        v54 = *--v38;
        *--v46 = v54;
      }
      while (v38 != v40);
    }
  }
  a1[3] = v46;
  a1[4] = v39;
  a1[5] = v47;
  if (v40)
  {
    operator delete(v40);
    v8 = __p;
  }
LABEL_69:
  a1[4] = v39;
  operator delete(v8);
}

gss::Allocator *gss::CartoStyle<gss::PropertyID>::initConditionalStyleList(gss::Allocator *result, uint64_t a2)
{
  gss::Allocator *v3;
  int v4;
  unsigned int *v5;
  unsigned int *v6;
  _QWORD *v7;
  gss::Allocator *inited;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  gss::Allocator *v12;
  gss::Allocator **v13;
  gss::Allocator **v14;
  unsigned int v15;
  gss::Allocator *v16;
  gss::Allocator *v17;
  uint64_t v18;
  gss::Allocator *v19;
  uint64_t v20;
  _BYTE *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  gss::Allocator *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int *v32;
  uint64_t v33;
  __int128 *v34;
  __int128 *v35;
  unsigned int v36;
  gss::Allocator *v37;
  gss::Allocator **v38;
  gss::Allocator **v39;
  unsigned int v40;
  gss::Allocator *v41;
  uint64_t v42;
  gss::Allocator *v43;
  uint64_t v44;
  _BYTE *v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  gss::Allocator *v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  __int128 v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  BOOL v63;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unsigned __int16 v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  int v77;
  gss::Allocator *v78;
  gss::Allocator *v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  gss::Allocator *v85;
  unsigned int *v86;
  uint64_t v87;
  gss::Allocator *v88[2];
  gss::Allocator **v89;
  gss::Allocator *v90;
  uint64_t v91;
  uint64_t v92;

  if (!*((_BYTE *)result + 120))
  {
    v3 = result;
    v90 = 0;
    v91 = gss::Allocator::instance(result);
    v92 = 0;
    v89 = &v90;
    if (*((_WORD *)v3 + 16))
    {
      v4 = 0;
      v85 = v3;
      v5 = (unsigned int *)*((_QWORD *)v3 + 3);
      v6 = &v5[*((unsigned __int16 *)v3 + 16)];
      v87 = a2;
      do
      {
        v7 = (_QWORD *)(*(_QWORD *)(a2 + 64) + 16 * *v5);
        inited = (gss::Allocator *)gss::CartoStyle<gss::PropertyID>::initConditionalStyleList(*v7, a2);
        if (*(_WORD *)(*v7 + 64))
        {
          v9 = *(_QWORD *)(*v7 + 56);
          v10 = v9 + 16 * *(unsigned __int16 *)(*v7 + 64);
          do
          {
            v11 = *(_DWORD *)(*(_QWORD *)v9 + 152);
            v12 = v90;
            v13 = &v90;
            v14 = &v90;
            if (v90)
            {
              while (1)
              {
                while (1)
                {
                  v14 = (gss::Allocator **)v12;
                  v15 = *((_DWORD *)v12 + 7);
                  if (v11 >= v15)
                    break;
                  v12 = *v14;
                  v13 = v14;
                  if (!*v14)
                    goto LABEL_18;
                }
                if (v15 >= v11)
                  break;
                v12 = v14[1];
                if (!v12)
                {
                  v13 = v14 + 1;
                  goto LABEL_18;
                }
              }
              inited = (gss::Allocator *)v14;
            }
            else
            {
LABEL_18:
              inited = (gss::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v91 + 16))(v91, 40, 8);
              *((_DWORD *)inited + 7) = v11;
              *((_DWORD *)inited + 8) = 0;
              *(_QWORD *)inited = 0;
              *((_QWORD *)inited + 1) = 0;
              *((_QWORD *)inited + 2) = v14;
              *v13 = inited;
              v16 = inited;
              if (*v89)
              {
                v89 = (gss::Allocator **)*v89;
                v16 = *v13;
              }
              v17 = v90;
              v55 = v16 == v90;
              *((_BYTE *)v16 + 24) = v16 == v90;
              if (!v55)
              {
                do
                {
                  v18 = *((_QWORD *)v16 + 2);
                  if (*(_BYTE *)(v18 + 24))
                    break;
                  v19 = *(gss::Allocator **)(v18 + 16);
                  v20 = *(_QWORD *)v19;
                  if (*(_QWORD *)v19 == v18)
                  {
                    v23 = *((_QWORD *)v19 + 1);
                    if (!v23 || (v24 = *(unsigned __int8 *)(v23 + 24), v21 = (_BYTE *)(v23 + 24), v24))
                    {
                      if (*(gss::Allocator **)v18 == v16)
                      {
                        v25 = (uint64_t *)*((_QWORD *)v16 + 2);
                      }
                      else
                      {
                        v25 = *(uint64_t **)(v18 + 8);
                        v26 = *v25;
                        *(_QWORD *)(v18 + 8) = *v25;
                        if (v26)
                        {
                          *(_QWORD *)(v26 + 16) = v18;
                          v19 = *(gss::Allocator **)(v18 + 16);
                        }
                        v25[2] = (uint64_t)v19;
                        *(_QWORD *)(*(_QWORD *)(v18 + 16) + 8 * (**(_QWORD **)(v18 + 16) != v18)) = v25;
                        *v25 = v18;
                        *(_QWORD *)(v18 + 16) = v25;
                        v19 = (gss::Allocator *)v25[2];
                        v18 = *(_QWORD *)v19;
                      }
                      *((_BYTE *)v25 + 24) = 1;
                      *((_BYTE *)v19 + 24) = 0;
                      v29 = *(_QWORD *)(v18 + 8);
                      *(_QWORD *)v19 = v29;
                      if (v29)
                        *(_QWORD *)(v29 + 16) = v19;
                      *(_QWORD *)(v18 + 16) = *((_QWORD *)v19 + 2);
                      *(_QWORD *)(*((_QWORD *)v19 + 2) + 8 * (**((_QWORD **)v19 + 2) != (_QWORD)v19)) = v18;
                      *(_QWORD *)(v18 + 8) = v19;
                      goto LABEL_8;
                    }
                  }
                  else if (!v20 || (v22 = *(unsigned __int8 *)(v20 + 24), v21 = (_BYTE *)(v20 + 24), v22))
                  {
                    if (*(gss::Allocator **)v18 == v16)
                    {
                      v27 = *((_QWORD *)v16 + 1);
                      *(_QWORD *)v18 = v27;
                      if (v27)
                      {
                        *(_QWORD *)(v27 + 16) = v18;
                        v19 = *(gss::Allocator **)(v18 + 16);
                      }
                      *((_QWORD *)v16 + 2) = v19;
                      *(_QWORD *)(*(_QWORD *)(v18 + 16) + 8 * (**(_QWORD **)(v18 + 16) != v18)) = v16;
                      *((_QWORD *)v16 + 1) = v18;
                      *(_QWORD *)(v18 + 16) = v16;
                      v19 = (gss::Allocator *)*((_QWORD *)v16 + 2);
                    }
                    else
                    {
                      v16 = (gss::Allocator *)*((_QWORD *)v16 + 2);
                    }
                    *((_BYTE *)v16 + 24) = 1;
                    *((_BYTE *)v19 + 24) = 0;
                    v18 = *((_QWORD *)v19 + 1);
                    v28 = *(gss::Allocator **)v18;
                    *((_QWORD *)v19 + 1) = *(_QWORD *)v18;
                    if (v28)
                      *((_QWORD *)v28 + 2) = v19;
                    *(_QWORD *)(v18 + 16) = *((_QWORD *)v19 + 2);
                    *(_QWORD *)(*((_QWORD *)v19 + 2) + 8 * (**((_QWORD **)v19 + 2) != (_QWORD)v19)) = v18;
                    *(_QWORD *)v18 = v19;
LABEL_8:
                    *((_QWORD *)v19 + 2) = v18;
                    break;
                  }
                  *(_BYTE *)(v18 + 24) = 1;
                  v16 = v19;
                  *((_BYTE *)v19 + 24) = v19 == v17;
                  *v21 = 1;
                }
                while (v19 != v17);
              }
              ++v92;
            }
            *((_DWORD *)inited + 8) = v4++;
            v9 += 16;
          }
          while (v9 != v10);
        }
        ++v5;
        a2 = v87;
      }
      while (v5 != v6);
      if (v92 && v87)
      {
        v30 = v92 + *((unsigned __int16 *)v85 + 32);
        memset(v88, 0, 13);
        if ((unint64_t)(v30 - 1) <= 0xFFFE)
          inited = geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::reallocate(v88, v30);
        if (*((_WORD *)v85 + 16))
        {
          v31 = 0;
          v32 = (unsigned int *)*((_QWORD *)v85 + 3);
          v86 = &v32[*((unsigned __int16 *)v85 + 16)];
          while (1)
          {
            v33 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + 16 * *v32);
            if (*(_WORD *)(v33 + 64))
              break;
LABEL_53:
            ++v32;
            a2 = v87;
            if (v32 == v86)
              goto LABEL_111;
          }
          v34 = *(__int128 **)(v33 + 56);
          v35 = &v34[*(unsigned __int16 *)(v33 + 64)];
          while (1)
          {
            v36 = *(_DWORD *)(*(_QWORD *)v34 + 152);
            v37 = v90;
            v38 = &v90;
            v39 = &v90;
            if (v90)
            {
              while (1)
              {
                while (1)
                {
                  v39 = (gss::Allocator **)v37;
                  v40 = *((_DWORD *)v37 + 7);
                  if (v36 >= v40)
                    break;
                  v37 = *v39;
                  v38 = v39;
                  if (!*v39)
                    goto LABEL_65;
                }
                if (v40 >= v36)
                  break;
                v37 = v39[1];
                if (!v37)
                {
                  v38 = v39 + 1;
                  goto LABEL_65;
                }
              }
              if (*((_DWORD *)v39 + 8) != v31)
                goto LABEL_57;
            }
            else
            {
LABEL_65:
              inited = (gss::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v91 + 16))(v91, 40, 8);
              *((_DWORD *)inited + 7) = v36;
              *((_DWORD *)inited + 8) = 0;
              *(_QWORD *)inited = 0;
              *((_QWORD *)inited + 1) = 0;
              *((_QWORD *)inited + 2) = v39;
              *v38 = inited;
              if (*v89)
              {
                v89 = (gss::Allocator **)*v89;
                inited = *v38;
              }
              v41 = v90;
              v55 = inited == v90;
              *((_BYTE *)inited + 24) = inited == v90;
              if (!v55)
              {
                do
                {
                  v42 = *((_QWORD *)inited + 2);
                  if (*(_BYTE *)(v42 + 24))
                    break;
                  v43 = *(gss::Allocator **)(v42 + 16);
                  v44 = *(_QWORD *)v43;
                  if (*(_QWORD *)v43 == v42)
                  {
                    v47 = *((_QWORD *)v43 + 1);
                    if (!v47 || (v48 = *(unsigned __int8 *)(v47 + 24), v45 = (_BYTE *)(v47 + 24), v48))
                    {
                      if (*(gss::Allocator **)v42 == inited)
                      {
                        v49 = (uint64_t *)*((_QWORD *)inited + 2);
                      }
                      else
                      {
                        v49 = *(uint64_t **)(v42 + 8);
                        v50 = *v49;
                        *(_QWORD *)(v42 + 8) = *v49;
                        if (v50)
                        {
                          *(_QWORD *)(v50 + 16) = v42;
                          v43 = *(gss::Allocator **)(v42 + 16);
                        }
                        v49[2] = (uint64_t)v43;
                        *(_QWORD *)(*(_QWORD *)(v42 + 16) + 8 * (**(_QWORD **)(v42 + 16) != v42)) = v49;
                        *v49 = v42;
                        *(_QWORD *)(v42 + 16) = v49;
                        v43 = (gss::Allocator *)v49[2];
                        v42 = *(_QWORD *)v43;
                      }
                      *((_BYTE *)v49 + 24) = 1;
                      *((_BYTE *)v43 + 24) = 0;
                      v53 = *(_QWORD *)(v42 + 8);
                      *(_QWORD *)v43 = v53;
                      if (v53)
                        *(_QWORD *)(v53 + 16) = v43;
                      *(_QWORD *)(v42 + 16) = *((_QWORD *)v43 + 2);
                      *(_QWORD *)(*((_QWORD *)v43 + 2) + 8 * (**((_QWORD **)v43 + 2) != (_QWORD)v43)) = v42;
                      *(_QWORD *)(v42 + 8) = v43;
                      goto LABEL_96;
                    }
                  }
                  else if (!v44 || (v46 = *(unsigned __int8 *)(v44 + 24), v45 = (_BYTE *)(v44 + 24), v46))
                  {
                    if (*(gss::Allocator **)v42 == inited)
                    {
                      v51 = *((_QWORD *)inited + 1);
                      *(_QWORD *)v42 = v51;
                      if (v51)
                      {
                        *(_QWORD *)(v51 + 16) = v42;
                        v43 = *(gss::Allocator **)(v42 + 16);
                      }
                      *((_QWORD *)inited + 2) = v43;
                      *(_QWORD *)(*(_QWORD *)(v42 + 16) + 8 * (**(_QWORD **)(v42 + 16) != v42)) = inited;
                      *((_QWORD *)inited + 1) = v42;
                      *(_QWORD *)(v42 + 16) = inited;
                      v43 = (gss::Allocator *)*((_QWORD *)inited + 2);
                    }
                    else
                    {
                      inited = (gss::Allocator *)*((_QWORD *)inited + 2);
                    }
                    *((_BYTE *)inited + 24) = 1;
                    *((_BYTE *)v43 + 24) = 0;
                    v42 = *((_QWORD *)v43 + 1);
                    v52 = *(gss::Allocator **)v42;
                    *((_QWORD *)v43 + 1) = *(_QWORD *)v42;
                    if (v52)
                      *((_QWORD *)v52 + 2) = v43;
                    *(_QWORD *)(v42 + 16) = *((_QWORD *)v43 + 2);
                    *(_QWORD *)(*((_QWORD *)v43 + 2) + 8 * (**((_QWORD **)v43 + 2) != (_QWORD)v43)) = v42;
                    *(_QWORD *)v42 = v43;
LABEL_96:
                    *((_QWORD *)v43 + 2) = v42;
                    break;
                  }
                  *(_BYTE *)(v42 + 24) = 1;
                  inited = v43;
                  *((_BYTE *)v43 + 24) = v43 == v41;
                  *v45 = 1;
                }
                while (v43 != v41);
              }
              ++v92;
              if (v31)
                goto LABEL_57;
            }
            v54 = LOWORD(v88[1]);
            v55 = LOWORD(v88[1]) != 0xFFFFLL && BYTE4(v88[1]) == 0;
            if (v55 && LOWORD(v88[1]) >= WORD1(v88[1]))
            {
              inited = geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::reallocate(v88, LOWORD(v88[1]) + 1);
              v54 = LOWORD(v88[1]);
            }
            v57 = *v34;
            *((_OWORD *)v88[0] + v54) = *v34;
            if (*((_QWORD *)&v57 + 1))
            {
              v58 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
              do
                v59 = __ldxr(v58);
              while (__stxr(v59 + 1, v58));
              LOWORD(v54) = v88[1];
            }
            LOWORD(v88[1]) = v54 + 1;
LABEL_57:
            ++v31;
            if (++v34 == v35)
              goto LABEL_53;
          }
        }
LABEL_111:
        v60 = (_QWORD *)*((_QWORD *)v85 + 7);
        v61 = *((unsigned __int16 *)v85 + 32);
        v62 = LOWORD(v88[1]);
        if (WORD1(v88[1]) - (unint64_t)LOWORD(v88[1]) < v61)
        {
          v63 = LOWORD(v88[1]) + v61 > WORD1(v88[1]) && (LOWORD(v88[1]) + v61) >> 16 == 0;
          if (v63 && BYTE4(v88[1]) == 0)
          {
            inited = geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::reallocate(v88, LOWORD(v88[1]) + v61);
            v62 = LOWORD(v88[1]);
          }
        }
        if ((_DWORD)v61)
        {
          v65 = &v60[2 * v61];
          v66 = (_QWORD *)((char *)v88[0] + 16 * v62);
          do
          {
            *v66 = *v60;
            v67 = v60[1];
            v66[1] = v67;
            if (v67)
            {
              v68 = (unint64_t *)(v67 + 8);
              do
                v69 = __ldxr(v68);
              while (__stxr(v69 + 1, v68));
            }
            v60 += 2;
            v66 += 2;
          }
          while (v60 != v65);
          LOWORD(v62) = v88[1];
        }
        v70 = v62 + v61;
        LOWORD(v88[1]) = v70;
        if (!BYTE4(v88[1]) && WORD1(v88[1]) != v70)
          inited = geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::reallocate(v88, v70);
        v71 = (uint64_t *)((char *)v85 + 56);
        if ((gss::Allocator **)((char *)v85 + 56) == v88)
        {
          v77 = BYTE4(v88[1]);
          *((_BYTE *)v85 + 120) = 1;
          if (!v77)
          {
            v78 = v88[0];
            if (v88[0])
            {
              if (LOWORD(v88[1]))
              {
                v79 = (gss::Allocator *)((char *)v88[0] + 16 * LOWORD(v88[1]));
                do
                {
                  v80 = (std::__shared_weak_count *)*((_QWORD *)v78 + 1);
                  if (v80)
                  {
                    p_shared_owners = (unint64_t *)&v80->__shared_owners_;
                    do
                      v82 = __ldaxr(p_shared_owners);
                    while (__stlxr(v82 - 1, p_shared_owners));
                    if (!v82)
                    {
                      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                      std::__shared_weak_count::__release_weak(v80);
                    }
                  }
                  v78 = (gss::Allocator *)((char *)v78 + 16);
                }
                while (v78 != v79);
              }
              v84 = gss::Allocator::instance(inited);
              (*(void (**)(uint64_t, gss::Allocator *, uint64_t))(*(_QWORD *)v84 + 40))(v84, v88[0], 16 * WORD1(v88[1]));
            }
          }
        }
        else
        {
          if (!*((_BYTE *)v85 + 68))
          {
            v72 = *v71;
            if (*v71)
            {
              if (*((_WORD *)v85 + 32))
              {
                v73 = v72 + 16 * *((unsigned __int16 *)v85 + 32);
                do
                {
                  v74 = *(std::__shared_weak_count **)(v72 + 8);
                  if (v74)
                  {
                    v75 = (unint64_t *)&v74->__shared_owners_;
                    do
                      v76 = __ldaxr(v75);
                    while (__stlxr(v76 - 1, v75));
                    if (!v76)
                    {
                      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                      std::__shared_weak_count::__release_weak(v74);
                    }
                  }
                  v72 += 16;
                }
                while (v72 != v73);
              }
              v83 = gss::Allocator::instance(inited);
              (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v83 + 40))(v83, *((_QWORD *)v85 + 7), 16 * *((unsigned __int16 *)v85 + 33));
            }
          }
          *((gss::Allocator **)v85 + 7) = v88[0];
          *((_DWORD *)v85 + 16) = v88[1];
          *((_BYTE *)v85 + 68) = BYTE4(v88[1]);
          *((_BYTE *)v85 + 120) = 1;
        }
      }
    }
    return (gss::Allocator *)std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v89, v90);
  }
  return result;
}

void sub_19F02E41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, _QWORD *a16)
{
  geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::~intern_vector(&a13);
  std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy(uint64_t result, _QWORD *a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy(v3, a2[1]);
    return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), a2, 40);
  }
  return result;
}

void geo::MallocZoneAllocator::deallocate(malloc_zone_t **this, void *a2)
{
  pthread_rwlock_t *v4;
  geo::read_write_lock *v5;
  const char *v6;
  unint64_t *v7;
  unint64_t v8;
  geo::read_write_lock *v9;
  const char *v10;

  v4 = (pthread_rwlock_t *)(this + 7);
  v5 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(this + 7));
  if ((_DWORD)v5)
    geo::read_write_lock::logFailure(v5, (uint64_t)"read lock", v6);
  if (a2)
  {
    v7 = (unint64_t *)(this + 5);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
  }
  malloc_zone_free(this[6], a2);
  v9 = (geo::read_write_lock *)pthread_rwlock_unlock(v4);
  if ((_DWORD)v9)
    geo::read_write_lock::logFailure(v9, (uint64_t)"unlock", v10);
}

{
  pthread_rwlock_t *v4;
  unint64_t *v5;
  unint64_t v6;

  v4 = (pthread_rwlock_t *)(this + 7);
  geo::read_write_lock::read_lock((pthread_rwlock_t *)(this + 7));
  if (a2)
  {
    v5 = (unint64_t *)(this + 5);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
  }
  malloc_zone_free(this[6], a2);
  geo::read_write_lock::unlock(v4);
}

void sub_19F02E594(_Unwind_Exception *a1)
{
  pthread_rwlock_t *v1;

  geo::read_write_lock::unlock(v1);
  _Unwind_Resume(a1);
}

void *geo::MallocZoneAllocator::allocate(malloc_zone_t **this, size_t a2)
{
  pthread_rwlock_t *v4;
  geo::read_write_lock *v5;
  const char *v6;
  void *v7;
  unint64_t *v8;
  unint64_t v9;
  geo::read_write_lock *v10;
  const char *v11;

  v4 = (pthread_rwlock_t *)(this + 7);
  v5 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(this + 7));
  if ((_DWORD)v5)
    geo::read_write_lock::logFailure(v5, (uint64_t)"read lock", v6);
  v7 = malloc_type_zone_malloc(this[6], a2, 0x2D50C850uLL);
  v8 = (unint64_t *)(this + 5);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = (geo::read_write_lock *)pthread_rwlock_unlock(v4);
  if ((_DWORD)v10)
    geo::read_write_lock::logFailure(v10, (uint64_t)"unlock", v11);
  return v7;
}

{
  pthread_rwlock_t *v4;
  void *v5;
  unint64_t *v6;
  unint64_t v7;

  v4 = (pthread_rwlock_t *)(this + 7);
  geo::read_write_lock::read_lock((pthread_rwlock_t *)(this + 7));
  v5 = malloc_type_zone_malloc(this[6], a2, 0x2D50C850uLL);
  v6 = (unint64_t *)(this + 5);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  geo::read_write_lock::unlock(v4);
  return v5;
}

void sub_19F02E6A8(_Unwind_Exception *a1)
{
  pthread_rwlock_t *v1;

  geo::read_write_lock::unlock(v1);
  _Unwind_Resume(a1);
}

void geo::read_write_lock::read_lock(pthread_rwlock_t *this)
{
  geo::read_write_lock *v1;
  const char *v2;

  v1 = (geo::read_write_lock *)pthread_rwlock_rdlock(this);
  if ((_DWORD)v1)
    geo::read_write_lock::logFailure(v1, (uint64_t)"read lock", v2);
}

void geo::read_write_lock::unlock(pthread_rwlock_t *this)
{
  geo::read_write_lock *v1;
  const char *v2;

  v1 = (geo::read_write_lock *)pthread_rwlock_unlock(this);
  if ((_DWORD)v1)
    geo::read_write_lock::logFailure(v1, (uint64_t)"unlock", v2);
}

gss::Allocator *geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::reallocate(gss::Allocator **a1, uint64_t a2)
{
  uint64_t v4;
  gss::Allocator *result;
  gss::Allocator *v6;
  gss::Allocator *v7;
  _WORD *v8;
  __int16 v9;
  int v10;
  gss::Allocator *v11;
  gss::Allocator *v12;
  gss::Allocator *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;

  v4 = gss::Allocator::instance((gss::Allocator *)a1);
  result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 16 * a2, 8);
  v6 = result;
  v7 = *a1;
  if (*a1)
  {
    v8 = a1 + 1;
    v9 = *((_WORD *)a1 + 4);
    if (v9)
    {
      v10 = *((unsigned __int16 *)a1 + 4);
      v11 = result;
      do
      {
        *(_OWORD *)v11 = *(_OWORD *)v7;
        v11 = (gss::Allocator *)((char *)v11 + 16);
        *(_QWORD *)v7 = 0;
        *((_QWORD *)v7 + 1) = 0;
        v7 = (gss::Allocator *)((char *)v7 + 16);
        --v10;
      }
      while ((_WORD)v10);
    }
    if (!*((_BYTE *)a1 + 12))
    {
      v12 = *a1;
      if (*a1)
      {
        if (*v8)
        {
          v13 = (gss::Allocator *)((char *)v12 + 16 * (unsigned __int16)*v8);
          do
          {
            v14 = (std::__shared_weak_count *)*((_QWORD *)v12 + 1);
            if (v14)
            {
              p_shared_owners = (unint64_t *)&v14->__shared_owners_;
              do
                v16 = __ldaxr(p_shared_owners);
              while (__stlxr(v16 - 1, p_shared_owners));
              if (!v16)
              {
                ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                std::__shared_weak_count::__release_weak(v14);
              }
            }
            v12 = (gss::Allocator *)((char *)v12 + 16);
          }
          while (v12 != v13);
        }
        v17 = gss::Allocator::instance(result);
        result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, gss::Allocator *, uint64_t))(*(_QWORD *)v17 + 40))(v17, *a1, 16 * *((unsigned __int16 *)a1 + 5));
      }
    }
    *(_DWORD *)v8 = 0;
    *((_BYTE *)a1 + 12) = 0;
    *v8 = v9;
  }
  *((_WORD *)a1 + 5) = a2;
  *a1 = v6;
  return result;
}

void gdc::DCEL::reserveFaces(gdc::DCEL *this, unsigned int a2)
{
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;

  v4 = (_BYTE *)*((_QWORD *)this + 3);
  if (a2 <= (unint64_t)((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v4) >> 2))
    goto LABEL_12;
  v5 = (_BYTE *)*((_QWORD *)this + 4);
  v6 = 4 * a2;
  v7 = (char *)operator new(v6);
  v8 = v5 - v4;
  v9 = &v7[(v5 - v4) & 0xFFFFFFFFFFFFFFFCLL];
  v10 = v9;
  if (v5 != v4)
  {
    if ((unint64_t)(v8 - 4) < 0x2C)
    {
      v10 = &v7[(v5 - v4) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_9:
        v17 = *((_DWORD *)v5 - 1);
        v5 -= 4;
        *((_DWORD *)v10 - 1) = v17;
        v10 -= 4;
      }
      while (v5 != v4);
      goto LABEL_10;
    }
    v10 = &v7[(v5 - v4) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(v5 - &v7[v8 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
      goto LABEL_9;
    v11 = v8 >> 2;
    v12 = ((unint64_t)(v8 - 4) >> 2) + 1;
    v13 = &v7[4 * v11 - 16];
    v14 = (__int128 *)(v5 - 16);
    v15 = v12 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v16 = *v14;
      *((_OWORD *)v13 - 1) = *(v14 - 1);
      *(_OWORD *)v13 = v16;
      v13 -= 32;
      v14 -= 2;
      v15 -= 8;
    }
    while (v15);
    v10 = &v9[-4 * (v12 & 0x7FFFFFFFFFFFFFF8)];
    v5 -= 4 * (v12 & 0x7FFFFFFFFFFFFFF8);
    if (v12 != (v12 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_9;
  }
LABEL_10:
  *((_QWORD *)this + 3) = v10;
  *((_QWORD *)this + 4) = v9;
  *((_QWORD *)this + 5) = &v7[v6];
  if (v4)
    operator delete(v4);
LABEL_12:
  v18 = (*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 2;
  if ((_DWORD)v18 + a2)
  {
    v19 = 2 * (a2 + v18) - 2;
    v20 = *(_BYTE **)this;
    if (v19 > (uint64_t)(*((_QWORD *)this + 2) - *(_QWORD *)this) >> 4)
    {
      v21 = (_BYTE *)*((_QWORD *)this + 1);
      v22 = 16 * v19;
      v23 = (char *)operator new(16 * v19);
      v24 = &v23[(v21 - v20) & 0xFFFFFFFFFFFFFFF0];
      v25 = v24;
      if (v21 != v20)
      {
        v26 = &v23[(v21 - v20) & 0xFFFFFFFFFFFFFFF0];
        do
        {
          v25 = v26 - 16;
          *((_OWORD *)v26 - 1) = *((_OWORD *)v21 - 1);
          v21 -= 16;
          v26 -= 16;
        }
        while (v21 != v20);
      }
      *(_QWORD *)this = v25;
      *((_QWORD *)this + 1) = v24;
      *((_QWORD *)this + 2) = &v23[v22];
      if (v20)
        operator delete(v20);
    }
  }
}

uint64_t FeatureStyleAttributes::compareStylePairs(FeatureStyleAttributes *this, _DWORD *a2, const void *a3)
{
  if (*(_DWORD *)this < *a2)
    return 0xFFFFFFFFLL;
  else
    return *(_DWORD *)this > *a2;
}

uint64_t geo::codec::compareSearchingLocalizationTableEntries(geo::codec *this, _QWORD *a2, const void *a3)
{
  if (*a2 > *(_QWORD *)this)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *(_QWORD *)this;
}

_QWORD *std::__function::__func<ggl::AlphaAtlas::AlphaAtlas(unsigned int,BOOL,float,float,ggl::Device *)::$_0,std::allocator<ggl::AlphaAtlas::AlphaAtlas(unsigned int,BOOL,float,float,ggl::Device *)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD v13[2];
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE *v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v4 = *(_QWORD *)(v3 + 112);
  v5 = *(_QWORD *)(v3 + 80);
  v6 = operator new(0x20uLL);
  *v6 = &off_1E42C6DE0;
  v6[1] = ggl::Texture2D::onImplicitLoadComplete;
  v6[2] = 0;
  v6[3] = v3;
  v21 = v6;
  v13[0] = v4;
  v13[1] = v3;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = v5;
  v7 = std::__function::__func<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone((uint64_t)v6);
  v19 = v8;
  v9 = v21;
  if (v21 == v20)
  {
    v10 = 4;
    v9 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(__n128))(*v9 + 8 * v10))(v7);
LABEL_6:
  (*(void (**)(uint64_t, _QWORD *, __n128))(*(_QWORD *)v2 + 24))(v2, v13, v7);
  result = v19;
  if (v19 == v18)
  {
    v12 = 4;
    result = v18;
  }
  else
  {
    if (!v19)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

_QWORD *std::__function::__func<ggl::IsoAlphaAtlas::IsoAlphaAtlas(unsigned int,float,float,ggl::Device *)::$_0,std::allocator<ggl::IsoAlphaAtlas::IsoAlphaAtlas(unsigned int,float,float,ggl::Device *)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD v13[2];
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE *v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  v4 = *(_QWORD *)(v3 + 112);
  v5 = *(_QWORD *)(v3 + 80);
  v6 = operator new(0x20uLL);
  *v6 = &off_1E42C6DE0;
  v6[1] = ggl::Texture2D::onImplicitLoadComplete;
  v6[2] = 0;
  v6[3] = v3;
  v21 = v6;
  v13[0] = v4;
  v13[1] = v3;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = v5;
  v7 = std::__function::__func<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::__clone((uint64_t)v6);
  v19 = v8;
  v9 = v21;
  if (v21 == v20)
  {
    v10 = 4;
    v9 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(__n128))(*v9 + 8 * v10))(v7);
LABEL_6:
  (*(void (**)(uint64_t, _QWORD *, __n128))(*(_QWORD *)v2 + 24))(v2, v13, v7);
  result = v19;
  if (v19 == v18)
  {
    v12 = 4;
    result = v18;
  }
  else
  {
    if (!v19)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

_QWORD *std::__function::__func<md::TextureManager::_cubeTexture(std::string const&,std::shared_ptr<ggl::SamplerState>,BOOL,geo::optional<unsigned int>)::$_0,std::allocator<md::TextureManager::_cubeTexture(std::string const&,std::shared_ptr<ggl::SamplerState>,BOOL,geo::optional<unsigned int>)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *a2;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  {
    v13 = operator new();
    ggl::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v13, "GeoGL", 0xA3D02C1100000005);
  }
  v17 = ggl::Allocator::instance(void)::alloc;
  result = ggl::TextureCube::vendImplicitLoadItems(**(_QWORD ***)(a1 + 8), &v14);
  v6 = v14;
  v7 = v15;
  if (v14 == v15)
  {
    if (v14)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 40))(v17, v6, v16 - v6);
  }
  else
  {
    v8 = v14;
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, v8);
      v8 += 80;
    }
    while (v8 != v7);
    if (v6)
    {
      if (v6 != v7)
      {
        for (i = (_QWORD *)(v7 - 32); ; i -= 10)
        {
          v11 = (_QWORD *)i[3];
          if (i == v11)
            break;
          if (v11)
          {
            v12 = 5;
LABEL_13:
            (*(void (**)(void))(*v11 + 8 * v12))();
          }
          if (*((_BYTE *)i - 28))
            *((_BYTE *)i - 28) = 0;
          if (*((_BYTE *)i - 32))
            *((_BYTE *)i - 32) = 0;
          v10 = i - 6;
          if (v10 == (_QWORD *)v6)
            return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 40))(v17, v6, v16 - v6);
        }
        v11 = i;
        v12 = 4;
        goto LABEL_13;
      }
      return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 40))(v17, v6, v16 - v6);
    }
  }
  return result;
}

void sub_19F02EDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  if (!v12)
LABEL_14:
    _Unwind_Resume(exception_object);
  v15 = (_QWORD *)(v13 - 32);
  while (1)
  {
    v17 = (_QWORD *)v15[3];
    if (v15 == v17)
      break;
    if (v17)
    {
      v18 = 5;
LABEL_8:
      (*(void (**)(void))(*v17 + 8 * v18))();
    }
    if (*((_BYTE *)v15 - 28))
      *((_BYTE *)v15 - 28) = 0;
    if (*((_BYTE *)v15 - 32))
      *((_BYTE *)v15 - 32) = 0;
    v16 = v15 - 6;
    v15 -= 10;
    if (v16 == v12)
    {
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a12 + 40))(a12, v12, a11 - (_QWORD)v12);
      goto LABEL_14;
    }
  }
  v17 = v15;
  v18 = 4;
  goto LABEL_8;
}

void md::RenderQueue<md::DaVinciShadowCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void md::RenderQueue<md::StandardCommandBufferIdInfo>::~RenderQueue(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = &off_1E4290AA0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void md::RenderQueueBase::~RenderQueueBase(md::RenderQueueBase *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *(_QWORD *)this = &off_1E4290AA0;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 4);
    v4 = (void *)*((_QWORD *)this + 3);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *(_QWORD *)this = &off_1E4290AA0;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 4);
    v4 = (void *)*((_QWORD *)this + 3);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *(_QWORD *)this = &off_1E4290AA0;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 4);
    v4 = (void *)*((_QWORD *)this + 3);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::CommandBuffer::~CommandBuffer(ggl::CommandBuffer *this)
{
  ggl::CommandBuffer::~CommandBuffer(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void **v6;
  void **v7;
  unint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  void **v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void **v36;
  void **v37;
  unint64_t v38;
  void **v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  *(_QWORD *)this = &off_1E42B6470;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 104);
    v3 = *(_QWORD *)(v2 + 112);
    if (v3 != v4)
    {
      v5 = 0;
      do
      {
        if (*(ggl::CommandBuffer **)(v4 + 8 * v5) == this)
        {
          *(_QWORD *)(v4 + 8 * v5) = 0;
          v4 = *(_QWORD *)(v2 + 104);
          v3 = *(_QWORD *)(v2 + 112);
        }
        ++v5;
      }
      while (v5 < (v3 - v4) >> 3);
    }
  }
  v6 = (void **)*((_QWORD *)this + 40);
  v7 = (void **)*((_QWORD *)this + 41);
  if (v7 == v6)
  {
    v19 = (uint64_t *)((char *)this + 344);
    v7 = (void **)*((_QWORD *)this + 40);
    v23 = (_QWORD *)((char *)this + 352);
  }
  else
  {
    v8 = *((_QWORD *)this + 43);
    v9 = &v6[v8 >> 7];
    v10 = (uint64_t)*v9;
    v11 = (uint64_t)*v9 + 32 * (v8 & 0x7F);
    v12 = *(uint64_t *)((char *)v6 + (((*((_QWORD *)this + 44) + v8) >> 4) & 0xFFFFFFFFFFFFFF8))
        + 32 * ((*((_QWORD *)this + 44) + v8) & 0x7F);
    if (v11 != v12)
    {
      do
      {
        v13 = *(_QWORD *)(v11 + 16);
        if (v13)
        {
          *(_BYTE *)(v13 + 136) = 2;
          v14 = *(_QWORD *)(v13 + 120);
          if (v14)
          {
            v15 = *(std::__shared_weak_count **)(v14 + 24);
            *(_QWORD *)(v14 + 16) = 0;
            *(_QWORD *)(v14 + 24) = 0;
            if (v15)
            {
              p_shared_owners = (unint64_t *)&v15->__shared_owners_;
              do
                v17 = __ldaxr(p_shared_owners);
              while (__stlxr(v17 - 1, p_shared_owners));
              if (!v17)
              {
                ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                std::__shared_weak_count::__release_weak(v15);
              }
            }
            *(_QWORD *)(v13 + 120) = 0;
            v10 = (uint64_t)*v9;
          }
        }
        v11 += 32;
        if (v11 - v10 == 4096)
        {
          v18 = (uint64_t)v9[1];
          ++v9;
          v10 = v18;
          v11 = v18;
        }
      }
      while (v11 != v12);
      v6 = (void **)*((_QWORD *)this + 40);
      v7 = (void **)*((_QWORD *)this + 41);
    }
    v19 = (uint64_t *)((char *)this + 344);
    if (v7 == v6)
    {
      v6 = v7;
      v23 = (_QWORD *)((char *)this + 352);
    }
    else
    {
      v20 = *((_QWORD *)this + 43);
      v21 = &v6[v20 >> 7];
      v22 = (uint64_t)*v21 + 32 * (v20 & 0x7F);
      v23 = (_QWORD *)((char *)this + 352);
      v24 = *(uint64_t *)((char *)v6 + (((*((_QWORD *)this + 44) + v20) >> 4) & 0xFFFFFFFFFFFFFF8))
          + 32 * ((*((_QWORD *)this + 44) + v20) & 0x7F);
      if (v22 != v24)
      {
        do
        {
          v25 = *(std::__shared_weak_count **)(v22 + 24);
          if (v25)
          {
            v26 = (unint64_t *)&v25->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
          v22 += 32;
          if (v22 - (_QWORD)*v21 == 4096)
          {
            v28 = (uint64_t)v21[1];
            ++v21;
            v22 = v28;
          }
        }
        while (v22 != v24);
        v6 = (void **)*((_QWORD *)this + 40);
        v7 = (void **)*((_QWORD *)this + 41);
      }
    }
  }
  *v23 = 0;
  v29 = (char *)v7 - (char *)v6;
  if ((unint64_t)((char *)v7 - (char *)v6) >= 0x11)
  {
    do
    {
      operator delete(*v6);
      v7 = (void **)*((_QWORD *)this + 41);
      v6 = (void **)(*((_QWORD *)this + 40) + 8);
      *((_QWORD *)this + 40) = v6;
      v29 = (char *)v7 - (char *)v6;
    }
    while ((unint64_t)((char *)v7 - (char *)v6) > 0x10);
  }
  v30 = v29 >> 3;
  if (v30 == 1)
  {
    v31 = 64;
    goto LABEL_42;
  }
  if (v30 == 2)
  {
    v31 = 128;
LABEL_42:
    *v19 = v31;
  }
  if (v6 != v7)
  {
    do
    {
      v32 = *v6++;
      operator delete(v32);
    }
    while (v6 != v7);
    v34 = *((_QWORD *)this + 40);
    v33 = *((_QWORD *)this + 41);
    if (v33 != v34)
      *((_QWORD *)this + 41) = v33 + ((v34 - v33 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v35 = (void *)*((_QWORD *)this + 39);
  if (v35)
    operator delete(v35);
  v36 = (void **)*((_QWORD *)this + 34);
  v37 = (void **)*((_QWORD *)this + 35);
  if (v37 == v36)
  {
    v41 = (_QWORD *)((char *)this + 304);
    v37 = (void **)*((_QWORD *)this + 34);
  }
  else
  {
    v38 = *((_QWORD *)this + 37);
    v39 = &v36[v38 >> 8];
    v40 = (uint64_t)*v39 + 16 * v38;
    v41 = (_QWORD *)((char *)this + 304);
    v42 = *(uint64_t *)((char *)v36 + (((*((_QWORD *)this + 38) + v38) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*((_BYTE *)this + 304) + v38);
    if (v40 != v42)
    {
      do
      {
        v43 = *(std::__shared_weak_count **)(v40 + 8);
        if (v43)
        {
          v44 = (unint64_t *)&v43->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v40 += 16;
        if (v40 - (_QWORD)*v39 == 4096)
        {
          v46 = (uint64_t)v39[1];
          ++v39;
          v40 = v46;
        }
      }
      while (v40 != v42);
      v36 = (void **)*((_QWORD *)this + 34);
      v37 = (void **)*((_QWORD *)this + 35);
    }
  }
  *v41 = 0;
  v47 = (char *)v37 - (char *)v36;
  if ((unint64_t)((char *)v37 - (char *)v36) >= 0x11)
  {
    do
    {
      operator delete(*v36);
      v37 = (void **)*((_QWORD *)this + 35);
      v36 = (void **)(*((_QWORD *)this + 34) + 8);
      *((_QWORD *)this + 34) = v36;
      v47 = (char *)v37 - (char *)v36;
    }
    while ((unint64_t)((char *)v37 - (char *)v36) > 0x10);
  }
  v48 = v47 >> 3;
  if (v48 == 1)
  {
    v49 = 128;
    goto LABEL_68;
  }
  if (v48 == 2)
  {
    v49 = 256;
LABEL_68:
    *((_QWORD *)this + 37) = v49;
  }
  if (v36 != v37)
  {
    do
    {
      v50 = *v36++;
      operator delete(v50);
    }
    while (v36 != v37);
    v52 = *((_QWORD *)this + 34);
    v51 = *((_QWORD *)this + 35);
    if (v51 != v52)
      *((_QWORD *)this + 35) = v51 + ((v52 - v51 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v53 = (void *)*((_QWORD *)this + 33);
  if (v53)
    operator delete(v53);
  v54 = *((_QWORD *)this + 29);
  if (!v54)
    goto LABEL_86;
  v55 = *((_QWORD *)this + 30);
  v56 = *((_QWORD *)this + 29);
  if (v55 != v54)
  {
    while (1)
    {
      v57 = *(_QWORD **)(v55 - 8);
      if ((_QWORD *)(v55 - 32) == v57)
      {
        v57 = (_QWORD *)(v55 - 32);
        v58 = 4;
      }
      else
      {
        if (!v57)
          goto LABEL_80;
        v58 = 5;
      }
      (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_80:
      v55 -= 64;
      if (v55 == v54)
      {
        v56 = *((_QWORD *)this + 29);
        break;
      }
    }
  }
  *((_QWORD *)this + 30) = v54;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 32) + 40))(*((_QWORD *)this + 32), v56, *((_QWORD *)this + 31) - v56);
LABEL_86:
  v59 = (_QWORD *)*((_QWORD *)this + 25);
  if (!v59)
    goto LABEL_101;
  v60 = (_QWORD *)*((_QWORD *)this + 26);
  v61 = *((_QWORD *)this + 25);
  if (v60 == v59)
    goto LABEL_100;
  v62 = v60 - 4;
  do
  {
    v64 = (_QWORD *)v62[3];
    if (v62 == v64)
    {
      v64 = v62;
      v65 = 4;
    }
    else
    {
      if (!v64)
        goto LABEL_95;
      v65 = 5;
    }
    (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_95:
    if (*((_BYTE *)v62 - 28))
      *((_BYTE *)v62 - 28) = 0;
    if (*((_BYTE *)v62 - 32))
      *((_BYTE *)v62 - 32) = 0;
    v63 = v62 - 6;
    v62 -= 10;
  }
  while (v63 != v59);
  v61 = *((_QWORD *)this + 25);
LABEL_100:
  *((_QWORD *)this + 26) = v59;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 28) + 40))(*((_QWORD *)this + 28), v61, *((_QWORD *)this + 27) - v61);
LABEL_101:
  v66 = *((_QWORD *)this + 21);
  if (v66)
  {
    *((_QWORD *)this + 22) = v66;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 24) + 40))(*((_QWORD *)this + 24), v66, *((_QWORD *)this + 23) - v66);
  }
  v67 = *((_QWORD *)this + 17);
  if (v67)
  {
    *((_QWORD *)this + 18) = v67;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 20) + 40))(*((_QWORD *)this + 20), v67, *((_QWORD *)this + 19) - v67);
  }
  v68 = *((_QWORD *)this + 13);
  if (v68)
  {
    *((_QWORD *)this + 14) = v68;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 16) + 40))(*((_QWORD *)this + 16), v68, *((_QWORD *)this + 15) - v68);
  }
  v69 = *((_QWORD *)this + 9);
  if (v69)
  {
    *((_QWORD *)this + 10) = v69;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 12) + 40))(*((_QWORD *)this + 12), v69, *((_QWORD *)this + 11) - v69);
  }
  v70 = *((_QWORD *)this + 5);
  if (v70)
  {
    *((_QWORD *)this + 6) = v70;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v70, *((_QWORD *)this + 7) - v70);
  }
}

_QWORD *std::__function::__func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0,std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0>,void ()(void)>::operator()(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *i;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint8_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  _QWORD *result;
  uint64_t v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  uint8_t buf[24];
  uint8_t *v32;
  _QWORD v33[3];
  _QWORD *v34;
  _QWORD v35[3];
  _QWORD *v36;
  _QWORD v37[3];
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v2 = a1[1];
  v36 = v35;
  v33[0] = &off_1E42D9E18;
  v34 = v33;
  v35[0] = &off_1E42D9EA8;
  v38 = v37;
  v37[0] = &off_1E42D9E18;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v3 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsRenderGlyphs", (const char *)&unk_1A0189141, buf, 2u);
  }

  v4 = v34;
  if (v34 == v33)
  {
    v5 = 4;
    v4 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_10;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_10:
  v6 = v36;
  if (v36 == v35)
  {
    v7 = 4;
    v6 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_15;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_15:
  v8 = (_QWORD *)a1[2];
  for (i = (_QWORD *)a1[3]; v8 != i; v8 += 2)
  {
    v10 = *v8;
    (***(void (****)(_QWORD, _QWORD))v2)(*(_QWORD *)v2, *v8);
    v11 = atomic_load((unsigned int *)(v2 + 76));
    atomic_store(v11, (unsigned int *)(v10 + 52));
    atomic_store(1u, (unsigned __int8 *)(v10 + 109));
  }
  v13 = a1[6];
  v12 = a1[7];
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 152) + 136);
  if (v12)
  {
    v15 = (unint64_t *)(v12 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v18 = a1[8];
  v17 = a1[9];
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v32 = 0;
  v21 = (uint8_t *)operator new(0x28uLL);
  *(_QWORD *)v21 = &off_1E42D9E60;
  *((_QWORD *)v21 + 1) = v13;
  *((_QWORD *)v21 + 2) = v12;
  *((_QWORD *)v21 + 3) = v18;
  *((_QWORD *)v21 + 4) = v17;
  v32 = v21;
  geo::TaskQueue::async(&v29, v14, buf);
  v22 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v32;
  if (v32 == buf)
  {
    v26 = 4;
    v25 = buf;
  }
  else
  {
    if (!v32)
      goto LABEL_33;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_33:
  if (!v38)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    JUMPOUT(0x19F02FA30);
  }
  (*(void (**)(_QWORD *))(*v38 + 48))(v38);
  result = v38;
  if (v38 == v37)
  {
    v28 = 4;
    result = v37;
  }
  else
  {
    if (!v38)
      return result;
    v28 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v28))();
}

uint64_t ggl::MetalResourceAccessor::load(uint64_t a1, uint64_t a2)
{
  ggl::MetalResourceManager *v2;
  std::__shared_weak_count v4;

  v2 = *(ggl::MetalResourceManager **)(*(_QWORD *)(a1 + 8) + 80);
  v4.__vftable = 0;
  v4.__shared_owners_ = 0;
  return ggl::MetalResourceManager::upload(v2, a2, &v4);
}

void sub_19F02FAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ggl::MetalResourceManager::upload(ggl::MetalResourceManager *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unsigned int *v5;
  uint64_t v6;
  ggl::MetalTextureResource *v7;
  int32x2_t v8;
  int32x2_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  void (__cdecl *on_zero_shared)(std::__shared_count *__hidden);
  uint64_t v13;
  uint64_t v14;
  void (__cdecl **v15)(std::__shared_count *__hidden);
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  const void *(__cdecl *get_deleter)(const std::__shared_weak_count *__hidden, const std::type_info *);
  void (__cdecl *v20)(std::__shared_count *__hidden);
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t result;
  const void *(__cdecl *v27)(const std::__shared_weak_count *__hidden, const std::type_info *);
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  unint64_t *v31;
  id *v32;
  unint64_t v33;
  uint32x2_t v34;
  uint32x2_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint32x2_t v39;
  uint32x2_t v40;
  __int128 v41;
  __int128 v42;
  unsigned int v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;

  v5 = *(unsigned int **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(ggl::MetalTextureResource **)(v6 + 24);
  if (!v7)
  {
    v7 = ggl::MetalResourceManager::newTexture(a1, *(const ggl::Texture **)(a2 + 8));
    if (v5)
      goto LABEL_3;
LABEL_15:
    result = *(_QWORD *)(a2 + 72);
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 48))(result, a2);
  }
  if (!v5)
    goto LABEL_15;
LABEL_3:
  v8 = *(int32x2_t *)(a2 + 36);
  v9 = *(int32x2_t *)(a2 + 28);
  v10 = a3->__vftable;
  if (!a3->__vftable)
    goto LABEL_26;
  if (*((_BYTE *)v7 + 120) != 1)
    goto LABEL_26;
  v11 = *((unsigned int *)v7 + 16);
  on_zero_shared = v10->__on_zero_shared;
  if (on_zero_shared == *((void (__cdecl **)(std::__shared_count *__hidden))v7 + 2 * v11 + 9))
    goto LABEL_26;
  v13 = ((int)v11 + 1) % 3u;
  *((_DWORD *)v7 + 16) = v13;
  v14 = (uint64_t)v7 + 16 * v13 + 64;
  v17 = *(unsigned __int8 **)(v14 + 8);
  v15 = (void (__cdecl **)(std::__shared_count *__hidden))(v14 + 8);
  v16 = v17;
  if (v17)
  {
    atomic_load(v16);
    v18 = *((unsigned int *)v7 + 16);
    v20 = v10->__on_zero_shared;
    get_deleter = v10->__get_deleter;
    if (get_deleter)
    {
      v21 = (unint64_t *)((char *)get_deleter + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    *((_QWORD *)v7 + 2 * v18 + 9) = v20;
    v23 = (char *)v7 + 16 * v18;
    a3 = (std::__shared_weak_count *)*((_QWORD *)v23 + 10);
    *((_QWORD *)v23 + 10) = get_deleter;
    if (a3)
    {
      p_shared_owners = (unint64_t *)&a3->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      goto LABEL_24;
    }
  }
  else
  {
    v27 = v10->__get_deleter;
    if (v27)
    {
      v28 = (unint64_t *)((char *)v27 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    *v15 = on_zero_shared;
    v30 = (char *)v7 + 16 * v13;
    a3 = (std::__shared_weak_count *)*((_QWORD *)v30 + 10);
    *((_QWORD *)v30 + 10) = v27;
    if (a3)
    {
      v31 = (unint64_t *)&a3->__shared_owners_;
      do
        v25 = __ldaxr(v31);
      while (__stlxr(v25 - 1, v31));
LABEL_24:
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
        std::__shared_weak_count::__release_weak(a3);
      }
    }
  }
LABEL_26:
  if (*((_BYTE *)v7 + 120) == 1)
  {
    v32 = (id *)(*((_QWORD *)v7 + 4) + 8 * *((unsigned int *)v7 + 16));
  }
  else
  {
    if (*((_BYTE *)v7 + 120))
      goto LABEL_31;
    v32 = (id *)*((_QWORD *)v7 + 4);
  }
  a3 = (std::__shared_weak_count *)*v32;
LABEL_31:
  if (v5[2])
  {
    v33 = 0;
    v34 = (uint32x2_t)vsub_s32(v8, v9);
    do
    {
      if ((*(uint64_t (**)(unsigned int *, unint64_t))(*(_QWORD *)v5 + 16))(v5, v33))
      {
        v39 = (uint32x2_t)vneg_s32(vdup_n_s32(v33));
        v40 = vmax_u32(vshl_u32(v34, v39), (uint32x2_t)0x100000001);
        *(_QWORD *)&v41 = v40.u32[0];
        *((_QWORD *)&v41 + 1) = v40.u32[1];
        v42 = v41;
        v43 = *(unsigned __int8 *)(a2 + 16);
        if (*(_BYTE *)(a2 + 16))
        {
          if (*(unsigned __int8 *)(a2 + 17) - 1 <= 4)
            v43 = (*(_BYTE *)(a2 + 17) - 1) + 1;
          else
            v43 = 0;
        }
        v35 = vshl_u32(*(uint32x2_t *)(a2 + 28), v39);
        *(_QWORD *)&v36 = v35.u32[0];
        *((_QWORD *)&v36 + 1) = v35.u32[1];
        v37 = v36;
        if (*(_BYTE *)(a2 + 20))
          v38 = *(unsigned int *)(a2 + 24);
        else
          v38 = v43;
        v46 = v37;
        v47 = 0;
        v48 = v42;
        v49 = 1;
        -[std::__shared_weak_count replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:](a3, "replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:", &v46, v33, v38);
      }
      ++v33;
    }
    while (v33 < v5[2]);
  }
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
  v44 = (unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 40);
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 + 1, v44));

  result = *(_QWORD *)(a2 + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 48))(result, a2);
  return result;
}

void sub_19F02FEB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void md::DaVinciGroundRenderResources::_buildDefaultStyleRaster(uint64_t a1, unsigned int a2, char a3)
{
  _QWORD *v6;
  unint64_t *v7;
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int shared_owners_high;
  int shared_owners;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unsigned int v24;
  _DWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;

  v6 = operator new(0x58uLL);
  v6[1] = 0;
  v7 = v6 + 1;
  v6[2] = 0;
  *v6 = &off_1E42DED18;
  v6[3] = &off_1E42B63B0;
  v6[5] = 0;
  v6[6] = 0;
  v6[4] = 0;
  *((_DWORD *)v6 + 14) = 0;
  v8 = a2 - 153 < 2;
  *(_QWORD *)((char *)v6 + 60) = 0x100000001;
  *((_DWORD *)v6 + 17) = 1;
  *((_DWORD *)v6 + 18) = v8;
  *((_DWORD *)v6 + 19) = v8;
  v6[10] = 1;
  v34 = (std::__shared_weak_count *)v6;
  v9 = (std::__shared_weak_count *)operator new(0x60uLL);
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
  v11 = v9 + 1;
  v12 = ggl::TextureData2D::TextureData2D((uint64_t)&v9[1], 1, 1, 1u, 12, 0);
  v33 = v9;
  *(_BYTE *)((uint64_t (*)(_QWORD *, _QWORD))v9[1].__on_zero_shared)(v12, 0) = a3;
  *(_BYTE *)(((uint64_t (*)(std::__shared_weak_count *, _QWORD))v11->__on_zero_shared)(v11, 0) + 1) = a3;
  *(_BYTE *)(((uint64_t (*)(std::__shared_weak_count *, _QWORD))v11->__on_zero_shared)(v11, 0) + 2) = a3;
  *(_BYTE *)(((uint64_t (*)(std::__shared_weak_count *, _QWORD))v11->__on_zero_shared)(v11, 0) + 3) = a3;
  v13 = operator new();
  v14 = v13;
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  *(_DWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 56) = 0x100000001;
  shared_owners = v9[1].__shared_owners_;
  shared_owners_high = HIDWORD(v9[1].__shared_owners_);
  *(_DWORD *)(v13 + 64) = 0;
  *(_DWORD *)(v13 + 68) = shared_owners_high;
  *(_QWORD *)v13 = &off_1E42BE438;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 40) = &unk_1E42BE458;
  *(_QWORD *)(v13 + 48) = "";
  *(_QWORD *)(v13 + 80) = 0;
  *(_QWORD *)(v13 + 72) = 0x100000001;
  *(_QWORD *)(v13 + 88) = 0;
  *(_QWORD *)(v13 + 96) = 0;
  *(_DWORD *)(v13 + 104) = shared_owners;
  *(_QWORD *)(v13 + 112) = v11;
  *(_QWORD *)(v13 + 120) = v9;
  do
    v18 = __ldxr(p_shared_owners);
  while (__stxr(v18 + 1, p_shared_owners));
  *(_WORD *)(v13 + 128) = 0;
  *(_BYTE *)(v13 + 130) = 1;
  *(_QWORD *)(v13 + 136) = v6 + 3;
  *(_QWORD *)(v13 + 144) = v6;
  do
    v19 = __ldxr(v7);
  while (__stxr(v19 + 1, v7));
  *(_QWORD *)(v13 + 80) = v9[1].__shared_weak_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (v20)
  {
    v21 = *(_QWORD *)(a1 + 2680);
    if (v21)
      goto LABEL_15;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v21 = *(_QWORD *)(a1 + 2680);
    if (v21)
    {
      while (1)
      {
LABEL_15:
        while (1)
        {
          v23 = (_QWORD *)v21;
          v24 = *(_DWORD *)(v21 + 32);
          if (v24 <= a2)
            break;
          v21 = *v23;
          v22 = v23;
          if (!*v23)
            goto LABEL_19;
        }
        if (v24 >= a2)
          break;
        v21 = v23[1];
        if (!v21)
        {
          v22 = v23 + 1;
          goto LABEL_19;
        }
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v27 = v33;
      if (!v33)
        goto LABEL_27;
      goto LABEL_24;
    }
  }
  v22 = (_QWORD *)(a1 + 2680);
  v23 = (_QWORD *)(a1 + 2680);
LABEL_19:
  v25 = operator new(0x30uLL);
  v25[8] = a2;
  *((_QWORD *)v25 + 5) = v14;
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = 0;
  *((_QWORD *)v25 + 2) = v23;
  *v22 = v25;
  v26 = **(_QWORD **)(a1 + 2672);
  if (v26)
  {
    *(_QWORD *)(a1 + 2672) = v26;
    v25 = (_DWORD *)*v22;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 2680), (uint64_t *)v25);
  ++*(_QWORD *)(a1 + 2688);
  v27 = v33;
  if (!v33)
    goto LABEL_27;
LABEL_24:
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    v30 = v34;
    if (!v34)
      return;
    goto LABEL_28;
  }
LABEL_27:
  v30 = v34;
  if (!v34)
    return;
LABEL_28:
  v31 = (unint64_t *)&v30->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
}

void sub_19F030250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void md::SDFGlyphRenderer::renderGlyphImage(md::SDFGlyphRenderer *this, md::AtlasFontGlyph *a2)
{
  md::SDFGlyphRenderer *v3;
  std::mutex *v4;
  _QWORD *v5;
  int v6;
  int v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  unint64_t v20;
  float v21;
  int v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  char *v32;
  float *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  size_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  size_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  __int128 v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  long double v62;
  uint64_t v63;
  int32x4_t v64;
  _OWORD *v65;
  int32x4_t *v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float *v72;
  int32x4_t *v73;
  _OWORD *v74;
  uint64_t v75;
  unint64_t v76;
  float *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  __int16 v83;
  _WORD *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  float *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  float v95;
  float v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v133;
  unint64_t v134;
  float v135;
  float v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t i;
  char *v166;
  float *v167;
  unint64_t v168;
  int v169;
  float32x4_t **v170;
  unint64_t v171;
  unint64_t v172;
  int v173;
  int8x16_t **v174;
  unint64_t v175;
  char *v176;
  char *v177;
  int32x2_t v178;
  unint64_t v179;
  int32x2_t v180;
  int8x16_t *v181;
  uint64_t v182;
  uint64_t v183;
  float32x4_t *v184;
  uint64_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  uint64_t v189;
  float32x4_t v190;
  float32x4_t *v191;
  int8x16_t *v192;
  uint64_t v193;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  float32x4_t *v198;
  int8x16_t *v199;
  _QWORD *v200;
  _QWORD *v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  char *v216;
  char *v217;
  unint64_t v218;
  double v219;
  double v220;
  uint64_t v221;
  float64_t v222;
  uint64_t v223;
  char *v224;
  size_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t j;
  __int8 v230;
  char v231;
  unint64_t *v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  char *v236;
  char *v237;
  unint64_t v238;
  float32x4_t *v239;
  float v240;
  unint64_t v241;
  int v242;
  unint64_t v243;
  int v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  float v253;
  uint64_t v254;
  float v255;
  uint64_t v256;
  uint64_t v257;
  float v258;
  uint64_t v259;
  uint64_t v260;
  float v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  float v265;
  uint64_t v266;
  uint64_t v267;
  float v268;
  uint64_t v269;
  float v270;
  uint64_t v271;
  float v272;
  unint64_t v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  int v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  float *v282;
  uint64_t v283;
  float v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t *v287;
  uint64_t v288;
  float32x4_t v289;
  float *v290;
  unint64_t v291;
  float v292;
  char *v293;
  char *v294;
  size_t v295;
  char *v296;
  char *v297;
  size_t v298;
  unint64_t v299;
  _QWORD *v300;
  std::mutex *v301;
  unsigned int v303;
  unsigned int v304;
  float64x2_t v305;
  float v306;
  unsigned int v307;
  unsigned int v308;
  float64x2_t v309;
  float v310;
  int8x16x2_t v311;
  int8x16x4_t v312;

  v3 = this;
  if (*((_BYTE *)a2 + 60))
  {
    v4 = (std::mutex *)((char *)this + 40);
    std::mutex::lock((std::mutex *)((char *)this + 40));
    v5 = (_QWORD *)((char *)v3 + 184);
    md::SDFGlyphRenderer::renderGlyph((uint64_t)&v307, (uint64_t)v3, *((CGFontRef *)a2 + 2), 1, *((_WORD *)a2 + 28), *((_DWORD *)v3 + 27), *((_DWORD *)v3 + 27), *((_DWORD *)v3 + 8), *((float *)a2 + 12), *((_DWORD *)v3 + 8), 1u, (unint64_t)v3 + 184);
    v7 = v307;
    v6 = v308;
    *((_DWORD *)a2 + 18) = v308;
    *((_DWORD *)a2 + 19) = v7;
    LODWORD(v8) = *((_DWORD *)v3 + 27);
    *((float32x2_t *)a2 + 8) = vcvt_f32_f64(vsubq_f64(v309, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v8), 0)));
    *((float *)a2 + 26) = 1.0 / v310;
    v9 = operator new(0x60uLL);
    v9[1] = 0;
    v9[2] = 0;
    *v9 = &off_1E42DEFB8;
    v10 = ggl::TextureData2D::TextureData2D((uint64_t)(v9 + 3), v6, v7, 1u, 12, 1);
    v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 11);
    *((_QWORD *)a2 + 10) = v10;
    *((_QWORD *)a2 + 11) = v9;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)a2 + 10) + 16))(*((_QWORD *)a2 + 10), 0);
    v15 = v307;
    if (v307)
    {
      v16 = v14;
      v17 = 0;
      v18 = 4 * v308;
      v19 = 4 * v308;
      do
      {
        memcpy((void *)(v16 + v17), (const void *)(*v5 + v17), v18);
        v17 += v19;
        --v15;
      }
      while (v15);
    }
    goto LABEL_318;
  }
  v20 = atomic_load((unsigned int *)this + 26);
  v21 = *((float *)a2 + 12);
  v22 = *((_DWORD *)this + 27);
  v23 = *((_DWORD *)this + 8);
  v301 = (std::mutex *)((char *)this + 40);
  std::mutex::lock((std::mutex *)((char *)this + 40));
  md::SDFGlyphRenderer::renderGlyph((uint64_t)&v307, (uint64_t)v3, *((CGFontRef *)a2 + 2), 0, *((_WORD *)a2 + 28), *((_DWORD *)v3 + 27), *((_DWORD *)v3 + 27), *((_DWORD *)v3 + 8), *((float *)a2 + 12), *((_DWORD *)v3 + 8), 1u, (unint64_t)v3 + 216);
  md::SDFGlyphRenderer::renderGlyph((uint64_t)&v303, (uint64_t)v3, *((CGFontRef *)a2 + 2), 0, *((_WORD *)a2 + 28), v22 * v20, v22 * v20, v23 * v20, v21 * (float)v20, v23 * v20, v20, (unint64_t)v3 + 248);
  if ((float)(v306 + -1.0) == 0.0)
  {
    v24 = (unint64_t *)((char *)v3 + 432);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 + 1, v24));
  }
  v26 = v303;
  v27 = v304;
  v28 = v303 * v304;
  v29 = (char *)*((_QWORD *)v3 + 35);
  v30 = (char *)*((_QWORD *)v3 + 36);
  v31 = (v30 - v29) >> 2;
  v300 = (_QWORD *)((char *)v3 + 216);
  if (v28 <= v31)
  {
    if (v28 < v31)
    {
      v30 = &v29[4 * v28];
      *((_QWORD *)v3 + 36) = v30;
    }
  }
  else
  {
    std::vector<float,geo::StdAllocator<float,mdm::Allocator>>::__append((uint64_t)v3 + 280, v28 - v31);
    v29 = (char *)*((_QWORD *)v3 + 35);
    v30 = (char *)*((_QWORD *)v3 + 36);
  }
  bzero(v29, (v30 - v29) >> 2);
  v32 = (char *)*((_QWORD *)v3 + 31);
  if (v32)
  {
    if ((_DWORD)v27)
    {
      if ((_DWORD)v26)
      {
        v33 = (float *)*((_QWORD *)v3 + 35);
        if (v33)
        {
          v34 = 4 * v27;
          v35 = 4 * v27 * v26;
          v36 = *((_QWORD *)v3 + 1);
          v37 = (char *)*((_QWORD *)v3 + 2);
          v38 = v35 - (_QWORD)&v37[-v36];
          if (v35 <= (unint64_t)&v37[-v36])
          {
            if (v35 < (unint64_t)&v37[-v36])
              *((_QWORD *)v3 + 2) = v36 + v35;
            goto LABEL_54;
          }
          v39 = *((_QWORD *)v3 + 3);
          if (v39 - (uint64_t)v37 >= v38)
          {
            v46 = v35 + v36;
            bzero(v37, v38);
            *((_QWORD *)this + 2) = v46;
            v3 = this;
LABEL_54:
            v59 = *((_QWORD *)v3 + 1);
            v62 = hypot((double)v27, (double)v26);
            v60 = 0;
            v61 = 0;
            *(float *)&v62 = v62;
            v63 = 4 * (v27 - 1);
            v64 = vdupq_lane_s32(*(int32x2_t *)&v62, 0);
            v65 = (_OWORD *)(v59 + 32);
            v66 = (int32x4_t *)(v33 + 8);
            while (1)
            {
              if (v27 >= 0x10
                && (v59 + v34 * v61 + v63 >= (unint64_t)(v59 + v34 * v61)
                  ? (v67 = v59 + ((v34 * v61) | 2uLL) + v63 >= v59 + ((v34 * v61) | 2uLL))
                  : (v67 = 0),
                    v67))
              {
                v73 = v66;
                v74 = v65;
                v75 = v27 & 0xFFFFFFF0;
                do
                {
                  v73[-2] = v64;
                  v73[-1] = v64;
                  *v73 = v64;
                  v73[1] = v64;
                  v73 += 4;
                  *(v74 - 2) = 0uLL;
                  *(v74 - 1) = 0uLL;
                  *v74 = 0uLL;
                  v74[1] = 0uLL;
                  v74 += 4;
                  v75 -= 16;
                }
                while (v75);
                v68 = v27 & 0xFFFFFFF0;
                if (v68 == v27)
                  goto LABEL_55;
              }
              else
              {
                v68 = 0;
              }
              v69 = v27 - v68;
              v70 = v68 + v60;
              v71 = v59 + 2 + v70 * 4;
              v72 = &v33[v70];
              do
              {
                *v72++ = *(float *)&v62;
                *(_DWORD *)(v71 - 2) = 0;
                v71 += 4;
                --v69;
              }
              while (v69);
LABEL_55:
              ++v61;
              v65 = (_OWORD *)((char *)v65 + v34);
              v66 = (int32x4_t *)((char *)v66 + v34);
              v60 += v27;
              if (v61 == v26)
              {
                v76 = v26 - 1;
                if (v26 - 1 >= 2 && v27 - 1 >= 2)
                {
                  v77 = &v33[(unint64_t)v34 / 4];
                  v78 = &v32[v27];
                  v79 = v34 + v59 + 6;
                  v80 = 1;
                  v81 = v32;
                  v82 = &v32[2 * v27];
                  do
                  {
                    v83 = v80++;
                    v84 = (_WORD *)v79;
                    v85 = 1;
                    do
                    {
                      v86 = v78[v85];
                      if (((v78[v85 - 1] ^ v86) & 0x80) != 0
                        || ((v78[v85 + 1] ^ v86) & 0x80) != 0
                        || ((v81[v85] ^ v86) & 0x80) != 0
                        || ((v82[v85] ^ v86) & 0x80) != 0)
                      {
                        v77[v85] = 0.0;
                        *(v84 - 1) = v85;
                        *v84 = v83;
                      }
                      ++v85;
                      v84 += 2;
                    }
                    while (2 - v27 + v85 != 1);
                    v82 += v27;
                    v81 += v27;
                    v77 = (float *)((char *)v77 + v34);
                    v78 += v27;
                    v79 += v34;
                  }
                  while (v80 != v76);
                }
                v87 = v26 - 2;
                if (v26 - 2 >= 2 && v27 - 2 >= 2)
                {
                  v88 = 0;
                  v89 = v33 + 1;
                  v90 = (uint64_t)&v33[(unint64_t)v34 / 4 + 1];
                  v91 = v59 + v34;
                  v92 = 1;
                  do
                  {
                    v93 = v88;
                    v94 = 1;
                    do
                    {
                      v96 = *(float *)(v90 + v93);
                      if ((float)(*(float *)((char *)v33 + v93) + 1.4142) < v96)
                      {
                        v97 = *(_DWORD *)(v59 + v93);
                        *(_DWORD *)(v91 + v93 + 4) = v97;
                        v98 = v94 - (unsigned __int16)v97;
                        v99 = v92 - *(unsigned __int16 *)(v91 + v93 + 6);
                        if (v98 >= 0)
                          v100 = v98;
                        else
                          v100 = -v98;
                        if (v99 >= 0)
                          v101 = v92 - *(unsigned __int16 *)(v91 + v93 + 6);
                        else
                          v101 = *(unsigned __int16 *)(v91 + v93 + 6) - v92;
                        if (v101 > 0xFF || v100 >= 0x100)
                        {
                          v96 = sqrtf((float)(v98 * v98 + v99 * v99));
                        }
                        else
                        {
                          if (v100 <= v101)
                            v102 = v101;
                          else
                            v102 = v100;
                          if (v100 >= v101)
                            v103 = v101;
                          else
                            v103 = v100;
                          if (v102 <= 1)
                            LOWORD(v102) = 1;
                          v96 = md::SignedDistanceFieldGenerator::_hypotCache[((unsigned __int16)((v102 - 1) * v102) >> 1)
                                                                            + v103];
                        }
                        *(float *)(v90 + v93) = v96;
                      }
                      if ((float)(*(float *)((char *)v89 + v93) + 1.0) < v96)
                      {
                        v104 = *(_DWORD *)(v59 + v93 + 4);
                        *(_DWORD *)(v91 + v93 + 4) = v104;
                        v105 = v94 - (unsigned __int16)v104;
                        v106 = v92 - *(unsigned __int16 *)(v91 + v93 + 6);
                        if (v105 >= 0)
                          v107 = v105;
                        else
                          v107 = -v105;
                        if (v106 >= 0)
                          v108 = v92 - *(unsigned __int16 *)(v91 + v93 + 6);
                        else
                          v108 = *(unsigned __int16 *)(v91 + v93 + 6) - v92;
                        if (v108 > 0xFF || v107 >= 0x100)
                        {
                          v96 = sqrtf((float)(v105 * v105 + v106 * v106));
                        }
                        else
                        {
                          if (v107 <= v108)
                            v109 = v108;
                          else
                            v109 = v107;
                          if (v107 >= v108)
                            v110 = v108;
                          else
                            v110 = v107;
                          if (v109 <= 1)
                            LOWORD(v109) = 1;
                          v96 = md::SignedDistanceFieldGenerator::_hypotCache[((unsigned __int16)((v109 - 1) * v109) >> 1)
                                                                            + v110];
                        }
                        *(float *)(v90 + v93) = v96;
                      }
                      if ((float)(*(float *)((char *)v89 + v93 + 4) + 1.4142) < v96)
                      {
                        v111 = *(_DWORD *)(v59 + v93 + 8);
                        *(_DWORD *)(v91 + v93 + 4) = v111;
                        v112 = v94 - (unsigned __int16)v111;
                        v113 = v92 - *(unsigned __int16 *)(v91 + v93 + 6);
                        if (v112 >= 0)
                          v114 = v112;
                        else
                          v114 = -v112;
                        if (v113 >= 0)
                          v115 = v92 - *(unsigned __int16 *)(v91 + v93 + 6);
                        else
                          v115 = *(unsigned __int16 *)(v91 + v93 + 6) - v92;
                        if (v115 > 0xFF || v114 >= 0x100)
                        {
                          v96 = sqrtf((float)(v112 * v112 + v113 * v113));
                        }
                        else
                        {
                          if (v114 <= v115)
                            v116 = v115;
                          else
                            v116 = v114;
                          if (v114 >= v115)
                            v117 = v115;
                          else
                            v117 = v114;
                          if (v116 <= 1)
                            LOWORD(v116) = 1;
                          v96 = md::SignedDistanceFieldGenerator::_hypotCache[((unsigned __int16)((v116 - 1) * v116) >> 1)
                                                                            + v117];
                        }
                        *(float *)(v90 + v93) = v96;
                      }
                      if ((float)(*(float *)((char *)&v33[(unint64_t)v34 / 4] + v93) + 1.0) < v96)
                      {
                        v118 = *(_DWORD *)(v91 + v93);
                        *(_DWORD *)(v91 + v93 + 4) = v118;
                        v119 = v94 - (unsigned __int16)v118;
                        v120 = v92 - *(unsigned __int16 *)(v91 + v93 + 6);
                        if (v119 >= 0)
                          v121 = v119;
                        else
                          v121 = -v119;
                        if (v120 >= 0)
                          v122 = v92 - *(unsigned __int16 *)(v91 + v93 + 6);
                        else
                          v122 = *(unsigned __int16 *)(v91 + v93 + 6) - v92;
                        if (v122 > 0xFF || v121 >= 0x100)
                        {
                          v95 = sqrtf((float)(v119 * v119 + v120 * v120));
                        }
                        else
                        {
                          if (v121 <= v122)
                            v123 = v122;
                          else
                            v123 = v121;
                          if (v121 >= v122)
                            v124 = v122;
                          else
                            v124 = v121;
                          if (v123 <= 1)
                            LOWORD(v123) = 1;
                          v95 = md::SignedDistanceFieldGenerator::_hypotCache[((unsigned __int16)((v123 - 1) * v123) >> 1)
                                                                            + v124];
                        }
                        *(float *)(v90 + v93) = v95;
                      }
                      ++v94;
                      v93 += 4;
                    }
                    while (3 - v27 + v94 != 1);
                    ++v92;
                    v88 += v34;
                  }
                  while (v92 != v87);
                }
                if (v26 >= 3 && v27 >= 3)
                {
                  v125 = 0;
                  v126 = v76 * v27;
                  v127 = (uint64_t)&v33[v126 - 2];
                  v128 = v59 + v126 * 4;
                  v129 = 4 * v27 * (unint64_t)v26 - 12;
                  v130 = v59 + v129;
                  v131 = (char *)v33 + v129;
                  do
                  {
                    v133 = v125;
                    v134 = v27 - 2;
                    do
                    {
                      v136 = *(float *)(v127 + v133);
                      if ((float)(*(float *)(v127 + v133 + 4) + 1.0) < v136)
                      {
                        v137 = *(_DWORD *)(v128 + v133 - 4);
                        *(_DWORD *)(v128 + v133 - 8) = v137;
                        v138 = v134 - (unsigned __int16)v137;
                        v139 = v87 - *(unsigned __int16 *)(v128 + v133 - 6);
                        if (v138 >= 0)
                          v140 = v138;
                        else
                          v140 = -v138;
                        if (v139 >= 0)
                          v141 = v87 - *(unsigned __int16 *)(v128 + v133 - 6);
                        else
                          v141 = *(unsigned __int16 *)(v128 + v133 - 6) - v87;
                        if (v141 > 0xFF || v140 >= 0x100)
                        {
                          v136 = sqrtf((float)(v138 * v138 + v139 * v139));
                        }
                        else
                        {
                          if (v140 <= v141)
                            v142 = v141;
                          else
                            v142 = v140;
                          if (v140 >= v141)
                            v143 = v141;
                          else
                            v143 = v140;
                          if (v142 <= 1)
                            LOWORD(v142) = 1;
                          v136 = md::SignedDistanceFieldGenerator::_hypotCache[((unsigned __int16)((v142 - 1) * v142) >> 1)
                                                                             + v143];
                        }
                        *(float *)(v127 + v133) = v136;
                      }
                      if ((float)(*(float *)&v131[v133] + 1.4142) < v136)
                      {
                        v144 = *(_DWORD *)(v130 + v133);
                        *(_DWORD *)(v128 + v133 - 8) = v144;
                        v145 = v134 - (unsigned __int16)v144;
                        v146 = v87 - *(unsigned __int16 *)(v128 + v133 - 6);
                        if (v145 >= 0)
                          v147 = v145;
                        else
                          v147 = -v145;
                        if (v146 >= 0)
                          v148 = v87 - *(unsigned __int16 *)(v128 + v133 - 6);
                        else
                          v148 = *(unsigned __int16 *)(v128 + v133 - 6) - v87;
                        if (v148 > 0xFF || v147 >= 0x100)
                        {
                          v136 = sqrtf((float)(v145 * v145 + v146 * v146));
                        }
                        else
                        {
                          if (v147 <= v148)
                            v149 = v148;
                          else
                            v149 = v147;
                          if (v147 >= v148)
                            v150 = v148;
                          else
                            v150 = v147;
                          if (v149 <= 1)
                            LOWORD(v149) = 1;
                          v136 = md::SignedDistanceFieldGenerator::_hypotCache[((unsigned __int16)((v149 - 1) * v149) >> 1)
                                                                             + v150];
                        }
                        *(float *)(v127 + v133) = v136;
                      }
                      if ((float)(*(float *)&v131[v133 + 4] + 1.0) < v136)
                      {
                        v151 = *(_DWORD *)(v130 + v133 + 4);
                        *(_DWORD *)(v128 + v133 - 8) = v151;
                        v152 = v134 - (unsigned __int16)v151;
                        v153 = v87 - *(unsigned __int16 *)(v128 + v133 - 6);
                        if (v152 >= 0)
                          v154 = v152;
                        else
                          v154 = -v152;
                        if (v153 >= 0)
                          v155 = v87 - *(unsigned __int16 *)(v128 + v133 - 6);
                        else
                          v155 = *(unsigned __int16 *)(v128 + v133 - 6) - v87;
                        if (v155 > 0xFF || v154 >= 0x100)
                        {
                          v136 = sqrtf((float)(v152 * v152 + v153 * v153));
                        }
                        else
                        {
                          if (v154 <= v155)
                            v156 = v155;
                          else
                            v156 = v154;
                          if (v154 >= v155)
                            v157 = v155;
                          else
                            v157 = v154;
                          if (v156 <= 1)
                            LOWORD(v156) = 1;
                          v136 = md::SignedDistanceFieldGenerator::_hypotCache[((unsigned __int16)((v156 - 1) * v156) >> 1)
                                                                             + v157];
                        }
                        *(float *)(v127 + v133) = v136;
                      }
                      if ((float)(*(float *)&v131[v133 + 8] + 1.4142) < v136)
                      {
                        v158 = *(_DWORD *)(v130 + v133 + 8);
                        *(_DWORD *)(v128 + v133 - 8) = v158;
                        v159 = v134 - (unsigned __int16)v158;
                        v160 = v87 - *(unsigned __int16 *)(v128 + v133 - 6);
                        if (v159 >= 0)
                          v161 = v159;
                        else
                          v161 = -v159;
                        if (v160 >= 0)
                          v162 = v87 - *(unsigned __int16 *)(v128 + v133 - 6);
                        else
                          v162 = *(unsigned __int16 *)(v128 + v133 - 6) - v87;
                        if (v162 > 0xFF || v161 >= 0x100)
                        {
                          v135 = sqrtf((float)(v159 * v159 + v160 * v160));
                        }
                        else
                        {
                          if (v161 <= v162)
                            v163 = v162;
                          else
                            v163 = v161;
                          if (v161 >= v162)
                            v164 = v162;
                          else
                            v164 = v161;
                          if (v163 <= 1)
                            LOWORD(v163) = 1;
                          v135 = md::SignedDistanceFieldGenerator::_hypotCache[((unsigned __int16)((v163 - 1) * v163) >> 1)
                                                                             + v164];
                        }
                        *(float *)(v127 + v133) = v135;
                      }
                      --v134;
                      v133 -= 4;
                    }
                    while ((uint64_t)(v134 + 1) > 1);
                    v125 -= v34;
                  }
                  while (v87-- > 1);
                }
                for (i = 0; i != v26; ++i)
                {
                  v166 = v32;
                  v167 = v33;
                  v168 = v27;
                  do
                  {
                    v169 = *v166++;
                    if ((v169 & 0x80000000) == 0)
                      *v167 = -*v167;
                    ++v167;
                    --v168;
                  }
                  while (v168);
                  v33 = (float *)((char *)v33 + v34);
                  v32 += v27;
                }
                goto LABEL_259;
              }
            }
          }
          v298 = v35 - (_QWORD)&v37[-v36];
          v299 = (unint64_t)&v37[-v36];
          if ((v35 & 0x8000000000000000) != 0)
            abort();
          v40 = v39 - v36;
          v41 = 2 * v40;
          if (2 * v40 <= v35)
            v41 = 4 * v27 * v26;
          if (v40 >= 0x3FFFFFFFFFFFFFFFLL)
            v42 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v42 = v41;
          v295 = v42;
          v297 = (char *)*((_QWORD *)v3 + 1);
          v43 = (char *)operator new(v42);
          v296 = &v43[v295];
          v293 = v43;
          v294 = &v43[v35];
          v44 = &v43[v299];
          bzero(&v43[v299], v298);
          if (v37 == v297)
          {
            v47 = v296;
            v45 = v44;
            goto LABEL_52;
          }
          if (v299 < 8)
          {
            v45 = v293;
            goto LABEL_49;
          }
          v45 = v293;
          if ((unint64_t)(v297 - v293) >= 0x20)
          {
            if (v299 >= 0x20)
            {
              v48 = v299 & 0xFFFFFFFFFFFFFFE0;
              v49 = v37 - 16;
              v50 = &v293[v37 - 16 - v297];
              v51 = v299 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v52 = *(_OWORD *)v49;
                *((_OWORD *)v50 - 1) = *((_OWORD *)v49 - 1);
                *(_OWORD *)v50 = v52;
                v50 -= 32;
                v49 -= 32;
                v51 -= 32;
              }
              while (v51);
              if (v299 == v48)
                goto LABEL_51;
              if ((v299 & 0x18) == 0)
              {
                v44 -= v48;
                v37 -= v48;
                goto LABEL_49;
              }
            }
            else
            {
              v48 = 0;
            }
            v53 = v48 - (v299 & 0xFFFFFFFFFFFFFFF8);
            v54 = &v37[-v48 - 8];
            v55 = (char *)(v54 - v297);
            do
            {
              v56 = *(_QWORD *)v54;
              v54 -= 8;
              *(_QWORD *)&v55[(_QWORD)v293] = v56;
              v55 -= 8;
              v53 += 8;
            }
            while (v53);
            if (v299 == (v299 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_51;
            v44 -= v299 & 0xFFFFFFFFFFFFFFF8;
            v37 -= v299 & 0xFFFFFFFFFFFFFFF8;
          }
LABEL_49:
          v57 = v44 - 1;
          do
          {
            v58 = *--v37;
            *v57-- = v58;
          }
          while (v37 != v297);
LABEL_51:
          v37 = v297;
          v47 = v296;
LABEL_52:
          *((_QWORD *)v3 + 1) = v45;
          *((_QWORD *)v3 + 2) = v294;
          *((_QWORD *)v3 + 3) = v47;
          if (v37)
            operator delete(v37);
          goto LABEL_54;
        }
      }
    }
  }
LABEL_259:
  v170 = (float32x4_t **)((char *)v3 + 312);
  bzero(*((void **)v3 + 39), (uint64_t)(*((_QWORD *)v3 + 40) - *((_QWORD *)v3 + 39)) >> 2);
  v171 = v27 / v20;
  v172 = v26 / v20;
  if ((v26 - (v26 / v20) * (unint64_t)v20) | (v27
                                                                                - (v27 / v20)
                                                                                * (unint64_t)v20))
  {
    LODWORD(v172) = 0;
    LODWORD(v171) = 0;
    goto LABEL_261;
  }
  v234 = *((_QWORD *)v3 + 35);
  v235 = v172 * (unint64_t)v171;
  v236 = (char *)*((_QWORD *)v3 + 39);
  v237 = (char *)*((_QWORD *)v3 + 40);
  v238 = (v237 - v236) >> 2;
  if (v235 <= v238)
  {
    if (v235 < v238)
    {
      v237 = &v236[4 * v235];
      *((_QWORD *)v3 + 40) = v237;
    }
  }
  else
  {
    std::vector<float,geo::StdAllocator<float,mdm::Allocator>>::__append((uint64_t)v3 + 312, v235 - v238);
    v236 = (char *)*((_QWORD *)v3 + 39);
    v237 = (char *)*((_QWORD *)v3 + 40);
  }
  bzero(v236, v237 - v236);
  if ((_DWORD)v26 && (_DWORD)v27)
  {
    v239 = *v170;
    v240 = 1.0 / (float)(v20 * v20);
    if (v20 < 8)
    {
      v241 = 0;
      v242 = 0;
      while (1)
      {
        v243 = 0;
        v244 = 0;
        v245 = v241 / v20 * v171;
        v246 = v242 * v27;
        v247 = v27 + v246;
        v248 = (v242 + 2) * v27;
        v249 = (v242 + 3) * v27;
        v250 = (v242 + 4) * v27;
        v251 = (v242 + 5) * v27;
        v252 = (v242 + 6) * v27;
        do
        {
          v255 = *(float *)(v234 + 4 * (v246 + v244));
          if ((_DWORD)v20 != 1)
          {
            v256 = v244 + 1;
            v255 = *(float *)(v234 + 4 * (v246 + v256)) + v255;
            if ((_DWORD)v20 == 2)
            {
              v253 = *(float *)(v234 + 4 * (v247 + v244));
              v254 = v247 + v256;
LABEL_332:
              v255 = (float)(*(float *)(v234 + 4 * v254) + v253) + v255;
              goto LABEL_333;
            }
            v257 = v234 + 4 * (v244 + v246);
            v258 = *(float *)(v257 + 8) + v255;
            if ((_DWORD)v20 != 3)
            {
              v258 = *(float *)(v257 + 12) + v258;
              if ((_DWORD)v20 != 4)
              {
                v259 = v234 + 4 * (v244 + v246);
                v258 = *(float *)(v259 + 16) + v258;
                if ((_DWORD)v20 != 5)
                {
                  v258 = *(float *)(v259 + 20) + v258;
                  if ((_DWORD)v20 != 6)
                    v258 = *(float *)(v234 + 4 * (v244 + v246) + 24) + v258;
                }
              }
            }
            v260 = v244 + 2;
            v261 = (float)(*(float *)(v234 + 4 * (v247 + v260)) + *(float *)(v234 + 4 * (v247 + v244)))
                 + (float)(*(float *)(v234 + 4 * (v247 + v256)) + v258);
            if ((_DWORD)v20 != 3)
            {
              v262 = v234 + 4 * (v244 + v247);
              v261 = *(float *)(v262 + 12) + v261;
              if ((_DWORD)v20 != 4)
              {
                v261 = *(float *)(v262 + 16) + v261;
                if ((_DWORD)v20 != 5)
                {
                  v263 = v234 + 4 * (v244 + v247);
                  v261 = *(float *)(v263 + 20) + v261;
                  if ((_DWORD)v20 != 6)
                    v261 = *(float *)(v263 + 24) + v261;
                }
              }
            }
            v255 = (float)(*(float *)(v234 + 4 * (v248 + v260)) + *(float *)(v234 + 4 * (v248 + v244)))
                 + (float)(*(float *)(v234 + 4 * (v248 + v256)) + v261);
            if ((_DWORD)v20 != 3)
            {
              v264 = v244 + 3;
              v265 = *(float *)(v234 + 4 * (v248 + v264)) + v255;
              if ((_DWORD)v20 != 4)
              {
                v266 = v234 + 4 * (v244 + v248);
                v265 = *(float *)(v266 + 16) + v265;
                if ((_DWORD)v20 != 5)
                {
                  v265 = *(float *)(v266 + 20) + v265;
                  if ((_DWORD)v20 != 6)
                    v265 = *(float *)(v234 + 4 * (v244 + v248) + 24) + v265;
                }
              }
              v255 = (float)(*(float *)(v234 + 4 * (v249 + v264))
                           + (float)(*(float *)(v234 + 4 * (v249 + v260)) + *(float *)(v234 + 4 * (v249 + v244))))
                   + (float)(*(float *)(v234 + 4 * (v249 + v256)) + v265);
              if ((_DWORD)v20 != 4)
              {
                v267 = v244 + 4;
                v268 = *(float *)(v234 + 4 * (v249 + v267)) + v255;
                if ((_DWORD)v20 == 5
                  || (v269 = v234 + 4 * (v244 + v249), v268 = *(float *)(v269 + 20) + v268, (_DWORD)v20 == 6))
                {
                  v270 = (float)(*(float *)(v234 + 4 * (v250 + v256)) + v268) + *(float *)(v234 + 4 * (v250 + v244));
                }
                else
                {
                  v270 = (float)(*(float *)(v234 + 4 * (v250 + v256))
                               + (float)(*(float *)(v234 + 4 * (v250 + v244)) + *(float *)(v269 + 24)))
                       + v268;
                }
                v255 = (float)(*(float *)(v234 + 4 * (v250 + v267)) + *(float *)(v234 + 4 * (v250 + v260)))
                     + (float)(*(float *)(v234 + 4 * (v250 + v264)) + v270);
                if ((_DWORD)v20 != 5)
                {
                  v271 = v244 + 5;
                  v272 = *(float *)(v234 + 4 * (v250 + v271)) + v255;
                  if ((_DWORD)v20 != 6)
                    v272 = *(float *)(v234 + 4 * (v244 + v250) + 24) + v272;
                  v255 = (float)(*(float *)(v234 + 4 * (v251 + v271))
                               + (float)(*(float *)(v234 + 4 * (v251 + v267))
                                       + (float)(*(float *)(v234 + 4 * (v251 + v264))
                                               + (float)(*(float *)(v234 + 4 * (v251 + v260))
                                                       + *(float *)(v234 + 4 * (v251 + v244))))))
                       + (float)(*(float *)(v234 + 4 * (v251 + v256)) + v272);
                  if ((_DWORD)v20 != 6)
                  {
                    v3 = this;
                    v253 = *(float *)(v234 + 4 * (v252 + v271))
                         + (float)(*(float *)(v234 + 4 * (v252 + v267))
                                 + (float)(*(float *)(v234 + 4 * (v252 + v264))
                                         + (float)(*(float *)(v234 + 4 * (v252 + v260))
                                                 + (float)(*(float *)(v234 + 4 * (v252 + v256))
                                                         + (float)(*(float *)(v234 + 4 * (v252 + v244))
                                                                 + *(float *)(v234 + 4 * (v251 + v244 + 6)))))));
                    v254 = v252 + v244 + 6;
                    goto LABEL_332;
                  }
                }
              }
            }
          }
LABEL_333:
          v239->f32[v245 + v243 / v20] = v255 * v240;
          v244 += v20;
          v243 = v244;
        }
        while (v244 < v27);
        v242 += v20;
        v241 = v242;
        if (v242 >= v26)
          goto LABEL_261;
      }
    }
    v273 = 0;
    v274 = 0;
    v275 = v20 & 0xFFFFFFF8;
    v276 = 4 * v27;
    do
    {
      v277 = 0;
      v278 = 0;
      v279 = v27 * v274;
      v280 = v273 / v20 * v171;
      do
      {
        v281 = 0;
        v282 = (float *)(v234 + 4 * (v275 + v279 + v278));
        v283 = v234 + 16 + 4 * (v279 + v278);
        v284 = 0.0;
        do
        {
          v285 = 0uLL;
          v286 = (float32x4_t)LODWORD(v284);
          v287 = (float32x4_t *)v283;
          v288 = v20 & 0xFFFFFFF8;
          do
          {
            v286 = vaddq_f32(v287[-1], v286);
            v285 = vaddq_f32(*v287, v285);
            v287 += 2;
            v288 -= 8;
          }
          while (v288);
          v289 = vaddq_f32(v285, v286);
          v284 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v289, v289));
          v290 = v282;
          v291 = v20 - (v20 & 0xFFFFFFF8);
          if (v20 != v275)
          {
            do
            {
              v292 = *v290++;
              v284 = v292 + v284;
              --v291;
            }
            while (v291);
          }
          ++v281;
          v283 += v276;
          v282 = (float *)((char *)v282 + v276);
        }
        while (v281 != v20);
        v239->f32[v280 + v277 / v20] = v284 * v240;
        v278 += v20;
        v277 = v278;
      }
      while (v278 < v27);
      v274 += v20;
      v273 = v274;
    }
    while (v274 < v26);
  }
LABEL_261:
  v173 = *((_DWORD *)v3 + 27);
  v174 = (int8x16_t **)((char *)v3 + 344);
  v175 = (v172 * v171);
  v176 = (char *)*((_QWORD *)v3 + 43);
  v177 = (char *)*((_QWORD *)v3 + 44);
  if (v175 <= v177 - v176)
  {
    if (v175 < v177 - v176)
    {
      v177 = &v176[v175];
      *((_QWORD *)v3 + 44) = &v176[v175];
    }
  }
  else
  {
    std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append((unint64_t)v3 + 344, v175 - (v177 - v176));
    v176 = (char *)*((_QWORD *)v3 + 43);
    v177 = (char *)*((_QWORD *)v3 + 44);
  }
  bzero(v176, v177 - v176);
  v181 = *v174;
  v182 = v171;
  if (*v174 && (_DWORD)v172 && (_DWORD)v171)
  {
    v183 = 0;
    *(float *)v178.i32 = (float)(v173 * v20);
    v184 = *v170;
    *(float *)&v179 = -*(float *)v178.i32;
    v185 = 4 * v171;
    v186 = (float32x4_t)vdupq_lane_s32(v178, 0);
    v187 = (float32x4_t)vdupq_lane_s32((int32x2_t)v179, 0);
    *(float *)v180.i32 = (float)(1.0 / *(float *)v178.i32) * 127.5;
    v188 = (float32x4_t)vdupq_lane_s32(v180, 0);
    v189 = v171 & 0xFFFFFFF8;
    v190 = (float32x4_t)vdupq_n_s32(0x42FF0000u);
    v191 = *v170;
    v192 = *v174;
    do
    {
      if (v171 >= 8)
      {
        if (&v181->i8[v183 * v171] >= (char *)v184 + v185 + v185 * v183
          || (char *)v184 + v185 * v183 >= &v181->i8[v183 * v171 + v171])
        {
          if (v171 < 0x10)
          {
            v195 = 0;
LABEL_279:
            v196 = 4 * v195;
            do
            {
              v311.val[1] = (int8x16_t)vcvtq_u32_f32(vmlaq_f32(v190, vmaxnmq_f32(v187, vminnmq_f32(*(float32x4_t *)((char *)v191 + v196 + 16), v186)), v188));
              v311.val[0] = (int8x16_t)vcvtq_u32_f32(vmlaq_f32(v190, vmaxnmq_f32(v187, vminnmq_f32(*(float32x4_t *)((char *)v191 + v196), v186)), v188));
              *(uint64_t *)((char *)v192->i64 + v195) = vqtbl2q_s8(v311, (int8x16_t)xmmword_19FFB5D40).u64[0];
              v195 += 8;
              v196 += 32;
            }
            while (v189 != v195);
            v193 = v171 & 0xFFFFFFF8;
            if (v189 == v171)
              goto LABEL_269;
            goto LABEL_282;
          }
          v197 = v171 & 0xFFFFFFF0;
          v198 = v191;
          v199 = v192;
          do
          {
            v312.val[1] = (int8x16_t)vcvtq_u32_f32(vmlaq_f32(v190, vmaxnmq_f32(v187, vminnmq_f32(v198[1], v186)), v188));
            v312.val[0] = (int8x16_t)vcvtq_u32_f32(vmlaq_f32(v190, vmaxnmq_f32(v187, vminnmq_f32(*v198, v186)), v188));
            v312.val[2] = (int8x16_t)vcvtq_u32_f32(vmlaq_f32(v190, vmaxnmq_f32(v187, vminnmq_f32(v198[2], v186)), v188));
            v312.val[3] = (int8x16_t)vcvtq_u32_f32(vmlaq_f32(v190, vmaxnmq_f32(v187, vminnmq_f32(v198[3], v186)), v188));
            *v199++ = vqtbl4q_s8(v312, (int8x16_t)xmmword_19FFB4E00);
            v198 += 4;
            v197 -= 16;
          }
          while (v197);
          if ((v171 & 0xFFFFFFF0) == v171)
            goto LABEL_269;
          v195 = v171 & 0xFFFFFFF0;
          v193 = v195;
          if ((v171 & 8) != 0)
            goto LABEL_279;
        }
        else
        {
          v193 = 0;
        }
      }
      else
      {
        v193 = 0;
      }
      do
      {
LABEL_282:
        v192->i8[v193] = (int)(float)((float)((float)(fmaxf(*(float *)&v179, fminf(v191->f32[v193], *(float *)v178.i32))
                                                    * 127.5)
                                            * (float)(1.0 / *(float *)v178.i32))
                                    + 127.5);
        ++v193;
      }
      while (v171 != v193);
LABEL_269:
      ++v183;
      v192 = (int8x16_t *)((char *)v192 + v171);
      v191 = (float32x4_t *)((char *)v191 + v185);
    }
    while (v183 != v172);
  }
  *((_DWORD *)a2 + 18) = v171;
  *((_DWORD *)a2 + 19) = v172;
  LODWORD(v179) = *((_DWORD *)v3 + 27);
  *((float32x2_t *)a2 + 8) = vcvt_f32_f64(vsubq_f64(vdivq_f64(v305, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v20), 0)), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v179), 0)));
  *((float *)a2 + 26) = 1.0 / v310;
  v200 = operator new(0x60uLL);
  v200[1] = 0;
  v200[2] = 0;
  *v200 = &off_1E42DEFB8;
  v201 = ggl::TextureData2D::TextureData2D((uint64_t)(v200 + 3), v171, v172, 1u, 6, 1);
  v202 = (std::__shared_weak_count *)*((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 10) = v201;
  *((_QWORD *)a2 + 11) = v200;
  if (v202)
  {
    v203 = (unint64_t *)&v202->__shared_owners_;
    do
      v204 = __ldaxr(v203);
    while (__stlxr(v204 - 1, v203));
    if (!v204)
    {
      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
      std::__shared_weak_count::__release_weak(v202);
    }
  }
  v205 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)a2 + 10) + 16))(*((_QWORD *)a2 + 10), 0);
  if ((_DWORD)v175)
  {
    v206 = 0;
    if ((_DWORD)v175 == 1)
      goto LABEL_300;
    if (v175 - 2147483649u < 0xFFFFFFFF80000000)
      goto LABEL_300;
    v207 = 0;
    v206 = v175 & 0xFFFFFFFE;
    v208 = v206;
    do
    {
      v209 = v205 + (v207 & 0xFFFFFFFC);
      *(_BYTE *)(v209 + 1) = -1;
      *(_BYTE *)(v209 + 3) = -1;
      v207 += 4;
      v208 -= 2;
    }
    while (v208);
    if (v206 != v175)
    {
LABEL_300:
      v210 = v175 - v206;
      v211 = 2 * v206;
      do
      {
        *(_BYTE *)(v205 + (v211 & 0xFFFFFFFE) + 1) = -1;
        v211 += 2;
        --v210;
      }
      while (v210);
    }
  }
  v212 = v308;
  if (v171 >= v308)
    v213 = v308;
  else
    v213 = v171;
  if (v172 >= v307)
    v214 = v307;
  else
    v214 = v172;
  v215 = (_QWORD *)((char *)v3 + 376);
  v216 = (char *)*((_QWORD *)v3 + 47);
  v217 = (char *)*((_QWORD *)v3 + 48);
  if (v175 <= v217 - v216)
  {
    if (v175 < v217 - v216)
    {
      v217 = &v216[v175];
      *((_QWORD *)v3 + 48) = &v216[v175];
    }
  }
  else
  {
    std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append((unint64_t)v3 + 376, v175 - (v217 - v216));
    v216 = (char *)*((_QWORD *)v3 + 47);
    v217 = (char *)*((_QWORD *)v3 + 48);
  }
  bzero(v216, v217 - v216);
  LODWORD(v218) = *((_DWORD *)v3 + 27);
  v219 = (double)v218;
  v220 = v219 - v309.f64[1] + *((float *)a2 + 17);
  v221 = (int)v220 & ~((int)v220 >> 31);
  if ((_DWORD)v214 != (_DWORD)v221)
  {
    v222 = *((float *)a2 + 16) - v309.f64[0] + v219;
    v223 = (int)v222 & ~((int)v222 >> 31);
    v224 = (char *)*((_QWORD *)this + 47);
    v225 = v213 - v223;
    v226 = v214 - v221;
    v227 = (char *)(*v300 + v223 + v212 * (unint64_t)v221);
    do
    {
      memcpy(v224, v227, v225);
      v227 += v212;
      v224 += v182;
      --v226;
    }
    while (v226);
  }
  v4 = v301;
  if ((_DWORD)v175)
  {
    v228 = 0;
    for (j = 0; j != v175; ++j)
    {
      v230 = (*v174)->i8[j];
      *(_BYTE *)((*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)a2 + 10) + 16))(*((_QWORD *)a2 + 10), 0)
               + v228
               + 1) = v230;
      v231 = *(_BYTE *)(*v215 + j);
      *(_BYTE *)((*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)a2 + 10) + 16))(*((_QWORD *)a2 + 10), 0)
               + v228) = v231;
      v228 += 2;
    }
  }
LABEL_318:
  std::mutex::unlock(v4);
  v232 = (unint64_t *)((char *)this + 424);
  do
    v233 = __ldaxr(v232);
  while (__stlxr(v233 + 1, v232));
}

void sub_19F031898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::mutex *a18)
{
  std::mutex::unlock(a18);
  _Unwind_Resume(a1);
}

uint64_t ggl::TextureData2D::mipData(ggl::TextureData2D *this, unsigned int a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 4) + 8 * a2);
}

void md::SDFGlyphRenderer::renderGlyph(uint64_t a1, uint64_t a2, CGFontRef font, int a4, CGGlyph a5, unsigned int a6, unsigned int a7, unsigned int a8, float a9, unsigned int a10, unsigned int a11, unint64_t a12)
{
  int UnitsPerEm;
  double v20;
  unsigned int v22;
  unsigned int v23;
  double v24;
  unsigned int v25;
  double v26;
  unsigned int v27;
  int v28;
  int v30;
  double height;
  float v32;
  float v33;
  double v34;
  float v35;
  CGFontRef v36;
  signed int v37;
  signed int v38;
  unsigned int v39;
  double v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  void **v48;
  float *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  const __CTFont *v56;
  CTFontRef v57;
  CTFontRef v58;
  float *v59;
  float *v60;
  uint64_t *v61;
  uint64_t v62;
  const void *v63;
  const void *v64;
  CGFloat x;
  const void *v66;
  float *v67;
  float **v68;
  uint64_t v69;
  CFHashCode v70;
  uint64_t v71;
  CFHashCode v72;
  unint64_t v73;
  unint64_t v74;
  uint8x8_t v75;
  float **v76;
  float *v77;
  unint64_t v78;
  uint64_t v79;
  float *v80;
  float v81;
  float v82;
  _BOOL8 v83;
  unint64_t v84;
  unint64_t v85;
  size_t prime;
  void *v87;
  void *v88;
  uint64_t v89;
  CGFloat v90;
  size_t v91;
  size_t v92;
  size_t v93;
  _QWORD *i;
  size_t v95;
  uint64_t v96;
  unint64_t v97;
  uint8x8_t v98;
  uint64_t v99;
  double v100;
  uint64_t v101;
  size_t v102;
  _QWORD *v103;
  unint64_t v104;
  CGFloat v105;
  void *v106;
  size_t v107;
  size_t v108;
  unsigned int v109;
  unint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  unint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  CGColorSpace *v118;
  CGContext *v119;
  CGContext *v120;
  const __CTFont *v121;
  CGColor *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  _BYTE *v127;
  unint64_t v128;
  char v129;
  CGSize size;
  uint64_t v131;
  CGFloat v132;
  const void *v133;
  uint64_t *v134;
  uint64_t v135;
  const void *v136;
  const void *v137;
  float *v138;
  _QWORD *v139;
  const void *v140;
  CGFloat *v141;
  const __CTFont *v142;
  uint64_t v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v150;
  CGAffineTransform transform;
  CGRect bboxes;
  CGGlyph glyphs;
  uint64_t (**v154)();
  CFTypeRef v155;
  float v156;
  void *__p;
  char v158;
  CGRect boundingRects;
  uint64_t (**v160)();
  const void *v161;
  uint64_t v162;
  CGRect v163;
  CGRect v164;

  v162 = *MEMORY[0x1E0C80C00];
  glyphs = a5;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  UnitsPerEm = CGFontGetUnitsPerEm(font);
  CGFontGetGlyphBBoxes(font, &glyphs, 1uLL, &bboxes);
  v20 = (float)(a9 / (float)UnitsPerEm);
  bboxes.origin.x = bboxes.origin.x * v20;
  v163.origin.x = bboxes.origin.x;
  bboxes.origin.y = bboxes.origin.y * v20;
  v163.origin.y = bboxes.origin.y;
  v163.size.width = bboxes.size.width * v20;
  v163.size.height = bboxes.size.height * v20;
  bboxes.size.width = v163.size.width;
  bboxes.size.height = v163.size.height;
  v164 = CGRectIntegral(v163);
  v22 = a8 / a11 * a11;
  v23 = a10 / a11 * a11;
  bboxes.size.width = v164.size.width;
  v24 = (double)(2 * a6);
  v25 = (v164.size.width + v24);
  v26 = (double)(2 * a7);
  bboxes.size.height = v164.size.height;
  v27 = (v164.size.height + v26);
  v28 = v25 - v22;
  if (v25 > v22 || v27 > v23)
  {
    v30 = v27 - v23;
    if (v28 <= (int)(v27 - v23))
    {
      height = v164.size.height;
    }
    else
    {
      v30 = v28;
      height = v164.size.width;
    }
    v32 = height - (double)v30;
    v33 = height;
    v35 = v32 / v33;
    v34 = (float)(v32 / v33);
    v164.origin.x = floor(v164.origin.x * v34);
    v164.origin.y = floor(v164.origin.y * v34);
    bboxes.size.width = floor(v164.size.width * v34);
    bboxes.size.height = floor(v164.size.height * v34);
    a9 = v35 * a9;
    v25 = (bboxes.size.width + v24);
    v27 = (bboxes.size.height + v26);
  }
  else
  {
    v35 = 1.0;
  }
  v36 = font;
  v37 = (int)v164.origin.x % a11;
  v38 = (int)v164.origin.y % a11;
  v39 = a11 - v37;
  if (v37 <= 0)
    v39 = 0;
  v40 = v164.origin.x + (double)v39;
  v41 = a11 - v38;
  if (v38 <= 0)
    v41 = 0;
  bboxes.origin.x = v40;
  bboxes.origin.y = v164.origin.y + (double)v41;
  v42 = v37 + v25;
  if (v22 >= v42)
    v43 = v42;
  else
    v43 = v22;
  if (v23 >= v38 + v27)
    v44 = v38 + v27;
  else
    v44 = a10 / a11 * a11;
  v45 = v44 % a11;
  if (v43 % a11)
    v46 = a11 - v43 % a11;
  else
    v46 = 0;
  v47 = a11 - v45;
  if (!v45)
    v47 = 0;
  v147 = v47;
  v148 = v46;
  v154 = &off_1E42B4830;
  if (font)
  {
    CFRetain(font);
    v36 = font;
  }
  v144 = v44;
  v145 = v43;
  v150 = a6;
  v143 = a1;
  v146 = a7;
  v155 = v36;
  v156 = a9;
  v48 = (void **)(a2 + 120);
  v49 = std::__hash_table<std::__hash_value_type<md::SDFGlyphRenderer::CTFontKey,std::__list_iterator<std::pair<md::SDFGlyphRenderer::CTFontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::__unordered_map_hasher<md::SDFGlyphRenderer::CTFontKey,std::__hash_value_type<md::SDFGlyphRenderer::CTFontKey,std::__list_iterator<std::pair<md::SDFGlyphRenderer::CTFontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,md::SDFGlyphRenderer::CTFontKeyHash,std::equal_to<md::SDFGlyphRenderer::CTFontKey>,true>,std::__unordered_map_equal<md::SDFGlyphRenderer::CTFontKey,std::__hash_value_type<md::SDFGlyphRenderer::CTFontKey,std::__list_iterator<std::pair<md::SDFGlyphRenderer::CTFontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::equal_to<md::SDFGlyphRenderer::CTFontKey>,md::SDFGlyphRenderer::CTFontKeyHash,true>,std::allocator<std::__hash_value_type<md::SDFGlyphRenderer::CTFontKey,std::__list_iterator<std::pair<md::SDFGlyphRenderer::CTFontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>>>::find<md::SDFGlyphRenderer::CTFontKey>((_QWORD *)(a2 + 120), (uint64_t)&v154);
  v50 = (uint64_t *)(a2 + 160);
  if (v49)
  {
    v51 = *(uint64_t **)(a2 + 168);
    v52 = (uint64_t *)*((_QWORD *)v49 + 6);
    if (v51 != v52)
    {
      v53 = (uint64_t *)v52[1];
      if (v53 != v51)
      {
        v54 = *v52;
        *(_QWORD *)(v54 + 8) = v53;
        *(_QWORD *)v52[1] = v54;
        v55 = *v51;
        *(_QWORD *)(v55 + 8) = v52;
        *v52 = v55;
        *v51 = (uint64_t)v52;
        v52[1] = (uint64_t)v51;
        v51 = *(uint64_t **)(a2 + 168);
      }
    }
    if (v51 != v50)
    {
      ++*(_DWORD *)(a2 + 412);
      v56 = (const __CTFont *)v51[7];
      if (v56)
        CFRetain((CFTypeRef)v51[7]);
      goto LABEL_150;
    }
  }
  ++*(_DWORD *)(a2 + 416);
  v57 = CTFontCreateWithGraphicsFont(v36, a9, 0, 0);
  v58 = v57;
  v142 = v57;
  if (v57)
  {
    CFRetain(v57);
    CFRetain(v58);
  }
  v59 = std::__hash_table<std::__hash_value_type<md::SDFGlyphRenderer::CTFontKey,std::__list_iterator<std::pair<md::SDFGlyphRenderer::CTFontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::__unordered_map_hasher<md::SDFGlyphRenderer::CTFontKey,std::__hash_value_type<md::SDFGlyphRenderer::CTFontKey,std::__list_iterator<std::pair<md::SDFGlyphRenderer::CTFontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,md::SDFGlyphRenderer::CTFontKeyHash,std::equal_to<md::SDFGlyphRenderer::CTFontKey>,true>,std::__unordered_map_equal<md::SDFGlyphRenderer::CTFontKey,std::__hash_value_type<md::SDFGlyphRenderer::CTFontKey,std::__list_iterator<std::pair<md::SDFGlyphRenderer::CTFontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::equal_to<md::SDFGlyphRenderer::CTFontKey>,md::SDFGlyphRenderer::CTFontKeyHash,true>,std::allocator<std::__hash_value_type<md::SDFGlyphRenderer::CTFontKey,std::__list_iterator<std::pair<md::SDFGlyphRenderer::CTFontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>>>::find<md::SDFGlyphRenderer::CTFontKey>((_QWORD *)(a2 + 120), (uint64_t)&v154);
  v60 = v59;
  if (v59)
  {
    v61 = (uint64_t *)*((_QWORD *)v59 + 6);
    v62 = *v61;
    *(_QWORD *)(v62 + 8) = v61[1];
    *(_QWORD *)v61[1] = v62;
    --*(_QWORD *)(a2 + 176);
    v61[6] = (uint64_t)&off_1E42B4950;
    v63 = (const void *)v61[7];
    if (v63)
      CFRelease(v63);
    v61[2] = (uint64_t)&off_1E42B4830;
    v64 = (const void *)v61[3];
    if (v64)
      CFRelease(v64);
    operator delete(v61);
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&boundingRects, (_QWORD *)(a2 + 120), v60);
    x = boundingRects.origin.x;
    if (*(_QWORD *)&boundingRects.origin.x)
    {
      if (LOBYTE(boundingRects.size.width))
      {
        *(_QWORD *)(*(_QWORD *)&boundingRects.origin.x + 16) = &off_1E42B4830;
        v66 = *(const void **)(*(_QWORD *)&x + 24);
        if (v66)
          CFRelease(v66);
      }
      operator delete(*(void **)&x);
    }
  }
  v67 = (float *)operator new(0x48uLL);
  *(_QWORD *)v67 = 0;
  *((_QWORD *)v67 + 1) = 0;
  *((_QWORD *)v67 + 2) = &off_1E42B4830;
  if (font)
    CFRetain(font);
  *((_QWORD *)v67 + 3) = font;
  v67[10] = a9;
  *((_QWORD *)v67 + 6) = &off_1E42B4950;
  if (v58)
    CFRetain(v58);
  *((_QWORD *)v67 + 7) = v58;
  v68 = *(float ***)(a2 + 168);
  *(_QWORD *)v67 = v50;
  *((_QWORD *)v67 + 1) = v68;
  *v68 = v67;
  v69 = *(_QWORD *)(a2 + 176) + 1;
  *(_QWORD *)(a2 + 168) = v67;
  *(_QWORD *)(a2 + 176) = v69;
  v70 = CFHash(font);
  v71 = LODWORD(a9) - 0x61C8864680B583EBLL;
  if (a9 == 0.0)
    v71 = 0x9E3779B97F4A7C15;
  v72 = ((v70 >> 2) + (v70 << 6) + v71) ^ v70;
  v73 = *(_QWORD *)(a2 + 128);
  v74 = v72;
  if (v73)
  {
    v75 = (uint8x8_t)vcnt_s8((int8x8_t)v73);
    v75.i16[0] = vaddlv_u8(v75);
    if (v75.u32[0] > 1uLL)
    {
      v36 = (CGFontRef)(((v70 >> 2) + (v70 << 6) + v71) ^ v70);
      if (v72 >= v73)
        v36 = (CGFontRef)(v72 % v73);
    }
    else
    {
      v36 = (CGFontRef)(v72 & (v73 - 1));
    }
    v76 = (float **)*((_QWORD *)*v48 + (_QWORD)v36);
    if (v76)
    {
      v77 = *v76;
      if (*v76)
      {
        if (v75.u32[0] < 2uLL)
        {
          while (1)
          {
            v79 = *((_QWORD *)v77 + 1);
            if (v79 == v72)
            {
              if (v77[10] == a9 && CFEqual(*((CFTypeRef *)v77 + 3), font))
                goto LABEL_138;
            }
            else if ((CGFontRef)(v79 & (v73 - 1)) != v36)
            {
              goto LABEL_76;
            }
            v77 = *(float **)v77;
            if (!v77)
              goto LABEL_76;
          }
        }
        do
        {
          v78 = *((_QWORD *)v77 + 1);
          if (v78 == v72)
          {
            if (v77[10] == a9 && CFEqual(*((CFTypeRef *)v77 + 3), font))
              goto LABEL_138;
          }
          else
          {
            if (v78 >= v73)
              v78 %= v73;
            if ((CGFontRef)v78 != v36)
            {
LABEL_76:
              v72 = v74;
              break;
            }
          }
          v77 = *(float **)v77;
          v72 = v74;
        }
        while (v77);
      }
    }
  }
  v80 = (float *)operator new(0x38uLL);
  *(_QWORD *)&boundingRects.origin.x = v80;
  *(_QWORD *)&boundingRects.origin.y = a2 + 136;
  v141 = (CGFloat *)(a2 + 136);
  LOBYTE(boundingRects.size.width) = 0;
  *(_QWORD *)v80 = 0;
  *((_QWORD *)v80 + 1) = v72;
  *((_QWORD *)v80 + 2) = &off_1E42B4830;
  if (font)
    CFRetain(font);
  *((_QWORD *)v80 + 3) = font;
  v80[10] = a9;
  *((_QWORD *)v80 + 6) = v67;
  LOBYTE(boundingRects.size.width) = 1;
  v81 = (float)(unint64_t)(*(_QWORD *)(a2 + 144) + 1);
  v82 = *(float *)(a2 + 152);
  if (!v73 || (float)(v82 * (float)v73) < v81)
  {
    v83 = 1;
    if (v73 >= 3)
      v83 = (v73 & (v73 - 1)) != 0;
    v84 = v83 | (2 * v73);
    v85 = vcvtps_u32_f32(v81 / v82);
    if (v84 <= v85)
      prime = v85;
    else
      prime = v84;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v73 = *(_QWORD *)(a2 + 128);
    if (prime <= v73)
    {
      if (prime >= v73)
        goto LABEL_116;
      v97 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 144) / *(float *)(a2 + 152));
      if (v73 < 3 || (v98 = (uint8x8_t)vcnt_s8((int8x8_t)v73), v98.i16[0] = vaddlv_u8(v98), v98.u32[0] > 1uLL))
      {
        v97 = std::__next_prime(v97);
      }
      else
      {
        v99 = 1 << -(char)__clz(v97 - 1);
        if (v97 >= 2)
          v97 = v99;
      }
      if (prime <= v97)
        prime = v97;
      if (prime >= v73)
      {
        v73 = *(_QWORD *)(a2 + 128);
LABEL_116:
        if ((v73 & (v73 - 1)) != 0)
        {
          if (v74 >= v73)
            v36 = (CGFontRef)(v74 % v73);
          else
            v36 = (CGFontRef)v74;
        }
        else
        {
          v36 = (CGFontRef)((v73 - 1) & v74);
        }
        goto LABEL_129;
      }
      if (!prime)
      {
        v106 = *v48;
        *v48 = 0;
        if (v106)
          operator delete(v106);
        v73 = 0;
        *(_QWORD *)(a2 + 128) = 0;
        goto LABEL_116;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v87 = operator new(8 * prime);
    v88 = *v48;
    *v48 = v87;
    if (v88)
      operator delete(v88);
    v89 = 0;
    *(_QWORD *)(a2 + 128) = prime;
    do
      *((_QWORD *)*v48 + v89++) = 0;
    while (prime != v89);
    v90 = *v141;
    if (!*(_QWORD *)v141)
    {
LABEL_115:
      v73 = prime;
      goto LABEL_116;
    }
    v91 = *(_QWORD *)(*(_QWORD *)&v90 + 8);
    v92 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v93 = v91 & v92;
      *((_QWORD *)*v48 + v93) = v141;
      for (i = **(_QWORD ***)&v90; **(_QWORD **)&v90; i = **(_QWORD ***)&v90)
      {
        v95 = i[1] & v92;
        if (v95 == v93)
        {
          v90 = *(double *)&i;
        }
        else if (*((_QWORD *)*v48 + v95))
        {
          **(_QWORD **)&v90 = *i;
          v96 = 8 * v95;
          *i = **(_QWORD **)((char *)*v48 + v96);
          **(double **)((char *)*v48 + v96) = *(double *)&i;
        }
        else
        {
          *((CGFloat *)*v48 + v95) = v90;
          v90 = *(double *)&i;
          v93 = v95;
        }
      }
      goto LABEL_115;
    }
    if (v91 >= prime)
      v91 %= prime;
    *((_QWORD *)*v48 + v91) = v141;
    v100 = **(double **)&v90;
    if (!**(_QWORD **)&v90)
      goto LABEL_115;
    while (1)
    {
      v102 = *(_QWORD *)(*(_QWORD *)&v100 + 8);
      if (v102 >= prime)
        v102 %= prime;
      if (v102 != v91)
      {
        if (!*((_QWORD *)*v48 + v102))
        {
          *((CGFloat *)*v48 + v102) = v90;
          goto LABEL_120;
        }
        **(_QWORD **)&v90 = **(_QWORD **)&v100;
        v101 = 8 * v102;
        **(_QWORD **)&v100 = **(_QWORD **)((char *)*v48 + v101);
        **(double **)((char *)*v48 + v101) = v100;
        v100 = v90;
      }
      v102 = v91;
LABEL_120:
      v90 = v100;
      v100 = **(double **)&v100;
      v91 = v102;
      if (v100 == 0.0)
        goto LABEL_115;
    }
  }
LABEL_129:
  v103 = (_QWORD *)*((_QWORD *)*v48 + (_QWORD)v36);
  if (v103)
  {
    **(_QWORD **)&boundingRects.origin.x = *v103;
    *v103 = *(_QWORD *)&boundingRects.origin.x;
  }
  else
  {
    **(_QWORD **)&boundingRects.origin.x = *(_QWORD *)v141;
    *v141 = boundingRects.origin.x;
    *((_QWORD *)*v48 + (_QWORD)v36) = v141;
    if (**(_QWORD **)&boundingRects.origin.x)
    {
      v104 = *(_QWORD *)(**(_QWORD **)&boundingRects.origin.x + 8);
      if ((v73 & (v73 - 1)) != 0)
      {
        if (v104 >= v73)
          v104 %= v73;
      }
      else
      {
        v104 &= v73 - 1;
      }
      *((_QWORD *)*v48 + v104) = *(_QWORD *)&boundingRects.origin.x;
    }
  }
  ++*(_QWORD *)(a2 + 144);
LABEL_138:
  v56 = v142;
  if (!v142)
    goto LABEL_186;
  v105 = *(double *)&v142;
LABEL_185:
  CFRelease(*(CFTypeRef *)&v105);
LABEL_186:
  while (*(_QWORD *)(a2 + 176) > *(_QWORD *)(a2 + 112))
  {
    v131 = *v50;
    *(_QWORD *)&boundingRects.origin.x = &off_1E42B4830;
    v132 = *(double *)(v131 + 24);
    if (v132 != 0.0)
      CFRetain(*(CFTypeRef *)(v131 + 24));
    boundingRects.origin.y = v132;
    LODWORD(boundingRects.size.height) = *(_DWORD *)(v131 + 40);
    v160 = &off_1E42B4950;
    v133 = *(const void **)(v131 + 56);
    if (v133)
      CFRetain(*(CFTypeRef *)(v131 + 56));
    v161 = v133;
    v134 = *(uint64_t **)(a2 + 160);
    v135 = *v134;
    *(_QWORD *)(v135 + 8) = v134[1];
    *(_QWORD *)v134[1] = v135;
    --*(_QWORD *)(a2 + 176);
    v134[6] = (uint64_t)&off_1E42B4950;
    v136 = (const void *)v134[7];
    if (v136)
      CFRelease(v136);
    v134[2] = (uint64_t)&off_1E42B4830;
    v137 = (const void *)v134[3];
    if (v137)
      CFRelease(v137);
    operator delete(v134);
    v138 = std::__hash_table<std::__hash_value_type<md::SDFGlyphRenderer::CTFontKey,std::__list_iterator<std::pair<md::SDFGlyphRenderer::CTFontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::__unordered_map_hasher<md::SDFGlyphRenderer::CTFontKey,std::__hash_value_type<md::SDFGlyphRenderer::CTFontKey,std::__list_iterator<std::pair<md::SDFGlyphRenderer::CTFontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,md::SDFGlyphRenderer::CTFontKeyHash,std::equal_to<md::SDFGlyphRenderer::CTFontKey>,true>,std::__unordered_map_equal<md::SDFGlyphRenderer::CTFontKey,std::__hash_value_type<md::SDFGlyphRenderer::CTFontKey,std::__list_iterator<std::pair<md::SDFGlyphRenderer::CTFontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::equal_to<md::SDFGlyphRenderer::CTFontKey>,md::SDFGlyphRenderer::CTFontKeyHash,true>,std::allocator<std::__hash_value_type<md::SDFGlyphRenderer::CTFontKey,std::__list_iterator<std::pair<md::SDFGlyphRenderer::CTFontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>>>::find<md::SDFGlyphRenderer::CTFontKey>((_QWORD *)(a2 + 120), (uint64_t)&boundingRects);
    if (v138)
    {
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, (_QWORD *)(a2 + 120), v138);
      v139 = __p;
      if (__p)
      {
        if (v158)
        {
          *((_QWORD *)__p + 2) = &off_1E42B4830;
          v140 = (const void *)v139[3];
          if (v140)
            CFRelease(v140);
        }
        operator delete(v139);
      }
    }
    if (v133)
      CFRelease(v133);
    if (v132 != 0.0)
    {
      v105 = v132;
      goto LABEL_185;
    }
  }
  if (v142)
    CFRelease(v142);
  v36 = font;
LABEL_150:
  if (v155)
    CFRelease(v155);
  v107 = v148 + v145;
  v108 = v147 + v144;
  if (a4)
  {
    CTFontGetOpticalBoundsForGlyphs(v56, &glyphs, &boundingRects, 1, 0);
    v109 = v146;
    bboxes.origin = (CGPoint)vaddq_f64((float64x2_t)bboxes.origin, (float64x2_t)boundingRects.origin);
    v110 = (4 * v108 * v107);
    v111 = *(char **)a12;
    v112 = *(char **)(a12 + 8);
    v113 = &v112[-*(_QWORD *)a12];
    if (v110 <= (unint64_t)v113)
    {
      if (v110 < (unint64_t)v113)
      {
        v112 = &v111[v110];
        *(_QWORD *)(a12 + 8) = &v111[v110];
      }
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(a12, v110 - (_QWORD)v113);
      v111 = *(char **)a12;
      v112 = *(char **)(a12 + 8);
    }
    if (v112 - v111 >= 1)
      bzero(v111, v112 - v111);
    v118 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA00]);
    v119 = CGBitmapContextCreate(*(void **)a12, v107, v108, 8uLL, (4 * v107), v118, 1u);
  }
  else
  {
    v114 = (v108 * v107);
    v115 = *(char **)a12;
    v116 = *(char **)(a12 + 8);
    v117 = &v116[-*(_QWORD *)a12];
    v109 = v146;
    if (v114 <= (unint64_t)v117)
    {
      if (v114 < (unint64_t)v117)
      {
        v116 = &v115[v114];
        *(_QWORD *)(a12 + 8) = &v115[v114];
      }
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(a12, v114 - (_QWORD)v117);
      v115 = *(char **)a12;
      v116 = *(char **)(a12 + 8);
    }
    if (v116 - v115 >= 1)
      bzero(v115, v116 - v115);
    v118 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D978]);
    v119 = CGBitmapContextCreate(*(void **)a12, v107, v108, 8uLL, v107, v118, 0);
  }
  v120 = v119;
  CGContextSaveGState(v119);
  transform.b = 0.0;
  transform.c = 0.0;
  transform.a = 1.0;
  *(_OWORD *)&transform.d = xmmword_19FFB15E0;
  transform.ty = (double)v108;
  CGContextConcatCTM(v120, &transform);
  CGContextSetFont(v120, v36);
  CGContextSetFontSize(v120, a9);
  if ((a4 & 1) == 0)
  {
    v121 = v56;
    boundingRects.origin = (CGPoint)xmmword_19FFB63A0;
    v122 = CGColorCreate(v118, &boundingRects.origin.x);
    CGContextSetFillColorWithColor(v120, v122);
    CGContextSetTextDrawingMode(v120, kCGTextFill);
    if (v122)
      CFRelease(v122);
    v56 = v121;
  }
  boundingRects.origin.x = (double)v150 - bboxes.origin.x;
  boundingRects.origin.y = (double)v109 - bboxes.origin.y;
  CTFontDrawGlyphs(v56, &glyphs, &boundingRects.origin, 1uLL, v120);
  if ((a4 & 1) == 0)
  {
    v124 = *(char **)a12;
    v123 = *(char **)(a12 + 8);
    if (*(char **)a12 != v123)
    {
      v125 = v123 - v124;
      v126 = *(char **)a12;
      if ((unint64_t)(v123 - v124) < 2)
        goto LABEL_210;
      v126 = &v124[v125 & 0xFFFFFFFFFFFFFFFELL];
      v127 = v124 + 1;
      v128 = v125 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v129 = *((_BYTE *)&md::SDFGlyphRenderer::_coverageMaskDeGammaTable + *v127);
        *(v127 - 1) = *((_BYTE *)&md::SDFGlyphRenderer::_coverageMaskDeGammaTable + *(v127 - 1));
        *v127 = v129;
        v127 += 2;
        v128 -= 2;
      }
      while (v128);
      if (v125 != (v125 & 0xFFFFFFFFFFFFFFFELL))
      {
LABEL_210:
        do
        {
          *v126 = *((_BYTE *)&md::SDFGlyphRenderer::_coverageMaskDeGammaTable + *v126);
          ++v126;
        }
        while (v126 != v123);
      }
    }
  }
  *(_DWORD *)v143 = v108;
  *(_DWORD *)(v143 + 4) = v107;
  *(_DWORD *)(v143 + 40) = v150;
  *(_DWORD *)(v143 + 44) = v109;
  size = bboxes.size;
  *(CGPoint *)(v143 + 8) = bboxes.origin;
  *(CGSize *)(v143 + 24) = size;
  *(float *)(v143 + 48) = v35;
  if (v120)
    CFRelease(v120);
  if (v118)
    CFRelease(v118);
  if (v56)
    CFRelease(v56);
}

void sub_19F032700(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  const void *v11;

  if (v10)
  {
    CFRelease(v10);
    if (!a10)
      goto LABEL_7;
  }
  else if (!a10)
  {
    goto LABEL_7;
  }
  CFRelease(v11);
  if (v11)
    JUMPOUT(0x19F032718);
LABEL_7:
  JUMPOUT(0x19F032720);
}

void sub_19F032750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  const void *v10;

  if (a10)
  {
    CFRelease(v10);
    if (!v10)
      JUMPOUT(0x19F032720);
    JUMPOUT(0x19F032718);
  }
  JUMPOUT(0x19F032710);
}

void sub_19F032760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  std::pair<md::SDFGlyphRenderer::CTFontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>::~pair((_QWORD *)(v10 - 176));
  if (a10)
    JUMPOUT(0x19F032774);
  JUMPOUT(0x19F032710);
}

unint64_t std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(unint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 *v19;
  _OWORD *v20;
  __int128 v21;
  char v22;
  uint64_t v23;

  v2 = a2;
  v3 = result;
  v5 = *(_BYTE **)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  if (v4 - (uint64_t)v5 >= a2)
  {
    if (a2)
    {
      v11 = &v5[a2];
      do
      {
        if (v5)
          *v5 = 0;
        ++v5;
        --v2;
      }
      while (v2);
      v5 = v11;
    }
    *(_QWORD *)(result + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD *)result;
    v7 = &v5[-*(_QWORD *)result];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      abort();
    v9 = v4 - v6;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), v10, 1);
    else
      result = 0;
    v12 = &v7[result];
    v13 = &v7[result + v2];
    v14 = &v7[result];
    do
    {
      if (v14)
        *v14 = 0;
      ++v14;
      --v2;
    }
    while (v2);
    v15 = result + v10;
    v17 = *(_QWORD *)v3;
    v16 = *(_QWORD *)(v3 + 8);
    v18 = v16 - *(_QWORD *)v3;
    if (v16 != *(_QWORD *)v3)
    {
      if (v18 < 0x20)
        goto LABEL_36;
      if ((unint64_t)(v6 - (_QWORD)&v5[result] + v16) < 0x20)
        goto LABEL_36;
      v19 = (__int128 *)(v16 - 16);
      v20 = &v7[result - 16];
      result = v18 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v21 = *v19;
        *(v20 - 1) = *(v19 - 1);
        *v20 = v21;
        v19 -= 2;
        v20 -= 2;
        result -= 32;
      }
      while (result);
      v12 -= v18 & 0xFFFFFFFFFFFFFFE0;
      v16 -= v18 & 0xFFFFFFFFFFFFFFE0;
      if (v18 != (v18 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_36:
        do
        {
          v22 = *(_BYTE *)--v16;
          *--v12 = v22;
        }
        while (v16 != v17);
      }
      v16 = *(_QWORD *)v3;
    }
    *(_QWORD *)v3 = v12;
    *(_QWORD *)(v3 + 8) = v13;
    v23 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v15;
    if (v16)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v16, v23 - v16);
  }
  return result;
}

float *std::__hash_table<std::__hash_value_type<md::SDFGlyphRenderer::CTFontKey,std::__list_iterator<std::pair<md::SDFGlyphRenderer::CTFontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::__unordered_map_hasher<md::SDFGlyphRenderer::CTFontKey,std::__hash_value_type<md::SDFGlyphRenderer::CTFontKey,std::__list_iterator<std::pair<md::SDFGlyphRenderer::CTFontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,md::SDFGlyphRenderer::CTFontKeyHash,std::equal_to<md::SDFGlyphRenderer::CTFontKey>,true>,std::__unordered_map_equal<md::SDFGlyphRenderer::CTFontKey,std::__hash_value_type<md::SDFGlyphRenderer::CTFontKey,std::__list_iterator<std::pair<md::SDFGlyphRenderer::CTFontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>,std::equal_to<md::SDFGlyphRenderer::CTFontKey>,md::SDFGlyphRenderer::CTFontKeyHash,true>,std::allocator<std::__hash_value_type<md::SDFGlyphRenderer::CTFontKey,std::__list_iterator<std::pair<md::SDFGlyphRenderer::CTFontKey,geo::_retain_ptr<__CTFont const*,geo::_retain_cf<__CTFont const*>,geo::_release_cf,geo::_hash_cf,geo::_equal_cf>>,void *>>>>::find<md::SDFGlyphRenderer::CTFontKey>(_QWORD *a1, uint64_t a2)
{
  CFHashCode v4;
  float v5;
  uint64_t v6;
  int8x8_t v7;
  CFHashCode v8;
  uint8x8_t v9;
  CFHashCode v10;
  float **v11;
  float *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v4 = CFHash(*(CFTypeRef *)(a2 + 8));
  v5 = *(float *)(a2 + 24);
  v6 = LODWORD(v5) - 0x61C8864680B583EBLL;
  if (v5 == 0.0)
    v6 = 0x9E3779B97F4A7C15;
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = ((v4 >> 2) + (v4 << 6) + v6) ^ v4;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = ((v4 >> 2) + (v4 << 6) + v6) ^ v4;
    if (v8 >= *(_QWORD *)&v7)
      v10 = v8 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = v8 & (*(_QWORD *)&v7 - 1);
  }
  v11 = *(float ***)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = *v11;
  if (*v11)
  {
    if (v9.u32[0] < 2uLL)
    {
      v13 = *(_QWORD *)&v7 - 1;
      while (1)
      {
        v15 = *((_QWORD *)v12 + 1);
        if (v15 == v8)
        {
          if (v12[10] == *(float *)(a2 + 24) && CFEqual(*((CFTypeRef *)v12 + 3), *(CFTypeRef *)(a2 + 8)))
            return v12;
        }
        else if ((v15 & v13) != v10)
        {
          return 0;
        }
        v12 = *(float **)v12;
        if (!v12)
          return v12;
      }
    }
    do
    {
      v14 = *((_QWORD *)v12 + 1);
      if (v14 == v8)
      {
        if (v12[10] == *(float *)(a2 + 24) && CFEqual(*((CFTypeRef *)v12 + 3), *(CFTypeRef *)(a2 + 8)))
          return v12;
      }
      else
      {
        if (v14 >= *(_QWORD *)&v7)
          v14 %= *(_QWORD *)&v7;
        if (v14 != v10)
          return 0;
      }
      v12 = *(float **)v12;
    }
    while (v12);
  }
  return v12;
}

uint64_t std::vector<float,geo::StdAllocator<float,mdm::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  uint64_t v27;

  v3 = result;
  v4 = *(_DWORD **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (a2 <= (v5 - (uint64_t)v4) >> 2)
  {
    if (a2)
    {
      v11 = 4 * a2;
      v12 = &v4[a2];
      do
      {
        if (v4)
          *v4 = 0;
        ++v4;
        v11 -= 4;
      }
      while (v11);
      v4 = v12;
    }
    *(_QWORD *)(result + 8) = v4;
  }
  else
  {
    v6 = (uint64_t)v4 - *(_QWORD *)result;
    v7 = v6 >> 2;
    v8 = (v6 >> 2) + a2;
    if (v8 >> 62)
      abort();
    v9 = v5 - *(_QWORD *)result;
    if (v9 >> 1 > v8)
      v8 = v9 >> 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
      v10 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 4 * v10, 4);
    else
      result = 0;
    v13 = (_DWORD *)(result + 4 * v7);
    v14 = 4 * a2;
    v15 = &v13[a2];
    v16 = v13;
    do
    {
      if (v16)
        *v16 = 0;
      ++v16;
      v14 -= 4;
    }
    while (v14);
    v17 = *(_QWORD *)v3;
    v18 = *(_QWORD *)(v3 + 8);
    if (v18 != *(_QWORD *)v3)
    {
      v19 = v18 - *(_QWORD *)v3 - 4;
      if (v19 < 0x2C)
        goto LABEL_35;
      if ((unint64_t)(v18 - (v6 + result)) < 0x20)
        goto LABEL_35;
      v20 = (v19 >> 2) + 1;
      v21 = v18 - 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
      v22 = (_OWORD *)(result + 4 * v7 - 16);
      v23 = (__int128 *)(v18 - 16);
      v24 = v20 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v25 = *v23;
        *(v22 - 1) = *(v23 - 1);
        *v22 = v25;
        v22 -= 2;
        v23 -= 2;
        v24 -= 8;
      }
      while (v24);
      v13 -= v20 & 0x7FFFFFFFFFFFFFF8;
      v18 = v21;
      if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_35:
        do
        {
          v26 = *(_DWORD *)(v18 - 4);
          v18 -= 4;
          *--v13 = v26;
        }
        while (v18 != v17);
      }
    }
    *(_QWORD *)v3 = v13;
    *(_QWORD *)(v3 + 8) = v15;
    v27 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + 4 * v10;
    if (v17)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v17, v27 - v17);
  }
  return result;
}

uint64_t ggl::TextureData2DNoCopy::mipData(ggl::TextureData2DNoCopy *this, unsigned int a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 4) + 8 * a2);
}

void ggl::TextureData2DNoCopy::~TextureData2DNoCopy(ggl::TextureData2DNoCopy *this)
{
  uint64_t v1;

  *(_QWORD *)this = &off_1E42BAAD8;
  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    *((_QWORD *)this + 5) = v1;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7), v1, *((_QWORD *)this + 6) - v1);
  }
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_1E42BAAD8;
  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    *((_QWORD *)this + 5) = v1;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7), v1, *((_QWORD *)this + 6) - v1);
  }
}

uint64_t std::__function::__func<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::Texture2D::*)(ggl::Texture2DLoadItem const&),ggl::Texture2D*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::operator()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void ggl::Texture2D::onImplicitLoadComplete(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_BYTE *)(a1 + 129) = 0;
  v1 = *(std::__shared_weak_count **)(a1 + 120);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t std::__function::__func<std::__bind<void (ggl::TextureCube::*)(ggl::Texture2DLoadItem const&),ggl::TextureCube*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ggl::TextureCube::*)(ggl::Texture2DLoadItem const&),ggl::TextureCube*,std::placeholders::__ph<1> const&>>,void ()(ggl::Texture2DLoadItem const&)>::operator()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void ggl::TextureCube::onImplicitLoadComplete(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(unsigned __int8 *)(a2 + 17);
  *(_BYTE *)(a1 + 193) = 0;
  v3 = a1 + 16 * v2;
  v4 = *(std::__shared_weak_count **)(v3 + 104);
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t gss::StyleMatchingTree<gss::CartoStyle<gss::PropertyID>>::construct(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  NSObject *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  NSObject *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  char v41;
  int v42;
  int v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  unint64_t v51;
  NSObject *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  char v56;
  int v57;
  int v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  NSObject *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  char v70;
  int v71;
  int v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  unsigned int v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  NSObject *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  char v85;
  int v86;
  int v87;
  uint64_t v88;
  char v89;
  unint64_t v90;
  char v91;
  unint64_t v92;
  unint64_t v93;
  unsigned int v94;
  unint64_t v95;
  NSObject *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v101;
  char v102;
  int v103;
  int v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t *v108;
  unsigned int v109;
  uint64_t v110;
  gss::Allocator *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int *v115;
  uint64_t v116;
  gss::Allocator *v117;
  uint64_t i;
  uint64_t *v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t *v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char v131;
  unint64_t v132;
  unint64_t v133;
  unsigned int v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char v145;
  unint64_t v146;
  unint64_t v147;
  unsigned int v148;
  unsigned int v149;
  __int16 v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  unsigned __int16 *v156;
  unsigned int v157;
  unint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  _WORD *v162;
  uint64_t *v163;
  unsigned int v164;
  NSObject *v165;
  __int16 v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  NSObject *v170;
  _QWORD *v171;
  _QWORD *v172;
  _QWORD *v173;
  NSObject *v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  NSObject *v178;
  _QWORD *v179;
  _QWORD *v180;
  _QWORD *v181;
  NSObject *v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  NSObject *v186;
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  NSObject *v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  NSObject *v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  NSObject *v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  NSObject *v202;
  _QWORD *v203;
  _QWORD *v204;
  _QWORD *v205;
  NSObject *v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  NSObject *v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  NSObject *v214;
  _QWORD *v215;
  _QWORD *v216;
  _QWORD *v217;
  NSObject *v218;
  _QWORD *v219;
  _QWORD *v220;
  _QWORD *v221;
  NSObject *v222;
  _QWORD *v223;
  _QWORD *v224;
  _QWORD *v225;
  NSObject *v226;
  _QWORD *v227;
  _QWORD *v228;
  _QWORD *v229;
  NSObject *v230;
  _QWORD *v231;
  _QWORD *v232;
  _QWORD *v233;
  NSObject *v234;
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  NSObject *v238;
  _QWORD *v239;
  _QWORD *v240;
  _QWORD *v241;
  NSObject *v242;
  _QWORD *v243;
  _QWORD *v244;
  _QWORD *v245;
  NSObject *v246;
  _QWORD *v247;
  _QWORD *v248;
  _QWORD *v249;
  NSObject *v250;
  _QWORD *v251;
  _QWORD *v252;
  _QWORD *v253;
  NSObject *v254;
  _QWORD *v255;
  _QWORD *v256;
  _QWORD *v257;
  NSObject *v258;
  _QWORD *v259;
  _QWORD *v260;
  _QWORD *v261;
  NSObject *v262;
  _QWORD *v263;
  _QWORD *v264;
  _QWORD *v265;
  NSObject *v266;
  _QWORD *v267;
  _QWORD *v268;
  _QWORD *v269;
  NSObject *v270;
  _QWORD *v271;
  _QWORD *v272;
  _QWORD *v273;
  NSObject *v274;
  _QWORD *v275;
  _QWORD *v276;
  _QWORD *v277;
  unsigned int v278;
  int v279;
  unsigned int v280;
  unsigned int v281;
  uint64_t v282;
  uint64_t v283;
  unsigned int v284;
  uint64_t v285;
  unsigned int v286;
  unsigned int v287;
  uint64_t v288;
  uint64_t v289;
  gss::Allocator *v290;
  uint64_t v291;
  unsigned int v292;
  _BYTE v293[4];
  unsigned int v294;
  uint8_t buf[4];
  const char *v296;
  __int16 v297;
  int v298;
  __int16 v299;
  const char *v300;
  uint64_t v301;

  v301 = *MEMORY[0x1E0C80C00];
  v10 = *((unsigned __int8 *)a2 + 24);
  v11 = v10 + 5;
  v12 = a2[1];
  v13 = a2[2];
  v14 = v13 + ((unint64_t)(v10 + 5) >> 3);
  v15 = (v10 + 5) & 7;
  v16 = v13 + 1;
  if (v14 < v13 + 1)
  {
    if (*((_BYTE *)a2 + 24))
      v17 = v13 + 1;
    else
      v17 = a2[2];
    if (v12 < v17)
      goto LABEL_14;
    if (*((_BYTE *)a2 + 24))
    {
      if (v12 >= v16)
      {
        v18 = (((1 << (8 - v10)) - 1) & *(unsigned __int8 *)(*a2 + v13)) << v10;
        goto LABEL_25;
      }
      goto LABEL_13;
    }
    if (v12 >= v16)
    {
      LOBYTE(v18) = *(_BYTE *)(*a2 + v13);
      goto LABEL_25;
    }
LABEL_13:
    a2[2] = v14;
    *((_BYTE *)a2 + 24) = v15;
LABEL_14:
    GEOGetGeoCSSStyleSheetLog();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 164;
      v299 = 2082;
      v300 = "Could not read number of bits used for end chain counts.";
      _os_log_impl(&dword_19F029000, v20, OS_LOG_TYPE_ERROR, "Read/write lock %s resulted in non-zero value %d", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v21 = (_QWORD *)std::ostream::operator<<();
    v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)" STYL Parse Error Here: ", 24);
    v23 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)"Could not read number of bits used for end chain counts.", 56);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)"\n", 1);
    return 0;
  }
  if (v10 <= 3)
    v19 = v13 + 1;
  else
    v19 = v13 + 2;
  if (v12 < v19)
    goto LABEL_13;
  v24 = *a2;
  if (*((_BYTE *)a2 + 24))
  {
    v25 = *(unsigned __int8 *)(v24 + v13);
    if (v16 >= v12)
      v26 = 0;
    else
      v26 = *(unsigned __int8 *)(v24 + v16);
    v18 = ((v26 & (0xFFFF << (8 - v10))) >> (8 - v10)) | ((((1 << (8 - v10)) + 255) & v25) << v10);
    a2[2] = v16;
  }
  else
  {
    LOBYTE(v18) = *(_BYTE *)(v24 + v13);
  }
LABEL_25:
  a2[2] = v14;
  *((_BYTE *)a2 + 24) = v15;
  *(_BYTE *)(a3 + 95) = (v18 >> 3) + 1;
  v27 = v11 & 7;
  v28 = (v11 & 7) + 5;
  v29 = v28 >> 3;
  v30 = v14 + v29;
  v31 = v28 & 7;
  v32 = v14 + 1;
  if (v14 + v29 < v14 + 1)
  {
    if (v15)
      v33 = v14 + 1;
    else
      v33 = v14;
    if (v12 < v33)
      goto LABEL_38;
    if (v15)
    {
      if (v12 >= v32)
      {
        v34 = *a2;
        v35 = (((1 << (8 - v15)) - 1) & *(unsigned __int8 *)(*a2 + v14)) << v27;
        goto LABEL_48;
      }
      goto LABEL_37;
    }
    v34 = *a2;
    a2[2] = v14;
    if (v12 >= v32)
      goto LABEL_45;
LABEL_37:
    a2[2] = v30;
    *((_BYTE *)a2 + 24) = v31;
LABEL_38:
    GEOGetGeoCSSStyleSheetLog();
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 166;
      v299 = 2082;
      v300 = "Could not read number of bits used for end chain lengths.";
      _os_log_impl(&dword_19F029000, v37, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v38 = (_QWORD *)std::ostream::operator<<();
    v39 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v38, (uint64_t)" STYL Parse Error Here: ", 24);
    v40 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)"Could not read number of bits used for end chain lengths.", 57);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v40, (uint64_t)"\n", 1);
    return 0;
  }
  if (v15 <= 3)
    v36 = v14 + 1;
  else
    v36 = v14 + 2;
  if (v12 < v36)
    goto LABEL_37;
  v34 = *a2;
  if (!v15)
  {
LABEL_45:
    LOBYTE(v35) = *(_BYTE *)(v34 + v14);
    goto LABEL_48;
  }
  v41 = 8 - v15;
  v42 = *(unsigned __int8 *)(v34 + v14);
  if (v32 >= v12)
    v43 = 0;
  else
    v43 = *(unsigned __int8 *)(v34 + v32);
  v35 = ((v43 & (0xFFFF << v41)) >> v41) | ((((1 << v41) + 255) & v42) << v27);
  a2[2] = v32;
LABEL_48:
  a2[2] = v30;
  *((_BYTE *)a2 + 24) = v31;
  v44 = v28 & 7;
  v45 = (v28 & 7) + 5;
  v46 = v30 + (v45 >> 3);
  v47 = v45 & 7;
  v48 = v30 + 1;
  if (v46 < v30 + 1)
  {
    if (v31)
      v49 = v30 + 1;
    else
      v49 = v30;
    if (v12 < v49)
      goto LABEL_61;
    if (v31)
    {
      if (v12 >= v48)
      {
        v50 = (((1 << (8 - v31)) - 1) & *(unsigned __int8 *)(v34 + v30)) << v44;
        goto LABEL_71;
      }
      goto LABEL_60;
    }
    a2[2] = v30;
    if (v12 >= v48)
      goto LABEL_68;
LABEL_60:
    a2[2] = v46;
    *((_BYTE *)a2 + 24) = v47;
LABEL_61:
    GEOGetGeoCSSStyleSheetLog();
    v52 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 168;
      v299 = 2082;
      v300 = "Could not read number of bits used for attribute value counts.";
      _os_log_impl(&dword_19F029000, v52, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v53 = (_QWORD *)std::ostream::operator<<();
    v54 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v53, (uint64_t)" STYL Parse Error Here: ", 24);
    v55 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)"Could not read number of bits used for attribute value counts.", 62);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v55, (uint64_t)"\n", 1);
    return 0;
  }
  if (v31 <= 3)
    v51 = v30 + 1;
  else
    v51 = v30 + 2;
  if (v12 < v51)
    goto LABEL_60;
  if (!v31)
  {
LABEL_68:
    LOBYTE(v50) = *(_BYTE *)(v34 + v30);
    goto LABEL_71;
  }
  v56 = 8 - v31;
  v57 = *(unsigned __int8 *)(v34 + v30);
  if (v48 >= v12)
    v58 = 0;
  else
    v58 = *(unsigned __int8 *)(v34 + v48);
  v50 = ((v58 & (0xFFFF << v56)) >> v56) | ((((1 << v56) + 255) & v57) << v44);
  a2[2] = v48;
LABEL_71:
  a2[2] = v46;
  *((_BYTE *)a2 + 24) = v47;
  v59 = v45 & 7;
  v60 = (v45 & 7) + 5;
  v61 = v46 + (v60 >> 3);
  v62 = v60 & 7;
  v63 = v46 + 1;
  if (v61 < v46 + 1)
  {
    if (v47)
      v64 = v46 + 1;
    else
      v64 = v46;
    if (v12 < v64)
      goto LABEL_84;
    if (v47)
    {
      if (v12 >= v63)
      {
        LODWORD(v34) = (((1 << (8 - v47)) - 1) & *(unsigned __int8 *)(v34 + v46)) << v59;
        goto LABEL_94;
      }
      goto LABEL_83;
    }
    a2[2] = v46;
    if (v12 >= v63)
      goto LABEL_91;
LABEL_83:
    a2[2] = v61;
    *((_BYTE *)a2 + 24) = v62;
LABEL_84:
    GEOGetGeoCSSStyleSheetLog();
    v66 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 170;
      v299 = 2082;
      v300 = "Could not read number of bits used for node indices.";
      _os_log_impl(&dword_19F029000, v66, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v67 = (_QWORD *)std::ostream::operator<<();
    v68 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v67, (uint64_t)" STYL Parse Error Here: ", 24);
    v69 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v68, (uint64_t)"Could not read number of bits used for node indices.", 52);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v69, (uint64_t)"\n", 1);
    return 0;
  }
  if (v47 <= 3)
    v65 = v46 + 1;
  else
    v65 = v46 + 2;
  if (v12 < v65)
    goto LABEL_83;
  if (!v47)
  {
LABEL_91:
    LOBYTE(v34) = *(_BYTE *)(v34 + v46);
    goto LABEL_94;
  }
  v70 = 8 - v47;
  v71 = *(unsigned __int8 *)(v34 + v46);
  if (v63 >= v12)
    v72 = 0;
  else
    v72 = *(unsigned __int8 *)(v34 + v63);
  LODWORD(v34) = ((v72 & (0xFFFF << v70)) >> v70) | ((((1 << v70) + 255) & v71) << v59);
  a2[2] = v63;
LABEL_94:
  a2[2] = v61;
  *((_BYTE *)a2 + 24) = v62;
  *(_BYTE *)(a3 + 96) = (v34 >> 3) + 1;
  v73 = v60 & 7;
  v74 = (v60 & 7) + 5;
  v75 = v61 + (v74 >> 3);
  v76 = v74 & 7;
  v77 = v61 + 1;
  if (v75 < v61 + 1)
  {
    if (v62)
      v78 = v61 + 1;
    else
      v78 = v61;
    if (v12 < v78)
      goto LABEL_107;
    if (v62)
    {
      if (v12 >= v77)
      {
        LODWORD(v61) = (((1 << (8 - v62)) - 1) & *(unsigned __int8 *)(*a2 + v61)) << v73;
        goto LABEL_118;
      }
      goto LABEL_106;
    }
    v88 = *a2;
    a2[2] = v61;
    if (v12 >= v77)
    {
      LOBYTE(v61) = *(_BYTE *)(v88 + v61);
      goto LABEL_118;
    }
LABEL_106:
    a2[2] = v75;
    *((_BYTE *)a2 + 24) = v76;
LABEL_107:
    GEOGetGeoCSSStyleSheetLog();
    v80 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 172;
      v299 = 2082;
      v300 = "Could not read number of bits used for node child counts.";
      _os_log_impl(&dword_19F029000, v80, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v81 = (_QWORD *)std::ostream::operator<<();
    v82 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v81, (uint64_t)" STYL Parse Error Here: ", 24);
    v83 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v82, (uint64_t)"Could not read number of bits used for node child counts.", 57);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v83, (uint64_t)"\n", 1);
    return 0;
  }
  if (v62 <= 3)
    v79 = v61 + 1;
  else
    v79 = v61 + 2;
  if (v12 < v79)
    goto LABEL_106;
  v84 = *a2;
  if (v62)
  {
    v85 = 8 - v62;
    v86 = *(unsigned __int8 *)(v84 + v61);
    if (v77 >= v12)
      v87 = 0;
    else
      v87 = *(unsigned __int8 *)(v84 + v77);
    LODWORD(v61) = ((v87 & (0xFFFF << v85)) >> v85) | ((((1 << v85) + 255) & v86) << v73);
    a2[2] = v77;
  }
  else
  {
    LOBYTE(v61) = *(_BYTE *)(v84 + v61);
  }
LABEL_118:
  a2[2] = v75;
  *((_BYTE *)a2 + 24) = v76;
  *(_BYTE *)(a3 + 97) = (v61 >> 3) + 1;
  v89 = v74 & 7;
  v90 = v75 + (((v74 & 7) + 5) >> 3);
  v91 = ((v74 & 7) + 5) & 7;
  v92 = v75 + 1;
  if (v90 >= v75 + 1)
  {
    if (v76 <= 3)
      v95 = v75 + 1;
    else
      v95 = v75 + 2;
    if (v12 >= v95)
    {
      v101 = *a2;
      if (v76)
      {
        v102 = 8 - v76;
        v103 = *(unsigned __int8 *)(v101 + v75);
        if (v92 >= v12)
          v104 = 0;
        else
          v104 = *(unsigned __int8 *)(v101 + v92);
        v94 = ((v104 & (0xFFFF << v102)) >> v102) | ((((1 << v102) + 255) & v103) << v89);
        a2[2] = v92;
      }
      else
      {
        LOBYTE(v94) = *(_BYTE *)(v101 + v75);
      }
      goto LABEL_143;
    }
    goto LABEL_130;
  }
  if (v76)
    v93 = v75 + 1;
  else
    v93 = v75;
  if (v12 < v93)
    goto LABEL_131;
  if (!v76)
  {
    v105 = *a2;
    a2[2] = v75;
    if (v12 >= v92)
    {
      LOBYTE(v94) = *(_BYTE *)(v105 + v75);
      goto LABEL_143;
    }
    goto LABEL_130;
  }
  if (v12 < v92)
  {
LABEL_130:
    a2[2] = v90;
    *((_BYTE *)a2 + 24) = v91;
LABEL_131:
    GEOGetGeoCSSStyleSheetLog();
    v96 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 174;
      v299 = 2082;
      v300 = "Could not read number of bits used for chunk sizes.";
      _os_log_impl(&dword_19F029000, v96, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v97 = (_QWORD *)std::ostream::operator<<();
    v98 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v97, (uint64_t)" STYL Parse Error Here: ", 24);
    v99 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v98, (uint64_t)"Could not read number of bits used for chunk sizes.", 51);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v99, (uint64_t)"\n", 1);
    return 0;
  }
  v94 = (((1 << (8 - v76)) - 1) & *(unsigned __int8 *)(*a2 + v75)) << v89;
LABEL_143:
  a2[2] = v90;
  *((_BYTE *)a2 + 24) = v91;
  v106 = (v94 >> 3) + 1;
  geo::ibitstream::readUIntBits(v293, a2, v106);
  if (!v293[0])
  {
    GEOGetGeoCSSStyleSheetLog();
    v170 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v170, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 178;
      v299 = 2082;
      v300 = "Could not read end chain chunk.";
      _os_log_impl(&dword_19F029000, v170, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v171 = (_QWORD *)std::ostream::operator<<();
    v172 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v171, (uint64_t)" STYL Parse Error Here: ", 24);
    v173 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v172, (uint64_t)"Could not read end chain chunk.", 31);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v173, (uint64_t)"\n", 1);
    return 0;
  }
  if (*((_BYTE *)a2 + 24))
  {
    *((_BYTE *)a2 + 24) = 0;
    ++a2[2];
  }
  geo::ibitstream::readUIntBits(v293, a2, *(unsigned __int8 *)(a3 + 95));
  if (!v293[0])
  {
    GEOGetGeoCSSStyleSheetLog();
    v174 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 182;
      v299 = 2082;
      v300 = "Could not read number of end chains.";
      _os_log_impl(&dword_19F029000, v174, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v175 = (_QWORD *)std::ostream::operator<<();
    v176 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v175, (uint64_t)" STYL Parse Error Here: ", 24);
    v177 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v176, (uint64_t)"Could not read number of end chains.", 36);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v177, (uint64_t)"\n", 1);
    return 0;
  }
  v107 = v294;
  v108 = (uint64_t *)(a1 + 24);
  geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>>::resize(a1 + 24, v294);
  v284 = v106;
  v283 = v107;
  if ((_DWORD)v107)
  {
    v288 = 0;
    v109 = (v35 >> 3) + 1;
    v286 = (v50 >> 3) + 1;
    v280 = v109;
    do
    {
      v110 = *v108;
      geo::ibitstream::readUIntBits(v293, a2, v109);
      if (!v293[0])
      {
        GEOGetGeoCSSStyleSheetLog();
        v198 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v198, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
          v297 = 1024;
          v298 = 187;
          v299 = 2082;
          v300 = "Could not read end chain length.";
          _os_log_impl(&dword_19F029000, v198, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }

        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
        v199 = (_QWORD *)std::ostream::operator<<();
        v200 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v199, (uint64_t)" STYL Parse Error Here: ", 24);
        v201 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v200, (uint64_t)"Could not read end chain length.", 32);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v201, (uint64_t)"\n", 1);
        return 0;
      }
      v111 = (gss::Allocator *)(v110 + 16 * v288);
      v112 = v294;
      v290 = v111;
      geo::intern_vector<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,geo::StdAllocator<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,gss::Allocator>>::resize(v111, v294);
      v285 = v112;
      if ((_DWORD)v112)
      {
        v113 = 0;
        do
        {
          v114 = *(_QWORD *)v290;
          v115 = (unsigned int *)(*(_QWORD *)v290 + 24 * v113);
          if (!gss::decodeAttributeEncoding(a2, v115, *(_BYTE *)(a3 + 13), *(_BYTE *)(a3 + 14), a5))
          {
            GEOGetGeoCSSStyleSheetLog();
            v190 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v190, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
              v297 = 1024;
              v298 = 191;
              v299 = 2082;
              v300 = "Could not decode attributes.";
              _os_log_impl(&dword_19F029000, v190, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
            }

            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
            v191 = (_QWORD *)std::ostream::operator<<();
            v192 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v191, (uint64_t)" STYL Parse Error Here: ", 24);
            v193 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v192, (uint64_t)"Could not decode attributes.", 28);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v193, (uint64_t)"\n", 1);
            return 0;
          }
          geo::ibitstream::readUIntBits(v293, a2, v286);
          if (!v293[0])
          {
            GEOGetGeoCSSStyleSheetLog();
            v194 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v194, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
              v297 = 1024;
              v298 = 193;
              v299 = 2082;
              v300 = "Could not read number of values.";
              _os_log_impl(&dword_19F029000, v194, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
            }

            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
            v195 = (_QWORD *)std::ostream::operator<<();
            v196 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v195, (uint64_t)" STYL Parse Error Here: ", 24);
            v197 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v196, (uint64_t)"Could not read number of values.", 32);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v197, (uint64_t)"\n", 1);
            return 0;
          }
          v116 = v294;
          v117 = (gss::Allocator *)(v114 + 24 * v113 + 8);
          geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::resize(v117, v294);
          if ((_DWORD)v116)
          {
            for (i = 0; i != v116; ++i)
            {
              v119 = *(uint64_t **)(a3 + 24);
              if (!v119)
LABEL_344:
                abort();
              v120 = *v115;
              while (1)
              {
                while (1)
                {
                  v121 = *((_DWORD *)v119 + 7);
                  if (v120 >= v121)
                    break;
                  v119 = (uint64_t *)*v119;
                  if (!v119)
                    goto LABEL_344;
                }
                if (v121 >= v120)
                  break;
                v119 = (uint64_t *)v119[1];
                if (!v119)
                  goto LABEL_344;
              }
              geo::ibitstream::readUIntBits(v293, a2, *((unsigned __int8 *)v119 + 32));
              if (!v293[0])
              {
                GEOGetGeoCSSStyleSheetLog();
                v178 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v178, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315650;
                  v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
                  v297 = 1024;
                  v298 = 196;
                  v299 = 2082;
                  v300 = "Could not read attribute value.";
                  _os_log_impl(&dword_19F029000, v178, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                }

                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
                v179 = (_QWORD *)std::ostream::operator<<();
                v180 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v179, (uint64_t)" STYL Parse Error Here: ", 24);
                v181 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v180, (uint64_t)"Could not read attribute value.", 31);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v181, (uint64_t)"\n", 1);
                return 0;
              }
              *(_DWORD *)(*(_QWORD *)v117 + 4 * i) = v294;
            }
          }
          ++v113;
        }
        while (v113 != v285);
      }
      v108 = (uint64_t *)(a1 + 24);
      ++v288;
      v106 = v284;
      v109 = v280;
    }
    while (v288 != v283);
  }
  if (*((_BYTE *)a2 + 24))
  {
    *((_BYTE *)a2 + 24) = 0;
    ++a2[2];
  }
  geo::ibitstream::readUIntBits(v293, a2, *(unsigned __int8 *)(a3 + 96));
  if (!v293[0])
  {
    GEOGetGeoCSSStyleSheetLog();
    v182 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v182, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 206;
      v299 = 2082;
      v300 = "Could not read number of style matching graph nodes.";
      _os_log_impl(&dword_19F029000, v182, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v183 = (_QWORD *)std::ostream::operator<<();
    v184 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v183, (uint64_t)" STYL Parse Error Here: ", 24);
    v185 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v184, (uint64_t)"Could not read number of style matching graph nodes.", 52);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v185, (uint64_t)"\n", 1);
    return 0;
  }
  v122 = (uint64_t *)(a1 + 8);
  geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>>::resize(a1 + 8, v294);
  geo::ibitstream::readUIntBits(v293, a2, *(unsigned __int8 *)(a3 + 96));
  if (!v293[0])
  {
    GEOGetGeoCSSStyleSheetLog();
    v186 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v186, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 208;
      v299 = 2082;
      v300 = "Could not read number of chunks.";
      _os_log_impl(&dword_19F029000, v186, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v187 = (_QWORD *)std::ostream::operator<<();
    v188 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v187, (uint64_t)" STYL Parse Error Here: ", 24);
    v189 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v188, (uint64_t)"Could not read number of chunks.", 32);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v189, (uint64_t)"\n", 1);
    return 0;
  }
  v282 = a4;
  v123 = v294;
  if (*((_BYTE *)a2 + 24))
  {
    *((_BYTE *)a2 + 24) = 0;
    ++a2[2];
  }
  if (!v123)
  {
LABEL_260:
    *(_QWORD *)a1 = *(_QWORD *)(a1 + 8);
    return 1;
  }
  v124 = 0;
  v125 = 0;
  v278 = v123;
  while (1)
  {
    geo::ibitstream::readUIntBits(v293, a2, v106);
    if (!v293[0])
    {
      GEOGetGeoCSSStyleSheetLog();
      v218 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v218, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v297 = 1024;
        v298 = 214;
        v299 = 2082;
        v300 = "Could not read chunk length.";
        _os_log_impl(&dword_19F029000, v218, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v219 = (_QWORD *)std::ostream::operator<<();
      v220 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v219, (uint64_t)" STYL Parse Error Here: ", 24);
      v221 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v220, (uint64_t)"Could not read chunk length.", 28);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v221, (uint64_t)"\n", 1);
      return 0;
    }
    geo::ibitstream::readUIntBits(v293, a2, *(unsigned __int8 *)(a3 + 96));
    if (!v293[0])
    {
      GEOGetGeoCSSStyleSheetLog();
      v222 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v222, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v297 = 1024;
        v298 = 215;
        v299 = 2082;
        v300 = "Could not read number of nodes in the chunk.";
        _os_log_impl(&dword_19F029000, v222, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v223 = (_QWORD *)std::ostream::operator<<();
      v224 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v223, (uint64_t)" STYL Parse Error Here: ", 24);
      v225 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v224, (uint64_t)"Could not read number of nodes in the chunk.", 44);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v225, (uint64_t)"\n", 1);
      return 0;
    }
    v279 = v124;
    if (v294)
      break;
LABEL_257:
    if (*((_BYTE *)a2 + 24))
    {
      *((_BYTE *)a2 + 24) = 0;
      ++a2[2];
    }
    v124 = v279 + 1;
    v106 = v284;
    v122 = (uint64_t *)(a1 + 8);
    if (v279 + 1 == v278)
      goto LABEL_260;
  }
  v281 = v125 + v294;
  while (1)
  {
    v126 = *v122;
    v127 = *((unsigned __int8 *)a2 + 24);
    v129 = a2[1];
    v128 = a2[2];
    v130 = v128 + ((unint64_t)(v127 + 1) >> 3);
    v131 = (v127 + 1) & 7;
    v132 = v128 + 1;
    if (v130 >= v128 + 1)
    {
      if (v127 <= 7)
        v135 = v128 + 1;
      else
        v135 = v128 + 2;
      if (v129 < v135)
      {
LABEL_294:
        a2[2] = v130;
        *((_BYTE *)a2 + 24) = v131;
LABEL_295:
        GEOGetGeoCSSStyleSheetLog();
        v214 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
          v297 = 1024;
          v298 = 259;
          v299 = 2082;
          v300 = "Could not read indication of node being terminal.";
          _os_log_impl(&dword_19F029000, v214, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }

        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
        v215 = (_QWORD *)std::ostream::operator<<();
        v216 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v215, (uint64_t)" STYL Parse Error Here: ", 24);
        v217 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v216, (uint64_t)"Could not read indication of node being terminal.", 49);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v217, (uint64_t)"\n", 1);
        goto LABEL_341;
      }
      v136 = *a2;
      if (*((_BYTE *)a2 + 24))
      {
        v137 = v132 >= v129 ? 0 : *(unsigned __int8 *)(v136 + v132);
        v134 = ((v137 & (0xFFFF << (8 - v127))) >> (8 - v127)) | ((((1 << (8 - v127)) + 255) & *(unsigned __int8 *)(v136 + v128)) << v127);
        a2[2] = v132;
      }
      else
      {
        LOBYTE(v134) = *(_BYTE *)(v136 + v128);
      }
    }
    else
    {
      if (*((_BYTE *)a2 + 24))
        v133 = v128 + 1;
      else
        v133 = a2[2];
      if (v129 < v133)
        goto LABEL_295;
      if (*((_BYTE *)a2 + 24))
      {
        if (v129 < v132)
          goto LABEL_294;
        v134 = (((1 << (8 - v127)) - 1) & *(unsigned __int8 *)(*a2 + v128)) << v127;
      }
      else
      {
        if (v129 < v132)
          goto LABEL_294;
        LOBYTE(v134) = *(_BYTE *)(*a2 + v128);
      }
    }
    v138 = v125;
    v139 = (unsigned int *)(v126 + 24 * v125);
    a2[2] = v130;
    *((_BYTE *)a2 + 24) = v131;
    if ((v134 & 0x80) == 0)
      break;
    geo::ibitstream::readUIntBits(v293, a2, *(unsigned __int8 *)(a3 + 94));
    if (!v293[0])
    {
      GEOGetGeoCSSStyleSheetLog();
      v246 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v246, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v297 = 1024;
        v298 = 263;
        v299 = 2082;
        v300 = "Could not read style index.";
        _os_log_impl(&dword_19F029000, v246, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v247 = (_QWORD *)std::ostream::operator<<();
      v248 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v247, (uint64_t)" STYL Parse Error Here: ", 24);
      v249 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v248, (uint64_t)"Could not read style index.", 27);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v249, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    v149 = v294;
    geo::ibitstream::readUIntBits(v293, a2, *(unsigned __int8 *)(a3 + 95));
    if (!v293[0])
    {
      GEOGetGeoCSSStyleSheetLog();
      v250 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v250, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v297 = 1024;
        v298 = 264;
        v299 = 2082;
        v300 = "Could not end chain index.";
        _os_log_impl(&dword_19F029000, v250, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v251 = (_QWORD *)std::ostream::operator<<();
      v252 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v251, (uint64_t)" STYL Parse Error Here: ", 24);
      v253 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v252, (uint64_t)"Could not end chain index.", 26);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    if (v149 >= 0xFFFF)
    {
      GEOGetGeoCSSStyleSheetLog();
      v254 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v254, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v297 = 1024;
        v298 = 266;
        v299 = 2082;
        v300 = "StyleIndex outside uint16 range";
        _os_log_impl(&dword_19F029000, v254, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v255 = (_QWORD *)std::ostream::operator<<();
      v256 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v255, (uint64_t)" STYL Parse Error Here: ", 24);
      v257 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v256, (uint64_t)"StyleIndex outside uint16 range", 31);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v257, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    if (v149 >= *(unsigned __int16 *)(v282 + 8))
    {
      GEOGetGeoCSSStyleSheetLog();
      v258 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v258, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v297 = 1024;
        v298 = 267;
        v299 = 2082;
        v300 = "StyleIndex outside styles range";
        _os_log_impl(&dword_19F029000, v258, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v259 = (_QWORD *)std::ostream::operator<<();
      v260 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v259, (uint64_t)" STYL Parse Error Here: ", 24);
      v261 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v260, (uint64_t)"StyleIndex outside styles range", 31);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v261, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    v150 = v294;
    if (v294 >= 0xFFFF)
    {
      GEOGetGeoCSSStyleSheetLog();
      v262 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v262, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v297 = 1024;
        v298 = 268;
        v299 = 2082;
        v300 = "EndChainIndex outside uint16 range";
        _os_log_impl(&dword_19F029000, v262, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v263 = (_QWORD *)std::ostream::operator<<();
      v264 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v263, (uint64_t)" STYL Parse Error Here: ", 24);
      v265 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v264, (uint64_t)"EndChainIndex outside uint16 range", 34);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v265, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    *v139 = 0x7FFFFFFF;
    v151 = v126 + 24 * v138;
    *(_WORD *)(v151 + 4) = v149;
    *(_WORD *)(v151 + 6) = v150;
LABEL_255:
    v125 = v138 + 1;
    v122 = (uint64_t *)(a1 + 8);
    if (v138 + 1 == v281)
    {
      v125 = v281;
      goto LABEL_257;
    }
  }
  v287 = v138;
  *(_DWORD *)(v126 + 24 * v138 + 4) = 0;
  v292 = 0;
  if (!gss::decodeAttributeEncoding(a2, &v292, *(_BYTE *)(a3 + 13), *(_BYTE *)(a3 + 14), a5))
  {
    GEOGetGeoCSSStyleSheetLog();
    v226 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v226, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 280;
      v299 = 2082;
      v300 = "Could not decode attribute.";
      _os_log_impl(&dword_19F029000, v226, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v227 = (_QWORD *)std::ostream::operator<<();
    v228 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v227, (uint64_t)" STYL Parse Error Here: ", 24);
    v229 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v228, (uint64_t)"Could not decode attribute.", 27);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v229, (uint64_t)"\n", 1);
    goto LABEL_341;
  }
  v140 = v292;
  if (v292 == 0x7FFFFFFF)
  {
    GEOGetGeoCSSStyleSheetLog();
    v230 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v230, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 281;
      v299 = 2082;
      v300 = "attribute is using sentinel value";
      _os_log_impl(&dword_19F029000, v230, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v231 = (_QWORD *)std::ostream::operator<<();
    v232 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v231, (uint64_t)" STYL Parse Error Here: ", 24);
    v233 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v232, (uint64_t)"attribute is using sentinel value", 33);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v233, (uint64_t)"\n", 1);
    goto LABEL_341;
  }
  *v139 = v292;
  v141 = *((unsigned __int8 *)a2 + 24);
  v143 = a2[1];
  v142 = a2[2];
  v144 = v142 + ((unint64_t)(v141 + 1) >> 3);
  v145 = (v141 + 1) & 7;
  v146 = v142 + 1;
  if (v144 >= v142 + 1)
  {
    if (v141 <= 7)
      v152 = v142 + 1;
    else
      v152 = v142 + 2;
    if (v143 < v152)
    {
LABEL_310:
      a2[2] = v144;
      *((_BYTE *)a2 + 24) = v145;
LABEL_311:
      GEOGetGeoCSSStyleSheetLog();
      v234 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v234, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v297 = 1024;
        v298 = 283;
        v299 = 2082;
        v300 = "Could not read indication of undefined node existing.";
        _os_log_impl(&dword_19F029000, v234, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v235 = (_QWORD *)std::ostream::operator<<();
      v236 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v235, (uint64_t)" STYL Parse Error Here: ", 24);
      v237 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v236, (uint64_t)"Could not read indication of undefined node existing.", 53);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v237, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    v153 = *a2;
    if (*((_BYTE *)a2 + 24))
    {
      if (v146 >= v143)
        v154 = 0;
      else
        v154 = *(unsigned __int8 *)(v153 + v146);
      v148 = ((v154 & (0xFFFF << (8 - v141))) >> (8 - v141)) | ((((1 << (8 - v141)) + 255) & *(unsigned __int8 *)(v153 + v142)) << v141);
      a2[2] = v146;
    }
    else
    {
      LOBYTE(v148) = *(_BYTE *)(v153 + v142);
    }
  }
  else
  {
    if (*((_BYTE *)a2 + 24))
      v147 = v142 + 1;
    else
      v147 = a2[2];
    if (v143 < v147)
      goto LABEL_311;
    if (*((_BYTE *)a2 + 24))
    {
      if (v143 < v146)
        goto LABEL_310;
      v148 = (((1 << (8 - v141)) - 1) & *(unsigned __int8 *)(*a2 + v142)) << v141;
    }
    else
    {
      if (v143 < v146)
        goto LABEL_310;
      LOBYTE(v148) = *(_BYTE *)(*a2 + v142);
    }
  }
  a2[2] = v144;
  *((_BYTE *)a2 + 24) = v145;
  if ((v148 & 0x80) != 0)
  {
    geo::ibitstream::readUIntBits(v293, a2, *(unsigned __int8 *)(a3 + 96));
    if (!v293[0])
    {
      GEOGetGeoCSSStyleSheetLog();
      v266 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v266, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v297 = 1024;
        v298 = 288;
        v299 = 2082;
        v300 = "Could not read undefined node index.";
        _os_log_impl(&dword_19F029000, v266, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v267 = (_QWORD *)std::ostream::operator<<();
      v268 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v267, (uint64_t)" STYL Parse Error Here: ", 24);
      v269 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v268, (uint64_t)"Could not read undefined node index.", 36);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v269, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    if (v294 >= *(unsigned __int16 *)(a1 + 16))
    {
      GEOGetGeoCSSStyleSheetLog();
      v270 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v270, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v297 = 1024;
        v298 = 289;
        v299 = 2082;
        v300 = "Undefined node index out of bounds";
        _os_log_impl(&dword_19F029000, v270, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v271 = (_QWORD *)std::ostream::operator<<();
      v272 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v271, (uint64_t)" STYL Parse Error Here: ", 24);
      v273 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v272, (uint64_t)"Undefined node index out of bounds", 34);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v273, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    *(_WORD *)buf = -1;
    *(_WORD *)&buf[2] = v294;
    geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>>::push_back(v126 + 24 * v287 + 8, buf);
    v289 = 1;
  }
  else
  {
    v289 = 0;
  }
  geo::ibitstream::readUIntBits(v293, a2, *(unsigned __int8 *)(a3 + 97));
  if (!v293[0])
  {
    GEOGetGeoCSSStyleSheetLog();
    v238 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v238, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 293;
      v299 = 2082;
      v300 = "Could not read number of children.";
      _os_log_impl(&dword_19F029000, v238, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v239 = (_QWORD *)std::ostream::operator<<();
    v240 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v239, (uint64_t)" STYL Parse Error Here: ", 24);
    v241 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v240, (uint64_t)"Could not read number of children.", 34);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v241, (uint64_t)"\n", 1);
    goto LABEL_341;
  }
  v155 = v126 + 24 * v287;
  v157 = *(unsigned __int16 *)(v155 + 16);
  v156 = (unsigned __int16 *)(v155 + 16);
  v291 = v294;
  v158 = v157 + (unint64_t)v294;
  if (v158 >= 0xFFFF)
  {
    GEOGetGeoCSSStyleSheetLog();
    v242 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v242, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      v297 = 1024;
      v298 = 296;
      v299 = 2082;
      v300 = "SubTree nodes larger than uint16!";
      _os_log_impl(&dword_19F029000, v242, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v243 = (_QWORD *)std::ostream::operator<<();
    v244 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v243, (uint64_t)" STYL Parse Error Here: ", 24);
    v245 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v244, (uint64_t)"SubTree nodes larger than uint16!", 33);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v245, (uint64_t)"\n", 1);
    goto LABEL_341;
  }
  v159 = (uint64_t *)(v156 - 4);
  geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>>::resize((gss::Allocator *)(v156 - 4), v158);
  geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>>::intern<geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>>(v156 - 4, a1 + 40);
  if (!(_DWORD)v291)
  {
    v161 = *v159;
LABEL_254:
    std::sort[abi:nn180100]<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode *,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&)#1}>(v161, (int32x2_t *)(v161 + 4 * *v156));
    v138 = v287;
    goto LABEL_255;
  }
  v160 = 0;
  while (1)
  {
    v163 = *(uint64_t **)(a3 + 24);
    if (!v163)
LABEL_345:
      abort();
    while (1)
    {
      while (1)
      {
        v164 = *((_DWORD *)v163 + 7);
        if (v140 >= v164)
          break;
        v163 = (uint64_t *)*v163;
        if (!v163)
          goto LABEL_345;
      }
      if (v164 >= v140)
        break;
      v163 = (uint64_t *)v163[1];
      if (!v163)
        goto LABEL_345;
    }
    geo::ibitstream::readUIntBits(v293, a2, *((unsigned __int8 *)v163 + 32));
    if (!v293[0])
      break;
    LODWORD(v165) = v294;
    geo::ibitstream::readUIntBits(v293, a2, *(unsigned __int8 *)(a3 + 96));
    if (!v293[0])
    {
      GEOGetGeoCSSStyleSheetLog();
      v206 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v206, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v297 = 1024;
        v298 = 305;
        v299 = 2082;
        v300 = "Could not read referenced node index.";
        _os_log_impl(&dword_19F029000, v206, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v207 = (_QWORD *)std::ostream::operator<<();
      v208 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v207, (uint64_t)" STYL Parse Error Here: ", 24);
      v209 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v208, (uint64_t)"Could not read referenced node index.", 37);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v209, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    v166 = v294;
    if (v294 >= *(unsigned __int16 *)(a1 + 16))
    {
      GEOGetGeoCSSStyleSheetLog();
      v210 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v210, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v297 = 1024;
        v298 = 306;
        v299 = 2082;
        v300 = "Referenced node index out of bounds";
        _os_log_impl(&dword_19F029000, v210, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v211 = (_QWORD *)std::ostream::operator<<();
      v212 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v211, (uint64_t)" STYL Parse Error Here: ", 24);
      v213 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v212, (uint64_t)"Referenced node index out of bounds", 35);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v213, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    if (v165 >= 0xFFFF)
    {
      GEOGetGeoCSSStyleSheetLog();
      v165 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v165, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        v297 = 1024;
        v298 = 308;
        v299 = 2082;
        v300 = "AttributeValue nodes larger than uint16!";
        _os_log_impl(&dword_19F029000, v165, OS_LOG_TYPE_DEBUG, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v167 = (_QWORD *)std::ostream::operator<<();
      v168 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v167, (uint64_t)" STYL Parse Warning: ", 21);
      v169 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v168, (uint64_t)"AttributeValue nodes larger than uint16!", 40);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v169, (uint64_t)"\n", 1);
      LOWORD(v165) = -1;
    }
    v161 = *v159;
    v162 = (_WORD *)(*v159 + 4 * (v160 + v289));
    *v162 = (_WORD)v165;
    v162[1] = v166;
    if (++v160 == v291)
      goto LABEL_254;
  }
  GEOGetGeoCSSStyleSheetLog();
  v202 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v202, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
    v297 = 1024;
    v298 = 304;
    v299 = 2082;
    v300 = "Could not read attribute value.";
    _os_log_impl(&dword_19F029000, v202, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
  }

  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
  v203 = (_QWORD *)std::ostream::operator<<();
  v204 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v203, (uint64_t)" STYL Parse Error Here: ", 24);
  v205 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v204, (uint64_t)"Could not read attribute value.", 31);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v205, (uint64_t)"\n", 1);
LABEL_341:
  GEOGetGeoCSSStyleSheetLog();
  v274 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v274, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v296 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
    v297 = 1024;
    v298 = 218;
    v299 = 2082;
    v300 = "Could not construct node.";
    _os_log_impl(&dword_19F029000, v274, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
  }

  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
  v275 = (_QWORD *)std::ostream::operator<<();
  v276 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v275, (uint64_t)" STYL Parse Error Here: ", 24);
  v277 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v276, (uint64_t)"Could not construct node.", 25);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v277, (uint64_t)"\n", 1);
  return 0;
}

BOOL gss::decodeAttributeEncoding(uint64_t *a1, _DWORD *a2, unsigned __int8 a3, unsigned __int8 a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _BOOL8 v20;
  uint64_t v22;
  int v23;
  int v24;
  NSObject *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  NSObject *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _BYTE v33[4];
  int v34;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  const char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v7 = *((unsigned __int8 *)a1 + 24);
  v9 = a1[1];
  v8 = a1[2];
  v10 = v8 + ((unint64_t)(v7 + 1) >> 3);
  v11 = (v7 + 1) & 7;
  v12 = v8 + 1;
  if (v10 < v8 + 1)
  {
    if (*((_BYTE *)a1 + 24))
      v13 = v8 + 1;
    else
      v13 = a1[2];
    if (v9 < v13)
      goto LABEL_14;
    if (*((_BYTE *)a1 + 24))
    {
      if (v9 >= v12)
      {
        v14 = (((1 << (8 - v7)) - 1) & *(unsigned __int8 *)(*a1 + v8)) << v7;
        goto LABEL_27;
      }
      goto LABEL_13;
    }
    if (v9 >= v12)
    {
      LOBYTE(v14) = *(_BYTE *)(*a1 + v8);
      goto LABEL_27;
    }
LABEL_13:
    a1[2] = v10;
    *((_BYTE *)a1 + 24) = v11;
LABEL_14:
    GEOGetGeoCSSStyleSheetLog();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v36 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylDecoding.hpp";
      v37 = 1024;
      v38 = 128;
      v39 = 2082;
      v40 = "Could not read attribute's type.";
      _os_log_impl(&dword_19F029000, v16, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylDecoding.hpp", 82);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v17 = (_QWORD *)std::ostream::operator<<();
    v18 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)" STYL Parse Error Here: ", 24);
    v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)"Could not read attribute's type.", 32);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
    return 0;
  }
  if (v7 <= 7)
    v15 = v8 + 1;
  else
    v15 = v8 + 2;
  if (v9 < v15)
    goto LABEL_13;
  v22 = *a1;
  if (*((_BYTE *)a1 + 24))
  {
    v23 = *(unsigned __int8 *)(v22 + v8);
    if (v12 >= v9)
      v24 = 0;
    else
      v24 = *(unsigned __int8 *)(v22 + v12);
    v14 = ((v24 & (0xFFFF << (8 - v7))) >> (8 - v7)) | ((((1 << (8 - v7)) + 255) & v23) << v7);
    a1[2] = v12;
  }
  else
  {
    LOBYTE(v14) = *(_BYTE *)(v22 + v8);
  }
LABEL_27:
  a1[2] = v10;
  *((_BYTE *)a1 + 24) = v11;
  if ((v14 & 0x80) == 0)
  {
    geo::ibitstream::readUIntBits(v33, a1, a4);
    if (v33[0])
    {
      *a2 = v34 + 0x10000;
      return 1;
    }
    GEOGetGeoCSSStyleSheetLog();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v36 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylDecoding.hpp";
      v37 = 1024;
      v38 = 132;
      v39 = 2082;
      v40 = "Could not read client attribute id.";
      _os_log_impl(&dword_19F029000, v25, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylDecoding.hpp", 82);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v26 = (_QWORD *)std::ostream::operator<<();
    v27 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)" STYL Parse Error Here: ", 24);
    v28 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)"Could not read client attribute id.", 35);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)"\n", 1);
    return 0;
  }
  geo::ibitstream::readUIntBits(v33, a1, a3);
  v20 = v33[0] != 0;
  if (v33[0])
  {
    *a2 = v34;
  }
  else
  {
    GEOGetGeoCSSStyleSheetLog();
    v29 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v36 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylDecoding.hpp";
      v37 = 1024;
      v38 = 130;
      v39 = 2082;
      v40 = "Could not read feature attribute id.";
      _os_log_impl(&dword_19F029000, v29, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylDecoding.hpp", 82);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v30 = (_QWORD *)std::ostream::operator<<();
    v31 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v30, (uint64_t)" STYL Parse Error Here: ", 24);
    v32 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)"Could not read feature attribute id.", 36);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)"\n", 1);
  }
  return v20;
}

void *geo::ibitstream::readUIntBits(void *this, uint64_t *a2, unsigned int a3)
{
  uint64_t v3;
  char v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int *p_dst;
  int v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  int v25;
  unsigned __int8 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  char v32;
  unsigned __int8 v33;
  uint64_t v34;
  int v35;
  unsigned __int8 v36;
  uint64_t v37;
  int v38;
  unsigned __int8 v39;
  unint64_t v40;
  int v41;
  int __dst;

  v3 = (uint64_t)this;
  if (a3 >= 0x21)
    goto LABEL_2;
  v4 = a3;
  v6 = a2[2];
  v7 = (a3 + 7) >> 3;
  v8 = *((unsigned __int8 *)a2 + 24);
  v9 = (v8 + a3) >> 3;
  v10 = v6 + v9;
  v11 = (v8 + a3) & 7;
  __dst = 0;
  v12 = v6 + v7;
  if (v6 + v9 >= (unint64_t)(v6 + v7))
  {
    if (v8 > 8 - (a3 & 7))
      ++v12;
    v22 = a2[1];
    if (v22 < v12)
    {
LABEL_27:
      v31 = 0;
      v32 = v4 & 7;
      if ((v4 & 7) != 0)
        goto LABEL_28;
      goto LABEL_48;
    }
    if (v8)
    {
      if (!a3)
      {
        a2[2] = v10;
        *((_BYTE *)a2 + 24) = v11;
        goto LABEL_49;
      }
      v23 = *a2;
      v24 = 8 - v8;
      v25 = 0xFFFF << (8 - v8);
      v26 = *(_BYTE *)(*a2 + v6);
      v27 = v6 + 1;
      if (v6 + 1 >= v22)
        v28 = 0;
      else
        v28 = *(unsigned __int8 *)(v23 + v27);
      a2[2] = v27;
      LOBYTE(__dst) = ((v28 & v25) >> v24) | ((((1 << (8 - v8)) - 1) & v26) << v8);
      if ((_DWORD)v7 != 1)
      {
        v33 = *(_BYTE *)(v23 + v27);
        v34 = v6 + 2;
        v35 = v6 + 2 >= v22 ? 0 : *(unsigned __int8 *)(v23 + v34);
        a2[2] = v34;
        BYTE1(__dst) = ((v35 & v25) >> v24) | ((((1 << (8 - v8)) - 1) & v33) << v8);
        if ((_DWORD)v7 != 2)
        {
          v36 = *(_BYTE *)(v23 + v34);
          v37 = v6 + 3;
          v38 = v6 + 3 >= v22 ? 0 : *(unsigned __int8 *)(v23 + v37);
          a2[2] = v37;
          BYTE2(__dst) = ((v38 & v25) >> v24) | ((((1 << (8 - v8)) - 1) & v36) << v8);
          if ((_DWORD)v7 != 3)
          {
            v39 = *(_BYTE *)(v23 + v37);
            v40 = v6 + 4;
            if (v40 >= v22)
              v41 = 0;
            else
              v41 = *(unsigned __int8 *)(v23 + v40);
            HIBYTE(__dst) = ((v41 & v25) >> v24) | ((((1 << (8 - v8)) - 1) & v39) << v8);
          }
        }
      }
    }
    else
    {
      this = memcpy(&__dst, (const void *)(*a2 + v6), (a3 + 7) >> 3);
    }
  }
  else
  {
    v13 = (int)v7 - 1;
    v14 = v6 + v13;
    if (v8)
      v15 = v14 + 1;
    else
      v15 = v6 + (int)v7 - 1;
    v16 = a2[1];
    if (v16 < v15)
      goto LABEL_2;
    if (v8)
    {
      if ((_DWORD)v13)
      {
        v17 = *a2;
        p_dst = &__dst;
        do
        {
          v21 = v6 + 1;
          if (v6 + 1 < v16)
            v19 = *(unsigned __int8 *)(v17 + v6 + 1);
          else
            v19 = 0;
          v20 = ((v19 & (0xFFFF << (8 - v8))) >> (8 - v8)) | ((((1 << (8 - v8)) + 255) & *(unsigned __int8 *)(v17 + v6)) << v8);
          a2[2] = v21;
          *(_BYTE *)p_dst = v20;
          p_dst = (int *)((char *)p_dst + 1);
          v6 = v21;
          --v13;
        }
        while (v13);
      }
      else
      {
        v21 = v6;
      }
      if (v16 < v21 + 1)
        goto LABEL_27;
      v30 = (((1 << (8 - v8)) - 1) & *(unsigned __int8 *)(*a2 + v21)) << v8;
    }
    else
    {
      v29 = *a2;
      this = memcpy(&__dst, (const void *)(*a2 + v6), v13);
      a2[2] = v14;
      if (v16 < v14 + 1)
        goto LABEL_27;
      LOBYTE(v30) = *(_BYTE *)(v29 + v14);
    }
    *((_BYTE *)&__dst + v7 - 1) = v30;
  }
  v31 = 1;
  v32 = v4 & 7;
  if ((v4 & 7) != 0)
  {
LABEL_28:
    *((_BYTE *)&__dst + v7 - 1) = *((unsigned __int8 *)&__dst + v7 - 1) >> (8 - v32);
    a2[2] = v10;
    *((_BYTE *)a2 + 24) = v11;
    if ((v31 & 1) == 0)
      goto LABEL_2;
    goto LABEL_49;
  }
LABEL_48:
  a2[2] = v10;
  *((_BYTE *)a2 + 24) = v11;
  if (!v31)
  {
LABEL_2:
    *(_BYTE *)v3 = 0;
    return this;
  }
LABEL_49:
  *(_BYTE *)v3 = 1;
  *(_DWORD *)(v3 + 4) = __dst;
  return this;
}

uint64_t geo::ibitstream::readUIntBits@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *p_dst;
  uint64_t v19;
  int v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  uint64_t v30;
  int v31;
  int v32;
  int __dst;

  if (a2 >= 0x21)
    goto LABEL_2;
  v4 = a2;
  v5 = this;
  v6 = *(_QWORD *)(this + 16);
  v7 = (a2 + 7) >> 3;
  v8 = *(unsigned __int8 *)(this + 24);
  v9 = (v8 + a2) >> 3;
  v10 = v6 + v9;
  v11 = (v8 + a2) & 7;
  __dst = 0;
  if (v6 + v9 < v6 + v7)
  {
    v12 = v7 - 1;
    v13 = v6 + (int)v7 - 1;
    if (v8)
      v14 = v13 + 1;
    else
      v14 = v6 + v12;
    v15 = *(_QWORD *)(this + 8);
    if (v15 < v14)
      goto LABEL_2;
    v16 = v12;
    if (v8)
    {
      if ((_DWORD)v7 == 1)
      {
        v19 = v6;
      }
      else
      {
        v17 = *(_QWORD *)this;
        p_dst = &__dst;
        do
        {
          v19 = v6 + 1;
          if (v6 + 1 >= v15)
            v20 = 0;
          else
            v20 = *(unsigned __int8 *)(v17 + v6 + 1);
          v21 = ((v20 & (0xFFFF << (8 - v8))) >> (8 - v8)) | ((((1 << (8 - v8)) + 255) & *(unsigned __int8 *)(v17 + v6)) << v8);
          *(_QWORD *)(this + 16) = v19;
          *(_BYTE *)p_dst = v21;
          p_dst = (int *)((char *)p_dst + 1);
          v6 = v19;
          --v16;
        }
        while (v16);
      }
      if (v15 < v19 + 1)
        goto LABEL_33;
      v31 = (((1 << (8 - v8)) - 1) & *(unsigned __int8 *)(*(_QWORD *)this + v19)) << v8;
      goto LABEL_35;
    }
    v30 = *(_QWORD *)this;
    this = (uint64_t)memcpy(&__dst, (const void *)(*(_QWORD *)this + v6), v12);
    *(_QWORD *)(v5 + 16) = v13;
    if (v15 >= v13 + 1)
    {
      LOBYTE(v31) = *(_BYTE *)(v30 + v13);
LABEL_35:
      *((_BYTE *)&__dst + v7 - 1) = v31;
      goto LABEL_36;
    }
LABEL_33:
    v32 = 0;
    goto LABEL_37;
  }
  if (v8 <= 8 - (a2 & 7))
    v22 = v6 + v7;
  else
    v22 = v6 + v7 + 1;
  v23 = *(_QWORD *)(this + 8);
  if (v23 < v22)
    goto LABEL_33;
  if (!v8)
  {
    this = (uint64_t)memcpy(&__dst, (const void *)(*(_QWORD *)this + v6), v7);
LABEL_36:
    v32 = 1;
LABEL_37:
    if ((v4 & 7) != 0)
    {
      *((_BYTE *)&__dst + v7 - 1) = *((unsigned __int8 *)&__dst + v7 - 1) >> (8 - (v4 & 7));
      *(_QWORD *)(v5 + 16) = v10;
      *(_BYTE *)(v5 + 24) = v11;
      if ((v32 & 1) != 0)
        goto LABEL_43;
    }
    else
    {
      *(_QWORD *)(v5 + 16) = v10;
      *(_BYTE *)(v5 + 24) = v11;
      if (v32)
        goto LABEL_43;
    }
LABEL_2:
    *(_BYTE *)a3 = 0;
    return this;
  }
  if (a2)
  {
    v24 = *(_QWORD *)this;
    v25 = &__dst;
    v26 = (a2 + 7) >> 3;
    do
    {
      v27 = v6 + 1;
      if (v6 + 1 >= v23)
        v28 = 0;
      else
        v28 = *(unsigned __int8 *)(v24 + v6 + 1);
      this = (v28 & (0xFFFF << (8 - v8))) >> (8 - v8);
      v29 = this | ((((1 << (8 - v8)) + 255) & *(unsigned __int8 *)(v24 + v6)) << v8);
      *(_QWORD *)(v5 + 16) = v27;
      *(_BYTE *)v25 = v29;
      v25 = (int *)((char *)v25 + 1);
      v6 = v27;
      --v26;
    }
    while (v26);
    goto LABEL_36;
  }
  *(_QWORD *)(this + 16) = v10;
  *(_BYTE *)(this + 24) = v11;
LABEL_43:
  *(_BYTE *)a3 = 1;
  *(_DWORD *)(a3 + 4) = __dst;
  return this;
}

void geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>>::intern<geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>>(_WORD *a1, uint64_t a2)
{
  _WORD *v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  gss::Allocator *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  gss::Allocator **v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  gss::Allocator **v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  gss::Allocator **v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  gss::Allocator *v30;
  gss::Allocator **v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  int v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  _OWORD *v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  uint64_t v48;

  if (!*((_BYTE *)a1 + 12))
  {
    v2 = a1;
    v3 = (unsigned __int16)a1[4];
    if (!a1[4])
    {
LABEL_49:
      *((_BYTE *)v2 + 12) = 1;
      return;
    }
    if (*(_DWORD *)(a2 + 24) >= v3)
    {
      v5 = *(_QWORD *)(a2 + 8);
      if (*(_QWORD *)a2 == v5 || (v6 = *(uint64_t **)(v5 - 8), v7 = v6[1], v6[2] - v7 < v3))
      {
        v8 = (gss::Allocator *)operator new();
        v9 = *(unsigned int *)(a2 + 24);
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
        *((_QWORD *)v8 + 2) = v9;
        v10 = gss::Allocator::instance(v8);
        a1 = (_WORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, 4 * v9, 2);
        *(_QWORD *)v8 = a1;
        v12 = *(gss::Allocator ***)(a2 + 8);
        v11 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v12 >= v11)
        {
          v15 = *(char **)a2;
          v16 = (uint64_t)v12 - *(_QWORD *)a2;
          v17 = v16 >> 3;
          v18 = (v16 >> 3) + 1;
          if (v18 >> 61)
            abort();
          v19 = v11 - (_QWORD)v15;
          if (v19 >> 2 > v18)
            v18 = v19 >> 2;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            if (v20 >> 61)
              std::__throw_bad_array_new_length[abi:nn180100]();
            a1 = operator new(8 * v20);
          }
          else
          {
            a1 = 0;
          }
          v21 = (gss::Allocator **)&a1[4 * v17];
          v22 = (char *)&a1[4 * v20];
          *v21 = v8;
          v14 = v21 + 1;
          if (v12 == (gss::Allocator **)v15)
          {
            *(_QWORD *)a2 = v21;
            *(_QWORD *)(a2 + 8) = v14;
            *(_QWORD *)(a2 + 16) = v22;
          }
          else
          {
            v23 = (char *)v12 - v15 - 8;
            if (v23 <= 0x77
              || (gss::Allocator **)((char *)v12 - (v23 & 0xFFFFFFFFFFFFFFF8) - 8) < v21
              && (gss::Allocator **)((char *)a1 + v16 - (v23 & 0xFFFFFFFFFFFFFFF8) - 8) < v12)
            {
              goto LABEL_55;
            }
            v24 = (v23 >> 3) + 1;
            v25 = &a1[4 * v17 - 8];
            v26 = v12 - 4;
            v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v29 = *(_OWORD *)v26;
              v28 = *((_OWORD *)v26 + 1);
              *(_OWORD *)v26 = 0uLL;
              *((_OWORD *)v26 + 1) = 0uLL;
              v26 -= 4;
              *(v25 - 1) = v29;
              *v25 = v28;
              v25 -= 2;
              v27 -= 4;
            }
            while (v27);
            v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
            v12 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
            if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_55:
              do
              {
                v30 = *--v12;
                *v12 = 0;
                *--v21 = v30;
              }
              while (v12 != (gss::Allocator **)v15);
            }
            v12 = *(gss::Allocator ***)a2;
            v31 = *(gss::Allocator ***)(a2 + 8);
            *(_QWORD *)a2 = v21;
            *(_QWORD *)(a2 + 8) = v14;
            *(_QWORD *)(a2 + 16) = v22;
            while (v31 != v12)
            {
              v33 = *--v31;
              v32 = v33;
              *v31 = 0;
              if (v33)
              {
                v34 = gss::Allocator::instance((gss::Allocator *)a1);
                (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v34 + 40))(v34, *v32, 4 * v32[2]);
                a1 = (_WORD *)MEMORY[0x1A1AF4E00](v32, 0x1020C4024DAA5DELL);
              }
            }
          }
          if (v12)
            operator delete(v12);
          *(_QWORD *)(a2 + 8) = v14;
        }
        else
        {
          *v12 = v8;
          v13 = v12 + 1;
          *(_QWORD *)(a2 + 8) = v13;
          v14 = v13;
        }
        v6 = (uint64_t *)*(v14 - 1);
        v7 = v6[1];
      }
      v35 = *v6;
      v6[1] = v7 + v3;
      if (v35)
      {
        v36 = v35 + 4 * v7;
        v37 = (unsigned __int16)v2[4];
        if (v2[4])
        {
          v38 = *(int **)v2;
          if (v37 < 8)
          {
            v39 = (unsigned __int16)v2[4];
            v40 = (_DWORD *)(v35 + 4 * v7);
          }
          else
          {
            v39 = (unsigned __int16)v2[4];
            v40 = (_DWORD *)(v35 + 4 * v7);
            if ((unint64_t)(v36 - (_QWORD)v38) >= 0x20)
            {
              v41 = (unsigned __int16)v37 & 0xFFF8;
              v42 = 4 * v41;
              v40 = (_DWORD *)(v36 + 4 * v41);
              v43 = (__int128 *)(v38 + 4);
              v44 = (_OWORD *)(v35 + 4 * v7 + 16);
              v45 = v41;
              do
              {
                v46 = *v43;
                *(v44 - 1) = *(v43 - 1);
                *v44 = v46;
                v43 += 2;
                v44 += 2;
                v45 -= 8;
              }
              while (v45);
              if (v41 == v37)
                goto LABEL_45;
              v39 = v37 - v41;
              v38 = (int *)((char *)v38 + v42);
            }
          }
          do
          {
            v47 = *v38++;
            *v40++ = v47;
            --v39;
          }
          while ((_WORD)v39);
        }
LABEL_45:
        if (!*((_BYTE *)v2 + 12))
        {
          if (*(_QWORD *)v2)
          {
            v48 = gss::Allocator::instance((gss::Allocator *)a1);
            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v48 + 40))(v48, *(_QWORD *)v2, 4 * (unsigned __int16)v2[5]);
          }
        }
        v2[4] = v37;
        v2[5] = 0;
        *(_QWORD *)v2 = v36;
        goto LABEL_49;
      }
    }
  }
}

void sub_19F0367E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>>::PageInfo,std::default_delete<geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>>::PageInfo>>::~unique_ptr[abi:nn180100]((gss::Allocator *)va);
  _Unwind_Resume(a1);
}

void sub_19F0367FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x1020C4024DAA5DELL);
  _Unwind_Resume(a1);
}

uint64_t gss::Allocator::instance(gss::Allocator *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  {
    v3 = operator new();
    geo::MallocZoneAllocator::MallocZoneAllocator(v3, "GeoCSS", 0x8020B95F00000006, 0, 0);
    gss::Allocator::instance(void)::alloc = v3;
  }
  return gss::Allocator::instance(void)::alloc;
}

void sub_19F0368B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40DA10AB66);
  _Unwind_Resume(a1);
}

void geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>>::resize(gss::Allocator *a1, unint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  gss::Allocator *v7;
  gss::Allocator *v8;
  gss::Allocator *v9;
  uint64_t v10;
  uint64_t v11;
  gss::Allocator *v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  int v18;
  uint64_t v19;

  if (!*((_BYTE *)a1 + 12))
  {
    v4 = (_QWORD *)((char *)a1 + 8);
    v5 = *((unsigned __int16 *)a1 + 4);
    if (v5 > a2)
    {
LABEL_3:
      *(_WORD *)v4 = a2;
      return;
    }
    if (v5 < a2)
    {
      if (*((unsigned __int16 *)a1 + 5) >= a2)
      {
        v8 = *(gss::Allocator **)a1;
        if (v5 == a2)
          goto LABEL_3;
LABEL_24:
        bzero((char *)v8 + 4 * v5, 4 * a2 - 4 * v5);
        goto LABEL_3;
      }
      v6 = gss::Allocator::instance(a1);
      v7 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, 4 * a2, 2);
      v8 = v7;
      v9 = *(gss::Allocator **)a1;
      v5 = *((unsigned __int16 *)a1 + 4);
      if (!*(_QWORD *)a1)
      {
LABEL_23:
        *((_WORD *)a1 + 5) = a2;
        *(_QWORD *)a1 = v8;
        if (v5 == a2)
          goto LABEL_3;
        goto LABEL_24;
      }
      if (*((_WORD *)a1 + 4))
      {
        if (v5 < 8 || (unint64_t)(v7 - v9) < 0x20)
        {
          v17 = *((unsigned __int16 *)a1 + 4);
          v12 = v7;
        }
        else
        {
          v10 = (unsigned __int16)v5 & 0xFFF8;
          v11 = 4 * v10;
          v12 = (gss::Allocator *)((char *)v7 + 4 * v10);
          v13 = (__int128 *)((char *)v9 + 16);
          v14 = (_OWORD *)((char *)v7 + 16);
          v15 = v10;
          do
          {
            v16 = *v13;
            *(v14 - 1) = *(v13 - 1);
            *v14 = v16;
            v13 += 2;
            v14 += 2;
            v15 -= 8;
          }
          while (v15);
          if (v10 == v5)
            goto LABEL_19;
          v17 = v5 - v10;
          v9 = (gss::Allocator *)((char *)v9 + v11);
        }
        do
        {
          v18 = *(_DWORD *)v9;
          v9 = (gss::Allocator *)((char *)v9 + 4);
          *(_DWORD *)v12 = v18;
          v12 = (gss::Allocator *)((char *)v12 + 4);
          --v17;
        }
        while ((_WORD)v17);
      }
LABEL_19:
      if (!*((_BYTE *)a1 + 12))
      {
        if (*(_QWORD *)a1)
        {
          v19 = gss::Allocator::instance(v7);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v19 + 40))(v19, *(_QWORD *)a1, 4 * *((unsigned __int16 *)a1 + 5));
        }
      }
      *((_BYTE *)v4 + 4) = 0;
      *(_DWORD *)v4 = 0;
      goto LABEL_23;
    }
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&)#1} &,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode*,false>(uint64_t result, int32x2_t *a2, uint64_t a3, char a4)
{
  int32x2_t *v7;
  __int32 *v8;
  int32x2_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int16 *v13;
  unsigned int v14;
  unsigned int v15;
  __int32 v16;
  unsigned int v17;
  __int32 v18;
  __int32 v19;
  __int32 v20;
  __int32 v21;
  __int32 v22;
  char *v23;
  char *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  __int32 v28;
  __int32 v29;
  __int32 v30;
  __int32 v31;
  char *v32;
  unsigned __int16 *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  __int32 v37;
  __int32 v38;
  __int32 v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  __int32 v43;
  __int32 v44;
  __int32 v45;
  __int32 v46;
  int32x2_t *v47;
  unint64_t v48;
  unsigned int v49;
  int32x2_t *v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  int32x2_t *v54;
  __int32 v55;
  unsigned int v56;
  unsigned int v57;
  BOOL v58;
  unsigned int v59;
  unsigned int v60;
  int32x2_t *v61;
  int32x2_t *v62;
  unsigned int v63;
  __int32 v64;
  unsigned int v65;
  unsigned int v66;
  __int32 *v67;
  __int32 v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  __int32 v74;
  unsigned int v75;
  int32x2_t *v76;
  BOOL v78;
  uint64_t v79;
  int32x2_t *v80;
  int32x2_t *v81;
  unsigned int v82;
  unsigned int v83;
  __int32 v84;
  uint64_t v85;
  unsigned int v86;
  int64_t v87;
  int64_t v88;
  BOOL v89;
  uint64_t v90;
  unsigned __int16 *v91;
  unsigned int v92;
  unsigned int v93;
  BOOL v94;
  unsigned __int16 *v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  BOOL v99;
  _DWORD *v100;
  uint64_t v101;
  __int32 v102;
  __int32 v103;
  __int32 v104;
  unsigned int v105;
  unsigned int v106;
  __int32 v107;
  int32x2_t *v108;
  __int32 v109;
  uint64_t v110;
  uint64_t v111;
  __int32 v112;
  int32x2_t *v113;
  int32x2_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  int32x2_t *v119;
  __int32 v120;
  int32x2_t *v121;
  __int32 v122;
  __int32 v123;
  __int32 v124;
  __int32 v125;

  v7 = (int32x2_t *)result;
LABEL_2:
  v8 = (__int32 *)&a2[-1] + 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = ((char *)a2 - (char *)v9) >> 2;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*(unsigned __int16 *)v8 < v9->u16[0])
        {
          v68 = v9->i32[0];
          goto LABEL_101;
        }
        return result;
      case 3:
        v69 = v9->u16[2];
        v70 = *(unsigned __int16 *)v8;
        if (v69 >= v9->u16[0])
        {
          if (v70 < v69)
          {
            v102 = v9->i32[1];
            v9->i32[1] = *v8;
            *v8 = v102;
            if (v9->u16[2] < v9->u16[0])
              *v9 = vrev64_s32(*v9);
          }
        }
        else
        {
          v68 = v9->i32[0];
          if (v70 >= v69)
          {
            v9->i32[0] = v9->i32[1];
            v9->i32[1] = v68;
            if (*(unsigned __int16 *)v8 < (unsigned __int16)v68)
            {
              v9->i32[1] = *v8;
              *v8 = v68;
            }
          }
          else
          {
LABEL_101:
            v9->i32[0] = *v8;
            *v8 = v68;
          }
        }
        return result;
      case 4:
        v71 = v9->u16[2];
        v72 = v9->u16[0];
        v73 = v9[1].u16[0];
        if (v71 >= v72)
        {
          if (v73 < v71)
          {
            v73 = v9->u32[1];
            v103 = v9[1].i32[0];
            v9->i32[1] = v103;
            v9[1].i32[0] = v73;
            v73 = (unsigned __int16)v73;
            if (v72 > (unsigned __int16)v103)
            {
              v104 = v9->i32[0];
              v9->i32[0] = v103;
              v9->i32[1] = v104;
            }
          }
        }
        else
        {
          v74 = v9->i32[0];
          v75 = (unsigned __int16)v9->i32[0];
          if (v73 >= v71)
          {
            v9->i32[0] = v9->i32[1];
            v9->i32[1] = v74;
            if (v73 >= v75)
              goto LABEL_181;
            v9->i32[1] = v9[1].i32[0];
          }
          else
          {
            v9->i32[0] = v9[1].i32[0];
          }
          v9[1].i32[0] = v74;
          v73 = v75;
        }
LABEL_181:
        if (*(unsigned __int16 *)v8 < v73)
        {
          v122 = v9[1].i32[0];
          v9[1].i32[0] = *v8;
          *v8 = v122;
          if (v9[1].u16[0] < v9->u16[2])
          {
            v124 = v9->i32[1];
            v123 = v9[1].i32[0];
            v9->i32[1] = v123;
            v9[1].i32[0] = v124;
            if (v9->u16[0] > (unsigned __int16)v123)
            {
              v125 = v9->i32[0];
              v9->i32[0] = v123;
              v9->i32[1] = v125;
            }
          }
        }
        return result;
      case 5:
        return (uint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&)#1} &,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode*>((unsigned __int16 *)v9, (unsigned __int16 *)v9 + 2, (unsigned int *)&v9[1], (unsigned int *)&v9[1] + 1, (unsigned int *)&a2[-1] + 1);
      default:
        if (v10 <= 95)
        {
          v76 = (int32x2_t *)((char *)v9 + 4);
          v78 = v9 == a2 || v76 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v78)
            {
              v79 = 0;
              v80 = v9;
              do
              {
                v82 = v80->u16[2];
                v83 = v80->u16[0];
                v80 = v76;
                if (v82 < v83)
                {
                  v84 = v76->i32[0];
                  v85 = v79;
                  do
                  {
                    *(__int32 *)((char *)&v9->i32[1] + v85) = *(__int32 *)((char *)v9->i32 + v85);
                    if (!v85)
                    {
                      v81 = v9;
                      goto LABEL_116;
                    }
                    v86 = *(unsigned __int16 *)((char *)&v9->u16[-2] + v85);
                    v85 -= 4;
                  }
                  while (v86 > (unsigned __int16)v84);
                  v81 = (int32x2_t *)((char *)v9 + v85 + 4);
LABEL_116:
                  v81->i32[0] = v84;
                }
                v76 = (int32x2_t *)((char *)v80 + 4);
                v79 += 4;
              }
              while (&v80->u8[4] != (unsigned __int8 *)a2);
            }
          }
          else if (!v78)
          {
            do
            {
              v105 = v7->u16[2];
              v106 = v7->u16[0];
              v7 = v76;
              if (v105 < v106)
              {
                v107 = v76->i32[0];
                do
                {
                  v108 = v76;
                  v109 = v76[-1].i32[1];
                  v76 = (int32x2_t *)((char *)v76 - 4);
                  v108->i32[0] = v109;
                }
                while (v108[-1].u16[0] > (unsigned __int16)v107);
                v76->i32[0] = v107;
              }
              v76 = (int32x2_t *)((char *)v7 + 4);
            }
            while (&v7->u8[4] != (unsigned __int8 *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v87 = (unint64_t)(v11 - 2) >> 1;
            v88 = v87;
            do
            {
              if (v87 >= v88)
              {
                v90 = (2 * v88) | 1;
                v91 = (unsigned __int16 *)v9 + 2 * v90;
                if (2 * v88 + 2 >= v11)
                {
                  v92 = *v91;
                }
                else
                {
                  v92 = *v91;
                  v93 = v91[2];
                  v94 = v92 >= v93;
                  if (v92 <= v93)
                    v92 = v91[2];
                  if (!v94)
                  {
                    v91 += 2;
                    v90 = 2 * v88 + 2;
                  }
                }
                v95 = (unsigned __int16 *)v9 + 2 * v88;
                if (v92 >= *v95)
                {
                  v96 = *(_DWORD *)v95;
                  while (1)
                  {
                    v100 = v95;
                    v95 = v91;
                    *v100 = *(_DWORD *)v91;
                    if (v87 < v90)
                      break;
                    v101 = (2 * v90) | 1;
                    v91 = (unsigned __int16 *)v9 + 2 * v101;
                    v90 = 2 * v90 + 2;
                    if (v90 < v11)
                    {
                      v97 = *v91;
                      result = (uint64_t)(v91 + 2);
                      v98 = v91[2];
                      v99 = v97 >= v98;
                      if (v97 <= v98)
                        v97 = v91[2];
                      if (v99)
                        v90 = v101;
                      else
                        v91 += 2;
                      if (v97 < (unsigned __int16)v96)
                        break;
                    }
                    else
                    {
                      v90 = v101;
                      if (*v91 < (unsigned __int16)v96)
                        break;
                    }
                  }
                  *(_DWORD *)v95 = v96;
                }
              }
              v89 = v88-- <= 0;
            }
            while (!v89);
            v110 = (unint64_t)v10 >> 2;
            do
            {
              v111 = 0;
              v112 = v9->i32[0];
              v113 = v9;
              do
              {
                v114 = (int32x2_t *)((char *)v113 + 4 * v111 + 4);
                v115 = (2 * v111) | 1;
                v116 = 2 * v111 + 2;
                if (v116 < v110 && v114->u16[0] < v114->u16[2])
                {
                  v114 = (int32x2_t *)((char *)v114 + 4);
                  v115 = v116;
                }
                v113->i32[0] = v114->i32[0];
                v113 = v114;
                v111 = v115;
              }
              while (v115 <= (uint64_t)((unint64_t)(v110 - 2) >> 1));
              a2 = (int32x2_t *)((char *)a2 - 4);
              if (v114 == a2)
              {
                v114->i32[0] = v112;
              }
              else
              {
                v114->i32[0] = a2->i32[0];
                a2->i32[0] = v112;
                v117 = (char *)v114 - (char *)v9 + 4;
                if (v117 >= 5)
                {
                  v118 = (((unint64_t)v117 >> 2) - 2) >> 1;
                  v119 = (int32x2_t *)((char *)v9 + 4 * v118);
                  if (v119->u16[0] < v114->u16[0])
                  {
                    v120 = v114->i32[0];
                    do
                    {
                      v121 = v114;
                      v114 = v119;
                      v121->i32[0] = v119->i32[0];
                      if (!v118)
                        break;
                      v118 = (v118 - 1) >> 1;
                      v119 = (int32x2_t *)((char *)v9 + 4 * v118);
                    }
                    while (v119->u16[0] < (unsigned __int16)v120);
                    v114->i32[0] = v120;
                  }
                }
              }
              v89 = v110-- <= 2;
            }
            while (!v89);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (unsigned __int16 *)v9 + 2 * ((unint64_t)v11 >> 1);
        v14 = *(unsigned __int16 *)v8;
        if ((unint64_t)v10 < 0x201)
        {
          v17 = v9->u16[0];
          if (v17 >= *v13)
          {
            if (v14 < v17)
            {
              v21 = v9->i32[0];
              v9->i32[0] = *v8;
              *v8 = v21;
              if (v9->u16[0] < *v13)
              {
                v22 = *(_DWORD *)v13;
                *(_DWORD *)v13 = v9->i32[0];
                v9->i32[0] = v22;
                --a3;
                if ((a4 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_56;
              }
            }
          }
          else
          {
            v18 = *(_DWORD *)v13;
            if (v14 >= v17)
            {
              *(_DWORD *)v13 = v9->i32[0];
              v9->i32[0] = v18;
              if (*(unsigned __int16 *)v8 >= (unsigned __int16)v18)
                goto LABEL_32;
              v9->i32[0] = *v8;
            }
            else
            {
              *(_DWORD *)v13 = *v8;
            }
            *v8 = v18;
          }
LABEL_32:
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_33;
LABEL_56:
          v31 = v9->i32[0];
          if (v9[-1].u16[2] < v9->u16[0])
            goto LABEL_57;
          v59 = (unsigned __int16)v9->i32[0];
          if (*(unsigned __int16 *)v8 <= v59)
          {
            v61 = (int32x2_t *)((char *)v9 + 4);
            do
            {
              v9 = v61;
              if (v61 >= a2)
                break;
              v61 = (int32x2_t *)((char *)v61 + 4);
            }
            while (v9->u16[0] <= v59);
          }
          else
          {
            do
            {
              v60 = v9->u16[2];
              v9 = (int32x2_t *)((char *)v9 + 4);
            }
            while (v60 <= v59);
          }
          v62 = a2;
          if (v9 < a2)
          {
            v62 = a2;
            do
            {
              v63 = v62[-1].u16[2];
              v62 = (int32x2_t *)((char *)v62 - 4);
            }
            while (v63 > v59);
          }
          while (v9 < v62)
          {
            v64 = v9->i32[0];
            v9->i32[0] = v62->i32[0];
            v62->i32[0] = v64;
            do
            {
              v65 = v9->u16[2];
              v9 = (int32x2_t *)((char *)v9 + 4);
            }
            while (v65 <= v59);
            do
            {
              v66 = v62[-1].u16[2];
              v62 = (int32x2_t *)((char *)v62 - 4);
            }
            while (v66 > v59);
          }
          v67 = (__int32 *)&v9[-1] + 1;
          if (&v9[-1].u8[4] != (unsigned __int8 *)v7)
            v7->i32[0] = *v67;
          a4 = 0;
          *v67 = v31;
          continue;
        }
        v15 = *v13;
        if (v15 >= v9->u16[0])
        {
          if (v14 < v15)
          {
            v19 = *(_DWORD *)v13;
            *(_DWORD *)v13 = *v8;
            *v8 = v19;
            if (*v13 < v9->u16[0])
            {
              v20 = v9->i32[0];
              v9->i32[0] = *(_DWORD *)v13;
              *(_DWORD *)v13 = v20;
            }
          }
        }
        else
        {
          v16 = v9->i32[0];
          if (v14 < v15)
          {
            v9->i32[0] = *v8;
            goto LABEL_22;
          }
          v9->i32[0] = *(_DWORD *)v13;
          *(_DWORD *)v13 = v16;
          if (*(unsigned __int16 *)v8 < (unsigned __int16)v16)
          {
            *(_DWORD *)v13 = *v8;
LABEL_22:
            *v8 = v16;
          }
        }
        v23 = (char *)v9 + 4 * v12;
        v26 = *((unsigned __int16 *)v23 - 2);
        v24 = v23 - 4;
        v25 = v26;
        v27 = a2[-1].u16[0];
        if (v26 >= v9->u16[2])
        {
          if (v27 < v25)
          {
            v29 = *(_DWORD *)v24;
            *(_DWORD *)v24 = a2[-1].i32[0];
            a2[-1].i32[0] = v29;
            if (*(unsigned __int16 *)v24 < v9->u16[2])
            {
              v30 = v9->i32[1];
              v9->i32[1] = *(_DWORD *)v24;
              *(_DWORD *)v24 = v30;
            }
          }
        }
        else
        {
          v28 = v9->i32[1];
          if (v27 < v25)
          {
            v9->i32[1] = a2[-1].i32[0];
            goto LABEL_36;
          }
          v9->i32[1] = *(_DWORD *)v24;
          *(_DWORD *)v24 = v28;
          if (a2[-1].u16[0] < (unsigned __int16)v28)
          {
            *(_DWORD *)v24 = a2[-1].i32[0];
LABEL_36:
            a2[-1].i32[0] = v28;
          }
        }
        v32 = (char *)v9 + 4 * v12;
        v35 = *((unsigned __int16 *)v32 + 2);
        v33 = (unsigned __int16 *)(v32 + 4);
        v34 = v35;
        v36 = a2[-2].u16[2];
        if (v35 >= v9[1].u16[0])
        {
          if (v36 < v34)
          {
            v38 = *(_DWORD *)v33;
            *(_DWORD *)v33 = a2[-2].i32[1];
            a2[-2].i32[1] = v38;
            if (*v33 < v9[1].u16[0])
            {
              v39 = v9[1].i32[0];
              v9[1].i32[0] = *(_DWORD *)v33;
              *(_DWORD *)v33 = v39;
            }
          }
        }
        else
        {
          v37 = v9[1].i32[0];
          if (v36 < v34)
          {
            v9[1].i32[0] = a2[-2].i32[1];
            goto LABEL_45;
          }
          v9[1].i32[0] = *(_DWORD *)v33;
          *(_DWORD *)v33 = v37;
          if (a2[-2].u16[2] < (unsigned __int16)v37)
          {
            *(_DWORD *)v33 = a2[-2].i32[1];
LABEL_45:
            a2[-2].i32[1] = v37;
          }
        }
        v40 = *v13;
        v41 = *(unsigned __int16 *)v24;
        v42 = *v33;
        if (v40 >= v41)
        {
          v43 = *(_DWORD *)v13;
          if (v42 < v40)
          {
            v44 = *(_DWORD *)v33;
            *(_DWORD *)v13 = *(_DWORD *)v33;
            *(_DWORD *)v33 = v43;
            if (v41 <= (unsigned __int16)v44)
            {
              v43 = v44;
            }
            else
            {
              v43 = *(_DWORD *)v24;
              *(_DWORD *)v24 = v44;
              *(_DWORD *)v13 = v43;
            }
          }
        }
        else
        {
          v43 = *(_DWORD *)v24;
          if (v42 >= v40)
          {
            *(_DWORD *)v24 = *(_DWORD *)v13;
            *(_DWORD *)v13 = v43;
            if (v42 < (unsigned __int16)v43)
            {
              v45 = *(_DWORD *)v33;
              *(_DWORD *)v13 = *(_DWORD *)v33;
              *(_DWORD *)v33 = v43;
              v43 = v45;
            }
          }
          else
          {
            *(_DWORD *)v24 = *(_DWORD *)v33;
            *(_DWORD *)v33 = v43;
            v43 = *(_DWORD *)v13;
          }
        }
        v46 = v9->i32[0];
        v9->i32[0] = v43;
        *(_DWORD *)v13 = v46;
        --a3;
        if ((a4 & 1) == 0)
          goto LABEL_56;
LABEL_33:
        v31 = v9->i32[0];
LABEL_57:
        v47 = v9;
        do
        {
          v48 = (unint64_t)v47;
          v49 = v47->u16[2];
          v47 = (int32x2_t *)((char *)v47 + 4);
        }
        while (v49 < (unsigned __int16)v31);
        v50 = a2;
        if ((int32x2_t *)v48 == v9)
        {
          v50 = a2;
          do
          {
            if (v47 >= v50)
              break;
            v52 = v50[-1].u16[2];
            v50 = (int32x2_t *)((char *)v50 - 4);
          }
          while (v52 >= (unsigned __int16)v31);
        }
        else
        {
          do
          {
            v51 = v50[-1].u16[2];
            v50 = (int32x2_t *)((char *)v50 - 4);
          }
          while (v51 >= (unsigned __int16)v31);
        }
        if (v47 < v50)
        {
          v53 = (unint64_t)v47;
          v54 = v50;
          do
          {
            v55 = *(_DWORD *)v53;
            *(_DWORD *)v53 = v54->i32[0];
            v54->i32[0] = v55;
            do
            {
              v48 = v53;
              v56 = *(unsigned __int16 *)(v53 + 4);
              v53 += 4;
            }
            while (v56 < (unsigned __int16)v31);
            do
            {
              v57 = v54[-1].u16[2];
              v54 = (int32x2_t *)((char *)v54 - 4);
            }
            while (v57 >= (unsigned __int16)v31);
          }
          while (v53 < (unint64_t)v54);
        }
        if ((int32x2_t *)v48 != v9)
          v9->i32[0] = *(_DWORD *)v48;
        *(_DWORD *)v48 = v31;
        if (v47 < v50)
        {
LABEL_76:
          result = std::__introsort<std::_ClassicAlgPolicy,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&)#1} &,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode*,false>(v7, v48, a3, a4 & 1);
          a4 = 0;
          v9 = (int32x2_t *)(v48 + 4);
          continue;
        }
        v58 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&)#1} &,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode*>(v9, (int32x2_t *)v48);
        v9 = (int32x2_t *)(v48 + 4);
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode const&)#1} &,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode*>((int32x2_t *)(v48 + 4), a2);
        if (!(_DWORD)result)
        {
          if (v58)
            continue;
          goto LABEL_76;
        }
        a2 = (int32x2_t *)v48;
        if (!v58)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>>::push_back(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  uint64_t v20;

  v3 = result;
  v4 = result + 8;
  v5 = *(unsigned __int16 *)(result + 8);
  v6 = (_DWORD)v5 != 0xFFFF && *(_BYTE *)(result + 12) == 0;
  if (v6 && v5 >= *(unsigned __int16 *)(result + 10))
  {
    v7 = v5 + 1;
    v8 = gss::Allocator::instance((gss::Allocator *)result);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, 4 * (v5 + 1), 2);
    v9 = result;
    v10 = *(int **)v3;
    v5 = *(unsigned __int16 *)(v3 + 8);
    if (!*(_QWORD *)v3)
    {
LABEL_21:
      *(_WORD *)(v3 + 10) = v7;
      *(_QWORD *)v3 = v9;
      goto LABEL_22;
    }
    if (*(_WORD *)(v3 + 8))
    {
      if (v5 < 8)
      {
        v11 = *(unsigned __int16 *)(v3 + 8);
        v12 = (_DWORD *)result;
      }
      else
      {
        v11 = *(unsigned __int16 *)(v3 + 8);
        v12 = (_DWORD *)result;
        if ((unint64_t)(result - (_QWORD)v10) >= 0x20)
        {
          v13 = (unsigned __int16)v5 & 0xFFF8;
          v14 = 4 * v13;
          v12 = (_DWORD *)(result + 4 * v13);
          v15 = (__int128 *)(v10 + 4);
          v16 = (_OWORD *)(result + 16);
          v17 = v13;
          do
          {
            v18 = *v15;
            *(v16 - 1) = *(v15 - 1);
            *v16 = v18;
            v15 += 2;
            v16 += 2;
            v17 -= 8;
          }
          while (v17);
          if (v13 == v5)
            goto LABEL_17;
          v11 = v5 - v13;
          v10 = (int *)((char *)v10 + v14);
        }
      }
      do
      {
        v19 = *v10++;
        *v12++ = v19;
        --v11;
      }
      while ((_WORD)v11);
    }
LABEL_17:
    if (!*(_BYTE *)(v3 + 12) && *(_QWORD *)v3)
    {
      v20 = gss::Allocator::instance((gss::Allocator *)result);
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v20 + 40))(v20, *(_QWORD *)v3, 4 * *(unsigned __int16 *)(v3 + 10));
    }
    *(_DWORD *)v4 = 0;
    *(_BYTE *)(v4 + 4) = 0;
    *(_WORD *)v4 = v5;
    goto LABEL_21;
  }
LABEL_22:
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v5) = *a2;
  ++*(_WORD *)(v3 + 8);
  return result;
}

gss::Allocator *geo::intern_vector<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,geo::StdAllocator<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,gss::Allocator>>::resize(gss::Allocator *result, unint64_t a2)
{
  gss::Allocator *v3;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  gss::Allocator *v10;
  _QWORD *v11;

  if (!*((_BYTE *)result + 12))
  {
    v3 = result;
    v4 = *((unsigned __int16 *)result + 4);
    if (v4 > a2)
    {
      v5 = 24 * *((unsigned __int16 *)result + 4) - 24 * a2;
      v6 = (_BYTE *)(24 * a2 + *(_QWORD *)result + 20);
      do
      {
        v7 = v6 - 12;
        if (!*v6)
        {
          if (*v7)
          {
            v8 = gss::Allocator::instance(result);
            result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(v6 - 12), 4 * *((unsigned __int16 *)v6 - 1));
          }
        }
        *(_QWORD *)(v6 - 7) = 0;
        *v7 = 0;
        v6 += 24;
        v5 -= 24;
      }
      while (v5);
      goto LABEL_17;
    }
    if (v4 >= a2)
      return result;
    if (*((unsigned __int16 *)result + 5) >= a2)
    {
      v10 = *(gss::Allocator **)result;
      if (v4 == a2)
      {
LABEL_17:
        *((_WORD *)v3 + 4) = a2;
        return result;
      }
    }
    else
    {
      v9 = gss::Allocator::instance(result);
      result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, 24 * a2, 8);
      v10 = result;
      if (*(_QWORD *)v3)
        result = geo::intern_vector<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,geo::StdAllocator<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,gss::Allocator>>::moveContent(v3, (uint64_t)result);
      *((_WORD *)v3 + 5) = a2;
      *(_QWORD *)v3 = v10;
      v4 = *((unsigned __int16 *)v3 + 4);
      if (v4 == a2)
        goto LABEL_17;
    }
    v11 = (_QWORD *)((char *)v10 + 24 * v4);
    do
    {
      *(_DWORD *)v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      v11 += 3;
    }
    while (v11 != (_QWORD *)((char *)v10 + 24 * a2));
    goto LABEL_17;
  }
  return result;
}

uint64_t geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  _OWORD *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  int *v31;
  _DWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *v36;
  _OWORD *v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  _BYTE *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;

  if (!*(_BYTE *)(result + 12))
  {
    v3 = (_QWORD *)result;
    v4 = *(unsigned __int16 *)(result + 8);
    if (v4 > a2)
    {
      v5 = 24 * *(unsigned __int16 *)(result + 8) - 24 * a2;
      v6 = (_BYTE *)(24 * a2 + *(_QWORD *)result + 20);
      do
      {
        v7 = v6 - 12;
        if (!*v6)
        {
          if (*v7)
          {
            v8 = gss::Allocator::instance((gss::Allocator *)result);
            result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(v6 - 12), 4 * *((unsigned __int16 *)v6 - 1));
          }
        }
        *(_QWORD *)(v6 - 7) = 0;
        *v7 = 0;
        v6 += 24;
        v5 -= 24;
      }
      while (v5);
      goto LABEL_57;
    }
    if (v4 >= a2)
      return result;
    if (*(unsigned __int16 *)(result + 10) >= a2)
    {
      v10 = *(_QWORD *)result;
      if (v4 != a2)
      {
LABEL_55:
        v46 = (_QWORD *)(v10 + 24 * v4);
        do
        {
          v46[1] = 0;
          v46[2] = 0;
          *v46 = 0xFFFFFFFF7FFFFFFFLL;
          v46 += 3;
        }
        while (v46 != (_QWORD *)(v10 + 24 * a2));
      }
    }
    else
    {
      v9 = gss::Allocator::instance((gss::Allocator *)result);
      result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, 24 * a2, 8);
      v10 = result;
      v11 = *v3;
      v4 = *((unsigned __int16 *)v3 + 4);
      if (*v3)
      {
        v47 = result;
        v48 = *((unsigned __int16 *)v3 + 4);
        if (*((_WORD *)v3 + 4))
        {
          v12 = result;
          v13 = *((unsigned __int16 *)v3 + 4);
          while (1)
          {
            *(_QWORD *)v12 = *(_QWORD *)v11;
            *(_QWORD *)(v12 + 8) = 0;
            *(_QWORD *)(v12 + 13) = 0;
            v14 = *(int **)(v11 + 8);
            if (!*(_BYTE *)(v11 + 20))
              break;
            *(_QWORD *)(v12 + 8) = v14;
            *(_DWORD *)(v12 + 16) = *(_DWORD *)(v11 + 16);
            *(_BYTE *)(v12 + 20) = 1;
LABEL_14:
            v12 += 24;
            v11 += 24;
            if (!(_WORD)--v13)
              goto LABEL_44;
          }
          v15 = *(unsigned __int16 *)(v11 + 16);
          v16 = v12 + 16;
          if (!*(_WORD *)(v11 + 16))
          {
            LOWORD(v20) = 0;
LABEL_41:
            *(_WORD *)v16 = v20 + v15;
            goto LABEL_14;
          }
          v17 = gss::Allocator::instance((gss::Allocator *)result);
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, 4 * v15, 2);
          v18 = result;
          v19 = *(int **)(v12 + 8);
          v20 = *(unsigned __int16 *)(v12 + 16);
          if (!v19)
          {
            *(_WORD *)(v12 + 18) = v15;
            *(_QWORD *)(v12 + 8) = result;
            v16 = v12 + 16;
            goto LABEL_33;
          }
          v16 = v12 + 16;
          if (*(_WORD *)(v12 + 16))
          {
            if (v20 < 8)
            {
              v21 = *(unsigned __int16 *)(v12 + 16);
              v22 = (_DWORD *)result;
              do
              {
LABEL_28:
                v29 = *v19++;
                *v22++ = v29;
                --v21;
              }
              while ((_WORD)v21);
              goto LABEL_29;
            }
            v21 = *(unsigned __int16 *)(v12 + 16);
            v22 = (_DWORD *)result;
            if ((unint64_t)(result - (_QWORD)v19) < 0x20)
              goto LABEL_28;
            v23 = (unsigned __int16)v20 & 0xFFF8;
            v24 = 4 * v23;
            v22 = (_DWORD *)(result + 4 * v23);
            v25 = (__int128 *)(v19 + 4);
            v26 = (_OWORD *)(result + 16);
            v27 = v23;
            do
            {
              v28 = *v25;
              *(v26 - 1) = *(v25 - 1);
              *v26 = v28;
              v25 += 2;
              v26 += 2;
              v27 -= 8;
            }
            while (v27);
            if (v23 != v20)
            {
              v21 = v20 - v23;
              v19 = (int *)((char *)v19 + v24);
              goto LABEL_28;
            }
          }
LABEL_29:
          if (!*(_BYTE *)(v12 + 20) && *(_QWORD *)(v12 + 8))
          {
            v30 = gss::Allocator::instance((gss::Allocator *)result);
            result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v30 + 40))(v30, *(_QWORD *)(v12 + 8), 4 * *(unsigned __int16 *)(v12 + 18));
            v16 = v12 + 16;
          }
          *(_BYTE *)(v16 + 4) = 0;
          *(_DWORD *)v16 = 0;
          *(_WORD *)(v12 + 16) = v20;
          *(_WORD *)(v12 + 18) = v15;
          *(_QWORD *)(v12 + 8) = v18;
          if (!(_DWORD)v15)
            goto LABEL_41;
LABEL_33:
          v31 = &v14[v15];
          v32 = (_DWORD *)(v18 + 4 * v20);
          v33 = 4 * v15 - 4;
          if (v33 >= 0x1C && (unint64_t)(4 * v20 + v18 - (_QWORD)v14) >= 0x20)
          {
            v34 = (v33 >> 2) + 1;
            v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
            v32 = (_DWORD *)((char *)v32 + v35);
            v36 = (__int128 *)(v14 + 4);
            v37 = (_OWORD *)(v18 + 4 * v20 + 16);
            v38 = v34 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v39 = *v36;
              *(v37 - 1) = *(v36 - 1);
              *v37 = v39;
              v36 += 2;
              v37 += 2;
              v38 -= 8;
            }
            while (v38);
            if (v34 == (v34 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_40;
            v14 = (int *)((char *)v14 + v35);
          }
          do
          {
            v40 = *v14++;
            *v32++ = v40;
          }
          while (v14 != v31);
LABEL_40:
          LOWORD(v20) = *(_WORD *)v16;
          goto LABEL_41;
        }
LABEL_44:
        v10 = v47;
        v4 = v48;
        if (!*((_BYTE *)v3 + 12) && *v3)
        {
          if (*((_WORD *)v3 + 4))
          {
            v41 = (_BYTE *)(*v3 + 20);
            v42 = 24 * *((unsigned __int16 *)v3 + 4);
            do
            {
              v43 = v41 - 12;
              if (!*v41 && *v43)
              {
                v44 = gss::Allocator::instance((gss::Allocator *)result);
                result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v44 + 40))(v44, *(_QWORD *)(v41 - 12), 4 * *((unsigned __int16 *)v41 - 1));
              }
              *(_QWORD *)(v41 - 7) = 0;
              *v43 = 0;
              v41 += 24;
              v42 -= 24;
            }
            while (v42);
          }
          v45 = gss::Allocator::instance((gss::Allocator *)result);
          result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v45 + 40))(v45, *v3, 24 * *((unsigned __int16 *)v3 + 5));
        }
        *((_BYTE *)v3 + 12) = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      *((_WORD *)v3 + 5) = a2;
      *v3 = v10;
      if (v4 != a2)
        goto LABEL_55;
    }
LABEL_57:
    *((_WORD *)v3 + 4) = a2;
  }
  return result;
}

void __destroy_helper_block_ea8_48c37_ZTSNSt3__110shared_ptrIN3geo4TaskEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  _QWORD *v5;
  char v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _DWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _DWORD *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;

  v30 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v30);
  if ((v6 & 1) != 0)
  {
    v12 = (char *)a1[11];
    v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      v14 = (char *)a1[10];
      v15 = (v12 - v14) >> 2;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 62)
        goto LABEL_34;
      v17 = v11 - (_QWORD)v14;
      if (v17 >> 1 > v16)
        v16 = v17 >> 1;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
        v18 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 62)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v19 = operator new(4 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[4 * v15];
      *v20 = *a3;
      v13 = v20 + 1;
      if (v12 != v14)
      {
        v21 = v12 - v14 - 4;
        if (v21 < 0x2C)
          goto LABEL_38;
        if ((unint64_t)(v14 - v19) < 0x20)
          goto LABEL_38;
        v22 = (v21 >> 2) + 1;
        v23 = &v19[4 * v15 - 16];
        v24 = v12 - 16;
        v25 = v22 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v26 = *(_OWORD *)v24;
          *(v23 - 1) = *((_OWORD *)v24 - 1);
          *v23 = v26;
          v23 -= 2;
          v24 -= 32;
          v25 -= 8;
        }
        while (v25);
        v20 -= v22 & 0x7FFFFFFFFFFFFFF8;
        v12 -= 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
        if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            v27 = *((_DWORD *)v12 - 1);
            v12 -= 4;
            *--v20 = v27;
          }
          while (v12 != v14);
        }
      }
      a1[10] = (uint64_t)v20;
      a1[11] = (uint64_t)v13;
      a1[12] = (uint64_t)&v19[4 * v18];
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_DWORD *)v12 = *a3;
      v13 = v12 + 4;
    }
    a1[11] = (uint64_t)v13;
    v8 = a1[31];
  }
  else
  {
    v7 = (_DWORD *)(a1[10] + (((uint64_t)v5 - a1[7]) >> 1));
    *v7 = *a3;
    v8 = a1[31];
    if (v7 != (_DWORD *)a1[11])
    {
      v9 = (_QWORD *)a1[16];
      if (v9)
      {
        while (1)
        {
          v32 = &v30;
          v33 = 1;
          v31 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v31, &v32);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v28 = (_QWORD *)a1[22];
  if (v28)
  {
    while (1)
    {
      v32 = &v30;
      v33 = 1;
      v31 = v8;
      v29 = v28[6];
      if (!v29)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v29 + 48))(v29, &v31, &v32);
      v28 = (_QWORD *)*v28;
      if (!v28)
        return;
    }
    goto LABEL_33;
  }
}

void gdc::ComponentStorageWrapper<md::components::Visibility>::emplace(uint64_t *a1, uint64_t a2, _BYTE *a3)
{
  _QWORD *v5;
  char v6;
  _BYTE *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  __int128 *v22;
  char *v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  char *v27;
  int64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  v34 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v34);
  if ((v6 & 1) != 0)
  {
    v12 = (_BYTE *)a1[11];
    v11 = a1[12];
    if ((unint64_t)v12 < v11)
    {
      *v12 = *a3;
      v13 = (uint64_t)(v12 + 1);
LABEL_37:
      a1[11] = v13;
      v8 = a1[31];
      goto LABEL_38;
    }
    v14 = (_BYTE *)a1[10];
    v15 = v12 - v14;
    v16 = v12 - v14 + 1;
    if (v16 < 0)
      goto LABEL_43;
    v17 = v11 - (_QWORD)v14;
    if (2 * v17 > v16)
      v16 = 2 * v17;
    if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
      v18 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
      v19 = (char *)operator new(v18);
    else
      v19 = 0;
    v20 = &v19[v15];
    v19[v15] = *a3;
    v13 = (uint64_t)&v19[v15 + 1];
    if (v12 == v14)
    {
LABEL_35:
      a1[10] = (uint64_t)v20;
      a1[11] = v13;
      a1[12] = (uint64_t)&v19[v18];
      if (v14)
        operator delete(v14);
      goto LABEL_37;
    }
    if (v15 < 8 || (unint64_t)(v14 - v19) < 0x20)
      goto LABEL_32;
    if (v15 >= 0x20)
    {
      v21 = v15 & 0xFFFFFFFFFFFFFFE0;
      v22 = (__int128 *)(v12 - 16);
      v23 = &v19[v12 - 16 - v14];
      v24 = v15 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v25 = *v22;
        *((_OWORD *)v23 - 1) = *(v22 - 1);
        *(_OWORD *)v23 = v25;
        v23 -= 32;
        v22 -= 2;
        v24 -= 32;
      }
      while (v24);
      if (v15 == v21)
        goto LABEL_34;
      if ((v15 & 0x18) == 0)
      {
        v20 -= v21;
        v12 -= v21;
        goto LABEL_32;
      }
    }
    else
    {
      v21 = 0;
    }
    v26 = v21 - (v15 & 0xFFFFFFFFFFFFFFF8);
    v27 = &v12[-v21 - 8];
    v28 = v27 - v14;
    do
    {
      v29 = *(_QWORD *)v27;
      v27 -= 8;
      *(_QWORD *)&v19[v28] = v29;
      v28 -= 8;
      v26 += 8;
    }
    while (v26);
    if (v15 == (v15 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_34;
    v20 -= v15 & 0xFFFFFFFFFFFFFFF8;
    v12 -= v15 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    v30 = v20 - 1;
    do
    {
      v31 = *--v12;
      *v30-- = v31;
    }
    while (v12 != v14);
LABEL_34:
    v20 = v19;
    goto LABEL_35;
  }
  v7 = (_BYTE *)(a1[10] + (((uint64_t)v5 - a1[7]) >> 3));
  *v7 = *a3;
  v8 = a1[31];
  if (v7 != (_BYTE *)a1[11])
  {
    v9 = (_QWORD *)a1[16];
    if (v9)
    {
      while (1)
      {
        v36 = &v34;
        v37 = 1;
        v35 = v8;
        v10 = v9[6];
        if (!v10)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v35, &v36);
        v9 = (_QWORD *)*v9;
        if (!v9)
          return;
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  v32 = (_QWORD *)a1[22];
  if (v32)
  {
    while (1)
    {
      v36 = &v34;
      v37 = 1;
      v35 = v8;
      v33 = v32[6];
      if (!v33)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v33 + 48))(v33, &v35, &v36);
      v32 = (_QWORD *)*v32;
      if (!v32)
        return;
    }
    goto LABEL_42;
  }
}

_QWORD *gdc::ComponentStorageWrapper<md::components::MeshInstance>::emplace(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 *v13;
  char v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v16 = a2;
  result = geo::sparse_map<gdc::Entity,md::components::MeshInstance>::insert_or_assign((uint64_t)v14, a1 + 4, (uint64_t)&v16, a3);
  v5 = a1[31];
  if (v15 == a1[11])
  {
    v8 = (_QWORD *)a1[22];
    if (v8)
    {
      while (1)
      {
        v18 = &v16;
        v19 = 1;
        v17 = v5;
        v9 = v8[6];
        if (!v9)
          break;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v9 + 48))(v9, &v17, &v18);
        v8 = (_QWORD *)*v8;
        if (!v8)
          return result;
      }
      goto LABEL_10;
    }
  }
  else
  {
    v6 = (_QWORD *)a1[16];
    if (v6)
    {
      while (1)
      {
        v18 = &v16;
        v19 = 1;
        v17 = v5;
        v7 = v6[6];
        if (!v7)
          break;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v7 + 48))(v7, &v17, &v18);
        v6 = (_QWORD *)*v6;
        if (!v6)
          return result;
      }
LABEL_10:
      std::__throw_bad_function_call[abi:nn180100]();
      return geo::sparse_map<gdc::Entity,md::components::MeshInstance>::insert_or_assign(v10, v11, v12, v13);
    }
  }
  return result;
}

_QWORD *geo::sparse_map<gdc::Entity,md::components::MeshInstance>::insert_or_assign(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  _QWORD *result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  char v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  result = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a2, a3);
  if ((v8 & 1) != 0)
  {
    v14 = (_OWORD *)a2[7];
    v13 = a2[8];
    if ((unint64_t)v14 >= v13)
    {
      v20 = (_OWORD *)a2[6];
      v21 = 0x6DB6DB6DB6DB6DB7 * (v14 - v20) + 1;
      if (v21 > 0x249249249249249)
        abort();
      v22 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v13 - (_QWORD)v20) >> 4);
      if (2 * v22 > v21)
        v21 = 2 * v22;
      if (v22 >= 0x124924924924924)
        v23 = 0x249249249249249;
      else
        v23 = v21;
      if (v23)
      {
        if (v23 > 0x249249249249249)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v24 = (char *)operator new(112 * v23);
      }
      else
      {
        v24 = 0;
      }
      v27 = a4[5];
      v28 = &v24[16 * (v14 - v20)];
      *((_OWORD *)v28 + 4) = a4[4];
      *((_OWORD *)v28 + 5) = v27;
      *((_OWORD *)v28 + 6) = a4[6];
      v29 = a4[1];
      *(_OWORD *)v28 = *a4;
      *((_OWORD *)v28 + 1) = v29;
      v30 = a4[3];
      *((_OWORD *)v28 + 2) = a4[2];
      *((_OWORD *)v28 + 3) = v30;
      v11 = v28 + 112;
      if (v14 != v20)
      {
        do
        {
          v31 = *(v14 - 7);
          v32 = *(v14 - 5);
          *((_OWORD *)v28 - 6) = *(v14 - 6);
          *((_OWORD *)v28 - 5) = v32;
          *((_OWORD *)v28 - 7) = v31;
          v33 = *(v14 - 4);
          v34 = *(v14 - 3);
          v35 = *(v14 - 1);
          *((_OWORD *)v28 - 2) = *(v14 - 2);
          *((_OWORD *)v28 - 1) = v35;
          *((_OWORD *)v28 - 4) = v33;
          *((_OWORD *)v28 - 3) = v34;
          v28 -= 112;
          v14 -= 7;
        }
        while (v14 != v20);
        v14 = (_OWORD *)a2[6];
      }
      a2[6] = (uint64_t)v28;
      a2[7] = (uint64_t)v11;
      a2[8] = (uint64_t)&v24[112 * v23];
      if (v14)
        operator delete(v14);
    }
    else
    {
      v15 = *a4;
      v16 = a4[2];
      v14[1] = a4[1];
      v14[2] = v16;
      *v14 = v15;
      v17 = a4[3];
      v18 = a4[4];
      v19 = a4[6];
      v14[5] = a4[5];
      v14[6] = v19;
      v14[3] = v17;
      v14[4] = v18;
      v11 = v14 + 7;
    }
    a2[7] = (uint64_t)v11;
    result = (_QWORD *)a2[4];
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = v11;
    v25 = 1;
  }
  else
  {
    v9 = a2[6];
    v10 = ((uint64_t)result - a2[3]) >> 3;
    v11 = (_OWORD *)(v9 + 112 * v10);
    *(_QWORD *)v11 = *(_QWORD *)a4;
    if (*((unsigned __int8 *)v11 + 24) != *((unsigned __int8 *)a4 + 24))
    {
      if (*((_BYTE *)v11 + 24))
      {
        v12 = 0;
      }
      else
      {
        *(_OWORD *)((char *)v11 + 8) = *(__int128 *)((char *)a4 + 8);
        v12 = 1;
      }
      *((_BYTE *)v11 + 24) = v12;
    }
    v25 = 0;
    v26 = v9 + 112 * v10;
    *(_BYTE *)(v26 + 32) = *((_BYTE *)a4 + 32);
    *(_DWORD *)(v26 + 36) = *((_DWORD *)a4 + 9);
    *(_DWORD *)(v26 + 40) = *((_DWORD *)a4 + 10);
    *(_DWORD *)(v26 + 44) = *((_DWORD *)a4 + 11);
    *(_DWORD *)(v26 + 48) = *((_DWORD *)a4 + 12);
    *(_DWORD *)(v26 + 52) = *((_DWORD *)a4 + 13);
    *(_DWORD *)(v26 + 56) = *((_DWORD *)a4 + 14);
    *(_DWORD *)(v26 + 60) = *((_DWORD *)a4 + 15);
    *(_DWORD *)(v26 + 64) = *((_DWORD *)a4 + 16);
    *(_DWORD *)(v26 + 68) = *((_DWORD *)a4 + 17);
    *(_DWORD *)(v26 + 72) = *((_DWORD *)a4 + 18);
    *(_DWORD *)(v26 + 76) = *((_DWORD *)a4 + 19);
    *(_DWORD *)(v26 + 80) = *((_DWORD *)a4 + 20);
    *(_DWORD *)(v26 + 84) = *((_DWORD *)a4 + 21);
    *(_DWORD *)(v26 + 88) = *((_DWORD *)a4 + 22);
    *(_DWORD *)(v26 + 92) = *((_DWORD *)a4 + 23);
    *(_DWORD *)(v26 + 96) = *((_DWORD *)a4 + 24);
    *(_DWORD *)(v26 + 100) = *((_DWORD *)a4 + 25);
    *(_DWORD *)(v26 + 104) = *((_DWORD *)a4 + 26);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = v11;
  }
  *(_QWORD *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 24) = v11;
  *(_BYTE *)(a1 + 32) = v25;
  return result;
}

_QWORD *geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v4 = *(unsigned int *)(a2 + 4);
  v5 = v4 >> 7;
  v6 = *a1;
  v7 = (a1[1] - *a1) >> 3;
  v8 = v4 >> 7 >= v7;
  v9 = (v4 >> 7) - v7;
  if (v8)
  {
    v16 = a1 + 4;
    v17 = a1[4] - a1[3];
    std::vector<std::unique_ptr<std::array<unsigned short,128ul>>>::__append(a1, v9 + 1);
    v6 = *a1;
    v18 = v17 >> 3;
    if (*(_QWORD *)(*a1 + 8 * v5))
      goto LABEL_15;
LABEL_13:
    v19 = (_OWORD *)operator new();
    *v19 = 0u;
    v19[1] = 0u;
    v19[2] = 0u;
    v19[3] = 0u;
    v19[4] = 0u;
    v19[5] = 0u;
    v19[6] = 0u;
    v19[7] = 0u;
    v19[8] = 0u;
    v19[9] = 0u;
    v19[10] = 0u;
    v19[11] = 0u;
    v19[12] = 0u;
    v19[13] = 0u;
    v19[14] = 0u;
    v19[15] = 0u;
    v20 = *(_QWORD *)(v6 + 8 * v5);
    *(_QWORD *)(v6 + 8 * v5) = v19;
    if (v20)
      MEMORY[0x1A1AF4E00](v20, 0x1000C40104B78CFLL);
    goto LABEL_15;
  }
  v10 = *(_QWORD *)(v6 + 8 * v5);
  if (!v10)
  {
    v16 = a1 + 4;
    v18 = (unint64_t)(a1[4] - a1[3]) >> 3;
    goto LABEL_13;
  }
  v11 = *(unsigned __int16 *)(v10 + 2 * (v4 & 0x7F));
  v13 = a1[3];
  v12 = (_QWORD *)a1[4];
  if (v11 < ((uint64_t)v12 - v13) >> 3)
  {
    v14 = v13 + 8 * v11;
    result = (_QWORD *)(*(_DWORD *)(v14 + 4) == (_DWORD)v4 ? v14 : a1[4]);
    if (result != v12)
      return result;
  }
  v16 = a1 + 4;
  v18 = ((unint64_t)v12 - v13) >> 3;
LABEL_15:
  *(_WORD *)(*(_QWORD *)(*a1 + 8 * v5) + 2 * (v4 & 0x7F)) = v18;
  v22 = (char *)a1[4];
  v21 = a1[5];
  if ((unint64_t)v22 >= v21)
  {
    v24 = (char *)a1[3];
    v25 = (v22 - v24) >> 3;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 61)
      abort();
    v27 = v21 - (_QWORD)v24;
    if (v27 >> 2 > v26)
      v26 = v27 >> 2;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v28 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (v28)
    {
      if (v28 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v29 = operator new(8 * v28);
    }
    else
    {
      v29 = 0;
    }
    v30 = &v29[8 * v25];
    *v30 = *(_QWORD *)a2;
    v23 = v30 + 1;
    if (v22 == v24)
    {
      v24 = v22;
    }
    else
    {
      v31 = v22 - v24 - 8;
      if (v31 < 0x58)
        goto LABEL_43;
      if ((unint64_t)(v24 - v29) < 0x20)
        goto LABEL_43;
      v32 = (v31 >> 3) + 1;
      v33 = &v29[8 * v25 - 16];
      v34 = v22 - 16;
      v35 = v32 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v36 = *(_OWORD *)v34;
        *(v33 - 1) = *((_OWORD *)v34 - 1);
        *v33 = v36;
        v33 -= 2;
        v34 -= 32;
        v35 -= 4;
      }
      while (v35);
      v30 -= v32 & 0x3FFFFFFFFFFFFFFCLL;
      v22 -= 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
      if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_43:
        do
        {
          v37 = *((_QWORD *)v22 - 1);
          v22 -= 8;
          *--v30 = v37;
        }
        while (v22 != v24);
        v24 = (char *)a1[3];
      }
    }
    a1[3] = (uint64_t)v30;
    a1[4] = (uint64_t)v23;
    a1[5] = (uint64_t)&v29[8 * v28];
    if (v24)
      operator delete(v24);
  }
  else
  {
    *(_QWORD *)v22 = *(_QWORD *)a2;
    v23 = v22 + 8;
  }
  *v16 = v23;
  return v23 - 1;
}

void gdc::ComponentStorageWrapper<md::components::ClientState>::emplace(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  gss::Allocator *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  char *v22;
  gss::Allocator *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t *v41;

  v35 = a2;
  v5 = (gss::Allocator *)geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v35);
  if ((v6 & 1) != 0)
  {
    v13 = a1[12];
    v14 = a1[11];
    if (v14 >= v13)
    {
      v16 = a1[10];
      v17 = (uint64_t)(v14 - v16) >> 4;
      if ((unint64_t)(v17 + 1) >> 60)
        goto LABEL_42;
      v18 = v13 - v16;
      v19 = v18 >> 3;
      if (v18 >> 3 <= (unint64_t)(v17 + 1))
        v19 = v17 + 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
        v20 = 0xFFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      v41 = a1 + 12;
      if (v20)
      {
        if (v20 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v21 = (uint64_t *)operator new(16 * v20);
      }
      else
      {
        v21 = 0;
      }
      v22 = (char *)&v21[2 * v17];
      v37 = v21;
      v38 = (uint64_t)v22;
      v39 = v22;
      v40 = (char *)&v21[2 * v20];
      *(_QWORD *)v22 = 0;
      *(_QWORD *)(v22 + 7) = 0;
      v22[15] = 1;
      v23 = (gss::Allocator *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy(v22, a3);
      v24 = v38;
      v15 = (uint64_t)(v39 + 16);
      v25 = (char *)a1[10];
      v26 = (char *)a1[11];
      if (v26 == v25)
      {
        a1[10] = v38;
        a1[11] = v15;
        a1[12] = (uint64_t)v40;
      }
      else
      {
        v27 = 0;
        do
        {
          v28 = v24 + v27;
          v29 = &v26[v27];
          *(_QWORD *)(v28 - 9) = 0;
          *(_QWORD *)(v28 - 16) = 0;
          *(_BYTE *)(v28 - 1) = 1;
          *(_QWORD *)(v28 - 16) = *(_QWORD *)&v26[v27 - 16];
          v30 = *(_QWORD *)&v26[v27 - 8];
          *(_DWORD *)(v28 - 8) = v30;
          *(_WORD *)(v24 + v27 - 4) = WORD2(v30);
          *(_BYTE *)(v28 - 2) = v26[v27 - 2];
          *(_BYTE *)(v28 - 1) = v26[v27 - 1];
          *(_QWORD *)(v29 - 9) = 0;
          *((_QWORD *)v29 - 2) = 0;
          *(v29 - 1) = 1;
          v27 -= 16;
        }
        while (&v26[v27] != v25);
        v26 = (char *)a1[10];
        v31 = (char *)a1[11];
        a1[10] = v24 + v27;
        a1[11] = v15;
        a1[12] = (uint64_t)v40;
        while (v31 != v26)
        {
          if (!*(v31 - 2) && *((_QWORD *)v31 - 2))
          {
            v32 = gss::Allocator::instance(v23);
            v23 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v32 + 40))(v32, *((_QWORD *)v31 - 2), *((unsigned __int16 *)v31 - 2));
            *((_QWORD *)v31 - 2) = 0;
          }
          v31 -= 16;
        }
      }
      if (v26)
        operator delete(v26);
    }
    else
    {
      *(_QWORD *)(v14 + 7) = 0;
      *(_QWORD *)v14 = 0;
      *(_BYTE *)(v14 + 15) = 1;
      geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy((_QWORD *)v14, a3);
      v15 = v14 + 16;
      a1[11] = v15;
    }
    a1[11] = v15;
    v10 = a1[31];
  }
  else
  {
    v7 = a1[10] + 2 * ((_QWORD)v5 - a1[7]);
    if (v7 != a3)
    {
      if (!*(_BYTE *)(v7 + 14))
      {
        if (*(_QWORD *)v7)
        {
          v8 = gss::Allocator::instance(v5);
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)v7, *(unsigned __int16 *)(v7 + 12));
          *(_QWORD *)v7 = 0;
        }
      }
      *(_QWORD *)v7 = *(_QWORD *)a3;
      v9 = *(_QWORD *)(a3 + 8);
      *(_DWORD *)(v7 + 8) = v9;
      *(_WORD *)(v7 + 12) = WORD2(v9);
      *(_WORD *)(v7 + 14) = *(_WORD *)(a3 + 14);
      *(_QWORD *)(a3 + 7) = 0;
      *(_QWORD *)a3 = 0;
      *(_BYTE *)(a3 + 15) = 1;
    }
    v10 = a1[31];
    if (v7 != a1[11])
    {
      v11 = (_QWORD *)a1[16];
      if (v11)
      {
        while (1)
        {
          v37 = &v35;
          v38 = 1;
          v36 = v10;
          v12 = v11[6];
          if (!v12)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v12 + 48))(v12, &v36, &v37);
          v11 = (_QWORD *)*v11;
          if (!v11)
            return;
        }
LABEL_41:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_42:
        abort();
      }
      return;
    }
  }
  v33 = (_QWORD *)a1[22];
  if (v33)
  {
    while (1)
    {
      v37 = &v35;
      v38 = 1;
      v36 = v10;
      v34 = v33[6];
      if (!v34)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v34 + 48))(v34, &v36, &v37);
      v33 = (_QWORD *)*v33;
      if (!v33)
        return;
    }
    goto LABEL_41;
  }
}

void sub_19F0388A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<md::components::ClientState>::~__split_buffer((gss::Allocator *)va);
  _Unwind_Resume(a1);
}

void sub_19F0388B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 88) = v2;
  _Unwind_Resume(a1);
}

_QWORD *geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::copy(_QWORD *result, uint64_t a2)
{
  _WORD *v2;
  _QWORD *v4;
  char v5;
  unsigned int v6;
  unsigned __int16 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  int v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v4 = result;
  if (*(_BYTE *)(a2 + 14))
  {
    *result = *(_QWORD *)a2;
    *((_DWORD *)result + 2) = *(_DWORD *)(a2 + 8);
    v5 = 1;
  }
  else
  {
    v6 = *(unsigned __int16 *)(a2 + 10);
    if (!*((_BYTE *)result + 14) && *((unsigned __int16 *)result + 6) < v6)
    {
      v7 = (4 * v6) | 2;
      v8 = gss::Allocator::instance((gss::Allocator *)result);
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 16))(v8, (unsigned __int16)(v7 + 2 * v6) & 0xFFFE, 1);
      v9 = result;
      if (*v4)
      {
        if (*((_WORD *)v4 + 5))
        {
          result = memmove(result, (const void *)*v4, 4 * *((unsigned __int16 *)v4 + 5));
          if (*((_WORD *)v4 + 5))
            result = memmove((char *)v9 + v7, (const void *)(*v4 + *((unsigned __int16 *)v4 + 4)), 2 * *((unsigned __int16 *)v4 + 5));
        }
        v10 = gss::Allocator::instance((gss::Allocator *)result);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 40))(v10, *v4, *((unsigned __int16 *)v4 + 6));
      }
      *((_WORD *)v4 + 6) = v6;
      *v4 = v9;
      *((_WORD *)v4 + 4) = v7;
      v6 = *(unsigned __int16 *)(a2 + 10);
    }
    v11 = 0;
    v12 = 0;
    LOWORD(v13) = v6;
    while (v12 != v6)
    {
      v16 = *((unsigned __int16 *)v4 + 5);
      if (v16 == *((unsigned __int16 *)v4 + 6))
      {
        if (v16 == 0xFFFF)
          break;
        if (2 * (v16 & 0x7FFFu) <= 4)
          v17 = 4;
        else
          v17 = 2 * (v16 & 0x7FFF);
        v18 = (8 * (v17 >> 1)) | 2;
        v19 = gss::Allocator::instance((gss::Allocator *)result);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v19 + 16))(v19, (unsigned __int16)(v18 + 2 * v17) & 0xFFFE, 1);
        v20 = result;
        if (*v4)
        {
          if (*((_WORD *)v4 + 5))
          {
            result = memmove(result, (const void *)*v4, 4 * *((unsigned __int16 *)v4 + 5));
            if (*((_WORD *)v4 + 5))
              result = memmove((char *)v20 + v18, (const void *)(*v4 + *((unsigned __int16 *)v4 + 4)), 2 * *((unsigned __int16 *)v4 + 5));
          }
          v21 = gss::Allocator::instance((gss::Allocator *)result);
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v21 + 40))(v21, *v4, *((unsigned __int16 *)v4 + 6));
        }
        *((_WORD *)v4 + 6) = v17;
        *v4 = v20;
        *((_WORD *)v4 + 4) = v18;
        LOWORD(v13) = *(_WORD *)(a2 + 10);
      }
      if (v12 < (unsigned __int16)v13)
      {
        v11 = (_DWORD *)(*(_QWORD *)a2 + 4 * v12);
        v2 = (_WORD *)(*(_QWORD *)a2 + *(unsigned __int16 *)(a2 + 8) + 2 * v12);
      }
      v14 = *((unsigned __int16 *)v4 + 5);
      v15 = (char *)*v4;
      *(_DWORD *)(*v4 + 4 * v14) = *v11;
      *(_WORD *)&v15[2 * v14 + *((unsigned __int16 *)v4 + 4)] = *v2;
      ++*((_WORD *)v4 + 5);
      v13 = *(unsigned __int16 *)(a2 + 10);
      if (v12 + 1 < v13)
        ++v12;
      else
        v12 = *(unsigned __int16 *)(a2 + 10);
    }
    v5 = *(_BYTE *)(a2 + 14);
  }
  *((_BYTE *)v4 + 14) = v5;
  *((_BYTE *)v4 + 15) = *(_BYTE *)(a2 + 15);
  return result;
}

char *geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::reallocate(unsigned __int16 *a1, unsigned __int16 a2)
{
  uint64_t v4;
  unsigned __int16 v5;
  char *result;
  char *v7;
  uint64_t v8;

  v4 = gss::Allocator::instance((gss::Allocator *)a1);
  v5 = (4 * a2) | 2;
  result = (char *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 16))(v4, (unsigned __int16)(v5 + 2 * a2), 1);
  v7 = result;
  if (*(_QWORD *)a1)
  {
    if (a1[5])
    {
      result = (char *)memmove(result, *(const void **)a1, 4 * a1[5]);
      if (a1[5])
        result = (char *)memmove(&v7[v5], (const void *)(*(_QWORD *)a1 + a1[4]), 2 * a1[5]);
    }
    v8 = gss::Allocator::instance((gss::Allocator *)result);
    result = (char *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)a1, a1[6]);
  }
  a1[6] = a2;
  *(_QWORD *)a1 = v7;
  a1[4] = v5;
  return result;
}

void geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(uint64_t a1, _DWORD *__dst, _WORD *a3, int a4)
{
  unint64_t v4;
  int32x4_t *v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  unint64_t v12;
  int32x4_t v13;
  int32x4_t *v14;
  int32x4_t v15;
  int32x4_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;

  v4 = *(unsigned __int16 *)(a1 + 10);
  if (!*(_WORD *)(a1 + 10))
    return;
  if (a4)
  {
    v8 = (int32x4_t *)operator new(4 * v4);
    bzero(v8, 4 * v4);
    v9 = (unsigned int *)v8 + v4;
    if (4 * v4 - 4 >= 0x1C)
    {
      v12 = ((4 * v4 - 4) >> 2) + 1;
      v10 = v12 & 0x7FFFFFFFFFFFFFF8;
      v13 = (int32x4_t)xmmword_19FFB2E90;
      v14 = v8 + 1;
      v15.i64[0] = 0x400000004;
      v15.i64[1] = 0x400000004;
      v16.i64[0] = 0x800000008;
      v16.i64[1] = 0x800000008;
      v17 = v12 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v14[-1] = v13;
        *v14 = vaddq_s32(v13, v15);
        v13 = vaddq_s32(v13, v16);
        v14 += 2;
        v17 -= 8;
      }
      while (v17);
      if (v12 == v10)
        goto LABEL_13;
      v11 = (unsigned int *)v8 + (v12 & 0x7FFFFFFFFFFFFFF8);
    }
    else
    {
      LODWORD(v10) = 0;
      v11 = (unsigned int *)v8;
    }
    do
    {
      *v11++ = v10;
      LODWORD(v10) = v10 + 1;
    }
    while (v11 != v9);
LABEL_13:
    v21 = (uint64_t *)a1;
    std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::StyleAttribute*,unsigned short *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>((uint64_t)v8, v9, &v21, 126 - 2 * __clz(v4), 1);
    if (*(_WORD *)(a1 + 10))
    {
      v18 = 0;
      v19 = *(_QWORD *)a1;
      do
      {
        v20 = v8->u32[v18];
        __dst[v18] = *(_DWORD *)(v19 + 4 * v20);
        a3[v18++] = *(_WORD *)(v19 + *(unsigned __int16 *)(a1 + 8) + 2 * v20);
      }
      while (v18 < *(unsigned __int16 *)(a1 + 10));
    }
    *(_BYTE *)(a1 + 15) = 1;
    operator delete(v8);
    return;
  }
  memmove(__dst, *(const void **)a1, 4 * v4);
  if (*(_WORD *)(a1 + 10))
    memmove(a3, (const void *)(*(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 8)), 2 * *(unsigned __int16 *)(a1 + 10));
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::StyleAttribute*,unsigned short *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  BOOL v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  _DWORD *v98;
  uint64_t v99;
  _DWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int *v108;
  uint64_t v109;
  unsigned int *v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int *v113;
  unsigned int *v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  int64_t v120;
  uint64_t *v121;
  int64_t v122;
  BOOL v123;
  uint64_t v124;
  unsigned int *v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int *v128;
  uint64_t v129;
  unsigned int *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int *v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t *v144;
  unsigned int *v145;
  uint64_t v146;
  unsigned int *v147;
  unsigned int *v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unsigned int *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = a2 - 1;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v89 = *v10;
        v90 = *v11;
        if (*(_DWORD *)(**a3 + 4 * v89) < *(_DWORD *)(**a3 + 4 * v90))
        {
          *v11 = v89;
          *v10 = v90;
        }
        return result;
      case 3:
        v91 = *v11;
        v92 = v11[1];
        v93 = **a3;
        v94 = *(_DWORD *)(v93 + 4 * v92);
        v95 = *(_DWORD *)(v93 + 4 * v91);
        v96 = *v10;
        v97 = *(_DWORD *)(v93 + 4 * v96);
        if (v94 >= v95)
        {
          if (v97 < v94)
          {
            v11[1] = v96;
            *v10 = v92;
            v134 = *v11;
            v133 = v11[1];
            if (*(_DWORD *)(v93 + 4 * v133) < *(_DWORD *)(v93 + 4 * v134))
            {
              *v11 = v133;
              v11[1] = v134;
            }
          }
        }
        else if (v97 >= v94)
        {
          *v11 = v92;
          v11[1] = v91;
          v159 = *v10;
          if (*(_DWORD *)(v93 + 4 * v159) < v95)
          {
            v11[1] = v159;
            *v10 = v91;
          }
        }
        else
        {
          *v11 = v96;
          *v10 = v91;
        }
        return result;
      case 4:
        v98 = v11 + 1;
        v99 = v11[1];
        v100 = v11 + 2;
        v101 = v11[2];
        v102 = *v11;
        v103 = **a3;
        v104 = *(_DWORD *)(v103 + 4 * v99);
        v105 = *(_DWORD *)(v103 + 4 * v102);
        v106 = v101;
        v107 = *(_DWORD *)(v103 + 4 * v101);
        if (v104 >= v105)
        {
          if (v107 < v104)
          {
            v108 = v11;
            *v98 = v101;
            *v100 = v99;
            result = (uint64_t)(v11 + 1);
            v109 = v99;
            v101 = v99;
            if (v107 >= v105)
              goto LABEL_170;
            goto LABEL_168;
          }
        }
        else
        {
          if (v107 < v104)
          {
            v108 = v11;
            result = (uint64_t)(v11 + 2);
            v109 = *v11;
            LODWORD(v99) = *v11;
LABEL_168:
            *v108 = v106;
            *(_DWORD *)result = v102;
            v101 = v109;
            goto LABEL_170;
          }
          v108 = v11 + 1;
          *v11 = v99;
          v11[1] = v102;
          result = (uint64_t)(v11 + 2);
          v109 = v102;
          LODWORD(v99) = v102;
          if (v107 < v105)
            goto LABEL_168;
        }
        LODWORD(v99) = v101;
LABEL_170:
        v160 = *v10;
        if (*(_DWORD *)(v103 + 4 * v160) < *(_DWORD *)(v103 + 4 * v101))
        {
          *v100 = v160;
          *v10 = v99;
          v161 = *v100;
          v162 = *v98;
          v163 = *(_DWORD *)(v103 + 4 * v161);
          if (v163 < *(_DWORD *)(v103 + 4 * v162))
          {
            v11[1] = v161;
            v11[2] = v162;
            v164 = *v11;
            if (v163 < *(_DWORD *)(v103 + 4 * v164))
            {
              *v11 = v161;
              v11[1] = v164;
            }
          }
        }
        return result;
      case 5:
        return (uint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::StyleAttribute*,unsigned short *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, **a3);
      default:
        if (v12 > 95)
        {
          if (!a4)
          {
            if (v11 != a2)
            {
              v120 = (unint64_t)(v13 - 2) >> 1;
              v121 = *a3;
              v122 = v120;
              do
              {
                if (v120 >= v122)
                {
                  v124 = (2 * v122) | 1;
                  v125 = &v11[v124];
                  v126 = *v125;
                  if (2 * v122 + 2 >= v13)
                  {
                    v127 = *v121;
                  }
                  else
                  {
                    v127 = *v121;
                    if (*(unsigned int *)(*v121 + 4 * v126) < (unint64_t)*(unsigned int *)(*v121 + 4 * v125[1]))
                    {
                      v126 = v125[1];
                      ++v125;
                      v124 = 2 * v122 + 2;
                    }
                  }
                  v128 = &v11[v122];
                  v129 = *v128;
                  result = *(unsigned int *)(v127 + 4 * v129);
                  if (*(_DWORD *)(v127 + 4 * v126) >= result)
                  {
                    do
                    {
                      v130 = v125;
                      *v128 = v126;
                      if (v120 < v124)
                        break;
                      v131 = (2 * v124) | 1;
                      v125 = &v11[v131];
                      v132 = 2 * v124 + 2;
                      v126 = *v125;
                      if (v132 < v13
                        && *(unsigned int *)(v127 + 4 * v126) < (unint64_t)*(unsigned int *)(v127 + 4 * v125[1]))
                      {
                        v126 = v125[1];
                        ++v125;
                        v131 = v132;
                      }
                      v128 = v130;
                      v124 = v131;
                    }
                    while (*(_DWORD *)(v127 + 4 * v126) >= result);
                    *v130 = v129;
                  }
                }
                v123 = v122-- <= 0;
              }
              while (!v123);
              v141 = (unint64_t)v12 >> 2;
              do
              {
                v142 = 0;
                v143 = *v11;
                v144 = *a3;
                v145 = v11;
                do
                {
                  v148 = &v145[v142];
                  v149 = v148[1];
                  v147 = v148 + 1;
                  v146 = v149;
                  v150 = (2 * v142) | 1;
                  v142 = 2 * v142 + 2;
                  if (v142 < v141)
                  {
                    result = v147[1];
                    if (*(_DWORD *)(*v144 + 4 * v146) >= *(_DWORD *)(*v144 + 4 * result))
                    {
                      v142 = v150;
                    }
                    else
                    {
                      LODWORD(v146) = v147[1];
                      ++v147;
                    }
                  }
                  else
                  {
                    v142 = v150;
                  }
                  *v145 = v146;
                  v145 = v147;
                }
                while (v142 <= (uint64_t)((unint64_t)(v141 - 2) >> 1));
                if (v147 == --a2)
                {
                  *v147 = v143;
                }
                else
                {
                  *v147 = *a2;
                  *a2 = v143;
                  v151 = (char *)v147 - (char *)v11 + 4;
                  if (v151 >= 5)
                  {
                    v152 = (((unint64_t)v151 >> 2) - 2) >> 1;
                    v153 = &v11[v152];
                    v154 = *v153;
                    v155 = *v147;
                    v156 = *v144;
                    v157 = *(_DWORD *)(v156 + 4 * v155);
                    if (*(_DWORD *)(v156 + 4 * v154) < v157)
                    {
                      do
                      {
                        v158 = v153;
                        *v147 = v154;
                        if (!v152)
                          break;
                        v152 = (v152 - 1) >> 1;
                        v153 = &v11[v152];
                        v154 = *v153;
                        v147 = v158;
                      }
                      while (*(_DWORD *)(v156 + 4 * v154) < v157);
                      *v158 = v155;
                    }
                  }
                }
                v123 = v141-- <= 2;
              }
              while (!v123);
            }
            return result;
          }
          v14 = (unint64_t)v13 >> 1;
          v15 = &v11[(unint64_t)v13 >> 1];
          v16 = **a3;
          v17 = *v10;
          v18 = *(_DWORD *)(v16 + 4 * v17);
          if ((unint64_t)v12 >= 0x201)
          {
            v19 = *v15;
            v20 = *v11;
            v21 = *(_DWORD *)(v16 + 4 * v19);
            v22 = *(_DWORD *)(v16 + 4 * v20);
            if (v21 >= v22)
            {
              if (v18 < v21)
              {
                *v15 = v17;
                *v10 = v19;
                v27 = *v15;
                v28 = *v11;
                if (*(_DWORD *)(v16 + 4 * v27) < *(_DWORD *)(v16 + 4 * v28))
                {
                  *v11 = v27;
                  *v15 = v28;
                }
              }
            }
            else
            {
              if (v18 >= v21)
              {
                *v11 = v19;
                *v15 = v20;
                v31 = *v10;
                if (*(_DWORD *)(v16 + 4 * v31) >= v22)
                  goto LABEL_22;
                *v15 = v31;
              }
              else
              {
                *v11 = v17;
              }
              *v10 = v20;
            }
LABEL_22:
            v32 = &v11[v14];
            v35 = *(v32 - 1);
            v33 = v32 - 1;
            v34 = v35;
            v36 = v11[1];
            v37 = *(_DWORD *)(v16 + 4 * v35);
            v38 = *(_DWORD *)(v16 + 4 * v36);
            v39 = *(a2 - 2);
            v40 = *(_DWORD *)(v16 + 4 * v39);
            if (v37 >= v38)
            {
              if (v40 < v37)
              {
                *v33 = v39;
                *(a2 - 2) = v34;
                v41 = *v33;
                v42 = v11[1];
                if (*(_DWORD *)(v16 + 4 * v41) < *(_DWORD *)(v16 + 4 * v42))
                {
                  v11[1] = v41;
                  *v33 = v42;
                }
              }
            }
            else
            {
              if (v40 >= v37)
              {
                v11[1] = v34;
                *v33 = v36;
                v44 = *(a2 - 2);
                if (*(_DWORD *)(v16 + 4 * v44) >= v38)
                  goto LABEL_34;
                *v33 = v44;
              }
              else
              {
                v11[1] = v39;
              }
              *(a2 - 2) = v36;
            }
LABEL_34:
            v45 = &v11[v14];
            v48 = v45[1];
            v46 = v45 + 1;
            v47 = v48;
            v49 = v11[2];
            v50 = *(_DWORD *)(v16 + 4 * v48);
            v51 = *(_DWORD *)(v16 + 4 * v49);
            v52 = *(a2 - 3);
            v53 = *(_DWORD *)(v16 + 4 * v52);
            if (v50 >= v51)
            {
              if (v53 < v50)
              {
                *v46 = v52;
                *(a2 - 3) = v47;
                v54 = *v46;
                v55 = v11[2];
                if (*(_DWORD *)(v16 + 4 * v54) < *(_DWORD *)(v16 + 4 * v55))
                {
                  v11[2] = v54;
                  *v46 = v55;
                }
              }
            }
            else
            {
              if (v53 >= v50)
              {
                v11[2] = v47;
                *v46 = v49;
                v56 = *(a2 - 3);
                if (*(_DWORD *)(v16 + 4 * v56) >= v51)
                  goto LABEL_43;
                *v46 = v56;
              }
              else
              {
                v11[2] = v52;
              }
              *(a2 - 3) = v49;
            }
LABEL_43:
            v57 = *v15;
            v58 = *v33;
            v59 = *(_DWORD *)(v16 + 4 * v57);
            v60 = *(_DWORD *)(v16 + 4 * v58);
            v61 = *v46;
            v62 = *(_DWORD *)(v16 + 4 * v61);
            if (v59 >= v60)
            {
              if (v62 >= v59)
                goto LABEL_50;
              *v15 = v61;
              *v46 = v57;
              v46 = v15;
              LODWORD(v57) = v58;
              if (v62 >= v60)
              {
                LODWORD(v57) = v61;
                goto LABEL_50;
              }
            }
            else if (v62 >= v59)
            {
              *v33 = v57;
              *v15 = v58;
              v33 = v15;
              LODWORD(v57) = v61;
              if (v62 >= v60)
              {
                LODWORD(v57) = v58;
LABEL_50:
                v63 = *v11;
                *v11 = v57;
                *v15 = v63;
                goto LABEL_51;
              }
            }
            *v33 = v61;
            *v46 = v58;
            goto LABEL_50;
          }
          v23 = *v11;
          v24 = *v15;
          v25 = *(_DWORD *)(v16 + 4 * v23);
          v26 = *(_DWORD *)(v16 + 4 * v24);
          if (v25 >= v26)
          {
            if (v18 < v25)
            {
              *v11 = v17;
              *v10 = v23;
              v29 = *v11;
              v30 = *v15;
              if (*(_DWORD *)(v16 + 4 * v29) < *(_DWORD *)(v16 + 4 * v30))
              {
                *v15 = v29;
                *v11 = v30;
              }
            }
          }
          else
          {
            if (v18 >= v25)
            {
              *v15 = v23;
              *v11 = v24;
              v43 = *v10;
              if (*(_DWORD *)(v16 + 4 * v43) >= v26)
                goto LABEL_51;
              *v11 = v43;
            }
            else
            {
              *v15 = v17;
            }
            *v10 = v24;
          }
LABEL_51:
          --a4;
          v64 = *v11;
          if ((a5 & 1) == 0)
          {
            v65 = *(_DWORD *)(v16 + 4 * v64);
            if (*(_DWORD *)(v16 + 4 * *(v11 - 1)) < v65)
              goto LABEL_54;
            if (v65 >= *(_DWORD *)(v16 + 4 * *v10))
            {
              v81 = v11 + 1;
              do
              {
                v11 = v81;
                if (v81 >= a2)
                  break;
                ++v81;
              }
              while (v65 >= *(_DWORD *)(v16 + 4 * *v11));
            }
            else
            {
              do
              {
                v80 = v11[1];
                ++v11;
              }
              while (v65 >= *(_DWORD *)(v16 + 4 * v80));
            }
            v82 = a2;
            if (v11 < a2)
            {
              v82 = a2;
              do
                v83 = *--v82;
              while (v65 < *(_DWORD *)(v16 + 4 * v83));
            }
            if (v11 < v82)
            {
              v84 = *v11;
              v85 = *v82;
              do
              {
                *v11 = v85;
                *v82 = v84;
                do
                {
                  v86 = v11[1];
                  ++v11;
                  v84 = v86;
                }
                while (v65 >= *(_DWORD *)(v16 + 4 * v86));
                do
                {
                  v87 = *--v82;
                  v85 = v87;
                }
                while (v65 < *(_DWORD *)(v16 + 4 * v87));
              }
              while (v11 < v82);
            }
            v88 = v11 - 1;
            if (v11 - 1 != v9)
              *v9 = *v88;
            a5 = 0;
            *v88 = v64;
            continue;
          }
          v65 = *(_DWORD *)(v16 + 4 * v64);
LABEL_54:
          v66 = v11;
          do
          {
            v67 = v66;
            v69 = v66[1];
            ++v66;
            v68 = v69;
          }
          while (*(_DWORD *)(v16 + 4 * v69) < v65);
          v70 = a2;
          if (v67 == v11)
          {
            v70 = a2;
            do
            {
              if (v66 >= v70)
                break;
              v72 = *--v70;
            }
            while (*(_DWORD *)(v16 + 4 * v72) >= v65);
          }
          else
          {
            do
              v71 = *--v70;
            while (*(_DWORD *)(v16 + 4 * v71) >= v65);
          }
          if (v66 < v70)
          {
            v73 = *v70;
            v74 = v68;
            v75 = v66;
            v76 = v70;
            do
            {
              *v75 = v73;
              *v76 = v74;
              do
              {
                v67 = v75;
                v77 = v75[1];
                ++v75;
                v74 = v77;
              }
              while (*(_DWORD *)(v16 + 4 * v77) < v65);
              do
              {
                v78 = *--v76;
                v73 = v78;
              }
              while (*(_DWORD *)(v16 + 4 * v78) >= v65);
            }
            while (v75 < v76);
          }
          if (v67 != v11)
            *v11 = *v67;
          *v67 = v64;
          if (v66 < v70)
            goto LABEL_73;
          v79 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::StyleAttribute*,unsigned short *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v11, v67, *a3);
          v11 = v67 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::StyleAttribute*,unsigned short *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v67 + 1, a2, *a3);
          if (!(_DWORD)result)
          {
            if (v79)
              continue;
LABEL_73:
            result = std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::StyleAttribute*,unsigned short *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(v9, v67, a3, a4, a5 & 1);
            a5 = 0;
            v11 = v67 + 1;
            continue;
          }
          a2 = v67;
          if (v79)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
        {
          if (v11 != a2)
          {
            v110 = v11 + 1;
            if (v11 + 1 != a2)
            {
              v111 = **a3;
              v112 = 4;
              v113 = v11;
              do
              {
                v116 = *v113;
                v115 = v113[1];
                v113 = v110;
                v117 = *(_DWORD *)(v111 + 4 * v115);
                if (v117 < *(_DWORD *)(v111 + 4 * v116))
                {
                  v118 = v112;
                  do
                  {
                    *(unsigned int *)((char *)v11 + v118) = v116;
                    v119 = v118 - 4;
                    if (v118 == 4)
                    {
                      v114 = v11;
                      goto LABEL_110;
                    }
                    v116 = *(unsigned int *)((char *)v11 + v118 - 8);
                    v118 -= 4;
                  }
                  while (v117 < *(_DWORD *)(v111 + 4 * v116));
                  v114 = (unsigned int *)((char *)v11 + v119);
LABEL_110:
                  *v114 = v115;
                }
                v110 = v113 + 1;
                v112 += 4;
              }
              while (v113 + 1 != a2);
            }
          }
        }
        else if (v11 != a2)
        {
          v135 = v11 + 1;
          if (v11 + 1 != a2)
          {
            v136 = **a3;
            do
            {
              v138 = *v9;
              v137 = v9[1];
              v9 = v135;
              v139 = *(_DWORD *)(v136 + 4 * v137);
              if (v139 < *(_DWORD *)(v136 + 4 * v138))
              {
                v140 = v9;
                do
                {
                  *v140 = v138;
                  v138 = *(v140 - 2);
                  --v140;
                }
                while (v139 < *(_DWORD *)(v136 + 4 * v138));
                *v140 = v137;
              }
              v135 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

void std::vector<std::unique_ptr<std::array<unsigned short,128ul>>>::__append(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = (uint64_t)&v5[-*a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      abort();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
    }
    else
    {
      v18 = v5 - v7 - 8;
      if (v18 <= 0x77
        || &v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v14 && &v13[v8 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5)
      {
        goto LABEL_35;
      }
      v19 = (v18 >> 3) + 1;
      v6 = &v5[-8 * (v19 & 0x3FFFFFFFFFFFFFFCLL)];
      v20 = &v13[8 * v9 - 16];
      v21 = v5 - 32;
      v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v21;
        v23 = *((_OWORD *)v21 + 1);
        *(_OWORD *)v21 = 0uLL;
        *((_OWORD *)v21 + 1) = 0uLL;
        v21 -= 32;
        *((_OWORD *)v20 - 1) = v24;
        *(_OWORD *)v20 = v23;
        v20 -= 32;
        v22 -= 4;
      }
      while (v22);
      v14 -= 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_35:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
      v26 = (char *)a1[1];
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      while (v26 != v6)
      {
        v28 = *((_QWORD *)v26 - 1);
        v26 -= 8;
        v27 = v28;
        *(_QWORD *)v26 = 0;
        if (v28)
          MEMORY[0x1A1AF4E00](v27, 0x1000C40104B78CFLL);
      }
    }
    if (v6)
      operator delete(v6);
  }
}

void md::MeshRenderableLogic::processMaterialEnteringCollector(md::MeshRenderableLogic *this, int8x8_t *a2, gdc::EntityCollector *a3)
{
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unint64_t *v15;
  unint64_t *i;
  unint64_t v17;
  _BYTE *v18;
  uint64_t *v19;
  BOOL v20;
  NSObject *v21;
  uint64_t v22;
  int v23;
  char v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  int v28;
  unsigned int v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = a2[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_24;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0xCA93DB2C2ACE8387;
    if (*(_QWORD *)&v5 <= 0xCA93DB2C2ACE8387)
      v7 = 0xCA93DB2C2ACE8387 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0xCA93DB2C2ACE8387;
  }
  v8 = *(_QWORD **)(*(_QWORD *)a2 + 8 * v7);
  if (!v8)
    goto LABEL_24;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_24;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0xCA93DB2C2ACE8387)
      {
        if (v9[2] == 0xCA93DB2C2ACE8387)
          goto LABEL_22;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0xCA93DB2C2ACE8387)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_24;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_24;
  }
  if (v9[2] != 0xCA93DB2C2ACE8387)
    goto LABEL_11;
LABEL_22:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) == 0xCA93DB2C2ACE8387)
  {
    v14 = *(unsigned __int16 **)(v13 + 32);
    goto LABEL_25;
  }
LABEL_24:
  v14 = 0;
LABEL_25:
  v15 = (unint64_t *)*((_QWORD *)a3 + 4);
  for (i = (unint64_t *)*((_QWORD *)a3 + 5); v15 != i; ++v15)
  {
    v17 = *v15;
    v18 = (_BYTE *)gdc::Registry::get<md::components::MeshInstance,md::components::Material>((uint64_t)a2, *v15);
    if (v19)
      v20 = v18 == 0;
    else
      v20 = 1;
    if (!v20)
    {
      buildMaterialKey((uint64_t)a2, v17, v18, v19, (uint64_t)buf);
      if (v30)
      {
        md::RenderBatchManager::process((uint64_t)v14, (size_t)buf, v17);
        if (v30)
        {
          if (v29 != -1)
            (*(&off_1E42F43B8 + v29))((int)&v24, (md::MaterialRenderBatchKey *)buf);
        }
      }
    }
  }
  if (GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitMeshRenderableLogicLog(void)::onceToken, &__block_literal_global_9262);
  v21 = GEOGetVectorKitMeshRenderableLogicLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitMeshRenderableLogicLog(void)::log, OS_LOG_TYPE_DEBUG))
  {
    v22 = (uint64_t)(*((_QWORD *)a3 + 5) - *((_QWORD *)a3 + 4)) >> 3;
    v23 = *v14;
    *(_DWORD *)buf = 134218240;
    v26 = v22;
    v27 = 1024;
    v28 = v23;
    _os_log_impl(&dword_19F029000, v21, OS_LOG_TYPE_DEBUG, "Processed %zu material updates for BatchManager(id:%d)", buf, 0x12u);
  }
}

void sub_19F039C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;

  if (a43)
  {
    v46 = *(unsigned int *)(v44 + 224);
    if ((_DWORD)v46 != -1)
    {
      (*(void (**)(char *, char *))(v43 + 8 * v46))(&a13, &a14);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t gdc::Registry::get<md::components::MeshInstance,md::components::Material>(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (_QWORD *)gdc::Registry::storage<md::components::MeshInstance>(a1);
  v5 = v4[4];
  if (a2 >> 39 < (v4[5] - v5) >> 3
    && (v6 = *(_QWORD *)(v5 + 8 * (a2 >> 39))) != 0
    && (v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F)), v9 = v4[7], v8 = v4[8], v7 < (v8 - v9) >> 3)
    && ((v10 = v9 + 8 * v7, v10 != v8) ? (v11 = *(_DWORD *)(v10 + 4) == HIDWORD(a2)) : (v11 = 0), v11))
  {
    v12 = v4[11];
    v13 = v4[10] + 112 * v7;
  }
  else
  {
    v12 = v4[11];
    v13 = v12;
  }
  gdc::Registry::storage<md::components::Material>(a1);
  if (v13 == v12)
    return 0;
  else
    return v13;
}

uint64_t gdc::Registry::storage<md::components::Material>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x299DE7A80C80C439;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x299DE7A80C80C439;
      if (*(_QWORD *)&v3 <= 0x299DE7A80C80C439uLL)
        v5 = 0x299DE7A80C80C439uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x299DE7A80C80C439;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x299DE7A80C80C439)
            {
              if (v7[2] == 0x299DE7A80C80C439)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x299DE7A80C80C439)
          {
            if (v7[2] == 0x299DE7A80C80C439)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::Material]";
  *(_QWORD *)(v11 + 24) = 24;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B34C8;
  *(_QWORD *)(v11 + 8) = 0x299DE7A80C80C439;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x299DE7A80C80C439uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x299DE7A80C80C439;
  v15[1] = "md::components::Material]";
  v15[2] = 24;
  gdc::Registry::_registerStorageDataSignals(a1, 0x299DE7A80C80C439, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F039F90(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::hash<md::BaseRenderBatchKey<ggl::VertexData>>::operator()(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (*(unsigned __int8 *)(a1 + 73)
      + ((*(_QWORD *)a1 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(*(_QWORD *)a1 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (*(_QWORD *)a1 - 0x61C8864680B583EBLL);
  v2 = ((*(unsigned __int8 *)(a1 + 74) | (v1 << 6)) + (v1 >> 2) - 0x61C8864680B583EBLL) ^ v1;
  v3 = (*(_QWORD *)(a1 + 64) + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583EBLL) ^ v2;
  v4 = ((*(unsigned __int8 *)(a1 + 72) | (v3 << 6)) + (v3 >> 2) - 0x61C8864680B583EBLL) ^ v3;
  v5 = ((*(unsigned __int8 *)(a1 + 75) | (v4 << 6)) + (v4 >> 2) - 0x61C8864680B583EBLL) ^ v4;
  v6 = ((*(unsigned __int8 *)(a1 + 76) | (v5 << 6)) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
  v7 = (*(unsigned __int8 *)(a1 + 77) + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583EBLL) ^ v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
    v7 ^= v8 - 0x61C8864680B583EBLL + (v7 << 6) + (v7 >> 2);
  v9 = *(_QWORD *)(a1 + 32);
  if (v9)
    v7 ^= (v7 << 6) - 0x61C8864680B583EBLL + (v7 >> 2) + v9;
  v10 = *(_QWORD *)(a1 + 48);
  if (v10)
    return ((v7 << 6) - 0x61C8864680B583EBLL + (v7 >> 2) + v10) ^ v7;
  else
    return v7;
}

BOOL md::MaterialRenderBatchKey::operator!=(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64)
    || *(_QWORD *)a1 != *(_QWORD *)a2
    || *(unsigned __int8 *)(a1 + 73) != *(unsigned __int8 *)(a2 + 73)
    || *(unsigned __int8 *)(a1 + 72) != *(unsigned __int8 *)(a2 + 72)
    || *(unsigned __int8 *)(a1 + 74) != *(unsigned __int8 *)(a2 + 74)
    || *(unsigned __int8 *)(a1 + 75) != *(unsigned __int8 *)(a2 + 75)
    || *(unsigned __int8 *)(a1 + 76) != *(unsigned __int8 *)(a2 + 76)
    || *(unsigned __int8 *)(a1 + 77) != *(unsigned __int8 *)(a2 + 77);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
    v6 = v5 == *(_QWORD *)(a2 + 16);
  else
    v6 = 1;
  v7 = *(_QWORD *)(a1 + 32);
  if (!v6)
    v4 = 1;
  if (v7)
    v8 = v7 == *(_QWORD *)(a2 + 32);
  else
    v8 = 1;
  v9 = *(_QWORD *)(a1 + 48);
  if (!v8)
    v4 = 1;
  if (v9)
    v10 = v9 == *(_QWORD *)(a2 + 48);
  else
    v10 = 1;
  if (!v10)
    v4 = 1;
  if (v4
    || *(_QWORD *)(a1 + 80) != *(_QWORD *)(a2 + 80)
    || *(_QWORD *)(a1 + 96) != *(_QWORD *)(a2 + 96)
    || *(_QWORD *)(a1 + 104) != *(_QWORD *)(a2 + 104)
    || *(unsigned __int8 *)(a1 + 120) != *(unsigned __int8 *)(a2 + 120)
    || *(unsigned __int8 *)(a1 + 121) != *(unsigned __int8 *)(a2 + 121)
    || *(unsigned __int8 *)(a1 + 122) != *(unsigned __int8 *)(a2 + 122)
    || std::operator!=[abi:nn180100]<geo::Color<float,4,(geo::ColorSpace)0>,geo::Color<float,4,(geo::ColorSpace)0>>(a1 + 124, a2 + 124))
  {
    return 1;
  }
  if (*(_BYTE *)(a1 + 148) && *(_BYTE *)(a2 + 148))
  {
    if (*(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 1;
  }
  else if ((*(_BYTE *)(a1 + 148) != 0) != (*(_BYTE *)(a2 + 148) != 0))
  {
    return 1;
  }
  if (*(_BYTE *)(a1 + 217) && *(_BYTE *)(a2 + 217))
  {
    if (*(unsigned __int8 *)(a1 + 216) != *(unsigned __int8 *)(a2 + 216))
      return 1;
  }
  else if ((*(_BYTE *)(a1 + 217) != 0) != (*(_BYTE *)(a2 + 217) != 0))
  {
    return 1;
  }
  if (*(_BYTE *)(a1 + 208) && *(_BYTE *)(a2 + 208))
  {
    if (!md::RasterOverlayRenderPatch::operator!=((_QWORD *)(a1 + 152), (_QWORD *)(a2 + 152)))
      return *(unsigned __int8 *)(a1 + 218) != *(unsigned __int8 *)(a2 + 218);
  }
  else if ((*(_BYTE *)(a1 + 208) != 0) == (*(_BYTE *)(a2 + 208) != 0))
  {
    return *(unsigned __int8 *)(a1 + 218) != *(unsigned __int8 *)(a2 + 218);
  }
  return 1;
}

uint64_t std::__function::__func<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0,std::allocator<md::MeshRenderableLogic::MeshRenderableLogic(std::shared_ptr<md::RegistryManager> const&,std::shared_ptr<md::RunLoopController> const&,geo::TaskQueue *,NSObject  {objcproto17OS_dispatch_queue}*,BOOL)::$_0>,BOOL ()(gdc::Registry const*,gdc::Entity)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *a2;
  v4 = *a3;
  v5 = HIDWORD(*a3);
  v6 = (_QWORD *)gdc::Registry::storage<md::components::MeshInstance>(*a2);
  v7 = v4 >> 39;
  v8 = v6[4];
  if (v4 >> 39 >= (v6[5] - v8) >> 3
    || (v9 = *(_QWORD *)(v8 + 8 * v7)) == 0
    || (v10 = *(unsigned __int16 *)(v9 + 2 * (HIDWORD(v4) & 0x7F)), v12 = v6[7], v11 = v6[8], v10 >= (v11 - v12) >> 3)
    || ((v13 = v12 + 8 * v10, v13 != v11) ? (v14 = *(_DWORD *)(v13 + 4) == (_DWORD)v5) : (v14 = 0), !v14))
  {
    v15 = (_QWORD *)gdc::Registry::storage<md::components::DynamicMeshInstance>(v3);
    v16 = v15[4];
    if (v7 < (v15[5] - v16) >> 3 && (v17 = *(_QWORD *)(v16 + 8 * v7)) != 0)
    {
      v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v4) & 0x7F));
      v20 = v15[7];
      v19 = v15[8];
      if (v18 < (v19 - v20) >> 3)
      {
        v21 = v20 + 8 * v18;
        if (*(_DWORD *)(v21 + 4) != (_DWORD)v5)
          v21 = v15[8];
        return v21 != v19;
      }
    }
    else
    {
      v19 = v15[8];
    }
    v21 = v19;
    return v21 != v19;
  }
  return 1;
}

void gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(uint64_t *a1, uint64_t a2)
{
  _QWORD *v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  v21 = a2;
  v3 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v21);
  if ((v4 & 1) != 0)
  {
    v9 = (_BYTE *)a1[11];
    v8 = a1[12];
    if ((unint64_t)v9 >= v8)
    {
      v11 = (char *)a1[10];
      v12 = v9 - v11;
      v13 = v9 - v11 + 1;
      if (v13 < 0)
        goto LABEL_28;
      v14 = v8 - (_QWORD)v11;
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
        v15 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
        v16 = (char *)operator new(v15);
      else
        v16 = 0;
      v17 = &v16[v15];
      v10 = (uint64_t)&v16[v12 + 1];
      v18 = (char *)(v11 - v9);
      if (v11 == v9)
        v18 = 0;
      a1[10] = (uint64_t)&v16[v12 + (_QWORD)v18];
      a1[11] = v10;
      a1[12] = (uint64_t)v17;
      if (v11)
        operator delete(v11);
    }
    else
    {
      v10 = (uint64_t)(v9 + 1);
    }
    a1[11] = v10;
    v5 = a1[31];
  }
  else
  {
    v5 = a1[31];
    if (a1[10] + (((uint64_t)v3 - a1[7]) >> 3) != a1[11])
    {
      v6 = (_QWORD *)a1[16];
      if (v6)
      {
        while (1)
        {
          v23 = &v21;
          v24 = 1;
          v22 = v5;
          v7 = v6[6];
          if (!v7)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v7 + 48))(v7, &v22, &v23);
          v6 = (_QWORD *)*v6;
          if (!v6)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v19 = (_QWORD *)a1[22];
  if (v19)
  {
    while (1)
    {
      v23 = &v21;
      v24 = 1;
      v22 = v5;
      v20 = v19[6];
      if (!v20)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v20 + 48))(v20, &v22, &v23);
      v19 = (_QWORD *)*v19;
      if (!v19)
        return;
    }
    goto LABEL_27;
  }
}

void gdc::ComponentStorageWrapper<md::ls::CheckIfReadyToProcess>::emplace(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;

  v30 = a2;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(a1 + 4, (uint64_t)&v30);
  if ((v6 & 1) != 0)
  {
    v12 = (char *)a1[11];
    v11 = a1[12];
    if ((unint64_t)v12 >= v11)
    {
      v14 = (char *)a1[10];
      v15 = (v12 - v14) >> 3;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61)
        goto LABEL_34;
      v17 = v11 - (_QWORD)v14;
      if (v17 >> 2 > v16)
        v16 = v17 >> 2;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v19 = operator new(8 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[8 * v15];
      *v20 = *a3;
      v13 = v20 + 1;
      if (v12 != v14)
      {
        v21 = v12 - v14 - 8;
        if (v21 < 0x58)
          goto LABEL_38;
        if ((unint64_t)(v14 - v19) < 0x20)
          goto LABEL_38;
        v22 = (v21 >> 3) + 1;
        v23 = &v19[8 * v15 - 16];
        v24 = v12 - 16;
        v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v26 = *(_OWORD *)v24;
          *(v23 - 1) = *((_OWORD *)v24 - 1);
          *v23 = v26;
          v23 -= 2;
          v24 -= 32;
          v25 -= 4;
        }
        while (v25);
        v20 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
        v12 -= 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            v27 = *((_QWORD *)v12 - 1);
            v12 -= 8;
            *--v20 = v27;
          }
          while (v12 != v14);
        }
      }
      a1[10] = (uint64_t)v20;
      a1[11] = (uint64_t)v13;
      a1[12] = (uint64_t)&v19[8 * v18];
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_QWORD *)v12 = *a3;
      v13 = v12 + 8;
    }
    a1[11] = (uint64_t)v13;
    v8 = a1[31];
  }
  else
  {
    v7 = (_QWORD *)((char *)v5 + a1[10] - a1[7]);
    *v7 = *a3;
    v8 = a1[31];
    if (v7 != (_QWORD *)a1[11])
    {
      v9 = (_QWORD *)a1[16];
      if (v9)
      {
        while (1)
        {
          v32 = &v30;
          v33 = 1;
          v31 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v31, &v32);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v28 = (_QWORD *)a1[22];
  if (v28)
  {
    while (1)
    {
      v32 = &v30;
      v33 = 1;
      v31 = v8;
      v29 = v28[6];
      if (!v29)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v29 + 48))(v29, &v31, &v32);
      v28 = (_QWORD *)*v28;
      if (!v28)
        return;
    }
    goto LABEL_33;
  }
}

uint64_t __copy_helper_block_ea8_48c37_ZTSNSt3__110shared_ptrIN3geo4TaskEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t esl::FontKey::tokenize@<X0>(std::string *__str@<X0>, uint64_t *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::string *p_p;
  std::string::size_type size;
  std::string *v10;
  unsigned int v11;
  uint64_t v13;
  unsigned int v14;
  int v15;
  char *v16;
  std::string *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  std::string *v22;
  std::string *v23;
  _QWORD *v24;
  uint64_t v25;
  std::string __p;
  std::string v28;
  void *v29;
  char v30;
  uint64_t v31;
  char v32;

  *a2 = (uint64_t)a2;
  a2[1] = (uint64_t)a2;
  a2[2] = 0;
  std::string::basic_string(&v28, __str, 1uLL, 1uLL, (std::allocator<char> *)&__p);
  v4 = (char *)operator new(0x28uLL);
  *(std::string *)(v4 + 16) = v28;
  *(_OWORD *)&v28.__r_.__value_.__r.__words[1] = 0uLL;
  v5 = *a2;
  *(_QWORD *)v4 = *a2;
  *((_QWORD *)v4 + 1) = a2;
  *(_QWORD *)(v5 + 8) = v4;
  *a2 = (uint64_t)v4;
  ++a2[2];
  std::string::basic_string(&__p, __str, 2uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v32);
  std::istringstream::basic_istringstream[abi:ne180100](&v28, &__p, 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  v6 = MEMORY[0x1E0C80978];
  while (1)
  {
    v7 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v28, (uint64_t)&__p, 0x2Cu);
    if ((*((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 5) != 0)
      break;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    if (!size)
      goto LABEL_28;
    v10 = (std::string *)((char *)p_p + size);
    do
    {
      v11 = p_p->__r_.__value_.__s.__data_[0];
      if ((v11 & 0x80000000) != 0 ? __maskrune(v11, 0x4000uLL) : *(_DWORD *)(v6 + 4 * v11 + 60) & 0x4000)
        break;
      p_p = (std::string *)((char *)p_p + 1);
      --size;
    }
    while (size);
    if (size == 1)
    {
LABEL_28:
      v10 = p_p;
    }
    else
    {
      v13 = 1;
      v10 = p_p;
      do
      {
        v14 = p_p->__r_.__value_.__s.__data_[v13];
        if ((v14 & 0x80000000) != 0)
          v15 = __maskrune(v14, 0x4000uLL);
        else
          v15 = *(_DWORD *)(v6 + 4 * v14 + 60) & 0x4000;
        if (!v15)
        {
          v10->__r_.__value_.__s.__data_[0] = p_p->__r_.__value_.__s.__data_[v13];
          v10 = (std::string *)((char *)v10 + 1);
        }
        ++v13;
      }
      while (size != v13);
    }
    v16 = (char *)&__p + HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      v17 = &__p;
    }
    else
    {
      v16 = (char *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_);
      v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    std::string::erase(&__p, (char *)v10 - (char *)v17, v16 - (char *)v10);
    v18 = a2[1];
    v19 = (_QWORD *)(v18 + 16);
    v20 = *(char *)(v18 + 39);
    if (v20 < 0)
    {
      if (*(_QWORD *)(v18 + 24) != 1)
        goto LABEL_41;
      v19 = (_QWORD *)*v19;
    }
    else if (v20 != 1)
    {
      goto LABEL_41;
    }
    if (*(_BYTE *)v19 != 33 || a2[2] != 1)
    {
LABEL_41:
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = (std::string *)((char *)&__p + HIBYTE(__p.__r_.__value_.__r.__words[2]));
      else
        v22 = (std::string *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = &__p;
      else
        v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
      while (v23 != v22)
      {
        v23->__r_.__value_.__s.__data_[0] = __tolower(v23->__r_.__value_.__s.__data_[0]);
        v23 = (std::string *)((char *)v23 + 1);
      }
    }
    v24 = std::__list_imp<std::string>::__create_node[abi:ne180100]<std::string const&>((uint64_t)a2, 0, 0, (uint64_t)&__p);
    v24[1] = a2;
    v25 = *a2;
    *v24 = *a2;
    *(_QWORD *)(v25 + 8) = v24;
    *a2 = (uint64_t)v24;
    ++a2[2];
  }
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v28.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F58];
  *(std::string::size_type *)((char *)v28.__r_.__value_.__r.__words + *(_QWORD *)(v28.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  v28.__r_.__value_.__r.__words[2] = MEMORY[0x1E0DE4FB8] + 16;
  if (v30 < 0)
    operator delete(v29);
  std::streambuf::~streambuf();
  std::istream::~istream();
  return MEMORY[0x1A1AF4D64](&v31);
}

void sub_19F03AA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _QWORD *v20;

  if (a14 < 0)
    operator delete(__p);
  std::__list_imp<std::string>::clear(v20);
  _Unwind_Resume(a1);
}

uint64_t esl::FontKey::initialize(uint64_t a1, std::string *a2)
{
  const std::string *v4;
  _BYTE *v5;
  unint64_t v6;
  std::string *v7;
  __int128 v8;
  std::string *p_p;
  std::string::size_type size;
  unsigned __int8 v11;
  uint64_t v12;
  const std::string::value_type **v13;
  std::string::size_type v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  char *v20;
  uint64_t v21;
  BOOL v26;
  char *v29;
  void *v30;
  char *v31;
  uint64_t v33;
  double v34;
  unint64_t v35;
  std::string *v36;
  std::string::size_type v37;
  void *v38;
  unint64_t v39;
  std::string::size_type v40;
  int v41;
  std::string::size_type v43;
  std::string *v44;
  std::string::size_type v45;
  void *v46;
  float v47;
  void *v48;
  int v49;
  int v50;
  float v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  std::string::size_type v55;
  _BYTE *v57;
  __int16 v58;
  std::string v59;
  std::string v60;
  std::string __p;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65[9];

  v4 = (const std::string *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
  {
    if (*(_QWORD *)(a1 + 80) < 2uLL)
      goto LABEL_19;
    v5 = (_BYTE *)v4->__r_.__value_.__r.__words[0];
  }
  else
  {
    v5 = (_BYTE *)(a1 + 72);
    if (*(unsigned __int8 *)(a1 + 95) < 2u)
      goto LABEL_19;
  }
  if (*v5 == 37)
  {
    esl::FontKey::tokenize((std::string *)(a1 + 72), &v62);
    v6 = v64;
    if (v64 < 2)
    {
LABEL_8:
      std::operator+<char>();
      v7 = std::string::append(&v60, "\".");
      v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::string::append(a2, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      v11 = 1;
LABEL_168:
      std::__list_imp<std::string>::clear(&v62);
      return v11;
    }
    v12 = v63;
    v13 = (const std::string::value_type **)(v63 + 16);
    if (*(char *)(v63 + 39) < 0)
    {
      v14 = *(_QWORD *)(v63 + 24);
      if (!v14)
        goto LABEL_8;
      std::string::__init_copy_ctor_external(&__p, *v13, v14);
      v12 = v63;
      v6 = v64;
    }
    else
    {
      if (!*(_BYTE *)(v63 + 39))
        goto LABEL_8;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v13;
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v63 + 32);
    }
    v15 = *(_QWORD **)v12;
    v15[1] = *(_QWORD *)(v12 + 8);
    **(_QWORD **)(v12 + 8) = v15;
    v64 = v6 - 1;
    std::__list_imp<std::string>::__delete_node[abi:ne180100]<>((int)&v62, (void **)v12);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ != 1)
        goto LABEL_34;
      v16 = *__p.__r_.__value_.__l.__data_;
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 1)
        goto LABEL_34;
      v16 = __p.__r_.__value_.__s.__data_[0];
    }
    if (v16 == 33)
    {
      *(_BYTE *)(a1 + 11) = 1;
      std::string::operator=((std::string *)(a1 + 48), (const std::string *)(v63 + 16));
LABEL_154:
      v11 = 0;
LABEL_166:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_168;
    }
    if (v16 == 36)
    {
      *(_BYTE *)(a1 + 13) = 1;
LABEL_36:
      v17 = v63;
      if ((uint64_t *)v63 == &v62)
        goto LABEL_154;
      v11 = 0;
      v57 = (_BYTE *)(a1 + 32);
      while (1)
      {
        v18 = (_DWORD *)(v17 + 16);
        v19 = *(unsigned __int8 *)(v17 + 39);
        if (*(char *)(v17 + 39) < 0)
        {
          v20 = *(char **)(v17 + 16);
          v21 = *(_QWORD *)(v17 + 24);
          if (v21 == 6 && *(_DWORD *)v20 == 1818326121 && *((_WORD *)v20 + 2) == 25449)
          {
LABEL_67:
            *(_BYTE *)(a1 + 10) = 1;
            goto LABEL_128;
          }
          if (v21 == 7)
          {
            if (*(_DWORD *)v20 == 1853190002 && *(_DWORD *)(v20 + 3) == 1684366446)
            {
LABEL_73:
              *(_BYTE *)(a1 + 12) = 1;
              goto LABEL_128;
            }
            v20 = *(char **)(v17 + 16);
            v21 = *(_QWORD *)(v17 + 24);
          }
          if (v21 != 9)
            goto LABEL_76;
        }
        else
        {
          if (v19 == 6)
          {
            if (*v18 == 1818326121 && *(_WORD *)(v17 + 20) == 25449)
              goto LABEL_67;
            goto LABEL_87;
          }
          if (v19 == 7)
          {
            v26 = *v18 == 1853190002 && *(_DWORD *)(v17 + 19) == 1684366446;
            v20 = (char *)(v17 + 16);
            if (v26)
              goto LABEL_73;
            goto LABEL_77;
          }
          v20 = (char *)(v17 + 16);
          if (v19 != 9)
            goto LABEL_87;
        }
        if (*(_QWORD *)v20 == 0x65736E65646E6F63 && v20[8] == 100)
        {
          *(_BYTE *)(a1 + 9) = 1;
          goto LABEL_128;
        }
        if ((v19 & 0x80) != 0)
        {
          v20 = *(char **)(v17 + 16);
          v21 = *(_QWORD *)(v17 + 24);
LABEL_76:
          if (v21 != 7)
            goto LABEL_88;
          goto LABEL_77;
        }
        v20 = (char *)(v17 + 16);
        if (v19 != 7)
          goto LABEL_87;
LABEL_77:
        if (*(_DWORD *)v20 == 1886220131 && *(_DWORD *)(v20 + 3) == 1952670064)
        {
          *(_BYTE *)(a1 + 8) = 1;
          goto LABEL_128;
        }
        if ((v19 & 0x80) == 0)
        {
          if (v19 == 7 && *v18 == 1634100580 && *(_DWORD *)(v17 + 19) == 1953264993)
            goto LABEL_128;
LABEL_87:
          v21 = *(unsigned __int8 *)(v17 + 39);
          v20 = (char *)(v17 + 16);
          goto LABEL_88;
        }
        v20 = *(char **)(v17 + 16);
        v21 = *(_QWORD *)(v17 + 24);
        if (v21 == 7)
        {
          if (*(_DWORD *)v20 == 1634100580 && *(_DWORD *)(v20 + 3) == 1953264993)
            goto LABEL_128;
          v29 = v20 + 7;
          v21 = 7;
          goto LABEL_90;
        }
LABEL_88:
        if (v21 < 6)
          goto LABEL_103;
        v29 = &v20[v21];
LABEL_90:
        v30 = v20;
        do
        {
          v31 = (char *)memchr(v30, 119, v21 - 5);
          if (!v31)
            break;
          if (*(_DWORD *)v31 == 1952737655 && *((_WORD *)v31 + 2) == 15720)
          {
            if (v31 == v29 || v31 - v20 == -1)
              break;
            v33 = std::string::rfind[abi:ne180100]((unsigned __int8 *)(v17 + 16), "=", 0xFFFFFFFFFFFFFFFFLL);
            std::string::basic_string(&v60, (const std::string *)(v17 + 16), v33 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v59);
            if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
            {
              v46 = (void *)v60.__r_.__value_.__r.__words[0];
              v34 = atof(v60.__r_.__value_.__l.__data_);
              operator delete(v46);
            }
            else
            {
              v34 = atof((const char *)&v60);
            }
            v47 = v34;
            if (v47 != 0.0)
              *(float *)(a1 + 20) = v47;
            goto LABEL_128;
          }
          v30 = v31 + 1;
          v21 = v29 - (_BYTE *)v30;
        }
        while (v29 - (_BYTE *)v30 >= 6);
LABEL_103:
        if (std::string::find[abi:ne180100]((uint64_t *)(v17 + 16), "styl-alt=", 0) != -1)
        {
          v35 = std::string::find[abi:ne180100]((uint64_t *)(v17 + 16), "=", 0);
          std::string::basic_string(&v60, (const std::string *)(v17 + 16), v35 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v59);
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v36 = &v60;
          else
            v36 = (std::string *)v60.__r_.__value_.__r.__words[0];
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v37 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          else
            v37 = v60.__r_.__value_.__l.__size_;
          esl::FontKey::parseStylisticAlternates((_QWORD *)a1, (uint64_t)v36, v37);
          goto LABEL_111;
        }
        if (std::string::find[abi:ne180100]((uint64_t *)(v17 + 16), "lower-case=", 0) == -1)
        {
          v40 = std::string::find[abi:ne180100]((uint64_t *)(v17 + 16), "-g", 0);
          std::string::basic_string(&v60, (const std::string *)(v17 + 16), 0, v40, (std::allocator<char> *)&v59);
          esl::toFontWeight(&v60, &v58);
          if ((_BYTE)v58)
          {
            *(_BYTE *)(a1 + 40) = *geo::optional<esl::FontWeight>::value(&v58);
            if (v40 != -1)
            {
              std::string::basic_string(&v59, (const std::string *)(v17 + 16), v40 + 2, 1uLL, (std::allocator<char> *)v65);
              if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
              {
                v48 = (void *)v59.__r_.__value_.__r.__words[0];
                v41 = atoi(v59.__r_.__value_.__l.__data_);
                operator delete(v48);
              }
              else
              {
                v41 = atoi((const char *)&v59);
              }
              if (v41 <= 1)
                v49 = 1;
              else
                v49 = v41;
              if (v49 >= 4)
                v50 = 4;
              else
                v50 = v49;
              if (*v57)
              {
                *(_DWORD *)geo::optional<int>::value(v57) = v50;
              }
              else
              {
                *(_DWORD *)(a1 + 36) = v50;
                *(_BYTE *)(a1 + 32) = 1;
              }
              v51 = (float)*(int *)geo::optional<int>::value(v57) / 5.0;
              v59.__r_.__value_.__s.__data_[0] = 1;
              *((float *)v59.__r_.__value_.__r.__words + 1) = v51;
              geo::optional<float>::operator=(a1 + 24, &v59);
              geo::optional<float>::~optional(&v59);
            }
          }
          else
          {
            std::operator+<char>();
            if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v44 = &v59;
            else
              v44 = (std::string *)v59.__r_.__value_.__r.__words[0];
            if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v45 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
            else
              v45 = v59.__r_.__value_.__l.__size_;
            std::string::append(a2, (const std::string::value_type *)v44, v45);
            if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v59.__r_.__value_.__l.__data_);
            v11 = 3;
          }
          geo::optional<esl::FontWeight>::~optional(&v58);
LABEL_111:
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
          {
            v38 = (void *)v60.__r_.__value_.__r.__words[0];
LABEL_127:
            operator delete(v38);
            goto LABEL_128;
          }
          goto LABEL_128;
        }
        v39 = std::string::find[abi:ne180100]((uint64_t *)(v17 + 16), "=", 0);
        std::string::basic_string(&v60, (const std::string *)(v17 + 16), v39 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v59);
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        {
          v43 = v60.__r_.__value_.__r.__words[0];
          *(_BYTE *)(a1 + 120) = atoi(v60.__r_.__value_.__l.__data_);
          v38 = (void *)v43;
          goto LABEL_127;
        }
        *(_BYTE *)(a1 + 120) = atoi((const char *)&v60);
LABEL_128:
        v17 = *(_QWORD *)(v17 + 8);
        if ((uint64_t *)v17 == &v62)
          goto LABEL_166;
      }
    }
LABEL_34:
    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "&"))
    {
      std::operator+<char>();
      v52 = std::string::append(&v59, "\".");
      v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v54 = &v60;
      else
        v54 = (std::string *)v60.__r_.__value_.__r.__words[0];
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v55 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      else
        v55 = v60.__r_.__value_.__l.__size_;
      std::string::append(a2, (const std::string::value_type *)v54, v55);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v59.__r_.__value_.__l.__data_);
      v11 = 2;
      goto LABEL_166;
    }
    *(_BYTE *)(a1 + 13) = 1;
    std::string::operator=((std::string *)(a1 + 48), (const std::string *)(v63 + 16));
    goto LABEL_36;
  }
LABEL_19:
  std::string::operator=((std::string *)(a1 + 48), v4);
  return 0;
}

void sub_19F03B318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33)
{
  geo::optional<esl::FontWeight>::~optional(&a13);
  if (a25 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  std::__list_imp<std::string>::clear(&a33);
  _Unwind_Resume(a1);
}

_BYTE *geo::optional<int>::value(_BYTE *a1)
{
  size_t v3;
  _BYTE v4[32];
  int v5;
  int v6[2];
  int v7;
  pid_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (!*a1)
  {
    printf("%s : Assertion with expression - %s : Failed in file - %s line - %i\n", "optional has no value. Undefined behavior.", "_hasValue", "/AppleInternal/Library/BuildRoots/3949dc93-559d-11ef-b093-5a7ac3341c94/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/GeoStdLib/Optional.hpp", 355);
    v5 = 0;
    *(_QWORD *)v6 = 0xE00000001;
    v7 = 1;
    v8 = getpid();
    v3 = 648;
    if (!sysctl(v6, 4u, v4, &v3, 0, 0) && (v5 & 0x800) != 0)
      __debugbreak();
  }
  return a1 + 4;
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F58];
  v3 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1A1AF4D64](a1 + 120);
  return a1;
}

uint64_t geo::optional<float>::operator=(uint64_t a1, _BYTE *a2)
{
  int v3;

  if (*a2)
  {
    if (*(_BYTE *)a1)
    {
      v3 = *(_DWORD *)geo::optional<int>::value(a2);
      *(_DWORD *)geo::optional<int>::value((_BYTE *)a1) = v3;
    }
    else
    {
      *(_DWORD *)(a1 + 4) = *(_DWORD *)geo::optional<int>::value(a2);
      *(_BYTE *)a1 = 1;
    }
  }
  else if (*(_BYTE *)a1)
  {
    geo::optional<int>::value((_BYTE *)a1);
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

void md::MercatorTerrainAnchor::setCoordinate(unint64_t a1, double *a2)
{
  double v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  double v8;
  double v9;
  long double v10;
  long double v11;
  float64x2_t v12;
  id WeakRetained;
  float64_t v19;
  void *__p[3];

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 64))(__p);
  v4 = *a2;
  if (*a2 != *(double *)__p || a2[1] != *(double *)&__p[1] || a2[2] != *(double *)&__p[2])
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      v6 = *(_QWORD **)(v5 + 24);
      if (v6)
      {
        v7 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(*(_QWORD **)(v5 + 24), a1);
        if (v7)
        {
          std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, v6, v7);
          if (__p[0])
            operator delete(__p[0]);
          v4 = *a2;
        }
      }
      v8 = a2[1];
      v9 = a2[2];
      if (v4 != *(double *)(a1 + 40) || v8 != *(double *)(a1 + 48) || v9 != *(double *)(a1 + 56))
      {
        *(double *)(a1 + 40) = v4;
        *(double *)(a1 + 48) = v8;
        *(double *)(a1 + 56) = v9;
        v19 = v8;
        v10 = tan(v4 * 0.00872664626 + 0.785398163);
        v11 = log(v10);
        v12.f64[0] = v19;
        v12.f64[1] = v11;
        __asm { FMOV            V1.2D, #0.5 }
        *(float64x2_t *)(a1 + 16) = vmlaq_f64(_Q1, (float64x2_t)xmmword_19FFB32D0, v12);
        *(double *)(a1 + 32) = v9;
        WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
        objc_msgSend(WeakRetained, "anchorWorldPointDidChange:", a1);

      }
    }
  }
}

void sub_19F03B738(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19F03B98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19F03BD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19F03BD7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19F03BE98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float md::LabelLineStitchSegment::direction(md::LabelLineStitchSegment *this, int a2, int a3)
{
  md::LabelPoint *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  _BYTE v13[48];

  if (a2)
  {
    md::LabelLineStitchSegment::point((md::LabelLineStitchSegment *)v13, this, 1uLL);
    v5 = (md::LabelLineStitchSegment *)((char *)this + 32);
  }
  else
  {
    v6 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    }
    else
    {
      v8 = *((_QWORD *)this + 1);
      if (v8)
        v7 = *(unsigned int *)(v8 + 56);
      else
        v7 = 0;
    }
    md::LabelLineStitchSegment::point((md::LabelLineStitchSegment *)v13, this, v7 - 2);
    v5 = (md::LabelLineStitchSegment *)((char *)this + 80);
  }
  md::LabelPoint::vectorToPoint(v5, (const md::LabelPoint *)v13, a3);
  return 1.0 / sqrt(v9 * v9 + v10 * v10 + v11 * v11) * v9;
}

uint64_t md::LabelLinePosition::offsetDistance(md::LabelLinePosition *this, double *a2, double a3)
{
  int v6;
  int LabelPoint;
  uint64_t result;
  double *v9;
  double v10;
  double v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  __int16 *v20;
  __n128 v21;
  double v22;
  double v23;
  double v24;
  double *v25;
  double v26;
  double v27;
  int v28;
  _BOOL4 v29;
  const md::LabelPoint *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  BOOL v37;
  double v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  double *v57;
  double v58;
  double v59;
  int v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  double *v67;
  double v68;
  double v69;
  _OWORD v70[2];
  uint64_t v71;
  int v72;
  __int16 v73;
  char v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  _BYTE v78[7];

  v6 = *(unsigned __int8 *)(*(_QWORD *)this + 290);
  if (a2)
  {
    *(int64x2_t *)a2 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    *((int64x2_t *)a2 + 1) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  }
  v77 = 0;
  v75 = 0u;
  v76 = 0u;
  *(_DWORD *)v78 = 2139095039;
  *(_WORD *)&v78[4] = 0;
  v78[6] = 0;
  LabelPoint = md::LabelLinePosition::getLabelPoint(this, (md::LabelPoint *)&v75);
  result = 0;
  if (!LabelPoint)
    return result;
  if (a2)
  {
    v9 = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)&v75);
    v10 = a2[1];
    *a2 = fmin(*v9, *a2);
    v11 = a2[3];
    a2[2] = fmax(a2[2], *v9);
    a2[1] = fmin(v9[1], v10);
    a2[3] = fmax(v11, v9[1]);
  }
  if (a3 >= 0.0)
  {
    v16 = (char *)this + 16;
    LODWORD(v70[0]) = -1;
    if (md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this, 1, (uint64_t)v70))
      goto LABEL_17;
    return 0;
  }
  if (*((float *)this + 9) != 0.0)
  {
    if (md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this, 1, (uint64_t)this + 32))
    {
      v12 = *((__int16 *)this + 16);
      v13 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
      v14 = *(_QWORD *)(*((_QWORD *)this + 2) + 16) - v13;
      v15 = v13 + 16 * v12;
      if (v12 >= v14 >> 4)
        v15 = 0;
    }
    else
    {
      v15 = 0;
    }
    *((_QWORD *)this + 3) = v15;
  }
  v16 = (char *)this + 16;
  LODWORD(v70[0]) = -1;
  if (!md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this, -1, (uint64_t)v70))
    return 0;
LABEL_17:
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v16 + 8) + 16 * SLOWORD(v70[0]));
  v18 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 24))(v17, SWORD1(v70[0]));
  if (!v18)
    return 0;
  v19 = fabs(a3);
  v20 = (__int16 *)((char *)this + 32);
  md::LabelPoint::vectorToPoint((md::LabelPoint *)&v75, (const md::LabelPoint *)v18, v6 != 0);
  v24 = sqrt(v21.n128_f64[0] * v21.n128_f64[0] + v22 * v22 + v23 * v23);
  if (v24 + 1.0e-10 >= v19)
  {
    v29 = v6 != 0;
    v21.n128_f64[0] = v24 + 1.0e-10;
    v30 = (const md::LabelPoint *)(*(uint64_t (**)(_QWORD, _QWORD, __n128))(***((_QWORD ***)this + 3) + 24))(**((_QWORD **)this + 3), *((__int16 *)this + 17), v21);
    md::LabelPoint::vectorToPoint((md::LabelPoint *)&v75, v30, v29);
    v19 = sqrt(v31 * v31 + v32 * v32 + v33 * v33) + v19;
    md::LabelPoint::vectorToPoint(v30, (const md::LabelPoint *)v18, v29);
    v24 = sqrt(v34 * v34 + v35 * v35 + v36 * v36);
  }
  else
  {
    if (a2)
    {
      v25 = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)v18);
      v26 = a2[1];
      *a2 = fmin(*v25, *a2);
      v27 = a2[3];
      a2[2] = fmax(a2[2], *v25);
      a2[1] = fmin(v25[1], v26);
      a2[3] = fmax(v27, v25[1]);
    }
    v28 = a3 >= 0.0 ? 1 : -1;
    if (md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this, v28, (uint64_t)this + 32))
    {
      v43 = *v20;
      v44 = *(_QWORD *)(*(_QWORD *)v16 + 8);
      v45 = *(_QWORD *)(*(_QWORD *)v16 + 16) - v44;
      v46 = v44 + 16 * v43;
      if (v43 >= v45 >> 4)
        v46 = 0;
    }
    else
    {
      v46 = 0;
    }
    while (1)
    {
      *((_QWORD *)this + 3) = v46;
      v50 = *(_QWORD *)(v18 + 8);
      *(_QWORD *)&v75 = *(_QWORD *)v18;
      *((_QWORD *)&v75 + 1) = v50;
      v51 = *(_QWORD *)(v18 + 24);
      *(_QWORD *)&v76 = *(_QWORD *)(v18 + 16);
      *((_QWORD *)&v76 + 1) = v51;
      v77 = *(_QWORD *)(v18 + 32);
      v52 = *(_DWORD *)(v18 + 43);
      *(_DWORD *)v78 = *(_DWORD *)(v18 + 40);
      v19 = v19 - v24;
      *(_DWORD *)&v78[3] = v52;
      if (a3 >= 0.0)
      {
        LODWORD(v70[0]) = -1;
        if (!md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this, 1, (uint64_t)v70))
          return 0;
      }
      else
      {
        LODWORD(v70[0]) = -1;
        if (!md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this, -1, (uint64_t)v70))
          return 0;
      }
      v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v16 + 8) + 16 * SLOWORD(v70[0]));
      v18 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 24))(v53, SWORD1(v70[0]));
      if (!v18)
        return 0;
      md::LabelPoint::vectorToPoint((md::LabelPoint *)&v75, (const md::LabelPoint *)v18, v6 != 0);
      v24 = sqrt(v54 * v54 + v55 * v55 + v56 * v56);
      if (v24 + 1.0e-10 >= v19)
        break;
      if (a2)
      {
        v57 = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)v18);
        v58 = a2[1];
        *a2 = fmin(*v57, *a2);
        v59 = a2[3];
        a2[2] = fmax(a2[2], *v57);
        a2[1] = fmin(v57[1], v58);
        a2[3] = fmax(v59, v57[1]);
      }
      if (a3 >= 0.0)
        v60 = 1;
      else
        v60 = -1;
      if (md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this, v60, (uint64_t)this + 32))
      {
        v47 = *v20;
        v48 = *(_QWORD *)(*(_QWORD *)v16 + 8);
        v49 = *(_QWORD *)(*(_QWORD *)v16 + 16) - v48;
        v46 = v48 + 16 * v47;
        if (v47 >= v49 >> 4)
          v46 = 0;
      }
      else
      {
        v46 = 0;
      }
    }
  }
  if (v24 == 0.0)
    return 0;
  if (v24 <= v19 + -1.0e-10)
  {
    if (a3 >= 0.0)
      v61 = 1;
    else
      v61 = -1;
    if (md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this, v61, (uint64_t)this + 32))
    {
      v62 = *v20;
      v63 = *(_QWORD *)(*(_QWORD *)v16 + 8);
      v64 = *(_QWORD *)(*(_QWORD *)v16 + 16) - v63;
      v65 = v63 + 16 * v62;
      if (v62 >= v64 >> 4)
        v65 = 0;
    }
    else
    {
      v65 = 0;
    }
    *((_QWORD *)this + 3) = v65;
    v38 = 0.0;
  }
  else
  {
    v37 = a3 < 0.0;
    v38 = v19 / v24;
    if (v37 && v38 != 0.0)
    {
      if (md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this, -1, (uint64_t)this + 32))
      {
        v39 = *v20;
        v40 = *(_QWORD *)(*(_QWORD *)v16 + 8);
        v41 = *(_QWORD *)(*(_QWORD *)v16 + 16) - v40;
        v42 = v40 + 16 * v39;
        if (v39 >= v41 >> 4)
          v42 = 0;
      }
      else
      {
        v42 = 0;
      }
      *((_QWORD *)this + 3) = v42;
      v38 = 1.0 - v38;
    }
  }
  v66 = v38;
  *((float *)this + 9) = v66;
  if (a2)
  {
    v71 = 0;
    memset(v70, 0, sizeof(v70));
    v72 = 2139095039;
    v73 = 0;
    v74 = 0;
    if (md::LabelLinePosition::getLabelPoint(this, (md::LabelPoint *)v70))
    {
      v67 = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)v70);
      v68 = a2[1];
      *a2 = fmin(*v67, *a2);
      v69 = a2[3];
      a2[2] = fmax(a2[2], *v67);
      a2[1] = fmin(v67[1], v68);
      a2[3] = fmax(v69, v67[1]);
    }
  }
  return 1;
}

__n128 md::LabelLineStitchSegment::point(md::LabelLineStitchSegment *this, _QWORD *a2, unint64_t a3)
{
  uint64_t v5;
  __n128 result;
  uint64_t v7;
  unsigned __int8 v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  md::LabelPoint *v15;

  if (*a2)
  {
    v5 = (*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)*a2 + 24))(*a2, a3);
    *(_OWORD *)this = *(_OWORD *)v5;
    *((_QWORD *)this + 2) = *(_QWORD *)(v5 + 16);
    result = *(__n128 *)(v5 + 24);
    *(__n128 *)((char *)this + 24) = result;
    *((_DWORD *)this + 10) = *(_DWORD *)(v5 + 40);
    *(_DWORD *)((char *)this + 43) = *(_DWORD *)(v5 + 43);
  }
  else
  {
    v7 = a2[1];
    if (v7)
    {
      if ((v8 & 1) == 0
      {
        md::TileLabelLine::point(unsigned long)const::kInvalidPoint = 0uLL;
      }
      v9 = *(_QWORD **)(v7 + 24);
      v10 = *(_QWORD **)(v7 + 32);
      if (v9 == v10)
      {
        v12 = (__n128 *)&md::TileLabelLine::point(unsigned long)const::kInvalidPoint;
      }
      else
      {
        v11 = 0;
        v12 = (__n128 *)&md::TileLabelLine::point(unsigned long)const::kInvalidPoint;
        while (1)
        {
          v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 16))(*v9);
          if (v13 + v11 > a3)
            break;
          v9 += 2;
          v11 += v13;
          if (v9 == v10)
            goto LABEL_16;
        }
        if (*((_BYTE *)v9 + 8))
          v14 = a3 - v11;
        else
          v14 = v13 + ~(a3 - v11);
        v15 = (md::LabelPoint *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v9 + 24))(*v9, v14);
        v12 = (__n128 *)md::LabelPoint::mercatorPoint(v15);
      }
LABEL_16:
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
      result = *v12;
      *(__n128 *)((char *)this + 24) = *v12;
      *((_DWORD *)this + 10) = 2139095039;
      *((_WORD *)this + 22) = 256;
      *((_BYTE *)this + 46) = 1;
    }
    else
    {
      result.n128_u64[0] = 0;
      *((_OWORD *)this + 1) = 0u;
      *((_OWORD *)this + 2) = 0u;
      *(_OWORD *)this = 0u;
      *((_DWORD *)this + 10) = 2139095039;
    }
  }
  return result;
}

void md::LabelLine::attributes(uint64_t *a1, _QWORD *a2, _QWORD *a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unsigned __int8 *v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  double v30;
  uint64_t *v31;
  BOOL v32;
  const md::LabelPoint *v33;
  double v34;
  double v35;
  double v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  int v49;
  unint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int v64;
  _BYTE v65[7];
  int v66;
  char v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  _QWORD *v70;
  unsigned __int8 *v71;
  unint64_t v72;
  int v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  _BYTE v77[7];

  v64 = *(unsigned __int8 *)(*a3 + 290);
  *a1 = 0;
  a1[1] = 0;
  v7 = a2[12];
  a1[2] = 0;
  a1[3] = v7;
  v8 = a2[9];
  v9 = a2[10];
  if (v9 == v8)
  {
    v11 = 0;
    v62 = 0;
    v16 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 4) > 0x555555555555555)
      abort();
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    v11 = v10;
    v12 = 0;
    *a1 = v10;
    a1[1] = v10;
    v62 = v10 + 16 * ((v9 - v8) >> 4);
    a1[2] = v62;
    do
    {
      v13 = (_OWORD *)(v10 + v12);
      if (v10 + v12)
      {
        v14 = *(_OWORD *)(v8 + v12);
        v15 = *(_OWORD *)(v8 + v12 + 32);
        v13[1] = *(_OWORD *)(v8 + v12 + 16);
        v13[2] = v15;
        *v13 = v14;
      }
      v12 += 48;
    }
    while (v8 + v12 != v9);
    v16 = v10 + v12;
    a1[1] = v10 + v12;
  }
  v17 = 0;
  v76 = 0;
  v74 = 0u;
  v75 = 0u;
  *(_DWORD *)v77 = 2139095039;
  *(_WORD *)&v77[4] = 0;
  v77[6] = 0;
  if (a2[2] == a2[1])
    v18 = 0;
  else
    v18 = (_BYTE *)a2[1];
  if (!v18[8])
    v17 = ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v18 + 16))(*(_QWORD *)v18) << 16) - 0x10000;
  v20 = *a3;
  v19 = (std::__shared_weak_count *)a3[1];
  v68 = *a3;
  v69 = v19;
  v21 = *a3;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v21 = *a3;
  }
  v61 = v7;
  v73 = *(_DWORD *)(v21 + 252);
  if (a2[2] == a2[1])
    v24 = 0;
  else
    v24 = (unsigned __int8 *)a2[1];
  v70 = a2;
  v71 = v24;
  v72 = v17;
  v25 = v17 >> 16;
  if (v20)
  {
    v26 = *(_DWORD *)(v21 + 252) != *(_DWORD *)(v20 + 252) || v24 == 0;
    if (!v26
      && (((int)v17 >> 16) & 0x80000000) == 0
      && (*(uint64_t (**)(_QWORD))(**(_QWORD **)v24 + 16))(*(_QWORD *)v24) > v25)
    {
      v27 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)v24 + 24))(*(_QWORD *)v24, (uint64_t)(int)v17 >> 16);
      v28 = *(_OWORD *)(v27 + 16);
      v74 = *(_OWORD *)v27;
      v75 = v28;
      v76 = *(_QWORD *)(v27 + 32);
      v29 = *(_DWORD *)(v27 + 43);
      *(_DWORD *)v77 = *(_DWORD *)(v27 + 40);
      *(_DWORD *)&v77[3] = v29;
    }
  }
  v30 = 0.0;
  v31 = (uint64_t *)(v17 >> 16);
LABEL_31:
  while (v20)
  {
    v32 = v73 != *(_DWORD *)(v20 + 252) || v24 == 0;
    if (v32
      || ((unsigned __int16)v31 & 0x8000) != 0
      || (*(uint64_t (**)(_QWORD))(**(_QWORD **)v24 + 16))(*(_QWORD *)v24) <= (unint64_t)(unsigned __int16)v31)
    {
      break;
    }
    v33 = (const md::LabelPoint *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)v24 + 24))(*(_QWORD *)v24, (__int16)v31);
    md::LabelPoint::vectorToPoint((md::LabelPoint *)&v74, v33, v64 != 0);
    v30 = sqrt(v34 * v34 + v35 * v35 + v36 * v36) + v30;
    if (v73 == *(_DWORD *)(v20 + 252)
      && (*(uint64_t (**)(_QWORD))(**(_QWORD **)v24 + 16))(*(_QWORD *)v24) > (unint64_t)(unsigned __int16)v31
      && *(unsigned __int8 *)((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)v24 + 32))(*(_QWORD *)v24, (__int16)v31)+ 2) > a4)
    {
      if (v16 >= v62)
      {
        v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v11) >> 4) + 1;
        if (v37 > 0x555555555555555)
          abort();
        v38 = v62 - v11;
        if (0x5555555555555556 * ((uint64_t)(v62 - v11) >> 4) > v37)
          v37 = 0x5555555555555556 * ((uint64_t)(v62 - v11) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62 - v11) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v39 = 0x555555555555555;
        else
          v39 = v37;
        v31 = a1;
        if (v39)
        {
          v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61 + 16))(v61, 48 * v39, 8);
          v41 = v40 + 16 * ((uint64_t)(v16 - v11) >> 4);
          v42 = v40 + 48 * v39;
          if (v40)
          {
            *(_WORD *)v41 = 260;
            *(_BYTE *)(v41 + 2) = 0;
            *(double *)(v41 + 8) = v30;
            *(double *)(v41 + 16) = v30;
            *(_QWORD *)(v41 + 24) = v72;
            *(_QWORD *)(v41 + 32) = 0xFFFFFFFFLL;
            *(_BYTE *)(v41 + 40) = 1;
          }
        }
        else
        {
          v42 = 0;
          v41 = 16 * ((uint64_t)(v16 - v11) >> 4);
        }
        v43 = v41;
        if (v16 != v11)
        {
          v44 = v41;
          do
          {
            v43 = v44 - 48;
            v45 = *(_OWORD *)(v16 - 48);
            v46 = *(_OWORD *)(v16 - 16);
            *(_OWORD *)(v44 - 32) = *(_OWORD *)(v16 - 32);
            *(_OWORD *)(v44 - 16) = v46;
            *(_OWORD *)(v44 - 48) = v45;
            v16 -= 48;
            v44 -= 48;
          }
          while (v16 != v11);
        }
        v16 = v41 + 48;
        *a1 = v43;
        a1[1] = v41 + 48;
        a1[2] = v42;
        v62 = v42;
        if (v11)
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v61 + 40))(v61, v11, v38);
        v11 = v43;
      }
      else
      {
        if (v16)
        {
          *(_WORD *)v16 = 260;
          *(_BYTE *)(v16 + 2) = 0;
          *(_BYTE *)(v16 + 7) = v67;
          *(_DWORD *)(v16 + 3) = v66;
          *(double *)(v16 + 8) = v30;
          *(double *)(v16 + 16) = v30;
          *(_QWORD *)(v16 + 24) = v72;
          *(_QWORD *)(v16 + 32) = 0xFFFFFFFFLL;
          *(_BYTE *)(v16 + 40) = 1;
          *(_DWORD *)(v16 + 44) = *(_DWORD *)&v65[3];
          *(_DWORD *)(v16 + 41) = *(_DWORD *)v65;
        }
        v16 += 48;
        v31 = a1;
      }
      v31[1] = v16;
      v24 = v71;
      LOWORD(v25) = WORD1(v72);
      LOWORD(v31) = WORD1(v72);
    }
    v47 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)v24 + 24))(*(_QWORD *)v24, (__int16)v31);
    v48 = *(_OWORD *)(v47 + 16);
    v74 = *(_OWORD *)v47;
    v75 = v48;
    v76 = *(_QWORD *)(v47 + 32);
    v49 = *(_DWORD *)(v47 + 43);
    *(_DWORD *)v77 = *(_DWORD *)(v47 + 40);
    *(_DWORD *)&v77[3] = v49;
    v20 = v68;
    if (v68)
    {
      if (v73 == *(_DWORD *)(v68 + 252))
      {
        if ((v25 & 0x8000) == 0)
        {
          LODWORD(v50) = (__int16)v72;
          v51 = (unsigned __int16)v25;
          v52 = 1;
          while (1)
          {
            v53 = v24[8];
            if (v24[8])
              v54 = v52;
            else
              v54 = -v52;
            LODWORD(v31) = v54 + v51;
            if (v54 + v51 < 0)
            {
              v55 = (_DWORD)v31 + 1;
            }
            else
            {
              if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)v24 + 16))(*(_QWORD *)v24) > (unint64_t)v31)
              {
                LOWORD(v72) = v50;
                WORD1(v72) = (_WORD)v31;
                HIDWORD(v72) = 0;
                v58 = v70[1];
                if ((__int16)v50 >= (unint64_t)((v70[2] - v58) >> 4))
                  v24 = 0;
                else
                  v24 = (unsigned __int8 *)(v58 + 16 * (__int16)v50);
                LOWORD(v25) = (_WORD)v31;
                v71 = v24;
                goto LABEL_31;
              }
              v55 = (_DWORD)v31 - (*(uint64_t (**)(_QWORD))(**(_QWORD **)v24 + 16))(*(_QWORD *)v24);
              v53 = v24[8];
            }
            if (v53)
              v52 = v55;
            else
              v52 = -v55;
            v50 = (v50 + 1);
            v56 = v70[1];
            if (v56)
              v57 = (v70[2] - v56) >> 4 > v50;
            else
              v57 = 0;
            if (!v57)
              break;
            v51 = 0;
            v24 = (unsigned __int8 *)(v56 + 16 * v50);
            if (!*(_BYTE *)(v56 + 16 * v50 + 8))
              v51 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v24 + 16))(*(_QWORD *)v24) - 1;
          }
        }
        v24 = 0;
        LOWORD(v31) = v25;
        v71 = 0;
      }
      else
      {
        v24 = 0;
        v71 = 0;
      }
    }
    else
    {
      v24 = 0;
      v71 = 0;
    }
  }
  if (v69)
  {
    v59 = (unint64_t *)&v69->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
}

void sub_19F03CCEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  if (v15)
  {
    *(_QWORD *)(a10 + 8) = v15;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a10 + 24) + 40))(*(_QWORD *)(a10 + 24), v15, *(_QWORD *)(a10 + 16) - v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::LabelLineSegmentImpl::vertexInfo(md::LabelLineSegmentImpl *this, uint64_t a2)
{
  return *((_QWORD *)this + 10) + 4 * a2;
}

{
  return *((_QWORD *)this + 10) + 4 * a2;
}

uint64_t md::FixedLabelLineSegment<2ul>::pointCount()
{
  return 2;
}

unint64_t md::LabelLine::coordinateAtOffset(md::LabelLine *this, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  char *v18;

  if (a2 <= 0.0)
  {
    v15 = 0;
    LODWORD(v16) = 0;
    LOWORD(v7) = 0;
    v18 = (char *)this + 8;
    v17 = (_BYTE *)*((_QWORD *)this + 1);
    if (*((_BYTE **)v18 + 1) == v17)
      v17 = 0;
    if (!v17[8])
    {
      LODWORD(v16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v17 + 16))(*(_QWORD *)v17);
      v15 = 0;
      LOWORD(v7) = 0;
      LODWORD(v16) = v16 + 0xFFFF;
    }
    return ((_DWORD)v16 << 16) | v15 | (unsigned __int16)v7;
  }
  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  v5 = v4 - v3;
  if (*((double *)this + 13) <= a2)
  {
    v12 = ((unint64_t)v5 >> 4) - 1;
    v13 = (_BYTE *)(v3 + 16 * v12);
    if (v12 >= (unint64_t)(v5 >> 4))
      v13 = 0;
    if (!v13[8])
      goto LABEL_16;
    goto LABEL_24;
  }
  v6 = v5 >> 4;
  if (v4 == v3)
  {
LABEL_13:
    v12 = ((unint64_t)v5 >> 4) - 1;
    v13 = (_BYTE *)(v3 + 16 * v12);
    if (v6 <= v12)
      v13 = 0;
    if (!v13[8])
    {
LABEL_16:
      v14 = 0;
LABEL_25:
      v15 = 0;
      LOWORD(v7) = v14 | v12;
      v16 = v14 >> 16;
      return ((_DWORD)v16 << 16) | v15 | (unsigned __int16)v7;
    }
LABEL_24:
    v14 = ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v13 + 16))(*(_QWORD *)v13) << 16) - 0x10000;
    goto LABEL_25;
  }
  v7 = 0;
  if (v6 <= 1)
    v8 = 1;
  else
    v8 = v5 >> 4;
  v9 = 0.0;
  v10 = *((_QWORD *)this + 1);
  while (1)
  {
    v11 = v6 <= v7 ? 0 : v10;
    if (*(double *)(*(_QWORD *)v11 + 8) + v9 >= a2)
      break;
    ++v7;
    v10 += 16;
    v9 = *(double *)(*(_QWORD *)v11 + 8) + v9;
    if (v8 == v7)
      goto LABEL_13;
  }
  v16 = md::LabelLineSegment::coordinateAtOffset(*(md::LabelLineSegment **)v11, *(unsigned __int8 *)(v11 + 8), a2 - v9);
  v15 = v16 & 0xFFFFFFFF00000000;
  return ((_DWORD)v16 << 16) | v15 | (unsigned __int16)v7;
}

uint64_t md::FixedLabelLineSegment<2ul>::labelPoint(uint64_t a1, uint64_t a2)
{
  return a1 + 48 * a2 + 48;
}

uint64_t md::FixedLabelLineSegment<3ul>::pointCount()
{
  return 3;
}

uint64_t md::FixedLabelLineSegment<3ul>::labelPoint(uint64_t a1, uint64_t a2)
{
  return a1 + 48 * a2 + 48;
}

uint64_t md::FixedLabelLineSegment<2ul>::vertexInfo(uint64_t a1, uint64_t a2)
{
  return a1 + 4 * a2 + 144;
}

{
  return a1 + 4 * a2 + 144;
}

uint64_t md::FixedLabelLineSegment<4ul>::vertexInfo(uint64_t a1, uint64_t a2)
{
  return a1 + 4 * a2 + 240;
}

{
  return a1 + 4 * a2 + 240;
}

uint64_t md::FixedLabelLineSegment<3ul>::vertexInfo(uint64_t a1, uint64_t a2)
{
  return a1 + 4 * a2 + 192;
}

{
  return a1 + 4 * a2 + 192;
}

uint64_t md::FixedLabelLineSegment<5ul>::vertexInfo(uint64_t a1, uint64_t a2)
{
  return a1 + 4 * a2 + 288;
}

{
  return a1 + 4 * a2 + 288;
}

uint64_t md::LabelLineResolvedPosition::moveOntoPathForZoom(md::LabelLineResolvedPosition *this, unsigned int a2, double a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  double v25;
  double v26;
  double v27;
  unsigned __int8 *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v33;
  int v34;
  int v35;
  unsigned __int8 *v36;
  int v37;
  int v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  long double v47;
  long double v48;
  long double v49;
  double v50;
  double v51;
  __double2 v52;
  long double v53;
  long double v54;
  long double v55;
  long double v56;
  float64x2_t v57;
  long double v58;
  long double v59;
  long double v60;
  double v61;
  double v62;
  __double2 v63;
  long double v64;
  long double v65;
  long double v66;
  long double v67;
  float64x2_t v68;
  BOOL v69;
  long double v70;
  long double v71;
  long double v72;
  double v73;
  double v74;
  __double2 v75;
  long double v76;
  long double v77;
  long double v78;
  long double v79;
  float64x2_t v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  long double v89;
  long double v90;
  double v91;
  long double v92;
  double v93;
  __double2 v94;
  double v95;
  __double2 v96;
  long double v97;
  long double v98;
  double v99;
  long double v100;
  double v101;
  __double2 v102;
  double v103;
  __double2 v104;
  long double v105;
  long double v106;
  double v107;
  long double v108;
  double v109;
  __double2 v110;
  double v111;
  __double2 v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  uint64_t v125;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *p_shared_owners;
  unint64_t v133;
  unsigned __int8 *v134;
  int v135;
  unint64_t v136;
  int v137;
  int v138;
  int v139;
  unsigned int v140;
  int v141;
  uint64_t v142;
  BOOL v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  __int128 v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  double v162;
  double v163;
  double v164;
  float64x2_t *v165;
  float64x2_t *v166;
  float64x2_t v167;
  float64x2_t v168;
  double v169;
  float64x2_t v170;
  double v171;
  long double v172;
  long double v173;
  double v174;
  long double v175;
  double v176;
  __double2 v177;
  double v178;
  __double2 v179;
  long double v180;
  long double v181;
  double v182;
  long double v183;
  double v184;
  __double2 v185;
  double v186;
  __double2 v187;
  long double v188;
  long double v189;
  double v190;
  long double v191;
  double v192;
  __double2 v193;
  double v194;
  __double2 v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  float v202;
  __int128 v203;
  double v204;
  double v205;
  double v206;
  double v207;
  long double v208;
  long double v209;
  long double v210;
  float64x2_t v211;
  float64x2_t v212;
  md::LabelPoint *v213;
  uint64_t v214;
  unsigned int v215[5];
  _BYTE v216[31];
  __int128 v217;
  _BYTE v218[28];

  v4 = *(_QWORD *)this;
  *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)this + 252);
  v217 = 0u;
  *(_OWORD *)v218 = 0u;
  *(_DWORD *)&v218[16] = -1;
  *(_QWORD *)&v218[20] = 0;
  v215[0] = a2;
  if (a2 >= 0x17)
    v5 = 23;
  else
    v5 = a2;
  v6 = atomic_load((unsigned __int8 *)(v4 + 224 + v5));
  if (v6 == 254)
  {
    if (*(_BYTE *)(v4 + 289))
      v7 = 24;
    else
      v7 = 5;
    v8 = *(unsigned __int8 **)(v4 + 128);
    v9 = *(_QWORD *)(v4 + 136) - (_QWORD)v8;
    if (v9)
    {
      v10 = 0;
      v11 = v9 / 112;
      if (v11 <= 1)
        v12 = 1;
      else
        v12 = v11;
      v6 = -1;
      v13 = 1000.0;
      while (1)
      {
        v15 = *v8;
        v8 += 112;
        v14 = v15;
        if ((_DWORD)v5 == v15)
          break;
        v16 = v5 - v14;
        if (v16 >= 0)
          v17 = v16;
        else
          v17 = -v16;
        if (v17 <= v7)
        {
          v18 = (float)v16;
          if (v16 < 0)
            v18 = (float)v16 * -0.8;
          if (v18 < v13)
            v6 = v10;
          v13 = fminf(v18, v13);
        }
        if (v12 == ++v10)
          goto LABEL_28;
      }
      v6 = v10;
    }
    else
    {
      v6 = -1;
    }
LABEL_28:
    atomic_store(v6, (unsigned __int8 *)(v4 + 224 + v5));
    if ((v6 & 0x80000000) == 0)
      goto LABEL_29;
LABEL_149:
    v157 = 0;
    v158 = (std::__shared_weak_count *)*((_QWORD *)&v217 + 1);
    if (!*((_QWORD *)&v217 + 1))
      return v157;
    goto LABEL_150;
  }
  v6 = (char)v6;
  if ((char)v6 < 0)
    goto LABEL_149;
LABEL_29:
  v19 = *(_QWORD *)(v4 + 128);
  if (!v19)
    goto LABEL_149;
  v20 = *(_QWORD *)(v19 + 112 * v6 + 88) - *(_QWORD *)(v19 + 112 * v6 + 80);
  if (!v20)
    goto LABEL_149;
  v21 = 0;
  v22 = 0;
  v213 = (md::LabelLineResolvedPosition *)((char *)this + 56);
  v214 = v20 >> 3;
  __asm { FMOV            V0.2D, #0.5 }
  v211 = _Q0;
  v212 = (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
  v25 = 2.0;
  v26 = 1.0;
  while (2)
  {
    v27 = md::LabelLineStore::lineStartForZoom((md::LabelLineStore *)&v215[1], *(unsigned __int8 **)this, v215[0], v21);
    v28 = *(unsigned __int8 **)&v216[8];
    v29 = (*(uint64_t (**)(_QWORD, _QWORD, double))(***(_QWORD ***)&v216[8] + 24))(**(_QWORD **)&v216[8], *(__int16 *)&v216[18], v27);
    v30 = *(_QWORD *)&v215[1];
    if (!*(_QWORD *)&v215[1])
      goto LABEL_133;
    do
    {
      v31 = *(_DWORD *)&v216[24];
      _ZF = *(_DWORD *)&v216[24] != *(_DWORD *)(v30 + 252) || v28 == 0;
      if (_ZF || *(__int16 *)&v216[18] < 0)
        break;
      v33 = v29;
      v34 = *(unsigned __int16 *)&v216[18];
      LODWORD(v29) = *(__int16 *)&v216[16];
      v35 = 1;
      v36 = v28;
      while (1)
      {
        v37 = v36[8];
        v38 = v36[8] ? v35 : -v35;
        v39 = (v38 + v34);
        if (v38 + v34 >= 0)
          break;
        v40 = v39 + 1;
LABEL_47:
        if (v37)
          v35 = v40;
        else
          v35 = -v40;
        v29 = (v29 + 1);
        v41 = *(_QWORD *)(*(_QWORD *)v216 + 8);
        if (v41)
          v42 = (*(_QWORD *)(*(_QWORD *)v216 + 16) - v41) >> 4 > v29;
        else
          v42 = 0;
        if (!v42)
          goto LABEL_133;
        v34 = 0;
        v36 = (unsigned __int8 *)(v41 + 16 * v29);
        if (!*(_BYTE *)(v41 + 16 * v29 + 8))
          v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v36 + 16))(*(_QWORD *)v36) - 1;
      }
      if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)v36 + 16))(*(_QWORD *)v36) <= v39)
      {
        v40 = v39 - (*(uint64_t (**)(_QWORD))(**(_QWORD **)v36 + 16))(*(_QWORD *)v36);
        v37 = v36[8];
        goto LABEL_47;
      }
      v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v216 + 8) + 16 * (__int16)v29);
      v29 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v43 + 24))(v43, (__int16)v39);
      if (!*(_BYTE *)(*(_QWORD *)this + 290))
      {
        if (!*((_BYTE *)this + 101) && *((_BYTE *)this + 102))
        {
          v47 = *((double *)this + 7);
          v48 = *((double *)this + 8);
          v49 = *((double *)this + 9);
          v50 = sqrt(v47 * v47 + v48 * v48);
          v51 = atan2(v49, v50 * 0.996647189);
          v208 = atan2(v48, v47);
          v52 = __sincos_stret(v51);
          v53 = v50 + v52.__cosval * v52.__cosval * -42697.6727 * v52.__cosval;
          v25 = 2.0;
          v54 = atan2(v49 + v52.__sinval * v52.__sinval * 42841.3115 * v52.__sinval, v53);
          v55 = tan(v54 * 0.5 + 0.785398163);
          v56 = log(v55);
          v57.f64[0] = v208;
          v57.f64[1] = v56;
          *((float64x2_t *)this + 5) = vmlaq_f64(v211, v212, v57);
          *((_BYTE *)this + 101) = 1;
        }
        if (!*(_BYTE *)(v33 + 45) && *(_BYTE *)(v33 + 46))
        {
          v58 = *(double *)v33;
          v59 = *(double *)(v33 + 8);
          v60 = *(double *)(v33 + 16);
          v61 = sqrt(v58 * v58 + v59 * v59);
          v62 = atan2(v60, v61 * 0.996647189);
          v209 = atan2(v59, v58);
          v63 = __sincos_stret(v62);
          v64 = v61 + v63.__cosval * v63.__cosval * -42697.6727 * v63.__cosval;
          v25 = 2.0;
          v65 = atan2(v60 + v63.__sinval * v63.__sinval * 42841.3115 * v63.__sinval, v64);
          v66 = tan(v65 * 0.5 + 0.785398163);
          v67 = log(v66);
          v68.f64[0] = v209;
          v68.f64[1] = v67;
          *(float64x2_t *)(v33 + 24) = vmlaq_f64(v211, v212, v68);
          *(_BYTE *)(v33 + 45) = 1;
        }
        if (*(_BYTE *)(v29 + 45))
          v69 = 1;
        else
          v69 = *(_BYTE *)(v29 + 46) == 0;
        if (!v69)
        {
          v70 = *(double *)v29;
          v71 = *(double *)(v29 + 8);
          v72 = *(double *)(v29 + 16);
          v73 = sqrt(v70 * v70 + v71 * v71);
          v74 = atan2(v72, v73 * 0.996647189);
          v210 = atan2(v71, v70);
          v75 = __sincos_stret(v74);
          v76 = v73 + v75.__cosval * v75.__cosval * -42697.6727 * v75.__cosval;
          v25 = 2.0;
          v77 = atan2(v72 + v75.__sinval * v75.__sinval * 42841.3115 * v75.__sinval, v76);
          v78 = tan(v77 * 0.5 + 0.785398163);
          v79 = log(v78);
          v80.f64[0] = v210;
          v80.f64[1] = v79;
          *(float64x2_t *)(v29 + 24) = vmlaq_f64(v211, v212, v80);
          *(_BYTE *)(v29 + 45) = 1;
        }
        v82 = *(double *)(v33 + 24);
        v81 = *(double *)(v33 + 32);
        v83 = *(double *)(v29 + 24) - v82;
        v84 = *(double *)(v29 + 32) - v81;
        v85 = v83 * v83 + v84 * v84;
        v86 = *((double *)this + 10);
        v87 = *((double *)this + 11);
        if (v85 <= 1.0e-15)
          v88 = 0.0;
        else
          v88 = fmin(fmax(((v86 - v82) * v83 + (v87 - v81) * v84) / v85, 0.0), 1.0);
        v124 = (v86 - (v82 + v88 * v83)) * (v86 - (v82 + v88 * v83))
             + (v87 - (v81 + v88 * v84)) * (v87 - (v81 + v88 * v84));
        if (v124 < 1.0)
          goto LABEL_82;
LABEL_105:
        v124 = v26;
        v125 = v22;
        if (v30)
          goto LABEL_106;
LABEL_127:
        v28 = 0;
        goto LABEL_128;
      }
      if (*((_BYTE *)this + 100))
      {
        if (*(_BYTE *)(v33 + 44))
          goto LABEL_60;
LABEL_76:
        v97 = *(double *)(v33 + 24) * 6.28318531;
        v98 = exp(*(double *)(v33 + 32) * 6.28318531 + -3.14159265);
        v99 = atan(v98) * v25 + -1.57079633;
        v100 = fmod(v97, 6.28318531);
        v101 = fmod(v100 + 6.28318531, 6.28318531) + -3.14159265;
        v102 = __sincos_stret(v99);
        v103 = 6378137.0 / sqrt(v102.__sinval * v102.__sinval * -0.00669437999 + 1.0);
        v104 = __sincos_stret(v101);
        *(double *)v33 = v103 * v102.__cosval * v104.__cosval;
        *(double *)(v33 + 8) = v103 * v102.__cosval * v104.__sinval;
        *(double *)(v33 + 16) = v102.__sinval * 0.99330562 * v103;
        *(_BYTE *)(v33 + 44) = 1;
        if (!*(_BYTE *)(v29 + 44))
          goto LABEL_77;
LABEL_61:
        v44 = *(double *)v29;
        v45 = *(double *)(v29 + 8);
        v46 = *(double *)(v29 + 16);
      }
      else
      {
        v89 = *((double *)this + 10) * 6.28318531;
        v90 = exp(*((double *)this + 11) * 6.28318531 + -3.14159265);
        v91 = atan(v90) * v25 + -1.57079633;
        v92 = fmod(v89, 6.28318531);
        v93 = fmod(v92 + 6.28318531, 6.28318531) + -3.14159265;
        v94 = __sincos_stret(v91);
        v95 = 6378137.0 / sqrt(v94.__sinval * v94.__sinval * -0.00669437999 + 1.0);
        v96 = __sincos_stret(v93);
        *((double *)this + 7) = v95 * v94.__cosval * v96.__cosval;
        *((double *)this + 8) = v95 * v94.__cosval * v96.__sinval;
        *((double *)this + 9) = v94.__sinval * 0.99330562 * v95;
        *((_BYTE *)this + 100) = 1;
        if (!*(_BYTE *)(v33 + 44))
          goto LABEL_76;
LABEL_60:
        if (*(_BYTE *)(v29 + 44))
          goto LABEL_61;
LABEL_77:
        v105 = *(double *)(v29 + 24) * 6.28318531;
        v106 = exp(*(double *)(v29 + 32) * 6.28318531 + -3.14159265);
        v107 = atan(v106) * v25 + -1.57079633;
        v108 = fmod(v105, 6.28318531);
        v109 = fmod(v108 + 6.28318531, 6.28318531) + -3.14159265;
        v110 = __sincos_stret(v107);
        v111 = 6378137.0 / sqrt(v110.__sinval * v110.__sinval * -0.00669437999 + 1.0);
        v112 = __sincos_stret(v109);
        v44 = v111 * v110.__cosval * v112.__cosval;
        v45 = v111 * v110.__cosval * v112.__sinval;
        *(double *)v29 = v44;
        *(double *)(v29 + 8) = v45;
        v46 = v110.__sinval * 0.99330562 * v111;
        *(double *)(v29 + 16) = v46;
        *(_BYTE *)(v29 + 44) = 1;
      }
      v113 = *(double *)v33;
      v114 = *(double *)(v33 + 8);
      v115 = v44 - *(double *)v33;
      v116 = v45 - v114;
      v117 = *(double *)(v33 + 16);
      v118 = v46 - v117;
      v119 = v115 * v115 + v116 * v116 + v118 * v118;
      v120 = *(double *)v213;
      v121 = *((double *)this + 8);
      v122 = *((double *)this + 9);
      if (v119 <= 1.0e-15)
        v123 = 0.0;
      else
        v123 = fmin(fmax(((v120 - v113) * v115 + (v121 - v114) * v116 + (v122 - v117) * v118) / v119, 0.0), 1.0);
      v124 = (v120 - (v113 + v123 * v115)) * (v120 - (v113 + v123 * v115))
           + (v121 - (v114 + v123 * v116)) * (v121 - (v114 + v123 * v116))
           + (v122 - (v117 + v123 * v118)) * (v122 - (v117 + v123 * v118));
      if (v124 >= 1.0)
        goto LABEL_105;
LABEL_82:
      if (v31 == *(_DWORD *)(v30 + 252))
        v125 = *(unsigned __int8 *)(*(_QWORD *)v28 + 34);
      else
        v125 = 0;
      if (((_DWORD)v22 != (_DWORD)v125 || v124 >= v26) && v22 >= v125)
      {
        v125 = v22;
        v124 = v26;
      }
      else
      {
        v128 = *(_QWORD *)&v215[3];
        if (*(_QWORD *)&v215[3])
        {
          v129 = (unint64_t *)(*(_QWORD *)&v215[3] + 8);
          do
            v130 = __ldxr(v129);
          while (__stxr(v130 + 1, v129));
        }
        v131 = (std::__shared_weak_count *)*((_QWORD *)&v217 + 1);
        *(_QWORD *)&v217 = v30;
        *((_QWORD *)&v217 + 1) = v128;
        if (v131)
        {
          p_shared_owners = (unint64_t *)&v131->__shared_owners_;
          do
            v133 = __ldaxr(p_shared_owners);
          while (__stlxr(v133 - 1, p_shared_owners));
          if (!v133)
          {
            ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
            std::__shared_weak_count::__release_weak(v131);
          }
        }
        *(_OWORD *)v218 = *(_OWORD *)v216;
        *(_OWORD *)&v218[12] = *(_OWORD *)&v216[12];
        v30 = *(_QWORD *)&v215[1];
        if (!*(_QWORD *)&v215[1])
          goto LABEL_127;
      }
LABEL_106:
      if (*(_DWORD *)&v216[24] != *(_DWORD *)(v30 + 252))
        goto LABEL_127;
      v134 = *(unsigned __int8 **)&v216[8];
      if (!*(_QWORD *)&v216[8] || *(__int16 *)&v216[18] < 0)
        goto LABEL_127;
      v135 = *(unsigned __int16 *)&v216[18];
      LODWORD(v136) = *(__int16 *)&v216[16];
      v137 = 1;
      while (2)
      {
        v138 = v134[8];
        if (v134[8])
          v139 = v137;
        else
          v139 = -v137;
        v140 = v139 + v135;
        if (v139 + v135 < 0)
        {
          v141 = v140 + 1;
          goto LABEL_117;
        }
        if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)v134 + 16))(*(_QWORD *)v134) <= (unint64_t)v140)
        {
          v141 = v140 - (*(uint64_t (**)(_QWORD))(**(_QWORD **)v134 + 16))(*(_QWORD *)v134);
          v138 = v134[8];
LABEL_117:
          if (v138)
            v137 = v141;
          else
            v137 = -v141;
          v136 = (v136 + 1);
          v142 = *(_QWORD *)(*(_QWORD *)v216 + 8);
          if (v142)
            v143 = (*(_QWORD *)(*(_QWORD *)v216 + 16) - v142) >> 4 > v136;
          else
            v143 = 0;
          if (!v143)
            goto LABEL_127;
          v135 = 0;
          v134 = (unsigned __int8 *)(v142 + 16 * v136);
          if (!*(_BYTE *)(v142 + 16 * v136 + 8))
            v135 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v134 + 16))(*(_QWORD *)v134) - 1;
          continue;
        }
        break;
      }
      *(_WORD *)&v216[16] = v136;
      *(_WORD *)&v216[18] = v140;
      *(_DWORD *)&v216[20] = 0;
      v144 = *(_QWORD *)(*(_QWORD *)v216 + 8);
      if ((__int16)v136 >= (unint64_t)((*(_QWORD *)(*(_QWORD *)v216 + 16) - v144) >> 4))
        v28 = 0;
      else
        v28 = (unsigned __int8 *)(v144 + 16 * (__int16)v136);
LABEL_128:
      *(_QWORD *)&v216[8] = v28;
      v26 = v124;
      v22 = v125;
    }
    while (v30);
LABEL_133:
    v145 = *(std::__shared_weak_count **)&v215[3];
    if (*(_QWORD *)&v215[3])
    {
      v146 = (unint64_t *)(*(_QWORD *)&v215[3] + 8);
      do
        v147 = __ldaxr(v146);
      while (__stlxr(v147 - 1, v146));
      if (!v147)
      {
        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
        std::__shared_weak_count::__release_weak(v145);
      }
    }
    if (++v21 != v214)
      continue;
    break;
  }
  if (v26 == 1.0)
    goto LABEL_149;
  v148 = v217;
  if (*((_QWORD *)&v217 + 1))
  {
    v149 = (unint64_t *)(*((_QWORD *)&v217 + 1) + 8);
    do
      v150 = __ldxr(v149);
    while (__stxr(v150 + 1, v149));
  }
  v151 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  *(_OWORD *)this = v148;
  if (v151)
  {
    v152 = (unint64_t *)&v151->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  *(_OWORD *)((char *)this + 28) = *(_OWORD *)&v218[12];
  *((_OWORD *)this + 1) = *(_OWORD *)v218;
  v154 = (*(uint64_t (**)(_QWORD, _QWORD))(***((_QWORD ***)this + 3) + 24))(**((_QWORD **)this + 3), *((__int16 *)this + 17));
  v215[1] = -1;
  if (md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this, 1, (uint64_t)&v215[1]))
  {
    v155 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 16 * SLOWORD(v215[1]));
    v156 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v155 + 24))(v155, SHIWORD(v215[1]));
  }
  else
  {
    v156 = 0;
  }
  if (*(_BYTE *)(*(_QWORD *)this + 290))
  {
    if (*((_BYTE *)this + 100))
    {
      if (*(_BYTE *)(v154 + 44))
        goto LABEL_159;
LABEL_164:
      v180 = *(double *)(v154 + 24) * 6.28318531;
      v181 = exp(*(double *)(v154 + 32) * 6.28318531 + -3.14159265);
      v182 = atan(v181) * 2.0 + -1.57079633;
      v183 = fmod(v180, 6.28318531);
      v184 = fmod(v183 + 6.28318531, 6.28318531) + -3.14159265;
      v185 = __sincos_stret(v182);
      v186 = 6378137.0 / sqrt(v185.__sinval * v185.__sinval * -0.00669437999 + 1.0);
      v187 = __sincos_stret(v184);
      *(double *)v154 = v186 * v185.__cosval * v187.__cosval;
      *(double *)(v154 + 8) = v186 * v185.__cosval * v187.__sinval;
      *(double *)(v154 + 16) = v185.__sinval * 0.99330562 * v186;
      *(_BYTE *)(v154 + 44) = 1;
      if (!*(_BYTE *)(v156 + 44))
        goto LABEL_165;
LABEL_160:
      v163 = *(double *)v156;
      v162 = *(double *)(v156 + 8);
      v164 = *(double *)(v156 + 16);
    }
    else
    {
      v172 = *((double *)this + 10) * 6.28318531;
      v173 = exp(*((double *)this + 11) * 6.28318531 + -3.14159265);
      v174 = atan(v173) * 2.0 + -1.57079633;
      v175 = fmod(v172, 6.28318531);
      v176 = fmod(v175 + 6.28318531, 6.28318531) + -3.14159265;
      v177 = __sincos_stret(v174);
      v178 = 6378137.0 / sqrt(v177.__sinval * v177.__sinval * -0.00669437999 + 1.0);
      v179 = __sincos_stret(v176);
      *((double *)this + 7) = v178 * v177.__cosval * v179.__cosval;
      *((double *)this + 8) = v178 * v177.__cosval * v179.__sinval;
      *((double *)this + 9) = v177.__sinval * 0.99330562 * v178;
      *((_BYTE *)this + 100) = 1;
      if (!*(_BYTE *)(v154 + 44))
        goto LABEL_164;
LABEL_159:
      if (*(_BYTE *)(v156 + 44))
        goto LABEL_160;
LABEL_165:
      v188 = *(double *)(v156 + 24) * 6.28318531;
      v189 = exp(*(double *)(v156 + 32) * 6.28318531 + -3.14159265);
      v190 = atan(v189) * 2.0 + -1.57079633;
      v191 = fmod(v188, 6.28318531);
      v192 = fmod(v191 + 6.28318531, 6.28318531) + -3.14159265;
      v193 = __sincos_stret(v190);
      v194 = 6378137.0 / sqrt(v193.__sinval * v193.__sinval * -0.00669437999 + 1.0);
      v195 = __sincos_stret(v192);
      v163 = v194 * v193.__cosval * v195.__cosval;
      v162 = v194 * v193.__cosval * v195.__sinval;
      v164 = v193.__sinval * 0.99330562 * v194;
      *(double *)v156 = v163;
      *(double *)(v156 + 8) = v162;
      *(double *)(v156 + 16) = v164;
      *(_BYTE *)(v156 + 44) = 1;
    }
    v196 = *(double *)(v154 + 8);
    v197 = v163 - *(double *)v154;
    v198 = v162 - v196;
    v199 = *(double *)(v154 + 16);
    v200 = v164 - v199;
    v201 = v197 * v197 + v198 * v198 + v200 * v200;
    v169 = 0.0;
    if (v201 > 1.0e-15)
    {
      v171 = fmax(((*((double *)this + 7) - *(double *)v154) * v197+ (*((double *)this + 8) - v196) * v198+ (*((double *)this + 9) - v199) * v200)/ v201, 0.0);
LABEL_168:
      v169 = fmin(v171, 1.0);
    }
  }
  else
  {
    v165 = (float64x2_t *)md::LabelPoint::mercatorPoint(v213);
    v166 = (float64x2_t *)md::LabelPoint::mercatorPoint((md::LabelPoint *)v154);
    v167 = vsubq_f64(*(float64x2_t *)md::LabelPoint::mercatorPoint((md::LabelPoint *)v156), *v166);
    v168 = vmulq_f64(v167, v167);
    v169 = 0.0;
    if (vaddvq_f64(v168) > 1.0e-15)
    {
      v170 = vmulq_f64(vsubq_f64(*v165, *v166), v167);
      v171 = fmax(vdivq_f64(vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v170, 1), v170), vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v168, 1), v168)).f64[0], 0.0);
      goto LABEL_168;
    }
  }
  v202 = v169;
  md::LabelPoint::lerped((md::LabelPoint *)&v215[1], (const md::LabelPoint *)v154, v202, v156);
  v203 = *(_OWORD *)v216;
  *(_OWORD *)((char *)this + 104) = *(_OWORD *)&v215[1];
  *(_OWORD *)((char *)this + 120) = v203;
  *((_QWORD *)this + 17) = *(_QWORD *)&v216[16];
  *((_DWORD *)this + 36) = *(_DWORD *)&v216[24];
  *(_DWORD *)((char *)this + 147) = *(_DWORD *)&v216[27];
  *((float *)this + 9) = v202;
  md::LabelPoint::vectorToPoint((md::LabelPoint *)v154, (const md::LabelPoint *)v156, *(unsigned __int8 *)(*(_QWORD *)this + 290));
  v207 = 1.0 / sqrt(v204 * v204 + v205 * v205 + v206 * v206);
  *(float *)&v204 = v207 * v204;
  *(float *)&v205 = v207 * v205;
  *(float *)&v206 = v207 * v206;
  *((_BYTE *)this + 165) = (float)((float)((float)(*((float *)this + 38) * *(float *)&v204)
                                         + (float)(*((float *)this + 39) * *(float *)&v205))
                                 + (float)(*((float *)this + 40) * *(float *)&v206)) < 0.0;
  *((_BYTE *)this + 164) = v215[0];
  v157 = 1;
  v158 = (std::__shared_weak_count *)*((_QWORD *)&v217 + 1);
  if (*((_QWORD *)&v217 + 1))
  {
LABEL_150:
    v159 = (unint64_t *)&v158->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  return v157;
}

void sub_19F03DED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void md::LabelPoint::vectorToPoint(md::LabelPoint *this, const md::LabelPoint *a2, int a3)
{
  long double v5;
  long double v6;
  double v7;
  long double v8;
  double v9;
  __double2 v10;
  double v11;
  __double2 v12;
  long double v13;
  long double v14;
  double v15;
  long double v16;
  double v17;
  __double2 v18;
  double v19;
  __double2 v20;

  if (!a3)
  {
    md::LabelPoint::mercatorPoint(a2);
    md::LabelPoint::mercatorPoint(this);
    return;
  }
  if (*((_BYTE *)a2 + 44))
  {
    if (*((_BYTE *)this + 44))
      return;
LABEL_7:
    v13 = *((double *)this + 3) * 6.28318531;
    v14 = exp(*((double *)this + 4) * 6.28318531 + -3.14159265);
    v15 = atan(v14) * 2.0 + -1.57079633;
    v16 = fmod(v13, 6.28318531);
    v17 = fmod(v16 + 6.28318531, 6.28318531) + -3.14159265;
    v18 = __sincos_stret(v15);
    v19 = 6378137.0 / sqrt(v18.__sinval * v18.__sinval * -0.00669437999 + 1.0);
    v20 = __sincos_stret(v17);
    *(double *)this = v19 * v18.__cosval * v20.__cosval;
    *((double *)this + 1) = v19 * v18.__cosval * v20.__sinval;
    *((double *)this + 2) = v18.__sinval * 0.99330562 * v19;
    *((_BYTE *)this + 44) = 1;
    return;
  }
  v5 = *((double *)a2 + 3) * 6.28318531;
  v6 = exp(*((double *)a2 + 4) * 6.28318531 + -3.14159265);
  v7 = atan(v6) * 2.0 + -1.57079633;
  v8 = fmod(v5, 6.28318531);
  v9 = fmod(v8 + 6.28318531, 6.28318531) + -3.14159265;
  v10 = __sincos_stret(v7);
  v11 = 6378137.0 / sqrt(v10.__sinval * v10.__sinval * -0.00669437999 + 1.0);
  v12 = __sincos_stret(v9);
  *(double *)a2 = v11 * v10.__cosval * v12.__cosval;
  *((double *)a2 + 1) = v11 * v10.__cosval * v12.__sinval;
  *((double *)a2 + 2) = v10.__sinval * 0.99330562 * v11;
  *((_BYTE *)a2 + 44) = 1;
  if (!*((_BYTE *)this + 44))
    goto LABEL_7;
}

uint64_t md::LabelPoint::mercatorPoint(md::LabelPoint *this)
{
  long double v2;
  long double v3;
  long double v4;
  double v5;
  double v6;
  __double2 v7;
  long double v8;
  long double v9;
  long double v10;
  float64x2_t v11;
  long double v18;

  if (!*((_BYTE *)this + 45) && *((_BYTE *)this + 46))
  {
    v2 = *(double *)this;
    v3 = *((double *)this + 1);
    v4 = *((double *)this + 2);
    v5 = sqrt(v2 * v2 + v3 * v3);
    v6 = atan2(v4, v5 * 0.996647189);
    v18 = atan2(v3, v2);
    v7 = __sincos_stret(v6);
    v8 = atan2(v4 + v7.__sinval * v7.__sinval * 42841.3115 * v7.__sinval, v5 + v7.__cosval * v7.__cosval * -42697.6727 * v7.__cosval);
    v9 = tan(v8 * 0.5 + 0.785398163);
    v10 = log(v9);
    v11.f64[0] = v18;
    v11.f64[1] = v10;
    __asm { FMOV            V1.2D, #0.5 }
    *(float64x2_t *)((char *)this + 24) = vmlaq_f64(_Q1, (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL), v11);
    *((_BYTE *)this + 45) = 1;
  }
  return (uint64_t)this + 24;
}

unint64_t md::LabelLineSegmentImpl::pointCount(md::LabelLineSegmentImpl *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 4);
}

uint64_t md::FixedLabelLineSegment<4ul>::pointCount()
{
  return 4;
}

uint64_t md::FixedLabelLineSegment<5ul>::pointCount()
{
  return 5;
}

unint64_t md::LabelLineSegment::coordinateAtOffset(md::LabelLineSegment *this, int a2, double a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  md::LabelPoint *v11;
  double v12;
  unint64_t v13;
  const md::LabelPoint *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  unint64_t v19;
  double v20;
  unint64_t v21;
  const md::LabelPoint *v22;
  double v23;
  double v24;
  double v25;
  __int16 v26;
  unsigned int v27;

  v3 = *((unsigned __int16 *)this + 23);
  if (v3 < 2)
  {
    LOWORD(v7) = 0;
    v19 = 0;
  }
  else
  {
    v7 = (v3 - 1);
    if (a2)
      v8 = 0;
    else
      v8 = (v3 - 1);
    v9 = (*(uint64_t (**)(md::LabelLineSegment *, uint64_t))(*(_QWORD *)this + 24))(this, v8);
    LODWORD(v10) = *((unsigned __int16 *)this + 23);
    if (v10 < 2)
    {
LABEL_15:
      v26 = v10 - 1;
      if (a2)
        LOWORD(v7) = v26;
      else
        LOWORD(v7) = 0;
      v19 = 0;
    }
    else
    {
      v11 = (md::LabelPoint *)v9;
      if ((a2 & 1) != 0)
      {
        v12 = 0.0;
        v13 = 1;
        while (1)
        {
          v14 = (const md::LabelPoint *)(*(uint64_t (**)(md::LabelLineSegment *, unint64_t))(*(_QWORD *)this + 24))(this, v13);
          md::LabelPoint::vectorToPoint(v11, v14, *((unsigned __int8 *)this + 33));
          v18 = sqrt(v15 * v15 + v16 * v16 + v17 * v17);
          if (v18 + v12 >= a3)
            break;
          ++v13;
          v10 = *((unsigned __int16 *)this + 23);
          v12 = v18 + v12;
          v11 = v14;
          if (v13 >= v10)
            goto LABEL_15;
        }
        LOWORD(v7) = v13 - 1;
      }
      else
      {
        v20 = 0.0;
        v21 = 1;
        while (1)
        {
          v12 = v20;
          v22 = (const md::LabelPoint *)(*(uint64_t (**)(md::LabelLineSegment *, uint64_t))(*(_QWORD *)this + 24))(this, v7 - 1);
          md::LabelPoint::vectorToPoint(v11, v22, *((unsigned __int8 *)this + 33));
          v18 = sqrt(v23 * v23 + v24 * v24 + v25 * v25);
          v20 = v18 + v12;
          if (v18 + v12 >= a3)
            break;
          ++v21;
          v10 = *((unsigned __int16 *)this + 23);
          --v7;
          v11 = v22;
          if (v21 >= v10)
            goto LABEL_15;
        }
      }
      *(float *)&v27 = (a3 - v12) / v18;
      v19 = (unint64_t)v27 << 32;
    }
  }
  return v19 | (unsigned __int16)v7;
}

uint64_t md::LabelLineSegmentImpl::labelPoint(md::LabelLineSegmentImpl *this, uint64_t a2)
{
  return *((_QWORD *)this + 6) + 48 * a2;
}

uint64_t md::FixedLabelLineSegment<4ul>::labelPoint(uint64_t a1, uint64_t a2)
{
  return a1 + 48 * a2 + 48;
}

uint64_t md::FixedLabelLineSegment<5ul>::labelPoint(uint64_t a1, uint64_t a2)
{
  return a1 + 48 * a2 + 48;
}

double md::LabelLineStore::lineStartForZoom(md::LabelLineStore *this, unsigned __int8 *a2, unsigned int a3, unint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  double result;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _Unwind_Exception *v34;
  _Unwind_Exception *v35;
  _QWORD v36[2];

  if (a3 >= 0x17)
    v6 = 23;
  else
    v6 = a3;
  v7 = atomic_load(&a2[v6 + 224]);
  if (v7 == 254)
  {
    if (a2[289])
      v8 = 24;
    else
      v8 = 5;
    v9 = (unsigned __int8 *)*((_QWORD *)a2 + 16);
    v10 = *((_QWORD *)a2 + 17) - (_QWORD)v9;
    if (v10)
    {
      v11 = 0;
      v12 = v10 / 112;
      if (v12 <= 1)
        v13 = 1;
      else
        v13 = v12;
      v7 = -1;
      v14 = 1000.0;
      while (1)
      {
        v16 = *v9;
        v9 += 112;
        v15 = v16;
        if ((_DWORD)v6 == v16)
          break;
        v17 = v6 - v15;
        if (v17 >= 0)
          v18 = v17;
        else
          v18 = -v17;
        if (v18 <= v8)
        {
          v19 = (float)v17;
          if (v17 < 0)
            v19 = (float)v17 * -0.8;
          if (v19 < v14)
            v7 = v11;
          v14 = fminf(v19, v14);
        }
        if (v13 == ++v11)
          goto LABEL_28;
      }
      v7 = v11;
    }
    else
    {
      v7 = -1;
    }
LABEL_28:
    atomic_store(v7, &a2[v6 + 224]);
    if ((v7 & 0x80000000) != 0)
      goto LABEL_46;
  }
  else
  {
    v7 = (char)v7;
    if ((char)v7 < 0)
      goto LABEL_46;
  }
  v20 = *((_QWORD *)a2 + 16) + 112 * v7;
  v21 = *(_QWORD *)(v20 + 80);
  if (a4 >= (*(_QWORD *)(v20 + 88) - v21) >> 3)
  {
LABEL_46:
    result = 0.0;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
    *((_DWORD *)this + 8) = -1;
    return result;
  }
  v23 = *(_QWORD *)a2;
  v22 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
  v36[0] = *(_QWORD *)a2;
  if (!v22 || (v24 = std::__shared_weak_count::lock(v22), (v36[1] = v24) == 0))
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
    v35 = v34;
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)v36);
    _Unwind_Resume(v35);
  }
  v26 = v24;
  v27 = 0;
  v28 = *(_QWORD *)(v21 + 8 * a4);
  if (*(_QWORD *)(v28 + 16) == *(_QWORD *)(v28 + 8))
    v29 = 0;
  else
    v29 = *(_BYTE **)(v28 + 8);
  if (!v29[8])
    v27 = ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v29 + 16))(*(_QWORD *)v29) << 16) - 0x10000;
  *(_QWORD *)this = v23;
  *((_QWORD *)this + 1) = v26;
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  do
    v31 = __ldxr(p_shared_owners);
  while (__stxr(v31 + 1, p_shared_owners));
  *((_QWORD *)this + 4) = v27;
  *((_DWORD *)this + 10) = *(_DWORD *)(v23 + 252);
  if (*(_QWORD *)(v28 + 16) == *(_QWORD *)(v28 + 8))
    v32 = 0;
  else
    v32 = *(_QWORD *)(v28 + 8);
  *((_QWORD *)this + 2) = v28;
  *((_QWORD *)this + 3) = v32;
  do
    v33 = __ldaxr(p_shared_owners);
  while (__stlxr(v33 - 1, p_shared_owners));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  return result;
}

double md::Anchor::coordinate@<D0>(md::Anchor *this@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 40);
  result = *((double *)this + 7);
  *(double *)(a2 + 16) = result;
  return result;
}

uint64_t md::MercatorTerrainAnchor::isMercator(md::MercatorTerrainAnchor *this)
{
  return 1;
}

unsigned __int16 *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(unsigned __int16 *result, unsigned int a2, unsigned int a3, int a4, _BYTE *a5)
{
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int16 **v29;
  unint64_t v30;
  unsigned __int16 *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  unsigned __int16 *v44;
  unint64_t v45;
  unint64_t v46;
  unsigned __int16 *v47;
  unsigned __int16 *v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned __int16 *v55;
  uint64_t v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  unint64_t v59;
  unint64_t v60;
  unsigned __int16 *v61;
  unsigned __int16 *v62;
  unsigned int v63;
  unsigned __int16 *v64;
  unint64_t v65;
  unint64_t v66;
  unsigned __int16 *v67;
  unsigned __int16 *v68;
  unsigned int v69;
  uint64_t v70;

  v5 = *(_QWORD *)&result[8 * a4 + 8];
  if (!v5)
    goto LABEL_69;
  v6 = &result[8 * a4];
  v7 = v6[28];
  if (!v6[28])
  {
LABEL_33:
    v25 = *(uint64_t **)(v5 + 72);
    if (v25)
    {
      if (a3 >= 0x17)
        v26 = 23;
      else
        v26 = a3;
      v27 = *((unsigned __int8 *)v25 + v26 + 16);
      v28 = *v25;
      v29 = (unsigned __int16 **)(v28 + 80 * v27);
      v30 = *((unsigned __int16 *)v29 + 5);
      if (*((_WORD *)v29 + 5))
      {
        v31 = *v29;
        if (*((_BYTE *)v29 + 15))
        {
          if (v30 >= 0x1E)
          {
            v44 = *v29;
            v45 = v30;
            do
            {
              v46 = v45 >> 1;
              v47 = &v44[v45 >> 1];
              v49 = *v47;
              v48 = v47 + 1;
              v45 += ~(v45 >> 1);
              if (v49 < a2)
                v44 = v48;
              else
                v45 = v46;
            }
            while (v45);
            if (v44 == &v31[v30] || *v44 != a2)
              goto LABEL_69;
            v41 = (unint64_t)((char *)v44 - (char *)v31) >> 1;
          }
          else
          {
            v32 = 0;
            while (1)
            {
              v33 = v31[v32];
              if (v33 >= a2)
                break;
              if (v30 == ++v32)
                goto LABEL_69;
            }
            if (v33 == a2)
              LOWORD(v41) = v32;
            else
              LOWORD(v41) = v30;
          }
        }
        else
        {
          v42 = 2 * v30;
          v43 = *v29;
          while (*v43 != a2)
          {
            ++v43;
            v42 -= 2;
            if (!v42)
            {
              v43 = &v31[v30];
              break;
            }
          }
          v41 = (unint64_t)((char *)v43 - (char *)v31) >> 1;
        }
      }
      else
      {
        LOWORD(v41) = 0;
      }
      if ((_DWORD)v30 != (unsigned __int16)v41)
      {
        v50 = v28 + 80 * v27;
        v51 = *(unsigned __int16 *)(v50 + 26);
        if (!*(_WORD *)(v50 + 26))
          return (unsigned __int16 *)&gss::PropertySetValueHelper<gss::PropertyID,BOOL>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        v52 = v28 + 80 * v27;
        v38 = *(_QWORD *)(v52 + 16);
        if (*(_BYTE *)(v52 + 31))
        {
          if (v51 >= 0x1E)
          {
            v64 = *(unsigned __int16 **)(v52 + 16);
            v65 = v51;
            do
            {
              v66 = v65 >> 1;
              v67 = &v64[v65 >> 1];
              v69 = *v67;
              v68 = v67 + 1;
              v65 += ~(v65 >> 1);
              if (v69 < a2)
                v64 = v68;
              else
                v65 = v66;
            }
            while (v65);
            if (v64 == (unsigned __int16 *)(v38 + 2 * v51) || *v64 != a2)
              return (unsigned __int16 *)&gss::PropertySetValueHelper<gss::PropertyID,BOOL>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
            v39 = ((unint64_t)v64 - v38) >> 1;
          }
          else
          {
            v39 = 0;
            result = (unsigned __int16 *)&gss::PropertySetValueHelper<gss::PropertyID,BOOL>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
            while (1)
            {
              v53 = *(unsigned __int16 *)(v38 + 2 * v39);
              if (v53 >= a2)
                break;
              if (v51 == ++v39)
                return result;
            }
            if (v53 != a2)
              LOWORD(v39) = v51;
          }
        }
        else
        {
          v56 = 2 * v51;
          v57 = *(unsigned __int16 **)(v52 + 16);
          while (*v57 != a2)
          {
            ++v57;
            v56 -= 2;
            if (!v56)
            {
              v57 = (unsigned __int16 *)(v38 + 2 * v51);
              break;
            }
          }
          v39 = ((unint64_t)v57 - v38) >> 1;
        }
        if ((_DWORD)v51 == (unsigned __int16)v39)
          return (unsigned __int16 *)&gss::PropertySetValueHelper<gss::PropertyID,BOOL>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        if (v51 <= (unsigned __int16)v39)
          return result;
        v70 = v28 + 80 * v27;
        return (unsigned __int16 *)(v38 + *(unsigned __int16 *)(v70 + 24) + (unsigned __int16)v39);
      }
    }
LABEL_69:
    if (a5)
      *a5 = 0;
    return (unsigned __int16 *)gss::defaultValueForKey<gss::PropertyID,BOOL>(a2);
  }
  v8 = *((_QWORD *)v6 + 6);
  v9 = v8 + 8 * v7;
  if (a3 >= 0x17)
    v10 = 23;
  else
    v10 = a3;
  while (1)
  {
    v12 = *(uint64_t **)(*(_QWORD *)v8 + 72);
    if (v12)
    {
      v15 = *v12;
      v14 = v12 + 2;
      v13 = v15;
      result = (unsigned __int16 *)(v15 + 80 * *((unsigned __int8 *)v14 + a3));
      v16 = result[5];
      if (result[5])
      {
        v17 = *(_QWORD *)result;
        if (*((_BYTE *)result + 15))
        {
          if (v16 >= 0x1E)
          {
            result = *(unsigned __int16 **)result;
            v20 = (unsigned __int16 *)v16;
            do
            {
              v21 = (unsigned __int16 *)((unint64_t)v20 >> 1);
              v22 = &result[(unint64_t)v20 >> 1];
              v24 = *v22;
              v23 = v22 + 1;
              v20 = (unsigned __int16 *)((char *)v20 + ~((unint64_t)v20 >> 1));
              if (v24 < a2)
                result = v23;
              else
                v20 = v21;
            }
            while (v20);
            if (result == (unsigned __int16 *)(v17 + 2 * v16) || *result != a2)
              goto LABEL_8;
            v11 = ((unint64_t)result - v17) >> 1;
          }
          else
          {
            result = 0;
            while (1)
            {
              v18 = *(unsigned __int16 *)(v17 + 2 * (_QWORD)result);
              if (v18 >= a2)
                break;
              result = (unsigned __int16 *)((char *)result + 1);
              if ((unsigned __int16 *)v16 == result)
                goto LABEL_8;
            }
            LOWORD(v11) = v18 == a2 ? (unsigned __int16)result : v16;
          }
        }
        else
        {
          v19 = 2 * v16;
          result = *(unsigned __int16 **)result;
          while (*result != a2)
          {
            ++result;
            v19 -= 2;
            if (!v19)
            {
              result = (unsigned __int16 *)(v17 + 2 * v16);
              break;
            }
          }
          v11 = ((unint64_t)result - v17) >> 1;
        }
      }
      else
      {
        LOWORD(v11) = 0;
      }
      if ((_DWORD)v16 != (unsigned __int16)v11)
        break;
    }
LABEL_8:
    v8 += 8;
    if (v8 == v9)
      goto LABEL_33;
  }
  v34 = *((unsigned __int8 *)v14 + v10);
  v35 = v13 + 80 * *((unsigned __int8 *)v14 + v10);
  v36 = *(unsigned __int16 *)(v35 + 26);
  if (!*(_WORD *)(v35 + 26))
    return (unsigned __int16 *)&gss::PropertySetValueHelper<gss::PropertyID,BOOL>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
  v37 = v13 + 80 * *((unsigned __int8 *)v14 + v10);
  v38 = *(_QWORD *)(v37 + 16);
  if (!*(_BYTE *)(v37 + 31))
  {
    v54 = 2 * v36;
    v55 = *(unsigned __int16 **)(v37 + 16);
    while (*v55 != a2)
    {
      ++v55;
      v54 -= 2;
      if (!v54)
      {
        v55 = (unsigned __int16 *)(v38 + 2 * v36);
        break;
      }
    }
    v39 = ((unint64_t)v55 - v38) >> 1;
LABEL_107:
    if (v36 <= (unsigned __int16)v39)
      return (unsigned __int16 *)&gss::PropertySetValueHelper<gss::PropertyID,BOOL>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
    v70 = v13 + 80 * v34;
    return (unsigned __int16 *)(v38 + *(unsigned __int16 *)(v70 + 24) + (unsigned __int16)v39);
  }
  if (v36 < 0x1E)
  {
    v39 = 0;
    result = (unsigned __int16 *)&gss::PropertySetValueHelper<gss::PropertyID,BOOL>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
    while (1)
    {
      v40 = *(unsigned __int16 *)(v38 + 2 * v39);
      if (v40 >= a2)
        break;
      if (v36 == ++v39)
        return result;
    }
    if (v40 != a2)
      LOWORD(v39) = v36;
    goto LABEL_107;
  }
  v58 = *(unsigned __int16 **)(v37 + 16);
  v59 = v36;
  do
  {
    v60 = v59 >> 1;
    v61 = &v58[v59 >> 1];
    v63 = *v61;
    v62 = v61 + 1;
    v59 += ~(v59 >> 1);
    if (v63 < a2)
      v58 = v62;
    else
      v59 = v60;
  }
  while (v59);
  if (v58 != (unsigned __int16 *)(v38 + 2 * v36) && *v58 == a2)
  {
    v39 = ((unint64_t)v58 - v38) >> 1;
    goto LABEL_107;
  }
  return (unsigned __int16 *)&gss::PropertySetValueHelper<gss::PropertyID,BOOL>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
}

float *gss::ZoomStyle<gss::PropertyID>::applyStyle(uint64_t a1, unint64_t a2, float a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int *v11;
  float v12;
  uint64_t v13;
  unsigned int v14;
  int *v15;
  float v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int *v26;
  float v27;
  uint64_t v28;
  unsigned int v29;
  int *v30;
  float v31;
  uint64_t v32;
  unsigned int v33;
  char *v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int *v41;
  float v42;
  uint64_t v43;
  unsigned int v44;
  int *v45;
  float v46;
  uint64_t v47;
  unsigned int v48;
  char *v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int *v56;
  float v57;
  uint64_t v58;
  unsigned int v59;
  int *v60;
  float v61;
  uint64_t v62;
  unsigned int v63;
  char *v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  int *v71;
  float v72;
  uint64_t v73;
  unsigned int v74;
  int *v75;
  float v76;
  uint64_t v77;
  unsigned int v78;
  char *v79;
  float v80;
  uint64_t v81;
  float *result;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  int *v87;
  float v88;
  uint64_t v89;
  unsigned int v90;
  int *v91;
  float v92;
  uint64_t v93;
  unsigned int v94;
  char *v95;
  float v96;
  unsigned __int16 v97;
  unsigned __int16 v98;
  char v99;
  uint64_t v100;

  gss::StylePropertySet<gss::PropertyID>::unionWith(a2, *(_QWORD *)(a1 + 8));
  v6 = *(_QWORD *)(a1 + 8);
  v98 = 94;
  if (geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)v6, &v98) != *(unsigned __int16 *)(v6 + 10))
  {
    v7 = *(_QWORD *)(a1 + 8);
    v98 = 95;
    if (geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)v7, &v98) != *(unsigned __int16 *)(v7 + 10))
    {
      v8 = *(_QWORD *)(a1 + 8);
      v98 = 96;
      if (geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)v8, &v98) != *(unsigned __int16 *)(v8 + 10))
      {
        v9 = *(_QWORD *)(a1 + 8);
        v98 = 94;
        v10 = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)(v9 + 32), &v98);
        if (v10 == *(unsigned __int16 *)(v9 + 42))
          v11 = &gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        else
          v11 = (int *)(*(_QWORD *)(v9 + 32) + *(unsigned __int16 *)(v9 + 40) + 4 * v10);
        v12 = *(float *)v11;
        v13 = *(_QWORD *)(a1 + 8);
        v98 = 96;
        v14 = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)(v13 + 32), &v98);
        if (v14 == *(unsigned __int16 *)(v13 + 42))
          v15 = &gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        else
          v15 = (int *)(*(_QWORD *)(v13 + 32) + *(unsigned __int16 *)(v13 + 40) + 4 * v14);
        v16 = *(float *)v15;
        v17 = *(_QWORD *)(a1 + 8);
        v98 = 95;
        v18 = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)(v17 + 32), &v98);
        if (v18 == *(unsigned __int16 *)(v17 + 42))
          v19 = &gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        else
          v19 = (char *)(*(_QWORD *)(v17 + 32) + *(unsigned __int16 *)(v17 + 40) + 4 * v18);
        v20 = gss::_interpolateSize(*v19, v12, v16, *(float *)a1, *(float *)(a1 + 4), a3);
        v97 = 94;
        v98 = 94;
        v99 = 0;
        geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)&v98, (uint64_t)&v100);
        *(float *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v97) = v20;
      }
    }
  }
  v21 = *(_QWORD *)(a1 + 8);
  v98 = 97;
  if (geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)v21, &v98) != *(unsigned __int16 *)(v21 + 10))
  {
    v22 = *(_QWORD *)(a1 + 8);
    v98 = 98;
    if (geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)v22, &v98) != *(unsigned __int16 *)(v22 + 10))
    {
      v23 = *(_QWORD *)(a1 + 8);
      v98 = 99;
      if (geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)v23, &v98) != *(unsigned __int16 *)(v23 + 10))
      {
        v24 = *(_QWORD *)(a1 + 8);
        v98 = 97;
        v25 = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)(v24 + 32), &v98);
        if (v25 == *(unsigned __int16 *)(v24 + 42))
          v26 = &gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        else
          v26 = (int *)(*(_QWORD *)(v24 + 32) + *(unsigned __int16 *)(v24 + 40) + 4 * v25);
        v27 = *(float *)v26;
        v28 = *(_QWORD *)(a1 + 8);
        v98 = 99;
        v29 = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)(v28 + 32), &v98);
        if (v29 == *(unsigned __int16 *)(v28 + 42))
          v30 = &gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        else
          v30 = (int *)(*(_QWORD *)(v28 + 32) + *(unsigned __int16 *)(v28 + 40) + 4 * v29);
        v31 = *(float *)v30;
        v32 = *(_QWORD *)(a1 + 8);
        v98 = 98;
        v33 = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)(v32 + 32), &v98);
        if (v33 == *(unsigned __int16 *)(v32 + 42))
          v34 = &gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        else
          v34 = (char *)(*(_QWORD *)(v32 + 32) + *(unsigned __int16 *)(v32 + 40) + 4 * v33);
        v35 = gss::_interpolateSize(*v34, v27, v31, *(float *)a1, *(float *)(a1 + 4), a3);
        v97 = 97;
        v98 = 97;
        v99 = 0;
        geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)&v98, (uint64_t)&v100);
        *(float *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v97) = v35;
      }
    }
  }
  v36 = *(_QWORD *)(a1 + 8);
  v98 = 100;
  if (geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)v36, &v98) != *(unsigned __int16 *)(v36 + 10))
  {
    v37 = *(_QWORD *)(a1 + 8);
    v98 = 101;
    if (geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)v37, &v98) != *(unsigned __int16 *)(v37 + 10))
    {
      v38 = *(_QWORD *)(a1 + 8);
      v98 = 102;
      if (geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)v38, &v98) != *(unsigned __int16 *)(v38 + 10))
      {
        v39 = *(_QWORD *)(a1 + 8);
        v98 = 100;
        v40 = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)(v39 + 32), &v98);
        if (v40 == *(unsigned __int16 *)(v39 + 42))
          v41 = &gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        else
          v41 = (int *)(*(_QWORD *)(v39 + 32) + *(unsigned __int16 *)(v39 + 40) + 4 * v40);
        v42 = *(float *)v41;
        v43 = *(_QWORD *)(a1 + 8);
        v98 = 102;
        v44 = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)(v43 + 32), &v98);
        if (v44 == *(unsigned __int16 *)(v43 + 42))
          v45 = &gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        else
          v45 = (int *)(*(_QWORD *)(v43 + 32) + *(unsigned __int16 *)(v43 + 40) + 4 * v44);
        v46 = *(float *)v45;
        v47 = *(_QWORD *)(a1 + 8);
        v98 = 101;
        v48 = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)(v47 + 32), &v98);
        if (v48 == *(unsigned __int16 *)(v47 + 42))
          v49 = &gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        else
          v49 = (char *)(*(_QWORD *)(v47 + 32) + *(unsigned __int16 *)(v47 + 40) + 4 * v48);
        v50 = gss::_interpolateSize(*v49, v42, v46, *(float *)a1, *(float *)(a1 + 4), a3);
        v97 = 100;
        v98 = 100;
        v99 = 0;
        geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)&v98, (uint64_t)&v100);
        *(float *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v97) = v50;
      }
    }
  }
  v51 = *(_QWORD *)(a1 + 8);
  v98 = 6;
  if (geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)v51, &v98) != *(unsigned __int16 *)(v51 + 10))
  {
    v52 = *(_QWORD *)(a1 + 8);
    v98 = 7;
    if (geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)v52, &v98) != *(unsigned __int16 *)(v52 + 10))
    {
      v53 = *(_QWORD *)(a1 + 8);
      v98 = 8;
      if (geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)v53, &v98) != *(unsigned __int16 *)(v53 + 10))
      {
        v54 = *(_QWORD *)(a1 + 8);
        v98 = 6;
        v55 = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)(v54 + 32), &v98);
        if (v55 == *(unsigned __int16 *)(v54 + 42))
          v56 = &gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        else
          v56 = (int *)(*(_QWORD *)(v54 + 32) + *(unsigned __int16 *)(v54 + 40) + 4 * v55);
        v57 = *(float *)v56;
        v58 = *(_QWORD *)(a1 + 8);
        v98 = 8;
        v59 = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)(v58 + 32), &v98);
        if (v59 == *(unsigned __int16 *)(v58 + 42))
          v60 = &gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        else
          v60 = (int *)(*(_QWORD *)(v58 + 32) + *(unsigned __int16 *)(v58 + 40) + 4 * v59);
        v61 = *(float *)v60;
        v62 = *(_QWORD *)(a1 + 8);
        v98 = 7;
        v63 = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)(v62 + 32), &v98);
        if (v63 == *(unsigned __int16 *)(v62 + 42))
          v64 = &gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        else
          v64 = (char *)(*(_QWORD *)(v62 + 32) + *(unsigned __int16 *)(v62 + 40) + 4 * v63);
        v65 = gss::_interpolateSize(*v64, v57, v61, *(float *)a1, *(float *)(a1 + 4), a3);
        v97 = 6;
        v98 = 6;
        v99 = 0;
        geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)&v98, (uint64_t)&v100);
        *(float *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v97) = v65;
      }
    }
  }
  v66 = *(_QWORD *)(a1 + 8);
  v98 = 9;
  if (geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)v66, &v98) != *(unsigned __int16 *)(v66 + 10))
  {
    v67 = *(_QWORD *)(a1 + 8);
    v98 = 10;
    if (geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)v67, &v98) != *(unsigned __int16 *)(v67 + 10))
    {
      v68 = *(_QWORD *)(a1 + 8);
      v98 = 11;
      if (geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)v68, &v98) != *(unsigned __int16 *)(v68 + 10))
      {
        v69 = *(_QWORD *)(a1 + 8);
        v98 = 9;
        v70 = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)(v69 + 32), &v98);
        if (v70 == *(unsigned __int16 *)(v69 + 42))
          v71 = &gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        else
          v71 = (int *)(*(_QWORD *)(v69 + 32) + *(unsigned __int16 *)(v69 + 40) + 4 * v70);
        v72 = *(float *)v71;
        v73 = *(_QWORD *)(a1 + 8);
        v98 = 11;
        v74 = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)(v73 + 32), &v98);
        if (v74 == *(unsigned __int16 *)(v73 + 42))
          v75 = &gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        else
          v75 = (int *)(*(_QWORD *)(v73 + 32) + *(unsigned __int16 *)(v73 + 40) + 4 * v74);
        v76 = *(float *)v75;
        v77 = *(_QWORD *)(a1 + 8);
        v98 = 10;
        v78 = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)(v77 + 32), &v98);
        if (v78 == *(unsigned __int16 *)(v77 + 42))
          v79 = &gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        else
          v79 = (char *)(*(_QWORD *)(v77 + 32) + *(unsigned __int16 *)(v77 + 40) + 4 * v78);
        v80 = gss::_interpolateSize(*v79, v72, v76, *(float *)a1, *(float *)(a1 + 4), a3);
        v97 = 9;
        v98 = 9;
        v99 = 0;
        geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)&v98, (uint64_t)&v100);
        *(float *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v97) = v80;
      }
    }
  }
  v81 = *(_QWORD *)(a1 + 8);
  v98 = 12;
  result = (float *)geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)v81, &v98);
  if ((_DWORD)result != *(unsigned __int16 *)(v81 + 10))
  {
    v83 = *(_QWORD *)(a1 + 8);
    v98 = 13;
    result = (float *)geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)v83, &v98);
    if ((_DWORD)result != *(unsigned __int16 *)(v83 + 10))
    {
      v84 = *(_QWORD *)(a1 + 8);
      v98 = 14;
      result = (float *)geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)v84, &v98);
      if ((_DWORD)result != *(unsigned __int16 *)(v84 + 10))
      {
        v85 = *(_QWORD *)(a1 + 8);
        v98 = 12;
        v86 = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)(v85 + 32), &v98);
        if (v86 == *(unsigned __int16 *)(v85 + 42))
          v87 = &gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        else
          v87 = (int *)(*(_QWORD *)(v85 + 32) + *(unsigned __int16 *)(v85 + 40) + 4 * v86);
        v88 = *(float *)v87;
        v89 = *(_QWORD *)(a1 + 8);
        v98 = 14;
        v90 = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)(v89 + 32), &v98);
        if (v90 == *(unsigned __int16 *)(v89 + 42))
          v91 = &gss::PropertySetValueHelper<gss::PropertyID,float>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        else
          v91 = (int *)(*(_QWORD *)(v89 + 32) + *(unsigned __int16 *)(v89 + 40) + 4 * v90);
        v92 = *(float *)v91;
        v93 = *(_QWORD *)(a1 + 8);
        v98 = 13;
        v94 = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)(v93 + 32), &v98);
        if (v94 == *(unsigned __int16 *)(v93 + 42))
          v95 = &gss::PropertySetValueHelper<gss::PropertyID,unsigned int>::value(gss::PropertyID,gss::StylePropertySet<gss::PropertyID> const&)::_defaultValue;
        else
          v95 = (char *)(*(_QWORD *)(v93 + 32) + *(unsigned __int16 *)(v93 + 40) + 4 * v94);
        v96 = gss::_interpolateSize(*v95, v88, v92, *(float *)a1, *(float *)(a1 + 4), a3);
        v97 = 12;
        v98 = 12;
        v99 = 0;
        geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)&v98, (uint64_t)&v100);
        result = (float *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v97);
        *result = v96;
      }
    }
  }
  return result;
}

unint64_t geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex(unsigned __int16 **a1, unsigned __int16 *a2)
{
  unint64_t result;
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  unsigned int v15;

  result = *((unsigned __int16 *)a1 + 5);
  if (!(_DWORD)result)
    return result;
  v4 = *a1;
  if (!*((_BYTE *)a1 + 15))
  {
    v8 = 2 * result;
    v9 = *a1;
    while (*v9 != *a2)
    {
      ++v9;
      v8 -= 2;
      if (!v8)
      {
        LODWORD(v9) = (_DWORD)v4 + 2 * result;
        return (unsigned __int16)(((_DWORD)v9 - (_DWORD)v4) >> 1);
      }
    }
    return (unsigned __int16)(((_DWORD)v9 - (_DWORD)v4) >> 1);
  }
  if (result > 0x1D)
  {
    v10 = *a2;
    v9 = *a1;
    v11 = result;
    do
    {
      v12 = v11 >> 1;
      v13 = &v9[v11 >> 1];
      v15 = *v13;
      v14 = v13 + 1;
      v11 += ~(v11 >> 1);
      if (v15 < v10)
        v9 = v14;
      else
        v11 = v12;
    }
    while (v11);
    if (v9 == &v4[result] || *v9 != v10)
      return result;
    return (unsigned __int16)(((_DWORD)v9 - (_DWORD)v4) >> 1);
  }
  v5 = 0;
  v6 = *a2;
  while (1)
  {
    v7 = v4[v5];
    if (v7 >= v6)
      break;
    if (result == ++v5)
      return result;
  }
  if (v7 == v6)
    return (unsigned __int16)v5;
  else
    return result;
}

uint64_t gss::CartoStyle<gss::PropertyID>::applyStyle(uint64_t result, uint64_t *a2, uint64_t a3, float a4)
{
  uint64_t v4;
  _WORD *v5;
  _BYTE *v6;
  uint64_t v9;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned __int16 *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned __int16 *v28;
  unint64_t v29;
  unsigned __int16 *v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int16 *v41;
  unsigned __int16 *v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  uint64_t v51;
  const void *v52;
  uint64_t v53;
  int v54;
  unsigned __int16 *v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  unsigned __int16 v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int16 *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  unsigned __int16 *v71;
  unsigned __int16 *v72;
  unsigned __int16 *v73;
  unint64_t v74;
  unint64_t v75;
  unsigned __int16 *v76;
  unsigned __int16 *v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unint64_t v82;
  uint64_t v83;
  unsigned __int16 *v84;
  unsigned __int16 *v85;
  unsigned __int16 *v86;
  unint64_t v87;
  unint64_t v88;
  unsigned __int16 *v89;
  unsigned __int16 *v90;
  unsigned int v91;
  __int16 v92;
  unsigned __int16 v93;
  uint64_t v94;
  const void *v95;
  uint64_t v96;
  int v97;
  unsigned __int16 *v98;
  unsigned int v99;
  uint64_t v100;
  unsigned int v101;
  unsigned __int16 v102;
  unsigned __int16 v103;
  uint64_t v104;
  uint64_t v105;
  unsigned __int16 *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  unsigned __int16 *v114;
  unsigned __int16 *v115;
  unsigned __int16 *v116;
  unint64_t v117;
  unint64_t v118;
  unsigned __int16 *v119;
  unsigned __int16 *v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  unint64_t v125;
  uint64_t v126;
  unsigned __int16 *v127;
  unsigned __int16 *v128;
  unsigned __int16 *v129;
  unint64_t v130;
  unint64_t v131;
  unsigned __int16 *v132;
  unsigned __int16 *v133;
  unsigned int v134;
  uint64_t v135;
  int v136;
  unsigned int v137;
  unsigned __int16 *v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  unsigned __int16 *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t v149;
  unsigned __int16 *v150;
  unint64_t v151;
  unsigned __int16 *v152;
  unint64_t v153;
  unint64_t v154;
  unsigned __int16 *v155;
  unsigned __int16 *v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  unsigned __int16 *v162;
  unsigned __int16 *v163;
  unint64_t v164;
  unint64_t v165;
  unsigned __int16 *v166;
  unsigned __int16 *v167;
  unsigned int v168;
  unsigned __int16 v169;
  uint64_t v170;
  uint64_t v171;
  float *v172;
  uint64_t v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  uint64_t v177;
  _BYTE *v178;
  uint64_t v179;
  _BYTE *v180;
  uint64_t v181;
  unsigned int v182;
  unsigned int v183;
  unint64_t v184;
  uint64_t v185;
  char *v186;
  unsigned int v187;
  char *v188;
  unint64_t v189;
  unint64_t v190;
  unsigned __int16 *v191;
  unsigned __int16 *v192;
  unsigned int v193;
  unsigned int v194;
  unsigned __int16 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned __int16 v199;
  __int16 v200;
  uint64_t v201;
  _BYTE v202[7];

  v9 = result;
  if (a3 && *(_WORD *)(result + 32))
  {
    v11 = *(unsigned int **)(result + 24);
    v12 = 4 * *(unsigned __int16 *)(result + 32);
    do
    {
      v13 = *v11++;
      result = gss::CartoStyle<gss::PropertyID>::applyStyle(*(_QWORD *)(*(_QWORD *)(a3 + 64) + 16 * v13), a2, a3, a4);
      v12 -= 4;
    }
    while (v12);
  }
  v201 = v9;
  v14 = *(_QWORD *)(v9 + 88);
  if (!*((_BYTE *)a2 + 14))
  {
    v5 = 0;
    v174 = 0;
    v175 = *(unsigned __int16 *)(v14 + 10);
    v176 = v175;
    while (1)
    {
      if (v174 == v175)
        goto LABEL_6;
      if (v174 < v176)
      {
        v5 = (_WORD *)(*(_QWORD *)v14 + 2 * v174);
        v6 = (_BYTE *)(*(_QWORD *)v14 + *(unsigned __int16 *)(v14 + 8) + v174);
      }
      v179 = *((unsigned __int16 *)a2 + 5);
      if (!*((_WORD *)a2 + 5))
      {
        LOWORD(v184) = 0;
        goto LABEL_330;
      }
      v180 = (_BYTE *)*a2;
      if (!*((_BYTE *)a2 + 15))
        break;
      if (v179 <= 0x1D)
      {
        v181 = 0;
        v182 = (unsigned __int16)*v5;
        while (1)
        {
          v183 = *(unsigned __int16 *)&v180[2 * v181];
          if (v183 >= v182)
            break;
          if (v179 == ++v181)
            goto LABEL_331;
        }
        if (v183 == v182)
          LOWORD(v184) = v181;
        else
          LOWORD(v184) = *((_WORD *)a2 + 5);
        goto LABEL_330;
      }
      v187 = (unsigned __int16)*v5;
      v188 = (char *)*a2;
      v189 = *((unsigned __int16 *)a2 + 5);
      do
      {
        v190 = v189 >> 1;
        v191 = (unsigned __int16 *)&v188[2 * (v189 >> 1)];
        v193 = *v191;
        v192 = v191 + 1;
        v189 += ~(v189 >> 1);
        if (v193 < v187)
          v188 = (char *)v192;
        else
          v189 = v190;
      }
      while (v189);
      if (v188 != &v180[2 * v179] && *(unsigned __int16 *)v188 == v187)
      {
        v184 = (unint64_t)(v188 - v180) >> 1;
        goto LABEL_330;
      }
LABEL_331:
      if ((_DWORD)v179 == *((unsigned __int16 *)a2 + 6))
      {
        if ((_DWORD)v179 == 0xFFFF)
          goto LABEL_6;
        v194 = 2 * (v179 & 0x7FFF);
        if (v194 <= 4)
          v4 = 4;
        else
          v4 = v194;
        v195 = (4 * ((unsigned __int16)v4 >> 1)) | 1;
        v196 = gss::Allocator::instance((gss::Allocator *)result);
        result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v196 + 16))(v196, (unsigned __int16)(v195 + v4), 1);
        v197 = result;
        if (*a2)
        {
          if (*((_WORD *)a2 + 5))
          {
            result = (uint64_t)memmove((void *)result, (const void *)*a2, 2 * *((unsigned __int16 *)a2 + 5));
            if (*((_WORD *)a2 + 5))
              result = (uint64_t)memmove((void *)(v197 + v195), (const void *)(*a2 + *((unsigned __int16 *)a2 + 4)), *((unsigned __int16 *)a2 + 5));
          }
          v198 = gss::Allocator::instance((gss::Allocator *)result);
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v198 + 40))(v198, *a2, *((unsigned __int16 *)a2 + 6));
        }
        *((_WORD *)a2 + 6) = v4;
        *a2 = v197;
        *((_WORD *)a2 + 4) = v195;
      }
      if (v174 >= v176 && v174 < *(unsigned __int16 *)(v14 + 10))
      {
        v5 = (_WORD *)(*(_QWORD *)v14 + 2 * v174);
        v6 = (_BYTE *)(*(_QWORD *)v14 + *(unsigned __int16 *)(v14 + 8) + v174);
      }
      v177 = *((unsigned __int16 *)a2 + 5);
      v178 = (_BYTE *)*a2;
      *(_WORD *)(*a2 + 2 * v177) = *v5;
      v178[*((unsigned __int16 *)a2 + 4) + v177] = *v6;
      ++*((_WORD *)a2 + 5);
      *((_BYTE *)a2 + 15) = 0;
      v176 = *(unsigned __int16 *)(v14 + 10);
LABEL_300:
      if (v174 + 1 < v176)
        ++v174;
      else
        v174 = v176;
    }
    v185 = 2 * v179;
    v186 = (char *)*a2;
    while (*(unsigned __int16 *)v186 != (unsigned __int16)*v5)
    {
      v186 += 2;
      v185 -= 2;
      if (!v185)
      {
        v186 = &v180[2 * v179];
        break;
      }
    }
    v184 = (unint64_t)(v186 - v180) >> 1;
LABEL_330:
    if ((_DWORD)v179 != (unsigned __int16)v184)
      goto LABEL_300;
    goto LABEL_331;
  }
LABEL_6:
  v15 = *(unsigned __int16 *)(v14 + 26);
  if (*(_WORD *)(v14 + 26))
  {
    v16 = 0;
    v17 = 0;
    v18 = *(unsigned __int16 *)(v14 + 26);
    while (1)
    {
      v23 = *(_QWORD *)(v14 + 16);
      if (v17 < v18)
      {
        v16 = (unsigned __int16 *)(v23 + 2 * v17);
        v5 = (_WORD *)(v23 + *(unsigned __int16 *)(v14 + 24) + v17);
      }
      v6 = (_BYTE *)*(unsigned __int8 *)v5;
      v21 = *((unsigned __int16 *)a2 + 13);
      if (!*((_WORD *)a2 + 13))
        goto LABEL_44;
      v24 = a2[2];
      if (!*((_BYTE *)a2 + 31))
      {
        v27 = 2 * v21;
        v28 = (unsigned __int16 *)a2[2];
        while (*v28 != *v16)
        {
          ++v28;
          v27 -= 2;
          if (!v27)
          {
            v28 = (unsigned __int16 *)(v24 + 2 * v21);
            break;
          }
        }
        v29 = ((unint64_t)v28 - v24) >> 1;
        if ((_DWORD)v21 != (unsigned __int16)v29)
        {
LABEL_39:
          v22 = (unsigned __int16)v29;
          goto LABEL_11;
        }
        goto LABEL_44;
      }
      if (v21 <= 0x1D)
        break;
      v4 = *v16;
      v30 = (unsigned __int16 *)a2[2];
      v31 = *((unsigned __int16 *)a2 + 13);
      do
      {
        v32 = v31 >> 1;
        v33 = &v30[v31 >> 1];
        v35 = *v33;
        v34 = v33 + 1;
        v31 += ~(v31 >> 1);
        if (v35 < v4)
          v30 = v34;
        else
          v31 = v32;
      }
      while (v31);
      if (v30 != (unsigned __int16 *)(v24 + 2 * v21) && *v30 == (_DWORD)v4)
      {
        v29 = ((unint64_t)v30 - v24) >> 1;
        if ((_DWORD)v21 != (unsigned __int16)v29)
          goto LABEL_39;
LABEL_44:
        v4 = *v16;
      }
LABEL_45:
      if (*((_BYTE *)a2 + 30))
        goto LABEL_10;
      if (!*((_WORD *)a2 + 13))
      {
        LOWORD(v39) = 0;
        goto LABEL_70;
      }
      v36 = a2[2];
      if (!*((_BYTE *)a2 + 31))
      {
        v40 = 2 * v21;
        v41 = (unsigned __int16 *)a2[2];
        while (*v41 != (_DWORD)v4)
        {
          ++v41;
          v40 -= 2;
          if (!v40)
          {
            v41 = (unsigned __int16 *)(v36 + 2 * v21);
            break;
          }
        }
        v39 = ((unint64_t)v41 - v36) >> 1;
LABEL_70:
        if ((_DWORD)v21 != (unsigned __int16)v39)
          goto LABEL_10;
        goto LABEL_71;
      }
      if (v21 < 0x1E)
      {
        v37 = 0;
        while (1)
        {
          v38 = *(unsigned __int16 *)(v36 + 2 * v37);
          if (v38 >= v4)
            break;
          if (v21 == ++v37)
            goto LABEL_71;
        }
        if (v38 == (_DWORD)v4)
          LOWORD(v39) = v37;
        else
          LOWORD(v39) = *((_WORD *)a2 + 13);
        goto LABEL_70;
      }
      v42 = (unsigned __int16 *)a2[2];
      v43 = *((unsigned __int16 *)a2 + 13);
      do
      {
        v44 = v43 >> 1;
        v45 = &v42[v43 >> 1];
        v47 = *v45;
        v46 = v45 + 1;
        v43 += ~(v43 >> 1);
        if (v47 < v4)
          v42 = v46;
        else
          v43 = v44;
      }
      while (v43);
      if (v42 != (unsigned __int16 *)(v36 + 2 * v21) && *v42 == (_DWORD)v4)
      {
        v39 = ((unint64_t)v42 - v36) >> 1;
        goto LABEL_70;
      }
LABEL_71:
      if ((_DWORD)v21 == *((unsigned __int16 *)a2 + 14))
      {
        if ((_DWORD)v21 == 0xFFFF)
        {
          LOWORD(v21) = -1;
          goto LABEL_10;
        }
        v48 = 2 * (v21 & 0x7FFF);
        if (v48 <= 4)
          v49 = 4;
        else
          v49 = v48;
        v20 = (4 * (v49 >> 1)) | 1;
        v199 = v49;
        v50 = v20 + v49;
        v51 = gss::Allocator::instance((gss::Allocator *)result);
        result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v51 + 16))(v51, v50, 1);
        v19 = result;
        v52 = (const void *)a2[2];
        if (v52)
        {
          if (*((_WORD *)a2 + 13))
          {
            result = (uint64_t)memmove((void *)result, v52, 2 * *((unsigned __int16 *)a2 + 13));
            if (*((_WORD *)a2 + 13))
              result = (uint64_t)memmove((void *)(v19 + v20), (const void *)(a2[2] + *((unsigned __int16 *)a2 + 12)), *((unsigned __int16 *)a2 + 13));
          }
          v53 = gss::Allocator::instance((gss::Allocator *)result);
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v53 + 40))(v53, a2[2], *((unsigned __int16 *)a2 + 14));
        }
        *((_WORD *)a2 + 14) = v199;
        a2[2] = v19;
        *((_WORD *)a2 + 12) = v20;
        LODWORD(v21) = *((unsigned __int16 *)a2 + 13);
      }
      else
      {
        v19 = a2[2];
        v20 = *((_WORD *)a2 + 12);
      }
      *(_WORD *)(v19 + 2 * v21) = v4;
      *(_BYTE *)(v19 + v20 + v21) = 0;
      LOWORD(v21) = *((_WORD *)a2 + 13) + 1;
      *((_WORD *)a2 + 13) = v21;
      *((_BYTE *)a2 + 31) = 0;
LABEL_10:
      v22 = (unsigned __int16)v21 - 1;
LABEL_11:
      *(_BYTE *)(a2[2] + *((unsigned __int16 *)a2 + 12) + v22) = (_BYTE)v6;
      v18 = *(unsigned __int16 *)(v14 + 26);
      if (v17 + 1 < v18)
        ++v17;
      else
        v17 = *(unsigned __int16 *)(v14 + 26);
      if (v17 == v15)
        goto LABEL_83;
    }
    v25 = 0;
    v4 = *v16;
    while (1)
    {
      v26 = *(unsigned __int16 *)(v24 + 2 * v25);
      if (v26 >= v4)
        break;
      if (v21 == ++v25)
        goto LABEL_45;
    }
    if (v26 == (_DWORD)v4)
      LOWORD(v29) = v25;
    else
      LOWORD(v29) = *((_WORD *)a2 + 13);
    if ((_DWORD)v21 != (unsigned __int16)v29)
      goto LABEL_39;
    goto LABEL_44;
  }
LABEL_83:
  v54 = *(unsigned __int16 *)(v14 + 42);
  if (*(_WORD *)(v14 + 42))
  {
    v55 = 0;
    v56 = 0;
    v57 = *((unsigned __int16 *)a2 + 21);
    v58 = *(unsigned __int16 *)(v14 + 42);
    v59 = v57;
    do
    {
      v63 = *(_QWORD *)(v14 + 32);
      v64 = (unsigned __int16 *)(v63 + 2 * v56);
      v65 = v63 + *(unsigned __int16 *)(v14 + 40) + 4 * v56;
      if (v56 < v58)
      {
        v55 = v64;
        v6 = (_BYTE *)v65;
      }
      v66 = *(_DWORD *)v6;
      if ((_WORD)v59)
      {
        v67 = a2[4];
        if (*((_BYTE *)a2 + 47))
        {
          if ((unsigned __int16)v59 > 0x1Du)
          {
            v4 = *v55;
            v73 = (unsigned __int16 *)a2[4];
            v74 = (unsigned __int16)v59;
            do
            {
              v75 = v74 >> 1;
              v76 = &v73[v74 >> 1];
              v78 = *v76;
              v77 = v76 + 1;
              result = ~(v74 >> 1);
              v74 += result;
              if (v78 < v4)
                v73 = v77;
              else
                v74 = v75;
            }
            while (v74);
            if (v73 == (unsigned __int16 *)(v67 + 2 * (unsigned __int16)v59) || *v73 != (_DWORD)v4)
              goto LABEL_121;
            v62 = ((unint64_t)v73 - v67) >> 1;
          }
          else
          {
            v68 = 0;
            v4 = *v55;
            while (1)
            {
              v69 = *(unsigned __int16 *)(v67 + 2 * v68);
              if (v69 >= v4)
                break;
              if ((unsigned __int16)v59 == ++v68)
                goto LABEL_121;
            }
            if (v69 == (_DWORD)v4)
              LOWORD(v62) = v68;
            else
              LOWORD(v62) = v59;
          }
        }
        else
        {
          v70 = 2 * (unsigned __int16)v59;
          v71 = (unsigned __int16 *)(v67 + v70);
          v72 = (unsigned __int16 *)a2[4];
          while (*v72 != *v55)
          {
            ++v72;
            v70 -= 2;
            if (!v70)
            {
              v72 = v71;
              break;
            }
          }
          v62 = ((unint64_t)v72 - v67) >> 1;
        }
      }
      else
      {
        LOWORD(v62) = 0;
      }
      if ((unsigned __int16)v62 != (unsigned __int16)v59)
      {
        v62 = (unsigned __int16)v62;
        goto LABEL_89;
      }
      v4 = *v55;
LABEL_121:
      if (*((_BYTE *)a2 + 46))
        goto LABEL_88;
      if (!(_WORD)v59)
      {
        LOWORD(v82) = 0;
        goto LABEL_147;
      }
      v79 = a2[4];
      if (!*((_BYTE *)a2 + 47))
      {
        v83 = 2 * (unsigned __int16)v59;
        v84 = (unsigned __int16 *)(v79 + v83);
        v85 = (unsigned __int16 *)a2[4];
        while (*v85 != (_DWORD)v4)
        {
          ++v85;
          v83 -= 2;
          if (!v83)
          {
            v85 = v84;
            break;
          }
        }
        v82 = ((unint64_t)v85 - v79) >> 1;
LABEL_147:
        if ((unsigned __int16)v82 != (unsigned __int16)v59)
          goto LABEL_87;
        goto LABEL_148;
      }
      if ((unsigned __int16)v59 < 0x1Eu)
      {
        v80 = 0;
        while (1)
        {
          v81 = *(unsigned __int16 *)(v79 + 2 * v80);
          if (v81 >= v4)
            break;
          if ((unsigned __int16)v59 == ++v80)
            goto LABEL_148;
        }
        if (v81 == (_DWORD)v4)
          LOWORD(v82) = v80;
        else
          LOWORD(v82) = v59;
        goto LABEL_147;
      }
      v86 = (unsigned __int16 *)a2[4];
      v87 = (unsigned __int16)v59;
      do
      {
        v88 = v87 >> 1;
        v89 = &v86[v87 >> 1];
        v91 = *v89;
        v90 = v89 + 1;
        v87 += ~(v87 >> 1);
        if (v91 < v4)
          v86 = v90;
        else
          v87 = v88;
      }
      while (v87);
      if (v86 != (unsigned __int16 *)(v79 + 2 * (unsigned __int16)v59) && *v86 == (_DWORD)v4)
      {
        v82 = ((unint64_t)v86 - v79) >> 1;
        goto LABEL_147;
      }
LABEL_148:
      if (*((unsigned __int16 *)a2 + 22) == (unsigned __int16)v59)
      {
        if ((_WORD)v59 == 0xFFFF)
          goto LABEL_87;
        if (2 * (v59 & 0x7FFFu) <= 4)
          v92 = 4;
        else
          v92 = 2 * (v59 & 0x7FFF);
        v61 = 2 * v92 + 4;
        v200 = v92;
        v93 = v61 + 4 * v92;
        v94 = gss::Allocator::instance((gss::Allocator *)result);
        result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v94 + 16))(v94, v93 & 0xFFFC, 1);
        v60 = result;
        v95 = (const void *)a2[4];
        if (v95)
        {
          if (*((_WORD *)a2 + 21))
          {
            result = (uint64_t)memmove((void *)result, v95, 2 * *((unsigned __int16 *)a2 + 21));
            if (*((_WORD *)a2 + 21))
              result = (uint64_t)memmove((void *)(v60 + v61), (const void *)(a2[4] + *((unsigned __int16 *)a2 + 20)), 4 * *((unsigned __int16 *)a2 + 21));
          }
          v96 = gss::Allocator::instance((gss::Allocator *)result);
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v96 + 40))(v96, a2[4], *((unsigned __int16 *)a2 + 22));
        }
        *((_WORD *)a2 + 22) = v200;
        a2[4] = v60;
        *((_WORD *)a2 + 20) = v61;
        v59 = *((unsigned __int16 *)a2 + 21);
      }
      else
      {
        v60 = a2[4];
        v61 = *((_WORD *)a2 + 20);
      }
      *(_WORD *)(v60 + 2 * (unsigned __int16)v59) = v4;
      *(_DWORD *)(v60 + v61 + 4 * (unsigned __int16)v59) = 0;
      v57 = v59 + 1;
      *((_WORD *)a2 + 21) = v59 + 1;
      *((_BYTE *)a2 + 47) = 0;
LABEL_87:
      v58 = *(unsigned __int16 *)(v14 + 42);
LABEL_88:
      v62 = (unsigned __int16)v57 - 1;
      v59 = v57;
LABEL_89:
      *(_DWORD *)(a2[4] + *((unsigned __int16 *)a2 + 20) + 4 * v62) = v66;
      if (v56 + 1 < v58)
        ++v56;
      else
        v56 = v58;
    }
    while (v56 != v54);
  }
  v97 = *(unsigned __int16 *)(v14 + 58);
  if (*(_WORD *)(v14 + 58))
  {
    v98 = 0;
    v99 = 0;
    LOWORD(v100) = *((_WORD *)a2 + 29);
    v101 = *(unsigned __int16 *)(v14 + 58);
    v102 = v100;
    v103 = v100;
    do
    {
      v105 = *(_QWORD *)(v14 + 48);
      v106 = (unsigned __int16 *)(v105 + 2 * v99);
      v107 = v105 + *(unsigned __int16 *)(v14 + 56) + 8 * v99;
      if (v99 < v101)
      {
        v98 = v106;
        v4 = v107;
      }
      v108 = *(_QWORD *)v4;
      if (v103)
      {
        v109 = a2[6];
        if (*((_BYTE *)a2 + 63))
        {
          if (v103 > 0x1Du)
          {
            v111 = *v98;
            v116 = (unsigned __int16 *)a2[6];
            v117 = v103;
            do
            {
              v118 = v117 >> 1;
              v119 = &v116[v117 >> 1];
              v121 = *v119;
              v120 = v119 + 1;
              result = v121;
              v117 += ~(v117 >> 1);
              if (v121 < v111)
                v116 = v120;
              else
                v117 = v118;
            }
            while (v117);
            if (v116 == (unsigned __int16 *)(v109 + 2 * v103) || *v116 != v111)
              goto LABEL_195;
            v104 = ((unint64_t)v116 - v109) >> 1;
          }
          else
          {
            v110 = 0;
            v111 = *v98;
            while (1)
            {
              v112 = *(unsigned __int16 *)(v109 + 2 * v110);
              if (v112 >= v111)
                break;
              if (v103 == ++v110)
                goto LABEL_195;
            }
            if (v112 == v111)
              LOWORD(v104) = v110;
            else
              LOWORD(v104) = v103;
          }
        }
        else
        {
          v113 = 2 * v103;
          v114 = (unsigned __int16 *)(v109 + v113);
          v115 = (unsigned __int16 *)a2[6];
          while (*v115 != *v98)
          {
            ++v115;
            v113 -= 2;
            if (!v113)
            {
              v115 = v114;
              break;
            }
          }
          v104 = ((unint64_t)v115 - v109) >> 1;
        }
      }
      else
      {
        LOWORD(v104) = 0;
      }
      if ((unsigned __int16)v104 != v103)
      {
        v104 = (unsigned __int16)v104;
        goto LABEL_163;
      }
      v111 = *v98;
LABEL_195:
      if (*((_BYTE *)a2 + 62))
        goto LABEL_162;
      if (v103)
      {
        v122 = a2[6];
        if (*((_BYTE *)a2 + 63))
        {
          if (v103 >= 0x1Eu)
          {
            v129 = (unsigned __int16 *)a2[6];
            v130 = v103;
            do
            {
              v131 = v130 >> 1;
              v132 = &v129[v130 >> 1];
              v134 = *v132;
              v133 = v132 + 1;
              v130 += ~(v130 >> 1);
              if (v134 < v111)
                v129 = v133;
              else
                v130 = v131;
            }
            while (v130);
            if (v129 == (unsigned __int16 *)(v122 + 2 * v103) || *v129 != v111)
            {
LABEL_222:
              result = geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::isSpaceAvailable((unsigned __int16 *)a2 + 24);
              v100 = *((unsigned __int16 *)a2 + 29);
              if ((_DWORD)result)
              {
                v135 = a2[6];
                *(_WORD *)(v135 + 2 * v100) = v111;
                *(_QWORD *)(v135 + *((unsigned __int16 *)a2 + 28) + 8 * v100) = 0;
                LOWORD(v100) = v100 + 1;
                *((_WORD *)a2 + 29) = v100;
                *((_BYTE *)a2 + 63) = 0;
              }
              goto LABEL_161;
            }
            v125 = ((unint64_t)v129 - v122) >> 1;
          }
          else
          {
            v123 = 0;
            while (1)
            {
              v124 = *(unsigned __int16 *)(v122 + 2 * v123);
              if (v124 >= v111)
                break;
              if (v103 == ++v123)
                goto LABEL_222;
            }
            if (v124 == v111)
              LOWORD(v125) = v123;
            else
              LOWORD(v125) = v103;
          }
        }
        else
        {
          v126 = 2 * v103;
          v127 = (unsigned __int16 *)(v122 + v126);
          v128 = (unsigned __int16 *)a2[6];
          while (*v128 != v111)
          {
            ++v128;
            v126 -= 2;
            if (!v126)
            {
              v128 = v127;
              break;
            }
          }
          v125 = ((unint64_t)v128 - v122) >> 1;
        }
      }
      else
      {
        LOWORD(v125) = 0;
      }
      if ((unsigned __int16)v125 == v103)
        goto LABEL_222;
LABEL_161:
      v101 = *(unsigned __int16 *)(v14 + 58);
      v102 = v100;
LABEL_162:
      v104 = v102 - 1;
      v103 = v102;
LABEL_163:
      *(_QWORD *)(a2[6] + *((unsigned __int16 *)a2 + 28) + 8 * v104) = v108;
      if (v99 + 1 < v101)
        ++v99;
      else
        v99 = v101;
    }
    while (v99 != v97);
  }
  v136 = *(unsigned __int16 *)(v14 + 74);
  if (*(_WORD *)(v14 + 74))
  {
    v137 = 0;
    v138 = 0;
    v139 = *(unsigned __int16 *)(v14 + 74);
    while (1)
    {
      v141 = *(_QWORD *)(v14 + 64);
      v142 = (unsigned __int16 *)(v141 + 2 * v137);
      v143 = v141 + *(unsigned __int16 *)(v14 + 72) + 16 * v137;
      if (v137 < v139)
      {
        v4 = v143;
        v138 = v142;
      }
      v144 = *((unsigned __int16 *)a2 + 37);
      if (!*((_WORD *)a2 + 37))
        goto LABEL_260;
      v145 = a2[8];
      if (!*((_BYTE *)a2 + 79))
      {
        v149 = 2 * v144;
        v150 = (unsigned __int16 *)a2[8];
        while (*v150 != *v138)
        {
          ++v150;
          v149 -= 2;
          if (!v149)
          {
            v150 = (unsigned __int16 *)(v145 + 2 * v144);
            break;
          }
        }
        v151 = ((unint64_t)v150 - v145) >> 1;
        if ((_DWORD)v144 != (unsigned __int16)v151)
        {
LABEL_255:
          v140 = (unsigned __int16)v151;
          goto LABEL_227;
        }
        goto LABEL_260;
      }
      if (v144 <= 0x1D)
        break;
      v147 = *v138;
      v152 = (unsigned __int16 *)a2[8];
      v153 = *((unsigned __int16 *)a2 + 37);
      do
      {
        v154 = v153 >> 1;
        v155 = &v152[v153 >> 1];
        v157 = *v155;
        v156 = v155 + 1;
        v153 += ~(v153 >> 1);
        if (v157 < v147)
          v152 = v156;
        else
          v153 = v154;
      }
      while (v153);
      if (v152 != (unsigned __int16 *)(v145 + 2 * v144) && *v152 == v147)
      {
        v151 = ((unint64_t)v152 - v145) >> 1;
        if ((_DWORD)v144 != (unsigned __int16)v151)
          goto LABEL_255;
LABEL_260:
        v147 = *v138;
      }
LABEL_261:
      if (!*((_BYTE *)a2 + 78))
      {
        if (!*((_WORD *)a2 + 37))
          goto LABEL_289;
        v158 = a2[8];
        if (!*((_BYTE *)a2 + 79))
        {
          v161 = 2 * v144;
          v162 = (unsigned __int16 *)a2[8];
          while (*v162 != v147)
          {
            ++v162;
            v161 -= 2;
            if (!v161)
            {
              v162 = (unsigned __int16 *)(v158 + 2 * v144);
              break;
            }
          }
          if ((_DWORD)v144 != (unsigned __int16)(((unint64_t)v162 - v158) >> 1))
            goto LABEL_226;
LABEL_289:
          result = geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::isSpaceAvailable((unsigned __int16 *)a2 + 32);
          v170 = *((unsigned __int16 *)a2 + 37);
          LOWORD(v144) = *((_WORD *)a2 + 37);
          if ((_DWORD)result)
          {
            v171 = a2[8];
            *(_WORD *)(v171 + 2 * v170) = v147;
            v144 = v171 + *((unsigned __int16 *)a2 + 36) + 16 * v170;
            *(_BYTE *)v144 = 0;
            *(_DWORD *)(v144 + 1) = *(_DWORD *)v202;
            *(_DWORD *)(v144 + 4) = *(_DWORD *)&v202[3];
            *(_QWORD *)(v144 + 8) = 0;
            LOWORD(v144) = *((_WORD *)a2 + 37) + 1;
            *((_WORD *)a2 + 37) = v144;
            *((_BYTE *)a2 + 79) = 0;
          }
          goto LABEL_226;
        }
        if (v144 < 0x1E)
        {
          v159 = 0;
          while (1)
          {
            v160 = *(unsigned __int16 *)(v158 + 2 * v159);
            if (v160 >= v147)
              break;
            if (v144 == ++v159)
              goto LABEL_289;
          }
          if (v160 == v147)
            v169 = v159;
          else
            v169 = *((_WORD *)a2 + 37);
          if ((_DWORD)v144 != v169)
            goto LABEL_226;
          goto LABEL_289;
        }
        v163 = (unsigned __int16 *)a2[8];
        v164 = *((unsigned __int16 *)a2 + 37);
        do
        {
          v165 = v164 >> 1;
          v166 = &v163[v164 >> 1];
          v168 = *v166;
          v167 = v166 + 1;
          v164 += ~(v164 >> 1);
          if (v168 < v147)
            v163 = v167;
          else
            v164 = v165;
        }
        while (v164);
        if (v163 == (unsigned __int16 *)(v158 + 2 * v144)
          || *v163 != v147
          || (_DWORD)v144 == (unsigned __int16)(((unint64_t)v163 - v158) >> 1))
        {
          goto LABEL_289;
        }
      }
LABEL_226:
      v140 = (unsigned __int16)v144 - 1;
LABEL_227:
      *(_OWORD *)(a2[8] + *((unsigned __int16 *)a2 + 36) + 16 * v140) = *(_OWORD *)v4;
      v139 = *(unsigned __int16 *)(v14 + 74);
      if (v137 + 1 < v139)
        ++v137;
      else
        v137 = *(unsigned __int16 *)(v14 + 74);
      if (v137 == v136)
        goto LABEL_291;
    }
    v146 = 0;
    v147 = *v138;
    while (1)
    {
      v148 = *(unsigned __int16 *)(v145 + 2 * v146);
      if (v148 >= v147)
        break;
      if (v144 == ++v146)
        goto LABEL_261;
    }
    if (v148 == v147)
      LOWORD(v151) = v146;
    else
      LOWORD(v151) = *((_WORD *)a2 + 37);
    if ((_DWORD)v144 != (unsigned __int16)v151)
      goto LABEL_255;
    goto LABEL_260;
  }
LABEL_291:
  if (*(_WORD *)(v201 + 48))
  {
    v172 = *(float **)(v201 + 40);
    v173 = 24 * *(unsigned __int16 *)(v201 + 48);
    do
    {
      if (*v172 + -0.001 <= a4 && v172[1] > a4)
        result = (uint64_t)gss::ZoomStyle<gss::PropertyID>::applyStyle((uint64_t)v172, (unint64_t)a2, a4);
      v172 += 6;
      v173 -= 24;
    }
    while (v173);
  }
  return result;
}

unint64_t geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(unint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;

  if (a2 != a3)
  {
    v3 = result;
    if (!*(_BYTE *)(result + 14))
    {
      v5 = a2;
      do
      {
        result = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)v3, (unsigned __int16 *)v5);
        if ((_DWORD)result == *(unsigned __int16 *)(v3 + 10))
        {
          result = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::isSpaceAvailable((unsigned __int16 *)v3);
          if (!(_DWORD)result)
            return result;
          v6 = *(unsigned __int16 *)(v3 + 10);
          v7 = *(unsigned __int16 **)v3;
          *(_WORD *)(*(_QWORD *)v3 + 2 * v6) = *(_WORD *)v5;
          *((_BYTE *)v7 + *(unsigned __int16 *)(v3 + 8) + v6) = *(_BYTE *)(v5 + 2);
          ++*(_WORD *)(v3 + 10);
          *(_BYTE *)(v3 + 15) = 0;
        }
        v5 += 4;
      }
      while (v5 != a3);
    }
  }
  return result;
}

_BYTE *gss::StylePropertySet<gss::PropertyID>::unionWith(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  int v6;
  _BYTE *result;
  int v8;
  unsigned __int16 *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int16 *v12;
  char *v13;
  char v14;
  int v15;
  unsigned __int16 *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned __int16 *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned __int16 *v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned __int16 *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;
  char v40;
  uint64_t v41;
  int v42;
  char v43;
  char v44;

  v41 = a2;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v6 = *(unsigned __int16 *)(a2 + 10);
  v37 = a2;
  v38 = v6;
  v39 = 0;
  v40 = 0;
  result = (_BYTE *)geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::Iterator>(a1, &v41, (uint64_t)&v37);
  v8 = *(unsigned __int16 *)(a2 + 26);
  if (*(_WORD *)(a2 + 26))
  {
    v9 = 0;
    LODWORD(v2) = 0;
    v10 = *(unsigned __int16 *)(a2 + 26);
    do
    {
      v11 = *(_QWORD *)(a2 + 16);
      v12 = (unsigned __int16 *)(v11 + 2 * v2);
      v13 = (char *)(v11 + *(unsigned __int16 *)(a2 + 24) + v2);
      if (v2 < v10)
      {
        v9 = v12;
        v3 = v13;
      }
      v14 = *v3;
      result = (_BYTE *)geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a1 + 16, v9);
      *result = v14;
      v10 = *(unsigned __int16 *)(a2 + 26);
      if ((int)v2 + 1 < v10)
        v2 = (v2 + 1);
      else
        v2 = *(unsigned __int16 *)(a2 + 26);
    }
    while ((_DWORD)v2 != v8);
  }
  v15 = *(unsigned __int16 *)(a2 + 42);
  if (*(_WORD *)(a2 + 42))
  {
    v16 = 0;
    LODWORD(v2) = 0;
    v17 = *(unsigned __int16 *)(a2 + 42);
    do
    {
      v18 = *(_QWORD *)(a2 + 32);
      v19 = (unsigned __int16 *)(v18 + 2 * v2);
      v20 = v18 + *(unsigned __int16 *)(a2 + 40) + 4 * v2;
      if (v2 < v17)
      {
        v16 = v19;
        v3 = (char *)v20;
      }
      v21 = *(_DWORD *)v3;
      result = (_BYTE *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a1 + 32, v16);
      *(_DWORD *)result = v21;
      v17 = *(unsigned __int16 *)(a2 + 42);
      if ((int)v2 + 1 < v17)
        v2 = (v2 + 1);
      else
        v2 = *(unsigned __int16 *)(a2 + 42);
    }
    while ((_DWORD)v2 != v15);
  }
  v22 = *(unsigned __int16 *)(a2 + 58);
  if (*(_WORD *)(a2 + 58))
  {
    v23 = 0;
    LODWORD(v2) = 0;
    v24 = *(unsigned __int16 *)(a2 + 58);
    do
    {
      v25 = *(_QWORD *)(a2 + 48);
      v26 = (unsigned __int16 *)(v25 + 2 * v2);
      v27 = v25 + *(unsigned __int16 *)(a2 + 56) + 8 * v2;
      if (v2 < v24)
      {
        v23 = v26;
        v3 = (char *)v27;
      }
      v28 = *(_QWORD *)v3;
      result = (_BYTE *)geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a1 + 48, v23);
      *(_QWORD *)result = v28;
      v24 = *(unsigned __int16 *)(a2 + 58);
      if ((int)v2 + 1 < v24)
        v2 = (v2 + 1);
      else
        v2 = *(unsigned __int16 *)(a2 + 58);
    }
    while ((_DWORD)v2 != v22);
  }
  v29 = *(unsigned __int16 *)(a2 + 74);
  if (*(_WORD *)(a2 + 74))
  {
    v30 = 0;
    v31 = 0;
    v32 = a1 + 64;
    v33 = *(unsigned __int16 *)(a2 + 74);
    do
    {
      v34 = *(_QWORD *)(a2 + 64);
      v35 = (unsigned __int16 *)(v34 + 2 * v30);
      v36 = v34 + *(unsigned __int16 *)(a2 + 72) + 16 * v30;
      if (v30 < v33)
      {
        v2 = v36;
        v31 = v35;
      }
      result = (_BYTE *)geo::intern_linear_map<gss::PropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v32, v31);
      *(_OWORD *)result = *(_OWORD *)v2;
      v33 = *(unsigned __int16 *)(a2 + 74);
      if (v30 + 1 < v33)
        ++v30;
      else
        v30 = *(unsigned __int16 *)(a2 + 74);
    }
    while (v30 != v29);
  }
  return result;
}

unint64_t geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned int> const*>(unint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;

  if (a2 != a3)
  {
    v3 = result;
    if (!*(_BYTE *)(result + 14))
    {
      v5 = a2;
      do
      {
        result = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)v3, (unsigned __int16 *)v5);
        if ((_DWORD)result == *(unsigned __int16 *)(v3 + 10))
        {
          result = geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::isSpaceAvailable((unsigned __int16 *)v3);
          if (!(_DWORD)result)
            return result;
          v6 = *(unsigned __int16 *)(v3 + 10);
          v7 = *(unsigned __int16 **)v3;
          *(_WORD *)(*(_QWORD *)v3 + 2 * v6) = *(_WORD *)v5;
          *(_DWORD *)((char *)&v7[2 * v6] + *(unsigned __int16 *)(v3 + 8)) = *(_DWORD *)(v5 + 4);
          *(_WORD *)(v3 + 10) = v6 + 1;
          *(_BYTE *)(v3 + 15) = 0;
        }
        v5 += 8;
      }
      while (v5 != a3);
    }
  }
  return result;
}

uint64_t geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](unint64_t a1, unsigned __int16 *a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned __int16 v7[2];
  int v8;
  uint64_t v9;

  v4 = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)a1, a2);
  if (v4 == *(unsigned __int16 *)(a1 + 10))
  {
    v7[0] = *a2;
    v8 = 0;
    geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned int> const*>(a1, (uint64_t)v7, (uint64_t)&v9);
    v5 = *(unsigned __int16 *)(a1 + 10) - 1;
  }
  else
  {
    v5 = v4;
  }
  return *(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 8) + 4 * v5;
}

uint64_t geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::isSpaceAvailable(unsigned __int16 *a1)
{
  int v1;
  unsigned int v2;
  __int16 v3;

  v1 = a1[5];
  if (v1 != a1[6])
    return 1;
  if (v1 != 0xFFFF)
  {
    v2 = 2 * (v1 & 0x7FFF);
    if (v2 <= 4)
      v3 = 4;
    else
      v3 = v2;
    geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::reallocate((gss::Allocator *)a1, v3, 0);
    return 1;
  }
  return 0;
}

unint64_t geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::Iterator>(unint64_t result, uint64_t *a2, uint64_t a3)
{
  _BYTE *v3;
  unint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned __int16 *v11;

  if (!*(_BYTE *)(result + 14))
  {
    v5 = result;
    v6 = 0;
    v7 = *a2;
    v8 = *((_DWORD *)a2 + 2);
    while (v7 != *(_QWORD *)a3 || v8 != *(_DWORD *)(a3 + 8))
    {
      v9 = *(unsigned __int16 *)(v7 + 10);
      if (v8 < v9)
      {
        v6 = (unsigned __int16 *)(*(_QWORD *)v7 + 2 * v8);
        v3 = (_BYTE *)(*(_QWORD *)v7 + *(unsigned __int16 *)(v7 + 8) + v8);
      }
      result = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)v5, v6);
      if ((_DWORD)result == *(unsigned __int16 *)(v5 + 10))
      {
        result = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::isSpaceAvailable((unsigned __int16 *)v5);
        if (!(_DWORD)result)
          return result;
        if (v8 >= v9 && v8 < *(unsigned __int16 *)(v7 + 10))
        {
          v6 = (unsigned __int16 *)(*(_QWORD *)v7 + 2 * v8);
          v3 = (_BYTE *)(*(_QWORD *)v7 + *(unsigned __int16 *)(v7 + 8) + v8);
        }
        v10 = *(unsigned __int16 *)(v5 + 10);
        v11 = *(unsigned __int16 **)v5;
        *(_WORD *)(*(_QWORD *)v5 + 2 * v10) = *v6;
        *((_BYTE *)v11 + *(unsigned __int16 *)(v5 + 8) + v10) = *v3;
        ++*(_WORD *)(v5 + 10);
        *(_BYTE *)(v5 + 15) = 0;
      }
      if (v8 + 1 < *(unsigned __int16 *)(v7 + 10))
        ++v8;
      else
        v8 = *(unsigned __int16 *)(v7 + 10);
    }
  }
  return result;
}

uint64_t geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::isSpaceAvailable(unsigned __int16 *a1)
{
  int v1;
  unsigned int v2;
  __int16 v3;

  v1 = a1[5];
  if (v1 != a1[6])
    return 1;
  if (v1 != 0xFFFF)
  {
    v2 = 2 * (v1 & 0x7FFF);
    if (v2 <= 4)
      v3 = 4;
    else
      v3 = v2;
    geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::reallocate((gss::Allocator *)a1, v3, 0);
    return 1;
  }
  return 0;
}

_WORD *geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::reallocate(gss::Allocator *a1, __int16 a2, int a3)
{
  uint64_t v6;
  unsigned __int16 v7;
  _WORD *result;
  _WORD *v9;
  gss::Allocator *v10;
  uint64_t v11;

  v6 = gss::Allocator::instance(a1);
  v7 = (2 * a2) | 1;
  result = (_WORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 16))(v6, (unsigned __int16)(v7 + a2), 1);
  v9 = result;
  if (*(_QWORD *)a1)
  {
    geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent((uint64_t)a1, result, (_BYTE *)result + v7, a3);
    v11 = gss::Allocator::instance(v10);
    result = (_WORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 40))(v11, *(_QWORD *)a1, *((unsigned __int16 *)a1 + 6));
  }
  *((_WORD *)a1 + 6) = a2;
  *(_QWORD *)a1 = v9;
  *((_WORD *)a1 + 4) = v7;
  return result;
}

_WORD *geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::reallocate(gss::Allocator *a1, __int16 a2, int a3)
{
  uint64_t v6;
  unsigned __int16 v7;
  _WORD *result;
  _WORD *v9;
  gss::Allocator *v10;
  uint64_t v11;

  v6 = gss::Allocator::instance(a1);
  v7 = ((2 * a2) & 0xFFFC) + 4;
  result = (_WORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 16))(v6, (unsigned __int16)(v7 + 4 * a2), 1);
  v9 = result;
  if (*(_QWORD *)a1)
  {
    geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent((uint64_t)a1, result, (_WORD *)((char *)result + v7), a3);
    v11 = gss::Allocator::instance(v10);
    result = (_WORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 40))(v11, *(_QWORD *)a1, *((unsigned __int16 *)a1 + 6));
  }
  *((_WORD *)a1 + 6) = a2;
  *(_QWORD *)a1 = v9;
  *((_WORD *)a1 + 4) = v7;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &),std::allocator<BOOL (*)(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &)>,BOOL ()(geo::ibitstream &,gss::StylePropertySet<gss::PropertyID> &,unsigned long long,gss::StylePropertyIndex,gss::DecodingContext const&,std::ostringstream &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unsigned __int16 *a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(a1 + 8))(a2, a3, *a4, *a5, a6, a7);
}

uint64_t gss::propertyDecoderForIndex<gss::PropertyID>@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t (*v2)();

  if (result > 0x1CE)
    v2 = gss::unknownPropertyDecoder<gss::PropertyID>;
  else
    v2 = off_1E4313A58[(__int16)result];
  *a2 = &off_1E42C6FD8;
  a2[1] = v2;
  a2[3] = a2;
  return result;
}

uint64_t (***gss::StylePropertySet<gss::PropertyID>::intern(uint64_t (***result)(), uint64_t a2))()
{
  uint64_t v3;
  int v4;
  uint64_t (***v5)();
  __int16 v6;
  gss::Allocator *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  char *v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  char *v24;
  int v25;
  uint64_t (***v26)();
  __int16 v27;
  gss::Allocator *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int16 v40;
  gss::Allocator *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  __int16 v47;
  gss::Allocator *v48;
  uint64_t v49;
  _Unwind_Exception *v50;
  _Unwind_Exception *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (**v54)();
  int v55;
  uint64_t (***v56)();
  uint64_t v57;

  v3 = (uint64_t)result;
  v57 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)result + 30))
  {
    *((_BYTE *)result + 30) = 1;
    v4 = *((unsigned __int16 *)result + 13);
    if (*((_WORD *)result + 13))
    {
      LOWORD(v53) = 0;
      result = (uint64_t (***)())geo::intern_map_allocator<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(a2, v4, &v53);
      v5 = result;
      if (result)
      {
        v6 = v53;
        geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v3 + 16, result, (_BYTE *)result + (unsigned __int16)v53, 1);
        v8 = gss::Allocator::instance(v7);
        result = (uint64_t (***)())(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(v3 + 16), *(unsigned __int16 *)(v3 + 28));
        *(_WORD *)(v3 + 28) = 0;
        *(_QWORD *)(v3 + 16) = v5;
        *(_WORD *)(v3 + 24) = v6;
      }
    }
  }
  if (!*(_BYTE *)(v3 + 46))
  {
    *(_BYTE *)(v3 + 46) = 1;
    v9 = *(unsigned __int16 *)(v3 + 42);
    if (*(_WORD *)(v3 + 42))
    {
      v10 = 6 * v9;
      if ((6 * v9) <= *(_DWORD *)(a2 + 76))
      {
        v11 = *(_DWORD *)(a2 + 72);
        if (v11 >= v10)
          goto LABEL_39;
        v12 = gss::Allocator::instance((gss::Allocator *)result);
        v13 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v12 + 16))(v12, *(unsigned int *)(a2 + 76), 1);
        v14 = *(_DWORD *)(a2 + 76);
        v56 = &v54;
        v53 = v13;
        v54 = &off_1E42D5C80;
        v55 = v14;
        v15 = *(uint64_t **)(a2 + 48);
        if ((unint64_t)v15 >= *(_QWORD *)(a2 + 56))
        {
          v16 = std::vector<std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>>::__emplace_back_slow_path<std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>>((char **)(a2 + 40), &v53);
        }
        else
        {
          v53 = 0;
          *v15 = v13;
          v15[4] = (uint64_t)(v15 + 1);
          ((void (*)(uint64_t (***)()))(*v56)[3])(v56);
          v16 = (char *)(v15 + 5);
        }
        *(_QWORD *)(a2 + 48) = v16;
        v30 = *(_DWORD *)(a2 + 76);
        *(_DWORD *)(a2 + 64) = 0;
        *(_DWORD *)(a2 + 68) = v30;
        *(_DWORD *)(a2 + 72) = v30;
        v31 = v53;
        result = v56;
        v53 = 0;
        if (v31)
        {
          v52 = v31;
          if (!v56)
            goto LABEL_46;
          (*v56)[6]();
          result = v56;
        }
        if (result == &v54)
        {
          v32 = 4;
          result = &v54;
        }
        else
        {
          if (!result)
          {
LABEL_38:
            v11 = *(_DWORD *)(a2 + 72);
LABEL_39:
            v36 = *(_QWORD *)(*(_QWORD *)(a2 + 48) - 40);
            v37 = *(unsigned int *)(a2 + 64);
            v38 = *(_DWORD *)(a2 + 68) - 4 * v9;
            *(_DWORD *)(a2 + 64) = v37 + 2 * v9;
            *(_DWORD *)(a2 + 68) = v38;
            *(_DWORD *)(a2 + 72) = v11 - v10;
            if (v36)
            {
              v39 = v36 + v37;
              v40 = v38 - v37;
              geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v3 + 32, (_WORD *)(v36 + v37), (_DWORD *)(v36 + v37 + (unsigned __int16)(v38 - v37)), 1);
              v42 = gss::Allocator::instance(v41);
              result = (uint64_t (***)())(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v42 + 40))(v42, *(_QWORD *)(v3 + 32), *(unsigned __int16 *)(v3 + 44));
              *(_WORD *)(v3 + 44) = 0;
              *(_QWORD *)(v3 + 32) = v39;
              *(_WORD *)(v3 + 40) = v40;
            }
            goto LABEL_3;
          }
          v32 = 5;
        }
        result = (uint64_t (***)())(*result)[v32]();
        goto LABEL_38;
      }
    }
  }
LABEL_3:
  if (*(_BYTE *)(v3 + 62))
    goto LABEL_4;
  *(_BYTE *)(v3 + 62) = 1;
  v17 = *(unsigned __int16 *)(v3 + 58);
  if (!*(_WORD *)(v3 + 58))
    goto LABEL_4;
  v18 = 10 * v17;
  if ((10 * v17) > *(_DWORD *)(a2 + 116))
    goto LABEL_4;
  v19 = *(_DWORD *)(a2 + 112);
  if (v19 < v18)
  {
    v20 = gss::Allocator::instance((gss::Allocator *)result);
    v21 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v20 + 16))(v20, *(unsigned int *)(a2 + 116), 1);
    v22 = *(_DWORD *)(a2 + 116);
    v56 = &v54;
    v53 = v21;
    v54 = (uint64_t (**)())&unk_1E42D5CC8;
    v55 = v22;
    v23 = *(uint64_t **)(a2 + 88);
    if ((unint64_t)v23 >= *(_QWORD *)(a2 + 96))
    {
      v24 = std::vector<std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>>::__emplace_back_slow_path<std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>>((char **)(a2 + 80), &v53);
    }
    else
    {
      v53 = 0;
      *v23 = v21;
      v23[4] = (uint64_t)(v23 + 1);
      ((void (*)(uint64_t (***)()))(*v56)[3])(v56);
      v24 = (char *)(v23 + 5);
    }
    *(_QWORD *)(a2 + 88) = v24;
    v33 = *(_DWORD *)(a2 + 116);
    *(_DWORD *)(a2 + 104) = 0;
    *(_DWORD *)(a2 + 108) = v33;
    *(_DWORD *)(a2 + 112) = v33;
    v34 = v53;
    result = v56;
    v53 = 0;
    if (!v34)
    {
LABEL_33:
      if (result == &v54)
      {
        v35 = 4;
        result = &v54;
      }
      else
      {
        if (!result)
        {
LABEL_43:
          v19 = *(_DWORD *)(a2 + 112);
          goto LABEL_44;
        }
        v35 = 5;
      }
      result = (uint64_t (***)())(*result)[v35]();
      goto LABEL_43;
    }
    v52 = v34;
    if (v56)
    {
      (*v56)[6]();
      result = v56;
      goto LABEL_33;
    }
LABEL_46:
    std::__throw_bad_function_call[abi:nn180100]();
    v51 = v50;
    std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>::~unique_ptr[abi:nn180100](&v53);
    _Unwind_Resume(v51);
  }
LABEL_44:
  v43 = *(_QWORD *)(*(_QWORD *)(a2 + 88) - 40);
  v44 = *(unsigned int *)(a2 + 104);
  v45 = *(_DWORD *)(a2 + 108) - 8 * v17;
  *(_DWORD *)(a2 + 104) = v44 + 2 * v17;
  *(_DWORD *)(a2 + 108) = v45;
  *(_DWORD *)(a2 + 112) = v19 - v18;
  if (v43)
  {
    v46 = v43 + v44;
    v47 = v45 - v44;
    geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v3 + 48, (_WORD *)(v43 + v44), (_QWORD *)(v43 + v44 + (unsigned __int16)(v45 - v44)), 1);
    v49 = gss::Allocator::instance(v48);
    result = (uint64_t (***)())(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v49 + 40))(v49, *(_QWORD *)(v3 + 48), *(unsigned __int16 *)(v3 + 60));
    *(_WORD *)(v3 + 60) = 0;
    *(_QWORD *)(v3 + 48) = v46;
    *(_WORD *)(v3 + 56) = v47;
  }
LABEL_4:
  if (!*(_BYTE *)(v3 + 14))
  {
    *(_BYTE *)(v3 + 14) = 1;
    v25 = *(unsigned __int16 *)(v3 + 10);
    if (*(_WORD *)(v3 + 10))
    {
      LOWORD(v53) = 0;
      result = (uint64_t (***)())geo::intern_map_allocator<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(a2, v25, &v53);
      v26 = result;
      if (result)
      {
        v27 = v53;
        geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(v3, result, (_BYTE *)result + (unsigned __int16)v53, 1);
        v29 = gss::Allocator::instance(v28);
        result = (uint64_t (***)())(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v29 + 40))(v29, *(_QWORD *)v3, *(unsigned __int16 *)(v3 + 12));
        *(_WORD *)(v3 + 12) = 0;
        *(_QWORD *)v3 = v26;
        *(_WORD *)(v3 + 8) = v27;
      }
    }
  }
  return result;
}

void geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(uint64_t a1, _WORD *__dst, _BYTE *a3, int a4)
{
  unint64_t v4;
  int32x4_t *v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  unint64_t v12;
  int32x4_t v13;
  int32x4_t *v14;
  int32x4_t v15;
  int32x4_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;

  v4 = *(unsigned __int16 *)(a1 + 10);
  if (!*(_WORD *)(a1 + 10))
    return;
  if (a4)
  {
    v8 = (int32x4_t *)operator new(4 * v4);
    bzero(v8, 4 * v4);
    v9 = (unsigned int *)v8 + v4;
    if (4 * v4 - 4 >= 0x1C)
    {
      v12 = ((4 * v4 - 4) >> 2) + 1;
      v10 = v12 & 0x7FFFFFFFFFFFFFF8;
      v13 = (int32x4_t)xmmword_19FFB2E90;
      v14 = v8 + 1;
      v15.i64[0] = 0x400000004;
      v15.i64[1] = 0x400000004;
      v16.i64[0] = 0x800000008;
      v16.i64[1] = 0x800000008;
      v17 = v12 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v14[-1] = v13;
        *v14 = vaddq_s32(v13, v15);
        v13 = vaddq_s32(v13, v16);
        v14 += 2;
        v17 -= 8;
      }
      while (v17);
      if (v12 == v10)
        goto LABEL_13;
      v11 = (unsigned int *)v8 + (v12 & 0x7FFFFFFFFFFFFFF8);
    }
    else
    {
      LODWORD(v10) = 0;
      v11 = (unsigned int *)v8;
    }
    do
    {
      *v11++ = v10;
      LODWORD(v10) = v10 + 1;
    }
    while (v11 != v9);
LABEL_13:
    v21 = (uint64_t *)a1;
    std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>((uint64_t)v8, v9, &v21, 126 - 2 * __clz(v4), 1);
    if (*(_WORD *)(a1 + 10))
    {
      v18 = 0;
      do
      {
        v19 = v8->u32[v18];
        v20 = *(_QWORD *)a1;
        __dst[v18] = *(_WORD *)(*(_QWORD *)a1 + 2 * v19);
        a3[v18++] = *(_BYTE *)(v20 + *(unsigned __int16 *)(a1 + 8) + v19);
      }
      while (v18 < *(unsigned __int16 *)(a1 + 10));
    }
    *(_BYTE *)(a1 + 15) = 1;
    operator delete(v8);
    return;
  }
  memmove(__dst, *(const void **)a1, 2 * v4);
  if (*(_WORD *)(a1 + 10))
    memmove(a3, (const void *)(*(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 8)), *(unsigned __int16 *)(a1 + 10));
}

{
  std::vector<unsigned int>::size_type v5;
  std::vector<unsigned int>::pointer begin;
  unsigned int *end;
  unsigned int v10;
  std::vector<unsigned int>::pointer v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::vector<unsigned int> __p;
  uint64_t *v19;

  v5 = *(unsigned __int16 *)(a1 + 10);
  if (*(_WORD *)(a1 + 10))
  {
    if (a4)
    {
      std::vector<unsigned int>::vector(&__p, v5);
      begin = __p.__begin_;
      end = __p.__end_;
      if (__p.__begin_ != __p.__end_)
      {
        v10 = 0;
        v11 = __p.__begin_;
        do
          *v11++ = v10++;
        while (v11 != end);
      }
      v12 = 126 - 2 * __clz(end - begin);
      v19 = (uint64_t *)a1;
      if (end == begin)
        v13 = 0;
      else
        v13 = v12;
      std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>((uint64_t)begin, end, &v19, v13, 1);
      v14 = __p.__begin_;
      if (*(_WORD *)(a1 + 10))
      {
        v15 = 0;
        do
        {
          v16 = v14[v15];
          v17 = *(_QWORD *)a1;
          __dst[v15] = *(_WORD *)(*(_QWORD *)a1 + 2 * v16);
          a3[v15++] = *(_BYTE *)(v17 + *(unsigned __int16 *)(a1 + 8) + v16);
        }
        while (v15 < *(unsigned __int16 *)(a1 + 10));
        *(_BYTE *)(a1 + 15) = 1;
      }
      else
      {
        *(_BYTE *)(a1 + 15) = 1;
        if (!v14)
          return;
      }
      __p.__end_ = v14;
      operator delete(v14);
    }
    else
    {
      memmove(__dst, *(const void **)a1, 2 * v5);
      if (*(_WORD *)(a1 + 10))
        memmove(a3, (const void *)(*(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 8)), *(unsigned __int16 *)(a1 + 10));
    }
  }
}

void sub_19F041280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  BOOL v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  _DWORD *v98;
  uint64_t v99;
  _DWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int *v108;
  uint64_t v109;
  unsigned int *v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int *v113;
  unsigned int *v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  int64_t v120;
  uint64_t *v121;
  int64_t v122;
  BOOL v123;
  uint64_t v124;
  unsigned int *v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int *v128;
  uint64_t v129;
  unsigned int *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t *v143;
  unsigned int *v144;
  uint64_t v145;
  unsigned int *v146;
  unsigned int *v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unsigned int *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  unsigned int *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = a2 - 1;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v89 = *v10;
        v90 = *v11;
        if (*(unsigned __int16 *)(**a3 + 2 * v89) < *(unsigned __int16 *)(**a3 + 2 * v90))
        {
          *v11 = v89;
          *v10 = v90;
        }
        return result;
      case 3:
        v91 = *v11;
        v92 = v11[1];
        v93 = **a3;
        v94 = *(unsigned __int16 *)(v93 + 2 * v92);
        v95 = *(unsigned __int16 *)(v93 + 2 * v91);
        v96 = *v10;
        v97 = *(unsigned __int16 *)(v93 + 2 * v96);
        if (v94 >= v95)
        {
          if (v97 < v94)
          {
            v11[1] = v96;
            *v10 = v92;
            v133 = *v11;
            v132 = v11[1];
            if (*(unsigned __int16 *)(v93 + 2 * v132) < *(unsigned __int16 *)(v93 + 2 * v133))
            {
              *v11 = v132;
              v11[1] = v133;
            }
          }
        }
        else if (v97 >= v94)
        {
          *v11 = v92;
          v11[1] = v91;
          v158 = *v10;
          if (*(unsigned __int16 *)(v93 + 2 * v158) < v95)
          {
            v11[1] = v158;
            *v10 = v91;
          }
        }
        else
        {
          *v11 = v96;
          *v10 = v91;
        }
        return result;
      case 4:
        v98 = v11 + 1;
        v99 = v11[1];
        v100 = v11 + 2;
        v101 = v11[2];
        v102 = *v11;
        v103 = **a3;
        v104 = *(unsigned __int16 *)(v103 + 2 * v99);
        v105 = *(unsigned __int16 *)(v103 + 2 * v102);
        v106 = v101;
        v107 = *(unsigned __int16 *)(v103 + 2 * v101);
        if (v104 >= v105)
        {
          if (v107 < v104)
          {
            v108 = v11;
            *v98 = v101;
            *v100 = v99;
            result = (uint64_t)(v11 + 1);
            v109 = v99;
            v101 = v99;
            if (v107 >= v105)
              goto LABEL_171;
            goto LABEL_169;
          }
        }
        else
        {
          if (v107 < v104)
          {
            v108 = v11;
            result = (uint64_t)(v11 + 2);
            v109 = *v11;
            LODWORD(v99) = *v11;
LABEL_169:
            *v108 = v106;
            *(_DWORD *)result = v102;
            v101 = v109;
            goto LABEL_171;
          }
          v108 = v11 + 1;
          *v11 = v99;
          v11[1] = v102;
          result = (uint64_t)(v11 + 2);
          v109 = v102;
          LODWORD(v99) = v102;
          if (v107 < v105)
            goto LABEL_169;
        }
        LODWORD(v99) = v101;
LABEL_171:
        v159 = *v10;
        if (*(unsigned __int16 *)(v103 + 2 * v159) < *(unsigned __int16 *)(v103 + 2 * v101))
        {
          *v100 = v159;
          *v10 = v99;
          v160 = *v100;
          v161 = *v98;
          v162 = *(unsigned __int16 *)(v103 + 2 * v160);
          if (v162 < *(unsigned __int16 *)(v103 + 2 * v161))
          {
            v11[1] = v160;
            v11[2] = v161;
            v163 = *v11;
            if (v162 < *(unsigned __int16 *)(v103 + 2 * v163))
            {
              *v11 = v160;
              v11[1] = v163;
            }
          }
        }
        return result;
      case 5:
        return (uint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, **a3);
      default:
        if (v12 > 95)
        {
          if (!a4)
          {
            if (v11 != a2)
            {
              v120 = (unint64_t)(v13 - 2) >> 1;
              v121 = *a3;
              v122 = v120;
              do
              {
                if (v120 >= v122)
                {
                  v124 = (2 * v122) | 1;
                  v125 = &v11[v124];
                  v126 = *v125;
                  if (2 * v122 + 2 >= v13)
                  {
                    v127 = *v121;
                  }
                  else
                  {
                    v127 = *v121;
                    if (*(unsigned __int16 *)(*v121 + 2 * v126) < *(unsigned __int16 *)(*v121 + 2 * v125[1]))
                    {
                      LODWORD(v126) = v125[1];
                      ++v125;
                      v124 = 2 * v122 + 2;
                    }
                  }
                  v128 = &v11[v122];
                  v129 = *v128;
                  result = *(unsigned __int16 *)(v127 + 2 * v129);
                  if (*(unsigned __int16 *)(v127 + 2 * v126) >= result)
                  {
                    do
                    {
                      v130 = v125;
                      *v128 = v126;
                      if (v120 < v124)
                        break;
                      v131 = (2 * v124) | 1;
                      v125 = &v11[v131];
                      v124 = 2 * v124 + 2;
                      v126 = *v125;
                      if (v124 < v13)
                      {
                        if (*(unsigned __int16 *)(v127 + 2 * v126) >= *(unsigned __int16 *)(v127 + 2 * v125[1]))
                        {
                          v124 = v131;
                        }
                        else
                        {
                          LODWORD(v126) = v125[1];
                          ++v125;
                        }
                      }
                      else
                      {
                        v124 = v131;
                      }
                      v128 = v130;
                    }
                    while (*(unsigned __int16 *)(v127 + 2 * v126) >= result);
                    *v130 = v129;
                  }
                }
                v123 = v122-- <= 0;
              }
              while (!v123);
              v140 = (unint64_t)v12 >> 2;
              do
              {
                v141 = 0;
                v142 = *v11;
                v143 = *a3;
                v144 = v11;
                do
                {
                  v147 = &v144[v141];
                  v148 = v147[1];
                  v146 = v147 + 1;
                  v145 = v148;
                  v149 = (2 * v141) | 1;
                  v141 = 2 * v141 + 2;
                  if (v141 < v140)
                  {
                    result = v146[1];
                    if (*(unsigned __int16 *)(*v143 + 2 * v145) >= *(unsigned __int16 *)(*v143 + 2 * result))
                    {
                      v141 = v149;
                    }
                    else
                    {
                      LODWORD(v145) = v146[1];
                      ++v146;
                    }
                  }
                  else
                  {
                    v141 = v149;
                  }
                  *v144 = v145;
                  v144 = v146;
                }
                while (v141 <= (uint64_t)((unint64_t)(v140 - 2) >> 1));
                if (v146 == --a2)
                {
                  *v146 = v142;
                }
                else
                {
                  *v146 = *a2;
                  *a2 = v142;
                  v150 = (char *)v146 - (char *)v11 + 4;
                  if (v150 >= 5)
                  {
                    v151 = (((unint64_t)v150 >> 2) - 2) >> 1;
                    v152 = &v11[v151];
                    v153 = *v152;
                    v154 = *v146;
                    v155 = *v143;
                    v156 = *(unsigned __int16 *)(v155 + 2 * v154);
                    if (*(unsigned __int16 *)(v155 + 2 * v153) < v156)
                    {
                      do
                      {
                        v157 = v152;
                        *v146 = v153;
                        if (!v151)
                          break;
                        v151 = (v151 - 1) >> 1;
                        v152 = &v11[v151];
                        v153 = *v152;
                        v146 = v157;
                      }
                      while (*(unsigned __int16 *)(v155 + 2 * v153) < v156);
                      *v157 = v154;
                    }
                  }
                }
                v123 = v140-- <= 2;
              }
              while (!v123);
            }
            return result;
          }
          v14 = (unint64_t)v13 >> 1;
          v15 = &v11[(unint64_t)v13 >> 1];
          v16 = **a3;
          v17 = *v10;
          v18 = *(unsigned __int16 *)(v16 + 2 * v17);
          if ((unint64_t)v12 >= 0x201)
          {
            v19 = *v15;
            v20 = *v11;
            v21 = *(unsigned __int16 *)(v16 + 2 * v19);
            v22 = *(unsigned __int16 *)(v16 + 2 * v20);
            if (v21 >= v22)
            {
              if (v18 < v21)
              {
                *v15 = v17;
                *v10 = v19;
                v27 = *v15;
                v28 = *v11;
                if (*(unsigned __int16 *)(v16 + 2 * v27) < *(unsigned __int16 *)(v16 + 2 * v28))
                {
                  *v11 = v27;
                  *v15 = v28;
                }
              }
            }
            else
            {
              if (v18 >= v21)
              {
                *v11 = v19;
                *v15 = v20;
                v31 = *v10;
                if (*(unsigned __int16 *)(v16 + 2 * v31) >= v22)
                  goto LABEL_22;
                *v15 = v31;
              }
              else
              {
                *v11 = v17;
              }
              *v10 = v20;
            }
LABEL_22:
            v32 = &v11[v14];
            v35 = *(v32 - 1);
            v33 = v32 - 1;
            v34 = v35;
            v36 = v11[1];
            v37 = *(unsigned __int16 *)(v16 + 2 * v35);
            v38 = *(unsigned __int16 *)(v16 + 2 * v36);
            v39 = *(a2 - 2);
            v40 = *(unsigned __int16 *)(v16 + 2 * v39);
            if (v37 >= v38)
            {
              if (v40 < v37)
              {
                *v33 = v39;
                *(a2 - 2) = v34;
                v41 = *v33;
                v42 = v11[1];
                if (*(unsigned __int16 *)(v16 + 2 * v41) < *(unsigned __int16 *)(v16 + 2 * v42))
                {
                  v11[1] = v41;
                  *v33 = v42;
                }
              }
            }
            else
            {
              if (v40 >= v37)
              {
                v11[1] = v34;
                *v33 = v36;
                v44 = *(a2 - 2);
                if (*(unsigned __int16 *)(v16 + 2 * v44) >= v38)
                  goto LABEL_34;
                *v33 = v44;
              }
              else
              {
                v11[1] = v39;
              }
              *(a2 - 2) = v36;
            }
LABEL_34:
            v45 = &v11[v14];
            v48 = v45[1];
            v46 = v45 + 1;
            v47 = v48;
            v49 = v11[2];
            v50 = *(unsigned __int16 *)(v16 + 2 * v48);
            v51 = *(unsigned __int16 *)(v16 + 2 * v49);
            v52 = *(a2 - 3);
            v53 = *(unsigned __int16 *)(v16 + 2 * v52);
            if (v50 >= v51)
            {
              if (v53 < v50)
              {
                *v46 = v52;
                *(a2 - 3) = v47;
                v54 = *v46;
                v55 = v11[2];
                if (*(unsigned __int16 *)(v16 + 2 * v54) < *(unsigned __int16 *)(v16 + 2 * v55))
                {
                  v11[2] = v54;
                  *v46 = v55;
                }
              }
            }
            else
            {
              if (v53 >= v50)
              {
                v11[2] = v47;
                *v46 = v49;
                v56 = *(a2 - 3);
                if (*(unsigned __int16 *)(v16 + 2 * v56) >= v51)
                  goto LABEL_43;
                *v46 = v56;
              }
              else
              {
                v11[2] = v52;
              }
              *(a2 - 3) = v49;
            }
LABEL_43:
            v57 = *v15;
            v58 = *v33;
            v59 = *(unsigned __int16 *)(v16 + 2 * v57);
            v60 = *(unsigned __int16 *)(v16 + 2 * v58);
            v61 = *v46;
            v62 = *(unsigned __int16 *)(v16 + 2 * v61);
            if (v59 >= v60)
            {
              if (v62 >= v59)
                goto LABEL_50;
              *v15 = v61;
              *v46 = v57;
              v46 = v15;
              LODWORD(v57) = v58;
              if (v62 >= v60)
              {
                LODWORD(v57) = v61;
                goto LABEL_50;
              }
            }
            else if (v62 >= v59)
            {
              *v33 = v57;
              *v15 = v58;
              v33 = v15;
              LODWORD(v57) = v61;
              if (v62 >= v60)
              {
                LODWORD(v57) = v58;
LABEL_50:
                v63 = *v11;
                *v11 = v57;
                *v15 = v63;
                goto LABEL_51;
              }
            }
            *v33 = v61;
            *v46 = v58;
            goto LABEL_50;
          }
          v23 = *v11;
          v24 = *v15;
          v25 = *(unsigned __int16 *)(v16 + 2 * v23);
          v26 = *(unsigned __int16 *)(v16 + 2 * v24);
          if (v25 >= v26)
          {
            if (v18 < v25)
            {
              *v11 = v17;
              *v10 = v23;
              v29 = *v11;
              v30 = *v15;
              if (*(unsigned __int16 *)(v16 + 2 * v29) < *(unsigned __int16 *)(v16 + 2 * v30))
              {
                *v15 = v29;
                *v11 = v30;
              }
            }
          }
          else
          {
            if (v18 >= v25)
            {
              *v15 = v23;
              *v11 = v24;
              v43 = *v10;
              if (*(unsigned __int16 *)(v16 + 2 * v43) >= v26)
                goto LABEL_51;
              *v11 = v43;
            }
            else
            {
              *v15 = v17;
            }
            *v10 = v24;
          }
LABEL_51:
          --a4;
          v64 = *v11;
          if ((a5 & 1) == 0)
          {
            v65 = *(unsigned __int16 *)(v16 + 2 * v64);
            if (*(unsigned __int16 *)(v16 + 2 * *(v11 - 1)) < v65)
              goto LABEL_54;
            if (v65 >= *(unsigned __int16 *)(v16 + 2 * *v10))
            {
              v81 = v11 + 1;
              do
              {
                v11 = v81;
                if (v81 >= a2)
                  break;
                ++v81;
              }
              while (v65 >= *(unsigned __int16 *)(v16 + 2 * *v11));
            }
            else
            {
              do
              {
                v80 = v11[1];
                ++v11;
              }
              while (v65 >= *(unsigned __int16 *)(v16 + 2 * v80));
            }
            v82 = a2;
            if (v11 < a2)
            {
              v82 = a2;
              do
                v83 = *--v82;
              while (v65 < *(unsigned __int16 *)(v16 + 2 * v83));
            }
            if (v11 < v82)
            {
              v84 = *v11;
              v85 = *v82;
              do
              {
                *v11 = v85;
                *v82 = v84;
                do
                {
                  v86 = v11[1];
                  ++v11;
                  v84 = v86;
                }
                while (v65 >= *(unsigned __int16 *)(v16 + 2 * v86));
                do
                {
                  v87 = *--v82;
                  v85 = v87;
                }
                while (v65 < *(unsigned __int16 *)(v16 + 2 * v87));
              }
              while (v11 < v82);
            }
            v88 = v11 - 1;
            if (v11 - 1 != v9)
              *v9 = *v88;
            a5 = 0;
            *v88 = v64;
            continue;
          }
          v65 = *(unsigned __int16 *)(v16 + 2 * v64);
LABEL_54:
          v66 = v11;
          do
          {
            v67 = v66;
            v69 = v66[1];
            ++v66;
            v68 = v69;
          }
          while (*(unsigned __int16 *)(v16 + 2 * v69) < v65);
          v70 = a2;
          if (v67 == v11)
          {
            v70 = a2;
            do
            {
              if (v66 >= v70)
                break;
              v72 = *--v70;
            }
            while (*(unsigned __int16 *)(v16 + 2 * v72) >= v65);
          }
          else
          {
            do
              v71 = *--v70;
            while (*(unsigned __int16 *)(v16 + 2 * v71) >= v65);
          }
          if (v66 < v70)
          {
            v73 = *v70;
            v74 = v68;
            v75 = v66;
            v76 = v70;
            do
            {
              *v75 = v73;
              *v76 = v74;
              do
              {
                v67 = v75;
                v77 = v75[1];
                ++v75;
                v74 = v77;
              }
              while (*(unsigned __int16 *)(v16 + 2 * v77) < v65);
              do
              {
                v78 = *--v76;
                v73 = v78;
              }
              while (*(unsigned __int16 *)(v16 + 2 * v78) >= v65);
            }
            while (v75 < v76);
          }
          if (v67 != v11)
            *v11 = *v67;
          *v67 = v64;
          if (v66 < v70)
            goto LABEL_73;
          v79 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v11, v67, *a3);
          v11 = v67 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v67 + 1, a2, *a3);
          if (!(_DWORD)result)
          {
            if (v79)
              continue;
LABEL_73:
            result = std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(v9, v67, a3, a4, a5 & 1);
            a5 = 0;
            v11 = v67 + 1;
            continue;
          }
          a2 = v67;
          if (v79)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
        {
          if (v11 != a2)
          {
            v110 = v11 + 1;
            if (v11 + 1 != a2)
            {
              v111 = **a3;
              v112 = 4;
              v113 = v11;
              do
              {
                v116 = *v113;
                v115 = v113[1];
                v113 = v110;
                v117 = *(unsigned __int16 *)(v111 + 2 * v115);
                if (v117 < *(unsigned __int16 *)(v111 + 2 * v116))
                {
                  v118 = v112;
                  do
                  {
                    *(unsigned int *)((char *)v11 + v118) = v116;
                    v119 = v118 - 4;
                    if (v118 == 4)
                    {
                      v114 = v11;
                      goto LABEL_110;
                    }
                    v116 = *(unsigned int *)((char *)v11 + v118 - 8);
                    v118 -= 4;
                  }
                  while (v117 < *(unsigned __int16 *)(v111 + 2 * v116));
                  v114 = (unsigned int *)((char *)v11 + v119);
LABEL_110:
                  *v114 = v115;
                }
                v110 = v113 + 1;
                v112 += 4;
              }
              while (v113 + 1 != a2);
            }
          }
        }
        else if (v11 != a2)
        {
          v134 = v11 + 1;
          if (v11 + 1 != a2)
          {
            v135 = **a3;
            do
            {
              v137 = *v9;
              v136 = v9[1];
              v9 = v134;
              v138 = *(unsigned __int16 *)(v135 + 2 * v136);
              if (v138 < *(unsigned __int16 *)(v135 + 2 * v137))
              {
                v139 = v9;
                do
                {
                  *v139 = v137;
                  v137 = *(v139 - 2);
                  --v139;
                }
                while (v138 < *(unsigned __int16 *)(v135 + 2 * v137));
                *v139 = v136;
              }
              v134 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

{
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (unsigned int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (*(unsigned __int16 *)(**a3 + 2 * v20) < *(unsigned __int16 *)(**a3 + 2 * v21))
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, a2, a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, &v9[v13 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9 + 1, v15 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(unsigned __int16 *)(**a3 + 2 * *(v9 - 1)) >= *(unsigned __int16 *)(**a3 + 2 * *v9))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &>(v9, a2, a3);
            v9 = (unsigned int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &>(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v17 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,unsigned int *>(v9, a2, a2, a3);
        return result;
    }
  }
}

uint64_t geo::intern_map_allocator<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(uint64_t a1, int a2, _WORD *a3)
{
  unsigned int v4;
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  int v19;
  _Unwind_Exception *v20;
  _Unwind_Exception *v21;
  uint64_t v22;
  uint64_t (**v23)();
  int v24;
  uint64_t (***v25)();
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = 3 * a2;
  if ((3 * a2) > *(_DWORD *)(a1 + 36))
    return 0;
  v8 = *(_DWORD *)(a1 + 32);
  if (v8 < v4)
  {
    v9 = gss::Allocator::instance((gss::Allocator *)a1);
    v10 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 16))(v9, *(unsigned int *)(a1 + 36), 1);
    v11 = *(_DWORD *)(a1 + 36);
    v25 = &v23;
    v22 = v10;
    v23 = &off_1E42D5C38;
    v24 = v11;
    v12 = *(uint64_t **)(a1 + 8);
    if ((unint64_t)v12 >= *(_QWORD *)(a1 + 16))
    {
      v13 = std::vector<std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>>::__emplace_back_slow_path<std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>>((char **)a1, &v22);
    }
    else
    {
      v22 = 0;
      *v12 = v10;
      v12[4] = (uint64_t)(v12 + 1);
      ((void (*)(uint64_t (***)()))(*v25)[3])(v25);
      v13 = (char *)(v12 + 5);
    }
    *(_QWORD *)(a1 + 8) = v13;
    v14 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 28) = v14;
    *(_DWORD *)(a1 + 32) = v14;
    v15 = v22;
    v16 = v25;
    v22 = 0;
    if (v15)
    {
      if (!v25)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        v21 = v20;
        std::unique_ptr<unsigned char,std::function<void ()(unsigned char *)>>::~unique_ptr[abi:nn180100](&v22);
        _Unwind_Resume(v21);
      }
      (*v25)[6]();
      v16 = v25;
    }
    if (v16 == &v23)
    {
      v17 = 4;
      v16 = &v23;
    }
    else
    {
      if (!v16)
      {
LABEL_15:
        v8 = *(_DWORD *)(a1 + 32);
        goto LABEL_16;
      }
      v17 = 5;
    }
    (*v16)[v17]();
    goto LABEL_15;
  }
LABEL_16:
  v18 = *(unsigned int *)(a1 + 24);
  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 40) + v18;
  v19 = *(_DWORD *)(a1 + 28) - a2;
  *(_DWORD *)(a1 + 24) = v18 + 2 * a2;
  *(_DWORD *)(a1 + 28) = v19;
  *a3 = v19 - v18;
  *(_DWORD *)(a1 + 32) = v8 - v4;
  return result;
}

void geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(uint64_t a1, _WORD *__dst, _DWORD *a3, int a4)
{
  unint64_t v4;
  _WORD *v6;
  int32x4_t *v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  unint64_t v12;
  int32x4_t v13;
  int32x4_t *v14;
  int32x4_t v15;
  int32x4_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int32x4_t *v21;
  unsigned int v22;
  uint64_t *v23;

  v4 = *(unsigned __int16 *)(a1 + 10);
  if (!*(_WORD *)(a1 + 10))
    return;
  v6 = __dst;
  if (a4)
  {
    v8 = (int32x4_t *)operator new(4 * v4);
    bzero(v8, 4 * v4);
    v9 = (unsigned int *)v8 + v4;
    if (4 * v4 - 4 >= 0x1C)
    {
      v12 = ((4 * v4 - 4) >> 2) + 1;
      v10 = v12 & 0x7FFFFFFFFFFFFFF8;
      v13 = (int32x4_t)xmmword_19FFB2E90;
      v14 = v8 + 1;
      v15.i64[0] = 0x400000004;
      v15.i64[1] = 0x400000004;
      v16.i64[0] = 0x800000008;
      v16.i64[1] = 0x800000008;
      v17 = v12 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v14[-1] = v13;
        *v14 = vaddq_s32(v13, v15);
        v13 = vaddq_s32(v13, v16);
        v14 += 2;
        v17 -= 8;
      }
      while (v17);
      if (v12 == v10)
        goto LABEL_13;
      v11 = (unsigned int *)v8 + (v12 & 0x7FFFFFFFFFFFFFF8);
    }
    else
    {
      LODWORD(v10) = 0;
      v11 = (unsigned int *)v8;
    }
    do
    {
      *v11++ = v10;
      LODWORD(v10) = v10 + 1;
    }
    while (v11 != v9);
LABEL_13:
    v23 = (uint64_t *)a1;
    std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned int *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>((uint64_t)v8, v9, &v23, 126 - 2 * __clz(v4), 1);
    v18 = *(unsigned __int16 *)(a1 + 10);
    if (*(_WORD *)(a1 + 10))
    {
      v19 = *(_QWORD *)a1;
      v20 = *(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 8);
      v21 = v8;
      do
      {
        v22 = v21->i32[0];
        v21 = (int32x4_t *)((char *)v21 + 4);
        *v6++ = *(_WORD *)(v19 + 2 * v22);
        *a3++ = *(_DWORD *)(v20 + 4 * v22);
        --v18;
      }
      while (v18);
    }
    *(_BYTE *)(a1 + 15) = 1;
    operator delete(v8);
    return;
  }
  memmove(__dst, *(const void **)a1, 2 * v4);
  if (*(_WORD *)(a1 + 10))
    memmove(a3, (const void *)(*(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 8)), 4 * *(unsigned __int16 *)(a1 + 10));
}

{
  std::vector<unsigned int>::size_type v5;
  std::vector<unsigned int>::pointer begin;
  unsigned int *end;
  unsigned int v10;
  std::vector<unsigned int>::pointer v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  std::vector<unsigned int>::pointer v18;
  unsigned int v19;
  std::vector<unsigned int> __p;
  uint64_t *v21;

  v5 = *(unsigned __int16 *)(a1 + 10);
  if (*(_WORD *)(a1 + 10))
  {
    if (a4)
    {
      std::vector<unsigned int>::vector(&__p, v5);
      begin = __p.__begin_;
      end = __p.__end_;
      if (__p.__begin_ != __p.__end_)
      {
        v10 = 0;
        v11 = __p.__begin_;
        do
          *v11++ = v10++;
        while (v11 != end);
      }
      v12 = 126 - 2 * __clz(end - begin);
      v21 = (uint64_t *)a1;
      if (end == begin)
        v13 = 0;
      else
        v13 = v12;
      std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned int *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>((uint64_t)begin, end, &v21, v13, 1);
      v14 = *(unsigned __int16 *)(a1 + 10);
      v15 = __p.__begin_;
      if (*(_WORD *)(a1 + 10))
      {
        v16 = *(_QWORD *)a1;
        v17 = *(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 8);
        v18 = __p.__begin_;
        do
        {
          v19 = *v18++;
          *__dst++ = *(_WORD *)(v16 + 2 * v19);
          *a3++ = *(_DWORD *)(v17 + 4 * v19);
          --v14;
        }
        while (v14);
        *(_BYTE *)(a1 + 15) = 1;
      }
      else
      {
        *(_BYTE *)(a1 + 15) = 1;
        if (!v15)
          return;
      }
      __p.__end_ = v15;
      operator delete(v15);
    }
    else
    {
      memmove(__dst, *(const void **)a1, 2 * v5);
      if (*(_WORD *)(a1 + 10))
        memmove(a3, (const void *)(*(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 8)), 4 * *(unsigned __int16 *)(a1 + 10));
    }
  }
}

void sub_19F0424B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t gss::rgba8Decoder<gss::PropertyID>(uint64_t *a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  NSObject *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int16x4_t v37;
  float v38;
  float32x2_t v39;
  float v40;
  unsigned __int16 v41;
  int16x4_t v42;
  uint8_t buf[4];
  const char *v44;
  _BYTE v45[6];
  __int16 v46;
  const char *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v10 = gss::idForIndex<gss::PropertyID>(a4);
  v41 = v10;
  if (v10 == 482)
    return 1;
  if (a3 == 32)
  {
    *(_DWORD *)buf = 0;
    v12 = a1[1];
    v13 = a1[2];
    v14 = *((_BYTE *)a1 + 24);
    v15 = v13 + 5;
    if (!v14)
      v15 = v13 + 4;
    if (v12 >= v15)
    {
      v26 = *a1;
      if (*((_BYTE *)a1 + 24))
      {
        v27 = 0;
        v28 = v26 + v13;
        v29 = v13 + 1;
        do
        {
          if (v29 + v27 >= v12)
            v30 = 0;
          else
            v30 = *(unsigned __int8 *)(v28 + v27 + 1);
          v31 = ((v30 & (0xFFFF << (8 - v14))) >> (8 - v14)) | ((((1 << (8 - v14)) + 255) & *(unsigned __int8 *)(v28 + v27)) << v14);
          a1[2] = v29 + v27;
          buf[v27++] = v31;
        }
        while (v27 != 4);
        v32 = *(_DWORD *)buf;
      }
      else
      {
        v32 = *(_DWORD *)(v26 + v13);
        a1[2] = v13 + 4;
      }
      *(_WORD *)buf = v10;
      buf[2] = 0;
      geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v44);
      v33 = bswap32(v32);
      v38 = (float)v33 / 255.0;
      v39 = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v33), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      v40 = (float)HIBYTE(v33) / 255.0;
      *(_DWORD *)buf = geo::colorTransform<geo::ReverseGammaCorrection>(geo::reverseSRGBGammaCorrection, &v38);
      v44 = (const char *)__PAIR64__(v35, v34);
      *(_DWORD *)v45 = v36;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)buf, &v42);
      v37 = v42;
      *(int16x4_t *)geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 48, &v41) = v37;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v16 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v44 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      *(_WORD *)v45 = 1024;
      *(_DWORD *)&v45[2] = 67;
      v46 = 2082;
      v47 = "Could not read RGBA color.";
      _os_log_impl(&dword_19F029000, v16, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)":", 1);
    v18 = (_QWORD *)std::ostream::operator<<();
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" STYL Parse Error Here: ", 24);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Could not read RGBA color.", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v21 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v44 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      *(_WORD *)v45 = 1024;
      *(_DWORD *)&v45[2] = 66;
      v46 = 2082;
      v47 = "Found RGBA color with strange bit count.";
      _os_log_impl(&dword_19F029000, v21, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)":", 1);
    v23 = (_QWORD *)std::ostream::operator<<();
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" STYL Parse Error Here: ", 24);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Found RGBA color with strange bit count.", 40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::idForIndex<gss::PropertyID>(unsigned int a1)
{
  if (a1 > 0x1CE)
    return 482;
  else
    return *(unsigned __int16 *)&asc_1A00867B2[2 * (__int16)a1];
}

unint64_t geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned long long> const*>(unint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;

  if (a2 != a3)
  {
    v3 = result;
    if (!*(_BYTE *)(result + 14))
    {
      v5 = a2;
      do
      {
        result = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)v3, (unsigned __int16 *)v5);
        if ((_DWORD)result == *(unsigned __int16 *)(v3 + 10))
        {
          result = geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::isSpaceAvailable((unsigned __int16 *)v3);
          if (!(_DWORD)result)
            return result;
          v6 = *(unsigned __int16 *)(v3 + 10);
          v7 = *(unsigned __int16 **)v3;
          *(_WORD *)(*(_QWORD *)v3 + 2 * v6) = *(_WORD *)v5;
          *(_QWORD *)((char *)&v7[4 * v6] + *(unsigned __int16 *)(v3 + 8)) = *(_QWORD *)(v5 + 8);
          *(_WORD *)(v3 + 10) = v6 + 1;
          *(_BYTE *)(v3 + 15) = 0;
        }
        v5 += 16;
      }
      while (v5 != a3);
    }
  }
  return result;
}

uint64_t geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](unint64_t a1, unsigned __int16 *a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v4 = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)a1, a2);
  if (v4 == *(unsigned __int16 *)(a1 + 10))
  {
    v7 = *a2;
    v8 = 0;
    geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned long long> const*>(a1, (uint64_t)&v7, (uint64_t)&v9);
    v5 = *(unsigned __int16 *)(a1 + 10) - 1;
  }
  else
  {
    v5 = v4;
  }
  return *(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 8) + 8 * v5;
}

uint64_t geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::isSpaceAvailable(unsigned __int16 *a1)
{
  int v1;
  unsigned int v3;
  __int16 v4;
  unsigned __int16 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t result;

  v1 = a1[5];
  if (v1 != a1[6])
    return 1;
  if (v1 == 0xFFFF)
    return 0;
  v3 = 2 * (v1 & 0x7FFF);
  if (v3 <= 4)
    v4 = 4;
  else
    v4 = v3;
  v5 = ((2 * v4) & 0xFFF8) + 8;
  v6 = gss::Allocator::instance((gss::Allocator *)a1);
  v7 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 16))(v6, (unsigned __int16)(v5 + 8 * v4) & 0xFFF8, 1);
  v8 = v7;
  if (*(_QWORD *)a1)
  {
    if (a1[5])
    {
      v7 = (char *)memmove(v7, *(const void **)a1, 2 * a1[5]);
      if (a1[5])
        v7 = (char *)memmove(&v8[v5], (const void *)(*(_QWORD *)a1 + a1[4]), 8 * a1[5]);
    }
    v9 = gss::Allocator::instance((gss::Allocator *)v7);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 40))(v9, *(_QWORD *)a1, a1[6]);
  }
  a1[6] = v4;
  *(_QWORD *)a1 = v8;
  result = 1;
  a1[4] = v5;
  return result;
}

{
  int v1;
  unsigned int v2;
  __int16 v3;

  v1 = a1[5];
  if (v1 != a1[6])
    return 1;
  if (v1 != 0xFFFF)
  {
    v2 = 2 * (v1 & 0x7FFF);
    if (v2 <= 4)
      v3 = 4;
    else
      v3 = v2;
    geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::reallocate((gss::Allocator *)a1, v3, 0);
    return 1;
  }
  return 0;
}

int16x4_t geo::_wordColor<float,4,(geo::ColorSpace)0>@<D0>(float32x4_t *a1@<X0>, int16x4_t *a2@<X8>)
{
  int16x4_t result;

  result = vmovn_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(*a1, (float32x4_t)vdupq_n_s32(0x477FFF00u))));
  *a2 = result;
  return result;
}

float geo::colorTransform<geo::ReverseGammaCorrection>(float *a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a1[2];
  v7 = a1[3] * v6;
  if (*a2 >= v7)
    v8 = powf((float)(v3 + *a1) / (float)(*a1 + 1.0), a1[1]);
  else
    v8 = v3 / v6;
  if (v4 >= v7)
    powf((float)(v4 + *a1) / (float)(*a1 + 1.0), a1[1]);
  if (v5 >= v7)
    powf((float)(v5 + *a1) / (float)(*a1 + 1.0), a1[1]);
  return v8;
}

uint64_t geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](unint64_t a1, unsigned __int16 *a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned __int16 v7;
  char v8;
  uint64_t v9;

  v4 = geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::keyIndex((unsigned __int16 **)a1, a2);
  if (v4 == *(unsigned __int16 *)(a1 + 10))
  {
    v7 = *a2;
    v8 = 0;
    geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a1, (uint64_t)&v7, (uint64_t)&v9);
    v5 = *(unsigned __int16 *)(a1 + 10) - 1;
  }
  else
  {
    v5 = v4;
  }
  return *(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 8) + v5;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned int *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  BOOL v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  _DWORD *v98;
  uint64_t v99;
  _DWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int *v108;
  uint64_t v109;
  unsigned int *v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int *v113;
  unsigned int *v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  int64_t v120;
  uint64_t *v121;
  int64_t v122;
  BOOL v123;
  uint64_t v124;
  unsigned int *v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int *v128;
  uint64_t v129;
  unsigned int *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t *v143;
  unsigned int *v144;
  uint64_t v145;
  unsigned int *v146;
  unsigned int *v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unsigned int *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  unsigned int *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = a2 - 1;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v89 = *v10;
        v90 = *v11;
        if (*(unsigned __int16 *)(**a3 + 2 * v89) < *(unsigned __int16 *)(**a3 + 2 * v90))
        {
          *v11 = v89;
          *v10 = v90;
        }
        return result;
      case 3:
        v91 = *v11;
        v92 = v11[1];
        v93 = **a3;
        v94 = *(unsigned __int16 *)(v93 + 2 * v92);
        v95 = *(unsigned __int16 *)(v93 + 2 * v91);
        v96 = *v10;
        v97 = *(unsigned __int16 *)(v93 + 2 * v96);
        if (v94 >= v95)
        {
          if (v97 < v94)
          {
            v11[1] = v96;
            *v10 = v92;
            v133 = *v11;
            v132 = v11[1];
            if (*(unsigned __int16 *)(v93 + 2 * v132) < *(unsigned __int16 *)(v93 + 2 * v133))
            {
              *v11 = v132;
              v11[1] = v133;
            }
          }
        }
        else if (v97 >= v94)
        {
          *v11 = v92;
          v11[1] = v91;
          v158 = *v10;
          if (*(unsigned __int16 *)(v93 + 2 * v158) < v95)
          {
            v11[1] = v158;
            *v10 = v91;
          }
        }
        else
        {
          *v11 = v96;
          *v10 = v91;
        }
        return result;
      case 4:
        v98 = v11 + 1;
        v99 = v11[1];
        v100 = v11 + 2;
        v101 = v11[2];
        v102 = *v11;
        v103 = **a3;
        v104 = *(unsigned __int16 *)(v103 + 2 * v99);
        v105 = *(unsigned __int16 *)(v103 + 2 * v102);
        v106 = v101;
        v107 = *(unsigned __int16 *)(v103 + 2 * v101);
        if (v104 >= v105)
        {
          if (v107 < v104)
          {
            v108 = v11;
            *v98 = v101;
            *v100 = v99;
            result = (uint64_t)(v11 + 1);
            v109 = v99;
            v101 = v99;
            if (v107 >= v105)
              goto LABEL_171;
            goto LABEL_169;
          }
        }
        else
        {
          if (v107 < v104)
          {
            v108 = v11;
            result = (uint64_t)(v11 + 2);
            v109 = *v11;
            LODWORD(v99) = *v11;
LABEL_169:
            *v108 = v106;
            *(_DWORD *)result = v102;
            v101 = v109;
            goto LABEL_171;
          }
          v108 = v11 + 1;
          *v11 = v99;
          v11[1] = v102;
          result = (uint64_t)(v11 + 2);
          v109 = v102;
          LODWORD(v99) = v102;
          if (v107 < v105)
            goto LABEL_169;
        }
        LODWORD(v99) = v101;
LABEL_171:
        v159 = *v10;
        if (*(unsigned __int16 *)(v103 + 2 * v159) < *(unsigned __int16 *)(v103 + 2 * v101))
        {
          *v100 = v159;
          *v10 = v99;
          v160 = *v100;
          v161 = *v98;
          v162 = *(unsigned __int16 *)(v103 + 2 * v160);
          if (v162 < *(unsigned __int16 *)(v103 + 2 * v161))
          {
            v11[1] = v160;
            v11[2] = v161;
            v163 = *v11;
            if (v162 < *(unsigned __int16 *)(v103 + 2 * v163))
            {
              *v11 = v160;
              v11[1] = v163;
            }
          }
        }
        return result;
      case 5:
        return (uint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, **a3);
      default:
        if (v12 > 95)
        {
          if (!a4)
          {
            if (v11 != a2)
            {
              v120 = (unint64_t)(v13 - 2) >> 1;
              v121 = *a3;
              v122 = v120;
              do
              {
                if (v120 >= v122)
                {
                  v124 = (2 * v122) | 1;
                  v125 = &v11[v124];
                  v126 = *v125;
                  if (2 * v122 + 2 >= v13)
                  {
                    v127 = *v121;
                  }
                  else
                  {
                    v127 = *v121;
                    if (*(unsigned __int16 *)(*v121 + 2 * v126) < *(unsigned __int16 *)(*v121 + 2 * v125[1]))
                    {
                      LODWORD(v126) = v125[1];
                      ++v125;
                      v124 = 2 * v122 + 2;
                    }
                  }
                  v128 = &v11[v122];
                  v129 = *v128;
                  result = *(unsigned __int16 *)(v127 + 2 * v129);
                  if (*(unsigned __int16 *)(v127 + 2 * v126) >= result)
                  {
                    do
                    {
                      v130 = v125;
                      *v128 = v126;
                      if (v120 < v124)
                        break;
                      v131 = (2 * v124) | 1;
                      v125 = &v11[v131];
                      v124 = 2 * v124 + 2;
                      v126 = *v125;
                      if (v124 < v13)
                      {
                        if (*(unsigned __int16 *)(v127 + 2 * v126) >= *(unsigned __int16 *)(v127 + 2 * v125[1]))
                        {
                          v124 = v131;
                        }
                        else
                        {
                          LODWORD(v126) = v125[1];
                          ++v125;
                        }
                      }
                      else
                      {
                        v124 = v131;
                      }
                      v128 = v130;
                    }
                    while (*(unsigned __int16 *)(v127 + 2 * v126) >= result);
                    *v130 = v129;
                  }
                }
                v123 = v122-- <= 0;
              }
              while (!v123);
              v140 = (unint64_t)v12 >> 2;
              do
              {
                v141 = 0;
                v142 = *v11;
                v143 = *a3;
                v144 = v11;
                do
                {
                  v147 = &v144[v141];
                  v148 = v147[1];
                  v146 = v147 + 1;
                  v145 = v148;
                  v149 = (2 * v141) | 1;
                  v141 = 2 * v141 + 2;
                  if (v141 < v140)
                  {
                    result = v146[1];
                    if (*(unsigned __int16 *)(*v143 + 2 * v145) >= *(unsigned __int16 *)(*v143 + 2 * result))
                    {
                      v141 = v149;
                    }
                    else
                    {
                      LODWORD(v145) = v146[1];
                      ++v146;
                    }
                  }
                  else
                  {
                    v141 = v149;
                  }
                  *v144 = v145;
                  v144 = v146;
                }
                while (v141 <= (uint64_t)((unint64_t)(v140 - 2) >> 1));
                if (v146 == --a2)
                {
                  *v146 = v142;
                }
                else
                {
                  *v146 = *a2;
                  *a2 = v142;
                  v150 = (char *)v146 - (char *)v11 + 4;
                  if (v150 >= 5)
                  {
                    v151 = (((unint64_t)v150 >> 2) - 2) >> 1;
                    v152 = &v11[v151];
                    v153 = *v152;
                    v154 = *v146;
                    v155 = *v143;
                    v156 = *(unsigned __int16 *)(v155 + 2 * v154);
                    if (*(unsigned __int16 *)(v155 + 2 * v153) < v156)
                    {
                      do
                      {
                        v157 = v152;
                        *v146 = v153;
                        if (!v151)
                          break;
                        v151 = (v151 - 1) >> 1;
                        v152 = &v11[v151];
                        v153 = *v152;
                        v146 = v157;
                      }
                      while (*(unsigned __int16 *)(v155 + 2 * v153) < v156);
                      *v157 = v154;
                    }
                  }
                }
                v123 = v140-- <= 2;
              }
              while (!v123);
            }
            return result;
          }
          v14 = (unint64_t)v13 >> 1;
          v15 = &v11[(unint64_t)v13 >> 1];
          v16 = **a3;
          v17 = *v10;
          v18 = *(unsigned __int16 *)(v16 + 2 * v17);
          if ((unint64_t)v12 >= 0x201)
          {
            v19 = *v15;
            v20 = *v11;
            v21 = *(unsigned __int16 *)(v16 + 2 * v19);
            v22 = *(unsigned __int16 *)(v16 + 2 * v20);
            if (v21 >= v22)
            {
              if (v18 < v21)
              {
                *v15 = v17;
                *v10 = v19;
                v27 = *v15;
                v28 = *v11;
                if (*(unsigned __int16 *)(v16 + 2 * v27) < *(unsigned __int16 *)(v16 + 2 * v28))
                {
                  *v11 = v27;
                  *v15 = v28;
                }
              }
            }
            else
            {
              if (v18 >= v21)
              {
                *v11 = v19;
                *v15 = v20;
                v31 = *v10;
                if (*(unsigned __int16 *)(v16 + 2 * v31) >= v22)
                  goto LABEL_22;
                *v15 = v31;
              }
              else
              {
                *v11 = v17;
              }
              *v10 = v20;
            }
LABEL_22:
            v32 = &v11[v14];
            v35 = *(v32 - 1);
            v33 = v32 - 1;
            v34 = v35;
            v36 = v11[1];
            v37 = *(unsigned __int16 *)(v16 + 2 * v35);
            v38 = *(unsigned __int16 *)(v16 + 2 * v36);
            v39 = *(a2 - 2);
            v40 = *(unsigned __int16 *)(v16 + 2 * v39);
            if (v37 >= v38)
            {
              if (v40 < v37)
              {
                *v33 = v39;
                *(a2 - 2) = v34;
                v41 = *v33;
                v42 = v11[1];
                if (*(unsigned __int16 *)(v16 + 2 * v41) < *(unsigned __int16 *)(v16 + 2 * v42))
                {
                  v11[1] = v41;
                  *v33 = v42;
                }
              }
            }
            else
            {
              if (v40 >= v37)
              {
                v11[1] = v34;
                *v33 = v36;
                v44 = *(a2 - 2);
                if (*(unsigned __int16 *)(v16 + 2 * v44) >= v38)
                  goto LABEL_34;
                *v33 = v44;
              }
              else
              {
                v11[1] = v39;
              }
              *(a2 - 2) = v36;
            }
LABEL_34:
            v45 = &v11[v14];
            v48 = v45[1];
            v46 = v45 + 1;
            v47 = v48;
            v49 = v11[2];
            v50 = *(unsigned __int16 *)(v16 + 2 * v48);
            v51 = *(unsigned __int16 *)(v16 + 2 * v49);
            v52 = *(a2 - 3);
            v53 = *(unsigned __int16 *)(v16 + 2 * v52);
            if (v50 >= v51)
            {
              if (v53 < v50)
              {
                *v46 = v52;
                *(a2 - 3) = v47;
                v54 = *v46;
                v55 = v11[2];
                if (*(unsigned __int16 *)(v16 + 2 * v54) < *(unsigned __int16 *)(v16 + 2 * v55))
                {
                  v11[2] = v54;
                  *v46 = v55;
                }
              }
            }
            else
            {
              if (v53 >= v50)
              {
                v11[2] = v47;
                *v46 = v49;
                v56 = *(a2 - 3);
                if (*(unsigned __int16 *)(v16 + 2 * v56) >= v51)
                  goto LABEL_43;
                *v46 = v56;
              }
              else
              {
                v11[2] = v52;
              }
              *(a2 - 3) = v49;
            }
LABEL_43:
            v57 = *v15;
            v58 = *v33;
            v59 = *(unsigned __int16 *)(v16 + 2 * v57);
            v60 = *(unsigned __int16 *)(v16 + 2 * v58);
            v61 = *v46;
            v62 = *(unsigned __int16 *)(v16 + 2 * v61);
            if (v59 >= v60)
            {
              if (v62 >= v59)
                goto LABEL_50;
              *v15 = v61;
              *v46 = v57;
              v46 = v15;
              LODWORD(v57) = v58;
              if (v62 >= v60)
              {
                LODWORD(v57) = v61;
                goto LABEL_50;
              }
            }
            else if (v62 >= v59)
            {
              *v33 = v57;
              *v15 = v58;
              v33 = v15;
              LODWORD(v57) = v61;
              if (v62 >= v60)
              {
                LODWORD(v57) = v58;
LABEL_50:
                v63 = *v11;
                *v11 = v57;
                *v15 = v63;
                goto LABEL_51;
              }
            }
            *v33 = v61;
            *v46 = v58;
            goto LABEL_50;
          }
          v23 = *v11;
          v24 = *v15;
          v25 = *(unsigned __int16 *)(v16 + 2 * v23);
          v26 = *(unsigned __int16 *)(v16 + 2 * v24);
          if (v25 >= v26)
          {
            if (v18 < v25)
            {
              *v11 = v17;
              *v10 = v23;
              v29 = *v11;
              v30 = *v15;
              if (*(unsigned __int16 *)(v16 + 2 * v29) < *(unsigned __int16 *)(v16 + 2 * v30))
              {
                *v15 = v29;
                *v11 = v30;
              }
            }
          }
          else
          {
            if (v18 >= v25)
            {
              *v15 = v23;
              *v11 = v24;
              v43 = *v10;
              if (*(unsigned __int16 *)(v16 + 2 * v43) >= v26)
                goto LABEL_51;
              *v11 = v43;
            }
            else
            {
              *v15 = v17;
            }
            *v10 = v24;
          }
LABEL_51:
          --a4;
          v64 = *v11;
          if ((a5 & 1) == 0)
          {
            v65 = *(unsigned __int16 *)(v16 + 2 * v64);
            if (*(unsigned __int16 *)(v16 + 2 * *(v11 - 1)) < v65)
              goto LABEL_54;
            if (v65 >= *(unsigned __int16 *)(v16 + 2 * *v10))
            {
              v81 = v11 + 1;
              do
              {
                v11 = v81;
                if (v81 >= a2)
                  break;
                ++v81;
              }
              while (v65 >= *(unsigned __int16 *)(v16 + 2 * *v11));
            }
            else
            {
              do
              {
                v80 = v11[1];
                ++v11;
              }
              while (v65 >= *(unsigned __int16 *)(v16 + 2 * v80));
            }
            v82 = a2;
            if (v11 < a2)
            {
              v82 = a2;
              do
                v83 = *--v82;
              while (v65 < *(unsigned __int16 *)(v16 + 2 * v83));
            }
            if (v11 < v82)
            {
              v84 = *v11;
              v85 = *v82;
              do
              {
                *v11 = v85;
                *v82 = v84;
                do
                {
                  v86 = v11[1];
                  ++v11;
                  v84 = v86;
                }
                while (v65 >= *(unsigned __int16 *)(v16 + 2 * v86));
                do
                {
                  v87 = *--v82;
                  v85 = v87;
                }
                while (v65 < *(unsigned __int16 *)(v16 + 2 * v87));
              }
              while (v11 < v82);
            }
            v88 = v11 - 1;
            if (v11 - 1 != v9)
              *v9 = *v88;
            a5 = 0;
            *v88 = v64;
            continue;
          }
          v65 = *(unsigned __int16 *)(v16 + 2 * v64);
LABEL_54:
          v66 = v11;
          do
          {
            v67 = v66;
            v69 = v66[1];
            ++v66;
            v68 = v69;
          }
          while (*(unsigned __int16 *)(v16 + 2 * v69) < v65);
          v70 = a2;
          if (v67 == v11)
          {
            v70 = a2;
            do
            {
              if (v66 >= v70)
                break;
              v72 = *--v70;
            }
            while (*(unsigned __int16 *)(v16 + 2 * v72) >= v65);
          }
          else
          {
            do
              v71 = *--v70;
            while (*(unsigned __int16 *)(v16 + 2 * v71) >= v65);
          }
          if (v66 < v70)
          {
            v73 = *v70;
            v74 = v68;
            v75 = v66;
            v76 = v70;
            do
            {
              *v75 = v73;
              *v76 = v74;
              do
              {
                v67 = v75;
                v77 = v75[1];
                ++v75;
                v74 = v77;
              }
              while (*(unsigned __int16 *)(v16 + 2 * v77) < v65);
              do
              {
                v78 = *--v76;
                v73 = v78;
              }
              while (*(unsigned __int16 *)(v16 + 2 * v78) >= v65);
            }
            while (v75 < v76);
          }
          if (v67 != v11)
            *v11 = *v67;
          *v67 = v64;
          if (v66 < v70)
            goto LABEL_73;
          v79 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned int *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v11, v67, *a3);
          v11 = v67 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned int *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v67 + 1, a2, *a3);
          if (!(_DWORD)result)
          {
            if (v79)
              continue;
LABEL_73:
            result = std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned int *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(v9, v67, a3, a4, a5 & 1);
            a5 = 0;
            v11 = v67 + 1;
            continue;
          }
          a2 = v67;
          if (v79)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
        {
          if (v11 != a2)
          {
            v110 = v11 + 1;
            if (v11 + 1 != a2)
            {
              v111 = **a3;
              v112 = 4;
              v113 = v11;
              do
              {
                v116 = *v113;
                v115 = v113[1];
                v113 = v110;
                v117 = *(unsigned __int16 *)(v111 + 2 * v115);
                if (v117 < *(unsigned __int16 *)(v111 + 2 * v116))
                {
                  v118 = v112;
                  do
                  {
                    *(unsigned int *)((char *)v11 + v118) = v116;
                    v119 = v118 - 4;
                    if (v118 == 4)
                    {
                      v114 = v11;
                      goto LABEL_110;
                    }
                    v116 = *(unsigned int *)((char *)v11 + v118 - 8);
                    v118 -= 4;
                  }
                  while (v117 < *(unsigned __int16 *)(v111 + 2 * v116));
                  v114 = (unsigned int *)((char *)v11 + v119);
LABEL_110:
                  *v114 = v115;
                }
                v110 = v113 + 1;
                v112 += 4;
              }
              while (v113 + 1 != a2);
            }
          }
        }
        else if (v11 != a2)
        {
          v134 = v11 + 1;
          if (v11 + 1 != a2)
          {
            v135 = **a3;
            do
            {
              v137 = *v9;
              v136 = v9[1];
              v9 = v134;
              v138 = *(unsigned __int16 *)(v135 + 2 * v136);
              if (v138 < *(unsigned __int16 *)(v135 + 2 * v137))
              {
                v139 = v9;
                do
                {
                  *v139 = v137;
                  v137 = *(v139 - 2);
                  --v139;
                }
                while (v138 < *(unsigned __int16 *)(v135 + 2 * v137));
                *v139 = v136;
              }
              v134 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

{
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (unsigned int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (*(unsigned __int16 *)(**a3 + 2 * v20) < *(unsigned __int16 *)(**a3 + 2 * v21))
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, a2, a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, &v9[v13 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9 + 1, v15 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(unsigned __int16 *)(**a3 + 2 * *(v9 - 1)) >= *(unsigned __int16 *)(**a3 + 2 * *v9))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &>(v9, a2, a3);
            v9 = (unsigned int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &>(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned int *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned int *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v17 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned int *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,unsigned int *>(v9, a2, a2, a3);
        return result;
    }
  }
}

_WORD *geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::reallocate(gss::Allocator *a1, __int16 a2, int a3)
{
  uint64_t v6;
  unsigned __int16 v7;
  _WORD *result;
  _WORD *v9;
  gss::Allocator *v10;
  uint64_t v11;

  v6 = gss::Allocator::instance(a1);
  v7 = ((2 * a2) & 0xFFF8) + 8;
  result = (_WORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 16))(v6, (unsigned __int16)(v7 + 8 * a2), 1);
  v9 = result;
  if (*(_QWORD *)a1)
  {
    geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent((uint64_t)a1, result, (_WORD *)((char *)result + v7), a3);
    v11 = gss::Allocator::instance(v10);
    result = (_WORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 40))(v11, *(_QWORD *)a1, *((unsigned __int16 *)a1 + 6));
  }
  *((_WORD *)a1 + 6) = a2;
  *(_QWORD *)a1 = v9;
  *((_WORD *)a1 + 4) = v7;
  return result;
}

void geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(uint64_t a1, _WORD *__dst, _QWORD *a3, int a4)
{
  unint64_t v4;
  _WORD *v6;
  int32x4_t *v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  unint64_t v12;
  int32x4_t v13;
  int32x4_t *v14;
  int32x4_t v15;
  int32x4_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int32x4_t *v21;
  unsigned int v22;
  uint64_t *v23;

  v4 = *(unsigned __int16 *)(a1 + 10);
  if (!*(_WORD *)(a1 + 10))
    return;
  v6 = __dst;
  if (a4)
  {
    v8 = (int32x4_t *)operator new(4 * v4);
    bzero(v8, 4 * v4);
    v9 = (unsigned int *)v8 + v4;
    if (4 * v4 - 4 >= 0x1C)
    {
      v12 = ((4 * v4 - 4) >> 2) + 1;
      v10 = v12 & 0x7FFFFFFFFFFFFFF8;
      v13 = (int32x4_t)xmmword_19FFB2E90;
      v14 = v8 + 1;
      v15.i64[0] = 0x400000004;
      v15.i64[1] = 0x400000004;
      v16.i64[0] = 0x800000008;
      v16.i64[1] = 0x800000008;
      v17 = v12 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v14[-1] = v13;
        *v14 = vaddq_s32(v13, v15);
        v13 = vaddq_s32(v13, v16);
        v14 += 2;
        v17 -= 8;
      }
      while (v17);
      if (v12 == v10)
        goto LABEL_13;
      v11 = (unsigned int *)v8 + (v12 & 0x7FFFFFFFFFFFFFF8);
    }
    else
    {
      LODWORD(v10) = 0;
      v11 = (unsigned int *)v8;
    }
    do
    {
      *v11++ = v10;
      LODWORD(v10) = v10 + 1;
    }
    while (v11 != v9);
LABEL_13:
    v23 = (uint64_t *)a1;
    std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>((uint64_t)v8, v9, &v23, 126 - 2 * __clz(v4), 1);
    v18 = *(unsigned __int16 *)(a1 + 10);
    if (*(_WORD *)(a1 + 10))
    {
      v19 = *(_QWORD *)a1;
      v20 = *(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 8);
      v21 = v8;
      do
      {
        v22 = v21->i32[0];
        v21 = (int32x4_t *)((char *)v21 + 4);
        *v6++ = *(_WORD *)(v19 + 2 * v22);
        *a3++ = *(_QWORD *)(v20 + 8 * v22);
        --v18;
      }
      while (v18);
    }
    *(_BYTE *)(a1 + 15) = 1;
    operator delete(v8);
    return;
  }
  memmove(__dst, *(const void **)a1, 2 * v4);
  if (*(_WORD *)(a1 + 10))
    memmove(a3, (const void *)(*(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 8)), 8 * *(unsigned __int16 *)(a1 + 10));
}

{
  std::vector<unsigned int>::size_type v5;
  std::vector<unsigned int>::pointer begin;
  unsigned int *end;
  unsigned int v10;
  std::vector<unsigned int>::pointer v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  std::vector<unsigned int>::pointer v18;
  unsigned int v19;
  std::vector<unsigned int> __p;
  uint64_t *v21;

  v5 = *(unsigned __int16 *)(a1 + 10);
  if (*(_WORD *)(a1 + 10))
  {
    if (a4)
    {
      std::vector<unsigned int>::vector(&__p, v5);
      begin = __p.__begin_;
      end = __p.__end_;
      if (__p.__begin_ != __p.__end_)
      {
        v10 = 0;
        v11 = __p.__begin_;
        do
          *v11++ = v10++;
        while (v11 != end);
      }
      v12 = 126 - 2 * __clz(end - begin);
      v21 = (uint64_t *)a1;
      if (end == begin)
        v13 = 0;
      else
        v13 = v12;
      std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>((uint64_t)begin, end, &v21, v13, 1);
      v14 = *(unsigned __int16 *)(a1 + 10);
      v15 = __p.__begin_;
      if (*(_WORD *)(a1 + 10))
      {
        v16 = *(_QWORD *)a1;
        v17 = *(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 8);
        v18 = __p.__begin_;
        do
        {
          v19 = *v18++;
          *__dst++ = *(_WORD *)(v16 + 2 * v19);
          *a3++ = *(_QWORD *)(v17 + 8 * v19);
          --v14;
        }
        while (v14);
        *(_BYTE *)(a1 + 15) = 1;
      }
      else
      {
        *(_BYTE *)(a1 + 15) = 1;
        if (!v15)
          return;
      }
      __p.__end_ = v15;
      operator delete(v15);
    }
    else
    {
      memmove(__dst, *(const void **)a1, 2 * v5);
      if (*(_WORD *)(a1 + 10))
        memmove(a3, (const void *)(*(_QWORD *)a1 + *(unsigned __int16 *)(a1 + 8)), 8 * *(unsigned __int16 *)(a1 + 10));
    }
  }
}

void sub_19F043DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  BOOL v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  _DWORD *v98;
  uint64_t v99;
  _DWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int *v108;
  uint64_t v109;
  unsigned int *v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int *v113;
  unsigned int *v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  int64_t v120;
  uint64_t *v121;
  int64_t v122;
  BOOL v123;
  uint64_t v124;
  unsigned int *v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int *v128;
  uint64_t v129;
  unsigned int *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t *v143;
  unsigned int *v144;
  uint64_t v145;
  unsigned int *v146;
  unsigned int *v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unsigned int *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  unsigned int *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = a2 - 1;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v89 = *v10;
        v90 = *v11;
        if (*(unsigned __int16 *)(**a3 + 2 * v89) < *(unsigned __int16 *)(**a3 + 2 * v90))
        {
          *v11 = v89;
          *v10 = v90;
        }
        return result;
      case 3:
        v91 = *v11;
        v92 = v11[1];
        v93 = **a3;
        v94 = *(unsigned __int16 *)(v93 + 2 * v92);
        v95 = *(unsigned __int16 *)(v93 + 2 * v91);
        v96 = *v10;
        v97 = *(unsigned __int16 *)(v93 + 2 * v96);
        if (v94 >= v95)
        {
          if (v97 < v94)
          {
            v11[1] = v96;
            *v10 = v92;
            v133 = *v11;
            v132 = v11[1];
            if (*(unsigned __int16 *)(v93 + 2 * v132) < *(unsigned __int16 *)(v93 + 2 * v133))
            {
              *v11 = v132;
              v11[1] = v133;
            }
          }
        }
        else if (v97 >= v94)
        {
          *v11 = v92;
          v11[1] = v91;
          v158 = *v10;
          if (*(unsigned __int16 *)(v93 + 2 * v158) < v95)
          {
            v11[1] = v158;
            *v10 = v91;
          }
        }
        else
        {
          *v11 = v96;
          *v10 = v91;
        }
        return result;
      case 4:
        v98 = v11 + 1;
        v99 = v11[1];
        v100 = v11 + 2;
        v101 = v11[2];
        v102 = *v11;
        v103 = **a3;
        v104 = *(unsigned __int16 *)(v103 + 2 * v99);
        v105 = *(unsigned __int16 *)(v103 + 2 * v102);
        v106 = v101;
        v107 = *(unsigned __int16 *)(v103 + 2 * v101);
        if (v104 >= v105)
        {
          if (v107 < v104)
          {
            v108 = v11;
            *v98 = v101;
            *v100 = v99;
            result = (uint64_t)(v11 + 1);
            v109 = v99;
            v101 = v99;
            if (v107 >= v105)
              goto LABEL_171;
            goto LABEL_169;
          }
        }
        else
        {
          if (v107 < v104)
          {
            v108 = v11;
            result = (uint64_t)(v11 + 2);
            v109 = *v11;
            LODWORD(v99) = *v11;
LABEL_169:
            *v108 = v106;
            *(_DWORD *)result = v102;
            v101 = v109;
            goto LABEL_171;
          }
          v108 = v11 + 1;
          *v11 = v99;
          v11[1] = v102;
          result = (uint64_t)(v11 + 2);
          v109 = v102;
          LODWORD(v99) = v102;
          if (v107 < v105)
            goto LABEL_169;
        }
        LODWORD(v99) = v101;
LABEL_171:
        v159 = *v10;
        if (*(unsigned __int16 *)(v103 + 2 * v159) < *(unsigned __int16 *)(v103 + 2 * v101))
        {
          *v100 = v159;
          *v10 = v99;
          v160 = *v100;
          v161 = *v98;
          v162 = *(unsigned __int16 *)(v103 + 2 * v160);
          if (v162 < *(unsigned __int16 *)(v103 + 2 * v161))
          {
            v11[1] = v160;
            v11[2] = v161;
            v163 = *v11;
            if (v162 < *(unsigned __int16 *)(v103 + 2 * v163))
            {
              *v11 = v160;
              v11[1] = v163;
            }
          }
        }
        return result;
      case 5:
        return (uint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, **a3);
      default:
        if (v12 > 95)
        {
          if (!a4)
          {
            if (v11 != a2)
            {
              v120 = (unint64_t)(v13 - 2) >> 1;
              v121 = *a3;
              v122 = v120;
              do
              {
                if (v120 >= v122)
                {
                  v124 = (2 * v122) | 1;
                  v125 = &v11[v124];
                  v126 = *v125;
                  if (2 * v122 + 2 >= v13)
                  {
                    v127 = *v121;
                  }
                  else
                  {
                    v127 = *v121;
                    if (*(unsigned __int16 *)(*v121 + 2 * v126) < *(unsigned __int16 *)(*v121 + 2 * v125[1]))
                    {
                      LODWORD(v126) = v125[1];
                      ++v125;
                      v124 = 2 * v122 + 2;
                    }
                  }
                  v128 = &v11[v122];
                  v129 = *v128;
                  result = *(unsigned __int16 *)(v127 + 2 * v129);
                  if (*(unsigned __int16 *)(v127 + 2 * v126) >= result)
                  {
                    do
                    {
                      v130 = v125;
                      *v128 = v126;
                      if (v120 < v124)
                        break;
                      v131 = (2 * v124) | 1;
                      v125 = &v11[v131];
                      v124 = 2 * v124 + 2;
                      v126 = *v125;
                      if (v124 < v13)
                      {
                        if (*(unsigned __int16 *)(v127 + 2 * v126) >= *(unsigned __int16 *)(v127 + 2 * v125[1]))
                        {
                          v124 = v131;
                        }
                        else
                        {
                          LODWORD(v126) = v125[1];
                          ++v125;
                        }
                      }
                      else
                      {
                        v124 = v131;
                      }
                      v128 = v130;
                    }
                    while (*(unsigned __int16 *)(v127 + 2 * v126) >= result);
                    *v130 = v129;
                  }
                }
                v123 = v122-- <= 0;
              }
              while (!v123);
              v140 = (unint64_t)v12 >> 2;
              do
              {
                v141 = 0;
                v142 = *v11;
                v143 = *a3;
                v144 = v11;
                do
                {
                  v147 = &v144[v141];
                  v148 = v147[1];
                  v146 = v147 + 1;
                  v145 = v148;
                  v149 = (2 * v141) | 1;
                  v141 = 2 * v141 + 2;
                  if (v141 < v140)
                  {
                    result = v146[1];
                    if (*(unsigned __int16 *)(*v143 + 2 * v145) >= *(unsigned __int16 *)(*v143 + 2 * result))
                    {
                      v141 = v149;
                    }
                    else
                    {
                      LODWORD(v145) = v146[1];
                      ++v146;
                    }
                  }
                  else
                  {
                    v141 = v149;
                  }
                  *v144 = v145;
                  v144 = v146;
                }
                while (v141 <= (uint64_t)((unint64_t)(v140 - 2) >> 1));
                if (v146 == --a2)
                {
                  *v146 = v142;
                }
                else
                {
                  *v146 = *a2;
                  *a2 = v142;
                  v150 = (char *)v146 - (char *)v11 + 4;
                  if (v150 >= 5)
                  {
                    v151 = (((unint64_t)v150 >> 2) - 2) >> 1;
                    v152 = &v11[v151];
                    v153 = *v152;
                    v154 = *v146;
                    v155 = *v143;
                    v156 = *(unsigned __int16 *)(v155 + 2 * v154);
                    if (*(unsigned __int16 *)(v155 + 2 * v153) < v156)
                    {
                      do
                      {
                        v157 = v152;
                        *v146 = v153;
                        if (!v151)
                          break;
                        v151 = (v151 - 1) >> 1;
                        v152 = &v11[v151];
                        v153 = *v152;
                        v146 = v157;
                      }
                      while (*(unsigned __int16 *)(v155 + 2 * v153) < v156);
                      *v157 = v154;
                    }
                  }
                }
                v123 = v140-- <= 2;
              }
              while (!v123);
            }
            return result;
          }
          v14 = (unint64_t)v13 >> 1;
          v15 = &v11[(unint64_t)v13 >> 1];
          v16 = **a3;
          v17 = *v10;
          v18 = *(unsigned __int16 *)(v16 + 2 * v17);
          if ((unint64_t)v12 >= 0x201)
          {
            v19 = *v15;
            v20 = *v11;
            v21 = *(unsigned __int16 *)(v16 + 2 * v19);
            v22 = *(unsigned __int16 *)(v16 + 2 * v20);
            if (v21 >= v22)
            {
              if (v18 < v21)
              {
                *v15 = v17;
                *v10 = v19;
                v27 = *v15;
                v28 = *v11;
                if (*(unsigned __int16 *)(v16 + 2 * v27) < *(unsigned __int16 *)(v16 + 2 * v28))
                {
                  *v11 = v27;
                  *v15 = v28;
                }
              }
            }
            else
            {
              if (v18 >= v21)
              {
                *v11 = v19;
                *v15 = v20;
                v31 = *v10;
                if (*(unsigned __int16 *)(v16 + 2 * v31) >= v22)
                  goto LABEL_22;
                *v15 = v31;
              }
              else
              {
                *v11 = v17;
              }
              *v10 = v20;
            }
LABEL_22:
            v32 = &v11[v14];
            v35 = *(v32 - 1);
            v33 = v32 - 1;
            v34 = v35;
            v36 = v11[1];
            v37 = *(unsigned __int16 *)(v16 + 2 * v35);
            v38 = *(unsigned __int16 *)(v16 + 2 * v36);
            v39 = *(a2 - 2);
            v40 = *(unsigned __int16 *)(v16 + 2 * v39);
            if (v37 >= v38)
            {
              if (v40 < v37)
              {
                *v33 = v39;
                *(a2 - 2) = v34;
                v41 = *v33;
                v42 = v11[1];
                if (*(unsigned __int16 *)(v16 + 2 * v41) < *(unsigned __int16 *)(v16 + 2 * v42))
                {
                  v11[1] = v41;
                  *v33 = v42;
                }
              }
            }
            else
            {
              if (v40 >= v37)
              {
                v11[1] = v34;
                *v33 = v36;
                v44 = *(a2 - 2);
                if (*(unsigned __int16 *)(v16 + 2 * v44) >= v38)
                  goto LABEL_34;
                *v33 = v44;
              }
              else
              {
                v11[1] = v39;
              }
              *(a2 - 2) = v36;
            }
LABEL_34:
            v45 = &v11[v14];
            v48 = v45[1];
            v46 = v45 + 1;
            v47 = v48;
            v49 = v11[2];
            v50 = *(unsigned __int16 *)(v16 + 2 * v48);
            v51 = *(unsigned __int16 *)(v16 + 2 * v49);
            v52 = *(a2 - 3);
            v53 = *(unsigned __int16 *)(v16 + 2 * v52);
            if (v50 >= v51)
            {
              if (v53 < v50)
              {
                *v46 = v52;
                *(a2 - 3) = v47;
                v54 = *v46;
                v55 = v11[2];
                if (*(unsigned __int16 *)(v16 + 2 * v54) < *(unsigned __int16 *)(v16 + 2 * v55))
                {
                  v11[2] = v54;
                  *v46 = v55;
                }
              }
            }
            else
            {
              if (v53 >= v50)
              {
                v11[2] = v47;
                *v46 = v49;
                v56 = *(a2 - 3);
                if (*(unsigned __int16 *)(v16 + 2 * v56) >= v51)
                  goto LABEL_43;
                *v46 = v56;
              }
              else
              {
                v11[2] = v52;
              }
              *(a2 - 3) = v49;
            }
LABEL_43:
            v57 = *v15;
            v58 = *v33;
            v59 = *(unsigned __int16 *)(v16 + 2 * v57);
            v60 = *(unsigned __int16 *)(v16 + 2 * v58);
            v61 = *v46;
            v62 = *(unsigned __int16 *)(v16 + 2 * v61);
            if (v59 >= v60)
            {
              if (v62 >= v59)
                goto LABEL_50;
              *v15 = v61;
              *v46 = v57;
              v46 = v15;
              LODWORD(v57) = v58;
              if (v62 >= v60)
              {
                LODWORD(v57) = v61;
                goto LABEL_50;
              }
            }
            else if (v62 >= v59)
            {
              *v33 = v57;
              *v15 = v58;
              v33 = v15;
              LODWORD(v57) = v61;
              if (v62 >= v60)
              {
                LODWORD(v57) = v58;
LABEL_50:
                v63 = *v11;
                *v11 = v57;
                *v15 = v63;
                goto LABEL_51;
              }
            }
            *v33 = v61;
            *v46 = v58;
            goto LABEL_50;
          }
          v23 = *v11;
          v24 = *v15;
          v25 = *(unsigned __int16 *)(v16 + 2 * v23);
          v26 = *(unsigned __int16 *)(v16 + 2 * v24);
          if (v25 >= v26)
          {
            if (v18 < v25)
            {
              *v11 = v17;
              *v10 = v23;
              v29 = *v11;
              v30 = *v15;
              if (*(unsigned __int16 *)(v16 + 2 * v29) < *(unsigned __int16 *)(v16 + 2 * v30))
              {
                *v15 = v29;
                *v11 = v30;
              }
            }
          }
          else
          {
            if (v18 >= v25)
            {
              *v15 = v23;
              *v11 = v24;
              v43 = *v10;
              if (*(unsigned __int16 *)(v16 + 2 * v43) >= v26)
                goto LABEL_51;
              *v11 = v43;
            }
            else
            {
              *v15 = v17;
            }
            *v10 = v24;
          }
LABEL_51:
          --a4;
          v64 = *v11;
          if ((a5 & 1) == 0)
          {
            v65 = *(unsigned __int16 *)(v16 + 2 * v64);
            if (*(unsigned __int16 *)(v16 + 2 * *(v11 - 1)) < v65)
              goto LABEL_54;
            if (v65 >= *(unsigned __int16 *)(v16 + 2 * *v10))
            {
              v81 = v11 + 1;
              do
              {
                v11 = v81;
                if (v81 >= a2)
                  break;
                ++v81;
              }
              while (v65 >= *(unsigned __int16 *)(v16 + 2 * *v11));
            }
            else
            {
              do
              {
                v80 = v11[1];
                ++v11;
              }
              while (v65 >= *(unsigned __int16 *)(v16 + 2 * v80));
            }
            v82 = a2;
            if (v11 < a2)
            {
              v82 = a2;
              do
                v83 = *--v82;
              while (v65 < *(unsigned __int16 *)(v16 + 2 * v83));
            }
            if (v11 < v82)
            {
              v84 = *v11;
              v85 = *v82;
              do
              {
                *v11 = v85;
                *v82 = v84;
                do
                {
                  v86 = v11[1];
                  ++v11;
                  v84 = v86;
                }
                while (v65 >= *(unsigned __int16 *)(v16 + 2 * v86));
                do
                {
                  v87 = *--v82;
                  v85 = v87;
                }
                while (v65 < *(unsigned __int16 *)(v16 + 2 * v87));
              }
              while (v11 < v82);
            }
            v88 = v11 - 1;
            if (v11 - 1 != v9)
              *v9 = *v88;
            a5 = 0;
            *v88 = v64;
            continue;
          }
          v65 = *(unsigned __int16 *)(v16 + 2 * v64);
LABEL_54:
          v66 = v11;
          do
          {
            v67 = v66;
            v69 = v66[1];
            ++v66;
            v68 = v69;
          }
          while (*(unsigned __int16 *)(v16 + 2 * v69) < v65);
          v70 = a2;
          if (v67 == v11)
          {
            v70 = a2;
            do
            {
              if (v66 >= v70)
                break;
              v72 = *--v70;
            }
            while (*(unsigned __int16 *)(v16 + 2 * v72) >= v65);
          }
          else
          {
            do
              v71 = *--v70;
            while (*(unsigned __int16 *)(v16 + 2 * v71) >= v65);
          }
          if (v66 < v70)
          {
            v73 = *v70;
            v74 = v68;
            v75 = v66;
            v76 = v70;
            do
            {
              *v75 = v73;
              *v76 = v74;
              do
              {
                v67 = v75;
                v77 = v75[1];
                ++v75;
                v74 = v77;
              }
              while (*(unsigned __int16 *)(v16 + 2 * v77) < v65);
              do
              {
                v78 = *--v76;
                v73 = v78;
              }
              while (*(unsigned __int16 *)(v16 + 2 * v78) >= v65);
            }
            while (v75 < v76);
          }
          if (v67 != v11)
            *v11 = *v67;
          *v67 = v64;
          if (v66 < v70)
            goto LABEL_73;
          v79 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v11, v67, *a3);
          v11 = v67 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v67 + 1, a2, *a3);
          if (!(_DWORD)result)
          {
            if (v79)
              continue;
LABEL_73:
            result = std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(v9, v67, a3, a4, a5 & 1);
            a5 = 0;
            v11 = v67 + 1;
            continue;
          }
          a2 = v67;
          if (v79)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
        {
          if (v11 != a2)
          {
            v110 = v11 + 1;
            if (v11 + 1 != a2)
            {
              v111 = **a3;
              v112 = 4;
              v113 = v11;
              do
              {
                v116 = *v113;
                v115 = v113[1];
                v113 = v110;
                v117 = *(unsigned __int16 *)(v111 + 2 * v115);
                if (v117 < *(unsigned __int16 *)(v111 + 2 * v116))
                {
                  v118 = v112;
                  do
                  {
                    *(unsigned int *)((char *)v11 + v118) = v116;
                    v119 = v118 - 4;
                    if (v118 == 4)
                    {
                      v114 = v11;
                      goto LABEL_110;
                    }
                    v116 = *(unsigned int *)((char *)v11 + v118 - 8);
                    v118 -= 4;
                  }
                  while (v117 < *(unsigned __int16 *)(v111 + 2 * v116));
                  v114 = (unsigned int *)((char *)v11 + v119);
LABEL_110:
                  *v114 = v115;
                }
                v110 = v113 + 1;
                v112 += 4;
              }
              while (v113 + 1 != a2);
            }
          }
        }
        else if (v11 != a2)
        {
          v134 = v11 + 1;
          if (v11 + 1 != a2)
          {
            v135 = **a3;
            do
            {
              v137 = *v9;
              v136 = v9[1];
              v9 = v134;
              v138 = *(unsigned __int16 *)(v135 + 2 * v136);
              if (v138 < *(unsigned __int16 *)(v135 + 2 * v137))
              {
                v139 = v9;
                do
                {
                  *v139 = v137;
                  v137 = *(v139 - 2);
                  --v139;
                }
                while (v138 < *(unsigned __int16 *)(v135 + 2 * v137));
                *v139 = v136;
              }
              v134 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

{
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (unsigned int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (*(unsigned __int16 *)(**a3 + 2 * v20) < *(unsigned __int16 *)(**a3 + 2 * v21))
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, a2, a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, &v9[v13 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9 + 1, v15 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(unsigned __int16 *)(**a3 + 2 * *(v9 - 1)) >= *(unsigned __int16 *)(**a3 + 2 * *v9))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &>(v9, a2, a3);
            v9 = (unsigned int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned int *,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &>(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(v17 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::PropertyID*,unsigned char *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *,unsigned int *>(v9, a2, a2, a3);
        return result;
    }
  }
}

void *gss::defaultValueForKey<gss::PropertyID,BOOL>(int a1)
{
  if (a1 <= 220)
  {
    if (a1 > 127)
    {
      if (a1 == 128)
        return &gss::defaultValueForKey<gss::PropertyID,BOOL>(gss::PropertyID)::kDefaultShieldVisible;
      if (a1 == 220)
        return &gss::defaultValueForKey<gss::PropertyID,BOOL>(gss::PropertyID)::kDefaultNavLabelShieldVisible;
    }
    else
    {
      if (a1 == 91)
        return &gss::defaultValueForKey<gss::PropertyID,BOOL>(gss::PropertyID)::kDefaultVisible;
      if (a1 == 126)
        return &gss::defaultValueForKey<gss::PropertyID,BOOL>(gss::PropertyID)::kDefaultYieldsToOnscreenLabels;
    }
  }
  else if (a1 <= 313)
  {
    if (a1 == 221)
      return &gss::defaultValueForKey<gss::PropertyID,BOOL>(gss::PropertyID)::kDefaultNavLabelSignVisible;
    if (a1 == 312)
      return &gss::defaultValueForKey<gss::PropertyID,BOOL>(gss::PropertyID)::kDefaultBuildingFacadeTexturesEnabled;
  }
  else
  {
    switch(a1)
    {
      case 314:
        return &gss::defaultValueForKey<gss::PropertyID,BOOL>(gss::PropertyID)::kDefaultLabelOcclusionEnabled;
      case 460:
        return &gss::defaultValueForKey<gss::PropertyID,BOOL>(gss::PropertyID)::kDefaultAnnotationVisible;
      case 481:
        return &gss::defaultValueForKey<gss::PropertyID,BOOL>(gss::PropertyID)::kDefaultManeuverArrowCollisionEnable;
    }
  }
  return &gss::defaultValueForKey<gss::PropertyID,BOOL>(gss::PropertyID)::_defaultValue;
}

uint64_t gss::floatDecoder<gss::PropertyID>(uint64_t *a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  NSObject *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned __int16 v33;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  const char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v10 = gss::idForIndex<gss::PropertyID>(a4);
  v33 = v10;
  if (v10 == 482)
    return 1;
  if (a3 == 32)
  {
    *(_DWORD *)buf = 0;
    v12 = a1[1];
    v13 = a1[2];
    v14 = *((_BYTE *)a1 + 24);
    v15 = v13 + 5;
    if (!v14)
      v15 = v13 + 4;
    if (v12 >= v15)
    {
      v26 = *a1;
      if (*((_BYTE *)a1 + 24))
      {
        v27 = 0;
        v28 = v26 + v13;
        v29 = v13 + 1;
        do
        {
          if (v29 + v27 >= v12)
            v30 = 0;
          else
            v30 = *(unsigned __int8 *)(v28 + v27 + 1);
          v31 = ((v30 & (0xFFFF << (8 - v14))) >> (8 - v14)) | ((((1 << (8 - v14)) + 255) & *(unsigned __int8 *)(v28 + v27)) << v14);
          a1[2] = v29 + v27;
          buf[v27++] = v31;
        }
        while (v27 != 4);
        v32 = *(_DWORD *)buf;
      }
      else
      {
        v32 = *(_DWORD *)(v26 + v13);
        a1[2] = v13 + 4;
      }
      *(_WORD *)buf = v10;
      buf[2] = 0;
      geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v35);
      *(_DWORD *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v33) = v32;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v16 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v35 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v36 = 1024;
      v37 = 249;
      v38 = 2082;
      v39 = "Could not read float.";
      _os_log_impl(&dword_19F029000, v16, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)":", 1);
    v18 = (_QWORD *)std::ostream::operator<<();
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" STYL Parse Error Here: ", 24);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Could not read float.", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v21 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v35 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v36 = 1024;
      v37 = 248;
      v38 = 2082;
      v39 = "Found float with strange number of bits.";
      _os_log_impl(&dword_19F029000, v21, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)":", 1);
    v23 = (_QWORD *)std::ostream::operator<<();
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" STYL Parse Error Here: ", 24);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Found float with strange number of bits.", 40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::BOOLDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  __int16 v11;
  char v12;
  NSObject *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  NSObject *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _BYTE v24[10];
  unsigned __int16 v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  const char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v10 = gss::idForIndex<gss::PropertyID>(a4);
  v25 = v10;
  if (v10 == 482)
    return 1;
  if (a3 == 1)
  {
    v11 = v10;
    geo::ibitstream::readUIntBits(a1, 1u, (uint64_t)v24);
    if (v24[0])
    {
      v12 = v24[4];
      *(_WORD *)buf = v11;
      buf[2] = 0;
      geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v27);
      *(_BYTE *)geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 16, &v25) = v12;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v19 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v27 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v28 = 1024;
      v29 = 47;
      v30 = 2082;
      v31 = "Could not read BOOLean property.";
      _os_log_impl(&dword_19F029000, v19, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)":", 1);
    v21 = (_QWORD *)std::ostream::operator<<();
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" STYL Parse Error Here: ", 24);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Could not read BOOLean property.", 32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v14 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v27 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v28 = 1024;
      v29 = 46;
      v30 = 2082;
      v31 = "Found BOOLean property with strange bit count.";
      _os_log_impl(&dword_19F029000, v14, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)":", 1);
    v16 = (_QWORD *)std::ostream::operator<<();
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" STYL Parse Error Here: ", 24);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Found BOOLean property with strange bit count.", 46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::enumDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, unsigned int a5, _QWORD *a6)
{
  int v11;
  __int16 v12;
  unsigned int v13;
  NSObject *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  NSObject *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _BYTE v25[4];
  unsigned int v26;
  unsigned __int16 v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  const char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v11 = gss::idForIndex<gss::PropertyID>(a5);
  v27 = v11;
  if (v11 == 482)
    return 1;
  v12 = v11;
  geo::ibitstream::readUIntBits(a1, a3, (uint64_t)v25);
  if (v25[0])
  {
    v13 = v26;
    if (v26 <= a4)
    {
      *(_WORD *)buf = v12;
      buf[2] = 0;
      geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v29);
      *(_DWORD *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v27) = v13;
    }
    else
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v14 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        v29 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
        v30 = 1024;
        v31 = 563;
        v32 = 2082;
        v33 = "Unexpected enum value, perhaps this stylesheet uses values that are too new for this client?";
        _os_log_impl(&dword_19F029000, v14, OS_LOG_TYPE_DEBUG, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)":", 1);
      v16 = (_QWORD *)std::ostream::operator<<();
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" STYL Parse Warning: ", 21);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Unexpected enum value, perhaps this stylesheet uses values that are too new for this client?", 92);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
    }
    return 1;
  }
  if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
    dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
  v19 = GEOGetGeoCSSStyleSheetLog_log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v29 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
    v30 = 1024;
    v31 = 557;
    v32 = 2082;
    v33 = "Could not read uint backing for enum.";
    _os_log_impl(&dword_19F029000, v19, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
  }
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)":", 1);
  v21 = (_QWORD *)std::ostream::operator<<();
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" STYL Parse Error Here: ", 24);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Could not read uint backing for enum.", 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\n", 1);
  return 0;
}

uint64_t gss::uint32Decoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  NSObject *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  __int16 v16;
  int v17;
  NSObject *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _BYTE v24[4];
  int v25;
  unsigned __int16 v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v10 = gss::idForIndex<gss::PropertyID>(a4);
  v26 = v10;
  if (v10 == 482)
    return 1;
  if (a3 > 0x1F)
  {
    v16 = v10;
    geo::ibitstream::readUIntBits(a1, a3, (uint64_t)v24);
    if (!v24[0])
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v19 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v28 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
        v29 = 1024;
        v30 = 89;
        v31 = 2082;
        v32 = "Could not read unsigned integer.";
        _os_log_impl(&dword_19F029000, v19, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)":", 1);
      v21 = (_QWORD *)std::ostream::operator<<();
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" STYL Parse Error Here: ", 24);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Could not read unsigned integer.", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\n", 1);
      return 0;
    }
    v17 = v25;
    *(_WORD *)buf = v16;
    buf[2] = 0;
    geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v28);
    *(_DWORD *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v26) = v17;
    return 1;
  }
  if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
    dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
  v11 = GEOGetGeoCSSStyleSheetLog_log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v28 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
    v29 = 1024;
    v30 = 88;
    v31 = 2082;
    v32 = "Found unsigned integer property with too few bits.";
    _os_log_impl(&dword_19F029000, v11, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
  }
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)":", 1);
  v13 = (_QWORD *)std::ostream::operator<<();
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" STYL Parse Error Here: ", 24);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Found unsigned integer property with too few bits.", 50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
  return 0;
}

uint64_t gss::labelInfoDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5, _QWORD *a6)
{
  unint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  NSObject *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  NSObject *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned __int16 v31;
  unsigned __int16 v32;
  NSObject *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  NSObject *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  NSObject *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  NSObject *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  int v64;
  unsigned __int16 v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  NSObject *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  NSObject *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  int v86;
  unsigned __int16 v87;
  unsigned __int16 v88;
  NSObject *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  NSObject *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  int v99;
  unsigned __int16 v100;
  NSObject *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  NSObject *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  int v111;
  unsigned __int16 v112;
  NSObject *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  NSObject *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  int v124;
  unsigned __int16 v125[2];
  int v126;
  uint8_t buf[4];
  const char *v128;
  __int16 v129;
  int v130;
  __int16 v131;
  const char *v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  geo::ibitstream::readUIntBits(a1, 1u, (uint64_t)v125);
  if (!LOBYTE(v125[0]))
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v19 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v128 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v129 = 1024;
      v130 = 948;
      v131 = 2082;
      v132 = "Could not read indication of label height existing.";
      _os_log_impl(&dword_19F029000, v19, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)":", 1);
    v21 = (_QWORD *)std::ostream::operator<<();
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" STYL Parse Error Here: ", 24);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Could not read indication of label height existing.", 51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\n", 1);
    return 0;
  }
  if (v126)
  {
    *(_DWORD *)buf = 0;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_BYTE *)(a1 + 24);
    v13 = v11 + 5;
    if (!v12)
      v13 = v11 + 4;
    if (v10 < v13)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v14 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v128 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
        v129 = 1024;
        v130 = 951;
        v131 = 2082;
        v132 = "Could not read label height.";
        _os_log_impl(&dword_19F029000, v14, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)":", 1);
      v16 = (_QWORD *)std::ostream::operator<<();
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" STYL Parse Error Here: ", 24);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Could not read label height.", 28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
      return 0;
    }
    v24 = *(_QWORD *)a1;
    if (*(_BYTE *)(a1 + 24))
    {
      v25 = 0;
      v26 = v24 + v11;
      v27 = v11 + 1;
      do
      {
        if (v27 + v25 >= v10)
          v28 = 0;
        else
          v28 = *(unsigned __int8 *)(v26 + v25 + 1);
        v29 = ((v28 & (0xFFFF << (8 - v12))) >> (8 - v12)) | ((((1 << (8 - v12)) + 255) & *(unsigned __int8 *)(v26 + v25)) << v12);
        *(_QWORD *)(a1 + 16) = v27 + v25;
        buf[v25++] = v29;
      }
      while (v25 != 4);
      v30 = *(_DWORD *)buf;
    }
    else
    {
      v30 = *(_DWORD *)(v24 + v11);
      *(_QWORD *)(a1 + 16) = v11 + 4;
    }
    if ((a4 - 171) > 4)
      v31 = 482;
    else
      v31 = word_1A0085A60[(__int16)(a4 - 171)];
    v125[0] = v31;
    *(_WORD *)buf = v31;
    buf[2] = 0;
    geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v128);
    *(_DWORD *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, v125) = v30;
  }
  geo::ibitstream::readUIntBits(a1, 1u, (uint64_t)v125);
  if (!LOBYTE(v125[0]))
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v33 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v128 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v129 = 1024;
      v130 = 956;
      v131 = 2082;
      v132 = "Could not read indication of label height curve existing.";
      _os_log_impl(&dword_19F029000, v33, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)":", 1);
    v35 = (_QWORD *)std::ostream::operator<<();
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" STYL Parse Error Here: ", 24);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Could not read indication of label height curve existing.", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"\n", 1);
    return 0;
  }
  if (v126)
  {
    geo::ibitstream::readUIntBits(a1, 3u, (uint64_t)v125);
    if (!LOBYTE(v125[0]))
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v38 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v128 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
        v129 = 1024;
        v130 = 959;
        v131 = 2082;
        v132 = "Could not read label height curve.";
        _os_log_impl(&dword_19F029000, v38, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)":", 1);
      v40 = (_QWORD *)std::ostream::operator<<();
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" STYL Parse Error Here: ", 24);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Could not read label height curve.", 34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"\n", 1);
      return 0;
    }
    if ((a4 - 171) > 4)
      v32 = 482;
    else
      v32 = word_1A0085A6A[(__int16)(a4 - 171)];
    v43 = v126;
    v125[0] = v32;
    *(_WORD *)buf = v32;
    buf[2] = 0;
    geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v128);
    *(_DWORD *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, v125) = v43;
  }
  geo::ibitstream::readUIntBits(a1, 1u, (uint64_t)v125);
  if (!LOBYTE(v125[0]))
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v53 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v128 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v129 = 1024;
      v130 = 964;
      v131 = 2082;
      v132 = "Could not read indication of label height curve limit existing.";
      _os_log_impl(&dword_19F029000, v53, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)":", 1);
    v55 = (_QWORD *)std::ostream::operator<<();
    v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" STYL Parse Error Here: ", 24);
    v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Could not read indication of label height curve limit existing.", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"\n", 1);
    return 0;
  }
  if (v126)
  {
    *(_DWORD *)buf = 0;
    v44 = *(_QWORD *)(a1 + 8);
    v45 = *(_QWORD *)(a1 + 16);
    v46 = *(_BYTE *)(a1 + 24);
    v47 = v45 + 5;
    if (!v46)
      v47 = v45 + 4;
    if (v44 < v47)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v48 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v128 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
        v129 = 1024;
        v130 = 967;
        v131 = 2082;
        v132 = "Could not read label height curve limit.";
        _os_log_impl(&dword_19F029000, v48, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)":", 1);
      v50 = (_QWORD *)std::ostream::operator<<();
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" STYL Parse Error Here: ", 24);
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"Could not read label height curve limit.", 40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"\n", 1);
      return 0;
    }
    v58 = *(_QWORD *)a1;
    if (*(_BYTE *)(a1 + 24))
    {
      v59 = 0;
      v60 = v58 + v45;
      v61 = v45 + 1;
      do
      {
        if (v61 + v59 >= v44)
          v62 = 0;
        else
          v62 = *(unsigned __int8 *)(v60 + v59 + 1);
        v63 = ((v62 & (0xFFFF << (8 - v46))) >> (8 - v46)) | ((((1 << (8 - v46)) + 255) & *(unsigned __int8 *)(v60 + v59)) << v46);
        *(_QWORD *)(a1 + 16) = v61 + v59;
        buf[v59++] = v63;
      }
      while (v59 != 4);
      v64 = *(_DWORD *)buf;
    }
    else
    {
      v64 = *(_DWORD *)(v58 + v45);
      *(_QWORD *)(a1 + 16) = v45 + 4;
    }
    if ((a4 - 171) > 4)
      v65 = 482;
    else
      v65 = word_1A0085A74[(__int16)(a4 - 171)];
    v125[0] = v65;
    *(_WORD *)buf = v65;
    buf[2] = 0;
    geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v128);
    *(_DWORD *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, v125) = v64;
  }
  geo::ibitstream::readUIntBits(a1, 1u, (uint64_t)v125);
  if (!LOBYTE(v125[0]))
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v75 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v128 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v129 = 1024;
      v130 = 972;
      v131 = 2082;
      v132 = "Could not read indication of label halo size existing.";
      _os_log_impl(&dword_19F029000, v75, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)":", 1);
    v77 = (_QWORD *)std::ostream::operator<<();
    v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)" STYL Parse Error Here: ", 24);
    v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"Could not read indication of label halo size existing.", 54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"\n", 1);
    return 0;
  }
  if (v126)
  {
    *(_DWORD *)buf = 0;
    v66 = *(_QWORD *)(a1 + 8);
    v67 = *(_QWORD *)(a1 + 16);
    v68 = *(_BYTE *)(a1 + 24);
    v69 = v67 + 5;
    if (!v68)
      v69 = v67 + 4;
    if (v66 < v69)
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v70 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v128 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
        v129 = 1024;
        v130 = 975;
        v131 = 2082;
        v132 = "Could not read label halo size.";
        _os_log_impl(&dword_19F029000, v70, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)":", 1);
      v72 = (_QWORD *)std::ostream::operator<<();
      v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)" STYL Parse Error Here: ", 24);
      v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Could not read label halo size.", 31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"\n", 1);
      return 0;
    }
    v80 = *(_QWORD *)a1;
    if (*(_BYTE *)(a1 + 24))
    {
      v81 = 0;
      v82 = v80 + v67;
      v83 = v67 + 1;
      do
      {
        if (v83 + v81 >= v66)
          v84 = 0;
        else
          v84 = *(unsigned __int8 *)(v82 + v81 + 1);
        v85 = ((v84 & (0xFFFF << (8 - v68))) >> (8 - v68)) | ((((1 << (8 - v68)) + 255) & *(unsigned __int8 *)(v82 + v81)) << v68);
        *(_QWORD *)(a1 + 16) = v83 + v81;
        buf[v81++] = v85;
      }
      while (v81 != 4);
      v86 = *(_DWORD *)buf;
    }
    else
    {
      v86 = *(_DWORD *)(v80 + v67);
      *(_QWORD *)(a1 + 16) = v67 + 4;
    }
    if ((a4 - 171) > 4)
      v87 = 482;
    else
      v87 = word_1A0085A7E[(__int16)(a4 - 171)];
    v125[0] = v87;
    *(_WORD *)buf = v87;
    buf[2] = 0;
    geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v128);
    *(_DWORD *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, v125) = v86;
  }
  geo::ibitstream::readUIntBits(a1, 1u, (uint64_t)v125);
  if (!LOBYTE(v125[0]))
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v89 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v128 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v129 = 1024;
      v130 = 980;
      v131 = 2082;
      v132 = "Could not read indication of label font expansion existing.";
      _os_log_impl(&dword_19F029000, v89, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)":", 1);
    v91 = (_QWORD *)std::ostream::operator<<();
    v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)" STYL Parse Error Here: ", 24);
    v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"Could not read indication of label font expansion existing.", 59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"\n", 1);
    return 0;
  }
  if (v126)
  {
    geo::ibitstream::readFloat((uint64_t *)a1, (uint64_t)v125);
    if (!LOBYTE(v125[0]))
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v94 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v128 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
        v129 = 1024;
        v130 = 983;
        v131 = 2082;
        v132 = "Could not read label font expansion.";
        _os_log_impl(&dword_19F029000, v94, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)":", 1);
      v96 = (_QWORD *)std::ostream::operator<<();
      v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)" STYL Parse Error Here: ", 24);
      v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"Could not read label font expansion.", 36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"\n", 1);
      return 0;
    }
    if ((a4 - 171) > 4)
      v88 = 482;
    else
      v88 = word_1A0085A88[(__int16)(a4 - 171)];
    v99 = v126;
    v125[0] = v88;
    *(_WORD *)buf = v88;
    buf[2] = 0;
    geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v128);
    *(_DWORD *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, v125) = v99;
  }
  geo::ibitstream::readUIntBits(a1, 1u, (uint64_t)v125);
  if (!LOBYTE(v125[0]))
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v101 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v128 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v129 = 1024;
      v130 = 988;
      v131 = 2082;
      v132 = "Could not read indication of label spacing existing.";
      _os_log_impl(&dword_19F029000, v101, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)":", 1);
    v103 = (_QWORD *)std::ostream::operator<<();
    v104 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)" STYL Parse Error Here: ", 24);
    v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"Could not read indication of label spacing existing.", 52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)"\n", 1);
    return 0;
  }
  if (v126)
  {
    geo::ibitstream::readFloat((uint64_t *)a1, (uint64_t)v125);
    if (!LOBYTE(v125[0]))
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v106 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v128 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
        v129 = 1024;
        v130 = 991;
        v131 = 2082;
        v132 = "Could not read label spacing.";
        _os_log_impl(&dword_19F029000, v106, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v107 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)":", 1);
      v108 = (_QWORD *)std::ostream::operator<<();
      v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)" STYL Parse Error Here: ", 24);
      v110 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)"Could not read label spacing.", 29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"\n", 1);
      return 0;
    }
    if ((a4 - 171) > 4)
      v100 = 482;
    else
      v100 = word_1A0085A92[(__int16)(a4 - 171)];
    v111 = v126;
    v125[0] = v100;
    *(_WORD *)buf = v100;
    buf[2] = 0;
    geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v128);
    *(_DWORD *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, v125) = v111;
  }
  geo::ibitstream::readUIntBits(a1, 1u, (uint64_t)v125);
  if (!LOBYTE(v125[0]))
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v113 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v128 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v129 = 1024;
      v130 = 996;
      v131 = 2082;
      v132 = "Could not read indication of arrow height existing.";
      _os_log_impl(&dword_19F029000, v113, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v114 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)":", 1);
    v115 = (_QWORD *)std::ostream::operator<<();
    v116 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)" STYL Parse Error Here: ", 24);
    v117 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)"Could not read indication of arrow height existing.", 51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)"\n", 1);
    return 0;
  }
  if (v126)
  {
    geo::ibitstream::readFloat((uint64_t *)a1, (uint64_t)v125);
    if (!LOBYTE(v125[0]))
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v118 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v128 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
        v129 = 1024;
        v130 = 999;
        v131 = 2082;
        v132 = "Could not read arrow height.";
        _os_log_impl(&dword_19F029000, v118, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)":", 1);
      v120 = (_QWORD *)std::ostream::operator<<();
      v121 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)" STYL Parse Error Here: ", 24);
      v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)"Could not read arrow height.", 28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)"\n", 1);
      return 0;
    }
    if ((a4 - 171) > 4)
      v112 = 482;
    else
      v112 = word_1A0085A9C[(__int16)(a4 - 171)];
    v124 = v126;
    v125[0] = v112;
    *(_WORD *)buf = v112;
    buf[2] = 0;
    geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v128);
    *(_DWORD *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, v125) = v124;
  }
  return 1;
}

float gss::_interpolateSize(int a1, float a2, float a3, float a4, float a5, float a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  v6 = (float)(a6 - a4) / (float)(a5 - a4);
  if ((a1 - 3) < 2)
  {
    v9 = v6 * v6;
    v7 = v6 * (float)(v6 * v6);
    v10 = 1.0 - v6;
    v11 = v10 * (float)(v10 * v10);
    v12 = 3.0;
    v13 = (float)(v6 * (float)((float)(v10 * v10) * 3.0)) * 0.42;
LABEL_7:
    v8 = (float)(v13 + (float)(v11 * 0.0)) + (float)((float)(v9 * (float)(v10 * v12)) * 0.58);
    goto LABEL_8;
  }
  if (a1 == 2)
  {
    v9 = v6 * v6;
    v7 = v6 * (float)(v6 * v6);
    v10 = 1.0 - v6;
    v11 = v10 * (float)(v10 * v10);
    v12 = 3.0;
    v13 = (float)(v6 * (float)((float)(v10 * v10) * 3.0)) * 0.0;
    goto LABEL_7;
  }
  if (a1 == 1)
  {
    v7 = v6 * (float)(v6 * v6);
    v8 = (float)((float)(v6 * v6) * (float)((float)(1.0 - v6) * 3.0))
       + (float)((float)((float)(v6 * (float)((float)((float)(1.0 - v6) * (float)(1.0 - v6)) * 3.0)) * 0.42)
               + (float)((float)((float)(1.0 - v6) * (float)((float)(1.0 - v6) * (float)(1.0 - v6))) * 0.0));
LABEL_8:
    v6 = v7 + v8;
  }
  return a2 + (float)((float)(a3 - a2) * v6);
}

uint64_t gss::shieldSizeDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 9u, a4, a6);
}

uint64_t gss::labelTextVisibilityDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 3u, a4, a6);
}

uint64_t gss::trafficDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5, _QWORD *a6)
{
  __int8 v11;
  __int16 v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  NSObject *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  NSObject *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  NSObject *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  NSObject *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned __int16 v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int16x4_t v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  NSObject *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  NSObject *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned __int16 v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  int16x4_t v76;
  unint64_t v77;
  uint64_t v78;
  char v79;
  unint64_t v80;
  NSObject *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  NSObject *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  unsigned int v96;
  int v97;
  __int16 v98;
  __int32 v99;
  __int16 v100;
  __int32 v101;
  __int16 v102;
  __int32 v103;
  __int16 v104;
  __int32 v105;
  __int16 v106;
  __int32 v107;
  __int16 v108;
  __int32 v109;
  __int16 v110;
  __int32 v111;
  __int16 v112;
  unsigned int v113;
  unsigned __int16 v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  int16x4_t v119;
  NSObject *v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  NSObject *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  NSObject *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  NSObject *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  NSObject *v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  NSObject *v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  NSObject *v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *v155;
  NSObject *v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  NSObject *v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  NSObject *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  NSObject *v171;
  _QWORD *v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  NSObject *v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  NSObject *v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  NSObject *v186;
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  _QWORD *v190;
  NSObject *v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  NSObject *v196;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  float v201;
  float32x2_t v202;
  float v203;
  unsigned __int16 v204;
  int16x4_t v205;
  uint8_t buf[4];
  const char *v207;
  _BYTE v208[6];
  __int16 v209;
  const char *v210;
  uint64_t v211;

  v211 = *MEMORY[0x1E0C80C00];
  geo::ibitstream::readUIntBits(a1, 1u, (uint64_t)&v201);
  if (!LOBYTE(v201))
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v22 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v207 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      *(_WORD *)v208 = 1024;
      *(_DWORD *)&v208[2] = 743;
      v209 = 2082;
      v210 = "Could not read indication of traffic visibility existing.";
      _os_log_impl(&dword_19F029000, v22, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)":", 1);
    v24 = (_QWORD *)std::ostream::operator<<();
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" STYL Parse Error Here: ", 24);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Could not read indication of traffic visibility existing.", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\n", 1);
    return 0;
  }
  if (v202.i32[0])
  {
    geo::ibitstream::readUIntBits(a1, 1u, (uint64_t)&v201);
    if (!LOBYTE(v201))
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v32 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v207 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
        *(_WORD *)v208 = 1024;
        *(_DWORD *)&v208[2] = 746;
        v209 = 2082;
        v210 = "Could not read traffic visibility.";
        _os_log_impl(&dword_19F029000, v32, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)":", 1);
      v34 = (_QWORD *)std::ostream::operator<<();
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" STYL Parse Error Here: ", 24);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Could not read traffic visibility.", 34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      return 0;
    }
    v11 = v202.i8[0];
    if (((a4 - 90) & 0xFFFC) != 0)
      v12 = 482;
    else
      v12 = 11 * (a4 - 90) + 42;
    LOWORD(v201) = v12;
    *(_WORD *)buf = v12;
    buf[2] = 0;
    geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v207);
    *(_BYTE *)geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 16, (unsigned __int16 *)&v201) = v11;
  }
  geo::ibitstream::readUIntBits(a1, 1u, (uint64_t)&v201);
  if (!LOBYTE(v201))
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v27 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v207 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      *(_WORD *)v208 = 1024;
      *(_DWORD *)&v208[2] = 751;
      v209 = 2082;
      v210 = "Could not read indication of traffic fill color existing.";
      _os_log_impl(&dword_19F029000, v27, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)":", 1);
    v29 = (_QWORD *)std::ostream::operator<<();
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" STYL Parse Error Here: ", 24);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Could not read indication of traffic fill color existing.", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"\n", 1);
    return 0;
  }
  if (!v202.i32[0])
  {
LABEL_45:
    geo::ibitstream::readUIntBits(a1, 1u, (uint64_t)&v201);
    if (!LOBYTE(v201))
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v59 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v207 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
        *(_WORD *)v208 = 1024;
        *(_DWORD *)&v208[2] = 762;
        v209 = 2082;
        v210 = "Could not read indication of traffic secondary color existing.";
        _os_log_impl(&dword_19F029000, v59, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)":", 1);
      v61 = (_QWORD *)std::ostream::operator<<();
      v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)" STYL Parse Error Here: ", 24);
      v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"Could not read indication of traffic secondary color existing.", 62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"\n", 1);
      return 0;
    }
    if (v202.i32[0])
    {
      *(_DWORD *)buf = 0;
      v50 = *(_QWORD *)(a1 + 8);
      v51 = *(_QWORD *)(a1 + 16);
      v52 = *(_BYTE *)(a1 + 24);
      v53 = v51 + 5;
      if (!v52)
        v53 = v51 + 4;
      if (v50 < v53)
      {
        if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
          dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
        v54 = GEOGetGeoCSSStyleSheetLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v207 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
          *(_WORD *)v208 = 1024;
          *(_DWORD *)&v208[2] = 765;
          v209 = 2082;
          v210 = "Could not read traffic secondary color.";
          _os_log_impl(&dword_19F029000, v54, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }
        v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)":", 1);
        v56 = (_QWORD *)std::ostream::operator<<();
        v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" STYL Parse Error Here: ", 24);
        v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Could not read traffic secondary color.", 39);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"\n", 1);
        return 0;
      }
      v64 = *(_QWORD *)a1;
      if (*(_BYTE *)(a1 + 24))
      {
        v65 = 0;
        v66 = v64 + v51;
        v67 = v51 + 1;
        do
        {
          if (v67 + v65 >= v50)
            v68 = 0;
          else
            v68 = *(unsigned __int8 *)(v66 + v65 + 1);
          v69 = ((v68 & (0xFFFF << (8 - v52))) >> (8 - v52)) | ((((1 << (8 - v52)) + 255) & *(unsigned __int8 *)(v66 + v65)) << v52);
          *(_QWORD *)(a1 + 16) = v67 + v65;
          buf[v65++] = v69;
        }
        while (v65 != 4);
        v70 = *(_DWORD *)buf;
      }
      else
      {
        v70 = *(_DWORD *)(v64 + v51);
        *(_QWORD *)(a1 + 16) = v51 + 4;
      }
      if (((a4 - 90) & 0xFFFC) != 0)
        v71 = 482;
      else
        v71 = 11 * (a4 - 90) + 44;
      v204 = v71;
      *(_WORD *)buf = v71;
      buf[2] = 0;
      geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v207);
      v72 = bswap32(v70);
      v201 = (float)v72 / 255.0;
      v202 = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v72), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
      v203 = (float)HIBYTE(v72) / 255.0;
      *(_DWORD *)buf = geo::colorTransform<geo::ReverseGammaCorrection>(geo::reverseSRGBGammaCorrection, &v201);
      v207 = (const char *)__PAIR64__(v74, v73);
      *(_DWORD *)v208 = v75;
      geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)buf, &v205);
      v76 = v205;
      *(int16x4_t *)geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 48, &v204) = v76;
    }
    geo::ibitstream::readUIntBits(a1, 1u, (uint64_t)&v201);
    if (!LOBYTE(v201))
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v86 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v207 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
        *(_WORD *)v208 = 1024;
        *(_DWORD *)&v208[2] = 773;
        v209 = 2082;
        v210 = "Could not read indication of traffic pill middle length existing.";
        _os_log_impl(&dword_19F029000, v86, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)":", 1);
      v88 = (_QWORD *)std::ostream::operator<<();
      v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)" STYL Parse Error Here: ", 24);
      v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"Could not read indication of traffic pill middle length existing.", 65);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"\n", 1);
      return 0;
    }
    if (v202.i32[0])
    {
      *(_DWORD *)buf = 0;
      v77 = *(_QWORD *)(a1 + 8);
      v78 = *(_QWORD *)(a1 + 16);
      v79 = *(_BYTE *)(a1 + 24);
      v80 = v78 + 5;
      if (!v79)
        v80 = v78 + 4;
      if (v77 < v80)
      {
        if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
          dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
        v81 = GEOGetGeoCSSStyleSheetLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v207 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
          *(_WORD *)v208 = 1024;
          *(_DWORD *)&v208[2] = 776;
          v209 = 2082;
          v210 = "Could not read traffic pill middle length.";
          _os_log_impl(&dword_19F029000, v81, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }
        v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)":", 1);
        v83 = (_QWORD *)std::ostream::operator<<();
        v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)" STYL Parse Error Here: ", 24);
        v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"Could not read traffic pill middle length.", 42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"\n", 1);
        return 0;
      }
      v91 = *(_QWORD *)a1;
      if (*(_BYTE *)(a1 + 24))
      {
        v92 = 0;
        v93 = v91 + v78;
        v94 = v78 + 1;
        do
        {
          if (v94 + v92 >= v77)
            v95 = 0;
          else
            v95 = *(unsigned __int8 *)(v93 + v92 + 1);
          v96 = ((v95 & (0xFFFF << (8 - v79))) >> (8 - v79)) | ((((1 << (8 - v79)) + 255) & *(unsigned __int8 *)(v93 + v92)) << v79);
          *(_QWORD *)(a1 + 16) = v94 + v92;
          buf[v92++] = v96;
        }
        while (v92 != 4);
        v97 = *(_DWORD *)buf;
      }
      else
      {
        v97 = *(_DWORD *)(v91 + v78);
        *(_QWORD *)(a1 + 16) = v78 + 4;
      }
      if (((a4 - 90) & 0xFFFC) != 0)
        v98 = 482;
      else
        v98 = 11 * (a4 - 90) + 45;
      LOWORD(v201) = v98;
      *(_WORD *)buf = v98;
      buf[2] = 0;
      geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v207);
      *(_DWORD *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, (unsigned __int16 *)&v201) = v97;
    }
    geo::ibitstream::readUIntBits(a1, 1u, (uint64_t)&v201);
    if (!LOBYTE(v201))
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v121 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v207 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
        *(_WORD *)v208 = 1024;
        *(_DWORD *)&v208[2] = 781;
        v209 = 2082;
        v210 = "Could not read indication of traffic pill spacing existing.";
        _os_log_impl(&dword_19F029000, v121, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)":", 1);
      v123 = (_QWORD *)std::ostream::operator<<();
      v124 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)" STYL Parse Error Here: ", 24);
      v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)"Could not read indication of traffic pill spacing existing.", 59);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)"\n", 1);
      return 0;
    }
    if (v202.i32[0])
    {
      geo::ibitstream::readFloat((uint64_t *)a1, (uint64_t)&v201);
      if (!LOBYTE(v201))
      {
        if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
          dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
        v131 = GEOGetGeoCSSStyleSheetLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v207 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
          *(_WORD *)v208 = 1024;
          *(_DWORD *)&v208[2] = 784;
          v209 = 2082;
          v210 = "Could not read traffic pill spacing.";
          _os_log_impl(&dword_19F029000, v131, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }
        v132 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)":", 1);
        v133 = (_QWORD *)std::ostream::operator<<();
        v134 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)" STYL Parse Error Here: ", 24);
        v135 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)"Could not read traffic pill spacing.", 36);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)"\n", 1);
        return 0;
      }
      v99 = v202.i32[0];
      if (((a4 - 90) & 0xFFFC) != 0)
        v100 = 482;
      else
        v100 = 11 * (a4 - 90) + 46;
      LOWORD(v201) = v100;
      *(_WORD *)buf = v100;
      buf[2] = 0;
      geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v207);
      *(_DWORD *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, (unsigned __int16 *)&v201) = v99;
    }
    geo::ibitstream::readUIntBits(a1, 1u, (uint64_t)&v201);
    if (!LOBYTE(v201))
    {
      if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
        dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
      v126 = GEOGetGeoCSSStyleSheetLog_log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v207 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
        *(_WORD *)v208 = 1024;
        *(_DWORD *)&v208[2] = 789;
        v209 = 2082;
        v210 = "Could not read indication of traffic secondary width existing.";
        _os_log_impl(&dword_19F029000, v126, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }
      v127 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)":", 1);
      v128 = (_QWORD *)std::ostream::operator<<();
      v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)" STYL Parse Error Here: ", 24);
      v130 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)"Could not read indication of traffic secondary width existing.", 62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)"\n", 1);
      return 0;
    }
    if (v202.i32[0])
    {
      geo::ibitstream::readFloat((uint64_t *)a1, (uint64_t)&v201);
      if (!LOBYTE(v201))
      {
        if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
          dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
        v136 = GEOGetGeoCSSStyleSheetLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v207 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
          *(_WORD *)v208 = 1024;
          *(_DWORD *)&v208[2] = 792;
          v209 = 2082;
          v210 = "Could not read traffic secondary width.";
          _os_log_impl(&dword_19F029000, v136, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }
        v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)":", 1);
        v138 = (_QWORD *)std::ostream::operator<<();
        v139 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)" STYL Parse Error Here: ", 24);
        v140 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)"Could not read traffic secondary width.", 39);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v140, (uint64_t)"\n", 1);
        return 0;
      }
      v101 = v202.i32[0];
      if (((a4 - 90) & 0xFFFC) != 0)
        v102 = 482;
      else
        v102 = 11 * (a4 - 90) + 47;
      LOWORD(v201) = v102;
      *(_WORD *)buf = v102;
      buf[2] = 0;
      geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v207);
      *(_DWORD *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, (unsigned __int16 *)&v201) = v101;
    }
    if (*(_DWORD *)(a5 + 8) >= 2u)
    {
      geo::ibitstream::readUIntBits(a1, 1u, (uint64_t)&v201);
      if (!LOBYTE(v201))
      {
        if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
          dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
        v141 = GEOGetGeoCSSStyleSheetLog_log;
        if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v207 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
          *(_WORD *)v208 = 1024;
          *(_DWORD *)&v208[2] = 798;
          v209 = 2082;
          v210 = "Could not read indication of traffic width existing.";
          _os_log_impl(&dword_19F029000, v141, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }
        v142 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, (uint64_t)":", 1);
        v143 = (_QWORD *)std::ostream::operator<<();
        v144 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143, (uint64_t)" STYL Parse Error Here: ", 24);
        v145 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v144, (uint64_t)"Could not read indication of traffic width existing.", 52);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, (uint64_t)"\n", 1);
        return 0;
      }
      if (v202.i32[0])
      {
        geo::ibitstream::readFloat((uint64_t *)a1, (uint64_t)&v201);
        if (!LOBYTE(v201))
        {
          if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
            dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
          v146 = GEOGetGeoCSSStyleSheetLog_log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v207 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
            *(_WORD *)v208 = 1024;
            *(_DWORD *)&v208[2] = 801;
            v209 = 2082;
            v210 = "Could not read traffic width.";
            _os_log_impl(&dword_19F029000, v146, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }
          v147 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147, (uint64_t)":", 1);
          v148 = (_QWORD *)std::ostream::operator<<();
          v149 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v148, (uint64_t)" STYL Parse Error Here: ", 24);
          v150 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v149, (uint64_t)"Could not read traffic width.", 29);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, (uint64_t)"\n", 1);
          return 0;
        }
        v103 = v202.i32[0];
        if (((a4 - 90) & 0xFFFC) != 0)
          v104 = 482;
        else
          v104 = 11 * (a4 - 90) + 48;
        LOWORD(v201) = v104;
        *(_WORD *)buf = v104;
        buf[2] = 0;
        geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v207);
        *(_DWORD *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, (unsigned __int16 *)&v201) = v103;
      }
      if (*(_DWORD *)(a5 + 8) >= 3u)
      {
        geo::ibitstream::readUIntBits(a1, 1u, (uint64_t)&v201);
        if (!LOBYTE(v201))
        {
          if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
            dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
          v151 = GEOGetGeoCSSStyleSheetLog_log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v207 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
            *(_WORD *)v208 = 1024;
            *(_DWORD *)&v208[2] = 808;
            v209 = 2082;
            v210 = "Could not read indication of traffic min width existing.";
            _os_log_impl(&dword_19F029000, v151, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }
          v152 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v152, (uint64_t)":", 1);
          v153 = (_QWORD *)std::ostream::operator<<();
          v154 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v153, (uint64_t)" STYL Parse Error Here: ", 24);
          v155 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)"Could not read indication of traffic min width existing.", 56);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v155, (uint64_t)"\n", 1);
          return 0;
        }
        if (v202.i32[0])
        {
          geo::ibitstream::readFloat((uint64_t *)a1, (uint64_t)&v201);
          if (!LOBYTE(v201))
          {
            if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
              dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
            v161 = GEOGetGeoCSSStyleSheetLog_log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              v207 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
              *(_WORD *)v208 = 1024;
              *(_DWORD *)&v208[2] = 811;
              v209 = 2082;
              v210 = "Could not read traffic min width.";
              _os_log_impl(&dword_19F029000, v161, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
            }
            v162 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v162, (uint64_t)":", 1);
            v163 = (_QWORD *)std::ostream::operator<<();
            v164 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)" STYL Parse Error Here: ", 24);
            v165 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"Could not read traffic min width.", 33);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v165, (uint64_t)"\n", 1);
            return 0;
          }
          v105 = v202.i32[0];
          if (((a4 - 90) & 0xFFFC) != 0)
            v106 = 482;
          else
            v106 = 11 * (a4 - 90) + 49;
          LOWORD(v201) = v106;
          *(_WORD *)buf = v106;
          buf[2] = 0;
          geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v207);
          *(_DWORD *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, (unsigned __int16 *)&v201) = v105;
        }
        geo::ibitstream::readUIntBits(a1, 1u, (uint64_t)&v201);
        if (!LOBYTE(v201))
        {
          if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
            dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
          v156 = GEOGetGeoCSSStyleSheetLog_log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v207 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
            *(_WORD *)v208 = 1024;
            *(_DWORD *)&v208[2] = 816;
            v209 = 2082;
            v210 = "Could not read indication of traffic secondary min width existing.";
            _os_log_impl(&dword_19F029000, v156, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }
          v157 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v157, (uint64_t)":", 1);
          v158 = (_QWORD *)std::ostream::operator<<();
          v159 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)" STYL Parse Error Here: ", 24);
          v160 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)"Could not read indication of traffic secondary min width existing.", 66);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)"\n", 1);
          return 0;
        }
        if (v202.i32[0])
        {
          geo::ibitstream::readFloat((uint64_t *)a1, (uint64_t)&v201);
          if (!LOBYTE(v201))
          {
            if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
              dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
            v171 = GEOGetGeoCSSStyleSheetLog_log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              v207 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
              *(_WORD *)v208 = 1024;
              *(_DWORD *)&v208[2] = 819;
              v209 = 2082;
              v210 = "Could not read traffic secondary min width.";
              _os_log_impl(&dword_19F029000, v171, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
            }
            v172 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v172, (uint64_t)":", 1);
            v173 = (_QWORD *)std::ostream::operator<<();
            v174 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v173, (uint64_t)" STYL Parse Error Here: ", 24);
            v175 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v174, (uint64_t)"Could not read traffic secondary min width.", 43);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v175, (uint64_t)"\n", 1);
            return 0;
          }
          v107 = v202.i32[0];
          if (((a4 - 90) & 0xFFFC) != 0)
            v108 = 482;
          else
            v108 = 11 * (a4 - 90) + 50;
          LOWORD(v201) = v108;
          *(_WORD *)buf = v108;
          buf[2] = 0;
          geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v207);
          *(_DWORD *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, (unsigned __int16 *)&v201) = v107;
        }
        geo::ibitstream::readUIntBits(a1, 1u, (uint64_t)&v201);
        if (!LOBYTE(v201))
        {
          if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
            dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
          v166 = GEOGetGeoCSSStyleSheetLog_log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v207 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
            *(_WORD *)v208 = 1024;
            *(_DWORD *)&v208[2] = 824;
            v209 = 2082;
            v210 = "Could not read indication of traffic max width existing.";
            _os_log_impl(&dword_19F029000, v166, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }
          v167 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, (uint64_t)":", 1);
          v168 = (_QWORD *)std::ostream::operator<<();
          v169 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v168, (uint64_t)" STYL Parse Error Here: ", 24);
          v170 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v169, (uint64_t)"Could not read indication of traffic max width existing.", 56);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v170, (uint64_t)"\n", 1);
          return 0;
        }
        if (v202.i32[0])
        {
          geo::ibitstream::readFloat((uint64_t *)a1, (uint64_t)&v201);
          if (!LOBYTE(v201))
          {
            if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
              dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
            v181 = GEOGetGeoCSSStyleSheetLog_log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              v207 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
              *(_WORD *)v208 = 1024;
              *(_DWORD *)&v208[2] = 827;
              v209 = 2082;
              v210 = "Could not read traffic max width.";
              _os_log_impl(&dword_19F029000, v181, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
            }
            v182 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v182, (uint64_t)":", 1);
            v183 = (_QWORD *)std::ostream::operator<<();
            v184 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v183, (uint64_t)" STYL Parse Error Here: ", 24);
            v185 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v184, (uint64_t)"Could not read traffic max width.", 33);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v185, (uint64_t)"\n", 1);
            return 0;
          }
          v109 = v202.i32[0];
          if (((a4 - 90) & 0xFFFC) != 0)
            v110 = 482;
          else
            v110 = 11 * (a4 - 90) + 51;
          LOWORD(v201) = v110;
          *(_WORD *)buf = v110;
          buf[2] = 0;
          geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v207);
          *(_DWORD *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, (unsigned __int16 *)&v201) = v109;
        }
        geo::ibitstream::readUIntBits(a1, 1u, (uint64_t)&v201);
        if (!LOBYTE(v201))
        {
          if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
            dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
          v176 = GEOGetGeoCSSStyleSheetLog_log;
          if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v207 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
            *(_WORD *)v208 = 1024;
            *(_DWORD *)&v208[2] = 832;
            v209 = 2082;
            v210 = "Could not read indication of traffic secondary max width existing.";
            _os_log_impl(&dword_19F029000, v176, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }
          v177 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v177, (uint64_t)":", 1);
          v178 = (_QWORD *)std::ostream::operator<<();
          v179 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v178, (uint64_t)" STYL Parse Error Here: ", 24);
          v180 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v179, (uint64_t)"Could not read indication of traffic secondary max width existing.", 66);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v180, (uint64_t)"\n", 1);
          return 0;
        }
        if (v202.i32[0])
        {
          geo::ibitstream::readFloat((uint64_t *)a1, (uint64_t)&v201);
          if (!LOBYTE(v201))
          {
            if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
              dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
            v186 = GEOGetGeoCSSStyleSheetLog_log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              v207 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
              *(_WORD *)v208 = 1024;
              *(_DWORD *)&v208[2] = 835;
              v209 = 2082;
              v210 = "Could not read traffic secondary max width.";
              _os_log_impl(&dword_19F029000, v186, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
            }
            v187 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v187, (uint64_t)":", 1);
            v188 = (_QWORD *)std::ostream::operator<<();
            v189 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)" STYL Parse Error Here: ", 24);
            v190 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v189, (uint64_t)"Could not read traffic secondary max width.", 43);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v190, (uint64_t)"\n", 1);
            return 0;
          }
          v111 = v202.i32[0];
          if (((a4 - 90) & 0xFFFC) != 0)
            v112 = 482;
          else
            v112 = 11 * (a4 - 90) + 52;
          LOWORD(v201) = v112;
          *(_WORD *)buf = v112;
          buf[2] = 0;
          geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v207);
          *(_DWORD *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, (unsigned __int16 *)&v201) = v111;
        }
        if (*(_DWORD *)(a5 + 8) >= 0xDu)
        {
          geo::ibitstream::readUIntBits(a1, 1u, (uint64_t)&v201);
          if (!LOBYTE(v201))
          {
            if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
              dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
            v191 = GEOGetGeoCSSStyleSheetLog_log;
            if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              v207 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
              *(_WORD *)v208 = 1024;
              *(_DWORD *)&v208[2] = 842;
              v209 = 2082;
              v210 = "Could not read indication of traffic gradient mask color existing.";
              _os_log_impl(&dword_19F029000, v191, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
            }
            v192 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v192, (uint64_t)":", 1);
            v193 = (_QWORD *)std::ostream::operator<<();
            v194 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v193, (uint64_t)" STYL Parse Error Here: ", 24);
            v195 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v194, (uint64_t)"Could not read indication of traffic gradient mask color existing.", 66);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v195, (uint64_t)"\n", 1);
            return 0;
          }
          if (v202.i32[0])
          {
            geo::ibitstream::readUInt32((uint64_t *)a1, (uint64_t)&v201);
            if (!LOBYTE(v201))
            {
              if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
                dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
              v196 = GEOGetGeoCSSStyleSheetLog_log;
              if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                v207 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
                *(_WORD *)v208 = 1024;
                *(_DWORD *)&v208[2] = 845;
                v209 = 2082;
                v210 = "Could not read gradient mask color.";
                _os_log_impl(&dword_19F029000, v196, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
              }
              v197 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)":", 1);
              v198 = (_QWORD *)std::ostream::operator<<();
              v199 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v198, (uint64_t)" STYL Parse Error Here: ", 24);
              v200 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Could not read gradient mask color.", 35);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"\n", 1);
              return 0;
            }
            v113 = v202.i32[0];
            if ((((_WORD)a4 - 90) & 0xFFFC) != 0)
              v114 = 482;
            else
              v114 = a4 + 338;
            v204 = v114;
            *(_WORD *)buf = v114;
            buf[2] = 0;
            geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v207);
            v115 = bswap32(v113);
            v201 = (float)v115 / 255.0;
            v202 = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v115), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
            v203 = (float)HIBYTE(v115) / 255.0;
            *(_DWORD *)buf = geo::colorTransform<geo::ReverseGammaCorrection>(geo::reverseSRGBGammaCorrection, &v201);
            v207 = (const char *)__PAIR64__(v117, v116);
            *(_DWORD *)v208 = v118;
            geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)buf, &v205);
            v119 = v205;
            *(int16x4_t *)geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 48, &v204) = v119;
          }
        }
      }
    }
    return 1;
  }
  *(_DWORD *)buf = 0;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_BYTE *)(a1 + 24);
  v16 = v14 + 5;
  if (!v15)
    v16 = v14 + 4;
  if (v13 >= v16)
  {
    v37 = *(_QWORD *)a1;
    if (*(_BYTE *)(a1 + 24))
    {
      v38 = 0;
      v39 = v37 + v14;
      v40 = v14 + 1;
      do
      {
        if (v40 + v38 >= v13)
          v41 = 0;
        else
          v41 = *(unsigned __int8 *)(v39 + v38 + 1);
        v42 = ((v41 & (0xFFFF << (8 - v15))) >> (8 - v15)) | ((((1 << (8 - v15)) + 255) & *(unsigned __int8 *)(v39 + v38)) << v15);
        *(_QWORD *)(a1 + 16) = v40 + v38;
        buf[v38++] = v42;
      }
      while (v38 != 4);
      v43 = *(_DWORD *)buf;
    }
    else
    {
      v43 = *(_DWORD *)(v37 + v14);
      *(_QWORD *)(a1 + 16) = v14 + 4;
    }
    if (((a4 - 90) & 0xFFFC) != 0)
      v44 = 482;
    else
      v44 = 11 * (a4 - 90) + 43;
    v204 = v44;
    *(_WORD *)buf = v44;
    buf[2] = 0;
    geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v207);
    v45 = bswap32(v43);
    v201 = (float)v45 / 255.0;
    v202 = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v45), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
    v203 = (float)HIBYTE(v45) / 255.0;
    *(_DWORD *)buf = geo::colorTransform<geo::ReverseGammaCorrection>(geo::reverseSRGBGammaCorrection, &v201);
    v207 = (const char *)__PAIR64__(v47, v46);
    *(_DWORD *)v208 = v48;
    geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)buf, &v205);
    v49 = v205;
    *(int16x4_t *)geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 48, &v204) = v49;
    goto LABEL_45;
  }
  if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
    dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
  v17 = GEOGetGeoCSSStyleSheetLog_log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v207 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
    *(_WORD *)v208 = 1024;
    *(_DWORD *)&v208[2] = 754;
    v209 = 2082;
    v210 = "Could not read traffic fill color.";
    _os_log_impl(&dword_19F029000, v17, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
  }
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)":", 1);
  v19 = (_QWORD *)std::ostream::operator<<();
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" STYL Parse Error Here: ", 24);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Could not read traffic fill color.", 34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n", 1);
  return 0;
}

uint64_t gss::fixedPoint0To1Decoder<gss::PropertyID>(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  NSObject *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  NSObject *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned __int16 v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v10 = gss::idForIndex<gss::PropertyID>(a4);
  v28 = v10;
  if (v10 == 482)
    return 1;
  if (a3 == 8)
  {
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    v14 = v13 + 2;
    if (!*(_BYTE *)(a1 + 24))
      v14 = v13 + 1;
    if (v12 >= v14)
    {
      v25 = v13 + 1;
      v26 = *(unsigned __int8 *)(*(_QWORD *)a1 + v13);
      if (*(_BYTE *)(a1 + 24))
      {
        if (v25 >= v12)
          v27 = 0;
        else
          v27 = *(unsigned __int8 *)(*(_QWORD *)a1 + v25);
        v26 = ((v27 & (0xFFFF << (8 - *(_BYTE *)(a1 + 24)))) >> (8 - *(_BYTE *)(a1 + 24))) | ((((1 << (8 - *(_BYTE *)(a1 + 24))) - 1) & v26) << *(_BYTE *)(a1 + 24));
      }
      *(_QWORD *)(a1 + 16) = v25;
      *(_WORD *)buf = v10;
      buf[2] = 0;
      geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v30);
      *(float *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v28) = (float)v26 / 255.0;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v15 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v31 = 1024;
      v32 = 314;
      v33 = 2082;
      v34 = "Could not read fixed point 0 to 1.";
      _os_log_impl(&dword_19F029000, v15, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)":", 1);
    v17 = (_QWORD *)std::ostream::operator<<();
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" STYL Parse Error Here: ", 24);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Could not read fixed point 0 to 1.", 34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v20 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v31 = 1024;
      v32 = 313;
      v33 = 2082;
      v34 = "Found fixed point 0 to 1 property with strange number of bits.";
      _os_log_impl(&dword_19F029000, v20, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)":", 1);
    v22 = (_QWORD *)std::ostream::operator<<();
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" STYL Parse Error Here: ", 24);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Found fixed point 0 to 1 property with strange number of bits.", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::labelPositionDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 0x1FFu, a4, a6);
}

uint64_t gss::fixedPoint8_8Decoder<gss::PropertyID>(uint64_t *a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  NSObject *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  int v31;
  uint8_t v32;
  unsigned int v33;
  unsigned __int16 v34;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  const char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v10 = gss::idForIndex<gss::PropertyID>(a4);
  v34 = v10;
  if (v10 == 482)
    return 1;
  if (a3 == 16)
  {
    *(_WORD *)buf = 0;
    v12 = a1[1];
    v13 = a1[2];
    v14 = *((_BYTE *)a1 + 24);
    v15 = v13 + 3;
    if (!v14)
      v15 = v13 + 2;
    if (v12 >= v15)
    {
      v26 = *a1;
      if (*((_BYTE *)a1 + 24))
      {
        v27 = 0;
        v28 = 0;
        do
        {
          v29 = v27;
          v30 = v13 + 1;
          if (v13 + 1 >= v12)
            v31 = 0;
          else
            v31 = *(unsigned __int8 *)(v26 + v13 + 1);
          v32 = ((v31 & (0xFFFF << (8 - v14))) >> (8 - v14)) | ((((1 << (8 - v14)) + 255) & *(unsigned __int8 *)(v26 + v13)) << v14);
          a1[2] = v30;
          buf[v28] = v32;
          v27 = 1;
          v13 = v30;
          v28 = 1;
        }
        while ((v29 & 1) == 0);
        v33 = *(unsigned __int16 *)buf;
      }
      else
      {
        v33 = *(unsigned __int16 *)(v26 + v13);
        a1[2] = v13 + 2;
      }
      *(_WORD *)buf = v10;
      buf[2] = 0;
      geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v36);
      *(float *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v34) = (float)v33 * 0.0039062;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v16 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v36 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v37 = 1024;
      v38 = 402;
      v39 = 2082;
      v40 = "Could not read fixed point 8.8.";
      _os_log_impl(&dword_19F029000, v16, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)":", 1);
    v18 = (_QWORD *)std::ostream::operator<<();
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" STYL Parse Error Here: ", 24);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Could not read fixed point 8.8.", 31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v21 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v36 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v37 = 1024;
      v38 = 401;
      v39 = 2082;
      v40 = "Found fixed point 8.8 property with strange number of bits.";
      _os_log_impl(&dword_19F029000, v21, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)":", 1);
    v23 = (_QWORD *)std::ostream::operator<<();
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" STYL Parse Error Here: ", 24);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Found fixed point 8.8 property with strange number of bits.", 59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::uint64Decoder<gss::PropertyID>(uint64_t *a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  NSObject *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int16 v33;
  uint8_t buf[12];
  __int16 v35;
  int v36;
  __int16 v37;
  const char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v10 = gss::idForIndex<gss::PropertyID>(a4);
  v33 = v10;
  if (v10 == 482)
    return 1;
  if (a3 == 64)
  {
    *(_QWORD *)buf = 0;
    v12 = a1[1];
    v13 = a1[2];
    v14 = *((_BYTE *)a1 + 24);
    v15 = v13 + 9;
    if (!v14)
      v15 = v13 + 8;
    if (v12 >= v15)
    {
      v26 = *a1;
      if (*((_BYTE *)a1 + 24))
      {
        v27 = 0;
        v28 = v26 + v13;
        v29 = v13 + 1;
        do
        {
          if (v29 + v27 >= v12)
            v30 = 0;
          else
            v30 = *(unsigned __int8 *)(v28 + v27 + 1);
          v31 = ((v30 & (0xFFFF << (8 - v14))) >> (8 - v14)) | ((((1 << (8 - v14)) + 255) & *(unsigned __int8 *)(v28 + v27)) << v14);
          a1[2] = v29 + v27;
          buf[v27++] = v31;
        }
        while (v27 != 8);
        v32 = *(_QWORD *)buf;
      }
      else
      {
        v32 = *(_QWORD *)(v26 + v13);
        a1[2] = v13 + 8;
      }
      *(_WORD *)buf = v10;
      buf[2] = 0;
      geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&buf[4]);
      *(_QWORD *)geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 48, &v33) = v32;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v16 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v35 = 1024;
      v36 = 514;
      v37 = 2082;
      v38 = "Could not read uint64 property";
      _os_log_impl(&dword_19F029000, v16, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)":", 1);
    v18 = (_QWORD *)std::ostream::operator<<();
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" STYL Parse Error Here: ", 24);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Could not read uint64 property", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v21 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v35 = 1024;
      v36 = 513;
      v37 = 2082;
      v38 = "Found uint64 property with a strange number of bits.";
      _os_log_impl(&dword_19F029000, v21, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)":", 1);
    v23 = (_QWORD *)std::ostream::operator<<();
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" STYL Parse Error Here: ", 24);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Found uint64 property with a strange number of bits.", 52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::labelLayoutStyleDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 0x13u, a4, a6);
}

uint64_t gss::labelIconStyleDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 0xBu, a4, a6);
}

uint64_t gss::labelColorSourceDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 6u, a4, a6);
}

uint64_t gss::fixedPoint6_2Decoder<gss::PropertyID>(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  NSObject *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  NSObject *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned __int16 v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v10 = gss::idForIndex<gss::PropertyID>(a4);
  v28 = v10;
  if (v10 == 482)
    return 1;
  if (a3 == 8)
  {
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    v14 = v13 + 2;
    if (!*(_BYTE *)(a1 + 24))
      v14 = v13 + 1;
    if (v12 >= v14)
    {
      v25 = v13 + 1;
      v26 = *(unsigned __int8 *)(*(_QWORD *)a1 + v13);
      if (*(_BYTE *)(a1 + 24))
      {
        if (v25 >= v12)
          v27 = 0;
        else
          v27 = *(unsigned __int8 *)(*(_QWORD *)a1 + v25);
        v26 = ((v27 & (0xFFFF << (8 - *(_BYTE *)(a1 + 24)))) >> (8 - *(_BYTE *)(a1 + 24))) | ((((1 << (8 - *(_BYTE *)(a1 + 24))) - 1) & v26) << *(_BYTE *)(a1 + 24));
      }
      *(_QWORD *)(a1 + 16) = v25;
      *(_WORD *)buf = v10;
      buf[2] = 0;
      geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v30);
      *(float *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v28) = (float)v26 * 0.25;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v15 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v31 = 1024;
      v32 = 380;
      v33 = 2082;
      v34 = "Could not read fixed point 6.2.";
      _os_log_impl(&dword_19F029000, v15, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)":", 1);
    v17 = (_QWORD *)std::ostream::operator<<();
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" STYL Parse Error Here: ", 24);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Could not read fixed point 6.2.", 31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v20 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v31 = 1024;
      v32 = 379;
      v33 = 2082;
      v34 = "Found fixed point 6.2 property with strange number of bits.";
      _os_log_impl(&dword_19F029000, v20, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)":", 1);
    v22 = (_QWORD *)std::ostream::operator<<();
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" STYL Parse Error Here: ", 24);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Found fixed point 6.2 property with strange number of bits.", 59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::int32Decoder<gss::PropertyID>(uint64_t *a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  NSObject *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned __int16 v33;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  const char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v10 = gss::idForIndex<gss::PropertyID>(a4);
  v33 = v10;
  if (v10 == 482)
    return 1;
  if (a3 == 32)
  {
    *(_DWORD *)buf = 0;
    v12 = a1[1];
    v13 = a1[2];
    v14 = *((_BYTE *)a1 + 24);
    v15 = v13 + 5;
    if (!v14)
      v15 = v13 + 4;
    if (v12 >= v15)
    {
      v26 = *a1;
      if (*((_BYTE *)a1 + 24))
      {
        v27 = 0;
        v28 = v26 + v13;
        v29 = v13 + 1;
        do
        {
          if (v29 + v27 >= v12)
            v30 = 0;
          else
            v30 = *(unsigned __int8 *)(v28 + v27 + 1);
          v31 = ((v30 & (0xFFFF << (8 - v14))) >> (8 - v14)) | ((((1 << (8 - v14)) + 255) & *(unsigned __int8 *)(v28 + v27)) << v14);
          a1[2] = v29 + v27;
          buf[v27++] = v31;
        }
        while (v27 != 4);
        v32 = *(_DWORD *)buf;
      }
      else
      {
        v32 = *(_DWORD *)(v26 + v13);
        a1[2] = v13 + 4;
      }
      *(_WORD *)buf = v10;
      buf[2] = 0;
      geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v35);
      *(_DWORD *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v33) = v32;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v16 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v35 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v36 = 1024;
      v37 = 121;
      v38 = 2082;
      v39 = "Could not read int32.";
      _os_log_impl(&dword_19F029000, v16, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)":", 1);
    v18 = (_QWORD *)std::ostream::operator<<();
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" STYL Parse Error Here: ", 24);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Could not read int32.", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v21 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v35 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v36 = 1024;
      v37 = 120;
      v38 = 2082;
      v39 = "Found int32 property with strange number of bits.";
      _os_log_impl(&dword_19F029000, v21, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)":", 1);
    v23 = (_QWORD *)std::ostream::operator<<();
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" STYL Parse Error Here: ", 24);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Found int32 property with strange number of bits.", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::fixedPoint12_4Decoder<gss::PropertyID>(uint64_t *a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  NSObject *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  int v31;
  uint8_t v32;
  unsigned int v33;
  unsigned __int16 v34;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  const char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v10 = gss::idForIndex<gss::PropertyID>(a4);
  v34 = v10;
  if (v10 == 482)
    return 1;
  if (a3 == 16)
  {
    *(_WORD *)buf = 0;
    v12 = a1[1];
    v13 = a1[2];
    v14 = *((_BYTE *)a1 + 24);
    v15 = v13 + 3;
    if (!v14)
      v15 = v13 + 2;
    if (v12 >= v15)
    {
      v26 = *a1;
      if (*((_BYTE *)a1 + 24))
      {
        v27 = 0;
        v28 = 0;
        do
        {
          v29 = v27;
          v30 = v13 + 1;
          if (v13 + 1 >= v12)
            v31 = 0;
          else
            v31 = *(unsigned __int8 *)(v26 + v13 + 1);
          v32 = ((v31 & (0xFFFF << (8 - v14))) >> (8 - v14)) | ((((1 << (8 - v14)) + 255) & *(unsigned __int8 *)(v26 + v13)) << v14);
          a1[2] = v30;
          buf[v28] = v32;
          v27 = 1;
          v13 = v30;
          v28 = 1;
        }
        while ((v29 & 1) == 0);
        v33 = *(unsigned __int16 *)buf;
      }
      else
      {
        v33 = *(unsigned __int16 *)(v26 + v13);
        a1[2] = v13 + 2;
      }
      *(_WORD *)buf = v10;
      buf[2] = 0;
      geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v36);
      *(float *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v34) = (float)v33 * 0.0625;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v16 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v36 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v37 = 1024;
      v38 = 424;
      v39 = 2082;
      v40 = "Could not read fixed point 12.4.";
      _os_log_impl(&dword_19F029000, v16, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)":", 1);
    v18 = (_QWORD *)std::ostream::operator<<();
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" STYL Parse Error Here: ", 24);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Could not read fixed point 12.4.", 32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v21 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v36 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v37 = 1024;
      v38 = 423;
      v39 = 2082;
      v40 = "Found fixed point 12.4 property with strange number of bits.";
      _os_log_impl(&dword_19F029000, v21, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)":", 1);
    v23 = (_QWORD *)std::ostream::operator<<();
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" STYL Parse Error Here: ", 24);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Found fixed point 12.4 property with strange number of bits.", 60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::fixedPoint0to2_55Decoder<gss::PropertyID>(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  NSObject *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  NSObject *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned __int16 v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v10 = gss::idForIndex<gss::PropertyID>(a4);
  v28 = v10;
  if (v10 == 482)
    return 1;
  if (a3 == 8)
  {
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    v14 = v13 + 2;
    if (!*(_BYTE *)(a1 + 24))
      v14 = v13 + 1;
    if (v12 >= v14)
    {
      v25 = v13 + 1;
      v26 = *(unsigned __int8 *)(*(_QWORD *)a1 + v13);
      if (*(_BYTE *)(a1 + 24))
      {
        if (v25 >= v12)
          v27 = 0;
        else
          v27 = *(unsigned __int8 *)(*(_QWORD *)a1 + v25);
        v26 = ((v27 & (0xFFFF << (8 - *(_BYTE *)(a1 + 24)))) >> (8 - *(_BYTE *)(a1 + 24))) | ((((1 << (8 - *(_BYTE *)(a1 + 24))) - 1) & v26) << *(_BYTE *)(a1 + 24));
      }
      *(_QWORD *)(a1 + 16) = v25;
      *(_WORD *)buf = v10;
      buf[2] = 0;
      geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v30);
      *(float *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v28) = (float)v26 / 100.0;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v15 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v31 = 1024;
      v32 = 358;
      v33 = 2082;
      v34 = "Could not read fixed point 0 to 2.55.";
      _os_log_impl(&dword_19F029000, v15, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)":", 1);
    v17 = (_QWORD *)std::ostream::operator<<();
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" STYL Parse Error Here: ", 24);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Could not read fixed point 0 to 2.55.", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v20 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v31 = 1024;
      v32 = 357;
      v33 = 2082;
      v34 = "Found fixed point 0 to 2.55 property with strange number of bits.";
      _os_log_impl(&dword_19F029000, v20, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)":", 1);
    v22 = (_QWORD *)std::ostream::operator<<();
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" STYL Parse Error Here: ", 24);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Found fixed point 0 to 2.55 property with strange number of bits.", 65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::labelMeshPositioningModeDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 7u, a4, a6);
}

uint64_t gss::labelTextSourceDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 0xBu, a4, a6);
}

uint64_t gss::labelOccludedAppearanceDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 4u, a4, a6);
}

uint64_t gss::strokePositionDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 2u, a4, a6);
}

uint64_t gss::polygonPlacementDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 2u, a4, a6);
}

uint64_t gss::externalFeatureCategoryDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 3u, a4, a6);
}

uint64_t gss::grlVariantDEPRECATEDDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 0xBu, a4, a6);
}

uint64_t gss::labelShieldVariantDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 2u, a4, a6);
}

uint64_t gss::balloonBehaviorDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 2u, a4, a6);
}

uint64_t gss::labelCollisionOverlayGroupDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 4u, a4, a6);
}

uint64_t gss::fixedPoint5_3Decoder<gss::PropertyID>(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  NSObject *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  NSObject *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned __int16 v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v10 = gss::idForIndex<gss::PropertyID>(a4);
  v28 = v10;
  if (v10 == 482)
    return 1;
  if (a3 == 8)
  {
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    v14 = v13 + 2;
    if (!*(_BYTE *)(a1 + 24))
      v14 = v13 + 1;
    if (v12 >= v14)
    {
      v25 = v13 + 1;
      v26 = *(unsigned __int8 *)(*(_QWORD *)a1 + v13);
      if (*(_BYTE *)(a1 + 24))
      {
        if (v25 >= v12)
          v27 = 0;
        else
          v27 = *(unsigned __int8 *)(*(_QWORD *)a1 + v25);
        v26 = ((v27 & (0xFFFF << (8 - *(_BYTE *)(a1 + 24)))) >> (8 - *(_BYTE *)(a1 + 24))) | ((((1 << (8 - *(_BYTE *)(a1 + 24))) - 1) & v26) << *(_BYTE *)(a1 + 24));
      }
      *(_QWORD *)(a1 + 16) = v25;
      *(_WORD *)buf = v10;
      buf[2] = 0;
      geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v30);
      *(float *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v28) = (float)v26 * 0.125;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v15 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v31 = 1024;
      v32 = 270;
      v33 = 2082;
      v34 = "Could not read fixed point 5.3.";
      _os_log_impl(&dword_19F029000, v15, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)":", 1);
    v17 = (_QWORD *)std::ostream::operator<<();
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" STYL Parse Error Here: ", 24);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Could not read fixed point 5.3.", 31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v20 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v31 = 1024;
      v32 = 269;
      v33 = 2082;
      v34 = "Found fixed point 5.3 property with strange number of bits.";
      _os_log_impl(&dword_19F029000, v20, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)":", 1);
    v22 = (_QWORD *)std::ostream::operator<<();
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" STYL Parse Error Here: ", 24);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Found fixed point 5.3 property with strange number of bits.", 59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::iconGradientDecoder<gss::PropertyID>(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  NSObject *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  NSObject *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  NSObject *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int16x4_t v49;
  unint64_t v50;
  _QWORD *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int16x4_t v56;
  float v57;
  float32x2_t v58;
  float v59;
  int16x4_t v60;
  uint8_t buf[4];
  const char *v62;
  _BYTE v63[6];
  __int16 v64;
  const char *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if (a3 != 64)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v17 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v62 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      *(_WORD *)v63 = 1024;
      *(_DWORD *)&v63[2] = 461;
      v64 = 2082;
      v65 = "Found color gradient with strange number of bits.";
      _os_log_impl(&dword_19F029000, v17, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)":", 1);
    v19 = (_QWORD *)std::ostream::operator<<();
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" STYL Parse Error Here: ", 24);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Found color gradient with strange number of bits.", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n", 1);
    return 0;
  }
  *(_DWORD *)buf = 0;
  v7 = a1[1];
  v8 = a1[2];
  v9 = v8 + 4;
  v10 = *((_BYTE *)a1 + 24);
  v11 = v8 + 5;
  if (!v10)
    v11 = v8 + 4;
  if (v7 < v11)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v12 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v62 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      *(_WORD *)v63 = 1024;
      *(_DWORD *)&v63[2] = 462;
      v64 = 2082;
      v65 = "Could not read first half of color gradient.";
      _os_log_impl(&dword_19F029000, v12, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)":", 1);
    v14 = (_QWORD *)std::ostream::operator<<();
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" STYL Parse Error Here: ", 24);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Could not read first half of color gradient.", 44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n", 1);
    return 0;
  }
  v24 = *a1;
  if (*((_BYTE *)a1 + 24))
  {
    v25 = 0;
    v26 = 8 - v10;
    v27 = 0xFFFF << (8 - v10);
    v28 = v24 + v8;
    do
    {
      v29 = v8 + v25 + 1;
      if (v29 >= v7)
        v30 = 0;
      else
        v30 = *(unsigned __int8 *)(v28 + v25 + 1);
      v31 = ((v30 & v27) >> v26) | ((((1 << (8 - v10)) - 1) & *(_BYTE *)(v28 + v25)) << v10);
      a1[2] = v29;
      buf[v25++] = v31;
    }
    while (v25 != 4);
    v32 = *(_DWORD *)buf;
    *(_DWORD *)buf = 0;
    v33 = v8 + 4;
    if (v7 >= v33 + 5)
    {
      v34 = 0;
      v35 = v33 + v24;
      do
      {
        v36 = v33 + v34 + 1;
        if (v36 >= v7)
          v37 = 0;
        else
          v37 = *(unsigned __int8 *)(v35 + v34 + 1);
        v38 = ((v37 & v27) >> v26) | ((((1 << (8 - v10)) - 1) & *(_BYTE *)(v35 + v34)) << v10);
        a1[2] = v36;
        buf[v34++] = v38;
      }
      while (v34 != 4);
      v39 = *(_DWORD *)buf;
      goto LABEL_36;
    }
LABEL_30:
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v40 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v62 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      *(_WORD *)v63 = 1024;
      *(_DWORD *)&v63[2] = 463;
      v64 = 2082;
      v65 = "Could not read second half of color gradient.";
      _os_log_impl(&dword_19F029000, v40, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)":", 1);
    v42 = (_QWORD *)std::ostream::operator<<();
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" STYL Parse Error Here: ", 24);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Could not read second half of color gradient.", 45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"\n", 1);
    return 0;
  }
  v32 = *(_DWORD *)(v24 + v8);
  a1[2] = v9;
  if (v7 < v8 + 8 + (unint64_t)(v10 != 0))
    goto LABEL_30;
  v39 = *(_DWORD *)(v24 + v9);
  a1[2] = v8 + 8;
LABEL_36:
  *(_WORD *)buf = 4;
  buf[2] = 0;
  geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v62);
  *(_WORD *)buf = 5;
  buf[2] = 0;
  geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v62);
  v45 = bswap32(v32);
  v57 = (float)v45 / 255.0;
  v58 = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v45), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
  v59 = (float)HIBYTE(v45) / 255.0;
  *(_DWORD *)buf = geo::colorTransform<geo::ReverseGammaCorrection>(geo::reverseSRGBGammaCorrection, &v57);
  v62 = (const char *)__PAIR64__(v47, v46);
  *(_DWORD *)v63 = v48;
  geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)buf, &v60);
  v49 = v60;
  v50 = a2 + 48;
  *(_WORD *)buf = 4;
  v51 = (_QWORD *)geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 48, (unsigned __int16 *)buf);
  v52 = bswap32(v39);
  *v51 = v49;
  v57 = (float)v52 / 255.0;
  v58 = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v52), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)vdup_n_s32(0x437F0000u));
  v59 = (float)HIBYTE(v52) / 255.0;
  *(_DWORD *)buf = geo::colorTransform<geo::ReverseGammaCorrection>(geo::reverseSRGBGammaCorrection, &v57);
  v62 = (const char *)__PAIR64__(v54, v53);
  *(_DWORD *)v63 = v55;
  geo::_wordColor<float,4,(geo::ColorSpace)0>((float32x4_t *)buf, &v60);
  v56 = v60;
  *(_WORD *)buf = 5;
  *(int16x4_t *)geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](v50, (unsigned __int16 *)buf) = v56;
  return 1;
}

uint64_t gss::labelTextPlacementSourceDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 1u, a4, a6);
}

uint64_t gss::labelPositionAnchorDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 2u, a4, a6);
}

uint64_t gss::labelIconGlyphStyleDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 3u, a4, a6);
}

uint64_t gss::floatPairDecoder<gss::PropertyID>(uint64_t *a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  NSObject *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  NSObject *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  int v42;
  NSObject *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _DWORD *v48;
  unsigned __int16 v49;
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  int v53;
  __int16 v54;
  const char *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v10 = gss::idForIndex<gss::PropertyID>(a4);
  v49 = v10;
  if (v10 == 482)
    return 1;
  if (a3 != 64)
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v22 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v51 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v52 = 1024;
      v53 = 444;
      v54 = 2082;
      v55 = "Found float pair property with strange number of bits.";
      _os_log_impl(&dword_19F029000, v22, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)":", 1);
    v24 = (_QWORD *)std::ostream::operator<<();
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" STYL Parse Error Here: ", 24);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Found float pair property with strange number of bits.", 54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\n", 1);
    return 0;
  }
  *(_DWORD *)buf = 0;
  v12 = a1[1];
  v13 = a1[2];
  v14 = v13 + 4;
  v15 = *((_BYTE *)a1 + 24);
  v16 = v13 + 5;
  if (!v15)
    v16 = v13 + 4;
  if (v12 >= v16)
  {
    v27 = *a1;
    if (*((_BYTE *)a1 + 24))
    {
      v28 = 0;
      v29 = 8 - v15;
      v30 = 0xFFFF << (8 - v15);
      v31 = v27 + v13;
      do
      {
        v32 = v13 + v28 + 1;
        if (v32 >= v12)
          v33 = 0;
        else
          v33 = *(unsigned __int8 *)(v31 + v28 + 1);
        v34 = ((v33 & v30) >> v29) | ((((1 << (8 - v15)) - 1) & *(_BYTE *)(v31 + v28)) << v15);
        a1[2] = v32;
        buf[v28++] = v34;
      }
      while (v28 != 4);
      v35 = *(_DWORD *)buf;
      *(_DWORD *)buf = 0;
      v36 = v13 + 4;
      if (v12 >= v36 + 5)
      {
        v37 = 0;
        v38 = v36 + v27;
        do
        {
          v39 = v36 + v37 + 1;
          if (v39 >= v12)
            v40 = 0;
          else
            v40 = *(unsigned __int8 *)(v38 + v37 + 1);
          v41 = ((v40 & v30) >> v29) | ((((1 << (8 - v15)) - 1) & *(_BYTE *)(v38 + v37)) << v15);
          a1[2] = v39;
          buf[v37++] = v41;
        }
        while (v37 != 4);
        v42 = *(_DWORD *)buf;
        goto LABEL_38;
      }
    }
    else
    {
      v35 = *(_DWORD *)(v27 + v13);
      a1[2] = v14;
      if (v12 >= v13 + 8 + (unint64_t)(v15 != 0))
      {
        v42 = *(_DWORD *)(v27 + v14);
        a1[2] = v13 + 8;
LABEL_38:
        *(_WORD *)buf = v10;
        buf[2] = 0;
        geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v51);
        v48 = (_DWORD *)geo::intern_linear_map<gss::PropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 48, &v49);
        *v48 = v35;
        v48[1] = v42;
        return 1;
      }
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v43 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v51 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v52 = 1024;
      v53 = 446;
      v54 = 2082;
      v55 = "Could not read second half of float pair.";
      _os_log_impl(&dword_19F029000, v43, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)":", 1);
    v45 = (_QWORD *)std::ostream::operator<<();
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" STYL Parse Error Here: ", 24);
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Could not read second half of float pair.", 41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"\n", 1);
    return 0;
  }
  if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
    dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
  v17 = GEOGetGeoCSSStyleSheetLog_log;
  if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v51 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
    v52 = 1024;
    v53 = 445;
    v54 = 2082;
    v55 = "Could not read first half of float pair.";
    _os_log_impl(&dword_19F029000, v17, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
  }
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)":", 1);
  v19 = (_QWORD *)std::ostream::operator<<();
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" STYL Parse Error Here: ", 24);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Could not read first half of float pair.", 40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n", 1);
  return 0;
}

uint64_t gss::labelPerspectiveScalingModeDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 3u, a4, a6);
}

uint64_t gss::labelAnnotationLayoutDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 6u, a4, a6);
}

uint64_t gss::labelOrientationDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 0x20u, a4, a6);
}

uint64_t gss::labelPositioningModeDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 5u, a4, a6);
}

uint64_t gss::fixedPoint8_0Decoder<gss::PropertyID>(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  NSObject *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  NSObject *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned __int16 v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v10 = gss::idForIndex<gss::PropertyID>(a4);
  v28 = v10;
  if (v10 == 482)
    return 1;
  if (a3 == 8)
  {
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    v14 = v13 + 2;
    if (!*(_BYTE *)(a1 + 24))
      v14 = v13 + 1;
    if (v12 >= v14)
    {
      v25 = v13 + 1;
      v26 = *(unsigned __int8 *)(*(_QWORD *)a1 + v13);
      if (*(_BYTE *)(a1 + 24))
      {
        if (v25 >= v12)
          v27 = 0;
        else
          v27 = *(unsigned __int8 *)(*(_QWORD *)a1 + v25);
        v26 = ((v27 & (0xFFFF << (8 - *(_BYTE *)(a1 + 24)))) >> (8 - *(_BYTE *)(a1 + 24))) | ((((1 << (8 - *(_BYTE *)(a1 + 24))) - 1) & v26) << *(_BYTE *)(a1 + 24));
      }
      *(_QWORD *)(a1 + 16) = v25;
      *(_WORD *)buf = v10;
      buf[2] = 0;
      geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v30);
      *(float *)geo::intern_linear_map<gss::PropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 32, &v28) = (float)v26;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v15 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v31 = 1024;
      v32 = 292;
      v33 = 2082;
      v34 = "Could not read fixed point 8.0.";
      _os_log_impl(&dword_19F029000, v15, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)":", 1);
    v17 = (_QWORD *)std::ostream::operator<<();
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" STYL Parse Error Here: ", 24);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Could not read fixed point 8.0.", 31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v20 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v31 = 1024;
      v32 = 291;
      v33 = 2082;
      v34 = "Found fixed point 8.0 property with strange number of bits.";
      _os_log_impl(&dword_19F029000, v20, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)":", 1);
    v22 = (_QWORD *)std::ostream::operator<<();
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" STYL Parse Error Here: ", 24);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Found fixed point 8.0 property with strange number of bits.", 59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::uint8Decoder<gss::PropertyID>(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  int v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  NSObject *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  NSObject *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned __int16 v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v10 = gss::idForIndex<gss::PropertyID>(a4);
  v28 = v10;
  if (v10 == 482)
    return 1;
  if (a3 == 8)
  {
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    v14 = v13 + 2;
    if (!*(_BYTE *)(a1 + 24))
      v14 = v13 + 1;
    if (v12 >= v14)
    {
      v25 = v13 + 1;
      v26 = *(unsigned __int8 *)(*(_QWORD *)a1 + v13);
      if (*(_BYTE *)(a1 + 24))
      {
        if (v25 >= v12)
          v27 = 0;
        else
          v27 = *(unsigned __int8 *)(*(_QWORD *)a1 + v25);
        v26 = ((v27 & (0xFFFF << (8 - *(_BYTE *)(a1 + 24)))) >> (8 - *(_BYTE *)(a1 + 24))) | ((((1 << (8 - *(_BYTE *)(a1 + 24))) - 1) & v26) << *(_BYTE *)(a1 + 24));
      }
      *(_QWORD *)(a1 + 16) = v25;
      *(_WORD *)buf = v10;
      buf[2] = 0;
      geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::insert<std::pair<gss::PropertyID const,unsigned char> const*>(a2, (uint64_t)buf, (uint64_t)&v30);
      *(_BYTE *)geo::intern_linear_map<gss::PropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](a2 + 16, &v28) = v26;
      return 1;
    }
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v15 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v31 = 1024;
      v32 = 141;
      v33 = 2082;
      v34 = "Could not read uint8.";
      _os_log_impl(&dword_19F029000, v15, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)":", 1);
    v17 = (_QWORD *)std::ostream::operator<<();
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" STYL Parse Error Here: ", 24);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Could not read uint8.", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
  }
  else
  {
    if (GEOGetGeoCSSStyleSheetLog_onceToken != -1)
      dispatch_once(&GEOGetGeoCSSStyleSheetLog_onceToken, &__block_literal_global);
    v20 = GEOGetGeoCSSStyleSheetLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoCSSStyleSheetLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v30 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp";
      v31 = 1024;
      v32 = 140;
      v33 = 2082;
      v34 = "Found uint8 property with strange number of bits.";
      _os_log_impl(&dword_19F029000, v20, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StylePropertySet.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)":", 1);
    v22 = (_QWORD *)std::ostream::operator<<();
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" STYL Parse Error Here: ", 24);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Found uint8 property with strange number of bits.", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n", 1);
  }
  return 0;
}

uint64_t gss::occlusionVisibilityDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 1u, a4, a6);
}

uint64_t gss::occlusionBehaviorDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 2u, a4, a6);
}

uint64_t gss::genericShieldStyleDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 5u, a4, a6);
}

uint64_t gss::labelImageSourceDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 7u, a4, a6);
}

uint64_t gss::linePlacementDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 1u, a4, a6);
}

uint64_t gss::fillPositionDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 1u, a4, a6);
}

uint64_t gss::buildingRoofDecoder<gss::PropertyID>(uint64_t a1, unint64_t a2, unsigned __int8 a3, unsigned int a4, uint64_t a5, _QWORD *a6)
{
  return gss::enumDecoder<gss::PropertyID>(a1, a2, a3, 1u, a4, a6);
}

uint64_t md::DaVinciGroundTileData::_buildBuildings(uint64_t a1, geo::codec::VectorTile **a2, uint64_t a3, float *a4, _OWORD *a5)
{
  void *v8;
  uint64_t v9;
  int v10;
  int16x8_t *v11;
  int16x8_t *v12;
  uint64_t v13;
  geo::codec::VectorTile *v14;
  double v15;
  double v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  _BOOL4 v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  _QWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t **n;
  uint64_t v43;
  _BYTE *v44;
  char v45;
  char v46;
  char v47;
  _BYTE *v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint8x8_t v58;
  uint64_t **v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v65;
  _QWORD *v67;
  float v68;
  _BOOL8 v69;
  unint64_t v70;
  unint64_t v71;
  size_t prime;
  void *v73;
  void *v74;
  uint64_t v75;
  _QWORD **v76;
  size_t v77;
  size_t v78;
  size_t v79;
  _QWORD *m;
  size_t v81;
  uint64_t v82;
  unint64_t v83;
  uint8x8_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  size_t v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  unsigned __int16 *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _WORD *v102;
  unsigned int v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t *v106;
  _QWORD *v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  unint64_t *v114;
  char *v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t *v118;
  unint64_t *v119;
  unint64_t *v120;
  unint64_t *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t (**v124)();
  _QWORD *v125;
  std::__shared_weak_count **v126;
  int v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t *v133;
  int v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t *v137;
  int v138;
  int v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  char *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int64x2_t v149;
  int64x2_t v150;
  int8x16_t *v151;
  int64x2_t v152;
  unint64_t v153;
  int64x2_t v154;
  int64x2_t v155;
  int64x2_t v156;
  int64x2_t v157;
  int64x2_t v158;
  int64x2_t v159;
  int64x2_t v160;
  int64x2_t v161;
  int64x2_t v162;
  int64x2_t v163;
  int64x2_t v164;
  int64x2_t v165;
  int64x2_t v166;
  int8x16_t v167;
  int8x16_t v168;
  uint8x16_t v169;
  uint16x8_t v170;
  uint32x4_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int64x2_t v174;
  uint32x4_t v175;
  int64x2_t v176;
  uint16x8_t v177;
  uint32x4_t v178;
  int64x2_t v179;
  int64x2_t v180;
  int64x2_t v181;
  uint32x4_t v182;
  int64x2_t v183;
  int64x2_t v184;
  uint8x16_t v185;
  uint16x8_t v186;
  uint32x4_t v187;
  int64x2_t v188;
  int64x2_t v189;
  uint32x4_t v190;
  int64x2_t v191;
  uint16x8_t v192;
  uint32x4_t v193;
  int64x2_t v194;
  int64x2_t v195;
  int64x2_t v196;
  uint32x4_t v197;
  int64x2_t v198;
  unint64_t v199;
  int64x2_t v200;
  int64x2_t v201;
  uint64_t v202;
  int8x8_t *v203;
  int64x2_t v204;
  int64x2_t v205;
  int8x8_t v206;
  uint16x8_t v207;
  uint32x4_t v208;
  int8x16_t v209;
  int8x16_t v210;
  int64x2_t v211;
  int64x2_t v212;
  uint32x4_t v213;
  int64x2_t v214;
  char v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t j;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  int8x16_t *v222;
  int8x16_t *v223;
  unint64_t v224;
  unint64_t v225;
  int64x2_t v226;
  int64x2_t v227;
  int8x16_t *v228;
  int64x2_t v229;
  unint64_t v230;
  int64x2_t v231;
  int64x2_t v232;
  int64x2_t v233;
  int64x2_t v234;
  int64x2_t v235;
  int64x2_t v236;
  int64x2_t v237;
  int64x2_t v238;
  int64x2_t v239;
  int64x2_t v240;
  int64x2_t v241;
  int64x2_t v242;
  int64x2_t v243;
  int8x16_t v244;
  int8x16_t v245;
  uint8x16_t v246;
  uint16x8_t v247;
  uint32x4_t v248;
  int8x16_t v249;
  int8x16_t v250;
  int64x2_t v251;
  uint32x4_t v252;
  int64x2_t v253;
  uint16x8_t v254;
  uint32x4_t v255;
  int64x2_t v256;
  int64x2_t v257;
  int64x2_t v258;
  uint32x4_t v259;
  int64x2_t v260;
  int64x2_t v261;
  uint8x16_t v262;
  uint16x8_t v263;
  uint32x4_t v264;
  int64x2_t v265;
  int64x2_t v266;
  uint32x4_t v267;
  int64x2_t v268;
  uint16x8_t v269;
  uint32x4_t v270;
  int64x2_t v271;
  int64x2_t v272;
  int64x2_t v273;
  uint32x4_t v274;
  int64x2_t v275;
  unint64_t v276;
  int64x2_t v277;
  int64x2_t v278;
  unint64_t v279;
  int8x8_t *v280;
  int64x2_t v281;
  int64x2_t v282;
  int8x8_t v283;
  uint16x8_t v284;
  uint32x4_t v285;
  int8x16_t v286;
  int8x16_t v287;
  int64x2_t v288;
  int64x2_t v289;
  uint32x4_t v290;
  int64x2_t v291;
  __int8 v292;
  int v293;
  int v294;
  float v295;
  unint64_t v296;
  int v297;
  uint64_t v298;
  unint64_t *v299;
  char *v300;
  uint64_t v301;
  _QWORD *v302;
  uint64_t v303;
  char *v304;
  char *k;
  void *v306;
  void *v307;
  char *v308;
  char *v309;
  unint64_t v310;
  char *v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  char *v315;
  char *v316;
  char *v317;
  __int128 v318;
  __int128 v319;
  char *v320;
  void *v321;
  void *v322;
  unint64_t v323;
  uint64_t **v324;
  _QWORD *v325;
  char *v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  unint64_t v330;
  char *v331;
  uint64_t **v332;
  unint64_t v333;
  uint64_t v334;
  char *v335;
  uint64_t **v336;
  uint64_t v337;
  __int128 v338;
  uint64_t *v339;
  int8x8_t v340;
  uint8x8_t v341;
  unint64_t v342;
  uint64_t ***v343;
  uint64_t **v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t *v347;
  unint64_t v348;
  char *v349;
  _WORD *v350;
  int v351;
  char *v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  _BYTE *v359;
  _WORD *v360;
  unint64_t v361;
  uint64_t v362;
  _OWORD *v363;
  char *v364;
  unint64_t v365;
  __int128 v366;
  __int16 v367;
  int v368;
  unint64_t v369;
  void *v370;
  _QWORD *v371;
  unint64_t *v372;
  char *v373;
  int v374;
  uint64_t v375;
  unsigned __int8 v376;
  uint64_t v377;
  uint64_t v378;
  std::__shared_weak_count *v379;
  std::__shared_weak_count *v380;
  _QWORD *v381;
  _DWORD *v382;
  uint64_t v383;
  uint64_t v384;
  _DWORD *v385;
  _DWORD *v386;
  uint64_t v387;
  uint64_t v388;
  unint64_t v389;
  int shared_owners_high;
  unint64_t *p_shared_owners;
  unint64_t v392;
  unint64_t v393;
  uint64_t v394;
  unint64_t *v395;
  unint64_t v396;
  std::__shared_weak_count *v397;
  unint64_t *v398;
  unint64_t v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  unint64_t v402;
  std::__shared_weak_count_vtbl *v403;
  std::__shared_weak_count *v404;
  void **v405;
  uint64_t *ii;
  uint64_t *v407;
  std::__shared_weak_count *v408;
  unint64_t *v409;
  unint64_t v410;
  unint64_t *v411;
  unint64_t v412;
  unint64_t *v413;
  unint64_t v414;
  std::__shared_weak_count *v415;
  unint64_t *v416;
  unint64_t v417;
  uint64_t v419;
  uint64_t v420;
  char v421;
  _OWORD *v422;
  int v423;
  uint64_t v424;
  void **v425;
  unint64_t v426;
  int v427;
  int16x8_t **v428;
  uint64_t *v429;
  uint64_t v430;
  _QWORD *v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  float *v436;
  unsigned __int16 *v437;
  geo::codec::VectorTile **v440;
  _BYTE *v441;
  uint64_t v442;
  int v443;
  uint64_t v444;
  uint64_t v445;
  char *v446;
  int64x2_t v447;
  int64x2_t v448;
  _QWORD *v449;
  _QWORD *v450[2];
  char *v451;
  std::__shared_weak_count *v452;
  void *__p[2];
  __int128 v454;
  float v455;
  unint64_t *v456;
  unint64_t *v457;
  char *i;
  void *v459;
  char *v460;
  uint64_t v461;
  void *v462[2];
  void *v463[2];
  __int128 v464;
  _QWORD v465[3];
  uint64_t v466;
  int v467;
  uint64_t v468;
  unint64_t v469;
  _QWORD v470[3];
  _QWORD *v471;
  _QWORD v472[3];
  _QWORD *v473;
  unint64_t v474;
  std::__shared_weak_count *v475;
  unint64_t *v476;
  std::__shared_weak_count *v477;
  std::__shared_weak_count *v478;
  std::__shared_weak_count **v479;
  uint64_t v480;

  v480 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = 0u;
  v454 = 0u;
  v455 = 1.0;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v423 = objc_msgSend(v8, "daVinciColorBuildings");

  v451 = 0;
  v452 = 0;
  v9 = geo::codec::VectorTile::key(*a2);
  v10 = -1 << (*(_BYTE *)(a1 + 169) - (*(_BYTE *)(v9 + 1) & 0x3F));
  v428 = geo::codec::VectorTile::daVinciSubTileBuildingIndices(*a2, *(_DWORD *)(a1 + 176) & ~v10, *(_DWORD *)(a1 + 172) & ~v10, (*(_BYTE *)(a1 + 169) - (*(_BYTE *)(v9 + 1) & 0x3F)));
  v12 = *v428;
  v11 = v428[1];
  v432 = geo::codec::VectorTile::daVinciBuildings(*a2);
  v419 = geo::codec::VectorTile::daVinciBuildingSections(*a2);
  v435 = geo::codec::VectorTile::daVinciLineLoops(*a2);
  v13 = geo::codec::VectorTile::daVinciBuildingVertices(*a2);
  v14 = *a2;
  if (v13)
  {
    v434 = geo::codec::VectorTile::daVinciBuildingVertices(v14);
  }
  else
  {
    v21 = geo::codec::VectorTile::daVinciVertices(v14);
    v434 = v21 + 12 * geo::codec::VectorTile::daVinciBuildingVertexOffset(*a2);
  }
  v425 = geo::codec::VectorTile::buildingTileIntersectionInfo((void **)*a2, v15, v16, v17, v18, v19, v20);
  v420 = geo::codec::VectorTile::buildingToModifierMap(*a2);
  v22 = geo::codec::VectorTile::daVinciBuildingColorsArePresent(*a2);
  v23 = v22;
  v24 = (char *)v11 - (char *)v12;
  v467 = -1;
  v440 = a2;
  v422 = a5;
  v436 = a4;
  if ((v423 & 1) == 0)
  {
    v38 = operator new(0x78uLL);
    v38[1] = 0;
    v38[2] = 0;
    *v38 = &off_1E42DAF68;
    v27 = (char *)(v38 + 3);
    md::StyleTexture<md::DaVinciGroundTileData::BuildingColorStyle>::StyleTexture((uint64_t)(v38 + 3), 1uLL);
    v451 = (char *)(v38 + 3);
    v452 = (std::__shared_weak_count *)v38;
    v39 = (_DWORD *)v38[3];
LABEL_22:
    if (v467 != *v39)
    {
      *((_BYTE *)v38 + 56) = 1;
      *v39 = -1;
    }
LABEL_24:
    if (!(unsigned __int16)(v24 >> 1))
      goto LABEL_401;
    goto LABEL_25;
  }
  if (!v22)
  {
    v40 = *(unsigned __int16 *)(v420 + 24);
    if (!*(_WORD *)(v420 + 24))
    {
      v27 = 0;
      if (!(unsigned __int16)(v24 >> 1))
      {
LABEL_401:
        if (!v27)
          goto LABEL_437;
        goto LABEL_402;
      }
LABEL_25:
      v49 = 0;
      v50 = 0;
      v421 = v423 ^ 1 | v23;
      v424 = (unsigned __int16)(v24 >> 1);
      while (1)
      {
        v51 = (*v428)->u16[v49];
        v52 = (uint64_t *)(v432 + 40 * v51);
        v53 = v52[2];
        v54 = (unint64_t)*v425;
        v429 = v52;
        md::createFeatureAttributeSet((gss::Allocator *)v465, v52);
        if (v53)
          break;
LABEL_388:
        if (v465[0])
        {
          v465[1] = v465[0];
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v466 + 40))(v466, v465[0], v465[2] - v465[0]);
        }
        if (++v49 == v424)
        {
          v27 = v451;
          goto LABEL_401;
        }
      }
      v427 = v50;
      v430 = v49;
      v433 = v51;
      v426 = v54;
      v55 = *(unsigned __int8 *)(v54 + v51);
      v56 = ((v53 << 6) + (v53 >> 2) + v55 - 0x61C8864680B583EBLL) ^ v53;
      v57 = (unint64_t)__p[1];
      if (__p[1])
      {
        v58 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v58.i16[0] = vaddlv_u8(v58);
        if (v58.u32[0] > 1uLL)
        {
          v54 = ((v53 << 6) + (v53 >> 2) + v55 - 0x61C8864680B583EBLL) ^ v53;
          if ((void *)v56 >= __p[1])
            v54 = v56 % (unint64_t)__p[1];
        }
        else
        {
          v54 = v56 & ((unint64_t)__p[1] - 1);
        }
        v59 = (uint64_t **)*((_QWORD *)__p[0] + v54);
        if (v59)
        {
          v60 = *v59;
          if (v60)
          {
            v61 = v60;
            if (v58.u32[0] < 2uLL)
            {
              v62 = v60;
              while (1)
              {
                v65 = v62[1];
                if (v65 == v56)
                {
                  if (v62[2] == v53 && *((unsigned __int8 *)v62 + 24) == (_DWORD)v55)
                  {
                    v431 = v62;
                    goto LABEL_117;
                  }
                }
                else if ((v65 & ((uint64_t)__p[1] - 1)) != v54)
                {
                  goto LABEL_57;
                }
                v62 = (uint64_t *)*v62;
                if (!v62)
                  goto LABEL_57;
              }
            }
            do
            {
              v63 = v61[1];
              if (v63 == v56)
              {
                if (v61[2] == v53 && *((unsigned __int8 *)v61 + 24) == (_DWORD)v55)
                {
                  v431 = v61;
                  goto LABEL_117;
                }
              }
              else
              {
                if ((void *)v63 >= __p[1])
                  v63 %= (unint64_t)__p[1];
                if (v63 != v54)
                  break;
              }
              v61 = (uint64_t *)*v61;
            }
            while (v61);
          }
        }
      }
LABEL_57:
      v67 = operator new(0x38uLL);
      v462[0] = v67;
      v462[1] = &v454;
      *v67 = 0;
      v67[1] = v56;
      v67[2] = v53;
      *((_BYTE *)v67 + 24) = v55;
      v67[5] = 0;
      v67[6] = 0;
      v67[4] = 0;
      v431 = v67;
      LOBYTE(v463[0]) = 1;
      v68 = (float)(unint64_t)(*((_QWORD *)&v454 + 1) + 1);
      if (v57 && (float)(v455 * (float)v57) >= v68)
      {
LABEL_107:
        v89 = __p[0];
        v90 = (_QWORD *)*((_QWORD *)__p[0] + v54);
        if (v90)
        {
          v91 = v431;
          *v431 = *v90;
        }
        else
        {
          *v431 = v454;
          *(_QWORD *)&v454 = v431;
          v89[v54] = &v454;
          if (!*v431)
            goto LABEL_116;
          v92 = *(_QWORD *)(*v431 + 8);
          if ((v57 & (v57 - 1)) != 0)
          {
            if (v92 >= v57)
              v92 %= v57;
          }
          else
          {
            v92 &= v57 - 1;
          }
          v90 = (char *)__p[0] + 8 * v92;
          v91 = v431;
        }
        *v90 = v91;
LABEL_116:
        ++*((_QWORD *)&v454 + 1);
LABEL_117:
        v93 = v432 + 40 * v433;
        v95 = *(unsigned __int16 *)(v93 + 34);
        v94 = (unsigned __int16 *)(v93 + 34);
        if (!v95)
        {
          v443 = 0;
          v444 = 0;
          goto LABEL_286;
        }
        v96 = 0;
        v443 = 0;
        v444 = 0;
        v97 = v419 + 20 * *(v94 - 1);
        v437 = v94;
        v442 = v97;
        while (1)
        {
          v98 = v97 + 20 * v96;
          v99 = v435 + 8 * *(unsigned int *)(v98 + 12);
          *(_OWORD *)v463 = 0u;
          v464 = 0u;
          *(_OWORD *)v462 = 0u;
          v459 = 0;
          v460 = 0;
          v461 = 0;
          v441 = (_BYTE *)v98;
          md::DaVinciGroundTileData::_populateBuildingLoops(a4, v434, v98, *(_DWORD *)v99, *(_WORD *)(v99 + 4), v99 + 8, (uint64_t)v462, (uint64_t)&v459);
          v472[0] = &off_1E42D91B8;
          v472[1] = v462;
          v473 = v472;
          v456 = 0;
          v457 = 0;
          i = 0;
          v445 = v96;
          v100 = v97 + 20 * v96;
          v103 = *(unsigned __int16 *)(v100 + 16);
          v102 = (_WORD *)(v100 + 16);
          v101 = v103;
          if (!v103
            || (v104 = (unint64_t *)operator new(40 * v101),
                v456 = v104,
                v457 = v104,
                i = (char *)&v104[5 * v101],
                !*v102))
          {
            v123 = 0xAAAAAAAAAAAAAAABLL * (((char *)v462[1] - (char *)v462[0]) >> 2);
            v124 = &off_1E42D91B8;
            goto LABEL_153;
          }
          v105 = 0;
          do
          {
            v107 = (char *)v459 + 48 * v105;
            v108 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v107[1] - *v107) >> 2);
            if (v104 < (unint64_t *)i)
            {
              *v104 = v108;
              v104[1] = (unint64_t)&off_1E42D9170;
              v104[2] = (unint64_t)v107;
              v104[4] = (unint64_t)(v104 + 1);
              v106 = v104 + 5;
              goto LABEL_124;
            }
            v109 = v456;
            v110 = 0xCCCCCCCCCCCCCCCDLL * (v104 - v456);
            v111 = v110 + 1;
            if (v110 + 1 > 0x666666666666666)
              abort();
            if (0x999999999999999ALL * ((i - (char *)v456) >> 3) > v111)
              v111 = 0x999999999999999ALL * ((i - (char *)v456) >> 3);
            if (0xCCCCCCCCCCCCCCCDLL * ((i - (char *)v456) >> 3) >= 0x333333333333333)
              v112 = 0x666666666666666;
            else
              v112 = v111;
            if (v112 > 0x666666666666666)
              goto LABEL_466;
            v113 = (char *)operator new(40 * v112);
            v114 = (unint64_t *)&v113[40 * v110];
            v114[1] = (unint64_t)&off_1E42D9170;
            *v114 = v108;
            v115 = &v113[40 * v112];
            v114[2] = (unint64_t)v107;
            v114[4] = (unint64_t)(v114 + 1);
            v106 = v114 + 5;
            if (v104 == v109)
            {
              v456 = v114;
              v457 = v114 + 5;
              i = &v113[40 * v112];
LABEL_151:
              operator delete(v104);
              goto LABEL_124;
            }
            v116 = 0;
            do
            {
              v117 = &v114[v116];
              v118 = &v104[v116];
              v114[v116 - 5] = v104[v116 - 5];
              v119 = (unint64_t *)v104[v116 - 1];
              if (v119)
              {
                if (v118 - 4 == v119)
                {
                  *(v117 - 1) = (unint64_t)(v117 - 4);
                  (*(void (**)(unint64_t *))(*v119 + 24))(v119);
                }
                else
                {
                  *(v117 - 1) = (unint64_t)v119;
                  *(v118 - 1) = 0;
                }
              }
              else
              {
                *(v117 - 1) = 0;
              }
              v116 -= 5;
            }
            while (&v104[v116] != v109);
            v104 = v456;
            v120 = v457;
            v456 = &v114[v116];
            v457 = v114 + 5;
            for (i = v115; v120 != v104; v120 -= 5)
            {
              v121 = (unint64_t *)*(v120 - 1);
              if (v120 - 4 == v121)
              {
                v121 = v120 - 4;
                v122 = 4;
              }
              else
              {
                if (!v121)
                  continue;
                v122 = 5;
              }
              (*(void (**)(void))(*v121 + 8 * v122))();
            }
            if (v104)
              goto LABEL_151;
LABEL_124:
            v457 = v106;
            ++v105;
            v104 = v106;
          }
          while (v105 < (unsigned __int16)*v102);
          v123 = 0xAAAAAAAAAAAAAAABLL * (((char *)v462[1] - (char *)v462[0]) >> 2);
          if (!v473)
          {
            v471 = 0;
LABEL_160:
            v127 = 0;
            v479 = 0;
            if (v123 >= 3)
            {
              v474 = 0;
              goto LABEL_469;
            }
            goto LABEL_173;
          }
          if (v473 == v472)
          {
            v124 = (uint64_t (**)())v472[0];
LABEL_153:
            v471 = v470;
            ((void (*)(_QWORD *, _QWORD *))v124[3])(v472, v470);
            v125 = v471;
            if (!v471)
              goto LABEL_160;
            goto LABEL_154;
          }
          v125 = (_QWORD *)(*(uint64_t (**)(void))(*v473 + 16))();
          v471 = v125;
          if (!v125)
            goto LABEL_160;
LABEL_154:
          if (v125 == v470)
          {
            v479 = &v477;
            (*(void (**)(_QWORD *, std::__shared_weak_count **))(v470[0] + 24))(v470, &v477);
            v126 = v479;
            if (v123 >= 3)
            {
LABEL_163:
              v474 = 0;
              if (!v126
                || (LODWORD(v469) = ((float (*)(std::__shared_weak_count **, unint64_t *))(*v126)[2].__vftable)(v126, &v474), HIDWORD(v469) = v128, v127 = v123 - 1, v474 = v123 - 1, !v479))
              {
LABEL_469:
                std::__throw_bad_function_call[abi:nn180100]();
                __break(1u);
              }
              *(float *)&v129 = ((float (*)(std::__shared_weak_count **, unint64_t *))(*v479)[2].__vftable)(v479, &v474);
              v474 = __PAIR64__(v130, v129);
              if (v469 != __PAIR64__(v130, v129))
                v127 = v123;
              v126 = v479;
              goto LABEL_168;
            }
          }
          else
          {
            v126 = (std::__shared_weak_count **)(*(uint64_t (**)(_QWORD *))(*v125 + 16))(v125);
            v479 = v126;
            if (v123 >= 3)
              goto LABEL_163;
          }
          v127 = 0;
LABEL_168:
          if (v126 == &v477)
          {
            v126 = &v477;
            v131 = 4;
          }
          else
          {
            if (!v126)
              goto LABEL_173;
            v131 = 5;
          }
          (*((void (**)(void))&(*v126)->__vftable + v131))();
LABEL_173:
          v132 = v456;
          v133 = v457;
          if (v456 != v457)
          {
            v134 = 0;
            while (1)
            {
              v135 = *v132;
              if (!*v132)
                goto LABEL_177;
              v136 = (unint64_t *)v132[4];
              if (!v136)
              {
                v476 = 0;
                if (v135 >= 3)
                {
                  v469 = 0;
                  goto LABEL_469;
                }
                goto LABEL_176;
              }
              if (v132 + 1 == v136)
              {
                v476 = &v474;
                (*(void (**)(unint64_t *, unint64_t *))(*v136 + 24))(v136, &v474);
                v137 = v476;
                if (v135 < 3)
                {
LABEL_182:
                  v138 = 0;
                  goto LABEL_190;
                }
              }
              else
              {
                v137 = (unint64_t *)(*(uint64_t (**)(unint64_t *))(*v136 + 16))(v136);
                v476 = v137;
                if (v135 < 3)
                  goto LABEL_182;
              }
              v469 = 0;
              if (!v137)
                goto LABEL_469;
              LODWORD(v468) = (*(float (**)(unint64_t *, unint64_t *))(*v137 + 48))(v137, &v469);
              HIDWORD(v468) = v139;
              v469 = v135 - 1;
              if (!v476)
                goto LABEL_469;
              *(float *)&v140 = (*(float (**)(unint64_t *, unint64_t *))(*v476 + 48))(v476, &v469);
              v469 = __PAIR64__(v141, v140);
              if (v468 == __PAIR64__(v141, v140))
                v138 = v135 - 1;
              else
                v138 = v135;
              v137 = v476;
LABEL_190:
              v127 += v138;
              if (v137 == &v474)
              {
                v137 = &v474;
                v142 = 4;
                goto LABEL_194;
              }
              if (v137)
              {
                v142 = 5;
LABEL_194:
                (*(void (**)(void))(*v137 + 8 * v142))();
                v133 = v457;
              }
LABEL_176:
              ++v134;
LABEL_177:
              v132 += 5;
              if (v132 == v133)
                goto LABEL_196;
            }
          }
          v134 = 0;
          v133 = v456;
LABEL_196:
          v143 = v471;
          if (v471 == v470)
          {
            v143 = v470;
            v144 = 4;
          }
          else
          {
            if (!v471)
              goto LABEL_201;
            v144 = 5;
          }
          (*(void (**)(void))(*v143 + 8 * v144))();
LABEL_201:
          v145 = (char *)v463[1];
          if (v463[1] == (void *)v464)
          {
            v147 = 0;
            goto LABEL_222;
          }
          v146 = v464 - (unint64_t)v463[1];
          if ((unint64_t)v464 - (unint64_t)v463[1] < 8)
          {
            v147 = 0;
            goto LABEL_219;
          }
          if (v146 < 0x20)
          {
            v147 = 0;
            v148 = 0;
LABEL_214:
            v199 = v146 & 0xFFFFFFFFFFFFFFF8;
            v200 = 0uLL;
            v201 = (int64x2_t)(unint64_t)v147;
            v202 = v148 - (v146 & 0xFFFFFFFFFFFFFFF8);
            v203 = (int8x8_t *)((char *)v463[1] + v148);
            v204 = 0uLL;
            v205 = 0uLL;
            do
            {
              v206 = *v203++;
              v207 = vmovl_u8((uint8x8_t)vceqz_s8(vand_s8(v206, (int8x8_t)0x303030303030303)));
              v208 = vmovl_u16(*(uint16x4_t *)v207.i8);
              v209.i64[0] = v208.u32[0];
              v209.i64[1] = v208.u32[1];
              v210 = (int8x16_t)vdupq_n_s64(1uLL);
              v211 = (int64x2_t)vandq_s8(v209, v210);
              v209.i64[0] = v208.u32[2];
              v209.i64[1] = v208.u32[3];
              v212 = (int64x2_t)vandq_s8(v209, v210);
              v213 = vmovl_high_u16(v207);
              v209.i64[0] = v213.u32[0];
              v209.i64[1] = v213.u32[1];
              v214 = (int64x2_t)vandq_s8(v209, v210);
              v209.i64[0] = v213.u32[2];
              v209.i64[1] = v213.u32[3];
              v205 = vaddq_s64(v205, (int64x2_t)vandq_s8(v209, v210));
              v204 = vaddq_s64(v204, v214);
              v200 = vaddq_s64(v200, v212);
              v201 = vaddq_s64(v201, v211);
              v202 += 8;
            }
            while (v202);
            v147 = vaddvq_s64(vaddq_s64(vaddq_s64(v201, v204), vaddq_s64(v200, v205)));
            if (v146 == v199)
              goto LABEL_222;
            v145 = (char *)v463[1] + v199;
            goto LABEL_219;
          }
          v149 = 0uLL;
          v148 = v146 & 0xFFFFFFFFFFFFFFE0;
          v150 = 0uLL;
          v151 = (int8x16_t *)((char *)v463[1] + 16);
          v152 = 0uLL;
          v153 = v146 & 0xFFFFFFFFFFFFFFE0;
          v154 = 0uLL;
          v155 = 0uLL;
          v156 = 0uLL;
          v157 = 0uLL;
          v158 = 0uLL;
          v159 = 0uLL;
          v160 = 0uLL;
          v161 = 0uLL;
          v162 = 0uLL;
          v163 = 0uLL;
          v164 = 0uLL;
          v165 = 0uLL;
          v166 = 0uLL;
          do
          {
            v167.i64[0] = 0x303030303030303;
            v167.i64[1] = 0x303030303030303;
            v168 = vandq_s8(*v151, v167);
            v169 = (uint8x16_t)vceqzq_s8(vandq_s8(v151[-1], v167));
            v170 = vmovl_u8(*(uint8x8_t *)v169.i8);
            v171 = vmovl_u16(*(uint16x4_t *)v170.i8);
            v172.i64[0] = v171.u32[0];
            v172.i64[1] = v171.u32[1];
            v173 = (int8x16_t)vdupq_n_s64(1uLL);
            v447 = (int64x2_t)vandq_s8(v172, v173);
            v172.i64[0] = v171.u32[2];
            v172.i64[1] = v171.u32[3];
            v174 = (int64x2_t)vandq_s8(v172, v173);
            v175 = vmovl_high_u16(v170);
            v172.i64[0] = v175.u32[0];
            v172.i64[1] = v175.u32[1];
            v176 = (int64x2_t)vandq_s8(v172, v173);
            v177 = vmovl_high_u8(v169);
            v178 = vmovl_u16(*(uint16x4_t *)v177.i8);
            v172.i64[0] = v178.u32[0];
            v172.i64[1] = v178.u32[1];
            v179 = (int64x2_t)vandq_s8(v172, v173);
            v172.i64[0] = v175.u32[2];
            v172.i64[1] = v175.u32[3];
            v180 = (int64x2_t)vandq_s8(v172, v173);
            v172.i64[0] = v178.u32[2];
            v172.i64[1] = v178.u32[3];
            v181 = (int64x2_t)vandq_s8(v172, v173);
            v182 = vmovl_high_u16(v177);
            v172.i64[0] = v182.u32[0];
            v172.i64[1] = v182.u32[1];
            v183 = (int64x2_t)vandq_s8(v172, v173);
            v172.i64[0] = v182.u32[2];
            v172.i64[1] = v182.u32[3];
            v184 = (int64x2_t)vandq_s8(v172, v173);
            v185 = (uint8x16_t)vceqzq_s8(v168);
            v186 = vmovl_u8(*(uint8x8_t *)v185.i8);
            v187 = vmovl_u16(*(uint16x4_t *)v186.i8);
            v172.i64[0] = v187.u32[0];
            v172.i64[1] = v187.u32[1];
            v188 = (int64x2_t)vandq_s8(v172, v173);
            v172.i64[0] = v187.u32[2];
            v172.i64[1] = v187.u32[3];
            v189 = (int64x2_t)vandq_s8(v172, v173);
            v190 = vmovl_high_u16(v186);
            v172.i64[0] = v190.u32[0];
            v172.i64[1] = v190.u32[1];
            v191 = (int64x2_t)vandq_s8(v172, v173);
            v192 = vmovl_high_u8(v185);
            v193 = vmovl_u16(*(uint16x4_t *)v192.i8);
            v172.i64[0] = v193.u32[0];
            v172.i64[1] = v193.u32[1];
            v194 = (int64x2_t)vandq_s8(v172, v173);
            v172.i64[0] = v190.u32[2];
            v172.i64[1] = v190.u32[3];
            v195 = (int64x2_t)vandq_s8(v172, v173);
            v172.i64[0] = v193.u32[2];
            v172.i64[1] = v193.u32[3];
            v196 = (int64x2_t)vandq_s8(v172, v173);
            v197 = vmovl_high_u16(v192);
            v172.i64[0] = v197.u32[0];
            v172.i64[1] = v197.u32[1];
            v198 = (int64x2_t)vandq_s8(v172, v173);
            v172.i64[0] = v197.u32[2];
            v172.i64[1] = v197.u32[3];
            v158 = vaddq_s64(v158, v184);
            v157 = vaddq_s64(v157, v183);
            v156 = vaddq_s64(v156, v181);
            v154 = vaddq_s64(v154, v180);
            v155 = vaddq_s64(v155, v179);
            v152 = vaddq_s64(v152, v176);
            v150 = vaddq_s64(v150, v174);
            v149 = vaddq_s64(v149, v447);
            v166 = vaddq_s64(v166, (int64x2_t)vandq_s8(v172, v173));
            v165 = vaddq_s64(v165, v198);
            v164 = vaddq_s64(v164, v196);
            v162 = vaddq_s64(v162, v195);
            v163 = vaddq_s64(v163, v194);
            v161 = vaddq_s64(v161, v191);
            v160 = vaddq_s64(v160, v189);
            v159 = vaddq_s64(v159, v188);
            v151 += 2;
            v153 -= 32;
          }
          while (v153);
          v147 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v159, v149), vaddq_s64(v163, v155)), vaddq_s64(vaddq_s64(v161, v152), vaddq_s64(v165, v157))), vaddq_s64(vaddq_s64(vaddq_s64(v160, v150), vaddq_s64(v164, v156)), vaddq_s64(vaddq_s64(v162, v154), vaddq_s64(v166, v158)))));
          if (v146 == v148)
            goto LABEL_222;
          if ((v146 & 0x18) != 0)
            goto LABEL_214;
          v145 = (char *)v463[1] + v148;
          do
          {
LABEL_219:
            v215 = *v145++;
            if ((v215 & 3) == 0)
              ++v147;
          }
          while (v145 != (char *)v464);
LABEL_222:
          v216 = 6 * v123;
          v217 = 2 * (v147 - 0x5555555555555555 * (((char *)v462[1] - (char *)v462[0]) >> 2));
          if (*v102)
          {
            for (j = 0; j != (unsigned __int16)*v102; ++j)
            {
              v221 = (char *)v459 + 48 * j;
              v222 = (int8x16_t *)v221[3];
              v223 = (int8x16_t *)v221[4];
              if (v222 == v223)
              {
                v219 = 0;
              }
              else
              {
                v224 = (char *)v223 - (char *)v222;
                if ((unint64_t)((char *)v223 - (char *)v222) < 8)
                {
                  v219 = 0;
                  goto LABEL_240;
                }
                if (v224 >= 0x20)
                {
                  v226 = 0uLL;
                  v225 = v224 & 0xFFFFFFFFFFFFFFE0;
                  v227 = 0uLL;
                  v228 = v222 + 1;
                  v229 = 0uLL;
                  v230 = v224 & 0xFFFFFFFFFFFFFFE0;
                  v231 = 0uLL;
                  v232 = 0uLL;
                  v233 = 0uLL;
                  v234 = 0uLL;
                  v235 = 0uLL;
                  v236 = 0uLL;
                  v237 = 0uLL;
                  v238 = 0uLL;
                  v239 = 0uLL;
                  v240 = 0uLL;
                  v241 = 0uLL;
                  v242 = 0uLL;
                  v243 = 0uLL;
                  do
                  {
                    v244.i64[0] = 0x303030303030303;
                    v244.i64[1] = 0x303030303030303;
                    v245 = vandq_s8(*v228, v244);
                    v246 = (uint8x16_t)vceqzq_s8(vandq_s8(v228[-1], v244));
                    v247 = vmovl_u8(*(uint8x8_t *)v246.i8);
                    v248 = vmovl_u16(*(uint16x4_t *)v247.i8);
                    v249.i64[0] = v248.u32[0];
                    v249.i64[1] = v248.u32[1];
                    v250 = (int8x16_t)vdupq_n_s64(1uLL);
                    v448 = (int64x2_t)vandq_s8(v249, v250);
                    v249.i64[0] = v248.u32[2];
                    v249.i64[1] = v248.u32[3];
                    v251 = (int64x2_t)vandq_s8(v249, v250);
                    v252 = vmovl_high_u16(v247);
                    v249.i64[0] = v252.u32[0];
                    v249.i64[1] = v252.u32[1];
                    v253 = (int64x2_t)vandq_s8(v249, v250);
                    v254 = vmovl_high_u8(v246);
                    v255 = vmovl_u16(*(uint16x4_t *)v254.i8);
                    v249.i64[0] = v255.u32[0];
                    v249.i64[1] = v255.u32[1];
                    v256 = (int64x2_t)vandq_s8(v249, v250);
                    v249.i64[0] = v252.u32[2];
                    v249.i64[1] = v252.u32[3];
                    v257 = (int64x2_t)vandq_s8(v249, v250);
                    v249.i64[0] = v255.u32[2];
                    v249.i64[1] = v255.u32[3];
                    v258 = (int64x2_t)vandq_s8(v249, v250);
                    v259 = vmovl_high_u16(v254);
                    v249.i64[0] = v259.u32[0];
                    v249.i64[1] = v259.u32[1];
                    v260 = (int64x2_t)vandq_s8(v249, v250);
                    v249.i64[0] = v259.u32[2];
                    v249.i64[1] = v259.u32[3];
                    v261 = (int64x2_t)vandq_s8(v249, v250);
                    v262 = (uint8x16_t)vceqzq_s8(v245);
                    v263 = vmovl_u8(*(uint8x8_t *)v262.i8);
                    v264 = vmovl_u16(*(uint16x4_t *)v263.i8);
                    v249.i64[0] = v264.u32[0];
                    v249.i64[1] = v264.u32[1];
                    v265 = (int64x2_t)vandq_s8(v249, v250);
                    v249.i64[0] = v264.u32[2];
                    v249.i64[1] = v264.u32[3];
                    v266 = (int64x2_t)vandq_s8(v249, v250);
                    v267 = vmovl_high_u16(v263);
                    v249.i64[0] = v267.u32[0];
                    v249.i64[1] = v267.u32[1];
                    v268 = (int64x2_t)vandq_s8(v249, v250);
                    v269 = vmovl_high_u8(v262);
                    v270 = vmovl_u16(*(uint16x4_t *)v269.i8);
                    v249.i64[0] = v270.u32[0];
                    v249.i64[1] = v270.u32[1];
                    v271 = (int64x2_t)vandq_s8(v249, v250);
                    v249.i64[0] = v267.u32[2];
                    v249.i64[1] = v267.u32[3];
                    v272 = (int64x2_t)vandq_s8(v249, v250);
                    v249.i64[0] = v270.u32[2];
                    v249.i64[1] = v270.u32[3];
                    v273 = (int64x2_t)vandq_s8(v249, v250);
                    v274 = vmovl_high_u16(v269);
                    v249.i64[0] = v274.u32[0];
                    v249.i64[1] = v274.u32[1];
                    v275 = (int64x2_t)vandq_s8(v249, v250);
                    v249.i64[0] = v274.u32[2];
                    v249.i64[1] = v274.u32[3];
                    v235 = vaddq_s64(v235, v261);
                    v234 = vaddq_s64(v234, v260);
                    v233 = vaddq_s64(v233, v258);
                    v231 = vaddq_s64(v231, v257);
                    v232 = vaddq_s64(v232, v256);
                    v229 = vaddq_s64(v229, v253);
                    v227 = vaddq_s64(v227, v251);
                    v226 = vaddq_s64(v226, v448);
                    v243 = vaddq_s64(v243, (int64x2_t)vandq_s8(v249, v250));
                    v242 = vaddq_s64(v242, v275);
                    v241 = vaddq_s64(v241, v273);
                    v239 = vaddq_s64(v239, v272);
                    v240 = vaddq_s64(v240, v271);
                    v238 = vaddq_s64(v238, v268);
                    v237 = vaddq_s64(v237, v266);
                    v236 = vaddq_s64(v236, v265);
                    v228 += 2;
                    v230 -= 32;
                  }
                  while (v230);
                  v219 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v236, v226), vaddq_s64(v240, v232)), vaddq_s64(vaddq_s64(v238, v229), vaddq_s64(v242, v234))), vaddq_s64(vaddq_s64(vaddq_s64(v237, v227), vaddq_s64(v241, v233)), vaddq_s64(vaddq_s64(v239, v231), vaddq_s64(v243, v235)))));
                  if (v224 == v225)
                    goto LABEL_225;
                  if ((v224 & 0x18) == 0)
                  {
                    v222 = (int8x16_t *)((char *)v222 + v225);
                    do
                    {
LABEL_240:
                      v292 = v222->i8[0];
                      v222 = (int8x16_t *)((char *)v222 + 1);
                      if ((v292 & 3) == 0)
                        ++v219;
                    }
                    while (v222 != v223);
                    goto LABEL_225;
                  }
                }
                else
                {
                  v219 = 0;
                  v225 = 0;
                }
                v276 = v224 & 0xFFFFFFFFFFFFFFF8;
                v277 = 0uLL;
                v278 = (int64x2_t)(unint64_t)v219;
                v279 = v225 - (v224 & 0xFFFFFFFFFFFFFFF8);
                v280 = (int8x8_t *)&v222->i8[v225];
                v281 = 0uLL;
                v282 = 0uLL;
                do
                {
                  v283 = *v280++;
                  v284 = vmovl_u8((uint8x8_t)vceqz_s8(vand_s8(v283, (int8x8_t)0x303030303030303)));
                  v285 = vmovl_u16(*(uint16x4_t *)v284.i8);
                  v286.i64[0] = v285.u32[0];
                  v286.i64[1] = v285.u32[1];
                  v287 = (int8x16_t)vdupq_n_s64(1uLL);
                  v288 = (int64x2_t)vandq_s8(v286, v287);
                  v286.i64[0] = v285.u32[2];
                  v286.i64[1] = v285.u32[3];
                  v289 = (int64x2_t)vandq_s8(v286, v287);
                  v290 = vmovl_high_u16(v284);
                  v286.i64[0] = v290.u32[0];
                  v286.i64[1] = v290.u32[1];
                  v291 = (int64x2_t)vandq_s8(v286, v287);
                  v286.i64[0] = v290.u32[2];
                  v286.i64[1] = v290.u32[3];
                  v282 = vaddq_s64(v282, (int64x2_t)vandq_s8(v286, v287));
                  v281 = vaddq_s64(v281, v291);
                  v277 = vaddq_s64(v277, v289);
                  v278 = vaddq_s64(v278, v288);
                  v279 += 8;
                }
                while (v279);
                v219 = vaddvq_s64(vaddq_s64(vaddq_s64(v278, v281), vaddq_s64(v277, v282)));
                if (v224 != v276)
                {
                  v222 = (int8x16_t *)((char *)v222 + v276);
                  goto LABEL_240;
                }
              }
LABEL_225:
              v220 = v221[1] - *v221;
              v123 += 0xAAAAAAAAAAAAAAABLL * (v220 >> 2);
              v216 += v220 >> 1;
              v217 += 2 * (v219 - 0x5555555555555555 * (v220 >> 2));
            }
          }
          v293 = 3 * (v127 + 2 * v134) - 6;
          if (*v441)
            v294 = v293;
          else
            v294 = 0;
          v295 = *(float *)(v442 + 20 * v445 + 4) - *(float *)(v442 + 20 * v445 + 8);
          if (*v441)
            v296 = v123;
          else
            v296 = 0;
          if (v295 <= 0.0)
            v297 = 0;
          else
            v297 = v216;
          if (v295 <= 0.0)
            v298 = 0;
          else
            v298 = v217;
          v299 = v456;
          if (v456)
          {
            if (v133 == v456)
            {
LABEL_266:
              v457 = v299;
              operator delete(v133);
              goto LABEL_267;
            }
            while (1)
            {
              v300 = (char *)*(v133 - 1);
              if (v133 - 4 == (unint64_t *)v300)
              {
                v300 = (char *)(v133 - 4);
                v301 = 4;
              }
              else
              {
                if (!v300)
                  goto LABEL_261;
                v301 = 5;
              }
              (*(void (**)(void))(*(_QWORD *)v300 + 8 * v301))();
LABEL_261:
              v133 -= 5;
              if (v133 == v299)
              {
                v133 = v456;
                goto LABEL_266;
              }
            }
          }
LABEL_267:
          v302 = v473;
          if (v473 == v472)
          {
            v302 = v472;
            v303 = 4;
            goto LABEL_271;
          }
          if (v473)
          {
            v303 = 5;
LABEL_271:
            (*(void (**)(void))(*v302 + 8 * v303))();
          }
          v304 = (char *)v459;
          if (v459)
          {
            for (k = v460; k != v304; k -= 48)
            {
              v306 = (void *)*((_QWORD *)k - 3);
              if (v306)
              {
                *((_QWORD *)k - 2) = v306;
                operator delete(v306);
              }
              v307 = (void *)*((_QWORD *)k - 6);
              if (v307)
              {
                *((_QWORD *)k - 5) = v307;
                operator delete(v307);
              }
            }
            operator delete(v304);
          }
          if (v463[1])
          {
            *(void **)&v464 = v463[1];
            operator delete(v463[1]);
          }
          if (v462[0])
          {
            v462[1] = v462[0];
            operator delete(v462[0]);
          }
          v443 += v293 + v294 + v297;
          v444 += v123 + v296 + v298;
          v96 = v445 + 1;
          a4 = v436;
          v97 = v442;
          if (v445 + 1 >= (unint64_t)*v437)
          {
LABEL_286:
            v308 = (char *)v431[4];
            v309 = (char *)v431[5];
            if (v309 == v308 || v444 + (unint64_t)*((unsigned int *)v309 - 7) >= 0x10000)
            {
              v310 = v431[6];
              if ((unint64_t)v309 >= v310)
              {
                v312 = 0xCCCCCCCCCCCCCCCDLL * ((v309 - v308) >> 4) + 1;
                if (v312 > 0x333333333333333)
                  abort();
                v313 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v310 - (_QWORD)v308) >> 4);
                if (2 * v313 > v312)
                  v312 = 2 * v313;
                if (v313 >= 0x199999999999999)
                  v314 = 0x333333333333333;
                else
                  v314 = v312;
                if (v314 > 0x333333333333333)
                  goto LABEL_466;
                v315 = (char *)operator new(80 * v314);
                v316 = &v315[16 * ((v309 - v308) >> 4)];
                v316[64] = 0;
                v316[72] = 0;
                *(_OWORD *)v316 = 0u;
                *((_OWORD *)v316 + 1) = 0u;
                v317 = &v315[80 * v314];
                *((_OWORD *)v316 + 2) = 0u;
                *(_OWORD *)(v316 + 42) = 0u;
                v311 = v316 + 80;
                if (v309 == v308)
                {
                  v431[4] = v316;
                  v431[5] = v311;
                  v431[6] = v317;
                }
                else
                {
                  do
                  {
                    v318 = *((_OWORD *)v309 - 5);
                    v309 -= 80;
                    *((_OWORD *)v316 - 5) = v318;
                    v316 -= 80;
                    *((_QWORD *)v316 + 2) = *((_QWORD *)v309 + 2);
                    *(_QWORD *)v309 = 0;
                    *((_QWORD *)v309 + 1) = 0;
                    *((_QWORD *)v309 + 2) = 0;
                    *(_OWORD *)(v316 + 24) = *(_OWORD *)(v309 + 24);
                    *((_QWORD *)v316 + 5) = *((_QWORD *)v309 + 5);
                    *((_QWORD *)v309 + 3) = 0;
                    *((_QWORD *)v309 + 4) = 0;
                    *((_QWORD *)v309 + 5) = 0;
                    v319 = *((_OWORD *)v309 + 3);
                    *(_OWORD *)(v316 + 57) = *(_OWORD *)(v309 + 57);
                    *((_OWORD *)v316 + 3) = v319;
                  }
                  while (v309 != v308);
                  v309 = (char *)v431[4];
                  v320 = (char *)v431[5];
                  v431[4] = v316;
                  v431[5] = v311;
                  v431[6] = v317;
                  while (v320 != v309)
                  {
                    v321 = (void *)*((_QWORD *)v320 - 7);
                    if (v321)
                    {
                      *((_QWORD *)v320 - 6) = v321;
                      operator delete(v321);
                    }
                    v322 = (void *)*((_QWORD *)v320 - 10);
                    if (v322)
                    {
                      *((_QWORD *)v320 - 9) = v322;
                      operator delete(v322);
                    }
                    v320 -= 80;
                  }
                }
                if (v309)
                  operator delete(v309);
              }
              else
              {
                v309[64] = 0;
                v309[72] = 0;
                *(_OWORD *)v309 = 0u;
                *((_OWORD *)v309 + 1) = 0u;
                *((_OWORD *)v309 + 2) = 0u;
                v311 = v309 + 80;
                *(_OWORD *)(v309 + 42) = 0u;
              }
              v431[5] = v311;
              v309 = v311;
            }
            v324 = (uint64_t **)*((_QWORD *)v309 - 9);
            v323 = *((_QWORD *)v309 - 8);
            if ((unint64_t)v324 >= v323)
            {
              v326 = (char *)*((_QWORD *)v309 - 10);
              v327 = ((char *)v324 - v326) >> 3;
              v328 = v327 + 1;
              if ((unint64_t)(v327 + 1) >> 61)
                goto LABEL_471;
              v329 = v323 - (_QWORD)v326;
              if (v329 >> 2 > v328)
                v328 = v329 >> 2;
              if ((unint64_t)v329 >= 0x7FFFFFFFFFFFFFF8)
                v330 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v330 = v328;
              if (v330)
              {
                if (v330 >> 61)
                  goto LABEL_466;
                v331 = (char *)operator new(8 * v330);
              }
              else
              {
                v331 = 0;
              }
              v332 = (uint64_t **)&v331[8 * v327];
              *v332 = v429;
              v325 = v332 + 1;
              if (v324 != (uint64_t **)v326)
              {
                v333 = (char *)(v324 - 1) - v326;
                if (v333 < 0x58)
                  goto LABEL_477;
                if ((unint64_t)(v326 - v331) < 0x20)
                  goto LABEL_477;
                v334 = (v333 >> 3) + 1;
                v335 = &v331[(char *)v324 - v326 - 16];
                v336 = v324 - 2;
                v337 = v334 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v338 = *(_OWORD *)v336;
                  *((_OWORD *)v335 - 1) = *((_OWORD *)v336 - 1);
                  *(_OWORD *)v335 = v338;
                  v335 -= 32;
                  v336 -= 4;
                  v337 -= 4;
                }
                while (v337);
                v332 -= v334 & 0x3FFFFFFFFFFFFFFCLL;
                v324 -= v334 & 0x3FFFFFFFFFFFFFFCLL;
                if (v334 != (v334 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_477:
                  do
                  {
                    v339 = *--v324;
                    *--v332 = v339;
                  }
                  while (v324 != (uint64_t **)v326);
                }
                v324 = (uint64_t **)*((_QWORD *)v309 - 10);
              }
              *((_QWORD *)v309 - 10) = v332;
              *((_QWORD *)v309 - 9) = v325;
              *((_QWORD *)v309 - 8) = &v331[8 * v330];
              if (v324)
                operator delete(v324);
            }
            else
            {
              *v324 = v429;
              v325 = v324 + 1;
            }
            *((_QWORD *)v309 - 9) = v325;
            if (v423)
              v50 = v430;
            else
              v50 = v427;
            if ((v421 & 1) == 0)
            {
              v340 = *(int8x8_t *)(v420 + 8);
              if (!*(_QWORD *)&v340)
                goto LABEL_356;
              v341 = (uint8x8_t)vcnt_s8(v340);
              v341.i16[0] = vaddlv_u8(v341);
              if (v341.u32[0] > 1uLL)
              {
                v342 = v433;
                if (*(_QWORD *)&v340 <= v433)
                  v342 = v433 % *(_QWORD *)&v340;
              }
              else
              {
                v342 = (v340.i32[0] - 1) & v433;
              }
              v343 = *(uint64_t ****)(*(_QWORD *)v420 + 8 * v342);
              if (!v343 || (v344 = *v343) == 0)
              {
LABEL_356:
                v50 = 0xFFFF;
                goto LABEL_357;
              }
              if (v341.u32[0] < 2uLL)
              {
                v345 = *(_QWORD *)&v340 - 1;
                while (1)
                {
                  v347 = v344[1];
                  if (v347 == (uint64_t *)v433)
                  {
                    if (*((unsigned __int16 *)v344 + 8) == (_DWORD)v433)
                      goto LABEL_399;
                  }
                  else if (((unint64_t)v347 & v345) != v342)
                  {
                    goto LABEL_356;
                  }
                  v344 = (uint64_t **)*v344;
                  v50 = 0xFFFF;
                  if (!v344)
                    goto LABEL_357;
                }
              }
              do
              {
                v346 = (unint64_t)v344[1];
                if (v346 == v433)
                {
                  if (*((unsigned __int16 *)v344 + 8) == (_DWORD)v433)
                  {
LABEL_399:
                    v50 = *((unsigned __int16 *)v344 + 9);
                    break;
                  }
                }
                else
                {
                  if (v346 >= *(_QWORD *)&v340)
                    v346 %= *(_QWORD *)&v340;
                  if (v346 != v342)
                    goto LABEL_356;
                }
                v344 = (uint64_t **)*v344;
                v50 = 0xFFFF;
              }
              while (v344);
            }
LABEL_357:
            v349 = (char *)*((_QWORD *)v309 - 6);
            v348 = *((_QWORD *)v309 - 5);
            if ((unint64_t)v349 < v348)
            {
              *(_WORD *)v349 = v50;
              v350 = v349 + 2;
              a5 = v422;
LABEL_380:
              *((_QWORD *)v309 - 6) = v350;
              v368 = *((_DWORD *)v309 - 7) + v444;
              *((_DWORD *)v309 - 8) += v443;
              *((_DWORD *)v309 - 7) = v368;
              if (*(_BYTE *)(v426 + v433))
              {
                if (*(v309 - 8))
                {
                  v369 = *((_QWORD *)v309 - 2);
                }
                else
                {
                  v369 = -1;
                  *((_QWORD *)v309 - 2) = -1;
                  *(v309 - 8) = 1;
                }
                if (*(_QWORD *)(v432 + 40 * v433 + 24) < v369)
                  v369 = *(_QWORD *)(v432 + 40 * v433 + 24);
                *((_QWORD *)v309 - 2) = v369;
                *(v309 - 8) = 1;
                *((_WORD *)v309 - 12) = *(_BYTE *)(geo::codec::VectorTile::key(*v440) + 1) & 0x3F | 0x100;
              }
              v49 = v430;
              goto LABEL_388;
            }
            v351 = v50;
            v352 = (char *)*((_QWORD *)v309 - 7);
            v353 = v349 - v352;
            if (v349 - v352 >= -2)
            {
              v354 = v353 >> 1;
              v355 = v348 - (_QWORD)v352;
              if (v355 <= (v353 >> 1) + 1)
                v356 = v354 + 1;
              else
                v356 = v355;
              if (v355 >= 0x7FFFFFFFFFFFFFFELL)
                v357 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v357 = v356;
              if (!v357)
              {
                v359 = 0;
LABEL_370:
                v360 = &v359[2 * v354];
                *v360 = v351;
                v350 = v360 + 1;
                if (v349 != v352)
                {
                  v361 = v349 - 2 - v352;
                  if (v361 < 0x1E)
                    goto LABEL_478;
                  if ((unint64_t)(v349 - &v359[v353 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
                    goto LABEL_478;
                  v362 = (v361 >> 1) + 1;
                  v363 = &v359[2 * v354 - 16];
                  v364 = v349 - 16;
                  v365 = v362 & 0xFFFFFFFFFFFFFFF0;
                  do
                  {
                    v366 = *(_OWORD *)v364;
                    *(v363 - 1) = *((_OWORD *)v364 - 1);
                    *v363 = v366;
                    v363 -= 2;
                    v364 -= 32;
                    v365 -= 16;
                  }
                  while (v365);
                  v360 -= v362 & 0xFFFFFFFFFFFFFFF0;
                  v349 -= 2 * (v362 & 0xFFFFFFFFFFFFFFF0);
                  if (v362 != (v362 & 0xFFFFFFFFFFFFFFF0))
                  {
LABEL_478:
                    do
                    {
                      v367 = *((_WORD *)v349 - 1);
                      v349 -= 2;
                      *--v360 = v367;
                    }
                    while (v349 != v352);
                  }
                }
                *((_QWORD *)v309 - 7) = v360;
                *((_QWORD *)v309 - 6) = v350;
                *((_QWORD *)v309 - 5) = &v359[2 * v357];
                if (v352)
                  operator delete(v352);
                a5 = v422;
                v50 = v351;
                goto LABEL_380;
              }
              if ((v357 & 0x8000000000000000) == 0)
              {
                v358 = v357;
                v359 = operator new(2 * v357);
                v357 = v358;
                goto LABEL_370;
              }
LABEL_466:
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
LABEL_471:
            abort();
          }
        }
      }
      v69 = (v57 & (v57 - 1)) != 0;
      if (v57 < 3)
        v69 = 1;
      v70 = v69 | (2 * v57);
      v71 = vcvtps_u32_f32(v68 / v455);
      if (v70 <= v71)
        prime = v71;
      else
        prime = v70;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v57 = (unint64_t)__p[1];
      }
      if (prime <= v57)
      {
        if (prime >= v57)
          goto LABEL_94;
        v83 = vcvtps_u32_f32((float)*((unint64_t *)&v454 + 1) / v455);
        if (v57 < 3 || (v84 = (uint8x8_t)vcnt_s8((int8x8_t)v57), v84.i16[0] = vaddlv_u8(v84), v84.u32[0] > 1uLL))
        {
          v83 = std::__next_prime(v83);
        }
        else
        {
          v85 = 1 << -(char)__clz(v83 - 1);
          if (v83 >= 2)
            v83 = v85;
        }
        if (prime <= v83)
          prime = v83;
        if (prime >= v57)
        {
          v57 = (unint64_t)__p[1];
LABEL_94:
          if ((v57 & (v57 - 1)) != 0)
          {
            if (v56 >= v57)
              v54 = v56 % v57;
            else
              v54 = ((v53 << 6) + (v53 >> 2) + v55 - 0x61C8864680B583EBLL) ^ v53;
          }
          else
          {
            v54 = (v57 - 1) & v56;
          }
          goto LABEL_107;
        }
        if (!prime)
        {
          v370 = __p[0];
          __p[0] = 0;
          if (v370)
            operator delete(v370);
          v57 = 0;
          __p[1] = 0;
          goto LABEL_94;
        }
      }
      if (prime >> 61)
        goto LABEL_466;
      v73 = operator new(8 * prime);
      v74 = __p[0];
      __p[0] = v73;
      if (v74)
        operator delete(v74);
      v75 = 0;
      __p[1] = (void *)prime;
      do
        *((_QWORD *)__p[0] + v75++) = 0;
      while (prime != v75);
      v76 = (_QWORD **)v454;
      if (!(_QWORD)v454)
      {
LABEL_93:
        v57 = prime;
        goto LABEL_94;
      }
      v77 = *(_QWORD *)(v454 + 8);
      v78 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v79 = v77 & v78;
        *((_QWORD *)__p[0] + v79) = &v454;
        for (m = *v76; *v76; m = *v76)
        {
          v81 = m[1] & v78;
          if (v81 == v79)
          {
            v76 = (_QWORD **)m;
          }
          else if (*((_QWORD *)__p[0] + v81))
          {
            *v76 = (_QWORD *)*m;
            v82 = 8 * v81;
            *m = **(_QWORD **)((char *)__p[0] + v82);
            **(_QWORD **)((char *)__p[0] + v82) = m;
          }
          else
          {
            *((_QWORD *)__p[0] + v81) = v76;
            v76 = (_QWORD **)m;
            v79 = v81;
          }
        }
        goto LABEL_93;
      }
      if (v77 >= prime)
        v77 %= prime;
      *((_QWORD *)__p[0] + v77) = &v454;
      v86 = *v76;
      if (!*v76)
        goto LABEL_93;
      while (1)
      {
        v88 = v86[1];
        if (v88 >= prime)
          v88 %= prime;
        if (v88 != v77)
        {
          if (!*((_QWORD *)__p[0] + v88))
          {
            *((_QWORD *)__p[0] + v88) = v76;
            goto LABEL_98;
          }
          *v76 = (_QWORD *)*v86;
          v87 = 8 * v88;
          *v86 = **(_QWORD **)((char *)__p[0] + v87);
          **(_QWORD **)((char *)__p[0] + v87) = v86;
          v86 = v76;
        }
        v88 = v77;
LABEL_98:
        v76 = (_QWORD **)v86;
        v86 = (_QWORD *)*v86;
        v77 = v88;
        if (!v86)
          goto LABEL_93;
      }
    }
    v38 = operator new(0x78uLL);
    v38[1] = 0;
    v38[2] = 0;
    *v38 = &off_1E42DAF68;
    v27 = (char *)(v38 + 3);
    md::StyleTexture<md::DaVinciGroundTileData::BuildingColorStyle>::StyleTexture((uint64_t)(v38 + 3), v40 + 1);
    v451 = (char *)(v38 + 3);
    v452 = (std::__shared_weak_count *)v38;
    v41 = (_QWORD *)geo::codec::VectorTile::materialModifiers(*v440);
    for (n = *(uint64_t ***)(v420 + 16); n; n = (uint64_t **)*n)
    {
      v43 = *((unsigned __int16 *)n + 9);
      v44 = (_BYTE *)(*v41 + 16 * v43);
      v45 = v44[8];
      v46 = v44[9];
      v47 = v44[10];
      LOBYTE(v462[0]) = v45;
      BYTE1(v462[0]) = v46;
      BYTE2(v462[0]) = v47;
      BYTE3(v462[0]) = -1;
      v48 = (_BYTE *)(*(_QWORD *)v27 + 4 * v43);
      if (LODWORD(v462[0]) != *(_DWORD *)v48)
      {
        *((_BYTE *)v38 + 56) = 1;
        *v48 = v45;
        v48[1] = v46;
        v48[2] = v47;
        v48[3] = -1;
      }
    }
    v39 = (_DWORD *)(*(_QWORD *)v27 + 4 * v40);
    goto LABEL_22;
  }
  v25 = geo::codec::VectorTile::daVinciBuildingColors(*a2);
  v26 = operator new(0x78uLL);
  v26[1] = 0;
  v26[2] = 0;
  *v26 = &off_1E42DAF68;
  v27 = (char *)(v26 + 3);
  md::StyleTexture<md::DaVinciGroundTileData::BuildingColorStyle>::StyleTexture((uint64_t)(v26 + 3), (unsigned __int16)(v24 >> 1));
  v451 = (char *)(v26 + 3);
  v452 = (std::__shared_weak_count *)v26;
  if ((unsigned __int16)(v24 >> 1))
  {
    v28 = 0;
    v29 = 0;
    do
    {
      v30 = (*v428)->u16[v28];
      if (*(_BYTE *)(v25 + 4 * v30))
      {
        v31 = (_BYTE *)(v25 + 4 * v30);
        v32 = v31[1];
        v33 = v31[2];
        v34 = v31[3];
        LOBYTE(v462[0]) = v32;
        BYTE1(v462[0]) = v33;
        BYTE2(v462[0]) = v34;
        BYTE3(v462[0]) = -1;
        v35 = *(_QWORD *)v27;
        if (LODWORD(v462[0]) != *(_DWORD *)(*(_QWORD *)v27 + v29))
        {
          *((_BYTE *)v26 + 56) = 1;
          v36 = (_BYTE *)(v35 + v29);
          *v36 = v32;
          v36[1] = v33;
          v36[2] = v34;
          v36[3] = -1;
        }
      }
      else
      {
        v37 = *(_QWORD *)v27;
        if (v467 != *(_DWORD *)(*(_QWORD *)v27 + v29))
        {
          *((_BYTE *)v26 + 56) = 1;
          *(_DWORD *)(v37 + v29) = -1;
        }
      }
      v29 += 4;
      ++v28;
    }
    while (4 * (unsigned __int16)(v24 >> 1) != v29);
    goto LABEL_24;
  }
  if (!v27[32])
    goto LABEL_434;
LABEL_402:
  v371 = operator new(0x58uLL);
  v371[1] = 0;
  v372 = v371 + 1;
  v371[2] = 0;
  *v371 = &off_1E42DED18;
  v371[3] = &off_1E42B63B0;
  v373 = (char *)(v371 + 3);
  v374 = *((_DWORD *)v27 + 23);
  v371[5] = 0;
  v371[6] = 0;
  *((_DWORD *)v371 + 14) = 0;
  v371[4] = 0;
  *(_QWORD *)((char *)v371 + 60) = 0x100000001;
  *((_DWORD *)v371 + 17) = 1;
  *((_DWORD *)v371 + 18) = v374;
  *((_DWORD *)v371 + 19) = v374;
  v371[10] = 0;
  v462[0] = v371 + 3;
  v462[1] = v371;
  v375 = operator new();
  if ((v376 & 1) == 0
  {
    md::StyleTexture<md::DaVinciGroundTileData::BuildingColorStyle>::textureData(void)::bytesPerPixel = 4;
  }
  v378 = *((_QWORD *)v27 + 6);
  v377 = *((_QWORD *)v27 + 7);
  v379 = (std::__shared_weak_count *)operator new(0x60uLL);
  v379->__shared_owners_ = 0;
  v379->__shared_weak_owners_ = 0;
  v379->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DEFB8;
  v380 = v379 + 1;
  v381 = ggl::TextureData2D::TextureData2D((uint64_t)&v379[1], v378, v377, 1u, 12, 1);
  v477 = v379 + 1;
  v478 = v379;
  v382 = (_DWORD *)((uint64_t (*)(_QWORD *, _QWORD))v379[1].__on_zero_shared)(v381, 0);
  v383 = operator new();
  v384 = *((_QWORD *)v27 + 5);
  *((_QWORD *)v27 + 5) = v383;
  if (v384)
    MEMORY[0x1A1AF4E00](v384, 0xC400A2AC0F1);
  v385 = *(_DWORD **)v27;
  v386 = (_DWORD *)*((_QWORD *)v27 + 1);
  if (*(_DWORD **)v27 != v386)
  {
    v446 = (char *)(v371 + 3);
    v449 = v371;
    LODWORD(v387) = 0;
    v388 = md::StyleTexture<md::DaVinciGroundTileData::BuildingColorStyle>::textureData(void)::bytesPerPixel
         * *((_QWORD *)v27 + 6);
    v389 = 1;
    do
    {
      *v382 = *v385;
      if (v389 % *((_QWORD *)v27 + 9))
      {
        v382 = (_DWORD *)((char *)v382 + *((_QWORD *)v27 + 8));
      }
      else
      {
        v387 = (v387 + 1);
        v382 = (_DWORD *)(((uint64_t (*)(std::__shared_weak_count *, _QWORD))v380->__on_zero_shared)(v380, 0)+ v388 * v387);
      }
      ++v385;
      ++v389;
    }
    while (v385 != v386);
    v380 = v477;
    v379 = v478;
    v373 = v446;
    v371 = v449;
  }
  v477 = 0;
  v478 = 0;
  shared_owners_high = HIDWORD(v380->__shared_owners_);
  *(_DWORD *)(v375 + 32) = 0;
  *(_QWORD *)(v375 + 16) = 0;
  *(_QWORD *)(v375 + 24) = 0;
  *(_QWORD *)(v375 + 56) = 0x100000001;
  *(_DWORD *)(v375 + 64) = 0;
  *(_DWORD *)(v375 + 68) = shared_owners_high;
  *(_QWORD *)(v375 + 72) = 0x100000001;
  *(_QWORD *)(v375 + 88) = 0;
  *(_QWORD *)(v375 + 96) = 0;
  *(_QWORD *)(v375 + 80) = 0;
  *(_QWORD *)v375 = &off_1E42BE438;
  *(_QWORD *)(v375 + 8) = 0;
  *(_QWORD *)(v375 + 40) = &unk_1E42BE458;
  *(_QWORD *)(v375 + 48) = "";
  *(_DWORD *)(v375 + 104) = v380->__shared_owners_;
  *(_QWORD *)(v375 + 112) = v380;
  *(_QWORD *)(v375 + 120) = v379;
  a5 = v422;
  if (v379)
  {
    p_shared_owners = (unint64_t *)&v379->__shared_owners_;
    do
      v392 = __ldxr(p_shared_owners);
    while (__stxr(v392 + 1, p_shared_owners));
  }
  *(_WORD *)(v375 + 128) = 0;
  *(_BYTE *)(v375 + 130) = 1;
  *(_QWORD *)(v375 + 136) = v373;
  *(_QWORD *)(v375 + 144) = v371;
  do
    v393 = __ldxr(v372);
  while (__stxr(v393 + 1, v372));
  *(_QWORD *)(v375 + 80) = v380->__shared_weak_owners_;
  v394 = *((_QWORD *)v27 + 3);
  *((_QWORD *)v27 + 3) = v375;
  if (v394)
    (*(void (**)(uint64_t))(*(_QWORD *)v394 + 8))(v394);
  a4 = v436;
  if (v379)
  {
    v395 = (unint64_t *)&v379->__shared_owners_;
    do
      v396 = __ldaxr(v395);
    while (__stlxr(v396 - 1, v395));
    if (!v396)
    {
      ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
      std::__shared_weak_count::__release_weak(v379);
    }
  }
  v397 = v478;
  if (v478)
  {
    v398 = (unint64_t *)&v478->__shared_owners_;
    do
      v399 = __ldaxr(v398);
    while (__stlxr(v399 - 1, v398));
    if (!v399)
    {
      ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
      std::__shared_weak_count::__release_weak(v397);
    }
  }
  v27[32] = 0;
  v400 = (std::__shared_weak_count *)v462[1];
  if (!v462[1])
    goto LABEL_434;
  v401 = (unint64_t *)((char *)v462[1] + 8);
  do
    v402 = __ldaxr(v401);
  while (__stlxr(v402 - 1, v401));
  if (!v402)
  {
    ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
    std::__shared_weak_count::__release_weak(v400);
    v403 = (std::__shared_weak_count_vtbl *)*((_QWORD *)v27 + 3);
    if (v403)
      goto LABEL_435;
  }
  else
  {
LABEL_434:
    v403 = (std::__shared_weak_count_vtbl *)*((_QWORD *)v27 + 3);
    if (v403)
    {
LABEL_435:
      *((_QWORD *)v27 + 3) = 0;
      v474 = (unint64_t)v403;
      v404 = (std::__shared_weak_count *)operator new();
      v404->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E7E90;
      v404->__shared_owners_ = 0;
      v404->__shared_weak_owners_ = 0;
      v404[1].__vftable = v403;
      goto LABEL_438;
    }
  }
LABEL_437:
  v404 = 0;
  v474 = 0;
LABEL_438:
  v475 = v404;
  v405 = (void **)v454;
  if ((_QWORD)v454)
  {
    do
    {
      v407 = (uint64_t *)v405[4];
      for (ii = (uint64_t *)v405[5]; v407 != ii; v407 += 10)
      {
        v408 = v452;
        v450[0] = v451;
        v450[1] = &v452->__vftable;
        if (v452)
        {
          v409 = (unint64_t *)&v452->__shared_owners_;
          do
            v410 = __ldxr(v409);
          while (__stxr(v410 + 1, v409));
        }
        md::DaVinciGroundTileData::_buildBuildingBatch(a1, v440, v407, v405 + 2, a3, a4, v450, a5, (double *)&v474);
        if (v408)
        {
          v411 = (unint64_t *)&v408->__shared_owners_;
          do
            v412 = __ldaxr(v411);
          while (__stlxr(v412 - 1, v411));
          if (!v412)
          {
            ((void (*)(std::__shared_weak_count *))v408->__on_zero_shared)(v408);
            std::__shared_weak_count::__release_weak(v408);
          }
        }
      }
      v405 = (void **)*v405;
    }
    while (v405);
    v404 = v475;
  }
  if (v404)
  {
    v413 = (unint64_t *)&v404->__shared_owners_;
    do
      v414 = __ldaxr(v413);
    while (__stlxr(v414 - 1, v413));
    if (!v414)
    {
      ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
      std::__shared_weak_count::__release_weak(v404);
    }
  }
  v415 = v452;
  if (v452)
  {
    v416 = (unint64_t *)&v452->__shared_owners_;
    do
      v417 = __ldaxr(v416);
    while (__stlxr(v417 - 1, v416));
    if (!v417)
    {
      ((void (*)(std::__shared_weak_count *))v415->__on_zero_shared)(v415);
      std::__shared_weak_count::__release_weak(v415);
    }
  }
  return std::__hash_table<std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>,std::__unordered_map_hasher<md::DaVinciGroundTileData::BuildingBatchType,std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,true>,std::__unordered_map_equal<md::DaVinciGroundTileData::BuildingBatchType,std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,md::DaVinciGroundTileData::BuildingBatchTypeHash,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>>::~__hash_table((uint64_t)__p);
}

void sub_19F04DE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v48;

  p_shared_owners = (unint64_t *)&v45->__shared_owners_;
  do
    v48 = __ldaxr(p_shared_owners);
  while (__stlxr(v48 - 1, p_shared_owners));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  std::__hash_table<std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>,std::__unordered_map_hasher<md::DaVinciGroundTileData::BuildingBatchType,std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>,md::DaVinciGroundTileData::BuildingBatchTypeHash,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,true>,std::__unordered_map_equal<md::DaVinciGroundTileData::BuildingBatchType,std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>,std::equal_to<md::DaVinciGroundTileData::BuildingBatchType>,md::DaVinciGroundTileData::BuildingBatchTypeHash,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundTileData::BuildingBatchType,std::vector<md::DaVinciGroundTileData::BuildingBatch>>>>::~__hash_table((uint64_t)&a45);
  _Unwind_Resume(a1);
}

float std::__function::__func<unsigned long geo::effectiveVertexCount<float>(std::vector<gm::Matrix<float,2,1>> const&)::{lambda(unsigned long)#1},std::allocator<unsigned long geo::effectiveVertexCount<float>(std::vector<gm::Matrix<float,2,1>> const&)::{lambda(unsigned long)#1}>,gm::Matrix<float,2,1> ()(unsigned long)>::operator()(uint64_t a1, _QWORD *a2)
{
  return *(float *)(**(_QWORD **)(a1 + 8) + 8 * *a2);
}

void md::DaVinciGroundTileData::_populateBuildingLoops(float *a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  void *v14;
  void *v15;
  unint64_t v16;
  _QWORD *v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  _QWORD *v46;
  _QWORD *v47;
  void *v48;
  void *v49;
  void *v50;
  void *__p[2];
  uint64_t v52;
  void *v53[2];
  uint64_t v54;

  v12 = a2;
  md::DaVinciGroundTileData::_roundLoopCorners((char **)__p, a1, a2, a4, a5);
  v14 = *(void **)a7;
  if (*(_QWORD *)a7)
  {
    *(_QWORD *)(a7 + 8) = v14;
    operator delete(v14);
    *(_QWORD *)a7 = 0;
    *(_QWORD *)(a7 + 8) = 0;
    *(_QWORD *)(a7 + 16) = 0;
  }
  *(_OWORD *)a7 = *(_OWORD *)__p;
  *(_QWORD *)(a7 + 16) = v52;
  __p[1] = 0;
  v52 = 0;
  __p[0] = 0;
  v15 = *(void **)(a7 + 24);
  if (v15)
  {
    *(_QWORD *)(a7 + 32) = v15;
    operator delete(v15);
    *(_QWORD *)(a7 + 24) = 0;
    *(_QWORD *)(a7 + 32) = 0;
    *(_QWORD *)(a7 + 40) = 0;
    v15 = __p[0];
  }
  *(_OWORD *)(a7 + 24) = *(_OWORD *)v53;
  *(_QWORD *)(a7 + 40) = v54;
  v53[1] = 0;
  v54 = 0;
  v53[0] = 0;
  if (v15)
  {
    __p[1] = v15;
    operator delete(v15);
  }
  v16 = *(unsigned __int16 *)(a3 + 16);
  v17 = *(_QWORD **)a8;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a8 + 16) - *(_QWORD *)a8) >> 4) < v16)
  {
    v18 = *(_BYTE **)(a8 + 8);
    v19 = 48 * v16;
    v20 = (char *)operator new(48 * v16);
    v21 = &v20[v19];
    v22 = &v20[v18 - (_BYTE *)v17];
    if (v18 == (_BYTE *)v17)
    {
      *(_QWORD *)a8 = v22;
      *(_QWORD *)(a8 + 8) = v22;
      *(_QWORD *)(a8 + 16) = v21;
    }
    else
    {
      v23 = 0;
      do
      {
        v24 = &v22[v23];
        v25 = &v18[v23];
        *((_OWORD *)v24 - 3) = *(_OWORD *)&v18[v23 - 48];
        *((_QWORD *)v24 - 4) = *(_QWORD *)&v18[v23 - 32];
        *((_QWORD *)v25 - 6) = 0;
        *((_QWORD *)v25 - 5) = 0;
        *((_QWORD *)v25 - 4) = 0;
        *(_OWORD *)(v24 - 24) = *(_OWORD *)&v18[v23 - 24];
        *((_QWORD *)v24 - 1) = *(_QWORD *)&v18[v23 - 8];
        *((_QWORD *)v25 - 3) = 0;
        *((_QWORD *)v25 - 2) = 0;
        *((_QWORD *)v25 - 1) = 0;
        v23 -= 48;
      }
      while (&v18[v23] != (_BYTE *)v17);
      v17 = *(_QWORD **)a8;
      v26 = *(_QWORD **)(a8 + 8);
      *(_QWORD *)a8 = &v22[v23];
      *(_QWORD *)(a8 + 8) = v22;
      *(_QWORD *)(a8 + 16) = v21;
      while (v26 != v17)
      {
        v27 = (void *)*(v26 - 3);
        if (v27)
        {
          *(v26 - 2) = v27;
          operator delete(v27);
        }
        v28 = (void *)*(v26 - 6);
        if (v28)
        {
          *(v26 - 5) = v28;
          operator delete(v28);
        }
        v26 -= 6;
      }
    }
    if (v17)
      operator delete(v17);
  }
  if (*(_WORD *)(a3 + 16))
  {
    v29 = 0;
    while (1)
    {
      md::DaVinciGroundTileData::_roundLoopCorners((char **)__p, a1, v12, *(_DWORD *)(a6 + 8 * v29), *(_WORD *)(a6 + 8 * v29 + 4));
      v31 = *(_QWORD **)(a8 + 8);
      v30 = *(_QWORD *)(a8 + 16);
      if ((unint64_t)v31 >= v30)
        break;
      v31[2] = 0;
      v31[3] = 0;
      *v31 = 0;
      v31[1] = 0;
      *(_OWORD *)v31 = *(_OWORD *)__p;
      v31[2] = v52;
      __p[0] = 0;
      __p[1] = 0;
      v52 = 0;
      v31[4] = 0;
      v31[5] = 0;
      *(_OWORD *)(v31 + 3) = *(_OWORD *)v53;
      v31[5] = v54;
      v53[0] = 0;
      v53[1] = 0;
      v54 = 0;
      *(_QWORD *)(a8 + 8) = v31 + 6;
LABEL_49:
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (++v29 >= (unint64_t)*(unsigned __int16 *)(a3 + 16))
        return;
    }
    v32 = *(_QWORD **)a8;
    v33 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v31 - *(_QWORD *)a8) >> 4);
    v34 = v33 + 1;
    if (v33 + 1 > 0x555555555555555)
      abort();
    v35 = a3;
    v36 = v12;
    v37 = a6;
    v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (_QWORD)v32) >> 4);
    if (2 * v38 > v34)
      v34 = 2 * v38;
    if (v38 >= 0x2AAAAAAAAAAAAAALL)
      v39 = 0x555555555555555;
    else
      v39 = v34;
    if (v39 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v40 = (char *)operator new(48 * v39);
    v41 = &v40[48 * v33];
    *((_QWORD *)v41 + 2) = v52;
    *(_OWORD *)v41 = *(_OWORD *)__p;
    v42 = &v40[48 * v39];
    __p[1] = 0;
    v52 = 0;
    __p[0] = 0;
    *(_OWORD *)(v41 + 24) = *(_OWORD *)v53;
    *((_QWORD *)v41 + 5) = v54;
    v53[1] = 0;
    v54 = 0;
    v43 = v41 + 48;
    v53[0] = 0;
    if (v31 == v32)
    {
      *(_QWORD *)a8 = v41;
      *(_QWORD *)(a8 + 8) = v43;
      *(_QWORD *)(a8 + 16) = v42;
      a6 = v37;
    }
    else
    {
      v44 = 0;
      do
      {
        v45 = &v41[v44 * 8];
        v46 = &v31[v44];
        *((_OWORD *)v45 - 3) = *(_OWORD *)&v31[v44 - 6];
        *((_QWORD *)v45 - 4) = v31[v44 - 4];
        *(v46 - 6) = 0;
        *(v46 - 5) = 0;
        *(v46 - 4) = 0;
        *(_OWORD *)(v45 - 24) = *(_OWORD *)&v31[v44 - 3];
        *((_QWORD *)v45 - 1) = v31[v44 - 1];
        *(v46 - 3) = 0;
        *(v46 - 2) = 0;
        *(v46 - 1) = 0;
        v44 -= 6;
      }
      while (&v31[v44] != v32);
      v31 = *(_QWORD **)a8;
      v47 = *(_QWORD **)(a8 + 8);
      *(_QWORD *)a8 = &v41[v44 * 8];
      *(_QWORD *)(a8 + 8) = v43;
      *(_QWORD *)(a8 + 16) = v42;
      a6 = v37;
      if (v47 != v31)
      {
        v12 = v36;
        a3 = v35;
        do
        {
          v48 = (void *)*(v47 - 3);
          if (v48)
          {
            *(v47 - 2) = v48;
            operator delete(v48);
          }
          v49 = (void *)*(v47 - 6);
          if (v49)
          {
            *(v47 - 5) = v49;
            operator delete(v49);
          }
          v47 -= 6;
        }
        while (v47 != v31);
        goto LABEL_45;
      }
    }
    v12 = v36;
    a3 = v35;
LABEL_45:
    if (v31)
      operator delete(v31);
    v50 = v53[0];
    *(_QWORD *)(a8 + 8) = v43;
    if (v50)
    {
      v53[1] = v50;
      operator delete(v50);
    }
    goto LABEL_49;
  }
}

void sub_19F04E574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  md::TileAdjustmentHelpers::~TileAdjustmentHelpers((md::TileAdjustmentHelpers *)va);
  _Unwind_Resume(a1);
}

void md::DaVinciGroundTileData::_roundLoopCorners(char **a1, float *a2, uint64_t a3, unsigned int a4, unsigned __int16 a5)
{
  __int128 v6;
  float *v7;
  unsigned int v8;
  unsigned int v9;
  size_t v10;
  unsigned int v11;
  size_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  unint64_t v20;
  float32x2_t *v21;
  float32x2_t v22;
  char *v23;
  float32x2_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  float32x2_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  __int32 v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  size_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  __int128 *v46;
  unint64_t v47;
  __int128 v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  char *v54;
  char v55;
  uint64_t v56;
  size_t v62;
  size_t v63;
  uint64_t v64;
  uint64_t v65;
  float32x2_t *v66;
  float32x2_t *v67;
  float *v68;
  float v69;
  float v70;
  __int128 v71;
  __int32 v72;
  float32x2_t v73;
  float *v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float v87;
  float v88;
  unint64_t v89;
  float32x2_t *v90;
  char *v91;
  float32x2_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  float v98;
  float v99;
  float v100;
  float32x2_t *v101;
  float v102;
  float *v103;
  float32x2_t *v104;
  float v105;
  float v106;
  unint64_t v107;
  float32x2_t *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  int v117;
  char *v118;
  char *v119;
  uint64_t v120;
  __int32 v121;
  unint64_t v122;
  char *v123;
  char *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  size_t v128;
  char *v129;
  char *v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  size_t v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  char v143;
  char *v144;
  __int128 *v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  uint64_t *v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  __int128 *v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  uint64_t *v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  size_t v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  char *v173;
  char v174;
  uint64_t v175;
  __int128 *v176;
  char *v177;
  unint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t *v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  size_t v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  char v195;
  char *v196;
  unint64_t v197;
  __int128 *v198;
  char *v199;
  unint64_t v200;
  char *v201;
  char v202;
  unint64_t v203;
  char *v204;
  char *v205;
  uint64_t *v206;
  uint64_t v207;
  size_t v208;
  size_t v210;
  unsigned int v211;
  float *v212;
  float32x2_t v213;
  int32x2_t v214;
  float32x2_t v215;
  __int32 v216;
  void *__p;
  float *v218;
  __int128 v219;
  float v220;
  float v221;
  uint64_t v222;

  v222 = *MEMORY[0x1E0C80C00];
  DWORD1(v6) = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  v7 = (float *)(a3 + 12 * a4);
  v8 = a5;
  v9 = a5 - 1;
  if (v7[3 * v9] == *v7 && v7[3 * v9 + 1] == *(float *)(a3 + 12 * a4 + 4))
    v8 = a5 - 1;
  v10 = v8;
  v212 = (float *)(a3 + 12 * a4);
  v210 = v8;
  if (v8 >= 3 && *a2 != 0.0)
  {
    v11 = vcvtas_u32_f32(1.5708 / a2[1]);
    if (v11 <= 1)
      v11 = 1;
    v12 = v10 * (unint64_t)(v11 + 1);
    if (v12)
    {
      if (v12 > 0x1555555555555555)
        abort();
      v13 = (char *)operator new(12 * v12);
      *a1 = v13;
      a1[1] = v13;
      a1[2] = &v13[12 * v12];
      v14 = (char *)operator new(v12);
      a1[3] = v14;
      a1[4] = v14;
      a1[5] = &v14[v12];
    }
    else
    {
      v14 = 0;
    }
    v56 = 0;
    v208 = v10 - 1;
    __asm { FMOV            V8.2S, #1.0 }
    while (1)
    {
      v62 = (v208 + v56) % v10;
      v63 = v10;
      v64 = v56 + 1;
      if (v56 + 1 == v63)
        v65 = 0;
      else
        v65 = v56 + 1;
      v66 = (float32x2_t *)&v7[3 * v62];
      LODWORD(v6) = v66[1].i32[0];
      v213 = *v66;
      v214 = (int32x2_t)v6;
      v67 = (float32x2_t *)&v7[3 * v56];
      v215 = *v67;
      v216 = v67[1].i32[0];
      v68 = &v7[3 * v65];
      v69 = *v68;
      v70 = v68[1];
      v211 = *((_DWORD *)v68 + 2);
      *(float32x2_t *)&v71 = *v66;
      *((float32x2_t *)&v71 + 1) = v215;
      v219 = v71;
      v220 = v69;
      v221 = v70;
      md::PolygonRound::smoothTwoSegments((float **)&__p, a2, (float *)&v219);
      v73 = v215;
      v72 = v216;
      v74 = v218;
      if ((unint64_t)((char *)v218 - (_BYTE *)__p) < 9)
        goto LABEL_72;
      v75 = vsub_f32(v215, v213);
      v76 = vsub_f32((float32x2_t)__PAIR64__(v216, v211), (float32x2_t)vdup_lane_s32(v214, 0));
      v77.i32[1] = v75.i32[1];
      v77.f32[0] = v70 - v213.f32[1];
      v78 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(v75, v75), 0);
      v78.f32[0] = (float)(v69 - v213.f32[0]) * (float)(v69 - v213.f32[0]);
      v79 = vdiv_f32(_D8, vsqrt_f32(vmla_f32(vmla_f32(v78, v77, v77), v76, v76)));
      v80 = (float32x2_t)vdup_lane_s32((int32x2_t)v75, 0);
      v75.f32[0] = v69 - v213.f32[0];
      v81 = vmul_f32(v79, v75);
      v80.f32[0] = v70 - v213.f32[1];
      v82 = vmul_lane_f32(v81, v81, 1);
      v83 = vmul_f32(v79, v80);
      v84 = vmul_f32(v79, v76);
      *(float32x2_t *)&v6 = vmla_f32(vneg_f32(vmul_f32(v83, (float32x2_t)vrev64_s32((int32x2_t)v84))), v84, (float32x2_t)vrev64_s32((int32x2_t)v81));
      v85 = vmla_lane_f32(vneg_f32(v82), v83, v83, 1);
      v86 = vmul_f32(*(float32x2_t *)&v6, *(float32x2_t *)&v6);
      v87 = 1.0 / sqrtf(vmla_f32(vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v86, 1), v86), v85, v85).f32[0]);
      v88 = v87 * v85.f32[0];
      if (v88 == 0.0)
      {
LABEL_72:
        v90 = (float32x2_t *)a1[1];
        v89 = (unint64_t)a1[2];
        if ((unint64_t)v90 >= v89)
        {
          v92 = (float32x2_t *)*a1;
          v93 = 0xAAAAAAAAAAAAAAABLL * (((char *)v90 - *a1) >> 2);
          v94 = v93 + 1;
          if (v93 + 1 > 0x1555555555555555)
            abort();
          v95 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v89 - (_QWORD)v92) >> 2);
          if (2 * v95 > v94)
            v94 = 2 * v95;
          if (v95 >= 0xAAAAAAAAAAAAAAALL)
            v96 = 0x1555555555555555;
          else
            v96 = v94;
          if (v96)
          {
            if (v96 > 0x1555555555555555)
              goto LABEL_253;
            v97 = (char *)operator new(12 * v96);
            v73 = v215;
            v72 = v216;
          }
          else
          {
            v97 = 0;
          }
          v118 = &v97[12 * v93];
          *(float32x2_t *)v118 = v73;
          *((_DWORD *)v118 + 2) = v72;
          v119 = v118;
          if (v90 != v92)
          {
            do
            {
              v120 = *(uint64_t *)((char *)&v90[-2] + 4);
              v90 = (float32x2_t *)((char *)v90 - 12);
              v121 = v90[1].i32[0];
              *(_QWORD *)(v119 - 12) = v120;
              v119 -= 12;
              *((_DWORD *)v119 + 2) = v121;
            }
            while (v90 != v92);
            v90 = (float32x2_t *)*a1;
          }
          v91 = v118 + 12;
          *a1 = v119;
          a1[1] = v118 + 12;
          a1[2] = &v97[12 * v96];
          if (v90)
            operator delete(v90);
        }
        else
        {
          *v90 = v215;
          v90[1].i32[0] = v216;
          v91 = (char *)&v90[1] + 4;
        }
        a1[1] = v91;
        v123 = a1[4];
        v122 = (unint64_t)a1[5];
        if ((unint64_t)v123 < v122)
        {
          *v123 &= 0xFCu;
          v14 = v123 + 1;
          v7 = v212;
          goto LABEL_241;
        }
        v124 = a1[3];
        v125 = v123 - v124;
        v126 = v123 - v124 + 1;
        v7 = v212;
        if (v126 < 0)
          abort();
        v127 = v122 - (_QWORD)v124;
        if (2 * v127 > v126)
          v126 = 2 * v127;
        if (v127 >= 0x3FFFFFFFFFFFFFFFLL)
          v128 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v128 = v126;
        if (v128)
          v129 = (char *)operator new(v128);
        else
          v129 = 0;
        v130 = &v129[v125];
        v129[v125] &= 0xFCu;
        v14 = &v129[v125 + 1];
        if (v123 == v124)
          goto LABEL_238;
        if (v125 < 8 || (unint64_t)(v124 - v129) < 0x20)
          goto LABEL_234;
        if (v125 >= 0x20)
        {
          v131 = v125 & 0xFFFFFFFFFFFFFFE0;
          v144 = &v129[v125 - 16];
          v145 = (__int128 *)(v123 - 16);
          v146 = v125 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v6 = *v145;
            *((_OWORD *)v144 - 1) = *(v145 - 1);
            *(_OWORD *)v144 = v6;
            v144 -= 32;
            v145 -= 2;
            v146 -= 32;
          }
          while (v146);
          if (v125 == v131)
            goto LABEL_152;
          if ((v125 & 0x18) == 0)
          {
            v130 -= v131;
            v123 -= v131;
            goto LABEL_234;
          }
        }
        else
        {
          v131 = 0;
        }
        v147 = v131 - (v125 & 0xFFFFFFFFFFFFFFF8);
        v148 = &v123[-v131];
        v149 = &v129[&v123[-v131] - v124 - 8];
        v150 = (uint64_t *)(v148 - 8);
        do
        {
          v151 = *v150--;
          DWORD1(v6) = HIDWORD(v151);
          *(_QWORD *)v149 = v151;
          v149 -= 8;
          v147 += 8;
        }
        while (v147);
        if (v125 == (v125 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_152:
          v123 = v124;
LABEL_237:
          v130 = v129;
LABEL_238:
          a1[3] = v130;
          a1[4] = v14;
          a1[5] = &v129[v128];
          if (v123)
          {
            v196 = v123;
            goto LABEL_240;
          }
          goto LABEL_241;
        }
        v130 -= v125 & 0xFFFFFFFFFFFFFFF8;
        v123 -= v125 & 0xFFFFFFFFFFFFFFF8;
LABEL_234:
        v201 = v130 - 1;
        do
        {
          v202 = *--v123;
          *v201-- = v202;
        }
        while (v123 != v124);
        v123 = a1[3];
        goto LABEL_237;
      }
      if (__p != v218)
      {
        v98 = v87 * *(float *)&v6;
        v99 = vmuls_lane_f32(v87, *(float32x2_t *)&v6, 1);
        v100 = (float)(vmuls_lane_f32(v99, v213, 1) + (float)((float)(v87 * *(float *)&v6) * v213.f32[0]))
             + (float)(v88 * *(float *)v214.i32);
        v101 = (float32x2_t *)a1[1];
        v102 = 1.0 / v88;
        v103 = (float *)__p;
        do
        {
          v105 = *v103;
          *(float *)&v6 = v103[1];
          v106 = (float)(v100 - (float)((float)(*v103 * v98) + (float)(*(float *)&v6 * v99))) * v102;
          v107 = (unint64_t)a1[2];
          if ((unint64_t)v101 < v107)
          {
            v101->f32[0] = v105;
            v101->i32[1] = v6;
            v104 = (float32x2_t *)((char *)v101 + 12);
            v101[1].f32[0] = v106;
          }
          else
          {
            v108 = (float32x2_t *)*a1;
            v109 = 0xAAAAAAAAAAAAAAABLL * (((char *)v101 - *a1) >> 2);
            v110 = v109 + 1;
            if (v109 + 1 > 0x1555555555555555)
              abort();
            v111 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v107 - (_QWORD)v108) >> 2);
            if (2 * v111 > v110)
              v110 = 2 * v111;
            if (v111 >= 0xAAAAAAAAAAAAAAALL)
              v112 = 0x1555555555555555;
            else
              v112 = v110;
            if (v112)
            {
              if (v112 > 0x1555555555555555)
                goto LABEL_253;
              v113 = (char *)operator new(12 * v112);
              v105 = *v103;
              *(float *)&v6 = v103[1];
            }
            else
            {
              v113 = 0;
            }
            v114 = &v113[12 * v109];
            *(float *)v114 = v105;
            *((_DWORD *)v114 + 1) = v6;
            *((float *)v114 + 2) = v106;
            v115 = v114;
            if (v101 != v108)
            {
              do
              {
                v116 = *(uint64_t *)((char *)&v101[-2] + 4);
                v101 = (float32x2_t *)((char *)v101 - 12);
                v117 = v101[1].i32[0];
                *(_QWORD *)(v115 - 12) = v116;
                v115 -= 12;
                *((_DWORD *)v115 + 2) = v117;
              }
              while (v101 != v108);
              v101 = (float32x2_t *)*a1;
            }
            v104 = (float32x2_t *)(v114 + 12);
            *a1 = v115;
            a1[1] = v114 + 12;
            a1[2] = &v113[12 * v112];
            if (v101)
              operator delete(v101);
          }
          a1[1] = (char *)v104;
          v103 += 2;
          v101 = v104;
        }
        while (v103 != v74);
        v14 = a1[4];
        v7 = v212;
      }
      v132 = (unint64_t)a1[5];
      if ((unint64_t)v14 < v132)
      {
        *v14 = *v14 & 0xFC | 2;
        v133 = v14 + 1;
        goto LABEL_166;
      }
      v134 = a1[3];
      v135 = v14 - v134;
      v136 = v14 - v134 + 1;
      if (v136 < 0)
        abort();
      v137 = v132 - (_QWORD)v134;
      if (2 * v137 > v136)
        v136 = 2 * v137;
      v138 = v137 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v136;
      v139 = v138 ? (char *)operator new(v138) : 0;
      v140 = &v139[v135];
      v139[v135] = v139[v135] & 0xFC | 2;
      v133 = &v139[v135 + 1];
      if (v14 != v134)
        break;
LABEL_164:
      a1[3] = v140;
      a1[4] = v133;
      a1[5] = &v139[v138];
      if (v14)
        operator delete(v14);
LABEL_166:
      a1[4] = v133;
      if ((unint64_t)((((char *)v218 - (_BYTE *)__p) >> 3) - 3) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        LODWORD(v161) = 1;
        while (1)
        {
          v163 = (unint64_t)a1[5];
          if ((unint64_t)v133 >= v163)
            break;
          *v133 |= 3u;
          v162 = v133 + 1;
LABEL_169:
          a1[4] = v162;
          v161 = (v161 + 1);
          v133 = v162;
          if ((((char *)v218 - (_BYTE *)__p) >> 3) - 1 <= v161)
            goto LABEL_205;
        }
        v164 = (unint64_t)a1[3];
        v165 = (unint64_t)&v133[-v164];
        v166 = (uint64_t)&v133[-v164 + 1];
        if (v166 < 0)
          abort();
        v167 = v163 - v164;
        if (2 * v167 > v166)
          v166 = 2 * v167;
        if (v167 >= 0x3FFFFFFFFFFFFFFFLL)
          v168 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v168 = v166;
        if (v168)
          v169 = (char *)operator new(v168);
        else
          v169 = 0;
        v170 = &v169[v165];
        v171 = &v169[v168];
        v169[v165] |= 3u;
        v162 = &v169[v165 + 1];
        if (v133 != (char *)v164)
        {
          if (v165 <= 7
            || v169 > &v133[(_QWORD)v169 - v164 - 1]
            || v164 > (unint64_t)(v133 - 1)
            || v164 - (unint64_t)v169 < 0x20)
          {
            v172 = v133;
          }
          else
          {
            if (v165 < 0x20)
            {
              v175 = 0;
LABEL_199:
              v172 = &v133[-(v165 & 0xFFFFFFFFFFFFFFF8)];
              v179 = v175 - (v165 & 0xFFFFFFFFFFFFFFF8);
              v180 = &v133[-v175];
              v181 = &v133[-v175 - v164 - 8 + (_QWORD)v169];
              v182 = (uint64_t *)(v180 - 8);
              do
              {
                v183 = *v182--;
                DWORD1(v6) = HIDWORD(v183);
                *(_QWORD *)v181 = v183;
                v181 -= 8;
                v179 += 8;
              }
              while (v179);
              if (v165 != (v165 & 0xFFFFFFFFFFFFFFF8))
              {
                v170 -= v165 & 0xFFFFFFFFFFFFFFF8;
                goto LABEL_183;
              }
LABEL_186:
              a1[3] = v169;
              a1[4] = v162;
              v133 = (char *)v164;
              a1[5] = v171;
              if (!v164)
                goto LABEL_169;
LABEL_189:
              operator delete(v133);
              goto LABEL_169;
            }
            v175 = v165 & 0xFFFFFFFFFFFFFFE0;
            v176 = (__int128 *)(v133 - 16);
            v177 = &v169[v165 - 16];
            v178 = v165 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v6 = *v176;
              *((_OWORD *)v177 - 1) = *(v176 - 1);
              *(_OWORD *)v177 = v6;
              v176 -= 2;
              v177 -= 32;
              v178 -= 32;
            }
            while (v178);
            if (v165 == v175)
              goto LABEL_186;
            if ((v165 & 0x18) != 0)
              goto LABEL_199;
            v170 -= v175;
            v172 = &v133[-v175];
          }
LABEL_183:
          v173 = v170 - 1;
          do
          {
            v174 = *--v172;
            *v173-- = v174;
          }
          while (v172 != (char *)v164);
          v164 = (unint64_t)a1[3];
          goto LABEL_186;
        }
        a1[3] = v170;
        a1[4] = v162;
        a1[5] = v171;
        goto LABEL_189;
      }
      v162 = v133;
LABEL_205:
      v184 = (unint64_t)a1[5];
      if ((unint64_t)v162 >= v184)
      {
        v185 = a1[3];
        v186 = v162 - v185;
        v187 = v162 - v185 + 1;
        if (v187 < 0)
          abort();
        v188 = v184 - (_QWORD)v185;
        if (2 * v188 > v187)
          v187 = 2 * v188;
        if (v188 >= 0x3FFFFFFFFFFFFFFFLL)
          v189 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v189 = v187;
        if (v189)
          v190 = (char *)operator new(v189);
        else
          v190 = 0;
        v191 = &v190[v186];
        v192 = &v190[v189];
        v190[v186] = v190[v186] & 0xFC | 1;
        v14 = &v190[v186 + 1];
        if (v162 == v185)
        {
          a1[3] = v191;
          a1[4] = v14;
          a1[5] = v192;
        }
        else
        {
          if (v186 > 7 && (unint64_t)(v185 - v190) >= 0x20)
          {
            if (v186 >= 0x20)
            {
              v197 = v186 & 0xFFFFFFFFFFFFFFE0;
              v198 = (__int128 *)(v162 - 16);
              v199 = &v190[v186 - 16];
              v200 = v186 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v6 = *v198;
                *((_OWORD *)v199 - 1) = *(v198 - 1);
                *(_OWORD *)v199 = v6;
                v198 -= 2;
                v199 -= 32;
                v200 -= 32;
              }
              while (v200);
              if (v186 == v197)
                goto LABEL_223;
              if ((v186 & 0x18) == 0)
              {
                v191 -= v197;
                v193 = &v162[-v197];
                goto LABEL_220;
              }
            }
            else
            {
              v197 = 0;
            }
            v193 = &v162[-(v186 & 0xFFFFFFFFFFFFFFF8)];
            v203 = v197 - (v186 & 0xFFFFFFFFFFFFFFF8);
            v204 = &v162[-v197];
            v205 = &v190[&v162[-v197] - v185 - 8];
            v206 = (uint64_t *)(v204 - 8);
            do
            {
              v207 = *v206--;
              DWORD1(v6) = HIDWORD(v207);
              *(_QWORD *)v205 = v207;
              v205 -= 8;
              v203 += 8;
            }
            while (v203);
            if (v186 != (v186 & 0xFFFFFFFFFFFFFFF8))
            {
              v191 -= v186 & 0xFFFFFFFFFFFFFFF8;
              goto LABEL_220;
            }
          }
          else
          {
            v193 = v162;
LABEL_220:
            v194 = v191 - 1;
            do
            {
              v195 = *--v193;
              *v194-- = v195;
            }
            while (v193 != v185);
            v185 = a1[3];
          }
LABEL_223:
          a1[3] = v190;
          a1[4] = v14;
          v162 = v185;
          a1[5] = v192;
          if (!v185)
            goto LABEL_241;
        }
        v196 = v162;
LABEL_240:
        operator delete(v196);
        goto LABEL_241;
      }
      *v162 = *v162 & 0xFC | 1;
      v14 = v162 + 1;
LABEL_241:
      a1[4] = v14;
      if (__p)
        operator delete(__p);
      v56 = v64;
      _ZF = v64 == v210;
      v10 = v210;
      if (_ZF)
        return;
    }
    if (v135 < 8 || (unint64_t)(v134 - v139) < 0x20)
    {
      v141 = v14;
      goto LABEL_142;
    }
    if (v135 >= 0x20)
    {
      v152 = v135 & 0xFFFFFFFFFFFFFFE0;
      v153 = &v139[v135 - 16];
      v154 = (__int128 *)(v14 - 16);
      v155 = v135 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v6 = *v154;
        *((_OWORD *)v153 - 1) = *(v154 - 1);
        *(_OWORD *)v153 = v6;
        v153 -= 32;
        v154 -= 2;
        v155 -= 32;
      }
      while (v155);
      if (v135 == v152)
      {
LABEL_163:
        v14 = v134;
        v140 = v139;
        goto LABEL_164;
      }
      if ((v135 & 0x18) == 0)
      {
        v140 -= v152;
        v141 = &v14[-v152];
LABEL_142:
        v142 = v140 - 1;
        do
        {
          v143 = *--v141;
          *v142-- = v143;
        }
        while (v141 != v134);
        v14 = a1[3];
        v140 = v139;
        goto LABEL_164;
      }
    }
    else
    {
      v152 = 0;
    }
    v141 = &v14[-(v135 & 0xFFFFFFFFFFFFFFF8)];
    v156 = v152 - (v135 & 0xFFFFFFFFFFFFFFF8);
    v157 = &v14[-v152];
    v158 = &v139[&v14[-v152] - v134 - 8];
    v159 = (uint64_t *)(v157 - 8);
    do
    {
      v160 = *v159--;
      DWORD1(v6) = HIDWORD(v160);
      *(_QWORD *)v158 = v160;
      v158 -= 8;
      v156 += 8;
    }
    while (v156);
    if (v135 == (v135 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_163;
    v140 -= v135 & 0xFFFFFFFFFFFFFFF8;
    goto LABEL_142;
  }
  if (v8)
  {
    v15 = (char *)operator new(12 * v8);
    *a1 = v15;
    a1[1] = v15;
    a1[2] = &v15[12 * v10];
    v16 = (char *)operator new(v10);
    v17 = 0;
    a1[3] = v16;
    a1[4] = v16;
    a1[5] = &v16[v10];
    while (1)
    {
      v19 = &v7[3 * v17];
      v21 = (float32x2_t *)a1[1];
      v20 = (unint64_t)a1[2];
      if ((unint64_t)v21 >= v20)
      {
        v24 = (float32x2_t *)*a1;
        v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - *a1) >> 2);
        v26 = v25 + 1;
        if (v25 + 1 > 0x1555555555555555)
          abort();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (_QWORD)v24) >> 2);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        v28 = v27 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v26;
        if (v28)
        {
          if (v28 > 0x1555555555555555)
LABEL_253:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v29 = (char *)operator new(12 * v28);
        }
        else
        {
          v29 = 0;
        }
        v30 = *(float32x2_t *)v19;
        v31 = &v29[12 * v25];
        *((float *)v31 + 2) = v19[2];
        *(float32x2_t *)v31 = v30;
        v32 = v31;
        if (v21 != v24)
        {
          do
          {
            v33 = *(uint64_t *)((char *)&v21[-2] + 4);
            v21 = (float32x2_t *)((char *)v21 - 12);
            v34 = v21[1].i32[0];
            *(_QWORD *)(v32 - 12) = v33;
            v32 -= 12;
            *((_DWORD *)v32 + 2) = v34;
          }
          while (v21 != v24);
          v21 = (float32x2_t *)*a1;
        }
        v23 = v31 + 12;
        *a1 = v32;
        a1[1] = v31 + 12;
        a1[2] = &v29[12 * v28];
        if (v21)
          operator delete(v21);
      }
      else
      {
        v22 = *(float32x2_t *)v19;
        v21[1].f32[0] = v19[2];
        *v21 = v22;
        v23 = (char *)&v21[1] + 4;
      }
      a1[1] = v23;
      v36 = a1[4];
      v35 = (unint64_t)a1[5];
      if ((unint64_t)v36 >= v35)
        break;
      *v36 &= 0xFCu;
      v18 = (uint64_t)(v36 + 1);
      v7 = v212;
LABEL_14:
      a1[4] = (char *)v18;
      if (++v17 == v10)
        return;
    }
    v37 = a1[3];
    v38 = v36 - v37;
    v39 = v36 - v37 + 1;
    v7 = v212;
    if (v39 < 0)
      abort();
    v40 = v35 - (_QWORD)v37;
    if (2 * v40 > v39)
      v39 = 2 * v40;
    if (v40 >= 0x3FFFFFFFFFFFFFFFLL)
      v41 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    if (v41)
      v42 = (char *)operator new(v41);
    else
      v42 = 0;
    v43 = &v42[v38];
    v42[v38] &= 0xFCu;
    v18 = (uint64_t)&v42[v38 + 1];
    if (v36 == v37)
    {
LABEL_61:
      v10 = v210;
      a1[3] = v43;
      a1[4] = (char *)v18;
      a1[5] = &v42[v41];
      if (v36)
        operator delete(v36);
      goto LABEL_14;
    }
    if (v38 < 8 || (unint64_t)(v37 - v42) < 0x20)
      goto LABEL_57;
    if (v38 >= 0x20)
    {
      v44 = v38 & 0xFFFFFFFFFFFFFFE0;
      v45 = &v42[v38 - 16];
      v46 = (__int128 *)(v36 - 16);
      v47 = v38 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v48 = *v46;
        *((_OWORD *)v45 - 1) = *(v46 - 1);
        *(_OWORD *)v45 = v48;
        v45 -= 32;
        v46 -= 2;
        v47 -= 32;
      }
      while (v47);
      if (v38 == v44)
        goto LABEL_54;
      if ((v38 & 0x18) == 0)
      {
        v43 -= v44;
        v36 -= v44;
        goto LABEL_57;
      }
    }
    else
    {
      v44 = 0;
    }
    v49 = v44 - (v38 & 0xFFFFFFFFFFFFFFF8);
    v50 = &v36[-v44];
    v51 = &v42[&v36[-v44] - v37 - 8];
    v52 = (uint64_t *)(v50 - 8);
    do
    {
      v53 = *v52--;
      *(_QWORD *)v51 = v53;
      v51 -= 8;
      v49 += 8;
    }
    while (v49);
    if (v38 == (v38 & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_54:
      v36 = v37;
LABEL_60:
      v43 = v42;
      goto LABEL_61;
    }
    v43 -= v38 & 0xFFFFFFFFFFFFFFF8;
    v36 -= v38 & 0xFFFFFFFFFFFFFFF8;
LABEL_57:
    v54 = v43 - 1;
    do
    {
      v55 = *--v36;
      *v54-- = v55;
    }
    while (v36 != v37);
    v36 = a1[3];
    goto LABEL_60;
  }
}

void sub_19F04F498(_Unwind_Exception *a1)
{
  md::TileAdjustmentHelpers *v1;

  md::TileAdjustmentHelpers::~TileAdjustmentHelpers(v1);
  _Unwind_Resume(a1);
}

unsigned int *std::__introsort<std::_ClassicAlgPolicy,gss::FeatureAttributeSet::sort(void)::$_0 &,std::pair<gss::StyleAttribute,unsigned short> *,false>(unsigned int *result, unsigned int *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  __int16 v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  __int16 v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  __int16 v39;
  unsigned int v40;
  unsigned int v41;
  __int16 v42;
  unsigned int v43;
  unsigned int v44;
  __int16 v45;
  __int16 v46;
  unsigned int v47;
  __int16 v48;
  unsigned int v49;
  __int16 v50;
  unsigned int *v51;
  BOOL v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;
  BOOL v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _WORD *v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  _WORD *v93;
  _WORD *v94;
  __int16 v95;

  v7 = (uint64_t)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v37 = *(a2 - 2);
        v38 = *(_DWORD *)v8;
        if (v37 < *(_DWORD *)v8)
        {
          *(_DWORD *)v8 = v37;
          *(a2 - 2) = v38;
          v39 = *(_WORD *)(v8 + 4);
          *(_WORD *)(v8 + 4) = *((_WORD *)a2 - 2);
          *((_WORD *)a2 - 2) = v39;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,gss::FeatureAttributeSet::sort(void)::$_0 &,std::pair<gss::StyleAttribute,unsigned short> *>((unsigned int *)v8, (unsigned int *)(v8 + 8), a2 - 2);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,gss::FeatureAttributeSet::sort(void)::$_0 &,std::pair<gss::StyleAttribute,unsigned short> *>(v8, v8 + 8, v8 + 16, (uint64_t)(a2 - 2));
      case 5uLL:
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,gss::FeatureAttributeSet::sort(void)::$_0 &,std::pair<gss::StyleAttribute,unsigned short> *>(v8, v8 + 8, v8 + 16, v8 + 24);
        v40 = *(a2 - 2);
        v41 = *(_DWORD *)(v8 + 24);
        if (v40 < v41)
        {
          *(_DWORD *)(v8 + 24) = v40;
          *(a2 - 2) = v41;
          v42 = *(_WORD *)(v8 + 28);
          *(_WORD *)(v8 + 28) = *((_WORD *)a2 - 2);
          *((_WORD *)a2 - 2) = v42;
          v43 = *(_DWORD *)(v8 + 24);
          v44 = *(_DWORD *)(v8 + 16);
          if (v43 < v44)
          {
            *(_DWORD *)(v8 + 16) = v43;
            *(_DWORD *)(v8 + 24) = v44;
            v45 = *(_WORD *)(v8 + 20);
            v46 = *(_WORD *)(v8 + 28);
            *(_WORD *)(v8 + 20) = v46;
            *(_WORD *)(v8 + 28) = v45;
            v47 = *(_DWORD *)(v8 + 8);
            if (v43 < v47)
            {
              *(_DWORD *)(v8 + 8) = v43;
              *(_DWORD *)(v8 + 16) = v47;
              v48 = *(_WORD *)(v8 + 12);
              *(_WORD *)(v8 + 12) = v46;
              *(_WORD *)(v8 + 20) = v48;
              v49 = *(_DWORD *)v8;
              if (v43 < *(_DWORD *)v8)
              {
                *(_DWORD *)v8 = v43;
                *(_DWORD *)(v8 + 8) = v49;
                v50 = *(_WORD *)(v8 + 4);
                *(_WORD *)(v8 + 4) = v46;
                *(_WORD *)(v8 + 12) = v50;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v51 = (unsigned int *)(v8 + 8);
          v53 = (unsigned int *)v8 == a2 || v51 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v53)
            {
              v54 = 0;
              v55 = (unsigned int *)v8;
              do
              {
                v56 = v55[2];
                v57 = *v55;
                v55 = v51;
                if (v56 < v57)
                {
                  v58 = *(_QWORD *)v51;
                  v59 = v54;
                  while (1)
                  {
                    v60 = v8 + v59;
                    *(_DWORD *)(v60 + 8) = v57;
                    *(_WORD *)(v60 + 12) = *(_WORD *)(v8 + v59 + 4);
                    if (!v59)
                      break;
                    v57 = *(_DWORD *)(v60 - 8);
                    v59 -= 8;
                    if (v57 <= v58)
                    {
                      v61 = v8 + v59 + 8;
                      goto LABEL_79;
                    }
                  }
                  v61 = v8;
LABEL_79:
                  *(_DWORD *)v61 = v58;
                  *(_WORD *)(v61 + 4) = WORD2(v58);
                }
                v51 = v55 + 2;
                v54 += 8;
              }
              while (v55 + 2 != a2);
            }
          }
          else if (!v53)
          {
            v89 = (_WORD *)(v8 + 12);
            do
            {
              v90 = *(_DWORD *)(v7 + 8);
              v91 = *(_DWORD *)v7;
              v7 = (uint64_t)v51;
              if (v90 < v91)
              {
                v92 = *(_QWORD *)v51;
                v93 = v89;
                do
                {
                  v94 = v93;
                  *((_DWORD *)v93 - 1) = v91;
                  v95 = *(v93 - 4);
                  v93 -= 4;
                  *v94 = v95;
                  v91 = *((_DWORD *)v94 - 5);
                }
                while (v91 > v92);
                *((_DWORD *)v93 - 1) = v92;
                *v93 = WORD2(v92);
              }
              v51 = (unsigned int *)(v7 + 8);
              v89 += 4;
            }
            while ((unsigned int *)(v7 + 8) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((unsigned int *)v8 != a2)
          {
            v62 = (v10 - 2) >> 1;
            v63 = v62;
            do
            {
              v64 = v63;
              if (v62 >= v63)
              {
                v65 = (2 * v63) | 1;
                v66 = v8 + 8 * v65;
                if (2 * v64 + 2 >= (uint64_t)v10)
                {
                  v67 = *(_DWORD *)v66;
                }
                else
                {
                  v67 = *(_DWORD *)(v66 + 8);
                  v68 = *(_DWORD *)v66 >= v67;
                  if (*(_DWORD *)v66 > v67)
                    v67 = *(_DWORD *)v66;
                  if (!v68)
                  {
                    v66 += 8;
                    v65 = 2 * v64 + 2;
                  }
                }
                v69 = v8 + 8 * v64;
                if (v67 >= *(_DWORD *)v69)
                {
                  v70 = *(_QWORD *)v69;
                  do
                  {
                    v71 = v69;
                    v69 = v66;
                    *(_DWORD *)v71 = v67;
                    *(_WORD *)(v71 + 4) = *(_WORD *)(v66 + 4);
                    if (v62 < v65)
                      break;
                    v72 = (2 * v65) | 1;
                    v66 = v8 + 8 * v72;
                    v65 = 2 * v65 + 2;
                    if (v65 >= (uint64_t)v10)
                    {
                      v67 = *(_DWORD *)v66;
                      v65 = v72;
                    }
                    else
                    {
                      v67 = *(_DWORD *)v66;
                      result = (unsigned int *)(v66 + 8);
                      v73 = *(_DWORD *)(v66 + 8);
                      if (*(_DWORD *)v66 <= v73)
                        v67 = *(_DWORD *)(v66 + 8);
                      if (*(_DWORD *)v66 >= v73)
                        v65 = v72;
                      else
                        v66 += 8;
                    }
                  }
                  while (v67 >= v70);
                  *(_DWORD *)v69 = v70;
                  *(_WORD *)(v69 + 4) = WORD2(v70);
                }
              }
              v63 = v64 - 1;
            }
            while (v64);
            v74 = (unint64_t)v9 >> 3;
            do
            {
              v75 = 0;
              v76 = *(_QWORD *)v8;
              v77 = v8;
              do
              {
                v78 = v77 + 8 * v75 + 8;
                v79 = (2 * v75) | 1;
                v75 = 2 * v75 + 2;
                if (v75 >= v74)
                {
                  v80 = *(_DWORD *)v78;
                  v75 = v79;
                }
                else
                {
                  v80 = *(_DWORD *)v78;
                  v81 = *(_DWORD *)(v78 + 8);
                  if (*(_DWORD *)v78 <= v81)
                    v80 = *(_DWORD *)(v78 + 8);
                  if (*(_DWORD *)v78 >= v81)
                    v75 = v79;
                  else
                    v78 += 8;
                }
                *(_DWORD *)v77 = v80;
                *(_WORD *)(v77 + 4) = *(_WORD *)(v78 + 4);
                v77 = v78;
              }
              while (v75 <= (uint64_t)((unint64_t)(v74 - 2) >> 1));
              if ((unsigned int *)v78 == a2 - 2)
              {
                *(_DWORD *)v78 = v76;
                *(_WORD *)(v78 + 4) = WORD2(v76);
              }
              else
              {
                *(_DWORD *)v78 = *(a2 - 2);
                *(_WORD *)(v78 + 4) = *((_WORD *)a2 - 2);
                *(a2 - 2) = v76;
                *((_WORD *)a2 - 2) = WORD2(v76);
                v82 = v78 - v8 + 8;
                if (v82 >= 9)
                {
                  v83 = (((unint64_t)v82 >> 3) - 2) >> 1;
                  v84 = v8 + 8 * v83;
                  v85 = *(_DWORD *)v84;
                  if (*(_DWORD *)v84 < *(_DWORD *)v78)
                  {
                    v86 = *(_QWORD *)v78;
                    do
                    {
                      v87 = v78;
                      v78 = v84;
                      *(_DWORD *)v87 = v85;
                      *(_WORD *)(v87 + 4) = *(_WORD *)(v84 + 4);
                      if (!v83)
                        break;
                      v83 = (v83 - 1) >> 1;
                      v84 = v8 + 8 * v83;
                      v85 = *(_DWORD *)v84;
                    }
                    while (*(_DWORD *)v84 < v86);
                    *(_DWORD *)v78 = v86;
                    *(_WORD *)(v78 + 4) = WORD2(v86);
                  }
                }
              }
              a2 -= 2;
            }
            while (v74-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = v8 + 8 * (v10 >> 1);
        if ((unint64_t)v9 < 0x401)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,gss::FeatureAttributeSet::sort(void)::$_0 &,std::pair<gss::StyleAttribute,unsigned short> *>((unsigned int *)(v7 + 8 * (v10 >> 1)), (unsigned int *)v7, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,gss::FeatureAttributeSet::sort(void)::$_0 &,std::pair<gss::StyleAttribute,unsigned short> *>((unsigned int *)v7, (unsigned int *)(v7 + 8 * (v10 >> 1)), a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,gss::FeatureAttributeSet::sort(void)::$_0 &,std::pair<gss::StyleAttribute,unsigned short> *>((unsigned int *)(v7 + 8), (unsigned int *)(v12 - 8), a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,gss::FeatureAttributeSet::sort(void)::$_0 &,std::pair<gss::StyleAttribute,unsigned short> *>((unsigned int *)(v7 + 16), (unsigned int *)(v7 + 8 + 8 * v11), a2 - 6);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,gss::FeatureAttributeSet::sort(void)::$_0 &,std::pair<gss::StyleAttribute,unsigned short> *>((unsigned int *)(v12 - 8), (unsigned int *)v12, (unsigned int *)(v7 + 8 + 8 * v11));
          v13 = *(_DWORD *)v7;
          *(_DWORD *)v7 = *(_DWORD *)v12;
          *(_DWORD *)v12 = v13;
          LOWORD(v13) = *(_WORD *)(v7 + 4);
          *(_WORD *)(v7 + 4) = *(_WORD *)(v12 + 4);
          *(_WORD *)(v12 + 4) = v13;
        }
        --a3;
        if ((a4 & 1) == 0 && *(_DWORD *)(v7 - 8) >= *(_DWORD *)v7)
        {
          v27 = *(_QWORD *)v7;
          if (*(a2 - 2) <= *(_QWORD *)v7)
          {
            v29 = v7 + 8;
            do
            {
              v8 = v29;
              if (v29 >= (unint64_t)a2)
                break;
              v29 += 8;
            }
            while (*(_DWORD *)v8 <= v27);
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = *(_DWORD *)(v8 + 8);
              v8 += 8;
            }
            while (v28 <= v27);
          }
          v30 = a2;
          if (v8 < (unint64_t)a2)
          {
            v30 = a2;
            do
            {
              v31 = *(v30 - 2);
              v30 -= 2;
            }
            while (v31 > v27);
          }
          if (v8 < (unint64_t)v30)
          {
            v32 = *(_DWORD *)v8;
            v33 = *v30;
            do
            {
              *(_DWORD *)v8 = v33;
              *v30 = v32;
              v34 = *(_WORD *)(v8 + 4);
              *(_WORD *)(v8 + 4) = *((_WORD *)v30 + 2);
              *((_WORD *)v30 + 2) = v34;
              do
              {
                v35 = *(_DWORD *)(v8 + 8);
                v8 += 8;
                v32 = v35;
              }
              while (v35 <= v27);
              do
              {
                v36 = *(v30 - 2);
                v30 -= 2;
                v33 = v36;
              }
              while (v36 > v27);
            }
            while (v8 < (unint64_t)v30);
          }
          if (v8 - 8 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v8 - 8);
            *(_WORD *)(v7 + 4) = *(_WORD *)(v8 - 4);
          }
          a4 = 0;
          *(_DWORD *)(v8 - 8) = v27;
          *(_WORD *)(v8 - 4) = WORD2(v27);
          continue;
        }
        v14 = 0;
        v15 = *(_QWORD *)v7;
        do
        {
          v16 = *(_DWORD *)(v7 + v14 + 8);
          v14 += 8;
        }
        while (v16 < v15);
        v17 = v7 + v14;
        v18 = a2;
        if (v14 == 8)
        {
          v18 = a2;
          do
          {
            if (v17 >= (unint64_t)v18)
              break;
            v20 = *(v18 - 2);
            v18 -= 2;
          }
          while (v20 >= v15);
        }
        else
        {
          do
          {
            v19 = *(v18 - 2);
            v18 -= 2;
          }
          while (v19 >= v15);
        }
        if (v17 >= (unint64_t)v18)
        {
          v8 = v7 + v14;
        }
        else
        {
          v21 = *v18;
          v8 = v7 + v14;
          v22 = v18;
          do
          {
            *(_DWORD *)v8 = v21;
            *v22 = v16;
            v23 = *(_WORD *)(v8 + 4);
            *(_WORD *)(v8 + 4) = *((_WORD *)v22 + 2);
            *((_WORD *)v22 + 2) = v23;
            do
            {
              v24 = *(_DWORD *)(v8 + 8);
              v8 += 8;
              v16 = v24;
            }
            while (v24 < v15);
            do
            {
              v25 = *(v22 - 2);
              v22 -= 2;
              v21 = v25;
            }
            while (v25 >= v15);
          }
          while (v8 < (unint64_t)v22);
        }
        if (v8 - 8 != v7)
        {
          *(_DWORD *)v7 = *(_DWORD *)(v8 - 8);
          *(_WORD *)(v7 + 4) = *(_WORD *)(v8 - 4);
        }
        *(_DWORD *)(v8 - 8) = v15;
        *(_WORD *)(v8 - 4) = WORD2(v15);
        if (v17 < (unint64_t)v18)
        {
LABEL_32:
          result = (unsigned int *)std::__introsort<std::_ClassicAlgPolicy,gss::FeatureAttributeSet::sort(void)::$_0 &,std::pair<gss::StyleAttribute,unsigned short> *,false>(v7, v8 - 8, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,gss::FeatureAttributeSet::sort(void)::$_0 &,std::pair<gss::StyleAttribute,unsigned short> *>(v7, (unsigned int *)(v8 - 8));
        result = (unsigned int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,gss::FeatureAttributeSet::sort(void)::$_0 &,std::pair<gss::StyleAttribute,unsigned short> *>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v26)
            continue;
          goto LABEL_32;
        }
        a2 = (unsigned int *)(v8 - 8);
        if (!v26)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__function::__func<unsigned long geo::effectiveVertexCount<float>(std::vector<gm::Matrix<float,2,1>> const&)::{lambda(unsigned long)#1},std::allocator<unsigned long geo::effectiveVertexCount<float>(std::vector<gm::Matrix<float,2,1>> const&)::{lambda(unsigned long)#1}>,gm::Matrix<float,2,1> ()(unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D5BF0;
  a2[1] = v2;
  return result;
}

uint64_t std::__split_buffer<std::pair<gss::StyleAttribute,unsigned short>,geo::StdAllocator<std::pair<gss::StyleAttribute,unsigned short>,gss::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 40))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1);
  return a1;
}

void **geo::codec::VectorTile::buildingTileIntersectionInfo(void **this, double a2, double a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  _QWORD *v8;
  _BYTE *v9;
  _QWORD *v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  float v27;
  float v28;
  BOOL v29;
  float v30;
  float v31;
  BOOL v32;
  float v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;

  v8 = geo::codec::VectorTile::_tileBoundsForBuildings((geo::codec::VectorTile *)this, a2, a3, a4, a5, a6, a7);
  if (-13107 * (unsigned __int16)((*((_DWORD *)this + 582) - *((_DWORD *)this + 580)) >> 3))
  {
    v9 = this[307];
    if (v9 == this[308])
    {
      v11 = v8;
      v12 = v8[1] - *v8;
      if (v12)
      {
        v13 = v12 >> 4;
        v14 = (_BYTE *)this[309] - v9;
        if (v14 >= v12 >> 4)
        {
          bzero(this[307], v12 >> 4);
          this[308] = &v9[v13];
        }
        else
        {
          if (v12 < 0)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v15 = 2 * v14;
          if (2 * v14 <= v13)
            v15 = v13;
          if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
            v16 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v16 = v15;
          v17 = (char *)operator new(v16);
          bzero(v17, v13);
          this[307] = v17;
          this[308] = &v17[v13];
          this[309] = &v17[v16];
          if (v9)
            operator delete(v9);
        }
      }
      v18 = v11[1];
      v19 = v18 - *v11;
      if (v18 != *v11)
      {
        v20 = 0;
        v21 = v19 >> 4;
        v22 = (uint64_t *)((char *)this[290] + 16);
        v23 = (float *)(*v11 + 8);
        do
        {
          v25 = *v22;
          v22 += 5;
          v24 = v25;
          if (v25 == 0x1102AA1513BA17CALL || v24 == 0x110205D497D8D032)
          {
            v27 = *v23;
            v28 = 1.0 - v23[1];
            v29 = v28 >= 0.0;
            v31 = *(v23 - 2);
            v30 = *(v23 - 1);
            v32 = v31 >= 0.0;
            if (v31 < 0.0 && v28 < 0.0)
              *((_BYTE *)this[307] + v20) = 1;
            v33 = 1.0 - v30;
            v34 = v28 < 0.0 || v31 >= 0.0;
            if (!v34 && v33 < 1.0)
              *((_BYTE *)this[307] + v20) = 2;
            v35 = v33 < 1.0;
            if (v33 < 1.0)
              v32 = 1;
            if (!v32)
              *((_BYTE *)this[307] + v20) = 3;
            v36 = v31 < 0.0 || v33 < 1.0;
            if (!v36 && v27 < 1.0)
              *((_BYTE *)this[307] + v20) = 4;
            if (v27 < 1.0)
              v35 = 1;
            if (!v35)
              *((_BYTE *)this[307] + v20) = 5;
            v37 = v28 < 0.0 || v27 < 1.0;
            if (!v37 && v33 < 1.0)
              *((_BYTE *)this[307] + v20) = 6;
            if (v27 >= 1.0 && v28 < 0.0)
              *((_BYTE *)this[307] + v20) = 7;
            if (v27 >= 1.0)
              v29 = 1;
            if (v31 >= 0.0 && !v29)
              *((_BYTE *)this[307] + v20) = 8;
            if (v31 >= 0.0 && v27 < 1.0 && v28 >= 0.0 && v33 < 1.0)
              *((_BYTE *)this[307] + v20) = 0;
          }
          ++v20;
          v23 += 4;
        }
        while (v21 > (unsigned __int16)v20);
      }
    }
  }
  return this + 307;
}

_QWORD *geo::codec::VectorTile::_tileBoundsForBuildings(geo::codec::VectorTile *this, double a2, double a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  const float *v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  const float *v40;
  uint64_t v41;
  float *v42;
  float v43;
  _DWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int32 *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int32 *v56;
  uint64_t v57;
  unsigned __int32 v58;
  unint64_t v59;
  unsigned __int32 v60;
  unsigned __int32 v61;
  uint64_t v62;
  float32x4x3_t v63;
  float32x4x3_t v64;

  v7 = (_QWORD *)((char *)this + 2424);
  v8 = *((_QWORD *)this + 303);
  if (v8 == *((_QWORD *)this + 304))
  {
    v62 = *((_QWORD *)this + 289);
    v11 = *((_QWORD *)this + 282);
    v12 = *((_QWORD *)this + 287);
    v13 = (unsigned __int16)(-13107 * ((*((_DWORD *)this + 582) - *((_DWORD *)this + 580)) >> 3));
    if (v13 > (*((_QWORD *)this + 305) - v8) >> 4)
    {
      v14 = 16 * v13;
      v15 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**((_QWORD **)this + 306) + 16))(*((_QWORD *)this + 306), 16 * v13, 4);
      v16 = *((_QWORD *)this + 304);
      v17 = *((_QWORD *)this + 303);
      v18 = v15;
      if (v16 != v17)
      {
        do
        {
          *(_OWORD *)(v18 - 16) = *(_OWORD *)(v16 - 16);
          v18 -= 16;
          v16 -= 16;
        }
        while (v16 != v17);
        v16 = *v7;
      }
      *((_QWORD *)this + 303) = v18;
      *((_QWORD *)this + 304) = v15;
      v19 = *((_QWORD *)this + 305);
      *((_QWORD *)this + 305) = v15 + v14;
      if (v16)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 306) + 40))(*((_QWORD *)this + 306), v16, v19 - v16);
    }
    v20 = *((_QWORD *)this + 290);
    if (-13107 * (unsigned __int16)((*((_DWORD *)this + 582) - v20) >> 3))
    {
      for (i = 0; i < (unsigned __int16)(-13107 * ((*((_DWORD *)this + 582) - v20) >> 3)); ++i)
      {
        v23 = v20 + 40 * i;
        v24 = *(unsigned __int16 *)(v23 + 34);
        if (*(_WORD *)(v23 + 34))
        {
          v25 = 0;
          v26 = v62 + 20 * *(unsigned __int16 *)(v23 + 32);
          a4.i32[0] = 2139095039;
          a5.i32[0] = -8388609;
          a7.i32[0] = -8388609;
          a6.i32[0] = 2139095039;
          do
          {
            v27 = (unsigned int *)(v12 + 8 * *(unsigned int *)(v26 + 20 * v25 + 12));
            v28 = *((unsigned __int16 *)v27 + 2);
            if (*((_WORD *)v27 + 2))
            {
              v29 = *v27;
              if (v28 >= 9)
              {
                v31 = (const float *)(v11 + 12 * v29);
                v32 = v28 & 7;
                if ((v28 & 7) == 0)
                  v32 = 8;
                v33 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a5.f32, 0);
                v30 = v28 - v32;
                v34 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0);
                v35 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0);
                v36 = v30;
                v37 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0);
                a5 = v33;
                a7 = v34;
                v38 = v35;
                v39 = v37;
                do
                {
                  v40 = v31;
                  v31 += 24;
                  v63 = vld3q_f32(v40);
                  v40 += 12;
                  v35 = vminnmq_f32(v63.val[0], v35);
                  v64 = vld3q_f32(v40);
                  v38 = vminnmq_f32(v64.val[0], v38);
                  v34 = vmaxnmq_f32(v34, v63.val[0]);
                  a7 = vmaxnmq_f32(a7, v64.val[0]);
                  v37 = vminnmq_f32(v63.val[1], v37);
                  v39 = vminnmq_f32(v64.val[1], v39);
                  v33 = vmaxnmq_f32(v33, v63.val[1]);
                  a5 = vmaxnmq_f32(a5, v64.val[1]);
                  v36 -= 8;
                }
                while (v36);
                a6 = vminnmq_f32(v37, v39);
                a6.f32[0] = vminnmvq_f32(a6);
                a4 = vminnmq_f32(v35, v38);
                a4.f32[0] = vminnmvq_f32(a4);
                a7.f32[0] = vmaxnmvq_f32(vmaxnmq_f32(v34, a7));
                a5.f32[0] = vmaxnmvq_f32(vmaxnmq_f32(v33, a5));
              }
              else
              {
                v30 = 0;
              }
              v41 = v28 - v30;
              v42 = (float *)(v11 + 4 + 12 * v30 + 12 * v29);
              do
              {
                v43 = *(v42 - 1);
                a4.f32[0] = fminf(v43, a4.f32[0]);
                a7.f32[0] = fmaxf(a7.f32[0], v43);
                a6.f32[0] = fminf(*v42, a6.f32[0]);
                a5.f32[0] = fmaxf(a5.f32[0], *v42);
                v42 += 3;
                --v41;
              }
              while (v41);
            }
            ++v25;
          }
          while (v25 != v24);
        }
        else
        {
          a7.i32[0] = -8388609;
          a6.i32[0] = 2139095039;
          a4.i32[0] = 2139095039;
          a5.i32[0] = -8388609;
        }
        v44 = (_DWORD *)*((_QWORD *)this + 304);
        v45 = *((_QWORD *)this + 305);
        if ((unint64_t)v44 < v45)
        {
          if (v44)
          {
            *v44 = a4.i32[0];
            v44[1] = a6.i32[0];
            v44[2] = a7.i32[0];
            v44[3] = a5.i32[0];
          }
          v22 = v44 + 4;
          goto LABEL_12;
        }
        v46 = v7;
        v47 = *v7;
        v48 = ((uint64_t)v44 - *v7) >> 4;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 60)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v50 = v45 - v47;
        if (v50 >> 3 > v49)
          v49 = v50 >> 3;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
          v49 = 0xFFFFFFFFFFFFFFFLL;
        if (v49)
        {
          v58 = a5.i32[0];
          v59 = a7.i64[0];
          v60 = a4.i32[0];
          v61 = a6.i32[0];
          v51 = 16 * v49;
          v52 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**((_QWORD **)this + 306) + 16))(*((_QWORD *)this + 306), 16 * v49, 4);
          v53 = (unsigned __int32 *)(v52 + 16 * v48);
          v49 = v52 + v51;
          if (v52)
          {
            *v53 = v60;
            v53[1] = v61;
            a4.i32[1] = HIDWORD(v59);
            v53[2] = v59;
            v53[3] = v58;
          }
          v7 = v46;
          v54 = *((_QWORD *)this + 304);
          v55 = *((_QWORD *)this + 303);
          v56 = v53;
          if (v54 == v55)
          {
LABEL_40:
            v22 = v53 + 4;
            *((_QWORD *)this + 303) = v56;
            *((_QWORD *)this + 304) = v53 + 4;
            v57 = *((_QWORD *)this + 305);
            *((_QWORD *)this + 305) = v49;
            if (!v54)
              goto LABEL_12;
            goto LABEL_41;
          }
        }
        else
        {
          v53 = (unsigned __int32 *)(16 * v48);
          v7 = v46;
          v54 = *((_QWORD *)this + 304);
          v55 = *((_QWORD *)this + 303);
          v56 = v53;
          if (v54 == v55)
            goto LABEL_40;
        }
        do
        {
          *((_OWORD *)v56 - 1) = *(_OWORD *)(v54 - 16);
          v56 -= 4;
          v54 -= 16;
        }
        while (v54 != v55);
        v54 = *v7;
        v22 = v53 + 4;
        *((_QWORD *)this + 303) = v56;
        *((_QWORD *)this + 304) = v53 + 4;
        v57 = *((_QWORD *)this + 305);
        *((_QWORD *)this + 305) = v49;
        if (!v54)
          goto LABEL_12;
LABEL_41:
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 306) + 40))(*((_QWORD *)this + 306), v54, v57 - v54);
LABEL_12:
        *((_QWORD *)this + 304) = v22;
        v20 = *((_QWORD *)this + 290);
      }
    }
  }
  return v7;
}

uint64_t md::StyleTexture<md::DaVinciGroundTileData::BuildingColorStyle>::StyleTexture(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  unsigned __int8 v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v17;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (a2)
  {
    v4 = 4 * a2;
    v5 = (char *)operator new(4 * a2);
    *(_QWORD *)a1 = v5;
    v6 = &v5[v4];
    *(_QWORD *)(a1 + 16) = &v5[v4];
    bzero(v5, 4 * a2);
    *(_QWORD *)(a1 + 8) = v6;
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  v8 = &unk_1EE585000;
  if ((v7 & 1) == 0)
  {
    v8 = &unk_1EE585000;
    if (v17)
    {
      md::StyleTexture<md::DaVinciGroundTileData::BuildingColorStyle>::StyleTexture(unsigned long,md::StyleTexture<md::DaVinciGroundTileData::BuildingColorStyle>::PackStyle,BOOL,ggl::Filter)::bytesPerPixel = 4;
      v8 = (_QWORD *)&unk_1EE585000;
    }
  }
  v9 = v8[481];
  v10 = (v9 + 3) / v9;
  v11 = vcvtpd_u64_f64(sqrt((double)(v10 * a2)));
  v12 = v11 > 1;
  v13 = (1 << -(char)__clz(v11 - 1));
  if (!v12)
    v13 = 1;
  v14 = vcvtpd_u64_f64((double)a2 / (double)(v13 / v10));
  v12 = v14 > 1;
  v15 = (1 << -(char)__clz(v14 - 1));
  if (!v12)
    v15 = 1;
  *(_QWORD *)(a1 + 48) = v13;
  *(_QWORD *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 72) = v13 / v10;
  *(_QWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a1 + 64) = v10 * v9;
  *(float *)(a1 + 88) = 1.0 / (float)v13;
  return a1;
}

uint64_t gss::StyleSheet<gss::PropertyID>::decodeStyles(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, _QWORD *a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  NSObject *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  int v27;
  char v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  NSObject *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  char v40;
  int v41;
  int v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  NSObject *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  char v56;
  int v57;
  int v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  unint64_t v62;
  unsigned int v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  NSObject *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  char v72;
  int v73;
  int v74;
  uint64_t v75;
  char v76;
  unsigned int v77;
  unint64_t v78;
  unsigned int v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  NSObject *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  char v88;
  int v89;
  int v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  char v94;
  unint64_t v95;
  unint64_t v96;
  unsigned int v97;
  unint64_t v98;
  NSObject *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v105;
  char v106;
  int v107;
  int v108;
  uint64_t v109;
  int v110;
  gss::Allocator *v111;
  uint64_t v112;
  _WORD *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *p_shared_owners;
  unint64_t v120;
  NSObject *v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  gss::Allocator *v128;
  uint64_t v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  __int128 v139;
  unint64_t v140;
  unint64_t *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  void *v150;
  void *v151;
  std::string::size_type size;
  std::string *v153;
  uint64_t v154;
  int i;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  int v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  int v173;
  unint64_t v174;
  int v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  __int128 v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  int v190;
  uint64_t v191;
  int v192;
  unint64_t v193;
  uint64_t v194;
  unsigned int v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  uint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t v208;
  gss::Allocator **v209;
  uint64_t v210;
  unsigned int v211;
  unsigned int v212;
  __int128 v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  gss::Allocator *v222;
  unint64_t *v223;
  unint64_t v224;
  unint64_t *v225;
  unint64_t v226;
  NSObject *v227;
  _QWORD *v228;
  _QWORD *v229;
  _QWORD *v230;
  NSObject *v231;
  _QWORD *v232;
  _QWORD *v233;
  _QWORD *v234;
  NSObject *v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  NSObject *v239;
  _QWORD *v240;
  _QWORD *v241;
  _QWORD *v242;
  NSObject *v243;
  _QWORD *v244;
  _QWORD *v245;
  _QWORD *v246;
  NSObject *v247;
  _QWORD *v248;
  _QWORD *v249;
  _QWORD *v250;
  NSObject *v251;
  _QWORD *v252;
  _QWORD *v253;
  _QWORD *v254;
  NSObject *v255;
  _QWORD *v256;
  _QWORD *v257;
  _QWORD *v258;
  NSObject *v259;
  _QWORD *v260;
  _QWORD *v261;
  _QWORD *v262;
  NSObject *v263;
  _QWORD *v264;
  _QWORD *v265;
  _QWORD *v266;
  NSObject *v267;
  _QWORD *v268;
  _QWORD *v269;
  _QWORD *v270;
  NSObject *v271;
  _QWORD *v272;
  _QWORD *v273;
  _QWORD *v274;
  NSObject *v275;
  _QWORD *v276;
  _QWORD *v277;
  _QWORD *v278;
  NSObject *v279;
  _QWORD *v280;
  _QWORD *v281;
  _QWORD *v282;
  NSObject *v283;
  _QWORD *v284;
  _QWORD *v285;
  _QWORD *v286;
  NSObject *v287;
  _QWORD *v288;
  _QWORD *v289;
  _QWORD *v290;
  NSObject *v291;
  _QWORD *v292;
  _QWORD *v293;
  _QWORD *v294;
  NSObject *v295;
  _QWORD *v296;
  _QWORD *v297;
  _QWORD *v298;
  NSObject *v299;
  _QWORD *v300;
  _QWORD *v301;
  _QWORD *v302;
  NSObject *v303;
  _QWORD *v304;
  _QWORD *v305;
  _QWORD *v306;
  NSObject *v307;
  _QWORD *v308;
  _QWORD *v309;
  _QWORD *v310;
  NSObject *v311;
  _QWORD *v312;
  _QWORD *v313;
  _QWORD *v314;
  NSObject *v315;
  _QWORD *v316;
  _QWORD *v317;
  _QWORD *v318;
  NSObject *v319;
  _QWORD *v320;
  _QWORD *v321;
  _QWORD *v322;
  int v323;
  unint64_t v324;
  int v325;
  _QWORD *v326;
  int v327;
  gss::Allocator **v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  gss::Allocator *v332;
  __int128 v333;
  unsigned __int8 v334;
  gss::Allocator **v335;
  uint64_t v336;
  __int128 v337;
  __int128 v338;
  char v339[4];
  int v340;
  _QWORD v341[2];
  unsigned int v342;
  __int128 v343;
  __int128 v344;
  std::string v345;
  _BYTE buf[28];
  uint64_t v347;

  v347 = *MEMORY[0x1E0C80C00];
  v9 = gss::StylFile::chapter(a2, 0x15u);
  v10 = v9;
  memset(&v345, 0, sizeof(v345));
  v11 = *((unsigned __int8 *)v9 + 24);
  v12 = v11 + 5;
  v13 = v9[1];
  v14 = v9[2];
  v15 = v14 + ((unint64_t)(v11 + 5) >> 3);
  v16 = (v11 + 5) & 7;
  v17 = v14 + 1;
  if (v15 < v14 + 1)
  {
    if (*((_BYTE *)v9 + 24))
      v18 = v14 + 1;
    else
      v18 = v9[2];
    if (v13 < v18)
      goto LABEL_14;
    if (*((_BYTE *)v9 + 24))
    {
      if (v13 >= v17)
      {
        v19 = (((1 << (8 - v11)) - 1) & *(unsigned __int8 *)(*v9 + v14)) << v11;
        goto LABEL_25;
      }
      goto LABEL_13;
    }
    if (v13 >= v17)
    {
      LOBYTE(v19) = *(_BYTE *)(*v9 + v14);
      goto LABEL_25;
    }
LABEL_13:
    v9[2] = v15;
    *((_BYTE *)v9 + 24) = v16;
LABEL_14:
    GEOGetGeoCSSStyleSheetLog();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 522;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "Could not read number of bits for inheritance list length.";
      _os_log_impl(&dword_19F029000, v21, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v22 = (_QWORD *)std::ostream::operator<<();
    v23 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)" STYL Parse Error Here: ", 24);
    v24 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)"Could not read number of bits for inheritance list length.", 58);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n", 1);
    goto LABEL_137;
  }
  if (v11 <= 3)
    v20 = v14 + 1;
  else
    v20 = v14 + 2;
  if (v13 < v20)
    goto LABEL_13;
  v25 = *v9;
  if (*((_BYTE *)v9 + 24))
  {
    v26 = *(unsigned __int8 *)(v25 + v14);
    if (v17 >= v13)
      v27 = 0;
    else
      v27 = *(unsigned __int8 *)(v25 + v17);
    v19 = ((v27 & (0xFFFF << (8 - v11))) >> (8 - v11)) | ((((1 << (8 - v11)) + 255) & v26) << v11);
    v9[2] = v17;
  }
  else
  {
    LOBYTE(v19) = *(_BYTE *)(v25 + v14);
  }
LABEL_25:
  v9[2] = v15;
  *((_BYTE *)v9 + 24) = v16;
  *(_BYTE *)(a3 + 89) = (v19 >> 3) + 1;
  v28 = v12 & 7;
  v29 = (v12 & 7) + 5;
  v30 = v15 + (v29 >> 3);
  v31 = v29 & 7;
  v32 = v15 + 1;
  if (v30 < v15 + 1)
  {
    if (v16)
      v33 = v15 + 1;
    else
      v33 = v15;
    if (v13 < v33)
      goto LABEL_38;
    if (v16)
    {
      if (v13 >= v32)
      {
        LODWORD(v15) = (((1 << (8 - v16)) - 1) & *(unsigned __int8 *)(*v9 + v15)) << v28;
        goto LABEL_49;
      }
      goto LABEL_37;
    }
    v43 = *v9;
    v9[2] = v15;
    if (v13 >= v32)
    {
      LOBYTE(v15) = *(_BYTE *)(v43 + v15);
      goto LABEL_49;
    }
LABEL_37:
    v9[2] = v30;
    *((_BYTE *)v9 + 24) = v31;
LABEL_38:
    GEOGetGeoCSSStyleSheetLog();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 524;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "Could not read number of bits for zoom style count.";
      _os_log_impl(&dword_19F029000, v35, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v36 = (_QWORD *)std::ostream::operator<<();
    v37 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)" STYL Parse Error Here: ", 24);
    v38 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v37, (uint64_t)"Could not read number of bits for zoom style count.", 51);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v38, (uint64_t)"\n", 1);
    goto LABEL_137;
  }
  if (v16 <= 3)
    v34 = v15 + 1;
  else
    v34 = v15 + 2;
  if (v13 < v34)
    goto LABEL_37;
  v39 = *v9;
  if (v16)
  {
    v40 = 8 - v16;
    v41 = *(unsigned __int8 *)(v39 + v15);
    if (v32 >= v13)
      v42 = 0;
    else
      v42 = *(unsigned __int8 *)(v39 + v32);
    LODWORD(v15) = ((v42 & (0xFFFF << v40)) >> v40) | ((((1 << v40) + 255) & v41) << v28);
    v9[2] = v32;
  }
  else
  {
    LOBYTE(v15) = *(_BYTE *)(v39 + v15);
  }
LABEL_49:
  v9[2] = v30;
  *((_BYTE *)v9 + 24) = v31;
  *(_BYTE *)(a3 + 90) = (v15 >> 3) + 1;
  v44 = v29 & 7;
  v45 = (v29 & 7) + 5;
  v46 = v30 + (v45 >> 3);
  v47 = v45 & 7;
  v48 = v30 + 1;
  if (v46 < v30 + 1)
  {
    if (v31)
      v49 = v30 + 1;
    else
      v49 = v30;
    if (v13 < v49)
      goto LABEL_62;
    if (v31)
    {
      if (v13 >= v48)
      {
        LODWORD(v30) = (((1 << (8 - v31)) - 1) & *(unsigned __int8 *)(*v9 + v30)) << v44;
        goto LABEL_73;
      }
      goto LABEL_61;
    }
    v59 = *v9;
    v9[2] = v30;
    if (v13 >= v48)
    {
      LOBYTE(v30) = *(_BYTE *)(v59 + v30);
      goto LABEL_73;
    }
LABEL_61:
    v9[2] = v46;
    *((_BYTE *)v9 + 24) = v47;
LABEL_62:
    GEOGetGeoCSSStyleSheetLog();
    v51 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 526;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "Could not read number of bits for conditional style count.";
      _os_log_impl(&dword_19F029000, v51, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v52 = (_QWORD *)std::ostream::operator<<();
    v53 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v52, (uint64_t)" STYL Parse Error Here: ", 24);
    v54 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v53, (uint64_t)"Could not read number of bits for conditional style count.", 58);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)"\n", 1);
    goto LABEL_137;
  }
  if (v31 <= 3)
    v50 = v30 + 1;
  else
    v50 = v30 + 2;
  if (v13 < v50)
    goto LABEL_61;
  v55 = *v9;
  if (v31)
  {
    v56 = 8 - v31;
    v57 = *(unsigned __int8 *)(v55 + v30);
    if (v48 >= v13)
      v58 = 0;
    else
      v58 = *(unsigned __int8 *)(v55 + v48);
    LODWORD(v30) = ((v58 & (0xFFFF << v56)) >> v56) | ((((1 << v56) + 255) & v57) << v44);
    v9[2] = v48;
  }
  else
  {
    LOBYTE(v30) = *(_BYTE *)(v55 + v30);
  }
LABEL_73:
  v9[2] = v46;
  *((_BYTE *)v9 + 24) = v47;
  *(_BYTE *)(a3 + 91) = (v30 >> 3) + 1;
  v60 = v45 & 7;
  v61 = (v45 & 7) + 5;
  v62 = v46 + (v61 >> 3);
  v63 = v61 & 7;
  v64 = v46 + 1;
  if (v62 < v46 + 1)
  {
    if (v47)
      v65 = v46 + 1;
    else
      v65 = v46;
    if (v13 < v65)
      goto LABEL_86;
    if (v47)
    {
      if (v13 >= v64)
      {
        LODWORD(v46) = (((1 << (8 - v47)) - 1) & *(unsigned __int8 *)(*v9 + v46)) << v60;
        goto LABEL_97;
      }
      goto LABEL_85;
    }
    v75 = *v9;
    v9[2] = v46;
    if (v13 >= v64)
    {
      LOBYTE(v46) = *(_BYTE *)(v75 + v46);
      goto LABEL_97;
    }
LABEL_85:
    v9[2] = v62;
    *((_BYTE *)v9 + 24) = v63;
LABEL_86:
    GEOGetGeoCSSStyleSheetLog();
    v67 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 528;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "Could not read number of bits for condition count.";
      _os_log_impl(&dword_19F029000, v67, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v68 = (_QWORD *)std::ostream::operator<<();
    v69 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v68, (uint64_t)" STYL Parse Error Here: ", 24);
    v70 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v69, (uint64_t)"Could not read number of bits for condition count.", 50);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v70, (uint64_t)"\n", 1);
    goto LABEL_137;
  }
  if (v47 <= 3)
    v66 = v46 + 1;
  else
    v66 = v46 + 2;
  if (v13 < v66)
    goto LABEL_85;
  v71 = *v9;
  if (v47)
  {
    v72 = 8 - v47;
    v73 = *(unsigned __int8 *)(v71 + v46);
    if (v64 >= v13)
      v74 = 0;
    else
      v74 = *(unsigned __int8 *)(v71 + v64);
    LODWORD(v46) = ((v74 & (0xFFFF << v72)) >> v72) | ((((1 << v72) + 255) & v73) << v60);
    v9[2] = v64;
  }
  else
  {
    LOBYTE(v46) = *(_BYTE *)(v71 + v46);
  }
LABEL_97:
  v9[2] = v62;
  *((_BYTE *)v9 + 24) = v63;
  *(_BYTE *)(a3 + 92) = (v46 >> 3) + 1;
  v76 = v61 & 7;
  v77 = (v61 & 7) + 5;
  v78 = v62 + (v77 >> 3);
  v79 = v77 & 7;
  v80 = v62 + 1;
  if (v78 < v62 + 1)
  {
    if (v63)
      v81 = v62 + 1;
    else
      v81 = v62;
    if (v13 < v81)
      goto LABEL_110;
    if (v63)
    {
      if (v13 >= v80)
      {
        LODWORD(v62) = (((1 << (8 - v63)) - 1) & *(unsigned __int8 *)(*v9 + v62)) << v76;
        goto LABEL_121;
      }
      goto LABEL_109;
    }
    v91 = *v9;
    v9[2] = v62;
    if (v13 >= v80)
    {
      LOBYTE(v62) = *(_BYTE *)(v91 + v62);
      goto LABEL_121;
    }
LABEL_109:
    v9[2] = v78;
    *((_BYTE *)v9 + 24) = v79;
LABEL_110:
    GEOGetGeoCSSStyleSheetLog();
    v83 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 530;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "Could not read number of bits for condition attribute count.";
      _os_log_impl(&dword_19F029000, v83, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v84 = (_QWORD *)std::ostream::operator<<();
    v85 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v84, (uint64_t)" STYL Parse Error Here: ", 24);
    v86 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v85, (uint64_t)"Could not read number of bits for condition attribute count.", 60);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v86, (uint64_t)"\n", 1);
    goto LABEL_137;
  }
  if (v63 <= 3)
    v82 = v62 + 1;
  else
    v82 = v62 + 2;
  if (v13 < v82)
    goto LABEL_109;
  v87 = *v9;
  if (v63)
  {
    v88 = 8 - v63;
    v89 = *(unsigned __int8 *)(v87 + v62);
    if (v80 >= v13)
      v90 = 0;
    else
      v90 = *(unsigned __int8 *)(v87 + v80);
    LODWORD(v62) = ((v90 & (0xFFFF << v88)) >> v88) | ((((1 << v88) + 255) & v89) << v76);
    v9[2] = v80;
  }
  else
  {
    LOBYTE(v62) = *(_BYTE *)(v87 + v62);
  }
LABEL_121:
  v9[2] = v78;
  *((_BYTE *)v9 + 24) = v79;
  *(_BYTE *)(a3 + 93) = (v62 >> 3) + 1;
  v92 = v77 & 7;
  v93 = v78 + ((v92 + 5) >> 3);
  v94 = (v92 + 5) & 7;
  v95 = v78 + 1;
  if (v93 < v78 + 1)
  {
    if (v79)
      v96 = v78 + 1;
    else
      v96 = v78;
    if (v13 < v96)
      goto LABEL_134;
    if (v79)
    {
      if (v13 >= v95)
      {
        v97 = (((1 << (8 - v79)) - 1) & *(unsigned __int8 *)(*v9 + v78)) << v92;
        goto LABEL_149;
      }
      goto LABEL_133;
    }
    v109 = *v9;
    v9[2] = v78;
    if (v13 >= v95)
    {
      LOBYTE(v97) = *(_BYTE *)(v109 + v78);
      goto LABEL_149;
    }
LABEL_133:
    v9[2] = v93;
    *((_BYTE *)v9 + 24) = v94;
LABEL_134:
    GEOGetGeoCSSStyleSheetLog();
    v99 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 532;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "Could not read number of bits for style count.";
      _os_log_impl(&dword_19F029000, v99, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v100 = (_QWORD *)std::ostream::operator<<();
    v101 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)" STYL Parse Error Here: ", 24);
    v102 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v101, (uint64_t)"Could not read number of bits for style count.", 46);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v102, (uint64_t)"\n", 1);
    goto LABEL_137;
  }
  if (v79 <= 3)
    v98 = v78 + 1;
  else
    v98 = v78 + 2;
  if (v13 < v98)
    goto LABEL_133;
  v105 = *v9;
  if (v79)
  {
    v106 = 8 - v79;
    v107 = *(unsigned __int8 *)(v105 + v78);
    if (v95 >= v13)
      v108 = 0;
    else
      v108 = *(unsigned __int8 *)(v105 + v95);
    v97 = ((v108 & (0xFFFF << v106)) >> v106) | ((((1 << v106) + 255) & v107) << v92);
    v9[2] = v95;
  }
  else
  {
    LOBYTE(v97) = *(_BYTE *)(v105 + v78);
  }
LABEL_149:
  v110 = v97 >> 3;
  v9[2] = v93;
  *((_BYTE *)v9 + 24) = v94;
  *(_BYTE *)(a3 + 94) = v110 + 1;
  v111 = (gss::Allocator *)geo::ibitstream::readUIntBits(&v344, v9, v110 + 1);
  if (!(_BYTE)v344)
  {
    GEOGetGeoCSSStyleSheetLog();
    v121 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 535;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "Could not read number of styles.";
      _os_log_impl(&dword_19F029000, v121, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    v122 = (_QWORD *)std::ostream::operator<<();
    v123 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v122, (uint64_t)" STYL Parse Error Here: ", 24);
    v124 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v123, (uint64_t)"Could not read number of styles.", 32);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v124, (uint64_t)"\n", 1);
    goto LABEL_137;
  }
  v112 = DWORD1(v344);
  v336 = DWORD1(v344);
  if (*(_BYTE *)(a1 + 76))
    goto LABEL_184;
  v113 = (_WORD *)(a1 + 72);
  v114 = *(unsigned __int16 *)(a1 + 72);
  if (v114 > DWORD1(v344))
  {
    v115 = *(_QWORD *)(a1 + 64);
    v116 = v115 + 16 * DWORD1(v344);
    v117 = v115 + 16 * v114;
    do
    {
      v118 = *(std::__shared_weak_count **)(v116 + 8);
      if (v118)
      {
        p_shared_owners = (unint64_t *)&v118->__shared_owners_;
        do
          v120 = __ldaxr(p_shared_owners);
        while (__stlxr(v120 - 1, p_shared_owners));
        if (!v120)
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
      }
      v116 += 16;
    }
    while (v116 != v117);
LABEL_183:
    LODWORD(v112) = v336;
    *v113 = v336;
    goto LABEL_184;
  }
  if (v114 < DWORD1(v344))
  {
    if (DWORD1(v344) > *(unsigned __int16 *)(a1 + 74))
    {
      v125 = gss::Allocator::instance(v111);
      v111 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v125 + 16))(v125, 16 * v112, 8);
      v332 = v111;
      v126 = *(_QWORD *)(a1 + 64);
      v114 = *(unsigned __int16 *)(a1 + 72);
      if (v126)
      {
        if (*(_WORD *)(a1 + 72))
        {
          v127 = *(unsigned __int16 *)(a1 + 72);
          v128 = v111;
          do
          {
            *(_OWORD *)v128 = *(_OWORD *)v126;
            v128 = (gss::Allocator *)((char *)v128 + 16);
            *(_QWORD *)v126 = 0;
            *(_QWORD *)(v126 + 8) = 0;
            v126 += 16;
            --v127;
          }
          while ((_WORD)v127);
        }
        if (!*(_BYTE *)(a1 + 76))
        {
          v129 = *(_QWORD *)(a1 + 64);
          if (v129)
          {
            if (*v113)
            {
              v130 = v129 + 16 * (unsigned __int16)*v113;
              v330 = v130;
              do
              {
                v131 = *(std::__shared_weak_count **)(v129 + 8);
                if (v131)
                {
                  v132 = (unint64_t *)&v131->__shared_owners_;
                  do
                    v133 = __ldaxr(v132);
                  while (__stlxr(v133 - 1, v132));
                  if (!v133)
                  {
                    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                    std::__shared_weak_count::__release_weak(v131);
                    v130 = v330;
                  }
                }
                v129 += 16;
              }
              while (v129 != v130);
            }
            v134 = gss::Allocator::instance(v111);
            v111 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v134 + 40))(v134, *(_QWORD *)(a1 + 64), 16 * *(unsigned __int16 *)(a1 + 74));
          }
        }
        *(_DWORD *)v113 = 0;
        *(_BYTE *)(a1 + 76) = 0;
        *v113 = v114;
      }
      v112 = v336;
      *(_WORD *)(a1 + 74) = v336;
      *(_QWORD *)(a1 + 64) = v332;
    }
    if (v114 != v112)
      bzero((void *)(*(_QWORD *)(a1 + 64) + 16 * v114), 16 * v336 - 16 * v114);
    goto LABEL_183;
  }
LABEL_184:
  if (!(_DWORD)v112)
  {
LABEL_319:
    if (*(_WORD *)(a1 + 72))
    {
      v219 = *(_QWORD *)(a1 + 64);
      v220 = v219 + 16 * *(unsigned __int16 *)(a1 + 72);
      do
      {
        v222 = *(gss::Allocator **)v219;
        v221 = *(std::__shared_weak_count **)(v219 + 8);
        *(_QWORD *)buf = *(_QWORD *)v219;
        *(_QWORD *)&buf[8] = v221;
        if (v221)
        {
          v223 = (unint64_t *)&v221->__shared_owners_;
          do
            v224 = __ldxr(v223);
          while (__stxr(v224 + 1, v223));
        }
        gss::CartoStyle<gss::PropertyID>::initConditionalStyleList(v222, a1);
        gss::CartoStyle<gss::PropertyID>::internOnDecode((uint64_t)v222, a1 + 232);
        if (v221)
        {
          v225 = (unint64_t *)&v221->__shared_owners_;
          do
            v226 = __ldaxr(v225);
          while (__stlxr(v226 - 1, v225));
          if (!v226)
          {
            ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
            std::__shared_weak_count::__release_weak(v221);
          }
        }
        v219 += 16;
        v103 = 1;
      }
      while (v219 != v220);
    }
    else
    {
      v103 = 1;
    }
    goto LABEL_138;
  }
  v331 = 0;
  v327 = 0;
  while (1)
  {
    v135 = gss::Allocator::instance(v111);
    v136 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v135 + 16))(v135, 160, 8);
    v137 = (std::__shared_weak_count *)v136;
    *(_QWORD *)(v136 + 8) = 0;
    v138 = (unint64_t *)(v136 + 8);
    *(_QWORD *)v136 = &off_1E42E5928;
    *(_QWORD *)(v136 + 32) = &off_1E42C2880;
    *(_QWORD *)(v136 + 16) = 0;
    *(_QWORD *)(v136 + 24) = v135;
    *(_QWORD *)(v136 + 48) = 0;
    *(_QWORD *)(v136 + 56) = 0;
    *(_QWORD *)(v136 + 40) = 0;
    *(_QWORD *)(v136 + 61) = 0;
    *(_QWORD *)(v136 + 72) = 0;
    *(_QWORD *)(v136 + 77) = 0;
    *(_QWORD *)(v136 + 88) = 0;
    *(_QWORD *)(v136 + 93) = 0;
    *(_OWORD *)(v136 + 120) = 0u;
    *(_OWORD *)(v136 + 104) = 0u;
    *(_QWORD *)(v136 + 136) = 0;
    *(_DWORD *)(v136 + 152) = 0;
    atomic_store(0, (unsigned __int8 *)(v136 + 154));
    *(_QWORD *)&v139 = v136 + 32;
    *((_QWORD *)&v139 + 1) = v136;
    do
      v140 = __ldxr(v138);
    while (__stxr(v140 + 1, v138));
    v141 = (unint64_t *)(v136 + 16);
    v142 = v336;
    do
      v143 = __ldxr(v141);
    while (__stxr(v143 + 1, v141));
    *(_QWORD *)(v136 + 40) = v136 + 32;
    *(_QWORD *)(v136 + 48) = v136;
    do
      v144 = __ldaxr(v138);
    while (__stlxr(v144 - 1, v138));
    if (!v144)
    {
      v333 = v139;
      (*(void (**)(uint64_t))(*(_QWORD *)v136 + 16))(v136);
      std::__shared_weak_count::__release_weak(v137);
      v139 = v333;
    }
    v145 = *(_QWORD *)(a1 + 64) + 16 * v331;
    v146 = *(std::__shared_weak_count **)(v145 + 8);
    *(_OWORD *)v145 = v139;
    if (v146)
    {
      v147 = (unint64_t *)&v146->__shared_owners_;
      do
        v148 = __ldaxr(v147);
      while (__stlxr(v148 - 1, v147));
      if (!v148)
      {
        ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
        std::__shared_weak_count::__release_weak(v146);
      }
    }
    v149 = *(_QWORD *)(a1 + 64) + 16 * v331;
    if (*(_BYTE *)(a3 + 12))
    {
      if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
      {
        *v345.__r_.__value_.__l.__data_ = 0;
        v345.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v345.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&v345.__r_.__value_.__s + 23) = 0;
      }
      if ((geo::ibitstream::readString(v10, &v345) & 1) == 0)
      {
        GEOGetGeoCSSStyleSheetLog();
        v263 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v263, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 543;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = "Could not read style name.";
          _os_log_impl(&dword_19F029000, v263, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }

        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
        v264 = (_QWORD *)std::ostream::operator<<();
        v265 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v264, (uint64_t)" STYL Parse Error Here: ", 24);
        v266 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v265, (uint64_t)"Could not read style name.", 26);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v266, (uint64_t)"\n", 1);
        goto LABEL_137;
      }
      if (a4)
      {
        v150 = (void *)operator new[]();
        v151 = v150;
        size = HIBYTE(v345.__r_.__value_.__r.__words[2]);
        if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v153 = &v345;
        else
          v153 = (std::string *)v345.__r_.__value_.__r.__words[0];
        if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v345.__r_.__value_.__l.__size_;
        memcpy(v150, v153, size + 1);
        v154 = *(_QWORD *)(*(_QWORD *)v149 + 104);
        *(_QWORD *)(*(_QWORD *)v149 + 104) = v151;
        if (v154)
          MEMORY[0x1A1AF4DE8](v154, 0x1000C8077774924);
      }
    }
    geo::ibitstream::readVarInt((uint64_t)&v344, v10);
    if (!(_BYTE)v344)
    {
      GEOGetGeoCSSStyleSheetLog();
      v255 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v255, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 552;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "Could not read style score.";
        _os_log_impl(&dword_19F029000, v255, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v256 = (_QWORD *)std::ostream::operator<<();
      v257 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v256, (uint64_t)" STYL Parse Error Here: ", 24);
      v258 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v257, (uint64_t)"Could not read style score.", 27);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v258, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    *(_QWORD *)(*(_QWORD *)v149 + 112) = *((_QWORD *)&v344 + 1);
    geo::ibitstream::readUIntBits(&v344, v10, *(unsigned __int8 *)(a3 + 89));
    if (!(_BYTE)v344)
    {
      GEOGetGeoCSSStyleSheetLog();
      v259 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v259, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 556;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "Could not read number of inheritted styles.";
        _os_log_impl(&dword_19F029000, v259, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v260 = (_QWORD *)std::ostream::operator<<();
      v261 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v260, (uint64_t)" STYL Parse Error Here: ", 24);
      v262 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v261, (uint64_t)"Could not read number of inheritted styles.", 43);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v262, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    for (i = DWORD1(v344); i; --i)
    {
      geo::ibitstream::readUIntBits(&v344, v10, *(unsigned __int8 *)(a3 + 94));
      if (!(_BYTE)v344)
      {
        GEOGetGeoCSSStyleSheetLog();
        v227 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v227, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 559;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = "Could not read inherited style index.";
          _os_log_impl(&dword_19F029000, v227, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }

        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
        v228 = (_QWORD *)std::ostream::operator<<();
        v229 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v228, (uint64_t)" STYL Parse Error Here: ", 24);
        v230 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v229, (uint64_t)"Could not read inherited style index.", 37);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v230, (uint64_t)"\n", 1);
        goto LABEL_137;
      }
      if (DWORD1(v344) >= v336)
      {
        GEOGetGeoCSSStyleSheetLog();
        v231 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v231, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 560;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = "Inherited style index out of bounds.";
          _os_log_impl(&dword_19F029000, v231, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }

        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
        v232 = (_QWORD *)std::ostream::operator<<();
        v233 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v232, (uint64_t)" STYL Parse Error Here: ", 24);
        v234 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v233, (uint64_t)"Inherited style index out of bounds.", 36);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v234, (uint64_t)"\n", 1);
        goto LABEL_137;
      }
      v156 = *(_QWORD *)v149;
      *(_DWORD *)buf = DWORD1(v344);
      geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::push_back(v156 + 24, buf);
    }
    geo::ibitstream::readUIntBits(&v344, v10, *(unsigned __int8 *)(a3 + 88));
    if (!(_BYTE)v344)
    {
      GEOGetGeoCSSStyleSheetLog();
      v267 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v267, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 565;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "Could not read property set index.";
        _os_log_impl(&dword_19F029000, v267, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v268 = (_QWORD *)std::ostream::operator<<();
      v269 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v268, (uint64_t)" STYL Parse Error Here: ", 24);
      v270 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v269, (uint64_t)"Could not read property set index.", 34);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v270, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    if (DWORD1(v344) >= *(unsigned __int16 *)(a1 + 152))
    {
      GEOGetGeoCSSStyleSheetLog();
      v271 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v271, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 566;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "Property set index out of bounds.";
        _os_log_impl(&dword_19F029000, v271, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v272 = (_QWORD *)std::ostream::operator<<();
      v273 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v272, (uint64_t)" STYL Parse Error Here: ", 24);
      v274 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v273, (uint64_t)"Property set index out of bounds.", 33);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v274, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    v157 = *(_QWORD *)v149;
    v158 = *(_OWORD *)(*(_QWORD *)(a1 + 144) + 16 * DWORD1(v344));
    v343 = v158;
    v159 = *((_QWORD *)&v158 + 1);
    if (*((_QWORD *)&v158 + 1))
    {
      v160 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
      do
        v161 = __ldxr(v160);
      while (__stxr(v161 + 1, v160));
      v159 = *((_QWORD *)&v343 + 1);
    }
    gss::CartoStyle<gss::PropertyID>::setPropertySet(v157, v158, v159);
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v343);
    geo::ibitstream::readUIntBits(&v344, v10, *(unsigned __int8 *)(a3 + 90));
    if (!(_BYTE)v344)
    {
      GEOGetGeoCSSStyleSheetLog();
      v275 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v275, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 570;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "Could not read number of zoom styles.";
        _os_log_impl(&dword_19F029000, v275, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v276 = (_QWORD *)std::ostream::operator<<();
      v277 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v276, (uint64_t)" STYL Parse Error Here: ", 24);
      v278 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v277, (uint64_t)"Could not read number of zoom styles.", 37);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    v162 = DWORD1(v344);
    v328 = (gss::Allocator **)(*(_QWORD *)v149 + 40);
    geo::intern_vector<gss::ZoomStyle<gss::PropertyID>,geo::StdAllocator<gss::ZoomStyle<gss::PropertyID>,gss::Allocator>>::resize(v328, DWORD1(v344));
    v326 = (_QWORD *)v149;
    if ((_DWORD)v162)
      break;
LABEL_273:
    v111 = (gss::Allocator *)geo::ibitstream::readUIntBits(&v344, v10, *(unsigned __int8 *)(a3 + 91));
    if (!(_BYTE)v344)
    {
      GEOGetGeoCSSStyleSheetLog();
      v303 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v303, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 585;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "Could not read number of conditional styles.";
        _os_log_impl(&dword_19F029000, v303, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v304 = (_QWORD *)std::ostream::operator<<();
      v305 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v304, (uint64_t)" STYL Parse Error Here: ", 24);
      v306 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v305, (uint64_t)"Could not read number of conditional styles.", 44);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v306, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    v190 = DWORD1(v344);
    v191 = *v326;
    v335 = (gss::Allocator **)(*v326 + 56);
    if (!WORD3(v344) && !*(_BYTE *)(v191 + 68) && DWORD1(v344) > *(unsigned __int16 *)(v191 + 66))
    {
      geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::reallocate(v335, DWORD1(v344));
LABEL_279:
      v323 = v190;
      v192 = 0;
      v329 = v191;
      while (1)
      {
        geo::ibitstream::readUIntBits(&v344, v10, *(unsigned __int8 *)(a3 + 92));
        if (!(_BYTE)v344)
          break;
        v325 = v192;
        v193 = DWORD1(v344);
        *(_QWORD *)((char *)&v344 + 5) = 0;
        *(_QWORD *)&v344 = 0;
        geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::resize((gss::Allocator *)&v344, v193);
        geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::intern<geo::StdAllocator<gss::StyleCondition,gss::Allocator>>((gss::Allocator *)&v344, a1 + 448);
        if ((_DWORD)v193)
        {
          v194 = 0;
          v324 = v193;
          while (1)
          {
            v342 = 0;
            if (!gss::decodeAttributeEncoding(v10, &v342, *(_BYTE *)(a3 + 13), *(_BYTE *)(a3 + 14), a5))
            {
              GEOGetGeoCSSStyleSheetLog();
              v279 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v279, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 596;
                *(_WORD *)&buf[18] = 2082;
                *(_QWORD *)&buf[20] = "Could not decode attribute.";
                _os_log_impl(&dword_19F029000, v279, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
              }

              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
              v280 = (_QWORD *)std::ostream::operator<<();
              v281 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v280, (uint64_t)" STYL Parse Error Here: ", 24);
              v282 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v281, (uint64_t)"Could not decode attribute.", 27);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v282, (uint64_t)"\n", 1);
              goto LABEL_340;
            }
            v195 = *(unsigned __int8 *)std::map<unsigned int,unsigned char,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,unsigned char>,gss::Allocator>>::operator[]((uint64_t **)(a3 + 16), &v342);
            geo::ibitstream::readUIntBits(v341, v10, *(unsigned __int8 *)(a3 + 93));
            if (!LOBYTE(v341[0]))
            {
              GEOGetGeoCSSStyleSheetLog();
              v283 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v283, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 599;
                *(_WORD *)&buf[18] = 2082;
                *(_QWORD *)&buf[20] = "Could not read number of attribute values for condition.";
                _os_log_impl(&dword_19F029000, v283, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
              }

              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
              v284 = (_QWORD *)std::ostream::operator<<();
              v285 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v284, (uint64_t)" STYL Parse Error Here: ", 24);
              v286 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v285, (uint64_t)"Could not read number of attribute values for condition.", 56);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v286, (uint64_t)"\n", 1);
              goto LABEL_340;
            }
            v196 = HIDWORD(v341[0]);
            memset(v341, 0, 13);
            geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::resize((gss::Allocator *)v341, v196);
            geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::intern<geo::StdAllocator<unsigned int,gss::Allocator>>((uint64_t)v341, a1 + 416);
            if ((_DWORD)v196)
              break;
            v199 = (int *)v341[0];
LABEL_291:
            *(_DWORD *)buf = v342;
            *(_QWORD *)&buf[8] = 0;
            *(_QWORD *)&buf[13] = 0;
            if (BYTE4(v341[1]))
            {
              *(_QWORD *)&buf[8] = v199;
              *(_DWORD *)&buf[16] = v341[1];
              buf[20] = 1;
            }
            else
            {
              geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::append<unsigned int *>((uint64_t)&buf[8], v199, (char *)&v199[LOWORD(v341[1])]);
            }
            gss::StyleCondition::operator=(v344 + 24 * v194, (uint64_t)buf);
            gss::StyleCondition::~StyleCondition((gss::StyleCondition *)buf);
            geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::~intern_vector(v341);
            if (++v194 == v193)
              goto LABEL_295;
          }
          v197 = 0;
          v198 = 4 * v196;
          while (1)
          {
            geo::ibitstream::readUIntBits(v339, v10, v195);
            if (!v339[0])
              break;
            v199 = (int *)v341[0];
            *(_DWORD *)(v341[0] + v197) = v340;
            v197 += 4;
            if (v198 == v197)
            {
              v193 = v324;
              goto LABEL_291;
            }
          }
          GEOGetGeoCSSStyleSheetLog();
          v235 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v235, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 605;
            *(_WORD *)&buf[18] = 2082;
            *(_QWORD *)&buf[20] = "Could not read value for condition attribute.";
            _os_log_impl(&dword_19F029000, v235, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }

          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
          v236 = (_QWORD *)std::ostream::operator<<();
          v237 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v236, (uint64_t)" STYL Parse Error Here: ", 24);
          v238 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v237, (uint64_t)"Could not read value for condition attribute.", 45);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v238, (uint64_t)"\n", 1);
          geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::~intern_vector(v341);
          goto LABEL_340;
        }
LABEL_295:
        gss::make_shared<gss::ConditionalStyle<gss::PropertyID>,geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>>((gss::Allocator *)buf, (uint64_t *)&v344);
        geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::emplace_back<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>>((uint64_t)v335, (__n128 *)buf);
        std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        v200 = *(_QWORD *)(v329 + 56);
        v201 = *(unsigned __int16 *)(v329 + 64);
        geo::ibitstream::readUIntBits(v341, v10, *(unsigned __int8 *)(a3 + 88));
        if (!LOBYTE(v341[0]))
        {
          GEOGetGeoCSSStyleSheetLog();
          v311 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v311, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 613;
            *(_WORD *)&buf[18] = 2082;
            *(_QWORD *)&buf[20] = "Could not read conditional style property set index.";
            _os_log_impl(&dword_19F029000, v311, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }

          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
          v312 = (_QWORD *)std::ostream::operator<<();
          v313 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v312, (uint64_t)" STYL Parse Error Here: ", 24);
          v314 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v313, (uint64_t)"Could not read conditional style property set index.", 52);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v314, (uint64_t)"\n", 1);
          goto LABEL_340;
        }
        if (HIDWORD(v341[0]) >= *(unsigned __int16 *)(a1 + 152))
        {
          GEOGetGeoCSSStyleSheetLog();
          v315 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v315, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 614;
            *(_WORD *)&buf[18] = 2082;
            *(_QWORD *)&buf[20] = "Conditional style property set index out of bounds.";
            _os_log_impl(&dword_19F029000, v315, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }

          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
          v316 = (_QWORD *)std::ostream::operator<<();
          v317 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v316, (uint64_t)" STYL Parse Error Here: ", 24);
          v318 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v317, (uint64_t)"Conditional style property set index out of bounds.", 51);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v318, (uint64_t)"\n", 1);
          goto LABEL_340;
        }
        v202 = v200 + 16 * v201;
        v203 = *(_QWORD *)(v202 - 16);
        v204 = *(_OWORD *)(*(_QWORD *)(a1 + 144) + 16 * HIDWORD(v341[0]));
        v338 = v204;
        v205 = *((_QWORD *)&v204 + 1);
        if (*((_QWORD *)&v204 + 1))
        {
          v206 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
          do
            v207 = __ldxr(v206);
          while (__stxr(v207 + 1, v206));
          v205 = *((_QWORD *)&v338 + 1);
        }
        gss::CartoStyle<gss::PropertyID>::setPropertySet(v203, v204, v205);
        std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v338);
        geo::ibitstream::readUIntBits(v341, v10, *(unsigned __int8 *)(a3 + 90));
        if (!LOBYTE(v341[0]))
        {
          GEOGetGeoCSSStyleSheetLog();
          v319 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v319, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 617;
            *(_WORD *)&buf[18] = 2082;
            *(_QWORD *)&buf[20] = "Could not read conditional style's zoom style count.";
            _os_log_impl(&dword_19F029000, v319, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }

          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
          v320 = (_QWORD *)std::ostream::operator<<();
          v321 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v320, (uint64_t)" STYL Parse Error Here: ", 24);
          v322 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v321, (uint64_t)"Could not read conditional style's zoom style count.", 52);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v322, (uint64_t)"\n", 1);
LABEL_340:
          geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::~intern_vector((uint64_t)&v344);
          goto LABEL_137;
        }
        v208 = HIDWORD(v341[0]);
        v209 = (gss::Allocator **)(*(_QWORD *)(v202 - 16) + 40);
        geo::intern_vector<gss::ZoomStyle<gss::PropertyID>,geo::StdAllocator<gss::ZoomStyle<gss::PropertyID>,gss::Allocator>>::resize(v209, HIDWORD(v341[0]));
        if ((_DWORD)v208)
        {
          v210 = 0;
          while (1)
          {
            geo::ibitstream::readUIntBits(buf, v10, 8u);
            if (!buf[0])
              break;
            v211 = *(_DWORD *)&buf[4];
            geo::ibitstream::readUIntBits(buf, v10, 8u);
            if (!buf[0])
            {
              GEOGetGeoCSSStyleSheetLog();
              v291 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v291, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 624;
                *(_WORD *)&buf[18] = 2082;
                *(_QWORD *)&buf[20] = "Could not read conditional style's zoom style max zoom.";
                _os_log_impl(&dword_19F029000, v291, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
              }

              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
              v292 = (_QWORD *)std::ostream::operator<<();
              v293 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v292, (uint64_t)" STYL Parse Error Here: ", 24);
              v294 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v293, (uint64_t)"Could not read conditional style's zoom style max zoom.", 55);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v294, (uint64_t)"\n", 1);
              goto LABEL_340;
            }
            v212 = *(_DWORD *)&buf[4];
            geo::ibitstream::readUIntBits(v341, v10, *(unsigned __int8 *)(a3 + 88));
            if (!LOBYTE(v341[0]))
            {
              GEOGetGeoCSSStyleSheetLog();
              v295 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v295, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 625;
                *(_WORD *)&buf[18] = 2082;
                *(_QWORD *)&buf[20] = "Could not read conditional style's zoom style property set index.";
                _os_log_impl(&dword_19F029000, v295, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
              }

              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
              v296 = (_QWORD *)std::ostream::operator<<();
              v297 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v296, (uint64_t)" STYL Parse Error Here: ", 24);
              v298 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v297, (uint64_t)"Could not read conditional style's zoom style property set index.", 65);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v298, (uint64_t)"\n", 1);
              goto LABEL_340;
            }
            if (HIDWORD(v341[0]) >= *(unsigned __int16 *)(a1 + 152))
            {
              GEOGetGeoCSSStyleSheetLog();
              v299 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v299, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 626;
                *(_WORD *)&buf[18] = 2082;
                *(_QWORD *)&buf[20] = "Conditional style's zoom style property set index out of bounds.";
                _os_log_impl(&dword_19F029000, v299, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
              }

              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
              v300 = (_QWORD *)std::ostream::operator<<();
              v301 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v300, (uint64_t)" STYL Parse Error Here: ", 24);
              v302 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v301, (uint64_t)"Conditional style's zoom style property set index out of bounds.", 64);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v302, (uint64_t)"\n", 1);
              goto LABEL_340;
            }
            v213 = *(_OWORD *)(*(_QWORD *)(a1 + 144) + 16 * HIDWORD(v341[0]));
            v337 = v213;
            if (*((_QWORD *)&v213 + 1))
            {
              v214 = (unint64_t *)(*((_QWORD *)&v213 + 1) + 8);
              do
                v215 = __ldxr(v214);
              while (__stxr(v215 + 1, v214));
              *(float *)buf = (float)v211 * 0.125;
              *(float *)&buf[4] = (float)v212 * 0.125;
              *(_QWORD *)&buf[8] = v213;
              *(_QWORD *)&buf[16] = *((_QWORD *)&v337 + 1);
              if (*((_QWORD *)&v337 + 1))
              {
                v216 = (unint64_t *)(*((_QWORD *)&v337 + 1) + 8);
                do
                  v217 = __ldxr(v216);
                while (__stxr(v217 + 1, v216));
              }
            }
            else
            {
              *(float *)buf = (float)v211 * 0.125;
              *(float *)&buf[4] = (float)v212 * 0.125;
              *(_QWORD *)&buf[8] = v213;
              *(_QWORD *)&buf[16] = 0;
            }
            gss::ZoomStyle<gss::PropertyID>::operator=((uint64_t)*v209 + 24 * v210, (uint64_t)buf);
            md::components::Material::~Material((md::components::Material *)buf);
            std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v337);
            if (++v210 == v208)
              goto LABEL_317;
          }
          GEOGetGeoCSSStyleSheetLog();
          v287 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v287, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 623;
            *(_WORD *)&buf[18] = 2082;
            *(_QWORD *)&buf[20] = "Could not read conditional style's zoom style min zoom.";
            _os_log_impl(&dword_19F029000, v287, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }

          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
          v288 = (_QWORD *)std::ostream::operator<<();
          v289 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v288, (uint64_t)" STYL Parse Error Here: ", 24);
          v290 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v289, (uint64_t)"Could not read conditional style's zoom style min zoom.", 55);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v290, (uint64_t)"\n", 1);
          goto LABEL_340;
        }
LABEL_317:
        v218 = *(_QWORD *)(v202 - 16);
        *(_DWORD *)(v218 + 152) = v327;
        *(_DWORD *)(v218 + 156) = v325;
        *(_QWORD *)(v218 + 144) = *v326;
        ++v327;
        v192 = v325 + 1;
        v111 = (gss::Allocator *)geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::~intern_vector((uint64_t)&v344);
        v142 = v336;
        if (v325 + 1 == v323)
          goto LABEL_318;
      }
      GEOGetGeoCSSStyleSheetLog();
      v307 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v307, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 590;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "Could not read number of conditions.";
        _os_log_impl(&dword_19F029000, v307, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v308 = (_QWORD *)std::ostream::operator<<();
      v309 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v308, (uint64_t)" STYL Parse Error Here: ", 24);
      v310 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v309, (uint64_t)"Could not read number of conditions.", 36);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v310, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    if (DWORD1(v344))
      goto LABEL_279;
LABEL_318:
    if (++v331 == v142)
      goto LABEL_319;
  }
  v163 = 0;
  while (1)
  {
    v164 = *((unsigned __int8 *)v10 + 24);
    v165 = v10[1];
    v166 = v10[2];
    v167 = v166 + ((unint64_t)(v164 + 8) >> 3);
    v168 = v164 & 7;
    v169 = v166 + 1;
    if (v167 >= v166 + 1)
      break;
    if (*((_BYTE *)v10 + 24))
      v170 = v166 + 1;
    else
      v170 = v10[2];
    if (v165 < v170)
      goto LABEL_342;
    if (!*((_BYTE *)v10 + 24))
    {
      if (v165 < v169)
        goto LABEL_341;
      v171 = *v10;
LABEL_245:
      LOBYTE(v166) = *(_BYTE *)(v171 + v166);
      goto LABEL_248;
    }
    if (v165 < v169)
      goto LABEL_341;
    v171 = *v10;
    LODWORD(v166) = (((1 << (8 - v164)) - 1) & *(unsigned __int8 *)(*v10 + v166)) << v164;
LABEL_248:
    v10[2] = v167;
    *((_BYTE *)v10 + 24) = v168;
    v174 = v167 + 1;
    if (v165 < v167 + 1)
    {
      v10[2] = v174;
      *((_BYTE *)v10 + 24) = v168;
      GEOGetGeoCSSStyleSheetLog();
      v243 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v243, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 577;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "Could not read zoom style max zoom.";
        _os_log_impl(&dword_19F029000, v243, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v244 = (_QWORD *)std::ostream::operator<<();
      v245 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v244, (uint64_t)" STYL Parse Error Here: ", 24);
      v246 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v245, (uint64_t)"Could not read zoom style max zoom.", 35);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v246, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    v334 = v166;
    if (v168)
    {
      if (v174 >= v165)
        v175 = 0;
      else
        v175 = *(unsigned __int8 *)(v171 + v174);
      v176 = ((v175 & (0xFFFF << (8 - v168))) >> (8 - v168)) | ((((1 << (8 - v168)) + 255) & *(unsigned __int8 *)(v171 + v167)) << v168);
      v10[2] = v174;
    }
    else
    {
      LOBYTE(v176) = *(_BYTE *)(v171 + v167);
    }
    v10[2] = v174;
    *((_BYTE *)v10 + 24) = v168;
    geo::ibitstream::readUIntBits(&v344, v10, *(unsigned __int8 *)(a3 + 88));
    if (!(_BYTE)v344)
    {
      GEOGetGeoCSSStyleSheetLog();
      v247 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v247, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 578;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "Could not read zoom style property set index.";
        _os_log_impl(&dword_19F029000, v247, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v248 = (_QWORD *)std::ostream::operator<<();
      v249 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v248, (uint64_t)" STYL Parse Error Here: ", 24);
      v250 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v249, (uint64_t)"Could not read zoom style property set index.", 45);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v250, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    if (DWORD1(v344) >= *(unsigned __int16 *)(a1 + 152))
    {
      GEOGetGeoCSSStyleSheetLog();
      v251 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v251, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 579;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "Zoom style property set index out of bounds.";
        _os_log_impl(&dword_19F029000, v251, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v252 = (_QWORD *)std::ostream::operator<<();
      v253 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v252, (uint64_t)" STYL Parse Error Here: ", 24);
      v254 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)"Zoom style property set index out of bounds.", 44);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v254, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    v177 = v162;
    v178 = *(_QWORD *)(a1 + 144);
    v179 = *(_OWORD *)(v178 + 16 * DWORD1(v344));
    v180 = *(std::__shared_weak_count **)(v178 + 16 * DWORD1(v344) + 8);
    if (v180)
    {
      v181 = (unint64_t *)&v180->__shared_owners_;
      do
        v182 = __ldxr(v181);
      while (__stxr(v182 + 1, v181));
      do
        v183 = __ldxr(v181);
      while (__stxr(v183 + 1, v181));
    }
    else
    {
      *((_QWORD *)&v179 + 1) = 0;
    }
    v184 = (uint64_t)*v328 + 24 * v163;
    *(float *)v184 = (float)v334 * 0.125;
    *(float *)(v184 + 4) = (float)v176 * 0.125;
    v185 = *(std::__shared_weak_count **)(v184 + 16);
    *(_OWORD *)(v184 + 8) = v179;
    if (v185)
    {
      v186 = (unint64_t *)&v185->__shared_owners_;
      do
        v187 = __ldaxr(v186);
      while (__stlxr(v187 - 1, v186));
      if (!v187)
      {
        ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
        std::__shared_weak_count::__release_weak(v185);
      }
    }
    v142 = v336;
    if (v180)
    {
      v188 = (unint64_t *)&v180->__shared_owners_;
      do
        v189 = __ldaxr(v188);
      while (__stlxr(v189 - 1, v188));
      if (!v189)
      {
        ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
        std::__shared_weak_count::__release_weak(v180);
      }
    }
    ++v163;
    v162 = v177;
    if (v163 == v177)
      goto LABEL_273;
  }
  if (v164 <= 8)
    v172 = v166 + 1;
  else
    v172 = v166 + 2;
  if (v165 >= v172)
  {
    v171 = *v10;
    if (!*((_BYTE *)v10 + 24))
      goto LABEL_245;
    if (v169 >= v165)
      v173 = 0;
    else
      v173 = *(unsigned __int8 *)(v171 + v169);
    LODWORD(v166) = ((v173 & (0xFFFF << (8 - v164))) >> (8 - v164)) | ((((1 << (8 - v164)) + 255) & *(unsigned __int8 *)(v171 + v166)) << v164);
    v10[2] = v169;
    goto LABEL_248;
  }
LABEL_341:
  v10[2] = v167;
  *((_BYTE *)v10 + 24) = v168;
LABEL_342:
  GEOGetGeoCSSStyleSheetLog();
  v239 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v239, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 576;
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = "Could not read zoom style min zoom.";
    _os_log_impl(&dword_19F029000, v239, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
  }

  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
  v240 = (_QWORD *)std::ostream::operator<<();
  v241 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v240, (uint64_t)" STYL Parse Error Here: ", 24);
  v242 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v241, (uint64_t)"Could not read zoom style min zoom.", 35);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v242, (uint64_t)"\n", 1);
LABEL_137:
  v103 = 0;
LABEL_138:
  if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v345.__r_.__value_.__l.__data_);
  return v103;
}

void sub_19F0533B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::~intern_vector((uint64_t)&a36);
  if (*(char *)(v36 - 177) < 0)
    operator delete(*(void **)(v36 - 200));
  _Unwind_Resume(a1);
}

uint64_t gss::CartoStyle<gss::PropertyID>::internOnDecode(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _DWORD *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  if (*(_BYTE *)(result + 121))
    return result;
  v3 = result;
  *(_BYTE *)(result + 121) = 1;
  if (!*(_BYTE *)(result + 36))
  {
    if (!*(_WORD *)(result + 32))
    {
LABEL_20:
      *(_BYTE *)(v3 + 36) = 1;
      goto LABEL_21;
    }
    result = geo::intern_allocator<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::allocate(a2 + 184, *(unsigned __int16 *)(result + 32));
    if (!result)
      goto LABEL_21;
    v4 = result;
    v5 = *(unsigned __int16 *)(v3 + 32);
    v6 = *(_QWORD *)(v3 + 24);
    if (*(_WORD *)(v3 + 32))
    {
      if (v5 < 8)
      {
        v7 = *(unsigned __int16 *)(v3 + 32);
        v8 = (_DWORD *)result;
        v9 = *(int **)(v3 + 24);
        do
        {
LABEL_13:
          v16 = *v9++;
          *v8++ = v16;
          --v7;
        }
        while ((_WORD)v7);
        goto LABEL_14;
      }
      v7 = *(unsigned __int16 *)(v3 + 32);
      v8 = (_DWORD *)result;
      v9 = *(int **)(v3 + 24);
      if ((unint64_t)(result - v6) < 0x20)
        goto LABEL_13;
      v10 = (unsigned __int16)v5 & 0xFFF8;
      v11 = 4 * v10;
      v8 = (_DWORD *)(result + 4 * v10);
      v12 = (__int128 *)(v6 + 16);
      v13 = (_OWORD *)(result + 16);
      v14 = v10;
      do
      {
        v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 8;
      }
      while (v14);
      if (v10 != v5)
      {
        v7 = v5 - v10;
        v9 = (int *)(v6 + v11);
        goto LABEL_13;
      }
    }
LABEL_14:
    if (*(_BYTE *)(v3 + 36))
      v17 = 1;
    else
      v17 = v6 == 0;
    if (!v17)
    {
      v18 = gss::Allocator::instance((gss::Allocator *)result);
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v18 + 40))(v18, *(_QWORD *)(v3 + 24), 4 * *(unsigned __int16 *)(v3 + 34));
    }
    *(_WORD *)(v3 + 32) = v5;
    *(_WORD *)(v3 + 34) = 0;
    *(_QWORD *)(v3 + 24) = v4;
    goto LABEL_20;
  }
LABEL_21:
  v19 = *(unsigned __int16 *)(v3 + 64);
  if (*(_WORD *)(v3 + 64))
  {
    v20 = *(uint64_t **)(v3 + 56);
    v21 = 16 * v19;
    do
    {
      v22 = *v20;
      v20 += 2;
      result = gss::CartoStyle<gss::PropertyID>::internOnDecode(v22, a2);
      v21 -= 16;
    }
    while (v21);
  }
  return result;
}

uint64_t geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::intern<geo::StdAllocator<unsigned int,gss::Allocator>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  _DWORD *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  BOOL v16;
  uint64_t v17;

  if (!*(_BYTE *)(result + 12))
  {
    v2 = result;
    if (!*(_WORD *)(result + 8))
    {
LABEL_19:
      *(_BYTE *)(v2 + 12) = 1;
      return result;
    }
    result = geo::intern_allocator<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::allocate(a2, *(unsigned __int16 *)(result + 8));
    if (!result)
      return result;
    v3 = result;
    v4 = *(unsigned __int16 *)(v2 + 8);
    v5 = *(int **)v2;
    if (*(_WORD *)(v2 + 8))
    {
      if (v4 < 8)
      {
        v6 = *(unsigned __int16 *)(v2 + 8);
        v7 = (_DWORD *)result;
        v8 = *(int **)v2;
        do
        {
LABEL_12:
          v15 = *v8++;
          *v7++ = v15;
          --v6;
        }
        while ((_WORD)v6);
        goto LABEL_13;
      }
      v6 = *(unsigned __int16 *)(v2 + 8);
      v7 = (_DWORD *)result;
      v8 = *(int **)v2;
      if ((unint64_t)(result - (_QWORD)v5) < 0x20)
        goto LABEL_12;
      v9 = (unsigned __int16)v4 & 0xFFF8;
      v10 = v9;
      v7 = (_DWORD *)(result + 4 * v9);
      v11 = (__int128 *)(v5 + 4);
      v12 = (_OWORD *)(result + 16);
      v13 = v9;
      do
      {
        v14 = *v11;
        *(v12 - 1) = *(v11 - 1);
        *v12 = v14;
        v11 += 2;
        v12 += 2;
        v13 -= 8;
      }
      while (v13);
      if (v9 != v4)
      {
        v6 = v4 - v9;
        v8 = &v5[v10];
        goto LABEL_12;
      }
    }
LABEL_13:
    if (*(_BYTE *)(v2 + 12))
      v16 = 1;
    else
      v16 = v5 == 0;
    if (!v16)
    {
      v17 = gss::Allocator::instance((gss::Allocator *)result);
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v17 + 40))(v17, *(_QWORD *)v2, 4 * *(unsigned __int16 *)(v2 + 10));
    }
    *(_WORD *)(v2 + 8) = v4;
    *(_WORD *)(v2 + 10) = 0;
    *(_QWORD *)v2 = v3;
    goto LABEL_19;
  }
  return result;
}

uint64_t geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::push_back(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  uint64_t v20;

  v3 = result;
  v5 = result + 8;
  v4 = *(unsigned __int16 *)(result + 8);
  v6 = v4 != 0xFFFF && *(_BYTE *)(result + 12) == 0;
  if (v6 && v4 >= *(unsigned __int16 *)(result + 10))
  {
    v7 = v4 + 1;
    v8 = gss::Allocator::instance((gss::Allocator *)result);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, 4 * (v4 + 1), 4);
    v9 = result;
    v10 = *(int **)v3;
    v4 = *(unsigned __int16 *)(v3 + 8);
    if (!*(_QWORD *)v3)
    {
LABEL_20:
      *(_WORD *)(v3 + 10) = v7;
      *(_QWORD *)v3 = v9;
      goto LABEL_21;
    }
    if (*(_WORD *)(v3 + 8))
    {
      if (v4 < 8)
      {
        v11 = *(unsigned __int16 *)(v3 + 8);
        v12 = (_DWORD *)result;
      }
      else
      {
        v11 = *(unsigned __int16 *)(v3 + 8);
        v12 = (_DWORD *)result;
        if ((unint64_t)(result - (_QWORD)v10) >= 0x20)
        {
          v13 = (unsigned __int16)v4 & 0xFFF8;
          v14 = 4 * v13;
          v12 = (_DWORD *)(result + 4 * v13);
          v15 = (__int128 *)(v10 + 4);
          v16 = (_OWORD *)(result + 16);
          v17 = v13;
          do
          {
            v18 = *v15;
            *(v16 - 1) = *(v15 - 1);
            *v16 = v18;
            v15 += 2;
            v16 += 2;
            v17 -= 8;
          }
          while (v17);
          if (v13 == v4)
            goto LABEL_17;
          v11 = v4 - v13;
          v10 = (int *)((char *)v10 + v14);
        }
      }
      do
      {
        v19 = *v10++;
        *v12++ = v19;
        --v11;
      }
      while ((_WORD)v11);
    }
LABEL_17:
    if (!*(_BYTE *)(v3 + 12))
    {
      v20 = gss::Allocator::instance((gss::Allocator *)result);
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v20 + 40))(v20, *(_QWORD *)v3, 4 * *(unsigned __int16 *)(v3 + 10));
    }
    *(_BYTE *)(v5 + 4) = 0;
    *(_DWORD *)v5 = 0;
    goto LABEL_20;
  }
LABEL_21:
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v4) = *a2;
  *(_WORD *)(v3 + 8) = v4 + 1;
  return result;
}

uint64_t geo::intern_allocator<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::allocate(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  gss::Allocator *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  gss::Allocator *v22;
  gss::Allocator **v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  gss::Allocator *v32;
  char *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;

  if (*(_DWORD *)(a1 + 24) < a2)
    return 0;
  v5 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v5 || (v6 = *(_QWORD **)(v5 - 8), v7 = v6[1], v8 = a2, v6[2] - v7 < (unint64_t)a2))
  {
    v9 = (gss::Allocator *)operator new();
    v10 = *(unsigned int *)(a1 + 24);
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v10;
    v11 = gss::Allocator::instance(v9);
    *(_QWORD *)v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, 4 * v10, 4);
    v13 = *(char **)(a1 + 8);
    v12 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v13 >= v12)
    {
      v16 = *(char **)a1;
      v17 = (uint64_t)&v13[-*(_QWORD *)a1];
      v18 = v17 >> 3;
      v19 = (v17 >> 3) + 1;
      if (v19 >> 61)
        abort();
      v20 = v12 - (_QWORD)v16;
      if (v20 >> 2 > v19)
        v19 = v20 >> 2;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        if (v21 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v22 = (gss::Allocator *)operator new(8 * v21);
      }
      else
      {
        v22 = 0;
      }
      v23 = (gss::Allocator **)((char *)v22 + 8 * v18);
      v24 = (char *)v22 + 8 * v21;
      *v23 = v9;
      v15 = v23 + 1;
      if (v13 == v16)
      {
        *(_QWORD *)a1 = v23;
        *(_QWORD *)(a1 + 8) = v15;
        *(_QWORD *)(a1 + 16) = v24;
      }
      else
      {
        v25 = v13 - v16 - 8;
        if (v25 <= 0x77
          || &v13[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v23
          && (char *)v22 + v17 - (v25 & 0xFFFFFFFFFFFFFFF8) - 8 < v13)
        {
          goto LABEL_39;
        }
        v26 = (v25 >> 3) + 1;
        v27 = (_OWORD *)((char *)v22 + 8 * v18 - 16);
        v28 = v13 - 32;
        v29 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v31 = *(_OWORD *)v28;
          v30 = *((_OWORD *)v28 + 1);
          *(_OWORD *)v28 = 0uLL;
          *((_OWORD *)v28 + 1) = 0uLL;
          v28 -= 32;
          *(v27 - 1) = v31;
          *v27 = v30;
          v27 -= 2;
          v29 -= 4;
        }
        while (v29);
        v23 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
        if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_39:
          do
          {
            v32 = (gss::Allocator *)*((_QWORD *)v13 - 1);
            v13 -= 8;
            *(_QWORD *)v13 = 0;
            *--v23 = v32;
          }
          while (v13 != v16);
        }
        v13 = *(char **)a1;
        v33 = *(char **)(a1 + 8);
        *(_QWORD *)a1 = v23;
        *(_QWORD *)(a1 + 8) = v15;
        *(_QWORD *)(a1 + 16) = v24;
        while (v33 != v13)
        {
          v35 = (_QWORD *)*((_QWORD *)v33 - 1);
          v33 -= 8;
          v34 = v35;
          *(_QWORD *)v33 = 0;
          if (v35)
          {
            v36 = gss::Allocator::instance(v22);
            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v36 + 40))(v36, *v34, 4 * v34[2]);
            v22 = (gss::Allocator *)MEMORY[0x1A1AF4E00](v34, 0x1010C40113C0ABBLL);
          }
        }
      }
      if (v13)
        operator delete(v13);
      *(_QWORD *)(a1 + 8) = v15;
    }
    else
    {
      *(_QWORD *)v13 = v9;
      v14 = v13 + 8;
      *(_QWORD *)(a1 + 8) = v14;
      v15 = v14;
    }
    v6 = (_QWORD *)*(v15 - 1);
    v7 = v6[1];
    v8 = a2;
  }
  result = *v6 + 4 * v7;
  v6[1] = v7 + v8;
  return result;
}

void sub_19F053BC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<geo::intern_allocator<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::PageInfo,std::default_delete<geo::intern_allocator<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::PageInfo>>::~unique_ptr[abi:nn180100]((gss::Allocator *)va);
  _Unwind_Resume(a1);
}

void sub_19F053BD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x1010C40113C0ABBLL);
  _Unwind_Resume(a1);
}

void geo::intern_vector<gss::ZoomStyle<gss::PropertyID>,geo::StdAllocator<gss::ZoomStyle<gss::PropertyID>,gss::Allocator>>::resize(gss::Allocator **a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  gss::Allocator *v11;
  gss::Allocator *v12;
  gss::Allocator *v13;
  int v14;
  gss::Allocator *v15;
  gss::Allocator *v16;
  gss::Allocator *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  if (!*((_BYTE *)a1 + 12))
  {
    v4 = *((unsigned __int16 *)a1 + 4);
    if (v4 > a2)
    {
      v5 = (uint64_t)*a1 + 24 * a2;
      v6 = (uint64_t)*a1 + 24 * *((unsigned __int16 *)a1 + 4);
      do
      {
        v7 = *(std::__shared_weak_count **)(v5 + 16);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 += 24;
      }
      while (v5 != v6);
      goto LABEL_33;
    }
    if (v4 >= a2)
      return;
    if (*((unsigned __int16 *)a1 + 5) >= a2)
    {
      v12 = *a1;
      if (v4 == a2)
      {
LABEL_33:
        *((_WORD *)a1 + 4) = a2;
        return;
      }
    }
    else
    {
      v10 = gss::Allocator::instance((gss::Allocator *)a1);
      v11 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, 24 * a2, 8);
      v12 = v11;
      v13 = *a1;
      v4 = *((unsigned __int16 *)a1 + 4);
      if (*a1)
      {
        if (*((_WORD *)a1 + 4))
        {
          v14 = *((unsigned __int16 *)a1 + 4);
          v15 = v11;
          do
          {
            *(_QWORD *)v15 = *(_QWORD *)v13;
            *(_OWORD *)((char *)v15 + 8) = *(_OWORD *)((char *)v13 + 8);
            *((_QWORD *)v13 + 1) = 0;
            *((_QWORD *)v13 + 2) = 0;
            --v14;
            v13 = (gss::Allocator *)((char *)v13 + 24);
            v15 = (gss::Allocator *)((char *)v15 + 24);
          }
          while ((_WORD)v14);
        }
        if (!*((_BYTE *)a1 + 12))
        {
          v16 = *a1;
          if (*a1)
          {
            if (*((_WORD *)a1 + 4))
            {
              v17 = (gss::Allocator *)((char *)v16 + 24 * *((unsigned __int16 *)a1 + 4));
              do
              {
                v18 = (std::__shared_weak_count *)*((_QWORD *)v16 + 2);
                if (v18)
                {
                  v19 = (unint64_t *)&v18->__shared_owners_;
                  do
                    v20 = __ldaxr(v19);
                  while (__stlxr(v20 - 1, v19));
                  if (!v20)
                  {
                    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                    std::__shared_weak_count::__release_weak(v18);
                  }
                }
                v16 = (gss::Allocator *)((char *)v16 + 24);
              }
              while (v16 != v17);
            }
            v21 = gss::Allocator::instance(v11);
            (*(void (**)(uint64_t, gss::Allocator *, uint64_t))(*(_QWORD *)v21 + 40))(v21, *a1, 24 * *((unsigned __int16 *)a1 + 5));
          }
        }
        *((_BYTE *)a1 + 12) = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      *((_WORD *)a1 + 5) = a2;
      *a1 = v12;
      if (v4 == a2)
        goto LABEL_33;
    }
    v22 = (_QWORD *)((char *)v12 + 24 * v4);
    v23 = 24 * a2 - 24 * v4;
    do
    {
      *v22 = 0;
      v22[1] = 0;
      v22[2] = 0;
      v22 += 3;
      v23 -= 24;
    }
    while (v23);
    goto LABEL_33;
  }
}

uint64_t geo::ibitstream::readString(uint64_t *a1, std::string *this)
{
  std::string *v2;
  char v4;
  std::string::size_type v5;
  uint64_t v6;
  std::string::size_type v7;
  std::string::size_type v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  std::string::size_type v12;
  std::string::size_type v13;
  uint64_t result;
  std::string::size_type v15;
  std::string::size_type size;
  std::string *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  std::string *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::string::size_type v25;
  std::string::size_type v26;

  v2 = this;
  v4 = *((_BYTE *)a1 + 24);
  v5 = a1[1];
  v6 = a1[2];
  if (!v4)
  {
    if (v5 == v6)
      return 0;
    v13 = 0;
    while (*(_BYTE *)(*a1 + v6 + v13))
    {
      if (v5 - v6 == ++v13)
        return 0;
    }
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      size = this->__r_.__value_.__l.__size_;
      if (size >= v13)
      {
        v17 = (std::string *)this->__r_.__value_.__r.__words[0];
        this->__r_.__value_.__l.__size_ = v13;
        goto LABEL_43;
      }
    }
    else
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if (v13 <= size)
      {
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v13 & 0x7F;
        v17 = this;
LABEL_43:
        v17->__r_.__value_.__s.__data_[v13] = 0;
        goto LABEL_44;
      }
    }
    std::string::append(this, v13 - size, 0);
LABEL_44:
    std::string::__assign_external(v2, (const std::string::value_type *)(*a1 + a1[2]), v13);
    v26 = v13 + a1[2];
    goto LABEL_45;
  }
  v7 = v5 + ~v6;
  if (!v7)
  {
LABEL_9:
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      v12 = this->__r_.__value_.__l.__size_;
      if (v12 >= v7)
      {
        this->__r_.__value_.__l.__size_ = v7;
        v2 = (std::string *)this->__r_.__value_.__r.__words[0];
        goto LABEL_27;
      }
    }
    else
    {
      v12 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if (v7 <= v12)
      {
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v7 & 0x7F;
LABEL_27:
        result = 0;
        v2->__r_.__value_.__s.__data_[v7] = 0;
        return result;
      }
    }
    std::string::append(this, v7 - v12, 0);
    return 0;
  }
  v8 = 0;
  v9 = *a1 + v6;
  v10 = v6 + 1;
  while (1)
  {
    v11 = v10 + v8 >= v5 ? 0 : *(unsigned __int8 *)(v9 + v8 + 1);
    if (!(((v11 & (0xFFFF << (8 - v4))) >> (8 - v4)) | ((((1 << (8 - v4)) + 255) & *(unsigned __int8 *)(v9 + v8)) << v4)))
      break;
    if (v7 == ++v8)
      goto LABEL_9;
  }
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v15 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v8 <= v15)
    {
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v8 & 0x7F;
      this->__r_.__value_.__s.__data_[v8] = 0;
      if (!v8)
        goto LABEL_39;
LABEL_30:
      v18 = 0;
      do
      {
        v22 = a1[2];
        v23 = v22 + 1;
        v24 = *a1;
        if (v22 + 1 < (unint64_t)a1[1])
          v19 = *(unsigned __int8 *)(v24 + v23);
        else
          v19 = 0;
        v20 = ((((1 << (8 - *((_BYTE *)a1 + 24))) - 1) & *(unsigned __int8 *)(v24 + v22)) << *((_BYTE *)a1 + 24)) | (((0xFFFF << (8 - *((_BYTE *)a1 + 24))) & v19) >> (8 - *((_BYTE *)a1 + 24)));
        a1[2] = v23;
        if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = v2;
        else
          v21 = (std::string *)v2->__r_.__value_.__r.__words[0];
        v21->__r_.__value_.__s.__data_[v18++] = v20;
      }
      while (v8 != v18);
      goto LABEL_39;
    }
LABEL_29:
    std::string::append(this, v8 - v15, 0);
    goto LABEL_30;
  }
  v15 = this->__r_.__value_.__l.__size_;
  if (v15 < v8)
    goto LABEL_29;
  v25 = this->__r_.__value_.__r.__words[0];
  this->__r_.__value_.__l.__size_ = v8;
  *(_BYTE *)(v25 + v8) = 0;
  if (v8)
    goto LABEL_30;
LABEL_39:
  v26 = a1[2];
LABEL_45:
  a1[2] = v26 + 1;
  return 1;
}

{
  char v4;
  std::string::size_type v5;
  uint64_t v6;
  std::string::size_type v7;
  std::string::size_type v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  std::string::size_type v12;
  std::string::size_type v13;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  std::string *v21;
  std::string::size_type v22;

  v4 = *((_BYTE *)a1 + 24);
  v5 = a1[1];
  v6 = a1[2];
  if (!v4)
  {
    v12 = v5 - v6;
    if (v12)
    {
      v13 = 0;
      while (*(_BYTE *)(*a1 + v6 + v13))
      {
        if (v12 == ++v13)
          return 0;
      }
      std::string::resize(this, v13, 0);
      std::string::__assign_external(this, (const std::string::value_type *)(*a1 + a1[2]), v13);
      v22 = a1[2] + v13;
      goto LABEL_26;
    }
    return 0;
  }
  v7 = v5 + ~v6;
  if (!v7)
  {
LABEL_9:
    std::string::resize(this, v7, 0);
    return 0;
  }
  v8 = 0;
  v9 = *a1 + v6;
  v10 = v6 + 1;
  while (1)
  {
    v11 = v10 + v8 >= v5 ? 0 : *(unsigned __int8 *)(v9 + v8 + 1);
    if (!(((v11 & (0xFFFF << (8 - v4))) >> (8 - v4)) | ((((1 << (8 - v4)) + 255) & *(unsigned __int8 *)(v9 + v8)) << v4)))
      break;
    if (v7 == ++v8)
      goto LABEL_9;
  }
  std::string::resize(this, v8, 0);
  if (v8)
  {
    for (i = 0; i != v8; ++i)
    {
      v16 = a1[2];
      v17 = v16 + 1;
      v18 = *a1;
      if (v16 + 1 >= (unint64_t)a1[1])
        v19 = 0;
      else
        v19 = *(unsigned __int8 *)(v18 + v17);
      v20 = ((((1 << (8 - *((_BYTE *)a1 + 24))) - 1) & *(unsigned __int8 *)(v18 + v16)) << *((_BYTE *)a1 + 24)) | (((0xFFFF << (8 - *((_BYTE *)a1 + 24))) & v19) >> (8 - *((_BYTE *)a1 + 24)));
      a1[2] = v17;
      if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = this;
      else
        v21 = (std::string *)this->__r_.__value_.__r.__words[0];
      v21->__r_.__value_.__s.__data_[i] = v20;
    }
  }
  v22 = a1[2];
LABEL_26:
  a1[2] = v22 + 1;
  return 1;
}

void geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::resize(gss::Allocator *a1, unint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  gss::Allocator *v7;
  gss::Allocator *v8;
  gss::Allocator *v9;
  uint64_t v10;
  uint64_t v11;
  gss::Allocator *v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  int v18;
  uint64_t v19;

  if (!*((_BYTE *)a1 + 12))
  {
    v4 = (_QWORD *)((char *)a1 + 8);
    v5 = *((unsigned __int16 *)a1 + 4);
    if (v5 > a2)
    {
LABEL_3:
      *(_WORD *)v4 = a2;
      return;
    }
    if (v5 < a2)
    {
      if (*((unsigned __int16 *)a1 + 5) >= a2)
      {
        v8 = *(gss::Allocator **)a1;
        if (v5 == a2)
          goto LABEL_3;
LABEL_23:
        bzero((char *)v8 + 4 * v5, 4 * a2 - 4 * v5);
        goto LABEL_3;
      }
      v6 = gss::Allocator::instance(a1);
      v7 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, 4 * a2, 4);
      v8 = v7;
      v9 = *(gss::Allocator **)a1;
      v5 = *((unsigned __int16 *)a1 + 4);
      if (!*(_QWORD *)a1)
      {
LABEL_22:
        *((_WORD *)a1 + 5) = a2;
        *(_QWORD *)a1 = v8;
        if (v5 == a2)
          goto LABEL_3;
        goto LABEL_23;
      }
      if (*((_WORD *)a1 + 4))
      {
        if (v5 < 8 || (unint64_t)(v7 - v9) < 0x20)
        {
          v17 = *((unsigned __int16 *)a1 + 4);
          v12 = v7;
          do
          {
LABEL_18:
            v18 = *(_DWORD *)v9;
            v9 = (gss::Allocator *)((char *)v9 + 4);
            *(_DWORD *)v12 = v18;
            v12 = (gss::Allocator *)((char *)v12 + 4);
            --v17;
          }
          while ((_WORD)v17);
          goto LABEL_19;
        }
        v10 = (unsigned __int16)v5 & 0xFFF8;
        v11 = 4 * v10;
        v12 = (gss::Allocator *)((char *)v7 + 4 * v10);
        v13 = (__int128 *)((char *)v9 + 16);
        v14 = (_OWORD *)((char *)v7 + 16);
        v15 = v10;
        do
        {
          v16 = *v13;
          *(v14 - 1) = *(v13 - 1);
          *v14 = v16;
          v13 += 2;
          v14 += 2;
          v15 -= 8;
        }
        while (v15);
        if (v10 != v5)
        {
          v17 = v5 - v10;
          v9 = (gss::Allocator *)((char *)v9 + v11);
          goto LABEL_18;
        }
      }
LABEL_19:
      if (!*((_BYTE *)a1 + 12))
      {
        v19 = gss::Allocator::instance(v7);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v19 + 40))(v19, *(_QWORD *)a1, 4 * *((unsigned __int16 *)a1 + 5));
      }
      *((_BYTE *)v4 + 4) = 0;
      *(_DWORD *)v4 = 0;
      goto LABEL_22;
    }
  }
}

gss::Allocator *geo::intern_vector<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,geo::StdAllocator<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,gss::Allocator>>::moveContent(gss::Allocator *result, uint64_t a2)
{
  gss::Allocator *v2;
  __int16 v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  _BYTE *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = result;
  v3 = *((_WORD *)result + 4);
  if (v3)
  {
    v5 = 0;
    v6 = *(_QWORD *)result;
    v7 = *((unsigned __int16 *)result + 4);
    do
    {
      v8 = v6 + v5;
      v9 = a2 + v5;
      *(_DWORD *)v9 = *(_DWORD *)(v6 + v5);
      *(_QWORD *)(a2 + v5 + 8) = 0;
      result = (gss::Allocator *)(a2 + v5 + 8);
      *(_QWORD *)(v9 + 13) = 0;
      v10 = *(int **)(v6 + v5 + 8);
      if (*(_BYTE *)(v6 + v5 + 20))
      {
        *(_QWORD *)result = v10;
        *(_DWORD *)(v9 + 16) = *(_DWORD *)(v8 + 16);
        *(_BYTE *)(v9 + 20) = 1;
      }
      else
      {
        result = (gss::Allocator *)geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::append<unsigned int *>((uint64_t)result, v10, (char *)&v10[*(unsigned __int16 *)(v8 + 16)]);
      }
      --v7;
      v5 += 24;
    }
    while ((_WORD)v7);
  }
  if (!*((_BYTE *)v2 + 12) && *(_QWORD *)v2)
  {
    if (*((_WORD *)v2 + 4))
    {
      v11 = 24 * *((unsigned __int16 *)v2 + 4);
      v12 = (_BYTE *)(*(_QWORD *)v2 + 20);
      do
      {
        v13 = v12 - 12;
        if (!*v12 && *v13)
        {
          v14 = gss::Allocator::instance(result);
          result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v14 + 40))(v14, *(_QWORD *)(v12 - 12), 4 * *((unsigned __int16 *)v12 - 1));
        }
        *(_QWORD *)(v12 - 7) = 0;
        *v13 = 0;
        v12 += 24;
        v11 -= 24;
      }
      while (v11);
    }
    v15 = gss::Allocator::instance(result);
    result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v15 + 40))(v15, *(_QWORD *)v2, 24 * *((unsigned __int16 *)v2 + 5));
  }
  *(_QWORD *)((char *)v2 + 5) = 0;
  *(_QWORD *)v2 = 0;
  *((_WORD *)v2 + 4) = v3;
  return result;
}

uint64_t geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::append<unsigned int *>(uint64_t result, int *a2, char *a3)
{
  int *v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  _OWORD *v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 *v31;
  _OWORD *v32;
  uint64_t v33;
  __int128 v34;
  int v35;

  v4 = a2;
  v5 = result;
  v6 = a3 - (char *)a2;
  v7 = (a3 - (char *)a2) >> 2;
  v8 = result + 8;
  v9 = *(unsigned __int16 *)(result + 8);
  v10 = *(unsigned __int16 *)(result + 10);
  if (v7 > v10 - v9)
  {
    v11 = v7 + v9;
    v12 = v7 + v9 > v10 && (v7 + v9) >> 16 == 0;
    if (v12 && *(_BYTE *)(result + 12) == 0)
    {
      v14 = gss::Allocator::instance((gss::Allocator *)result);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, 4 * v11, 4);
      v15 = result;
      v16 = *(int **)v5;
      v9 = *(unsigned __int16 *)(v5 + 8);
      if (!*(_QWORD *)v5)
      {
LABEL_23:
        *(_WORD *)(v5 + 10) = v11;
        *(_QWORD *)v5 = v15;
        goto LABEL_24;
      }
      if (*(_WORD *)(v5 + 8))
      {
        if (v9 < 8)
        {
          v17 = *(unsigned __int16 *)(v5 + 8);
          v18 = (_DWORD *)result;
        }
        else
        {
          v17 = *(unsigned __int16 *)(v5 + 8);
          v18 = (_DWORD *)result;
          if ((unint64_t)(result - (_QWORD)v16) >= 0x20)
          {
            v19 = (unsigned __int16)v9 & 0xFFF8;
            v20 = 4 * v19;
            v18 = (_DWORD *)(result + 4 * v19);
            v21 = (__int128 *)(v16 + 4);
            v22 = (_OWORD *)(result + 16);
            v23 = v19;
            do
            {
              v24 = *v21;
              *(v22 - 1) = *(v21 - 1);
              *v22 = v24;
              v21 += 2;
              v22 += 2;
              v23 -= 8;
            }
            while (v23);
            if (v19 == v9)
              goto LABEL_20;
            v17 = v9 - v19;
            v16 = (int *)((char *)v16 + v20);
          }
        }
        do
        {
          v25 = *v16++;
          *v18++ = v25;
          --v17;
        }
        while ((_WORD)v17);
      }
LABEL_20:
      if (!*(_BYTE *)(v5 + 12))
      {
        v26 = gss::Allocator::instance((gss::Allocator *)result);
        result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v26 + 40))(v26, *(_QWORD *)v5, 4 * *(unsigned __int16 *)(v5 + 10));
      }
      *(_BYTE *)(v8 + 4) = 0;
      *(_DWORD *)v8 = 0;
      goto LABEL_23;
    }
  }
LABEL_24:
  if (v4 == (int *)a3)
    goto LABEL_32;
  v27 = (_DWORD *)(*(_QWORD *)v5 + 4 * v9);
  if ((unint64_t)(v6 - 4) < 0x1C)
    goto LABEL_31;
  v28 = 4 * v9 + *(_QWORD *)v5;
  if ((unint64_t)(v28 - (_QWORD)v4) < 0x20)
    goto LABEL_31;
  v29 = ((unint64_t)(v6 - 4) >> 2) + 1;
  v30 = 4 * (v29 & 0x7FFFFFFFFFFFFFF8);
  v27 = (_DWORD *)((char *)v27 + v30);
  v31 = (__int128 *)(v4 + 4);
  v32 = (_OWORD *)(v28 + 16);
  v33 = v29 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v34 = *v31;
    *(v32 - 1) = *(v31 - 1);
    *v32 = v34;
    v31 += 2;
    v32 += 2;
    v33 -= 8;
  }
  while (v33);
  if (v29 != (v29 & 0x7FFFFFFFFFFFFFF8))
  {
    v4 = (int *)((char *)v4 + v30);
    do
    {
LABEL_31:
      v35 = *v4++;
      *v27++ = v35;
    }
    while (v4 != (int *)a3);
  }
LABEL_32:
  *(_WORD *)v8 = v9 + (v6 >> 2);
  return result;
}

gss::Allocator *geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::intern<geo::StdAllocator<gss::StyleCondition,gss::Allocator>>(gss::Allocator *result, uint64_t a2)
{
  gss::Allocator *v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  gss::Allocator *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  gss::Allocator *v12;
  _QWORD *v13;
  gss::Allocator *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  gss::Allocator **v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  __int128 *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  gss::Allocator *v30;
  gss::Allocator *v31;
  uint64_t v32;
  uint64_t v33;
  gss::Allocator *v34;

  if (!*((_BYTE *)result + 12))
  {
    v2 = result;
    v3 = *((unsigned __int16 *)result + 4);
    if (!*((_WORD *)result + 4))
    {
LABEL_35:
      *((_BYTE *)v2 + 12) = 1;
      return result;
    }
    if (*(_DWORD *)(a2 + 24) >= v3)
    {
      v5 = *(_QWORD *)(a2 + 8);
      if (*(_QWORD *)a2 == v5 || (v6 = *(uint64_t **)(v5 - 8), v7 = v6[1], v6[2] - v7 < v3))
      {
        v8 = (gss::Allocator *)operator new();
        v9 = *(unsigned int *)(a2 + 24);
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
        *((_QWORD *)v8 + 2) = v9;
        v10 = gss::Allocator::instance(v8);
        *(_QWORD *)v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, 24 * v9, 8);
        v34 = v8;
        v12 = *(gss::Allocator **)(a2 + 8);
        v11 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v12 >= v11)
        {
          v14 = *(gss::Allocator **)a2;
          v15 = (uint64_t)v12 - *(_QWORD *)a2;
          v16 = v15 >> 3;
          v17 = (v15 >> 3) + 1;
          if (v17 >> 61)
            abort();
          v18 = v11 - (_QWORD)v14;
          if (v18 >> 2 > v17)
            v17 = v18 >> 2;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
            v19 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            if (v19 >> 61)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v20 = (char *)operator new(8 * v19);
          }
          else
          {
            v20 = 0;
          }
          v21 = (gss::Allocator **)&v20[8 * v16];
          v22 = &v20[8 * v19];
          v34 = 0;
          *v21 = v8;
          v13 = v21 + 1;
          if (v12 == v14)
          {
            *(_QWORD *)a2 = v21;
            *(_QWORD *)(a2 + 8) = v13;
            *(_QWORD *)(a2 + 16) = v22;
          }
          else
          {
            v23 = v12 - v14 - 8;
            if (v23 <= 0x77
              || (char *)v12 - (v23 & 0xFFFFFFFFFFFFFFF8) - 8 < (char *)v21
              && &v20[v15 - (v23 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v12)
            {
              goto LABEL_41;
            }
            v24 = (v23 >> 3) + 1;
            v25 = &v20[8 * v16 - 16];
            v26 = (__int128 *)((char *)v12 - 32);
            v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v29 = *v26;
              v28 = v26[1];
              *v26 = 0uLL;
              v26[1] = 0uLL;
              v26 -= 2;
              *((_OWORD *)v25 - 1) = v29;
              *(_OWORD *)v25 = v28;
              v25 -= 32;
              v27 -= 4;
            }
            while (v27);
            v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
            v12 = (gss::Allocator *)((char *)v12 - 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL));
            if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_41:
              do
              {
                v30 = (gss::Allocator *)*((_QWORD *)v12 - 1);
                v12 = (gss::Allocator *)((char *)v12 - 8);
                *(_QWORD *)v12 = 0;
                *--v21 = v30;
              }
              while (v12 != v14);
            }
            v12 = *(gss::Allocator **)a2;
            v31 = *(gss::Allocator **)(a2 + 8);
            *(_QWORD *)a2 = v21;
            *(_QWORD *)(a2 + 8) = v13;
            *(_QWORD *)(a2 + 16) = v22;
            while (v31 != v12)
            {
              v31 = (gss::Allocator *)((char *)v31 - 8);
              std::unique_ptr<geo::intern_allocator<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::PageInfo,std::default_delete<geo::intern_allocator<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::PageInfo>>::reset[abi:nn180100](v31);
            }
          }
          if (v12)
            operator delete(v12);
        }
        else
        {
          v34 = 0;
          *(_QWORD *)v12 = v8;
          v13 = (_QWORD *)((char *)v12 + 8);
        }
        *(_QWORD *)(a2 + 8) = v13;
        result = std::unique_ptr<geo::intern_allocator<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::PageInfo,std::default_delete<geo::intern_allocator<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::PageInfo>>::reset[abi:nn180100]((gss::Allocator *)&v34);
        v6 = *(uint64_t **)(*(_QWORD *)(a2 + 8) - 8);
        v7 = v6[1];
      }
      v32 = *v6;
      v6[1] = v7 + v3;
      if (v32)
      {
        v33 = v32 + 24 * v7;
        result = geo::intern_vector<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,geo::StdAllocator<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,gss::Allocator>>::moveContent(v2, v33);
        *((_WORD *)v2 + 5) = 0;
        *(_QWORD *)v2 = v33;
        goto LABEL_35;
      }
    }
  }
  return result;
}

void sub_19F054980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<geo::intern_allocator<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::PageInfo,std::default_delete<geo::intern_allocator<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::PageInfo>>::reset[abi:nn180100]((gss::Allocator *)va);
  _Unwind_Resume(a1);
}

void sub_19F054994(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x1020C4024DAA5DELL);
  _Unwind_Resume(a1);
}

gss::Allocator *geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::resize(gss::Allocator *result, unint64_t a2)
{
  gss::Allocator *v3;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  gss::Allocator *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  if (!*((_BYTE *)result + 12))
  {
    v3 = result;
    v4 = *((unsigned __int16 *)result + 4);
    if (v4 > a2)
    {
      v5 = 24 * *((unsigned __int16 *)result + 4) - 24 * a2;
      v6 = (_BYTE *)(24 * a2 + *(_QWORD *)result + 20);
      do
      {
        v7 = v6 - 12;
        if (!*v6)
        {
          if (*v7)
          {
            v8 = gss::Allocator::instance(result);
            result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(v6 - 12), 4 * *((unsigned __int16 *)v6 - 1));
          }
        }
        *(_QWORD *)(v6 - 7) = 0;
        *v7 = 0;
        v6 += 24;
        v5 -= 24;
      }
      while (v5);
      goto LABEL_17;
    }
    if (v4 >= a2)
      return result;
    if (*((unsigned __int16 *)result + 5) >= a2)
    {
      v10 = *(gss::Allocator **)result;
      if (v4 == a2)
      {
LABEL_17:
        *((_WORD *)v3 + 4) = a2;
        return result;
      }
    }
    else
    {
      v9 = gss::Allocator::instance(result);
      result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, 24 * a2, 8);
      v10 = result;
      if (*(_QWORD *)v3)
        result = geo::intern_vector<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,geo::StdAllocator<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,gss::Allocator>>::moveContent(v3, (uint64_t)result);
      *((_WORD *)v3 + 5) = a2;
      *(_QWORD *)v3 = v10;
      v4 = *((unsigned __int16 *)v3 + 4);
      if (v4 == a2)
        goto LABEL_17;
    }
    v11 = 24 * v4;
    v12 = (_QWORD *)((char *)v10 + 24 * v4);
    v13 = 24 * a2 - v11;
    do
    {
      *v12 = 0;
      v12[1] = 0;
      v12[2] = 0;
      v12 += 3;
      v13 -= 24;
    }
    while (v13);
    goto LABEL_17;
  }
  return result;
}

__n128 geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::emplace_back<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>>(uint64_t a1, __n128 *a2)
{
  uint64_t v4;
  BOOL v5;
  __n128 result;

  v4 = *(unsigned __int16 *)(a1 + 8);
  v5 = (_DWORD)v4 != 0xFFFF && *(_BYTE *)(a1 + 12) == 0;
  if (v5 && v4 >= *(unsigned __int16 *)(a1 + 10))
  {
    geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::reallocate((gss::Allocator **)a1, v4 + 1);
    v4 = *(unsigned __int16 *)(a1 + 8);
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)a1 + 16 * v4) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  ++*(_WORD *)(a1 + 8);
  return result;
}

void ggl::Texture::~Texture(ggl::Texture *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E42B8A10;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *std::__shared_ptr_emplace<geo::Task>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 24);
  result = *(_QWORD **)(a1 + 48);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__shared_ptr_emplace<FeatureStyleAttributes>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 40);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  else
  {
    free(*(void **)(a1 + 24));
    *(_QWORD *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 57) = 0;
  }
  v5 = *(void **)(a1 + 48);
  if (v5)
  {
    free(v5);
    *(_QWORD *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 56) = 0;
  }
  v6 = *(std::__shared_weak_count **)(a1 + 40);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  FeatureStyleAttributes::~FeatureStyleAttributes((FeatureStyleAttributes *)(a1 + 24));
}

void FeatureStyleAttributes::~FeatureStyleAttributes(FeatureStyleAttributes *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  if (*((_QWORD *)this + 1))
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  else
  {
    free(*(void **)this);
    *(_QWORD *)this = 0;
    *((_BYTE *)this + 33) = 0;
  }
  v5 = (void *)*((_QWORD *)this + 3);
  if (v5)
  {
    free(v5);
    *((_QWORD *)this + 3) = 0;
    *((_BYTE *)this + 32) = 0;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

_QWORD *std::__shared_ptr_emplace<md::LabelMapTileCommand>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__shared_ptr_emplace<md::LabelImageKey>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v2 = (_QWORD *)(a1 + 296);
  v3 = *(_QWORD **)(a1 + 320);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 287) < 0)
  {
    operator delete(*(void **)(a1 + 264));
    if ((*(char *)(a1 + 263) & 0x80000000) == 0)
    {
LABEL_8:
      if (!*(_BYTE *)(a1 + 204))
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 263) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(*(void **)(a1 + 240));
  if (*(_BYTE *)(a1 + 204))
LABEL_9:
    *(_BYTE *)(a1 + 204) = 0;
LABEL_10:
  if (*(char *)(a1 + 167) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 168) + 40))(*(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 160) & 0x7FFFFFFFFFFFFFFFLL);
  v5 = *(void **)(a1 + 96);
  if (v5 != *(void **)(a1 + 112))
    free(v5);
  if (*(char *)(a1 + 63) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 40))(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56) & 0x7FFFFFFFFFFFFFFFLL);
}

void std::__shared_ptr_emplace<gdc::DataObject>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;

  *(_QWORD *)(a1 + 32) = &off_1E42B5310;
}

uint64_t std::__shared_ptr_emplace<ggl::SamplerState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ggl::SamplerState::~SamplerState(ggl::SamplerState *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E42B8A10;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E42B8A10;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<gdc::LayerDataRequest>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *i;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *j;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  void *v25;

  v2 = *(_QWORD *)(a1 + 144);
  v3 = *(_QWORD *)(a1 + 152);
  while (v2 != v3)
  {
    for (i = *(unsigned __int8 **)(v2 + 24); i; i = *(unsigned __int8 **)i)
    {
      v5 = std::__hash_table<std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,std::__unordered_map_hasher<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,true>,std::__unordered_map_equal<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,std::equal_to<gdc::ResourceKey>,gdc::ResourceKeyHash,true>,std::allocator<std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>>>::__emplace_unique_key_args<gdc::ResourceKey,std::piecewise_construct_t const&,std::tuple<gdc::ResourceKey const&>,std::tuple<>>(*(_QWORD *)(a1 + 216) + 8, i + 16, (uint64_t)(i + 16));
      --v5[15];
    }
    v2 += 48;
  }
  v6 = *(_QWORD *)(a1 + 168);
  v7 = *(_QWORD *)(a1 + 176);
  while (v6 != v7)
  {
    for (j = *(unsigned __int8 **)(v6 + 24); j; j = *(unsigned __int8 **)j)
    {
      v9 = std::__hash_table<std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,std::__unordered_map_hasher<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,true>,std::__unordered_map_equal<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,std::equal_to<gdc::ResourceKey>,gdc::ResourceKeyHash,true>,std::allocator<std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>>>::__emplace_unique_key_args<gdc::ResourceKey,std::piecewise_construct_t const&,std::tuple<gdc::ResourceKey const&>,std::tuple<>>(*(_QWORD *)(a1 + 216) + 8, j + 16, (uint64_t)(j + 16));
      --v9[15];
    }
    v6 += 48;
  }
  v10 = *(_QWORD *)(a1 + 192);
  if (v10)
  {
    std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>::__base_destruct_at_end[abi:nn180100](a1 + 192, v10);
    operator delete(*(void **)(a1 + 192));
  }
  v11 = *(_QWORD *)(a1 + 168);
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 176);
    v13 = *(void **)(a1 + 168);
    if (v12 != v11)
    {
      do
      {
        v14 = *(_QWORD **)(v12 - 24);
        if (v14)
        {
          do
          {
            v16 = (_QWORD *)*v14;
            v17 = (void *)v14[3];
            if (v17 != (void *)v14[5])
              free(v17);
            operator delete(v14);
            v14 = v16;
          }
          while (v16);
        }
        v15 = *(void **)(v12 - 40);
        *(_QWORD *)(v12 - 40) = 0;
        if (v15)
          operator delete(v15);
        v12 -= 48;
      }
      while (v12 != v11);
      v13 = *(void **)(a1 + 168);
    }
    *(_QWORD *)(a1 + 176) = v11;
    operator delete(v13);
  }
  v18 = *(_QWORD *)(a1 + 144);
  if (v18)
  {
    v19 = *(_QWORD *)(a1 + 152);
    v20 = *(void **)(a1 + 144);
    if (v19 != v18)
    {
      do
      {
        v21 = *(_QWORD **)(v19 - 24);
        if (v21)
        {
          do
          {
            v23 = (_QWORD *)*v21;
            v24 = (void *)v21[3];
            if (v24 != (void *)v21[5])
              free(v24);
            operator delete(v21);
            v21 = v23;
          }
          while (v23);
        }
        v22 = *(void **)(v19 - 40);
        *(_QWORD *)(v19 - 40) = 0;
        if (v22)
          operator delete(v22);
        v19 -= 48;
      }
      while (v19 != v18);
      v20 = *(void **)(a1 + 144);
    }
    *(_QWORD *)(a1 + 152) = v18;
    operator delete(v20);
  }
  if (*(_BYTE *)(a1 + 120))
    *(_BYTE *)(a1 + 120) = 0;
  v25 = *(void **)(a1 + 40);
  if (v25 != *(void **)(a1 + 56))
    free(v25);
}

grl::IconRenderer *std::__shared_ptr_emplace<grl::IconImage>::__on_zero_shared(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 232));
  if (*(_BYTE *)(a1 + 207))
    *(_BYTE *)(a1 + 207) = 0;
  if (*(_BYTE *)(a1 + 202))
    *(_BYTE *)(a1 + 202) = 0;
  if (*(_BYTE *)(a1 + 197))
    *(_BYTE *)(a1 + 197) = 0;
  if (*(_BYTE *)(a1 + 192))
    *(_BYTE *)(a1 + 192) = 0;
  if (*(_BYTE *)(a1 + 187))
    *(_BYTE *)(a1 + 187) = 0;
  if (*(_BYTE *)(a1 + 182))
    *(_BYTE *)(a1 + 182) = 0;
  if (*(_BYTE *)(a1 + 177))
    *(_BYTE *)(a1 + 177) = 0;
  if (*(_BYTE *)(a1 + 172))
    *(_BYTE *)(a1 + 172) = 0;
  if (*(_BYTE *)(a1 + 167))
    *(_BYTE *)(a1 + 167) = 0;
  if (*(_BYTE *)(a1 + 162))
    *(_BYTE *)(a1 + 162) = 0;
  if (*(_BYTE *)(a1 + 160))
    *(_BYTE *)(a1 + 160) = 0;
  std::__tree<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::Allocator>>::destroy(a1 + 120, *(_QWORD *)(a1 + 128));
  if (*(_BYTE *)(a1 + 156))
    *(_BYTE *)(a1 + 156) = 0;
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](a1 + 32);
  return std::unique_ptr<grl::IconRenderer>::reset[abi:nn180100]((grl::IconRenderer **)(a1 + 24), 0);
}

_QWORD *std::__shared_ptr_emplace<md::LabelManagerCommand>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void ggl::TextureData2D::~TextureData2D(ggl::TextureData2D *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42B67F0;
  {
    v4 = operator new();
    *(_QWORD *)(v4 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v4 + 24) = "GeoGL";
    *(_OWORD *)(v4 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v4 = &off_1E42B5668;
    *(_QWORD *)(v4 + 8) = "GeoGL";
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 88) = 0u;
    *(_OWORD *)(v4 + 104) = 0u;
    *(_OWORD *)(v4 + 120) = 0u;
    *(_OWORD *)(v4 + 136) = 0u;
    *(_OWORD *)(v4 + 152) = 0u;
    *(_OWORD *)(v4 + 168) = 0u;
    *(_OWORD *)(v4 + 184) = 0u;
    *(_OWORD *)(v4 + 200) = 0u;
    *(_OWORD *)(v4 + 216) = 0u;
    *(_OWORD *)(v4 + 232) = 0u;
    *(_QWORD *)(v4 + 248) = 0;
    *(_OWORD *)(v4 + 56) = 0u;
    v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
    if ((_DWORD)v5)
      geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v4 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v4;
  }
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 40))(ggl::Allocator::instance(void)::alloc, *((_QWORD *)this + 3), 0);
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7), v3, *((_QWORD *)this + 6) - v3);
  }
}

{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  geo::read_write_lock *v5;
  const char *v6;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42B67F0;
  {
    v4 = operator new();
    *(_QWORD *)(v4 + 16) = 0xA3D02C1100000005;
    *(_QWORD *)(v4 + 24) = "GeoGL";
    *(_OWORD *)(v4 + 32) = xmmword_19FFB2DE0;
    *(_QWORD *)v4 = &off_1E42B5668;
    *(_QWORD *)(v4 + 8) = "GeoGL";
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 88) = 0u;
    *(_OWORD *)(v4 + 104) = 0u;
    *(_OWORD *)(v4 + 120) = 0u;
    *(_OWORD *)(v4 + 136) = 0u;
    *(_OWORD *)(v4 + 152) = 0u;
    *(_OWORD *)(v4 + 168) = 0u;
    *(_OWORD *)(v4 + 184) = 0u;
    *(_OWORD *)(v4 + 200) = 0u;
    *(_OWORD *)(v4 + 216) = 0u;
    *(_OWORD *)(v4 + 232) = 0u;
    *(_QWORD *)(v4 + 248) = 0;
    *(_OWORD *)(v4 + 56) = 0u;
    v5 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v4 + 56), 0);
    if ((_DWORD)v5)
      geo::read_write_lock::logFailure(v5, (uint64_t)"initialization", v6);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v4 + 48) = zone;
    malloc_set_zone_name(zone, "GeoGL");
    *(_QWORD *)(v4 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    ggl::Allocator::instance(void)::alloc = v4;
  }
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 40))(ggl::Allocator::instance(void)::alloc, *((_QWORD *)this + 3), 0);
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7), v3, *((_QWORD *)this + 6) - v3);
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::TextureData2D>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ggl::DaVinci::GroundPipelineState::~GroundPipelineState(ggl::DaVinci::GroundPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<gdc::SubtileClipMask>::__on_zero_shared(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 24);
  if (v1)
    operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::GroundPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Tile::Transform>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::Tile::Transform>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::MetalResourceManager::onRenderDataReleased(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  NSObject *v6;
  _QWORD v7[6];

  v2 = *(unsigned __int8 *)(a2 + 9);
  v3 = v2 > 9;
  v4 = (1 << v2) & 0x2E7;
  if (v3 || v4 == 0)
  {
    ggl::MetalResourceManager::deleteResource(a1, a2);
  }
  else
  {
    v6 = *(NSObject **)(a1 + 272);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = ___ZN3ggl20MetalResourceManager20onRenderDataReleasedEPNS_14RenderResourceE_block_invoke;
    v7[3] = &__block_descriptor_48_e5_v8__0l;
    v7[4] = a1;
    v7[5] = a2;
    dispatch_sync(v6, v7);
  }
}

void ggl::Buffer::~Buffer(ggl::Buffer *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E42B8A10;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E42B8A10;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Buffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::PolygonSolidFill::MeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ggl::PolygonSolidFill::MeshPipelineState::~MeshPipelineState(ggl::PolygonSolidFill::MeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::RenderQueue>::__on_zero_shared(uint64_t a1)
{
  ggl::RenderQueue::~RenderQueue((ggl::RenderQueue *)(a1 + 24));
}

uint64_t std::__shared_ptr_emplace<ggl::PolygonSolidFill::S2MeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ggl::PolygonSolidFill::S2MeshPipelineState::~S2MeshPipelineState(ggl::PolygonSolidFill::S2MeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<md::RegionalResourceSet *,std::shared_ptr<md::RegionalResourceSet>::__shared_ptr_default_delete<md::RegionalResourceSet,md::RegionalResourceSet>,std::allocator<md::RegionalResourceSet>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {

    v2 = *(void **)(v1 + 8);
    if (v2 != *(void **)(v1 + 24))
      free(v2);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<ggl::RenderState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ggl::RenderState::~RenderState(ggl::RenderState *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E42B8A10;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E42B8A10;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::GroundNonCompressedPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ggl::DaVinci::GroundNonCompressedPipelineState::~GroundNonCompressedPipelineState(ggl::DaVinci::GroundNonCompressedPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Texture2D>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_pointer<ggl::SamplerState *,std::shared_ptr<ggl::SamplerState>::__shared_ptr_default_delete<ggl::SamplerState,ggl::SamplerState>,std::allocator<ggl::SamplerState>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ggl::MetalSurfaceDrawable *,std::shared_ptr<ggl::MetalSurfaceDrawable>::__shared_ptr_default_delete<ggl::MetalSurfaceDrawable,ggl::MetalSurfaceDrawable>,std::allocator<ggl::MetalSurfaceDrawable>>::__on_zero_shared(uint64_t result)
{
  id *v1;

  v1 = *(id **)(result + 24);
  if (v1)
  {

    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<std::vector<std::function<void ()(NSError *)>,geo::StdAllocator<std::function<void ()(NSError *)>,ggl::Allocator>>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 32);
    v4 = *(_QWORD *)(result + 24);
    if (v3 == v1)
    {
LABEL_12:
      *(_QWORD *)(v2 + 32) = v1;
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 48) + 40))(*(_QWORD *)(v2 + 48), v4, *(_QWORD *)(v2 + 40) - v4);
    }
    while (1)
    {
      v7 = v3 - 32;
      v5 = *(_QWORD **)(v3 - 8);
      if ((_QWORD *)(v3 - 32) == v5)
      {
        v5 = (_QWORD *)(v3 - 32);
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
      v3 = v7;
      if (v7 == v1)
      {
        v4 = *(_QWORD *)(v2 + 24);
        goto LABEL_12;
      }
    }
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<ggl::MetalSwapchainDrawableRef>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ggl::MetalSwapchainDrawableRef::~MetalSwapchainDrawableRef(ggl::MetalSwapchainDrawableRef *this)
{
  std::mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E42BB420;
  v2 = (std::mutex *)*((_QWORD *)this + 1);
  if (v2)
    ggl::MetalSwapchainDrawable::removeRef(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  std::mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E42BB420;
  v2 = (std::mutex *)*((_QWORD *)this + 1);
  if (v2)
    ggl::MetalSwapchainDrawable::removeRef(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void sub_19F055C84(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<ggl::Line::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::TexturedInnerShadowRibbon::PipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::TexturedSolidRibbon::PipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::OuterShadowRibbon::PipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ggl::Line::BasePipelineState::~BasePipelineState(ggl::Line::BasePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::TexturedInnerShadowRibbon::PipelineState::~PipelineState(ggl::TexturedInnerShadowRibbon::PipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::TexturedSolidRibbon::PipelineState::~PipelineState(ggl::TexturedSolidRibbon::PipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::OuterShadowRibbon::PipelineState::~PipelineState(ggl::OuterShadowRibbon::PipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

uint64_t ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Tile::View>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::Tile::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::IndexDataTyped<unsigned short>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::IndexDataTyped<unsigned short>::~IndexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::GroundShadowMapPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::LinearDepthPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::PolygonFill::CompressedMeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ggl::DaVinci::GroundShadowMapPipelineState::~GroundShadowMapPipelineState(ggl::DaVinci::GroundShadowMapPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::DaVinci::LinearDepthPipelineState::~LinearDepthPipelineState(ggl::DaVinci::LinearDepthPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::PolygonFill::CompressedMeshPipelineState::~CompressedMeshPipelineState(ggl::PolygonFill::CompressedMeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<gss::StylesheetQuery<gss::PropertyID>,geo::StdAllocator<gss::StylesheetQuery<gss::PropertyID>,gss::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::PolygonAnimatableStroke::MeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::PolygonStroke::MeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ggl::PolygonAnimatableStroke::MeshPipelineState::~MeshPipelineState(ggl::PolygonAnimatableStroke::MeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::PolygonStroke::MeshPipelineState::~MeshPipelineState(ggl::PolygonStroke::MeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::Shadow>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::DaVinci::GroundDepthPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PolygonFill::Fill>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::PolygonFill::MeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ggl::DaVinci::GroundDepthPipelineState::~GroundDepthPipelineState(ggl::DaVinci::GroundDepthPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::ConstantDataTyped<ggl::PolygonFill::Fill>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

uint64_t ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2UV>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::PolygonFill::MeshPipelineState::~MeshPipelineState(ggl::PolygonFill::MeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::PolylineLabelPlacement>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::PolylineLabelPlacement::~PolylineLabelPlacement(md::PolylineLabelPlacement *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = &off_1E429D948;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = &off_1E429D948;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VenueWall::MeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<md::ElevatedPolygonRenderResources>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  malloc_zone_t *zone;
  void (***v6)(_QWORD, uint64_t);
  unsigned __int8 v7;
  uint64_t v8;
  geo::read_write_lock *v9;
  const char *v10;
  _QWORD *v11;
  unint64_t v12;
  void (***v13)(void);
  void (**v14)(void);
  _QWORD **v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 816));
  v2 = *(_QWORD *)(a1 + 776);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 784);
    v4 = *(_QWORD *)(a1 + 776);
    if (v3 != v2)
    {
      do
      {
        v6 = *(void (****)(_QWORD, uint64_t))(v3 - 8);
        *(_QWORD *)(v3 - 8) = 0;
        if (v6)
        {
          (**v6)(v6, v4);
          {
            v41 = v2;
            v8 = operator new();
            *(_QWORD *)(v8 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v8 + 24) = "VectorKitLabels";
            *(_OWORD *)(v8 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v8 = &off_1E42B5668;
            *(_QWORD *)(v8 + 8) = "VectorKitLabels";
            *(_OWORD *)(v8 + 72) = 0u;
            *(_OWORD *)(v8 + 88) = 0u;
            *(_OWORD *)(v8 + 104) = 0u;
            *(_OWORD *)(v8 + 120) = 0u;
            *(_OWORD *)(v8 + 136) = 0u;
            *(_OWORD *)(v8 + 152) = 0u;
            *(_OWORD *)(v8 + 168) = 0u;
            *(_OWORD *)(v8 + 184) = 0u;
            *(_OWORD *)(v8 + 200) = 0u;
            *(_OWORD *)(v8 + 216) = 0u;
            *(_OWORD *)(v8 + 232) = 0u;
            *(_QWORD *)(v8 + 248) = 0;
            *(_OWORD *)(v8 + 56) = 0u;
            v9 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v8 + 56), 0);
            if ((_DWORD)v9)
              geo::read_write_lock::logFailure(v9, (uint64_t)"initialization", v10);
            zone = malloc_create_zone(0, 0);
            *(_QWORD *)(v8 + 48) = zone;
            malloc_set_zone_name(zone, "VectorKitLabels");
            *(_QWORD *)(v8 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v8;
            v2 = v41;
          }
          (*(void (**)(uint64_t, void (***)(_QWORD, uint64_t), uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                           + 40))(mdm::Allocator::instance(void)::alloc, v6, 216);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(_QWORD *)(a1 + 776);
    }
    *(_QWORD *)(a1 + 784) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 800) + 40))(*(_QWORD *)(a1 + 800), v4, *(_QWORD *)(a1 + 792) - v4);
  }
  v11 = *(_QWORD **)(a1 + 752);
  do
  {
    if (v11[1])
    {
      v12 = 0;
      v13 = (void (***)(void))(v11 + 2);
      do
      {
        v14 = *v13;
        v13 += 15;
        (*v14)();
        ++v12;
      }
      while (v12 < v11[1]);
    }
    v11[1] = 0;
    v11 = (_QWORD *)*v11;
  }
  while (v11);
  v15 = *(_QWORD ***)(a1 + 752);
  *(_QWORD *)(a1 + 760) = v15;
  v16 = *v15;
  *v15 = 0;
  if (v16)
  {
    do
    {
      v17 = (_QWORD *)*v16;
      free(v16);
      v16 = v17;
    }
    while (v17);
    v15 = *(_QWORD ***)(a1 + 752);
  }
  free(v15);
  *(_QWORD *)(a1 + 536) = &off_1E42B8A10;
  v18 = *(_QWORD *)(a1 + 544);
  if (v18)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 16))(v18, *(_QWORD *)(a1 + 560));
    *(_QWORD *)(a1 + 560) = 3735927469;
  }
  v19 = *(std::__shared_weak_count **)(a1 + 552);
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(a1 + 520));
  v22 = *(std::__shared_weak_count **)(a1 + 424);
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(a1 + 400));
  v25 = *(std::__shared_weak_count **)(a1 + 304);
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(a1 + 280));
  v28 = *(std::__shared_weak_count **)(a1 + 184);
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(_QWORD **)(a1 + 160));
  v31 = *(std::__shared_weak_count **)(a1 + 64);
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v34)
  {
    v35 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v34);
    MEMORY[0x1A1AF4E00](v35, 0x10A0C40D234DDC7);
  }
  v36 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v36)
  {
    v37 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v36);
    MEMORY[0x1A1AF4E00](v37, 0x10A0C40D234DDC7);
  }
  v38 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v38)
  {
    v39 = ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(v38);
    MEMORY[0x1A1AF4E00](v39, 0x10A0C40D234DDC7);
  }
  result = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (result)
  {
    ggl::FragmentedPool<ggl::BuildingFlat::CompressedMeshPipelineSetup>::~FragmentedPool(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

_QWORD *std::__shared_ptr_emplace<md::LabelFeatureSupportCommand>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void ggl::VenueWall::MeshPipelineState::~MeshPipelineState(ggl::VenueWall::MeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::PolygonAnimatableFill::CompressedMeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::StandardPostchain::SSAOBlurPipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::PolygonStrokeMask::MeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::HillshadeFillMask::CompressedMeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::AnimatableTexture::Variant>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::PolygonSolidFill::CompressedMeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2UV>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2UV>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::PolygonOverlay::FillPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::RenderItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ggl::PolygonAnimatableFill::CompressedMeshPipelineState::~CompressedMeshPipelineState(ggl::PolygonAnimatableFill::CompressedMeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::PolygonStrokeMask::MeshPipelineState::~MeshPipelineState(ggl::PolygonStrokeMask::MeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::HillshadeFillMask::CompressedMeshPipelineState::~CompressedMeshPipelineState(ggl::HillshadeFillMask::CompressedMeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::ConstantDataTyped<ggl::AnimatableTexture::Variant>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::PolygonSolidFill::CompressedMeshPipelineState::~CompressedMeshPipelineState(ggl::PolygonSolidFill::CompressedMeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::PolygonOverlay::FillPipelineState::~FillPipelineState(ggl::PolygonOverlay::FillPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<gss::StylesheetManager<gss::PropertyID> *,std::shared_ptr<gss::StylesheetManager<gss::PropertyID>>::__shared_ptr_default_delete<gss::StylesheetManager<gss::PropertyID>,gss::StylesheetManager<gss::PropertyID>>,std::allocator<gss::StylesheetManager<gss::PropertyID>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    gss::StylesheetManager<gss::PropertyID>::~StylesheetManager(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<gdc::DCEL  *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<gdc::DCEL>::operator()[abi:nn180100](*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

uint64_t ggl::ConstantDataTyped<ggl::Tile::LinearDepth>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<md::MercatorTerrainAnchor *,std::shared_ptr<md::Anchor>::__shared_ptr_default_delete<md::Anchor,md::MercatorTerrainAnchor>,std::allocator<md::MercatorTerrainAnchor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_emplace<md::StyleTexture<md::DaVinciGroundTileData::BuildingColorStyle>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = a1[8];
  a1[8] = 0;
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  v3 = a1[6];
  a1[6] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
}

uint64_t std::__shared_ptr_emplace<ggl::Data>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::DownscaleTextureComputeShaderState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::CircleMultiStroke::FillPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::CommonMesh::Pos2UVMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ggl::Data::~Data(ggl::Data *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42BB980;
  if (*((_QWORD *)this + 1))
  {
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v3 + 24) = "GeoGL";
      *(_OWORD *)(v3 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v3 = &off_1E42B5668;
      *(_QWORD *)(v3 + 8) = "GeoGL";
      *(_OWORD *)(v3 + 72) = 0u;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_OWORD *)(v3 + 104) = 0u;
      *(_OWORD *)(v3 + 120) = 0u;
      *(_OWORD *)(v3 + 136) = 0u;
      *(_OWORD *)(v3 + 152) = 0u;
      *(_OWORD *)(v3 + 168) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      *(_QWORD *)(v3 + 248) = 0;
      *(_OWORD *)(v3 + 56) = 0u;
      v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
      if ((_DWORD)v4)
        geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v3 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v3;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 40))(ggl::Allocator::instance(void)::alloc, *((_QWORD *)this + 1), 0);
  }
  *((_QWORD *)this + 1) = 0;
}

{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42BB980;
  if (*((_QWORD *)this + 1))
  {
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v3 + 24) = "GeoGL";
      *(_OWORD *)(v3 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v3 = &off_1E42B5668;
      *(_QWORD *)(v3 + 8) = "GeoGL";
      *(_OWORD *)(v3 + 72) = 0u;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_OWORD *)(v3 + 104) = 0u;
      *(_OWORD *)(v3 + 120) = 0u;
      *(_OWORD *)(v3 + 136) = 0u;
      *(_OWORD *)(v3 + 152) = 0u;
      *(_OWORD *)(v3 + 168) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      *(_QWORD *)(v3 + 248) = 0;
      *(_OWORD *)(v3 + 56) = 0u;
      v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
      if ((_DWORD)v4)
        geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v3 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v3;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 40))(ggl::Allocator::instance(void)::alloc, *((_QWORD *)this + 1), 0);
  }
  *((_QWORD *)this + 1) = 0;
  JUMPOUT(0x1A1AF4E00);
}

{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E42BB980;
  if (*((_QWORD *)this + 1))
  {
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 16) = 0xA3D02C1100000005;
      *(_QWORD *)(v3 + 24) = "GeoGL";
      *(_OWORD *)(v3 + 32) = xmmword_19FFB2DE0;
      *(_QWORD *)v3 = &off_1E42B5668;
      *(_QWORD *)(v3 + 8) = "GeoGL";
      *(_OWORD *)(v3 + 72) = 0u;
      *(_OWORD *)(v3 + 88) = 0u;
      *(_OWORD *)(v3 + 104) = 0u;
      *(_OWORD *)(v3 + 120) = 0u;
      *(_OWORD *)(v3 + 136) = 0u;
      *(_OWORD *)(v3 + 152) = 0u;
      *(_OWORD *)(v3 + 168) = 0u;
      *(_OWORD *)(v3 + 184) = 0u;
      *(_OWORD *)(v3 + 200) = 0u;
      *(_OWORD *)(v3 + 216) = 0u;
      *(_OWORD *)(v3 + 232) = 0u;
      *(_QWORD *)(v3 + 248) = 0;
      *(_OWORD *)(v3 + 56) = 0u;
      v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
      if ((_DWORD)v4)
        geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
      zone = malloc_create_zone(0, 0);
      *(_QWORD *)(v3 + 48) = zone;
      malloc_set_zone_name(zone, "GeoGL");
      *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
      ggl::Allocator::instance(void)::alloc = v3;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)ggl::Allocator::instance(void)::alloc + 40))(ggl::Allocator::instance(void)::alloc, *((_QWORD *)this + 1), 0);
  }
  *((_QWORD *)this + 1) = 0;
}

void ggl::DownscaleTextureComputeShaderState::~DownscaleTextureComputeShaderState(ggl::DownscaleTextureComputeShaderState *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E42B8A10;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E42B8A10;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::CircleMultiStroke::FillPipelineState::~FillPipelineState(ggl::CircleMultiStroke::FillPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<gss::StylesheetManager<gss::ScenePropertyID> *,std::shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>>::__shared_ptr_default_delete<gss::StylesheetManager<gss::ScenePropertyID>,gss::StylesheetManager<gss::ScenePropertyID>>,std::allocator<gss::StylesheetManager<gss::ScenePropertyID>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    gss::StylesheetManager<gss::PropertyID>::~StylesheetManager(result);
    JUMPOUT(0x1A1AF4E00);
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<gss::StylesheetQuery<gss::ScenePropertyID>,geo::StdAllocator<gss::StylesheetQuery<gss::ScenePropertyID>,gss::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

void std::__tree<std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>,std::__map_value_compare<gdc::ContextTypeWrapper,std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>,gdc::ContextTypeWrapperCompare,true>,std::allocator<std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>,std::__map_value_compare<gdc::ContextTypeWrapper,std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>,gdc::ContextTypeWrapperCompare,true>,std::allocator<std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>>>::destroy(*a1);
    std::__tree<std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>,std::__map_value_compare<gdc::ContextTypeWrapper,std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>,gdc::ContextTypeWrapperCompare,true>,std::allocator<std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>>>::destroy(a1[1]);
    v2 = (void *)a1[7];
    if (v2)
    {
      a1[8] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t std::__shared_ptr_pointer<ggl::Grid::GridPipelineState *,std::shared_ptr<ggl::Grid::GridPipelineState>::__shared_ptr_default_delete<ggl::Grid::GridPipelineState,ggl::Grid::GridPipelineState>,std::allocator<ggl::Grid::GridPipelineState>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_emplace<ggl::Textured::SRGBBlendColormappedPos2DUVPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::Textured::SRGBBlendPos2DUVPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::Textured::Pos2DUVExtendedPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::Textured::Pos2DUVExtendedPipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::Circle::FillPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::SpecularBuildingPointyRoof::BuildingPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::DiffuseBuildingPointyRoof::BuildingPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::FoggedSpecularLandmark::LandmarkPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::FoggedSpecularBuilding::BuildingPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::FoggedDiffuseBuilding::BuildingPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::SpecularBuildingTop::CompressedMeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::DiffuseBuildingTop::CompressedMeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::TransitLineRibbon::PatternedBasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::TransitLineRibbon::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::StandardPostchain::TentBlurPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::StandardPostchain::TentBlurPipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::StandardPostchain::SSAOBlurPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::StandardPostchain::SSAOPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::StandardPostchain::SSAOPipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Textured::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TextureAlphaMask::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TextureAlphaMask::View>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PostchainCommon::SsaoBlurParam>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::TextureAlphaMask::MeshPipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::SpecularLandmark::LandmarkPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::SpecularBuilding::BuildingPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Glyph::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Glyph::DefaultVbo>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Icon::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Icon::DefaultVbo>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos2UV>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::VenueWallShadow::MeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::GlobeAtmosphere::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::DiffuseBuilding::BuildingPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::PolygonOverlay::AntialiasPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::MaskingOverlay::MaskingPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::MaskingOverlay::FillPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::LandmarkFlat::LandmarkPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::BuildingFlat::CompressedMeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::SolidRibbon::PipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::TransitInterTileMediator>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>,std::__map_value_compare<gdc::ContextTypeWrapper,std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>,gdc::ContextTypeWrapperCompare,true>,std::allocator<std::__value_type<gdc::ContextTypeWrapper,std::vector<std::pair<gdc::LogicExecutionNode,gdc::LogicExecutionGraphRequirement>>>>>::destroy(*(_QWORD **)(a1 + 32));
}

void ggl::Textured::SRGBBlendColormappedPos2DUVPipelineState::~SRGBBlendColormappedPos2DUVPipelineState(ggl::Textured::SRGBBlendColormappedPos2DUVPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Textured::SRGBBlendPos2DUVPipelineState::~SRGBBlendPos2DUVPipelineState(ggl::Textured::SRGBBlendPos2DUVPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Textured::Pos2DUVExtendedPipelineState::~Pos2DUVExtendedPipelineState(ggl::Textured::Pos2DUVExtendedPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Circle::FillPipelineState::~FillPipelineState(ggl::Circle::FillPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Grid::GridPipelineState::~GridPipelineState(ggl::Grid::GridPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void ggl::SpecularBuildingPointyRoof::BuildingPipelineState::~BuildingPipelineState(ggl::SpecularBuildingPointyRoof::BuildingPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineState::~CompressedMeshPipelineState(ggl::FoggedSpecularBuildingTop::CompressedMeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::DiffuseBuildingPointyRoof::BuildingPipelineState::~BuildingPipelineState(ggl::DiffuseBuildingPointyRoof::BuildingPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineState::~CompressedMeshPipelineState(ggl::FoggedDiffuseBuildingTop::CompressedMeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::FoggedSpecularLandmark::LandmarkPipelineState::~LandmarkPipelineState(ggl::FoggedSpecularLandmark::LandmarkPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::FoggedSpecularBuilding::BuildingPipelineState::~BuildingPipelineState(ggl::FoggedSpecularBuilding::BuildingPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::FoggedDiffuseBuilding::BuildingPipelineState::~BuildingPipelineState(ggl::FoggedDiffuseBuilding::BuildingPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::SpecularBuildingTop::CompressedMeshPipelineState::~CompressedMeshPipelineState(ggl::SpecularBuildingTop::CompressedMeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::DiffuseBuildingTop::CompressedMeshPipelineState::~CompressedMeshPipelineState(ggl::DiffuseBuildingTop::CompressedMeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::TransitLineRibbon::PatternedBasePipelineState::~PatternedBasePipelineState(ggl::TransitLineRibbon::PatternedBasePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::TransitLineRibbon::BasePipelineState::~BasePipelineState(ggl::TransitLineRibbon::BasePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::StandardPostchain::TentBlurPipelineState::~TentBlurPipelineState(ggl::StandardPostchain::TentBlurPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::StandardPostchain::SSAOBlurPipelineState::~SSAOBlurPipelineState(ggl::StandardPostchain::SSAOBlurPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::StandardPostchain::SSAOPipelineState::~SSAOPipelineState(ggl::StandardPostchain::SSAOPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::ConstantDataTyped<ggl::Textured::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

uint64_t ggl::ConstantDataTyped<ggl::TextureAlphaMask::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

uint64_t ggl::ConstantDataTyped<ggl::TextureAlphaMask::View>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

uint64_t ggl::ConstantDataTyped<ggl::PostchainCommon::SsaoBlurParam>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::SpecularLandmark::LandmarkPipelineState::~LandmarkPipelineState(ggl::SpecularLandmark::LandmarkPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::SpecularBuilding::BuildingPipelineState::~BuildingPipelineState(ggl::SpecularBuilding::BuildingPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::VertexDataTyped<ggl::Glyph::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

uint64_t ggl::VertexDataTyped<ggl::Icon::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VenueWallShadow::MeshPipelineState::~MeshPipelineState(ggl::VenueWallShadow::MeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::GlobeAtmosphere::BasePipelineState::~BasePipelineState(ggl::GlobeAtmosphere::BasePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::DiffuseBuilding::BuildingPipelineState::~BuildingPipelineState(ggl::DiffuseBuilding::BuildingPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::PolygonOverlay::AntialiasPipelineState::~AntialiasPipelineState(ggl::PolygonOverlay::AntialiasPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MaskingOverlay::MaskingPipelineState::~MaskingPipelineState(ggl::MaskingOverlay::MaskingPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MaskingOverlay::FillPipelineState::~FillPipelineState(ggl::MaskingOverlay::FillPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::LandmarkFlat::LandmarkPipelineState::~LandmarkPipelineState(ggl::LandmarkFlat::LandmarkPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::BuildingFlat::CompressedMeshPipelineState::~CompressedMeshPipelineState(ggl::BuildingFlat::CompressedMeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::SolidRibbon::PipelineState::~PipelineState(ggl::SolidRibbon::PipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::LabelScene>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<unsigned char *,std::shared_ptr<unsigned char []>::__shared_ptr_default_delete<unsigned char [],unsigned char>,std::allocator<unsigned char>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x1A1AF4DE8);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_emplace<md::LabelText>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::Buffer,geo::StdAllocator<ggl::Buffer,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

void std::__shared_ptr_emplace<md::DaVinciAssetResource>::__on_zero_shared(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  geo::codec::Asset *v4;
  void *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = (_QWORD *)a1[25];
  while (v2)
  {
    v6 = v2;
    v2 = (_QWORD *)*v2;
    v7 = (std::__shared_weak_count *)v6[4];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    operator delete(v6);
  }
  v3 = (void *)a1[23];
  a1[23] = 0;
  if (v3)
    operator delete(v3);
  v4 = (geo::codec::Asset *)a1[22];
  a1[22] = 0;
  if (v4)
  {
    geo::codec::Asset::~Asset(v4);
    MEMORY[0x1A1AF4E00]();
  }
  v5 = (void *)a1[4];
  if (v5 != (void *)a1[6])
    free(v5);
}

uint64_t std::__shared_ptr_pointer<gss::ClientStyleState<gss::PropertyID> *,std::shared_ptr<gss::ClientStyleState<gss::PropertyID>>::__shared_ptr_default_delete<gss::ClientStyleState<gss::PropertyID>,gss::ClientStyleState<gss::PropertyID>>,std::allocator<gss::ClientStyleState<gss::PropertyID>>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<gss::ClientStyleState<gss::PropertyID>>::operator()[abi:nn180100](*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<md::RasterSharedRenderResources *,std::shared_ptr<md::RasterSharedRenderResources>::__shared_ptr_default_delete<md::RasterSharedRenderResources,md::RasterSharedRenderResources>,std::allocator<md::RasterSharedRenderResources>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_emplace<std::ifstream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::VenueWall::WallEndCapMeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::VenueWall::WallTopMeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::RouteLine::RouteLineMaskPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::RouteLine::PatternedBasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::RouteLine::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::Hillshade::Pos2DUVPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::GlowAlpha::MeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::Textured::ScreenTexturedQuadPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::Textured::Pos2DUVPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::Point::PipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::Debug::InstancedBasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::Debug::LinePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::Debug::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::Glow::MeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::Clut::Pos2DUVPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::Sky::SkyPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::Fog::FogPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::VenueOpenToBelowShadowAlpha::MeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::TextureWithReverseAlpha::Pos2DUVPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::BuildingPointyRoofDepth::BuildingPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::VenueOpenToBelowShadow::MeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::TexturedAnimatedRibbon::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::PolygonShadowedStroke::ShadowPathPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::TransitNodeColorized::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::RouteLineAlphaReset::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::BuildingFacadeDepth::BuildingPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::BuildingFlatStroke::BuildingFlatStrokePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::StandardPostchain::DownsampleDepthPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::StandardPostchain::DownsampleDepthPipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::StandardPostchain::DownsampleCoCPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::StandardPostchain::DownsampleCoCPipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::StandardPostchain::SSAOUpsamplePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::StandardPostchain::SSAOUpsamplePipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::StandardPostchain::DepthSplitPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::StandardPostchain::DepthSplitPipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::StandardPostchain::CompositePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::StandardPostchain::CompositePipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::StandardPostchain::FGBlurPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::StandardPostchain::FGBlurPipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::StandardPostchain::BGBlurPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::StandardPostchain::BGBlurPipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::GridBase::GridView>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Building::Fade>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::LightingDebugOptions>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Grid::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PostchainCommon::SsaoUpsampleParam>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PostchainCommon::CameraProperties>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::PostchainCommon::SSAOConstants>,geo::StdAllocator<ggl::ConstantDataTyped<ggl::PostchainCommon::SSAOConstants>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitNode::Settings>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::TextureAlphaMask::MeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::RouteLineTraffic::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::BuildingTopDepth::CompressedMeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::DaVinci::ScreenVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::DaVinci::ScreenVbo>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>,geo::StdAllocator<ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::PrefilteredLine::PrefilteredLinePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::DottedRouteLine::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::TransitNodeRGB::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::BuildingShadow::MeshPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::Venue3DStroke::VerticalVenue3DStrokePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::ManeuverPoint::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::LandmarkDepth::BuildingPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::GlobeStars::StarsPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<ggl::CommonMesh::Pos4Mesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::BuildingSharedRenderResources>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ggl::VenueWall::WallEndCapMeshPipelineState::~WallEndCapMeshPipelineState(ggl::VenueWall::WallEndCapMeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::VenueWall::WallTopMeshPipelineState::~WallTopMeshPipelineState(ggl::VenueWall::WallTopMeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::RouteLine::RouteLineMaskPipelineState::~RouteLineMaskPipelineState(ggl::RouteLine::RouteLineMaskPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::RouteLine::PatternedBasePipelineState::~PatternedBasePipelineState(ggl::RouteLine::PatternedBasePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::RouteLine::BasePipelineState::~BasePipelineState(ggl::RouteLine::BasePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Hillshade::Pos2DUVPipelineState::~Pos2DUVPipelineState(ggl::Hillshade::Pos2DUVPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::GlowAlpha::MeshPipelineState::~MeshPipelineState(ggl::GlowAlpha::MeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Textured::ScreenTexturedQuadPipelineState::~ScreenTexturedQuadPipelineState(ggl::Textured::ScreenTexturedQuadPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Textured::Pos2DUVPipelineState::~Pos2DUVPipelineState(ggl::Textured::Pos2DUVPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Point::PipelineState::~PipelineState(ggl::Point::PipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Debug::InstancedBasePipelineState::~InstancedBasePipelineState(ggl::Debug::InstancedBasePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Debug::LinePipelineState::~LinePipelineState(ggl::Debug::LinePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Debug::BasePipelineState::~BasePipelineState(ggl::Debug::BasePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Glow::MeshPipelineState::~MeshPipelineState(ggl::Glow::MeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Clut::Pos2DUVPipelineState::~Pos2DUVPipelineState(ggl::Clut::Pos2DUVPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Sky::SkyPipelineState::~SkyPipelineState(ggl::Sky::SkyPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Fog::FogPipelineState::~FogPipelineState(ggl::Fog::FogPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::VenueOpenToBelowShadowAlpha::MeshPipelineState::~MeshPipelineState(ggl::VenueOpenToBelowShadowAlpha::MeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::TextureWithReverseAlpha::Pos2DUVPipelineState::~Pos2DUVPipelineState(ggl::TextureWithReverseAlpha::Pos2DUVPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::BuildingPointyRoofDepth::BuildingPipelineState::~BuildingPipelineState(ggl::BuildingPointyRoofDepth::BuildingPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::VenueOpenToBelowShadow::MeshPipelineState::~MeshPipelineState(ggl::VenueOpenToBelowShadow::MeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::TexturedAnimatedRibbon::BasePipelineState::~BasePipelineState(ggl::TexturedAnimatedRibbon::BasePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::PolygonShadowedStroke::ShadowPathPipelineState::~ShadowPathPipelineState(ggl::PolygonShadowedStroke::ShadowPathPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::TransitNodeColorized::BasePipelineState::~BasePipelineState(ggl::TransitNodeColorized::BasePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::RouteLineAlphaReset::BasePipelineState::~BasePipelineState(ggl::RouteLineAlphaReset::BasePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::BuildingFacadeDepth::BuildingPipelineState::~BuildingPipelineState(ggl::BuildingFacadeDepth::BuildingPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::BuildingFlatStroke::BuildingFlatStrokePipelineState::~BuildingFlatStrokePipelineState(ggl::BuildingFlatStroke::BuildingFlatStrokePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::StandardPostchain::DownsampleDepthPipelineState::~DownsampleDepthPipelineState(ggl::StandardPostchain::DownsampleDepthPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::StandardPostchain::DownsampleCoCPipelineState::~DownsampleCoCPipelineState(ggl::StandardPostchain::DownsampleCoCPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::StandardPostchain::SSAOUpsamplePipelineState::~SSAOUpsamplePipelineState(ggl::StandardPostchain::SSAOUpsamplePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::StandardPostchain::DepthSplitPipelineState::~DepthSplitPipelineState(ggl::StandardPostchain::DepthSplitPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::StandardPostchain::CompositePipelineState::~CompositePipelineState(ggl::StandardPostchain::CompositePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::StandardPostchain::FGBlurPipelineState::~FGBlurPipelineState(ggl::StandardPostchain::FGBlurPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::StandardPostchain::BGBlurPipelineState::~BGBlurPipelineState(ggl::StandardPostchain::BGBlurPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::ConstantDataTyped<ggl::GridBase::GridView>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

uint64_t ggl::ConstantDataTyped<ggl::Building::Fade>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::LightingDebugOptions>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

uint64_t ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

uint64_t ggl::ConstantDataTyped<ggl::Grid::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

uint64_t ggl::ConstantDataTyped<ggl::PostchainCommon::SsaoUpsampleParam>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

uint64_t ggl::ConstantDataTyped<ggl::PostchainCommon::CameraProperties>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

uint64_t ggl::ConstantDataTyped<ggl::PostchainCommon::SSAOConstants>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

uint64_t ggl::ConstantDataTyped<ggl::TransitNode::Settings>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::TextureAlphaMask::MeshPipelineState::~MeshPipelineState(ggl::TextureAlphaMask::MeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::RouteLineTraffic::BasePipelineState::~BasePipelineState(ggl::RouteLineTraffic::BasePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::BuildingTopDepth::CompressedMeshPipelineState::~CompressedMeshPipelineState(ggl::BuildingTopDepth::CompressedMeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::VertexDataTyped<ggl::DaVinci::ScreenVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

uint64_t ggl::VertexDataTyped<ggl::CommonMesh::BufferPos4>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::PrefilteredLine::PrefilteredLinePipelineState::~PrefilteredLinePipelineState(ggl::PrefilteredLine::PrefilteredLinePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::DottedRouteLine::BasePipelineState::~BasePipelineState(ggl::DottedRouteLine::BasePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::TransitNodeRGB::BasePipelineState::~BasePipelineState(ggl::TransitNodeRGB::BasePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::BuildingShadow::MeshPipelineState::~MeshPipelineState(ggl::BuildingShadow::MeshPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineState::~HorizontalVenue3DStrokePipelineState(ggl::Venue3DStroke::HorizontalVenue3DStrokePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::Venue3DStroke::VerticalVenue3DStrokePipelineState::~VerticalVenue3DStrokePipelineState(ggl::Venue3DStroke::VerticalVenue3DStrokePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ManeuverPoint::BasePipelineState::~BasePipelineState(ggl::ManeuverPoint::BasePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::LandmarkDepth::BuildingPipelineState::~BuildingPipelineState(ggl::LandmarkDepth::BuildingPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::GlobeStars::StarsPipelineState::~StarsPipelineState(ggl::GlobeStars::StarsPipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ta2::TextureAtlasPage>::__on_zero_shared(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  char *v4;
  NSObject *v5;
  _BOOL4 v6;
  int32x2_t **v7;
  int32x2_t *v8;
  int32x2_t v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void **v14;
  void **v15;
  void *v16;
  void **v17;
  void *v18;
  char *v19;
  char *v20;
  char *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (GEOGetVectorKitTextureAtlasLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitTextureAtlasLog(void)::onceToken, &__block_literal_global_12980);
  v2 = GEOGetVectorKitTextureAtlasLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitTextureAtlasLog(void)::log, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(const char **)(a1 + 224);
    v37 = 134218240;
    v38 = a1 + 24;
    v39 = 2048;
    v40 = v3;
    _os_log_impl(&dword_19F029000, v2, OS_LOG_TYPE_DEBUG, "TextureAtlasPage: Destroying TextureAtlasPage %p with Texture2D %llu", (uint8_t *)&v37, 0x16u);
  }
  v4 = *(char **)(a1 + 368);
  if (v4 != *(char **)(a1 + 376))
  {
    if (GEOGetVectorKitTextureAtlasLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitTextureAtlasLog(void)::onceToken, &__block_literal_global_12980);
    v5 = GEOGetVectorKitTextureAtlasLog(void)::log;
    v6 = os_log_type_enabled((os_log_t)GEOGetVectorKitTextureAtlasLog(void)::log, OS_LOG_TYPE_ERROR);
    v7 = *(int32x2_t ***)(a1 + 368);
    v4 = *(char **)(a1 + 376);
    if (v6)
    {
      v37 = 134218754;
      v38 = (v4 - (char *)v7) >> 4;
      v39 = 2080;
      v40 = "_activeTextureRegions.empty()";
      v41 = 2080;
      v42 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/TextureAtlas2.cpp";
      v43 = 1024;
      v44 = 556;
      _os_log_impl(&dword_19F029000, v5, OS_LOG_TYPE_ERROR, "TextureAtlasPage: All textures should have been freed, since the atlas owns the textures. Destroyed page still has %lu active regions.: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v37, 0x26u);
      v7 = *(int32x2_t ***)(a1 + 368);
      v4 = *(char **)(a1 + 376);
    }
    if (v7 != (int32x2_t **)v4)
    {
      do
      {
        v8 = *v7;
        v7 += 2;
        v9 = vsub_s32(v8[5], v8[4]);
        v8[3] = 0;
        v8[4] = 0;
        v8[5] = v9;
        v8[6] = 0;
        v8[7] = 0;
      }
      while (v7 != (int32x2_t **)v4);
      v10 = *(char **)(a1 + 368);
      v4 = *(char **)(a1 + 376);
      if (v4 != v10)
      {
        do
        {
          v11 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
          if (v11)
          {
            p_shared_owners = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldaxr(p_shared_owners);
            while (__stlxr(v13 - 1, p_shared_owners));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v4 -= 16;
        }
        while (v4 != v10);
        v4 = v10;
      }
    }
  }
  *(_QWORD *)(a1 + 376) = v4;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 56))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 224));
  v14 = *(void ***)(a1 + 392);
  if (v14)
  {
    v15 = *(void ***)(a1 + 400);
    v16 = *(void **)(a1 + 392);
    if (v15 != v14)
    {
      v17 = *(void ***)(a1 + 400);
      do
      {
        v20 = (char *)*(v17 - 3);
        v17 -= 3;
        v19 = v20;
        if (v20)
        {
          v21 = (char *)*(v15 - 2);
          v18 = v19;
          if (v21 != v19)
          {
            do
            {
              v22 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
              if (v22)
              {
                v23 = (unint64_t *)&v22->__shared_owners_;
                do
                  v24 = __ldaxr(v23);
                while (__stlxr(v24 - 1, v23));
                if (!v24)
                {
                  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                  std::__shared_weak_count::__release_weak(v22);
                }
              }
              v21 -= 16;
            }
            while (v21 != v19);
            v18 = *v17;
          }
          *(v15 - 2) = v19;
          operator delete(v18);
        }
        v15 = v17;
      }
      while (v17 != v14);
      v16 = *(void **)(a1 + 392);
    }
    *(_QWORD *)(a1 + 400) = v14;
    operator delete(v16);
  }
  v25 = *(_QWORD *)(a1 + 368);
  if (v25)
  {
    v26 = *(_QWORD *)(a1 + 376);
    v27 = *(void **)(a1 + 368);
    if (v26 != v25)
    {
      do
      {
        v28 = *(std::__shared_weak_count **)(v26 - 8);
        if (v28)
        {
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v26 -= 16;
      }
      while (v26 != v25);
      v27 = *(void **)(a1 + 368);
    }
    *(_QWORD *)(a1 + 376) = v25;
    operator delete(v27);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 304));
  std::mutex::~mutex((std::mutex *)(a1 + 240));
  *(_QWORD *)(a1 + 48) = off_1E42B4798;
  *(_QWORD *)(a1 + 112) = off_1E42B5630;
  v31 = *(void **)(a1 + 168);
  if (v31)
  {
    *(_QWORD *)(a1 + 176) = v31;
    operator delete(v31);
  }
  v32 = *(void **)(a1 + 144);
  if (v32)
  {
    *(_QWORD *)(a1 + 152) = v32;
    operator delete(v32);
  }
  v33 = *(void **)(a1 + 80);
  if (v33)
  {
    *(_QWORD *)(a1 + 88) = v33;
    operator delete(v33);
  }
  v34 = *(std::__shared_weak_count **)(a1 + 40);
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

_QWORD *std::__shared_ptr_emplace<md::LabelFeatureProviderCommand>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void md::DaVinciElevationRasterLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int v19;
  int32x2_t *v20;
  int32x2_t v21;
  __int32 v22;
  __int32 v23;
  int v24;
  int v25;
  char v26;
  __int16 v27;
  std::__shared_weak_count *v28;
  float v29;
  unint64_t *v30;
  size_t v31;
  size_t v32;
  float v33;
  _QWORD *v34;
  float *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  void *__p[4];
  std::__shared_weak_count *v48;
  size_t v49;
  size_t v50;
  void *v51[2];
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  _QWORD v55[2];

  v7 = (unsigned __int16 *)*a3;
  v8 = (unsigned __int16 *)a3[1];
  if ((unsigned __int16 *)*a3 != v8)
  {
    while (*v7 != *(unsigned __int16 *)(a1 + 584))
    {
      v7 += 24;
      if (v7 == v8)
        goto LABEL_15;
    }
  }
  if (v7 == v8 || *((_QWORD *)v7 + 4) != 1)
  {
LABEL_15:
    v10 = 0;
    goto LABEL_16;
  }
  v9 = *((_QWORD *)v7 + 3);
  v10 = *(_QWORD *)(v9 + 112);
  v11 = *(std::__shared_weak_count **)(v9 + 120);
  if (!v11)
  {
LABEL_16:
    v53 = v10;
    v54 = 0;
    goto LABEL_17;
  }
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v53 = v10;
  v54 = v11;
  v14 = (unint64_t *)&v11->__shared_owners_;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 - 1, v14));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_17:
  v17 = v53;
  v18 = (_DWORD *)geo::codec::VectorTile::elevationRasterPng(*(geo::codec::VectorTile **)(v53 + 144));
  v19 = geo::codec::VectorTile::elevationRasterByteCount(*(geo::codec::VectorTile **)(v53 + 144));
  v51[0] = 0;
  v51[1] = 0;
  v52 = 0;
  v49 = 0;
  v50 = 0;
  if (md::ElevationRaster::decodePngElevationRaster(v18, v19, (char **)v51, &v50, &v49))
  {
    v46 = a2;
    v20 = *(int32x2_t **)(a2 + 16);
    v21 = *v20;
    v23 = v20[1].i32[0];
    v22 = v20[1].i32[1];
    v24 = geo::codec::VectorTile::maxElevationInMeters(*(geo::codec::VectorTile **)(v17 + 144));
    v25 = geo::codec::VectorTile::minElevationInMeters(*(geo::codec::VectorTile **)(v17 + 144));
    v26 = geo::codec::VectorTile::zResolutionBits(*(geo::codec::VectorTile **)(v17 + 144));
    v27 = geo::codec::VectorTile::minElevationInMeters(*(geo::codec::VectorTile **)(v17 + 144));
    v28 = (std::__shared_weak_count *)operator new(0x88uLL);
    v29 = (float)(v24 - v25);
    v28[1].std::__shared_count = *(std::__shared_count *)v51;
    v28->__shared_owners_ = 0;
    v30 = (unint64_t *)&v28->__shared_owners_;
    v28->__shared_weak_owners_ = 0;
    v28->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB358;
    v32 = v49;
    v31 = v50;
    v28[1].__shared_weak_owners_ = v52;
    v51[0] = 0;
    v51[1] = 0;
    v52 = 0;
    LOBYTE(v28[2].__vftable) = 16;
    v28[2].__shared_owners_ = v31;
    v28[2].__shared_weak_owners_ = v32;
    *(float *)&v28[3].__vftable = v29 / (float)(1 << (v26 - 1));
    WORD2(v28[3].__vftable) = v27;
    LOBYTE(v28[3].__shared_owners_) = v22;
    BYTE1(v28[3].__shared_owners_) = v23;
    *(int32x2_t *)((char *)&v28[3].__shared_owners_ + 4) = vrev64_s32(v21);
    LOWORD(v28[4].__shared_owners_) = 0;
    v28[4].__shared_weak_owners_ = 0;
    v28[5].__vftable = 0;
    LOBYTE(v28[5].__shared_owners_) = 0;
    __p[3] = &v28[1];
    v48 = v28;
    memset(__p, 0, 24);
    gdc::LayerDataSource::populateLoadMetadataListFromMap(*a3, a3[1], __p);
    v33 = geo::codec::VectorTile::tileSizeInMeters(*(geo::codec::VectorTile **)(v17 + 144));
    v34 = operator new(0x300uLL);
    v35 = (float *)v34;
    v34[1] = 0;
    v34[2] = 0;
    *v34 = &off_1E42DC938;
    v36 = v34 + 3;
    do
      v37 = __ldxr(v30);
    while (__stxr(v37 + 1, v30));
    v55[0] = 0;
    v55[1] = 0;
    md::MapTileData::MapTileData((uint64_t)(v34 + 3), v46, (uint64_t)__p, (uint64_t)v55, 1);
    *((_QWORD *)v35 + 3) = off_1E4292470;
    *((_QWORD *)v35 + 82) = &unk_1E42924D8;
    *((_QWORD *)v35 + 3) = &off_1E429CB38;
    *((_QWORD *)v35 + 82) = &unk_1E429CBA0;
    *((_QWORD *)v35 + 93) = v28 + 1;
    *((_QWORD *)v35 + 94) = v28;
    do
      v38 = __ldxr(v30);
    while (__stxr(v38 + 1, v30));
    v35[190] = v33;
    do
      v39 = __ldaxr(v30);
    while (__stlxr(v39 - 1, v30));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
    *a4 = v36;
    a4[1] = v35;
    if (__p[0])
      operator delete(__p[0]);
    v40 = v48;
    if (v48)
    {
      v41 = (unint64_t *)&v48->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
  if (v51[0])
    operator delete(v51[0]);
  v43 = v54;
  if (v54)
  {
    v44 = (unint64_t *)&v54->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_19F05D138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

CGDataProvider *karo::media::PngLoader::loadFromChunk(int *a1, void *data, size_t size, uint64_t a4)
{
  CGDataProvider *result;
  CGDataProvider *v9;
  CGImageSourceRef v10;
  CGImage *ImageAtIndex;
  CGColorSpace *ColorSpace;
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  size_t BitsPerComponent;
  size_t NumberOfComponents;
  uint64_t v18;
  char *v19;
  CGColorSpace *BaseColorSpace;
  uint8_t *v21;
  int v22;
  int *v23;
  unsigned int v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  unsigned __int8 *v30;
  size_t v31;
  unsigned int v32;
  size_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  _OWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  size_t v46;
  unint64_t v47;
  uint64_t v48;
  uint8_t *v49;
  _OWORD *v50;
  unint64_t v51;
  __int128 v52;
  size_t v53;
  _QWORD *v54;
  uint8_t *v55;
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  CGImageAlphaInfo AlphaInfo;
  int *v68;
  size_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;

  if (karo::media::PngLoader::loadFromChunk(karo::media::ImageFormat const&,unsigned char const*,unsigned long,karo::media::Image &)::onceToken != -1)
    dispatch_once(&karo::media::PngLoader::loadFromChunk(karo::media::ImageFormat const&,unsigned char const*,unsigned long,karo::media::Image &)::onceToken, &__block_literal_global_7300);
  result = CGDataProviderCreateWithData(0, data, size, 0);
  if (result)
  {
    v9 = result;
    v10 = CGImageSourceCreateWithDataProvider(result, (CFDictionaryRef)karo::media::PngLoader::loadFromChunk(karo::media::ImageFormat const&,unsigned char const*,unsigned long,karo::media::Image &)::options);
    CGDataProviderRelease(v9);
    if (!v10)
      return 0;
    if (!CGImageSourceGetCount(v10))
    {
      CFRelease(v10);
      return 0;
    }
    ImageAtIndex = CGImageSourceCreateImageAtIndex(v10, 0, (CFDictionaryRef)karo::media::PngLoader::loadFromChunk(karo::media::ImageFormat const&,unsigned char const*,unsigned long,karo::media::Image &)::options);
    CFRelease(v10);
    if (!ImageAtIndex)
      return 0;
    v68 = a1;
    CGImageGetImageProvider();
    ColorSpace = CGImageGetColorSpace(ImageAtIndex);
    Width = CGImageGetWidth(ImageAtIndex);
    Height = CGImageGetHeight(ImageAtIndex);
    BytesPerRow = CGImageGetBytesPerRow(ImageAtIndex);
    BitsPerComponent = CGImageGetBitsPerComponent(ImageAtIndex);
    NumberOfComponents = CGColorSpaceGetNumberOfComponents(ColorSpace);
    CGImageGetBitmapInfo(ImageAtIndex);
    AlphaInfo = CGImageGetAlphaInfo(ImageAtIndex);
    v69 = Height;
    v18 = CGImageProviderCopyImageBlockSetWithOptions();
    if ((BitsPerComponent >> 3) * NumberOfComponents != CGImageBlockSetGetPixelSize())
      ++NumberOfComponents;
    if (!v18 || CGImageBlockSetGetCount() != 1 || !CGImageBlockSetGetImageBlock())
    {
LABEL_79:
      CGImageBlockSetRelease();
      CGImageRelease(ImageAtIndex);
      return (CGDataProvider *)1;
    }
    v71 = 0;
    v72 = 0;
    v19 = (char *)CGImageBlockGetData();
    if (CGColorSpaceGetModel(ColorSpace) != kCGColorSpaceModelIndexed)
    {
      v35 = CGImageBlockGetBytesPerRow();
      std::make_shared[abi:nn180100]<ggl::Data,unsigned long,void>((ggl::Data **)&v70, BytesPerRow * v69);
      std::shared_ptr<md::LabelFeature>::operator=[abi:nn180100]((uint64_t)&v71, &v70);
      std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v70);
      v36 = *(_QWORD *)(v71 + 8);
      if (v35 == BytesPerRow)
      {
        memcpy(*(void **)(v71 + 8), v19, BytesPerRow * v69);
      }
      else if (v69)
      {
        v37 = 0;
        v38 = 1;
        do
        {
          memcpy((void *)(v36 + v37 * BytesPerRow), &v19[v37 * v35], BytesPerRow);
          v37 = v38++;
        }
        while (v69 > v37);
      }
      if (BitsPerComponent == 16)
      {
        v23 = v68;
        v22 = v69;
        v24 = AlphaInfo;
        if (NumberOfComponents == 1)
        {
          v39 = 7;
LABEL_65:
          karo::media::Image::setFormat(a4, v39);
        }
LABEL_66:
        v58 = *(_QWORD *)(a4 + 8);
        if (v58)
        {
          *(_DWORD *)v58 = Width;
          *(_DWORD *)(v58 + 4) = v22;
        }
        *(_BYTE *)(a4 + 104) = (v24 > 6) | (0x1Eu >> v24) & 1;
        *(_BYTE *)(a4 + 20) = *(_DWORD *)(a4 + 16) == 1;
        if (v58)
        {
          v59 = *(_QWORD **)(v58 + 16);
          v61 = v71;
          v60 = v72;
          if (v72)
          {
            v62 = (unint64_t *)(v72 + 8);
            do
              v63 = __ldxr(v62);
            while (__stxr(v63 + 1, v62));
          }
          v64 = (std::__shared_weak_count *)v59[1];
          *v59 = v61;
          v59[1] = v60;
          if (v64)
          {
            p_shared_owners = (unint64_t *)&v64->__shared_owners_;
            do
              v66 = __ldaxr(p_shared_owners);
            while (__stlxr(v66 - 1, p_shared_owners));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
        }
        if (!karo::media::Image::convertToFormat(a4, *v23))
        {
          CGImageBlockSetRelease();
          CGImageRelease(ImageAtIndex);
          std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v71);
          return 0;
        }
        std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v71);
        goto LABEL_79;
      }
      v23 = v68;
      v22 = v69;
      v24 = AlphaInfo;
      if (BitsPerComponent != 8)
        goto LABEL_66;
LABEL_59:
      switch(NumberOfComponents)
      {
        case 1uLL:
          v39 = 6;
          goto LABEL_65;
        case 4uLL:
          v39 = 1;
          goto LABEL_65;
        case 3uLL:
          v39 = 0;
          goto LABEL_65;
      }
      goto LABEL_66;
    }
    BaseColorSpace = CGColorSpaceGetBaseColorSpace(ColorSpace);
    NumberOfComponents = CGColorSpaceGetNumberOfComponents(BaseColorSpace);
    CGColorSpaceGetColorTableCount(ColorSpace);
    v21 = (uint8_t *)operator new[]();
    CGColorSpaceGetColorTable(ColorSpace, v21);
    v22 = v69;
    std::make_shared[abi:nn180100]<ggl::Data,unsigned long,void>((ggl::Data **)&v70, v69 * Width * NumberOfComponents);
    std::shared_ptr<md::LabelFeature>::operator=[abi:nn180100]((uint64_t)&v71, &v70);
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v70);
    v24 = AlphaInfo;
    v23 = v68;
    if (!v69 || !Width || !NumberOfComponents)
    {
LABEL_58:
      MEMORY[0x1A1AF4DE8](v21, 0x1000C8077774924);
      goto LABEL_59;
    }
    v25 = *(_QWORD *)(v71 + 8);
    v26 = Width * NumberOfComponents;
    if (NumberOfComponents < 8)
    {
      v27 = 0;
      v28 = (_BYTE *)(v25 + 3);
      do
      {
        v29 = v28;
        v30 = (unsigned __int8 *)v19;
        v31 = Width;
        do
        {
          v32 = *v30++;
          v33 = NumberOfComponents * v32;
          *(v29 - 3) = v21[v33];
          if (NumberOfComponents != 1)
          {
            *(v29 - 2) = v21[v33 + 1];
            if (NumberOfComponents != 2)
            {
              *(v29 - 1) = v21[v33 + 2];
              if (NumberOfComponents != 3)
              {
                *v29 = v21[v33 + 3];
                if (NumberOfComponents != 4)
                {
                  v29[1] = v21[v33 + 4];
                  if (NumberOfComponents != 5)
                  {
                    v34 = &v21[v33];
                    v29[2] = v34[5];
                    if (NumberOfComponents != 6)
                      v29[3] = v34[6];
                  }
                }
              }
            }
          }
          v29 += NumberOfComponents;
          --v31;
        }
        while (v31);
        ++v27;
        v19 += Width;
        v28 += v26;
      }
      while (v27 != v69);
      goto LABEL_58;
    }
    v40 = 0;
    v41 = (_OWORD *)(v25 + 16);
    v42 = *(_QWORD *)(v71 + 8);
LABEL_42:
    v43 = 0;
    v44 = v42;
    v45 = v41;
    while (1)
    {
      v46 = NumberOfComponents * v19[v43 + v40 * Width];
      if (v25 + v26 * v40 + NumberOfComponents * v43 - (unint64_t)&v21[v46] >= 0x20)
      {
        if (NumberOfComponents < 0x20)
        {
          v48 = 0;
LABEL_52:
          v53 = v48 - (NumberOfComponents & 0xFFFFFFFFFFFFFFF8);
          v54 = (_QWORD *)(v44 + v48);
          v55 = &v21[v48 + v46];
          do
          {
            v56 = *(_QWORD *)v55;
            v55 += 8;
            *v54++ = v56;
            v53 += 8;
          }
          while (v53);
          v47 = NumberOfComponents & 0xFFFFFFFFFFFFFFF8;
          if (NumberOfComponents == (NumberOfComponents & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_43;
          goto LABEL_55;
        }
        v49 = &v21[v46 + 16];
        v50 = v45;
        v51 = NumberOfComponents & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v52 = *(_OWORD *)v49;
          *(v50 - 1) = *((_OWORD *)v49 - 1);
          *v50 = v52;
          v50 += 2;
          v49 += 32;
          v51 -= 32;
        }
        while (v51);
        if (NumberOfComponents == (NumberOfComponents & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_43;
        v48 = NumberOfComponents & 0xFFFFFFFFFFFFFFE0;
        v47 = NumberOfComponents & 0xFFFFFFFFFFFFFFE0;
        if ((NumberOfComponents & 0x18) != 0)
          goto LABEL_52;
      }
      else
      {
        v47 = 0;
      }
LABEL_55:
      v57 = &v21[v46];
      do
      {
        *(_BYTE *)(v44 + v47) = v57[v47];
        ++v47;
      }
      while (NumberOfComponents != v47);
LABEL_43:
      ++v43;
      v45 = (_OWORD *)((char *)v45 + NumberOfComponents);
      v44 += NumberOfComponents;
      if (v43 == Width)
      {
        ++v40;
        v41 = (_OWORD *)((char *)v41 + v26);
        v42 += v26;
        if (v40 == v69)
          goto LABEL_58;
        goto LABEL_42;
      }
    }
  }
  return result;
}

void karo::media::Image::setFormat(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  *(_DWORD *)(a1 + 16) = a2;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      v5 = *(_QWORD *)(v3 + 24);
      v6 = *(void **)(v3 + 16);
      if (v5 != v4)
      {
        do
        {
          v7 = *(std::__shared_weak_count **)(v5 - 8);
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          v5 -= 16;
        }
        while (v5 != v4);
        v6 = *(void **)(v3 + 16);
      }
      *(_QWORD *)(v3 + 24) = v4;
      operator delete(v6);
    }
    MEMORY[0x1A1AF4E00](v3, 0x1020C4081634310);
    a2 = *(_DWORD *)(a1 + 16);
  }
  *(_QWORD *)(a1 + 8) = 0;
  if (a2 <= 28)
  {
    v10 = operator new();
    v11 = v10;
    v12 = *(unsigned int *)(a1 + 16);
    if (v12 > 0x1D)
      v13 = 2;
    else
      v13 = dword_19FFB8430[v12];
    *(_QWORD *)v10 = 0;
    *(_DWORD *)(v10 + 8) = v13;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 16) = 0;
    std::vector<std::shared_ptr<ggl::Data>>::__append(v10 + 16, 1uLL);
    *(_QWORD *)(a1 + 8) = v11;
  }
}

void std::vector<std::shared_ptr<ggl::Data>>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(*(void **)(a1 + 8), 16 * a2);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = ((uint64_t)v5 - *(_QWORD *)a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      abort();
    v9 = v4 - (_QWORD)v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v15;
    }
    else
    {
      do
      {
        v17 = *((_OWORD *)v5 - 1);
        v5 -= 2;
        *((_OWORD *)v13 - 1) = v17;
        v13 -= 16;
        *v5 = 0;
        v5[1] = 0;
      }
      while (v5 != v6);
      v5 = *(_QWORD **)a1;
      v18 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v15;
      while (v18 != v5)
      {
        v19 = (std::__shared_weak_count *)*(v18 - 1);
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v18 -= 2;
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void karo::media::Image::~Image(karo::media::Image *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;

  *(_QWORD *)this = &off_1E42C3568;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 24);
      v5 = *(void **)(v2 + 16);
      if (v4 != v3)
      {
        do
        {
          v6 = *(std::__shared_weak_count **)(v4 - 8);
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v4 -= 16;
        }
        while (v4 != v3);
        v5 = *(void **)(v2 + 16);
      }
      *(_QWORD *)(v2 + 24) = v3;
      operator delete(v5);
    }
    MEMORY[0x1A1AF4E00](v2, 0x1020C4081634310);
  }
  *((_QWORD *)this + 1) = 0;
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (!v9)
    goto LABEL_18;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v12)
      goto LABEL_24;
  }
  else
  {
LABEL_18:
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v12)
      goto LABEL_24;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_24:
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (!v15)
    goto LABEL_28;
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    v18 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    if (!v18)
      goto LABEL_34;
  }
  else
  {
LABEL_28:
    v18 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    if (!v18)
      goto LABEL_34;
  }
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_34:
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

{
  karo::media::Image::~Image(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL karo::media::Image::convertToFormat(uint64_t a1, int a2)
{
  _BOOL8 result;
  unsigned int v5;
  BOOL v6;
  int v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _BOOL4 v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  const char *v24;
  NSObject *v25;
  uint32_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int *v31;
  int v32;
  int v33;
  unsigned int v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _BYTE *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  _BYTE *v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  _BYTE *v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t shared_owners;
  int v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  _WORD *v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  _BYTE *v90;
  uint64_t v91;
  _QWORD *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  _BYTE *v97;
  unint64_t v98;
  _BYTE *v99;
  BOOL v101;
  BOOL v103;
  BOOL v104;
  uint64_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t *v108;
  int8x16_t v110;
  uint8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  uint8x16_t v116;
  uint64_t v117;
  int8x16_t *v118;
  uint8_t buf[4];
  int v120;
  __int16 v121;
  int v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  result = 1;
  if (a2 == 29)
    return result;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 == a2)
    return result;
  v6 = v5 > 6;
  v7 = (1 << v5) & 0x43;
  if (!v6 && v7 != 0)
  {
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_30;
    v10 = *(uint64_t **)(v9 + 16);
    v11 = *v10;
    v12 = (std::__shared_weak_count *)v10[1];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    if (v11)
    {
      v15 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 16);
      v16 = *v15;
      v17 = (std::__shared_weak_count *)v15[1];
      if (!v17)
      {
        v20 = *(_QWORD *)(v16 + 8) == 0;
        if (!v12)
          goto LABEL_29;
        goto LABEL_26;
      }
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v20 = *(_QWORD *)(v16 + 8) == 0;
      do
        v21 = __ldaxr(v18);
      while (__stlxr(v21 - 1, v18));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        if (!v12)
          goto LABEL_29;
        goto LABEL_26;
      }
    }
    else
    {
      v20 = 1;
    }
    if (!v12)
      goto LABEL_29;
LABEL_26:
    v27 = (unint64_t *)&v12->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (v20)
      {
LABEL_30:
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v29 = GEOGetVectorKitVKDefaultLog_log;
        result = os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR);
        if (result)
        {
          *(_WORD *)buf = 0;
          v24 = "Tried to convert image without base data.";
          v25 = v29;
          v26 = 2;
          goto LABEL_34;
        }
        return result;
      }
      goto LABEL_38;
    }
LABEL_29:
    if (v20)
      goto LABEL_30;
LABEL_38:
    v30 = 0;
    v31 = *(int **)(a1 + 8);
    v33 = *v31;
    v32 = v31[1];
    v34 = 1;
    v35 = 0;
    switch(v31[2])
    {
      case 0:
      case 22:
      case 23:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        v30 = 0;
        v34 = 0;
        goto LABEL_44;
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 19:
      case 20:
      case 21:
      case 25:
        break;
      case 6:
      case 7:
      case 8:
      case 9:
      case 26:
      case 42:
      case 43:
        v30 = 0;
        v34 = 2;
        goto LABEL_44;
      case 10:
      case 11:
      case 24:
        v34 = 3;
        goto LABEL_43;
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 27:
      case 58:
        v34 = 4;
LABEL_43:
        v30 = 1;
LABEL_44:
        v35 = 1;
        break;
      default:
        v35 = 0;
        break;
    }
    v36 = (uint64_t *)*((_QWORD *)v31 + 2);
    v37 = *v36;
    v38 = (std::__shared_weak_count *)v36[1];
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      v41 = *(_BYTE **)(v37 + 8);
      do
        v42 = __ldaxr(v39);
      while (__stlxr(v42 - 1, v39));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    else
    {
      v41 = *(_BYTE **)(v37 + 8);
    }
    v43 = (v32 * v33);
    switch(a2)
    {
      case 0:
        if (*(_DWORD *)(a1 + 16) != 1)
        {
          v51 = (std::__shared_weak_count *)operator new(0x30uLL);
          v51->__shared_owners_ = 0;
          v89 = (unint64_t *)&v51->__shared_owners_;
          v51->__shared_weak_owners_ = 0;
          v51->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E42D8;
          ggl::Data::Data((ggl::Data *)&v51[1], (3 * v43));
          if ((_DWORD)v43)
          {
            v90 = (_BYTE *)(v51[1].__shared_owners_ + 2);
            do
            {
              *(v90 - 2) = *v41;
              *(v90 - 1) = v41[v30];
              *v90 = v41[2 * v30];
              v90 += 3;
              v41 += v34;
              --v43;
            }
            while (v43);
          }
          karo::media::Image::setFormat(a1, 0);
          v91 = *(_QWORD *)(a1 + 8);
          if (v91)
          {
            *(_DWORD *)v91 = v33;
            *(_DWORD *)(v91 + 4) = v32;
            v92 = *(_QWORD **)(v91 + 16);
            do
              v93 = __ldxr(v89);
            while (__stxr(v93 + 1, v89));
            v94 = (std::__shared_weak_count *)v92[1];
            *v92 = v51 + 1;
            v92[1] = v51;
            if (v94)
            {
              v95 = (unint64_t *)&v94->__shared_owners_;
              do
                v96 = __ldaxr(v95);
              while (__stlxr(v96 - 1, v95));
              if (!v96)
              {
                ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                std::__shared_weak_count::__release_weak(v94);
              }
            }
          }
          do
            v60 = __ldaxr(v89);
          while (__stlxr(v60 - 1, v89));
          goto LABEL_124;
        }
        v44 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 16);
        v45 = *v44;
        v46 = (std::__shared_weak_count *)v44[1];
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
          v49 = *(_QWORD *)(v45 + 8);
          do
            v50 = __ldaxr(v47);
          while (__stlxr(v50 - 1, v47));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        else
        {
          v49 = *(_QWORD *)(v45 + 8);
        }
        if ((_DWORD)v43)
        {
          v97 = (_BYTE *)(v49 + 2);
          do
          {
            *(v97 - 2) = *v41;
            *(v97 - 1) = v41[v30];
            *v97 = v41[2 * v30];
            v97 += 3;
            v41 += v34;
            --v43;
          }
          while (v43);
        }
        *(_DWORD *)(a1 + 16) = 0;
        *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8) = 10;
        return 1;
      case 1:
        v51 = (std::__shared_weak_count *)operator new(0x30uLL);
        v51->__shared_owners_ = 0;
        v52 = (unint64_t *)&v51->__shared_owners_;
        v51->__shared_weak_owners_ = 0;
        v51->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E42D8;
        ggl::Data::Data((ggl::Data *)&v51[1], (4 * v33 * v32));
        if ((_DWORD)v43)
        {
          v53 = (_BYTE *)(v51[1].__shared_owners_ + 3);
          do
          {
            *(v53 - 3) = *v41;
            *(v53 - 2) = v41[v30];
            *(v53 - 1) = v41[2 * v30];
            *v53 = -1;
            v53 += 4;
            v41 += v34;
            --v43;
          }
          while (v43);
        }
        karo::media::Image::setFormat(a1, 1);
        v54 = *(_QWORD *)(a1 + 8);
        if (v54)
        {
          *(_DWORD *)v54 = v33;
          *(_DWORD *)(v54 + 4) = v32;
          v55 = *(_QWORD **)(v54 + 16);
          do
            v56 = __ldxr(v52);
          while (__stxr(v56 + 1, v52));
          v57 = (std::__shared_weak_count *)v55[1];
          *v55 = v51 + 1;
          v55[1] = v51;
          if (v57)
          {
            v58 = (unint64_t *)&v57->__shared_owners_;
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
        }
        do
          v60 = __ldaxr(v52);
        while (__stlxr(v60 - 1, v52));
        goto LABEL_124;
      case 8:
        v51 = (std::__shared_weak_count *)operator new(0x30uLL);
        v51->__shared_owners_ = 0;
        v61 = (unint64_t *)&v51->__shared_owners_;
        v51->__shared_weak_owners_ = 0;
        v51->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E42D8;
        ggl::Data::Data((ggl::Data *)&v51[1], 2 * (v32 * v33));
        if ((_DWORD)v43)
        {
          v62 = (_BYTE *)(v51[1].__shared_owners_ + 1);
          do
          {
            *(v62 - 1) = *v41;
            *v62 = v41[v30];
            v62 += 2;
            v41 += v34;
            --v43;
          }
          while (v43);
        }
        karo::media::Image::setFormat(a1, 8);
        v63 = *(_QWORD *)(a1 + 8);
        if (v63)
        {
          *(_DWORD *)v63 = v33;
          *(_DWORD *)(v63 + 4) = v32;
          v64 = *(_QWORD **)(v63 + 16);
          do
            v65 = __ldxr(v61);
          while (__stxr(v65 + 1, v61));
          v66 = (std::__shared_weak_count *)v64[1];
          *v64 = v51 + 1;
          v64[1] = v51;
          if (v66)
          {
            v67 = (unint64_t *)&v66->__shared_owners_;
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
        }
        do
          v60 = __ldaxr(v61);
        while (__stlxr(v60 - 1, v61));
LABEL_124:
        if (v60)
          return 1;
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        v88 = v51;
        goto LABEL_127;
      case 14:
        v70 = (std::__shared_weak_count *)operator new(0x30uLL);
        v70->__shared_owners_ = 0;
        v71 = (unint64_t *)&v70->__shared_owners_;
        v70->__shared_weak_owners_ = 0;
        v70->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E42D8;
        ggl::Data::Data((ggl::Data *)&v70[1], (2 * v43));
        if (!(_DWORD)v43)
          goto LABEL_101;
        shared_owners = v70[1].__shared_owners_;
        v73 = 2 * v30;
        if (v43 <= 7 || (__CFADD__(v73, v43 - 1) ? (v74 = 1) : (v74 = v35), (v74 & 1) != 0))
        {
          v75 = 0;
          goto LABEL_99;
        }
        v75 = 0;
        v98 = shared_owners + 2 * v43;
        v99 = &v41[2 * v30];
        v101 = shared_owners < (unint64_t)&v41[v30 + v43] && (unint64_t)&v41[v30] < v98;
        v103 = shared_owners < (unint64_t)&v41[v43] && (unint64_t)v41 < v98;
        v104 = (unint64_t)v99 >= v98 || shared_owners >= (unint64_t)&v99[v43];
        if (!v104 || v101 || v103)
          goto LABEL_99;
        if (v43 >= 0x10)
        {
          v105 = 0;
          v75 = v43 & 0xFFFFFFF0;
          v106.i64[0] = 0xF8F8F8F8F8F8F8F8;
          v106.i64[1] = 0xF8F8F8F8F8F8F8F8;
          v107.i64[0] = 0xFCFCFCFCFCFCFCFCLL;
          v107.i64[1] = 0xFCFCFCFCFCFCFCFCLL;
          v108 = (int8x16_t *)v70[1].__shared_owners_;
          do
          {
            _Q2 = vandq_s8(*(int8x16_t *)&v41[v105 & 0xFFFFFFF0], v106);
            v110 = (int8x16_t)vshll_n_s8(*(int8x8_t *)_Q2.i8, 8uLL);
            __asm { SHLL2           V2.8H, V2.16B, #8 }
            v113 = (uint8x16_t)vandq_s8(*(int8x16_t *)&v41[v30 + v105], v107);
            v114 = vorrq_s8((int8x16_t)vshll_high_n_u8(v113, 3uLL), _Q2);
            v115 = vorrq_s8((int8x16_t)vshll_n_u8(*(uint8x8_t *)v113.i8, 3uLL), v110);
            v116 = vshrq_n_u8(*(uint8x16_t *)&v41[2 * v30 + v105], 3uLL);
            *v108 = vorrq_s8(v115, (int8x16_t)vmovl_u8(*(uint8x8_t *)v116.i8));
            v108[1] = vorrq_s8(v114, (int8x16_t)vmovl_high_u8(v116));
            v108 += 2;
            v105 += 16;
          }
          while (v75 != v105);
          if (v75 == v43)
            goto LABEL_101;
          if ((((_BYTE)v32 * (_BYTE)v33) & 8) == 0)
          {
LABEL_99:
            v76 = v43 - v75;
            v77 = v34 * v75;
            v78 = (_WORD *)(shared_owners + 2 * v75);
            do
            {
              *v78 = 0;
              v79 = (v41[v77] & 0xF8) << 8;
              *v78 = v79;
              v80 = v79 & 0xFFFFF81F | (32 * (((v41[v30 + v77] & 0xFC) >> 2) & 0x3F));
              *v78 = v80;
              *v78++ = v80 | (v41[v73 + v77] >> 3);
              v77 += v34;
              --v76;
            }
            while (v76);
            goto LABEL_101;
          }
        }
        else
        {
          v75 = 0;
        }
        v117 = v75;
        v75 = v43 & 0xFFFFFFF8;
        v118 = (int8x16_t *)(shared_owners + 2 * v117);
        do
        {
          *v118++ = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u8((uint8x8_t)vand_s8(*(int8x8_t *)&v41[v30 + v117], (int8x8_t)0xFCFCFCFCFCFCFCFCLL), 3uLL), (int8x16_t)vshll_n_s8(vand_s8(*(int8x8_t *)&v41[v117 & 0xFFFFFFF8], (int8x8_t)0xF8F8F8F8F8F8F8F8), 8uLL)), (int8x16_t)vmovl_u8(vshr_n_u8(*(uint8x8_t *)&v41[2 * v30 + v117], 3uLL)));
          v117 += 8;
        }
        while (v75 != v117);
        if (v75 != v43)
          goto LABEL_99;
LABEL_101:
        karo::media::Image::setFormat(a1, 14);
        v81 = *(_QWORD *)(a1 + 8);
        if (v81)
        {
          *(_DWORD *)v81 = v33;
          *(_DWORD *)(v81 + 4) = v32;
          v82 = *(_QWORD **)(v81 + 16);
          do
            v83 = __ldxr(v71);
          while (__stxr(v83 + 1, v71));
          v84 = (std::__shared_weak_count *)v82[1];
          *v82 = v70 + 1;
          v82[1] = v70;
          if (v84)
          {
            v85 = (unint64_t *)&v84->__shared_owners_;
            do
              v86 = __ldaxr(v85);
            while (__stlxr(v86 - 1, v85));
            if (!v86)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
            }
          }
        }
        do
          v87 = __ldaxr(v71);
        while (__stlxr(v87 - 1, v71));
        if (v87)
          return 1;
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        v88 = v70;
LABEL_127:
        std::__shared_weak_count::__release_weak(v88);
        return 1;
      default:
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
        v69 = GEOGetVectorKitVKDefaultLog_log;
        result = os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR);
        if (!result)
          return result;
        *(_DWORD *)buf = 67109120;
        v120 = a2;
        v24 = "Unable to convert to %d";
        v25 = v69;
        v26 = 8;
        goto LABEL_34;
    }
  }
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v22 = GEOGetVectorKitVKDefaultLog_log;
  result = os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v23 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)buf = 67109376;
    v120 = v23;
    v121 = 1024;
    v122 = a2;
    v24 = "Failed to convert image from: %d to %d";
    v25 = v22;
    v26 = 14;
LABEL_34:
    _os_log_impl(&dword_19F029000, v25, OS_LOG_TYPE_ERROR, v24, buf, v26);
    return 0;
  }
  return result;
}

void std::vector<md::TileSelectionTileSetType>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  unint64_t v22;
  __int128 v23;
  __int16 v24;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 1)
  {
    if (a2)
    {
      bzero(v5, 2 * a2);
      v6 = &v5[2 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 1;
    v10 = (v8 >> 1) + a2;
    if (v10 < 0)
      abort();
    v11 = v4 - (_QWORD)v7;
    if (v11 > v10)
      v10 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 < 0)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = operator new(2 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[2 * v9];
    v15 = 2 * a2;
    v16 = &v13[2 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 2;
      if (v18 < 0x1E)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 1) + 1;
      v6 = &v5[-2 * (v19 & 0xFFFFFFFFFFFFFFF0)];
      v20 = &v13[2 * v9 - 16];
      v21 = v5 - 16;
      v22 = v19 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 16;
      }
      while (v22);
      v14 -= 2 * (v19 & 0xFFFFFFFFFFFFFFF0);
      if (v19 != (v19 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_29:
        do
        {
          v24 = *((_WORD *)v6 - 1);
          v6 -= 2;
          *((_WORD *)v14 - 1) = v24;
          v14 -= 2;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void std::vector<unsigned short>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _OWORD *v21;
  char *v22;
  unint64_t v23;
  __int128 v24;
  __int16 v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 1)
  {
    if (a2)
    {
      bzero(v5, 2 * a2);
      v6 = &v5[2 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 1;
    v10 = (v8 >> 1) + a2;
    if (v10 < 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v11 = v4 - (_QWORD)v7;
    if (v11 > v10)
      v10 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 < 0)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(2 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[2 * v9];
    v15 = 2 * a2;
    v16 = &v13[2 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 2;
      if (v18 < 0x1E)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 1) + 1;
      v20 = 2 * (v19 & 0xFFFFFFFFFFFFFFF0);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[2 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 16;
      }
      while (v23);
      if (v19 != (v19 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_29:
        do
        {
          v25 = *((_WORD *)v6 - 1);
          v6 -= 2;
          *((_WORD *)v14 - 1) = v25;
          v14 -= 2;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

uint64_t geo::Triangulator<float,unsigned short>::earclipPolygon(uint64_t a1, _QWORD *a2, char **a3)
{
  float *v3;
  float *v4;
  uint64_t *v5;
  float *v6;
  uint64_t *v7;
  char **v8;
  uint64_t v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float v14;
  float v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  float *v24;
  float *v25;
  float *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  int v33;
  float v34;
  float v35;
  double v36;
  double v37;
  unsigned __int16 *v38;
  float *v39;
  float v40;
  float v41;
  float v42;
  float *v43;
  double v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  int v48;
  unsigned int v49;
  double v50;
  double v51;
  int v52;
  float v53;
  float v54;
  double v55;
  double v56;
  float *v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  double v63;
  double v64;
  double v65;
  double v66;
  int v67;
  float v68;
  float v69;
  double v70;
  double v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  char *v86;
  unint64_t v87;
  __int128 v88;
  __int16 v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  char *v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  __int16 v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  char *v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  __int16 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _OWORD *v119;
  char *v120;
  unint64_t v121;
  __int128 v122;
  uint64_t v123;
  _OWORD *v124;
  char *v125;
  unint64_t v126;
  __int128 v127;
  _QWORD *v128;
  const std::locale::facet *v129;
  uint64_t result;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  const std::locale::facet *v140;
  unint64_t v141;
  float *v142;
  _QWORD *v144;
  std::string *v145;
  std::string::size_type size;
  _QWORD *v147;
  const std::locale::facet *v148;
  _QWORD *v149;
  float *v150;
  std::string *v151;
  std::string::size_type v152;
  const std::locale::facet *v153;
  uint64_t v154;
  uint64_t v155;
  float *v156;
  float *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  float *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  std::string v174;
  std::locale v175;

  if (!a2)
  {
    v128 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Called earclipPolygon with a NULL head. Probably wrong to do so.", 64);
    std::ios_base::getloc((const std::ios_base *)((char *)v128 + *(_QWORD *)(*v128 - 24)));
    v129 = std::locale::use_facet((const std::locale *)&v174, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v129->__vftable[2].~facet_0)(v129, 10);
    std::locale::~locale((std::locale *)&v174);
    std::ostream::put();
    std::ostream::flush();
    return 0;
  }
  v3 = (float *)a2;
  v5 = a2 + 2;
  v4 = (float *)a2[2];
  v7 = a2 + 3;
  v6 = (float *)a2[3];
  if (v4 == v6)
    return 1;
  v8 = a3;
  v9 = a1;
  v10 = (float *)a2;
  while (1)
  {
    while (1)
    {
      v11 = v4;
      v12 = v6;
      v14 = v4[1];
      v13 = v4 + 1;
      v15 = v14;
      v16 = v10 + 1;
      v17 = v10[1];
      v18 = v6[1];
      v19 = v10[2];
      v20 = v13 + 1;
      v21 = v13[1];
      v22 = v6[2];
      if ((float)((float)((float)(v19 - v22) * (float)(v17 - v14)) + (float)((float)(v18 - v17) * (float)(v19 - v21))) > 0.0)
        goto LABEL_5;
      v23 = *(float *)(v9 + 64);
      if (v23 == 0.0)
        break;
      if (v15 >= v17)
      {
        if (v17 >= v18)
          v24 = v6 + 1;
        else
          v24 = v10 + 1;
        if (v21 >= v19)
        {
LABEL_14:
          v25 = v10 + 2;
          if (v19 >= v22)
            v25 = v6 + 2;
          goto LABEL_34;
        }
      }
      else
      {
        if (v15 >= v18)
          v24 = v6 + 1;
        else
          v24 = v13;
        if (v21 >= v19)
          goto LABEL_14;
      }
      if (v21 >= v22)
        v25 = v6 + 2;
      else
        v25 = v13 + 1;
LABEL_34:
      if (v17 <= v18)
        v16 = v6 + 1;
      if (v15 <= v18)
        v13 = v6 + 1;
      if (v15 > v17)
        v16 = v13;
      if (v19 <= v22)
        v38 = (unsigned __int16 *)(v6 + 2);
      else
        v38 = (unsigned __int16 *)(v10 + 2);
      if (v21 <= v22)
        v39 = v6 + 2;
      else
        v39 = v20;
      if (v21 <= v19)
        v39 = (float *)v38;
      v40 = 1.0 / v23;
      v42 = *(float *)(v9 + 48);
      v41 = *(float *)(v9 + 52);
      v43 = (float *)*((_QWORD *)v10 + 5);
      v44 = v15;
      if (v43)
      {
        v45 = (float)((float)((float)(*v16 - v42) * 65535.0) * v40);
        v46 = (float)((float)((float)(*v39 - v41) * 65535.0) * v40);
        v47 = (v45 | (v45 << 8)) & 0xF000F | (16 * ((v45 | (v45 << 8)) & 0xFF00FF)) & 0xF0F0F0F;
        v48 = (v46 | (v46 << 8)) & 0xF000F | (16 * ((v46 | (v46 << 8)) & 0xFF00FF)) & 0xF0F0F0F;
        v49 = ((4 * ((v48 | (4 * v48)) & 0x33333333)) | (2 * ((v48 | (4 * v48)) & 0x33333333))) & 0xAAAAAAAA | (v47 | (4 * v47)) & 0x11111111 | (2 * ((v47 | (4 * v47)) & 0x33333333)) & 0x55555555;
        v50 = v18;
        v51 = v44 - v50;
        while (*((_DWORD *)v43 + 12) <= v49)
        {
          if (v43 != v11 && v43 != v12)
          {
            v52 = *(unsigned __int16 *)v43;
            if (*(unsigned __int16 *)v11 != v52 && *(unsigned __int16 *)v10 != v52 && *(unsigned __int16 *)v12 != v52)
            {
              v53 = v43[1];
              v54 = v43[2];
              if ((float)((float)((float)(v54 - *(float *)(*((_QWORD *)v43 + 3) + 8))
                                 * (float)(v53 - *(float *)(*((_QWORD *)v43 + 2) + 4)))
                         + (float)((float)(*(float *)(*((_QWORD *)v43 + 3) + 4) - v53)
                                 * (float)(v54 - *(float *)(*((_QWORD *)v43 + 2) + 8)))) >= 0.0)
              {
                v55 = v53;
                v56 = v54;
                if ((v44 - v55) * (v19 - v21) + (v56 - v21) * (v17 - v44) >= 0.0
                  && (v17 - v55) * (v22 - v19) + (v56 - v19) * (v50 - v17) >= 0.0
                  && (v50 - v55) * (v21 - v22) + (v56 - v22) * v51 >= 0.0)
                {
                  goto LABEL_5;
                }
              }
            }
          }
          v43 = (float *)*((_QWORD *)v43 + 5);
          if (!v43)
            break;
        }
      }
      else
      {
        v50 = v18;
        v51 = v44 - v50;
      }
      v57 = (float *)*((_QWORD *)v10 + 4);
      if (v57)
      {
        v58 = ((float)((float)((float)(*v24 - v42) * 65535.0) * v40) | ((float)((float)((float)(*v24 - v42) * 65535.0) * v40) << 8)) & 0xFF00FF;
        v59 = (v58 | (16 * v58)) & 0x3030303 | (4 * ((v58 | (16 * v58)) & 0xF0F0F0F)) & 0x33333333;
        v60 = ((float)((float)((float)(*v25 - v41) * 65535.0) * v40) | ((float)((float)((float)(*v25 - v41) * 65535.0) * v40) << 8)) & 0xFF00FF;
        v61 = (v60 | (16 * v60)) & 0x3030303 | (4 * ((v60 | (16 * v60)) & 0xF0F0F0F)) & 0x33333333;
        v62 = ((4 * v61) | (2 * v61)) & 0xAAAAAAAA | (v59 | (2 * v59)) & 0x55555555;
        v63 = v21;
        v64 = v17;
        v65 = v19;
        v66 = v22;
        while (*((_DWORD *)v57 + 12) >= v62)
        {
          if (v57 != v11 && v57 != v12)
          {
            v67 = *(unsigned __int16 *)v57;
            if (*(unsigned __int16 *)v11 != v67 && *(unsigned __int16 *)v10 != v67 && *(unsigned __int16 *)v12 != v67)
            {
              v68 = v57[1];
              v69 = v57[2];
              if ((float)((float)((float)(v69 - *(float *)(*((_QWORD *)v57 + 3) + 8))
                                 * (float)(v68 - *(float *)(*((_QWORD *)v57 + 2) + 4)))
                         + (float)((float)(*(float *)(*((_QWORD *)v57 + 3) + 4) - v68)
                                 * (float)(v69 - *(float *)(*((_QWORD *)v57 + 2) + 8)))) >= 0.0)
              {
                v70 = v68;
                v71 = v69;
                if ((v44 - v70) * (v65 - v63) + (v71 - v63) * (v64 - v44) >= 0.0
                  && (v64 - v70) * (v66 - v65) + (v71 - v65) * (v50 - v64) >= 0.0
                  && (v50 - v70) * (v63 - v66) + (v71 - v66) * v51 >= 0.0)
                {
                  goto LABEL_5;
                }
              }
            }
          }
          v57 = (float *)*((_QWORD *)v57 + 4);
          if (!v57)
            break;
        }
      }
LABEL_77:
      v73 = v8[1];
      v72 = v8[2];
      if (v73 < v72)
      {
        *(_WORD *)v73 = *(_WORD *)v11;
        v74 = v73 + 2;
        goto LABEL_100;
      }
      v75 = *v8;
      v76 = v73 - *v8;
      if (v76 <= -3)
        goto LABEL_245;
      v77 = v76 >> 1;
      v78 = v72 - v75;
      if (v78 <= (v76 >> 1) + 1)
        v79 = v77 + 1;
      else
        v79 = v78;
      if (v78 >= 0x7FFFFFFFFFFFFFFELL)
        v79 = 0x7FFFFFFFFFFFFFFFLL;
      v169 = v79;
      if (v79)
      {
        if (v79 < 0)
          goto LABEL_246;
        v80 = operator new(2 * v79);
      }
      else
      {
        v80 = 0;
      }
      v81 = &v80[2 * v77];
      *(_WORD *)v81 = *(_WORD *)v11;
      v74 = v81 + 2;
      if (v73 == v75)
      {
        v8 = a3;
        goto LABEL_98;
      }
      v82 = v73 - 2 - v75;
      if (v82 < 0x1E)
      {
        v8 = a3;
        do
        {
LABEL_97:
          v89 = *((_WORD *)v73 - 1);
          v73 -= 2;
          *((_WORD *)v81 - 1) = v89;
          v81 -= 2;
        }
        while (v73 != v75);
        goto LABEL_98;
      }
      v83 = v73 - v80 - (v76 & 0xFFFFFFFFFFFFFFFELL);
      v8 = a3;
      if (v83 < 0x20)
        goto LABEL_97;
      v84 = (v82 >> 1) + 1;
      v85 = &v80[2 * v77 - 16];
      v86 = v73 - 16;
      v87 = v84 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v88 = *(_OWORD *)v86;
        *(v85 - 1) = *((_OWORD *)v86 - 1);
        *v85 = v88;
        v85 -= 2;
        v86 -= 32;
        v87 -= 16;
      }
      while (v87);
      v81 -= 2 * (v84 & 0xFFFFFFFFFFFFFFF0);
      v73 -= 2 * (v84 & 0xFFFFFFFFFFFFFFF0);
      if (v84 != (v84 & 0xFFFFFFFFFFFFFFF0))
        goto LABEL_97;
LABEL_98:
      v72 = &v80[2 * v169];
      *v8 = v81;
      v8[1] = v74;
      v8[2] = v72;
      if (v75)
      {
        operator delete(v75);
        v72 = v8[2];
      }
LABEL_100:
      v8[1] = v74;
      if (v74 < v72)
      {
        *(_WORD *)v74 = *(_WORD *)v10;
        v90 = v74 + 2;
        goto LABEL_121;
      }
      v91 = *v8;
      v92 = v74 - *v8;
      if (v92 <= -3)
        goto LABEL_245;
      v93 = v92 >> 1;
      v94 = v72 - v91;
      if (v94 <= (v92 >> 1) + 1)
        v95 = v93 + 1;
      else
        v95 = v94;
      if (v94 >= 0x7FFFFFFFFFFFFFFELL)
        v95 = 0x7FFFFFFFFFFFFFFFLL;
      v170 = v95;
      if (v95)
      {
        if (v95 < 0)
          goto LABEL_246;
        v96 = operator new(2 * v95);
      }
      else
      {
        v96 = 0;
      }
      v97 = &v96[2 * v93];
      *(_WORD *)v97 = *(_WORD *)v10;
      v90 = v97 + 2;
      if (v74 == v91)
      {
        v8 = a3;
        v100 = v170;
        goto LABEL_119;
      }
      v98 = v74 - 2 - v91;
      if (v98 < 0x1E || v74 - v96 - (v92 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
      {
        v99 = v74;
        v8 = a3;
        v100 = v170;
        do
        {
LABEL_116:
          v101 = *((_WORD *)v99 - 1);
          v99 -= 2;
          *((_WORD *)v97 - 1) = v101;
          v97 -= 2;
        }
        while (v99 != v91);
        goto LABEL_119;
      }
      v118 = (v98 >> 1) + 1;
      v99 = &v74[-2 * (v118 & 0xFFFFFFFFFFFFFFF0)];
      v119 = &v96[2 * v93 - 16];
      v120 = v74 - 16;
      v121 = v118 & 0xFFFFFFFFFFFFFFF0;
      v8 = a3;
      do
      {
        v122 = *(_OWORD *)v120;
        *(v119 - 1) = *((_OWORD *)v120 - 1);
        *v119 = v122;
        v119 -= 2;
        v120 -= 32;
        v121 -= 16;
      }
      while (v121);
      v97 -= 2 * (v118 & 0xFFFFFFFFFFFFFFF0);
      v100 = v170;
      if (v118 != (v118 & 0xFFFFFFFFFFFFFFF0))
        goto LABEL_116;
LABEL_119:
      v72 = &v96[2 * v100];
      *v8 = v97;
      v8[1] = v90;
      v8[2] = v72;
      if (v91)
      {
        operator delete(v91);
        v72 = v8[2];
      }
LABEL_121:
      v8[1] = v90;
      if (v90 < v72)
      {
        *(_WORD *)v90 = *(_WORD *)v12;
        v102 = v90 + 2;
        goto LABEL_142;
      }
      v103 = *v8;
      v104 = v90 - *v8;
      if (v104 <= -3)
LABEL_245:
        abort();
      v105 = v104 >> 1;
      v106 = v72 - v103;
      if (v106 <= (v104 >> 1) + 1)
        v107 = v105 + 1;
      else
        v107 = v106;
      if (v106 >= 0x7FFFFFFFFFFFFFFELL)
        v107 = 0x7FFFFFFFFFFFFFFFLL;
      v171 = v107;
      if (v107)
      {
        if (v107 < 0)
LABEL_246:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v108 = operator new(2 * v107);
      }
      else
      {
        v108 = 0;
      }
      v109 = &v108[2 * v105];
      *(_WORD *)v109 = *(_WORD *)v12;
      v102 = v109 + 2;
      if (v90 == v103)
      {
        v8 = a3;
        v112 = v171;
        goto LABEL_140;
      }
      v110 = v90 - 2 - v103;
      if (v110 < 0x1E || v90 - v108 - (v104 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
      {
        v111 = v90;
        v8 = a3;
        v112 = v171;
        do
        {
LABEL_137:
          v113 = *((_WORD *)v111 - 1);
          v111 -= 2;
          *((_WORD *)v109 - 1) = v113;
          v109 -= 2;
        }
        while (v111 != v103);
        goto LABEL_140;
      }
      v123 = (v110 >> 1) + 1;
      v111 = &v90[-2 * (v123 & 0xFFFFFFFFFFFFFFF0)];
      v124 = &v108[2 * v105 - 16];
      v125 = v90 - 16;
      v126 = v123 & 0xFFFFFFFFFFFFFFF0;
      v8 = a3;
      do
      {
        v127 = *(_OWORD *)v125;
        *(v124 - 1) = *((_OWORD *)v125 - 1);
        *v124 = v127;
        v124 -= 2;
        v125 -= 32;
        v126 -= 16;
      }
      while (v126);
      v109 -= 2 * (v123 & 0xFFFFFFFFFFFFFFF0);
      v112 = v171;
      if (v123 != (v123 & 0xFFFFFFFFFFFFFFF0))
        goto LABEL_137;
LABEL_140:
      *v8 = v109;
      v8[1] = v102;
      v8[2] = &v108[2 * v112];
      if (v103)
        operator delete(v103);
LABEL_142:
      v8[1] = v102;
      v114 = *v7;
      v115 = *v5;
      if (*v7)
      {
        *(_QWORD *)(v114 + 16) = v115;
        v115 = *v5;
      }
      v9 = a1;
      if (v115)
        *(_QWORD *)(v115 + 24) = v114;
      v116 = *((_QWORD *)v10 + 4);
      if (v116)
        *(_QWORD *)(v116 + 40) = *((_QWORD *)v10 + 5);
      v117 = *((_QWORD *)v10 + 5);
      if (v117)
        *(_QWORD *)(v117 + 32) = v116;
      if (*(_QWORD *)(a1 + 16))
      {
        *((_BYTE *)v10 + 52) = -1;
        *(_QWORD *)v10 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v10;
      }
      v3 = (float *)*((_QWORD *)v12 + 3);
      if (!v3
        || (v5 = (uint64_t *)(v3 + 4),
            v4 = (float *)*((_QWORD *)v3 + 2),
            v7 = (uint64_t *)(v3 + 6),
            v6 = (float *)*((_QWORD *)v3 + 3),
            v4 == v6))
      {
LABEL_164:
        if (v11)
        {
          v131 = *((_QWORD *)v11 + 3);
          if (v131)
            *(_QWORD *)(v131 + 16) = *((_QWORD *)v11 + 2);
          v132 = *((_QWORD *)v11 + 2);
          if (v132)
            *(_QWORD *)(v132 + 24) = v131;
          v133 = *((_QWORD *)v11 + 4);
          if (v133)
            *(_QWORD *)(v133 + 40) = *((_QWORD *)v11 + 5);
          v134 = *((_QWORD *)v11 + 5);
          if (v134)
            *(_QWORD *)(v134 + 32) = v133;
          if (*(_QWORD *)(v9 + 16))
          {
            *((_BYTE *)v11 + 52) = -1;
            *(_QWORD *)v11 = *(_QWORD *)(v9 + 40);
            *(_QWORD *)(v9 + 40) = v11;
          }
        }
        v135 = *((_QWORD *)v12 + 3);
        if (v135)
          *(_QWORD *)(v135 + 16) = *((_QWORD *)v12 + 2);
        v136 = *((_QWORD *)v12 + 2);
        if (v136)
          *(_QWORD *)(v136 + 24) = v135;
        v137 = *((_QWORD *)v12 + 4);
        if (v137)
          *(_QWORD *)(v137 + 40) = *((_QWORD *)v12 + 5);
        v138 = *((_QWORD *)v12 + 5);
        if (v138)
          *(_QWORD *)(v138 + 32) = v137;
        if (*(_QWORD *)(v9 + 16))
        {
          *((_BYTE *)v12 + 52) = -1;
          *(_QWORD *)v12 = *(_QWORD *)(v9 + 40);
          *(_QWORD *)(v9 + 40) = v12;
        }
        return 1;
      }
      v10 = (float *)*((_QWORD *)v12 + 3);
    }
    v26 = (float *)*((_QWORD *)v6 + 3);
    if (v26 == v11)
      goto LABEL_77;
    v27 = v15;
    v28 = v18;
    v29 = v21;
    v30 = v17;
    v31 = v19;
    v32 = v22;
    while (1)
    {
      v33 = *(unsigned __int16 *)v26;
      if (*(unsigned __int16 *)v11 != v33 && *(unsigned __int16 *)v10 != v33 && *(unsigned __int16 *)v6 != v33)
      {
        v34 = v26[1];
        v35 = v26[2];
        if ((float)((float)((float)(v35 - *(float *)(*((_QWORD *)v26 + 3) + 8))
                           * (float)(v34 - *(float *)(*((_QWORD *)v26 + 2) + 4)))
                   + (float)((float)(*(float *)(*((_QWORD *)v26 + 3) + 4) - v34)
                           * (float)(v35 - *(float *)(*((_QWORD *)v26 + 2) + 8)))) >= 0.0)
        {
          v36 = v34;
          v37 = v35;
          if ((v27 - v36) * (v31 - v29) + (v37 - v29) * (v30 - v27) >= 0.0
            && (v30 - v36) * (v32 - v31) + (v37 - v31) * (v28 - v30) >= 0.0
            && (v28 - v36) * (v29 - v32) + (v37 - v32) * (v27 - v28) >= 0.0)
          {
            break;
          }
        }
      }
      v26 = (float *)*((_QWORD *)v26 + 3);
      if (v26 == v11)
        goto LABEL_77;
    }
LABEL_5:
    if (v12 == v3)
      break;
    v5 = (uint64_t *)(v12 + 4);
    v4 = (float *)*((_QWORD *)v12 + 2);
    v7 = (uint64_t *)(v12 + 6);
    v6 = (float *)*((_QWORD *)v12 + 3);
    v10 = v12;
    if (v4 == v6)
      goto LABEL_164;
  }
  v139 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Wrapped around the polygon without finishing... :-(", 51);
  std::ios_base::getloc((const std::ios_base *)((char *)v139 + *(_QWORD *)(*v139 - 24)));
  v140 = std::locale::use_facet((const std::locale *)&v174, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v140->__vftable[2].~facet_0)(v140, 10);
  std::locale::~locale((std::locale *)&v174);
  std::ostream::put();
  std::ostream::flush();
  v141 = 0;
  v142 = v3;
  do
  {
    ++v141;
    v142 = (float *)*((_QWORD *)v142 + 3);
  }
  while (v142 != v3 && v142 != 0);
  v144 = (_QWORD *)MEMORY[0x1E0DE4A60];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"List has ", 9);
  std::to_string(&v174, v141);
  if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v145 = &v174;
  else
    v145 = (std::string *)v174.__r_.__value_.__r.__words[0];
  if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v174.__r_.__value_.__r.__words[2]);
  else
    size = v174.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v144, (uint64_t)v145, size);
  v147 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)" nodes:", 7);
  std::ios_base::getloc((const std::ios_base *)((char *)v147 + *(_QWORD *)(*v147 - 24)));
  v148 = std::locale::use_facet(&v175, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v148->__vftable[2].~facet_0)(v148, 10);
  std::locale::~locale(&v175);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"\t", 1);
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v174.__r_.__value_.__l.__data_);
  v149 = (_QWORD *)MEMORY[0x1E0DE4A60];
  v150 = v3;
  do
  {
    std::to_string(&v174, *(unsigned __int16 *)v150);
    if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v151 = &v174;
    else
      v151 = (std::string *)v174.__r_.__value_.__r.__words[0];
    if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v152 = HIBYTE(v174.__r_.__value_.__r.__words[2]);
    else
      v152 = v174.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v149, (uint64_t)v151, v152);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v149, (uint64_t)" ", 1);
    if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v174.__r_.__value_.__l.__data_);
    v150 = (float *)*((_QWORD *)v150 + 3);
  }
  while (v150 != v3 && v150);
  std::ios_base::getloc((const std::ios_base *)((char *)v149 + *(_QWORD *)(*v149 - 24)));
  v153 = std::locale::use_facet((const std::locale *)&v174, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v153->__vftable[2].~facet_0)(v153, 10);
  std::locale::~locale((std::locale *)&v174);
  std::ostream::put();
  std::ostream::flush();
  v154 = *((_QWORD *)v3 + 2);
  if (!v154)
    return 0;
  v155 = *(_QWORD *)(v9 + 16);
  if (v155)
  {
    v156 = *(float **)(v9 + 40);
    do
    {
      v157 = v3;
      v3 = (float *)*((_QWORD *)v3 + 3);
      if (v3)
        *((_QWORD *)v3 + 2) = *((_QWORD *)v157 + 2);
      v158 = *((_QWORD *)v157 + 2);
      if (v158)
        *(_QWORD *)(v158 + 24) = v3;
      v159 = *((_QWORD *)v157 + 4);
      if (v159)
        *(_QWORD *)(v159 + 40) = *((_QWORD *)v157 + 5);
      v160 = *((_QWORD *)v157 + 5);
      if (v160)
        *(_QWORD *)(v160 + 32) = v159;
      *((_BYTE *)v157 + 52) = -1;
      *(_QWORD *)v157 = v156;
      v156 = v157;
    }
    while (v3 != (float *)v154);
    *(_QWORD *)(v9 + 40) = v157;
  }
  else
  {
    do
    {
      v161 = (float *)*((_QWORD *)v3 + 3);
      if (v161)
        *((_QWORD *)v161 + 2) = *((_QWORD *)v3 + 2);
      v162 = *((_QWORD *)v3 + 2);
      if (v162)
        *(_QWORD *)(v162 + 24) = v161;
      v163 = *((_QWORD *)v3 + 4);
      if (v163)
        *(_QWORD *)(v163 + 40) = *((_QWORD *)v3 + 5);
      v164 = *((_QWORD *)v3 + 5);
      if (v164)
        *(_QWORD *)(v164 + 32) = v163;
      v3 = v161;
    }
    while (v161 != (float *)v154);
  }
  v165 = *(_QWORD *)(v154 + 24);
  if (v165)
    *(_QWORD *)(v165 + 16) = *(_QWORD *)(v154 + 16);
  v166 = *(_QWORD *)(v154 + 16);
  if (v166)
    *(_QWORD *)(v166 + 24) = v165;
  v167 = *(_QWORD *)(v154 + 32);
  if (v167)
    *(_QWORD *)(v167 + 40) = *(_QWORD *)(v154 + 40);
  v168 = *(_QWORD *)(v154 + 40);
  if (v168)
    *(_QWORD *)(v168 + 32) = v167;
  result = 0;
  if (v155)
  {
    *(_BYTE *)(v154 + 52) = -1;
    *(_QWORD *)v154 = *(_QWORD *)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v154;
  }
  return result;
}

void sub_19F05F884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::locale a19)
{
  std::locale::~locale(&a13);
  _Unwind_Resume(a1);
}

uint64_t geo::Triangulator<float,unsigned short>::createLinkedList(uint64_t a1, uint64_t a2, unint64_t a3, char a4, int a5, double a6, double a7, double a8, double a9, double a10, int8x16_t a11)
{
  unint64_t v12;
  float32x2_t *v13;
  float64x2_t v15;
  unint64_t v16;
  double v17;
  uint64_t result;
  int8x16_t v19;
  int32x4_t *v20;
  float64x2_t v21;
  unint64_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  const float *i32;
  int32x4_t v27;
  int32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  unint64_t v33;
  float32x2_t *v34;
  float32x2_t v35;
  uint64_t v36;
  uint64_t v38;
  float32x2_t v39;
  __int128 v40;
  uint64_t v41;
  float32x2_t v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t v45;
  int32x2_t v46;
  uint64_t v47;
  unint64_t v48;
  uint32x2_t v49;
  int8x8_t v50;
  int32x2_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float32x4x2_t v57;

  if (!a3)
    return 0;
  v12 = a3;
  v13 = (float32x2_t *)a2;
  v15.f64[0] = *(float64_t *)(a2 + 8 * a3 - 8);
  if (a3 > 7)
  {
    v16 = a3 & 0xFFFFFFFFFFFFFFF8;
    a11.i64[1] = *(_QWORD *)(a2 + 8 * a3 - 8);
    v19 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)&v15.f64[0], 0);
    v20 = (int32x4_t *)(a2 + 32);
    v21 = 0uLL;
    v22 = a3 & 0xFFFFFFFFFFFFFFF8;
    v23 = 0uLL;
    v24 = 0uLL;
    v25 = 0uLL;
    do
    {
      i32 = (const float *)v20[-2].i32;
      v57 = vld2q_f32(i32);
      v28 = *v20;
      v27 = v20[1];
      v20 += 4;
      v29 = (float32x4_t)vuzp1q_s32(v28, v27);
      v30 = (float32x4_t)vuzp2q_s32(v28, v27);
      v31 = vmulq_f32(vaddq_f32((float32x4_t)vextq_s8(a11, (int8x16_t)v57.val[1], 0xCuLL), v57.val[1]), vsubq_f32((float32x4_t)vextq_s8(v19, (int8x16_t)v57.val[0], 0xCuLL), v57.val[0]));
      v32 = vmulq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v57.val[1], (int8x16_t)v30, 0xCuLL), v30), vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v57.val[0], (int8x16_t)v29, 0xCuLL), v29));
      v23 = vaddq_f64(v23, vcvt_hight_f64_f32(v31));
      v21 = vaddq_f64(v21, vcvtq_f64_f32(*(float32x2_t *)v31.f32));
      v25 = vaddq_f64(v25, vcvt_hight_f64_f32(v32));
      v24 = vaddq_f64(v24, vcvtq_f64_f32(*(float32x2_t *)v32.f32));
      a11 = (int8x16_t)v30;
      v19 = (int8x16_t)v29;
      v22 -= 8;
    }
    while (v22);
    v15 = vaddq_f64(vaddq_f64(v24, v21), vaddq_f64(v25, v23));
    v17 = vaddvq_f64(v15);
    if (v16 == a3)
      goto LABEL_11;
    *(_QWORD *)&v15.f64[0] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
  }
  else
  {
    v16 = 0;
    v17 = 0.0;
  }
  v33 = a3 - v16;
  v34 = (float32x2_t *)(a2 + 8 * v16);
  do
  {
    v35 = *v34++;
    v17 = v17
        + vmul_lane_f32(vsub_f32(*(float32x2_t *)&v15.f64[0], v35), vadd_f32(*(float32x2_t *)&v15.f64[0], v35), 1).f32[0];
    *(float32x2_t *)&v15.f64[0] = v35;
    --v33;
  }
  while (v33);
LABEL_11:
  v36 = 0;
  if (a5 != 2)
    a4 = 0;
  v38 = *(_QWORD *)(a1 + 72);
  v39 = (float32x2_t)vdup_n_s32(0x477FFF00u);
  v40 = 0uLL;
  do
  {
    v41 = *(_QWORD *)(a1 + 40);
    if (!v41)
    {
      geo::Pool<geo::Triangulator<float,unsigned short>::Node>::allocateSlab((uint64_t **)a1);
      v40 = 0uLL;
      v41 = *(_QWORD *)(a1 + 40);
    }
    *(_QWORD *)(a1 + 40) = *(_QWORD *)v41;
    *(_WORD *)v41 = v38;
    v42 = *v13;
    *(_OWORD *)(v41 + 16) = v40;
    v43 = (uint64_t *)(v41 + 16);
    *(float32x2_t *)(v41 + 4) = v42;
    *(_OWORD *)(v41 + 32) = v40;
    *(_QWORD *)(v41 + 45) = 0;
    if (v36)
    {
      v44 = (_QWORD *)(v36 + 24);
      v45 = *(_QWORD *)(v36 + 24);
      *(_QWORD *)(v41 + 16) = v36;
      *(_QWORD *)(v41 + 24) = v45;
      *(_QWORD *)(*(_QWORD *)(v36 + 24) + 16) = v41;
    }
    else
    {
      *(_QWORD *)(v41 + 16) = v41;
      v44 = (_QWORD *)(v41 + 24);
    }
    *v44 = v41;
    *(_BYTE *)(v41 + 52) = a4;
    LODWORD(v15.f64[0]) = *(_DWORD *)(a1 + 64);
    if (*(float *)v15.f64 != 0.0)
    {
      v46 = vrev64_s32((int32x2_t)vcvt_u32_f32(vdiv_f32(vmul_f32(vsub_f32(*v13, *(float32x2_t *)(a1 + 48)), v39), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v15.f64[0], 0))));
      v47 = *(_QWORD *)&vorr_s8((int8x8_t)vshl_n_s32(v46, 8uLL), (int8x8_t)v46) & 0xFF00FF00FF00FFLL;
      v48 = *(_QWORD *)&vorr_s8((int8x8_t)vshl_n_s32((int32x2_t)v47, 4uLL), (int8x8_t)v47) & 0xFF0FFF0FFF0FFF0FLL;
      v49 = (uint32x2_t)vand_s8(vorr_s8((int8x8_t)vshl_n_s32((int32x2_t)v48, 2uLL), (int8x8_t)v48), (int8x8_t)0x3333333333333333);
      v50 = (int8x8_t)vshl_u32(v49, (uint32x2_t)0x100000002);
      v49.i32[0] *= 2;
      v51 = (int32x2_t)vand_s8(vorr_s8(v50, (int8x8_t)v49), (int8x8_t)0x55555555AAAAAAAALL);
      *(int8x8_t *)&v15.f64[0] = vorr_s8((int8x8_t)v51, (int8x8_t)vdup_lane_s32(v51, 1));
      *(_DWORD *)(v41 + 48) = LODWORD(v15.f64[0]);
    }
    v38 = *(_QWORD *)(a1 + 72) + 1;
    *(_QWORD *)(a1 + 72) = v38;
    ++v13;
    v36 = v41;
    --v12;
  }
  while (v12);
  v52 = *(_QWORD *)(v41 + 24);
  if (*(_QWORD *)(v41 + 4) == *(_QWORD *)(v52 + 4))
  {
    result = *v43;
    v53 = *v43;
    if (v52)
    {
      *(_QWORD *)(v52 + 16) = result;
      v53 = *v43;
    }
    if (v53)
      *(_QWORD *)(v53 + 24) = v52;
    if (*(_QWORD *)(a1 + 16))
    {
      *(_BYTE *)(v41 + 52) = -1;
      *(_QWORD *)v41 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v41;
    }
  }
  else
  {
    result = v41;
  }
  if (a5 != 1 && v17 > 0.0 || a5 != 2 && v17 < 0.0)
  {
    v54 = result;
    do
    {
      v56 = *(_QWORD *)(v54 + 16);
      v55 = *(_QWORD *)(v54 + 24);
      *(_QWORD *)(v54 + 16) = v55;
      *(_QWORD *)(v54 + 24) = v56;
      v54 = v55;
    }
    while (v55 != result);
  }
  return result;
}

void md::LightingLogic::writeLogicContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5, double *a6, uint64_t a7, uint64_t a8)
{
  float v13;
  float v14;
  void *v15;
  int v16;
  int v17;
  char v18;
  float v19;
  float v20;
  float v21;
  float v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t v33;
  float v34;
  unint64_t *v35;
  unint64_t v36;
  float v37;
  uint64_t v42;
  float32x4_t v43;
  uint64_t v44;
  float *v45;
  float v46;
  BOOL v47;
  unsigned int v48;
  uint64_t v49;
  float *v50;
  float v51;
  BOOL v52;
  unsigned int v53;
  uint64_t v54;
  float *v55;
  float v56;
  BOOL v57;
  unsigned int v58;
  unsigned int v59;
  uint16x4_t v60;
  float v61;
  int v62;
  uint64_t v63;
  float *v64;
  float v65;
  BOOL v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  int v71;
  uint64_t v72;
  float *v73;
  float v74;
  BOOL v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  int v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  void *v86;
  void *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  id v91;
  void *v92;
  void *v93;
  void *v94;
  char v95;
  id v96;
  void *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  void *v103;
  void *v104;
  double v105;
  double v106;
  double v107;
  double v108;
  gss *v109;
  float *v110;
  float v111;
  _BOOL4 v112;
  BOOL v113;
  unsigned int v114;
  float v115;
  _BOOL4 v116;
  int v118;
  unsigned int v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  __int128 v123;
  uint64_t v124;
  _QWORD *v125;
  void *v126;
  char v127;
  double v128;
  double v129;
  double v130;
  double v131;
  float v132;
  float v133;
  float v134;
  BOOL v135;
  float v136;
  __double2 v137;
  __double2 v139;
  _QWORD *v142;
  unint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  unint64_t v146;
  float16x4_t *v147;
  _QWORD *v148;
  unint64_t v149;
  uint64_t v150;
  float16x4_t v156;
  float16x4_t v157;
  unint64_t v158;
  __double2 v159;
  __double2 v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  long double v175;
  long double v176;
  long double v177;
  double v178;
  long double v179;
  double v180;
  __double2 v181;
  double v182;
  __double2 v183;
  long double v184;
  long double v185;
  long double v186;
  double v187;
  double v188;
  double v189;
  __double2 v190;
  long double v191;
  __double2 v192;
  double sinval;
  double v194;
  double v195;
  __double2 v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  double v213;
  unint64_t v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  uint64_t v225;
  double v226;
  double v227;
  double v228;
  double v229;
  float v230;
  float v231;
  double v232;
  unsigned int v233;
  double v234;
  long double v235;
  long double v236;
  long double v237;
  double v238;
  long double v239;
  double v240;
  long double v241;
  uint64_t v242;
  unsigned __int8 v243;
  _WORD *v244;
  _WORD *v245;
  uint64_t *v246;
  _WORD *v247;
  float v248;
  float v249;
  float v250;
  float v251;
  uint64_t v252;
  float *v253;
  float v254;
  _BOOL4 v255;
  uint64_t v256;
  float v257;
  float *v258;
  float v259;
  BOOL v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  double v265;
  uint64_t v266;
  float *v267;
  float v268;
  unsigned int v269;
  int v270;
  int v271;
  int v272;
  uint64_t v273;
  float *v274;
  float v275;
  unsigned int v276;
  int v277;
  int v278;
  double v279;
  uint64_t *v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t v283;
  unsigned __int8 v284;
  _WORD *v285;
  _WORD *v286;
  uint64_t *v287;
  _WORD *v288;
  uint64_t *v289;
  uint64_t *v290;
  uint64_t *v291;
  _QWORD *v292;
  uint64_t v293;
  double v294;
  double v295;
  double v296;
  double v297;
  double v298;
  double v299;
  double v300;
  double v301;
  double v302;
  double v303;
  uint64_t *v304;
  uint64_t *v305;
  double v306;
  double v307;
  double v308;
  double v309;
  double v310;
  double v311;
  double v312;
  double v313;
  double v314;
  double v315;
  double v316;
  double v317;
  double v318;
  double v319;
  double v320;
  double v321;
  double v322;
  double v323;
  double v324;
  double v325;
  double v326;
  double v327;
  double v328;
  double v329;
  double v330;
  double v331;
  double v332;
  double v333;
  double v334;
  double v335;
  double v336;
  double v337;
  double v338;
  double v339;
  double v340;
  double v341;
  double v342;
  double v343;
  double v344;
  double v345;
  double v346;
  double v347;
  double v348;
  double v349;
  float64x2_t v350;
  double v351;
  float64x2_t v352;
  double v353;
  float64x2_t v354;
  double v355;
  float64x2_t v356;
  double v357;
  float64x2_t v358;
  double v359;
  float64x2_t v360;
  double v361;
  float64x2_t v362;
  double v363;
  float64x2_t v364;
  double v365;
  float64x2_t v366;
  float64x2_t v367;
  double v368;
  float64x2_t v369;
  double v370;
  float64x2_t v371;
  int64x2_t v372;
  signed __int32 v373;
  __int32 v374;
  float64x2_t v375;
  __int8 v376;
  double v377;
  double v378;
  double v379;
  int8x16_t v380;
  double v381;
  float64x2_t v382;
  int8x16_t v383;
  double v384;
  double v385;
  double v386;
  double v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  int8x16_t v391;
  float64x2_t v392;
  int8x16_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  int8x16_t v397;
  int8x16_t v398;
  float64x2_t v399;
  int8x16_t v400;
  float64x2_t v401;
  float64x2_t v402;
  int8x16_t v403;
  float64x2_t v404;
  int8x16_t v405;
  float64x2_t v406;
  int8x16_t v407;
  float64x2_t v408;
  int8x16_t v409;
  float64x2_t v410;
  float64x2_t v411;
  int8x16_t v412;
  float64x2_t v413;
  float64x2_t v414;
  int8x16_t v415;
  float64x2_t v416;
  float64x2_t v417;
  int8x16_t v418;
  float64x2_t v419;
  int8x16_t v420;
  float64x2_t v421;
  int8x16_t v422;
  int8x16_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  int8x16_t v428;
  int v429;
  float v430;
  float v431;
  float64x2_t v432;
  double v433;
  float64x2_t v434;
  double v435;
  int32x2_t v436;
  __int16 *v437;
  int v438;
  uint64_t v439;
  unsigned __int8 v440;
  unsigned __int16 *v441;
  unsigned __int16 *v442;
  unsigned __int16 *v443;
  uint64_t *v444;
  _QWORD *v445;
  uint64_t *v446;
  uint64_t v447;
  _QWORD *v448;
  unsigned int v449;
  int v450;
  uint64_t v451;
  _QWORD *v452;
  _QWORD *v453;
  int v454;
  int v455;
  unsigned int v456;
  _BOOL4 v458;
  int v459;
  uint64_t *v460;
  uint64_t v461;
  uint64_t *v462;
  uint64_t v463;
  _BYTE *v464;
  int v465;
  uint64_t v466;
  int v467;
  uint64_t *v468;
  uint64_t v469;
  uint64_t *v470;
  uint64_t v471;
  _QWORD *v472;
  uint64_t v473;
  uint64_t *v474;
  unsigned int v475;
  float v476;
  float v477;
  _BOOL4 v478;
  int v479;
  float v480;
  float v481;
  float v482;
  float v483;
  uint64_t v484;
  float *v485;
  float v486;
  _BOOL4 v487;
  unsigned int v488;
  float v489;
  float v490;
  _BOOL4 v491;
  int v492;
  float v493;
  float v494;
  float v495;
  uint64_t **v496;
  _QWORD *v497;
  uint64_t *v498;
  _QWORD *v500;
  _QWORD *v501;
  uint64_t *v502;
  uint64_t *v503;
  char v504;
  double v505;
  double v506;
  double v507;
  double v508;
  float64x2_t v509;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  float v518;
  float v519;
  float v520;
  float v521;
  BOOL v523;
  BOOL v524;
  int v525;
  int v526;
  uint64_t v527;
  float *v528;
  float v529;
  _BOOL4 v530;
  uint64_t v531;
  std::__shared_weak_count *v532;
  unint64_t *v533;
  unint64_t v534;
  unint64_t v535;
  unint64_t *v536;
  unint64_t v537;
  void *v538;
  int v539;
  void *v540;
  int v541;
  void *v542;
  int v543;
  float v544;
  void *v545;
  char v546;
  unint64_t v547;
  unsigned int v548;
  float *v549;
  float v550;
  _BOOL4 v551;
  unsigned int v553;
  float v554;
  float v555;
  _BOOL4 v556;
  unsigned int v557;
  float v558;
  float v559;
  float v560;
  float v561;
  unsigned int v562;
  float v563;
  float v564;
  _BOOL4 v565;
  float v566;
  _BOOL4 v567;
  unsigned int v568;
  float v569;
  float v570;
  _BOOL4 v571;
  unsigned int v572;
  float v573;
  float v574;
  float v575;
  float v576;
  float v577;
  _BOOL4 v578;
  unsigned int v579;
  float16x4_t v580;
  float v581;
  _BOOL4 v582;
  unsigned int v583;
  float v584;
  float v585;
  _BOOL4 v586;
  unsigned int v587;
  float v588;
  float v589;
  float v590;
  _BYTE *v591;
  void *v592;
  int v593;
  float v594;
  float v595;
  float v596;
  float v597;
  int v598;
  float v599;
  float v600;
  float v601;
  float v602;
  uint64_t v603;
  float *v604;
  float v605;
  _BOOL4 v606;
  unsigned int v607;
  float v608;
  float v609;
  _BOOL4 v610;
  int v611;
  float v612;
  float v613;
  float v614;
  float v615;
  float *v616;
  float v617;
  _BOOL4 v618;
  unsigned int v619;
  _BOOL4 v620;
  float v621;
  float v622;
  uint64_t v623;
  unsigned int v624;
  id v625;
  unsigned int v626;
  id v627;
  unsigned int v628;
  void *v629;
  unsigned int v632;
  float32x4_t v633;
  int v634;
  int v635;
  float32x4_t v636;
  unsigned int v638;
  char v639;
  double v640;
  float32x4_t v641;
  double v642;
  double v643;
  __int32 v644;
  char v645;
  float v646;
  float v647;
  float64x2_t v648;
  double v649;
  _BYTE v650[32];
  float64x2_t v651;
  __int128 v652;
  float64x2_t v653;
  __int128 v654;
  float64x2_t v655;
  __int128 v656;
  char v657[8];
  void *__p;
  _BYTE v659[15];
  char v660;
  uint64_t v661;
  std::__shared_weak_count *v662;
  _QWORD v663[2];
  unsigned __int8 v664;
  double v665;
  double v666;
  _BYTE v667[32];
  double v668;
  double v669;
  double v670;
  uint64_t v671;
  double v672;
  double v673;
  double v674;
  __int128 v675;
  __int128 v676;
  uint64_t v677;
  __int128 v678;
  __int128 v679;
  float64x2_t v680;
  __int128 v681;
  float64x2_t v682;
  __int128 v683;
  float64x2_t v684;
  __int128 v685;
  uint64_t v686;

  v686 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 141))
    _ZF = *a5 == 0;
  else
    _ZF = 0;
  if (_ZF)
    return;
  *(_QWORD *)&v648.f64[0] = a5;
  v13 = *(float *)(a2 + 3076);
  v14 = *(float *)(a2 + 3080);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "lightingEnableAmbient");
  v17 = objc_msgSend(v15, "lightingEnableLight1");
  v18 = objc_msgSend(v15, "lightingOverrideAmbient");
  v645 = objc_msgSend(v15, "lightingOverrideLight1");
  objc_msgSend(v15, "overrideLight1Azimuth");
  v20 = v19;
  objc_msgSend(v15, "overrideLight1Altitude");
  v22 = v21;
  objc_msgSend(v15, "overrideAmbient");
  v638 = v23;
  objc_msgSend(v15, "overrideAmbient");
  v632 = v24;
  objc_msgSend(v15, "overrideAmbient");
  v628 = v25;
  objc_msgSend(v15, "overrideLight1");
  v626 = v26;
  objc_msgSend(v15, "overrideLight1");
  v624 = v27;
  objc_msgSend(v15, "overrideLight1");
  v623 = v28;
  v29 = *(_QWORD *)(a1 + 176);
  v30 = *(std::__shared_weak_count **)(a1 + 184);
  *(_QWORD *)v650 = v29;
  *(_QWORD *)&v650[8] = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
    v662 = v30;
    do
      v33 = __ldxr(p_shared_owners);
    while (__stxr(v33 + 1, p_shared_owners));
  }
  else
  {
    v662 = 0;
  }
  v663[0] = 0;
  v663[1] = 0;
  v661 = v29;
  v664 = 0;
  if (v29)
    LODWORD(v29) = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v29 + 48))(v29, v663);
  v34 = v14 + v13;
  v664 = v29;
  v634 = v17;
  v635 = v16;
  if (v30)
  {
    v35 = (unint64_t *)&v30->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
    LODWORD(v29) = v664;
  }
  v37 = fmaxf(v34, 1.0);
  v636 = (float32x4_t)xmmword_19FFB4CE0;
  if (!(_DWORD)v29)
  {
    v641 = (float32x4_t)xmmword_19FFB4CD0;
    v633 = (float32x4_t)xmmword_19FFB4CF0;
    goto LABEL_65;
  }
  __asm { FMOV            V1.4S, #1.0 }
  v42 = v661;
  if ((v18 & 1) == 0)
  {
    v44 = *(_QWORD *)(v661 + 24);
    v45 = *(float **)v44;
    v644 = _Q1.i32[3];
    if (*(_QWORD *)v44
      && (v46 = *v45, LODWORD(v45) = *v45 == 1.0, *(_BYTE *)(v44 + 10))
      && (v46 != 0.0 ? (v47 = v46 == 1.0) : (v47 = 1), !v47)
      || (v48 = *(unsigned __int8 *)(v44 + v45 + 11), v48 == 2))
    {
      if ((gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v44, 0xFu, 0) & 1) != 0)
        goto LABEL_36;
      v48 = 1;
    }
    if (!gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v44, 0xFu, v48))
    {
      v633 = (float32x4_t)xmmword_19FFB4CF0;
LABEL_38:
      _Q1.i32[3] = v644;
      if ((v645 & 1) != 0)
        goto LABEL_23;
      goto LABEL_39;
    }
LABEL_36:
    gss::RenderStyle<gss::ScenePropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v650, v44, 0xFu, fminf(fmaxf(v37, 0.0), 23.0));
    v633 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v650)), (float32x4_t)vdupq_n_s32(0x37800080u));
    v42 = v661;
    goto LABEL_38;
  }
  v43.i64[0] = __PAIR64__(v632, v638);
  v43.i64[1] = __PAIR64__(_Q1.u32[3], v628);
  v633 = v43;
  if ((v645 & 1) != 0)
  {
LABEL_23:
    _Q1.i64[0] = __PAIR64__(v624, v626);
    _Q1.i32[2] = v623;
    goto LABEL_52;
  }
LABEL_39:
  v49 = *(_QWORD *)(v42 + 24);
  v50 = *(float **)v49;
  if (*(_QWORD *)v49
    && (v51 = *v50, LODWORD(v50) = *v50 == 1.0, *(_BYTE *)(v49 + 10))
    && (v51 != 0.0 ? (v52 = v51 == 1.0) : (v52 = 1), !v52)
    || (v53 = *(unsigned __int8 *)(v49 + v50 + 11), v53 == 2))
  {
    if ((gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(v42 + 24), 0x10u, 0) & 1) != 0)
    {
LABEL_50:
      gss::RenderStyle<gss::ScenePropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v650, v49, 0x10u, fminf(fmaxf(v37, 0.0), 23.0));
      _Q1 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v650)), (float32x4_t)vdupq_n_s32(0x37800080u));
      v42 = v661;
      goto LABEL_52;
    }
    v53 = 1;
  }
  if (gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v49, 0x10u, v53))
    goto LABEL_50;
  _Q1 = (float32x4_t)xmmword_19FFB4CD0;
LABEL_52:
  v54 = *(_QWORD *)(v42 + 24);
  v55 = *(float **)v54;
  v641 = _Q1;
  if (*(_QWORD *)v54
    && (v56 = *v55, LODWORD(v55) = *v55 == 1.0, *(_BYTE *)(v54 + 10))
    && (v56 != 0.0 ? (v57 = v56 == 1.0) : (v57 = 1), !v57)
    || (v58 = *(unsigned __int8 *)(v54 + v55 + 11), v58 == 2))
  {
    if ((gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v54, 0x13u, 0) & 1) != 0)
      goto LABEL_63;
    v58 = 1;
  }
  if (gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v54, 0x13u, v58))
  {
LABEL_63:
    gss::RenderStyle<gss::ScenePropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v650, v54, 0x13u, fminf(fmaxf(v37, 0.0), 23.0));
    LOWORD(v59) = *(_WORD *)v650;
    v60.i32[0] = *(_DWORD *)&v650[2];
    v60.i16[2] = *(_WORD *)&v650[6];
    v61 = (float)v59 * 0.000015259;
    v636 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v60)), (float32x4_t)vdupq_n_s32(0x37800080u));
    v62 = *(unsigned __int8 *)(a1 + 141);
    if (!*(_BYTE *)(a1 + 141))
      goto LABEL_79;
    goto LABEL_66;
  }
LABEL_65:
  v61 = 0.23333;
  v62 = *(unsigned __int8 *)(a1 + 141);
  if (!*(_BYTE *)(a1 + 141))
  {
LABEL_79:
    LOBYTE(v71) = 2 * (v62 != 0);
    v639 = v71;
    goto LABEL_95;
  }
LABEL_66:
  if (!v664)
    goto LABEL_79;
  v63 = *(_QWORD *)(v661 + 24);
  v64 = *(float **)v63;
  if (*(_QWORD *)v63
    && (v65 = *v64, LODWORD(v64) = *v64 == 1.0, *(_BYTE *)(v63 + 10))
    && (v65 != 0.0 ? (v66 = v65 == 1.0) : (v66 = 1), !v66)
    || (v67 = *(unsigned __int8 *)(v63 + v64 + 11), v65 = 0.0, v67 == 2))
  {
    v650[0] = 1;
    LOBYTE(v678) = 1;
    v68 = gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<unsigned int>(v63, 0, 0, v650);
    v69 = gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<unsigned int>(v63, 0, 1u, &v678);
    if (v65 >= 1.0)
      v70 = (int *)v69;
    else
      v70 = (int *)v68;
    v71 = *v70;
  }
  else
  {
    v71 = *(_DWORD *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<unsigned int>(*(_QWORD *)(v661 + 24), 0, v67, 0);
  }
  v72 = *(_QWORD *)(v661 + 24);
  v73 = *(float **)v72;
  if (*(_QWORD *)v72
    && (v74 = *v73, LODWORD(v73) = *v73 == 1.0, *(_BYTE *)(v72 + 10))
    && (v74 != 0.0 ? (v75 = v74 == 1.0) : (v75 = 1), !v75)
    || (v76 = *(unsigned __int8 *)(v72 + v73 + 11), v74 = 0.0, v76 == 2))
  {
    v650[0] = 1;
    LOBYTE(v678) = 1;
    v77 = gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<unsigned int>(v72, 6u, 0, v650);
    v78 = gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<unsigned int>(v72, 6u, 1u, &v678);
    if (v74 >= 1.0)
      v79 = (int *)v78;
    else
      v79 = (int *)v77;
    v80 = *v79;
  }
  else
  {
    v80 = *(_DWORD *)gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<unsigned int>(*(_QWORD *)(v661 + 24), 6u, v76, 0);
  }
  v639 = v80;
LABEL_95:
  v81 = 0.0;
  v82 = 0.0;
  if ((_BYTE)v71)
    goto LABEL_110;
  v625 = objc_alloc(MEMORY[0x1E0D270E0]);
  v83 = *a6;
  v84 = a6[1];
  v85 = *(double *)(a2 + 16);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v629 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  v627 = objc_alloc_init(MEMORY[0x1E0C99D68]);
  if (!*(_QWORD *)(a1 + 152))
  {
    objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    v88 = objc_msgSend(v87, "copy");
    v89 = *(void **)(a1 + 152);
    *(_QWORD *)(a1 + 152) = v88;

  }
  if (objc_msgSend(v629, "lightingCameraLocalTime", v623))
  {
    v90 = (uint64_t)(v85 * 13750.9871);
    if (*(_QWORD *)(a1 + 168) != v90)
    {
      v91 = *(id *)(a1 + 152);
      objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneForSecondsFromGMT:", (uint64_t)(v85 * 13750.9871));
      v92 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v91, "setTimeZone:", v92);

      *(_QWORD *)(a1 + 168) = v90;
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 152), "timeZone");
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E80], "systemTimeZone");
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    v95 = objc_msgSend(v93, "isEqual:", v94);

    if ((v95 & 1) == 0)
    {
      v96 = *(id *)(a1 + 152);
      objc_msgSend(MEMORY[0x1E0C99E80], "systemTimeZone");
      v97 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v96, "setTimeZone:", v97);

    }
  }
  if (objc_msgSend(v86, "BOOLForKey:", CFSTR("__LightingStopTime")))
  {
    objc_msgSend(*(id *)(a1 + 152), "dateBySettingHour:minute:second:ofDate:options:", 0, 0, 0, v627, 0);
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    v99 = objc_msgSend(v86, "integerForKey:", CFSTR("__LightingStopTimeHour"));
    v100 = objc_msgSend(v86, "integerForKey:", CFSTR("__LightingStopTimeMinute"));
    v101 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeInterval:sinceDate:", v98, (double)v99 * 3600.0 + (double)v100 * 60.0);
  }
  else
  {
    if (!objc_msgSend(v629, "lightingAccelerateTime"))
    {
      v103 = v627;
      goto LABEL_109;
    }
    objc_msgSend(*(id *)(a1 + 152), "dateBySettingHour:minute:second:ofDate:options:", 0, 0, 0, v627, 0);
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v627, "timeIntervalSinceDate:", v98);
    v101 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D68]), "initWithTimeInterval:sinceDate:", v98, v102 * 3600.0);
  }
  v103 = (void *)v101;

LABEL_109:
  v104 = (void *)objc_msgSend(v625, "initWithLocation:date:body:", v103, 0, v83, v84);

  objc_msgSend(v104, "azimuth");
  v106 = v105;
  objc_msgSend(v104, "altitude");
  v108 = v107;

  v82 = v106 * 0.0174532925;
  v81 = v108 * 0.0174532925;
LABEL_110:
  v657[0] = 0;
  if (!v664)
    goto LABEL_156;
  v109 = *(gss **)(v661 + 24);
  v110 = *(float **)v109;
  if (!*(_QWORD *)v109)
  {
    v112 = 0;
    goto LABEL_120;
  }
  v111 = *v110;
  v112 = *v110 == 1.0;
  if (!*((_BYTE *)v109 + 10) || (v111 != 0.0 ? (v113 = v111 == 1.0) : (v113 = 1), v113))
  {
LABEL_120:
    v114 = *((unsigned __int8 *)v109 + v112 + 11);
    if (v114 != 2)
      goto LABEL_123;
  }
  if ((gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(v661 + 24), 0x48u, 0) & 1) != 0)
    goto LABEL_124;
  v114 = 1;
LABEL_123:
  if (!gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd((uint64_t)v109, 0x48u, v114))
  {
    v118 = 1;
    if (!*(_BYTE *)(a1 + 141))
      goto LABEL_156;
    goto LABEL_153;
  }
LABEL_124:
  if (v110)
  {
    v115 = *v110;
    v116 = *v110 == 1.0;
    if (*((_BYTE *)v109 + 10))
    {
      if (v115 != 0.0 && v115 != 1.0)
        goto LABEL_136;
    }
  }
  else
  {
    v116 = 0;
  }
  v119 = *((unsigned __int8 *)v109 + v116 + 11);
  v115 = 0.0;
  if (v119 == 2)
  {
LABEL_136:
    v667[0] = 1;
    LOBYTE(v666) = 1;
    v120 = gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<std::string>(v109, 0, v667);
    v121 = gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<std::string>(v109, 1u, &v666);
    if (v115 >= 1.0)
      v122 = v121;
    else
      v122 = v120;
    if ((*((char *)v122 + 23) & 0x80000000) == 0)
    {
      v123 = *(_OWORD *)v122;
      v124 = v122[2];
LABEL_143:
      *(_QWORD *)&v650[16] = v124;
      *(_OWORD *)v650 = v123;
      goto LABEL_146;
    }
    std::string::__init_copy_ctor_external((std::string *)v650, (const std::string::value_type *)*v122, v122[1]);
    goto LABEL_146;
  }
  v125 = gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<std::string>(v109, v119, 0);
  if ((*((char *)v125 + 23) & 0x80000000) == 0)
  {
    v123 = *(_OWORD *)v125;
    v124 = v125[2];
    goto LABEL_143;
  }
  std::string::__init_copy_ctor_external((std::string *)v650, (const std::string::value_type *)*v125, v125[1]);
LABEL_146:
  *(_QWORD *)&v678 = *(_QWORD *)&v650[8];
  v126 = *(void **)v650;
  *(_QWORD *)((char *)&v678 + 7) = *(_QWORD *)&v650[15];
  v127 = v650[23];
  memset(v650, 0, 24);
  if (v657[0])
  {
    if (v660 < 0)
    {
      operator delete(__p);
      __p = v126;
      *(_QWORD *)v659 = v678;
      *(_QWORD *)&v659[7] = *(_QWORD *)((char *)&v678 + 7);
      v660 = v127;
      if ((v650[23] & 0x80000000) != 0)
        operator delete(*(void **)v650);
    }
    else
    {
      __p = v126;
      *(_QWORD *)v659 = v678;
      *(_QWORD *)&v659[7] = *(_QWORD *)((char *)&v678 + 7);
      v660 = v127;
    }
  }
  else
  {
    __p = v126;
    *(_QWORD *)v659 = v678;
    *(_QWORD *)&v659[7] = *(_QWORD *)((char *)&v678 + 7);
    v660 = v127;
    v657[0] = 1;
  }
  v118 = v664;
  if (!*(_BYTE *)(a1 + 141))
    goto LABEL_156;
LABEL_153:
  if (v118)
  {
    if ((v645 & 1) != 0)
    {
      v82 = v20 * 0.0174532925;
      v128 = v22 * 0.0174532925;
    }
    else
    {
      v256 = *(_QWORD *)(v661 + 24);
      v257 = fminf(fmaxf(v37, 0.0), 23.0);
      v258 = *(float **)v256;
      if (*(_QWORD *)v256
        && (v259 = *v258, LODWORD(v258) = *v258 == 1.0, *(_BYTE *)(v256 + 10))
        && (v259 != 0.0 ? (v260 = v259 == 1.0) : (v260 = 1), !v260)
        || (v261 = *(unsigned __int8 *)(v256 + v258 + 11), v259 = 0.0, v261 == 2))
      {
        v650[0] = 1;
        LOBYTE(v678) = 1;
        v262 = gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<unsigned int>(v256, 0, v650, v257);
        v263 = gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<unsigned int>(v256, 1u, (BOOL *)&v678, v257);
        if (v259 >= 1.0)
          v264 = v263;
        else
          v264 = v262;
      }
      else
      {
        v264 = gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<unsigned int>(*(_QWORD *)(v661 + 24), v261, 0, v257);
      }
      if (v71 == 2)
      {
        v265 = 3.14159265 - *(double *)(a2 + 48);
      }
      else
      {
        v265 = 0.0;
        if (!(_BYTE)v71)
          v265 = v82;
      }
      v266 = *(_QWORD *)(v661 + 24);
      v267 = *(float **)v266;
      if (*(_QWORD *)v266
        && (v268 = *v267, LODWORD(v267) = *v267 == 1.0, *(_BYTE *)(v266 + 10))
        && v268 != 0.0
        && v268 != 1.0
        || (v269 = *(unsigned __int8 *)(v266 + v267 + 11), v268 = 0.0, v269 == 2))
      {
        v650[0] = 1;
        LOBYTE(v678) = 1;
        v270 = gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<int>(v266, 9u, 0, v650, v257);
        v271 = gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<int>(v266, 9u, 1u, (BOOL *)&v678, v257);
        if (v268 >= 1.0)
          v272 = v271;
        else
          v272 = v270;
      }
      else
      {
        v272 = gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<int>(*(_QWORD *)(v661 + 24), 9u, v269, 0, v257);
      }
      v273 = *(_QWORD *)(v661 + 24);
      v274 = *(float **)v273;
      if (*(_QWORD *)v273
        && (v275 = *v274, LODWORD(v274) = *v274 == 1.0, *(_BYTE *)(v273 + 10))
        && v275 != 0.0
        && v275 != 1.0
        || (v276 = *(unsigned __int8 *)(v273 + v274 + 11), v275 = 0.0, v276 == 2))
      {
        v650[0] = 1;
        LOBYTE(v678) = 1;
        v277 = gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<int>(v273, 0xCu, 0, v650, v257);
        v278 = gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<int>(v273, 0xCu, 1u, (BOOL *)&v678, v257);
        if (v275 < 1.0)
          v278 = v277;
      }
      else
      {
        v278 = gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<int>(*(_QWORD *)(v661 + 24), 0xCu, v276, 0, v257);
      }
      v279 = 1.57079633;
      if (v639 == 2)
      {
        v279 = 1.57079633 - *(double *)(a2 + 40);
      }
      else
      {
        if (!v639)
          v279 = v81;
        if (v639 == 1)
          v279 = 0.0;
      }
      v82 = v265 + (double)v264 * 0.0174532925;
      v128 = fmax(v279 + (double)v272 * 0.0174532925, (double)v278 * 0.0174532925);
    }
    goto LABEL_172;
  }
LABEL_156:
  if (v71 == 2)
  {
    v82 = 3.14159265 - *(double *)(a2 + 48);
  }
  else if ((_BYTE)v71)
  {
    v82 = 0.0;
  }
  v129 = 0.0;
  if (*(_BYTE *)(a1 + 141))
    v130 = 0.0;
  else
    v130 = v81;
  v131 = 1.57079633;
  if (v639 == 2)
  {
    v129 = 1.57079633 - *(double *)(a2 + 40);
  }
  else
  {
    if (!v639)
      v131 = v81;
    if (v639 != 1)
      v129 = v131;
  }
  v128 = fmax(v129, v130);
LABEL_172:
  v132 = v128 + -0.1;
  v133 = fmaxf(v132, 0.0);
  v134 = v133 * 10.0;
  v135 = v133 <= 0.1;
  v136 = 1.0;
  if (v135)
    v136 = v134;
  v646 = v136;
  v137 = __sincos_stret(v128);
  _D8 = v137.__sinval;
  v139 = __sincos_stret(v82);
  _D12 = v137.__cosval * v139.__sinval;
  _D15 = v137.__cosval * v139.__cosval;
  *(double *)(a7 + 80) = v82;
  *(double *)(a7 + 88) = v128;
  *(double *)(a7 + 48) = v137.__cosval * v139.__sinval;
  *(double *)(a7 + 56) = v137.__cosval * v139.__cosval;
  *(double *)(a7 + 64) = v137.__sinval;
  *(_QWORD *)(a7 + 72) = 0;
  if (**(_QWORD **)&v648.f64[0])
  {
    v142 = *(_QWORD **)a7;
    v143 = *(_QWORD *)(*(_QWORD *)a7 + 8);
    if (v143)
      v144 = v142[9];
    else
      v144 = 0;
    v145 = *(_QWORD **)(a7 + 16);
    v146 = v145[1];
    if (v146)
      v147 = (float16x4_t *)v145[9];
    else
      v147 = 0;
    v148 = *(_QWORD **)(a7 + 32);
    v149 = v148[1];
    if (v149)
      v150 = v148[9];
    else
      v150 = 0;
    __asm
    {
      FCVT            H1, D12
      FCVT            H2, D15
    }
    *(_WORD *)v144 = _H1;
    __asm { FCVT            H3, D8 }
    *(_WORD *)(v144 + 2) = _H2;
    *(_WORD *)(v144 + 4) = _H3;
    _H0 = 0;
    *(_WORD *)(v144 + 6) = 0;
    *(_WORD *)v150 = _H1;
    *(_WORD *)(v150 + 2) = _H2;
    *(_WORD *)(v150 + 4) = _H3;
    *(_WORD *)(v150 + 6) = 0;
    if (v634)
    {
      _D0 = vcvt_f16_f32(vmulq_n_f32(v641, v646));
      *v147 = _D0;
      *(float16x4_t *)(v144 + 16) = _D0;
      *(float *)_D0.i32 = v646 * v61;
      __asm { FCVT            H0, S0 }
      v156 = vcvt_f16_f32(vmulq_n_f32(v636, v646));
    }
    else
    {
      *(_QWORD *)(v144 + 16) = 0;
      *v147 = 0;
      v156 = 0;
    }
    *(_WORD *)(v144 + 8) = _H0;
    *(_WORD *)(v144 + 14) = v156.i16[2];
    *(_DWORD *)(v144 + 10) = v156.i32[0];
    *(_WORD *)(v150 + 8) = _H0;
    *(_DWORD *)(v150 + 10) = v156.i32[0];
    *(_WORD *)(v150 + 14) = v156.i16[2];
    v157 = vcvt_f16_f32(v633);
    if (!v635)
      v157 = 0;
    *(float16x4_t *)(v144 + 24) = v157;
    v147[1] = v157;
    if (v149)
    {
      v158 = v148[8];
      if (v158 <= v149)
        v158 = v149;
      v148[7] = 0;
      v148[8] = v158;
    }
    if (v147 && v146)
    {
      if (v145[8] > v146)
        v146 = v145[8];
      v145[7] = 0;
      v145[8] = v146;
    }
    if (v143)
    {
      if (v142[8] > v143)
        v143 = v142[8];
      v142[7] = 0;
      v142[8] = v143;
    }
  }
  v647 = v37;
  v159 = __sincos_stret(v82 * 0.5 + 1.57079633);
  v160 = __sincos_stret(v128 * 0.5);
  v161 = -(v159.__cosval * v160.__cosval * 0.707106781 - v160.__sinval * v159.__cosval * 0.707106781);
  v162 = -(v160.__sinval * v159.__sinval * 0.707106781 - v159.__sinval * v160.__cosval * 0.707106781);
  v163 = v160.__sinval * v159.__sinval * 0.707106781 + v159.__sinval * v160.__cosval * 0.707106781;
  v164 = v160.__sinval * v159.__cosval * 0.707106781 + v159.__cosval * v160.__cosval * 0.707106781;
  v165 = v162 + v162;
  v166 = (v162 + v162) * v162;
  v167 = (v163 + v163) * v163;
  v168 = v161 + v161;
  v169 = (v161 + v161) * v162;
  v170 = (v163 + v163) * v164;
  v171 = (v161 + v161) * v163;
  v172 = 1.0 - (v161 + v161) * v161;
  v173 = v165 * v163;
  *(double *)v650 = 1.0 - (v167 + v166);
  *(double *)&v650[8] = v170 + v169;
  v651.f64[0] = v169 - v170;
  v651.f64[1] = v172 - v167;
  v653.f64[0] = v165 * v164 + v171;
  v653.f64[1] = v173 - v168 * v164;
  *(double *)&v650[16] = v171 - v165 * v164;
  *(double *)&v652 = v168 * v164 + v173;
  *(double *)&v654 = v172 - v166;
  *(_QWORD *)&v650[24] = 0;
  *((_QWORD *)&v652 + 1) = 0;
  *((_QWORD *)&v654 + 1) = 0;
  v655 = 0uLL;
  *(_QWORD *)&v656 = 0;
  *((_QWORD *)&v656 + 1) = 0x3FF0000000000000;
  *(double *)(a7 + 128) = _D12;
  *(double *)(a7 + 136) = _D15;
  *(double *)(a7 + 144) = v137.__sinval;
  *(_QWORD *)(a7 + 152) = 0;
  geo::optional<std::string>::operator=(a7 + 96, (uint64_t)v657);
  if (*(unsigned __int8 *)(a2 + 3776) - 1 > 2)
  {
    *(_OWORD *)(a7 + 160) = *(_OWORD *)(a7 + 128);
    v229 = *(double *)(a7 + 144);
    v225 = *(_QWORD *)(a7 + 152);
  }
  else
  {
    v174 = *(double *)(a2 + 16);
    v175 = tan(*(double *)(a2 + 8) * 0.5 + 0.785398163);
    v176 = log(v175);
    v177 = exp(floor(v176 * 325.949323 + 1024.0) * 0.00306796158 + -3.14005867);
    v178 = atan(v177) * 2.0 + -1.57079633;
    v179 = fmod(floor(v174 * 325.949323 + 1024.0) * 0.00306796158 + 0.00153398079, 6.28318531);
    v180 = fmod(v179 + 6.28318531, 6.28318531) + -3.14159265;
    v181 = __sincos_stret(v178);
    v182 = 6378137.0 / sqrt(v181.__sinval * v181.__sinval * -0.00669437999 + 1.0);
    v183 = __sincos_stret(v180);
    v184 = v183.__cosval * (v182 * v181.__cosval);
    v185 = v183.__sinval * (v182 * v181.__cosval);
    v186 = v181.__sinval * 0.99330562 * v182;
    v187 = sqrt(v184 * v184 + v185 * v185);
    v188 = atan2(v186, v187 * 0.996647189);
    v189 = atan2(v185, v184);
    v190 = __sincos_stret(v188);
    v191 = atan2(v186 + v190.__sinval * v190.__sinval * 42841.3115 * v190.__sinval, v187 + v190.__cosval * v190.__cosval * -42697.6727 * v190.__cosval);
    v192 = __sincos_stret(v191 * 0.5);
    sinval = v192.__sinval;
    v194 = (sinval + sinval) * v192.__cosval;
    v195 = 1.0 - (sinval + sinval) * sinval;
    v196 = __sincos_stret(v189 * 0.5);
    v197 = v196.__sinval / sqrt(v194 * v194 + v195 * v195);
    v198 = v197 * v194;
    v199 = v197 * v195;
    v200 = -(v196.__cosval * v192.__sinval);
    v201 = -(v199 * v192.__sinval - v198 * v192.__cosval);
    v202 = v198 * v192.__sinval + v199 * v192.__cosval;
    v203 = v200 - v202 + v201 + v192.__cosval * v196.__cosval;
    v204 = v202 + v192.__cosval * v196.__cosval - v196.__cosval * v192.__sinval - v201;
    v205 = v201 + v192.__cosval * v196.__cosval - v200 + v202;
    v206 = v205 * 0.5;
    v207 = (v192.__cosval * v196.__cosval - (v201 - v196.__cosval * v192.__sinval + v202)) * 0.5;
    v208 = v204 * 0.5 * v204;
    v209 = v205 * 0.5 * v205;
    v642 = 1.0 - (v209 + v208);
    v210 = v204 * 0.5 * v203;
    v211 = v207 * v205;
    v212 = v210 - v211;
    v213 = v207 * v204;
    *(double *)&v214 = v207 * v204 + v206 * v203;
    v215 = v211 + v210;
    v216 = 1.0 - v203 * v203 * 0.5;
    v217 = v216 - v209;
    *(double *)v667 = v642;
    *(double *)&v667[8] = v212;
    v218 = v207 * v203;
    v219 = v206 * v204 - v218;
    v220 = v206 * v203 - v213;
    v221 = v218 + v206 * v204;
    *(_OWORD *)&v667[16] = v214;
    v668 = v215;
    v669 = v216 - v209;
    v670 = v219;
    v671 = 0;
    v222 = v216 - v208;
    v672 = v220;
    v673 = v221;
    v674 = v216 - v208;
    v675 = 0u;
    v676 = 0u;
    v677 = 0x3FF0000000000000;
    gm::operator*<double,4,4,4>((double *)&v678, (double *)v650, (double *)v667);
    *(_OWORD *)v650 = v678;
    *(_OWORD *)&v650[16] = v679;
    v651 = v680;
    v652 = v681;
    v653 = v682;
    v654 = v683;
    v655 = v684;
    v656 = v685;
    v223 = *(double *)(a7 + 128);
    v224 = *(double *)(a7 + 136);
    v226 = *(double *)(a7 + 144);
    v225 = *(_QWORD *)(a7 + 152);
    v227 = v223 * v642 + v224 * v212 + v226 * *(double *)&v214;
    v228 = v223 * v215 + v224 * v217 + v226 * v219;
    v229 = v223 * v220 + v224 * v221 + v226 * v222;
    *(double *)(a7 + 160) = v227;
    *(double *)(a7 + 168) = v228;
  }
  v230 = v647;
  *(double *)(a7 + 176) = v229;
  *(_QWORD *)(a7 + 184) = v225;
  v231 = 0.0;
  if (!*(_BYTE *)(a1 + 140))
    v231 = fmin(fmax(fabs(sqrt(*(double *)(a2 + 496) * *(double *)(a2 + 496)+ *(double *)(a2 + 504) * *(double *)(a2 + 504)+ *(double *)(a2 + 512) * *(double *)(a2 + 512))+ -6378137.0)* 0.000000666666667+ -4.66666667, 0.0), 1.0);
  *(float *)(a7 + 424) = v231;
  if (!**(_QWORD **)&v648.f64[0])
    goto LABEL_591;
  if (!*(_BYTE *)(a1 + 120))
  {
    *(_DWORD *)(a7 + 192) = 0;
    objc_msgSend(v15, "daVinciGroundAmbientOcclusionRadius");
    v249 = v248;
    objc_msgSend(v15, "daVinciGroundAmbientOcclusionIntensity");
    v251 = v250;
    if (!v664 || (objc_msgSend(v15, "daVinciLightingStylesOverrideEnabled") & 1) != 0)
      goto LABEL_458;
    v252 = *(_QWORD *)(v661 + 24);
    v253 = *(float **)v252;
    if (*(_QWORD *)v252)
    {
      v254 = *v253;
      v255 = *v253 == 1.0;
      if (*(_BYTE *)(v252 + 10) && v254 != 0.0 && v254 != 1.0)
      {
LABEL_398:
        if ((gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(v661 + 24), 0x51u, 0) & 1) != 0)
          goto LABEL_401;
        v475 = 1;
LABEL_400:
        if (!gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v252, 0x51u, v475))
          goto LABEL_410;
LABEL_401:
        v476 = fminf(fmaxf(v647, 0.0), 23.0);
        if (v253)
        {
          v477 = *v253;
          v478 = *v253 == 1.0;
          if (*(_BYTE *)(v252 + 10) && v477 != 0.0 && v477 != 1.0)
            goto LABEL_408;
        }
        else
        {
          v478 = 0;
        }
        v479 = *(unsigned __int8 *)(v252 + v478 + 11);
        v477 = 0.0;
        if (v479 != 2)
        {
          gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v252, 0x51u, v479, 0, v476);
          v249 = v483;
LABEL_410:
          *(float *)(a7 + 196) = v249;
          v484 = *(_QWORD *)(v661 + 24);
          v485 = *(float **)v484;
          if (*(_QWORD *)v484)
          {
            v486 = *v485;
            v487 = *v485 == 1.0;
            if (*(_BYTE *)(v484 + 10) && v486 != 0.0 && v486 != 1.0)
            {
LABEL_417:
              if ((gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(v661 + 24), 0x52u, 0) & 1) != 0)
                goto LABEL_420;
              v488 = 1;
LABEL_419:
              if (!gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v484, 0x52u, v488))
                goto LABEL_459;
LABEL_420:
              v489 = fminf(fmaxf(v647, 0.0), 23.0);
              if (v485)
              {
                v490 = *v485;
                v491 = *v485 == 1.0;
                if (*(_BYTE *)(v484 + 10) && v490 != 0.0 && v490 != 1.0)
                  goto LABEL_427;
              }
              else
              {
                v491 = 0;
              }
              v492 = *(unsigned __int8 *)(v484 + v491 + 11);
              v490 = 0.0;
              if (v492 != 2)
                goto LABEL_638;
LABEL_427:
              LOBYTE(v678) = 1;
              v667[0] = 1;
              gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v484, 0x52u, 0, (BOOL *)&v678, v489);
              v494 = v493;
              gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v484, 0x52u, 1, v667, v489);
LABEL_637:
              v251 = v494 + (float)((float)(v495 - v494) * v490);
              goto LABEL_459;
            }
          }
          else
          {
            v487 = 0;
          }
          v488 = *(unsigned __int8 *)(v484 + v487 + 11);
          if (v488 != 2)
            goto LABEL_419;
          goto LABEL_417;
        }
LABEL_408:
        LOBYTE(v678) = 1;
        v667[0] = 1;
        gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v252, 0x51u, 0, (BOOL *)&v678, v476);
        v481 = v480;
        gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v252, 0x51u, 1, v667, v476);
        v249 = v481 + (float)((float)(v482 - v481) * v477);
        goto LABEL_410;
      }
    }
    else
    {
      v255 = 0;
    }
    v475 = *(unsigned __int8 *)(v252 + v255 + 11);
    if (v475 != 2)
      goto LABEL_400;
    goto LABEL_398;
  }
  v232 = *(double *)(a2 + 32);
  v233 = *(unsigned __int8 *)(a2 + 3776) - 1;
  if (v233 >= 3)
  {
    v234 = *(double *)(a2 + 8);
    v235 = cos(v234 + v234) * -559.82 + 111132.92;
    v236 = v235 + cos(v234 * 4.0) * 1.175;
    v237 = v236 + cos(v234 * 6.0) * -0.0023;
    v238 = v234 * 0.5;
    v239 = tan(v234 * 0.5 + 0.78103484);
    v240 = log(v239);
    v241 = tan(v238 + 0.789761487);
    v232 = fabs((log(v241) - v240) * 0.159154943) * v232 / v237;
  }
  v665 = -1.79769313e308;
  v666 = 1.79769313e308;
  *(_QWORD *)&v678 = a2;
  *((_QWORD *)&v678 + 1) = v650;
  *(_QWORD *)&v679 = &v666;
  *((_QWORD *)&v679 + 1) = &v665;
  v242 = *a4;
  if ((v243 & 1) == 0
  {
    qword_1ECE2F300 = 0;
    qword_1ECE2F2F8 = 0;
    md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
    __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
  }
  v244 = *(_WORD **)(v242 + 48);
  v245 = *(_WORD **)(v242 + 56);
  if (v244 == v245)
  {
    v246 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  }
  else
  {
    v246 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    v247 = *(_WORD **)(v242 + 48);
    while (*v247 != 33)
    {
      v247 += 16;
      if (v247 == v245)
        goto LABEL_272;
    }
    if (v247 == v245)
    {
      v246 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v244 != 33)
      {
        v244 += 16;
        if (v244 == v245)
        {
          v244 = *(_WORD **)(v242 + 56);
          break;
        }
      }
      v246 = (uint64_t *)(v244 + 4);
    }
  }
LABEL_272:
  v282 = *v246;
  v280 = v246 + 1;
  v281 = (_QWORD *)v282;
  if ((uint64_t *)v282 != v280)
  {
    do
    {
      md::LightingLogic::_calculateShadowProjectionBounds(md::CameraContext const&,md::SceneContext const&,gm::Matrix<double,4,4> const&,gm::Box<double,3> &)const::$_0::operator()((uint64_t)&v678, v281[4], (std::__shared_weak_count *)v281[5]);
      v289 = (uint64_t *)v281[1];
      if (v289)
      {
        do
        {
          v290 = v289;
          v289 = (uint64_t *)*v289;
        }
        while (v289);
      }
      else
      {
        do
        {
          v290 = (uint64_t *)v281[2];
          _ZF = *v290 == (_QWORD)v281;
          v281 = v290;
        }
        while (!_ZF);
      }
      v281 = v290;
    }
    while (v290 != v280);
  }
  v283 = *a4;
  if ((v284 & 1) == 0
  {
    qword_1ECE2F300 = 0;
    qword_1ECE2F2F8 = 0;
    md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
    __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
  }
  v285 = *(_WORD **)(v283 + 48);
  v286 = *(_WORD **)(v283 + 56);
  v287 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v285 != v286)
  {
    v288 = *(_WORD **)(v283 + 48);
    while (*v288 != 54)
    {
      v288 += 16;
      if (v288 == v286)
        goto LABEL_292;
    }
    if (v288 == v286)
    {
      v287 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v285 != 54)
      {
        v285 += 16;
        if (v285 == v286)
        {
          v285 = *(_WORD **)(v283 + 56);
          break;
        }
      }
      v287 = (uint64_t *)(v285 + 4);
    }
  }
LABEL_292:
  v293 = *v287;
  v291 = v287 + 1;
  v292 = (_QWORD *)v293;
  if ((uint64_t *)v293 != v291)
  {
    do
    {
      md::LightingLogic::_calculateShadowProjectionBounds(md::CameraContext const&,md::SceneContext const&,gm::Matrix<double,4,4> const&,gm::Box<double,3> &)const::$_0::operator()((uint64_t)&v678, v292[4], (std::__shared_weak_count *)v292[5]);
      v304 = (uint64_t *)v292[1];
      if (v304)
      {
        do
        {
          v305 = v304;
          v304 = (uint64_t *)*v304;
        }
        while (v304);
      }
      else
      {
        do
        {
          v305 = (uint64_t *)v292[2];
          _ZF = *v305 == (_QWORD)v292;
          v292 = v305;
        }
        while (!_ZF);
      }
      v292 = v305;
    }
    while (v305 != v291);
  }
  v294 = *(double *)(a2 + 496);
  v295 = *(double *)(a2 + 504);
  v296 = *(double *)(a2 + 512);
  v297 = v294 + *(double *)(a2 + 3088) * v232;
  v298 = v295 + *(double *)(a2 + 3096) * v232;
  v299 = v296 + *(double *)(a2 + 3104) * v232;
  if (v233 >= 3)
  {
    v303 = 1.0;
    v301 = 0.0;
    v302 = 0.0;
  }
  else
  {
    v300 = 1.0 / sqrt(v297 * v297 + v298 * v298 + v299 * v299);
    v301 = v300 * v297;
    v302 = v300 * v298;
    v303 = v300 * v299;
  }
  v306 = *(double *)(a2 + 1200);
  v307 = v306 - v294;
  v308 = *(double *)(a2 + 1208);
  v309 = v308 - v295;
  v310 = *(double *)(a2 + 1216);
  v311 = v310 - v296;
  v312 = (v306 - v294) * v301 + (v308 - v295) * v302 + (v310 - v296) * v303;
  if (fabs(v312) <= 2.22044605e-16)
  {
    v385 = *(double *)(a2 + 1176);
    v386 = *(double *)(a2 + 1184);
    v387 = *(double *)(a2 + 1192);
    v388 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v655, *(float64x2_t *)v650, v385), v651, v386), v653, v387);
    v389.f64[1] = *(float64_t *)&v667[8];
    v389.f64[0] = *(double *)&v656 + *(double *)&v650[16] * v385 + *(double *)&v652 * v386 + *(double *)&v654 * v387;
    v390 = (float64x2_t)vextq_s8((int8x16_t)v388, (int8x16_t)v388, 8uLL);
    v388.f64[1] = v390.f64[1];
    v388.f64[0] = *(float64_t *)v667;
    v391.i64[1] = *(_QWORD *)&v390.f64[1];
    v391.i64[0] = *(_QWORD *)&v389.f64[0];
    v392 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v388, v389), v391, *(int8x16_t *)v667);
    v390.f64[1] = v389.f64[0];
    v393 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v655, *(float64x2_t *)v650, v306), v651, v308), v653, v310);
    v394.f64[1] = v392.f64[1];
    v394.f64[0] = *(double *)&v656 + *(double *)&v650[16] * v306 + *(double *)&v652 * v308 + *(double *)&v654 * v310;
    v389.f64[0] = v394.f64[0];
    v395 = (float64x2_t)vextq_s8(v393, v393, 8uLL);
    v396.f64[1] = v395.f64[1];
    v396.f64[0] = v392.f64[0];
    v397 = (int8x16_t)vcgtq_f64(v396, v394);
    v396.f64[1] = v395.f64[1];
    v396.f64[0] = v389.f64[0];
    v398 = vbslq_s8(v397, (int8x16_t)v396, (int8x16_t)v392);
    v395.f64[1] = v389.f64[0];
    v399 = vmaxnmq_f64(vmaxnmq_f64(*(float64x2_t *)&v667[16], v390), v395);
    v392.f64[0] = *(float64_t *)(a2 + 1224);
    v395.f64[0] = *(float64_t *)(a2 + 1232);
    v396.f64[0] = *(float64_t *)(a2 + 1240);
    v400 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v655, *(float64x2_t *)v650, v392.f64[0]), v651, v395.f64[0]), v653, v396.f64[0]);
    *(_QWORD *)&v392.f64[1] = v398.i64[1];
    v392.f64[0] = *(double *)&v656
                + *(double *)&v650[16] * v392.f64[0]
                + *(double *)&v652 * v395.f64[0]
                + *(double *)&v654 * v396.f64[0];
    v389.f64[0] = v392.f64[0];
    v401 = (float64x2_t)vextq_s8(v400, v400, 8uLL);
    v396.f64[1] = v401.f64[1];
    *(_QWORD *)&v396.f64[0] = v398.i64[0];
    v402 = (float64x2_t)vcgtq_f64(v396, v392);
    v396.f64[1] = v401.f64[1];
    v396.f64[0] = v389.f64[0];
    v403 = vbslq_s8((int8x16_t)v402, (int8x16_t)v396, v398);
    v401.f64[1] = v389.f64[0];
    v404 = vmaxnmq_f64(v399, v401);
    v402.f64[0] = *(float64_t *)(a2 + 1248);
    v401.f64[0] = *(float64_t *)(a2 + 1256);
    v396.f64[0] = *(float64_t *)(a2 + 1264);
    v405 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v655, *(float64x2_t *)v650, v402.f64[0]), v651, v401.f64[0]), v653, v396.f64[0]);
    *(_QWORD *)&v402.f64[1] = v403.i64[1];
    v402.f64[0] = *(double *)&v656
                + *(double *)&v650[16] * v402.f64[0]
                + *(double *)&v652 * v401.f64[0]
                + *(double *)&v654 * v396.f64[0];
    v406 = (float64x2_t)vextq_s8(v405, v405, 8uLL);
    v396.f64[1] = v406.f64[1];
    *(_QWORD *)&v396.f64[0] = v403.i64[0];
    v405.i64[1] = *(_QWORD *)&v406.f64[1];
    v405.i64[0] = *(_QWORD *)&v402.f64[0];
    v407 = vbslq_s8((int8x16_t)vcgtq_f64(v396, v402), v405, v403);
    v406.f64[1] = v402.f64[0];
    v408 = vmaxnmq_f64(v404, v406);
    v402.f64[0] = *(float64_t *)(a2 + 1272);
    v406.f64[0] = *(float64_t *)(a2 + 1280);
    v396.f64[0] = *(float64_t *)(a2 + 1288);
    v409 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v655, *(float64x2_t *)v650, v402.f64[0]), v651, v406.f64[0]), v653, v396.f64[0]);
    *(_QWORD *)&v402.f64[1] = v407.i64[1];
    v402.f64[0] = *(double *)&v656
                + *(double *)&v650[16] * v402.f64[0]
                + *(double *)&v652 * v406.f64[0]
                + *(double *)&v654 * v396.f64[0];
    v389.f64[0] = v402.f64[0];
    v410 = (float64x2_t)vextq_s8(v409, v409, 8uLL);
    v396.f64[1] = v410.f64[1];
    *(_QWORD *)&v396.f64[0] = v407.i64[0];
    v411 = (float64x2_t)vcgtq_f64(v396, v402);
    v396.f64[1] = v410.f64[1];
    v396.f64[0] = v389.f64[0];
    v412 = vbslq_s8((int8x16_t)v411, (int8x16_t)v396, v407);
    v410.f64[1] = v389.f64[0];
    v413 = vmaxnmq_f64(v408, v410);
    v411.f64[0] = *(float64_t *)(a2 + 1296);
    v410.f64[0] = *(float64_t *)(a2 + 1304);
    v396.f64[0] = *(float64_t *)(a2 + 1312);
    v414 = vmlaq_n_f64(vmlaq_n_f64(v655, *(float64x2_t *)v650, v411.f64[0]), v651, v410.f64[0]);
    *(_QWORD *)&v411.f64[1] = v412.i64[1];
    v411.f64[0] = *(double *)&v656
                + *(double *)&v650[16] * v411.f64[0]
                + *(double *)&v652 * v410.f64[0]
                + *(double *)&v654 * v396.f64[0];
    v389.f64[0] = v411.f64[0];
    v415 = (int8x16_t)vmlaq_n_f64(v414, v653, v396.f64[0]);
    v416 = (float64x2_t)vextq_s8(v415, v415, 8uLL);
    v396.f64[1] = v416.f64[1];
    *(_QWORD *)&v396.f64[0] = v412.i64[0];
    v417 = (float64x2_t)vcgtq_f64(v396, v411);
    v396.f64[1] = v416.f64[1];
    v396.f64[0] = v389.f64[0];
    v418 = vbslq_s8((int8x16_t)v417, (int8x16_t)v396, v412);
    v416.f64[1] = v389.f64[0];
    v419 = vmaxnmq_f64(v413, v416);
    v417.f64[0] = *(float64_t *)(a2 + 1320);
    v416.f64[0] = *(float64_t *)(a2 + 1328);
    v396.f64[0] = *(float64_t *)(a2 + 1336);
    v420 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v655, *(float64x2_t *)v650, v417.f64[0]), v651, v416.f64[0]), v653, v396.f64[0]);
    *(_QWORD *)&v417.f64[1] = v418.i64[1];
    v417.f64[0] = *(double *)&v656
                + *(double *)&v650[16] * v417.f64[0]
                + *(double *)&v652 * v416.f64[0]
                + *(double *)&v654 * v396.f64[0];
    v389.f64[0] = v417.f64[0];
    v421 = (float64x2_t)vextq_s8(v420, v420, 8uLL);
    v396.f64[1] = v421.f64[1];
    *(_QWORD *)&v396.f64[0] = v418.i64[0];
    v422 = (int8x16_t)vcgtq_f64(v396, v417);
    v396.f64[1] = v421.f64[1];
    v396.f64[0] = v389.f64[0];
    v421.f64[1] = v389.f64[0];
    v423 = vbslq_s8(v422, (int8x16_t)v396, v418);
    v424 = vmaxnmq_f64(v419, v421);
    v422.i64[0] = *(_QWORD *)(a2 + 1344);
    v421.f64[0] = *(float64_t *)(a2 + 1352);
    v396.f64[0] = *(float64_t *)(a2 + 1360);
    v425 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v655, *(float64x2_t *)v650, *(double *)v422.i64), v651, v421.f64[0]), v653, v396.f64[0]);
    *(_QWORD *)&v426.f64[1] = v423.i64[1];
    v426.f64[0] = *(double *)&v656
                + *(double *)&v650[16] * *(double *)v422.i64
                + *(double *)&v652 * v421.f64[0]
                + *(double *)&v654 * v396.f64[0];
    v427 = (float64x2_t)vextq_s8((int8x16_t)v425, (int8x16_t)v425, 8uLL);
    v425.f64[1] = v427.f64[1];
    *(_QWORD *)&v425.f64[0] = v423.i64[0];
    v428 = (int8x16_t)vcgtq_f64(v425, v426);
    v426.f64[1] = v427.f64[1];
    v427.f64[1] = v426.f64[0];
    v383 = vbslq_s8(v428, (int8x16_t)v426, v423);
    *(int8x16_t *)v667 = v383;
    *(float64x2_t *)&v667[16] = vmaxnmq_f64(v424, v427);
    v384 = *(double *)&v667[24];
    v382 = (float64x2_t)vextq_s8(v383, *(int8x16_t *)&v667[16], 8uLL);
  }
  else
  {
    v313 = (v301 * v297 + v302 * v298 + v303 * v299 - (v301 * v294 + v302 * v295 + v303 * v296)) / v312;
    v314 = *(double *)(a2 + 1296) - v294;
    v315 = *(double *)(a2 + 1304) - v295;
    v316 = *(double *)(a2 + 1312) - v296;
    v317 = *(double *)(a2 + 1248) - v294;
    v318 = *(double *)(a2 + 1256) - v295;
    v319 = *(double *)(a2 + 1264) - v296;
    v320 = *(double *)(a2 + 1344) - v294;
    v321 = *(double *)(a2 + 1352) - v295;
    v322 = *(double *)(a2 + 1360) - v296;
    v323 = v294 + v313 * v307;
    v324 = v295 + v313 * v309;
    v325 = v296 + v313 * v311;
    v326 = v294 + v314 * v313;
    v327 = v295 + v315 * v313;
    v649 = v296 + v316 * v313;
    v328 = v294 + v317 * v313;
    v329 = v295 + v318 * v313;
    v643 = v296 + v319 * v313;
    v330 = v294 + v320 * v313;
    v331 = v295 + v321 * v313;
    v640 = v296 + v322 * v313;
    v332 = sqrt(v307 * v307 + v309 * v309 + v311 * v311);
    v333 = v232 * (v332 + v332) / *(double *)(a2 + 976);
    v334 = v333 / v332;
    v335 = v294 + v334 * v307;
    v336 = v295 + v334 * v309;
    v337 = v296 + v334 * v311;
    v338 = v333 / sqrt(v314 * v314 + v315 * v315 + v316 * v316);
    v339 = v294 + v338 * v314;
    v340 = v295 + v338 * v315;
    v341 = v296 + v338 * v316;
    v342 = v333 / sqrt(v317 * v317 + v318 * v318 + v319 * v319);
    v343 = v294 + v342 * v317;
    v344 = v295 + v342 * v318;
    v345 = v296 + v342 * v319;
    v346 = v333 / sqrt(v320 * v320 + v321 * v321 + v322 * v322);
    v347 = v294 + v346 * v320;
    v348 = v295 + v346 * v321;
    v349 = v296 + v346 * v322;
    v350 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v655, *(float64x2_t *)v650, v323), v651, v324), v653, v325);
    v351 = *(double *)&v656 + *(double *)&v650[16] * v323 + *(double *)&v652 * v324 + *(double *)&v654 * v325;
    v352 = vmlaq_n_f64(vmlaq_n_f64(v655, *(float64x2_t *)v650, v328), v651, v329);
    v353 = *(double *)&v656 + *(double *)&v650[16] * v328 + *(double *)&v652 * v329;
    v230 = v647;
    v354 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v655, *(float64x2_t *)v650, v326), v651, v327), v653, v649);
    v355 = *(double *)&v656 + *(double *)&v650[16] * v326 + *(double *)&v652 * v327 + *(double *)&v654 * v649;
    v356 = vmlaq_n_f64(v352, v653, v643);
    v357 = v353 + *(double *)&v654 * v643;
    v358 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v655, *(float64x2_t *)v650, v330), v651, v331), v653, v640);
    v359 = *(double *)&v656 + *(double *)&v650[16] * v330 + *(double *)&v652 * v331 + *(double *)&v654 * v640;
    v360 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v655, *(float64x2_t *)v650, v335), v651, v336), v653, v337);
    v361 = *(double *)&v656 + *(double *)&v650[16] * v335 + *(double *)&v652 * v336 + *(double *)&v654 * v337;
    v362 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v655, *(float64x2_t *)v650, v339), v651, v340), v653, v341);
    v363 = *(double *)&v656 + *(double *)&v650[16] * v339 + *(double *)&v652 * v340 + *(double *)&v654 * v341;
    v364 = vminnmq_f64(v360, vminnmq_f64(v358, vminnmq_f64(v356, vminnmq_f64(v354, vminnmq_f64(v350, (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL))))));
    v365 = *(double *)&v656 + *(double *)&v650[16] * v343 + *(double *)&v652 * v344 + *(double *)&v654 * v345;
    v366 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v655, *(float64x2_t *)v650, v343), v651, v344), v653, v345);
    v367.f64[1] = v364.f64[1];
    v367.f64[0] = v351;
    v368 = *(double *)&v656 + *(double *)&v650[16] * v347 + *(double *)&v652 * v348 + *(double *)&v654 * v349;
    v369 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v655, *(float64x2_t *)v650, v347), v651, v348), v653, v349);
    v370 = -1.79769313e308;
    v371.f64[1] = v362.f64[1];
    v371.f64[0] = -1.79769313e308;
    v372 = vcgtq_f64(v367, v371);
    v373 = vmovn_s64(vcgtq_f64(v364, v362)).u32[0];
    *(int32x2_t *)v372.i8 = vmovn_s64(v372);
    v374 = v372.i32[1];
    v375 = vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(v350, (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL)), v354), v356), v358), v360);
    v376 = v372.i8[0];
    v377 = fmin(v351, 1.79769313e308);
    if ((v376 & 1) != 0)
      v370 = v351;
    v378 = fmax(fmax(fmax(v370, v355), v357), v359);
    v379 = fmin(v361, fmin(v359, fmin(v357, fmin(v355, v377))));
    v380.i64[0] = v373;
    v380.i64[1] = v374;
    v381 = fmax(fmax(fmax(v378, v361), v363), v365);
    v382 = vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(v375, v362), v366), v369);
    v648 = vminnmq_f64(v369, vminnmq_f64(v366, (float64x2_t)vbslq_s8(v380, (int8x16_t)v362, (int8x16_t)v364)));
    *(double *)v383.i64 = fmin(v368, fmin(v365, fmin(v363, v379)));
    v384 = fmax(v381, v368);
    *(float64x2_t *)&v667[8] = v382;
    *(_QWORD *)v667 = v383.i64[0];
    *(double *)&v667[24] = v384;
  }
  if (v666 < *(double *)v383.i64)
  {
    *(double *)v667 = v666;
    *(double *)v383.i64 = v666;
  }
  if (v665 > v384)
  {
    *(double *)&v667[24] = v665;
    v384 = v665;
  }
  v429 = *(unsigned __int8 *)(a1 + 288);
  *(_BYTE *)(a1 + 288) = 1;
  v430 = *(float *)(a3 + 20) * *(float *)(a3 + 16);
  v431 = floorf(fmaxf(*(float *)(a2 + 3080) + *(float *)(a2 + 3076), 1.0));
  if (*(float *)(a1 + 256) != v431)
    goto LABEL_452;
  if (!v429)
    goto LABEL_452;
  if (vabds_f32(*(float *)(a1 + 260), v430) > 0.01)
    goto LABEL_452;
  v432.f64[0] = *(float64_t *)(a1 + 208);
  if (v648.f64[0] < v432.f64[0])
    goto LABEL_452;
  if (v648.f64[1] < *(double *)(a1 + 216))
    goto LABEL_452;
  v433 = *(double *)(a1 + 224);
  if (*(double *)v383.i64 < v433)
    goto LABEL_452;
  v434.f64[0] = *(float64_t *)(a1 + 232);
  if (v382.f64[0] > v434.f64[0])
    goto LABEL_452;
  if (v382.f64[1] > *(double *)(a1 + 240))
    goto LABEL_452;
  v435 = *(double *)(a1 + 248);
  if (v384 > v435)
    goto LABEL_452;
  v434.f64[1] = *(float64_t *)(a1 + 240);
  v432.f64[1] = *(float64_t *)(a1 + 216);
  v436 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3FE6666660000000uLL), vabsq_f64(vdivq_f64(vmaxnmq_f64(vsubq_f64(v382, v648), (float64x2_t)0), vmaxnmq_f64(vsubq_f64(v434, v432), (float64x2_t)0)))));
  if ((v436.i8[0] & 1) != 0
    || (v436.i8[4] & 1) != 0
    || fabs(fmax(v384 - *(double *)v383.i64, 0.0) / fmax(v435 - v433, 0.0)) < 0.699999988)
  {
    goto LABEL_452;
  }
  *(_QWORD *)&v679 = 0;
  v437 = &md::kMapDataTypesWithRegistries;
  *((_QWORD *)&v678 + 1) = 0;
  *(_QWORD *)&v678 = (char *)&v678 + 8;
  do
  {
    v438 = (unsigned __int16)*v437;
    v439 = *a4;
    if ((v440 & 1) == 0
    {
      qword_1ECE2F300 = 0;
      qword_1ECE2F2F8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1ECE2F2F8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_19F029000);
    }
    v441 = *(unsigned __int16 **)(v439 + 48);
    v442 = *(unsigned __int16 **)(v439 + 56);
    if (v441 == v442)
      goto LABEL_337;
    v443 = *(unsigned __int16 **)(v439 + 48);
    while (*v443 != v438)
    {
      v443 += 16;
      if (v443 == v442)
        goto LABEL_337;
    }
    if (v443 == v442)
    {
LABEL_337:
      v444 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v441 != v438)
      {
        v441 += 16;
        if (v441 == v442)
        {
          v441 = *(unsigned __int16 **)(v439 + 56);
          break;
        }
      }
      v444 = (uint64_t *)(v441 + 4);
    }
    v447 = *v444;
    v446 = v444 + 1;
    v445 = (_QWORD *)v447;
    if ((uint64_t *)v447 != v446)
    {
      do
      {
        v448 = operator new(0x28uLL);
        v449 = *(_DWORD *)(v445[4] + 8);
        *((_DWORD *)v448 + 7) = v449;
        v450 = *((char *)v445 + 48);
        *((_BYTE *)v448 + 32) = *((_BYTE *)v445 + 48);
        v451 = *((_QWORD *)&v678 + 1);
        v452 = (_QWORD *)&v678 + 1;
        v453 = (_QWORD *)&v678 + 1;
        if (*((_QWORD *)&v678 + 1))
        {
          while (1)
          {
            while (1)
            {
              v453 = (_QWORD *)v451;
              v454 = *(unsigned __int8 *)(v451 + 32);
              v455 = (char)v454;
              v456 = *(_DWORD *)(v451 + 28);
              if (!(v454 == v450 ? v449 < v456 : v450 < (char)v454))
                break;
              v451 = *v453;
              v452 = v453;
              if (!*v453)
                goto LABEL_354;
            }
            v458 = v456 < v449;
            v459 = v450 == v455 ? v458 : v455 < v450;
            if (v459 != 1)
              break;
            v451 = v453[1];
            if (!v451)
            {
              v452 = v453 + 1;
              goto LABEL_354;
            }
          }
          operator delete(v448);
          v470 = (uint64_t *)v445[1];
          if (!v470)
          {
            do
            {
LABEL_389:
              v474 = (uint64_t *)v445[2];
              _ZF = *v474 == (_QWORD)v445;
              v445 = v474;
            }
            while (!_ZF);
            goto LABEL_340;
          }
        }
        else
        {
LABEL_354:
          *v448 = 0;
          v448[1] = 0;
          v448[2] = v453;
          *v452 = v448;
          if (*(_QWORD *)v678)
          {
            *(_QWORD *)&v678 = *(_QWORD *)v678;
            v448 = (_QWORD *)*v452;
          }
          v460 = (uint64_t *)*((_QWORD *)&v678 + 1);
          _ZF = v448 == *((_QWORD **)&v678 + 1);
          *((_BYTE *)v448 + 24) = v448 == *((_QWORD **)&v678 + 1);
          if (!_ZF)
          {
            do
            {
              v461 = v448[2];
              if (*(_BYTE *)(v461 + 24))
                break;
              v462 = *(uint64_t **)(v461 + 16);
              v463 = *v462;
              if (*v462 == v461)
              {
                v466 = v462[1];
                if (!v466 || (v467 = *(unsigned __int8 *)(v466 + 24), v464 = (_BYTE *)(v466 + 24), v467))
                {
                  if (*(_QWORD **)v461 == v448)
                  {
                    v468 = (uint64_t *)v448[2];
                  }
                  else
                  {
                    v468 = *(uint64_t **)(v461 + 8);
                    v469 = *v468;
                    *(_QWORD *)(v461 + 8) = *v468;
                    if (v469)
                    {
                      *(_QWORD *)(v469 + 16) = v461;
                      v462 = *(uint64_t **)(v461 + 16);
                    }
                    v468[2] = (uint64_t)v462;
                    *(_QWORD *)(*(_QWORD *)(v461 + 16) + 8 * (**(_QWORD **)(v461 + 16) != v461)) = v468;
                    *v468 = v461;
                    *(_QWORD *)(v461 + 16) = v468;
                    v462 = (uint64_t *)v468[2];
                    v461 = *v462;
                  }
                  *((_BYTE *)v468 + 24) = 1;
                  *((_BYTE *)v462 + 24) = 0;
                  v473 = *(_QWORD *)(v461 + 8);
                  *v462 = v473;
                  if (v473)
                    *(_QWORD *)(v473 + 16) = v462;
                  *(_QWORD *)(v461 + 16) = v462[2];
                  *(_QWORD *)(v462[2] + 8 * (*(_QWORD *)v462[2] != (_QWORD)v462)) = v461;
                  *(_QWORD *)(v461 + 8) = v462;
                  goto LABEL_385;
                }
              }
              else if (!v463 || (v465 = *(unsigned __int8 *)(v463 + 24), v464 = (_BYTE *)(v463 + 24), v465))
              {
                if (*(_QWORD **)v461 == v448)
                {
                  v471 = v448[1];
                  *(_QWORD *)v461 = v471;
                  if (v471)
                  {
                    *(_QWORD *)(v471 + 16) = v461;
                    v462 = *(uint64_t **)(v461 + 16);
                  }
                  v448[2] = v462;
                  *(_QWORD *)(*(_QWORD *)(v461 + 16) + 8 * (**(_QWORD **)(v461 + 16) != v461)) = v448;
                  v448[1] = v461;
                  *(_QWORD *)(v461 + 16) = v448;
                  v462 = (uint64_t *)v448[2];
                }
                else
                {
                  v448 = (_QWORD *)v448[2];
                }
                *((_BYTE *)v448 + 24) = 1;
                *((_BYTE *)v462 + 24) = 0;
                v461 = v462[1];
                v472 = *(_QWORD **)v461;
                v462[1] = *(_QWORD *)v461;
                if (v472)
                  v472[2] = v462;
                *(_QWORD *)(v461 + 16) = v462[2];
                *(_QWORD *)(v462[2] + 8 * (*(_QWORD *)v462[2] != (_QWORD)v462)) = v461;
                *(_QWORD *)v461 = v462;
LABEL_385:
                v462[2] = v461;
                break;
              }
              *(_BYTE *)(v461 + 24) = 1;
              v448 = v462;
              *((_BYTE *)v462 + 24) = v462 == v460;
              *v464 = 1;
            }
            while (v462 != v460);
          }
          *(_QWORD *)&v679 = v679 + 1;
          v470 = (uint64_t *)v445[1];
          if (!v470)
            goto LABEL_389;
        }
        do
        {
          v474 = v470;
          v470 = (uint64_t *)*v470;
        }
        while (v470);
LABEL_340:
        v445 = v474;
      }
      while (v474 != v446);
    }
    ++v437;
  }
  while (v437 != (__int16 *)&unk_1A001A792);
  v496 = (uint64_t **)(a1 + 264);
  if ((_QWORD)v679 == *(_QWORD *)(a1 + 280))
  {
    v497 = (_QWORD *)v678;
    if ((__int128 *)v678 == (__int128 *)((char *)&v678 + 8))
    {
LABEL_639:
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)&v678 + 1));
      v513.f64[0] = *(float64_t *)(a1 + 208);
      v504 = 1;
      goto LABEL_455;
    }
    v498 = *v496;
    while (*((unsigned __int8 *)v497 + 32) == *((unsigned __int8 *)v498 + 32)
         && *((_DWORD *)v497 + 7) == *((_DWORD *)v498 + 7))
    {
      v500 = (_QWORD *)v497[1];
      v501 = v497;
      if (v500)
      {
        do
        {
          v497 = v500;
          v500 = (_QWORD *)*v500;
        }
        while (v500);
      }
      else
      {
        do
        {
          v497 = (_QWORD *)v501[2];
          _ZF = *v497 == (_QWORD)v501;
          v501 = v497;
        }
        while (!_ZF);
      }
      v502 = (uint64_t *)v498[1];
      if (v502)
      {
        do
        {
          v503 = v502;
          v502 = (uint64_t *)*v502;
        }
        while (v502);
      }
      else
      {
        do
        {
          v503 = (uint64_t *)v498[2];
          _ZF = *v503 == (_QWORD)v498;
          v498 = v503;
        }
        while (!_ZF);
      }
      v498 = v503;
      if (v497 == (_QWORD *)((char *)&v678 + 8))
        goto LABEL_639;
    }
  }
  if (v496 != (uint64_t **)&v678)
    std::__tree<md::LayerDataIdentWithWorld>::__assign_multi<std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long>>(v496, (_QWORD *)v678, (_QWORD *)&v678 + 1);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)&v678 + 1));
  v384 = *(double *)&v667[24];
  v383.i64[0] = *(_QWORD *)v667;
LABEL_452:
  v504 = 0;
  v505 = v384 - *(double *)v383.i64;
  v506 = *(double *)v383.i64 + v505 * 0.5;
  v507 = v505 * 0.550000012;
  _NF = v505 < 0.0;
  v508 = 0.0;
  if (!_NF)
    v508 = v507;
  v509 = vsubq_f64(*(float64x2_t *)&v667[8], v648);
  __asm { FMOV            V4.2D, #0.5 }
  v511 = vmlaq_f64(v648, _Q4, v509);
  v512 = (float64x2_t)vbicq_s8((int8x16_t)vmulq_f64(v509, (float64x2_t)vdupq_n_s64(0x3FE19999A0000000uLL)), (int8x16_t)vcltzq_f64(v509));
  v513 = vsubq_f64(v511, v512);
  *(float64x2_t *)(a1 + 208) = v513;
  *(double *)(a1 + 224) = v506 - v508;
  *(float64x2_t *)(a1 + 232) = vaddq_f64(v512, v511);
  *(double *)(a1 + 248) = v508 + v506;
  *(float *)(a1 + 256) = v431;
  *(float *)(a1 + 260) = v430;
LABEL_455:
  *(float64_t *)(a7 + 248) = v513.f64[0];
  *(_QWORD *)(a7 + 256) = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a7 + 264) = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a7 + 272) = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a7 + 280) = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a7 + 288) = *(_QWORD *)(a1 + 248);
  *(_BYTE *)(a7 + 228) = v504;
  *(_QWORD *)(a7 + 232) = *(_QWORD *)(a8 + 64);
  *(_BYTE *)(a7 + 240) = *(_BYTE *)(a8 + 72);
  v514 = *(_OWORD *)&v650[16];
  *(_OWORD *)(a7 + 296) = *(_OWORD *)v650;
  *(_OWORD *)(a7 + 312) = v514;
  v515 = v652;
  *(float64x2_t *)(a7 + 328) = v651;
  *(_OWORD *)(a7 + 344) = v515;
  v516 = v654;
  *(float64x2_t *)(a7 + 360) = v653;
  *(_OWORD *)(a7 + 376) = v516;
  v517 = v656;
  *(float64x2_t *)(a7 + 392) = v655;
  *(_OWORD *)(a7 + 408) = v517;
  objc_msgSend(v15, "daVinciShadowIntensity", v623);
  v519 = v518;
  objc_msgSend(v15, "daVinciGroundAmbientOcclusionRadius");
  v249 = v520;
  objc_msgSend(v15, "daVinciGroundAmbientOcclusionIntensity");
  v251 = v521;
  if (!v664 || (objc_msgSend(v15, "daVinciLightingStylesOverrideEnabled") & 1) != 0)
  {
    *(float *)(a7 + 192) = v519;
LABEL_458:
    *(float *)(a7 + 196) = v249;
    goto LABEL_459;
  }
  v527 = *(_QWORD *)(v661 + 24);
  v528 = *(float **)v527;
  if (!*(_QWORD *)v527)
  {
    v530 = 0;
    goto LABEL_520;
  }
  v529 = *v528;
  v530 = *v528 == 1.0;
  if (!*(_BYTE *)(v527 + 10) || v529 == 0.0 || v529 == 1.0)
  {
LABEL_520:
    v562 = *(unsigned __int8 *)(v527 + v530 + 11);
    if (v562 != 2)
      goto LABEL_523;
  }
  if ((gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(v661 + 24), 0x50u, 0) & 1) != 0)
    goto LABEL_524;
  v562 = 1;
LABEL_523:
  if (!gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v527, 0x50u, v562))
    goto LABEL_600;
LABEL_524:
  v563 = fminf(fmaxf(v230, 0.0), 23.0);
  if (v528)
  {
    v564 = *v528;
    v565 = *v528 == 1.0;
    if (*(_BYTE *)(v527 + 10) && v564 != 0.0 && v564 != 1.0)
      goto LABEL_598;
  }
  else
  {
    v565 = 0;
  }
  v598 = *(unsigned __int8 *)(v527 + v565 + 11);
  v564 = 0.0;
  if (v598 == 2)
  {
LABEL_598:
    LOBYTE(v678) = 1;
    LOBYTE(v666) = 1;
    gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v527, 0x50u, 0, (BOOL *)&v678, v563);
    v600 = v599;
    gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v527, 0x50u, 1, (BOOL *)&v666, v563);
    v519 = v600 + (float)((float)(v601 - v600) * v564);
    goto LABEL_600;
  }
  gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v527, 0x50u, v598, 0, v563);
  v519 = v602;
LABEL_600:
  *(float *)(a7 + 192) = v519;
  v603 = *(_QWORD *)(v661 + 24);
  v604 = *(float **)v603;
  if (!*(_QWORD *)v603)
  {
    v606 = 0;
    goto LABEL_606;
  }
  v605 = *v604;
  v606 = *v604 == 1.0;
  if (!*(_BYTE *)(v603 + 10) || v605 == 0.0 || v605 == 1.0)
  {
LABEL_606:
    v607 = *(unsigned __int8 *)(v603 + v606 + 11);
    if (v607 != 2)
      goto LABEL_609;
  }
  if ((gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(v661 + 24), 0x51u, 0) & 1) != 0)
    goto LABEL_610;
  v607 = 1;
LABEL_609:
  if (!gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v603, 0x51u, v607))
    goto LABEL_619;
LABEL_610:
  v608 = fminf(fmaxf(v230, 0.0), 23.0);
  if (v604)
  {
    v609 = *v604;
    v610 = *v604 == 1.0;
    if (*(_BYTE *)(v603 + 10) && v609 != 0.0 && v609 != 1.0)
      goto LABEL_617;
  }
  else
  {
    v610 = 0;
  }
  v611 = *(unsigned __int8 *)(v603 + v610 + 11);
  v609 = 0.0;
  if (v611 == 2)
  {
LABEL_617:
    LOBYTE(v678) = 1;
    LOBYTE(v666) = 1;
    gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v603, 0x51u, 0, (BOOL *)&v678, v608);
    v613 = v612;
    gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v603, 0x51u, 1, (BOOL *)&v666, v608);
    v249 = v613 + (float)((float)(v614 - v613) * v609);
    goto LABEL_619;
  }
  gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v603, 0x51u, v611, 0, v608);
  v249 = v615;
LABEL_619:
  *(float *)(a7 + 196) = v249;
  v484 = *(_QWORD *)(v661 + 24);
  v616 = *(float **)v484;
  if (*(_QWORD *)v484)
  {
    v617 = *v616;
    v618 = *v616 == 1.0;
    if (*(_BYTE *)(v484 + 10) && v617 != 0.0 && v617 != 1.0)
      goto LABEL_626;
  }
  else
  {
    v618 = 0;
  }
  v619 = *(unsigned __int8 *)(v484 + v618 + 11);
  if (v619 != 2)
    goto LABEL_628;
LABEL_626:
  if ((gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(*(_QWORD *)(v661 + 24), 0x52u, 0) & 1) == 0)
  {
    v619 = 1;
LABEL_628:
    if (!gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(v484, 0x52u, v619))
      goto LABEL_459;
  }
  v489 = fminf(fmaxf(v230, 0.0), 23.0);
  if (v616)
  {
    v490 = *v616;
    v620 = *v616 == 1.0;
    if (*(_BYTE *)(v484 + 10) && v490 != 0.0 && v490 != 1.0)
      goto LABEL_636;
  }
  else
  {
    v620 = 0;
  }
  v492 = *(unsigned __int8 *)(v484 + v620 + 11);
  v490 = 0.0;
  if (v492 == 2)
  {
LABEL_636:
    LOBYTE(v678) = 1;
    LOBYTE(v666) = 1;
    gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v484, 0x52u, 0, (BOOL *)&v678, v489);
    v494 = v621;
    gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v484, 0x52u, 1, (BOOL *)&v666, v489);
    goto LABEL_637;
  }
LABEL_638:
  gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>((int *)v484, 0x52u, v492, 0, v489);
  v251 = v622;
LABEL_459:
  *(float *)(a7 + 200) = v251;
  *(_BYTE *)(a7 + 224) = *(_BYTE *)(a1 + 120);
  v523 = *(float *)(a7 + 192) > 0.0 && *(_BYTE *)(a1 + 136) == 0;
  *(_BYTE *)(a7 + 225) = v523;
  if (*(_BYTE *)(a7 + 227))
  {
    v524 = 0;
  }
  else
  {
    v525 = objc_msgSend(v15, "daVinciGroundAmbientOcclusionEnabled");
    if (*(float *)(a7 + 200) > 0.0)
      v526 = v525;
    else
      v526 = 0;
    v524 = v526 == 1 && *(float *)(a7 + 196) > 0.0;
    v230 = v647;
  }
  *(_BYTE *)(a7 + 226) = v524;
  v531 = *(_QWORD *)(a1 + 192);
  v532 = *(std::__shared_weak_count **)(a1 + 200);
  *(_QWORD *)v667 = v531;
  *(_QWORD *)&v667[8] = v532;
  if (v532)
  {
    v533 = (unint64_t *)&v532->__shared_owners_;
    do
      v534 = __ldxr(v533);
    while (__stxr(v534 + 1, v533));
    *((_QWORD *)&v678 + 1) = v532;
    do
      v535 = __ldxr(v533);
    while (__stxr(v535 + 1, v533));
  }
  else
  {
    *((_QWORD *)&v678 + 1) = 0;
  }
  *(_QWORD *)&v678 = v531;
  v679 = 0uLL;
  LOBYTE(v680.f64[0]) = 0;
  if (v531)
    LOBYTE(v531) = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v531 + 48))(v531, &v679);
  LOBYTE(v680.f64[0]) = v531;
  if (v532)
  {
    v536 = (unint64_t *)&v532->__shared_owners_;
    do
      v537 = __ldaxr(v536);
    while (__stlxr(v537 - 1, v536));
    if (!v537)
    {
      ((void (*)(std::__shared_weak_count *))v532->__on_zero_shared)(v532);
      std::__shared_weak_count::__release_weak(v532);
    }
  }
  *(_QWORD *)(a7 + 204) = 0x3F8000003F000000;
  *(_WORD *)(a7 + 216) = 0;
  *(_DWORD *)(a7 + 212) = 0;
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings", v623);
  v538 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v538, "ssaoMaxIntensity");
  *(_DWORD *)(a7 + 220) = v539;

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v540 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v540, "ssaoOverrideIntensity");
  *(_DWORD *)(a7 + 204) = v541;

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v542 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v542, "ssaoOverrideRadius");
  *(_DWORD *)(a7 + 208) = v543;

  v544 = 0.0;
  if (LOBYTE(v680.f64[0]))
  {
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v545 = (void *)objc_claimAutoreleasedReturnValue();
    v546 = objc_msgSend(v545, "ssaoOverrideOn");

    if ((v546 & 1) == 0)
    {
      v547 = *(_QWORD *)(v678 + 24);
      if ((int)v230 >= 0x17)
        v548 = 23;
      else
        v548 = (int)v230;
      v549 = *(float **)v547;
      if (*(_QWORD *)v547)
      {
        v550 = *v549;
        v551 = *v549 == 1.0;
        if (*(_BYTE *)(v547 + 10))
        {
          if (v550 != 0.0 && v550 != 1.0)
          {
LABEL_508:
            if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(*(_QWORD *)(v678 + 24), 0x1C8u, v548, 0) & 1) != 0)
              goto LABEL_511;
            v553 = 1;
LABEL_510:
            if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v547, 0x1C8u, v548, v553))
              goto LABEL_531;
LABEL_511:
            v554 = fminf(fmaxf(v230, 0.0), 23.0);
            if (v549)
            {
              v555 = *v549;
              v556 = *v549 == 1.0;
              if (*(_BYTE *)(v547 + 10) && v555 != 0.0 && v555 != 1.0)
                goto LABEL_518;
            }
            else
            {
              v556 = 0;
            }
            v557 = *(unsigned __int8 *)(v547 + v556 + 11);
            v555 = 0.0;
            if (v557 != 2)
            {
              gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v547, 0x1C8u, v557, 0, v554);
              goto LABEL_530;
            }
LABEL_518:
            v667[0] = 1;
            LOBYTE(v666) = 1;
            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v547, 0x1C8u, 0, v667, v554);
            v559 = v558;
            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v547, 0x1C8u, 1u, (BOOL *)&v666, v554);
            v561 = v559 + (float)((float)(v560 - v559) * v555);
LABEL_530:
            *(float *)(a7 + 204) = v561;
            v547 = *(_QWORD *)(v678 + 24);
            v549 = *(float **)v547;
LABEL_531:
            if (v549)
            {
              v566 = *v549;
              v567 = *v549 == 1.0;
              if (*(_BYTE *)(v547 + 10) && v566 != 0.0 && v566 != 1.0)
              {
LABEL_538:
                if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v547, 0x1CAu, v548, 0) & 1) != 0)
                  goto LABEL_541;
                v568 = 1;
LABEL_540:
                if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v547, 0x1CAu, v548, v568))
                  goto LABEL_551;
LABEL_541:
                v569 = fminf(fmaxf(v230, 0.0), 23.0);
                if (v549)
                {
                  v570 = *v549;
                  v571 = *v549 == 1.0;
                  if (*(_BYTE *)(v547 + 10) && v570 != 0.0 && v570 != 1.0)
                    goto LABEL_548;
                }
                else
                {
                  v571 = 0;
                }
                v572 = *(unsigned __int8 *)(v547 + v571 + 11);
                v570 = 0.0;
                if (v572 != 2)
                {
                  gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v547, 0x1CAu, v572, 0, v569);
                  goto LABEL_550;
                }
LABEL_548:
                v667[0] = 1;
                LOBYTE(v666) = 1;
                gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v547, 0x1CAu, 0, v667, v569);
                v574 = v573;
                gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v547, 0x1CAu, 1u, (BOOL *)&v666, v569);
                v576 = v574 + (float)((float)(v575 - v574) * v570);
LABEL_550:
                *(float *)(a7 + 208) = v576;
                v547 = *(_QWORD *)(v678 + 24);
                v549 = *(float **)v547;
LABEL_551:
                if (v549)
                {
                  v577 = *v549;
                  v578 = *v549 == 1.0;
                  if (*(_BYTE *)(v547 + 10) && v577 != 0.0 && v577 != 1.0)
                  {
LABEL_558:
                    if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v547, 0x1CBu, v548, 0) & 1) != 0)
                    {
LABEL_561:
                      gss::RenderStyle<gss::PropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v667, v547, 0x1CBu, 2u, fminf(fmaxf(v230, 0.0), 23.0));
                      v580 = vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v667)), (float32x4_t)vdupq_n_s32(0x37800080u)));
                      *(_WORD *)(a7 + 216) = v580.i16[2];
                      *(_DWORD *)(a7 + 212) = v580.i32[0];
                      v547 = *(_QWORD *)(v678 + 24);
                      v549 = *(float **)v547;
LABEL_562:
                      if (v549)
                      {
                        v581 = *v549;
                        v582 = *v549 == 1.0;
                        if (*(_BYTE *)(v547 + 10) && v581 != 0.0 && v581 != 1.0)
                        {
LABEL_569:
                          if ((gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v547, 0x1C9u, v548, 0) & 1) != 0)
                            goto LABEL_572;
                          v583 = 1;
LABEL_571:
                          if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v547, 0x1C9u, v548, v583))goto LABEL_580;
LABEL_572:
                          v584 = fminf(fmaxf(v230, 0.0), 23.0);
                          if (v549)
                          {
                            v585 = *v549;
                            v586 = *v549 == 1.0;
                            if (*(_BYTE *)(v547 + 10) && v585 != 0.0 && v585 != 1.0)
                            {
LABEL_579:
                              v667[0] = 1;
                              LOBYTE(v666) = 1;
                              gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v547, 0x1C9u, 0, v667, v584);
                              v589 = v588;
                              gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v547, 0x1C9u, 1u, (BOOL *)&v666, v584);
                              v544 = v589 + (float)((float)(v590 - v589) * v585);
                              goto LABEL_580;
                            }
                          }
                          else
                          {
                            v586 = 0;
                          }
                          v587 = *(unsigned __int8 *)(v547 + v586 + 11);
                          v585 = 0.0;
                          if (v587 != 2)
                          {
                            gss::RenderStyle<gss::PropertyID>::styleSampledValueForKeyAtZ<float>(v547, 0x1C9u, v587, 0, v584);
                            v544 = v597;
                            if (*(_BYTE *)(a1 + 120))
                              goto LABEL_581;
LABEL_589:
                            *(_BYTE *)(a7 + 227) = 0;
                            *(_WORD *)(a1 + 137) = 0;
                            goto LABEL_590;
                          }
                          goto LABEL_579;
                        }
                      }
                      else
                      {
                        v582 = 0;
                      }
                      v583 = *(unsigned __int8 *)(v547 + v582 + 11);
                      if (v583 != 2)
                        goto LABEL_571;
                      goto LABEL_569;
                    }
                    v579 = 1;
LABEL_560:
                    if (!gss::RenderStyle<gss::PropertyID>::hasValueForKeyAtZAtEnd(v547, 0x1CBu, v548, v579))goto LABEL_562;
                    goto LABEL_561;
                  }
                }
                else
                {
                  v578 = 0;
                }
                v579 = *(unsigned __int8 *)(v547 + v578 + 11);
                if (v579 != 2)
                  goto LABEL_560;
                goto LABEL_558;
              }
            }
            else
            {
              v567 = 0;
            }
            v568 = *(unsigned __int8 *)(v547 + v567 + 11);
            if (v568 != 2)
              goto LABEL_540;
            goto LABEL_538;
          }
        }
      }
      else
      {
        v551 = 0;
      }
      v553 = *(unsigned __int8 *)(v547 + v551 + 11);
      if (v553 != 2)
        goto LABEL_510;
      goto LABEL_508;
    }
  }
LABEL_580:
  if (!*(_BYTE *)(a1 + 120))
    goto LABEL_589;
LABEL_581:
  if (!*(_BYTE *)(a1 + 393) || !*(_BYTE *)(a1 + 139))
    goto LABEL_589;
  if (LOBYTE(v680.f64[0]))
  {
    *(_BYTE *)(a7 + 227) = 0;
    *(_WORD *)(a1 + 137) = 1;
    v591 = (_BYTE *)(a1 + 138);
    goto LABEL_586;
  }
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v592 = (void *)objc_claimAutoreleasedReturnValue();
  v593 = objc_msgSend(v592, "ssaoOverrideOn");

  *(_BYTE *)(a7 + 227) = 0;
  *(_BYTE *)(a1 + 138) = 0;
  v591 = (_BYTE *)(a1 + 138);
  *(v591 - 1) = v593;
  if (v593)
  {
LABEL_586:
    v594 = *(double *)(a2 + 40);
    v595 = fminf(v594 * 12.732, 1.0);
    v596 = *(float *)(a7 + 204)
         + (float)((float)-(float)((float)(1.0 - v595) - (float)(v544 * (float)(1.0 - v595))) * *(float *)(a7 + 204));
    *(float *)(a7 + 204) = v596;
    if (v596 > 0.01)
    {
      *(_BYTE *)(a7 + 227) = 1;
      *v591 = 1;
    }
  }
LABEL_590:
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v678);
LABEL_591:
  if (v657[0])
  {
    if (v660 < 0)
      operator delete(__p);
  }
  gss::QueryableLocker<gss::ScenePropertyID>::~QueryableLocker((uint64_t)&v661);

}

void sub_19F062EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,char a59)
{
  void *v59;

  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy((_QWORD *)STACK[0x238]);
  if (a52)
  {
    if (a58 < 0)
      operator delete(__p);
  }
  gss::QueryableLocker<gss::ScenePropertyID>::~QueryableLocker((uint64_t)&a59);

  _Unwind_Resume(a1);
}

uint64_t gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtEnd(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  unsigned __int8 ***v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  unsigned __int8 ***v23;
  unsigned __int8 **v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned int v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16 * a3 + 16);
  if (!v3)
    return 0;
  v4 = *(unsigned __int8 ****)(v3 + 72);
  if (!v4 || (v5 = *v4, (v6 = *((unsigned __int16 *)*v4 + 5)) == 0))
  {
LABEL_28:
    v18 = a1 + 16 * a3;
    v19 = *(unsigned __int16 *)(v18 + 56);
    if (*(_WORD *)(v18 + 56))
    {
      v20 = *(_QWORD *)(v18 + 48);
      v21 = v20 + 8 * v19;
      while (1)
      {
        v23 = *(unsigned __int8 ****)(*(_QWORD *)v20 + 72);
        if (v23)
        {
          v24 = *v23;
          v25 = *((unsigned __int16 *)*v23 + 5);
          if (!v25)
          {
            v22 = 0;
            goto LABEL_31;
          }
          v26 = *v24;
          if (!*((_BYTE *)v24 + 15))
          {
            v35 = v25;
            v27 = *v24;
            while (*v27 != a2)
            {
              ++v27;
              if (!--v35)
              {
                LOWORD(v27) = (_WORD)v26 + v25;
                break;
              }
            }
LABEL_52:
            v22 = (_WORD)v27 - (_WORD)v26;
LABEL_31:
            if ((_DWORD)v25 != v22)
              return 1;
            goto LABEL_32;
          }
          v27 = *v24;
          v28 = v25;
          if (v25 < 0x1E)
          {
            v29 = 0;
            while (1)
            {
              v30 = v26[v29];
              if (v30 >= a2)
                break;
              if (v25 == ++v29)
                goto LABEL_32;
            }
            if (v30 == a2)
              v22 = v29;
            else
              v22 = v25;
            goto LABEL_31;
          }
          do
          {
            v31 = v28 >> 1;
            v32 = &v27[v28 >> 1];
            v34 = *v32;
            v33 = v32 + 1;
            v28 += ~(v28 >> 1);
            if (v34 < a2)
              v27 = v33;
            else
              v28 = v31;
          }
          while (v28);
          if (v27 != &v26[v25] && *v27 == a2)
            goto LABEL_52;
        }
LABEL_32:
        v20 += 8;
        if (v20 == v21)
          return 0;
      }
    }
    return 0;
  }
  v7 = *v5;
  if (!*((_BYTE *)v5 + 15))
  {
    v10 = v6;
    v11 = *v5;
    while (*v11 != a2)
    {
      ++v11;
      if (!--v10)
      {
        LOWORD(v11) = (_WORD)v7 + v6;
        break;
      }
    }
LABEL_22:
    if ((_DWORD)v6 == (unsigned __int16)((_WORD)v11 - (_WORD)v7))
      goto LABEL_28;
    return 1;
  }
  if (v6 >= 0x1E)
  {
    v11 = *v5;
    v12 = v6;
    do
    {
      v13 = v12 >> 1;
      v14 = &v11[v12 >> 1];
      v16 = *v14;
      v15 = v14 + 1;
      v12 += ~(v12 >> 1);
      if (v16 < a2)
        v11 = v15;
      else
        v12 = v13;
    }
    while (v12);
    if (v11 == &v7[v6] || *v11 != a2)
      goto LABEL_28;
    goto LABEL_22;
  }
  v8 = 0;
  while (1)
  {
    v9 = v7[v8];
    if (v9 >= a2)
      break;
    if (v6 == ++v8)
      goto LABEL_28;
  }
  if (v9 == a2)
    v17 = v8;
  else
    v17 = v6;
  if ((_DWORD)v6 == v17)
    goto LABEL_28;
  return 1;
}

uint64_t md::DaVinciGroundTileData::bounds(md::DaVinciGroundTileData *this)
{
  return (uint64_t)this + 1180;
}

double gm::Box<double,3>::forEachCorner(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  uint64_t v21;
  double *v22;
  _BYTE v23[24];

  v3 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)v23 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)&v23[16] = v3;
  v4 = *(_QWORD *)(a2 + 24);
  if (!v4)
    goto LABEL_10;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 48))(v4, v23);
  *(_QWORD *)v23 = *(_QWORD *)a1;
  *(_OWORD *)&v23[8] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a2 + 24);
  if (!v6)
    goto LABEL_10;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 48))(v6, v23);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v23 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)&v23[8] = v7;
  *(_QWORD *)&v23[16] = v8;
  v9 = *(_QWORD *)(a2 + 24);
  if (!v9)
    goto LABEL_10;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 48))(v9, v23);
  v10 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)v23 = *(_OWORD *)a1;
  *(_QWORD *)&v23[16] = v10;
  v11 = *(_QWORD *)(a2 + 24);
  if (!v11)
    goto LABEL_10;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v11 + 48))(v11, v23);
  v12 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)v23 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)&v23[16] = v12;
  v13 = *(_QWORD *)(a2 + 24);
  if (!v13)
    goto LABEL_10;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v13 + 48))(v13, v23);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v23 = *(_QWORD *)a1;
  *(_QWORD *)&v23[8] = v14;
  *(_QWORD *)&v23[16] = v15;
  v16 = *(_QWORD *)(a2 + 24);
  if (!v16)
    goto LABEL_10;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v16 + 48))(v16, v23);
  *(_QWORD *)v23 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)&v23[8] = *(_OWORD *)(a1 + 8);
  v17 = *(_QWORD *)(a2 + 24);
  if (!v17)
    goto LABEL_10;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v17 + 48))(v17, v23);
  v18 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)v23 = *(_OWORD *)a1;
  *(_QWORD *)&v23[16] = v18;
  v19 = *(_QWORD *)(a2 + 24);
  if (v19)
  {
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v19 + 48))(v19, v23);
  }
  else
  {
LABEL_10:
    std::__throw_bad_function_call[abi:nn180100]();
    *(_QWORD *)&result = *(_OWORD *)&std::__function::__func<gm::Box<double,3>::transformedAndEnclosed(gm::Matrix<double,4,4> const&)::{lambda(gm::Matrix<double,3,1> &)#1},std::allocator<gm::Box<double,3>::transformedAndEnclosed(gm::Matrix<double,4,4> const&)::{lambda(gm::Matrix<double,3,1> &)#1}>,void ()(gm::Matrix<double,3,1> &)>::operator()(v21, v22);
  }
  return result;
}

float64x2_t std::__function::__func<gm::Box<double,3>::transformedAndEnclosed(gm::Matrix<double,4,4> const&)::{lambda(gm::Matrix<double,3,1> &)#1},std::allocator<gm::Box<double,3>::transformedAndEnclosed(gm::Matrix<double,4,4> const&)::{lambda(gm::Matrix<double,3,1> &)#1}>,void ()(gm::Matrix<double,3,1> &)>::operator()(uint64_t a1, double *a2)
{
  uint64_t v2;
  float64x2_t *v3;
  double v4;
  double v5;
  float64_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  int8x16_t v11;
  int8x16_t v12;
  float64x2_t result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(float64x2_t **)(a1 + 16);
  v4 = a2[1];
  v5 = a2[2];
  v7 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v3[6], *v3, *a2), v3[2], v4), v3[4], v5);
  v8.f64[1] = *(float64_t *)(v2 + 24);
  v8.f64[0] = v3[7].f64[0] + v3[1].f64[0] * *a2 + v3[3].f64[0] * v4 + v3[5].f64[0] * v5;
  v6 = v8.f64[0];
  v9 = (float64x2_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL);
  v10.f64[1] = v9.f64[1];
  v10.f64[0] = *(float64_t *)(v2 + 16);
  v11 = (int8x16_t)vcgtq_f64(v10, v8);
  v10.f64[1] = v9.f64[1];
  v10.f64[0] = v6;
  v12 = vbslq_s8(v11, (int8x16_t)v10, *(int8x16_t *)(v2 + 16));
  *(float64x2_t *)v2 = vminnmq_f64(v7, *(float64x2_t *)v2);
  *(int8x16_t *)(v2 + 16) = v12;
  v9.f64[1] = v6;
  result = vmaxnmq_f64(*(float64x2_t *)(v2 + 32), v9);
  *(float64x2_t *)(v2 + 32) = result;
  return result;
}

uint64_t ggl::CullingGrid::intersectedCellsForView(float *a1, double a2)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  char v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  char v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  char v30;
  float v31;
  float v32;
  float v33;
  float v34;
  char v35;
  float v36;
  float v37;
  float v38;
  float v39;
  char v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  unsigned int v47;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  unsigned __int8 v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  char v66;
  unsigned __int8 v67;
  unsigned __int8 v68;
  unsigned __int8 v69;
  unsigned __int8 v70;
  char v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  unsigned __int8 v74;
  unsigned __int8 v75;
  char v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  unsigned __int8 v79;
  char v80;
  uint64_t v81;

  v2 = 0;
  v81 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v54 = *a1;
  v55 = a1[8] * v3;
  v4 = a1[2];
  v5 = a1[4];
  v6 = a1[5];
  v52 = a1[9] * v3;
  v53 = a1[1];
  v7 = a1[14];
  v50 = a1[13];
  v51 = a1[12];
  v49 = a1[10] * v3;
  v8 = a1[3];
  v9 = a1[11] * v3;
  v10 = a1[6];
  v11 = a1[7];
  v12 = a1[15];
  do
  {
    v14 = (float)(int)v2 * 0.25;
    v15 = v54 * v14;
    v16 = v8 * v14;
    v17 = v55 + v51;
    v18 = (float)(v54 * v14) + (float)(v55 + v51);
    v19 = v9 + v12;
    v20 = (float)(v8 * v14) + (float)(v9 + v12);
    if (v18 <= v20)
    {
      if (v18 >= (float)-v20)
        v21 = 0;
      else
        v21 = 2;
    }
    else
    {
      v21 = 1;
    }
    v22 = v53 * v14;
    v23 = v52 + v50;
    v24 = (float)(v53 * v14) + (float)(v52 + v50);
    if (v24 <= v20)
    {
      if (v24 < (float)-v20)
        v21 |= 8u;
    }
    else
    {
      v21 |= 4u;
    }
    v25 = v4 * v14;
    v26 = v49 + v7;
    v27 = v25 + (float)(v49 + v7);
    if (v27 <= v20)
    {
      if (v27 < (float)-v20)
        v21 |= 0x20u;
    }
    else
    {
      v21 |= 0x10u;
    }
    *(&v56 + v2) = v21;
    v28 = (float)((float)(v5 * 0.25) + v15) + v17;
    v29 = (float)((float)(v11 * 0.25) + v16) + v19;
    if (v28 <= v29)
    {
      if (v28 >= (float)-v29)
        v30 = 0;
      else
        v30 = 2;
    }
    else
    {
      v30 = 1;
    }
    v31 = (float)((float)(v6 * 0.25) + v22) + v23;
    if (v31 <= v29)
    {
      if (v31 < (float)-v29)
        v30 |= 8u;
    }
    else
    {
      v30 |= 4u;
    }
    v32 = (float)((float)(v10 * 0.25) + v25) + v26;
    if (v32 <= v29)
    {
      if (v32 < (float)-v29)
        v30 |= 0x20u;
    }
    else
    {
      v30 |= 0x10u;
    }
    *(&v61 + v2) = v30;
    v33 = (float)((float)(v5 * 0.5) + v15) + v17;
    v34 = (float)((float)(v11 * 0.5) + v16) + v19;
    if (v33 <= v34)
    {
      if (v33 >= (float)-v34)
        v35 = 0;
      else
        v35 = 2;
    }
    else
    {
      v35 = 1;
    }
    v36 = (float)((float)(v6 * 0.5) + v22) + v23;
    if (v36 <= v34)
    {
      if (v36 < (float)-v34)
        v35 |= 8u;
    }
    else
    {
      v35 |= 4u;
    }
    v37 = (float)((float)(v10 * 0.5) + v25) + v26;
    if (v37 <= v34)
    {
      if (v37 < (float)-v34)
        v35 |= 0x20u;
    }
    else
    {
      v35 |= 0x10u;
    }
    *(&v66 + v2) = v35;
    v38 = (float)((float)(v5 * 0.75) + v15) + v17;
    v39 = (float)((float)(v11 * 0.75) + v16) + v19;
    if (v38 <= v39)
    {
      if (v38 >= (float)-v39)
        v40 = 0;
      else
        v40 = 2;
    }
    else
    {
      v40 = 1;
    }
    v41 = (float)((float)(v6 * 0.75) + v22) + v23;
    if (v41 <= v39)
    {
      if (v41 < (float)-v39)
        v40 |= 8u;
    }
    else
    {
      v40 |= 4u;
    }
    v42 = (float)((float)(v10 * 0.75) + v25) + v26;
    if (v42 <= v39)
    {
      if (v42 < (float)-v39)
        v40 |= 0x20u;
    }
    else
    {
      v40 |= 0x10u;
    }
    *(&v71 + v2) = v40;
    v43 = (float)(v5 + v15) + v17;
    v44 = (float)(v11 + v16) + v19;
    if (v43 <= v44)
    {
      if (v43 >= (float)-v44)
        v13 = 0;
      else
        v13 = 2;
    }
    else
    {
      v13 = 1;
    }
    v45 = (float)(v6 + v22) + v23;
    if (v45 <= v44)
    {
      if (v45 < (float)-v44)
        v13 |= 8u;
    }
    else
    {
      v13 |= 4u;
    }
    v46 = (float)(v10 + v25) + v26;
    if (v46 > v44)
    {
      v13 |= 0x10u;
    }
    else if (v46 < (float)-v44)
    {
      v13 |= 0x20u;
    }
    *(&v76 + v2++) = v13;
  }
  while (v2 != 5);
  v47 = (v57 & v56 & v61 & v62) == 0;
  if (((v62 & v61 & v66) & v67) == 0)
    v47 |= 8u;
  if (((v67 & v66 & v71) & v72) == 0)
    v47 |= 0x1000u;
  if (((v71 & v76 & v72) & v77) == 0)
    v47 |= 0x8000u;
  if (((v58 & v57 & v62) & v63) == 0)
    v47 |= 2u;
  if (((v63 & v62 & v67) & v68) == 0)
    v47 |= 4u;
  if (((v68 & v67 & v72) & v73) == 0)
    v47 |= 0x2000u;
  if (((v73 & v72 & v77) & v78) == 0)
    v47 |= 0x4000u;
  if (((v59 & v58 & v63) & v64) == 0)
    v47 |= 0x10u;
  if (((v64 & v63 & v68) & v69) == 0)
    v47 |= 0x80u;
  if (((v69 & v68 & v73) & v74) == 0)
    v47 |= 0x100u;
  if (((v74 & v73 & v78) & v79) == 0)
    v47 |= 0x800u;
  if (((v60 & v59 & v64) & v65) == 0)
    v47 |= 0x20u;
  if (((v65 & v64 & v69) & v70) == 0)
    v47 |= 0x40u;
  if (((v70 & v69 & v74) & v75) == 0)
    v47 |= 0x200u;
  if (((v74 & v80 & v75) & v79) != 0)
    return v47;
  else
    return v47 | 0x400;
}

float32x2_t gm::Box<float,3>::forEachCorner(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x2_t result;
  uint64_t v21;
  float *v22;
  _BYTE v23[12];

  v3 = *(uint64_t *)((char *)a1 + 12);
  *(_DWORD *)&v23[8] = *((_DWORD *)a1 + 5);
  *(_QWORD *)v23 = v3;
  v4 = *(_QWORD *)(a2 + 24);
  if (!v4)
    goto LABEL_10;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 48))(v4, v23);
  *(_DWORD *)v23 = *(_DWORD *)a1;
  *(_QWORD *)&v23[4] = a1[2];
  v6 = *(_QWORD *)(a2 + 24);
  if (!v6)
    goto LABEL_10;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 48))(v6, v23);
  v7 = *((_DWORD *)a1 + 1);
  v8 = *((_DWORD *)a1 + 5);
  *(_DWORD *)v23 = *((_DWORD *)a1 + 3);
  *(_DWORD *)&v23[4] = v7;
  *(_DWORD *)&v23[8] = v8;
  v9 = *(_QWORD *)(a2 + 24);
  if (!v9)
    goto LABEL_10;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 48))(v9, v23);
  v10 = *((_DWORD *)a1 + 5);
  *(_QWORD *)v23 = *a1;
  *(_DWORD *)&v23[8] = v10;
  v11 = *(_QWORD *)(a2 + 24);
  if (!v11)
    goto LABEL_10;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v11 + 48))(v11, v23);
  v12 = *((_DWORD *)a1 + 2);
  *(_QWORD *)v23 = *(uint64_t *)((char *)a1 + 12);
  *(_DWORD *)&v23[8] = v12;
  v13 = *(_QWORD *)(a2 + 24);
  if (!v13)
    goto LABEL_10;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v13 + 48))(v13, v23);
  v14 = *((_DWORD *)a1 + 4);
  v15 = *((_DWORD *)a1 + 2);
  *(_DWORD *)v23 = *(_DWORD *)a1;
  *(_DWORD *)&v23[4] = v14;
  *(_DWORD *)&v23[8] = v15;
  v16 = *(_QWORD *)(a2 + 24);
  if (!v16)
    goto LABEL_10;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v16 + 48))(v16, v23);
  *(_DWORD *)v23 = *((_DWORD *)a1 + 3);
  *(_QWORD *)&v23[4] = *(uint64_t *)((char *)a1 + 4);
  v17 = *(_QWORD *)(a2 + 24);
  if (!v17)
    goto LABEL_10;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v17 + 48))(v17, v23);
  v18 = *a1;
  *(_DWORD *)&v23[8] = *((_DWORD *)a1 + 2);
  *(_QWORD *)v23 = v18;
  v19 = *(_QWORD *)(a2 + 24);
  if (v19)
  {
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v19 + 48))(v19, v23);
  }
  else
  {
LABEL_10:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__function::__func<gm::Box<float,3>::transformedAndEnclosed(gm::Matrix<float,4,4> const&)::{lambda(gm::Matrix<float,3,1> &)#1},std::allocator<gm::Box<float,3>::transformedAndEnclosed(gm::Matrix<float,4,4> const&)::{lambda(gm::Matrix<float,3,1> &)#1}>,void ()(gm::Matrix<float,3,1> &)>::operator()(v21, v22);
  }
  return result;
}

float32x2_t std::__function::__func<gm::Box<float,3>::transformedAndEnclosed(gm::Matrix<float,4,4> const&)::{lambda(gm::Matrix<float,3,1> &)#1},std::allocator<gm::Box<float,3>::transformedAndEnclosed(gm::Matrix<float,4,4> const&)::{lambda(gm::Matrix<float,3,1> &)#1}>,void ()(gm::Matrix<float,3,1> &)>::operator()(uint64_t a1, float *a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  float v5;
  float32x4_t v6;
  float32x4_t v7;
  int8x16_t v8;
  float32x2_t result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = a2[1];
  v5 = a2[2];
  v6.i32[3] = HIDWORD(*(_OWORD *)v2);
  v6.f32[0] = (float)((float)(*(float *)(v3 + 48) + (float)(*(float *)v3 * *a2)) + (float)(*(float *)(v3 + 16) * v4))
            + (float)(*(float *)(v3 + 32) * v5);
  *(float32x2_t *)&v6.i32[1] = vmla_n_f32(vmla_n_f32(vmla_n_f32(*(float32x2_t *)(v3 + 52), *(float32x2_t *)(v3 + 4), *a2), *(float32x2_t *)(v3 + 20), v4), *(float32x2_t *)(v3 + 36), v5);
  v7 = *(float32x4_t *)v2;
  v7.f32[3] = v6.f32[0];
  v8 = (int8x16_t)vcgtq_f32(v7, v6);
  v6.f32[3] = v6.f32[0];
  *(int8x16_t *)v2 = vbslq_s8(v8, (int8x16_t)v6, *(int8x16_t *)v2);
  result = vmaxnm_f32(*(float32x2_t *)(v2 + 16), *(float32x2_t *)&v6.i32[1]);
  *(float32x2_t *)(v2 + 16) = result;
  return result;
}

unint64_t gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(unint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, BOOL *a5, float a6)
{
  unsigned __int16 v6;
  unsigned __int16 v7;
  unsigned __int16 v8;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t *v25;
  int v26;
  unsigned __int16 v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned int v50;
  __int16 *v51;
  unsigned __int16 v52;
  unsigned __int8 *v53;
  uint64_t *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unsigned int v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned int v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  unsigned int v75;
  __int16 *v76;
  unsigned __int8 *v77;
  unint64_t *v78;
  unsigned __int16 v79;
  unsigned __int16 v80;
  unsigned __int16 v81;
  unsigned __int16 v82;
  float v83;
  __int16 v84;
  __int16 v85;
  __int16 v86;
  __int16 v87;
  unint64_t *v88;
  unsigned __int8 v89;
  unsigned __int8 v90;

  v11 = (_QWORD *)result;
  v12 = (int)a6;
  if ((int)a6 >= 0x17)
    v13 = 23;
  else
    v13 = v12;
  if (v12 >= 0x16)
    v14 = 22;
  else
    v14 = v12;
  v15 = a2 + 16 * a4;
  v18 = *(_QWORD *)(v15 + 16);
  v17 = (uint64_t *)(v15 + 16);
  v16 = v18;
  if (!v18)
  {
    if (a5)
      *a5 = 0;
    result = (unint64_t)gss::defaultValueForKey<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>();
    *v11 = *(_QWORD *)result;
    return result;
  }
  v20 = v14 + 1;
  v21 = a2 + 16 * a4;
  v22 = *(unsigned __int16 *)(v21 + 56);
  v88 = (unint64_t *)result;
  v23 = 0;
  if (!*(_WORD *)(v21 + 56))
  {
    v90 = 1;
    v89 = 1;
    goto LABEL_128;
  }
  v24 = *(uint64_t **)(v21 + 48);
  v25 = &v24[v22];
LABEL_10:
  LOBYTE(v26) = 0;
  do
  {
    v28 = *v24;
    if ((v26 & 1) != 0)
    {
      v26 = 1;
      if ((v23 & 1) != 0)
        goto LABEL_92;
      goto LABEL_69;
    }
    v29 = *(uint64_t **)(v28 + 72);
    if (!v29
      || (v30 = *((unsigned __int8 *)v29 + v13 + 16),
          v31 = *v29,
          result = v31 + 80 * v30,
          v32 = (unsigned __int8 *)*(unsigned __int16 *)(result + 10),
          !*(_WORD *)(result + 10)))
    {
LABEL_31:
      v26 = 0;
      if ((v23 & 1) != 0)
        goto LABEL_92;
      goto LABEL_69;
    }
    v33 = *(_QWORD *)result;
    if (!*(_BYTE *)(result + 15))
    {
      v40 = *(unsigned __int16 *)(result + 10);
      result = *(_QWORD *)result;
      while (*(unsigned __int8 *)result != a3)
      {
        ++result;
        if (!--v40)
        {
          result = (unint64_t)&v32[v33];
          break;
        }
      }
LABEL_37:
      if ((_DWORD)v32 == (unsigned __int16)(result - v33))
        goto LABEL_31;
      goto LABEL_38;
    }
    result = *(_QWORD *)result;
    v34 = v32;
    if (v32 >= 0x1E)
    {
      do
      {
        v36 = (unsigned __int8 *)((unint64_t)v34 >> 1);
        v37 = (unsigned __int8 *)(result + ((unint64_t)v34 >> 1));
        v39 = *v37;
        v38 = v37 + 1;
        v34 += ~((unint64_t)v34 >> 1);
        if (v39 < a3)
          result = (unint64_t)v38;
        else
          v34 = v36;
      }
      while (v34);
      if ((unsigned __int8 *)result == &v32[v33] || *(unsigned __int8 *)result != a3)
        goto LABEL_31;
      goto LABEL_37;
    }
    result = 0;
    while (1)
    {
      v35 = *(unsigned __int8 *)(v33 + result);
      if (v35 >= a3)
        break;
      if (v32 == (unsigned __int8 *)++result)
        goto LABEL_31;
    }
    if (v35 == a3)
      v52 = result;
    else
      v52 = (unsigned __int16)v32;
    if ((_DWORD)v32 == v52)
      goto LABEL_31;
LABEL_38:
    v41 = v31 + 80 * v30;
    v42 = (unsigned __int8 *)*(unsigned __int16 *)(v41 + 58);
    if (!*(_WORD *)(v41 + 58))
      goto LABEL_52;
    v43 = v31 + 80 * v30;
    v44 = *(_QWORD *)(v43 + 48);
    if (!*(_BYTE *)(v43 + 63))
    {
      v53 = v42;
      result = *(_QWORD *)(v43 + 48);
      while (*(unsigned __int8 *)result != a3)
      {
        ++result;
        if (!--v53)
        {
          LODWORD(result) = v44 + (_DWORD)v42;
          break;
        }
      }
LABEL_62:
      result = (result - v44);
LABEL_66:
      v51 = &gss::PropertySetValueHelper<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      if ((_DWORD)v42 != (unsigned __int16)result)
        v51 = (__int16 *)(v44 + *(unsigned __int16 *)(v31 + 80 * v30 + 56) + 8 * (unsigned __int16)result);
      goto LABEL_68;
    }
    result = *(_QWORD *)(v43 + 48);
    v45 = v42;
    if (v42 < 0x1E)
    {
      result = 0;
      while (1)
      {
        v46 = *(unsigned __int8 *)(v44 + result);
        if (v46 >= a3)
          break;
        if (v42 == (unsigned __int8 *)++result)
          goto LABEL_52;
      }
      if (v46 == a3)
        result = result;
      else
        result = v42;
      goto LABEL_66;
    }
    do
    {
      v47 = (unsigned __int8 *)((unint64_t)v45 >> 1);
      v48 = (unsigned __int8 *)(result + ((unint64_t)v45 >> 1));
      v50 = *v48;
      v49 = v48 + 1;
      v45 += ~((unint64_t)v45 >> 1);
      if (v50 < a3)
        result = (unint64_t)v49;
      else
        v45 = v47;
    }
    while (v45);
    if ((unsigned __int8 *)result == &v42[v44])
    {
LABEL_52:
      v51 = &gss::PropertySetValueHelper<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      goto LABEL_68;
    }
    v51 = &gss::PropertySetValueHelper<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    if (*(unsigned __int8 *)result == a3)
      goto LABEL_62;
LABEL_68:
    LOWORD(v11) = *v51;
    v6 = v51[1];
    v7 = v51[2];
    v26 = 1;
    v8 = v51[3];
    if ((v23 & 1) != 0)
    {
LABEL_92:
      if (v26)
        goto LABEL_135;
LABEL_120:
      ++v24;
      v23 = 1;
      if (v24 != v25)
        goto LABEL_10;
      v90 = 1;
      v89 = 1;
      goto LABEL_128;
    }
LABEL_69:
    v54 = *(uint64_t **)(v28 + 72);
    if (v54)
    {
      v55 = *((unsigned __int8 *)v54 + v20 + 16);
      v56 = *v54;
      result = v56 + 80 * v55;
      v57 = (unsigned __int8 *)*(unsigned __int16 *)(result + 10);
      if (!*(_WORD *)(result + 10))
      {
        v27 = 0;
        goto LABEL_12;
      }
      v58 = *(_QWORD *)result;
      if (!*(_BYTE *)(result + 15))
      {
        v65 = *(unsigned __int16 *)(result + 10);
        result = *(_QWORD *)result;
        while (*(unsigned __int8 *)result != a3)
        {
          ++result;
          if (!--v65)
          {
            result = (unint64_t)&v57[v58];
            break;
          }
        }
LABEL_88:
        v27 = result - v58;
LABEL_12:
        if ((_DWORD)v57 == v27)
          goto LABEL_13;
        v66 = v56 + 80 * v55;
        v67 = (unsigned __int8 *)*(unsigned __int16 *)(v66 + 58);
        if (*(_WORD *)(v66 + 58))
        {
          v68 = v56 + 80 * v55;
          v69 = *(_QWORD *)(v68 + 48);
          if (!*(_BYTE *)(v68 + 63))
          {
            v77 = v67;
            result = *(_QWORD *)(v68 + 48);
            while (*(unsigned __int8 *)result != a3)
            {
              ++result;
              if (!--v77)
              {
                LODWORD(result) = v69 + (_DWORD)v67;
                goto LABEL_113;
              }
            }
            goto LABEL_113;
          }
          result = *(_QWORD *)(v68 + 48);
          v70 = v67;
          if (v67 < 0x1E)
          {
            result = 0;
            while (1)
            {
              v71 = *(unsigned __int8 *)(v69 + result);
              if (v71 >= a3)
                break;
              if (v67 == (unsigned __int8 *)++result)
                goto LABEL_108;
            }
            if (v71 == a3)
              result = result;
            else
              result = v67;
LABEL_117:
            v76 = &gss::PropertySetValueHelper<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            if ((_DWORD)v67 != (unsigned __int16)result)
              v76 = (__int16 *)(v69 + *(unsigned __int16 *)(v56 + 80 * v55 + 56) + 8 * (unsigned __int16)result);
LABEL_119:
            v86 = v76[1];
            v87 = *v76;
            v84 = v76[3];
            v85 = v76[2];
            if ((v26 & 1) != 0)
            {
LABEL_135:
              v90 = 1;
              v89 = 1;
              goto LABEL_129;
            }
            goto LABEL_120;
          }
          do
          {
            v72 = (unsigned __int8 *)((unint64_t)v70 >> 1);
            v73 = (unsigned __int8 *)(result + ((unint64_t)v70 >> 1));
            v75 = *v73;
            v74 = v73 + 1;
            v70 += ~((unint64_t)v70 >> 1);
            if (v75 < a3)
              result = (unint64_t)v74;
            else
              v70 = v72;
          }
          while (v70);
          if ((unsigned __int8 *)result != &v67[v69])
          {
            v76 = &gss::PropertySetValueHelper<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            if (*(unsigned __int8 *)result != a3)
              goto LABEL_119;
LABEL_113:
            result = (result - v69);
            goto LABEL_117;
          }
        }
LABEL_108:
        v76 = &gss::PropertySetValueHelper<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        goto LABEL_119;
      }
      result = *(_QWORD *)result;
      v59 = v57;
      if (v57 < 0x1E)
      {
        result = 0;
        while (1)
        {
          v60 = *(unsigned __int8 *)(v58 + result);
          if (v60 >= a3)
            break;
          if (v57 == (unsigned __int8 *)++result)
            goto LABEL_13;
        }
        if (v60 == a3)
          v27 = result;
        else
          v27 = (unsigned __int16)v57;
        goto LABEL_12;
      }
      do
      {
        v61 = (unsigned __int8 *)((unint64_t)v59 >> 1);
        v62 = (unsigned __int8 *)(result + ((unint64_t)v59 >> 1));
        v64 = *v62;
        v63 = v62 + 1;
        v59 += ~((unint64_t)v59 >> 1);
        if (v64 < a3)
          result = (unint64_t)v63;
        else
          v59 = v61;
      }
      while (v59);
      if ((unsigned __int8 *)result != &v57[v58] && *(unsigned __int8 *)result == a3)
        goto LABEL_88;
    }
LABEL_13:
    v23 = 0;
    ++v24;
  }
  while (v24 != v25);
  v90 = 1;
  v89 = 1;
  if ((v26 & 1) != 0)
    goto LABEL_132;
  v23 = 0;
LABEL_128:
  result = (unint64_t)gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(*(__int16 **)(v16 + 72), a3, v13, &v90);
  LOWORD(v11) = *(_WORD *)result;
  v6 = *(_WORD *)(result + 2);
  v7 = *(_WORD *)(result + 4);
  v8 = *(_WORD *)(result + 6);
  if ((v23 & 1) != 0)
  {
LABEL_129:
    v78 = v88;
    v80 = v86;
    v79 = v87;
    v82 = v84;
    v81 = v85;
    if (!a5)
      goto LABEL_134;
LABEL_133:
    *a5 = (v90 | v89) != 0;
    goto LABEL_134;
  }
  v16 = *v17;
LABEL_132:
  result = (unint64_t)gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(*(__int16 **)(v16 + 72), a3, v20, &v89);
  v79 = *(_WORD *)result;
  v80 = *(_WORD *)(result + 2);
  v81 = *(_WORD *)(result + 4);
  v82 = *(_WORD *)(result + 6);
  v78 = v88;
  if (a5)
    goto LABEL_133;
LABEL_134:
  v83 = a6 - (float)v13;
  *v78 = ((unint64_t)(int)(float)((float)((float)((float)v8 * 0.000015259)
                                                             + (float)((float)-(float)((float)((float)v8 * 0.000015259)
                                                                                     - (float)((float)v82 * 0.000015259))
                                                                     * v83))
                                                     * 65535.0) << 48) | ((unint64_t)(int)(float)((float)((float)((float)v7 * 0.000015259) + (float)((float)-(float)((float)((float)v7 * 0.000015259) - (float)((float)v81 * 0.000015259)) * v83)) * 65535.0) << 32) | ((unint64_t)(int)(float)((float)((float)((float)v6 * 0.000015259) + (float)((float)-(float)((float)((float)v6 * 0.000015259) - (float)((float)v80 * 0.000015259)) * v83)) * 65535.0) << 16) | (int)(float)((float)((float)((float)(unsigned __int16)v11 * 0.000015259) + (float)((float)-(float)((float)((float)(unsigned __int16)v11 * 0.000015259) - (float)((float)v79 * 0.000015259)) * v83)) * 65535.0);
  return result;
}

unint64_t gss::RenderStyle<gss::ScenePropertyID>::sampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(unint64_t *a1, uint64_t a2, unsigned int a3, float a4)
{
  float *v8;
  float v9;
  BOOL v10;
  unsigned int v11;
  unint64_t result;
  unsigned int v13;
  unsigned int v14;
  float32x2_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint32x2_t v20;
  float32x2_t v21;
  uint32x2_t v22;
  int32x2_t v23;
  uint64x2_t v24;
  int64x2_t v25;
  float v26;
  _WORD v27[4];
  _WORD v28[4];
  char v29;
  char v30;

  v8 = *(float **)a2;
  if (!*(_QWORD *)a2
    || (v9 = *v8, LODWORD(v8) = *v8 == 1.0, !*(_BYTE *)(a2 + 10))
    || (v9 != 0.0 ? (v10 = v9 == 1.0) : (v10 = 1), v10))
  {
    v11 = *(unsigned __int8 *)(a2 + v8 + 11);
    v9 = 0.0;
    if (v11 != 2)
      return gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t)a1, a2, a3, v11, 0, a4);
  }
  v26 = v9;
  v30 = 1;
  v29 = 1;
  gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t)v28, a2, a3, 0, (BOOL *)&v30, a4);
  result = gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t)v27, a2, a3, 1u, (BOOL *)&v29, a4);
  LOWORD(v13) = v28[0];
  LOWORD(v14) = v28[1];
  v15 = (float32x2_t)vdup_n_s32(0x37800080u);
  LOWORD(v16) = v27[0];
  LOWORD(v17) = v27[1];
  v18 = (int)(float)((float)((float)((float)v13 * 0.000015259)
                                         + (float)((float)-(float)((float)((float)v13 * 0.000015259)
                                                                 - (float)((float)v16 * 0.000015259))
                                                 * v26))
                                 * 65535.0);
  v19 = (int)(float)((float)((float)((float)v14 * 0.000015259)
                                         + (float)((float)-(float)((float)((float)v14 * 0.000015259)
                                                                 - (float)((float)v17 * 0.000015259))
                                                 * v26))
                                 * 65535.0);
  v20.i32[0] = v28[2];
  v20.i32[1] = v28[3];
  v21 = vmul_f32(vcvt_f32_u32(v20), v15);
  v22.i32[0] = v27[2];
  v22.i32[1] = v27[3];
  v23 = vcvt_s32_f32(vmul_f32(vmla_n_f32(v21, vmla_f32(vneg_f32(v21), v15, vcvt_f32_u32(v22)), v26), (float32x2_t)vdup_n_s32(0x477FFF00u)));
  v24.i64[0] = v23.u32[0];
  v24.i64[1] = v23.u32[1];
  v25 = (int64x2_t)vshlq_u64(v24, (uint64x2_t)xmmword_19FFB3810);
  *a1 = vorrq_s8((int8x16_t)vdupq_laneq_s64(v25, 1), (int8x16_t)v25).u64[0] | (v19 << 16) | v18;
  return result;
}

int *gss::RenderStyle<gss::ScenePropertyID>::styleSampledValueForKeyAtZ<float>(int *result, unsigned int a2, int a3, BOOL *a4, float a5)
{
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  unsigned __int16 v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int8 **v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unint64_t v40;
  int *v41;
  unsigned int v42;
  int *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned int v46;
  int *v47;
  unsigned __int8 *v48;
  uint64_t *v49;
  unsigned int v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  int *v54;
  unsigned int v55;
  int *v56;
  unsigned __int8 *v57;
  int *v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  unsigned int v66;
  int *v67;
  unsigned __int8 *v68;
  int *v69;
  unsigned int v70;
  int *v71;
  unsigned __int8 v72;
  unsigned __int8 v73;

  LODWORD(v7) = (int)a5;
  if ((int)a5 >= 0x17)
    v8 = 23;
  else
    v8 = v7;
  if (v7 >= 0x16)
    v7 = 22;
  else
    v7 = v7;
  v9 = &result[4 * a3];
  v12 = *((_QWORD *)v9 + 2);
  v11 = v9 + 4;
  v10 = v12;
  if (!v12)
  {
    if (a4)
      *a4 = 0;
    return (int *)gss::defaultValueForKey<gss::ScenePropertyID,float>(a2);
  }
  v13 = v7 + 1;
  v14 = &result[4 * a3];
  v15 = *((unsigned __int16 *)v14 + 28);
  if (!*((_WORD *)v14 + 28))
  {
    v73 = 1;
    v72 = 1;
LABEL_121:
    gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<float>(*(int **)(v10 + 72), a2, v8, &v73);
LABEL_122:
    result = gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<float>(*(int **)(*(_QWORD *)v11 + 72), a2, v13, &v72);
    if (a4)
LABEL_123:
      *a4 = (v73 | v72) != 0;
    return result;
  }
  v16 = 0;
  v17 = (uint64_t *)*((_QWORD *)v14 + 6);
  v18 = &v17[v15];
  while (2)
  {
    LOBYTE(v19) = 0;
    while (1)
    {
      v21 = *v17;
      if ((v19 & 1) != 0)
      {
        v19 = 1;
        if ((v16 & 1) != 0)
          goto LABEL_85;
        goto LABEL_62;
      }
      v22 = *(uint64_t **)(v21 + 72);
      if (!v22)
        goto LABEL_33;
      v23 = *((unsigned __int8 *)v22 + v8 + 16);
      v24 = *v22;
      v25 = (unsigned __int8 **)(v24 + 80 * v23);
      v26 = *((unsigned __int16 *)v25 + 5);
      if (!*((_WORD *)v25 + 5))
      {
        result = 0;
LABEL_33:
        v19 = 0;
        if ((v16 & 1) != 0)
          goto LABEL_85;
        goto LABEL_62;
      }
      result = (int *)*v25;
      if (!*((_BYTE *)v25 + 15))
      {
        v35 = *((unsigned __int16 *)v25 + 5);
        v27 = *v25;
        while (*v27 != a2)
        {
          ++v27;
          if (!--v35)
          {
            LODWORD(v27) = (_DWORD)result + v26;
            break;
          }
        }
LABEL_39:
        result = (int *)((_DWORD)v27 - (_DWORD)result);
        if ((_DWORD)v26 == (unsigned __int16)result)
          goto LABEL_33;
        goto LABEL_40;
      }
      v27 = *v25;
      v28 = v26;
      if (v26 >= 0x1E)
      {
        do
        {
          v31 = v28 >> 1;
          v32 = &v27[v28 >> 1];
          v34 = *v32;
          v33 = v32 + 1;
          v28 += ~(v28 >> 1);
          if (v34 < a2)
            v27 = v33;
          else
            v28 = v31;
        }
        while (v28);
        if (v27 == (unsigned __int8 *)((char *)result + v26) || *v27 != a2)
          goto LABEL_33;
        goto LABEL_39;
      }
      v29 = 0;
      while (1)
      {
        v30 = *((unsigned __int8 *)result + v29);
        if (v30 >= a2)
          break;
        if (v26 == ++v29)
          goto LABEL_33;
      }
      if (v30 == a2)
        result = (int *)v29;
      else
        result = (int *)v26;
      if ((_DWORD)v26 == (unsigned __int16)result)
        goto LABEL_33;
LABEL_40:
      v36 = v24 + 80 * v23;
      result = (int *)*(unsigned __int16 *)(v36 + 42);
      if (*(_WORD *)(v36 + 42))
      {
        v37 = v24 + 80 * v23;
        v38 = *(_QWORD *)(v37 + 32);
        if (*(_BYTE *)(v37 + 47))
        {
          v39 = *(unsigned __int8 **)(v37 + 32);
          v40 = (unint64_t)result;
          if (result >= 0x1E)
          {
            do
            {
              v43 = (int *)(v40 >> 1);
              v44 = &v39[v40 >> 1];
              v46 = *v44;
              v45 = v44 + 1;
              v40 += ~(v40 >> 1);
              if (v46 < a2)
                v39 = v45;
              else
                v40 = (unint64_t)v43;
            }
            while (v40);
          }
          else
          {
            v41 = 0;
            do
            {
              v42 = *((unsigned __int8 *)v41 + v38);
              if (v42 >= a2)
                break;
              v41 = (int *)((char *)v41 + 1);
            }
            while (result != v41);
          }
        }
        else
        {
          v47 = result;
          v48 = *(unsigned __int8 **)(v37 + 32);
          do
          {
            if (*v48 == a2)
              break;
            ++v48;
            v47 = (int *)((char *)v47 - 1);
          }
          while (v47);
        }
      }
      v19 = 1;
      if ((v16 & 1) != 0)
      {
LABEL_85:
        if (v19)
          goto LABEL_125;
        goto LABEL_112;
      }
LABEL_62:
      v49 = *(uint64_t **)(v21 + 72);
      if (!v49)
        goto LABEL_13;
      v50 = *((unsigned __int8 *)v49 + v13 + 16);
      v51 = *v49;
      result = (int *)(v51 + 80 * v50);
      v52 = (int *)*((unsigned __int16 *)result + 5);
      if (!*((_WORD *)result + 5))
      {
        v20 = 0;
        goto LABEL_12;
      }
      v53 = *(_QWORD *)result;
      if (!*((_BYTE *)result + 15))
      {
        v60 = *((unsigned __int16 *)result + 5);
        result = *(int **)result;
        while (*(unsigned __int8 *)result != a2)
        {
          result = (int *)((char *)result + 1);
          if (!--v60)
          {
            result = (int *)((char *)v52 + v53);
            break;
          }
        }
LABEL_81:
        v20 = (_WORD)result - v53;
        goto LABEL_12;
      }
      result = *(int **)result;
      v54 = v52;
      if (v52 >= 0x1E)
      {
        do
        {
          v56 = (int *)((unint64_t)v54 >> 1);
          v57 = (unsigned __int8 *)result + ((unint64_t)v54 >> 1);
          v59 = *v57;
          v58 = (int *)(v57 + 1);
          v54 = (int *)((char *)v54 + ~((unint64_t)v54 >> 1));
          if (v59 < a2)
            result = v58;
          else
            v54 = v56;
        }
        while (v54);
        if (result == (int *)((char *)v52 + v53) || *(unsigned __int8 *)result != a2)
          goto LABEL_13;
        goto LABEL_81;
      }
      result = 0;
      while (1)
      {
        v55 = *((unsigned __int8 *)result + v53);
        if (v55 >= a2)
          break;
        result = (int *)((char *)result + 1);
        if (v52 == result)
          goto LABEL_13;
      }
      v20 = v55 == a2 ? (unsigned __int16)result : (unsigned __int16)v52;
LABEL_12:
      if ((_DWORD)v52 != v20)
        break;
LABEL_13:
      v16 = 0;
      if (++v17 == v18)
      {
        v73 = 1;
        v72 = 1;
        if ((v19 & 1) == 0)
          goto LABEL_121;
        goto LABEL_122;
      }
    }
    v61 = v51 + 80 * v50;
    v62 = (int *)*(unsigned __int16 *)(v61 + 42);
    if (*(_WORD *)(v61 + 42))
    {
      v63 = v51 + 80 * v50;
      v64 = *(_QWORD *)(v63 + 32);
      if (!*(_BYTE *)(v63 + 47))
      {
        v71 = v62;
        result = *(int **)(v63 + 32);
        while (*(unsigned __int8 *)result != a2)
        {
          result = (int *)((char *)result + 1);
          v71 = (int *)((char *)v71 - 1);
          if (!v71)
          {
            LODWORD(result) = v64 + (_DWORD)v62;
            goto LABEL_107;
          }
        }
        goto LABEL_107;
      }
      result = *(int **)(v63 + 32);
      v65 = v62;
      if (v62 < 0x1E)
      {
        result = 0;
        while (1)
        {
          v66 = *((unsigned __int8 *)result + v64);
          if (v66 >= a2)
            break;
          result = (int *)((char *)result + 1);
          if (v62 == result)
            goto LABEL_101;
        }
        if (v66 == a2)
          result = (int *)result;
        else
          result = (int *)v62;
LABEL_111:
        if ((v19 & 1) != 0)
          goto LABEL_125;
        goto LABEL_112;
      }
      do
      {
        v67 = (int *)((unint64_t)v65 >> 1);
        v68 = (unsigned __int8 *)result + ((unint64_t)v65 >> 1);
        v70 = *v68;
        v69 = (int *)(v68 + 1);
        v65 = (int *)((char *)v65 + ~((unint64_t)v65 >> 1));
        if (v70 < a2)
          result = v69;
        else
          v65 = v67;
      }
      while (v65);
      if (result != (int *)((char *)v62 + v64))
      {
        if (*(unsigned __int8 *)result != a2)
          goto LABEL_111;
LABEL_107:
        result = (int *)((_DWORD)result - v64);
        goto LABEL_111;
      }
    }
LABEL_101:
    if ((v19 & 1) != 0)
    {
LABEL_125:
      v73 = 1;
      v72 = 1;
      if (a4)
        goto LABEL_123;
      return result;
    }
LABEL_112:
    ++v17;
    v16 = 1;
    if (v17 != v18)
      continue;
    break;
  }
  v73 = 1;
  v72 = 1;
  result = gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<float>(*(int **)(v10 + 72), a2, v8, &v73);
  if (a4)
    goto LABEL_123;
  return result;
}

void *gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<std::string>(gss *a1, unsigned int a2, _BYTE *a3)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned int v38;
  unsigned __int16 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unsigned int v57;
  unsigned __int16 v58;

  v3 = *((_QWORD *)a1 + 2 * a2 + 2);
  if (!v3)
  {
    if (a3)
      *a3 = 0;
    return gss::defaultValueForKey<gss::ScenePropertyID,std::string>();
  }
  v4 = (char *)a1 + 16 * a2;
  v5 = *((unsigned __int16 *)v4 + 28);
  if (!*((_WORD *)v4 + 28))
  {
LABEL_30:
    v22 = *(uint64_t **)(v3 + 72);
    if (v22)
    {
      v23 = *v22;
      v24 = *(unsigned __int16 *)(v23 + 10);
      if (*(_WORD *)(v23 + 10))
      {
        v25 = *(unsigned __int8 **)v23;
        if (!*(_BYTE *)(v23 + 15))
        {
          v32 = *(unsigned __int16 *)(v23 + 10);
          v33 = *(unsigned __int8 **)v23;
          while (*v33 != 72)
          {
            ++v33;
            if (!--v32)
            {
              LOWORD(v33) = (_WORD)v25 + v24;
              break;
            }
          }
LABEL_60:
          if ((_DWORD)v24 != (unsigned __int16)((_WORD)v33 - (_WORD)v25))
            goto LABEL_68;
          goto LABEL_61;
        }
        if (v24 < 0x1E)
        {
          v26 = 0;
          while (1)
          {
            v27 = v25[v26];
            if (v27 >= 0x48)
              break;
            if (v24 == ++v26)
              goto LABEL_61;
          }
          if (v27 == 72)
            v40 = v26;
          else
            v40 = *(_WORD *)(v23 + 10);
          if ((_DWORD)v24 != v40)
          {
LABEL_68:
            v41 = *(unsigned __int16 *)(v23 + 74);
            if (!*(_WORD *)(v23 + 74))
              return gss::PropertySetDefaultStringValue(a1);
            v42 = *(_QWORD *)(v23 + 64);
            if (*(_BYTE *)(v23 + 79))
            {
              if (v41 < 0x1E)
              {
                v43 = 0;
                while (1)
                {
                  v44 = *(unsigned __int8 *)(v42 + v43);
                  if (v44 >= 0x48)
                    break;
                  if (v41 == ++v43)
                    return gss::PropertySetDefaultStringValue(a1);
                }
                if (v44 == 72)
                  v58 = v43;
                else
                  v58 = *(_WORD *)(v23 + 74);
                if ((_DWORD)v41 == v58)
                  return gss::PropertySetDefaultStringValue(a1);
                return *(void **)(*(_QWORD *)(v23 + 64) + *(unsigned __int16 *)(v23 + 72) + 16 * v58 + 8);
              }
              v47 = *(unsigned __int8 **)(v23 + 64);
              v53 = *(unsigned __int16 *)(v23 + 74);
              do
              {
                v54 = v53 >> 1;
                v55 = &v47[v53 >> 1];
                v57 = *v55;
                v56 = v55 + 1;
                v53 += ~(v53 >> 1);
                if (v57 < 0x48)
                  v47 = v56;
                else
                  v53 = v54;
              }
              while (v53);
              if (v47 == (unsigned __int8 *)(v42 + v41) || *v47 != 72)
                return gss::PropertySetDefaultStringValue(a1);
            }
            else
            {
              v46 = *(unsigned __int16 *)(v23 + 74);
              v47 = *(unsigned __int8 **)(v23 + 64);
              while (*v47 != 72)
              {
                ++v47;
                if (!--v46)
                {
                  LOWORD(v47) = v42 + v41;
                  break;
                }
              }
            }
            v58 = (_WORD)v47 - v42;
            if ((_DWORD)v41 == v58)
              return gss::PropertySetDefaultStringValue(a1);
            return *(void **)(*(_QWORD *)(v23 + 64) + *(unsigned __int16 *)(v23 + 72) + 16 * v58 + 8);
          }
          goto LABEL_61;
        }
        v33 = *(unsigned __int8 **)v23;
        v34 = *(unsigned __int16 *)(v23 + 10);
        do
        {
          v35 = v34 >> 1;
          v36 = &v33[v34 >> 1];
          v38 = *v36;
          v37 = v36 + 1;
          v34 += ~(v34 >> 1);
          if (v38 < 0x48)
            v33 = v37;
          else
            v34 = v35;
        }
        while (v34);
        if (v33 != &v25[v24] && *v33 == 72)
          goto LABEL_60;
      }
    }
LABEL_61:
    if (a3)
      *a3 = 0;
    return gss::defaultValueForKey<gss::ScenePropertyID,std::string>();
  }
  v6 = *((_QWORD *)v4 + 6);
  v7 = v6 + 8 * v5;
  while (1)
  {
    v9 = *(uint64_t **)(*(_QWORD *)v6 + 72);
    if (!v9)
      goto LABEL_6;
    v10 = *v9;
    v11 = *(unsigned __int16 *)(v10 + 10);
    if (!*(_WORD *)(v10 + 10))
    {
      v8 = 0;
      goto LABEL_5;
    }
    v12 = *(unsigned __int8 **)v10;
    if (!*(_BYTE *)(v10 + 15))
    {
      v21 = *(unsigned __int16 *)(v10 + 10);
      v13 = *(unsigned __int8 **)v10;
      while (*v13 != 72)
      {
        ++v13;
        if (!--v21)
        {
          LOWORD(v13) = (_WORD)v12 + v11;
          break;
        }
      }
LABEL_26:
      v8 = (_WORD)v13 - (_WORD)v12;
      goto LABEL_5;
    }
    v13 = *(unsigned __int8 **)v10;
    v14 = *(unsigned __int16 *)(v10 + 10);
    if (v11 >= 0x1E)
    {
      do
      {
        v17 = v14 >> 1;
        v18 = &v13[v14 >> 1];
        v20 = *v18;
        v19 = v18 + 1;
        a1 = (gss *)v20;
        v14 += ~(v14 >> 1);
        if (v20 < 0x48)
          v13 = v19;
        else
          v14 = v17;
      }
      while (v14);
      if (v13 == &v12[v11] || *v13 != 72)
        goto LABEL_6;
      goto LABEL_26;
    }
    v15 = 0;
    while (1)
    {
      v16 = v12[v15];
      if (v16 >= 0x48)
        break;
      if (v11 == ++v15)
        goto LABEL_6;
    }
    v8 = v16 == 72 ? v15 : *(_WORD *)(v10 + 10);
LABEL_5:
    if ((_DWORD)v11 != v8)
      break;
LABEL_6:
    v6 += 8;
    if (v6 == v7)
      goto LABEL_30;
  }
  v28 = (unsigned __int8 *)*(unsigned __int16 *)(v10 + 74);
  if (!*(_WORD *)(v10 + 74))
    return gss::PropertySetDefaultStringValue(a1);
  v29 = *(_QWORD *)(v10 + 64);
  if (!*(_BYTE *)(v10 + 79))
  {
    v45 = *(unsigned __int16 *)(v10 + 74);
    v30 = *(unsigned __int8 **)(v10 + 64);
    while (*v30 != 72)
    {
      ++v30;
      if (!--v45)
      {
        LOWORD(v30) = v29 + (_WORD)v28;
        break;
      }
    }
LABEL_91:
    LOWORD(v30) = (_WORD)v30 - v29;
    if ((_DWORD)v28 != (unsigned __int16)v30)
      return *(void **)(v29 + *(unsigned __int16 *)(v10 + 72) + 16 * (unsigned __int16)v30 + 8);
    return gss::PropertySetDefaultStringValue(a1);
  }
  if (v28 >= 0x1E)
  {
    v30 = *(unsigned __int8 **)(v10 + 64);
    v48 = *(unsigned __int16 *)(v10 + 74);
    do
    {
      v49 = v48 >> 1;
      v50 = &v30[v48 >> 1];
      v52 = *v50;
      v51 = v50 + 1;
      v48 += ~(v48 >> 1);
      if (v52 < 0x48)
        v30 = v51;
      else
        v48 = v49;
    }
    while (v48);
    if (v30 == &v28[v29] || *v30 != 72)
      return gss::PropertySetDefaultStringValue(a1);
    goto LABEL_91;
  }
  v30 = 0;
  while (1)
  {
    v31 = v30[v29];
    if (v31 >= 0x48)
      break;
    if (v28 == ++v30)
      return gss::PropertySetDefaultStringValue(a1);
  }
  if (v31 != 72)
    LOWORD(v30) = *(_WORD *)(v10 + 74);
  if ((_DWORD)v28 != (unsigned __int16)v30)
    return *(void **)(v29 + *(unsigned __int16 *)(v10 + 72) + 16 * (unsigned __int16)v30 + 8);
  return gss::PropertySetDefaultStringValue(a1);
}

uint64_t gss::QueryableLocker<gss::ScenePropertyID>::~QueryableLocker(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (*(_BYTE *)(a1 + 32))
    (*(void (**)(void))(**(_QWORD **)a1 + 56))();
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

void sub_19F064FD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 16);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t geo::optional<std::string>::operator=(uint64_t a1, uint64_t a2)
{
  void **v3;
  size_t v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  size_t v8;
  void *v9;
  size_t v10;

  if (*(_BYTE *)a2)
  {
    if (*(_BYTE *)a1)
    {
      if (a1 != a2)
      {
        v3 = (void **)(a1 + 8);
        v4 = *(unsigned __int8 *)(a2 + 31);
        if (*(char *)(a1 + 31) < 0)
        {
          v8 = *(_QWORD *)(a2 + 16);
          if ((v4 & 0x80u) == 0)
            v9 = (void *)(a2 + 8);
          else
            v9 = *(void **)(a2 + 8);
          if ((v4 & 0x80u) == 0)
            v10 = v4;
          else
            v10 = v8;
          std::string::__assign_no_alias<false>(v3, v9, v10);
        }
        else if ((v4 & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v3, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
        }
        else
        {
          v5 = *(_OWORD *)(a2 + 8);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
          *(_OWORD *)v3 = v5;
        }
      }
    }
    else
    {
      v6 = (std::string *)(a1 + 8);
      if (*(char *)(a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
      }
      else
      {
        v7 = *(_OWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      }
      *(_BYTE *)a1 = 1;
    }
  }
  else if (*(_BYTE *)a1)
  {
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

void gss::Queryable<gss::ScenePropertyID>::unlock(uint64_t a1)
{
  geo::read_write_lock *v1;
  const char *v2;

  v1 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 32));
  if ((_DWORD)v1)
    geo::read_write_lock::logFailure(v1, (uint64_t)"unlock", v2);
}

__int16 *gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>(__int16 *result, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned __int16 v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned int v31;

  if (!result)
    goto LABEL_25;
  v4 = a3 >= 0x17 ? 23 : a3;
  v5 = *((unsigned __int8 *)result + v4 + 16);
  v6 = *(_QWORD *)result;
  v7 = *(_QWORD *)result + 80 * v5;
  v8 = *(unsigned __int16 *)(v7 + 10);
  if (!*(_WORD *)(v7 + 10))
    goto LABEL_25;
  v9 = *(unsigned __int8 **)v7;
  if (!*(_BYTE *)(v7 + 15))
  {
    v12 = *(unsigned __int16 *)(v7 + 10);
    v13 = *(unsigned __int8 **)v7;
    while (*v13 != a2)
    {
      ++v13;
      if (!--v12)
      {
        LOWORD(v13) = (_WORD)v9 + v8;
        break;
      }
    }
LABEL_24:
    if ((_DWORD)v8 != (unsigned __int16)((_WORD)v13 - (_WORD)v9))
      goto LABEL_32;
LABEL_25:
    if (a4)
      *a4 = 0;
    return (__int16 *)gss::defaultValueForKey<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>();
  }
  if (v8 >= 0x1E)
  {
    v13 = *(unsigned __int8 **)v7;
    v14 = v8;
    do
    {
      v15 = v14 >> 1;
      v16 = &v13[v14 >> 1];
      v18 = *v16;
      v17 = v16 + 1;
      v14 += ~(v14 >> 1);
      if (v18 < a2)
        v13 = v17;
      else
        v14 = v15;
    }
    while (v14);
    if (v13 == &v9[v8] || *v13 != a2)
      goto LABEL_25;
    goto LABEL_24;
  }
  v10 = 0;
  while (1)
  {
    v11 = v9[v10];
    if (v11 >= a2)
      break;
    if (v8 == ++v10)
      goto LABEL_25;
  }
  if (v11 == a2)
    v19 = v10;
  else
    v19 = v8;
  if ((_DWORD)v8 == v19)
    goto LABEL_25;
LABEL_32:
  v20 = v6 + 80 * v5;
  v21 = (unsigned __int8 *)*(unsigned __int16 *)(v20 + 58);
  if (!*(_WORD *)(v20 + 58))
    return &gss::PropertySetValueHelper<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  v22 = v6 + 80 * v5;
  v23 = *(_QWORD *)(v22 + 48);
  if (*(_BYTE *)(v22 + 63))
  {
    if (v21 < 0x1E)
    {
      v24 = 0;
      result = &gss::PropertySetValueHelper<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      while (1)
      {
        v25 = v24[v23];
        if (v25 >= a2)
          break;
        if (v21 == ++v24)
          return result;
      }
      if (v25 != a2)
        LOWORD(v24) = (_WORD)v21;
      if ((_DWORD)v21 != (unsigned __int16)v24)
        goto LABEL_55;
      return &gss::PropertySetValueHelper<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    }
    v24 = *(unsigned __int8 **)(v22 + 48);
    v27 = v21;
    do
    {
      v28 = (unsigned __int8 *)((unint64_t)v27 >> 1);
      v29 = &v24[(unint64_t)v27 >> 1];
      v31 = *v29;
      v30 = v29 + 1;
      v27 += ~((unint64_t)v27 >> 1);
      if (v31 < a2)
        v24 = v30;
      else
        v27 = v28;
    }
    while (v27);
    if (v24 == &v21[v23] || *v24 != a2)
      return &gss::PropertySetValueHelper<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
  else
  {
    v26 = v21;
    v24 = *(unsigned __int8 **)(v22 + 48);
    while (*v24 != a2)
    {
      ++v24;
      if (!--v26)
      {
        LOWORD(v24) = v23 + (_WORD)v21;
        break;
      }
    }
  }
  LOWORD(v24) = (_WORD)v24 - v23;
  if ((_DWORD)v21 == (unsigned __int16)v24)
    return &gss::PropertySetValueHelper<gss::ScenePropertyID,geo::Color<unsigned short,4,(geo::ColorSpace)0>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
LABEL_55:
  if (v21 > (unsigned __int16)v24)
    return (__int16 *)(v23 + *(unsigned __int16 *)(v6 + 80 * v5 + 56) + 8 * (unsigned __int16)v24);
  return result;
}

int *gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<float>(int *result, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned __int16 v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned int v31;

  if (!result)
    goto LABEL_25;
  v4 = a3 >= 0x17 ? 23 : a3;
  v5 = *((unsigned __int8 *)result + v4 + 16);
  v6 = *(_QWORD *)result;
  v7 = *(_QWORD *)result + 80 * v5;
  v8 = *(unsigned __int16 *)(v7 + 10);
  if (!*(_WORD *)(v7 + 10))
    goto LABEL_25;
  v9 = *(unsigned __int8 **)v7;
  if (!*(_BYTE *)(v7 + 15))
  {
    v12 = *(unsigned __int16 *)(v7 + 10);
    v13 = *(unsigned __int8 **)v7;
    while (*v13 != a2)
    {
      ++v13;
      if (!--v12)
      {
        LOWORD(v13) = (_WORD)v9 + v8;
        break;
      }
    }
LABEL_24:
    if ((_DWORD)v8 != (unsigned __int16)((_WORD)v13 - (_WORD)v9))
      goto LABEL_32;
LABEL_25:
    if (a4)
      *a4 = 0;
    return (int *)gss::defaultValueForKey<gss::ScenePropertyID,float>(a2);
  }
  if (v8 >= 0x1E)
  {
    v13 = *(unsigned __int8 **)v7;
    v14 = v8;
    do
    {
      v15 = v14 >> 1;
      v16 = &v13[v14 >> 1];
      v18 = *v16;
      v17 = v16 + 1;
      v14 += ~(v14 >> 1);
      if (v18 < a2)
        v13 = v17;
      else
        v14 = v15;
    }
    while (v14);
    if (v13 == &v9[v8] || *v13 != a2)
      goto LABEL_25;
    goto LABEL_24;
  }
  v10 = 0;
  while (1)
  {
    v11 = v9[v10];
    if (v11 >= a2)
      break;
    if (v8 == ++v10)
      goto LABEL_25;
  }
  if (v11 == a2)
    v19 = v10;
  else
    v19 = v8;
  if ((_DWORD)v8 == v19)
    goto LABEL_25;
LABEL_32:
  v20 = v6 + 80 * v5;
  v21 = (unsigned __int8 *)*(unsigned __int16 *)(v20 + 42);
  if (!*(_WORD *)(v20 + 42))
    return &gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  v22 = v6 + 80 * v5;
  v23 = *(_QWORD *)(v22 + 32);
  if (*(_BYTE *)(v22 + 47))
  {
    if (v21 < 0x1E)
    {
      v24 = 0;
      result = &gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      while (1)
      {
        v25 = v24[v23];
        if (v25 >= a2)
          break;
        if (v21 == ++v24)
          return result;
      }
      if (v25 != a2)
        LOWORD(v24) = (_WORD)v21;
      if ((_DWORD)v21 != (unsigned __int16)v24)
        goto LABEL_55;
      return &gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    }
    v24 = *(unsigned __int8 **)(v22 + 32);
    v27 = v21;
    do
    {
      v28 = (unsigned __int8 *)((unint64_t)v27 >> 1);
      v29 = &v24[(unint64_t)v27 >> 1];
      v31 = *v29;
      v30 = v29 + 1;
      v27 += ~((unint64_t)v27 >> 1);
      if (v31 < a2)
        v24 = v30;
      else
        v27 = v28;
    }
    while (v27);
    if (v24 == &v21[v23] || *v24 != a2)
      return &gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
  else
  {
    v26 = v21;
    v24 = *(unsigned __int8 **)(v22 + 32);
    while (*v24 != a2)
    {
      ++v24;
      if (!--v26)
      {
        LOWORD(v24) = v23 + (_WORD)v21;
        break;
      }
    }
  }
  LOWORD(v24) = (_WORD)v24 - v23;
  if ((_DWORD)v21 == (unsigned __int16)v24)
    return &gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
LABEL_55:
  if (v21 > (unsigned __int16)v24)
    return (int *)(v23 + *(unsigned __int16 *)(v6 + 80 * v5 + 40) + 4 * (unsigned __int16)v24);
  return result;
}

void std::__tree<md::LayerDataIdentWithWorld>::__assign_multi<std::__tree_const_iterator<md::LayerDataIdentWithWorld,std::__tree_node<md::LayerDataIdentWithWorld,void *> *,long>>(uint64_t **a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  int v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  int v18;
  uint64_t *v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *i;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t **v32;
  int v33;
  int v34;
  _BOOL4 v35;
  int v36;
  uint64_t *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t *v40;

  v4 = a2;
  if (a1[2])
  {
    v6 = (uint64_t **)*a1;
    v8 = a1 + 1;
    v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    v7[2] = 0;
    a1[2] = 0;
    a1[1] = 0;
    v9 = v6[1] ? v6[1] : (uint64_t *)v6;
    if (v9)
    {
      v10 = (uint64_t *)v9[2];
      if (v10)
      {
        v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *v10 = 0;
          while (1)
          {
            v40 = (_QWORD *)v10[1];
            if (!v40)
              break;
            do
            {
              v10 = v40;
              v40 = (_QWORD *)*v40;
            }
            while (v40);
          }
        }
        else
        {
          for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        v12 = v9;
        v13 = v4;
        do
        {
          v9 = v10;
          v14 = *((_DWORD *)v13 + 7);
          *((_BYTE *)v12 + 32) = *((_BYTE *)v13 + 32);
          *((_DWORD *)v12 + 7) = v14;
          v15 = *v8;
          v16 = a1 + 1;
          v17 = a1 + 1;
          if (*v8)
          {
            do
            {
              while (1)
              {
                v16 = v15;
                v18 = *((char *)v15 + 32);
                if (!(*((unsigned __int8 *)v12 + 32) == v18
                     ? *((_DWORD *)v12 + 7) < *((_DWORD *)v15 + 7)
                     : *((char *)v12 + 32) < v18))
                  break;
                v15 = (uint64_t *)*v15;
                v17 = (uint64_t **)v16;
                if (!*v16)
                  goto LABEL_23;
              }
              v15 = (uint64_t *)v15[1];
            }
            while (v15);
            v17 = (uint64_t **)(v16 + 1);
          }
LABEL_23:
          *v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v16;
          *v17 = v12;
          v20 = (uint64_t *)**a1;
          if (v20)
          {
            *a1 = v20;
            v12 = *v17;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v12);
          a1[2] = (uint64_t *)((char *)a1[2] + 1);
          if (v10)
          {
            v10 = (uint64_t *)v10[2];
            if (v10)
            {
              v23 = (_QWORD *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *v10 = 0;
                while (1)
                {
                  v24 = (_QWORD *)v10[1];
                  if (!v24)
                    break;
                  do
                  {
                    v10 = v24;
                    v24 = (_QWORD *)*v24;
                  }
                  while (v24);
                }
              }
              else
              {
                for (v10[1] = 0; v23; v23 = (_QWORD *)v10[1])
                {
                  do
                  {
                    v10 = v23;
                    v23 = (_QWORD *)*v23;
                  }
                  while (v23);
                }
              }
            }
          }
          else
          {
            v10 = 0;
          }
          v21 = (_QWORD *)v13[1];
          if (v21)
          {
            do
            {
              v4 = v21;
              v21 = (_QWORD *)*v21;
            }
            while (v21);
          }
          else
          {
            do
            {
              v4 = (_QWORD *)v13[2];
              v22 = *v4 == (_QWORD)v13;
              v13 = v4;
            }
            while (!v22);
          }
          if (!v9)
            break;
          v12 = v9;
          v13 = v4;
        }
        while (v4 != a3);
      }
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v9);
      if (v10)
      {
        for (i = (_QWORD *)v10[2]; i; i = (_QWORD *)i[2])
          v10 = i;
        std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v10);
      }
    }
  }
  if (v4 != a3)
  {
    v26 = a1 + 1;
    do
    {
      v27 = (uint64_t *)operator new(0x28uLL);
      v28 = v27;
      v29 = *(_QWORD *)((char *)v4 + 28);
      *(uint64_t *)((char *)v27 + 28) = v29;
      v30 = *v26;
      v31 = (uint64_t)(a1 + 1);
      v32 = a1 + 1;
      if (*v26)
      {
        do
        {
          while (1)
          {
            v31 = (uint64_t)v30;
            v33 = *((char *)v30 + 32);
            v34 = v33;
            v35 = v33 > SBYTE4(v29);
            v36 = v34 == BYTE4(v29) ? *(_DWORD *)(v31 + 28) > v29 : v35;
            if (v36 != 1)
              break;
            v30 = *(uint64_t **)v31;
            v32 = (uint64_t **)v31;
            if (!*(_QWORD *)v31)
              goto LABEL_62;
          }
          v30 = *(uint64_t **)(v31 + 8);
        }
        while (v30);
        v32 = (uint64_t **)(v31 + 8);
      }
LABEL_62:
      *v27 = 0;
      v27[1] = 0;
      v27[2] = v31;
      *v32 = v27;
      v37 = (uint64_t *)**a1;
      if (v37)
      {
        *a1 = v37;
        v28 = *v32;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v28);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
      v38 = (_QWORD *)v4[1];
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = (_QWORD *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (_QWORD *)v4[2];
          v22 = *v39 == (_QWORD)v4;
          v4 = v39;
        }
        while (!v22);
      }
      v4 = v39;
    }
    while (v39 != a3);
  }
}

uint64_t geo::Triangulator<float,unsigned short>::linkListInHashSpace(uint64_t result, float a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  std::locale v19;

  if (a2 == 0.0)
    return result;
  if (!result)
  {
    v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Called linkListInHashSpace with a NULL head.", 44);
    std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
    v18 = std::locale::use_facet(&v19, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
    std::locale::~locale(&v19);
    std::ostream::put();
    return std::ostream::flush();
  }
  v2 = (_QWORD *)result;
  do
  {
    v3 = (_QWORD *)v2[3];
    v2[4] = v2[2];
    v2[5] = v3;
    v2 = v3;
  }
  while (v3 != (_QWORD *)result);
  *(_QWORD *)(*(_QWORD *)(result + 32) + 40) = 0;
  *(_QWORD *)(result + 32) = 0;
  v4 = 1;
  while (2)
  {
    v5 = 0;
    v6 = 0;
    v7 = result;
    v8 = result;
    while (2)
    {
      v9 = 0;
      ++v5;
      while (1)
      {
        ++v9;
        v8 = *(_QWORD *)(v8 + 40);
        if (!v8)
          break;
        if (v4 == v9)
        {
          v9 = v4;
          break;
        }
      }
      v10 = v4;
      while (1)
      {
        v11 = !v10 || v8 == 0;
        v12 = !v11;
        if (!v9)
          break;
        if (v12 && *(_DWORD *)(v7 + 48) > *(_DWORD *)(v8 + 48))
          goto LABEL_28;
        v13 = *(_QWORD *)(v7 + 40);
        --v9;
        v14 = v8;
        v15 = v7;
        v16 = v7;
        if (v6)
          goto LABEL_29;
LABEL_14:
        *(_QWORD *)(v15 + 32) = v6;
        result = v16;
        v7 = v13;
        v8 = v14;
        v6 = v15;
      }
      if (v12)
      {
        v9 = 0;
LABEL_28:
        v14 = *(_QWORD *)(v8 + 40);
        --v10;
        v13 = v7;
        v15 = v8;
        v16 = v8;
        if (!v6)
          goto LABEL_14;
LABEL_29:
        *(_QWORD *)(v6 + 40) = v15;
        v16 = result;
        goto LABEL_14;
      }
      v7 = v8;
      if (v8)
        continue;
      break;
    }
    *(_QWORD *)(v6 + 40) = 0;
    v4 *= 2;
    if (v5 > 1)
      continue;
    return result;
  }
}

void sub_19F065A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::MeshInstance>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x6307588E3A87BAE2;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x6307588E3A87BAE2;
      if (*(_QWORD *)&v3 <= 0x6307588E3A87BAE2uLL)
        v5 = 0x6307588E3A87BAE2uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x6307588E3A87BAE2;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x6307588E3A87BAE2)
            {
              if (v7[2] == 0x6307588E3A87BAE2)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x6307588E3A87BAE2)
          {
            if (v7[2] == 0x6307588E3A87BAE2)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::MeshInstance]";
  *(_QWORD *)(v11 + 24) = 28;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2F58;
  *(_QWORD *)(v11 + 8) = 0x6307588E3A87BAE2;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x6307588E3A87BAE2uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x6307588E3A87BAE2;
  v15[1] = "md::components::MeshInstance]";
  v15[2] = 28;
  gdc::Registry::_registerStorageDataSignals(a1, 0x6307588E3A87BAE2, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F065C94(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::ClientState>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xA4F4C87C991FC6E0;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xA4F4C87C991FC6E0;
      if (*(_QWORD *)&v3 <= 0xA4F4C87C991FC6E0)
        v5 = 0xA4F4C87C991FC6E0 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xA4F4C87C991FC6E0;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xA4F4C87C991FC6E0)
            {
              if (v7[2] == 0xA4F4C87C991FC6E0)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xA4F4C87C991FC6E0)
          {
            if (v7[2] == 0xA4F4C87C991FC6E0)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::ClientState]";
  *(_QWORD *)(v11 + 24) = 27;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2E98;
  *(_QWORD *)(v11 + 8) = 0xA4F4C87C991FC6E0;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xA4F4C87C991FC6E0, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xA4F4C87C991FC6E0;
  v15[1] = "md::components::ClientState]";
  v15[2] = 27;
  gdc::Registry::_registerStorageDataSignals(a1, 0xA4F4C87C991FC6E0, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F065EBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::Visibility>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xF44C196EC679B51CLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xF44C196EC679B51CLL;
      if (*(_QWORD *)&v3 <= 0xF44C196EC679B51CLL)
        v5 = 0xF44C196EC679B51CLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xF44C196EC679B51CLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xF44C196EC679B51CLL)
            {
              if (v7[2] == 0xF44C196EC679B51CLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xF44C196EC679B51CLL)
          {
            if (v7[2] == 0xF44C196EC679B51CLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::Visibility]";
  *(_QWORD *)(v11 + 24) = 26;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B2E68;
  *(_QWORD *)(v11 + 8) = 0xF44C196EC679B51CLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xF44C196EC679B51CLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xF44C196EC679B51CLL;
  v15[1] = "md::components::Visibility]";
  v15[2] = 26;
  gdc::Registry::_registerStorageDataSignals(a1, 0xF44C196EC679B51CLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F0660E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

float *std::__introsort<std::_ClassicAlgPolicy,geo::Triangulator<float,unsigned short>::ListHeadSorter &,std::pair<geo::Triangulator<float,unsigned short>::Node *,float> *,false>(float *result, float *a2, uint64_t a3, char a4)
{
  float *v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  float v28;
  float *v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  float *v44;
  float *v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  float v52;
  uint64_t v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float v63;
  float *v64;
  float *v65;
  float *v66;
  float *v67;
  float v68;
  float *v69;
  float v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  float v74;
  float v75;
  BOOL v76;
  float *v77;
  float v78;
  float *v79;
  float v80;
  float *v81;
  float *v82;
  float v83;
  uint64_t v84;
  int v85;
  float v86;
  float v87;
  float v88;
  float v89;
  uint64_t v90;
  float v91;
  float v92;
  float v93;
  uint64_t v94;
  float v95;
  float v96;
  uint64_t v97;
  float v98;
  float v99;
  uint64_t v100;
  uint64_t v101;
  float v102;
  uint64_t v103;
  float v104;
  uint64_t v105;
  float *v106;
  BOOL v108;
  uint64_t v109;
  float *v110;
  uint64_t v111;
  float v112;
  float v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  int64_t v117;
  int64_t v118;
  BOOL v119;
  uint64_t v120;
  float *v121;
  float *v122;
  float v123;
  uint64_t v124;
  float *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  float v129;
  float v130;
  uint64_t v131;
  float *v132;
  float v133;
  float v134;
  uint64_t v135;
  float *v136;
  float v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  float *v142;
  float *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  float *v148;
  float v149;
  uint64_t v150;
  float *v151;
  float v152;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v88 = *(a2 - 2);
        v89 = v8[2];
        if (v89 < v88)
        {
          v90 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 2) = v90;
          v8[2] = v88;
          *(a2 - 2) = v89;
        }
        return result;
      case 3:
        v91 = v8[6];
        v92 = v8[2];
        v93 = *(a2 - 2);
        if (v92 >= v91)
        {
          if (v91 < v93)
          {
            v128 = *((_QWORD *)v8 + 2);
            *((_QWORD *)v8 + 2) = *((_QWORD *)a2 - 2);
            *((_QWORD *)a2 - 2) = v128;
            v8[6] = v93;
            *(a2 - 2) = v91;
            v129 = v8[6];
            v130 = v8[2];
            if (v130 < v129)
            {
              v131 = *(_QWORD *)v8;
              *(_QWORD *)v8 = *((_QWORD *)v8 + 2);
              *((_QWORD *)v8 + 2) = v131;
              v8[2] = v129;
              v8[6] = v130;
            }
          }
        }
        else
        {
          v94 = *(_QWORD *)v8;
          if (v91 >= v93)
          {
            *(_QWORD *)v8 = *((_QWORD *)v8 + 2);
            *((_QWORD *)v8 + 2) = v94;
            v8[2] = v91;
            v8[6] = v92;
            v152 = *(a2 - 2);
            if (v92 >= v152)
              return result;
            *((_QWORD *)v8 + 2) = *((_QWORD *)a2 - 2);
            *((_QWORD *)a2 - 2) = v94;
            v8[6] = v152;
          }
          else
          {
            *(_QWORD *)v8 = *((_QWORD *)a2 - 2);
            *((_QWORD *)a2 - 2) = v94;
            v8[2] = v93;
          }
          *(a2 - 2) = v92;
        }
        return result;
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geo::Triangulator<float,unsigned short>::ListHeadSorter &,std::pair<geo::Triangulator<float,unsigned short>::Node *,float> *>(v8, v8 + 4, v8 + 8, a2 - 4);
      case 5:
        result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geo::Triangulator<float,unsigned short>::ListHeadSorter &,std::pair<geo::Triangulator<float,unsigned short>::Node *,float> *>(v8, v8 + 4, v8 + 8, v8 + 12);
        v95 = *(a2 - 2);
        v96 = v8[14];
        if (v96 < v95)
        {
          v97 = *((_QWORD *)v8 + 6);
          *((_QWORD *)v8 + 6) = *((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 2) = v97;
          v8[14] = v95;
          *(a2 - 2) = v96;
          v98 = v8[14];
          v99 = v8[10];
          if (v99 < v98)
          {
            v100 = *((_QWORD *)v8 + 4);
            v101 = *((_QWORD *)v8 + 6);
            *((_QWORD *)v8 + 4) = v101;
            *((_QWORD *)v8 + 6) = v100;
            v8[10] = v98;
            v8[14] = v99;
            v102 = v8[6];
            if (v102 < v98)
            {
              v103 = *((_QWORD *)v8 + 2);
              *((_QWORD *)v8 + 2) = v101;
              *((_QWORD *)v8 + 4) = v103;
              v8[6] = v98;
              v8[10] = v102;
              v104 = v8[2];
              if (v104 < v98)
              {
                v105 = *(_QWORD *)v8;
                *(_QWORD *)v8 = v101;
                *((_QWORD *)v8 + 2) = v105;
                v8[2] = v98;
                v8[6] = v104;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 383)
        {
          v106 = v8 + 4;
          v108 = v8 == a2 || v106 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v108)
            {
              v109 = 0;
              v110 = v8;
              do
              {
                v112 = v110[6];
                v113 = v110[2];
                v110 = v106;
                if (v113 < v112)
                {
                  v114 = *(_QWORD *)v106;
                  v115 = v109;
                  do
                  {
                    v116 = (char *)v8 + v115;
                    *((_QWORD *)v116 + 2) = *(_QWORD *)((char *)v8 + v115);
                    *((float *)v116 + 6) = *(float *)((char *)v8 + v115 + 8);
                    if (!v115)
                    {
                      v111 = (uint64_t)v8;
                      goto LABEL_121;
                    }
                    v115 -= 16;
                  }
                  while (*((float *)v116 - 2) < v112);
                  v111 = (uint64_t)v8 + v115 + 16;
LABEL_121:
                  *(_QWORD *)v111 = v114;
                  *(float *)(v111 + 8) = v112;
                }
                v106 = v110 + 4;
                v109 += 16;
              }
              while (v110 + 4 != a2);
            }
          }
          else if (!v108)
          {
            v132 = v8 + 2;
            do
            {
              v133 = v7[6];
              v134 = v7[2];
              v7 = v106;
              if (v134 < v133)
              {
                v135 = *(_QWORD *)v106;
                v136 = v132;
                do
                {
                  *((_QWORD *)v136 + 1) = *((_QWORD *)v136 - 1);
                  v136[4] = *v136;
                  v137 = *(v136 - 4);
                  v136 -= 4;
                }
                while (v137 < v133);
                *((_QWORD *)v136 + 1) = v135;
                v136[4] = v133;
              }
              v106 = v7 + 4;
              v132 += 4;
            }
            while (v7 + 4 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v117 = (unint64_t)(v10 - 2) >> 1;
            v118 = v117;
            do
            {
              if (v117 >= v118)
              {
                v120 = (2 * v118) | 1;
                v121 = &v8[4 * v120];
                if (2 * v118 + 2 < v10 && v121[6] < v121[2])
                {
                  v121 += 4;
                  v120 = 2 * v118 + 2;
                }
                v122 = &v8[4 * v118];
                v123 = v122[2];
                if (v123 >= v121[2])
                {
                  v124 = *(_QWORD *)v122;
                  do
                  {
                    v125 = v122;
                    v122 = v121;
                    *(_QWORD *)v125 = *(_QWORD *)v121;
                    v125[2] = v121[2];
                    if (v117 < v120)
                      break;
                    v126 = 2 * v120;
                    v120 = (2 * v120) | 1;
                    v121 = &v8[4 * v120];
                    v127 = v126 + 2;
                    if (v127 < v10 && v121[6] < v121[2])
                    {
                      v121 += 4;
                      v120 = v127;
                    }
                  }
                  while (v123 >= v121[2]);
                  *(_QWORD *)v122 = v124;
                  v122[2] = v123;
                }
              }
              v119 = v118-- <= 0;
            }
            while (!v119);
            v138 = (unint64_t)v9 >> 4;
            do
            {
              v139 = 0;
              v140 = *(_QWORD *)v8;
              v141 = *((_DWORD *)v8 + 2);
              v142 = v8;
              do
              {
                v143 = v142;
                v142 += 4 * v139 + 4;
                v144 = 2 * v139;
                v139 = (2 * v139) | 1;
                v145 = v144 + 2;
                if (v145 < v138 && v142[6] < v142[2])
                {
                  v142 += 4;
                  v139 = v145;
                }
                *(_QWORD *)v143 = *(_QWORD *)v142;
                v143[2] = v142[2];
              }
              while (v139 <= (uint64_t)((unint64_t)(v138 - 2) >> 1));
              if (v142 == a2 - 4)
              {
                *(_QWORD *)v142 = v140;
                *((_DWORD *)v142 + 2) = v141;
              }
              else
              {
                *(_QWORD *)v142 = *((_QWORD *)a2 - 2);
                v142[2] = *(a2 - 2);
                *((_QWORD *)a2 - 2) = v140;
                *((_DWORD *)a2 - 2) = v141;
                v146 = (char *)v142 - (char *)v8 + 16;
                if (v146 >= 17)
                {
                  v147 = (((unint64_t)v146 >> 4) - 2) >> 1;
                  v148 = &v8[4 * v147];
                  v149 = v142[2];
                  if (v149 < v148[2])
                  {
                    v150 = *(_QWORD *)v142;
                    do
                    {
                      v151 = v142;
                      v142 = v148;
                      *(_QWORD *)v151 = *(_QWORD *)v148;
                      v151[2] = v148[2];
                      if (!v147)
                        break;
                      v147 = (v147 - 1) >> 1;
                      v148 = &v8[4 * v147];
                    }
                    while (v149 < v148[2]);
                    *(_QWORD *)v142 = v150;
                    v142[2] = v149;
                  }
                }
              }
              a2 -= 4;
              v119 = v138-- <= 2;
            }
            while (!v119);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[4 * ((unint64_t)v10 >> 1)];
        v13 = *(a2 - 2);
        if ((unint64_t)v9 < 0x801)
        {
          v17 = v8[2];
          v18 = v12[2];
          if (v18 >= v17)
          {
            if (v17 < v13)
            {
              v24 = *(_QWORD *)v8;
              *(_QWORD *)v8 = *((_QWORD *)a2 - 2);
              *((_QWORD *)a2 - 2) = v24;
              v8[2] = v13;
              *(a2 - 2) = v17;
              v25 = v8[2];
              v26 = v12[2];
              if (v26 < v25)
              {
                v27 = *(_QWORD *)v12;
                *(_QWORD *)v12 = *(_QWORD *)v8;
                *(_QWORD *)v8 = v27;
                v12[2] = v25;
                v8[2] = v26;
                --a3;
                if ((a4 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_56;
              }
            }
          }
          else
          {
            v19 = *(_QWORD *)v12;
            if (v17 >= v13)
            {
              *(_QWORD *)v12 = *(_QWORD *)v8;
              *(_QWORD *)v8 = v19;
              v12[2] = v17;
              v8[2] = v18;
              v39 = *(a2 - 2);
              if (v18 >= v39)
                goto LABEL_32;
              *(_QWORD *)v8 = *((_QWORD *)a2 - 2);
              *((_QWORD *)a2 - 2) = v19;
              v8[2] = v39;
            }
            else
            {
              *(_QWORD *)v12 = *((_QWORD *)a2 - 2);
              *((_QWORD *)a2 - 2) = v19;
              v12[2] = v13;
            }
            *(a2 - 2) = v18;
          }
LABEL_32:
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_33;
LABEL_56:
          v41 = v8[2];
          v42 = v41;
          v40 = *(_QWORD *)v8;
          if (v41 < *(v8 - 2))
            goto LABEL_57;
          if (*(a2 - 2) >= v41)
          {
            v79 = v8 + 4;
            do
            {
              v8 = v79;
              if (v79 >= a2)
                break;
              v80 = v79[2];
              v79 += 4;
            }
            while (v80 >= v41);
          }
          else
          {
            v77 = v8;
            do
            {
              v8 = v77 + 4;
              v78 = v77[6];
              v77 += 4;
            }
            while (v78 >= v41);
          }
          v81 = a2;
          if (v8 < a2)
          {
            v82 = a2;
            do
            {
              v81 = v82 - 4;
              v83 = *(v82 - 2);
              v82 -= 4;
            }
            while (v83 < v41);
          }
          while (v8 < v81)
          {
            v84 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)v81;
            *(_QWORD *)v81 = v84;
            v85 = *((_DWORD *)v8 + 2);
            v8[2] = v81[2];
            *((_DWORD *)v81 + 2) = v85;
            do
            {
              v86 = v8[6];
              v8 += 4;
            }
            while (v86 >= v41);
            do
            {
              v87 = *(v81 - 2);
              v81 -= 4;
            }
            while (v87 < v41);
          }
          if (v8 - 4 != v7)
          {
            *(_QWORD *)v7 = *((_QWORD *)v8 - 2);
            v7[2] = *(v8 - 2);
          }
          a4 = 0;
          *((_QWORD *)v8 - 2) = v40;
          *(v8 - 2) = v41;
          continue;
        }
        v14 = v12[2];
        v15 = v8[2];
        if (v15 >= v14)
        {
          if (v14 < v13)
          {
            v20 = *(_QWORD *)v12;
            *(_QWORD *)v12 = *((_QWORD *)a2 - 2);
            *((_QWORD *)a2 - 2) = v20;
            v12[2] = v13;
            *(a2 - 2) = v14;
            v21 = v12[2];
            v22 = v8[2];
            if (v22 < v21)
            {
              v23 = *(_QWORD *)v8;
              *(_QWORD *)v8 = *(_QWORD *)v12;
              *(_QWORD *)v12 = v23;
              v8[2] = v21;
              v12[2] = v22;
            }
          }
        }
        else
        {
          v16 = *(_QWORD *)v8;
          if (v14 < v13)
          {
            *(_QWORD *)v8 = *((_QWORD *)a2 - 2);
            *((_QWORD *)a2 - 2) = v16;
            v8[2] = v13;
            goto LABEL_22;
          }
          *(_QWORD *)v8 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v16;
          v8[2] = v14;
          v12[2] = v15;
          v28 = *(a2 - 2);
          if (v15 < v28)
          {
            *(_QWORD *)v12 = *((_QWORD *)a2 - 2);
            *((_QWORD *)a2 - 2) = v16;
            v12[2] = v28;
LABEL_22:
            *(a2 - 2) = v15;
          }
        }
        v29 = &v8[4 * v11];
        v30 = v29 - 4;
        v31 = *(v29 - 2);
        v32 = v8[6];
        v33 = *(a2 - 6);
        if (v32 >= v31)
        {
          if (v31 < v33)
          {
            v35 = *(_QWORD *)v30;
            *(_QWORD *)v30 = *((_QWORD *)a2 - 4);
            *((_QWORD *)a2 - 4) = v35;
            v30[2] = v33;
            *(a2 - 6) = v31;
            v36 = v30[2];
            v37 = v8[6];
            if (v37 < v36)
            {
              v38 = *((_QWORD *)v8 + 2);
              *((_QWORD *)v8 + 2) = *(_QWORD *)v30;
              *(_QWORD *)v30 = v38;
              v8[6] = v36;
              v30[2] = v37;
            }
          }
        }
        else
        {
          v34 = *((_QWORD *)v8 + 2);
          if (v31 < v33)
          {
            *((_QWORD *)v8 + 2) = *((_QWORD *)a2 - 4);
            *((_QWORD *)a2 - 4) = v34;
            v8[6] = v33;
            goto LABEL_36;
          }
          *((_QWORD *)v8 + 2) = *(_QWORD *)v30;
          *(_QWORD *)v30 = v34;
          v8[6] = v31;
          v30[2] = v32;
          v43 = *(a2 - 6);
          if (v32 < v43)
          {
            *(_QWORD *)v30 = *((_QWORD *)a2 - 4);
            *((_QWORD *)a2 - 4) = v34;
            v30[2] = v43;
LABEL_36:
            *(a2 - 6) = v32;
          }
        }
        v44 = &v8[4 * v11];
        v45 = v44 + 4;
        v46 = v44[6];
        v47 = v8[10];
        v48 = *(a2 - 10);
        if (v47 >= v46)
        {
          if (v46 < v48)
          {
            v50 = *(_QWORD *)v45;
            *(_QWORD *)v45 = *((_QWORD *)a2 - 6);
            *((_QWORD *)a2 - 6) = v50;
            v45[2] = v48;
            *(a2 - 10) = v46;
            v51 = v45[2];
            v52 = v8[10];
            if (v52 < v51)
            {
              v53 = *((_QWORD *)v8 + 4);
              *((_QWORD *)v8 + 4) = *(_QWORD *)v45;
              *(_QWORD *)v45 = v53;
              v8[10] = v51;
              v45[2] = v52;
            }
          }
        }
        else
        {
          v49 = *((_QWORD *)v8 + 4);
          if (v46 < v48)
          {
            *((_QWORD *)v8 + 4) = *((_QWORD *)a2 - 6);
            *((_QWORD *)a2 - 6) = v49;
            v8[10] = v48;
            goto LABEL_45;
          }
          *((_QWORD *)v8 + 4) = *(_QWORD *)v45;
          *(_QWORD *)v45 = v49;
          v8[10] = v46;
          v45[2] = v47;
          v54 = *(a2 - 10);
          if (v47 < v54)
          {
            *(_QWORD *)v45 = *((_QWORD *)a2 - 6);
            *((_QWORD *)a2 - 6) = v49;
            v45[2] = v54;
LABEL_45:
            *(a2 - 10) = v47;
          }
        }
        v55 = v12[2];
        v56 = v30[2];
        v57 = v55;
        v58 = v45[2];
        if (v56 >= v55)
        {
          v59 = *(_QWORD *)v12;
          if (v55 < v58)
          {
            v60 = *(_QWORD *)v45;
            *(_QWORD *)v12 = *(_QWORD *)v45;
            *(_QWORD *)v45 = v59;
            v12[2] = v58;
            v45[2] = v55;
            v57 = v58;
            if (v56 >= v58)
            {
              v59 = v60;
            }
            else
            {
              v59 = *(_QWORD *)v30;
              *(_QWORD *)v30 = v60;
              *(_QWORD *)v12 = v59;
              v30[2] = v58;
              v12[2] = v56;
              v57 = v56;
            }
          }
        }
        else
        {
          v59 = *(_QWORD *)v30;
          if (v55 >= v58)
          {
            *(_QWORD *)v30 = *(_QWORD *)v12;
            *(_QWORD *)v12 = v59;
            v30[2] = v55;
            v12[2] = v56;
            v57 = v56;
            if (v56 < v58)
            {
              v61 = *(_QWORD *)v45;
              *(_QWORD *)v12 = *(_QWORD *)v45;
              *(_QWORD *)v45 = v59;
              v12[2] = v58;
              v45[2] = v56;
              v57 = v58;
              v59 = v61;
            }
          }
          else
          {
            *(_QWORD *)v30 = *(_QWORD *)v45;
            *(_QWORD *)v45 = v59;
            v30[2] = v58;
            v45[2] = v56;
            v59 = *(_QWORD *)v12;
          }
        }
        v62 = *(_QWORD *)v8;
        *(_QWORD *)v8 = v59;
        *(_QWORD *)v12 = v62;
        v63 = v8[2];
        v8[2] = v57;
        v8[4 * v11 + 2] = v63;
        --a3;
        if ((a4 & 1) == 0)
          goto LABEL_56;
LABEL_33:
        v40 = *(_QWORD *)v8;
        v41 = v8[2];
        v42 = v41;
LABEL_57:
        v64 = v8;
        do
        {
          v65 = v64;
          v64 += 4;
        }
        while (v42 < v65[6]);
        v66 = a2;
        if (v65 == v8)
        {
          v69 = a2;
          while (v64 < v69)
          {
            v67 = v69 - 4;
            v70 = *(v69 - 2);
            v69 -= 4;
            if (v42 < v70)
              goto LABEL_67;
          }
          v67 = v69;
        }
        else
        {
          do
          {
            v67 = v66 - 4;
            v68 = *(v66 - 2);
            v66 -= 4;
          }
          while (v42 >= v68);
        }
LABEL_67:
        v8 = v64;
        if (v64 < v67)
        {
          v71 = (unint64_t)v67;
          do
          {
            v72 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)v71;
            *(_QWORD *)v71 = v72;
            v73 = *((_DWORD *)v8 + 2);
            v8[2] = *(float *)(v71 + 8);
            *(_DWORD *)(v71 + 8) = v73;
            do
            {
              v74 = v8[6];
              v8 += 4;
            }
            while (v42 < v74);
            do
            {
              v75 = *(float *)(v71 - 8);
              v71 -= 16;
            }
            while (v42 >= v75);
          }
          while ((unint64_t)v8 < v71);
        }
        if (v8 - 4 != v7)
        {
          *(_QWORD *)v7 = *((_QWORD *)v8 - 2);
          v7[2] = *(v8 - 2);
        }
        *((_QWORD *)v8 - 2) = v40;
        *(v8 - 2) = v41;
        if (v64 < v67)
        {
LABEL_78:
          result = (float *)std::__introsort<std::_ClassicAlgPolicy,geo::Triangulator<float,unsigned short>::ListHeadSorter &,std::pair<geo::Triangulator<float,unsigned short>::Node *,float> *,false>(v7, v8 - 4, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v76 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::Triangulator<float,unsigned short>::ListHeadSorter &,std::pair<geo::Triangulator<float,unsigned short>::Node *,float> *>(v7, v8 - 4);
        result = (float *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::Triangulator<float,unsigned short>::ListHeadSorter &,std::pair<geo::Triangulator<float,unsigned short>::Node *,float> *>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v76)
            continue;
          goto LABEL_78;
        }
        a2 = v8 - 4;
        if (!v76)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t gdc::Registry::storage<md::components::Building>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xAE13B930655B4EC8;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xAE13B930655B4EC8;
      if (*(_QWORD *)&v3 <= 0xAE13B930655B4EC8)
        v5 = 0xAE13B930655B4EC8 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xAE13B930655B4EC8;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xAE13B930655B4EC8)
            {
              if (v7[2] == 0xAE13B930655B4EC8)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xAE13B930655B4EC8)
          {
            if (v7[2] == 0xAE13B930655B4EC8)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::Building]";
  *(_QWORD *)(v11 + 24) = 24;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3498;
  *(_QWORD *)(v11 + 8) = 0xAE13B930655B4EC8;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xAE13B930655B4EC8, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xAE13B930655B4EC8;
  v15[1] = "md::components::Building]";
  v15[2] = 24;
  gdc::Registry::_registerStorageDataSignals(a1, 0xAE13B930655B4EC8, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F066F4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::components::SupportsDebugHighlight>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x1F1291CF60257E81;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x1F1291CF60257E81;
      if (*(_QWORD *)&v3 <= 0x1F1291CF60257E81uLL)
        v5 = 0x1F1291CF60257E81uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x1F1291CF60257E81;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x1F1291CF60257E81)
            {
              if (v7[2] == 0x1F1291CF60257E81)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x1F1291CF60257E81)
          {
            if (v7[2] == 0x1F1291CF60257E81)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::components::SupportsDebugHighlight]";
  *(_QWORD *)(v11 + 24) = 38;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3318;
  *(_QWORD *)(v11 + 8) = 0x1F1291CF60257E81;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x1F1291CF60257E81uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x1F1291CF60257E81;
  v15[1] = "md::components::SupportsDebugHighlight]";
  v15[2] = 38;
  gdc::Registry::_registerStorageDataSignals(a1, 0x1F1291CF60257E81, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19F067174(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::LayerDataSource::createLayerDataRequests(gdc::LayerDataSource *this, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t i;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD *v21;
  char *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t **v28;
  char **v30;
  char *v31;
  std::__shared_weak_count *v32;
  BOOL v33;
  _QWORD v34[2];

  v7 = *((_QWORD *)this + 25);
  v30 = (char **)((char *)this + 200);
  for (i = *((_QWORD *)this + 26); i != v7; i -= 16)
  {
    v9 = *(std::__shared_weak_count **)(i - 8);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  *((_QWORD *)this + 26) = v7;
  v34[0] = 0;
  v34[1] = 0;
  v12 = *(uint64_t **)(a2 + 16);
  if (v12)
  {
    v13 = (_QWORD *)((char *)this + 80);
    v14 = (_QWORD *)((char *)this + 120);
    do
    {
      v33 = 0;
      if (gdc::LayerDataSource::shouldCreateLayerDataRequest(this, (const gdc::LayerDataRequestKey *)(v12 + 2), a3, &v33)&& (v15 = *((_QWORD *)this + 8) + v34[*((unsigned __int8 *)v12 + 16)], v15 < (*(uint64_t (**)(gdc::LayerDataSource *))(*(_QWORD *)this + 136))(this)))
      {
        ++v34[*((unsigned __int8 *)v12 + 16)];
        v16 = *((_QWORD *)this + 36);
        *((_QWORD *)this + 36) = v16 + 1;
        v17 = *((unsigned __int16 *)this + 16);
        v18 = *((_QWORD *)this + 34);
        v19 = operator new(0xF0uLL);
        v19[1] = 0;
        v19[2] = 0;
        *v19 = &off_1E42DE228;
        *((_BYTE *)v19 + 24) = *((_BYTE *)v12 + 16);
        v20 = v33;
        gdc::LayerDataKey::LayerDataKey((uint64_t)(v19 + 4), (uint64_t)(v12 + 3));
        *((_BYTE *)v19 + 120) = 0;
        if (*((_BYTE *)v12 + 112))
        {
          *((_DWORD *)v19 + 31) = *((_DWORD *)v12 + 29);
          *((_BYTE *)v19 + 120) = 1;
        }
        v19[16] = v12[15];
        v19[17] = ((v16 << 6) + (v16 >> 2) + v17 - 0x61C8864680B583EBLL) ^ v16;
        *((_OWORD *)v19 + 9) = 0u;
        *((_OWORD *)v19 + 10) = 0u;
        *((_OWORD *)v19 + 11) = 0u;
        *((_OWORD *)v19 + 12) = 0u;
        v19[26] = 0;
        v19[27] = v18;
        v19[28] = a3;
        *((_WORD *)v19 + 116) = 0;
        *((_BYTE *)v19 + 234) = v20;
        v31 = (char *)(v19 + 3);
        v32 = (std::__shared_weak_count *)v19;
        v21 = (_QWORD *)*((_QWORD *)this + 26);
        if ((unint64_t)v21 < *((_QWORD *)this + 27))
        {
          *v21 = v19 + 3;
          v21[1] = v19;
          *((_QWORD *)this + 26) = v21 + 2;
          v14 = (_QWORD *)((char *)this + 120);
          v13 = (_QWORD *)((char *)this + 80);
        }
        else
        {
          v22 = std::vector<std::shared_ptr<gdc::LayerDataRequest>>::__push_back_slow_path<std::shared_ptr<gdc::LayerDataRequest>>(v30, (uint64_t)&v31);
          v23 = v32;
          *((_QWORD *)this + 26) = v22;
          v14 = (_QWORD *)((char *)this + 120);
          v13 = (_QWORD *)((char *)this + 80);
          if (v23)
          {
            v24 = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
        }
      }
      else
      {
        v26 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)this + 5, (unsigned __int8 *)v12 + 16);
        if (v26)
          v26[16][25] = a3;
        v27 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v13, (unsigned __int8 *)v12 + 16);
        if (v27)
          v27[16][25] = a3;
        v28 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v14, (unsigned __int8 *)v12 + 16);
        if (v28)
          v28[16][25] = a3;
      }
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  gdc::LayerDataSource::createLayerDataRequests(this, v30, a3, a4);
}

void gdc::LayerDataSource::addData(gdc::LayerDataSource *this, unsigned __int16 **a2)
{
  unsigned __int16 **v3;
  unsigned __int16 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;

  v3 = a2 + 3;
  v4 = *((_WORD *)this + 16);
  v5 = *(_QWORD *)geo::linear_map<unsigned short,std::vector<gdc::LayerDataHolder>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>,std::vector<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>>::operator[](a2 + 3, v4);
  v6 = *((_QWORD *)geo::linear_map<unsigned short,std::vector<gdc::LayerDataHolder>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>,std::vector<std::pair<unsigned short,std::vector<gdc::LayerDataHolder>>>>::operator[](v3, v4)+ 1);
  while (v5 != v6)
  {
    gdc::LayerDataStore::get((gdc::LayerDataStore *)&v15, *((const gdc::LayerDataRequestKey **)this + 2), (unsigned __int8 *)v5);
    v8 = v15;
    v15 = 0uLL;
    v9 = *(std::__shared_weak_count **)(v5 + 120);
    *(_OWORD *)(v5 + 112) = v8;
    if (!v9)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
      if (*((_QWORD *)&v15 + 1))
      {
LABEL_11:
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    else
    {
LABEL_10:
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
      if (*((_QWORD *)&v15 + 1))
        goto LABEL_11;
    }
    if (*(_QWORD *)(v5 + 112))
    {
      v7 = 3;
    }
    else if (std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)this + 10, (unsigned __int8 *)v5)|| std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)this + 15, (unsigned __int8 *)v5))
    {
      v7 = 2;
    }
    else
    {
      v7 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)this + 5, (unsigned __int8 *)v5) != 0;
    }
    *(_DWORD *)(v5 + 128) = v7;
    v5 += 144;
  }
}

void gdc::LayerDataSource::createLayerDataRequests(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t i;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  unsigned __int8 v15;
  unsigned __int16 v16;
  _BYTE *v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  _QWORD *v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t **v28;
  char *v29;
  char *v30;
  unint64_t v31;
  _BYTE *v32;
  size_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  char *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 *v43;
  _OWORD *v44;
  unint64_t v45;
  __int128 v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  _BYTE *v54;
  __int128 *v55;
  _OWORD *v56;
  unint64_t v57;
  __int128 v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  _QWORD *v62;
  uint64_t v63;
  char v64;
  char **v66;
  uint64_t v67;
  char *v68;
  std::__shared_weak_count *v69;
  BOOL v70;
  unsigned __int8 v71[8];
  unsigned __int16 v72;
  void *v73;
  _BYTE *v74;
  _BYTE *v75;
  uint64_t v76;
  _BYTE v77[32];
  __int128 v78;
  char v79;
  int v80;
  uint64_t v81;
  _QWORD v82[2];
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  char v87;
  int v88;
  uint64_t v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 200);
  v66 = (char **)(a1 + 200);
  for (i = *(_QWORD *)(a1 + 208); i != v9; i -= 16)
  {
    v11 = *(std::__shared_weak_count **)(i - 8);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  *(_QWORD *)(a1 + 208) = v9;
  v82[0] = 0;
  v82[1] = 0;
  v83 = 0u;
  v84 = 0u;
  gdc::LayerDataRequestKey::LayerDataRequestKey(v71, 0, 0xFFFF, (int *)&v83, 8);
  if (a2 != a3)
  {
    v14 = (_QWORD *)(a1 + 40);
    v67 = a3;
    while (1)
    {
      LOBYTE(v83) = *(_BYTE *)a2;
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v83 + 8, a2 + 8);
      v87 = 0;
      if (*(_BYTE *)(a2 + 96))
      {
        v88 = *(_DWORD *)(a2 + 100);
        v87 = 1;
      }
      v89 = *(_QWORD *)(a2 + 104);
      v15 = v83;
      if (v83 != v71[0]
        || (v16 = WORD4(v83), WORD4(v83) != v72)
        || (_QWORD)v86 != (_QWORD)v78
        || (v17 = v73, *((_QWORD *)&v84 + 1) - (_QWORD)v84 != v74 - (_BYTE *)v73)
        || memcmp((const void *)v84, v73, *((_QWORD *)&v84 + 1) - v84))
      {
        v70 = 0;
        if (gdc::LayerDataSource::shouldCreateLayerDataRequest((gdc::LayerDataSource *)a1, (const gdc::LayerDataRequestKey *)&v83, a4, &v70)&& (v18 = *(_QWORD *)(a1 + 64) + v82[v83], v18 < (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1)))
        {
          v19 = v83;
          ++v82[v83];
          v20 = *(_QWORD *)(a1 + 288);
          *(_QWORD *)(a1 + 288) = v20 + 1;
          v21 = *(unsigned __int16 *)(a1 + 32);
          v22 = *(_QWORD *)(a1 + 272);
          v23 = operator new(0xF0uLL);
          v23[1] = 0;
          v23[2] = 0;
          *v23 = &off_1E42DE228;
          *((_BYTE *)v23 + 24) = v19;
          v24 = v70;
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v23 + 4), (uint64_t)&v83 + 8);
          *((_BYTE *)v23 + 120) = 0;
          if (v87)
          {
            *((_DWORD *)v23 + 31) = v88;
            *((_BYTE *)v23 + 120) = 1;
          }
          v23[16] = v89;
          v23[17] = ((v20 << 6) + (v20 >> 2) + v21 - 0x61C8864680B583EBLL) ^ v20;
          *((_OWORD *)v23 + 9) = 0u;
          *((_OWORD *)v23 + 10) = 0u;
          *((_OWORD *)v23 + 11) = 0u;
          *((_OWORD *)v23 + 12) = 0u;
          v23[26] = 0;
          v23[27] = v22;
          v23[28] = a4;
          *((_WORD *)v23 + 116) = 0;
          *((_BYTE *)v23 + 234) = v24;
          v68 = (char *)(v23 + 3);
          v69 = (std::__shared_weak_count *)v23;
          v25 = *(_QWORD **)(a1 + 208);
          if ((unint64_t)v25 >= *(_QWORD *)(a1 + 216))
          {
            v39 = std::vector<std::shared_ptr<gdc::LayerDataRequest>>::__push_back_slow_path<std::shared_ptr<gdc::LayerDataRequest>>(v66, (uint64_t)&v68);
            v40 = v69;
            *(_QWORD *)(a1 + 208) = v39;
            v14 = (_QWORD *)(a1 + 40);
            a3 = v67;
            if (v40)
            {
              v41 = (unint64_t *)&v40->__shared_owners_;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }
          }
          else
          {
            *v25 = v23 + 3;
            v25[1] = v23;
            *(_QWORD *)(a1 + 208) = v25 + 2;
            v14 = (_QWORD *)(a1 + 40);
            a3 = v67;
          }
        }
        else
        {
          v26 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(v14, (unsigned __int8 *)&v83);
          if (v26)
            v26[16][25] = a4;
          v27 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)(a1 + 80), (unsigned __int8 *)&v83);
          if (v27)
            v27[16][25] = a4;
          v28 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)(a1 + 120), (unsigned __int8 *)&v83);
          if (v28)
            v28[16][25] = a4;
        }
        v15 = v83;
        v16 = WORD4(v83);
        v17 = v73;
      }
      v71[0] = v15;
      v72 = v16;
      if (v17 != v75)
        free(v17);
      v73 = v77;
      v74 = v77;
      v75 = v77;
      v76 = 32;
      v30 = (char *)*((_QWORD *)&v84 + 1);
      v29 = (char *)v84;
      v31 = *((_QWORD *)&v84 + 1) - v84;
      v32 = v77;
      if (*((_QWORD *)&v84 + 1) - (_QWORD)v84 >= 0x21uLL)
        break;
LABEL_60:
      if (v29 != v30)
      {
        if (v31 < 8)
        {
          v54 = v32;
        }
        else if ((unint64_t)(v32 - v29) < 0x20)
        {
          v54 = v32;
        }
        else
        {
          if (v31 < 0x20)
          {
            v53 = 0;
LABEL_71:
            v59 = v31 & 0xFFFFFFFFFFFFFFF8;
            v54 = &v32[v31 & 0xFFFFFFFFFFFFFFF8];
            v60 = v53 - (v31 & 0xFFFFFFFFFFFFFFF8);
            v61 = (uint64_t *)&v29[v53];
            v62 = &v32[v53];
            do
            {
              v63 = *v61++;
              *v62++ = v63;
              v60 += 8;
            }
            while (v60);
            if (v31 != v59)
            {
              v29 += v59;
              goto LABEL_76;
            }
LABEL_77:
            v32 = v74;
            goto LABEL_78;
          }
          v53 = v31 & 0xFFFFFFFFFFFFFFE0;
          v55 = (__int128 *)(v29 + 16);
          v56 = v32 + 16;
          v57 = v31 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v58 = *v55;
            *(v56 - 1) = *(v55 - 1);
            *v56 = v58;
            v55 += 2;
            v56 += 2;
            v57 -= 32;
          }
          while (v57);
          if (v31 == v53)
            goto LABEL_77;
          if ((v31 & 0x18) != 0)
            goto LABEL_71;
          v29 += v53;
          v54 = &v32[v53];
        }
        do
        {
LABEL_76:
          v64 = *v29++;
          *v54++ = v64;
        }
        while (v29 != v30);
        goto LABEL_77;
      }
LABEL_78:
      v74 = &v32[v31];
      v78 = v86;
      if (v87)
      {
        v80 = v88;
        if (!v79)
          v79 = 1;
        v81 = v89;
        v87 = 0;
      }
      else
      {
        if (v79)
          v79 = 0;
        v81 = v89;
      }
      if ((_QWORD)v84 != v85)
        free((void *)v84);
      a2 += 144;
      if (a2 == a3)
        goto LABEL_87;
    }
    if (v31 <= 0x40)
      v33 = 64;
    else
      v33 = *((_QWORD *)&v84 + 1) - v84;
    v32 = malloc_type_malloc(v33, 0x100004077774924uLL);
    v34 = (char *)v73;
    v35 = v74;
    if (v73 == v74)
    {
LABEL_59:
      v73 = v32;
      v74 = v32;
      v76 = v33;
      goto LABEL_60;
    }
    v36 = v74 - (_BYTE *)v73;
    if ((unint64_t)(v74 - (_BYTE *)v73) < 8)
    {
      v37 = v32;
    }
    else
    {
      v37 = v32;
      if ((unint64_t)(v32 - (_BYTE *)v73) >= 0x20)
      {
        if (v36 < 0x20)
        {
          v38 = 0;
LABEL_53:
          v47 = v36 & 0xFFFFFFFFFFFFFFF8;
          v37 = &v32[v36 & 0xFFFFFFFFFFFFFFF8];
          v48 = v38 - (v36 & 0xFFFFFFFFFFFFFFF8);
          v49 = (uint64_t *)&v34[v38];
          v50 = &v32[v38];
          do
          {
            v51 = *v49++;
            *v50++ = v51;
            v48 += 8;
          }
          while (v48);
          if (v36 == v47)
            goto LABEL_59;
          v34 += v47;
          goto LABEL_58;
        }
        v38 = v36 & 0xFFFFFFFFFFFFFFE0;
        v43 = (__int128 *)((char *)v73 + 16);
        v44 = v32 + 16;
        v45 = v36 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v46 = *v43;
          *(v44 - 1) = *(v43 - 1);
          *v44 = v46;
          v43 += 2;
          v44 += 2;
          v45 -= 32;
        }
        while (v45);
        if (v36 == v38)
          goto LABEL_59;
        if ((v36 & 0x18) != 0)
          goto LABEL_53;
        v34 += v38;
        v37 = &v32[v38];
      }
    }
    do
    {
LABEL_58:
      v52 = *v34++;
      *v37++ = v52;
    }
    while (v34 != v35);
    goto LABEL_59;
  }
LABEL_87:
  gdc::LayerDataSource::createLayerDataRequests((_QWORD *)a1, v66, a4, a5);
  if (v79)
    v79 = 0;
  if (v73 != v75)
    free(v73);
}

BOOL gdc::LayerDataSource::shouldCreateLayerDataRequest(gdc::LayerDataSource *this, const gdc::LayerDataRequestKey *a2, uint64_t a3, BOOL *a4)
{
  _BOOL8 v8;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  if (std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)this + 5, (unsigned __int8 *)a2)|| std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)this + 10, (unsigned __int8 *)a2)|| std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((_QWORD *)this + 15, (unsigned __int8 *)a2))
  {
    return 0;
  }
  gdc::LayerDataStore::get((gdc::LayerDataStore *)&v17, *((const gdc::LayerDataRequestKey **)this + 2), (unsigned __int8 *)a2);
  v10 = v17;
  if (!v17
    || ((v11 = *(_QWORD *)(v17 + 152), v11 > 0) ? (v12 = v11 < a3) : (v12 = 0),
        !v12 ? (v13 = 0) : (v13 = 1),
        *a4 = v13,
        v12))
  {
    v8 = 1;
    v14 = v18;
    if (!v18)
      return v8;
  }
  else
  {
    v8 = *(unsigned __int8 *)(v10 + 160) == 0;
    v14 = v18;
    if (!v18)
      return v8;
  }
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  return v8;
}

uint64_t **std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(_QWORD *a1, unsigned __int8 *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **v7;
  int v8;
  int v9;
  uint64_t *v10;
  const void *v11;
  size_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *((_QWORD *)a2 + 13);
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *((_QWORD *)a2 + 13);
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  v7 = *v6;
  if (*v6)
  {
    v8 = *a2;
    v9 = *((unsigned __int16 *)a2 + 4);
    v10 = (uint64_t *)*((_QWORD *)a2 + 10);
    v11 = (const void *)*((_QWORD *)a2 + 2);
    v12 = *((_QWORD *)a2 + 3) - (_QWORD)v11;
    if (v4.u32[0] < 2uLL)
    {
      v13 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v16 = v7[1];
        if ((uint64_t *)v3 == v16)
        {
          if (*((unsigned __int8 *)v7 + 16) == v8 && *((unsigned __int16 *)v7 + 12) == v9 && v7[12] == v10)
          {
            v17 = v7[4];
            if ((char *)v7[5] - (char *)v17 == v12 && !memcmp(v17, v11, v12))
              return v7;
          }
        }
        else if (((unint64_t)v16 & v13) != v5)
        {
          return 0;
        }
        v7 = (uint64_t **)*v7;
        if (!v7)
          return v7;
      }
    }
    do
    {
      v14 = (unint64_t)v7[1];
      if (v3 == v14)
      {
        if (*((unsigned __int8 *)v7 + 16) == v8 && *((unsigned __int16 *)v7 + 12) == v9 && v7[12] == v10)
        {
          v15 = v7[4];
          if ((char *)v7[5] - (char *)v15 == v12 && !memcmp(v15, v11, v12))
            return v7;
        }
      }
      else
      {
        if (v14 >= *(_QWORD *)&v2)
          v14 %= *(_QWORD *)&v2;
        if (v14 != v5)
          return 0;
      }
      v7 = (uint64_t **)*v7;
    }
    while (v7);
  }
  return v7;
}

{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **v7;
  int v8;
  int v9;
  uint64_t *v10;
  const void *v11;
  size_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *((_QWORD *)a2 + 13);
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *((_QWORD *)a2 + 13);
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  v7 = *v6;
  if (*v6)
  {
    v8 = *a2;
    v9 = *((unsigned __int16 *)a2 + 4);
    v10 = (uint64_t *)*((_QWORD *)a2 + 10);
    v11 = (const void *)*((_QWORD *)a2 + 2);
    v12 = *((_QWORD *)a2 + 3) - (_QWORD)v11;
    if (v4.u32[0] < 2uLL)
    {
      v13 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v16 = v7[1];
        if (v16 == (uint64_t *)v3)
        {
          if (*((unsigned __int8 *)v7 + 16) == v8 && *((unsigned __int16 *)v7 + 12) == v9 && v7[12] == v10)
          {
            v17 = v7[4];
            if ((char *)v7[5] - (char *)v17 == v12 && !memcmp(v17, v11, v12))
              return v7;
          }
        }
        else if (((unint64_t)v16 & v13) != v5)
        {
          return 0;
        }
        v7 = (uint64_t **)*v7;
        if (!v7)
          return v7;
      }
    }
    do
    {
      v14 = (unint64_t)v7[1];
      if (v14 == v3)
      {
        if (*((unsigned __int8 *)v7 + 16) == v8 && *((unsigned __int16 *)v7 + 12) == v9 && v7[12] == v10)
        {
          v15 = v7[4];
          if ((char *)v7[5] - (char *)v15 == v12 && !memcmp(v15, v11, v12))
            return v7;
        }
      }
      else
      {
        if (v14 >= *(_QWORD *)&v2)
          v14 %= *(_QWORD *)&v2;
        if (v14 != v5)
          return 0;
      }
      v7 = (uint64_t **)*v7;
    }
    while (v7);
  }
  return v7;
}

void gdc::LayerDataSource::createLayerDataRequests(_QWORD *a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  char *v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  _BYTE *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  __int128 v29;
  unint64_t v30;
  char v31;
  char *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  NSObject *v37;
  void *p_p;
  unsigned __int16 *v39;
  os_signpost_id_t v40;
  NSObject *v41;
  int *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  const char *v48;
  BOOL v49;
  const char *v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  char *v59;
  int64x2_t *v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  unint64_t v65;
  size_t v66;
  char *v67;
  char *v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  int64x2_t *v78;
  char *v79;
  char *v80;
  char *v81;
  char **v82;
  int64x2_t *v83;
  char *v84;
  char *v85;
  unint64_t v86;
  size_t v87;
  char *v88;
  char *v89;
  unint64_t v90;
  char *v91;
  unint64_t v92;
  __int128 *v93;
  _OWORD *v94;
  unint64_t v95;
  __int128 v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  char *v100;
  uint64_t v101;
  __int128 *v102;
  _OWORD *v103;
  unint64_t v104;
  __int128 v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t *v108;
  char *v109;
  uint64_t v110;
  char v111;
  unint64_t v112;
  char *v113;
  __int128 *v114;
  _OWORD *v115;
  unint64_t v116;
  __int128 v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t *v120;
  char *v121;
  uint64_t v122;
  char v123;
  char v124;
  unint64_t v125;
  char *v126;
  __int128 *v127;
  _OWORD *v128;
  unint64_t v129;
  __int128 v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t *v133;
  char *v134;
  uint64_t v135;
  char v136;
  char *v137;
  char *v138;
  int64x2_t *v139;
  int64x2_t *v140;
  uint64_t v141;
  uint64_t v142;
  int64x2_t *v143;
  int64x2_t *v144;
  uint64_t v145;
  __int8 *v146;
  __int8 *v147;
  __int8 *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  int64x2_t *v152;
  int64x2_t v153;
  unint64_t v154;
  __int8 v155;
  int64x2_t *v156;
  void *v157;
  unsigned __int8 *v158;
  unsigned __int8 *v159;
  unint64_t v160;
  uint64_t v161;
  unsigned __int8 *v162;
  unsigned __int8 *v163;
  uint64_t i;
  unsigned __int8 *v165;
  uint64_t v166;
  const void *v167;
  size_t v168;
  const void *v169;
  unsigned __int8 *v170;
  _QWORD *v171;
  const void *v172;
  size_t v173;
  const void *v174;
  void *v175;
  _BYTE *v176;
  uint64_t v177;
  char *v178;
  char *v179;
  unint64_t v180;
  unint64_t v181;
  __int128 *v182;
  _OWORD *v183;
  unint64_t v184;
  __int128 v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t *v188;
  unsigned __int8 *v189;
  uint64_t v190;
  char v191;
  unsigned __int8 *v192;
  uint64_t v193;
  unsigned __int8 *v194;
  unsigned __int8 *v195;
  uint64_t v196;
  uint64_t v197;
  unsigned __int8 *v198;
  unsigned __int8 *v199;
  unsigned __int8 *v200;
  int v201;
  unsigned __int16 *v202;
  int8x8_t **v203;
  unsigned __int16 *v204;
  unsigned __int16 *v205;
  char *v206;
  char *v207;
  unint64_t v208;
  _QWORD *v209;
  size_t v210;
  char *v211;
  char *v212;
  unint64_t v213;
  _BYTE *v214;
  uint64_t v215;
  __int128 *v216;
  _OWORD *v217;
  unint64_t v218;
  __int128 v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  _QWORD *v223;
  uint64_t v224;
  char v225;
  unint64_t v226;
  _BYTE *v227;
  __int128 *v228;
  _OWORD *v229;
  unint64_t v230;
  __int128 v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t *v234;
  _QWORD *v235;
  uint64_t v236;
  char v237;
  uint64_t v238;
  NSObject *v239;
  std::string *p_buf;
  NSObject *v241;
  std::string *v242;
  uint64_t **v243;
  uint64_t v244;
  uint64_t v245;
  NSObject *v246;
  std::string *v247;
  uint64_t **v248;
  char *v249;
  char *v250;
  NSObject *v251;
  uint64_t v252;
  std::string *v253;
  uint64_t **v254;
  int v255;
  NSObject *v256;
  std::string *v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  void *v261;
  _BYTE *v262;
  uint64_t v263;
  char *v264;
  char *v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unsigned __int8 *v269;
  __int128 v270;
  unint64_t v271;
  char v272;
  void *v273;
  _QWORD *v275;
  unint64_t v276;
  char *v277;
  unsigned __int8 *v278;
  _QWORD *v279;
  uint64_t v281;
  uint64_t v282;
  std::__shared_weak_count *v283;
  void *__p;
  void *v285;
  _BYTE v286[24];
  _QWORD v287[5];
  __int128 v288;
  char v289;
  int v290;
  uint64_t v291;
  unsigned __int16 *v292;
  std::__shared_weak_count *v293;
  uint8_t v294[4];
  std::string *v295;
  __int16 v296;
  uint64_t v297;
  std::string buf;
  uint64_t v299;

  v299 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 80))(a1, *a2, a2[1]);
  v7 = (char *)a1[28];
  v6 = (char *)a1[29];
  if (v6 != v7)
  {
    do
    {
      v8 = (void *)*((_QWORD *)v6 - 11);
      if (v8 != *((void **)v6 - 9))
        free(v8);
      v6 -= 96;
    }
    while (v6 != v7);
    v6 = (char *)a1[28];
  }
  a1[29] = v7;
  v9 = a1[26] - a1[25];
  v10 = v9 >> 4;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[30] - (_QWORD)v6) >> 5) < v9 >> 4)
  {
    if ((unint64_t)v9 >= 0x2AAAAAAAAAAAAAA1)
      goto LABEL_395;
    v11 = 96 * v10;
    v12 = (char *)operator new(96 * v10);
    v13 = &v12[v11];
    v14 = (v7 - v6) / 96;
    v15 = &v12[96 * v14];
    if (v7 != v6)
    {
      v16 = 0;
      v17 = (uint64_t)&v12[96 * v14 - 56];
      v18 = v15;
      v19 = v7;
      while (1)
      {
        v20 = v18;
        v21 = *((_QWORD *)v19 - 12);
        v19 -= 96;
        *((_QWORD *)v18 - 12) = v21;
        v18 -= 96;
        v22 = v18 + 40;
        *((_QWORD *)v18 + 1) = v18 + 40;
        v23 = (char *)*((_QWORD *)v7 - 11);
        *((_QWORD *)v18 + 3) = v18 + 40;
        *((_QWORD *)v18 + 4) = *((_QWORD *)v7 - 8);
        if (v23 == *((char **)v7 - 9))
        {
          v24 = (char *)*((_QWORD *)v7 - 10);
          v25 = v24 - v23;
          *(v20 - 10) = &v22[v24 - v23];
          if (v24 != v23)
          {
            if (v25 >= 8 && (unint64_t)(v17 - 96 * v16 - (_QWORD)v23) >= 0x20)
            {
              if (v25 < 0x20)
              {
                v26 = 0;
                goto LABEL_23;
              }
              v27 = 0;
              v26 = v25 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v28 = &v20[v27 / 8];
                v29 = *(_OWORD *)&v23[v27 + 16];
                *(_OWORD *)(v28 - 7) = *(_OWORD *)&v23[v27];
                *(_OWORD *)(v28 - 5) = v29;
                v27 += 32;
              }
              while (v26 != v27);
              if (v25 == v26)
                goto LABEL_12;
              if ((v25 & 0x18) != 0)
              {
LABEL_23:
                v30 = v25 & 0xFFFFFFFFFFFFFFF8;
                v22 += v25 & 0xFFFFFFFFFFFFFFF8;
                do
                {
                  *(_QWORD *)((char *)v20 + v26 - 56) = *(_QWORD *)&v23[v26];
                  v26 += 8;
                }
                while (v30 != v26);
                if (v25 == v30)
                  goto LABEL_12;
                v23 += v30;
              }
              else
              {
                v23 += v26;
                v22 += v26;
              }
            }
            do
            {
              v31 = *v23++;
              *v22++ = v31;
            }
            while (v23 != v24);
          }
        }
        else
        {
          *(v20 - 11) = v23;
          *(v20 - 10) = *((_QWORD *)v7 - 10);
          *(_OWORD *)(v7 - 88) = 0uLL;
          *(_OWORD *)(v7 - 72) = 0uLL;
        }
LABEL_12:
        *(v20 - 3) = *((_QWORD *)v7 - 3);
        *((_OWORD *)v20 - 1) = *((_OWORD *)v7 - 1);
        ++v16;
        v7 = v19;
        if (v19 == v6)
        {
          v7 = (char *)a1[28];
          v32 = (char *)a1[29];
          a1[28] = v18;
          a1[29] = v15;
          a1[30] = v13;
          while (v32 != v7)
          {
            v33 = (void *)*((_QWORD *)v32 - 11);
            if (v33 != *((void **)v32 - 9))
              free(v33);
            v32 -= 96;
          }
          goto LABEL_36;
        }
      }
    }
    a1[28] = v15;
    a1[29] = v15;
    a1[30] = v13;
LABEL_36:
    if (v7)
      operator delete(v7);
  }
  v279 = a1;
  v34 = *a2;
  v35 = a2[1];
  if (*a2 != v35)
  {
    while (1)
    {
      v36 = *(unsigned __int16 **)v34;
      if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
        dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
      v37 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
      {
        gdc::LayerDataRequestKey::keysInt32Str((std::string *)&__p, *(unsigned __int16 **)v34);
        p_p = &__p;
        if (v286[7] < 0)
          p_p = __p;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
        _os_log_impl(&dword_19F029000, v37, OS_LOG_TYPE_DEBUG, "Requesting layer data for: %s", (uint8_t *)&buf, 0xCu);
        if ((v286[7] & 0x80000000) != 0)
          operator delete(__p);
        if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
          dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
      }
      v39 = *(unsigned __int16 **)v34;
      v40 = *(_QWORD *)(*(_QWORD *)v34 + 112);
      if (v40 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v41 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
        if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
        {
          v42 = (int *)*((_QWORD *)v36 + 2);
          v43 = *v42;
          v44 = v42[1];
          v45 = v42[2];
          v46 = v36[4];
          v47 = *(unsigned __int8 *)v36;
          v48 = "<Invalid>";
          if (v47 == 1)
            v48 = "Preliminary";
          v49 = v47 == 0;
          v50 = "Standard";
          if (!v49)
            v50 = v48;
          LODWORD(__p) = 67110146;
          HIDWORD(__p) = v43;
          LOWORD(v285) = 1024;
          *(_DWORD *)((char *)&v285 + 2) = v44;
          HIWORD(v285) = 1024;
          *(_DWORD *)v286 = v45;
          *(_WORD *)&v286[4] = 1024;
          *(_DWORD *)&v286[6] = v46;
          *(_WORD *)&v286[10] = 2080;
          *(_QWORD *)&v286[12] = v50;
          _os_signpost_emit_with_name_impl(&dword_19F029000, v41, OS_SIGNPOST_INTERVAL_BEGIN, v40, "LayerDataRequest", "tileKey=%d.%d.%d type=%d requestType=%s", (uint8_t *)&__p, 0x24u);
          v39 = *(unsigned __int16 **)v34;
        }
      }
      LOBYTE(__p) = *(_BYTE *)v39;
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v285, (uint64_t)(v39 + 4));
      v289 = 0;
      if (*((_BYTE *)v39 + 96))
      {
        v290 = *((_DWORD *)v39 + 25);
        v289 = 1;
      }
      v291 = *((_QWORD *)v39 + 13);
      v292 = *(unsigned __int16 **)v34;
      v51 = *(std::__shared_weak_count **)(v34 + 8);
      v293 = v51;
      if (v51)
      {
        p_shared_owners = (unint64_t *)&v51->__shared_owners_;
        do
          v53 = __ldxr(p_shared_owners);
        while (__stxr(v53 + 1, p_shared_owners));
      }
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,std::pair<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>((uint64_t)(v279 + 5), (unsigned __int8 *)&__p, (uint64_t)&__p);
      v54 = v293;
      if (v293)
      {
        v55 = (unint64_t *)&v293->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
          break;
      }
      if (v289)
        goto LABEL_67;
LABEL_68:
      if (*(_QWORD *)v286 != *(_QWORD *)&v286[16])
        free(*(void **)v286);
      v34 += 16;
      if (v34 == v35)
        goto LABEL_72;
    }
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
    if (!v289)
      goto LABEL_68;
LABEL_67:
    v289 = 0;
    goto LABEL_68;
  }
LABEL_72:
  v57 = v279;
  v58 = *(uint64_t **)(v279[34] + 24);
  if (!v58)
    goto LABEL_197;
  while (2)
  {
    if (*((_DWORD *)v58 + 28))
      goto LABEL_77;
    v62 = v57[29];
    v61 = v57[30];
    if (v62 < v61)
    {
      v59 = (char *)(v62 + 40);
      *(_QWORD *)v62 = v58[2];
      *(_QWORD *)(v62 + 8) = v62 + 40;
      *(_QWORD *)(v62 + 16) = v62 + 40;
      *(_QWORD *)(v62 + 24) = v62 + 40;
      *(_QWORD *)(v62 + 32) = 32;
      v63 = (char *)v58[3];
      v64 = (char *)v58[4];
      v65 = v64 - v63;
      if ((unint64_t)(v64 - v63) < 0x21)
        goto LABEL_129;
      if (v65 <= 0x40)
        v66 = 64;
      else
        v66 = v64 - v63;
      v59 = (char *)malloc_type_malloc(v66, 0x100004077774924uLL);
      v67 = *(char **)(v62 + 8);
      v68 = *(char **)(v62 + 16);
      if (v67 == v68)
      {
LABEL_128:
        *(_QWORD *)(v62 + 8) = v59;
        *(_QWORD *)(v62 + 16) = v59;
        *(_QWORD *)(v62 + 32) = v66;
LABEL_129:
        if (v63 == v64)
          goto LABEL_75;
        if (v65 < 8)
        {
          v113 = v59;
          goto LABEL_145;
        }
        if ((unint64_t)(v59 - v63) < 0x20)
        {
          v113 = v59;
          goto LABEL_145;
        }
        if (v65 >= 0x20)
        {
          v112 = v65 & 0xFFFFFFFFFFFFFFE0;
          v114 = (__int128 *)(v63 + 16);
          v115 = v59 + 16;
          v116 = v65 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v117 = *v114;
            *(v115 - 1) = *(v114 - 1);
            *v115 = v117;
            v114 += 2;
            v115 += 2;
            v116 -= 32;
          }
          while (v116);
          if (v65 == v112)
            goto LABEL_74;
          if ((v65 & 0x18) == 0)
          {
            v63 += v112;
            v113 = &v59[v112];
            goto LABEL_145;
          }
        }
        else
        {
          v112 = 0;
        }
        v118 = v65 & 0xFFFFFFFFFFFFFFF8;
        v113 = &v59[v65 & 0xFFFFFFFFFFFFFFF8];
        v119 = v112 - (v65 & 0xFFFFFFFFFFFFFFF8);
        v120 = (uint64_t *)&v63[v112];
        v121 = &v59[v112];
        do
        {
          v122 = *v120++;
          *(_QWORD *)v121 = v122;
          v121 += 8;
          v119 += 8;
        }
        while (v119);
        if (v65 == v118)
          goto LABEL_74;
        v63 += v118;
        do
        {
LABEL_145:
          v123 = *v63++;
          *v113++ = v123;
        }
        while (v63 != v64);
LABEL_74:
        v59 = *(char **)(v62 + 16);
LABEL_75:
        *(_QWORD *)(v62 + 16) = &v59[v65];
        *(_QWORD *)(v62 + 72) = v58[11];
        *(_OWORD *)(v62 + 80) = *((_OWORD *)v58 + 6);
        v60 = (int64x2_t *)(v62 + 96);
        v57 = v279;
        v279[29] = v62 + 96;
        goto LABEL_76;
      }
      v69 = v68 - v67;
      if ((unint64_t)(v68 - v67) < 8)
      {
        v70 = v59;
      }
      else
      {
        v70 = v59;
        if ((unint64_t)(v59 - v67) >= 0x20)
        {
          if (v69 < 0x20)
          {
            v71 = 0;
LABEL_113:
            v97 = v69 & 0xFFFFFFFFFFFFFFF8;
            v70 = &v59[v69 & 0xFFFFFFFFFFFFFFF8];
            v98 = v71 - (v69 & 0xFFFFFFFFFFFFFFF8);
            v99 = (uint64_t *)&v67[v71];
            v100 = &v59[v71];
            do
            {
              v101 = *v99++;
              *(_QWORD *)v100 = v101;
              v100 += 8;
              v98 += 8;
            }
            while (v98);
            if (v69 == v97)
              goto LABEL_128;
            v67 += v97;
            goto LABEL_127;
          }
          v71 = v69 & 0xFFFFFFFFFFFFFFE0;
          v93 = (__int128 *)(v67 + 16);
          v94 = v59 + 16;
          v95 = v69 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v96 = *v93;
            *(v94 - 1) = *(v93 - 1);
            *v94 = v96;
            v93 += 2;
            v94 += 2;
            v95 -= 32;
          }
          while (v95);
          if (v69 == v71)
            goto LABEL_128;
          if ((v69 & 0x18) != 0)
            goto LABEL_113;
          v67 += v71;
          v70 = &v59[v71];
        }
      }
      do
      {
LABEL_127:
        v111 = *v67++;
        *v70++ = v111;
      }
      while (v67 != v68);
      goto LABEL_128;
    }
    v72 = v57[28];
    v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62 - v72) >> 5);
    v74 = v73 + 1;
    if (v73 + 1 > 0x2AAAAAAAAAAAAAALL)
LABEL_395:
      abort();
    v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - v72) >> 5);
    if (2 * v75 > v74)
      v74 = 2 * v75;
    if (v75 >= 0x155555555555555)
      v76 = 0x2AAAAAAAAAAAAAALL;
    else
      v76 = v74;
    v281 = v62 - v72;
    if (v76)
    {
      if (v76 > 0x2AAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v77 = (char *)operator new(96 * v76);
    }
    else
    {
      v77 = 0;
    }
    v79 = &v77[96 * v73];
    *(_QWORD *)v79 = v58[2];
    v80 = v79 + 40;
    v81 = &v77[96 * v73];
    *((_QWORD *)v81 + 1) = v80;
    v82 = (char **)(v81 + 8);
    v78 = (int64x2_t *)&v77[96 * v73];
    v78[1] = vdupq_n_s64((unint64_t)v80);
    v83 = v78 + 1;
    v78[2].i64[0] = 32;
    v84 = (char *)v58[3];
    v85 = (char *)v58[4];
    v86 = v85 - v84;
    if ((unint64_t)(v85 - v84) >= 0x21)
    {
      v276 = v76;
      v277 = v77;
      if (v86 <= 0x40)
        v87 = 64;
      else
        v87 = v85 - v84;
      v80 = (char *)malloc_type_malloc(v87, 0x100004077774924uLL);
      v88 = *v82;
      v89 = (char *)v83->i64[0];
      if (*v82 == (char *)v83->i64[0])
        goto LABEL_149;
      v90 = v89 - v88;
      if ((unint64_t)(v89 - v88) < 8)
      {
        v91 = v80;
        goto LABEL_148;
      }
      v91 = v80;
      if ((unint64_t)(v80 - v88) < 0x20)
        goto LABEL_148;
      if (v90 >= 0x20)
      {
        v92 = v90 & 0xFFFFFFFFFFFFFFE0;
        v102 = (__int128 *)(v88 + 16);
        v103 = v80 + 16;
        v104 = v90 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v105 = *v102;
          *(v103 - 1) = *(v102 - 1);
          *v103 = v105;
          v102 += 2;
          v103 += 2;
          v104 -= 32;
        }
        while (v104);
        if (v90 == v92)
          goto LABEL_149;
        if ((v90 & 0x18) == 0)
        {
          v88 += v92;
          v91 = &v80[v92];
          goto LABEL_148;
        }
      }
      else
      {
        v92 = 0;
      }
      v106 = v90 & 0xFFFFFFFFFFFFFFF8;
      v91 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
      v107 = v92 - (v90 & 0xFFFFFFFFFFFFFFF8);
      v108 = (uint64_t *)&v88[v92];
      v109 = &v80[v92];
      do
      {
        v110 = *v108++;
        *(_QWORD *)v109 = v110;
        v109 += 8;
        v107 += 8;
      }
      while (v107);
      if (v90 == v106)
        goto LABEL_149;
      v88 += v106;
      do
      {
LABEL_148:
        v124 = *v88++;
        *v91++ = v124;
      }
      while (v88 != v89);
LABEL_149:
      *v82 = v80;
      v83->i64[0] = (uint64_t)v80;
      v78[2].i64[0] = v87;
      v76 = v276;
      v77 = v277;
    }
    if (v84 != v85)
    {
      if (v86 < 8)
      {
        v126 = v80;
        goto LABEL_166;
      }
      if ((unint64_t)(v80 - v84) < 0x20)
      {
        v126 = v80;
        goto LABEL_166;
      }
      if (v86 >= 0x20)
      {
        v125 = v86 & 0xFFFFFFFFFFFFFFE0;
        v127 = (__int128 *)(v84 + 16);
        v128 = v80 + 16;
        v129 = v86 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v130 = *v127;
          *(v128 - 1) = *(v127 - 1);
          *v128 = v130;
          v127 += 2;
          v128 += 2;
          v129 -= 32;
        }
        while (v129);
        if (v86 == v125)
          goto LABEL_167;
        if ((v86 & 0x18) == 0)
        {
          v84 += v125;
          v126 = &v80[v125];
          goto LABEL_166;
        }
      }
      else
      {
        v125 = 0;
      }
      v131 = v86 & 0xFFFFFFFFFFFFFFF8;
      v126 = &v80[v86 & 0xFFFFFFFFFFFFFFF8];
      v132 = v125 - (v86 & 0xFFFFFFFFFFFFFFF8);
      v133 = (uint64_t *)&v84[v125];
      v134 = &v80[v125];
      do
      {
        v135 = *v133++;
        *(_QWORD *)v134 = v135;
        v134 += 8;
        v132 += 8;
      }
      while (v132);
      if (v86 == v131)
        goto LABEL_167;
      v84 += v131;
      do
      {
LABEL_166:
        v136 = *v84++;
        *v126++ = v136;
      }
      while (v84 != v85);
LABEL_167:
      v80 = (char *)v83->i64[0];
    }
    v137 = &v77[96 * v76];
    v83->i64[0] = (uint64_t)&v80[v86];
    v138 = &v77[96 * v73];
    *((_QWORD *)v138 + 9) = v58[11];
    *((_OWORD *)v138 + 5) = *((_OWORD *)v58 + 6);
    v60 = v78 + 6;
    v57 = v279;
    v139 = (int64x2_t *)v279[28];
    v140 = (int64x2_t *)v279[29];
    if (v140 == v139)
    {
      v279[28] = v78;
      v279[29] = v60;
      v279[30] = v137;
      goto LABEL_195;
    }
    v141 = 0;
    v142 = (uint64_t)&v77[v281 - 56];
    v143 = (int64x2_t *)v279[29];
    do
    {
      v144 = v78;
      v145 = v143[-6].i64[0];
      v143 -= 6;
      v78[-6].i64[0] = v145;
      v78 -= 6;
      v146 = &v78[2].i8[8];
      v78->i64[1] = (uint64_t)&v78[2].i64[1];
      v147 = (__int8 *)v140[-6].i64[1];
      v78[1].i64[0] = (uint64_t)&v78[2].i64[1];
      v78[1].i64[1] = (uint64_t)&v78[2].i64[1];
      v78[2].i64[0] = v140[-4].i64[0];
      if (v147 != (__int8 *)v140[-5].i64[1])
      {
        v144[-6].i64[1] = (uint64_t)v147;
        v144[-5].i64[0] = v140[-5].i64[0];
        *(int64x2_t *)((char *)&v140[-6] + 8) = 0u;
        *(int64x2_t *)((char *)&v140[-5] + 8) = 0u;
        goto LABEL_171;
      }
      v144[-5].i64[0] = (uint64_t)&v146[v140[-5].i64[0] - (_QWORD)v147];
      v148 = (__int8 *)v140[-5].i64[0];
      if (v147 != v148)
      {
        v149 = v148 - v147;
        if ((unint64_t)(v148 - v147) < 8 || (unint64_t)(v142 - 96 * v141 - (_QWORD)v147) < 0x20)
          goto LABEL_187;
        if (v149 >= 0x20)
        {
          v151 = 0;
          v150 = v149 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v152 = &v144[v151 / 0x10];
            v153 = *(int64x2_t *)&v147[v151 + 16];
            *(int64x2_t *)((char *)v152 - 56) = *(int64x2_t *)&v147[v151];
            *(int64x2_t *)((char *)v152 - 40) = v153;
            v151 += 32;
          }
          while (v150 != v151);
          if (v149 == v150)
            goto LABEL_171;
          if ((v149 & 0x18) == 0)
          {
            v147 += v150;
            v146 += v150;
            do
            {
LABEL_187:
              v155 = *v147++;
              *v146++ = v155;
            }
            while (v147 != v148);
            goto LABEL_171;
          }
        }
        else
        {
          v150 = 0;
        }
        v154 = v149 & 0xFFFFFFFFFFFFFFF8;
        v146 += v149 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          *(_QWORD *)((char *)&v144[-3] + v150 - 8) = *(_QWORD *)&v147[v150];
          v150 += 8;
        }
        while (v154 != v150);
        if (v149 != v154)
        {
          v147 += v154;
          goto LABEL_187;
        }
      }
LABEL_171:
      v144[-2].i64[1] = v140[-2].i64[1];
      v144[-1] = v140[-1];
      ++v141;
      v140 = v143;
    }
    while (v143 != v139);
    v140 = (int64x2_t *)v279[28];
    v156 = (int64x2_t *)v279[29];
    v279[28] = v78;
    v279[29] = v60;
    for (v279[30] = v137; v156 != v140; v156 -= 6)
    {
      v157 = (void *)v156[-6].i64[1];
      if (v157 != (void *)v156[-5].i64[1])
        free(v157);
    }
LABEL_195:
    if (v140)
      operator delete(v140);
LABEL_76:
    v57[29] = v60;
LABEL_77:
    v58 = (uint64_t *)*v58;
    if (v58)
      continue;
    break;
  }
LABEL_197:
  v158 = (unsigned __int8 *)v57[28];
  v159 = (unsigned __int8 *)v57[29];
  v160 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v159 - v158) >> 5));
  if (v159 == v158)
    v161 = 0;
  else
    v161 = v160;
  std::__introsort<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *,false>(v158, v159, v161, 1);
  v163 = (unsigned __int8 *)v57[28];
  v162 = (unsigned __int8 *)v57[29];
  if (v163 == v162)
    return;
  for (i = 0; ; i += 96)
  {
    v165 = &v163[i];
    v166 = (uint64_t)&v163[i + 96];
    if ((unsigned __int8 *)v166 == v162)
      goto LABEL_242;
    if (*v165 == v165[96]
      && *(unsigned __int16 *)&v163[i + 2] == *(unsigned __int16 *)&v163[i + 98]
      && *(_QWORD *)&v163[i + 72] == *(_QWORD *)&v163[i + 168])
    {
      v167 = *(const void **)&v163[i + 8];
      v168 = *(_QWORD *)&v163[i + 16] - (_QWORD)v167;
      v169 = *(const void **)&v163[i + 104];
      if (v168 == *(_QWORD *)&v163[i + 112] - (_QWORD)v169 && !memcmp(v167, v169, v168))
        break;
    }
  }
  v170 = v165 + 192;
  if (v165 + 192 == v162)
    goto LABEL_239;
  while (2)
  {
    v171 = v170;
    if (*v165 == *v170
      && *((unsigned __int16 *)v165 + 1) == *((unsigned __int16 *)v170 + 1)
      && *((_QWORD *)v165 + 9) == *((_QWORD *)v170 + 9))
    {
      v172 = (const void *)*((_QWORD *)v165 + 1);
      v173 = *((_QWORD *)v165 + 2) - (_QWORD)v172;
      v174 = (const void *)*((_QWORD *)v170 + 1);
      if (v173 == *((_QWORD *)v170 + 2) - (_QWORD)v174 && !memcmp(v172, v174, v173))
        goto LABEL_237;
    }
    *((_QWORD *)v165 + 12) = *v171;
    if (v165 == (unsigned __int8 *)v166)
      goto LABEL_236;
    v175 = (void *)*((_QWORD *)v165 + 13);
    if (v175 != *((void **)v165 + 15))
      free(v175);
    v176 = v165 + 136;
    *((_QWORD *)v165 + 15) = v165 + 136;
    v177 = *(_QWORD *)(v166 + 104);
    if (v177 != *(_QWORD *)(v166 + 120))
    {
      *((_QWORD *)v165 + 13) = v177;
      *((_QWORD *)v165 + 14) = *(_QWORD *)(v166 + 112);
      *(_OWORD *)(v166 + 104) = 0u;
      *(_OWORD *)(v166 + 120) = 0u;
      goto LABEL_235;
    }
    *((_QWORD *)v165 + 13) = v176;
    v178 = *(char **)(v166 + 104);
    *((_QWORD *)v165 + 14) = &v176[*(_QWORD *)(v166 + 112) - (_QWORD)v178];
    v179 = *(char **)(v166 + 112);
    if (v178 == v179)
      goto LABEL_235;
    v180 = v179 - v178;
    if ((unint64_t)(v179 - v178) < 8 || (unint64_t)(v165 - (unsigned __int8 *)v178 + 136) < 0x20)
    {
      do
      {
LABEL_234:
        v191 = *v178++;
        *v176++ = v191;
      }
      while (v178 != v179);
      goto LABEL_235;
    }
    if (v180 >= 0x20)
    {
      v181 = v180 & 0xFFFFFFFFFFFFFFE0;
      v182 = (__int128 *)(v178 + 16);
      v183 = v165 + 152;
      v184 = v180 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v185 = *v182;
        *(v183 - 1) = *(v182 - 1);
        *v183 = v185;
        v182 += 2;
        v183 += 2;
        v184 -= 32;
      }
      while (v184);
      if (v180 == v181)
        goto LABEL_235;
      if ((v180 & 0x18) != 0)
        goto LABEL_229;
      v178 += v181;
      v176 += v181;
      goto LABEL_234;
    }
    v181 = 0;
LABEL_229:
    v186 = v180 & 0xFFFFFFFFFFFFFFF8;
    v176 += v180 & 0xFFFFFFFFFFFFFFF8;
    v187 = v181 - (v180 & 0xFFFFFFFFFFFFFFF8);
    v188 = (uint64_t *)&v178[v181];
    v189 = &v165[v181 + 136];
    do
    {
      v190 = *v188++;
      *(_QWORD *)v189 = v190;
      v189 += 8;
      v187 += 8;
    }
    while (v187);
    if (v180 != v186)
    {
      v178 += v186;
      goto LABEL_234;
    }
LABEL_235:
    *((_QWORD *)v165 + 16) = *(_QWORD *)(v166 + 128);
LABEL_236:
    *((_QWORD *)v165 + 21) = *(_QWORD *)(v166 + 168);
    *((_OWORD *)v165 + 11) = *(_OWORD *)(v166 + 176);
    v165 += 96;
LABEL_237:
    v170 = (unsigned __int8 *)(v171 + 12);
    v166 = (uint64_t)v171;
    if (v171 + 12 != (_QWORD *)v162)
      continue;
    break;
  }
  v163 = (unsigned __int8 *)v57[28];
  v162 = (unsigned __int8 *)v57[29];
LABEL_239:
  v192 = v165 + 96;
  if (v165 + 96 == v162)
  {
LABEL_242:
    v194 = v162;
    if (v163 == v162)
      return;
    goto LABEL_243;
  }
  v193 = (v192 - v163) / 96;
  v194 = &v163[96 * v193];
  v195 = &v194[v162 - v192];
  if (v195 == v162)
    goto LABEL_390;
  v196 = 0;
  v197 = (uint64_t)&v163[96 * v193 + 40];
  while (2)
  {
    *(_QWORD *)v194 = *(_QWORD *)v195;
    if (v194 != v195)
    {
      v261 = (void *)*((_QWORD *)v194 + 1);
      if (v261 != *((void **)v194 + 3))
        free(v261);
      v262 = v194 + 40;
      *((_QWORD *)v194 + 3) = v194 + 40;
      v263 = *((_QWORD *)v195 + 1);
      if (v263 != *((_QWORD *)v195 + 3))
      {
        *((_QWORD *)v194 + 1) = v263;
        *((_QWORD *)v194 + 2) = *((_QWORD *)v195 + 2);
        *(_OWORD *)(v195 + 8) = 0u;
        *(_OWORD *)(v195 + 24) = 0u;
        goto LABEL_366;
      }
      *((_QWORD *)v194 + 1) = v262;
      v264 = (char *)*((_QWORD *)v195 + 1);
      *((_QWORD *)v194 + 2) = &v262[*((_QWORD *)v195 + 2) - (_QWORD)v264];
      v265 = (char *)*((_QWORD *)v195 + 2);
      if (v264 != v265)
      {
        v266 = v265 - v264;
        if ((unint64_t)(v265 - v264) >= 8 && (unint64_t)(v197 + 96 * v196 - (_QWORD)v264) >= 0x20)
        {
          if (v266 < 0x20)
          {
            v267 = 0;
LABEL_381:
            v271 = v266 & 0xFFFFFFFFFFFFFFF8;
            v262 += v266 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              *(_QWORD *)&v194[v267 + 40] = *(_QWORD *)&v264[v267];
              v267 += 8;
            }
            while (v271 != v267);
            if (v266 != v271)
            {
              v264 += v271;
              goto LABEL_386;
            }
            goto LABEL_366;
          }
          v268 = 0;
          v267 = v266 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v269 = &v194[v268];
            v270 = *(_OWORD *)&v264[v268 + 16];
            *(_OWORD *)(v269 + 40) = *(_OWORD *)&v264[v268];
            *(_OWORD *)(v269 + 56) = v270;
            v268 += 32;
          }
          while (v267 != v268);
          if (v266 == v267)
            goto LABEL_366;
          if ((v266 & 0x18) != 0)
            goto LABEL_381;
          v264 += v267;
          v262 += v267;
        }
        do
        {
LABEL_386:
          v272 = *v264++;
          *v262++ = v272;
        }
        while (v264 != v265);
      }
LABEL_366:
      *((_QWORD *)v194 + 4) = *((_QWORD *)v195 + 4);
    }
    *((_QWORD *)v194 + 9) = *((_QWORD *)v195 + 9);
    *((_OWORD *)v194 + 5) = *((_OWORD *)v195 + 5);
    v195 += 96;
    v194 += 96;
    ++v196;
    if (v195 != v162)
      continue;
    break;
  }
  v57 = v279;
  v162 = (unsigned __int8 *)v279[29];
LABEL_390:
  while (v162 != v194)
  {
    v273 = (void *)*((_QWORD *)v162 - 11);
    if (v273 != *((void **)v162 - 9))
      free(v273);
    v162 -= 96;
  }
  v57[29] = v194;
  v163 = (unsigned __int8 *)v57[28];
  if (v163 != v194)
  {
LABEL_243:
    v275 = a4 + 26;
    v198 = v163;
    v278 = v194;
    while (1)
    {
      v200 = v198;
      v198 += 96;
      v201 = *((unsigned __int16 *)v200 + 1);
      if (v198 != v194 && v201 == *((unsigned __int16 *)v200 + 49))
        goto LABEL_244;
      v203 = (int8x8_t **)a4[7];
      v202 = (unsigned __int16 *)a4[8];
      if (v203 != (int8x8_t **)v202)
      {
        do
        {
          if (*(unsigned __int16 *)v203 == v201)
            goto LABEL_252;
          v203 += 3;
        }
        while (v203 != (int8x8_t **)v202);
LABEL_256:
        v199 = v198;
        goto LABEL_245;
      }
LABEL_252:
      v199 = v198;
      if (v203 != (int8x8_t **)v202)
      {
        v204 = (unsigned __int16 *)a4[4];
        v205 = (unsigned __int16 *)a4[5];
        if (v204 != v205)
        {
          while (*v204 != v201)
          {
            v204 += 8;
            if (v204 == v205)
              goto LABEL_256;
          }
        }
        v199 = v198;
        if (v204 != v205)
          break;
      }
LABEL_245:
      v163 = v199;
      v194 = v278;
      if (v198 == v278)
        return;
    }
    if (v163 == v198)
    {
LABEL_244:
      v199 = v163;
      goto LABEL_245;
    }
    while (1)
    {
      __p = *(void **)v163;
      v285 = v287;
      *(_QWORD *)v286 = v287;
      *(_QWORD *)&v286[8] = v287;
      *(_QWORD *)&v286[16] = 32;
      v207 = (char *)*((_QWORD *)v163 + 1);
      v206 = (char *)*((_QWORD *)v163 + 2);
      v208 = v206 - v207;
      v209 = v287;
      if ((unint64_t)(v206 - v207) < 0x21)
        goto LABEL_282;
      v210 = v208 <= 0x40 ? 64 : v206 - v207;
      v209 = malloc_type_malloc(v210, 0x100004077774924uLL);
      v211 = (char *)v285;
      v212 = *(char **)v286;
      if (v285 != *(void **)v286)
        break;
LABEL_281:
      v285 = v209;
      *(_QWORD *)v286 = v209;
      *(_QWORD *)&v286[16] = v210;
LABEL_282:
      if (v207 == v206)
        goto LABEL_300;
      if (v208 < 8)
      {
        v227 = v209;
        goto LABEL_298;
      }
      if ((unint64_t)((char *)v209 - v207) < 0x20)
      {
        v227 = v209;
        goto LABEL_298;
      }
      if (v208 >= 0x20)
      {
        v226 = v208 & 0xFFFFFFFFFFFFFFE0;
        v228 = (__int128 *)(v207 + 16);
        v229 = v209 + 2;
        v230 = v208 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v231 = *v228;
          *(v229 - 1) = *(v228 - 1);
          *v229 = v231;
          v228 += 2;
          v229 += 2;
          v230 -= 32;
        }
        while (v230);
        if (v208 == v226)
          goto LABEL_299;
        if ((v208 & 0x18) == 0)
        {
          v207 += v226;
          v227 = (char *)v209 + v226;
          goto LABEL_298;
        }
      }
      else
      {
        v226 = 0;
      }
      v232 = v208 & 0xFFFFFFFFFFFFFFF8;
      v227 = (char *)v209 + (v208 & 0xFFFFFFFFFFFFFFF8);
      v233 = v226 - (v208 & 0xFFFFFFFFFFFFFFF8);
      v234 = (uint64_t *)&v207[v226];
      v235 = (_QWORD *)((char *)v209 + v226);
      do
      {
        v236 = *v234++;
        *v235++ = v236;
        v233 += 8;
      }
      while (v233);
      if (v208 == v232)
        goto LABEL_299;
      v207 += v232;
      do
      {
LABEL_298:
        v237 = *v207++;
        *v227++ = v237;
      }
      while (v207 != v206);
LABEL_299:
      v209 = *(_QWORD **)v286;
LABEL_300:
      v238 = *((_QWORD *)v163 + 9);
      *(_QWORD *)v286 = (char *)v209 + v208;
      v287[4] = v238;
      v288 = *((_OWORD *)v163 + 5);
      if (std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(a4 + 11, (unsigned __int8 *)&__p))
      {
        if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
          dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
        v239 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
        if (os_log_type_enabled(v239, OS_LOG_TYPE_DEBUG))
        {
          gdc::ResourceKey::keysInt32Str(&buf, (unsigned __int8 *)&__p);
          p_buf = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          *(_DWORD *)v294 = 136315138;
          v295 = p_buf;
          _os_log_impl(&dword_19F029000, v239, OS_LOG_TYPE_DEBUG, "Requesting in progress resource: %s", v294, 0xCu);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
        }

      }
      else if (std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(a4 + 16, (unsigned __int8 *)&__p))
      {
        if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
          dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
        v241 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
        if (os_log_type_enabled(v241, OS_LOG_TYPE_DEBUG))
        {
          gdc::ResourceKey::keysInt32Str(&buf, (unsigned __int8 *)&__p);
          v242 = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v242 = (std::string *)buf.__r_.__value_.__r.__words[0];
          *(_DWORD *)v294 = 136315138;
          v295 = v242;
          _os_log_impl(&dword_19F029000, v241, OS_LOG_TYPE_DEBUG, "Requesting failed resource: %s", v294, 0xCu);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
        }

        v243 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((_QWORD *)(a4[38] + 8), (unsigned __int8 *)&__p);
        if (v243)
          *((_DWORD *)v243 + 28) = 3;
      }
      else if (!std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v275, (unsigned __int8 *)&__p))
      {
        gdc::ResourceStore::resource((gdc::ResourceStore *)&v282, v203[1], (unsigned __int8 *)&__p);
        v244 = v282;
        if (!v282)
          goto LABEL_350;
        *(_QWORD *)(v282 + 104) = a3;
        v245 = *(_QWORD *)(v244 + 112);
        if (v245 < 1 || *(_QWORD *)(v244 + 96) + v245 >= a3)
        {
          if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
            dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
          v251 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
          if (os_log_type_enabled(v251, OS_LOG_TYPE_DEBUG))
          {
            gdc::ResourceKey::keysInt32Str(&buf, (unsigned __int8 *)&__p);
            v252 = *(_QWORD *)(v244 + 128);
            v253 = (std::string *)buf.__r_.__value_.__r.__words[0];
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v253 = &buf;
            *(_DWORD *)v294 = 136315394;
            v295 = v253;
            v296 = 2048;
            v297 = v252;
            _os_log_impl(&dword_19F029000, v251, OS_LOG_TYPE_DEBUG, "Requested resource already arrived: %s, %llu", v294, 0x16u);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
          }

          v254 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((_QWORD *)(a4[38] + 8), (unsigned __int8 *)&__p);
          if (v254)
          {
            v255 = 2;
            goto LABEL_359;
          }
        }
        else
        {
          if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
            dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
          v246 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
          if (os_log_type_enabled(v246, OS_LOG_TYPE_DEBUG))
          {
            gdc::ResourceKey::keysInt32Str(&buf, (unsigned __int8 *)&__p);
            v247 = &buf;
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v247 = (std::string *)buf.__r_.__value_.__r.__words[0];
            *(_DWORD *)v294 = 136315138;
            v295 = v247;
            _os_log_impl(&dword_19F029000, v246, OS_LOG_TYPE_DEBUG, "Requested resource expired: %s", v294, 0xCu);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
          }

          gdc::ResourceStore::erase(v203[1], (const gdc::ResourceKey *)v244);
          v248 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((_QWORD *)(a4[38] + 8), (unsigned __int8 *)v244);
          if (v248)
            *((_DWORD *)v248 + 28) = 0;
          v249 = (char *)a4[4];
          v250 = (char *)a4[5];
          if (v249 != v250)
          {
            while (*(unsigned __int16 *)(v244 + 2) != *(unsigned __int16 *)v249)
            {
              v249 += 16;
              if (v249 == v250)
                goto LABEL_348;
            }
          }
          if (v249 == v250)
          {
LABEL_348:
            LOWORD(buf.__r_.__value_.__l.__data_) = *(_WORD *)(v244 + 2);
            buf.__r_.__value_.__l.__size_ = 0;
            v249 = geo::linear_map<unsigned short,gdc::ResourceFetcher *,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,gdc::ResourceFetcher *>>,std::vector<std::pair<unsigned short,gdc::ResourceFetcher *>>>::insert((uint64_t)(a4 + 4), (unsigned __int16 *)&buf);
          }
          (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v249 + 1) + 48))(*((_QWORD *)v249 + 1), v244);
LABEL_350:
          if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1)
            dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_4_42058);
          v256 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
          if (os_log_type_enabled(v256, OS_LOG_TYPE_DEBUG))
          {
            gdc::ResourceKey::keysInt32Str(&buf, (unsigned __int8 *)&__p);
            v257 = &buf;
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v257 = (std::string *)buf.__r_.__value_.__r.__words[0];
            *(_DWORD *)v294 = 136315138;
            v295 = v257;
            _os_log_impl(&dword_19F029000, v256, OS_LOG_TYPE_DEBUG, "Requesting resource: %s", v294, 0xCu);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
          }

          std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::__emplace_unique_key_args<gdc::ResourceKey,gdc::ResourceKey const&>((uint64_t)v275, (unsigned __int8 *)&__p, (uint64_t)&__p);
          v254 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((_QWORD *)(a4[38] + 8), (unsigned __int8 *)&__p);
          if (v254)
          {
            v255 = 1;
LABEL_359:
            *((_DWORD *)v254 + 28) = v255;
          }
        }
        v258 = v283;
        if (v283)
        {
          v259 = (unint64_t *)&v283->__shared_owners_;
          do
            v260 = __ldaxr(v259);
          while (__stlxr(v260 - 1, v259));
          if (!v260)
          {
            ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
            std::__shared_weak_count::__release_weak(v258);
          }
        }
      }
      if (v285 != *(void **)&v286[8])
        free(v285);
      v49 = v163 == v200;
      v163 += 96;
      if (v49)
        goto LABEL_256;
    }
    v213 = *(_QWORD *)v286 - (_QWORD)v285;
    if (*(_QWORD *)v286 - (_QWORD)v285 < 8uLL)
    {
      v214 = v209;
    }
    else
    {
      v214 = v209;
      if ((unint64_t)((char *)v209 - (_BYTE *)v285) >= 0x20)
      {
        if (v213 < 0x20)
        {
          v215 = 0;
LABEL_275:
          v220 = v213 & 0xFFFFFFFFFFFFFFF8;
          v214 = (char *)v209 + (v213 & 0xFFFFFFFFFFFFFFF8);
          v221 = v215 - (v213 & 0xFFFFFFFFFFFFFFF8);
          v222 = (uint64_t *)&v211[v215];
          v223 = (_QWORD *)((char *)v209 + v215);
          do
          {
            v224 = *v222++;
            *v223++ = v224;
            v221 += 8;
          }
          while (v221);
          if (v213 == v220)
            goto LABEL_281;
          v211 += v220;
          goto LABEL_280;
        }
        v215 = v213 & 0xFFFFFFFFFFFFFFE0;
        v216 = (__int128 *)((char *)v285 + 16);
        v217 = v209 + 2;
        v218 = v213 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v219 = *v216;
          *(v217 - 1) = *(v216 - 1);
          *v217 = v219;
          v216 += 2;
          v217 += 2;
          v218 -= 32;
        }
        while (v218);
        if (v213 == v215)
          goto LABEL_281;
        if ((v213 & 0x18) != 0)
          goto LABEL_275;
        v211 += v215;
        v214 = (char *)v209 + v215;
      }
    }
    do
    {
LABEL_280:
      v225 = *v211++;
      *v214++ = v225;
    }
    while (v211 != v212);
    goto LABEL_281;
  }
}

void sub_19F069908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,void *a28,uint64_t a29,void *a30)
{
  unint64_t *p_shared_owners;
  unint64_t v32;

  if (a26)
  {
    p_shared_owners = (unint64_t *)&a26->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))a26->__on_zero_shared)(a26);
      std::__shared_weak_count::__release_weak(a26);
    }
  }
  if (a28 != a30)
  {
    free(a28);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double std::__introsort<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *,false>(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, char a4)
{
  uint64_t *n;
  unsigned __int8 *k;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  unsigned int v41;
  __int128 v42;
  unsigned __int8 *v43;
  unsigned int v44;
  BOOL v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  unsigned int v52;
  uint64_t *v53;
  unsigned int v54;
  unsigned int v55;
  __int128 v56;
  unsigned int v57;
  BOOL v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  void *v62;
  _BYTE *v63;
  uint64_t v64;
  unsigned __int8 *v65;
  char *v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  __int128 *v70;
  _OWORD *v71;
  unint64_t v72;
  __int128 v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  unsigned __int8 *v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  _BYTE *v81;
  unint64_t v82;
  char v83;
  void *v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  unint64_t v88;
  unint64_t v89;
  __int128 *v90;
  unsigned __int8 *v91;
  unint64_t v92;
  __int128 v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unsigned __int8 v99;
  BOOL v100;
  __int128 v101;
  __int128 *v102;
  _OWORD *v103;
  unint64_t v104;
  __int128 v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t *v108;
  _QWORD *v109;
  uint64_t v110;
  char v111;
  uint64_t *v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  BOOL v120;
  unsigned int v121;
  unsigned int v122;
  BOOL v123;
  unsigned int v124;
  unsigned __int8 *v125;
  uint64_t *v126;
  uint64_t *m;
  BOOL v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  __int128 v132;
  unsigned int v133;
  BOOL v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  void *v138;
  _BYTE *v139;
  uint64_t v140;
  unsigned __int8 *v141;
  char *v142;
  char *v143;
  unint64_t v144;
  unint64_t v145;
  __int128 *v146;
  _OWORD *v147;
  unint64_t v148;
  __int128 v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t *v152;
  unsigned __int8 *v153;
  uint64_t v154;
  char v155;
  void *v156;
  unsigned __int8 *v157;
  unsigned __int8 *v158;
  unsigned __int8 *v159;
  unint64_t v160;
  unint64_t v161;
  __int128 *v162;
  unsigned __int8 *v163;
  unint64_t v164;
  __int128 v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t *v168;
  unsigned __int8 *v169;
  uint64_t v170;
  unsigned __int8 v171;
  unsigned int v172;
  unsigned int v173;
  BOOL v174;
  unsigned int v175;
  unsigned int v176;
  unsigned __int8 *v177;
  uint64_t v178;
  uint64_t *v179;
  unsigned __int8 *v180;
  unsigned int v181;
  unsigned int v182;
  BOOL v183;
  unsigned int v184;
  unsigned int v185;
  char *v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  char *v190;
  unint64_t v191;
  _BYTE *v192;
  unint64_t v193;
  __int128 *v194;
  _OWORD *v195;
  unint64_t v196;
  __int128 v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t *v200;
  _QWORD *v201;
  uint64_t v202;
  char v203;
  uint64_t v204;
  uint64_t *i;
  uint64_t *v206;
  void **v207;
  void *v208;
  _BYTE *v209;
  char *v210;
  char *v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unsigned __int8 *v215;
  __int128 v216;
  unint64_t v217;
  char v218;
  unsigned int v219;
  BOOL v220;
  unsigned int v221;
  uint64_t *v222;
  _BYTE *v223;
  char *v224;
  char *v225;
  unint64_t v226;
  unint64_t v227;
  __int128 *v228;
  _OWORD *v229;
  unint64_t v230;
  __int128 v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t *v234;
  _QWORD *v235;
  uint64_t v236;
  char v237;
  int64_t v238;
  int64_t v239;
  int64_t v240;
  uint64_t v241;
  unsigned __int8 *v242;
  unsigned int v243;
  unsigned int v244;
  BOOL v245;
  unsigned int v246;
  unsigned int v247;
  _BOOL4 v248;
  unsigned __int8 *v249;
  unsigned int v250;
  unsigned int v251;
  BOOL v252;
  unsigned int v253;
  unsigned int v254;
  unsigned __int8 *v255;
  char *v256;
  unsigned __int8 *v257;
  char *v258;
  char *v259;
  unint64_t v260;
  _BYTE *v261;
  uint64_t v262;
  __int128 *v263;
  _OWORD *v264;
  unint64_t v265;
  __int128 v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t *v269;
  _QWORD *v270;
  uint64_t v271;
  char v272;
  unsigned __int8 *v273;
  unsigned __int8 *v274;
  _OWORD *v275;
  uint64_t v276;
  void *v277;
  _BYTE *v278;
  uint64_t v279;
  char *v280;
  char *v281;
  unint64_t v282;
  unint64_t v283;
  __int128 *v284;
  _OWORD *v285;
  unint64_t v286;
  __int128 v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t *v290;
  unsigned __int8 *v291;
  uint64_t v292;
  char v293;
  uint64_t v294;
  unsigned int v295;
  unsigned int v296;
  BOOL v297;
  unsigned int v298;
  unsigned int v299;
  _BOOL4 v300;
  unsigned int v301;
  BOOL v302;
  unsigned int v303;
  void *v304;
  _BYTE *v305;
  char *v306;
  char *v307;
  unint64_t v308;
  unint64_t v309;
  __int128 *v310;
  _OWORD *v311;
  unint64_t v312;
  __int128 v313;
  unint64_t v314;
  unint64_t v315;
  uint64_t *v316;
  unsigned __int8 *v317;
  uint64_t v318;
  char v319;
  int64_t v320;
  unsigned __int8 *v321;
  unsigned __int8 *v322;
  uint64_t v324;
  char *v325;
  uint64_t v326;
  char *v327;
  unint64_t v328;
  _BYTE *v329;
  uint64_t v330;
  __int128 *v331;
  uint64_t *v332;
  unint64_t v333;
  __int128 v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t *v337;
  _QWORD *v338;
  uint64_t v339;
  char v340;
  uint64_t v341;
  uint64_t v342;
  unsigned __int8 *v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int v346;
  unsigned int v347;
  BOOL v348;
  unsigned int v349;
  unsigned int v350;
  _BOOL4 v351;
  _OWORD *v352;
  void *v353;
  _BYTE *v354;
  uint64_t v355;
  char *v356;
  char *v357;
  unint64_t v358;
  uint64_t v359;
  __int128 *v360;
  _OWORD *v361;
  unint64_t v362;
  __int128 v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t *v366;
  unsigned __int8 *v367;
  uint64_t v368;
  char v369;
  __int128 *v370;
  void *v371;
  _BYTE *v372;
  uint64_t v373;
  unsigned __int8 *v374;
  void *v375;
  _BYTE *v376;
  char *v377;
  char *v378;
  unint64_t v379;
  unint64_t v380;
  char *v381;
  char *v382;
  unint64_t v383;
  uint64_t v384;
  __int128 *v385;
  _OWORD *v386;
  unint64_t v387;
  __int128 v388;
  unint64_t v389;
  unint64_t v390;
  uint64_t *v391;
  unsigned __int8 *v392;
  uint64_t v393;
  __int128 *v394;
  _OWORD *v395;
  unint64_t v396;
  __int128 v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t *v400;
  unsigned __int8 *v401;
  uint64_t v402;
  char v403;
  void *v404;
  unsigned __int8 *v405;
  unsigned __int8 *v406;
  unsigned __int8 *v407;
  BOOL v408;
  unint64_t v409;
  unint64_t v410;
  uint64_t v411;
  unsigned __int8 *v412;
  __int128 v413;
  unint64_t v414;
  unsigned __int8 v415;
  uint64_t v416;
  unint64_t v417;
  unsigned __int8 *v418;
  unsigned int v419;
  unsigned int v420;
  BOOL v421;
  unsigned int v422;
  unsigned int v423;
  char *v424;
  unsigned __int8 *v425;
  char *v426;
  unint64_t v427;
  _BYTE *v428;
  unint64_t v429;
  __int128 *v430;
  _OWORD *v431;
  unint64_t v432;
  __int128 v433;
  unint64_t v434;
  unint64_t v435;
  uint64_t *v436;
  _QWORD *v437;
  uint64_t v438;
  char v439;
  uint64_t *v440;
  _OWORD *v441;
  uint64_t v442;
  void *v443;
  _BYTE *v444;
  uint64_t v445;
  char *v446;
  char *v447;
  unint64_t v448;
  unint64_t v449;
  __int128 *v450;
  _OWORD *v451;
  unint64_t v452;
  __int128 v453;
  unint64_t v454;
  unint64_t v455;
  uint64_t *v456;
  unsigned __int8 *v457;
  uint64_t v458;
  char v459;
  unsigned int v460;
  BOOL v461;
  unsigned int v462;
  _OWORD *v463;
  void *v464;
  _BYTE *v465;
  char *v466;
  void *v467;
  void *v468;
  char *v469;
  unint64_t v470;
  unint64_t v471;
  __int128 *v472;
  _OWORD *v473;
  unint64_t v474;
  __int128 v475;
  unint64_t v476;
  unint64_t v477;
  uint64_t *v478;
  unsigned __int8 *v479;
  uint64_t v480;
  char v481;
  char v482;
  unsigned __int8 *v483;
  uint64_t v484;
  __int128 *v485;
  unsigned __int8 *v486;
  unsigned int v487;
  unsigned int v488;
  BOOL v489;
  unsigned int v490;
  unsigned int v491;
  char *v492;
  uint64_t v493;
  char *v494;
  uint64_t v495;
  char *v496;
  unint64_t v497;
  _BYTE *v498;
  uint64_t v499;
  __int128 *v500;
  _OWORD *v501;
  unint64_t v502;
  __int128 v503;
  unint64_t v504;
  uint64_t v505;
  uint64_t *v506;
  _QWORD *v507;
  uint64_t v508;
  char v509;
  uint64_t v510;
  __int128 *v511;
  unsigned __int8 *j;
  uint64_t *v513;
  _OWORD *v514;
  uint64_t v515;
  void *v516;
  _BYTE *v517;
  char *v518;
  char *v519;
  unint64_t v520;
  unint64_t v521;
  unint64_t v522;
  unsigned __int8 *v523;
  __int128 v524;
  unint64_t v525;
  char v526;
  unsigned int v527;
  BOOL v528;
  unsigned int v529;
  void *v530;
  _BYTE *v531;
  char *v532;
  char *v533;
  unint64_t v534;
  unint64_t v535;
  unint64_t v536;
  unsigned __int8 *v537;
  __int128 v538;
  unint64_t v539;
  char v540;
  __int128 *v541;
  uint64_t v543;
  uint64_t *v544;
  unsigned __int8 *v545;
  unsigned __int8 *v546;
  _OWORD *v548;
  uint64_t *v549;
  __int128 *v550;
  unsigned __int8 *v551;
  unsigned __int8 *v552;
  unsigned __int8 *v553;
  unsigned __int8 *v554;
  unsigned __int8 *v555;
  uint64_t v556;
  __int128 v557;
  __int128 v558;
  _BYTE v559[16];
  uint64_t v560;
  uint64_t v561;
  __int128 v562;
  uint64_t v563;
  __int128 v564;
  __int128 v565;
  _BYTE v566[16];
  _BYTE v567[16];
  uint64_t v568;
  __int128 v569;

LABEL_1:
  n = (uint64_t *)(a2 - 96);
  v545 = a2 - 288;
  v546 = a2 - 192;
  v544 = (uint64_t *)(a2 - 88);
  k = a1;
  v549 = (uint64_t *)(a2 - 96);
  v552 = a2;
  while (2)
  {
    v9 = k;
    v10 = a2 - k;
    v11 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 5);
    switch(v11)
    {
      case 0:
      case 1:
        return *(double *)&v101;
      case 2:
        v172 = *((unsigned __int16 *)a2 - 47);
        v173 = *((unsigned __int16 *)v9 + 1);
        v174 = v172 >= v173;
        if (v172 == v173 && (v175 = *(unsigned __int8 *)n, v176 = *v9, v174 = v175 >= v176, v175 == v176))
        {
          if (!gdc::GenericKey::operator<(*((_QWORD *)a2 - 11), *((_QWORD *)a2 - 10), *((_QWORD *)v9 + 1), *((_QWORD *)v9 + 2)))return *(double *)&v101;
        }
        else if (v174)
        {
          return *(double *)&v101;
        }
        *(double *)&v101 = std::swap[abi:nn180100]<gdc::ResourceKey>((uint64_t *)v9, n);
        return *(double *)&v101;
      case 3:
        *(double *)&v101 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(v9, v9 + 96, (unsigned __int8 *)n);
        return *(double *)&v101;
      case 4:
        *(double *)&v101 = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(v9, v9 + 96, v9 + 192, (unsigned __int8 *)n);
        return *(double *)&v101;
      case 5:
        *(double *)&v101 = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(v9, v9 + 96, v9 + 192, v9 + 288, (unsigned __int8 *)n);
        return *(double *)&v101;
      default:
        v555 = v9;
        if (v10 <= 2303)
        {
          if ((a4 & 1) != 0)
          {
            if (v9 == a2)
              return *(double *)&v101;
            v177 = v9 + 96;
            if (v9 + 96 == a2)
              return *(double *)&v101;
            v178 = 0;
            v553 = v9 + 136;
            v179 = (uint64_t *)v9;
            while (1)
            {
              v180 = (unsigned __int8 *)v179;
              v179 = (uint64_t *)v177;
              v181 = *((unsigned __int16 *)v177 + 1);
              v182 = *((unsigned __int16 *)v180 + 1);
              v183 = v181 >= v182;
              if (v181 == v182 && (v184 = *(unsigned __int8 *)v179, v185 = *v180, v183 = v184 >= v185, v184 == v185))
              {
                if (!gdc::GenericKey::operator<(v179[1], v179[2], *((_QWORD *)v180 + 1), *((_QWORD *)v180 + 2)))
                  goto LABEL_247;
              }
              else if (v183)
              {
                goto LABEL_247;
              }
              v186 = (char *)*((_QWORD *)v180 + 13);
              v563 = *v179;
              *(_QWORD *)&v564 = v566;
              v188 = (char *)*((_QWORD *)v180 + 15);
              v187 = *((_QWORD *)v180 + 16);
              *(_QWORD *)&v565 = v566;
              *((_QWORD *)&v565 + 1) = v187;
              if (v186 == v188)
              {
                v190 = (char *)*((_QWORD *)v180 + 14);
                v191 = v190 - v186;
                *((_QWORD *)&v564 + 1) = &v566[v190 - v186];
                if (v190 != v186)
                {
                  if (v191 < 8)
                  {
                    v192 = v566;
                  }
                  else
                  {
                    v192 = v566;
                    if ((unint64_t)(v566 - v186) >= 0x20)
                    {
                      if (v191 < 0x20)
                      {
                        v193 = 0;
                        goto LABEL_265;
                      }
                      v193 = v191 & 0xFFFFFFFFFFFFFFE0;
                      v194 = (__int128 *)(v186 + 16);
                      v195 = v567;
                      v196 = v191 & 0xFFFFFFFFFFFFFFE0;
                      do
                      {
                        v197 = *v194;
                        *(v195 - 1) = *(v194 - 1);
                        *v195 = v197;
                        v194 += 2;
                        v195 += 2;
                        v196 -= 32;
                      }
                      while (v196);
                      if (v191 == v193)
                        goto LABEL_271;
                      if ((v191 & 0x18) != 0)
                      {
LABEL_265:
                        v198 = v191 & 0xFFFFFFFFFFFFFFF8;
                        v192 = &v566[v191 & 0xFFFFFFFFFFFFFFF8];
                        v199 = v193 - (v191 & 0xFFFFFFFFFFFFFFF8);
                        v200 = (uint64_t *)&v186[v193];
                        v201 = &v566[v193];
                        do
                        {
                          v202 = *v200++;
                          *v201++ = v202;
                          v199 += 8;
                        }
                        while (v199);
                        if (v191 == v198)
                          goto LABEL_271;
                        v186 += v198;
                      }
                      else
                      {
                        v186 += v193;
                        v192 = &v566[v193];
                      }
                    }
                  }
                  do
                  {
                    v203 = *v186++;
                    *v192++ = v203;
                  }
                  while (v186 != v190);
                }
              }
              else
              {
                v189 = *((_QWORD *)v180 + 14);
                *(_QWORD *)&v564 = v186;
                *((_QWORD *)&v564 + 1) = v189;
                *(_OWORD *)(v180 + 104) = 0u;
                *(_OWORD *)(v180 + 120) = 0u;
              }
LABEL_271:
              v204 = 0;
              v568 = *((_QWORD *)v180 + 21);
              v569 = *((_OWORD *)v180 + 11);
              for (i = v179; ; i = v206)
              {
                v206 = (uint64_t *)v180;
                v207 = (void **)(v180 + 8);
                *i = *(_QWORD *)v180;
                v208 = (void *)i[1];
                if (v208 != (void *)i[3])
                  free(v208);
                v209 = i + 5;
                i[3] = (uint64_t)(i + 5);
                v210 = (char *)*((_QWORD *)v180 + 1);
                if (v210 != *((char **)v180 + 3))
                {
                  i[1] = (uint64_t)v210;
                  i[2] = *((_QWORD *)v180 + 2);
                  *(_OWORD *)v207 = 0u;
                  *(_OWORD *)(v180 + 24) = 0u;
                  goto LABEL_293;
                }
                i[1] = (uint64_t)v209;
                v211 = (char *)*((_QWORD *)v180 + 2);
                v212 = v211 - v210;
                i[2] = (uint64_t)&v209[v211 - v210];
                if (v211 != v210)
                {
                  if (v212 < 8 || (unint64_t)(&v553[96 * v178 + -96 * v204] - (unsigned __int8 *)v210) < 0x20)
                    goto LABEL_292;
                  if (v212 >= 0x20)
                  {
                    v214 = 0;
                    v213 = v212 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      v215 = &v180[v214];
                      v216 = *(_OWORD *)&v210[v214 + 16];
                      *(_OWORD *)(v215 + 136) = *(_OWORD *)&v210[v214];
                      *(_OWORD *)(v215 + 152) = v216;
                      v214 += 32;
                    }
                    while (v213 != v214);
                    if (v212 == v213)
                      goto LABEL_293;
                    if ((v212 & 0x18) == 0)
                    {
                      v210 += v213;
                      v209 += v213;
                      do
                      {
LABEL_292:
                        v218 = *v210++;
                        *v209++ = v218;
                      }
                      while (v210 != v211);
                      goto LABEL_293;
                    }
                  }
                  else
                  {
                    v213 = 0;
                  }
                  v217 = v212 & 0xFFFFFFFFFFFFFFF8;
                  v209 += v212 & 0xFFFFFFFFFFFFFFF8;
                  do
                  {
                    *(_QWORD *)&v180[v213 + 136] = *(_QWORD *)&v210[v213];
                    v213 += 8;
                  }
                  while (v217 != v213);
                  if (v212 != v217)
                  {
                    v210 += v217;
                    goto LABEL_292;
                  }
                }
LABEL_293:
                i[4] = *((_QWORD *)v180 + 4);
                i[9] = *((_QWORD *)v180 + 9);
                *((_OWORD *)i + 5) = *((_OWORD *)v180 + 5);
                if (v180 == v555)
                  break;
                v180 -= 96;
                v219 = *((unsigned __int16 *)v206 - 47);
                v220 = WORD1(v563) >= v219;
                if (WORD1(v563) == v219
                  && (v221 = *v180, v220 = v563 >= v221, v563 == v221))
                {
                  if (!gdc::GenericKey::operator<(v564, *((uint64_t *)&v564 + 1), *(v206 - 11), *(v206 - 10)))
                  {
LABEL_297:
                    v222 = v206;
                    goto LABEL_299;
                  }
                }
                else if (v220)
                {
                  goto LABEL_297;
                }
                ++v204;
              }
              v222 = (uint64_t *)v555;
LABEL_299:
              *v222 = v563;
              if (v222 == &v563)
                goto LABEL_320;
              if (*v207 != (void *)v222[3])
                free(*v207);
              v223 = v222 + 5;
              v222[3] = (uint64_t)(v222 + 5);
              v224 = (char *)v564;
              if ((_QWORD)v564 != (_QWORD)v565)
              {
                *v207 = (void *)v564;
                v222[2] = *((_QWORD *)&v564 + 1);
                v564 = 0u;
                v565 = 0u;
                goto LABEL_319;
              }
              *v207 = v223;
              v225 = (char *)*((_QWORD *)&v564 + 1);
              v226 = *((_QWORD *)&v564 + 1) - (_QWORD)v224;
              v222[2] = (uint64_t)&v223[*((_QWORD *)&v564 + 1) - (_QWORD)v224];
              if (v225 == v224)
                goto LABEL_319;
              if (v226 < 8 || (unint64_t)((char *)v222 - v224 + 40) < 0x20)
                goto LABEL_318;
              if (v226 >= 0x20)
              {
                v227 = v226 & 0xFFFFFFFFFFFFFFE0;
                v228 = (__int128 *)(v224 + 16);
                v229 = v222 + 7;
                v230 = v226 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v231 = *v228;
                  *(v229 - 1) = *(v228 - 1);
                  *v229 = v231;
                  v228 += 2;
                  v229 += 2;
                  v230 -= 32;
                }
                while (v230);
                if (v226 == v227)
                  goto LABEL_319;
                if ((v226 & 0x18) != 0)
                  goto LABEL_313;
                v224 += v227;
                v223 += v227;
                do
                {
LABEL_318:
                  v237 = *v224++;
                  *v223++ = v237;
                }
                while (v224 != v225);
                goto LABEL_319;
              }
              v227 = 0;
LABEL_313:
              v232 = v226 & 0xFFFFFFFFFFFFFFF8;
              v223 += v226 & 0xFFFFFFFFFFFFFFF8;
              v233 = v227 - (v226 & 0xFFFFFFFFFFFFFFF8);
              v234 = (uint64_t *)&v224[v227];
              v235 = (uint64_t *)((char *)v222 + v227 + 40);
              do
              {
                v236 = *v234++;
                *v235++ = v236;
                v233 += 8;
              }
              while (v233);
              if (v226 != v232)
              {
                v224 += v232;
                goto LABEL_318;
              }
LABEL_319:
              v222[4] = *((_QWORD *)&v565 + 1);
LABEL_320:
              v222[9] = v568;
              *(_QWORD *)&v101 = v569;
              *((_OWORD *)v206 + 5) = v569;
              if ((_QWORD)v564 != (_QWORD)v565)
                free((void *)v564);
              a2 = v552;
LABEL_247:
              v177 = (unsigned __int8 *)(v179 + 12);
              ++v178;
              if (v179 + 12 == (uint64_t *)a2)
                return *(double *)&v101;
            }
          }
          if (v9 == a2)
            return *(double *)&v101;
          v483 = v9 + 96;
          if (v9 + 96 == a2)
            return *(double *)&v101;
          v484 = 0;
          v485 = &v569;
          v554 = v9 + 40;
          v551 = v9 + 136;
LABEL_622:
          v486 = v9;
          v9 = v483;
          v487 = *((unsigned __int16 *)v483 + 1);
          v488 = *((unsigned __int16 *)v486 + 1);
          v489 = v487 >= v488;
          if (v487 == v488 && (v490 = *v9, v491 = *v486, v489 = v490 >= v491, v490 == v491))
          {
            if (!gdc::GenericKey::operator<(*((_QWORD *)v9 + 1), *((_QWORD *)v9 + 2), *((_QWORD *)v486 + 1), *((_QWORD *)v486 + 2)))goto LABEL_621;
          }
          else if (v489)
          {
            goto LABEL_621;
          }
          v492 = (char *)*((_QWORD *)v486 + 13);
          v563 = *(_QWORD *)v9;
          *(_QWORD *)&v564 = v566;
          v494 = (char *)*((_QWORD *)v486 + 15);
          v493 = *((_QWORD *)v486 + 16);
          *(_QWORD *)&v565 = v566;
          *((_QWORD *)&v565 + 1) = v493;
          if (v492 != v494)
          {
            v495 = *((_QWORD *)v486 + 14);
            *(_QWORD *)&v564 = v492;
            *((_QWORD *)&v564 + 1) = v495;
            *(_OWORD *)(v486 + 104) = 0u;
            *(_OWORD *)(v486 + 120) = 0u;
LABEL_645:
            v510 = 0;
            v568 = *((_QWORD *)v486 + 21);
            v511 = v485;
            *v485 = *((_OWORD *)v486 + 11);
            for (j = v9; ; j = (unsigned __int8 *)v513)
            {
              v513 = (uint64_t *)v486;
              v515 = *(_QWORD *)v486;
              v514 = v486 + 8;
              *(_QWORD *)j = v515;
              v516 = (void *)*((_QWORD *)j + 1);
              if (v516 != *((void **)j + 3))
                free(v516);
              v517 = j + 40;
              *((_QWORD *)j + 3) = j + 40;
              v518 = (char *)v513[1];
              if (v518 != (char *)v513[3])
              {
                *((_QWORD *)j + 1) = v518;
                *((_QWORD *)j + 2) = v513[2];
                *v514 = 0u;
                v514[1] = 0u;
                goto LABEL_667;
              }
              *((_QWORD *)j + 1) = v517;
              v519 = (char *)v513[2];
              v520 = v519 - v518;
              *((_QWORD *)j + 2) = &v517[v519 - v518];
              if (v519 == v518)
                goto LABEL_667;
              if (v520 < 8 || (unint64_t)(&v551[96 * v484 + -96 * v510] - (unsigned __int8 *)v518) < 0x20)
                goto LABEL_666;
              if (v520 >= 0x20)
              {
                v522 = 0;
                v521 = v520 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v523 = (unsigned __int8 *)&v513[v522 / 8];
                  v524 = *(_OWORD *)&v518[v522 + 16];
                  *(_OWORD *)(v523 + 136) = *(_OWORD *)&v518[v522];
                  *(_OWORD *)(v523 + 152) = v524;
                  v522 += 32;
                }
                while (v521 != v522);
                if (v520 == v521)
                  goto LABEL_667;
                if ((v520 & 0x18) == 0)
                {
                  v518 += v521;
                  v517 += v521;
                  do
                  {
LABEL_666:
                    v526 = *v518++;
                    *v517++ = v526;
                  }
                  while (v518 != v519);
                  goto LABEL_667;
                }
              }
              else
              {
                v521 = 0;
              }
              v525 = v520 & 0xFFFFFFFFFFFFFFF8;
              v517 += v520 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                *(uint64_t *)((char *)v513 + v521 + 136) = *(_QWORD *)&v518[v521];
                v521 += 8;
              }
              while (v525 != v521);
              if (v520 != v525)
              {
                v518 += v525;
                goto LABEL_666;
              }
LABEL_667:
              *((_QWORD *)j + 4) = v513[4];
              *((_QWORD *)j + 9) = v513[9];
              *((_OWORD *)j + 5) = *((_OWORD *)v513 + 5);
              v486 = (unsigned __int8 *)(v513 - 12);
              v527 = *((unsigned __int16 *)v513 - 47);
              v528 = WORD1(v563) >= v527;
              if (WORD1(v563) == v527
                && (v529 = *v486, v528 = v563 >= v529, v563 == v529))
              {
                if (!gdc::GenericKey::operator<(v564, *((uint64_t *)&v564 + 1), *(v513 - 11), *(v513 - 10)))
                {
LABEL_670:
                  *v513 = v563;
                  a2 = v552;
                  if (v513 == &v563)
                    goto LABEL_691;
                  v530 = (void *)v513[1];
                  if (v530 != (void *)v513[3])
                    free(v530);
                  v531 = v513 + 5;
                  v513[3] = (uint64_t)(v513 + 5);
                  v532 = (char *)v564;
                  if ((_QWORD)v564 != (_QWORD)v565)
                  {
                    *(_OWORD *)(v513 + 1) = v564;
                    v564 = 0u;
                    v565 = 0u;
                    goto LABEL_690;
                  }
                  v513[1] = (uint64_t)v531;
                  v533 = (char *)*((_QWORD *)&v564 + 1);
                  v534 = *((_QWORD *)&v564 + 1) - (_QWORD)v532;
                  v513[2] = (uint64_t)&v531[*((_QWORD *)&v564 + 1) - (_QWORD)v532];
                  if (v533 == v532)
                    goto LABEL_690;
                  if (v534 < 8 || (unint64_t)(&v554[96 * v484 + -96 * v510] - (unsigned __int8 *)v532) < 0x20)
                    goto LABEL_689;
                  if (v534 >= 0x20)
                  {
                    v536 = 0;
                    v535 = v534 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      v537 = (unsigned __int8 *)&v513[v536 / 8];
                      v538 = *(_OWORD *)&v532[v536 + 16];
                      *(_OWORD *)(v537 + 40) = *(_OWORD *)&v532[v536];
                      *(_OWORD *)(v537 + 56) = v538;
                      v536 += 32;
                    }
                    while (v535 != v536);
                    if (v534 == v535)
                      goto LABEL_690;
                    if ((v534 & 0x18) != 0)
                      goto LABEL_684;
                    v532 += v535;
                    v531 += v535;
                    do
                    {
LABEL_689:
                      v540 = *v532++;
                      *v531++ = v540;
                    }
                    while (v532 != v533);
                    goto LABEL_690;
                  }
                  v535 = 0;
LABEL_684:
                  v539 = v534 & 0xFFFFFFFFFFFFFFF8;
                  v531 += v534 & 0xFFFFFFFFFFFFFFF8;
                  do
                  {
                    *(uint64_t *)((char *)v513 + v535 + 40) = *(_QWORD *)&v532[v535];
                    v535 += 8;
                  }
                  while (v539 != v535);
                  if (v534 != v539)
                  {
                    v532 += v539;
                    goto LABEL_689;
                  }
LABEL_690:
                  v513[4] = *((_QWORD *)&v565 + 1);
LABEL_691:
                  v541 = (__int128 *)(v513 + 10);
                  v513[9] = v568;
                  v485 = v511;
                  v101 = *v511;
                  *v541 = *v511;
                  if ((_QWORD)v564 != (_QWORD)v565)
                    free((void *)v564);
LABEL_621:
                  v483 = v9 + 96;
                  ++v484;
                  if (v9 + 96 == a2)
                    return *(double *)&v101;
                  goto LABEL_622;
                }
              }
              else if (v528)
              {
                goto LABEL_670;
              }
              ++v510;
            }
          }
          v496 = (char *)*((_QWORD *)v486 + 14);
          v497 = v496 - v492;
          *((_QWORD *)&v564 + 1) = &v566[v496 - v492];
          if (v496 == v492)
            goto LABEL_645;
          if (v497 < 8)
          {
            v498 = v566;
          }
          else
          {
            v498 = v566;
            if ((unint64_t)(v566 - v492) >= 0x20)
            {
              if (v497 < 0x20)
              {
                v499 = 0;
LABEL_639:
                v504 = v497 & 0xFFFFFFFFFFFFFFF8;
                v498 = &v566[v497 & 0xFFFFFFFFFFFFFFF8];
                v505 = v499 - (v497 & 0xFFFFFFFFFFFFFFF8);
                v506 = (uint64_t *)&v492[v499];
                v507 = &v566[v499];
                do
                {
                  v508 = *v506++;
                  *v507++ = v508;
                  v505 += 8;
                }
                while (v505);
                if (v497 == v504)
                  goto LABEL_645;
                v492 += v504;
                goto LABEL_644;
              }
              v499 = v497 & 0xFFFFFFFFFFFFFFE0;
              v500 = (__int128 *)(v492 + 16);
              v501 = v567;
              v502 = v497 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v503 = *v500;
                *(v501 - 1) = *(v500 - 1);
                *v501 = v503;
                v500 += 2;
                v501 += 2;
                v502 -= 32;
              }
              while (v502);
              if (v497 == v499)
                goto LABEL_645;
              if ((v497 & 0x18) != 0)
                goto LABEL_639;
              v492 += v499;
              v498 = &v566[v499];
            }
          }
          do
          {
LABEL_644:
            v509 = *v492++;
            *v498++ = v509;
          }
          while (v492 != v496);
          goto LABEL_645;
        }
        if (a3)
        {
          v12 = (unint64_t)v11 >> 1;
          v13 = &v9[96 * ((unint64_t)v11 >> 1)];
          if ((unint64_t)v10 <= 0x3000)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(v13, v9, (unsigned __int8 *)n);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(v9, v13, (unsigned __int8 *)n);
            v14 = 96 * v12;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(v9 + 96, &v9[v14 - 96], v546);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(v9 + 192, &v9[v14 + 96], v545);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(&v9[v14 - 96], v13, &v9[v14 + 96]);
            std::swap[abi:nn180100]<gdc::ResourceKey>((uint64_t *)v9, (uint64_t *)v13);
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            v15 = *((unsigned __int16 *)v9 - 47);
            v16 = *((unsigned __int16 *)v9 + 1);
            v17 = v15 >= v16;
            if (v15 == v16 && (v18 = *(v9 - 96), v19 = *v9, v17 = v18 >= v19, v18 == v19))
            {
              if (gdc::GenericKey::operator<(*((_QWORD *)v9 - 11), *((_QWORD *)v9 - 10), *((_QWORD *)v9 + 1), *((_QWORD *)v9 + 2)))
              {
                goto LABEL_15;
              }
            }
            else if (!v17)
            {
              goto LABEL_15;
            }
            v563 = *(_QWORD *)v9;
            *(_QWORD *)&v564 = v566;
            v20 = (char *)*((_QWORD *)v9 + 1);
            v21 = *((_QWORD *)v9 + 4);
            *(_QWORD *)&v565 = v566;
            *((_QWORD *)&v565 + 1) = v21;
            if (v20 == *((char **)v9 + 3))
            {
              v79 = (char *)*((_QWORD *)v9 + 2);
              v80 = v79 - v20;
              *((_QWORD *)&v564 + 1) = &v566[v79 - v20];
              if (v79 == v20)
                goto LABEL_139;
              if (v80 < 8)
              {
                v81 = v566;
              }
              else
              {
                v81 = v566;
                if ((unint64_t)(v566 - v20) >= 0x20)
                {
                  if (v80 < 0x20)
                  {
                    v82 = 0;
                    goto LABEL_133;
                  }
                  v82 = v80 & 0xFFFFFFFFFFFFFFE0;
                  v102 = (__int128 *)(v20 + 16);
                  v103 = v567;
                  v104 = v80 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v105 = *v102;
                    *(v103 - 1) = *(v102 - 1);
                    *v103 = v105;
                    v102 += 2;
                    v103 += 2;
                    v104 -= 32;
                  }
                  while (v104);
                  if (v80 == v82)
                    goto LABEL_139;
                  if ((v80 & 0x18) != 0)
                  {
LABEL_133:
                    v106 = v80 & 0xFFFFFFFFFFFFFFF8;
                    v81 = &v566[v80 & 0xFFFFFFFFFFFFFFF8];
                    v107 = v82 - (v80 & 0xFFFFFFFFFFFFFFF8);
                    v108 = (uint64_t *)&v20[v82];
                    v109 = &v566[v82];
                    do
                    {
                      v110 = *v108++;
                      *v109++ = v110;
                      v107 += 8;
                    }
                    while (v107);
                    if (v80 == v106)
                      goto LABEL_139;
                    v20 += v106;
                  }
                  else
                  {
                    v20 += v82;
                    v81 = &v566[v82];
                  }
                }
              }
              do
              {
                v111 = *v20++;
                *v81++ = v111;
              }
              while (v20 != v79);
              goto LABEL_139;
            }
            v22 = *((_QWORD *)v9 + 2);
            *(_QWORD *)&v564 = v20;
            *((_QWORD *)&v564 + 1) = v22;
            *(_OWORD *)(v9 + 8) = 0u;
            *(_OWORD *)(v9 + 24) = 0u;
LABEL_139:
            v112 = n;
            v568 = *((_QWORD *)v9 + 9);
            v569 = *((_OWORD *)v9 + 5);
            v113 = WORD1(v563);
            v114 = *((unsigned __int16 *)v552 - 47);
            v543 = a3;
            if (WORD1(v563) == v114)
            {
              v115 = v563;
              v116 = *(unsigned __int8 *)v112;
              if (v563 == v116)
              {
                if (gdc::GenericKey::operator<(v564, *((uint64_t *)&v564 + 1), *((_QWORD *)v552 - 11), *((_QWORD *)v552 - 10)))
                {
                  goto LABEL_144;
                }
              }
              else if (v563 < v116)
              {
LABEL_144:
                v118 = *((_QWORD *)&v564 + 1);
                v117 = v564;
                for (k = v9 + 96; ; k += 96)
                {
                  v119 = *((unsigned __int16 *)k + 1);
                  v120 = v113 >= v119;
                  if (v113 == v119 && (v121 = *k, v120 = v115 >= v121, v115 == v121))
                  {
                    if (gdc::GenericKey::operator<(v117, v118, *((_QWORD *)k + 1), *((_QWORD *)k + 2)))
                      goto LABEL_161;
                  }
                  else if (!v120)
                  {
                    goto LABEL_161;
                  }
                }
              }
            }
            else
            {
              v115 = v563;
              if (WORD1(v563) < v114)
                goto LABEL_144;
            }
            v118 = *((_QWORD *)&v564 + 1);
            v117 = v564;
            for (k = v9 + 96; k < v552; k += 96)
            {
              v122 = *((unsigned __int16 *)k + 1);
              v123 = v113 >= v122;
              if (v113 == v122 && (v124 = *k, v123 = v115 >= v124, v115 == v124))
              {
                if (gdc::GenericKey::operator<(v117, v118, *((_QWORD *)k + 1), *((_QWORD *)k + 2)))
                  break;
              }
              else if (!v123)
              {
                break;
              }
            }
LABEL_161:
            v125 = v9;
            v126 = (uint64_t *)v552;
            if (k >= v552)
              goto LABEL_169;
            for (m = v544; ; m -= 12)
            {
              v128 = v113 >= v114;
              if (v113 == v114)
              {
                v129 = *((unsigned __int8 *)m - 8);
                v128 = v115 >= v129;
                if (v115 == v129)
                  break;
              }
              if (v128)
                goto LABEL_168;
LABEL_164:
              v114 = *((unsigned __int16 *)m - 51);
            }
            if (gdc::GenericKey::operator<(v117, v118, *m, m[1]))
              goto LABEL_164;
LABEL_168:
            v126 = m - 1;
LABEL_169:
            n = v112;
LABEL_170:
            if (k < (unsigned __int8 *)v126)
            {
              std::swap[abi:nn180100]<gdc::ResourceKey>((uint64_t *)k, v126);
              v130 = WORD1(v563);
              v131 = v563;
              k += 96;
              v132 = v564;
              while (1)
              {
                v133 = *((unsigned __int16 *)k + 1);
                v134 = v130 >= v133;
                if (v130 == v133 && (v135 = *k, v134 = v131 >= v135, v131 == v135))
                {
                  if (gdc::GenericKey::operator<(v132, *((uint64_t *)&v132 + 1), *((_QWORD *)k + 1), *((_QWORD *)k + 2)))
                  {
                    do
                    {
                      while (1)
                      {
LABEL_180:
                        while (1)
                        {
                          v126 -= 12;
                          v136 = *((unsigned __int16 *)v126 + 1);
                          if (v130 == v136)
                            break;
                          if (v130 >= v136)
                            goto LABEL_170;
                        }
                        v137 = *(unsigned __int8 *)v126;
                        if (v131 != v137)
                          break;
                        if (!gdc::GenericKey::operator<(v132, *((uint64_t *)&v132 + 1), v126[1], v126[2]))
                          goto LABEL_170;
                      }
                    }
                    while (v131 < v137);
                    goto LABEL_170;
                  }
                }
                else if (!v134)
                {
                  goto LABEL_180;
                }
                k += 96;
              }
            }
            if (k - 96 == v125)
              goto LABEL_207;
            *(_QWORD *)v125 = *((_QWORD *)k - 12);
            v138 = (void *)*((_QWORD *)v125 + 1);
            if (v138 != *((void **)v125 + 3))
              free(v138);
            v139 = v125 + 40;
            *((_QWORD *)v125 + 3) = v125 + 40;
            v140 = *((_QWORD *)k - 11);
            if (v140 != *((_QWORD *)k - 9))
            {
              v141 = k - 88;
              *((_QWORD *)v125 + 1) = v140;
              *((_QWORD *)v125 + 2) = *((_QWORD *)k - 10);
              *(_OWORD *)v141 = 0u;
              *((_OWORD *)v141 + 1) = 0u;
              goto LABEL_206;
            }
            *((_QWORD *)v125 + 1) = v139;
            v142 = (char *)*((_QWORD *)k - 11);
            *((_QWORD *)v125 + 2) = &v139[*((_QWORD *)k - 10) - (_QWORD)v142];
            v143 = (char *)*((_QWORD *)k - 10);
            if (v142 == v143)
              goto LABEL_206;
            v144 = v143 - v142;
            if ((unint64_t)(v143 - v142) < 8 || (unint64_t)(v125 - (unsigned __int8 *)v142 + 40) < 0x20)
              goto LABEL_205;
            if (v144 >= 0x20)
            {
              v145 = v144 & 0xFFFFFFFFFFFFFFE0;
              v146 = (__int128 *)(v142 + 16);
              v147 = v125 + 56;
              v148 = v144 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v149 = *v146;
                *(v147 - 1) = *(v146 - 1);
                *v147 = v149;
                v146 += 2;
                v147 += 2;
                v148 -= 32;
              }
              while (v148);
              if (v144 == v145)
                goto LABEL_206;
              if ((v144 & 0x18) != 0)
                goto LABEL_200;
              v142 += v145;
              v139 += v145;
              do
              {
LABEL_205:
                v155 = *v142++;
                *v139++ = v155;
              }
              while (v142 != v143);
              goto LABEL_206;
            }
            v145 = 0;
LABEL_200:
            v150 = v144 & 0xFFFFFFFFFFFFFFF8;
            v139 += v144 & 0xFFFFFFFFFFFFFFF8;
            v151 = v145 - (v144 & 0xFFFFFFFFFFFFFFF8);
            v152 = (uint64_t *)&v142[v145];
            v153 = &v125[v145 + 40];
            do
            {
              v154 = *v152++;
              *(_QWORD *)v153 = v154;
              v153 += 8;
              v151 += 8;
            }
            while (v151);
            if (v144 != v150)
            {
              v142 += v150;
              goto LABEL_205;
            }
LABEL_206:
            *((_QWORD *)v125 + 4) = *((_QWORD *)k - 8);
            *((_QWORD *)v125 + 9) = *((_QWORD *)k - 3);
            *((_OWORD *)v125 + 5) = *((_OWORD *)k - 1);
LABEL_207:
            *((_QWORD *)k - 12) = v563;
            a2 = v552;
            a3 = v543;
            if (k - 96 == (unsigned __int8 *)&v563)
              goto LABEL_228;
            v156 = (void *)*((_QWORD *)k - 11);
            if (v156 != *((void **)k - 9))
              free(v156);
            v157 = k - 56;
            *((_QWORD *)k - 9) = k - 56;
            if ((_QWORD)v564 != (_QWORD)v565)
            {
              *(_OWORD *)(k - 88) = v564;
              v564 = 0u;
              v565 = 0u;
              goto LABEL_227;
            }
            *((_QWORD *)k - 11) = v157;
            v158 = (unsigned __int8 *)v564;
            *((_QWORD *)k - 10) = &v157[*((_QWORD *)&v564 + 1) - v564];
            v159 = (unsigned __int8 *)*((_QWORD *)&v564 + 1);
            if (v158 == *((unsigned __int8 **)&v564 + 1))
              goto LABEL_227;
            v160 = *((_QWORD *)&v564 + 1) - (_QWORD)v158;
            if (*((_QWORD *)&v564 + 1) - (_QWORD)v158 < 8uLL || (unint64_t)(k - v158 - 56) < 0x20)
              goto LABEL_226;
            if (v160 >= 0x20)
            {
              v161 = v160 & 0xFFFFFFFFFFFFFFE0;
              v162 = (__int128 *)(v158 + 16);
              v163 = k - 56;
              v164 = v160 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v165 = *v162;
                *(_OWORD *)v163 = *(v162 - 1);
                *((_OWORD *)v163 + 1) = v165;
                v163 += 32;
                v162 += 2;
                v164 -= 32;
              }
              while (v164);
              if (v160 == v161)
                goto LABEL_227;
              if ((v160 & 0x18) != 0)
                goto LABEL_221;
              v158 += v161;
              v157 += v161;
              do
              {
LABEL_226:
                v171 = *v158++;
                *v157++ = v171;
              }
              while (v158 != v159);
              goto LABEL_227;
            }
            v161 = 0;
LABEL_221:
            v166 = v160 & 0xFFFFFFFFFFFFFFF8;
            v157 += v160 & 0xFFFFFFFFFFFFFFF8;
            v167 = v161 - (v160 & 0xFFFFFFFFFFFFFFF8);
            v168 = (uint64_t *)&v158[v161];
            v169 = &k[v161 - 56];
            do
            {
              v170 = *v168++;
              *(_QWORD *)v169 = v170;
              v169 += 8;
              v167 += 8;
            }
            while (v167);
            if (v160 != v166)
            {
              v158 += v166;
              goto LABEL_226;
            }
LABEL_227:
            *((_QWORD *)k - 8) = *((_QWORD *)&v565 + 1);
LABEL_228:
            *((_QWORD *)k - 3) = v568;
            *(_QWORD *)&v101 = v569;
            *((_OWORD *)k - 1) = v569;
            if ((_QWORD)v564 != (_QWORD)v565)
              free((void *)v564);
            a4 = 0;
            continue;
          }
LABEL_15:
          v563 = *(_QWORD *)v9;
          *(_QWORD *)&v564 = v566;
          v23 = (char *)*((_QWORD *)v9 + 1);
          v24 = *((_QWORD *)v9 + 4);
          *(_QWORD *)&v565 = v566;
          *((_QWORD *)&v565 + 1) = v24;
          if (v23 != *((char **)v9 + 3))
          {
            v25 = *((_QWORD *)v9 + 2);
            *(_QWORD *)&v564 = v23;
            *((_QWORD *)&v564 + 1) = v25;
            *(_OWORD *)(v9 + 8) = 0u;
            *(_OWORD *)(v9 + 24) = 0u;
            goto LABEL_33;
          }
          v26 = (char *)*((_QWORD *)v9 + 2);
          v27 = v26 - v23;
          *((_QWORD *)&v564 + 1) = &v566[v26 - v23];
          if (v26 == v23)
            goto LABEL_33;
          if (v27 < 8)
          {
            v28 = v566;
            goto LABEL_32;
          }
          v28 = v566;
          if ((unint64_t)(v566 - v23) < 0x20)
            goto LABEL_32;
          if (v27 >= 0x20)
          {
            v29 = v27 & 0xFFFFFFFFFFFFFFE0;
            v30 = (__int128 *)(v23 + 16);
            v31 = v567;
            v32 = v27 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v33 = *v30;
              *(v31 - 1) = *(v30 - 1);
              *v31 = v33;
              v30 += 2;
              v31 += 2;
              v32 -= 32;
            }
            while (v32);
            if (v27 == v29)
              goto LABEL_33;
            if ((v27 & 0x18) != 0)
              goto LABEL_27;
            v23 += v29;
            v28 = &v566[v29];
            do
            {
LABEL_32:
              v39 = *v23++;
              *v28++ = v39;
            }
            while (v23 != v26);
            goto LABEL_33;
          }
          v29 = 0;
LABEL_27:
          v34 = v27 & 0xFFFFFFFFFFFFFFF8;
          v28 = &v566[v27 & 0xFFFFFFFFFFFFFFF8];
          v35 = v29 - (v27 & 0xFFFFFFFFFFFFFFF8);
          v36 = (uint64_t *)&v23[v29];
          v37 = &v566[v29];
          do
          {
            v38 = *v36++;
            *v37++ = v38;
            v35 += 8;
          }
          while (v35);
          if (v27 != v34)
          {
            v23 += v34;
            goto LABEL_32;
          }
LABEL_33:
          v568 = *((_QWORD *)v9 + 9);
          v569 = *((_OWORD *)v9 + 5);
          v40 = WORD1(v563);
          v41 = v563;
          v42 = v564;
          v43 = v9 + 96;
          while (2)
          {
            v44 = *((unsigned __int16 *)v43 + 1);
            v45 = v44 >= v40;
            if (v44 != v40 || (v46 = *v43, v45 = v46 >= v41, v46 != v41))
            {
              if (v45)
                goto LABEL_39;
LABEL_35:
              v43 += 96;
              continue;
            }
            break;
          }
          if (gdc::GenericKey::operator<(*((_QWORD *)v43 + 1), *((_QWORD *)v43 + 2), v42, *((uint64_t *)&v42 + 1)))
            goto LABEL_35;
LABEL_39:
          if (v43 - 96 != v9)
          {
            while (1)
            {
              v47 = *((unsigned __int16 *)n + 1);
              v48 = v47 >= v40;
              if (v47 == v40 && (v49 = *(unsigned __int8 *)n, v48 = v49 >= v41, v49 == v41))
              {
                if (gdc::GenericKey::operator<(n[1], n[2], v42, *((uint64_t *)&v42 + 1)))
                  goto LABEL_57;
              }
              else if (!v48)
              {
                goto LABEL_57;
              }
              n -= 12;
            }
          }
          for (n = v549; v43 < (unsigned __int8 *)n + 96; n -= 12)
          {
            v50 = *((unsigned __int16 *)n + 1);
            v51 = v50 >= v40;
            if (v50 == v40 && (v52 = *(unsigned __int8 *)n, v51 = v52 >= v41, v52 == v41))
            {
              if (gdc::GenericKey::operator<(n[1], n[2], v42, *((uint64_t *)&v42 + 1)))
                goto LABEL_57;
            }
            else if (!v51)
            {
              goto LABEL_57;
            }
          }
          n += 12;
LABEL_57:
          k = v43;
          if (v43 < (unsigned __int8 *)n)
          {
            k = v43;
            v53 = n;
            do
            {
              std::swap[abi:nn180100]<gdc::ResourceKey>((uint64_t *)k, v53);
              v54 = WORD1(v563);
              v55 = v563;
              k += 96;
              v56 = v564;
              while (1)
              {
                v57 = *((unsigned __int16 *)k + 1);
                v58 = v57 >= v54;
                if (v57 == v54)
                {
                  v59 = *k;
                  v58 = v59 >= v55;
                  if (v59 == v55)
                    break;
                }
                if (v58)
                  goto LABEL_68;
LABEL_62:
                k += 96;
              }
              if (gdc::GenericKey::operator<(*((_QWORD *)k + 1), *((_QWORD *)k + 2), v56, *((uint64_t *)&v56 + 1)))
                goto LABEL_62;
              do
              {
                while (1)
                {
LABEL_68:
                  while (1)
                  {
                    v53 -= 12;
                    v60 = *((unsigned __int16 *)v53 + 1);
                    if (v60 == v54)
                      break;
                    if (v60 < v54)
                      goto LABEL_59;
                  }
                  v61 = *(unsigned __int8 *)v53;
                  if (v61 != v55)
                    break;
                  if (gdc::GenericKey::operator<(v53[1], v53[2], v56, *((uint64_t *)&v56 + 1)))
                    goto LABEL_59;
                }
              }
              while (v61 >= v55);
LABEL_59:
              ;
            }
            while (k < (unsigned __int8 *)v53);
          }
          a1 = v9;
          a2 = v552;
          if (k - 96 == v9)
            goto LABEL_100;
          *(_QWORD *)v9 = *((_QWORD *)k - 12);
          v62 = (void *)*((_QWORD *)v9 + 1);
          if (v62 != *((void **)v9 + 3))
            free(v62);
          v63 = v9 + 40;
          *((_QWORD *)v9 + 3) = v9 + 40;
          v64 = *((_QWORD *)k - 11);
          if (v64 != *((_QWORD *)k - 9))
          {
            v65 = k - 88;
            *((_QWORD *)v9 + 1) = v64;
            *((_QWORD *)v9 + 2) = *((_QWORD *)k - 10);
            *(_OWORD *)v65 = 0u;
            *((_OWORD *)v65 + 1) = 0u;
            goto LABEL_99;
          }
          *((_QWORD *)v9 + 1) = v63;
          v66 = (char *)*((_QWORD *)k - 11);
          *((_QWORD *)v9 + 2) = &v63[*((_QWORD *)k - 10) - (_QWORD)v66];
          v67 = (char *)*((_QWORD *)k - 10);
          if (v66 == v67)
            goto LABEL_99;
          v68 = v67 - v66;
          if ((unint64_t)(v67 - v66) < 8 || (unint64_t)(v9 - (unsigned __int8 *)v66 + 40) < 0x20)
            goto LABEL_98;
          if (v68 >= 0x20)
          {
            v69 = v68 & 0xFFFFFFFFFFFFFFE0;
            v70 = (__int128 *)(v66 + 16);
            v71 = v9 + 56;
            v72 = v68 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v73 = *v70;
              *(v71 - 1) = *(v70 - 1);
              *v71 = v73;
              v70 += 2;
              v71 += 2;
              v72 -= 32;
            }
            while (v72);
            if (v68 == v69)
              goto LABEL_99;
            if ((v68 & 0x18) != 0)
              goto LABEL_88;
            v66 += v69;
            v63 += v69;
            do
            {
LABEL_98:
              v83 = *v66++;
              *v63++ = v83;
            }
            while (v66 != v67);
            goto LABEL_99;
          }
          v69 = 0;
LABEL_88:
          v74 = v68 & 0xFFFFFFFFFFFFFFF8;
          v63 += v68 & 0xFFFFFFFFFFFFFFF8;
          v75 = v69 - (v68 & 0xFFFFFFFFFFFFFFF8);
          v76 = (uint64_t *)&v66[v69];
          v77 = &v9[v69 + 40];
          do
          {
            v78 = *v76++;
            *(_QWORD *)v77 = v78;
            v77 += 8;
            v75 += 8;
          }
          while (v75);
          if (v68 != v74)
          {
            v66 += v74;
            goto LABEL_98;
          }
LABEL_99:
          *((_QWORD *)v9 + 4) = *((_QWORD *)k - 8);
          *((_QWORD *)v9 + 9) = *((_QWORD *)k - 3);
          *((_OWORD *)v9 + 5) = *((_OWORD *)k - 1);
LABEL_100:
          *((_QWORD *)k - 12) = v563;
          if (k - 96 == (unsigned __int8 *)&v563)
            goto LABEL_121;
          v84 = (void *)*((_QWORD *)k - 11);
          if (v84 != *((void **)k - 9))
            free(v84);
          v85 = k - 56;
          *((_QWORD *)k - 9) = k - 56;
          if ((_QWORD)v564 != (_QWORD)v565)
          {
            *(_OWORD *)(k - 88) = v564;
            v564 = 0u;
            v565 = 0u;
            goto LABEL_120;
          }
          *((_QWORD *)k - 11) = v85;
          v86 = (unsigned __int8 *)v564;
          *((_QWORD *)k - 10) = &v85[*((_QWORD *)&v564 + 1) - v564];
          v87 = (unsigned __int8 *)*((_QWORD *)&v564 + 1);
          if (v86 == *((unsigned __int8 **)&v564 + 1))
            goto LABEL_120;
          v88 = *((_QWORD *)&v564 + 1) - (_QWORD)v86;
          if (*((_QWORD *)&v564 + 1) - (_QWORD)v86 < 8uLL || (unint64_t)(k - v86 - 56) < 0x20)
            goto LABEL_119;
          if (v88 >= 0x20)
          {
            v89 = v88 & 0xFFFFFFFFFFFFFFE0;
            v90 = (__int128 *)(v86 + 16);
            v91 = k - 56;
            v92 = v88 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v93 = *v90;
              *(_OWORD *)v91 = *(v90 - 1);
              *((_OWORD *)v91 + 1) = v93;
              v91 += 32;
              v90 += 2;
              v92 -= 32;
            }
            while (v92);
            if (v88 == v89)
              goto LABEL_120;
            if ((v88 & 0x18) != 0)
              goto LABEL_114;
            v86 += v89;
            v85 += v89;
            do
            {
LABEL_119:
              v99 = *v86++;
              *v85++ = v99;
            }
            while (v86 != v87);
            goto LABEL_120;
          }
          v89 = 0;
LABEL_114:
          v94 = v88 & 0xFFFFFFFFFFFFFFF8;
          v85 += v88 & 0xFFFFFFFFFFFFFFF8;
          v95 = v89 - (v88 & 0xFFFFFFFFFFFFFFF8);
          v96 = (uint64_t *)&v86[v89];
          v97 = &k[v89 - 56];
          do
          {
            v98 = *v96++;
            *(_QWORD *)v97 = v98;
            v97 += 8;
            v95 += 8;
          }
          while (v95);
          if (v88 != v94)
          {
            v86 += v94;
            goto LABEL_119;
          }
LABEL_120:
          *((_QWORD *)k - 8) = *((_QWORD *)&v565 + 1);
LABEL_121:
          *((_QWORD *)k - 3) = v568;
          *((_OWORD *)k - 1) = v569;
          if ((_QWORD)v564 != (_QWORD)v565)
            free((void *)v564);
          v17 = v43 >= (unsigned __int8 *)n;
          n = v549;
          if (!v17)
            goto LABEL_127;
          v100 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(v9, k - 96);
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(k, v552))
          {
            if (v100)
              continue;
LABEL_127:
            std::__introsort<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *,false>(v9, k - 96, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = k - 96;
          if (v100)
            return *(double *)&v101;
          goto LABEL_1;
        }
        if (v9 == a2)
          return *(double *)&v101;
        v238 = (unint64_t)(v11 - 2) >> 1;
        v239 = v238;
        do
        {
          v240 = v239;
          if (v238 < v239)
            goto LABEL_324;
          v241 = (2 * v239) | 1;
          v242 = &v9[96 * v241];
          if (2 * v239 + 2 < v11)
          {
            v243 = *(unsigned __int16 *)&v9[96 * v241 + 2];
            v244 = *((unsigned __int16 *)v242 + 49);
            v245 = v243 >= v244;
            if (v243 == v244 && (v246 = *v242, v247 = v242[96], v245 = v246 >= v247, v246 == v247))
              v248 = gdc::GenericKey::operator<(*(_QWORD *)&v9[96 * v241 + 8], *(_QWORD *)&v9[96 * v241 + 16], *((_QWORD *)v242 + 13), *((_QWORD *)v242 + 14));
            else
              v248 = !v245;
            if (v248)
            {
              v242 += 96;
              v241 = 2 * v240 + 2;
            }
          }
          v249 = &v9[96 * v240];
          v250 = *((unsigned __int16 *)v242 + 1);
          v251 = *((unsigned __int16 *)v249 + 1);
          v252 = v250 >= v251;
          if (v250 == v251 && (v253 = *v242, v254 = *v249, v252 = v253 >= v254, v253 == v254))
          {
            if (gdc::GenericKey::operator<(*((_QWORD *)v242 + 1), *((_QWORD *)v242 + 2), *(_QWORD *)&v9[96 * v240 + 8], *(_QWORD *)&v9[96 * v240 + 16]))
            {
              goto LABEL_324;
            }
          }
          else if (!v252)
          {
            goto LABEL_324;
          }
          v255 = &v9[96 * v240];
          v563 = *(_QWORD *)v249;
          *(_QWORD *)&v564 = v566;
          v258 = (char *)*((_QWORD *)v255 + 1);
          v257 = v255 + 8;
          v256 = v258;
          *(_QWORD *)&v565 = v566;
          *((_QWORD *)&v565 + 1) = *((_QWORD *)v257 + 3);
          if (v258 == *((char **)v257 + 2))
          {
            v259 = *(char **)&v9[96 * v240 + 16];
            v260 = v259 - v256;
            *((_QWORD *)&v564 + 1) = &v566[v259 - v256];
            if (v259 == v256)
              goto LABEL_359;
            if (v260 < 8)
            {
              v261 = v566;
            }
            else
            {
              v261 = v566;
              if ((unint64_t)(v566 - v256) >= 0x20)
              {
                if (v260 < 0x20)
                {
                  v262 = 0;
LABEL_353:
                  v267 = v260 & 0xFFFFFFFFFFFFFFF8;
                  v261 = &v566[v260 & 0xFFFFFFFFFFFFFFF8];
                  v268 = v262 - (v260 & 0xFFFFFFFFFFFFFFF8);
                  v269 = (uint64_t *)&v256[v262];
                  v270 = &v566[v262];
                  do
                  {
                    v271 = *v269++;
                    *v270++ = v271;
                    v268 += 8;
                  }
                  while (v268);
                  if (v260 == v267)
                    goto LABEL_359;
                  v256 += v267;
                  goto LABEL_358;
                }
                v262 = v260 & 0xFFFFFFFFFFFFFFE0;
                v263 = (__int128 *)(v256 + 16);
                v264 = v567;
                v265 = v260 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v266 = *v263;
                  *(v264 - 1) = *(v263 - 1);
                  *v264 = v266;
                  v263 += 2;
                  v264 += 2;
                  v265 -= 32;
                }
                while (v265);
                if (v260 == v262)
                  goto LABEL_359;
                if ((v260 & 0x18) != 0)
                  goto LABEL_353;
                v256 += v262;
                v261 = &v566[v262];
              }
            }
            do
            {
LABEL_358:
              v272 = *v256++;
              *v261++ = v272;
            }
            while (v256 != v259);
            goto LABEL_359;
          }
          *(_QWORD *)&v564 = v256;
          *((_QWORD *)&v564 + 1) = *(_QWORD *)&v9[96 * v240 + 16];
          *(_OWORD *)v257 = 0u;
          *((_OWORD *)v257 + 1) = 0u;
LABEL_359:
          v273 = &v9[96 * v240];
          v568 = *((_QWORD *)v273 + 9);
          v569 = *((_OWORD *)v273 + 5);
          do
          {
            while (1)
            {
              v274 = v242;
              v276 = *(_QWORD *)v242;
              v275 = v242 + 8;
              *(_QWORD *)v249 = v276;
              if (v249 == v274)
                goto LABEL_383;
              v277 = (void *)*((_QWORD *)v249 + 1);
              if (v277 != *((void **)v249 + 3))
                free(v277);
              v278 = v249 + 40;
              *((_QWORD *)v249 + 3) = v249 + 40;
              v279 = *((_QWORD *)v274 + 1);
              if (v279 == *((_QWORD *)v274 + 3))
              {
                *((_QWORD *)v249 + 1) = v278;
                v280 = (char *)*((_QWORD *)v274 + 1);
                *((_QWORD *)v249 + 2) = &v278[*((_QWORD *)v274 + 2) - (_QWORD)v280];
                v281 = (char *)*((_QWORD *)v274 + 2);
                if (v280 == v281)
                  goto LABEL_382;
                v282 = v281 - v280;
                if ((unint64_t)(v281 - v280) >= 8
                  && (unint64_t)(v249 - (unsigned __int8 *)v280 + 40) >= 0x20)
                {
                  if (v282 < 0x20)
                  {
                    v283 = 0;
                    goto LABEL_376;
                  }
                  v283 = v282 & 0xFFFFFFFFFFFFFFE0;
                  v284 = (__int128 *)(v280 + 16);
                  v285 = v249 + 56;
                  v286 = v282 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v287 = *v284;
                    *(v285 - 1) = *(v284 - 1);
                    *v285 = v287;
                    v284 += 2;
                    v285 += 2;
                    v286 -= 32;
                  }
                  while (v286);
                  if (v282 == v283)
                    goto LABEL_382;
                  if ((v282 & 0x18) != 0)
                  {
LABEL_376:
                    v288 = v282 & 0xFFFFFFFFFFFFFFF8;
                    v278 += v282 & 0xFFFFFFFFFFFFFFF8;
                    v289 = v283 - (v282 & 0xFFFFFFFFFFFFFFF8);
                    v290 = (uint64_t *)&v280[v283];
                    v291 = &v249[v283 + 40];
                    do
                    {
                      v292 = *v290++;
                      *(_QWORD *)v291 = v292;
                      v291 += 8;
                      v289 += 8;
                    }
                    while (v289);
                    if (v282 == v288)
                      goto LABEL_382;
                    v280 += v288;
                  }
                  else
                  {
                    v280 += v283;
                    v278 += v283;
                  }
                }
                do
                {
                  v293 = *v280++;
                  *v278++ = v293;
                }
                while (v280 != v281);
                goto LABEL_382;
              }
              *((_QWORD *)v249 + 1) = v279;
              *((_QWORD *)v249 + 2) = *((_QWORD *)v274 + 2);
              *v275 = 0u;
              v275[1] = 0u;
LABEL_382:
              *((_QWORD *)v249 + 4) = *((_QWORD *)v274 + 4);
LABEL_383:
              *((_QWORD *)v249 + 9) = *((_QWORD *)v274 + 9);
              *((_OWORD *)v249 + 5) = *((_OWORD *)v274 + 5);
              if (v238 < v241)
                goto LABEL_398;
              v294 = (2 * v241) | 1;
              v242 = &v9[96 * v294];
              v241 = 2 * v241 + 2;
              if (v241 >= v11)
              {
                v241 = v294;
              }
              else
              {
                v295 = *(unsigned __int16 *)&v9[96 * v294 + 2];
                v296 = *((unsigned __int16 *)v242 + 49);
                v297 = v295 >= v296;
                if (v295 == v296 && (v298 = *v242, v299 = v242[96], v297 = v298 >= v299, v298 == v299))
                  v300 = gdc::GenericKey::operator<(*(_QWORD *)&v9[96 * v294 + 8], *(_QWORD *)&v9[96 * v294 + 16], *((_QWORD *)v242 + 13), *((_QWORD *)v242 + 14));
                else
                  v300 = !v297;
                if (v300)
                  v242 += 96;
                else
                  v241 = v294;
              }
              v301 = *((unsigned __int16 *)v242 + 1);
              v302 = v301 >= WORD1(v563);
              if (v301 == WORD1(v563))
              {
                v303 = *v242;
                v302 = v303 >= v563;
                if (v303 == v563)
                  break;
              }
              v249 = v274;
              if (!v302)
                goto LABEL_398;
            }
            v249 = v274;
          }
          while (!gdc::GenericKey::operator<(*((_QWORD *)v242 + 1), *((_QWORD *)v242 + 2), v564, *((uint64_t *)&v564 + 1)));
LABEL_398:
          *(_QWORD *)v274 = v563;
          if (v274 == (unsigned __int8 *)&v563)
            goto LABEL_419;
          v304 = (void *)*((_QWORD *)v274 + 1);
          if (v304 != *((void **)v274 + 3))
            free(v304);
          v305 = v274 + 40;
          *((_QWORD *)v274 + 3) = v274 + 40;
          if ((_QWORD)v564 != (_QWORD)v565)
          {
            *(_OWORD *)(v274 + 8) = v564;
            v564 = 0u;
            v565 = 0u;
            goto LABEL_418;
          }
          *((_QWORD *)v274 + 1) = v305;
          v306 = (char *)v564;
          *((_QWORD *)v274 + 2) = &v305[*((_QWORD *)&v564 + 1) - v564];
          v307 = (char *)*((_QWORD *)&v564 + 1);
          if (v306 == *((char **)&v564 + 1))
            goto LABEL_418;
          v308 = *((_QWORD *)&v564 + 1) - (_QWORD)v306;
          if (*((_QWORD *)&v564 + 1) - (_QWORD)v306 < 8uLL
            || (unint64_t)(v274 - (unsigned __int8 *)v306 + 40) < 0x20)
          {
            goto LABEL_417;
          }
          if (v308 >= 0x20)
          {
            v309 = v308 & 0xFFFFFFFFFFFFFFE0;
            v310 = (__int128 *)(v306 + 16);
            v311 = v274 + 56;
            v312 = v308 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v313 = *v310;
              *(v311 - 1) = *(v310 - 1);
              *v311 = v313;
              v310 += 2;
              v311 += 2;
              v312 -= 32;
            }
            while (v312);
            if (v308 == v309)
              goto LABEL_418;
            if ((v308 & 0x18) != 0)
              goto LABEL_412;
            v306 += v309;
            v305 += v309;
            do
            {
LABEL_417:
              v319 = *v306++;
              *v305++ = v319;
            }
            while (v306 != v307);
            goto LABEL_418;
          }
          v309 = 0;
LABEL_412:
          v314 = v308 & 0xFFFFFFFFFFFFFFF8;
          v305 += v308 & 0xFFFFFFFFFFFFFFF8;
          v315 = v309 - (v308 & 0xFFFFFFFFFFFFFFF8);
          v316 = (uint64_t *)&v306[v309];
          v317 = &v274[v309 + 40];
          do
          {
            v318 = *v316++;
            *(_QWORD *)v317 = v318;
            v317 += 8;
            v315 += 8;
          }
          while (v315);
          if (v308 != v314)
          {
            v306 += v314;
            goto LABEL_417;
          }
LABEL_418:
          *((_QWORD *)v274 + 4) = *((_QWORD *)&v565 + 1);
LABEL_419:
          *((_QWORD *)v274 + 9) = v568;
          *(_QWORD *)&v101 = v569;
          *((_OWORD *)v274 + 5) = v569;
          if ((_QWORD)v564 != (_QWORD)v565)
            free((void *)v564);
LABEL_324:
          v239 = v240 - 1;
        }
        while (v240);
        v320 = v10 / 0x60uLL;
        v321 = v9;
        v548 = v9 + 8;
        v550 = (__int128 *)(v9 + 80);
        v322 = v552;
        do
        {
          if (v320 < 2)
            goto LABEL_425;
          v556 = *(_QWORD *)v321;
          *(_QWORD *)&v557 = v559;
          v324 = *((_QWORD *)v321 + 4);
          *(_QWORD *)&v558 = v559;
          *((_QWORD *)&v558 + 1) = v324;
          v325 = (char *)*((_QWORD *)v321 + 1);
          if (v325 == *((char **)v321 + 3))
          {
            v327 = (char *)*((_QWORD *)v321 + 2);
            v328 = v327 - v325;
            *((_QWORD *)&v557 + 1) = &v559[v327 - v325];
            if (v327 == v325)
              goto LABEL_446;
            if (v328 < 8)
            {
              v329 = v559;
            }
            else
            {
              v329 = v559;
              if ((unint64_t)(v559 - v325) >= 0x20)
              {
                if (v328 < 0x20)
                {
                  v330 = 0;
LABEL_440:
                  v335 = v328 & 0xFFFFFFFFFFFFFFF8;
                  v329 = &v559[v328 & 0xFFFFFFFFFFFFFFF8];
                  v336 = v330 - (v328 & 0xFFFFFFFFFFFFFFF8);
                  v337 = (uint64_t *)&v325[v330];
                  v338 = &v559[v330];
                  do
                  {
                    v339 = *v337++;
                    *v338++ = v339;
                    v336 += 8;
                  }
                  while (v336);
                  if (v328 == v335)
                    goto LABEL_446;
                  v325 += v335;
                  goto LABEL_445;
                }
                v330 = v328 & 0xFFFFFFFFFFFFFFE0;
                v331 = (__int128 *)(v325 + 16);
                v332 = &v560;
                v333 = v328 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v334 = *v331;
                  *((_OWORD *)v332 - 1) = *(v331 - 1);
                  *(_OWORD *)v332 = v334;
                  v331 += 2;
                  v332 += 4;
                  v333 -= 32;
                }
                while (v333);
                if (v328 == v330)
                  goto LABEL_446;
                if ((v328 & 0x18) != 0)
                  goto LABEL_440;
                v325 += v330;
                v329 = &v559[v330];
              }
            }
            do
            {
LABEL_445:
              v340 = *v325++;
              *v329++ = v340;
            }
            while (v325 != v327);
            goto LABEL_446;
          }
          v326 = *((_QWORD *)v321 + 2);
          *(_QWORD *)&v557 = *((_QWORD *)v321 + 1);
          *((_QWORD *)&v557 + 1) = v326;
          *v548 = 0u;
          v548[1] = 0u;
LABEL_446:
          v341 = 0;
          v561 = *((_QWORD *)v321 + 9);
          v562 = *v550;
          do
          {
            v342 = v341 + 1;
            v343 = &v321[96 * v341 + 96];
            v344 = 2 * v341;
            v341 = (2 * v341) | 1;
            v345 = v344 + 2;
            if (v344 + 2 < v320)
            {
              v346 = *(unsigned __int16 *)&v321[96 * v342 + 2];
              v347 = *((unsigned __int16 *)v343 + 49);
              v348 = v346 >= v347;
              if (v346 == v347 && (v349 = *v343, v350 = v343[96], v348 = v349 >= v350, v349 == v350))
                v351 = gdc::GenericKey::operator<(*(_QWORD *)&v321[96 * v342 + 8], *(_QWORD *)&v321[96 * v342 + 16], *((_QWORD *)v343 + 13), *((_QWORD *)v343 + 14));
              else
                v351 = !v348;
              if (v351)
              {
                v343 += 96;
                v341 = v345;
              }
            }
            v352 = v343 + 8;
            *(_QWORD *)v321 = *(_QWORD *)v343;
            if (v321 != v343)
            {
              v353 = (void *)*((_QWORD *)v321 + 1);
              if (v353 != *((void **)v321 + 3))
                free(v353);
              v354 = v321 + 40;
              *((_QWORD *)v321 + 3) = v321 + 40;
              v355 = *((_QWORD *)v343 + 1);
              if (v355 == *((_QWORD *)v343 + 3))
              {
                *((_QWORD *)v321 + 1) = v354;
                v356 = (char *)*((_QWORD *)v343 + 1);
                *((_QWORD *)v321 + 2) = &v354[*((_QWORD *)v343 + 2) - (_QWORD)v356];
                v357 = (char *)*((_QWORD *)v343 + 2);
                if (v356 != v357)
                {
                  v358 = v357 - v356;
                  if ((unint64_t)(v357 - v356) >= 8
                    && (unint64_t)(v321 - (unsigned __int8 *)v356 + 40) >= 0x20)
                  {
                    if (v358 < 0x20)
                    {
                      v359 = 0;
LABEL_472:
                      v364 = v358 & 0xFFFFFFFFFFFFFFF8;
                      v354 += v358 & 0xFFFFFFFFFFFFFFF8;
                      v365 = v359 - (v358 & 0xFFFFFFFFFFFFFFF8);
                      v366 = (uint64_t *)&v356[v359];
                      v367 = &v321[v359 + 40];
                      do
                      {
                        v368 = *v366++;
                        *(_QWORD *)v367 = v368;
                        v367 += 8;
                        v365 += 8;
                      }
                      while (v365);
                      if (v358 == v364)
                        goto LABEL_448;
                      v356 += v364;
                      goto LABEL_477;
                    }
                    v359 = v358 & 0xFFFFFFFFFFFFFFE0;
                    v360 = (__int128 *)(v356 + 16);
                    v361 = v321 + 56;
                    v362 = v358 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      v363 = *v360;
                      *(v361 - 1) = *(v360 - 1);
                      *v361 = v363;
                      v360 += 2;
                      v361 += 2;
                      v362 -= 32;
                    }
                    while (v362);
                    if (v358 == v359)
                      goto LABEL_448;
                    if ((v358 & 0x18) != 0)
                      goto LABEL_472;
                    v356 += v359;
                    v354 += v359;
                  }
                  do
                  {
LABEL_477:
                    v369 = *v356++;
                    *v354++ = v369;
                  }
                  while (v356 != v357);
                }
              }
              else
              {
                *((_QWORD *)v321 + 1) = v355;
                *((_QWORD *)v321 + 2) = *((_QWORD *)v343 + 2);
                *v352 = 0u;
                *(_OWORD *)(v343 + 24) = 0u;
              }
LABEL_448:
              *((_QWORD *)v321 + 4) = *((_QWORD *)v343 + 4);
            }
            *((_QWORD *)v321 + 9) = *((_QWORD *)v343 + 9);
            *((_OWORD *)v321 + 5) = *((_OWORD *)v343 + 5);
            v321 = v343;
          }
          while (v341 <= (uint64_t)((unint64_t)(v320 - 2) >> 1));
          v370 = (__int128 *)(v343 + 80);
          if (v343 == v322 - 96)
          {
            *(_QWORD *)v343 = v556;
            if (v343 == (unsigned __int8 *)&v556)
            {
LABEL_612:
              *((_QWORD *)v343 + 9) = v561;
              *(_QWORD *)&v101 = v562;
              *v370 = v562;
              goto LABEL_616;
            }
            v375 = (void *)*((_QWORD *)v343 + 1);
            if (v375 != *((void **)v343 + 3))
              free(v375);
            v376 = v343 + 40;
            *((_QWORD *)v343 + 3) = v343 + 40;
            if ((_QWORD)v557 != (_QWORD)v558)
            {
              *(_OWORD *)(v343 + 8) = v557;
              v557 = 0u;
              v558 = 0u;
LABEL_611:
              *((_QWORD *)v343 + 4) = *((_QWORD *)&v558 + 1);
              goto LABEL_612;
            }
            *((_QWORD *)v343 + 1) = v376;
            v381 = (char *)v557;
            *((_QWORD *)v343 + 2) = &v376[*((_QWORD *)&v557 + 1) - v557];
            v382 = (char *)*((_QWORD *)&v557 + 1);
            if (v381 == *((char **)&v557 + 1))
              goto LABEL_611;
            v383 = *((_QWORD *)&v557 + 1) - (_QWORD)v381;
            if (*((_QWORD *)&v557 + 1) - (_QWORD)v381 >= 8uLL
              && (unint64_t)(v343 - (unsigned __int8 *)v381 + 40) >= 0x20)
            {
              if (v383 < 0x20)
              {
                v384 = 0;
LABEL_511:
                v398 = v383 & 0xFFFFFFFFFFFFFFF8;
                v376 += v383 & 0xFFFFFFFFFFFFFFF8;
                v399 = v384 - (v383 & 0xFFFFFFFFFFFFFFF8);
                v400 = (uint64_t *)&v381[v384];
                v401 = &v343[v384 + 40];
                do
                {
                  v402 = *v400++;
                  *(_QWORD *)v401 = v402;
                  v401 += 8;
                  v399 += 8;
                }
                while (v399);
                if (v383 == v398)
                  goto LABEL_611;
                v381 += v398;
                goto LABEL_610;
              }
              v384 = v383 & 0xFFFFFFFFFFFFFFE0;
              v394 = (__int128 *)(v381 + 16);
              v395 = v343 + 56;
              v396 = v383 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v397 = *v394;
                *(v395 - 1) = *(v394 - 1);
                *v395 = v397;
                v394 += 2;
                v395 += 2;
                v396 -= 32;
              }
              while (v396);
              if (v383 == v384)
                goto LABEL_611;
              if ((v383 & 0x18) != 0)
                goto LABEL_511;
              v381 += v384;
              v376 += v384;
            }
            do
            {
LABEL_610:
              v481 = *v381++;
              *v376++ = v481;
            }
            while (v381 != v382);
            goto LABEL_611;
          }
          *(_QWORD *)v343 = *((_QWORD *)v322 - 12);
          v371 = (void *)*((_QWORD *)v343 + 1);
          if (v371 != *((void **)v343 + 3))
            free(v371);
          v372 = v343 + 40;
          *((_QWORD *)v343 + 3) = v343 + 40;
          v373 = *((_QWORD *)v322 - 11);
          if (v373 != *((_QWORD *)v322 - 9))
          {
            v374 = v322 - 88;
            *((_QWORD *)v343 + 1) = v373;
            *((_QWORD *)v343 + 2) = *((_QWORD *)v322 - 10);
            *(_OWORD *)v374 = 0u;
            *((_OWORD *)v374 + 1) = 0u;
            goto LABEL_517;
          }
          *((_QWORD *)v343 + 1) = v372;
          v377 = (char *)*((_QWORD *)v322 - 11);
          *((_QWORD *)v343 + 2) = &v372[*((_QWORD *)v322 - 10) - (_QWORD)v377];
          v378 = (char *)*((_QWORD *)v322 - 10);
          if (v377 == v378)
            goto LABEL_517;
          v379 = v378 - v377;
          if ((unint64_t)(v378 - v377) < 8 || (unint64_t)(v343 - (unsigned __int8 *)v377 + 40) < 0x20)
            goto LABEL_516;
          if (v379 >= 0x20)
          {
            v380 = v379 & 0xFFFFFFFFFFFFFFE0;
            v385 = (__int128 *)(v377 + 16);
            v386 = v343 + 56;
            v387 = v379 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v388 = *v385;
              *(v386 - 1) = *(v385 - 1);
              *v386 = v388;
              v385 += 2;
              v386 += 2;
              v387 -= 32;
            }
            while (v387);
            if (v379 == v380)
              goto LABEL_517;
            if ((v379 & 0x18) != 0)
              goto LABEL_503;
            v377 += v380;
            v372 += v380;
            do
            {
LABEL_516:
              v403 = *v377++;
              *v372++ = v403;
            }
            while (v377 != v378);
            goto LABEL_517;
          }
          v380 = 0;
LABEL_503:
          v389 = v379 & 0xFFFFFFFFFFFFFFF8;
          v372 += v379 & 0xFFFFFFFFFFFFFFF8;
          v390 = v380 - (v379 & 0xFFFFFFFFFFFFFFF8);
          v391 = (uint64_t *)&v377[v380];
          v392 = &v343[v380 + 40];
          do
          {
            v393 = *v391++;
            *(_QWORD *)v392 = v393;
            v392 += 8;
            v390 += 8;
          }
          while (v390);
          if (v379 != v389)
          {
            v377 += v389;
            goto LABEL_516;
          }
LABEL_517:
          *((_QWORD *)v343 + 4) = *((_QWORD *)v322 - 8);
          *((_QWORD *)v343 + 9) = *((_QWORD *)v322 - 3);
          *v370 = *((_OWORD *)v322 - 1);
          *((_QWORD *)v322 - 12) = v556;
          if (v322 - 96 == (unsigned __int8 *)&v556)
            goto LABEL_538;
          v404 = (void *)*((_QWORD *)v322 - 11);
          if (v404 != *((void **)v322 - 9))
            free(v404);
          v405 = v322 - 56;
          *((_QWORD *)v322 - 9) = v322 - 56;
          v406 = (unsigned __int8 *)v557;
          if ((_QWORD)v557 != (_QWORD)v558)
          {
            *(_OWORD *)(v322 - 88) = v557;
            v557 = 0u;
            v558 = 0u;
            goto LABEL_537;
          }
          *((_QWORD *)v322 - 11) = v405;
          v407 = (unsigned __int8 *)*((_QWORD *)&v557 + 1);
          v409 = *((_QWORD *)&v557 + 1) - (_QWORD)v406;
          v408 = *((_QWORD *)&v557 + 1) == (_QWORD)v406;
          *((_QWORD *)v322 - 10) = &v405[*((_QWORD *)&v557 + 1) - (_QWORD)v406];
          if (v408)
            goto LABEL_537;
          if (v409 < 8 || (unint64_t)(v322 - v406 - 56) < 0x20)
            goto LABEL_536;
          if (v409 >= 0x20)
          {
            v411 = 0;
            v410 = v409 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v412 = &v322[v411];
              v413 = *(_OWORD *)&v406[v411 + 16];
              *(_OWORD *)(v412 - 56) = *(_OWORD *)&v406[v411];
              *(_OWORD *)(v412 - 40) = v413;
              v411 += 32;
            }
            while (v410 != v411);
            if (v409 == v410)
              goto LABEL_537;
            if ((v409 & 0x18) != 0)
              goto LABEL_531;
            v406 += v410;
            v405 += v410;
            do
            {
LABEL_536:
              v415 = *v406++;
              *v405++ = v415;
            }
            while (v406 != v407);
            goto LABEL_537;
          }
          v410 = 0;
LABEL_531:
          v414 = v409 & 0xFFFFFFFFFFFFFFF8;
          v405 += v409 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            *(_QWORD *)&v322[v410 - 56] = *(_QWORD *)&v406[v410];
            v410 += 8;
          }
          while (v414 != v410);
          if (v409 != v414)
          {
            v406 += v414;
            goto LABEL_536;
          }
LABEL_537:
          *((_QWORD *)v322 - 8) = *((_QWORD *)&v558 + 1);
LABEL_538:
          *((_QWORD *)v322 - 3) = v561;
          *(_QWORD *)&v101 = v562;
          *((_OWORD *)v322 - 1) = v562;
          v416 = v343 + 96 - v555;
          if (v416 < 97)
            goto LABEL_616;
          v417 = (unint64_t)(-2 - 0x5555555555555555 * (v416 >> 5)) >> 1;
          v418 = &v555[96 * v417];
          v419 = *((unsigned __int16 *)v418 + 1);
          v420 = *((unsigned __int16 *)v343 + 1);
          v421 = v419 >= v420;
          if (v419 == v420 && (v422 = *v418, v423 = *v343, v421 = v422 >= v423, v422 == v423))
          {
            if (!gdc::GenericKey::operator<(*(_QWORD *)&v555[96 * v417 + 8], *(_QWORD *)&v555[96 * v417 + 16], *((_QWORD *)v343 + 1), *((_QWORD *)v343 + 2)))goto LABEL_616;
          }
          else if (v421)
          {
            goto LABEL_616;
          }
          v563 = *(_QWORD *)v343;
          *(_QWORD *)&v564 = v566;
          *(_QWORD *)&v565 = v566;
          *((_QWORD *)&v565 + 1) = *((_QWORD *)v343 + 4);
          v424 = (char *)*((_QWORD *)v343 + 1);
          if (v424 != *((char **)v343 + 3))
          {
            v564 = *(_OWORD *)(v343 + 8);
            *v352 = 0u;
            *(_OWORD *)(v343 + 24) = 0u;
            v425 = v555;
            goto LABEL_562;
          }
          v426 = (char *)*((_QWORD *)v343 + 2);
          v427 = v426 - v424;
          *((_QWORD *)&v564 + 1) = &v566[v426 - v424];
          v425 = v555;
          if (v426 == v424)
            goto LABEL_562;
          if (v427 < 8)
          {
            v428 = v566;
            goto LABEL_561;
          }
          v428 = v566;
          if ((unint64_t)(v566 - v424) < 0x20)
            goto LABEL_561;
          if (v427 >= 0x20)
          {
            v429 = v427 & 0xFFFFFFFFFFFFFFE0;
            v430 = (__int128 *)(v424 + 16);
            v431 = v567;
            v432 = v427 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v433 = *v430;
              *(v431 - 1) = *(v430 - 1);
              *v431 = v433;
              v430 += 2;
              v431 += 2;
              v432 -= 32;
            }
            while (v432);
            if (v427 == v429)
              goto LABEL_562;
            if ((v427 & 0x18) != 0)
              goto LABEL_556;
            v424 += v429;
            v428 = &v566[v429];
            do
            {
LABEL_561:
              v439 = *v424++;
              *v428++ = v439;
            }
            while (v424 != v426);
            goto LABEL_562;
          }
          v429 = 0;
LABEL_556:
          v434 = v427 & 0xFFFFFFFFFFFFFFF8;
          v428 = &v566[v427 & 0xFFFFFFFFFFFFFFF8];
          v435 = v429 - (v427 & 0xFFFFFFFFFFFFFFF8);
          v436 = (uint64_t *)&v424[v429];
          v437 = &v566[v429];
          do
          {
            v438 = *v436++;
            *v437++ = v438;
            v435 += 8;
          }
          while (v435);
          if (v427 != v434)
          {
            v424 += v434;
            goto LABEL_561;
          }
LABEL_562:
          v568 = *((_QWORD *)v343 + 9);
          v569 = *v370;
          while (2)
          {
            while (2)
            {
              v440 = (uint64_t *)v418;
              v442 = *(_QWORD *)v418;
              v441 = v418 + 8;
              *(_QWORD *)v343 = v442;
              if (v343 == (unsigned __int8 *)v440)
                goto LABEL_585;
              v443 = (void *)*((_QWORD *)v343 + 1);
              if (v443 != *((void **)v343 + 3))
                free(v443);
              v444 = v343 + 40;
              *((_QWORD *)v343 + 3) = v343 + 40;
              v445 = v440[1];
              if (v445 != v440[3])
              {
                *((_QWORD *)v343 + 1) = v445;
                *((_QWORD *)v343 + 2) = v440[2];
                *v441 = 0u;
                v441[1] = 0u;
                goto LABEL_584;
              }
              *((_QWORD *)v343 + 1) = v444;
              v446 = (char *)v440[1];
              *((_QWORD *)v343 + 2) = &v444[v440[2] - (_QWORD)v446];
              v447 = (char *)v440[2];
              if (v446 == v447)
                goto LABEL_584;
              v448 = v447 - v446;
              if ((unint64_t)(v447 - v446) < 8 || (unint64_t)(v343 - (unsigned __int8 *)v446 + 40) < 0x20)
                goto LABEL_583;
              if (v448 >= 0x20)
              {
                v449 = v448 & 0xFFFFFFFFFFFFFFE0;
                v450 = (__int128 *)(v446 + 16);
                v451 = v343 + 56;
                v452 = v448 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v453 = *v450;
                  *(v451 - 1) = *(v450 - 1);
                  *v451 = v453;
                  v450 += 2;
                  v451 += 2;
                  v452 -= 32;
                }
                while (v452);
                if (v448 == v449)
                  goto LABEL_584;
                if ((v448 & 0x18) != 0)
                  goto LABEL_578;
                v446 += v449;
                v444 += v449;
                do
                {
LABEL_583:
                  v459 = *v446++;
                  *v444++ = v459;
                }
                while (v446 != v447);
                goto LABEL_584;
              }
              v449 = 0;
LABEL_578:
              v454 = v448 & 0xFFFFFFFFFFFFFFF8;
              v444 += v448 & 0xFFFFFFFFFFFFFFF8;
              v455 = v449 - (v448 & 0xFFFFFFFFFFFFFFF8);
              v456 = (uint64_t *)&v446[v449];
              v457 = &v343[v449 + 40];
              do
              {
                v458 = *v456++;
                *(_QWORD *)v457 = v458;
                v457 += 8;
                v455 += 8;
              }
              while (v455);
              if (v448 != v454)
              {
                v446 += v454;
                goto LABEL_583;
              }
LABEL_584:
              *((_QWORD *)v343 + 4) = v440[4];
LABEL_585:
              *((_QWORD *)v343 + 9) = v440[9];
              *((_OWORD *)v343 + 5) = *((_OWORD *)v440 + 5);
              if (!v417)
                goto LABEL_589;
              v417 = (v417 - 1) >> 1;
              v418 = &v425[96 * v417];
              v460 = *((unsigned __int16 *)v418 + 1);
              v461 = v460 >= WORD1(v563);
              if (v460 != WORD1(v563)
                || (v462 = *v418, v461 = v462 >= v563, v462 != v563))
              {
                v343 = (unsigned __int8 *)v440;
                if (v461)
                  goto LABEL_589;
                continue;
              }
              break;
            }
            v343 = (unsigned __int8 *)v440;
            if (gdc::GenericKey::operator<(*(_QWORD *)&v425[96 * v417 + 8], *(_QWORD *)&v425[96 * v417 + 16], v564, *((uint64_t *)&v564 + 1)))
            {
              continue;
            }
            break;
          }
LABEL_589:
          v463 = v440 + 10;
          *v440 = v563;
          if (v440 == &v563)
          {
            v467 = (void *)v564;
            v468 = (void *)v565;
            v440[9] = v568;
            *(_QWORD *)&v101 = v569;
            *v463 = v569;
            if (v467 != v468)
              free(v467);
            goto LABEL_616;
          }
          v464 = (void *)v440[1];
          if (v464 != (void *)v440[3])
            free(v464);
          v465 = v440 + 5;
          v440[3] = (uint64_t)(v440 + 5);
          v466 = (char *)v564;
          if ((_QWORD)v564 != (_QWORD)v565)
          {
            *(_OWORD *)(v440 + 1) = v564;
            v564 = 0u;
            v565 = 0u;
            goto LABEL_615;
          }
          v440[1] = (uint64_t)v465;
          v469 = (char *)*((_QWORD *)&v564 + 1);
          v470 = *((_QWORD *)&v564 + 1) - (_QWORD)v466;
          v440[2] = (uint64_t)&v465[*((_QWORD *)&v564 + 1) - (_QWORD)v466];
          if (v469 == v466)
            goto LABEL_615;
          if (v470 < 8 || (unint64_t)((char *)v440 - v466 + 40) < 0x20)
            goto LABEL_614;
          if (v470 >= 0x20)
          {
            v471 = v470 & 0xFFFFFFFFFFFFFFE0;
            v472 = (__int128 *)(v466 + 16);
            v473 = v440 + 7;
            v474 = v470 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v475 = *v472;
              *(v473 - 1) = *(v472 - 1);
              *v473 = v475;
              v472 += 2;
              v473 += 2;
              v474 -= 32;
            }
            while (v474);
            if (v470 == v471)
              goto LABEL_615;
            if ((v470 & 0x18) != 0)
              goto LABEL_605;
            v466 += v471;
            v465 += v471;
            do
            {
LABEL_614:
              v482 = *v466++;
              *v465++ = v482;
            }
            while (v466 != v469);
            goto LABEL_615;
          }
          v471 = 0;
LABEL_605:
          v476 = v470 & 0xFFFFFFFFFFFFFFF8;
          v465 += v470 & 0xFFFFFFFFFFFFFFF8;
          v477 = v471 - (v470 & 0xFFFFFFFFFFFFFFF8);
          v478 = (uint64_t *)&v466[v471];
          v479 = (unsigned __int8 *)v440 + v471 + 40;
          do
          {
            v480 = *v478++;
            *(_QWORD *)v479 = v480;
            v479 += 8;
            v477 += 8;
          }
          while (v477);
          if (v470 != v476)
          {
            v466 += v476;
            goto LABEL_614;
          }
LABEL_615:
          v440[4] = *((_QWORD *)&v565 + 1);
          v440[9] = v568;
          *(_QWORD *)&v101 = v569;
          *v463 = v569;
LABEL_616:
          if ((_QWORD)v557 != (_QWORD)v558)
            free((void *)v557);
          v321 = v555;
LABEL_425:
          v322 -= 96;
        }
        while ((unint64_t)v320-- > 2);
        return *(double *)&v101;
    }
  }
}

  v750 = a2 - 144;
  v748 = a2 - 432;
  v749 = a2 - 288;
  v752 = a2 - 64;
  v747 = a2 - 175;
  v6 = a1;
  v759 = (unint64_t)a2;
  while (2)
  {
    v7 = v6;
    v8 = a2 - v6;
    v9 = 0x8E38E38E38E38E39 * ((a2 - v6) >> 4);
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v229 = *(a2 - 31);
        v230 = v7[113];
        if (v229 == v230)
        {
          v231 = *((_DWORD *)a2 - 7);
          v232 = *((_DWORD *)v7 + 29);
          v233 = v231 < v232;
          if (v231 == v232
            && (v234 = *((_DWORD *)a2 - 6), v235 = *((_DWORD *)v7 + 30), v233 = v234 < v235, v234 == v235))
          {
            if (!gdc::LayerDataRequestKey::operator<(v750, v7))
              return;
          }
          else if (!v233)
          {
            return;
          }
        }
        else if (v229 >= v230)
        {
          return;
        }
        std::swap[abi:nn180100]<gdc::LayerDataIndex>((uint64_t)v7, (uint64_t)v750);
        return;
      case 3uLL:
        return;
      case 4uLL:
        return;
      case 5uLL:
        return;
      default:
        v761 = (uint64_t)v7;
        if (v8 <= 3455)
        {
          if ((a4 & 1) != 0)
          {
            if (v7 == a2)
              return;
            v236 = v7 + 144;
            if (v7 + 144 == a2)
              return;
            v237 = v7;
            while (1)
            {
              v238 = v237;
              v237 = v236;
              v239 = v238[257];
              v240 = v238[113];
              v241 = v239 >= v240;
              if (v239 != v240)
                goto LABEL_358;
              v242 = *((_DWORD *)v238 + 65);
              v243 = *((_DWORD *)v238 + 29);
              v244 = v242 < v243;
              if (v242 == v243)
              {
                v245 = *((_DWORD *)v238 + 66);
                v246 = *((_DWORD *)v238 + 30);
                v244 = v245 < v246;
                if (v245 == v246)
                  break;
              }
              if (!v244)
                goto LABEL_348;
LABEL_362:
              v784[0] = *v237;
              gdc::LayerDataKey::LayerDataKey((uint64_t)&v785, (uint64_t)(v237 + 8));
              v790 = 0;
              if (v237[96])
              {
                v791 = *((_DWORD *)v237 + 25);
                v790 = 1;
              }
              v792 = *((_QWORD *)v237 + 13);
              LOWORD(v793) = *((_WORD *)v238 + 128);
              *(_QWORD *)((char *)&v793 + 4) = *(_QWORD *)(v238 + 260);
              v795 = *((_QWORD *)v238 + 35);
              v252 = v237;
              while (1)
              {
                v253 = v238;
                *v252 = *v238;
                *((_WORD *)v252 + 4) = *((_WORD *)v238 + 4);
                v254 = (void *)*((_QWORD *)v252 + 2);
                if (v254 != *((void **)v252 + 4))
                  free(v254);
                v255 = (char *)(v252 + 48);
                *((_QWORD *)v252 + 2) = v252 + 48;
                *((_QWORD *)v252 + 3) = v252 + 48;
                *((_QWORD *)v252 + 4) = v252 + 48;
                *((_QWORD *)v252 + 5) = 32;
                v256 = (char *)*((_QWORD *)v238 + 2);
                v257 = (char *)*((_QWORD *)v253 + 3);
                v258 = v257 - v256;
                if ((unint64_t)(v257 - v256) >= 0x21)
                {
                  if (v258 <= 0x40)
                    v259 = 64;
                  else
                    v259 = v257 - v256;
                  v255 = (char *)malloc_type_malloc(v259, 0x100004077774924uLL);
                  v260 = (char *)*((_QWORD *)v252 + 2);
                  v261 = (char *)*((_QWORD *)v252 + 3);
                  if (v260 == v261)
                    goto LABEL_388;
                  v262 = v261 - v260;
                  if ((unint64_t)(v261 - v260) < 8)
                  {
                    v263 = v255;
                  }
                  else
                  {
                    v263 = v255;
                    if ((unint64_t)(v255 - v260) >= 0x20)
                    {
                      if (v262 < 0x20)
                      {
                        v264 = 0;
LABEL_382:
                        v269 = v262 & 0xFFFFFFFFFFFFFFF8;
                        v263 = &v255[v262 & 0xFFFFFFFFFFFFFFF8];
                        v270 = v264 - (v262 & 0xFFFFFFFFFFFFFFF8);
                        v271 = (uint64_t *)&v260[v264];
                        v272 = &v255[v264];
                        do
                        {
                          v273 = *v271++;
                          *(_QWORD *)v272 = v273;
                          v272 += 8;
                          v270 += 8;
                        }
                        while (v270);
                        if (v262 != v269)
                        {
                          v260 += v269;
                          goto LABEL_387;
                        }
LABEL_388:
                        *((_QWORD *)v252 + 2) = v255;
                        *((_QWORD *)v252 + 3) = v255;
                        *((_QWORD *)v252 + 5) = v259;
                        goto LABEL_389;
                      }
                      v264 = v262 & 0xFFFFFFFFFFFFFFE0;
                      v265 = (__int128 *)(v260 + 16);
                      v266 = v255 + 16;
                      v267 = v262 & 0xFFFFFFFFFFFFFFE0;
                      do
                      {
                        v268 = *v265;
                        *(v266 - 1) = *(v265 - 1);
                        *v266 = v268;
                        v265 += 2;
                        v266 += 2;
                        v267 -= 32;
                      }
                      while (v267);
                      if (v262 == v264)
                        goto LABEL_388;
                      if ((v262 & 0x18) != 0)
                        goto LABEL_382;
                      v260 += v264;
                      v263 = &v255[v264];
                    }
                  }
                  do
                  {
LABEL_387:
                    v274 = *v260++;
                    *v263++ = v274;
                  }
                  while (v260 != v261);
                  goto LABEL_388;
                }
LABEL_389:
                if (v256 == v257)
                  goto LABEL_407;
                if (v258 < 8)
                {
                  v276 = v255;
                  goto LABEL_405;
                }
                if ((unint64_t)(v255 - v256) < 0x20)
                {
                  v276 = v255;
                  goto LABEL_405;
                }
                if (v258 >= 0x20)
                {
                  v275 = v258 & 0xFFFFFFFFFFFFFFE0;
                  v277 = (__int128 *)(v256 + 16);
                  v278 = v255 + 16;
                  v279 = v258 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v280 = *v277;
                    *(v278 - 1) = *(v277 - 1);
                    *v278 = v280;
                    v277 += 2;
                    v278 += 2;
                    v279 -= 32;
                  }
                  while (v279);
                  if (v258 == v275)
                    goto LABEL_406;
                  if ((v258 & 0x18) == 0)
                  {
                    v256 += v275;
                    v276 = &v255[v275];
                    goto LABEL_405;
                  }
                }
                else
                {
                  v275 = 0;
                }
                v281 = v258 & 0xFFFFFFFFFFFFFFF8;
                v276 = &v255[v258 & 0xFFFFFFFFFFFFFFF8];
                v282 = v275 - (v258 & 0xFFFFFFFFFFFFFFF8);
                v283 = (uint64_t *)&v256[v275];
                v284 = &v255[v275];
                do
                {
                  v285 = *v283++;
                  *(_QWORD *)v284 = v285;
                  v284 += 8;
                  v282 += 8;
                }
                while (v282);
                if (v258 == v281)
                  goto LABEL_406;
                v256 += v281;
                do
                {
LABEL_405:
                  v286 = *v256++;
                  *v276++ = v286;
                }
                while (v256 != v257);
LABEL_406:
                v255 = (char *)*((_QWORD *)v252 + 3);
LABEL_407:
                *((_QWORD *)v252 + 3) = &v255[v258];
                *((_OWORD *)v252 + 5) = *((_OWORD *)v253 + 5);
                if (v253[96])
                {
                  v287 = v761;
                  if (v252[96])
                  {
                    *((_DWORD *)v252 + 25) = *((_DWORD *)v253 + 25);
                  }
                  else
                  {
                    *((_DWORD *)v252 + 25) = *((_DWORD *)v253 + 25);
                    v252[96] = 1;
                  }
                }
                else
                {
                  v287 = v761;
                  if (v252[96])
                    v252[96] = 0;
                }
                *((_QWORD *)v252 + 13) = *((_QWORD *)v253 + 13);
                *((_OWORD *)v252 + 7) = *((_OWORD *)v253 + 7);
                *((_QWORD *)v252 + 16) = *((_QWORD *)v253 + 16);
                *((_QWORD *)v252 + 17) = *((_QWORD *)v253 + 17);
                if (v253 == (unsigned __int8 *)v287)
                  break;
                v238 = v253 - 144;
                v288 = *(v253 - 31);
                v289 = BYTE1(v793) >= v288;
                if (BYTE1(v793) == v288)
                {
                  v290 = *((_DWORD *)v253 - 7);
                  v291 = SDWORD1(v793) < v290;
                  if (DWORD1(v793) == v290
                    && (v292 = *((_DWORD *)v253 - 6), v291 = SDWORD2(v793) < v292, DWORD2(v793) == v292))
                  {
                    v293 = *((unsigned __int16 *)v253 - 68);
                    v289 = v785 >= v293;
                    if (v785 != v293)
                      goto LABEL_365;
                    if ((_QWORD)v789 == *((_QWORD *)v253 - 8)
                      && (v294 = (const void *)*((_QWORD *)v253 - 16),
                          v787 - (_QWORD)v786 == *((_QWORD *)v253 - 15) - (_QWORD)v294)
                      && !memcmp(v786, v294, v787 - (_QWORD)v786))
                    {
                      v252 = v253;
                      if (v784[0] >= *v238)
                      {
LABEL_426:
                        v295 = v253;
                        goto LABEL_428;
                      }
                    }
                    else
                    {
                      v252 = v253;
                      if (!gdc::GenericKey::operator<((uint64_t)v786, v787, *((_QWORD *)v253 - 16), *((_QWORD *)v253 - 15)))goto LABEL_426;
                    }
                  }
                  else
                  {
                    v252 = v253;
                    if (!v291)
                      goto LABEL_426;
                  }
                }
                else
                {
LABEL_365:
                  v252 = v253;
                  if (v289)
                    goto LABEL_426;
                }
              }
              v295 = (unsigned __int8 *)v287;
LABEL_428:
              *v295 = v784[0];
              *((_WORD *)v295 + 4) = v785;
              if (v295 == v784)
                goto LABEL_473;
              v296 = (void *)*((_QWORD *)v253 + 2);
              if (v296 != *((void **)v295 + 4))
                free(v296);
              v297 = (char *)(v295 + 48);
              *((_QWORD *)v295 + 4) = v295 + 48;
              *((_QWORD *)v253 + 2) = v295 + 48;
              *((_QWORD *)v295 + 3) = v295 + 48;
              *((_QWORD *)v295 + 5) = 32;
              v298 = (char *)v786;
              v299 = v787;
              v300 = v787 - (_QWORD)v786;
              if ((unint64_t)(v787 - (_QWORD)v786) < 0x21)
                goto LABEL_454;
              if (v300 <= 0x40)
                v301 = 64;
              else
                v301 = v787 - (_QWORD)v786;
              v297 = (char *)malloc_type_malloc(v301, 0x100004077774924uLL);
              v302 = (char *)*((_QWORD *)v253 + 2);
              v303 = (char *)*((_QWORD *)v295 + 3);
              if (v302 == v303)
                goto LABEL_453;
              v304 = v303 - v302;
              if ((unint64_t)(v303 - v302) < 8)
              {
                v305 = v297;
                goto LABEL_452;
              }
              v305 = v297;
              if ((unint64_t)(v297 - v302) < 0x20)
                goto LABEL_452;
              if (v304 >= 0x20)
              {
                v306 = v304 & 0xFFFFFFFFFFFFFFE0;
                v307 = (__int128 *)(v302 + 16);
                v308 = v297 + 16;
                v309 = v304 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v310 = *v307;
                  *(v308 - 1) = *(v307 - 1);
                  *v308 = v310;
                  v307 += 2;
                  v308 += 2;
                  v309 -= 32;
                }
                while (v309);
                if (v304 == v306)
                  goto LABEL_453;
                if ((v304 & 0x18) != 0)
                  goto LABEL_445;
                v302 += v306;
                v305 = &v297[v306];
                do
                {
LABEL_452:
                  v316 = *v302++;
                  *v305++ = v316;
                }
                while (v302 != v303);
                goto LABEL_453;
              }
              v306 = 0;
LABEL_445:
              v311 = v304 & 0xFFFFFFFFFFFFFFF8;
              v305 = &v297[v304 & 0xFFFFFFFFFFFFFFF8];
              v312 = v306 - (v304 & 0xFFFFFFFFFFFFFFF8);
              v313 = (uint64_t *)&v302[v306];
              v314 = &v297[v306];
              do
              {
                v315 = *v313++;
                *(_QWORD *)v314 = v315;
                v314 += 8;
                v312 += 8;
              }
              while (v312);
              if (v304 != v311)
              {
                v302 += v311;
                goto LABEL_452;
              }
LABEL_453:
              *((_QWORD *)v253 + 2) = v297;
              *((_QWORD *)v295 + 3) = v297;
              *((_QWORD *)v295 + 5) = v301;
LABEL_454:
              if (v298 == (char *)v299)
                goto LABEL_472;
              if (v300 < 8)
              {
                v318 = v297;
                goto LABEL_470;
              }
              if ((unint64_t)(v297 - v298) < 0x20)
              {
                v318 = v297;
                goto LABEL_470;
              }
              if (v300 >= 0x20)
              {
                v317 = v300 & 0xFFFFFFFFFFFFFFE0;
                v319 = (__int128 *)(v298 + 16);
                v320 = v297 + 16;
                v321 = v300 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v322 = *v319;
                  *(v320 - 1) = *(v319 - 1);
                  *v320 = v322;
                  v319 += 2;
                  v320 += 2;
                  v321 -= 32;
                }
                while (v321);
                if (v300 == v317)
                  goto LABEL_471;
                if ((v300 & 0x18) != 0)
                  goto LABEL_465;
                v298 += v317;
                v318 = &v297[v317];
                do
                {
LABEL_470:
                  v328 = *v298++;
                  *v318++ = v328;
                }
                while (v298 != (char *)v299);
                goto LABEL_471;
              }
              v317 = 0;
LABEL_465:
              v323 = v300 & 0xFFFFFFFFFFFFFFF8;
              v318 = &v297[v300 & 0xFFFFFFFFFFFFFFF8];
              v324 = v317 - (v300 & 0xFFFFFFFFFFFFFFF8);
              v325 = (uint64_t *)&v298[v317];
              v326 = &v297[v317];
              do
              {
                v327 = *v325++;
                *(_QWORD *)v326 = v327;
                v326 += 8;
                v324 += 8;
              }
              while (v324);
              if (v300 != v323)
              {
                v298 += v323;
                goto LABEL_470;
              }
LABEL_471:
              v297 = (char *)*((_QWORD *)v295 + 3);
LABEL_472:
              *((_QWORD *)v295 + 3) = &v297[v300];
LABEL_473:
              v329 = v253 + 112;
              *((_OWORD *)v295 + 5) = v789;
              if (v790)
              {
                v330 = v791;
                if (!v295[96])
                  v295[96] = 1;
                *((_DWORD *)v295 + 25) = v330;
                *((_QWORD *)v295 + 13) = v792;
                v331 = v793;
                *((_QWORD *)v253 + 16) = v794;
                *v329 = v331;
                *((_QWORD *)v295 + 17) = v795;
                v790 = 0;
              }
              else
              {
                if (v295[96])
                  v295[96] = 0;
                *((_QWORD *)v295 + 13) = v792;
                v332 = v793;
                *((_QWORD *)v253 + 16) = v794;
                *v329 = v332;
                *((_QWORD *)v295 + 17) = v795;
              }
              if (v786 != v788)
                free(v786);
LABEL_348:
              v236 = v237 + 144;
              if (v237 + 144 == (unsigned __int8 *)v759)
                return;
            }
            v247 = *((unsigned __int16 *)v237 + 4);
            v248 = *((unsigned __int16 *)v238 + 4);
            v241 = v247 >= v248;
            if (v247 == v248)
            {
              if (*((_QWORD *)v237 + 10) == *((_QWORD *)v238 + 10)
                && (v249 = (const void *)*((_QWORD *)v237 + 2),
                    v250 = *((_QWORD *)v237 + 3) - (_QWORD)v249,
                    v251 = (const void *)*((_QWORD *)v238 + 2),
                    v250 == *((_QWORD *)v238 + 3) - (_QWORD)v251)
                && !memcmp(v249, v251, v250))
              {
                if (*v237 >= *v238)
                  goto LABEL_348;
              }
              else if (!gdc::GenericKey::operator<(*((_QWORD *)v237 + 2), *((_QWORD *)v237 + 3), *((_QWORD *)v238 + 2), *((_QWORD *)v238 + 3)))
              {
                goto LABEL_348;
              }
              goto LABEL_362;
            }
LABEL_358:
            if (v241)
              goto LABEL_348;
            goto LABEL_362;
          }
          if (v7 == a2)
            return;
          v652 = v7 + 144;
          if (v7 + 144 == a2)
            return;
LABEL_922:
          v653 = v7;
          v7 = v652;
          v654 = v653[257];
          v655 = v653[113];
          v656 = v654 >= v655;
          if (v654 == v655)
          {
            v657 = *((_DWORD *)v653 + 65);
            v658 = *((_DWORD *)v653 + 29);
            v659 = v657 < v658;
            if (v657 != v658
              || (v660 = *((_DWORD *)v653 + 66), v661 = *((_DWORD *)v653 + 30), v659 = v660 < v661, v660 != v661))
            {
              if (!v659)
                goto LABEL_921;
LABEL_935:
              v784[0] = *v7;
              gdc::LayerDataKey::LayerDataKey((uint64_t)&v785, (uint64_t)(v7 + 8));
              v790 = 0;
              if (v7[96])
              {
                v791 = *((_DWORD *)v7 + 25);
                v790 = 1;
              }
              v792 = *((_QWORD *)v7 + 13);
              LOWORD(v793) = *((_WORD *)v653 + 128);
              *(_QWORD *)((char *)&v793 + 4) = *(_QWORD *)(v653 + 260);
              v795 = *((_QWORD *)v653 + 35);
              v667 = v7;
              while (1)
              {
                v668 = v7;
                v669 = v653;
                *v667 = *v653;
                *((_WORD *)v667 + 4) = *((_WORD *)v653 + 4);
                v670 = (void *)*((_QWORD *)v667 + 2);
                if (v670 != *((void **)v667 + 4))
                  free(v670);
                v671 = (char *)(v667 + 48);
                *((_QWORD *)v667 + 2) = v667 + 48;
                *((_QWORD *)v667 + 3) = v667 + 48;
                *((_QWORD *)v667 + 4) = v667 + 48;
                *((_QWORD *)v667 + 5) = 32;
                v673 = (char *)*((_QWORD *)v653 + 2);
                v672 = (char *)*((_QWORD *)v653 + 3);
                v674 = v672 - v673;
                if ((unint64_t)(v672 - v673) >= 0x21)
                  break;
LABEL_962:
                if (v673 == v672)
                  goto LABEL_980;
                if (v674 < 8)
                {
                  v692 = v671;
                  goto LABEL_978;
                }
                if ((unint64_t)(v671 - v673) < 0x20)
                {
                  v692 = v671;
                  goto LABEL_978;
                }
                if (v674 >= 0x20)
                {
                  v691 = v674 & 0xFFFFFFFFFFFFFFE0;
                  v693 = (__int128 *)(v673 + 16);
                  v694 = v671 + 16;
                  v695 = v674 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v696 = *v693;
                    *(v694 - 1) = *(v693 - 1);
                    *v694 = v696;
                    v693 += 2;
                    v694 += 2;
                    v695 -= 32;
                  }
                  while (v695);
                  if (v674 == v691)
                    goto LABEL_979;
                  if ((v674 & 0x18) == 0)
                  {
                    v673 += v691;
                    v692 = &v671[v691];
                    goto LABEL_978;
                  }
                }
                else
                {
                  v691 = 0;
                }
                v697 = v674 & 0xFFFFFFFFFFFFFFF8;
                v692 = &v671[v674 & 0xFFFFFFFFFFFFFFF8];
                v698 = v691 - (v674 & 0xFFFFFFFFFFFFFFF8);
                v699 = (uint64_t *)&v673[v691];
                v700 = &v671[v691];
                do
                {
                  v701 = *v699++;
                  *(_QWORD *)v700 = v701;
                  v700 += 8;
                  v698 += 8;
                }
                while (v698);
                if (v674 == v697)
                  goto LABEL_979;
                v673 += v697;
                do
                {
LABEL_978:
                  v702 = *v673++;
                  *v692++ = v702;
                }
                while (v673 != v672);
LABEL_979:
                v671 = (char *)*((_QWORD *)v667 + 3);
LABEL_980:
                *((_QWORD *)v667 + 3) = &v671[v674];
                *((_OWORD *)v667 + 5) = *((_OWORD *)v669 + 5);
                v7 = v668;
                if (v669[96])
                {
                  if (v667[96])
                  {
                    *((_DWORD *)v667 + 25) = *((_DWORD *)v669 + 25);
                  }
                  else
                  {
                    *((_DWORD *)v667 + 25) = *((_DWORD *)v669 + 25);
                    v667[96] = 1;
                  }
                }
                else if (v667[96])
                {
                  v667[96] = 0;
                }
                *((_QWORD *)v667 + 13) = *((_QWORD *)v669 + 13);
                *((_OWORD *)v667 + 7) = *((_OWORD *)v669 + 7);
                *((_QWORD *)v667 + 16) = *((_QWORD *)v669 + 16);
                *((_QWORD *)v667 + 17) = *((_QWORD *)v669 + 17);
                v653 = v669 - 144;
                v703 = *(v669 - 31);
                v704 = BYTE1(v793) >= v703;
                if (BYTE1(v793) != v703)
                  goto LABEL_938;
                v705 = *((_DWORD *)v669 - 7);
                v706 = SDWORD1(v793) < v705;
                if (DWORD1(v793) == v705
                  && (v707 = *((_DWORD *)v669 - 6), v706 = SDWORD2(v793) < v707, DWORD2(v793) == v707))
                {
                  v708 = *((unsigned __int16 *)v669 - 68);
                  v704 = v785 >= v708;
                  if (v785 == v708)
                  {
                    if ((_QWORD)v789 == *((_QWORD *)v669 - 8)
                      && (v709 = (const void *)*((_QWORD *)v669 - 16),
                          v787 - (_QWORD)v786 == *((_QWORD *)v669 - 15) - (_QWORD)v709)
                      && !memcmp(v786, v709, v787 - (_QWORD)v786))
                    {
                      v667 = v669;
                      if (v784[0] >= *v653)
                      {
LABEL_998:
                        *v669 = v784[0];
                        *((_WORD *)v669 + 4) = v785;
                        if (v669 == v784)
                          goto LABEL_1043;
                        v710 = (void *)*((_QWORD *)v669 + 2);
                        if (v710 != *((void **)v669 + 4))
                          free(v710);
                        v711 = (char *)(v669 + 48);
                        *((_QWORD *)v669 + 2) = v669 + 48;
                        *((_QWORD *)v669 + 3) = v669 + 48;
                        *((_QWORD *)v669 + 4) = v669 + 48;
                        *((_QWORD *)v669 + 5) = 32;
                        v713 = (char *)v786;
                        v712 = v787;
                        v714 = v787 - (_QWORD)v786;
                        if ((unint64_t)(v787 - (_QWORD)v786) < 0x21)
                          goto LABEL_1024;
                        if (v714 <= 0x40)
                          v715 = 64;
                        else
                          v715 = v787 - (_QWORD)v786;
                        v711 = (char *)malloc_type_malloc(v715, 0x100004077774924uLL);
                        v716 = (char *)*((_QWORD *)v669 + 2);
                        v717 = (char *)*((_QWORD *)v669 + 3);
                        if (v716 == v717)
                          goto LABEL_1023;
                        v718 = v717 - v716;
                        if ((unint64_t)(v717 - v716) < 8)
                        {
                          v719 = v711;
                          goto LABEL_1022;
                        }
                        v719 = v711;
                        if ((unint64_t)(v711 - v716) < 0x20)
                          goto LABEL_1022;
                        if (v718 >= 0x20)
                        {
                          v720 = v718 & 0xFFFFFFFFFFFFFFE0;
                          v721 = (__int128 *)(v716 + 16);
                          v722 = v711 + 16;
                          v723 = v718 & 0xFFFFFFFFFFFFFFE0;
                          do
                          {
                            v724 = *v721;
                            *(v722 - 1) = *(v721 - 1);
                            *v722 = v724;
                            v721 += 2;
                            v722 += 2;
                            v723 -= 32;
                          }
                          while (v723);
                          if (v718 == v720)
                            goto LABEL_1023;
                          if ((v718 & 0x18) != 0)
                            goto LABEL_1015;
                          v716 += v720;
                          v719 = &v711[v720];
                          do
                          {
LABEL_1022:
                            v730 = *v716++;
                            *v719++ = v730;
                          }
                          while (v716 != v717);
                          goto LABEL_1023;
                        }
                        v720 = 0;
LABEL_1015:
                        v725 = v718 & 0xFFFFFFFFFFFFFFF8;
                        v719 = &v711[v718 & 0xFFFFFFFFFFFFFFF8];
                        v726 = v720 - (v718 & 0xFFFFFFFFFFFFFFF8);
                        v727 = (uint64_t *)&v716[v720];
                        v728 = &v711[v720];
                        do
                        {
                          v729 = *v727++;
                          *(_QWORD *)v728 = v729;
                          v728 += 8;
                          v726 += 8;
                        }
                        while (v726);
                        if (v718 != v725)
                        {
                          v716 += v725;
                          goto LABEL_1022;
                        }
LABEL_1023:
                        *((_QWORD *)v669 + 2) = v711;
                        *((_QWORD *)v669 + 3) = v711;
                        *((_QWORD *)v669 + 5) = v715;
LABEL_1024:
                        if (v713 == (char *)v712)
                          goto LABEL_1042;
                        if (v714 < 8)
                        {
                          v732 = v711;
                          goto LABEL_1040;
                        }
                        if ((unint64_t)(v711 - v713) < 0x20)
                        {
                          v732 = v711;
                          goto LABEL_1040;
                        }
                        if (v714 >= 0x20)
                        {
                          v731 = v714 & 0xFFFFFFFFFFFFFFE0;
                          v733 = (__int128 *)(v713 + 16);
                          v734 = v711 + 16;
                          v735 = v714 & 0xFFFFFFFFFFFFFFE0;
                          do
                          {
                            v736 = *v733;
                            *(v734 - 1) = *(v733 - 1);
                            *v734 = v736;
                            v733 += 2;
                            v734 += 2;
                            v735 -= 32;
                          }
                          while (v735);
                          if (v714 == v731)
                            goto LABEL_1041;
                          if ((v714 & 0x18) != 0)
                            goto LABEL_1035;
                          v713 += v731;
                          v732 = &v711[v731];
                          do
                          {
LABEL_1040:
                            v742 = *v713++;
                            *v732++ = v742;
                          }
                          while (v713 != (char *)v712);
                          goto LABEL_1041;
                        }
                        v731 = 0;
LABEL_1035:
                        v737 = v714 & 0xFFFFFFFFFFFFFFF8;
                        v732 = &v711[v714 & 0xFFFFFFFFFFFFFFF8];
                        v738 = v731 - (v714 & 0xFFFFFFFFFFFFFFF8);
                        v739 = (uint64_t *)&v713[v731];
                        v740 = &v711[v731];
                        do
                        {
                          v741 = *v739++;
                          *(_QWORD *)v740 = v741;
                          v740 += 8;
                          v738 += 8;
                        }
                        while (v738);
                        if (v714 != v737)
                        {
                          v713 += v737;
                          goto LABEL_1040;
                        }
LABEL_1041:
                        v711 = (char *)*((_QWORD *)v669 + 3);
LABEL_1042:
                        *((_QWORD *)v669 + 3) = &v711[v714];
                        v7 = v668;
LABEL_1043:
                        v743 = v669 + 112;
                        *((_OWORD *)v669 + 5) = v789;
                        if (v790)
                        {
                          v744 = v791;
                          if (!v669[96])
                            v669[96] = 1;
                          *((_DWORD *)v669 + 25) = v744;
                          *((_QWORD *)v669 + 13) = v792;
                          v745 = v793;
                          *((_QWORD *)v669 + 16) = v794;
                          *v743 = v745;
                          *((_QWORD *)v669 + 17) = v795;
                          v790 = 0;
                        }
                        else
                        {
                          if (v669[96])
                            v669[96] = 0;
                          *((_QWORD *)v669 + 13) = v792;
                          v746 = v793;
                          *((_QWORD *)v669 + 16) = v794;
                          *v743 = v746;
                          *((_QWORD *)v669 + 17) = v795;
                        }
                        if (v786 != v788)
                          free(v786);
LABEL_921:
                        v652 = v7 + 144;
                        if (v7 + 144 == (unsigned __int8 *)v759)
                          return;
                        goto LABEL_922;
                      }
                    }
                    else
                    {
                      v667 = v669;
                      if (!gdc::GenericKey::operator<((uint64_t)v786, v787, *((_QWORD *)v669 - 16), *((_QWORD *)v669 - 15)))goto LABEL_998;
                    }
                  }
                  else
                  {
LABEL_938:
                    v667 = v669;
                    if (v704)
                      goto LABEL_998;
                  }
                }
                else
                {
                  v667 = v669;
                  if (!v706)
                    goto LABEL_998;
                }
              }
              if (v674 <= 0x40)
                v675 = 64;
              else
                v675 = v672 - v673;
              v671 = (char *)malloc_type_malloc(v675, 0x100004077774924uLL);
              v676 = (char *)*((_QWORD *)v667 + 2);
              v677 = (char *)*((_QWORD *)v667 + 3);
              if (v676 == v677)
              {
LABEL_961:
                *((_QWORD *)v667 + 2) = v671;
                *((_QWORD *)v667 + 3) = v671;
                *((_QWORD *)v667 + 5) = v675;
                goto LABEL_962;
              }
              v678 = v677 - v676;
              if ((unint64_t)(v677 - v676) < 8)
              {
                v679 = v671;
              }
              else
              {
                v679 = v671;
                if ((unint64_t)(v671 - v676) >= 0x20)
                {
                  if (v678 < 0x20)
                  {
                    v680 = 0;
LABEL_955:
                    v685 = v678 & 0xFFFFFFFFFFFFFFF8;
                    v679 = &v671[v678 & 0xFFFFFFFFFFFFFFF8];
                    v686 = v680 - (v678 & 0xFFFFFFFFFFFFFFF8);
                    v687 = (uint64_t *)&v676[v680];
                    v688 = &v671[v680];
                    do
                    {
                      v689 = *v687++;
                      *(_QWORD *)v688 = v689;
                      v688 += 8;
                      v686 += 8;
                    }
                    while (v686);
                    if (v678 == v685)
                      goto LABEL_961;
                    v676 += v685;
                    goto LABEL_960;
                  }
                  v680 = v678 & 0xFFFFFFFFFFFFFFE0;
                  v681 = (__int128 *)(v676 + 16);
                  v682 = v671 + 16;
                  v683 = v678 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v684 = *v681;
                    *(v682 - 1) = *(v681 - 1);
                    *v682 = v684;
                    v681 += 2;
                    v682 += 2;
                    v683 -= 32;
                  }
                  while (v683);
                  if (v678 == v680)
                    goto LABEL_961;
                  if ((v678 & 0x18) != 0)
                    goto LABEL_955;
                  v676 += v680;
                  v679 = &v671[v680];
                }
              }
              do
              {
LABEL_960:
                v690 = *v676++;
                *v679++ = v690;
              }
              while (v676 != v677);
              goto LABEL_961;
            }
            v662 = *((unsigned __int16 *)v7 + 4);
            v663 = *((unsigned __int16 *)v653 + 4);
            v656 = v662 >= v663;
            if (v662 == v663)
            {
              if (*((_QWORD *)v7 + 10) == *((_QWORD *)v653 + 10)
                && (v664 = (const void *)*((_QWORD *)v7 + 2),
                    v665 = *((_QWORD *)v7 + 3) - (_QWORD)v664,
                    v666 = (const void *)*((_QWORD *)v653 + 2),
                    v665 == *((_QWORD *)v653 + 3) - (_QWORD)v666)
                && !memcmp(v664, v666, v665))
              {
                if (*v7 >= *v653)
                  goto LABEL_921;
              }
              else if (!gdc::GenericKey::operator<(*((_QWORD *)v7 + 2), *((_QWORD *)v7 + 3), *((_QWORD *)v653 + 2), *((_QWORD *)v653 + 3)))
              {
                goto LABEL_921;
              }
              goto LABEL_935;
            }
          }
          if (v656)
            goto LABEL_921;
          goto LABEL_935;
        }
        if (!a3)
        {
          if (v7 == a2)
            return;
          v333 = (v9 - 2) >> 1;
          v334 = v333;
          while (1)
          {
            v335 = v334;
            if (v333 < v334)
              goto LABEL_484;
            v336 = (2 * v334) | 1;
            v337 = (unsigned __int8 *)(v761 + 144 * v336);
            if (2 * v334 + 2 >= (uint64_t)v9)
              goto LABEL_498;
            v338 = v337[113];
            v339 = v337[257];
            v340 = v338 >= v339;
            if (v338 == v339)
            {
              v341 = *((_DWORD *)v337 + 29);
              v342 = *((_DWORD *)v337 + 65);
              v343 = v341 < v342;
              if (v341 != v342
                || (v344 = *((_DWORD *)v337 + 30), v345 = *((_DWORD *)v337 + 66), v343 = v344 < v345, v344 != v345))
              {
                if (!v343)
                  goto LABEL_498;
LABEL_497:
                v337 += 144;
                v336 = 2 * v335 + 2;
                goto LABEL_498;
              }
              v346 = *((unsigned __int16 *)v337 + 4);
              v347 = *((unsigned __int16 *)v337 + 76);
              v340 = v346 >= v347;
              if (v346 == v347)
              {
                if (*((_QWORD *)v337 + 10) == *((_QWORD *)v337 + 28)
                  && (v348 = (const void *)*((_QWORD *)v337 + 2),
                      v349 = *((_QWORD *)v337 + 3) - (_QWORD)v348,
                      v350 = (const void *)*((_QWORD *)v337 + 20),
                      v349 == *((_QWORD *)v337 + 21) - (_QWORD)v350)
                  && !memcmp(v348, v350, v349))
                {
                  if (*v337 >= v337[144])
                    goto LABEL_498;
                }
                else if (!gdc::GenericKey::operator<(*((_QWORD *)v337 + 2), *((_QWORD *)v337 + 3), *((_QWORD *)v337 + 20), *((_QWORD *)v337 + 21)))
                {
                  goto LABEL_498;
                }
                goto LABEL_497;
              }
            }
            if (!v340)
              goto LABEL_497;
LABEL_498:
            v351 = (unsigned __int8 *)(v761 + 144 * v335);
            v352 = v337[113];
            v353 = v351[113];
            v354 = v352 >= v353;
            if (v352 != v353)
              goto LABEL_507;
            v355 = *((_DWORD *)v337 + 29);
            v356 = *((_DWORD *)v351 + 29);
            v357 = v355 < v356;
            if (v355 != v356
              || (v358 = *((_DWORD *)v337 + 30), v359 = *((_DWORD *)v351 + 30), v357 = v358 < v359, v358 != v359))
            {
              if (v357)
                goto LABEL_484;
              goto LABEL_511;
            }
            v360 = *((unsigned __int16 *)v337 + 4);
            v361 = *((unsigned __int16 *)v351 + 4);
            v354 = v360 >= v361;
            if (v360 == v361)
            {
              if (*((_QWORD *)v337 + 10) == *((_QWORD *)v351 + 10)
                && (v362 = (const void *)*((_QWORD *)v337 + 2),
                    v363 = *((_QWORD *)v337 + 3) - (_QWORD)v362,
                    v364 = (const void *)*((_QWORD *)v351 + 2),
                    v363 == *((_QWORD *)v351 + 3) - (_QWORD)v364)
                && !memcmp(v362, v364, v363))
              {
                if (*v337 < *v351)
                  goto LABEL_484;
              }
              else if (gdc::GenericKey::operator<(*((_QWORD *)v337 + 2), *((_QWORD *)v337 + 3), *((_QWORD *)v351 + 2), *((_QWORD *)v351 + 3)))
              {
                goto LABEL_484;
              }
            }
            else
            {
LABEL_507:
              if (!v354)
                goto LABEL_484;
            }
LABEL_511:
            v784[0] = *v351;
            gdc::LayerDataKey::LayerDataKey((uint64_t)&v785, (uint64_t)(v351 + 8));
            v790 = 0;
            if (v351[96])
            {
              v791 = *((_DWORD *)v351 + 25);
              v790 = 1;
            }
            v792 = *((_QWORD *)v351 + 13);
            LOWORD(v793) = *((_WORD *)v351 + 56);
            *(_QWORD *)((char *)&v793 + 4) = *(_QWORD *)(v351 + 116);
            v795 = *(_QWORD *)(v761 + 144 * v335 + 136);
            while (1)
            {
              v365 = v337;
              gdc::LayerDataRequestKey::operator=((uint64_t)v351, (uint64_t)v337);
              v366 = *((_OWORD *)v337 + 7);
              *((_QWORD *)v351 + 16) = *((_QWORD *)v337 + 16);
              *((_OWORD *)v351 + 7) = v366;
              *((_QWORD *)v351 + 17) = *((_QWORD *)v337 + 17);
              if (v333 < v336)
                break;
              v367 = 2 * v336;
              v336 = (2 * v336) | 1;
              v337 = (unsigned __int8 *)(v761 + 144 * v336);
              v368 = v367 + 2;
              if (v367 + 2 < (uint64_t)v9)
              {
                v369 = v337[113];
                v370 = v337[257];
                v371 = v369 >= v370;
                if (v369 == v370)
                {
                  v372 = *((_DWORD *)v337 + 29);
                  v373 = *((_DWORD *)v337 + 65);
                  v374 = v372 < v373;
                  if (v372 != v373
                    || (v375 = *((_DWORD *)v337 + 30), v376 = *((_DWORD *)v337 + 66), v374 = v375 < v376, v375 != v376))
                  {
                    if (!v374)
                      goto LABEL_529;
LABEL_528:
                    v337 += 144;
                    v336 = v368;
                    goto LABEL_529;
                  }
                  v377 = *((unsigned __int16 *)v337 + 4);
                  v378 = *((unsigned __int16 *)v337 + 76);
                  v371 = v377 >= v378;
                  if (v377 == v378)
                  {
                    if (*((_QWORD *)v337 + 10) == *((_QWORD *)v337 + 28)
                      && (v379 = (const void *)*((_QWORD *)v337 + 2),
                          v380 = *((_QWORD *)v337 + 3) - (_QWORD)v379,
                          v381 = (const void *)*((_QWORD *)v337 + 20),
                          v380 == *((_QWORD *)v337 + 21) - (_QWORD)v381)
                      && !memcmp(v379, v381, v380))
                    {
                      if (*v337 >= v337[144])
                        goto LABEL_529;
                    }
                    else if (!gdc::GenericKey::operator<(*((_QWORD *)v337 + 2), *((_QWORD *)v337 + 3), *((_QWORD *)v337 + 20), *((_QWORD *)v337 + 21)))
                    {
                      goto LABEL_529;
                    }
                    goto LABEL_528;
                  }
                }
                if (!v371)
                  goto LABEL_528;
              }
LABEL_529:
              v382 = v337[113];
              v383 = v382 >= BYTE1(v793);
              if (v382 == BYTE1(v793))
              {
                v384 = *((_DWORD *)v337 + 29);
                v385 = v384 < SDWORD1(v793);
                if (v384 == DWORD1(v793)
                  && (v386 = *((_DWORD *)v337 + 30), v385 = v386 < SDWORD2(v793), v386 == DWORD2(v793)))
                {
                  v387 = *((unsigned __int16 *)v337 + 4);
                  v383 = v387 >= v785;
                  if (v387 != v785)
                    goto LABEL_514;
                  if (*((_QWORD *)v337 + 10) == (_QWORD)v789
                    && (v388 = (const void *)*((_QWORD *)v337 + 2),
                        v389 = *((_QWORD *)v337 + 3) - (_QWORD)v388,
                        v389 == v787 - (_QWORD)v786)
                    && !memcmp(v388, v786, v389))
                  {
                    v351 = v365;
                    if (*v337 < v784[0])
                      break;
                  }
                  else
                  {
                    v351 = v365;
                    if (gdc::GenericKey::operator<(*((_QWORD *)v337 + 2), *((_QWORD *)v337 + 3), (uint64_t)v786, v787))
                      break;
                  }
                }
                else
                {
                  v351 = v365;
                  if (v385)
                    break;
                }
              }
              else
              {
LABEL_514:
                v351 = v365;
                if (!v383)
                  break;
              }
            }
            *v365 = v784[0];
            *((_WORD *)v365 + 4) = v785;
            if (v365 == v784)
              goto LABEL_594;
            v390 = (void *)*((_QWORD *)v365 + 2);
            if (v390 != *((void **)v365 + 4))
              free(v390);
            v391 = (char *)(v365 + 48);
            *((_QWORD *)v365 + 2) = v365 + 48;
            *((_QWORD *)v365 + 3) = v365 + 48;
            *((_QWORD *)v365 + 4) = v365 + 48;
            *((_QWORD *)v365 + 5) = 32;
            v392 = (char *)v786;
            v393 = v787;
            v394 = v787 - (_QWORD)v786;
            if ((unint64_t)(v787 - (_QWORD)v786) < 0x21)
              goto LABEL_575;
            if (v394 <= 0x40)
              v395 = 64;
            else
              v395 = v787 - (_QWORD)v786;
            v391 = (char *)malloc_type_malloc(v395, 0x100004077774924uLL);
            v396 = (char *)*((_QWORD *)v365 + 2);
            v397 = (char *)*((_QWORD *)v365 + 3);
            if (v396 == v397)
              goto LABEL_574;
            v398 = v397 - v396;
            if ((unint64_t)(v397 - v396) < 8)
            {
              v399 = v391;
              goto LABEL_573;
            }
            v399 = v391;
            if ((unint64_t)(v391 - v396) < 0x20)
              goto LABEL_573;
            if (v398 >= 0x20)
            {
              v400 = v398 & 0xFFFFFFFFFFFFFFE0;
              v401 = (__int128 *)(v396 + 16);
              v402 = v391 + 16;
              v403 = v398 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v404 = *v401;
                *(v402 - 1) = *(v401 - 1);
                *v402 = v404;
                v401 += 2;
                v402 += 2;
                v403 -= 32;
              }
              while (v403);
              if (v398 == v400)
                goto LABEL_574;
              if ((v398 & 0x18) != 0)
                goto LABEL_566;
              v396 += v400;
              v399 = &v391[v400];
              do
              {
LABEL_573:
                v410 = *v396++;
                *v399++ = v410;
              }
              while (v396 != v397);
              goto LABEL_574;
            }
            v400 = 0;
LABEL_566:
            v405 = v398 & 0xFFFFFFFFFFFFFFF8;
            v399 = &v391[v398 & 0xFFFFFFFFFFFFFFF8];
            v406 = v400 - (v398 & 0xFFFFFFFFFFFFFFF8);
            v407 = (uint64_t *)&v396[v400];
            v408 = &v391[v400];
            do
            {
              v409 = *v407++;
              *(_QWORD *)v408 = v409;
              v408 += 8;
              v406 += 8;
            }
            while (v406);
            if (v398 != v405)
            {
              v396 += v405;
              goto LABEL_573;
            }
LABEL_574:
            *((_QWORD *)v365 + 2) = v391;
            *((_QWORD *)v365 + 3) = v391;
            *((_QWORD *)v365 + 5) = v395;
LABEL_575:
            if (v392 == (char *)v393)
              goto LABEL_593;
            if (v394 < 8)
            {
              v412 = v391;
              goto LABEL_591;
            }
            if ((unint64_t)(v391 - v392) < 0x20)
            {
              v412 = v391;
              goto LABEL_591;
            }
            if (v394 >= 0x20)
            {
              v411 = v394 & 0xFFFFFFFFFFFFFFE0;
              v413 = (__int128 *)(v392 + 16);
              v414 = v391 + 16;
              v415 = v394 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v416 = *v413;
                *(v414 - 1) = *(v413 - 1);
                *v414 = v416;
                v413 += 2;
                v414 += 2;
                v415 -= 32;
              }
              while (v415);
              if (v394 == v411)
                goto LABEL_592;
              if ((v394 & 0x18) != 0)
                goto LABEL_586;
              v392 += v411;
              v412 = &v391[v411];
              do
              {
LABEL_591:
                v422 = *v392++;
                *v412++ = v422;
              }
              while (v392 != (char *)v393);
              goto LABEL_592;
            }
            v411 = 0;
LABEL_586:
            v417 = v394 & 0xFFFFFFFFFFFFFFF8;
            v412 = &v391[v394 & 0xFFFFFFFFFFFFFFF8];
            v418 = v411 - (v394 & 0xFFFFFFFFFFFFFFF8);
            v419 = (uint64_t *)&v392[v411];
            v420 = &v391[v411];
            do
            {
              v421 = *v419++;
              *(_QWORD *)v420 = v421;
              v420 += 8;
              v418 += 8;
            }
            while (v418);
            if (v394 != v417)
            {
              v392 += v417;
              goto LABEL_591;
            }
LABEL_592:
            v391 = (char *)*((_QWORD *)v365 + 3);
LABEL_593:
            *((_QWORD *)v365 + 3) = &v391[v394];
LABEL_594:
            *((_OWORD *)v365 + 5) = v789;
            v423 = v365[96];
            if (v790)
            {
              *((_DWORD *)v365 + 25) = v791;
              if (!v423)
                v365[96] = 1;
LABEL_600:
              v423 = v790;
            }
            else if (v365[96])
            {
              v365[96] = 0;
              goto LABEL_600;
            }
            *((_QWORD *)v365 + 13) = v792;
            v424 = v793;
            *((_QWORD *)v365 + 16) = v794;
            *((_OWORD *)v365 + 7) = v424;
            *((_QWORD *)v365 + 17) = v795;
            if (v423)
              v790 = 0;
            if (v786 != v788)
              free(v786);
LABEL_484:
            v334 = v335 - 1;
            if (!v335)
            {
              v425 = v8 / 0x90uLL;
              v426 = (unsigned __int8 *)v759;
              v427 = v761;
              while (1)
              {
                v760 = v426;
                v772 = *(_BYTE *)v427;
                gdc::LayerDataKey::LayerDataKey((uint64_t)&v773, v761 + 8);
                v778 = 0;
                if (*(_BYTE *)(v427 + 96))
                {
                  v779 = *(_DWORD *)(v427 + 100);
                  v778 = 1;
                }
                v428 = 0;
                v780 = *(_QWORD *)(v427 + 104);
                LOWORD(v781) = *(_WORD *)(v427 + 112);
                *(_QWORD *)((char *)&v781 + 4) = *(_QWORD *)(v427 + 116);
                v783 = *(_QWORD *)(v427 + 136);
                v429 = (unsigned __int8 *)v427;
                do
                {
                  v431 = v429;
                  v429 += 144 * v428 + 144;
                  v432 = 2 * v428;
                  v428 = (2 * v428) | 1;
                  v433 = v432 + 2;
                  if (v432 + 2 >= v425)
                    goto LABEL_625;
                  v434 = v429[113];
                  v435 = v429[257];
                  v436 = v434 >= v435;
                  if (v434 != v435)
                  {
LABEL_623:
                    if (v436)
                      goto LABEL_625;
LABEL_624:
                    v429 += 144;
                    v428 = v433;
                    goto LABEL_625;
                  }
                  v437 = *((_DWORD *)v429 + 29);
                  v438 = *((_DWORD *)v429 + 65);
                  v439 = v437 < v438;
                  if (v437 == v438
                    && (v440 = *((_DWORD *)v429 + 30), v441 = *((_DWORD *)v429 + 66), v439 = v440 < v441, v440 == v441))
                  {
                    v442 = *((unsigned __int16 *)v429 + 4);
                    v443 = *((unsigned __int16 *)v429 + 76);
                    v436 = v442 >= v443;
                    if (v442 != v443)
                      goto LABEL_623;
                    if (*((_QWORD *)v429 + 10) == *((_QWORD *)v429 + 28)
                      && (v444 = (const void *)*((_QWORD *)v429 + 2),
                          v445 = *((_QWORD *)v429 + 3) - (_QWORD)v444,
                          v446 = (const void *)*((_QWORD *)v429 + 20),
                          v445 == *((_QWORD *)v429 + 21) - (_QWORD)v446)
                      && !memcmp(v444, v446, v445))
                    {
                      if (*v429 < v429[144])
                        goto LABEL_624;
                    }
                    else if (gdc::GenericKey::operator<(*((_QWORD *)v429 + 2), *((_QWORD *)v429 + 3), *((_QWORD *)v429 + 20), *((_QWORD *)v429 + 21)))
                    {
                      goto LABEL_624;
                    }
                  }
                  else if (v439)
                  {
                    goto LABEL_624;
                  }
LABEL_625:
                  *v431 = *v429;
                  *((_WORD *)v431 + 4) = *((_WORD *)v429 + 4);
                  if (v431 == v429)
                    goto LABEL_670;
                  v447 = (void *)*((_QWORD *)v431 + 2);
                  if (v447 != *((void **)v431 + 4))
                    free(v447);
                  v448 = (char *)(v431 + 48);
                  *((_QWORD *)v431 + 2) = v431 + 48;
                  *((_QWORD *)v431 + 3) = v431 + 48;
                  *((_QWORD *)v431 + 4) = v431 + 48;
                  *((_QWORD *)v431 + 5) = 32;
                  v449 = (char *)*((_QWORD *)v429 + 2);
                  v450 = (char *)*((_QWORD *)v429 + 3);
                  v451 = v450 - v449;
                  if ((unint64_t)(v450 - v449) >= 0x21)
                  {
                    if (v451 <= 0x40)
                      v452 = 64;
                    else
                      v452 = v450 - v449;
                    v448 = (char *)malloc_type_malloc(v452, 0x100004077774924uLL);
                    v453 = (char *)*((_QWORD *)v431 + 2);
                    v454 = (char *)*((_QWORD *)v431 + 3);
                    if (v453 == v454)
                      goto LABEL_650;
                    v455 = v454 - v453;
                    if ((unint64_t)(v454 - v453) < 8)
                    {
                      v456 = v448;
                    }
                    else
                    {
                      v456 = v448;
                      if ((unint64_t)(v448 - v453) >= 0x20)
                      {
                        if (v455 < 0x20)
                        {
                          v457 = 0;
LABEL_644:
                          v462 = v455 & 0xFFFFFFFFFFFFFFF8;
                          v456 = &v448[v455 & 0xFFFFFFFFFFFFFFF8];
                          v463 = v457 - (v455 & 0xFFFFFFFFFFFFFFF8);
                          v464 = (uint64_t *)&v453[v457];
                          v465 = &v448[v457];
                          do
                          {
                            v466 = *v464++;
                            *(_QWORD *)v465 = v466;
                            v465 += 8;
                            v463 += 8;
                          }
                          while (v463);
                          if (v455 != v462)
                          {
                            v453 += v462;
                            goto LABEL_649;
                          }
LABEL_650:
                          *((_QWORD *)v431 + 2) = v448;
                          *((_QWORD *)v431 + 3) = v448;
                          *((_QWORD *)v431 + 5) = v452;
                          goto LABEL_651;
                        }
                        v457 = v455 & 0xFFFFFFFFFFFFFFE0;
                        v458 = (__int128 *)(v453 + 16);
                        v459 = v448 + 16;
                        v460 = v455 & 0xFFFFFFFFFFFFFFE0;
                        do
                        {
                          v461 = *v458;
                          *(v459 - 1) = *(v458 - 1);
                          *v459 = v461;
                          v458 += 2;
                          v459 += 2;
                          v460 -= 32;
                        }
                        while (v460);
                        if (v455 == v457)
                          goto LABEL_650;
                        if ((v455 & 0x18) != 0)
                          goto LABEL_644;
                        v453 += v457;
                        v456 = &v448[v457];
                      }
                    }
                    do
                    {
LABEL_649:
                      v467 = *v453++;
                      *v456++ = v467;
                    }
                    while (v453 != v454);
                    goto LABEL_650;
                  }
LABEL_651:
                  if (v449 != v450)
                  {
                    if (v451 < 8)
                    {
                      v469 = v448;
                    }
                    else if ((unint64_t)(v448 - v449) < 0x20)
                    {
                      v469 = v448;
                    }
                    else
                    {
                      if (v451 < 0x20)
                      {
                        v468 = 0;
LABEL_662:
                        v474 = v451 & 0xFFFFFFFFFFFFFFF8;
                        v469 = &v448[v451 & 0xFFFFFFFFFFFFFFF8];
                        v475 = v468 - (v451 & 0xFFFFFFFFFFFFFFF8);
                        v476 = (uint64_t *)&v449[v468];
                        v477 = &v448[v468];
                        do
                        {
                          v478 = *v476++;
                          *(_QWORD *)v477 = v478;
                          v477 += 8;
                          v475 += 8;
                        }
                        while (v475);
                        if (v451 != v474)
                        {
                          v449 += v474;
                          goto LABEL_667;
                        }
LABEL_668:
                        v448 = (char *)*((_QWORD *)v431 + 3);
                        goto LABEL_669;
                      }
                      v468 = v451 & 0xFFFFFFFFFFFFFFE0;
                      v470 = (__int128 *)(v449 + 16);
                      v471 = v448 + 16;
                      v472 = v451 & 0xFFFFFFFFFFFFFFE0;
                      do
                      {
                        v473 = *v470;
                        *(v471 - 1) = *(v470 - 1);
                        *v471 = v473;
                        v470 += 2;
                        v471 += 2;
                        v472 -= 32;
                      }
                      while (v472);
                      if (v451 == v468)
                        goto LABEL_668;
                      if ((v451 & 0x18) != 0)
                        goto LABEL_662;
                      v449 += v468;
                      v469 = &v448[v468];
                    }
                    do
                    {
LABEL_667:
                      v479 = *v449++;
                      *v469++ = v479;
                    }
                    while (v449 != v450);
                    goto LABEL_668;
                  }
LABEL_669:
                  *((_QWORD *)v431 + 3) = &v448[v451];
                  v427 = v761;
LABEL_670:
                  *((_OWORD *)v431 + 5) = *((_OWORD *)v429 + 5);
                  v480 = v431[96];
                  if (v429[96])
                  {
                    *((_DWORD *)v431 + 25) = *((_DWORD *)v429 + 25);
                    if (!v480)
                      v431[96] = 1;
                  }
                  else if (v431[96])
                  {
                    v431[96] = 0;
                  }
                  *((_QWORD *)v431 + 13) = *((_QWORD *)v429 + 13);
                  v430 = *((_OWORD *)v429 + 7);
                  *((_QWORD *)v431 + 16) = *((_QWORD *)v429 + 16);
                  *((_OWORD *)v431 + 7) = v430;
                  *((_QWORD *)v431 + 17) = *((_QWORD *)v429 + 17);
                }
                while (v428 <= (uint64_t)((unint64_t)(v425 - 2) >> 1));
                v481 = v429 + 112;
                v426 = v760 - 144;
                if (v429 == v760 - 144)
                {
                  *v429 = v772;
                  *((_WORD *)v429 + 4) = v773;
                  if (v429 == &v772)
                    goto LABEL_872;
                  v495 = (void *)*((_QWORD *)v429 + 2);
                  if (v495 != *((void **)v429 + 4))
                    free(v495);
                  v496 = (char *)(v429 + 48);
                  *((_QWORD *)v429 + 2) = v429 + 48;
                  *((_QWORD *)v429 + 3) = v429 + 48;
                  *((_QWORD *)v429 + 4) = v429 + 48;
                  *((_QWORD *)v429 + 5) = 32;
                  v497 = (char *)v774;
                  v498 = v775;
                  v499 = v775 - (_BYTE *)v774;
                  if ((unint64_t)(v775 - (_BYTE *)v774) < 0x21)
                    goto LABEL_853;
                  if (v499 <= 0x40)
                    v500 = 64;
                  else
                    v500 = v775 - (_BYTE *)v774;
                  v496 = (char *)malloc_type_malloc(v500, 0x100004077774924uLL);
                  v501 = (char *)*((_QWORD *)v429 + 2);
                  v502 = (char *)*((_QWORD *)v429 + 3);
                  if (v501 == v502)
                    goto LABEL_852;
                  v503 = v502 - v501;
                  if ((unint64_t)(v502 - v501) < 8)
                  {
                    v504 = v496;
                  }
                  else
                  {
                    v504 = v496;
                    if ((unint64_t)(v496 - v501) >= 0x20)
                    {
                      if (v503 < 0x20)
                      {
                        v505 = 0;
LABEL_716:
                        v519 = v503 & 0xFFFFFFFFFFFFFFF8;
                        v504 = &v496[v503 & 0xFFFFFFFFFFFFFFF8];
                        v520 = v505 - (v503 & 0xFFFFFFFFFFFFFFF8);
                        v521 = (uint64_t *)&v501[v505];
                        v522 = &v496[v505];
                        do
                        {
                          v523 = *v521++;
                          *(_QWORD *)v522 = v523;
                          v522 += 8;
                          v520 += 8;
                        }
                        while (v520);
                        if (v503 != v519)
                        {
                          v501 += v519;
                          goto LABEL_851;
                        }
LABEL_852:
                        *((_QWORD *)v429 + 2) = v496;
                        *((_QWORD *)v429 + 3) = v496;
                        *((_QWORD *)v429 + 5) = v500;
LABEL_853:
                        if (v497 == v498)
                          goto LABEL_871;
                        if (v499 < 8)
                        {
                          v622 = v496;
                        }
                        else if ((unint64_t)(v496 - v497) < 0x20)
                        {
                          v622 = v496;
                        }
                        else
                        {
                          if (v499 < 0x20)
                          {
                            v621 = 0;
LABEL_864:
                            v627 = v499 & 0xFFFFFFFFFFFFFFF8;
                            v622 = &v496[v499 & 0xFFFFFFFFFFFFFFF8];
                            v628 = v621 - (v499 & 0xFFFFFFFFFFFFFFF8);
                            v629 = (uint64_t *)&v497[v621];
                            v630 = &v496[v621];
                            do
                            {
                              v631 = *v629++;
                              *(_QWORD *)v630 = v631;
                              v630 += 8;
                              v628 += 8;
                            }
                            while (v628);
                            if (v499 != v627)
                            {
                              v497 += v627;
                              goto LABEL_869;
                            }
LABEL_870:
                            v496 = (char *)*((_QWORD *)v429 + 3);
LABEL_871:
                            *((_QWORD *)v429 + 3) = &v496[v499];
LABEL_872:
                            *((_OWORD *)v429 + 5) = v777;
                            v633 = v429[96];
                            if (v778)
                            {
                              *((_DWORD *)v429 + 25) = v779;
                              if (!v633)
                                v429[96] = 1;
                            }
                            else if (v429[96])
                            {
                              v429[96] = 0;
                            }
                            *((_QWORD *)v429 + 13) = v780;
                            v634 = v781;
                            *((_QWORD *)v429 + 16) = v782;
                            *v481 = v634;
                            *((_QWORD *)v429 + 17) = v783;
                            goto LABEL_912;
                          }
                          v621 = v499 & 0xFFFFFFFFFFFFFFE0;
                          v623 = (__int128 *)(v497 + 16);
                          v624 = v496 + 16;
                          v625 = v499 & 0xFFFFFFFFFFFFFFE0;
                          do
                          {
                            v626 = *v623;
                            *(v624 - 1) = *(v623 - 1);
                            *v624 = v626;
                            v623 += 2;
                            v624 += 2;
                            v625 -= 32;
                          }
                          while (v625);
                          if (v499 == v621)
                            goto LABEL_870;
                          if ((v499 & 0x18) != 0)
                            goto LABEL_864;
                          v497 += v621;
                          v622 = &v496[v621];
                        }
                        do
                        {
LABEL_869:
                          v632 = *v497++;
                          *v622++ = v632;
                        }
                        while (v497 != v498);
                        goto LABEL_870;
                      }
                      v505 = v503 & 0xFFFFFFFFFFFFFFE0;
                      v515 = (__int128 *)(v501 + 16);
                      v516 = v496 + 16;
                      v517 = v503 & 0xFFFFFFFFFFFFFFE0;
                      do
                      {
                        v518 = *v515;
                        *(v516 - 1) = *(v515 - 1);
                        *v516 = v518;
                        v515 += 2;
                        v516 += 2;
                        v517 -= 32;
                      }
                      while (v517);
                      if (v503 == v505)
                        goto LABEL_852;
                      if ((v503 & 0x18) != 0)
                        goto LABEL_716;
                      v501 += v505;
                      v504 = &v496[v505];
                    }
                  }
                  do
                  {
LABEL_851:
                    v620 = *v501++;
                    *v504++ = v620;
                  }
                  while (v501 != v502);
                  goto LABEL_852;
                }
                gdc::LayerDataRequestKey::operator=((uint64_t)v429, (uint64_t)(v760 - 144));
                v482 = *((_OWORD *)v760 - 2);
                *((_QWORD *)v429 + 16) = *((_QWORD *)v760 - 2);
                *v481 = v482;
                *((_QWORD *)v429 + 17) = *((_QWORD *)v760 - 1);
                *(v760 - 144) = v772;
                *((_WORD *)v760 - 68) = v773;
                v483 = v760;
                if (v426 == &v772)
                  goto LABEL_743;
                v484 = (void *)*((_QWORD *)v760 - 16);
                if (v484 != *((void **)v760 - 14))
                  free(v484);
                v485 = (char *)(v760 - 96);
                *((_QWORD *)v760 - 16) = v760 - 96;
                *((_QWORD *)v760 - 15) = v760 - 96;
                *((_QWORD *)v760 - 14) = v760 - 96;
                *((_QWORD *)v760 - 13) = 32;
                v486 = (char *)v774;
                v487 = v775;
                v488 = v775 - (_BYTE *)v774;
                if ((unint64_t)(v775 - (_BYTE *)v774) < 0x21)
                  goto LABEL_723;
                if (v488 <= 0x40)
                  v489 = 64;
                else
                  v489 = v775 - (_BYTE *)v774;
                v485 = (char *)malloc_type_malloc(v489, 0x100004077774924uLL);
                v490 = (char *)*((_QWORD *)v760 - 16);
                v491 = (char *)*((_QWORD *)v760 - 15);
                if (v490 == v491)
                  goto LABEL_722;
                v492 = v491 - v490;
                if ((unint64_t)(v491 - v490) < 8)
                {
                  v493 = v485;
                  goto LABEL_721;
                }
                v493 = v485;
                if ((unint64_t)(v485 - v490) < 0x20)
                  goto LABEL_721;
                if (v492 >= 0x20)
                {
                  v494 = v492 & 0xFFFFFFFFFFFFFFE0;
                  v506 = (__int128 *)(v490 + 16);
                  v507 = v485 + 16;
                  v508 = v492 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v509 = *v506;
                    *(v507 - 1) = *(v506 - 1);
                    *v507 = v509;
                    v506 += 2;
                    v507 += 2;
                    v508 -= 32;
                  }
                  while (v508);
                  if (v492 == v494)
                    goto LABEL_722;
                  if ((v492 & 0x18) != 0)
                    goto LABEL_707;
                  v490 += v494;
                  v493 = &v485[v494];
                  do
                  {
LABEL_721:
                    v524 = *v490++;
                    *v493++ = v524;
                  }
                  while (v490 != v491);
                  goto LABEL_722;
                }
                v494 = 0;
LABEL_707:
                v510 = v492 & 0xFFFFFFFFFFFFFFF8;
                v493 = &v485[v492 & 0xFFFFFFFFFFFFFFF8];
                v511 = v494 - (v492 & 0xFFFFFFFFFFFFFFF8);
                v512 = (uint64_t *)&v490[v494];
                v513 = &v485[v494];
                do
                {
                  v514 = *v512++;
                  *(_QWORD *)v513 = v514;
                  v513 += 8;
                  v511 += 8;
                }
                while (v511);
                if (v492 != v510)
                {
                  v490 += v510;
                  goto LABEL_721;
                }
LABEL_722:
                *((_QWORD *)v760 - 16) = v485;
                *((_QWORD *)v760 - 15) = v485;
                *((_QWORD *)v760 - 13) = v489;
LABEL_723:
                if (v486 == v487)
                {
                  v483 = v760;
                  goto LABEL_742;
                }
                if (v488 < 8)
                {
                  v526 = v485;
                  goto LABEL_740;
                }
                if ((unint64_t)(v485 - v486) < 0x20)
                {
                  v526 = v485;
                  goto LABEL_740;
                }
                if (v488 >= 0x20)
                {
                  v525 = v488 & 0xFFFFFFFFFFFFFFE0;
                  v527 = (__int128 *)(v486 + 16);
                  v528 = v485 + 16;
                  v529 = v488 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v530 = *v527;
                    *(v528 - 1) = *(v527 - 1);
                    *v528 = v530;
                    v527 += 2;
                    v528 += 2;
                    v529 -= 32;
                  }
                  while (v529);
                  if (v488 == v525)
                    goto LABEL_741;
                  if ((v488 & 0x18) != 0)
                    goto LABEL_735;
                  v486 += v525;
                  v526 = &v485[v525];
                  do
                  {
LABEL_740:
                    v536 = *v486++;
                    *v526++ = v536;
                  }
                  while (v486 != v487);
                  goto LABEL_741;
                }
                v525 = 0;
LABEL_735:
                v531 = v488 & 0xFFFFFFFFFFFFFFF8;
                v526 = &v485[v488 & 0xFFFFFFFFFFFFFFF8];
                v532 = v525 - (v488 & 0xFFFFFFFFFFFFFFF8);
                v533 = (uint64_t *)&v486[v525];
                v534 = &v485[v525];
                do
                {
                  v535 = *v533++;
                  *(_QWORD *)v534 = v535;
                  v534 += 8;
                  v532 += 8;
                }
                while (v532);
                if (v488 != v531)
                {
                  v486 += v531;
                  goto LABEL_740;
                }
LABEL_741:
                v483 = v760;
                v485 = (char *)*((_QWORD *)v760 - 15);
LABEL_742:
                *((_QWORD *)v483 - 15) = &v485[v488];
LABEL_743:
                *((_OWORD *)v483 - 4) = v777;
                v537 = *(v483 - 48);
                if (v778)
                {
                  *((_DWORD *)v483 - 11) = v779;
                  if (!v537)
                    *(v483 - 48) = 1;
                }
                else if (*(v483 - 48))
                {
                  *(v483 - 48) = 0;
                }
                v538 = v483 - 32;
                *((_QWORD *)v483 - 5) = v780;
                v539 = v781;
                *((_QWORD *)v538 + 2) = v782;
                *(_OWORD *)v538 = v539;
                *((_QWORD *)v483 - 1) = v783;
                v540 = (uint64_t)&v429[-v427 + 144];
                if (v540 < 145)
                  goto LABEL_912;
                v541 = (v540 / 0x90uLL - 2) >> 1;
                v542 = (unsigned __int8 *)(v427 + 144 * v541);
                v543 = v542[113];
                v544 = v429[113];
                v545 = v543 >= v544;
                if (v543 != v544)
                  goto LABEL_759;
                v546 = *((_DWORD *)v542 + 29);
                v547 = *((_DWORD *)v429 + 29);
                v548 = v546 < v547;
                if (v546 != v547
                  || (v549 = *((_DWORD *)v542 + 30), v550 = *((_DWORD *)v429 + 30), v548 = v549 < v550, v549 != v550))
                {
                  if (!v548)
                    goto LABEL_912;
                  goto LABEL_763;
                }
                v551 = *((unsigned __int16 *)v542 + 4);
                v552 = *((unsigned __int16 *)v429 + 4);
                v545 = v551 >= v552;
                if (v551 == v552)
                {
                  if (*((_QWORD *)v542 + 10) == *((_QWORD *)v429 + 10)
                    && (v553 = (const void *)*((_QWORD *)v542 + 2),
                        v554 = *((_QWORD *)v542 + 3) - (_QWORD)v553,
                        v555 = (const void *)*((_QWORD *)v429 + 2),
                        v554 == *((_QWORD *)v429 + 3) - (_QWORD)v555)
                    && !memcmp(v553, v555, v554))
                  {
                    if (*v542 >= *v429)
                      goto LABEL_912;
                  }
                  else if (!gdc::GenericKey::operator<(*((_QWORD *)v542 + 2), *((_QWORD *)v542 + 3), *((_QWORD *)v429 + 2), *((_QWORD *)v429 + 3)))
                  {
                    goto LABEL_912;
                  }
                }
                else
                {
LABEL_759:
                  if (v545)
                    goto LABEL_912;
                }
LABEL_763:
                v784[0] = *v429;
                gdc::LayerDataKey::LayerDataKey((uint64_t)&v785, (uint64_t)(v429 + 8));
                v790 = 0;
                if (v429[96])
                {
                  v791 = *((_DWORD *)v429 + 25);
                  v790 = 1;
                }
                v792 = *((_QWORD *)v429 + 13);
                LOWORD(v793) = *((_WORD *)v429 + 56);
                *(_QWORD *)((char *)&v793 + 4) = *(_QWORD *)(v429 + 116);
                v795 = *((_QWORD *)v429 + 17);
                while (2)
                {
                  v556 = v542;
                  *v429 = *v542;
                  *((_WORD *)v429 + 4) = *((_WORD *)v542 + 4);
                  if (v429 == v542)
                    goto LABEL_810;
                  v557 = (void *)*((_QWORD *)v429 + 2);
                  if (v557 != *((void **)v429 + 4))
                    free(v557);
                  v558 = (char *)(v429 + 48);
                  *((_QWORD *)v429 + 2) = v429 + 48;
                  *((_QWORD *)v429 + 3) = v429 + 48;
                  *((_QWORD *)v429 + 4) = v429 + 48;
                  *((_QWORD *)v429 + 5) = 32;
                  v559 = (char *)*((_QWORD *)v542 + 2);
                  v560 = (char *)*((_QWORD *)v556 + 3);
                  v561 = v560 - v559;
                  if ((unint64_t)(v560 - v559) < 0x21)
                    goto LABEL_791;
                  if (v561 <= 0x40)
                    v562 = 64;
                  else
                    v562 = v560 - v559;
                  v558 = (char *)malloc_type_malloc(v562, 0x100004077774924uLL);
                  v563 = (char *)*((_QWORD *)v429 + 2);
                  v564 = (char *)*((_QWORD *)v429 + 3);
                  if (v563 == v564)
                    goto LABEL_790;
                  v565 = v564 - v563;
                  if ((unint64_t)(v564 - v563) < 8)
                  {
                    v566 = v558;
                    goto LABEL_789;
                  }
                  v566 = v558;
                  if ((unint64_t)(v558 - v563) < 0x20)
                    goto LABEL_789;
                  if (v565 >= 0x20)
                  {
                    v567 = v565 & 0xFFFFFFFFFFFFFFE0;
                    v568 = (__int128 *)(v563 + 16);
                    v569 = v558 + 16;
                    v570 = v565 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      v571 = *v568;
                      *(v569 - 1) = *(v568 - 1);
                      *v569 = v571;
                      v568 += 2;
                      v569 += 2;
                      v570 -= 32;
                    }
                    while (v570);
                    if (v565 == v567)
                      goto LABEL_790;
                    if ((v565 & 0x18) != 0)
                      goto LABEL_784;
                    v563 += v567;
                    v566 = &v558[v567];
                    do
                    {
LABEL_789:
                      v577 = *v563++;
                      *v566++ = v577;
                    }
                    while (v563 != v564);
                    goto LABEL_790;
                  }
                  v567 = 0;
LABEL_784:
                  v572 = v565 & 0xFFFFFFFFFFFFFFF8;
                  v566 = &v558[v565 & 0xFFFFFFFFFFFFFFF8];
                  v573 = v567 - (v565 & 0xFFFFFFFFFFFFFFF8);
                  v574 = (uint64_t *)&v563[v567];
                  v575 = &v558[v567];
                  do
                  {
                    v576 = *v574++;
                    *(_QWORD *)v575 = v576;
                    v575 += 8;
                    v573 += 8;
                  }
                  while (v573);
                  if (v565 != v572)
                  {
                    v563 += v572;
                    goto LABEL_789;
                  }
LABEL_790:
                  *((_QWORD *)v429 + 2) = v558;
                  *((_QWORD *)v429 + 3) = v558;
                  *((_QWORD *)v429 + 5) = v562;
LABEL_791:
                  if (v559 == v560)
                    goto LABEL_809;
                  if (v561 < 8)
                  {
                    v579 = v558;
                    goto LABEL_807;
                  }
                  if ((unint64_t)(v558 - v559) < 0x20)
                  {
                    v579 = v558;
                    goto LABEL_807;
                  }
                  if (v561 >= 0x20)
                  {
                    v578 = v561 & 0xFFFFFFFFFFFFFFE0;
                    v580 = (__int128 *)(v559 + 16);
                    v581 = v558 + 16;
                    v582 = v561 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      v583 = *v580;
                      *(v581 - 1) = *(v580 - 1);
                      *v581 = v583;
                      v580 += 2;
                      v581 += 2;
                      v582 -= 32;
                    }
                    while (v582);
                    if (v561 == v578)
                      goto LABEL_808;
                    if ((v561 & 0x18) != 0)
                      goto LABEL_802;
                    v559 += v578;
                    v579 = &v558[v578];
                    do
                    {
LABEL_807:
                      v589 = *v559++;
                      *v579++ = v589;
                    }
                    while (v559 != v560);
                    goto LABEL_808;
                  }
                  v578 = 0;
LABEL_802:
                  v584 = v561 & 0xFFFFFFFFFFFFFFF8;
                  v579 = &v558[v561 & 0xFFFFFFFFFFFFFFF8];
                  v585 = v578 - (v561 & 0xFFFFFFFFFFFFFFF8);
                  v586 = (uint64_t *)&v559[v578];
                  v587 = &v558[v578];
                  do
                  {
                    v588 = *v586++;
                    *(_QWORD *)v587 = v588;
                    v587 += 8;
                    v585 += 8;
                  }
                  while (v585);
                  if (v561 != v584)
                  {
                    v559 += v584;
                    goto LABEL_807;
                  }
LABEL_808:
                  v558 = (char *)*((_QWORD *)v429 + 3);
LABEL_809:
                  *((_QWORD *)v429 + 3) = &v558[v561];
                  v427 = v761;
LABEL_810:
                  *((_OWORD *)v429 + 5) = *((_OWORD *)v556 + 5);
                  v590 = v429[96];
                  if (v556[96])
                  {
                    *((_DWORD *)v429 + 25) = *((_DWORD *)v556 + 25);
                    if (!v590)
                      v429[96] = 1;
                  }
                  else if (v429[96])
                  {
                    v429[96] = 0;
                  }
                  *((_QWORD *)v429 + 13) = *((_QWORD *)v556 + 13);
                  v591 = *((_OWORD *)v556 + 7);
                  *((_QWORD *)v429 + 16) = *((_QWORD *)v556 + 16);
                  *((_OWORD *)v429 + 7) = v591;
                  *((_QWORD *)v429 + 17) = *((_QWORD *)v556 + 17);
                  if (v541)
                  {
                    v541 = (v541 - 1) >> 1;
                    v542 = (unsigned __int8 *)(v427 + 144 * v541);
                    v592 = v542[113];
                    v593 = v592 >= BYTE1(v793);
                    if (v592 != BYTE1(v793))
                      goto LABEL_766;
                    v594 = *((_DWORD *)v542 + 29);
                    v595 = v594 < SDWORD1(v793);
                    if (v594 == DWORD1(v793)
                      && (v596 = *((_DWORD *)v542 + 30), v595 = v596 < SDWORD2(v793), v596 == DWORD2(v793)))
                    {
                      v597 = *((unsigned __int16 *)v542 + 4);
                      v593 = v597 >= v785;
                      if (v597 != v785)
                      {
LABEL_766:
                        v429 = v556;
                        if (v593)
                          break;
                        continue;
                      }
                      if (*((_QWORD *)v542 + 10) == (_QWORD)v789
                        && (v598 = (const void *)*((_QWORD *)v542 + 2),
                            v599 = *((_QWORD *)v542 + 3) - (_QWORD)v598,
                            v599 == v787 - (_QWORD)v786)
                        && !memcmp(v598, v786, v599))
                      {
                        v429 = v556;
                        if (*v542 >= v784[0])
                          break;
                      }
                      else
                      {
                        v429 = v556;
                        if (!gdc::GenericKey::operator<(*((_QWORD *)v542 + 2), *((_QWORD *)v542 + 3), (uint64_t)v786, v787))break;
                      }
                    }
                    else
                    {
                      v429 = v556;
                      if (!v595)
                        break;
                    }
                    continue;
                  }
                  break;
                }
                *v556 = v784[0];
                *((_WORD *)v556 + 4) = v785;
                if (v556 == v784)
                  goto LABEL_903;
                v600 = (void *)*((_QWORD *)v556 + 2);
                if (v600 != *((void **)v556 + 4))
                  free(v600);
                v601 = (char *)(v556 + 48);
                *((_QWORD *)v556 + 2) = v556 + 48;
                *((_QWORD *)v556 + 3) = v556 + 48;
                *((_QWORD *)v556 + 4) = v556 + 48;
                *((_QWORD *)v556 + 5) = 32;
                v602 = (char *)v786;
                v603 = v787;
                v604 = v787 - (_QWORD)v786;
                if ((unint64_t)(v787 - (_QWORD)v786) < 0x21)
                  goto LABEL_884;
                if (v604 <= 0x40)
                  v605 = 64;
                else
                  v605 = v787 - (_QWORD)v786;
                v601 = (char *)malloc_type_malloc(v605, 0x100004077774924uLL);
                v606 = (char *)*((_QWORD *)v556 + 2);
                v607 = (char *)*((_QWORD *)v556 + 3);
                if (v606 == v607)
                  goto LABEL_883;
                v608 = v607 - v606;
                if ((unint64_t)(v607 - v606) < 8)
                {
                  v609 = v601;
                  goto LABEL_882;
                }
                v609 = v601;
                if ((unint64_t)(v601 - v606) < 0x20)
                  goto LABEL_882;
                if (v608 >= 0x20)
                {
                  v610 = v608 & 0xFFFFFFFFFFFFFFE0;
                  v611 = (__int128 *)(v606 + 16);
                  v612 = v601 + 16;
                  v613 = v608 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v614 = *v611;
                    *(v612 - 1) = *(v611 - 1);
                    *v612 = v614;
                    v611 += 2;
                    v612 += 2;
                    v613 -= 32;
                  }
                  while (v613);
                  if (v608 == v610)
                    goto LABEL_883;
                  if ((v608 & 0x18) != 0)
                    goto LABEL_846;
                  v606 += v610;
                  v609 = &v601[v610];
                  do
                  {
LABEL_882:
                    v635 = *v606++;
                    *v609++ = v635;
                  }
                  while (v606 != v607);
                  goto LABEL_883;
                }
                v610 = 0;
LABEL_846:
                v615 = v608 & 0xFFFFFFFFFFFFFFF8;
                v609 = &v601[v608 & 0xFFFFFFFFFFFFFFF8];
                v616 = v610 - (v608 & 0xFFFFFFFFFFFFFFF8);
                v617 = (uint64_t *)&v606[v610];
                v618 = &v601[v610];
                do
                {
                  v619 = *v617++;
                  *(_QWORD *)v618 = v619;
                  v618 += 8;
                  v616 += 8;
                }
                while (v616);
                if (v608 != v615)
                {
                  v606 += v615;
                  goto LABEL_882;
                }
LABEL_883:
                *((_QWORD *)v556 + 2) = v601;
                *((_QWORD *)v556 + 3) = v601;
                *((_QWORD *)v556 + 5) = v605;
LABEL_884:
                if (v602 == (char *)v603)
                  goto LABEL_902;
                if (v604 < 8)
                {
                  v637 = v601;
                  goto LABEL_900;
                }
                if ((unint64_t)(v601 - v602) < 0x20)
                {
                  v637 = v601;
                  goto LABEL_900;
                }
                if (v604 >= 0x20)
                {
                  v636 = v604 & 0xFFFFFFFFFFFFFFE0;
                  v638 = (__int128 *)(v602 + 16);
                  v639 = v601 + 16;
                  v640 = v604 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v641 = *v638;
                    *(v639 - 1) = *(v638 - 1);
                    *v639 = v641;
                    v638 += 2;
                    v639 += 2;
                    v640 -= 32;
                  }
                  while (v640);
                  if (v604 == v636)
                    goto LABEL_901;
                  if ((v604 & 0x18) != 0)
                    goto LABEL_895;
                  v602 += v636;
                  v637 = &v601[v636];
                  do
                  {
LABEL_900:
                    v647 = *v602++;
                    *v637++ = v647;
                  }
                  while (v602 != (char *)v603);
                  goto LABEL_901;
                }
                v636 = 0;
LABEL_895:
                v642 = v604 & 0xFFFFFFFFFFFFFFF8;
                v637 = &v601[v604 & 0xFFFFFFFFFFFFFFF8];
                v643 = v636 - (v604 & 0xFFFFFFFFFFFFFFF8);
                v644 = (uint64_t *)&v602[v636];
                v645 = &v601[v636];
                do
                {
                  v646 = *v644++;
                  *(_QWORD *)v645 = v646;
                  v645 += 8;
                  v643 += 8;
                }
                while (v643);
                if (v604 != v642)
                {
                  v602 += v642;
                  goto LABEL_900;
                }
LABEL_901:
                v601 = (char *)*((_QWORD *)v556 + 3);
LABEL_902:
                *((_QWORD *)v556 + 3) = &v601[v604];
LABEL_903:
                v648 = v556 + 112;
                *((_OWORD *)v556 + 5) = v789;
                if (v790)
                {
                  v649 = v791;
                  if (!v556[96])
                    v556[96] = 1;
                  *((_DWORD *)v556 + 25) = v649;
                  *((_QWORD *)v556 + 13) = v792;
                  v650 = v793;
                  *((_QWORD *)v556 + 16) = v794;
                  *v648 = v650;
                  *((_QWORD *)v556 + 17) = v795;
                  v790 = 0;
                }
                else
                {
                  if (v556[96])
                    v556[96] = 0;
                  *((_QWORD *)v556 + 13) = v792;
                  v651 = v793;
                  *((_QWORD *)v556 + 16) = v794;
                  *v648 = v651;
                  *((_QWORD *)v556 + 17) = v795;
                }
                if (v786 != v788)
                  free(v786);
LABEL_912:
                if (v778)
                  v778 = 0;
                if (v774 != v776)
                  free(v774);
                v16 = v425-- <= 2;
                if (v16)
                  return;
              }
            }
          }
        }
        if ((unint64_t)v8 < 0x4801)
        {
        }
        else
        {
          v10 = 144 * (v9 >> 1);
          std::swap[abi:nn180100]<gdc::LayerDataIndex>((uint64_t)v7, (uint64_t)&v7[v10]);
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v11 = *(v7 - 31);
          v12 = v7[113];
          v13 = v11 >= v12;
          if (v11 != v12)
            goto LABEL_18;
          v14 = *((_DWORD *)v7 - 7);
          v15 = *((_DWORD *)v7 + 29);
          v16 = v14 < v15;
          if (v14 == v15 && (v17 = *((_DWORD *)v7 - 6), v18 = *((_DWORD *)v7 + 30), v16 = v17 < v18, v17 == v18))
          {
            v19 = *((unsigned __int16 *)v7 - 68);
            v20 = *((unsigned __int16 *)v7 + 4);
            v13 = v19 >= v20;
            if (v19 != v20)
            {
LABEL_18:
              if (!v13)
                goto LABEL_19;
              goto LABEL_65;
            }
            if (*((_QWORD *)v7 - 8) == *((_QWORD *)v7 + 10)
              && (v21 = (const void *)*((_QWORD *)v7 - 16),
                  v22 = *((_QWORD *)v7 - 15) - (_QWORD)v21,
                  v23 = (const void *)*((_QWORD *)v7 + 2),
                  v22 == *((_QWORD *)v7 + 3) - (_QWORD)v23)
              && !memcmp(v21, v23, v22))
            {
              if (*(v7 - 144) < *v7)
                goto LABEL_19;
            }
            else if (gdc::GenericKey::operator<(*((_QWORD *)v7 - 16), *((_QWORD *)v7 - 15), *((_QWORD *)v7 + 2), *((_QWORD *)v7 + 3)))
            {
              goto LABEL_19;
            }
          }
          else if (v16)
          {
            goto LABEL_19;
          }
LABEL_65:
          v784[0] = *v7;
          gdc::LayerDataKey::LayerDataKey((uint64_t)&v785, (uint64_t)(v7 + 8));
          v790 = 0;
          if (v7[96])
          {
            v791 = *((_DWORD *)v7 + 25);
            v790 = 1;
          }
          v58 = v7[112];
          v57 = v7 + 112;
          v792 = *((_QWORD *)v57 - 1);
          v59 = v57[1];
          v60 = *((_DWORD *)v57 + 1);
          v61 = *((_DWORD *)v57 + 2);
          LOBYTE(v793) = v58;
          BYTE1(v793) = v59;
          *(_QWORD *)((char *)&v793 + 4) = __PAIR64__(v61, v60);
          __na = (size_t)v57;
          v795 = *((_QWORD *)v57 + 3);
          v62 = *(unsigned __int8 *)(v759 - 31);
          if (v59 == v62)
          {
            v63 = *(_DWORD *)(v759 - 28);
            v64 = v60 < v63;
            if (v60 == v63 && (v65 = *(_DWORD *)(v759 - 24), v64 = v61 < v65, v61 == v65))
            {
              if (!gdc::LayerDataRequestKey::operator<(v784, v750))
                goto LABEL_206;
            }
            else if (!v64)
            {
LABEL_206:
              v6 = (unsigned __int8 *)(v761 + 144);
              if (v761 + 144 < v759)
              {
                v146 = v785;
                v147 = v789;
                v149 = v786;
                v148 = v787;
                v150 = v787 - (_QWORD)v786;
                v769 = v784[0];
                while (1)
                {
                  v152 = v6[113];
                  v151 = v59 >= v152;
                  if (v59 != v152)
                    goto LABEL_211;
                  v153 = *((_DWORD *)v6 + 29);
                  v154 = v60 < v153;
                  if (v60 == v153 && (v155 = *((_DWORD *)v6 + 30), v154 = v61 < v155, v61 == v155))
                  {
                    v156 = *((unsigned __int16 *)v6 + 4);
                    v151 = v146 >= v156;
                    if (v146 != v156)
                      goto LABEL_211;
                    if (v147 == *((_QWORD *)v6 + 10))
                    {
                      v157 = (const void *)*((_QWORD *)v6 + 2);
                      if (v150 == *((_QWORD *)v6 + 3) - (_QWORD)v157 && !memcmp(v149, v157, v148 - (_QWORD)v149))
                      {
                        v151 = v769 >= *v6;
LABEL_211:
                        if (!v151)
                          goto LABEL_225;
                        goto LABEL_213;
                      }
                    }
                    if (gdc::GenericKey::operator<((uint64_t)v149, v148, *((_QWORD *)v6 + 2), *((_QWORD *)v6 + 3)))
                      goto LABEL_225;
                  }
                  else if (v154)
                  {
                    goto LABEL_225;
                  }
LABEL_213:
                  v6 += 144;
                  if ((unint64_t)v6 >= v759)
                    goto LABEL_225;
                }
              }
              goto LABEL_225;
            }
          }
          else if (v59 >= v62)
          {
            goto LABEL_206;
          }
          v135 = v785;
          v136 = v789;
          v138 = v786;
          v137 = v787;
          v768 = v787 - (_QWORD)v786;
          v763 = v784[0];
          v139 = v761;
          do
          {
            while (1)
            {
              while (1)
              {
                while (1)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v140 = v139;
                      v139 += 144;
                      v141 = *(unsigned __int8 *)(v140 + 257);
                      if (v59 == v141)
                        break;
                      if (v59 < v141)
                        goto LABEL_204;
                    }
                    v142 = *(_DWORD *)(v140 + 260);
                    if (v60 == v142)
                      break;
                    if (v60 < v142)
                      goto LABEL_204;
                  }
                  v143 = *(_DWORD *)(v140 + 264);
                  if (v61 == v143)
                    break;
                  if (v61 < v143)
                    goto LABEL_204;
                }
                v144 = *(unsigned __int16 *)(v140 + 152);
                if (v135 == v144)
                  break;
                if (v135 < v144)
                  goto LABEL_204;
              }
              if (v136 == *(_QWORD *)(v140 + 224))
              {
                v145 = *(const void **)(v140 + 160);
                if (v768 == *(_QWORD *)(v140 + 168) - (_QWORD)v145 && !memcmp(v138, v145, v768))
                  break;
              }
              if (gdc::GenericKey::operator<((uint64_t)v138, v137, *(_QWORD *)(v140 + 160), *(_QWORD *)(v140 + 168)))
                goto LABEL_204;
            }
          }
          while (v763 >= *(unsigned __int8 *)(v140 + 144));
LABEL_204:
          v6 = (unsigned __int8 *)(v140 + 144);
LABEL_225:
          v158 = v759;
          if ((unint64_t)v6 >= v759)
            goto LABEL_243;
          v159 = v785;
          v160 = v789;
          v162 = v786;
          v161 = v787;
          v770 = v787 - (_QWORD)v786;
          v764 = v784[0];
          for (i = v747; ; i -= 144)
          {
            v165 = v59 >= v62;
            if (v59 != v62)
            {
LABEL_227:
              if (v165)
                goto LABEL_241;
              goto LABEL_228;
            }
            v166 = *(_DWORD *)(i + 147);
            v167 = v60 < v166;
            if (v60 == v166)
            {
              v168 = *(_DWORD *)(i + 151);
              v167 = v61 < v168;
              if (v61 == v168)
                break;
            }
            if (!v167)
              goto LABEL_241;
LABEL_228:
            v164 = *i;
            v62 = v164;
          }
          v169 = *(unsigned __int16 *)(i + 39);
          v165 = v159 >= v169;
          if (v159 != v169)
            goto LABEL_227;
          if (v160 != *(_QWORD *)(i + 111)
            || (v170 = *(const void **)(i + 47), v770 != *(_QWORD *)(i + 55) - (_QWORD)v170)
            || memcmp(v162, v170, v770))
          {
            if (!gdc::GenericKey::operator<((uint64_t)v162, v161, *(_QWORD *)(i + 47), *(_QWORD *)(i + 55)))
              goto LABEL_241;
            goto LABEL_228;
          }
          if (v764 < i[31])
            goto LABEL_228;
LABEL_241:
          v158 = (unint64_t)(i + 31);
LABEL_243:
          while (2)
          {
            if ((unint64_t)v6 < v158)
            {
              std::swap[abi:nn180100]<gdc::LayerDataIndex>((uint64_t)v6, v158);
              v171 = BYTE1(v793);
              v172 = DWORD1(v793);
              v173 = DWORD2(v793);
              v174 = v785;
              v175 = v789;
              v176 = v786;
              v177 = v787;
              v771 = v787 - (_QWORD)v786;
              v765 = v784[0];
              do
              {
                while (1)
                {
                  while (1)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        while (1)
                        {
                          v178 = v6;
                          v6 += 144;
                          v179 = v178[257];
                          if (v171 == v179)
                            break;
                          if (v171 < v179)
                            goto LABEL_262;
                        }
                        v180 = *((_DWORD *)v178 + 65);
                        if (v172 == v180)
                          break;
                        if (v172 < v180)
                          goto LABEL_262;
                      }
                      v181 = *((_DWORD *)v178 + 66);
                      if (v173 == v181)
                        break;
                      if (v173 < v181)
                        goto LABEL_262;
                    }
                    v182 = *((unsigned __int16 *)v178 + 76);
                    if (v174 == v182)
                      break;
                    if (v174 < v182)
                      goto LABEL_262;
                  }
                  if (v175 == *((_QWORD *)v178 + 28))
                  {
                    v183 = (const void *)*((_QWORD *)v178 + 20);
                    if (v771 == *((_QWORD *)v178 + 21) - (_QWORD)v183 && !memcmp(v176, v183, v771))
                      break;
                  }
                  if (gdc::GenericKey::operator<((uint64_t)v176, v177, *((_QWORD *)v178 + 20), *((_QWORD *)v178 + 21)))
                    goto LABEL_262;
                }
              }
              while (v765 >= v178[144]);
LABEL_262:
              v6 = v178 + 144;
              v184 = v158 - 64;
LABEL_266:
              v186 = *(unsigned __int8 *)(v184 + 33);
              v185 = v171 >= v186;
              if (v171 == v186)
              {
                v187 = *(_DWORD *)(v184 + 36);
                v188 = v172 < v187;
                if (v172 != v187 || (v189 = *(_DWORD *)(v184 + 40), v188 = v173 < v189, v173 != v189))
                {
                  if (!v188)
                  {
LABEL_242:
                    v158 = v184 - 80;
                    continue;
                  }
                  goto LABEL_265;
                }
                v190 = *(unsigned __int16 *)(v184 - 72);
                v185 = v174 >= v190;
                if (v174 == v190)
                {
                  if (v175 != *(_QWORD *)v184
                    || (v191 = *(const void **)(v184 - 64), v771 != *(_QWORD *)(v184 - 56) - (_QWORD)v191)
                    || memcmp(v176, v191, v771))
                  {
                    if (!gdc::GenericKey::operator<((uint64_t)v176, v177, *(_QWORD *)(v184 - 64), *(_QWORD *)(v184 - 56)))goto LABEL_242;
                    goto LABEL_265;
                  }
                  v185 = v765 >= *(unsigned __int8 *)(v184 - 80);
                }
              }
              if (v185)
                goto LABEL_242;
LABEL_265:
              v184 -= 144;
              goto LABEL_266;
            }
            break;
          }
          if (v6 - 144 != (unsigned __int8 *)v761)
          {
            v192 = gdc::LayerDataRequestKey::operator=(v761, (uint64_t)(v6 - 144));
            v193 = *((_OWORD *)v6 - 2);
            *(_QWORD *)(__na + 16) = *((_QWORD *)v6 - 2);
            *(_OWORD *)__na = v193;
            *(_QWORD *)(v192 + 136) = *((_QWORD *)v6 - 1);
          }
          *(v6 - 144) = v784[0];
          *((_WORD *)v6 - 68) = v785;
          a2 = (unsigned __int8 *)v759;
          if (v6 - 144 == v784)
            goto LABEL_322;
          v194 = (void *)*((_QWORD *)v6 - 16);
          if (v194 != *((void **)v6 - 14))
            free(v194);
          v195 = v6 - 96;
          *((_QWORD *)v6 - 16) = v6 - 96;
          *((_QWORD *)v6 - 15) = v6 - 96;
          *((_QWORD *)v6 - 14) = v6 - 96;
          *((_QWORD *)v6 - 13) = 32;
          v196 = (unsigned __int8 *)v786;
          v197 = v787;
          v198 = v787 - (_QWORD)v786;
          if ((unint64_t)(v787 - (_QWORD)v786) < 0x21)
            goto LABEL_303;
          if (v198 <= 0x40)
            v199 = 64;
          else
            v199 = v787 - (_QWORD)v786;
          v195 = (unsigned __int8 *)malloc_type_malloc(v199, 0x100004077774924uLL);
          v200 = (unsigned __int8 *)*((_QWORD *)v6 - 16);
          v201 = (unsigned __int8 *)*((_QWORD *)v6 - 15);
          if (v200 == v201)
            goto LABEL_302;
          v202 = v201 - v200;
          if ((unint64_t)(v201 - v200) < 8)
          {
            v203 = v195;
            goto LABEL_301;
          }
          v203 = v195;
          if ((unint64_t)(v195 - v200) < 0x20)
            goto LABEL_301;
          if (v202 >= 0x20)
          {
            v204 = v202 & 0xFFFFFFFFFFFFFFE0;
            v205 = (__int128 *)(v200 + 16);
            v206 = v195 + 16;
            v207 = v202 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v208 = *v205;
              *(v206 - 1) = *(v205 - 1);
              *v206 = v208;
              v205 += 2;
              v206 += 2;
              v207 -= 32;
            }
            while (v207);
            if (v202 == v204)
              goto LABEL_302;
            if ((v202 & 0x18) != 0)
              goto LABEL_296;
            v200 += v204;
            v203 = &v195[v204];
            do
            {
LABEL_301:
              v214 = *v200++;
              *v203++ = v214;
            }
            while (v200 != v201);
            goto LABEL_302;
          }
          v204 = 0;
LABEL_296:
          v209 = v202 & 0xFFFFFFFFFFFFFFF8;
          v203 = &v195[v202 & 0xFFFFFFFFFFFFFFF8];
          v210 = v204 - (v202 & 0xFFFFFFFFFFFFFFF8);
          v211 = (uint64_t *)&v200[v204];
          v212 = &v195[v204];
          do
          {
            v213 = *v211++;
            *(_QWORD *)v212 = v213;
            v212 += 8;
            v210 += 8;
          }
          while (v210);
          if (v202 != v209)
          {
            v200 += v209;
            goto LABEL_301;
          }
LABEL_302:
          *((_QWORD *)v6 - 16) = v195;
          *((_QWORD *)v6 - 15) = v195;
          *((_QWORD *)v6 - 13) = v199;
LABEL_303:
          if (v196 == (unsigned __int8 *)v197)
            goto LABEL_321;
          if (v198 < 8)
          {
            v216 = v195;
            goto LABEL_319;
          }
          if ((unint64_t)(v195 - v196) < 0x20)
          {
            v216 = v195;
            goto LABEL_319;
          }
          if (v198 >= 0x20)
          {
            v215 = v198 & 0xFFFFFFFFFFFFFFE0;
            v217 = (__int128 *)(v196 + 16);
            v218 = v195 + 16;
            v219 = v198 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v220 = *v217;
              *(v218 - 1) = *(v217 - 1);
              *v218 = v220;
              v217 += 2;
              v218 += 2;
              v219 -= 32;
            }
            while (v219);
            if (v198 == v215)
              goto LABEL_320;
            if ((v198 & 0x18) != 0)
              goto LABEL_314;
            v196 += v215;
            v216 = &v195[v215];
            do
            {
LABEL_319:
              v226 = *v196++;
              *v216++ = v226;
            }
            while (v196 != (unsigned __int8 *)v197);
            goto LABEL_320;
          }
          v215 = 0;
LABEL_314:
          v221 = v198 & 0xFFFFFFFFFFFFFFF8;
          v216 = &v195[v198 & 0xFFFFFFFFFFFFFFF8];
          v222 = v215 - (v198 & 0xFFFFFFFFFFFFFFF8);
          v223 = (uint64_t *)&v196[v215];
          v224 = &v195[v215];
          do
          {
            v225 = *v223++;
            *(_QWORD *)v224 = v225;
            v224 += 8;
            v222 += 8;
          }
          while (v222);
          if (v198 != v221)
          {
            v196 += v221;
            goto LABEL_319;
          }
LABEL_320:
          v195 = (unsigned __int8 *)*((_QWORD *)v6 - 15);
LABEL_321:
          *((_QWORD *)v6 - 15) = &v195[v198];
          a2 = (unsigned __int8 *)v759;
LABEL_322:
          *((_OWORD *)v6 - 4) = v789;
          v227 = *(v6 - 48);
          if (v790)
          {
            *((_DWORD *)v6 - 11) = v791;
            if (!v227)
              *(v6 - 48) = 1;
          }
          else if (*(v6 - 48))
          {
            *(v6 - 48) = 0;
          }
          *((_QWORD *)v6 - 5) = v792;
          v228 = v793;
          *((_QWORD *)v6 - 2) = v794;
          *((_OWORD *)v6 - 2) = v228;
          *((_QWORD *)v6 - 1) = v795;
          if (v790)
            v790 = 0;
          if (v786 != v788)
            free(v786);
          a4 = 0;
          continue;
        }
LABEL_19:
        v784[0] = *v7;
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v785, (uint64_t)(v7 + 8));
        v790 = 0;
        if (v7[96])
        {
          v791 = *((_DWORD *)v7 + 25);
          v790 = 1;
        }
        v24 = 0;
        v25 = v7[112];
        v792 = *((_QWORD *)v7 + 13);
        v26 = v7[113];
        LOBYTE(v793) = v25;
        BYTE1(v793) = v26;
        *(_QWORD *)((char *)&v793 + 4) = *(_QWORD *)(v7 + 116);
        v753 = v7 + 112;
        v795 = *((_QWORD *)v7 + 17);
        v27 = DWORD2(v793);
        v28 = DWORD1(v793);
        v29 = v785;
        v766 = v789;
        v31 = v786;
        v30 = v787;
        __n = v787 - (_QWORD)v786;
        v762 = v784[0];
        v32 = v785;
        while (2)
        {
          v33 = &v7[v24];
          v34 = v7[v24 + 257];
          v35 = v34 >= v26;
          if (v34 != v26)
            goto LABEL_22;
          v36 = *((_DWORD *)v33 + 65);
          v37 = v36 < v28;
          if (v36 != v28 || (v38 = *(_DWORD *)&v7[v24 + 264], v37 = v38 < v27, v38 != v27))
          {
            if (!v37)
              goto LABEL_36;
            goto LABEL_23;
          }
          v39 = *(unsigned __int16 *)&v7[v24 + 152];
          v35 = v39 >= v29;
          if (v39 != v29)
          {
LABEL_22:
            if (v35)
              goto LABEL_36;
LABEL_23:
            v24 += 144;
            continue;
          }
          break;
        }
        v40 = &v7[v24];
        if (*(_QWORD *)&v7[v24 + 224] != v766
          || (v41 = (const void *)*((_QWORD *)v40 + 20), *((_QWORD *)v40 + 21) - (_QWORD)v41 != __n)
          || memcmp(v41, v31, __n))
        {
          v42 = gdc::GenericKey::operator<(*((_QWORD *)v40 + 20), *((_QWORD *)v40 + 21), (uint64_t)v31, v30);
          v29 = v32;
          if (!v42)
            goto LABEL_36;
          goto LABEL_23;
        }
        v29 = v32;
        if (v33[144] < v762)
          goto LABEL_23;
LABEL_36:
        v43 = &v7[v24];
        v44 = (unint64_t)&v7[v24 + 144];
        v45 = v752;
        if (v43 != v7)
        {
          while (1)
          {
            v67 = v45[33];
            v66 = v67 >= v26;
            if (v67 != v26)
              goto LABEL_73;
            v68 = *((_DWORD *)v45 + 9);
            v69 = v68 < v28;
            if (v68 == v28 && (v70 = *((_DWORD *)v45 + 10), v69 = v70 < v27, v70 == v27))
            {
              v71 = *((unsigned __int16 *)v45 - 36);
              v66 = v71 >= v29;
              if (v71 != v29)
                goto LABEL_73;
              if (*(_QWORD *)v45 == v766)
              {
                v72 = (const void *)*((_QWORD *)v45 - 8);
                if (*((_QWORD *)v45 - 7) - (_QWORD)v72 == __n && !memcmp(v72, v31, __n))
                {
                  v66 = *(v45 - 80) >= v762;
                  v29 = v32;
LABEL_73:
                  if (!v66)
                    goto LABEL_87;
                  goto LABEL_75;
                }
              }
              v73 = gdc::GenericKey::operator<(*((_QWORD *)v45 - 8), *((_QWORD *)v45 - 7), (uint64_t)v31, v30);
              v29 = v32;
              if (v73)
                goto LABEL_87;
            }
            else if (v69)
            {
LABEL_87:
              v46 = v45 - 80;
              goto LABEL_88;
            }
LABEL_75:
            v45 -= 144;
          }
        }
        v46 = (unsigned __int8 *)v759;
        if (v44 < v759)
        {
          for (j = v752; ; j -= 144)
          {
            v46 = j - 80;
            v49 = j[33];
            if (v49 == v26)
            {
              v50 = *((_DWORD *)j + 9);
              v51 = v50 < v28;
              if (v50 == v28 && (v52 = *((_DWORD *)j + 10), v51 = v52 < v27, v52 == v27))
              {
                v53 = *((unsigned __int16 *)j - 36);
                if (v53 == v29)
                {
                  if (*(_QWORD *)j == v766
                    && (v54 = (const void *)*((_QWORD *)j - 8), *((_QWORD *)j - 7) - (_QWORD)v54 == __n)
                    && !memcmp(v54, v31, __n))
                  {
                    v55 = *v46 < v762;
                  }
                  else
                  {
                    v55 = gdc::GenericKey::operator<(*((_QWORD *)j - 8), *((_QWORD *)j - 7), (uint64_t)v31, v30);
                  }
                  v29 = v32;
                  if (v55)
                    break;
                }
                else if (v53 < v29)
                {
                  break;
                }
                if (v44 >= (unint64_t)v46)
                  break;
              }
              else if (v51 || v44 >= (unint64_t)v46)
              {
                break;
              }
            }
            else if (v49 < v26 || v44 >= (unint64_t)v46)
            {
              break;
            }
          }
        }
LABEL_88:
        v6 = (unsigned __int8 *)v44;
        v755 = v46;
        __nb = v44;
        if (v44 >= (unint64_t)v46)
          goto LABEL_126;
        v74 = (unint64_t)v46;
        v6 = (unsigned __int8 *)v44;
        while (2)
        {
          std::swap[abi:nn180100]<gdc::LayerDataIndex>((uint64_t)v6, v74);
          v75 = BYTE1(v793);
          v76 = DWORD1(v793);
          v77 = DWORD2(v793);
          v29 = v785;
          v78 = v789;
          v80 = v786;
          v79 = v787;
          v767 = v787 - (_QWORD)v786;
          v762 = v784[0];
          v81 = v785;
          do
          {
            while (1)
            {
              while (1)
              {
                while (1)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v82 = v6;
                      v6 += 144;
                      v83 = v82[257];
                      if (v83 == v75)
                        break;
                      if (v83 >= v75)
                        goto LABEL_109;
                    }
                    v84 = *((_DWORD *)v82 + 65);
                    if (v84 == v76)
                      break;
                    if (v84 >= v76)
                      goto LABEL_109;
                  }
                  v85 = *((_DWORD *)v82 + 66);
                  if (v85 == v77)
                    break;
                  if (v85 >= v77)
                    goto LABEL_109;
                }
                v86 = *((unsigned __int16 *)v82 + 76);
                if (v86 == v29)
                  break;
                if (v86 >= v29)
                  goto LABEL_109;
              }
              if (*((_QWORD *)v82 + 28) == v78)
              {
                v87 = (const void *)*((_QWORD *)v82 + 20);
                if (*((_QWORD *)v82 + 21) - (_QWORD)v87 == v767 && !memcmp(v87, v80, v767))
                  break;
              }
              v88 = gdc::GenericKey::operator<(*((_QWORD *)v82 + 20), *((_QWORD *)v82 + 21), (uint64_t)v80, v79);
              v29 = v81;
              if (!v88)
                goto LABEL_109;
            }
            v29 = v81;
          }
          while (v82[144] < v762);
LABEL_109:
          v6 = v82 + 144;
          v89 = v74 - 64;
          while (2)
          {
            v91 = *(unsigned __int8 *)(v89 + 33);
            v90 = v91 >= v75;
            if (v91 != v75)
              goto LABEL_111;
            v92 = *(_DWORD *)(v89 + 36);
            v93 = v92 < v76;
            if (v92 == v76)
            {
              v94 = *(_DWORD *)(v89 + 40);
              v93 = v94 < v77;
              if (v94 == v77)
              {
                v95 = *(unsigned __int16 *)(v89 - 72);
                v90 = v95 >= v29;
                if (v95 == v29)
                {
                  if (*(_QWORD *)v89 != v78
                    || (v96 = *(const void **)(v89 - 64), *(_QWORD *)(v89 - 56) - (_QWORD)v96 != v767)
                    || memcmp(v96, v80, v767))
                  {
                    v97 = gdc::GenericKey::operator<(*(_QWORD *)(v89 - 64), *(_QWORD *)(v89 - 56), (uint64_t)v80, v79);
                    v29 = v81;
                    if (v97)
                      goto LABEL_90;
                    goto LABEL_113;
                  }
                  v90 = *(unsigned __int8 *)(v89 - 80) >= v762;
                  v29 = v81;
                }
LABEL_111:
                if (!v90)
                  goto LABEL_90;
LABEL_113:
                v89 -= 144;
                continue;
              }
            }
            break;
          }
          if (!v93)
            goto LABEL_113;
LABEL_90:
          v74 = v89 - 80;
          if ((unint64_t)v6 < v74)
            continue;
          break;
        }
LABEL_126:
        a2 = (unsigned __int8 *)v759;
        a1 = (unsigned __int8 *)v761;
        if (v6 - 144 != (unsigned __int8 *)v761)
        {
          gdc::LayerDataRequestKey::operator=(v761, (uint64_t)(v6 - 144));
          v98 = *((_OWORD *)v6 - 2);
          *((_QWORD *)v753 + 2) = *((_QWORD *)v6 - 2);
          *(_OWORD *)v753 = v98;
          *(_QWORD *)(v761 + 136) = *((_QWORD *)v6 - 1);
          LOBYTE(v762) = v784[0];
          LOWORD(v29) = v785;
        }
        *(v6 - 144) = v762;
        *((_WORD *)v6 - 68) = v29;
        if (v6 - 144 == v784)
          goto LABEL_171;
        v99 = (void *)*((_QWORD *)v6 - 16);
        if (v99 != *((void **)v6 - 14))
          free(v99);
        v100 = v6 - 96;
        *((_QWORD *)v6 - 16) = v6 - 96;
        *((_QWORD *)v6 - 15) = v6 - 96;
        *((_QWORD *)v6 - 14) = v6 - 96;
        *((_QWORD *)v6 - 13) = 32;
        v101 = (unsigned __int8 *)v786;
        v102 = v787;
        v103 = v787 - (_QWORD)v786;
        if ((unint64_t)(v787 - (_QWORD)v786) < 0x21)
          goto LABEL_152;
        if (v103 <= 0x40)
          v104 = 64;
        else
          v104 = v787 - (_QWORD)v786;
        v100 = (unsigned __int8 *)malloc_type_malloc(v104, 0x100004077774924uLL);
        v105 = (unsigned __int8 *)*((_QWORD *)v6 - 16);
        v106 = (unsigned __int8 *)*((_QWORD *)v6 - 15);
        if (v105 == v106)
          goto LABEL_151;
        v107 = v106 - v105;
        if ((unint64_t)(v106 - v105) < 8)
        {
          v108 = v100;
          goto LABEL_150;
        }
        v108 = v100;
        if ((unint64_t)(v100 - v105) < 0x20)
          goto LABEL_150;
        if (v107 >= 0x20)
        {
          v109 = v107 & 0xFFFFFFFFFFFFFFE0;
          v110 = (__int128 *)(v105 + 16);
          v111 = v100 + 16;
          v112 = v107 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v113 = *v110;
            *(v111 - 1) = *(v110 - 1);
            *v111 = v113;
            v110 += 2;
            v111 += 2;
            v112 -= 32;
          }
          while (v112);
          if (v107 == v109)
            goto LABEL_151;
          if ((v107 & 0x18) != 0)
            goto LABEL_145;
          v105 += v109;
          v108 = &v100[v109];
          do
          {
LABEL_150:
            v119 = *v105++;
            *v108++ = v119;
          }
          while (v105 != v106);
          goto LABEL_151;
        }
        v109 = 0;
LABEL_145:
        v114 = v107 & 0xFFFFFFFFFFFFFFF8;
        v108 = &v100[v107 & 0xFFFFFFFFFFFFFFF8];
        v115 = v109 - (v107 & 0xFFFFFFFFFFFFFFF8);
        v116 = (uint64_t *)&v105[v109];
        v117 = &v100[v109];
        do
        {
          v118 = *v116++;
          *(_QWORD *)v117 = v118;
          v117 += 8;
          v115 += 8;
        }
        while (v115);
        if (v107 != v114)
        {
          v105 += v114;
          goto LABEL_150;
        }
LABEL_151:
        *((_QWORD *)v6 - 16) = v100;
        *((_QWORD *)v6 - 15) = v100;
        *((_QWORD *)v6 - 13) = v104;
LABEL_152:
        if (v101 == (unsigned __int8 *)v102)
          goto LABEL_170;
        if (v103 < 8)
        {
          v121 = v100;
          goto LABEL_168;
        }
        if ((unint64_t)(v100 - v101) < 0x20)
        {
          v121 = v100;
          goto LABEL_168;
        }
        if (v103 >= 0x20)
        {
          v120 = v103 & 0xFFFFFFFFFFFFFFE0;
          v122 = (__int128 *)(v101 + 16);
          v123 = v100 + 16;
          v124 = v103 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v125 = *v122;
            *(v123 - 1) = *(v122 - 1);
            *v123 = v125;
            v122 += 2;
            v123 += 2;
            v124 -= 32;
          }
          while (v124);
          if (v103 == v120)
            goto LABEL_169;
          if ((v103 & 0x18) != 0)
            goto LABEL_163;
          v101 += v120;
          v121 = &v100[v120];
          do
          {
LABEL_168:
            v131 = *v101++;
            *v121++ = v131;
          }
          while (v101 != (unsigned __int8 *)v102);
          goto LABEL_169;
        }
        v120 = 0;
LABEL_163:
        v126 = v103 & 0xFFFFFFFFFFFFFFF8;
        v121 = &v100[v103 & 0xFFFFFFFFFFFFFFF8];
        v127 = v120 - (v103 & 0xFFFFFFFFFFFFFFF8);
        v128 = (uint64_t *)&v101[v120];
        v129 = &v100[v120];
        do
        {
          v130 = *v128++;
          *(_QWORD *)v129 = v130;
          v129 += 8;
          v127 += 8;
        }
        while (v127);
        if (v103 != v126)
        {
          v101 += v126;
          goto LABEL_168;
        }
LABEL_169:
        v100 = (unsigned __int8 *)*((_QWORD *)v6 - 15);
LABEL_170:
        *((_QWORD *)v6 - 15) = &v100[v103];
        a2 = (unsigned __int8 *)v759;
LABEL_171:
        *((_OWORD *)v6 - 4) = v789;
        v132 = *(v6 - 48);
        if (v790)
        {
          *((_DWORD *)v6 - 11) = v791;
          if (!v132)
            *(v6 - 48) = 1;
        }
        else if (*(v6 - 48))
        {
          *(v6 - 48) = 0;
        }
        *((_QWORD *)v6 - 5) = v792;
        v133 = v793;
        *((_QWORD *)v6 - 2) = v794;
        *((_OWORD *)v6 - 2) = v133;
        *((_QWORD *)v6 - 1) = v795;
        if (v790)
          v790 = 0;
        if (v786 != v788)
          free(v786);
        if (__nb < (unint64_t)v755)
        {
LABEL_184:
          a4 = 0;
          continue;
        }
        {
          if (v134)
            continue;
          goto LABEL_184;
        }
        a2 = v6 - 144;
        if (!v134)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a2 - 1;
  v10 = a2 - 2;
  v11 = a2 - 3;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (char *)a2 - (char *)v12;
    v14 = a2 - v12;
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (v9->n128_u64[0] < v12->n128_u64[0])
          goto LABEL_99;
        return result;
      case 3:
        v62 = v12 + 1;
        v63 = v12[1].n128_u64[0];
        v64 = v9->n128_u64[0];
        if (v63 < v12->n128_u64[0])
        {
          if (v64 >= v63)
          {
            v132 = *v12;
            *v12 = *v62;
            result = v132;
            *v62 = v132;
            if (v9->n128_u64[0] >= v12[1].n128_u64[0])
              return result;
            result = *v62;
            *v62 = *v9;
          }
          else
          {
LABEL_99:
            v128 = *v12;
            *v12 = *v9;
            result = v128;
          }
          *v9 = result;
          return result;
        }
        if (v64 < v63)
        {
          result = *v62;
          *v62 = *v9;
          *v9 = result;
          if (v12[1].n128_u64[0] < v12->n128_u64[0])
          {
            v131 = *v12;
            *v12 = *v62;
            result = v131;
            *v62 = v131;
          }
        }
        return result;
      case 4:
        result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,ggl::Batcher::commit::$_0 &,gm::Range<unsigned long> *>(v12, v12 + 1, v12[2].n128_u64, (__n128 *)a2[-1].n128_u64, result).n128_u64[0];
        return result;
      case 5:
        v65 = v12 + 1;
        v66 = v12 + 2;
        v67 = v12 + 3;
        result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,ggl::Batcher::commit::$_0 &,gm::Range<unsigned long> *>(v12, v12 + 1, v12[2].n128_u64, (__n128 *)v12[3].n128_u64, result).n128_u64[0];
        if (v9->n128_u64[0] < v12[3].n128_u64[0])
        {
          result = *v67;
          *v67 = *v9;
          *v9 = result;
          if (v67->n128_u64[0] < v66->n128_u64[0])
          {
            result = *v66;
            *v66 = *v67;
            *v67 = result;
            if (v66->n128_u64[0] < v65->n128_u64[0])
            {
              result = *v65;
              *v65 = *v66;
              *v66 = result;
              if (v12[1].n128_u64[0] < v12->n128_u64[0])
              {
                v129 = *v12;
                *v12 = *v65;
                result = v129;
                *v65 = v129;
              }
            }
          }
        }
        return result;
      default:
        if (v13 <= 383)
        {
          v68 = v12 + 1;
          v70 = v12 == a2 || v68 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v70)
            {
              v71 = 0;
              v72 = v12;
              do
              {
                v74 = v68;
                v75 = v72[1].n128_u64[0];
                if (v75 < v72->n128_u64[0])
                {
                  v76 = v72[1].n128_i64[1];
                  v77 = v71;
                  do
                  {
                    result = *(__n128 *)((char *)v12 + v77);
                    *(__n128 *)((char *)v12 + v77 + 16) = result;
                    if (!v77)
                    {
                      v73 = v12;
                      goto LABEL_117;
                    }
                    v78 = *(unint64_t *)((char *)v12[-1].n128_u64 + v77);
                    v77 -= 16;
                  }
                  while (v75 < v78);
                  v73 = (__n128 *)((char *)v12 + v77 + 16);
LABEL_117:
                  v73->n128_u64[0] = v75;
                  v73->n128_u64[1] = v76;
                }
                v68 = v74 + 1;
                v71 += 16;
                v72 = v74;
              }
              while (&v74[1] != a2);
            }
          }
          else if (!v70)
          {
            do
            {
              v105 = v68;
              v106 = a1[1].n128_u64[0];
              if (v106 < a1->n128_u64[0])
              {
                v107 = a1[1].n128_u64[1];
                v108 = v105;
                do
                {
                  result = v108[-1];
                  *v108 = result;
                  v109 = v108[-2].n128_u64[0];
                  --v108;
                }
                while (v106 < v109);
                v108->n128_u64[0] = v106;
                v108->n128_u64[1] = v107;
              }
              v68 = v105 + 1;
              a1 = v105;
            }
            while (&v105[1] != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v12 != a2)
          {
            v79 = (unint64_t)(v14 - 2) >> 1;
            v80 = v79;
            do
            {
              if (v79 >= v80)
              {
                v82 = (2 * v80) | 1;
                v83 = &v12[v82];
                if (2 * v80 + 2 >= v14)
                {
                  v84 = v83->n128_u64[0];
                }
                else
                {
                  v84 = v83[1].n128_u64[0];
                  v85 = v83->n128_u64[0] >= v84;
                  if (v83->n128_u64[0] > v84)
                    v84 = v83->n128_u64[0];
                  if (!v85)
                  {
                    ++v83;
                    v82 = 2 * v80 + 2;
                  }
                }
                v86 = &v12[v80];
                v87 = v86->n128_u64[0];
                if (v84 >= v86->n128_u64[0])
                {
                  v88 = v86->n128_i64[1];
                  while (1)
                  {
                    v91 = v86;
                    v86 = v83;
                    *v91 = *v83;
                    if (v79 < v82)
                      break;
                    v92 = (2 * v82) | 1;
                    v83 = &v12[v92];
                    v82 = 2 * v82 + 2;
                    if (v82 < v14)
                    {
                      v89 = v83->n128_u64[0];
                      v90 = v83[1].n128_u64[0];
                      if (v83->n128_u64[0] <= v90)
                        v89 = v83[1].n128_u64[0];
                      if (v83->n128_u64[0] >= v90)
                        v82 = v92;
                      else
                        ++v83;
                      if (v89 < v87)
                        break;
                    }
                    else
                    {
                      v82 = v92;
                      if (v83->n128_u64[0] < v87)
                        break;
                    }
                  }
                  v86->n128_u64[0] = v87;
                  v86->n128_u64[1] = v88;
                }
              }
              v81 = v80-- <= 0;
            }
            while (!v81);
            v93 = (unint64_t)v13 >> 4;
            do
            {
              v94 = 0;
              v130 = *v12;
              v95 = v12;
              do
              {
                v96 = &v95[v94 + 1];
                v97 = (2 * v94) | 1;
                v98 = 2 * v94 + 2;
                if (v98 < v93 && v96->n128_u64[0] < v96[1].n128_u64[0])
                {
                  ++v96;
                  v97 = v98;
                }
                *v95 = *v96;
                v95 = v96;
                v94 = v97;
              }
              while (v97 <= (uint64_t)((unint64_t)(v93 - 2) >> 1));
              if (v96 == --a2)
              {
                result = v130;
                *v96 = v130;
              }
              else
              {
                *v96 = *a2;
                result = v130;
                *a2 = v130;
                v99 = (char *)v96 - (char *)v12 + 16;
                if (v99 >= 17)
                {
                  v100 = (((unint64_t)v99 >> 4) - 2) >> 1;
                  v101 = &v12[v100];
                  v102 = v96->n128_u64[0];
                  if (v101->n128_u64[0] < v96->n128_u64[0])
                  {
                    v103 = v96->n128_u64[1];
                    do
                    {
                      v104 = v96;
                      v96 = v101;
                      result = *v101;
                      *v104 = *v101;
                      if (!v100)
                        break;
                      v100 = (v100 - 1) >> 1;
                      v101 = &v12[v100];
                    }
                    while (v101->n128_u64[0] < v102);
                    v96->n128_u64[0] = v102;
                    v96->n128_u64[1] = v103;
                  }
                }
              }
              v81 = v93-- <= 2;
            }
            while (!v81);
          }
          return result;
        }
        v15 = (unint64_t)v14 >> 1;
        v16 = &v12[(unint64_t)v14 >> 1];
        v17 = v9->n128_u64[0];
        if ((unint64_t)v13 >= 0x801)
        {
          v18 = v16->n128_u64[0];
          if (v16->n128_u64[0] >= v12->n128_u64[0])
          {
            if (v17 < v18)
            {
              v112 = *v16;
              *v16 = *v9;
              *v9 = v112;
              if (v16->n128_u64[0] < v12->n128_u64[0])
              {
                v113 = *v12;
                *v12 = *v16;
                *v16 = v113;
              }
            }
          }
          else
          {
            if (v17 < v18)
            {
              v110 = *v12;
              *v12 = *v9;
              goto LABEL_20;
            }
            v116 = *v12;
            *v12 = *v16;
            *v16 = v116;
            if (v9->n128_u64[0] < v16->n128_u64[0])
            {
              v110 = *v16;
              *v16 = *v9;
LABEL_20:
              *v9 = v110;
            }
          }
          v20 = v12 + 1;
          v21 = &v12[v15];
          v24 = v21[-1].n128_u64[0];
          v22 = v21 - 1;
          v23 = v24;
          v25 = v10->n128_u64[0];
          if (v24 >= v12[1].n128_u64[0])
          {
            if (v25 < v23)
            {
              v117 = *v22;
              *v22 = *v10;
              *v10 = v117;
              if (v22->n128_u64[0] < v20->n128_u64[0])
              {
                v27 = *v20;
                *v20 = *v22;
                *v22 = v27;
              }
            }
          }
          else
          {
            if (v25 < v23)
            {
              v26 = *v20;
              *v20 = *v10;
              goto LABEL_32;
            }
            v28 = *v20;
            *v20 = *v22;
            *v22 = v28;
            if (v10->n128_u64[0] < v22->n128_u64[0])
            {
              v119 = *v22;
              *v22 = *v10;
              v26 = v119;
LABEL_32:
              *v10 = v26;
            }
          }
          v29 = v12 + 2;
          v30 = &v12[v15];
          v33 = v30[1].n128_u64[0];
          v31 = v30 + 1;
          v32 = v33;
          v34 = v11->n128_u64[0];
          if (v33 >= v12[2].n128_u64[0])
          {
            if (v34 < v32)
            {
              v120 = *v31;
              *v31 = *v11;
              *v11 = v120;
              if (v31->n128_u64[0] < v29->n128_u64[0])
              {
                v36 = *v29;
                *v29 = *v31;
                *v31 = v36;
              }
            }
          }
          else
          {
            if (v34 < v32)
            {
              v35 = *v29;
              *v29 = *v11;
              goto LABEL_41;
            }
            v37 = *v29;
            *v29 = *v31;
            *v31 = v37;
            if (v11->n128_u64[0] < v31->n128_u64[0])
            {
              v121 = *v31;
              *v31 = *v11;
              v35 = v121;
LABEL_41:
              *v11 = v35;
            }
          }
          v38 = v16->n128_u64[0];
          v39 = v31->n128_u64[0];
          if (v16->n128_u64[0] >= v22->n128_u64[0])
          {
            if (v39 < v38)
            {
              v123 = *v16;
              *v16 = *v31;
              *v31 = v123;
              if (v16->n128_u64[0] < v22->n128_u64[0])
              {
                v124 = *v22;
                *v22 = *v16;
                *v16 = v124;
              }
            }
          }
          else
          {
            if (v39 < v38)
            {
              v122 = *v22;
              *v22 = *v31;
              goto LABEL_50;
            }
            v125 = *v22;
            *v22 = *v16;
            *v16 = v125;
            if (v31->n128_u64[0] < v16->n128_u64[0])
            {
              v122 = *v16;
              *v16 = *v31;
LABEL_50:
              *v31 = v122;
            }
          }
          v126 = *v12;
          *v12 = *v16;
          result = v126;
          *v16 = v126;
          goto LABEL_52;
        }
        v19 = v12->n128_u64[0];
        if (v12->n128_u64[0] >= v16->n128_u64[0])
        {
          if (v17 < v19)
          {
            v114 = *v12;
            *v12 = *v9;
            result = v114;
            *v9 = v114;
            if (v12->n128_u64[0] < v16->n128_u64[0])
            {
              v115 = *v16;
              *v16 = *v12;
              result = v115;
              *v12 = v115;
            }
          }
        }
        else
        {
          if (v17 >= v19)
          {
            v118 = *v16;
            *v16 = *v12;
            result = v118;
            *v12 = v118;
            if (v9->n128_u64[0] >= v12->n128_u64[0])
              goto LABEL_52;
            v111 = *v12;
            *v12 = *v9;
          }
          else
          {
            v111 = *v16;
            *v16 = *v9;
          }
          result = v111;
          *v9 = v111;
        }
LABEL_52:
        --a3;
        v40 = v12->n128_u64[0];
        if ((a4 & 1) == 0 && v12[-1].n128_u64[0] >= v40)
        {
          if (v40 >= v9->n128_u64[0])
          {
            n128_u64 = (unint64_t)v12[1].n128_u64;
            do
            {
              v12 = (__n128 *)n128_u64;
              if (n128_u64 >= (unint64_t)a2)
                break;
              n128_u64 += 16;
            }
            while (v40 >= v12->n128_u64[0]);
          }
          else
          {
            do
            {
              v54 = v12[1].n128_u64[0];
              ++v12;
            }
            while (v40 >= v54);
          }
          v56 = a2;
          if (v12 < a2)
          {
            v56 = a2;
            do
            {
              v57 = v56[-1].n128_u64[0];
              --v56;
            }
            while (v40 < v57);
          }
          v58 = a1->n128_u64[1];
          while (v12 < v56)
          {
            v127 = *v12;
            *v12 = *v56;
            result = v127;
            *v56 = v127;
            do
            {
              v59 = v12[1].n128_u64[0];
              ++v12;
            }
            while (v40 >= v59);
            do
            {
              v60 = v56[-1].n128_u64[0];
              --v56;
            }
            while (v40 < v60);
          }
          v61 = v12 - 1;
          if (&v12[-1] != a1)
          {
            result = *v61;
            *a1 = *v61;
          }
          a4 = 0;
          v12[-1].n128_u64[0] = v40;
          v12[-1].n128_u64[1] = v58;
          continue;
        }
        v41 = v12->n128_u64[1];
        v42 = v12;
        do
        {
          v43 = v42;
          v44 = v42[1].n128_u64[0];
          ++v42;
        }
        while (v44 < v40);
        v45 = a2;
        if (v43 == v12)
        {
          v45 = a2;
          do
          {
            if (v42 >= v45)
              break;
            v47 = v45[-1].n128_u64[0];
            --v45;
          }
          while (v47 >= v40);
        }
        else
        {
          do
          {
            v46 = v45[-1].n128_u64[0];
            --v45;
          }
          while (v46 >= v40);
        }
        v12 = v42;
        if (v42 < v45)
        {
          v48 = v45;
          do
          {
            result = *v12;
            *v12 = *v48;
            *v48 = result;
            do
            {
              v49 = v12[1].n128_u64[0];
              ++v12;
            }
            while (v49 < v40);
            do
            {
              v50 = v48[-1].n128_u64[0];
              --v48;
            }
            while (v50 >= v40);
          }
          while (v12 < v48);
        }
        v51 = v12 - 1;
        if (&v12[-1] != a1)
        {
          result = *v51;
          *a1 = *v51;
        }
        v12[-1].n128_u64[0] = v40;
        v12[-1].n128_u64[1] = v41;
        if (v42 < v45)
        {
LABEL_73:
          std::__introsort<std::_ClassicAlgPolicy,ggl::Batcher::commit::$_0 &,gm::Range<unsigned long> *,false>(a1, &v12[-1], a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v52 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,ggl::Batcher::commit::$_0 &,gm::Range<unsigned long> *>(a1, v12 - 1, result);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,ggl::Batcher::commit::$_0 &,gm::Range<unsigned long> *>(v12, a2, v53))
        {
          if (v52)
            continue;
          goto LABEL_73;
        }
        a2 = v12 - 1;
        if (!v52)
          goto LABEL_1;
        return result;
    }
  }
}

  v9 = (unint64_t *)(a2 - 24);
  i = (unint64_t)a1;
  while (2)
  {
    a1 = (double *)i;
    v11 = a2 - i;
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - i) >> 3);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result.n128_u64[0] = *(_QWORD *)(a2 - 16);
        v57 = *(double *)(i + 8);
        if (result.n128_f64[0] == v57)
        {
          if (*(unsigned __int8 *)(a2 - 8) == *(unsigned __int8 *)(i + 16))
          {
            if (*v9 >= *(_QWORD *)i)
              return result;
          }
          else if (!*(_BYTE *)(a2 - 8))
          {
            return result;
          }
        }
        else if (result.n128_f64[0] >= v57)
        {
          return result;
        }
        v135 = *(_QWORD *)(i + 16);
        v130 = *(__n128 *)i;
        v125 = *(_OWORD *)v9;
        *(_BYTE *)(i + 16) = *(_BYTE *)(a2 - 8);
        *(_OWORD *)i = v125;
        result = v130;
        *(_BYTE *)(a2 - 8) = v135;
        *(__n128 *)v9 = v130;
        return result;
      case 3:
        result.n128_u64[0] = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *>(i, i + 24, a2 - 24, result).n128_u64[0];
        return result;
      case 4:
        result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *>(i, i + 24, i + 48, a2 - 24, result).n128_u64[0];
        return result;
      case 5:
        result.n128_u64[0] = std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *,0>(i, i + 24, i + 48, i + 72, a2 - 24, result).n128_u64[0];
        return result;
      default:
        if (v11 <= 575)
        {
          v58 = (double *)(i + 24);
          v60 = i == a2 || v58 == (double *)a2;
          if ((a4 & 1) != 0)
          {
            if (v60)
              return result;
            v61 = 0;
            v62 = i;
            while (1)
            {
              v64 = v62;
              v62 = (unint64_t)v58;
              result.n128_u64[0] = *(_QWORD *)(v64 + 32);
              v65 = *(double *)(v64 + 8);
              if (result.n128_f64[0] == v65)
              {
                v66 = *(unsigned __int8 *)(v64 + 40);
                if (v66 == *(unsigned __int8 *)(v64 + 16))
                {
                  if (*(_QWORD *)v62 >= *(_QWORD *)v64)
                    goto LABEL_178;
                }
                else
                {
                  if (!*(_BYTE *)(v64 + 40))
                    goto LABEL_178;
                  v66 = 1;
                }
              }
              else
              {
                if (result.n128_f64[0] >= v65)
                  goto LABEL_178;
                v66 = *(unsigned __int8 *)(v64 + 40);
              }
              v67 = *(_QWORD *)(v64 + 24);
              *(_OWORD *)v62 = *(_OWORD *)v64;
              *(_BYTE *)(v62 + 16) = *(_BYTE *)(v64 + 16);
              v63 = i;
              if (v64 == i)
                goto LABEL_177;
              v68 = v61;
              if (!v66)
              {
                while (1)
                {
                  v72 = i + v68;
                  v73 = (unint64_t *)(i + v68 - 24);
                  v74 = *(double *)(i + v68 - 16);
                  if (result.n128_f64[0] == v74)
                  {
                    if (*(_BYTE *)(v72 - 8))
                      goto LABEL_195;
                    if (v67 >= *v73)
                      goto LABEL_201;
                  }
                  else if (result.n128_f64[0] >= v74)
                  {
                    goto LABEL_201;
                  }
                  v64 -= 24;
                  *(_OWORD *)v72 = *(_OWORD *)v73;
                  *(_BYTE *)(v72 + 16) = *(_BYTE *)(i + v68 - 8);
                  v68 -= 24;
                  if (!v68)
                    goto LABEL_176;
                }
              }
              while (1)
              {
                v69 = i + v68;
                v70 = (unint64_t *)(i + v68 - 24);
                v71 = *(double *)(i + v68 - 16);
                if (result.n128_f64[0] != v71)
                  break;
                if (v66 == *(unsigned __int8 *)(v69 - 8) && v67 >= *v70)
                {
LABEL_195:
                  v63 = i + v68;
                  goto LABEL_177;
                }
LABEL_191:
                v64 -= 24;
                *(_OWORD *)v69 = *(_OWORD *)v70;
                *(_BYTE *)(v69 + 16) = *(_BYTE *)(i + v68 - 8);
                v68 -= 24;
                if (!v68)
                {
LABEL_176:
                  v63 = i;
                  goto LABEL_177;
                }
              }
              if (result.n128_f64[0] < v71)
                goto LABEL_191;
LABEL_201:
              v63 = v64;
LABEL_177:
              *(_QWORD *)v63 = v67;
              *(_QWORD *)(v63 + 8) = result.n128_u64[0];
              *(_BYTE *)(v63 + 16) = v66;
LABEL_178:
              v58 = (double *)(v62 + 24);
              v61 += 24;
              if (v62 + 24 == a2)
                return result;
            }
          }
          if (v60)
            return result;
          while (1)
          {
            v119 = a1;
            a1 = v58;
            result.n128_f64[0] = v119[4];
            v120 = v119[1];
            if (result.n128_f64[0] != v120)
              break;
            v118 = *((unsigned __int8 *)v119 + 40);
            if (v118 == *((unsigned __int8 *)v119 + 16))
            {
              v121 = *(_QWORD *)a1;
              if (*(_QWORD *)a1 >= *(_QWORD *)v119)
                goto LABEL_281;
              if (!*((_BYTE *)v119 + 40))
                goto LABEL_291;
              do
              {
LABEL_298:
                while (1)
                {
                  v122 = v119;
                  *(_OWORD *)(v119 + 3) = *(_OWORD *)v119;
                  *((_BYTE *)v119 + 40) = *((_BYTE *)v119 + 16);
                  v119 -= 3;
                  v124 = *(v122 - 2);
                  if (result.n128_f64[0] == v124)
                    break;
                  if (result.n128_f64[0] >= v124)
                    goto LABEL_280;
                }
              }
              while (v118 != *((unsigned __int8 *)v122 - 8) || v121 < *((_QWORD *)v122 - 3));
              LOBYTE(v118) = 1;
              goto LABEL_280;
            }
            if (*((_BYTE *)v119 + 40))
            {
              v121 = *(_QWORD *)a1;
              v118 = 1;
              goto LABEL_298;
            }
LABEL_281:
            v58 = a1 + 3;
            if (a1 + 3 == (double *)a2)
              return result;
          }
          if (result.n128_f64[0] >= v120)
            goto LABEL_281;
          v118 = *((unsigned __int8 *)v119 + 40);
          v121 = *(_QWORD *)a1;
          if (*((_BYTE *)v119 + 40))
            goto LABEL_298;
          do
          {
LABEL_291:
            while (1)
            {
              v122 = v119;
              *(_OWORD *)(v119 + 3) = *(_OWORD *)v119;
              *((_BYTE *)v119 + 40) = *((_BYTE *)v119 + 16);
              v119 -= 3;
              v123 = *(v122 - 2);
              if (result.n128_f64[0] == v123)
                break;
              if (result.n128_f64[0] >= v123)
                goto LABEL_279;
            }
          }
          while (!*((_BYTE *)v122 - 8) && v121 < *((_QWORD *)v122 - 3));
LABEL_279:
          LOBYTE(v118) = 0;
LABEL_280:
          *(_QWORD *)v122 = v121;
          v122[1] = result.n128_f64[0];
          *((_BYTE *)v122 + 16) = v118;
          goto LABEL_281;
        }
        if (!a3)
        {
          if (i == a2)
            return result;
          v75 = (unint64_t)(v12 - 2) >> 1;
          v76 = v75;
          while (1)
          {
            v78 = v76;
            if (v75 < v76)
              goto LABEL_206;
            v79 = (2 * v76) | 1;
            v77 = i + 24 * v79;
            if (2 * v78 + 2 >= v12)
              goto LABEL_217;
            v80 = *(double *)(i + 24 * v79 + 8);
            v81 = *(double *)(v77 + 32);
            if (v80 != v81)
              break;
            if (*(unsigned __int8 *)(i + 24 * v79 + 16) == *(unsigned __int8 *)(v77 + 40))
            {
              if (*(_QWORD *)v77 >= *(_QWORD *)(v77 + 24))
                goto LABEL_217;
              goto LABEL_216;
            }
            if (*(_BYTE *)(i + 24 * v79 + 16))
              goto LABEL_216;
LABEL_217:
            v82 = i + 24 * v78;
            v83 = *(double *)(v77 + 8);
            v84 = *(double *)(v82 + 8);
            if (v83 == v84)
            {
              v85 = *(unsigned __int8 *)(v77 + 16);
              if (v85 == *(unsigned __int8 *)(i + 24 * v78 + 16))
              {
                if (*(_QWORD *)v77 < *(_QWORD *)v82)
                  goto LABEL_206;
              }
              else
              {
                if (*(_BYTE *)(v77 + 16))
                  goto LABEL_206;
                v85 = *(unsigned __int8 *)(i + 24 * v78 + 16);
              }
            }
            else
            {
              if (v83 < v84)
                goto LABEL_206;
              v85 = *(unsigned __int8 *)(v82 + 16);
            }
            v86 = *(_QWORD *)v82;
            do
            {
              while (1)
              {
                while (1)
                {
                  v87 = *(_OWORD *)v77;
                  *(_BYTE *)(v82 + 16) = *(_BYTE *)(v77 + 16);
                  *(_OWORD *)v82 = v87;
                  if (v75 < v79)
                    goto LABEL_205;
                  v82 = v77;
                  v88 = 2 * v79;
                  v79 = (2 * v79) | 1;
                  v77 = i + 24 * v79;
                  v89 = v88 + 2;
                  if (v89 < v12)
                  {
                    v90 = *(double *)(i + 24 * v79 + 8);
                    v91 = *(double *)(v77 + 32);
                    if (v90 == v91)
                    {
                      if (*(unsigned __int8 *)(i + 24 * v79 + 16) != *(unsigned __int8 *)(v77 + 40))
                      {
                        if (!*(_BYTE *)(i + 24 * v79 + 16))
                          goto LABEL_237;
LABEL_236:
                        v77 += 24;
                        v79 = v89;
                        goto LABEL_237;
                      }
                      if (*(_QWORD *)v77 < *(_QWORD *)(v77 + 24))
                        goto LABEL_236;
                    }
                    else if (v90 < v91)
                    {
                      goto LABEL_236;
                    }
                  }
LABEL_237:
                  v92 = *(double *)(v77 + 8);
                  if (v92 == v84)
                    break;
                  if (v92 < v84)
                    goto LABEL_204;
                }
                if (*(unsigned __int8 *)(v77 + 16) != v85)
                  break;
                if (*(_QWORD *)v77 < v86)
                  goto LABEL_204;
              }
            }
            while (!*(_BYTE *)(v77 + 16));
LABEL_204:
            v77 = v82;
LABEL_205:
            *(_QWORD *)v77 = v86;
            *(double *)(v77 + 8) = v84;
            *(_BYTE *)(v77 + 16) = v85;
LABEL_206:
            v76 = v78 - 1;
            if (!v78)
            {
              v93 = v11 / 0x18uLL;
              while (1)
              {
                v95 = 0;
                v134 = *(_QWORD *)(i + 16);
                v129 = *(__n128 *)i;
                v96 = i;
                do
                {
                  v98 = v96;
                  v99 = v95 + 1;
                  v96 += 24 * (v95 + 1);
                  v100 = 2 * v95;
                  v95 = (2 * v95) | 1;
                  v101 = v100 + 2;
                  if (v101 < v93)
                  {
                    v102 = *(double *)(v98 + 24 * v99 + 8);
                    v103 = *(double *)(v96 + 32);
                    if (v102 == v103)
                    {
                      v104 = *(unsigned __int8 *)(v98 + 24 * v99 + 16);
                      if (v104 != *(unsigned __int8 *)(v96 + 40))
                      {
                        if (!v104)
                          goto LABEL_249;
LABEL_248:
                        v96 += 24;
                        v95 = v101;
                        goto LABEL_249;
                      }
                      if (*(_QWORD *)v96 < *(_QWORD *)(v96 + 24))
                        goto LABEL_248;
                    }
                    else if (v102 < v103)
                    {
                      goto LABEL_248;
                    }
                  }
LABEL_249:
                  v97 = *(_OWORD *)v96;
                  *(_BYTE *)(v98 + 16) = *(_BYTE *)(v96 + 16);
                  *(_OWORD *)v98 = v97;
                }
                while (v95 <= (uint64_t)((unint64_t)(v93 - 2) >> 1));
                a2 -= 24;
                if (v96 == a2)
                {
                  result = v129;
                  *(_BYTE *)(v96 + 16) = v134;
                  *(__n128 *)v96 = v129;
                }
                else
                {
                  v105 = *(_OWORD *)a2;
                  *(_BYTE *)(v96 + 16) = *(_BYTE *)(a2 + 16);
                  *(_OWORD *)v96 = v105;
                  result = v129;
                  *(_BYTE *)(a2 + 16) = v134;
                  *(__n128 *)a2 = v129;
                  v106 = v96 - i + 24;
                  if (v106 >= 25)
                  {
                    v107 = v106 / 0x18uLL - 2;
                    v108 = v107 >> 1;
                    v109 = i + 24 * (v107 >> 1);
                    v110 = *(double *)(v109 + 8);
                    result.n128_u64[0] = *(_QWORD *)(v96 + 8);
                    if (v110 == result.n128_f64[0])
                    {
                      v111 = *(unsigned __int8 *)(v96 + 16);
                      if (*(unsigned __int8 *)(i + 24 * v108 + 16) == v111)
                      {
                        v111 = *(unsigned __int8 *)(i + 24 * v108 + 16);
                        if (*(_QWORD *)v109 < *(_QWORD *)v96)
                        {
LABEL_266:
                          v112 = *(_QWORD *)v96;
                          v113 = *(_OWORD *)v109;
                          *(_BYTE *)(v96 + 16) = *(_BYTE *)(v109 + 16);
                          *(_OWORD *)v96 = v113;
                          if (v107 >= 2)
                          {
                            do
                            {
                              v115 = v109;
                              v116 = v108 - 1;
                              v108 = (v108 - 1) >> 1;
                              v109 = i + 24 * v108;
                              v117 = *(double *)(v109 + 8);
                              if (v117 == result.n128_f64[0])
                              {
                                if (*(unsigned __int8 *)(i + 24 * v108 + 16) == v111)
                                {
                                  if (*(_QWORD *)v109 >= v112)
                                    goto LABEL_275;
                                }
                                else if (!*(_BYTE *)(i + 24 * v108 + 16))
                                {
LABEL_275:
                                  v109 = v115;
                                  break;
                                }
                              }
                              else if (v117 >= result.n128_f64[0])
                              {
                                goto LABEL_275;
                              }
                              v114 = *(_OWORD *)v109;
                              *(_BYTE *)(v115 + 16) = *(_BYTE *)(v109 + 16);
                              *(_OWORD *)v115 = v114;
                            }
                            while (v116 > 1);
                          }
                          *(_QWORD *)v109 = v112;
                          *(_QWORD *)(v109 + 8) = result.n128_u64[0];
                          *(_BYTE *)(v109 + 16) = v111;
                        }
                      }
                      else if (*(_BYTE *)(i + 24 * v108 + 16))
                      {
                        goto LABEL_266;
                      }
                    }
                    else if (v110 < result.n128_f64[0])
                    {
                      v111 = *(unsigned __int8 *)(v96 + 16);
                      goto LABEL_266;
                    }
                  }
                }
                if (v93-- <= 2)
                  return result;
              }
            }
          }
          if (v80 >= v81)
            goto LABEL_217;
LABEL_216:
          v77 += 24;
          v79 = 2 * v78 + 2;
          goto LABEL_217;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = i + 24 * ((unint64_t)v12 >> 1);
        if ((unint64_t)v11 >= 0xC01)
        {
          v15 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *>((uint64_t)a1, (uint64_t)&a1[3 * v13], a2 - 24, result);
          v16 = 3 * v13;
          v17 = (uint64_t)&a1[3 * v13 - 3];
          v18 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *>((uint64_t)(a1 + 3), v17, a2 - 48, v15);
          v19 = (uint64_t)&a1[v16 + 3];
          v20 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *>((uint64_t)(a1 + 6), v19, a2 - 72, v18);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *>(v17, v14, v19, v20);
          v131 = *((_QWORD *)a1 + 2);
          v126 = *(_OWORD *)a1;
          v21 = *(_BYTE *)(v14 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *((_BYTE *)a1 + 16) = v21;
          result.n128_u64[1] = *((_QWORD *)&v126 + 1);
          *(_BYTE *)(v14 + 16) = v131;
          *(_OWORD *)v14 = v126;
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_12;
LABEL_7:
          v22 = *(a1 - 2);
          result.n128_f64[0] = a1[1];
          if (v22 == result.n128_f64[0])
          {
            v23 = *((unsigned __int8 *)a1 - 8);
            if (v23 == *((unsigned __int8 *)a1 + 16))
            {
              if (*((_QWORD *)a1 - 3) < *(_QWORD *)a1)
                goto LABEL_16;
            }
            else
            {
              if (*((_BYTE *)a1 - 8))
                goto LABEL_16;
              v23 = *((unsigned __int8 *)a1 + 16);
            }
          }
          else
          {
            if (v22 < result.n128_f64[0])
              goto LABEL_16;
            v23 = *((unsigned __int8 *)a1 + 16);
          }
          v41 = *(_QWORD *)a1;
          v42 = *(double *)(a2 - 16);
          if (result.n128_f64[0] == v42)
          {
            if (v23 == *(unsigned __int8 *)(a2 - 8))
            {
              if (v41 < *v9)
                goto LABEL_91;
              goto LABEL_81;
            }
            if (!v23)
            {
              i = (unint64_t)(a1 + 3);
              v46 = (double *)a2;
              if ((unint64_t)(a1 + 3) >= a2)
                goto LABEL_153;
              goto LABEL_108;
            }
LABEL_100:
            for (i = (unint64_t)(a1 + 3); ; i += 24)
            {
              v45 = *(double *)(i + 8);
              if (result.n128_f64[0] == v45)
              {
                if (v23 != *(unsigned __int8 *)(i + 16) || v41 < *(_QWORD *)i)
                  goto LABEL_114;
              }
              else if (result.n128_f64[0] < v45)
              {
                goto LABEL_114;
              }
            }
          }
          if (result.n128_f64[0] < v42)
          {
LABEL_91:
            if (!v23)
            {
              for (i = (unint64_t)(a1 + 3); ; i += 24)
              {
                v44 = *(double *)(i + 8);
                if (result.n128_f64[0] == v44)
                {
                  if (!*(_BYTE *)(i + 16) && v41 < *(_QWORD *)i)
                    goto LABEL_114;
                }
                else if (result.n128_f64[0] < v44)
                {
                  goto LABEL_114;
                }
              }
            }
            goto LABEL_100;
          }
LABEL_81:
          i = (unint64_t)(a1 + 3);
          if ((unint64_t)(a1 + 3) < a2)
          {
            if (v23)
            {
              while (1)
              {
                v43 = *(double *)(i + 8);
                if (result.n128_f64[0] == v43)
                {
                  if (v23 != *(unsigned __int8 *)(i + 16) || v41 < *(_QWORD *)i)
                    goto LABEL_114;
                }
                else if (result.n128_f64[0] < v43)
                {
                  goto LABEL_114;
                }
                i += 24;
                if (i >= a2)
                  goto LABEL_114;
              }
            }
LABEL_108:
            v47 = a1;
            do
            {
              v48 = v47;
              v47 = (double *)i;
              v49 = v48[4];
              if (result.n128_f64[0] == v49)
              {
                if (!*((_BYTE *)v48 + 40) && v41 < *(_QWORD *)i)
                  break;
              }
              else if (result.n128_f64[0] < v49)
              {
                break;
              }
              i += 24;
            }
            while ((unint64_t)(v47 + 3) < a2);
          }
LABEL_114:
          if (i >= a2)
          {
            v46 = (double *)a2;
            goto LABEL_153;
          }
          if (v23)
          {
            for (j = (_BYTE *)(a2 - 8); ; j -= 24)
            {
              if (result.n128_f64[0] == v42)
              {
                if (v23 == *j && v41 >= *((_QWORD *)j - 2))
                  goto LABEL_130;
              }
              else if (result.n128_f64[0] >= v42)
              {
                goto LABEL_130;
              }
              v42 = *((double *)j - 4);
            }
          }
          j = (_BYTE *)(a2 - 8);
          while (result.n128_f64[0] != v42)
          {
            if (result.n128_f64[0] >= v42)
              goto LABEL_130;
LABEL_126:
            v42 = *((double *)j - 4);
            j -= 24;
          }
          if (!*j && v41 < *((_QWORD *)j - 2))
            goto LABEL_126;
LABEL_130:
          v46 = (double *)(j - 16);
LABEL_153:
          while (i < (unint64_t)v46)
          {
            v133 = *(_QWORD *)(i + 16);
            v128 = *(__n128 *)i;
            v51 = *(_OWORD *)v46;
            *(_BYTE *)(i + 16) = *((_BYTE *)v46 + 16);
            *(_OWORD *)i = v51;
            *((_BYTE *)v46 + 16) = v133;
            *(__n128 *)v46 = v128;
            if (v23)
            {
              do
              {
                while (1)
                {
                  i += 24;
                  v53 = *(double *)(i + 8);
                  if (result.n128_f64[0] == v53)
                    break;
                  if (result.n128_f64[0] < v53)
                    goto LABEL_142;
                }
              }
              while (v23 == *(unsigned __int8 *)(i + 16) && v41 >= *(_QWORD *)i);
            }
            else
            {
              do
              {
                while (1)
                {
                  i += 24;
                  v52 = *(double *)(i + 8);
                  if (result.n128_f64[0] == v52)
                    break;
                  if (result.n128_f64[0] < v52)
                    goto LABEL_142;
                }
              }
              while (*(_BYTE *)(i + 16) || v41 >= *(_QWORD *)i);
            }
LABEL_142:
            if (v23)
            {
              do
              {
                while (1)
                {
                  v46 -= 3;
                  v54 = v46[1];
                  if (result.n128_f64[0] == v54)
                    break;
                  if (result.n128_f64[0] >= v54)
                    goto LABEL_153;
                }
              }
              while (v23 != *((unsigned __int8 *)v46 + 16) || v41 < *(_QWORD *)v46);
            }
            else
            {
              do
              {
                while (1)
                {
                  v46 -= 3;
                  v55 = v46[1];
                  if (result.n128_f64[0] == v55)
                    break;
                  if (result.n128_f64[0] >= v55)
                    goto LABEL_153;
                }
              }
              while (!*((_BYTE *)v46 + 16) && v41 < *(_QWORD *)v46);
            }
          }
          if ((double *)(i - 24) != a1)
          {
            v56 = *(_OWORD *)(i - 24);
            *((_BYTE *)a1 + 16) = *(_BYTE *)(i - 8);
            *(_OWORD *)a1 = v56;
          }
          a4 = 0;
          *(_QWORD *)(i - 24) = v41;
          *(_QWORD *)(i - 16) = result.n128_u64[0];
          *(_BYTE *)(i - 8) = v23;
          continue;
        }
        result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *>((uint64_t)&a1[3 * v13], (uint64_t)a1, a2 - 24, result);
        --a3;
        if ((a4 & 1) == 0)
          goto LABEL_7;
LABEL_12:
        result.n128_f64[0] = a1[1];
LABEL_16:
        v24 = *(_QWORD *)a1;
        v25 = *((unsigned __int8 *)a1 + 16);
        for (k = a1 + 3; ; k += 3)
        {
          v27 = k[1];
          if (v27 != result.n128_f64[0])
          {
            if (v27 >= result.n128_f64[0])
              goto LABEL_24;
            continue;
          }
          if (*((unsigned __int8 *)k + 16) != v25)
            break;
          if (*(_QWORD *)k >= v24)
            goto LABEL_24;
LABEL_18:
          ;
        }
        if (*((_BYTE *)k + 16))
          goto LABEL_18;
LABEL_24:
        m = a2 - 24;
        if (k - 3 != a1)
        {
          while (1)
          {
            v29 = *(double *)(m + 8);
            if (v29 == result.n128_f64[0])
            {
              if (*(unsigned __int8 *)(m + 16) == v25)
              {
                if (*(_QWORD *)m < v24)
                  goto LABEL_53;
              }
              else if (*(_BYTE *)(m + 16))
              {
                goto LABEL_53;
              }
            }
            else if (v29 < result.n128_f64[0])
            {
              goto LABEL_53;
            }
            m -= 24;
          }
        }
        m = a2;
        if ((unint64_t)k < a2)
        {
          for (m = a2 - 24; ; m -= 24)
          {
            v31 = *(double *)(m + 8);
            if (v31 == result.n128_f64[0])
            {
              if (*(unsigned __int8 *)(m + 16) == v25)
              {
                if (*(_QWORD *)m < v24 || (unint64_t)k >= m)
                  break;
              }
              else
              {
                if (*(_BYTE *)(m + 16))
                  v33 = 1;
                else
                  v33 = (unint64_t)k >= m;
                if (v33)
                  break;
              }
            }
            else if (v31 < result.n128_f64[0] || (unint64_t)k >= m)
            {
              break;
            }
          }
        }
LABEL_53:
        i = (unint64_t)k;
        if ((unint64_t)k < m)
        {
          i = (unint64_t)k;
          v34 = m;
          do
          {
            v132 = *(_QWORD *)(i + 16);
            v127 = *(__n128 *)i;
            v35 = *(_OWORD *)v34;
            *(_BYTE *)(i + 16) = *(_BYTE *)(v34 + 16);
            *(_OWORD *)i = v35;
            *(_BYTE *)(v34 + 16) = v132;
            *(__n128 *)v34 = v127;
            do
            {
              while (1)
              {
                while (1)
                {
                  i += 24;
                  v36 = *(double *)(i + 8);
                  if (v36 == result.n128_f64[0])
                    break;
                  if (v36 >= result.n128_f64[0])
                    goto LABEL_65;
                }
                if (*(unsigned __int8 *)(i + 16) != v25)
                  break;
                if (*(_QWORD *)i >= v24)
                  goto LABEL_65;
              }
            }
            while (*(_BYTE *)(i + 16));
            do
            {
              while (1)
              {
LABEL_65:
                while (1)
                {
                  v34 -= 24;
                  v37 = *(double *)(v34 + 8);
                  if (v37 == result.n128_f64[0])
                    break;
                  if (v37 < result.n128_f64[0])
                    goto LABEL_55;
                }
                if (*(unsigned __int8 *)(v34 + 16) != v25)
                  break;
                if (*(_QWORD *)v34 < v24)
                  goto LABEL_55;
              }
            }
            while (!*(_BYTE *)(v34 + 16));
LABEL_55:
            ;
          }
          while (i < v34);
        }
        if ((double *)(i - 24) != a1)
        {
          v38 = *(_OWORD *)(i - 24);
          *((_BYTE *)a1 + 16) = *(_BYTE *)(i - 8);
          *(_OWORD *)a1 = v38;
        }
        *(_QWORD *)(i - 24) = v24;
        *(_QWORD *)(i - 16) = result.n128_u64[0];
        *(_BYTE *)(i - 8) = v25;
        if ((unint64_t)k < m)
        {
LABEL_76:
          std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *,false>(a1, i - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v39 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *>((uint64_t)a1, i - 24, result);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *>(i, a2, v40))
        {
          if (v39)
            continue;
          goto LABEL_76;
        }
        a2 = i - 24;
        if (!v39)
          goto LABEL_1;
        return result;
    }
  }
}

  v7 = a2 - 1;
  v597 = a2 - 3;
  v598 = a2 - 2;
  v600 = a2;
  while (2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        v325 = *v7;
        v326 = *a1;
        v327 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*v7 + 56))(*v7);
        v328 = *(double *)(md::LabelPoint::mercatorPoint(v327) + 8);
        v329 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v326 + 56))(v326);
        if (v328 == *(double *)(md::LabelPoint::mercatorPoint(v329) + 8))
        {
          if (v325 >= v326)
            return;
        }
        else
        {
          v593 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v325 + 56))(v325);
          v594 = *(double *)(md::LabelPoint::mercatorPoint(v593) + 8);
          v595 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v326 + 56))(v326);
          if (v594 >= *(double *)(md::LabelPoint::mercatorPoint(v595) + 8))
            return;
        }
        v596 = *a1;
        *a1 = *v7;
        *v7 = v596;
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(a1, a1 + 1, v7);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(a1, a1 + 1, a1 + 2, v7);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **,0>(a1, a1 + 1, a1 + 2, a1 + 3, v7);
        return;
      default:
        v607 = a1;
        if (v8 <= 191)
        {
          v330 = a1 + 1;
          v332 = a1 == a2 || v330 == a2;
          if ((a4 & 1) != 0)
          {
            if (v332)
              return;
            v333 = 0;
            v334 = 0.5;
            v335 = a1;
LABEL_199:
            v337 = v335;
            v335 = v330;
            v338 = *v337;
            v339 = v337[1];
            v340 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v339 + 56))(v339);
            v341 = *(double *)(md::LabelPoint::mercatorPoint(v340) + 8);
            v342 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v338 + 56))(v338);
            if (v341 == *(double *)(md::LabelPoint::mercatorPoint(v342) + 8))
            {
              if (v339 >= v338)
                goto LABEL_198;
            }
            else
            {
              v343 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v339 + 56))(v339);
              v344 = *(double *)(md::LabelPoint::mercatorPoint(v343) + 8);
              v345 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v338 + 56))(v338);
              if (v344 >= *(double *)(md::LabelPoint::mercatorPoint(v345) + 8))
                goto LABEL_198;
            }
            v346 = v337[1];
            v337[1] = *v337;
            v336 = a1;
            if (v337 == a1)
              goto LABEL_197;
            v347 = v333;
            while (1)
            {
              v359 = (unint64_t *)((char *)a1 + v347);
              v360 = *(v359 - 1);
              v361 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v346 + 56))(v346);
              v362 = v361;
              if (*(_BYTE *)(v361 + 45))
                v363 = 1;
              else
                v363 = *(_BYTE *)(v361 + 46) == 0;
              if (v363)
              {
                v373 = *(double *)(v361 + 32);
              }
              else
              {
                v364 = *(double *)v361;
                v365 = *(double *)(v361 + 8);
                v366 = *(double *)(v361 + 16);
                v367 = sqrt(v364 * v364 + v365 * v365);
                v368 = atan2(v366, v367 * 0.996647189);
                v369 = atan2(v365, v364);
                v370 = __sincos_stret(v368);
                v371 = atan2(v366 + v370.__sinval * v370.__sinval * 42841.3115 * v370.__sinval, v367 + v370.__cosval * v370.__cosval * -42697.6727 * v370.__cosval);
                v372 = tan(v371 * v334 + 0.785398163);
                v373 = v334 + log(v372) * 0.159154943;
                *(double *)(v362 + 24) = v334 + v369 * 0.159154943;
                *(double *)(v362 + 32) = v373;
                *(_BYTE *)(v362 + 45) = 1;
              }
              v374 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v360 + 56))(v360);
              v375 = v374;
              if (*(_BYTE *)(v374 + 45))
                v376 = 1;
              else
                v376 = *(_BYTE *)(v374 + 46) == 0;
              if (v376)
              {
                if (v373 != *(double *)(v374 + 32))
                {
LABEL_220:
                  v377 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v346 + 56))(v346);
                  v378 = v377;
                  if (*(_BYTE *)(v377 + 45) || !*(_BYTE *)(v377 + 46))
                  {
                    v388 = *(double *)(v377 + 32);
                  }
                  else
                  {
                    v379 = *(double *)v377;
                    v380 = *(double *)(v377 + 8);
                    v381 = *(double *)(v377 + 16);
                    v382 = sqrt(v379 * v379 + v380 * v380);
                    v383 = atan2(v381, v382 * 0.996647189);
                    v384 = atan2(v380, v379);
                    v385 = __sincos_stret(v383);
                    v386 = atan2(v381 + v385.__sinval * v385.__sinval * 42841.3115 * v385.__sinval, v382 + v385.__cosval * v385.__cosval * -42697.6727 * v385.__cosval);
                    v387 = tan(v386 * v334 + 0.785398163);
                    v388 = v334 + log(v387) * 0.159154943;
                    *(double *)(v378 + 24) = v334 + v384 * 0.159154943;
                    *(double *)(v378 + 32) = v388;
                    *(_BYTE *)(v378 + 45) = 1;
                  }
                  v389 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v360 + 56))(v360);
                  v390 = v389;
                  if (*(_BYTE *)(v389 + 45) || !*(_BYTE *)(v389 + 46))
                  {
                    if (v388 >= *(double *)(v389 + 32))
                    {
LABEL_229:
                      v336 = v337;
                      a1 = v607;
                      goto LABEL_196;
                    }
                  }
                  else
                  {
                    v391 = *(double *)v389;
                    v392 = *(double *)(v389 + 8);
                    v393 = *(double *)(v389 + 16);
                    v394 = sqrt(v391 * v391 + v392 * v392);
                    v395 = atan2(v393, v394 * 0.996647189);
                    v396 = atan2(v392, v391);
                    v397 = __sincos_stret(v395);
                    v398 = v394 + v397.__cosval * v397.__cosval * -42697.6727 * v397.__cosval;
                    v334 = 0.5;
                    v399 = atan2(v393 + v397.__sinval * v397.__sinval * 42841.3115 * v397.__sinval, v398);
                    v400 = tan(v399 * 0.5 + 0.785398163);
                    v401 = log(v400) * 0.159154943 + 0.5;
                    *(double *)(v390 + 24) = v396 * 0.159154943 + 0.5;
                    *(long double *)(v390 + 32) = v401;
                    *(_BYTE *)(v390 + 45) = 1;
                    if (v388 >= v401)
                      goto LABEL_229;
                  }
                  goto LABEL_207;
                }
              }
              else
              {
                v348 = *(double *)v374;
                v349 = *(double *)(v374 + 8);
                v350 = *(double *)(v374 + 16);
                v351 = sqrt(v348 * v348 + v349 * v349);
                v352 = atan2(v350, v351 * 0.996647189);
                v353 = atan2(v349, v348);
                v354 = __sincos_stret(v352);
                v355 = v351 + v354.__cosval * v354.__cosval * -42697.6727 * v354.__cosval;
                v334 = 0.5;
                v356 = atan2(v350 + v354.__sinval * v354.__sinval * 42841.3115 * v354.__sinval, v355);
                v357 = tan(v356 * 0.5 + 0.785398163);
                v358 = log(v357) * 0.159154943 + 0.5;
                *(double *)(v375 + 24) = v353 * 0.159154943 + 0.5;
                *(long double *)(v375 + 32) = v358;
                *(_BYTE *)(v375 + 45) = 1;
                if (v373 != v358)
                  goto LABEL_220;
              }
              if (v346 >= v360)
              {
                a1 = v607;
                v336 = (unint64_t *)((char *)v607 + v347);
LABEL_196:
                a2 = v600;
LABEL_197:
                *v336 = v346;
LABEL_198:
                v330 = v335 + 1;
                v333 += 8;
                if (v335 + 1 == a2)
                  return;
                goto LABEL_199;
              }
LABEL_207:
              --v337;
              *v359 = *(v359 - 1);
              v347 -= 8;
              a1 = v607;
              if (!v347)
              {
                v336 = v607;
                goto LABEL_196;
              }
            }
          }
          if (v332)
            return;
          v527 = 0.5;
          while (1)
          {
            v528 = a1;
            a1 = v330;
            v529 = *v528;
            v530 = v528[1];
            v531 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v530 + 56))(v530);
            v532 = *(double *)(md::LabelPoint::mercatorPoint(v531) + 8);
            v533 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v529 + 56))(v529);
            if (v532 != *(double *)(md::LabelPoint::mercatorPoint(v533) + 8))
              break;
            if (v530 < v529)
              goto LABEL_314;
LABEL_309:
            v330 = a1 + 1;
            if (a1 + 1 == a2)
              return;
          }
          v534 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v530 + 56))(v530);
          v535 = *(double *)(md::LabelPoint::mercatorPoint(v534) + 8);
          v536 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v529 + 56))(v529);
          if (v535 >= *(double *)(md::LabelPoint::mercatorPoint(v536) + 8))
            goto LABEL_309;
LABEL_314:
          v537 = *a1;
          while (1)
          {
            while (1)
            {
              v549 = v528;
              v528[1] = *v528;
              v551 = *--v528;
              v550 = v551;
              v552 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v537 + 56))(v537);
              v553 = v552;
              if (*(_BYTE *)(v552 + 45) || *(_BYTE *)(v552 + 46) == 0)
              {
                v564 = *(double *)(v552 + 32);
              }
              else
              {
                v555 = *(double *)v552;
                v556 = *(double *)(v552 + 8);
                v557 = *(double *)(v552 + 16);
                v558 = sqrt(v555 * v555 + v556 * v556);
                v559 = atan2(v557, v558 * 0.996647189);
                v560 = atan2(v556, v555);
                v561 = __sincos_stret(v559);
                v562 = atan2(v557 + v561.__sinval * v561.__sinval * 42841.3115 * v561.__sinval, v558 + v561.__cosval * v561.__cosval * -42697.6727 * v561.__cosval);
                v563 = tan(v562 * v527 + 0.785398163);
                v564 = v527 + log(v563) * 0.159154943;
                *(double *)(v553 + 24) = v527 + v560 * 0.159154943;
                *(double *)(v553 + 32) = v564;
                *(_BYTE *)(v553 + 45) = 1;
              }
              v565 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v550 + 56))(v550);
              v566 = v565;
              if (!*(_BYTE *)(v565 + 45) && *(_BYTE *)(v565 + 46) != 0)
                break;
              if (v564 == *(double *)(v565 + 32))
                goto LABEL_316;
LABEL_329:
              v568 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v537 + 56))(v537);
              v569 = v568;
              if (*(_BYTE *)(v568 + 45) || !*(_BYTE *)(v568 + 46))
              {
                v579 = *(double *)(v568 + 32);
              }
              else
              {
                v570 = *(double *)v568;
                v571 = *(double *)(v568 + 8);
                v572 = *(double *)(v568 + 16);
                v573 = sqrt(v570 * v570 + v571 * v571);
                v574 = atan2(v572, v573 * 0.996647189);
                v575 = atan2(v571, v570);
                v576 = __sincos_stret(v574);
                v577 = atan2(v572 + v576.__sinval * v576.__sinval * 42841.3115 * v576.__sinval, v573 + v576.__cosval * v576.__cosval * -42697.6727 * v576.__cosval);
                v578 = tan(v577 * v527 + 0.785398163);
                v579 = v527 + log(v578) * 0.159154943;
                *(double *)(v569 + 24) = v527 + v575 * 0.159154943;
                *(double *)(v569 + 32) = v579;
                *(_BYTE *)(v569 + 45) = 1;
              }
              v580 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v550 + 56))(v550);
              v581 = v580;
              if (*(_BYTE *)(v580 + 45) || !*(_BYTE *)(v580 + 46))
              {
                if (v579 >= *(double *)(v580 + 32))
                {
LABEL_308:
                  *v549 = v537;
                  goto LABEL_309;
                }
              }
              else
              {
                v582 = *(double *)v580;
                v583 = *(double *)(v580 + 8);
                v584 = *(double *)(v580 + 16);
                v585 = sqrt(v582 * v582 + v583 * v583);
                v586 = atan2(v584, v585 * 0.996647189);
                v587 = atan2(v583, v582);
                v588 = __sincos_stret(v586);
                v589 = v585 + v588.__cosval * v588.__cosval * -42697.6727 * v588.__cosval;
                v527 = 0.5;
                v590 = atan2(v584 + v588.__sinval * v588.__sinval * 42841.3115 * v588.__sinval, v589);
                v591 = tan(v590 * 0.5 + 0.785398163);
                v592 = log(v591) * 0.159154943 + 0.5;
                *(double *)(v581 + 24) = v587 * 0.159154943 + 0.5;
                *(long double *)(v581 + 32) = v592;
                *(_BYTE *)(v581 + 45) = 1;
                if (v579 >= v592)
                  goto LABEL_308;
              }
            }
            v538 = *(double *)v565;
            v539 = *(double *)(v565 + 8);
            v540 = *(double *)(v565 + 16);
            v541 = sqrt(v538 * v538 + v539 * v539);
            v542 = atan2(v540, v541 * 0.996647189);
            v543 = atan2(v539, v538);
            v544 = __sincos_stret(v542);
            v545 = v541 + v544.__cosval * v544.__cosval * -42697.6727 * v544.__cosval;
            v527 = 0.5;
            v546 = atan2(v540 + v544.__sinval * v544.__sinval * 42841.3115 * v544.__sinval, v545);
            v547 = tan(v546 * 0.5 + 0.785398163);
            v548 = log(v547) * 0.159154943 + 0.5;
            *(double *)(v566 + 24) = v543 * 0.159154943 + 0.5;
            *(long double *)(v566 + 32) = v548;
            *(_BYTE *)(v566 + 45) = 1;
            if (v564 != v548)
              goto LABEL_329;
LABEL_316:
            if (v537 >= v550)
              goto LABEL_308;
          }
        }
        if (a3)
        {
          v10 = (unint64_t)v9 >> 1;
          v11 = &a1[v10];
          if ((unint64_t)v8 < 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(&a1[v10], a1, v7);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(a1, &a1[v10], v7);
            v12 = v10;
            v13 = &a1[v10];
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(a1 + 1, v13 - 1, v598);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(a1 + 2, &a1[v12 + 1], v597);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(v13 - 1, v11, &a1[v12 + 1]);
            v14 = *a1;
            *a1 = *v13;
            *v13 = v14;
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            v16 = *(a1 - 1);
            v15 = *a1;
            v17 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v16 + 56))(v16);
            v18 = *(double *)(md::LabelPoint::mercatorPoint(v17) + 8);
            v19 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v15 + 56))(v15);
            if (v18 == *(double *)(md::LabelPoint::mercatorPoint(v19) + 8))
            {
              if (v16 < v15)
                goto LABEL_11;
            }
            else
            {
              v178 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v16 + 56))(v16);
              v179 = *(double *)(md::LabelPoint::mercatorPoint(v178) + 8);
              v180 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v15 + 56))(v15);
              if (v179 < *(double *)(md::LabelPoint::mercatorPoint(v180) + 8))
                goto LABEL_11;
            }
            v181 = *a1;
            v182 = *v7;
            v183 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*a1 + 56))(*a1);
            v184 = *(double *)(md::LabelPoint::mercatorPoint(v183) + 8);
            v185 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v182 + 56))(v182);
            if (v184 == *(double *)(md::LabelPoint::mercatorPoint(v185) + 8))
            {
              if (v181 < v182)
                goto LABEL_110;
LABEL_173:
              while (++a1 < v600)
              {
                v321 = *a1;
                v322 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v181 + 56))(v181);
                v323 = *(double *)(md::LabelPoint::mercatorPoint(v322) + 8);
                v324 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v321 + 56))(v321);
                if (v323 == *(double *)(md::LabelPoint::mercatorPoint(v324) + 8))
                {
                  if (v181 < v321)
                    break;
                }
                else
                {
                  v318 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v181 + 56))(v181);
                  v319 = *(double *)(md::LabelPoint::mercatorPoint(v318) + 8);
                  v320 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v321 + 56))(v321);
                  if (v319 < *(double *)(md::LabelPoint::mercatorPoint(v320) + 8))
                    break;
                }
              }
            }
            else
            {
              v186 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v181 + 56))(v181);
              v187 = *(double *)(md::LabelPoint::mercatorPoint(v186) + 8);
              v188 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v182 + 56))(v182);
              if (v187 >= *(double *)(md::LabelPoint::mercatorPoint(v188) + 8))
                goto LABEL_173;
              do
              {
LABEL_110:
                while (1)
                {
                  v193 = a1[1];
                  ++a1;
                  v192 = v193;
                  v194 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v181 + 56))(v181);
                  v195 = *(double *)(md::LabelPoint::mercatorPoint(v194) + 8);
                  v196 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v192 + 56))(v192);
                  if (v195 == *(double *)(md::LabelPoint::mercatorPoint(v196) + 8))
                    break;
                  v189 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v181 + 56))(v181);
                  v190 = *(double *)(md::LabelPoint::mercatorPoint(v189) + 8);
                  v191 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v192 + 56))(v192);
                  if (v190 < *(double *)(md::LabelPoint::mercatorPoint(v191) + 8))
                    goto LABEL_112;
                }
              }
              while (v181 >= v192);
            }
LABEL_112:
            i = v600;
            if (a1 < v600)
            {
              for (i = v7; ; --i)
              {
                v201 = *i;
                v202 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v181 + 56))(v181);
                v203 = *(double *)(md::LabelPoint::mercatorPoint(v202) + 8);
                v204 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v201 + 56))(v201);
                if (v203 == *(double *)(md::LabelPoint::mercatorPoint(v204) + 8))
                {
                  if (v181 >= v201)
                    break;
                }
                else
                {
                  v198 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v181 + 56))(v181);
                  v199 = *(double *)(md::LabelPoint::mercatorPoint(v198) + 8);
                  v200 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v201 + 56))(v201);
                  if (v199 >= *(double *)(md::LabelPoint::mercatorPoint(v200) + 8))
                    break;
                }
              }
            }
LABEL_168:
            if (a1 < i)
            {
              v205 = *a1;
              *a1++ = *i;
              *i = v205;
              while (1)
              {
                v216 = *a1;
                v217 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v181 + 56))(v181);
                v218 = v217;
                if (*(_BYTE *)(v217 + 45))
                  v219 = 1;
                else
                  v219 = *(_BYTE *)(v217 + 46) == 0;
                if (v219)
                {
                  v231 = *(double *)(v217 + 32);
                }
                else
                {
                  v220 = *(double *)v217;
                  v221 = *(double *)(v217 + 8);
                  v222 = *(double *)(v217 + 16);
                  v223 = sqrt(v220 * v220 + v221 * v221);
                  v224 = atan2(v222, v223 * 0.996647189);
                  v225 = atan2(v221, v220);
                  v226 = __sincos_stret(v224);
                  v227 = atan2(v222 + v226.__sinval * v226.__sinval * 42841.3115 * v226.__sinval, v223 + v226.__cosval * v226.__cosval * -42697.6727 * v226.__cosval);
                  v228 = tan(v227 * 0.5 + 0.785398163);
                  v229 = log(v228);
                  v230 = v225 * 0.159154943 + 0.5;
                  v231 = v229 * 0.159154943 + 0.5;
                  *(double *)(v218 + 24) = v230;
                  *(double *)(v218 + 32) = v231;
                  *(_BYTE *)(v218 + 45) = 1;
                }
                v232 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v216 + 56))(v216);
                v233 = v232;
                if (*(_BYTE *)(v232 + 45))
                  v234 = 1;
                else
                  v234 = *(_BYTE *)(v232 + 46) == 0;
                if (v234)
                {
                  if (v231 == *(double *)(v232 + 32))
                  {
LABEL_121:
                    if (v181 < v216)
                      goto LABEL_147;
                    goto LABEL_122;
                  }
                }
                else
                {
                  v603 = v231;
                  v206 = *(double *)v232;
                  v207 = *(double *)(v232 + 8);
                  v208 = *(double *)(v232 + 16);
                  v209 = sqrt(v206 * v206 + v207 * v207);
                  v210 = atan2(v208, v209 * 0.996647189);
                  v211 = atan2(v207, v206);
                  v212 = __sincos_stret(v210);
                  v213 = atan2(v208 + v212.__sinval * v212.__sinval * 42841.3115 * v212.__sinval, v209 + v212.__cosval * v212.__cosval * -42697.6727 * v212.__cosval);
                  v214 = tan(v213 * 0.5 + 0.785398163);
                  v215 = log(v214) * 0.159154943 + 0.5;
                  *(double *)(v233 + 24) = v211 * 0.159154943 + 0.5;
                  *(long double *)(v233 + 32) = v215;
                  *(_BYTE *)(v233 + 45) = 1;
                  if (v603 == v215)
                    goto LABEL_121;
                }
                v235 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v181 + 56))(v181);
                v236 = v235;
                if (*(_BYTE *)(v235 + 45) || !*(_BYTE *)(v235 + 46))
                {
                  v248 = *(double *)(v235 + 32);
                }
                else
                {
                  v237 = *(double *)v235;
                  v238 = *(double *)(v235 + 8);
                  v239 = *(double *)(v235 + 16);
                  v240 = sqrt(v237 * v237 + v238 * v238);
                  v241 = atan2(v239, v240 * 0.996647189);
                  v242 = atan2(v238, v237);
                  v243 = __sincos_stret(v241);
                  v244 = atan2(v239 + v243.__sinval * v243.__sinval * 42841.3115 * v243.__sinval, v240 + v243.__cosval * v243.__cosval * -42697.6727 * v243.__cosval);
                  v245 = tan(v244 * 0.5 + 0.785398163);
                  v246 = log(v245);
                  v247 = v242 * 0.159154943 + 0.5;
                  v248 = v246 * 0.159154943 + 0.5;
                  *(double *)(v236 + 24) = v247;
                  *(double *)(v236 + 32) = v248;
                  *(_BYTE *)(v236 + 45) = 1;
                }
                v249 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v216 + 56))(v216);
                v250 = v249;
                if (*(_BYTE *)(v249 + 45) || !*(_BYTE *)(v249 + 46))
                {
                  if (v248 >= *(double *)(v249 + 32))
                    goto LABEL_122;
                  while (1)
                  {
LABEL_147:
                    v272 = *--i;
                    v271 = v272;
                    v273 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v181 + 56))(v181);
                    v274 = v273;
                    if (*(_BYTE *)(v273 + 45))
                      v275 = 1;
                    else
                      v275 = *(_BYTE *)(v273 + 46) == 0;
                    if (v275)
                    {
                      v287 = *(double *)(v273 + 32);
                    }
                    else
                    {
                      v276 = *(double *)v273;
                      v277 = *(double *)(v273 + 8);
                      v278 = *(double *)(v273 + 16);
                      v279 = sqrt(v276 * v276 + v277 * v277);
                      v280 = atan2(v278, v279 * 0.996647189);
                      v281 = atan2(v277, v276);
                      v282 = __sincos_stret(v280);
                      v283 = atan2(v278 + v282.__sinval * v282.__sinval * 42841.3115 * v282.__sinval, v279 + v282.__cosval * v282.__cosval * -42697.6727 * v282.__cosval);
                      v284 = tan(v283 * 0.5 + 0.785398163);
                      v285 = log(v284);
                      v286 = v281 * 0.159154943 + 0.5;
                      v287 = v285 * 0.159154943 + 0.5;
                      *(double *)(v274 + 24) = v286;
                      *(double *)(v274 + 32) = v287;
                      *(_BYTE *)(v274 + 45) = 1;
                    }
                    v288 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v271 + 56))(v271);
                    v289 = v288;
                    if (*(_BYTE *)(v288 + 45))
                      v290 = 1;
                    else
                      v290 = *(_BYTE *)(v288 + 46) == 0;
                    if (v290)
                    {
                      if (v287 == *(double *)(v288 + 32))
                      {
LABEL_146:
                        if (v181 >= v271)
                          goto LABEL_168;
                        continue;
                      }
                    }
                    else
                    {
                      v605 = v287;
                      v261 = *(double *)v288;
                      v262 = *(double *)(v288 + 8);
                      v263 = *(double *)(v288 + 16);
                      v264 = sqrt(v261 * v261 + v262 * v262);
                      v265 = atan2(v263, v264 * 0.996647189);
                      v266 = atan2(v262, v261);
                      v267 = __sincos_stret(v265);
                      v268 = atan2(v263 + v267.__sinval * v267.__sinval * 42841.3115 * v267.__sinval, v264 + v267.__cosval * v267.__cosval * -42697.6727 * v267.__cosval);
                      v269 = tan(v268 * 0.5 + 0.785398163);
                      v270 = log(v269) * 0.159154943 + 0.5;
                      *(double *)(v289 + 24) = v266 * 0.159154943 + 0.5;
                      *(long double *)(v289 + 32) = v270;
                      *(_BYTE *)(v289 + 45) = 1;
                      if (v605 == v270)
                        goto LABEL_146;
                    }
                    v291 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v181 + 56))(v181);
                    v292 = v291;
                    if (*(_BYTE *)(v291 + 45) || !*(_BYTE *)(v291 + 46))
                    {
                      v304 = *(double *)(v291 + 32);
                    }
                    else
                    {
                      v293 = *(double *)v291;
                      v294 = *(double *)(v291 + 8);
                      v295 = *(double *)(v291 + 16);
                      v296 = sqrt(v293 * v293 + v294 * v294);
                      v297 = atan2(v295, v296 * 0.996647189);
                      v298 = atan2(v294, v293);
                      v299 = __sincos_stret(v297);
                      v300 = atan2(v295 + v299.__sinval * v299.__sinval * 42841.3115 * v299.__sinval, v296 + v299.__cosval * v299.__cosval * -42697.6727 * v299.__cosval);
                      v301 = tan(v300 * 0.5 + 0.785398163);
                      v302 = log(v301);
                      v303 = v298 * 0.159154943 + 0.5;
                      v304 = v302 * 0.159154943 + 0.5;
                      *(double *)(v292 + 24) = v303;
                      *(double *)(v292 + 32) = v304;
                      *(_BYTE *)(v292 + 45) = 1;
                    }
                    v305 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v271 + 56))(v271);
                    v306 = v305;
                    if (*(_BYTE *)(v305 + 45) || !*(_BYTE *)(v305 + 46))
                    {
                      if (v304 >= *(double *)(v305 + 32))
                        goto LABEL_168;
                    }
                    else
                    {
                      v606 = v304;
                      v307 = *(double *)v305;
                      v308 = *(double *)(v305 + 8);
                      v309 = *(double *)(v305 + 16);
                      v310 = sqrt(v307 * v307 + v308 * v308);
                      v311 = atan2(v309, v310 * 0.996647189);
                      v312 = atan2(v308, v307);
                      v313 = __sincos_stret(v311);
                      v314 = atan2(v309 + v313.__sinval * v313.__sinval * 42841.3115 * v313.__sinval, v310 + v313.__cosval * v313.__cosval * -42697.6727 * v313.__cosval);
                      v315 = tan(v314 * 0.5 + 0.785398163);
                      v316 = log(v315) * 0.159154943 + 0.5;
                      *(double *)(v306 + 24) = v312 * 0.159154943 + 0.5;
                      *(long double *)(v306 + 32) = v316;
                      *(_BYTE *)(v306 + 45) = 1;
                      if (v606 >= v316)
                        goto LABEL_168;
                    }
                  }
                }
                v604 = v248;
                v251 = *(double *)v249;
                v252 = *(double *)(v249 + 8);
                v253 = *(double *)(v249 + 16);
                v254 = sqrt(v251 * v251 + v252 * v252);
                v255 = atan2(v253, v254 * 0.996647189);
                v256 = atan2(v252, v251);
                v257 = __sincos_stret(v255);
                v258 = atan2(v253 + v257.__sinval * v257.__sinval * 42841.3115 * v257.__sinval, v254 + v257.__cosval * v257.__cosval * -42697.6727 * v257.__cosval);
                v259 = tan(v258 * 0.5 + 0.785398163);
                v260 = log(v259) * 0.159154943 + 0.5;
                *(double *)(v250 + 24) = v256 * 0.159154943 + 0.5;
                *(long double *)(v250 + 32) = v260;
                *(_BYTE *)(v250 + 45) = 1;
                if (v604 < v260)
                  goto LABEL_147;
LABEL_122:
                ++a1;
              }
            }
            v317 = a1 - 1;
            if (a1 - 1 != v607)
              *v607 = *v317;
            a4 = 0;
            *v317 = v181;
            a2 = v600;
            continue;
          }
LABEL_11:
          v20 = a1 + 1;
          v21 = *a1;
          while (1)
          {
            v32 = *v20;
            v33 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)*v20 + 56))(*v20);
            v34 = v33;
            if (*(_BYTE *)(v33 + 45) || *(_BYTE *)(v33 + 46) == 0)
            {
              v45 = *(double *)(v33 + 32);
            }
            else
            {
              v36 = *(double *)v33;
              v37 = *(double *)(v33 + 8);
              v38 = *(double *)(v33 + 16);
              v39 = sqrt(v36 * v36 + v37 * v37);
              v40 = atan2(v38, v39 * 0.996647189);
              v41 = atan2(v37, v36);
              v42 = __sincos_stret(v40);
              v43 = atan2(v38 + v42.__sinval * v42.__sinval * 42841.3115 * v42.__sinval, v39 + v42.__cosval * v42.__cosval * -42697.6727 * v42.__cosval);
              v44 = tan(v43 * 0.5 + 0.785398163);
              v45 = log(v44) * 0.159154943 + 0.5;
              *(double *)(v34 + 24) = v41 * 0.159154943 + 0.5;
              *(double *)(v34 + 32) = v45;
              *(_BYTE *)(v34 + 45) = 1;
            }
            v46 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v21 + 56))(v21);
            v47 = v46;
            if (*(_BYTE *)(v46 + 45) || *(_BYTE *)(v46 + 46) == 0)
              break;
            v22 = *(double *)v46;
            v23 = *(double *)(v46 + 8);
            v24 = *(double *)(v46 + 16);
            v25 = sqrt(v22 * v22 + v23 * v23);
            v26 = atan2(v24, v25 * 0.996647189);
            v27 = atan2(v23, v22);
            v28 = __sincos_stret(v26);
            v29 = atan2(v24 + v28.__sinval * v28.__sinval * 42841.3115 * v28.__sinval, v25 + v28.__cosval * v28.__cosval * -42697.6727 * v28.__cosval);
            v30 = tan(v29 * 0.5 + 0.785398163);
            v31 = log(v30) * 0.159154943 + 0.5;
            *(double *)(v47 + 24) = v27 * 0.159154943 + 0.5;
            *(long double *)(v47 + 32) = v31;
            *(_BYTE *)(v47 + 45) = 1;
            if (v45 != v31)
              goto LABEL_27;
LABEL_13:
            if (v32 >= v21)
              goto LABEL_28;
LABEL_14:
            ++v20;
          }
          if (v45 == *(double *)(v46 + 32))
            goto LABEL_13;
LABEL_27:
          v49 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v32 + 56))(v32);
          v50 = *(double *)(md::LabelPoint::mercatorPoint(v49) + 8);
          v51 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v21 + 56))(v21);
          if (v50 < *(double *)(md::LabelPoint::mercatorPoint(v51) + 8))
            goto LABEL_14;
LABEL_28:
          v52 = v20 - 1;
          j = v7;
          if (v20 - 1 != v607)
          {
            while (1)
            {
              v57 = *j;
              v58 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*j + 56))(*j);
              v59 = *(double *)(md::LabelPoint::mercatorPoint(v58) + 8);
              v60 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v21 + 56))(v21);
              if (v59 == *(double *)(md::LabelPoint::mercatorPoint(v60) + 8))
              {
                if (v57 < v21)
                  goto LABEL_35;
              }
              else
              {
                v54 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v57 + 56))(v57);
                v55 = *(double *)(md::LabelPoint::mercatorPoint(v54) + 8);
                v56 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v21 + 56))(v21);
                if (v55 < *(double *)(md::LabelPoint::mercatorPoint(v56) + 8))
                  goto LABEL_35;
              }
              --j;
            }
          }
          j = v600;
          if (v20 < v600)
          {
            for (j = v7; ; --j)
            {
              v169 = *j;
              v170 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*j + 56))(*j);
              v171 = *(double *)(md::LabelPoint::mercatorPoint(v170) + 8);
              v172 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v21 + 56))(v21);
              if (v171 == *(double *)(md::LabelPoint::mercatorPoint(v172) + 8))
              {
                v168 = v169 < v21 || v20 >= j;
                if (v168)
                  break;
              }
              else
              {
                v173 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v169 + 56))(v169);
                v174 = *(double *)(md::LabelPoint::mercatorPoint(v173) + 8);
                v175 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v21 + 56))(v21);
                v176 = md::LabelPoint::mercatorPoint(v175);
                if (v20 >= j || v174 < *(double *)(v176 + 8))
                  break;
              }
            }
          }
LABEL_35:
          v602 = a3;
          v61 = v7;
          if (v20 < j)
          {
            v62 = v20;
            v63 = j;
            do
            {
              v64 = *v62;
              *v62++ = *v63;
              *v63 = v64;
              while (1)
              {
                v75 = *v62;
                v76 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)*v62 + 56))(*v62);
                v77 = v76;
                if (*(_BYTE *)(v76 + 45) || *(_BYTE *)(v76 + 46) == 0)
                {
                  v88 = *(double *)(v76 + 32);
                }
                else
                {
                  v79 = *(double *)v76;
                  v80 = *(double *)(v76 + 8);
                  v81 = *(double *)(v76 + 16);
                  v82 = sqrt(v79 * v79 + v80 * v80);
                  v83 = atan2(v81, v82 * 0.996647189);
                  v84 = atan2(v80, v79);
                  v85 = __sincos_stret(v83);
                  v86 = atan2(v81 + v85.__sinval * v85.__sinval * 42841.3115 * v85.__sinval, v82 + v85.__cosval * v85.__cosval * -42697.6727 * v85.__cosval);
                  v87 = tan(v86 * 0.5 + 0.785398163);
                  v88 = log(v87) * 0.159154943 + 0.5;
                  *(double *)(v77 + 24) = v84 * 0.159154943 + 0.5;
                  *(double *)(v77 + 32) = v88;
                  *(_BYTE *)(v77 + 45) = 1;
                }
                v89 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v21 + 56))(v21);
                v90 = v89;
                if (*(_BYTE *)(v89 + 45) || *(_BYTE *)(v89 + 46) == 0)
                {
                  if (v88 == *(double *)(v89 + 32))
                  {
LABEL_40:
                    if (v75 >= v21)
                      goto LABEL_63;
                    goto LABEL_41;
                  }
                }
                else
                {
                  v65 = *(double *)v89;
                  v66 = *(double *)(v89 + 8);
                  v67 = *(double *)(v89 + 16);
                  v68 = sqrt(v65 * v65 + v66 * v66);
                  v69 = atan2(v67, v68 * 0.996647189);
                  v70 = atan2(v66, v65);
                  v71 = __sincos_stret(v69);
                  v72 = atan2(v67 + v71.__sinval * v71.__sinval * 42841.3115 * v71.__sinval, v68 + v71.__cosval * v71.__cosval * -42697.6727 * v71.__cosval);
                  v73 = tan(v72 * 0.5 + 0.785398163);
                  v74 = log(v73) * 0.159154943 + 0.5;
                  *(double *)(v90 + 24) = v70 * 0.159154943 + 0.5;
                  *(long double *)(v90 + 32) = v74;
                  *(_BYTE *)(v90 + 45) = 1;
                  if (v88 == v74)
                    goto LABEL_40;
                }
                v92 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v75 + 56))(v75);
                v93 = v92;
                if (*(_BYTE *)(v92 + 45) || !*(_BYTE *)(v92 + 46))
                {
                  v103 = *(double *)(v92 + 32);
                }
                else
                {
                  v94 = *(double *)v92;
                  v95 = *(double *)(v92 + 8);
                  v96 = *(double *)(v92 + 16);
                  v97 = sqrt(v94 * v94 + v95 * v95);
                  v98 = atan2(v96, v97 * 0.996647189);
                  v99 = atan2(v95, v94);
                  v100 = __sincos_stret(v98);
                  v101 = atan2(v96 + v100.__sinval * v100.__sinval * 42841.3115 * v100.__sinval, v97 + v100.__cosval * v100.__cosval * -42697.6727 * v100.__cosval);
                  v102 = tan(v101 * 0.5 + 0.785398163);
                  v103 = log(v102) * 0.159154943 + 0.5;
                  *(double *)(v93 + 24) = v99 * 0.159154943 + 0.5;
                  *(double *)(v93 + 32) = v103;
                  *(_BYTE *)(v93 + 45) = 1;
                }
                v104 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v21 + 56))(v21);
                v105 = v104;
                if (*(_BYTE *)(v104 + 45) || !*(_BYTE *)(v104 + 46))
                  break;
                v106 = *(double *)v104;
                v107 = *(double *)(v104 + 8);
                v108 = *(double *)(v104 + 16);
                v109 = sqrt(v106 * v106 + v107 * v107);
                v110 = atan2(v108, v109 * 0.996647189);
                v111 = atan2(v107, v106);
                v112 = __sincos_stret(v110);
                v113 = atan2(v108 + v112.__sinval * v112.__sinval * 42841.3115 * v112.__sinval, v109 + v112.__cosval * v112.__cosval * -42697.6727 * v112.__cosval);
                v114 = tan(v113 * 0.5 + 0.785398163);
                v115 = log(v114) * 0.159154943 + 0.5;
                *(double *)(v105 + 24) = v111 * 0.159154943 + 0.5;
                *(long double *)(v105 + 32) = v115;
                *(_BYTE *)(v105 + 45) = 1;
                if (v103 >= v115)
                  goto LABEL_63;
LABEL_41:
                ++v62;
              }
              if (v103 < *(double *)(v104 + 32))
                goto LABEL_41;
LABEL_63:
              v52 = v62 - 1;
              while (1)
              {
LABEL_66:
                v127 = *--v63;
                v126 = v127;
                v128 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v127 + 56))(v127);
                v129 = v128;
                if (*(_BYTE *)(v128 + 45) || *(_BYTE *)(v128 + 46) == 0)
                {
                  v140 = *(double *)(v128 + 32);
                }
                else
                {
                  v131 = *(double *)v128;
                  v132 = *(double *)(v128 + 8);
                  v133 = *(double *)(v128 + 16);
                  v134 = sqrt(v131 * v131 + v132 * v132);
                  v135 = atan2(v133, v134 * 0.996647189);
                  v136 = atan2(v132, v131);
                  v137 = __sincos_stret(v135);
                  v138 = atan2(v133 + v137.__sinval * v137.__sinval * 42841.3115 * v137.__sinval, v134 + v137.__cosval * v137.__cosval * -42697.6727 * v137.__cosval);
                  v139 = tan(v138 * 0.5 + 0.785398163);
                  v140 = log(v139) * 0.159154943 + 0.5;
                  *(double *)(v129 + 24) = v136 * 0.159154943 + 0.5;
                  *(double *)(v129 + 32) = v140;
                  *(_BYTE *)(v129 + 45) = 1;
                }
                v141 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v21 + 56))(v21);
                v142 = v141;
                if (*(_BYTE *)(v141 + 45) || *(_BYTE *)(v141 + 46) == 0)
                {
                  if (v140 == *(double *)(v141 + 32))
                  {
LABEL_65:
                    if (v126 < v21)
                      goto LABEL_37;
                    continue;
                  }
                }
                else
                {
                  v116 = *(double *)v141;
                  v117 = *(double *)(v141 + 8);
                  v118 = *(double *)(v141 + 16);
                  v119 = sqrt(v116 * v116 + v117 * v117);
                  v120 = atan2(v118, v119 * 0.996647189);
                  v121 = atan2(v117, v116);
                  v122 = __sincos_stret(v120);
                  v123 = atan2(v118 + v122.__sinval * v122.__sinval * 42841.3115 * v122.__sinval, v119 + v122.__cosval * v122.__cosval * -42697.6727 * v122.__cosval);
                  v124 = tan(v123 * 0.5 + 0.785398163);
                  v125 = log(v124) * 0.159154943 + 0.5;
                  *(double *)(v142 + 24) = v121 * 0.159154943 + 0.5;
                  *(long double *)(v142 + 32) = v125;
                  *(_BYTE *)(v142 + 45) = 1;
                  if (v140 == v125)
                    goto LABEL_65;
                }
                v144 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v126 + 56))(v126);
                v145 = v144;
                if (*(_BYTE *)(v144 + 45) || !*(_BYTE *)(v144 + 46))
                {
                  v155 = *(double *)(v144 + 32);
                }
                else
                {
                  v146 = *(double *)v144;
                  v147 = *(double *)(v144 + 8);
                  v148 = *(double *)(v144 + 16);
                  v149 = sqrt(v146 * v146 + v147 * v147);
                  v150 = atan2(v148, v149 * 0.996647189);
                  v151 = atan2(v147, v146);
                  v152 = __sincos_stret(v150);
                  v153 = atan2(v148 + v152.__sinval * v152.__sinval * 42841.3115 * v152.__sinval, v149 + v152.__cosval * v152.__cosval * -42697.6727 * v152.__cosval);
                  v154 = tan(v153 * 0.5 + 0.785398163);
                  v155 = log(v154) * 0.159154943 + 0.5;
                  *(double *)(v145 + 24) = v151 * 0.159154943 + 0.5;
                  *(double *)(v145 + 32) = v155;
                  *(_BYTE *)(v145 + 45) = 1;
                }
                v156 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v21 + 56))(v21);
                v157 = v156;
                if (*(_BYTE *)(v156 + 45) || !*(_BYTE *)(v156 + 46))
                  break;
                v158 = *(double *)v156;
                v159 = *(double *)(v156 + 8);
                v160 = *(double *)(v156 + 16);
                v161 = sqrt(v158 * v158 + v159 * v159);
                v162 = atan2(v160, v161 * 0.996647189);
                v163 = atan2(v159, v158);
                v164 = __sincos_stret(v162);
                v165 = atan2(v160 + v164.__sinval * v164.__sinval * 42841.3115 * v164.__sinval, v161 + v164.__cosval * v164.__cosval * -42697.6727 * v164.__cosval);
                v166 = tan(v165 * 0.5 + 0.785398163);
                v167 = log(v166) * 0.159154943 + 0.5;
                *(double *)(v157 + 24) = v163 * 0.159154943 + 0.5;
                *(long double *)(v157 + 32) = v167;
                *(_BYTE *)(v157 + 45) = 1;
                if (v155 < v167)
                  goto LABEL_37;
              }
              if (v155 >= *(double *)(v156 + 32))
                goto LABEL_66;
LABEL_37:
              ;
            }
            while (v62 < v63);
          }
          if (v52 != v607)
            *v607 = *v52;
          *v52 = v21;
          v7 = v61;
          a2 = v600;
          a3 = v602;
          if (v20 < j)
            goto LABEL_102;
          v177 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(v607, v52);
          a1 = v52 + 1;
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **>(v52 + 1, v600))
          {
            if (v177)
              continue;
LABEL_102:
            std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::dedupePlacements(unsigned char,BOOL,md::RoadMetricsEntry const*)::SorterByY &,md::RoadPosition **,false>(v607, v52, v602, a4 & 1);
            a4 = 0;
            a1 = v52 + 1;
            continue;
          }
          a2 = v52;
          a1 = v607;
          if (v177)
            return;
          goto LABEL_1;
        }
        if (a1 != a2)
        {
          v402 = (unint64_t)(v9 - 2) >> 1;
          v403 = v402;
          while (1)
          {
            v405 = v403;
            if (v402 < v403)
              goto LABEL_235;
            v406 = (2 * v403) | 1;
            v407 = &a1[v406];
            if (2 * v403 + 2 < v9)
            {
              v408 = *v407;
              v409 = v407[1];
              v410 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*v407 + 56))(*v407);
              v411 = *(double *)(md::LabelPoint::mercatorPoint(v410) + 8);
              v412 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v409 + 56))(v409);
              if (v411 == *(double *)(md::LabelPoint::mercatorPoint(v412) + 8))
              {
                if (v408 >= v409)
                  goto LABEL_241;
LABEL_240:
                ++v407;
                v406 = 2 * v405 + 2;
                goto LABEL_241;
              }
              v439 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v408 + 56))(v408);
              v440 = *(double *)(md::LabelPoint::mercatorPoint(v439) + 8);
              v441 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v409 + 56))(v409);
              if (v440 < *(double *)(md::LabelPoint::mercatorPoint(v441) + 8))
                goto LABEL_240;
            }
LABEL_241:
            v413 = *v407;
            a1 = v607;
            v414 = v607[v405];
            v415 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*v407 + 56))(*v407);
            v416 = *(double *)(md::LabelPoint::mercatorPoint(v415) + 8);
            v417 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v414 + 56))(v414);
            if (v416 == *(double *)(md::LabelPoint::mercatorPoint(v417) + 8))
            {
              v402 = (unint64_t)(v9 - 2) >> 1;
              if (v413 >= v414)
                goto LABEL_245;
            }
            else
            {
              v418 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v413 + 56))(v413);
              v419 = *(double *)(md::LabelPoint::mercatorPoint(v418) + 8);
              v420 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v414 + 56))(v414);
              v402 = (unint64_t)(v9 - 2) >> 1;
              if (v419 >= *(double *)(md::LabelPoint::mercatorPoint(v420) + 8))
              {
LABEL_245:
                v421 = v607[v405];
                v607[v405] = *v407;
                if (v402 < v406)
                {
LABEL_233:
                  v404 = v407;
LABEL_234:
                  *v404 = v421;
                  goto LABEL_235;
                }
                while (2)
                {
                  v425 = 2 * v406;
                  v406 = (2 * v406) | 1;
                  v404 = &a1[v406];
                  v426 = v425 + 2;
                  if (v425 + 2 < v9)
                  {
                    v427 = *v404;
                    v428 = v404[1];
                    v429 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*v404 + 56))(*v404);
                    v430 = *(double *)(md::LabelPoint::mercatorPoint(v429) + 8);
                    v431 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v428 + 56))(v428);
                    if (v430 == *(double *)(md::LabelPoint::mercatorPoint(v431) + 8))
                    {
                      v168 = v427 >= v428;
                      v402 = (unint64_t)(v9 - 2) >> 1;
                      if (!v168)
                        goto LABEL_252;
                    }
                    else
                    {
                      v436 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v427 + 56))(v427);
                      v437 = *(double *)(md::LabelPoint::mercatorPoint(v436) + 8);
                      v438 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v428 + 56))(v428);
                      v402 = (unint64_t)(v9 - 2) >> 1;
                      if (v437 < *(double *)(md::LabelPoint::mercatorPoint(v438) + 8))
                      {
LABEL_252:
                        ++v404;
                        v406 = v426;
                      }
                    }
                  }
                  v432 = *v404;
                  v433 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*v404 + 56))(*v404);
                  v434 = *(double *)(md::LabelPoint::mercatorPoint(v433) + 8);
                  v435 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v421 + 56))(v421);
                  if (v434 == *(double *)(md::LabelPoint::mercatorPoint(v435) + 8))
                  {
                    a1 = v607;
                    if (v432 < v421)
                      goto LABEL_233;
                  }
                  else
                  {
                    v422 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v432 + 56))(v432);
                    v423 = *(double *)(md::LabelPoint::mercatorPoint(v422) + 8);
                    v424 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v421 + 56))(v421);
                    a1 = v607;
                    if (v423 < *(double *)(md::LabelPoint::mercatorPoint(v424) + 8))
                      goto LABEL_233;
                  }
                  *v407 = *v404;
                  v407 = v404;
                  if (v402 < v406)
                    goto LABEL_234;
                  continue;
                }
              }
            }
LABEL_235:
            v403 = v405 - 1;
            if (!v405)
            {
              v442 = (unint64_t)v8 >> 3;
              v443 = 0.5;
              v444 = v600;
              while (1)
              {
                v601 = v444;
                v446 = 0;
                v608 = *a1;
                v447 = a1;
                do
                {
                  v448 = v447;
                  v447 += v446 + 1;
                  v449 = 2 * v446;
                  v446 = (2 * v446) | 1;
                  v450 = v449 + 2;
                  if (v449 + 2 >= v442)
                    goto LABEL_265;
                  v451 = *v447;
                  v452 = v447[1];
                  v453 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)*v447 + 56))(*v447);
                  v454 = v453;
                  if (*(_BYTE *)(v453 + 45))
                    v455 = 1;
                  else
                    v455 = *(_BYTE *)(v453 + 46) == 0;
                  if (v455)
                  {
                    v465 = *(double *)(v453 + 32);
                  }
                  else
                  {
                    v456 = *(double *)v453;
                    v457 = *(double *)(v453 + 8);
                    v458 = *(double *)(v453 + 16);
                    v459 = sqrt(v456 * v456 + v457 * v457);
                    v460 = atan2(v458, v459 * 0.996647189);
                    v461 = atan2(v457, v456);
                    v462 = __sincos_stret(v460);
                    v463 = atan2(v458 + v462.__sinval * v462.__sinval * 42841.3115 * v462.__sinval, v459 + v462.__cosval * v462.__cosval * -42697.6727 * v462.__cosval);
                    v464 = tan(v463 * v443 + 0.785398163);
                    v465 = v443 + log(v464) * 0.159154943;
                    *(double *)(v454 + 24) = v443 + v461 * 0.159154943;
                    *(double *)(v454 + 32) = v465;
                    *(_BYTE *)(v454 + 45) = 1;
                  }
                  v466 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v452 + 56))(v452);
                  v467 = v466;
                  if (*(_BYTE *)(v466 + 45))
                    v468 = 1;
                  else
                    v468 = *(_BYTE *)(v466 + 46) == 0;
                  if (v468)
                  {
                    if (v465 == *(double *)(v466 + 32))
                      goto LABEL_283;
                  }
                  else
                  {
                    v481 = *(double *)v466;
                    v482 = *(double *)(v466 + 8);
                    v483 = *(double *)(v466 + 16);
                    v484 = sqrt(v481 * v481 + v482 * v482);
                    v485 = atan2(v483, v484 * 0.996647189);
                    v486 = atan2(v482, v481);
                    v487 = __sincos_stret(v485);
                    v488 = v484 + v487.__cosval * v487.__cosval * -42697.6727 * v487.__cosval;
                    v443 = 0.5;
                    v489 = atan2(v483 + v487.__sinval * v487.__sinval * 42841.3115 * v487.__sinval, v488);
                    v490 = tan(v489 * 0.5 + 0.785398163);
                    v491 = log(v490) * 0.159154943 + 0.5;
                    *(double *)(v467 + 24) = v486 * 0.159154943 + 0.5;
                    *(long double *)(v467 + 32) = v491;
                    *(_BYTE *)(v467 + 45) = 1;
                    if (v465 == v491)
                    {
LABEL_283:
                      if (v451 < v452)
                        goto LABEL_264;
                      goto LABEL_265;
                    }
                  }
                  v469 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v451 + 56))(v451);
                  v470 = v469;
                  if (*(_BYTE *)(v469 + 45) || !*(_BYTE *)(v469 + 46))
                  {
                    v480 = *(double *)(v469 + 32);
                  }
                  else
                  {
                    v471 = *(double *)v469;
                    v472 = *(double *)(v469 + 8);
                    v473 = *(double *)(v469 + 16);
                    v474 = sqrt(v471 * v471 + v472 * v472);
                    v475 = atan2(v473, v474 * 0.996647189);
                    v476 = atan2(v472, v471);
                    v477 = __sincos_stret(v475);
                    v478 = atan2(v473 + v477.__sinval * v477.__sinval * 42841.3115 * v477.__sinval, v474 + v477.__cosval * v477.__cosval * -42697.6727 * v477.__cosval);
                    v479 = tan(v478 * v443 + 0.785398163);
                    v480 = v443 + log(v479) * 0.159154943;
                    *(double *)(v470 + 24) = v443 + v476 * 0.159154943;
                    *(double *)(v470 + 32) = v480;
                    *(_BYTE *)(v470 + 45) = 1;
                  }
                  v492 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v452 + 56))(v452);
                  v493 = v492;
                  if (*(_BYTE *)(v492 + 45) || !*(_BYTE *)(v492 + 46))
                  {
                    if (v480 < *(double *)(v492 + 32))
                    {
LABEL_264:
                      ++v447;
                      v446 = v450;
                    }
                  }
                  else
                  {
                    v494 = *(double *)v492;
                    v495 = *(double *)(v492 + 8);
                    v496 = *(double *)(v492 + 16);
                    v497 = sqrt(v494 * v494 + v495 * v495);
                    v498 = atan2(v496, v497 * 0.996647189);
                    v499 = atan2(v495, v494);
                    v500 = __sincos_stret(v498);
                    v501 = v497 + v500.__cosval * v500.__cosval * -42697.6727 * v500.__cosval;
                    v443 = 0.5;
                    v502 = atan2(v496 + v500.__sinval * v500.__sinval * 42841.3115 * v500.__sinval, v501);
                    v503 = tan(v502 * 0.5 + 0.785398163);
                    v504 = log(v503) * 0.159154943 + 0.5;
                    *(double *)(v493 + 24) = v499 * 0.159154943 + 0.5;
                    *(long double *)(v493 + 32) = v504;
                    *(_BYTE *)(v493 + 45) = 1;
                    if (v480 < v504)
                      goto LABEL_264;
                  }
LABEL_265:
                  *v448 = *v447;
                }
                while (v446 <= (uint64_t)((unint64_t)(v442 - 2) >> 1));
                v444 = v601 - 1;
                if (v447 == v601 - 1)
                {
                  a1 = v607;
                  *v447 = v608;
                }
                else
                {
                  *v447 = *v444;
                  a1 = v607;
                  *v444 = v608;
                  v505 = (char *)v447 - (char *)v607 + 8;
                  if (v505 >= 9)
                  {
                    v506 = ((unint64_t)v505 >> 3) - 2;
                    v507 = v506 >> 1;
                    v508 = &v607[v506 >> 1];
                    v509 = *v508;
                    v510 = *v447;
                    v511 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*v508 + 56))(*v508);
                    v512 = *(double *)(md::LabelPoint::mercatorPoint(v511) + 8);
                    v513 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v510 + 56))(v510);
                    if (v512 == *(double *)(md::LabelPoint::mercatorPoint(v513) + 8))
                    {
                      if (v509 < v510)
                      {
LABEL_298:
                        v517 = *v447;
                        *v447 = *v508;
                        if (v506 >= 2)
                        {
                          while (1)
                          {
                            v521 = v507 - 1;
                            v507 = (v507 - 1) >> 1;
                            v522 = &v607[v507];
                            v523 = *v522;
                            v524 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)*v522
                                                                                                 + 56))(*v522);
                            v525 = *(double *)(md::LabelPoint::mercatorPoint(v524) + 8);
                            v526 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v517 + 56))(v517);
                            if (v525 == *(double *)(md::LabelPoint::mercatorPoint(v526) + 8))
                            {
                              if (v523 >= v517)
                                break;
                            }
                            else
                            {
                              v518 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v523 + 56))(v523);
                              v519 = *(double *)(md::LabelPoint::mercatorPoint(v518) + 8);
                              v520 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v517 + 56))(v517);
                              if (v519 >= *(double *)(md::LabelPoint::mercatorPoint(v520) + 8))
                                break;
                            }
                            *v508 = *v522;
                            v508 = &v607[v507];
                            if (v521 <= 1)
                              goto LABEL_305;
                          }
                        }
                        v522 = v508;
LABEL_305:
                        *v522 = v517;
                      }
                    }
                    else
                    {
                      v514 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v509 + 56))(v509);
                      v515 = *(double *)(md::LabelPoint::mercatorPoint(v514) + 8);
                      v516 = (md::LabelPoint *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v510 + 56))(v510);
                      if (v515 < *(double *)(md::LabelPoint::mercatorPoint(v516) + 8))
                        goto LABEL_298;
                    }
                  }
                }
                if (v442-- <= 2)
                  return;
              }
            }
          }
        }
        return;
    }
  }
}

  v9 = a2 - 2;
  v221 = a2 - 6;
  v222 = a2 - 4;
  i = a1;
  v223 = a2 - 2;
  v224 = a2;
  while (2)
  {
    a1 = i;
    v11 = (char *)a2 - (char *)i;
    v12 = ((char *)a2 - (char *)i) >> 4;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v79 = *(a2 - 2);
        v80 = *(a2 - 1);
        v81 = a3[1];
        v82 = v80 - v81;
        v83 = *i;
        v84 = i[1];
        v85 = v84 - v81;
        v86 = v82 / (v79 - *a3);
        if (vabdd_f64(v79, *a3) < 2.22044605e-16)
          v86 = 1.79769313e308;
        v87 = v85 / (*i - *a3);
        if (vabdd_f64(v83, *a3) >= 2.22044605e-16)
          v88 = v87;
        else
          v88 = 1.79769313e308;
        if (v86 < v88 || v86 == v88 && (v79 < v83 || v79 == v83 && v80 < v84))
        {
          *i = v79;
          i[1] = *(a2 - 1);
          *(a2 - 2) = v83;
          *(a2 - 1) = v84;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::ConvexHull2<double>::getConvexHullPoints(std::vector<gm::Matrix<double,2,1>> const&,std::vector<gm::Matrix<double,2,1>>&)::{lambda(gm::Matrix<double,2,1> const&,gm::Matrix<double,2,1> const&)#1} &,gm::Matrix<double,2,1>*>(i, i + 2, v9, a3);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geo::ConvexHull2<double>::getConvexHullPoints(std::vector<gm::Matrix<double,2,1>> const&,std::vector<gm::Matrix<double,2,1>>&)::{lambda(gm::Matrix<double,2,1> const&,gm::Matrix<double,2,1> const&)#1} &,gm::Matrix<double,2,1>*>(i, i + 2, i + 4, v9, a3);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::ConvexHull2<double>::getConvexHullPoints(std::vector<gm::Matrix<double,2,1>> const&,std::vector<gm::Matrix<double,2,1>>&)::{lambda(gm::Matrix<double,2,1> const&,gm::Matrix<double,2,1> const&)#1} &,gm::Matrix<double,2,1>*>(i, i + 2, i + 4, i + 6, v9, a3);
        return;
      default:
        if (v11 > 383)
        {
          if (!a4)
          {
            if (i != a2)
            {
              v114 = (v12 - 2) >> 1;
              v115 = v114;
              do
              {
                v117 = v115;
                if (v114 >= v115)
                {
                  v118 = (2 * v115) | 1;
                  v116 = &i[2 * v118];
                  v119 = *a3;
                  if (2 * v117 + 2 >= (uint64_t)v12)
                  {
                    v123 = a3[1];
                  }
                  else
                  {
                    v120 = v116[2];
                    v122 = *v116;
                    v121 = v116[1];
                    v123 = a3[1];
                    v124 = v116[3];
                    v125 = (v121 - v123) / (*v116 - v119);
                    if (vabdd_f64(*v116, v119) < 2.22044605e-16)
                      v125 = 1.79769313e308;
                    if (vabdd_f64(v120, v119) >= 2.22044605e-16)
                      v126 = (v124 - v123) / (v120 - v119);
                    else
                      v126 = 1.79769313e308;
                    if (v125 < v126 || v125 == v126 && (v122 < v120 || v122 == v120 && v121 < v124))
                    {
                      v116 += 2;
                      v118 = 2 * v117 + 2;
                    }
                  }
                  v127 = &i[2 * v117];
                  v128 = *v116;
                  v129 = v116[1];
                  v130 = v129 - v123;
                  v131 = *v127;
                  v132 = v127[1];
                  v133 = v132 - v123;
                  v134 = v130 / (*v116 - v119);
                  if (vabdd_f64(*v116, v119) < 2.22044605e-16)
                    v134 = 1.79769313e308;
                  v135 = v133 / (*v127 - v119);
                  v136 = vabdd_f64(v131, v119) >= 2.22044605e-16 ? v135 : 1.79769313e308;
                  if (v134 >= v136 && (v134 != v136 || v128 >= v131 && (v128 != v131 || v129 >= v132)))
                  {
                    while (1)
                    {
                      *v127 = v128;
                      v127[1] = v116[1];
                      if (v114 < v118)
                        break;
                      v127 = v116;
                      v137 = 2 * v118;
                      v118 = (2 * v118) | 1;
                      v116 = &i[2 * v118];
                      v138 = v137 + 2;
                      v139 = *a3;
                      v140 = a3[1];
                      if (v138 < (uint64_t)v12)
                      {
                        v141 = v116[2];
                        v143 = *v116;
                        v142 = v116[1];
                        v144 = v116[3];
                        v145 = (v142 - v140) / (*v116 - v139);
                        if (vabdd_f64(*v116, v139) < 2.22044605e-16)
                          v145 = 1.79769313e308;
                        if (vabdd_f64(v141, v139) >= 2.22044605e-16)
                          v146 = (v144 - v140) / (v141 - v139);
                        else
                          v146 = 1.79769313e308;
                        if (v145 < v146 || v145 == v146 && (v143 < v141 || v143 == v141 && v142 < v144))
                        {
                          v116 += 2;
                          v118 = v138;
                        }
                      }
                      v128 = *v116;
                      v147 = v116[1];
                      v148 = v147 - v140;
                      v149 = v132 - v140;
                      v150 = v148 / (*v116 - v139);
                      if (vabdd_f64(*v116, v139) < 2.22044605e-16)
                        v150 = 1.79769313e308;
                      v151 = v149 / (v131 - v139);
                      if (vabdd_f64(v131, v139) >= 2.22044605e-16)
                        v152 = v151;
                      else
                        v152 = 1.79769313e308;
                      if (v150 < v152 || v150 == v152 && (v128 < v131 || v128 == v131 && v147 < v132))
                      {
                        v116 = v127;
                        break;
                      }
                    }
                    *v116 = v131;
                    v116[1] = v132;
                  }
                }
                v115 = v117 - 1;
              }
              while (v117);
              v177 = (unint64_t)v11 >> 4;
              do
              {
                v179 = 0;
                v181 = *i;
                v180 = *((_QWORD *)i + 1);
                v182 = i;
                do
                {
                  v183 = v182;
                  v182 += 2 * v179 + 2;
                  v184 = 2 * v179;
                  v179 = (2 * v179) | 1;
                  v185 = v184 + 2;
                  if (v185 < v177)
                  {
                    v186 = v182[2];
                    v188 = *v182;
                    v187 = v182[1];
                    v189 = a3[1];
                    v190 = v187 - v189;
                    v191 = v182[3];
                    v192 = v191 - v189;
                    v193 = v190 / (*v182 - *a3);
                    if (vabdd_f64(*v182, *a3) < 2.22044605e-16)
                      v193 = 1.79769313e308;
                    v194 = v192 / (v186 - *a3);
                    if (vabdd_f64(v186, *a3) >= 2.22044605e-16)
                      v195 = v194;
                    else
                      v195 = 1.79769313e308;
                    if (v193 < v195 || v193 == v195 && (v188 < v186 || v188 == v186 && v187 < v191))
                    {
                      v182 += 2;
                      v179 = v185;
                    }
                  }
                  *v183 = *v182;
                  v183[1] = v182[1];
                }
                while (v179 <= (uint64_t)((unint64_t)(v177 - 2) >> 1));
                if (v182 == a2 - 2)
                {
                  *v182 = v181;
                  *((_QWORD *)v182 + 1) = v180;
                }
                else
                {
                  *v182 = *(a2 - 2);
                  v182[1] = *(a2 - 1);
                  *(a2 - 2) = v181;
                  *((_QWORD *)a2 - 1) = v180;
                  v196 = (char *)v182 - (char *)i + 16;
                  if (v196 >= 17)
                  {
                    v197 = (v196 >> 4) - 2;
                    v198 = v197 >> 1;
                    v199 = &i[2 * (v197 >> 1)];
                    v200 = *v199;
                    v201 = v199[1];
                    v202 = a3[1];
                    v203 = v201 - v202;
                    v204 = *v182;
                    v205 = v182[1];
                    v206 = v205 - v202;
                    v207 = v203 / (*v199 - *a3);
                    if (vabdd_f64(*v199, *a3) < 2.22044605e-16)
                      v207 = 1.79769313e308;
                    v208 = v206 / (*v182 - *a3);
                    v209 = vabdd_f64(v204, *a3) >= 2.22044605e-16 ? v208 : 1.79769313e308;
                    if (v207 < v209
                      || v207 == v209 && (v200 < v204 || (v200 == v204 ? (v210 = v201 < v205) : (v210 = 0), v210)))
                    {
                      *v182 = v200;
                      v182[1] = v199[1];
                      if (v197 >= 2)
                      {
                        while (1)
                        {
                          v212 = v198 - 1;
                          v198 = (v198 - 1) >> 1;
                          v211 = &i[2 * v198];
                          v213 = *v211;
                          v214 = v211[1];
                          v215 = a3[1];
                          v216 = v214 - v215;
                          v217 = v205 - v215;
                          v218 = v216 / (*v211 - *a3);
                          if (vabdd_f64(*v211, *a3) < 2.22044605e-16)
                            v218 = 1.79769313e308;
                          v219 = v217 / (v204 - *a3);
                          v220 = vabdd_f64(v204, *a3) >= 2.22044605e-16 ? v219 : 1.79769313e308;
                          if (v218 >= v220 && (v218 != v220 || v213 >= v204 && (v213 != v204 || v214 >= v205)))
                            break;
                          *v199 = v213;
                          v199[1] = v214;
                          v199 = &i[2 * v198];
                          if (v212 <= 1)
                            goto LABEL_336;
                        }
                      }
                      v211 = v199;
LABEL_336:
                      *v211 = v204;
                      v211[1] = v205;
                    }
                  }
                }
                a2 -= 2;
              }
              while (v177-- > 2);
            }
            return;
          }
          v13 = v12 >> 1;
          v14 = &i[2 * (v12 >> 1)];
          if ((unint64_t)v11 < 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::ConvexHull2<double>::getConvexHullPoints(std::vector<gm::Matrix<double,2,1>> const&,std::vector<gm::Matrix<double,2,1>>&)::{lambda(gm::Matrix<double,2,1> const&,gm::Matrix<double,2,1> const&)#1} &,gm::Matrix<double,2,1>*>(&a1[2 * (v12 >> 1)], a1, v9, a3);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::ConvexHull2<double>::getConvexHullPoints(std::vector<gm::Matrix<double,2,1>> const&,std::vector<gm::Matrix<double,2,1>>&)::{lambda(gm::Matrix<double,2,1> const&,gm::Matrix<double,2,1> const&)#1} &,gm::Matrix<double,2,1>*>(a1, &a1[2 * (v12 >> 1)], v9, a3);
            v15 = &a1[2 * v13];
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::ConvexHull2<double>::getConvexHullPoints(std::vector<gm::Matrix<double,2,1>> const&,std::vector<gm::Matrix<double,2,1>>&)::{lambda(gm::Matrix<double,2,1> const&,gm::Matrix<double,2,1> const&)#1} &,gm::Matrix<double,2,1>*>(a1 + 2, v15 - 2, v222, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::ConvexHull2<double>::getConvexHullPoints(std::vector<gm::Matrix<double,2,1>> const&,std::vector<gm::Matrix<double,2,1>>&)::{lambda(gm::Matrix<double,2,1> const&,gm::Matrix<double,2,1> const&)#1} &,gm::Matrix<double,2,1>*>(a1 + 4, &a1[2 * v13 + 2], v221, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::ConvexHull2<double>::getConvexHullPoints(std::vector<gm::Matrix<double,2,1>> const&,std::vector<gm::Matrix<double,2,1>>&)::{lambda(gm::Matrix<double,2,1> const&,gm::Matrix<double,2,1> const&)#1} &,gm::Matrix<double,2,1>*>(v15 - 2, v14, &a1[2 * v13 + 2], a3);
            v16 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v16;
            v9 = v223;
            a2 = v224;
          }
          --a4;
          v17 = *a1;
          v18 = *a3;
          if ((a5 & 1) == 0)
          {
            v24 = *(a1 - 2);
            v23 = *(a1 - 1);
            v20 = a3[1];
            v19 = a1[1];
            if (vabdd_f64(v24, v18) >= 2.22044605e-16)
              v25 = (v23 - v20) / (v24 - v18);
            else
              v25 = 1.79769313e308;
            v21 = vabdd_f64(v17, v18);
            v22 = (v19 - v20) / (v17 - v18);
            if (v21 >= 2.22044605e-16)
              v26 = (v19 - v20) / (v17 - v18);
            else
              v26 = 1.79769313e308;
            if (v25 < v26 || v25 == v26 && (v24 < v17 || v24 == v17 && v23 < v19))
              goto LABEL_21;
            v54 = *(a2 - 2);
            v53 = *(a2 - 1);
            v55 = (v53 - v20) / (v54 - v18);
            if (vabdd_f64(v54, v18) < 2.22044605e-16)
              v55 = 1.79769313e308;
            if (v26 < v55 || v26 == v55 && (v17 < v54 || v17 == v54 && v19 < v53))
            {
              v56 = a1[2];
              v57 = a1[3];
              i = a1 + 2;
              v58 = (v57 - v20) / (v56 - v18);
              if (vabdd_f64(v56, v18) < 2.22044605e-16)
                v58 = 1.79769313e308;
              if (v26 >= v58)
              {
                v59 = a1 + 5;
                do
                {
                  if (v26 == v58)
                  {
                    if (v17 < v56)
                      goto LABEL_119;
                    if (v17 == v56 && v19 < v57)
                      break;
                  }
                  i += 2;
                  v56 = *(v59 - 1);
                  v57 = *v59;
                  v58 = (*v59 - v20) / (v56 - v18);
                  if (vabdd_f64(v56, v18) < 2.22044605e-16)
                    v58 = 1.79769313e308;
                  v59 += 2;
                }
                while (v26 >= v58);
                i = v59 - 3;
              }
            }
            else
            {
              for (i = a1 + 2; i < a2; i += 2)
              {
                v77 = *i;
                v76 = i[1];
                v78 = (v76 - v20) / (*i - v18);
                if (vabdd_f64(*i, v18) < 2.22044605e-16)
                  v78 = 1.79769313e308;
                if (v26 < v78 || v26 == v78 && (v17 < v77 || v17 == v77 && v19 < v76))
                  break;
              }
            }
LABEL_119:
            j = a2;
            if (i < a2)
            {
              for (j = v9; ; j -= 2)
              {
                v62 = (v53 - v20) / (v54 - v18);
                if (vabdd_f64(v54, v18) < 2.22044605e-16)
                  v62 = 1.79769313e308;
                if (v26 >= v62 && (v26 != v62 || v17 >= v54 && (v17 != v54 || v19 >= v53)))
                  break;
                v54 = *(j - 2);
                v53 = *(j - 1);
              }
            }
            if (i < j)
            {
              v63 = *i;
              v64 = *j;
              while (1)
              {
                v65 = *((_QWORD *)i + 1);
                *i = v64;
                i[1] = j[1];
                *j = v63;
                *((_QWORD *)j + 1) = v65;
                v66 = *a3;
                v67 = a3[1];
                if (vabdd_f64(v17, *a3) >= 2.22044605e-16)
                  v68 = (v19 - v67) / (v17 - *a3);
                else
                  v68 = 1.79769313e308;
                v63 = i[2];
                v70 = i[3];
                v69 = i + 2;
                if (vabdd_f64(v63, v66) >= 2.22044605e-16)
                  v71 = (v70 - v67) / (v63 - v66);
                else
                  v71 = 1.79769313e308;
                if (v68 < v71)
                {
                  i += 2;
                  goto LABEL_153;
                }
                v72 = i + 5;
                while (v68 != v71)
                {
LABEL_141:
                  v69 += 2;
                  v63 = *(v72 - 1);
                  v70 = *v72;
                  v71 = (*v72 - v67) / (v63 - v66);
                  if (vabdd_f64(v63, v66) < 2.22044605e-16)
                    v71 = 1.79769313e308;
                  v72 += 2;
                  if (v68 < v71)
                  {
LABEL_151:
                    i = v72 - 3;
                    goto LABEL_153;
                  }
                }
                if (v17 >= v63)
                  break;
                i = v69;
                do
                {
LABEL_153:
                  v64 = *(j - 2);
                  v74 = *(j - 1);
                  j -= 2;
                  v75 = (v74 - v67) / (v64 - v66);
                  if (vabdd_f64(v64, v66) < 2.22044605e-16)
                    v75 = 1.79769313e308;
                }
                while (v68 < v75 || v68 == v75 && (v17 < v64 || v17 == v64 && v19 < v74));
                if (i >= j)
                  goto LABEL_161;
              }
              if (v17 == v63 && v19 < v70)
                goto LABEL_151;
              goto LABEL_141;
            }
LABEL_161:
            if (i - 2 != a1)
            {
              *a1 = *(i - 2);
              a1[1] = *(i - 1);
            }
            a5 = 0;
            *(i - 2) = v17;
            *(i - 1) = v19;
            continue;
          }
          v19 = a1[1];
          v20 = a3[1];
          v21 = vabdd_f64(v17, v18);
          v22 = (v19 - v20) / (v17 - v18);
LABEL_21:
          if (v21 < 2.22044605e-16)
            v22 = 1.79769313e308;
          for (k = a1 + 2; ; k += 2)
          {
            v28 = *k;
            v29 = k[1];
            v30 = (v29 - v20) / (*k - v18);
            if (vabdd_f64(*k, v18) < 2.22044605e-16)
              v30 = 1.79769313e308;
            if (v30 >= v22 && (v30 != v22 || v28 >= v17 && (v28 != v17 || v29 >= v19)))
              break;
          }
          if (k - 2 == a1)
          {
            v34 = a2;
            if (k < a2)
            {
              v36 = *(a2 - 2);
              v37 = *(a2 - 1);
              v38 = (v37 - v20) / (v36 - v18);
              if (vabdd_f64(v36, v18) < 2.22044605e-16)
                v38 = 1.79769313e308;
              v34 = v9;
              if (v38 >= v22)
              {
                v34 = v9;
                do
                {
                  if (v38 == v22)
                  {
                    if (v36 < v17)
                      break;
                    v51 = v37 < v19 && v36 == v17;
                    if (v51 || k >= v34)
                      break;
                  }
                  else if (k >= v34)
                  {
                    break;
                  }
                  v36 = *(v34 - 2);
                  v37 = *(v34 - 1);
                  v34 -= 2;
                  v38 = (v37 - v20) / (v36 - v18);
                  if (vabdd_f64(v36, v18) < 2.22044605e-16)
                    v38 = 1.79769313e308;
                }
                while (v38 >= v22);
              }
            }
          }
          else
          {
            v31 = *(a2 - 2);
            v32 = *(a2 - 1);
            v33 = (v32 - v20) / (v31 - v18);
            if (vabdd_f64(v31, v18) < 2.22044605e-16)
              v33 = 1.79769313e308;
            v34 = v9;
            while (v33 >= v22)
            {
              if (v33 == v22)
              {
                if (v31 < v17)
                  break;
                if (v31 == v17 && v32 < v19)
                  break;
              }
              v31 = *(v34 - 2);
              v32 = *(v34 - 1);
              v34 -= 2;
              v33 = (v32 - v20) / (v31 - v18);
              if (vabdd_f64(v31, v18) < 2.22044605e-16)
                v33 = 1.79769313e308;
            }
          }
          i = k;
          if (k < v34)
          {
            v39 = *v34;
            i = k;
            v40 = v34;
            do
            {
              v41 = *((_QWORD *)i + 1);
              *i = v39;
              i[1] = v40[1];
              *v40 = v28;
              *((_QWORD *)v40 + 1) = v41;
              v42 = *a3;
              v43 = a3[1];
              v44 = 1.79769313e308;
              if (vabdd_f64(v17, *a3) >= 2.22044605e-16)
                v44 = (v19 - v43) / (v17 - *a3);
              do
              {
                v28 = i[2];
                v45 = i[3];
                i += 2;
                v46 = (v45 - v43) / (v28 - v42);
                if (vabdd_f64(v28, v42) < 2.22044605e-16)
                  v46 = 1.79769313e308;
              }
              while (v46 < v44 || v46 == v44 && (v28 < v17 || v28 == v17 && v45 < v19));
              while (1)
              {
                v39 = *(v40 - 2);
                v47 = *(v40 - 1);
                v40 -= 2;
                v48 = (v47 - v43) / (v39 - v42);
                if (vabdd_f64(v39, v42) < 2.22044605e-16)
                  v48 = 1.79769313e308;
                if (v48 < v44)
                  break;
                if (v48 == v44)
                {
                  if (v39 < v17)
                    break;
                  if (v39 == v17 && v47 < v19)
                    break;
                }
              }
            }
            while (i < v40);
          }
          if (i - 2 != a1)
          {
            *a1 = *(i - 2);
            a1[1] = *(i - 1);
          }
          *(i - 2) = v17;
          *(i - 1) = v19;
          if (k < v34)
            goto LABEL_80;
          v50 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::ConvexHull2<double>::getConvexHullPoints(std::vector<gm::Matrix<double,2,1>> const&,std::vector<gm::Matrix<double,2,1>>&)::{lambda(gm::Matrix<double,2,1> const&,gm::Matrix<double,2,1> const&)#1} &,gm::Matrix<double,2,1>*>(a1, i - 2, a3);
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::ConvexHull2<double>::getConvexHullPoints(std::vector<gm::Matrix<double,2,1>> const&,std::vector<gm::Matrix<double,2,1>>&)::{lambda(gm::Matrix<double,2,1> const&,gm::Matrix<double,2,1> const&)#1} &,gm::Matrix<double,2,1>*>(i, a2, a3))
          {
            if (v50)
              continue;
LABEL_80:
            std::__introsort<std::_ClassicAlgPolicy,geo::ConvexHull2<double>::getConvexHullPoints(std::vector<gm::Matrix<double,2,1>> const&,std::vector<gm::Matrix<double,2,1>>&)::{lambda(gm::Matrix<double,2,1> const&,gm::Matrix<double,2,1> const&)#1} &,gm::Matrix<double,2,1>*,false>(a1, i - 2, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          a2 = i - 2;
          if (v50)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          if (i != a2)
          {
            v89 = i + 2;
            if (i + 2 != a2)
            {
              v90 = 0;
              v91 = *a3;
              v92 = i;
              do
              {
                v94 = v92;
                v92 = v89;
                v95 = v94[2];
                v96 = v94[3];
                v97 = a3[1];
                v98 = v96 - v97;
                v99 = *v94;
                v100 = v94[1];
                v101 = v100 - v97;
                v102 = v98 / (v95 - v91);
                if (vabdd_f64(v95, v91) < 2.22044605e-16)
                  v102 = 1.79769313e308;
                v103 = v101 / (*v94 - v91);
                if (vabdd_f64(v99, v91) < 2.22044605e-16)
                  v103 = 1.79769313e308;
                if (v102 < v103 || v102 == v103 && (v95 < v99 || v95 == v99 && v96 < v100))
                {
                  v94[2] = v99;
                  v89[1] = v94[1];
                  v93 = i;
                  if (v94 != i)
                  {
                    v104 = v90;
                    while (1)
                    {
                      v105 = (double *)((char *)i + v104);
                      v106 = a3[1];
                      v107 = v96 - v106;
                      v108 = *(double *)((char *)i + v104 - 16);
                      v109 = *(double *)((char *)i + v104 - 8);
                      v110 = v109 - v106;
                      v111 = v107 / (v95 - *a3);
                      if (vabdd_f64(v95, *a3) < 2.22044605e-16)
                        v111 = 1.79769313e308;
                      v112 = v110 / (v108 - *a3);
                      v113 = vabdd_f64(v108, *a3) >= 2.22044605e-16 ? v112 : 1.79769313e308;
                      if (v111 >= v113)
                      {
                        if (v111 != v113)
                        {
                          v93 = (double *)((char *)i + v104);
                          goto LABEL_197;
                        }
                        if (v95 >= v108 && (v95 != v108 || v96 >= v109))
                          break;
                      }
                      v94 -= 2;
                      *v105 = v108;
                      v105[1] = v109;
                      v104 -= 16;
                      if (!v104)
                      {
                        v93 = i;
                        goto LABEL_197;
                      }
                    }
                    v93 = v94;
                  }
LABEL_197:
                  *v93 = v95;
                  v93[1] = v96;
                  v91 = *a3;
                }
                v89 = v92 + 2;
                v90 += 16;
              }
              while (v92 + 2 != a2);
            }
          }
        }
        else if (i != a2)
        {
          v153 = i + 2;
          if (i + 2 != a2)
          {
            v154 = *a3;
            do
            {
              v155 = a1;
              a1 = v153;
              v156 = v155[2];
              v157 = v155[3];
              v158 = a3[1];
              v159 = v157 - v158;
              v160 = *v155;
              v161 = v155[1];
              v162 = v161 - v158;
              v163 = v159 / (v156 - v154);
              if (vabdd_f64(v156, v154) < 2.22044605e-16)
                v163 = 1.79769313e308;
              v164 = v162 / (*v155 - v154);
              if (vabdd_f64(v160, v154) < 2.22044605e-16)
                v164 = 1.79769313e308;
              if (v163 < v164 || v163 == v164 && (v156 < v160 || v156 == v160 && v157 < v161))
              {
                do
                {
                  v165 = v155;
                  v166 = v160;
                  v167 = *(v155 - 2);
                  v155 -= 2;
                  v160 = v167;
                  v168 = *((_QWORD *)v155 + 3);
                  v155[4] = v166;
                  *((_QWORD *)v155 + 5) = v168;
                  v169 = a3[1];
                  v170 = v157 - v169;
                  v171 = v155[1];
                  v172 = v167 - *a3;
                  v173 = v171 - v169;
                  v174 = v170 / (v156 - *a3);
                  if (vabdd_f64(v156, *a3) < 2.22044605e-16)
                    v174 = 1.79769313e308;
                  v175 = v173 / v172;
                  if (vabdd_f64(v160, *a3) >= 2.22044605e-16)
                    v176 = v175;
                  else
                    v176 = 1.79769313e308;
                }
                while (v174 < v176 || v174 == v176 && (v156 < v160 || v156 == v160 && v157 < v171));
                *v165 = v156;
                v165[1] = v157;
                v154 = *a3;
              }
              v153 = a1 + 2;
            }
            while (a1 + 2 != a2);
          }
        }
        return;
    }
  }
}

  v7 = a2;
  v106 = a2 - 1;
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)v7 - (char *)v8;
    v10 = v7 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v52 = *v8;
        if (*v106 < *v8)
        {
          *v8 = 0;
          v53 = *v106;
          *v106 = 0;
          v54 = *v8;
          *v8 = v53;

          v55 = *v106;
          *v106 = v52;

        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(v8, v8 + 1, v106);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(v8, v8 + 1, v8 + 2, v106);
        return;
      case 5:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(v8, v8 + 1, v8 + 2, v8 + 3, v106);
        return;
      default:
        if (v9 <= 191)
        {
          v56 = v8 + 1;
          v58 = v8 == v7 || v56 == v7;
          if ((a4 & 1) != 0)
          {
            if (!v58)
            {
              v59 = 0;
              v60 = v8;
              do
              {
                v63 = *v60;
                v64 = v60[1];
                v60 = v56;
                if (v64 < v63)
                {
                  *v56 = 0;
                  v65 = v59;
                  do
                  {
                    v66 = (void **)((char *)a1 + v65);
                    v67 = *(void **)((char *)a1 + v65 + 8);
                    *v66 = 0;
                    v66[1] = v63;

                    if (!v65)
                    {
                      v61 = a1;
                      goto LABEL_68;
                    }
                    v63 = (void *)*(v66 - 1);
                    v65 -= 8;
                  }
                  while (v64 < v63);
                  v61 = (void **)((char *)a1 + v65 + 8);
LABEL_68:
                  v62 = *v61;
                  *v61 = v64;

                }
                v56 = v60 + 1;
                v59 += 8;
              }
              while (v60 + 1 != a2);
            }
          }
          else if (!v58)
          {
            do
            {
              v100 = *a1;
              v101 = a1[1];
              a1 = v56;
              if (v101 < v100)
              {
                *v56 = 0;
                v102 = v56;
                do
                {
                  v103 = v102;
                  *--v102 = 0;
                  v104 = *v103;
                  *v103 = v100;

                  v100 = *(v103 - 2);
                }
                while (v101 < v100);
                v105 = *v102;
                *v102 = v101;

              }
              v56 = a1 + 1;
            }
            while (a1 + 1 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 == v7)
            return;
          v68 = (unint64_t)(v10 - 2) >> 1;
          v69 = v68;
          do
          {
            v71 = v69;
            if (v68 >= v69)
            {
              v72 = (2 * v69) | 1;
              v73 = &a1[v72];
              if (2 * v71 + 2 >= v10)
              {
                v74 = *v73;
              }
              else
              {
                v74 = *v73;
                if (*v73 < v73[1])
                {
                  v74 = v73[1];
                  ++v73;
                  v72 = 2 * v71 + 2;
                }
              }
              v75 = &a1[v71];
              v76 = *v75;
              if (v74 >= *v75)
              {
                *v75 = 0;
                v77 = *v73;
                do
                {
                  v78 = v73;
                  *v73 = 0;
                  v79 = *v75;
                  *v75 = v77;

                  if (v68 < v72)
                    break;
                  v73 = &a1[(2 * v72) | 1];
                  if (2 * v72 + 2 < v10)
                  {
                    v77 = *v73;
                    if (*v73 >= v73[1])
                    {
                      v72 = (2 * v72) | 1;
                    }
                    else
                    {
                      v77 = v73[1];
                      ++v73;
                      v72 = 2 * v72 + 2;
                    }
                  }
                  else
                  {
                    v77 = *v73;
                    v72 = (2 * v72) | 1;
                  }
                  v75 = v78;
                }
                while (v77 >= v76);
                v70 = *v78;
                *v78 = v76;

              }
            }
            v69 = v71 - 1;
          }
          while (v71);
          v80 = (unint64_t)v9 >> 3;
          while (2)
          {
            if (v80 >= 2)
            {
              v83 = 0;
              v84 = *a1;
              *a1 = 0;
              v85 = a1;
              do
              {
                v87 = &v85[v83 + 1];
                if (2 * v83 + 2 < v80)
                {
                  v86 = *v87;
                  if (*v87 >= v85[v83 + 2])
                  {
                    v83 = (2 * v83) | 1;
                  }
                  else
                  {
                    v86 = v85[v83 + 2];
                    v87 = &v85[v83 + 2];
                    v83 = 2 * v83 + 2;
                  }
                }
                else
                {
                  v86 = *v87;
                  v83 = (2 * v83) | 1;
                }
                *v87 = 0;
                v88 = *v85;
                *v85 = v86;

                v85 = v87;
              }
              while (v83 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
              v89 = a2 - 1;
              if (v87 == a2 - 1)
              {
                v81 = *v87;
                *v87 = v84;
                goto LABEL_96;
              }
              v90 = *v89;
              *v89 = 0;
              v91 = *v87;
              *v87 = v90;

              v92 = *v89;
              *v89 = v84;

              v93 = (char *)v87 - (char *)a1 + 8;
              if (v93 >= 9)
              {
                v94 = (((unint64_t)v93 >> 3) - 2) >> 1;
                v95 = &a1[v94];
                v96 = *v87;
                if (*v95 < *v87)
                {
                  *v87 = 0;
                  v97 = *v95;
                  do
                  {
                    v98 = v95;
                    *v95 = 0;
                    v99 = *v87;
                    *v87 = v97;

                    if (!v94)
                      break;
                    v94 = (v94 - 1) >> 1;
                    v95 = &a1[v94];
                    v97 = *v95;
                    v87 = v98;
                  }
                  while (*v95 < v96);
                  v81 = *v98;
                  *v98 = v96;
LABEL_96:

                }
              }
            }
            --a2;
            if ((unint64_t)v80-- <= 2)
              return;
            continue;
          }
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(v12, v8, v106);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(v8, v12, v106);
          v13 = v11;
          v14 = &v8[v13];
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(v8 + 1, &v8[v13 - 1], a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(v8 + 2, &v8[v13 + 1], a2 - 3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(&v8[v13 - 1], v12, &v8[v13 + 1]);
          v15 = *v8;
          *v8 = 0;
          v16 = *v14;
          *v14 = 0;
          v17 = *v8;
          *v8 = v16;

          v18 = *v14;
          *v14 = v15;

        }
        --a3;
        v19 = *v8;
        if ((a4 & 1) == 0 && *(v8 - 1) >= v19)
        {
          *v8 = 0;
          if (v19 >= *v106)
          {
            v39 = v8 + 1;
            do
            {
              v8 = v39;
              if (v39 >= v7)
                break;
              ++v39;
            }
            while (v19 >= *v8);
          }
          else
          {
            do
            {
              v38 = v8[1];
              ++v8;
            }
            while (v19 >= v38);
          }
          v40 = v7;
          if (v8 < v7)
          {
            v40 = v7;
            do
              v41 = (unint64_t)*--v40;
            while ((unint64_t)v19 < v41);
          }
          if (v8 < v40)
          {
            v42 = *v8;
            do
            {
              *v8 = 0;
              v43 = *v40;
              *v40 = 0;
              v44 = *v8;
              *v8 = v43;

              v45 = *v40;
              *v40 = v42;

              do
              {
                v46 = v8[1];
                ++v8;
                v42 = v46;
              }
              while (v19 >= v46);
              do
                v47 = (unint64_t)*--v40;
              while ((unint64_t)v19 < v47);
            }
            while (v8 < v40);
          }
          v48 = v8 - 1;
          if (v8 - 1 != a1)
          {
            v49 = *v48;
            *v48 = 0;
            v50 = *a1;
            *a1 = v49;

          }
          v51 = *v48;
          *v48 = v19;

          a4 = 0;
          continue;
        }
        *v8 = 0;
        v20 = v8;
        do
        {
          v21 = v20;
          v23 = (unint64_t)v20[1];
          ++v20;
          v22 = (void *)v23;
        }
        while (v23 < (unint64_t)v19);
        if (v21 == a1)
        {
          v7 = a2;
          do
          {
            if (v20 >= v7)
              break;
            v25 = (unint64_t)*--v7;
          }
          while (v25 >= (unint64_t)v19);
        }
        else
        {
          do
            v24 = (unint64_t)*--v7;
          while (v24 >= (unint64_t)v19);
        }
        if (v20 < v7)
        {
          v26 = v20;
          v27 = v7;
          do
          {
            *v26 = 0;
            v28 = *v27;
            *v27 = 0;
            v29 = *v26;
            *v26 = v28;

            v30 = *v27;
            *v27 = v22;

            do
            {
              v21 = v26;
              v31 = (unint64_t)v26[1];
              ++v26;
              v22 = (void *)v31;
            }
            while (v31 < (unint64_t)v19);
            do
              v32 = (unint64_t)*--v27;
            while (v32 >= (unint64_t)v19);
          }
          while (v26 < v27);
        }
        if (v21 != a1)
        {
          v33 = *v21;
          *v21 = 0;
          v34 = *a1;
          *a1 = v33;

        }
        v35 = *v21;
        *v21 = v19;

        v36 = v20 >= v7;
        v7 = a2;
        if (!v36)
        {
LABEL_30:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,VKScreenLabelFeature * {__strong}*,false>(a1, v21, a3, a4 & 1);
          a4 = 0;
          v8 = v21 + 1;
          continue;
        }
        v37 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VKScreenLabelFeature * {__strong}*>(a1, v21);
        v8 = v21 + 1;
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VKScreenLabelFeature * {__strong}*>(v21 + 1, a2))
        {
          if (v37)
            continue;
          goto LABEL_30;
        }
        a2 = v21;
        if (!v37)
          goto LABEL_1;
        return;
    }
  }
}

  v6 = a2 - 1;
  v222 = a2;
  v216 = a2 - 3;
  v217 = a2 - 2;
  v218 = a2 - 1;
  while (2)
  {
    v7 = a1;
    v8 = (char *)v222 - (char *)a1;
    v9 = v222 - a1;
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v93 = *v6;
        v94 = *a1;
        v95 = objc_msgSend(v93, "routeOffset");
        v96 = objc_msgSend(v94, "routeOffset");
        if (v95 >= v96)
        {

          if ((_DWORD)v95 != (_DWORD)v96 || *((float *)&v95 + 1) >= *((float *)&v96 + 1))
            return;
        }
        else
        {

        }
        v196 = *a1;
        *a1 = 0;
        v197 = *v6;
        *v6 = 0;
        v198 = *a1;
        *a1 = v197;

        v199 = *v6;
        *v6 = v196;

        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*>(a1, a1 + 1, v6);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*>(a1, a1 + 1, a1 + 2, v6);
        return;
      case 5uLL:
        std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*,0>(a1, a1 + 1, a1 + 2, a1 + 3, v6);
        return;
      default:
        if (v8 <= 191)
        {
          v97 = a1 + 1;
          v98 = a1 == v222 || v97 == v222;
          v99 = v98;
          if ((a4 & 1) != 0)
          {
            if ((v99 & 1) != 0)
              return;
            v100 = 0;
            v101 = a1;
            while (1)
            {
              v104 = v97;
              v105 = v101[1];
              v106 = *v101;
              v107 = objc_msgSend(v105, "routeOffset");
              v108 = objc_msgSend(v106, "routeOffset");
              if (v107 >= v108)
              {

                if ((_DWORD)v107 != (_DWORD)v108 || *((float *)&v107 + 1) >= *((float *)&v108 + 1))
                  goto LABEL_134;
              }
              else
              {

              }
              v110 = *v101;
              v111 = v101[1];
              *v101 = 0;
              v101[1] = v110;
              v102 = a1;
              if (v101 == a1)
                goto LABEL_133;
              v112 = v100;
              while (1)
              {
                v115 = (id *)((char *)a1 + v112);
                v116 = *(id *)((char *)a1 + v112 - 8);
                v117 = objc_msgSend(v111, "routeOffset");
                v118 = objc_msgSend(v116, "routeOffset");
                if (v117 >= v118)
                  break;

LABEL_145:
                v113 = *(v115 - 1);
                v114 = *v115;
                *(v115 - 1) = 0;
                *v115 = v113;

                v112 -= 8;
                if (!v112)
                {
                  v102 = a1;
                  goto LABEL_133;
                }
              }

              if ((_DWORD)v117 == (_DWORD)v118 && *((float *)&v117 + 1) < *((float *)&v118 + 1))
                goto LABEL_145;
              v102 = (id *)((char *)a1 + v112);
LABEL_133:
              v103 = *v102;
              *v102 = v111;

LABEL_134:
              v97 = v104 + 1;
              v100 += 8;
              v101 = v104;
              if (v104 + 1 == v222)
                return;
            }
          }
          if ((v99 & 1) != 0)
            return;
LABEL_235:
          v200 = v97;
          v201 = v7[1];
          v202 = *v7;
          v203 = objc_msgSend(v201, "routeOffset");
          v204 = objc_msgSend(v202, "routeOffset");
          if (v203 >= v204)
          {

            if ((_DWORD)v203 != (_DWORD)v204 || *((float *)&v203 + 1) >= *((float *)&v204 + 1))
              goto LABEL_234;
          }
          else
          {

          }
          v206 = 0;
          v207 = *v200;
          *v200 = 0;
          for (i = v7; ; v7 = i)
          {
            v209 = *v7;
            *v7 = 0;
            v7[1] = v209;

            v210 = *--i;
            v211 = v210;
            v212 = objc_msgSend(v207, "routeOffset");
            v213 = objc_msgSend(v211, "routeOffset");
            if (v212 < v213)
            {

            }
            else
            {

              if ((_DWORD)v212 != (_DWORD)v213 || *((float *)&v212 + 1) >= *((float *)&v213 + 1))
              {
                v215 = *v7;
                *v7 = v207;

LABEL_234:
                v97 = v200 + 1;
                v7 = v200;
                if (v200 + 1 == v222)
                  return;
                goto LABEL_235;
              }
            }
            v206 = *v7;
          }
        }
        v225 = a1;
        if (!a3)
        {
          if (a1 == v222)
            return;
          v120 = (v9 - 2) >> 1;
          v227 = v120;
          while (1)
          {
            v122 = v120;
            if (v227 < v120)
              goto LABEL_157;
            v219 = v120;
            v123 = (2 * v120) | 1;
            v124 = &v225[v123];
            v125 = 2 * v120 + 2;
            if (v125 >= (uint64_t)v9)
              goto LABEL_168;
            v126 = *v124;
            v127 = v124[1];
            v128 = objc_msgSend(v126, "routeOffset");
            v129 = objc_msgSend(v127, "routeOffset");
            if (v128 >= v129)
            {

              if ((_DWORD)v128 != (_DWORD)v129 || *((float *)&v128 + 1) >= *((float *)&v129 + 1))
                goto LABEL_168;
            }
            else
            {

            }
            ++v124;
            v123 = v125;
LABEL_168:
            v122 = v219;
            v131 = &v225[v219];
            v132 = *v124;
            v121 = *v131;
            v133 = objc_msgSend(v132, "routeOffset");
            v134 = objc_msgSend(v121, "routeOffset");
            if (v133 < v134)
              goto LABEL_156;

            if ((_DWORD)v133 != (_DWORD)v134 || *((float *)&v133 + 1) >= *((float *)&v134 + 1))
            {
              v221 = *v131;
              *v131 = 0;
              while (1)
              {
                v136 = v124;
                v137 = *v124;
                *v124 = 0;
                v138 = *v131;
                *v131 = v137;

                if (v227 < v123)
                  goto LABEL_155;
                v139 = 2 * v123;
                v123 = (2 * v123) | 1;
                v124 = &v225[v123];
                v140 = v139 + 2;
                if (v139 + 2 < (uint64_t)v9)
                {
                  v141 = *v124;
                  v142 = v124[1];
                  v143 = objc_msgSend(v141, "routeOffset");
                  v144 = objc_msgSend(v142, "routeOffset");
                  if (v143 < v144)
                  {

LABEL_183:
                    ++v124;
                    v123 = v140;
                    goto LABEL_184;
                  }

                  if ((_DWORD)v143 == (_DWORD)v144 && *((float *)&v143 + 1) < *((float *)&v144 + 1))
                    goto LABEL_183;
                }
LABEL_184:
                v146 = *v124;
                v147 = v221;
                v148 = objc_msgSend(v146, "routeOffset");
                v149 = objc_msgSend(v147, "routeOffset");
                if (v148 < v149)
                {

LABEL_155:
                  v121 = *v136;
                  *v136 = v221;
                  v122 = v219;
LABEL_156:

                  break;
                }

                v150 = (_DWORD)v148 == (_DWORD)v149 && *((float *)&v148 + 1) < *((float *)&v149 + 1);
                v131 = v136;
                if (v150)
                  goto LABEL_155;
              }
            }
LABEL_157:
            v120 = v122 - 1;
            if (!v122)
            {
              v151 = (unint64_t)v8 >> 3;
              v152 = v222;
              v153 = v225;
              while (1)
              {
                v223 = v152;
                v156 = 0;
                v157 = *v153;
                *v153 = 0;
                v158 = (unint64_t)(v151 - 2) >> 1;
                v159 = v153;
                v228 = v151;
                do
                {
                  v162 = v159;
                  v159 += v156 + 1;
                  v163 = 2 * v156;
                  v156 = (2 * v156) | 1;
                  v164 = v163 + 2;
                  if (v163 + 2 < v151)
                  {
                    v165 = *v159;
                    v166 = v159[1];
                    v167 = objc_msgSend(v165, "routeOffset");
                    v168 = objc_msgSend(v166, "routeOffset");
                    if (v167 < v168)
                    {

                      v151 = v228;
LABEL_197:
                      ++v159;
                      v156 = v164;
                      goto LABEL_198;
                    }

                    v169 = (_DWORD)v167 == (_DWORD)v168 && *((float *)&v167 + 1) < *((float *)&v168 + 1);
                    v151 = v228;
                    if (v169)
                      goto LABEL_197;
                  }
LABEL_198:
                  v160 = *v159;
                  *v159 = 0;
                  v161 = *v162;
                  *v162 = v160;

                }
                while (v156 <= v158);
                v170 = v223 - 1;
                v98 = v159 == v223 - 1;
                v224 = v223 - 1;
                if (v98)
                {
                  v154 = *v159;
                  *v159 = v157;
                  v153 = v225;
LABEL_193:

                  goto LABEL_194;
                }
                v171 = *v170;
                *v170 = 0;
                v172 = *v159;
                *v159 = v171;

                v173 = *v170;
                *v170 = v157;

                v153 = v225;
                v174 = (char *)v159 - (char *)v225 + 8;
                if (v174 >= 9)
                {
                  v175 = ((unint64_t)v174 >> 3) - 2;
                  v176 = v175 >> 1;
                  v177 = &v225[v175 >> 1];
                  v178 = *v177;
                  v179 = *v159;
                  v180 = objc_msgSend(v178, "routeOffset");
                  v181 = objc_msgSend(v179, "routeOffset");
                  if (v180 < v181)
                  {

                    v151 = v228;
                    goto LABEL_215;
                  }

                  v182 = (_DWORD)v180 == (_DWORD)v181 && *((float *)&v180 + 1) < *((float *)&v181 + 1);
                  v151 = v228;
                  if (v182)
                  {
LABEL_215:
                    v183 = *v159;
                    *v159 = 0;
                    v184 = *v177;
                    *v177 = 0;
                    v185 = *v159;
                    *v159 = v184;

                    if (v175 >= 2)
                    {
                      while (1)
                      {
                        v188 = v176 - 1;
                        v176 = (v176 - 1) >> 1;
                        v189 = &v225[v176];
                        v190 = *v189;
                        v191 = v183;
                        v192 = objc_msgSend(v190, "routeOffset");
                        v193 = objc_msgSend(v191, "routeOffset");
                        if (v192 < v193)
                        {

                          v151 = v228;
                        }
                        else
                        {

                          v194 = (_DWORD)v192 == (_DWORD)v193 && *((float *)&v192 + 1) < *((float *)&v193 + 1);
                          v151 = v228;
                          if (!v194)
                            break;
                        }
                        v186 = *v189;
                        *v189 = 0;
                        v187 = *v177;
                        *v177 = v186;

                        v177 = &v225[v176];
                        if (v188 < 2)
                          goto LABEL_225;
                      }
                    }
                    v189 = v177;
LABEL_225:
                    v154 = *v189;
                    *v189 = v183;
                    goto LABEL_193;
                  }
                }
LABEL_194:
                v155 = v151-- <= 2;
                v152 = v224;
                if (v155)
                  return;
              }
            }
          }
        }
        v10 = v9 >> 1;
        if ((unint64_t)v8 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*>(&a1[v9 >> 1], a1, v6);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*>(a1, &a1[v9 >> 1], v6);
          v11 = v10;
          v12 = &a1[v10];
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*>(a1 + 1, v12 - 1, v217);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*>(a1 + 2, &a1[v11 + 1], v216);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*>(v12 - 1, &a1[v9 >> 1], &a1[v11 + 1]);
          v13 = *a1;
          *a1 = 0;
          v14 = *v12;
          *v12 = 0;
          v15 = *a1;
          *a1 = v14;

          v16 = *v12;
          *v12 = v13;

        }
        --a3;
        if ((a4 & 1) != 0)
          goto LABEL_13;
        v17 = *(a1 - 1);
        v18 = *a1;
        v19 = objc_msgSend(v17, "routeOffset");
        v20 = objc_msgSend(v18, "routeOffset");
        if (v19 >= v20)
        {

          if ((_DWORD)v19 == (_DWORD)v20 && *((float *)&v19 + 1) < *((float *)&v20 + 1))
            goto LABEL_13;
          v60 = *a1;
          *a1 = 0;
          v61 = *v6;
          v62 = objc_msgSend(v60, "routeOffset");
          v63 = objc_msgSend(v61, "routeOffset");
          if (v62 < v63)
          {

LABEL_67:
            ++a1;
            while (1)
            {
              v64 = *a1;
              v65 = objc_msgSend(v60, "routeOffset");
              v66 = objc_msgSend(v64, "routeOffset");
              if (v65 < v66)
                break;

              ++a1;
              if ((_DWORD)v65 == (_DWORD)v66 && *((float *)&v65 + 1) < *((float *)&v66 + 1))
              {
                --a1;
                goto LABEL_85;
              }
            }
LABEL_84:

            goto LABEL_85;
          }

          if ((_DWORD)v62 == (_DWORD)v63 && *((float *)&v62 + 1) < *((float *)&v63 + 1))
            goto LABEL_67;
          v68 = a1 + 1;
          do
          {
            a1 = v68;
            if (v68 >= v222)
              break;
            v64 = *v68;
            v69 = objc_msgSend(v60, "routeOffset");
            v70 = objc_msgSend(v64, "routeOffset");
            if (v69 < v70)
              goto LABEL_84;

            v68 = a1 + 1;
          }
          while ((_DWORD)v69 != (_DWORD)v70 || *((float *)&v69 + 1) >= *((float *)&v70 + 1));
LABEL_85:
          j = v222;
          if (a1 < v222)
          {
            for (j = v6; ; --j)
            {
              v73 = *j;
              v74 = objc_msgSend(v60, "routeOffset");
              v75 = objc_msgSend(v73, "routeOffset");
              if (v74 < v75)
              {

              }
              else
              {

                if ((_DWORD)v74 != (_DWORD)v75 || *((float *)&v74 + 1) >= *((float *)&v75 + 1))
                  break;
              }
            }
          }
LABEL_94:
          if (a1 < j)
          {
            v77 = *a1;
            *a1 = 0;
            v78 = *j;
            *j = 0;
            v79 = *a1;
            *a1++ = v78;

            v80 = *j;
            *j = v77;

            do
            {
              v81 = *a1;
              v82 = objc_msgSend(v60, "routeOffset");
              v83 = objc_msgSend(v81, "routeOffset");
              if (v82 < v83)
                goto LABEL_110;

              ++a1;
            }
            while ((_DWORD)v82 != (_DWORD)v83 || *((float *)&v82 + 1) >= *((float *)&v83 + 1));
            --a1;
            while (1)
            {
              v85 = j - 1;
              while (1)
              {
                j = v85;
                v81 = *v85;
                v86 = objc_msgSend(v60, "routeOffset");
                v87 = objc_msgSend(v81, "routeOffset");
                if (v86 < v87)
                  break;

                v85 = j - 1;
                if ((_DWORD)v86 != (_DWORD)v87 || *((float *)&v86 + 1) >= *((float *)&v87 + 1))
                  goto LABEL_94;
              }
LABEL_110:

            }
          }
          v89 = a1 - 1;
          if (a1 - 1 != v7)
          {
            v90 = *v89;
            *v89 = 0;
            v91 = *v7;
            *v7 = v90;

          }
          v92 = *v89;
          *v89 = v60;

          a4 = 0;
          continue;
        }

LABEL_13:
        v21 = *a1;
        *a1 = 0;
        v22 = a1 + 1;
        while (2)
        {
          v24 = v22 - 1;
          v23 = *v22;
          v25 = v21;
          v26 = objc_msgSend(v23, "routeOffset");
          v27 = objc_msgSend(v25, "routeOffset");
          if (v26 < v27)
          {

LABEL_15:
            ++v22;
            continue;
          }
          break;
        }

        if ((_DWORD)v26 == (_DWORD)v27 && *((float *)&v26 + 1) < *((float *)&v27 + 1))
          goto LABEL_15;
        v226 = a3;
        v29 = v6;
        if (v24 == a1)
        {
          v29 = v6;
          do
          {
            if (v22 >= v29 + 1)
            {
              ++v29;
              goto LABEL_56;
            }
            v35 = *v29;
            v36 = v25;
            v37 = objc_msgSend(v35, "routeOffset");
            v38 = objc_msgSend(v36, "routeOffset");
            if (v37 < v38)
              goto LABEL_36;

            --v29;
          }
          while ((_DWORD)v37 != (_DWORD)v38 || *((float *)&v37 + 1) >= *((float *)&v38 + 1));
LABEL_34:
          if (v22 < ++v29)
            goto LABEL_39;
        }
        else
        {
          while (1)
          {
            v30 = *v29;
            v31 = v25;
            v32 = objc_msgSend(v30, "routeOffset");
            v33 = objc_msgSend(v31, "routeOffset");
            if (v32 < v33)
              break;

            --v29;
            if ((_DWORD)v32 == (_DWORD)v33 && *((float *)&v32 + 1) < *((float *)&v33 + 1))
              goto LABEL_34;
          }
LABEL_36:

          if (v22 < v29)
          {
LABEL_39:
            v39 = v22;
            v40 = v29;
            do
            {
LABEL_41:
              v41 = *v39;
              *v39 = 0;
              v42 = *v40;
              *v40 = 0;
              v43 = *v39;
              *v39 = v42;

              v44 = *v40;
              *v40 = v41;
LABEL_42:

              v45 = v39 + 1;
              do
              {
                v39 = v45;
                v46 = *v45;
                v44 = v25;
                v47 = objc_msgSend(v46, "routeOffset");
                v48 = objc_msgSend(v44, "routeOffset");
                if (v47 < v48)
                  goto LABEL_42;

                v45 = v39 + 1;
              }
              while ((_DWORD)v47 == (_DWORD)v48 && *((float *)&v47 + 1) < *((float *)&v48 + 1));
              v24 = v39 - 1;
              --v40;
              do
              {
                v50 = *v40;
                v51 = v44;
                v52 = objc_msgSend(v50, "routeOffset");
                v53 = objc_msgSend(v51, "routeOffset");
                if (v52 < v53)
                {

                  if (v39 >= v40)
                    goto LABEL_56;
                  goto LABEL_41;
                }

                --v40;
              }
              while ((_DWORD)v52 != (_DWORD)v53 || *((float *)&v52 + 1) >= *((float *)&v53 + 1));
              ++v40;
            }
            while (v39 < v40);
          }
        }
LABEL_56:
        if (v24 != v225)
        {
          v55 = *v24;
          *v24 = 0;
          v56 = *v225;
          *v225 = v55;

        }
        v57 = *v24;
        *v24 = v25;

        v58 = v22 >= v29;
        v6 = v218;
        a3 = v226;
        if (!v58)
        {
LABEL_62:
          std::__introsort<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*,false>(v225, v24, v226, a4 & 1);
          a4 = 0;
          a1 = v24 + 1;
          continue;
        }
        v59 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*>(v225, v24);
        a1 = v24 + 1;
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationSupport::setTrafficFeatures(NSArray *)::$_0 &,VKTrafficFeature * {__strong}*>(v24 + 1, v222))
        {
          if (v59)
            continue;
          goto LABEL_62;
        }
        a2 = v24;
        a1 = v225;
        if (!v59)
          goto LABEL_1;
        return;
    }
  }
}

  j = a1;
  while (2)
  {
    a1 = j;
    v9 = a2 - j;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - j) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v69 = *(unsigned __int8 *)(a2 - 23);
        v70 = *(unsigned __int8 *)(j + 1);
        if (v69 == v70)
        {
          v71 = *(_DWORD *)(a2 - 20);
          v72 = *(_DWORD *)(j + 4);
          if (v71 == v72)
          {
            if (*(_DWORD *)(a2 - 16) >= *(_DWORD *)(j + 8))
              return;
          }
          else if (v71 >= v72)
          {
            return;
          }
        }
        else if (v69 >= v70)
        {
          return;
        }
        v165 = *(_BYTE *)j;
        v166 = *(_QWORD *)(j + 4);
        v167 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(j + 16) = *(_QWORD *)(a2 - 8);
        *(_OWORD *)j = v167;
        *(_BYTE *)(a2 - 24) = v165;
        *(_BYTE *)(a2 - 23) = v70;
        *(_QWORD *)(a2 - 20) = v166;
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>((char *)j, (__int128 *)(j + 24), (__int128 *)(a2 - 24));
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>(j, (char *)(j + 24), (char *)(j + 48), (__int128 *)(a2 - 24));
        return;
      case 5:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>(j, (__int128 *)(j + 24), (__int128 *)(j + 48), (char *)(j + 72), (__int128 *)(a2 - 24));
        return;
      default:
        if (v9 <= 575)
        {
          v73 = j + 24;
          v75 = j == a2 || v73 == a2;
          if ((a4 & 1) != 0)
          {
            if (v75)
              return;
            v76 = 0;
            v77 = j;
            while (1)
            {
              v79 = v77;
              v77 = v73;
              v80 = *(unsigned __int8 *)(v73 + 1);
              v81 = *(unsigned __int8 *)(v79 + 1);
              if (v80 == v81)
              {
                v82 = *(_DWORD *)(v77 + 4);
                v83 = *(_DWORD *)(v79 + 4);
                if (v82 == v83)
                {
                  if (*(_DWORD *)(v77 + 8) >= *(_DWORD *)(v79 + 8))
                    goto LABEL_140;
                }
                else if (v82 >= v83)
                {
                  goto LABEL_140;
                }
              }
              else if (v80 >= v81)
              {
                goto LABEL_140;
              }
              v84 = *(unsigned __int8 *)(v79 + 25);
              v85 = *(_BYTE *)v77;
              v86 = *(_QWORD *)(v79 + 28);
              for (i = v76; ; i -= 24)
              {
                v88 = j + i;
                *(_OWORD *)(v88 + 24) = *(_OWORD *)(j + i);
                *(_QWORD *)(v88 + 40) = *(_QWORD *)(j + i + 16);
                if (!i)
                {
                  v78 = j;
                  goto LABEL_139;
                }
                v89 = *(unsigned __int8 *)(v88 - 23);
                if (v84 == v89)
                  break;
                if (v84 >= v89)
                  goto LABEL_157;
LABEL_151:
                ;
              }
              v90 = *(_DWORD *)(j + i - 20);
              v91 = (int)v86 < v90;
              if ((_DWORD)v86 == v90)
                v91 = SHIDWORD(v86) < *(_DWORD *)(j + i - 16);
              if (v91)
                goto LABEL_151;
LABEL_157:
              v78 = j + i;
LABEL_139:
              *(_BYTE *)v78 = v85;
              *(_BYTE *)(v78 + 1) = v84;
              *(_WORD *)(v78 + 2) = v168;
              *(_QWORD *)(v78 + 4) = v86;
              *(_QWORD *)(v78 + 12) = v169;
              *(_DWORD *)(v78 + 20) = v170;
LABEL_140:
              v73 = v77 + 24;
              v76 += 24;
              if (v77 + 24 == a2)
                return;
            }
          }
          if (v75)
            return;
          while (1)
          {
            v154 = a1;
            a1 = v73;
            v155 = *(unsigned __int8 *)(v73 + 1);
            v156 = *(unsigned __int8 *)(v154 + 1);
            if (v155 == v156)
            {
              v157 = *(_DWORD *)(a1 + 4);
              v158 = *(_DWORD *)(v154 + 4);
              if (v157 == v158)
              {
                if (*(_DWORD *)(a1 + 8) >= *(_DWORD *)(v154 + 8))
                  goto LABEL_242;
              }
              else if (v157 >= v158)
              {
                goto LABEL_242;
              }
            }
            else if (v155 >= v156)
            {
              goto LABEL_242;
            }
            v159 = *(unsigned __int8 *)(v154 + 25);
            v160 = *(_BYTE *)a1;
            v161 = *(_QWORD *)(v154 + 28);
            do
            {
              while (1)
              {
                while (1)
                {
                  v162 = v154;
                  *(_OWORD *)(v154 + 24) = *(_OWORD *)v154;
                  *(_QWORD *)(v154 + 40) = *(_QWORD *)(v154 + 16);
                  v154 -= 24;
                  v163 = *(unsigned __int8 *)(v162 - 23);
                  if (v159 == v163)
                    break;
                  if (v159 >= v163)
                    goto LABEL_241;
                }
                v164 = *(_DWORD *)(v162 - 20);
                if ((_DWORD)v161 != v164)
                  break;
                if (SHIDWORD(v161) >= *(_DWORD *)(v162 - 16))
                  goto LABEL_241;
              }
            }
            while ((int)v161 < v164);
LABEL_241:
            *(_BYTE *)v162 = v160;
            *(_BYTE *)(v162 + 1) = v159;
            *(_WORD *)(v162 + 2) = v168;
            *(_QWORD *)(v162 + 4) = v161;
            *(_QWORD *)(v162 + 12) = v169;
            *(_DWORD *)(v162 + 20) = v170;
LABEL_242:
            v73 = a1 + 24;
            if (a1 + 24 == a2)
              return;
          }
        }
        if (!a3)
        {
          if (j == a2)
            return;
          v92 = (unint64_t)(v10 - 2) >> 1;
          v93 = v92;
          while (1)
          {
            v94 = v93;
            if (v92 >= v93)
            {
              v95 = (2 * v93) | 1;
              v96 = j + 24 * v95;
              if (2 * v94 + 2 < v10)
              {
                v97 = *(unsigned __int8 *)(j + 24 * v95 + 1);
                v98 = *(unsigned __int8 *)(v96 + 25);
                if (v97 == v98)
                {
                  v99 = *(_DWORD *)(j + 24 * v95 + 4);
                  v100 = *(_DWORD *)(v96 + 28);
                  v101 = v99 < v100;
                  if (v99 == v100)
                    v101 = *(_DWORD *)(j + 24 * v95 + 8) < *(_DWORD *)(v96 + 32);
                  v102 = v101;
                }
                else
                {
                  v102 = v97 < v98;
                }
                v96 += 24 * v102;
                if (v102)
                  v95 = 2 * v94 + 2;
              }
              v103 = *(unsigned __int8 *)(v96 + 1);
              v104 = *(unsigned __int8 *)(j + 24 * v94 + 1);
              if (v103 == v104)
              {
                v105 = *(_DWORD *)(v96 + 4);
                v106 = *(_DWORD *)(j + 24 * v94 + 4);
                if (v105 == v106)
                {
                  if (*(_DWORD *)(v96 + 8) >= *(_DWORD *)(j + 24 * v94 + 8))
                    goto LABEL_180;
                }
                else if (v105 >= v106)
                {
LABEL_180:
                  v107 = j + 24 * v94;
                  v108 = *(_BYTE *)v107;
                  v109 = *(_QWORD *)(v107 + 4);
                  while (1)
                  {
                    v110 = v96;
                    v111 = *(_OWORD *)v96;
                    *(_QWORD *)(v107 + 16) = *(_QWORD *)(v96 + 16);
                    *(_OWORD *)v107 = v111;
                    if (v92 < v95)
                      break;
                    v112 = (2 * v95) | 1;
                    v96 = j + 24 * v112;
                    v95 = 2 * v95 + 2;
                    if (v95 >= v10)
                    {
                      v95 = v112;
                    }
                    else
                    {
                      v113 = *(unsigned __int8 *)(j + 24 * v112 + 1);
                      v114 = *(unsigned __int8 *)(v96 + 25);
                      if (v113 == v114)
                      {
                        v115 = *(_DWORD *)(j + 24 * v112 + 4);
                        v116 = *(_DWORD *)(v96 + 28);
                        v117 = v115 < v116;
                        if (v115 == v116)
                          v117 = *(_DWORD *)(j + 24 * v112 + 8) < *(_DWORD *)(v96 + 32);
                        v118 = v117;
                      }
                      else
                      {
                        v118 = v113 < v114;
                      }
                      v96 += 24 * v118;
                      if (!v118)
                        v95 = v112;
                    }
                    v119 = *(unsigned __int8 *)(v96 + 1);
                    v120 = v119 >= v104;
                    if (v119 == v104)
                    {
                      v121 = *(_DWORD *)(v96 + 4);
                      v122 = v121 < (int)v109;
                      if (v121 == (_DWORD)v109)
                      {
                        v107 = v110;
                        if (*(_DWORD *)(v96 + 8) < SHIDWORD(v109))
                          break;
                      }
                      else
                      {
                        v107 = v110;
                        if (v122)
                          break;
                      }
                    }
                    else
                    {
                      v107 = v110;
                      if (!v120)
                        break;
                    }
                  }
                  *(_BYTE *)v110 = v108;
                  *(_BYTE *)(v110 + 1) = v104;
                  *(_WORD *)(v110 + 2) = v168;
                  *(_QWORD *)(v110 + 4) = v109;
                  *(_QWORD *)(v110 + 12) = v169;
                  *(_DWORD *)(v110 + 20) = v170;
                }
              }
              else if (v103 >= v104)
              {
                goto LABEL_180;
              }
            }
            v93 = v94 - 1;
            if (!v94)
            {
              v123 = v9 / 0x18uLL;
              while (1)
              {
                if (v123 >= 2)
                {
                  v124 = 0;
                  v125 = *(_BYTE *)(j + 1);
                  v126 = *(_DWORD *)(j + 4);
                  v127 = *(_DWORD *)(j + 8);
                  v128 = j;
                  v129 = *(_BYTE *)j;
                  do
                  {
                    v134 = v124 + 1;
                    v131 = v128 + 24 * (v124 + 1);
                    v132 = (2 * v124) | 1;
                    v135 = 2 * v124 + 2;
                    if (v135 < v123)
                    {
                      v136 = *(unsigned __int8 *)(v128 + 24 * v134 + 1);
                      v137 = *(unsigned __int8 *)(v131 + 25);
                      if (v136 == v137)
                      {
                        v138 = *(_DWORD *)(v128 + 24 * v134 + 4);
                        v139 = *(_DWORD *)(v131 + 28);
                        v140 = v138 < v139;
                        if (v138 == v139)
                          v140 = *(_DWORD *)(v128 + 24 * v134 + 8) < *(_DWORD *)(v131 + 32);
                        v130 = v140;
                      }
                      else
                      {
                        v130 = v136 < v137;
                      }
                      v131 += 24 * v130;
                      if (v130)
                        v132 = v135;
                    }
                    v133 = *(_OWORD *)v131;
                    *(_QWORD *)(v128 + 16) = *(_QWORD *)(v131 + 16);
                    *(_OWORD *)v128 = v133;
                    v128 = v131;
                    v124 = v132;
                  }
                  while (v132 <= (uint64_t)((unint64_t)(v123 - 2) >> 1));
                  if (v131 == a2 - 24)
                  {
                    *(_BYTE *)v131 = v129;
                    *(_BYTE *)(v131 + 1) = v125;
                    *(_DWORD *)(v131 + 4) = v126;
                    *(_DWORD *)(v131 + 8) = v127;
                    *(_QWORD *)(v131 + 12) = v169;
                    *(_DWORD *)(v131 + 20) = v170;
                  }
                  else
                  {
                    v141 = *(_OWORD *)(a2 - 24);
                    *(_QWORD *)(v131 + 16) = *(_QWORD *)(a2 - 8);
                    *(_OWORD *)v131 = v141;
                    *(_BYTE *)(a2 - 24) = v129;
                    *(_BYTE *)(a2 - 23) = v125;
                    *(_DWORD *)(a2 - 20) = v126;
                    *(_DWORD *)(a2 - 16) = v127;
                    v142 = v131 - j + 24;
                    if (v142 >= 25)
                    {
                      v143 = (v142 / 0x18uLL - 2) >> 1;
                      v144 = *(unsigned __int8 *)(j + 24 * v143 + 1);
                      v145 = *(unsigned __int8 *)(v131 + 1);
                      if (v144 == v145)
                      {
                        v146 = *(_DWORD *)(j + 24 * v143 + 4);
                        v147 = *(_DWORD *)(v131 + 4);
                        if (v146 == v147)
                        {
                          if (*(_DWORD *)(j + 24 * v143 + 8) >= *(_DWORD *)(v131 + 8))
                            goto LABEL_204;
                        }
                        else if (v146 >= v147)
                        {
                          goto LABEL_204;
                        }
                      }
                      else if (v144 >= v145)
                      {
                        goto LABEL_204;
                      }
                      v148 = *(_BYTE *)v131;
                      v149 = *(_QWORD *)(v131 + 4);
                      while (1)
                      {
                        v150 = v131;
                        v131 = j + 24 * v143;
                        v151 = *(_OWORD *)v131;
                        *(_QWORD *)(v150 + 16) = *(_QWORD *)(v131 + 16);
                        *(_OWORD *)v150 = v151;
                        if (!v143)
                          break;
                        v143 = (v143 - 1) >> 1;
                        v152 = *(unsigned __int8 *)(j + 24 * v143 + 1);
                        if (v152 == v145)
                        {
                          v153 = *(_DWORD *)(j + 24 * v143 + 4);
                          if (v153 == (_DWORD)v149)
                          {
                            if (*(_DWORD *)(j + 24 * v143 + 8) >= SHIDWORD(v149))
                              break;
                          }
                          else if (v153 >= (int)v149)
                          {
                            break;
                          }
                        }
                        else if (v152 >= v145)
                        {
                          break;
                        }
                      }
                      *(_BYTE *)v131 = v148;
                      *(_BYTE *)(v131 + 1) = v145;
                      *(_WORD *)(v131 + 2) = v168;
                      *(_QWORD *)(v131 + 4) = v149;
                      *(_DWORD *)(v131 + 20) = v170;
                      *(_QWORD *)(v131 + 12) = v169;
                    }
                  }
                }
LABEL_204:
                a2 -= 24;
                v28 = (unint64_t)v123-- > 2;
                if (!v28)
                  return;
              }
            }
          }
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = j + 24 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0xC01)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>((char *)(a1 + 24 * v11), (__int128 *)a1, (__int128 *)(a2 - 24));
          --a3;
          if ((a4 & 1) != 0)
          {
LABEL_12:
            v19 = *(unsigned __int8 *)(a1 + 1);
            goto LABEL_16;
          }
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>((char *)a1, (__int128 *)(a1 + 24 * v11), (__int128 *)(a2 - 24));
          v13 = 24 * v11;
          v14 = (__int128 *)(24 * v11 + a1 - 24);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>((char *)(a1 + 24), v14, (__int128 *)(a2 - 48));
          v15 = (__int128 *)(a1 + 24 + v13);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>((char *)(a1 + 48), v15, (__int128 *)(a2 - 72));
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>((char *)v14, (__int128 *)v12, v15);
          v16 = *(_WORD *)a1;
          v17 = *(_QWORD *)(a1 + 4);
          v18 = *(_OWORD *)v12;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v12 + 16);
          *(_OWORD *)a1 = v18;
          *(_WORD *)v12 = v16;
          *(_QWORD *)(v12 + 4) = v17;
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_12;
        }
        v19 = *(unsigned __int8 *)(a1 - 23);
        v20 = *(unsigned __int8 *)(a1 + 1);
        if (v19 == v20)
        {
          v21 = *(_DWORD *)(a1 - 20);
          v22 = *(_DWORD *)(a1 + 4);
          if (v21 == v22)
          {
            if (*(_DWORD *)(a1 - 16) < *(_DWORD *)(a1 + 8))
              goto LABEL_16;
          }
          else if (v21 < v22)
          {
            goto LABEL_16;
          }
          goto LABEL_66;
        }
        if (v19 >= v20)
        {
LABEL_66:
          v48 = *(_QWORD *)(a1 + 4);
          v49 = *(unsigned __int8 *)(a2 - 23);
          if (v20 == v49)
          {
            v50 = *(_DWORD *)(a2 - 20);
            if ((_DWORD)v48 == v50)
            {
              if (SHIDWORD(v48) < *(_DWORD *)(a2 - 16))
                goto LABEL_71;
            }
            else if ((int)v48 < v50)
            {
LABEL_71:
              for (j = a1 + 24; ; j += 24)
              {
                v51 = *(unsigned __int8 *)(j + 1);
                if (v20 == v51)
                {
                  v52 = *(_DWORD *)(j + 4);
                  v53 = (int)v48 < v52;
                  if ((_DWORD)v48 == v52)
                    v53 = SHIDWORD(v48) < *(_DWORD *)(j + 8);
                  if (v53)
                    goto LABEL_89;
                }
                else if (v20 < v51)
                {
                  goto LABEL_89;
                }
              }
            }
          }
          else if (v20 < v49)
          {
            goto LABEL_71;
          }
          for (j = a1 + 24; j < a2; j += 24)
          {
            v54 = *(unsigned __int8 *)(j + 1);
            if (v20 == v54)
            {
              v55 = *(_DWORD *)(j + 4);
              v56 = (int)v48 < v55;
              if ((_DWORD)v48 == v55)
                v56 = SHIDWORD(v48) < *(_DWORD *)(j + 8);
              if (v56)
                break;
            }
            else if (v20 < v54)
            {
              break;
            }
          }
LABEL_89:
          v57 = *(_BYTE *)a1;
          v58 = (_DWORD *)a2;
          if (j >= a2)
            goto LABEL_98;
          v59 = (_DWORD *)(a2 - 20);
          while (v20 != v49)
          {
            if (v20 >= v49)
              goto LABEL_97;
LABEL_92:
            v49 = *((unsigned __int8 *)v59 - 27);
            v59 -= 6;
          }
          v60 = (int)v48 < *v59;
          if ((_DWORD)v48 == *v59)
            v60 = SHIDWORD(v48) < v59[1];
          if (v60)
            goto LABEL_92;
LABEL_97:
          v58 = v59 - 1;
LABEL_98:
          while (j < (unint64_t)v58)
          {
            v61 = *(_WORD *)j;
            v62 = *(_QWORD *)(j + 4);
            v63 = *(_OWORD *)v58;
            *(_QWORD *)(j + 16) = *((_QWORD *)v58 + 2);
            *(_OWORD *)j = v63;
            *(_WORD *)v58 = v61;
            *(_QWORD *)(v58 + 1) = v62;
            do
            {
              while (1)
              {
                while (1)
                {
                  j += 24;
                  v64 = *(unsigned __int8 *)(j + 1);
                  if (v20 == v64)
                    break;
                  if (v20 < v64)
                    goto LABEL_110;
                }
                v65 = *(_DWORD *)(j + 4);
                if ((_DWORD)v48 != v65)
                  break;
                if (SHIDWORD(v48) < *(_DWORD *)(j + 8))
                  goto LABEL_110;
              }
            }
            while ((int)v48 >= v65);
            do
            {
              while (1)
              {
LABEL_110:
                while (1)
                {
                  v58 -= 6;
                  v66 = *((unsigned __int8 *)v58 + 1);
                  if (v20 == v66)
                    break;
                  if (v20 >= v66)
                    goto LABEL_100;
                }
                v67 = v58[1];
                if ((_DWORD)v48 != v67)
                  break;
                if (SHIDWORD(v48) >= v58[2])
                  goto LABEL_100;
              }
            }
            while ((int)v48 < v67);
LABEL_100:
            ;
          }
          if (j - 24 != a1)
          {
            v68 = *(_OWORD *)(j - 24);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(j - 8);
            *(_OWORD *)a1 = v68;
          }
          a4 = 0;
          *(_BYTE *)(j - 24) = v57;
          *(_BYTE *)(j - 23) = v20;
          *(_WORD *)(j - 22) = v168;
          *(_QWORD *)(j - 20) = v48;
          *(_DWORD *)(j - 4) = v170;
          *(_QWORD *)(j - 12) = v169;
          continue;
        }
        v19 = *(unsigned __int8 *)(a1 + 1);
LABEL_16:
        v23 = *(_BYTE *)a1;
        v24 = *(_QWORD *)(a1 + 4);
        v25 = a1 + 24;
        while (2)
        {
          v26 = *(unsigned __int8 *)(v25 + 1);
          if (v26 != v19)
          {
            if (v26 >= v19)
              goto LABEL_24;
LABEL_19:
            v25 += 24;
            continue;
          }
          break;
        }
        v27 = *(_DWORD *)(v25 + 4);
        v28 = v27 < (int)v24;
        if (v27 == (_DWORD)v24)
          v28 = *(_DWORD *)(v25 + 8) < SHIDWORD(v24);
        if (v28)
          goto LABEL_19;
LABEL_24:
        v29 = v25 - 24;
        k = a2 - 24;
        if (v25 - 24 != a1)
        {
          while (1)
          {
            v31 = *(unsigned __int8 *)(k + 1);
            if (v31 == v19)
            {
              v32 = *(_DWORD *)(k + 4);
              v33 = v32 < (int)v24;
              if (v32 == (_DWORD)v24)
                v33 = *(_DWORD *)(k + 8) < SHIDWORD(v24);
              if (v33)
                goto LABEL_42;
            }
            else if (v31 < v19)
            {
              goto LABEL_42;
            }
            k -= 24;
          }
        }
        for (k = a2 - 24; v25 < k + 24; k -= 24)
        {
          v34 = *(unsigned __int8 *)(k + 1);
          if (v34 == v19)
          {
            v35 = *(_DWORD *)(k + 4);
            v36 = v35 < (int)v24;
            if (v35 == (_DWORD)v24)
              v36 = *(_DWORD *)(k + 8) < SHIDWORD(v24);
            if (v36)
              goto LABEL_42;
          }
          else if (v34 < v19)
          {
            goto LABEL_42;
          }
        }
        k += 24;
LABEL_42:
        if (v25 < k)
        {
          v37 = v25;
          v38 = k;
          do
          {
            v39 = *(_WORD *)v37;
            v40 = *(_QWORD *)(v37 + 4);
            v41 = *(_OWORD *)v38;
            *(_QWORD *)(v37 + 16) = *(_QWORD *)(v38 + 16);
            *(_OWORD *)v37 = v41;
            *(_WORD *)v38 = v39;
            *(_QWORD *)(v38 + 4) = v40;
            do
            {
              while (1)
              {
                while (1)
                {
                  v37 += 24;
                  v42 = *(unsigned __int8 *)(v37 + 1);
                  if (v42 == v19)
                    break;
                  if (v42 >= v19)
                    goto LABEL_52;
                }
                v43 = *(_DWORD *)(v37 + 4);
                if (v43 != (_DWORD)v24)
                  break;
                if (*(_DWORD *)(v37 + 8) >= SHIDWORD(v24))
                  goto LABEL_52;
              }
            }
            while (v43 < (int)v24);
LABEL_52:
            v29 = v37 - 24;
            do
            {
              while (1)
              {
                while (1)
                {
                  v38 -= 24;
                  v44 = *(unsigned __int8 *)(v38 + 1);
                  if (v44 == v19)
                    break;
                  if (v44 < v19)
                    goto LABEL_44;
                }
                v45 = *(_DWORD *)(v38 + 4);
                if (v45 != (_DWORD)v24)
                  break;
                if (*(_DWORD *)(v38 + 8) < SHIDWORD(v24))
                  goto LABEL_44;
              }
            }
            while (v45 >= (int)v24);
LABEL_44:
            ;
          }
          while (v37 < v38);
        }
        if (v29 != a1)
        {
          v46 = *(_OWORD *)v29;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v29 + 16);
          *(_OWORD *)a1 = v46;
        }
        *(_BYTE *)v29 = v23;
        *(_BYTE *)(v29 + 1) = v19;
        *(_WORD *)(v29 + 2) = v168;
        *(_QWORD *)(v29 + 4) = v24;
        *(_QWORD *)(v29 + 12) = v169;
        *(_DWORD *)(v29 + 20) = v170;
        if (v25 < k)
        {
LABEL_65:
          std::__introsort<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *,false>(a1, v29, a3, a4 & 1);
          a4 = 0;
          j = v29 + 24;
          continue;
        }
        v47 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>(a1, v29);
        j = v29 + 24;
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,QuadTileCompare &,geo::QuadTile *>(v29 + 24, a2))
        {
          if (v47)
            continue;
          goto LABEL_65;
        }
        a2 = v29;
        if (!v47)
          goto LABEL_1;
        return;
    }
  }
}

  v7 = a2 - 2;
  v241 = a2 - 3;
  v242 = a2 - 1;
  v240 = a2 - 5;
  v8 = a1;
  v244 = a2;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = v9 >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v130 = *a1;
        if (*(unsigned __int8 *)(*v7 + 62) < *(unsigned __int8 *)(*a1 + 62))
        {
          *a1 = *v7;
          *v7 = v130;
          v131 = a1[1];
          a1[1] = *v242;
          *v242 = v131;
        }
        return;
      case 3:
        v132 = a1[2];
        v133 = *a1;
        v134 = *(unsigned __int8 *)(v132 + 62);
        v135 = *(unsigned __int8 *)(*a1 + 62);
        v136 = *v7;
        v137 = *(unsigned __int8 *)(*v7 + 62);
        if (v134 >= v135)
        {
          if (v137 >= v134)
            return;
          a1[2] = v136;
          *v7 = v132;
          v221 = a1[3];
          a1[3] = *v242;
          *v242 = v221;
          v222 = a1[2];
          v223 = *a1;
          if (*(unsigned __int8 *)(v222 + 62) >= *(unsigned __int8 *)(*a1 + 62))
            return;
          *a1 = v222;
          a1[2] = v223;
          v138 = a1 + 1;
          v242 = a1 + 3;
        }
        else
        {
          if (v137 >= v134)
          {
            v138 = a1 + 3;
            v237 = a1[3];
            v238 = a1[1];
            *a1 = v132;
            a1[1] = v237;
            a1[2] = v133;
            a1[3] = v238;
            if (*(unsigned __int8 *)(*v7 + 62) >= v135)
              return;
            a1[2] = *v7;
          }
          else
          {
            v138 = a1 + 1;
            *a1 = v136;
          }
          *v7 = v133;
        }
        v239 = *v138;
        *v138 = *v242;
        *v242 = v239;
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitNodeFeature::addNode(std::shared_ptr<md::TransitNode> const&)::$_0 &,std::shared_ptr<md::TransitNode>*>(a1, a1 + 2, a1 + 4, v7);
        return;
      case 5:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitNodeFeature::addNode(std::shared_ptr<md::TransitNode> const&)::$_0 &,std::shared_ptr<md::TransitNode>*>(a1, a1 + 2, a1 + 4, a1 + 6);
        v139 = a1[6];
        if (*(unsigned __int8 *)(*v7 + 62) < *(unsigned __int8 *)(v139 + 62))
        {
          a1[6] = *v7;
          *v7 = v139;
          v140 = a1[7];
          a1[7] = *v242;
          *v242 = v140;
          v141 = a1[6];
          v142 = a1[4];
          v143 = *(unsigned __int8 *)(v141 + 62);
          if (v143 < *(unsigned __int8 *)(v142 + 62))
          {
            v144 = a1[5];
            v145 = a1[7];
            a1[4] = v141;
            a1[5] = v145;
            a1[6] = v142;
            a1[7] = v144;
            v146 = a1[2];
            if (v143 < *(unsigned __int8 *)(v146 + 62))
            {
              v147 = a1[3];
              a1[2] = v141;
              a1[3] = v145;
              a1[4] = v146;
              a1[5] = v147;
              v148 = *a1;
              if (v143 < *(unsigned __int8 *)(*a1 + 62))
              {
                v149 = a1[1];
                *a1 = v141;
                a1[1] = v145;
                a1[2] = v148;
                a1[3] = v149;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 383)
        {
          v150 = a1 + 2;
          v152 = a1 == a2 || v150 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v152)
            {
              v153 = a1;
              do
              {
                v154 = v153;
                v153 = v150;
                v155 = v154[2];
                v156 = *v154;
                if (*(unsigned __int8 *)(v155 + 62) < *(unsigned __int8 *)(*v154 + 62))
                {
                  v157 = v154[3];
                  v158 = v153;
                  *v153 = 0;
                  v153[1] = 0;
                  while (1)
                  {
                    v159 = v158;
                    v158 = v154;
                    v160 = v154[1];
                    *v158 = 0;
                    v158[1] = 0;
                    v161 = (std::__shared_weak_count *)v159[1];
                    *v159 = v156;
                    v159[1] = v160;
                    if (v161)
                    {
                      p_shared_owners = (unint64_t *)&v161->__shared_owners_;
                      do
                        v163 = __ldaxr(p_shared_owners);
                      while (__stlxr(v163 - 1, p_shared_owners));
                      if (!v163)
                      {
                        ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                        std::__shared_weak_count::__release_weak(v161);
                      }
                    }
                    if (v158 == a1)
                      break;
                    v154 = v158 - 2;
                    v156 = *(v158 - 2);
                    if (*(unsigned __int8 *)(v155 + 62) >= *(unsigned __int8 *)(v156 + 62))
                      goto LABEL_156;
                  }
                  v158 = a1;
LABEL_156:
                  v164 = (std::__shared_weak_count *)v158[1];
                  *v158 = v155;
                  v158[1] = v157;
                  if (v164)
                  {
                    v165 = (unint64_t *)&v164->__shared_owners_;
                    do
                      v166 = __ldaxr(v165);
                    while (__stlxr(v166 - 1, v165));
                    if (!v166)
                    {
                      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                      std::__shared_weak_count::__release_weak(v164);
                    }
                  }
                }
                v150 = v153 + 2;
              }
              while (v153 + 2 != v244);
            }
          }
          else if (!v152)
          {
            do
            {
              v224 = a1;
              a1 = v150;
              v225 = v224[2];
              v226 = *v224;
              if (*(unsigned __int8 *)(v225 + 62) < *(unsigned __int8 *)(*v224 + 62))
              {
                v227 = v224[3];
                v228 = a1;
                *a1 = 0;
                a1[1] = 0;
                do
                {
                  v229 = v228;
                  v228 = v224;
                  v230 = v224[1];
                  *v228 = 0;
                  v228[1] = 0;
                  v231 = (std::__shared_weak_count *)v229[1];
                  *v229 = v226;
                  v229[1] = v230;
                  if (v231)
                  {
                    v232 = (unint64_t *)&v231->__shared_owners_;
                    do
                      v233 = __ldaxr(v232);
                    while (__stlxr(v233 - 1, v232));
                    if (!v233)
                    {
                      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                      std::__shared_weak_count::__release_weak(v231);
                    }
                  }
                  v224 = v228 - 2;
                  v226 = *(v228 - 2);
                }
                while (*(unsigned __int8 *)(v225 + 62) < *(unsigned __int8 *)(v226 + 62));
                v234 = (std::__shared_weak_count *)v228[1];
                *v228 = v225;
                v228[1] = v227;
                a2 = v244;
                if (v234)
                {
                  v235 = (unint64_t *)&v234->__shared_owners_;
                  do
                    v236 = __ldaxr(v235);
                  while (__stlxr(v236 - 1, v235));
                  if (!v236)
                  {
                    ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                    std::__shared_weak_count::__release_weak(v234);
                  }
                }
              }
              v150 = a1 + 2;
            }
            while (a1 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 == a2)
            return;
          v167 = (unint64_t)(v10 - 2) >> 1;
          v168 = v167;
          do
          {
            v169 = v168;
            if (v167 >= v168)
            {
              v170 = (2 * v168) | 1;
              v171 = &a1[2 * v170];
              if (2 * v169 + 2 >= v10)
              {
                v172 = *v171;
              }
              else
              {
                v172 = *v171;
                if (*(unsigned __int8 *)(*v171 + 62) < *(unsigned __int8 *)(v171[2] + 62))
                {
                  v172 = v171[2];
                  v171 += 2;
                  v170 = 2 * v169 + 2;
                }
              }
              v173 = &a1[2 * v169];
              v174 = *v173;
              if (*(unsigned __int8 *)(v172 + 62) >= *(unsigned __int8 *)(*v173 + 62))
              {
                v175 = a1[2 * v169 + 1];
                *v173 = 0;
                v173[1] = 0;
                v176 = *v171;
                do
                {
                  v177 = v171;
                  v178 = v171[1];
                  *v177 = 0;
                  v177[1] = 0;
                  v179 = (std::__shared_weak_count *)v173[1];
                  *v173 = v176;
                  v173[1] = v178;
                  if (v179)
                  {
                    v180 = (unint64_t *)&v179->__shared_owners_;
                    do
                      v181 = __ldaxr(v180);
                    while (__stlxr(v181 - 1, v180));
                    if (!v181)
                    {
                      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                      std::__shared_weak_count::__release_weak(v179);
                    }
                  }
                  if (v167 < v170)
                    break;
                  v171 = &a1[2 * ((2 * v170) | 1)];
                  if (2 * v170 + 2 < v10)
                  {
                    v176 = *v171;
                    if (*(unsigned __int8 *)(*v171 + 62) >= *(unsigned __int8 *)(v171[2] + 62))
                    {
                      v170 = (2 * v170) | 1;
                    }
                    else
                    {
                      v176 = v171[2];
                      v171 += 2;
                      v170 = 2 * v170 + 2;
                    }
                  }
                  else
                  {
                    v176 = *v171;
                    v170 = (2 * v170) | 1;
                  }
                  v173 = v177;
                }
                while (*(unsigned __int8 *)(v176 + 62) >= *(unsigned __int8 *)(v174 + 62));
                v182 = (std::__shared_weak_count *)v177[1];
                *v177 = v174;
                v177[1] = v175;
                if (v182)
                {
                  v183 = (unint64_t *)&v182->__shared_owners_;
                  do
                    v184 = __ldaxr(v183);
                  while (__stlxr(v184 - 1, v183));
                  if (!v184)
                  {
                    ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                    std::__shared_weak_count::__release_weak(v182);
                  }
                }
              }
            }
            v168 = v169 - 1;
          }
          while (v169);
          v185 = (unint64_t)v9 >> 4;
          v186 = v244;
          while (2)
          {
            v188 = 0;
            v190 = *a1;
            v189 = a1[1];
            *a1 = 0;
            a1[1] = 0;
            v191 = a1;
            do
            {
              v192 = v191;
              v191 += 2 * v188 + 2;
              if (2 * v188 + 2 >= v185)
              {
                v193 = *v191;
                v188 = (2 * v188) | 1;
              }
              else
              {
                v193 = *v191;
                if (*(unsigned __int8 *)(*v191 + 62) >= *(unsigned __int8 *)(v191[2] + 62))
                {
                  v188 = (2 * v188) | 1;
                }
                else
                {
                  v193 = v191[2];
                  v191 += 2;
                  v188 = 2 * v188 + 2;
                }
              }
              v194 = v191[1];
              *v191 = 0;
              v191[1] = 0;
              v195 = (std::__shared_weak_count *)v192[1];
              *v192 = v193;
              v192[1] = v194;
              if (v195)
              {
                v196 = (unint64_t *)&v195->__shared_owners_;
                do
                  v197 = __ldaxr(v196);
                while (__stlxr(v197 - 1, v196));
                if (!v197)
                {
                  ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                  std::__shared_weak_count::__release_weak(v195);
                }
              }
            }
            while (v188 <= (uint64_t)((unint64_t)(v185 - 2) >> 1));
            v198 = v186 - 2;
            if (v191 == v186 - 2)
            {
              v217 = (std::__shared_weak_count *)v191[1];
              *v191 = v190;
              v191[1] = v189;
              if (v217)
              {
                v220 = (unint64_t *)&v217->__shared_owners_;
                do
                  v219 = __ldaxr(v220);
                while (__stlxr(v219 - 1, v220));
                goto LABEL_231;
              }
            }
            else
            {
              v199 = *((_OWORD *)v186 - 1);
              *v198 = 0;
              *(v186 - 1) = 0;
              v200 = (std::__shared_weak_count *)v191[1];
              *(_OWORD *)v191 = v199;
              if (v200)
              {
                v201 = (unint64_t *)&v200->__shared_owners_;
                do
                  v202 = __ldaxr(v201);
                while (__stlxr(v202 - 1, v201));
                if (!v202)
                {
                  ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                  std::__shared_weak_count::__release_weak(v200);
                }
              }
              v203 = (std::__shared_weak_count *)*(v186 - 1);
              *(v186 - 2) = v190;
              *(v186 - 1) = v189;
              if (v203)
              {
                v204 = (unint64_t *)&v203->__shared_owners_;
                do
                  v205 = __ldaxr(v204);
                while (__stlxr(v205 - 1, v204));
                if (!v205)
                {
                  ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                  std::__shared_weak_count::__release_weak(v203);
                }
              }
              v206 = (char *)(v191 + 2) - (char *)a1;
              if (v206 >= 17)
              {
                v207 = (((unint64_t)v206 >> 4) - 2) >> 1;
                v208 = &a1[2 * v207];
                v209 = *v191;
                if (*(unsigned __int8 *)(*v208 + 62) < *(unsigned __int8 *)(*v191 + 62))
                {
                  v210 = v191[1];
                  *v191 = 0;
                  v191[1] = 0;
                  v211 = *v208;
                  do
                  {
                    v212 = v208;
                    v213 = v208[1];
                    *v212 = 0;
                    v212[1] = 0;
                    v214 = (std::__shared_weak_count *)v191[1];
                    *v191 = v211;
                    v191[1] = v213;
                    if (v214)
                    {
                      v215 = (unint64_t *)&v214->__shared_owners_;
                      do
                        v216 = __ldaxr(v215);
                      while (__stlxr(v216 - 1, v215));
                      if (!v216)
                      {
                        ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                        std::__shared_weak_count::__release_weak(v214);
                      }
                    }
                    if (!v207)
                      break;
                    v207 = (v207 - 1) >> 1;
                    v208 = &a1[2 * v207];
                    v211 = *v208;
                    v191 = v212;
                  }
                  while (*(unsigned __int8 *)(*v208 + 62) < *(unsigned __int8 *)(v209 + 62));
                  v217 = (std::__shared_weak_count *)v212[1];
                  *v212 = v209;
                  v212[1] = v210;
                  if (v217)
                  {
                    v218 = (unint64_t *)&v217->__shared_owners_;
                    do
                      v219 = __ldaxr(v218);
                    while (__stlxr(v219 - 1, v218));
LABEL_231:
                    if (!v219)
                    {
                      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
                      std::__shared_weak_count::__release_weak(v217);
                    }
                  }
                }
              }
            }
            v187 = v185-- <= 2;
            v186 = v198;
            if (v187)
              return;
            continue;
          }
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &a1[2 * ((unint64_t)v10 >> 1)];
        v13 = *v7;
        v14 = *(unsigned __int8 *)(*v7 + 62);
        if ((unint64_t)v9 >= 0x801)
        {
          v15 = *v12;
          v16 = *a1;
          v17 = *(unsigned __int8 *)(*v12 + 62);
          v18 = *(unsigned __int8 *)(*a1 + 62);
          if (v17 >= v18)
          {
            if (v14 < v17)
            {
              *v12 = v13;
              *v7 = v15;
              v25 = &a1[2 * v11];
              v27 = v25[1];
              v26 = v25 + 1;
              *v26 = *v242;
              *v242 = v27;
              v28 = *a1;
              if (*(unsigned __int8 *)(*v12 + 62) < *(unsigned __int8 *)(*a1 + 62))
              {
                *a1 = *v12;
                v19 = a1 + 1;
                *v12 = v28;
                goto LABEL_21;
              }
            }
          }
          else
          {
            if (v14 < v17)
            {
              v19 = a1 + 1;
              *a1 = v13;
              goto LABEL_20;
            }
            *a1 = v15;
            *v12 = v16;
            v32 = a1[1];
            v19 = &a1[2 * v11 + 1];
            a1[1] = *v19;
            *v19 = v32;
            if (*(unsigned __int8 *)(*v7 + 62) < v18)
            {
              *v12 = *v7;
LABEL_20:
              *v7 = v16;
              v26 = v242;
LABEL_21:
              v33 = *v19;
              *v19 = *v26;
              *v26 = v33;
            }
          }
          v34 = v11 - 1;
          v35 = &a1[2 * v11 - 2];
          v36 = *v35;
          v37 = a1[2];
          v38 = *(unsigned __int8 *)(*v35 + 62);
          v39 = *(unsigned __int8 *)(v37 + 62);
          v40 = *(a2 - 4);
          v41 = *(unsigned __int8 *)(v40 + 62);
          if (v38 >= v39)
          {
            if (v41 < v38)
            {
              *v35 = v40;
              *(a2 - 4) = v36;
              v43 = &a1[2 * v34];
              v45 = v43[1];
              v44 = v43 + 1;
              *v44 = *(a2 - 3);
              *(a2 - 3) = v45;
              v46 = a1[2];
              if (*(unsigned __int8 *)(*v35 + 62) < *(unsigned __int8 *)(v46 + 62))
              {
                a1[2] = *v35;
                *v35 = v46;
                v42 = a1 + 3;
                goto LABEL_34;
              }
            }
          }
          else
          {
            if (v41 < v38)
            {
              v42 = a1 + 3;
              a1[2] = v40;
              goto LABEL_33;
            }
            v48 = &a1[2 * v34];
            v49 = v48[1];
            v42 = v48 + 1;
            v50 = a1[3];
            a1[2] = v36;
            a1[3] = v49;
            *v35 = v37;
            *v42 = v50;
            v51 = *(a2 - 4);
            if (*(unsigned __int8 *)(v51 + 62) < v39)
            {
              *v35 = v51;
LABEL_33:
              *(a2 - 4) = v37;
              v44 = v241;
LABEL_34:
              v52 = *v42;
              *v42 = *v44;
              *v44 = v52;
            }
          }
          v53 = v11 + 1;
          v54 = &a1[2 * v11 + 2];
          v55 = *v54;
          v56 = a1[4];
          v57 = *(unsigned __int8 *)(*v54 + 62);
          v58 = *(unsigned __int8 *)(v56 + 62);
          v59 = *(a2 - 6);
          v60 = *(unsigned __int8 *)(v59 + 62);
          if (v57 >= v58)
          {
            if (v60 < v57)
            {
              *v54 = v59;
              *(a2 - 6) = v55;
              v62 = &a1[2 * v53];
              v64 = v62[1];
              v63 = v62 + 1;
              *v63 = *(a2 - 5);
              *(a2 - 5) = v64;
              v55 = *v54;
              v65 = a1[4];
              if (*(unsigned __int8 *)(*v54 + 62) < *(unsigned __int8 *)(v65 + 62))
              {
                a1[4] = v55;
                *v54 = v65;
                v61 = a1 + 5;
                goto LABEL_44;
              }
            }
          }
          else
          {
            if (v60 < v57)
            {
              v61 = a1 + 5;
              a1[4] = v59;
              goto LABEL_43;
            }
            v66 = &a1[2 * v53];
            v67 = v66[1];
            v61 = v66 + 1;
            v68 = a1[5];
            a1[4] = v55;
            a1[5] = v67;
            *v54 = v56;
            *v61 = v68;
            v69 = *(a2 - 6);
            if (*(unsigned __int8 *)(v69 + 62) >= v58)
            {
              v55 = v56;
            }
            else
            {
              *v54 = v69;
LABEL_43:
              *(a2 - 6) = v56;
              v63 = v240;
LABEL_44:
              v70 = *v61;
              *v61 = *v63;
              *v63 = v70;
              v55 = *v54;
            }
          }
          v71 = *v12;
          v72 = *v35;
          v73 = *(unsigned __int8 *)(*v12 + 62);
          v74 = *(unsigned __int8 *)(*v35 + 62);
          v75 = *(unsigned __int8 *)(v55 + 62);
          if (v73 >= v74)
          {
            if (v75 < v73)
            {
              *v12 = v55;
              v78 = &a1[2 * v11];
              v79 = v78[1];
              v77 = v78 + 1;
              *v54 = v71;
              v80 = &a1[2 * v53];
              *v77 = v80[1];
              v80[1] = v79;
              if (v75 < v74)
              {
                *v35 = v55;
                *v12 = v72;
                v76 = &a1[2 * v34 + 1];
                goto LABEL_53;
              }
              v71 = v55;
            }
          }
          else
          {
            v76 = &a1[2 * v34 + 1];
            if (v75 < v73)
            {
              *v35 = v55;
              *v54 = v72;
              v77 = &a1[2 * v53 + 1];
              goto LABEL_53;
            }
            *v35 = v71;
            *v12 = v72;
            v81 = &a1[2 * v11];
            v83 = v81[1];
            v82 = v81 + 1;
            v84 = *v76;
            *v76 = v83;
            *v82 = v84;
            if (v75 >= v74)
            {
              v71 = v72;
            }
            else
            {
              *v12 = v55;
              *v54 = v72;
              v77 = &a1[2 * v53 + 1];
              v76 = v82;
LABEL_53:
              v85 = *v76;
              *v76 = *v77;
              *v77 = v85;
              v71 = *v12;
            }
          }
          v86 = *a1;
          *a1 = v71;
          v24 = a1 + 1;
          *v12 = v86;
          v29 = &a1[2 * v11 + 1];
LABEL_55:
          v87 = *v24;
          *v24 = *v29;
          *v29 = v87;
          v20 = *a1;
          goto LABEL_56;
        }
        v20 = *a1;
        v21 = *v12;
        v22 = *(unsigned __int8 *)(*a1 + 62);
        v23 = *(unsigned __int8 *)(*v12 + 62);
        if (v22 >= v23)
        {
          if (v14 < v22)
          {
            *a1 = v13;
            *v7 = v20;
            v29 = a1 + 1;
            v30 = a1[1];
            a1[1] = *v242;
            *v242 = v30;
            v20 = *a1;
            v31 = *v12;
            if (*(unsigned __int8 *)(*a1 + 62) < *(unsigned __int8 *)(*v12 + 62))
            {
              *v12 = v20;
              *a1 = v31;
              v24 = &a1[2 * v11 + 1];
              goto LABEL_55;
            }
          }
        }
        else
        {
          v24 = &a1[2 * v11 + 1];
          if (v14 < v22)
          {
            *v12 = v13;
            *v7 = v21;
LABEL_30:
            v29 = v242;
            goto LABEL_55;
          }
          *v12 = v20;
          *a1 = v21;
          v47 = *v24;
          *v24 = a1[1];
          a1[1] = v47;
          if (*(unsigned __int8 *)(*v7 + 62) < v23)
          {
            *a1 = *v7;
            *v7 = v21;
            v24 = a1 + 1;
            goto LABEL_30;
          }
          v20 = v21;
        }
LABEL_56:
        --a3;
        if ((a4 & 1) == 0 && *(unsigned __int8 *)(*(a1 - 2) + 62) >= *(unsigned __int8 *)(v20 + 62))
        {
          v111 = a1[1];
          *a1 = 0;
          a1[1] = 0;
          v112 = *(unsigned __int8 *)(v20 + 62);
          if (v112 >= *(unsigned __int8 *)(*v7 + 62))
          {
            v114 = a1 + 2;
            do
            {
              v8 = v114;
              if (v114 >= a2)
                break;
              v114 += 2;
            }
            while (v112 >= *(unsigned __int8 *)(*v8 + 62));
          }
          else
          {
            v8 = a1;
            do
            {
              v113 = v8[2];
              v8 += 2;
            }
            while (v112 >= *(unsigned __int8 *)(v113 + 62));
          }
          v115 = a2;
          if (v8 < a2)
          {
            v115 = a2;
            do
            {
              v116 = *(v115 - 2);
              v115 -= 2;
            }
            while (v112 < *(unsigned __int8 *)(v116 + 62));
          }
          if (v8 < v115)
          {
            v117 = *v8;
            v118 = *v115;
            do
            {
              *v8 = v118;
              *v115 = v117;
              v119 = v8[1];
              v8[1] = v115[1];
              v115[1] = v119;
              do
              {
                v120 = v8[2];
                v8 += 2;
                v117 = v120;
              }
              while (v112 >= *(unsigned __int8 *)(v120 + 62));
              do
              {
                v121 = *(v115 - 2);
                v115 -= 2;
                v118 = v121;
              }
              while (v112 < *(unsigned __int8 *)(v121 + 62));
            }
            while (v8 < v115);
          }
          v122 = v8 - 2;
          if (v8 - 2 != a1)
          {
            v123 = *(_OWORD *)v122;
            *v122 = 0;
            *(v8 - 1) = 0;
            v124 = (std::__shared_weak_count *)a1[1];
            *(_OWORD *)a1 = v123;
            if (v124)
            {
              v125 = (unint64_t *)&v124->__shared_owners_;
              do
                v126 = __ldaxr(v125);
              while (__stlxr(v126 - 1, v125));
              if (!v126)
              {
                ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                std::__shared_weak_count::__release_weak(v124);
              }
            }
          }
          a4 = 0;
          v127 = (std::__shared_weak_count *)*(v8 - 1);
          *(v8 - 2) = v20;
          *(v8 - 1) = v111;
          if (v127)
          {
            v128 = (unint64_t *)&v127->__shared_owners_;
            do
              v129 = __ldaxr(v128);
            while (__stlxr(v129 - 1, v128));
            a4 = 0;
            if (!v129)
            {
              ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
              std::__shared_weak_count::__release_weak(v127);
              a4 = 0;
            }
          }
          continue;
        }
        v88 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        v89 = *(unsigned __int8 *)(v20 + 62);
        v90 = a1;
        do
        {
          v91 = v90;
          v93 = v90[2];
          v90 += 2;
          v92 = v93;
        }
        while (*(unsigned __int8 *)(v93 + 62) < v89);
        if (v91 == a1)
        {
          a2 = v244;
          do
          {
            if (v90 >= a2)
              break;
            v95 = *(a2 - 2);
            a2 -= 2;
          }
          while (*(unsigned __int8 *)(v95 + 62) >= v89);
        }
        else
        {
          do
          {
            v94 = *(a2 - 2);
            a2 -= 2;
          }
          while (*(unsigned __int8 *)(v94 + 62) >= v89);
        }
        if (v90 >= a2)
        {
          v8 = v90;
        }
        else
        {
          v96 = *a2;
          v8 = v90;
          v97 = a2;
          do
          {
            *v8 = v96;
            *v97 = v92;
            v98 = v8[1];
            v8[1] = v97[1];
            v97[1] = v98;
            do
            {
              v99 = v8[2];
              v8 += 2;
              v92 = v99;
            }
            while (*(unsigned __int8 *)(v99 + 62) < v89);
            do
            {
              v100 = *(v97 - 2);
              v97 -= 2;
              v96 = v100;
            }
            while (*(unsigned __int8 *)(v100 + 62) >= v89);
          }
          while (v8 < v97);
        }
        v101 = v8 - 2;
        if (v8 - 2 != a1)
        {
          v102 = *(_OWORD *)v101;
          *v101 = 0;
          *(v8 - 1) = 0;
          v103 = (std::__shared_weak_count *)a1[1];
          *(_OWORD *)a1 = v102;
          if (v103)
          {
            v104 = (unint64_t *)&v103->__shared_owners_;
            do
              v105 = __ldaxr(v104);
            while (__stlxr(v105 - 1, v104));
            if (!v105)
            {
              ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
              std::__shared_weak_count::__release_weak(v103);
            }
          }
        }
        v106 = (std::__shared_weak_count *)*(v8 - 1);
        *(v8 - 2) = v20;
        *(v8 - 1) = v88;
        if (v106)
        {
          v107 = (unint64_t *)&v106->__shared_owners_;
          do
            v108 = __ldaxr(v107);
          while (__stlxr(v108 - 1, v107));
          if (!v108)
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
        }
        v109 = v90 >= a2;
        a2 = v244;
        if (!v109)
        {
LABEL_89:
          std::__introsort<std::_ClassicAlgPolicy,md::TransitNodeFeature::addNode(std::shared_ptr<md::TransitNode> const&)::$_0 &,std::shared_ptr<md::TransitNode>*,false>(a1, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v110 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitNodeFeature::addNode(std::shared_ptr<md::TransitNode> const&)::$_0 &,std::shared_ptr<md::TransitNode>*>(a1, v8 - 2);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitNodeFeature::addNode(std::shared_ptr<md::TransitNode> const&)::$_0 &,std::shared_ptr<md::TransitNode>*>(v8, v244))
        {
          if (v110)
            continue;
          goto LABEL_89;
        }
        a2 = v8 - 2;
        if (!v110)
          goto LABEL_1;
        return;
    }
  }
}

  v286 = a2 - 3;
  v283 = a2 - 9;
  v284 = a2 - 6;
  v7 = a1;
  v288 = a2;
  while (2)
  {
    a1 = v7;
    v8 = (uint64_t)a2 - v7;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v7) >> 4);
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()((uint64_t)v286, a1))
        {
          std::swap[abi:nn180100]<md::RouteRangeAnnotationRequest>((__int128 *)a1, v286);
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0 &,md::RouteRangeAnnotationRequest*>((__int128 *)a1, (__int128 *)(a1 + 48), v286);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0 &,md::RouteRangeAnnotationRequest*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), v286);
        return;
      case 5uLL:
        std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0 &,md::RouteRangeAnnotationRequest*,0>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), (__int128 *)(a1 + 144), v286);
        return;
      default:
        if (v8 <= 1151)
        {
          if ((a4 & 1) != 0)
          {
            if ((__int128 *)a1 == a2)
              return;
            v114 = a1 + 48;
            if ((__int128 *)(a1 + 48) == a2)
              return;
            v115 = 0;
            v116 = a1;
LABEL_107:
            v118 = (__int128 *)v114;
            if (!md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()(v114, v116))goto LABEL_106;
            v119 = *v118;
            *(_QWORD *)v118 = 0;
            *(_QWORD *)(v116 + 56) = 0;
            v296 = v119;
            v120 = *(uint64_t **)(v116 + 64);
            v298 = *(_OWORD *)(v116 + 72);
            v121 = *(void **)(v116 + 88);
            v297 = v120;
            v299 = v121;
            if (v121)
            {
              *(_QWORD *)(v298 + 16) = &v298;
              *(_QWORD *)(v116 + 64) = v116 + 72;
              *(_QWORD *)(v116 + 72) = 0;
              *(_QWORD *)(v116 + 88) = 0;
            }
            else
            {
              v297 = (uint64_t *)&v298;
            }
            v122 = 0;
            for (i = v115; ; i -= 48)
            {
              v124 = (void **)(a1 + i);
              v125 = *(void **)(a1 + i);
              *v124 = 0;
              v124[6] = v125;

              v126 = *(void **)(a1 + i + 8);
              v124[1] = 0;
              v127 = *(void **)(a1 + i + 56);
              v124[7] = v126;

              v128 = (uint64_t *)(a1 + i + 72);
              std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)(v124 + 8), (uint64_t)v124[9]);
              v124[8] = v124[2];
              v129 = (uint64_t *)(a1 + i + 24);
              v130 = *v129;
              *v128 = *v129;
              v131 = *(void **)(a1 + i + 40);
              v124[11] = v131;
              if (v131)
              {
                *(_QWORD *)(v130 + 16) = v128;
                v124[2] = v129;
                *v129 = 0;
                v124[5] = 0;
                if (!i)
                  goto LABEL_124;
              }
              else
              {
                v124[8] = v128;
                if (!i)
                {
LABEL_124:
                  v144 = (uint64_t **)(a1 + i + 16);
                  v145 = (uint64_t *)(a1 + i + 24);
                  v146 = (_QWORD *)(a1 + i + 40);
                  v143 = a1;
LABEL_125:
                  v147 = v296;
                  *(_QWORD *)&v296 = 0;
                  v148 = *(void **)v143;
                  *(_QWORD *)v143 = v147;

                  v149 = *((_QWORD *)&v296 + 1);
                  *((_QWORD *)&v296 + 1) = 0;
                  v150 = *(void **)(v143 + 8);
                  *(_QWORD *)(v143 + 8) = v149;

                  std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)v144, *v145);
                  *v144 = v297;
                  v151 = v298;
                  *v145 = v298;
                  v152 = v299;
                  *v146 = v299;
                  if (v152)
                  {
                    v117 = 0;
                    *(_QWORD *)(v151 + 16) = v145;
                    v297 = (uint64_t *)&v298;
                    *(_QWORD *)&v298 = 0;
                    v299 = 0;
                  }
                  else
                  {
                    *v144 = v145;
                    v117 = v298;
                  }
                  a2 = v288;
                  std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)&v297, v117);

LABEL_106:
                  v114 = (uint64_t)(v118 + 3);
                  v115 += 48;
                  v116 = (uint64_t)v118;
                  if (v118 + 3 == a2)
                    return;
                  goto LABEL_107;
                }
              }
              objc_msgSend(*((id *)&v296 + 1), "etaDescription", v283);
              v132 = (void *)objc_claimAutoreleasedReturnValue();
              v133 = objc_msgSend(v132, "routeEtaType");

              v134 = a1 + i;
              objc_msgSend(*(id *)(a1 + i - 40), "etaDescription");
              v135 = (void *)objc_claimAutoreleasedReturnValue();
              v136 = objc_msgSend(v135, "routeEtaType");

              if (v133 == v136)
              {
                v137 = objc_msgSend(*((id *)&v296 + 1), "start");
                v138 = objc_msgSend(*(id *)(v134 - 40), "start");
                if (v137 >= v138
                  && ((_DWORD)v137 != (_DWORD)v138 || *((float *)&v137 + 1) >= *((float *)&v138 + 1)))
                {
LABEL_123:
                  v143 = a1 + i;
                  v144 = (uint64_t **)(a1 + i + 16);
                  v145 = (uint64_t *)(a1 + i + 24);
                  v146 = (_QWORD *)(a1 + i + 40);
                  goto LABEL_125;
                }
              }
              else
              {
                objc_msgSend(*((id *)&v296 + 1), "etaDescription");
                v139 = (void *)objc_claimAutoreleasedReturnValue();
                v140 = objc_msgSend(v139, "routeEtaType");

                objc_msgSend(*(id *)(v134 - 40), "etaDescription");
                v141 = (void *)objc_claimAutoreleasedReturnValue();
                v142 = objc_msgSend(v141, "routeEtaType");

                if (v140 >= v142)
                  goto LABEL_123;
              }
              v122 = *v124;
            }
          }
          if ((__int128 *)a1 == a2)
            return;
          v252 = a1 + 48;
          if ((__int128 *)(a1 + 48) == a2)
            return;
          while (1)
          {
            v254 = (__int128 *)v252;
            if (md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()(v252, a1))
            {
              break;
            }
LABEL_202:
            v252 = (uint64_t)(v254 + 3);
            a1 = (uint64_t)v254;
            if (v254 + 3 == a2)
              return;
          }
          v255 = *v254;
          *(_QWORD *)v254 = 0;
          *(_QWORD *)(a1 + 56) = 0;
          v296 = v255;
          v256 = *(uint64_t **)(a1 + 64);
          v298 = *(_OWORD *)(a1 + 72);
          v257 = *(void **)(a1 + 88);
          v297 = v256;
          v299 = v257;
          if (v257)
          {
            *(_QWORD *)(v298 + 16) = &v298;
            *(_QWORD *)(a1 + 64) = a1 + 72;
            *(_QWORD *)(a1 + 72) = 0;
            *(_QWORD *)(a1 + 88) = 0;
          }
          else
          {
            v297 = (uint64_t *)&v298;
          }
          for (j = 0; ; j = v259)
          {
            v260 = *(void **)a1;
            *(_QWORD *)a1 = 0;
            *(_QWORD *)(a1 + 48) = v260;

            v261 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;
            v262 = *(void **)(a1 + 56);
            *(_QWORD *)(a1 + 56) = v261;

            v263 = a1 + 72;
            std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(a1 + 64, *(_QWORD *)(a1 + 72));
            v264 = *(_QWORD *)(a1 + 24);
            *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 16);
            *(_QWORD *)(a1 + 72) = v264;
            v265 = *(_QWORD *)(a1 + 40);
            *(_QWORD *)(a1 + 88) = v265;
            if (v265)
            {
              *(_QWORD *)(v264 + 16) = v263;
              *(_QWORD *)(a1 + 16) = a1 + 24;
              *(_QWORD *)(a1 + 24) = 0;
              *(_QWORD *)(a1 + 40) = 0;
            }
            else
            {
              *(_QWORD *)(a1 + 64) = v263;
            }
            objc_msgSend(*((id *)&v296 + 1), "etaDescription", v283);
            v266 = (void *)objc_claimAutoreleasedReturnValue();
            v267 = objc_msgSend(v266, "routeEtaType");

            objc_msgSend(*(id *)(a1 - 40), "etaDescription");
            v268 = (void *)objc_claimAutoreleasedReturnValue();
            v269 = objc_msgSend(v268, "routeEtaType");

            if (v267 == v269)
            {
              v270 = objc_msgSend(*((id *)&v296 + 1), "start");
              v271 = objc_msgSend(*(id *)(a1 - 40), "start");
              if (v270 >= v271
                && ((_DWORD)v270 != (_DWORD)v271 || *((float *)&v270 + 1) >= *((float *)&v271 + 1)))
              {
LABEL_218:
                v276 = a1 + 24;
                v277 = v296;
                *(_QWORD *)&v296 = 0;
                v278 = *(void **)a1;
                *(_QWORD *)a1 = v277;

                v279 = *((_QWORD *)&v296 + 1);
                *((_QWORD *)&v296 + 1) = 0;
                v280 = *(void **)(a1 + 8);
                *(_QWORD *)(a1 + 8) = v279;

                std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(a1 + 16, *(_QWORD *)(a1 + 24));
                *(_QWORD *)(a1 + 16) = v297;
                v281 = v298;
                *(_QWORD *)(a1 + 24) = v298;
                v282 = v299;
                *(_QWORD *)(a1 + 40) = v299;
                if (v282)
                {
                  v253 = 0;
                  *(_QWORD *)(v281 + 16) = v276;
                  v297 = (uint64_t *)&v298;
                  *(_QWORD *)&v298 = 0;
                  v299 = 0;
                }
                else
                {
                  *(_QWORD *)(a1 + 16) = v276;
                  v253 = v298;
                }
                std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)&v297, v253);

                a2 = v288;
                goto LABEL_202;
              }
            }
            else
            {
              objc_msgSend(*((id *)&v296 + 1), "etaDescription");
              v272 = (void *)objc_claimAutoreleasedReturnValue();
              v273 = objc_msgSend(v272, "routeEtaType");

              objc_msgSend(*(id *)(a1 - 40), "etaDescription");
              v274 = (void *)objc_claimAutoreleasedReturnValue();
              v275 = objc_msgSend(v274, "routeEtaType");

              if (v273 >= v275)
                goto LABEL_218;
            }
            v259 = *(void **)a1;
            a1 -= 48;
          }
        }
        if (!a3)
        {
          if ((__int128 *)a1 == a2)
            return;
          v290 = (v9 - 2) >> 1;
          v153 = v290;
          do
          {
            v155 = v153;
            if (v290 >= v153)
            {
              v156 = (2 * v153) | 1;
              v157 = (_QWORD *)(a1 + 48 * v156);
              if (2 * v153 + 2 < (uint64_t)v9
                && md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()(a1 + 48 * v156, (uint64_t)(v157 + 6)))
              {
                v157 += 6;
                v156 = 2 * v155 + 2;
              }
              v158 = a1 + 48 * v155;
              if (!md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()((uint64_t)v157, v158))
              {
                v159 = *(_OWORD *)v158;
                *(_QWORD *)v158 = 0;
                *(_QWORD *)(v158 + 8) = 0;
                v296 = v159;
                v160 = (_QWORD *)(a1 + 48 * v155);
                v161 = v160 + 2;
                v297 = (uint64_t *)v160[2];
                v298 = *(_OWORD *)(v160 + 3);
                v162 = v160 + 5;
                v299 = (void *)v160[5];
                v287 = v155;
                if (v299)
                {
                  v163 = v160 + 3;
                  *(_QWORD *)(v298 + 16) = &v298;
                  *v161 = v163;
                  *v163 = 0;
                  *v162 = 0;
                }
                else
                {
                  v297 = (uint64_t *)&v298;
                }
                do
                {
                  v164 = (void **)v157;
                  v165 = (void *)*v157;
                  *v157 = 0;
                  v166 = *(void **)v158;
                  *(_QWORD *)v158 = v165;

                  v167 = v157[1];
                  v157[1] = 0;
                  v168 = *(void **)(v158 + 8);
                  *(_QWORD *)(v158 + 8) = v167;

                  v170 = *(_QWORD *)(v158 + 24);
                  v169 = (_QWORD *)(v158 + 24);
                  std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)(v169 - 1), v170);
                  *(v169 - 1) = v157[2];
                  v172 = v157 + 3;
                  v171 = v157[3];
                  *v169 = v171;
                  v173 = v157[5];
                  v169[2] = v173;
                  if (v173)
                  {
                    *(_QWORD *)(v171 + 16) = v169;
                    v157[2] = v172;
                    v157[3] = 0;
                    v157[5] = 0;
                  }
                  else
                  {
                    *(v169 - 1) = v169;
                  }
                  if (v290 < v156)
                    break;
                  v174 = (2 * v156) | 1;
                  v157 = (_QWORD *)(a1 + 48 * v174);
                  v156 = 2 * v156 + 2;
                  if (v156 >= (uint64_t)v9)
                  {
                    v156 = v174;
                  }
                  else if (md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()(a1 + 48 * v174, (uint64_t)(v157 + 6)))
                  {
                    v157 += 6;
                  }
                  else
                  {
                    v156 = v174;
                  }
                  v158 = (uint64_t)v164;
                }
                while (!md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()((uint64_t)v157, (uint64_t)&v296));
                v175 = (void *)v296;
                *(_QWORD *)&v296 = 0;
                v176 = *v164;
                *v164 = v175;

                v177 = (void *)*((_QWORD *)&v296 + 1);
                *((_QWORD *)&v296 + 1) = 0;
                v178 = v164[1];
                v164[1] = v177;

                std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)(v164 + 2), (uint64_t)v164[3]);
                v164[2] = v297;
                v179 = v298;
                v164[3] = (void *)v298;
                v180 = v299;
                v164[5] = v299;
                if (v180)
                {
                  v154 = 0;
                  *(_QWORD *)(v179 + 16) = v172;
                  v297 = (uint64_t *)&v298;
                  *(_QWORD *)&v298 = 0;
                  v299 = 0;
                }
                else
                {
                  v164[2] = v172;
                  v154 = v298;
                }
                std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)&v297, v154);

                v155 = v287;
              }
            }
            v153 = v155 - 1;
          }
          while (v155);
          v181 = v8 / 0x30uLL;
          v182 = (__int128 *)(a1 + 24);
          v183 = v288;
          while (1)
          {
            v189 = *(_OWORD *)a1;
            *(_QWORD *)a1 = 0;
            *(_QWORD *)(a1 + 8) = 0;
            v292 = v189;
            v190 = *(__int128 **)(a1 + 16);
            v294 = *v182;
            v191 = *(_QWORD *)(a1 + 40);
            v293 = v190;
            v295 = v191;
            if (v191)
            {
              *(_QWORD *)(v294 + 16) = &v294;
              *(_QWORD *)(a1 + 16) = v182;
              *(_QWORD *)(a1 + 24) = 0;
              *(_QWORD *)(a1 + 40) = 0;
            }
            else
            {
              v293 = &v294;
            }
            v192 = 0;
            v193 = (_QWORD *)a1;
            do
            {
              v194 = (__int128 *)&v193[6 * v192 + 6];
              v205 = 2 * v192;
              v192 = (2 * v192) | 1;
              v206 = v205 + 2;
              if (v205 + 2 < v181
                && md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()((uint64_t)v194, (uint64_t)(v194 + 3)))
              {
                v194 += 3;
                v192 = v206;
              }
              v195 = *(void **)v194;
              *(_QWORD *)v194 = 0;
              v196 = (void *)*v193;
              *v193 = v195;

              v197 = *((_QWORD *)v194 + 1);
              *((_QWORD *)v194 + 1) = 0;
              v198 = (void *)v193[1];
              v193[1] = v197;

              v200 = v193[3];
              v199 = v193 + 3;
              std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)(v199 - 1), v200);
              v201 = (__int128 **)(v194 + 1);
              *(v199 - 1) = *((_QWORD *)v194 + 2);
              v203 = (__int128 *)((char *)v194 + 24);
              v202 = *((_QWORD *)v194 + 3);
              *v199 = v202;
              v204 = *((_QWORD *)v194 + 5);
              v199[2] = v204;
              if (v204)
              {
                *(_QWORD *)(v202 + 16) = v199;
                *((_QWORD *)v194 + 2) = v203;
                *((_QWORD *)v194 + 3) = 0;
                *((_QWORD *)v194 + 5) = 0;
              }
              else
              {
                *(v199 - 1) = v199;
              }
              v193 = v194;
            }
            while (v192 <= (uint64_t)((unint64_t)(v181 - 2) >> 1));
            v208 = v183 - 3;
            if (v194 == v183 - 3)
            {
              v184 = *(void **)v194;
              *(_QWORD *)v194 = v292;

              v185 = (void *)*((_QWORD *)v194 + 1);
              *((_QWORD *)v194 + 1) = *((_QWORD *)&v292 + 1);

              std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)(v194 + 1), *((_QWORD *)v194 + 3));
              *((_QWORD *)v194 + 2) = v293;
              v186 = v294;
              *((_QWORD *)v194 + 3) = v294;
              v187 = v295;
              *((_QWORD *)v194 + 5) = v295;
              if (v187)
              {
                *(_QWORD *)(v186 + 16) = v203;
                v293 = &v294;
                *(_QWORD *)&v294 = 0;
                v295 = 0;
              }
              else
              {
                *v201 = v203;
              }
            }
            else
            {
              v209 = *((_QWORD *)v183 - 6);
              *((_QWORD *)v183 - 6) = 0;
              v210 = *(void **)v194;
              *(_QWORD *)v194 = v209;

              v211 = *((_QWORD *)v183 - 5);
              *((_QWORD *)v183 - 5) = 0;
              v212 = (void *)*((_QWORD *)v194 + 1);
              *((_QWORD *)v194 + 1) = v211;

              std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)(v194 + 1), *((_QWORD *)v194 + 3));
              *((_QWORD *)v194 + 2) = *((_QWORD *)v183 - 4);
              v214 = (char *)v183 - 24;
              v213 = *((_QWORD *)v183 - 3);
              *((_QWORD *)v194 + 3) = v213;
              v215 = *((_QWORD *)v183 - 1);
              *((_QWORD *)v194 + 5) = v215;
              if (v215)
              {
                *(_QWORD *)(v213 + 16) = v203;
                *((_QWORD *)v183 - 4) = v214;
                *((_QWORD *)v183 - 3) = 0;
                *((_QWORD *)v183 - 1) = 0;
              }
              else
              {
                *v201 = v203;
              }
              v216 = (void *)*((_QWORD *)v183 - 6);
              *((_QWORD *)v183 - 6) = v292;

              v217 = (void *)*((_QWORD *)v183 - 5);
              *((_QWORD *)v183 - 5) = *((_QWORD *)&v292 + 1);

              std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)(v183 - 2), *((_QWORD *)v183 - 3));
              *((_QWORD *)v183 - 4) = v293;
              v218 = v294;
              *((_QWORD *)v183 - 3) = v294;
              v219 = v295;
              *((_QWORD *)v183 - 1) = v295;
              if (v219)
              {
                *(_QWORD *)(v218 + 16) = v214;
                v293 = &v294;
                *(_QWORD *)&v294 = 0;
                v295 = 0;
              }
              else
              {
                *((_QWORD *)v183 - 4) = v214;
              }
              v220 = (uint64_t)v194 - a1 + 48;
              if (v220 >= 49)
              {
                v221 = (v220 / 0x30uLL - 2) >> 1;
                v222 = a1 + 48 * v221;
                if (md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()(v222, (uint64_t)v194))
                {
                  v223 = *v194;
                  *(_QWORD *)v194 = 0;
                  *((_QWORD *)v194 + 1) = 0;
                  v296 = v223;
                  v297 = (uint64_t *)*((_QWORD *)v194 + 2);
                  v298 = *v203;
                  v299 = (void *)*((_QWORD *)v194 + 5);
                  v289 = v208;
                  if (v299)
                  {
                    *(_QWORD *)(v298 + 16) = &v298;
                    *((_QWORD *)v194 + 2) = v203;
                    *((_QWORD *)v194 + 3) = 0;
                    *((_QWORD *)v194 + 5) = 0;
                  }
                  else
                  {
                    v297 = (uint64_t *)&v298;
                  }
                  while (1)
                  {
                    while (1)
                    {
                      v224 = (__int128 *)v222;
                      v225 = *(_QWORD *)v222;
                      *(_QWORD *)v222 = 0;
                      v226 = *(void **)v194;
                      *(_QWORD *)v194 = v225;

                      v227 = *(_QWORD *)(v222 + 8);
                      *(_QWORD *)(v222 + 8) = 0;
                      v228 = (void *)*((_QWORD *)v194 + 1);
                      *((_QWORD *)v194 + 1) = v227;

                      v230 = *((_QWORD *)v194 + 3);
                      v229 = (_QWORD *)v194 + 3;
                      std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)(v229 - 1), v230);
                      v291 = (uint64_t *)(v222 + 16);
                      *(v229 - 1) = *(_QWORD *)(v222 + 16);
                      v232 = v222 + 24;
                      v231 = *(_QWORD *)(v222 + 24);
                      *v229 = v231;
                      v233 = *(_QWORD *)(v222 + 40);
                      v229[2] = v233;
                      if (v233)
                      {
                        *(_QWORD *)(v231 + 16) = v229;
                        *(_QWORD *)(v222 + 16) = v232;
                        *(_QWORD *)(v222 + 24) = 0;
                        *(_QWORD *)(v222 + 40) = 0;
                        if (!v221)
                          goto LABEL_193;
                      }
                      else
                      {
                        *(v229 - 1) = v229;
                        if (!v221)
                          goto LABEL_193;
                      }
                      v221 = (v221 - 1) >> 1;
                      v222 = a1 + 48 * v221;
                      objc_msgSend(*(id *)(v222 + 8), "etaDescription", v283);
                      v234 = (void *)objc_claimAutoreleasedReturnValue();
                      v235 = objc_msgSend(v234, "routeEtaType");

                      objc_msgSend(*((id *)&v296 + 1), "etaDescription");
                      v236 = (void *)objc_claimAutoreleasedReturnValue();
                      v237 = objc_msgSend(v236, "routeEtaType");

                      v238 = *(void **)(v222 + 8);
                      if (v235 == v237)
                        break;
                      objc_msgSend(v238, "etaDescription");
                      v242 = (void *)objc_claimAutoreleasedReturnValue();
                      v243 = objc_msgSend(v242, "routeEtaType");

                      objc_msgSend(*((id *)&v296 + 1), "etaDescription");
                      v244 = (void *)objc_claimAutoreleasedReturnValue();
                      v245 = objc_msgSend(v244, "routeEtaType");

                      v194 = v224;
                      if (v243 >= v245)
                        goto LABEL_193;
                    }
                    v239 = objc_msgSend(v238, "start");
                    v240 = objc_msgSend(*((id *)&v296 + 1), "start");
                    v194 = v224;
                    if (v239 >= v240)
                    {
                      v241 = (_DWORD)v239 == (_DWORD)v240 && *((float *)&v239 + 1) < *((float *)&v240 + 1);
                      v194 = v224;
                      if (!v241)
                        break;
                    }
                  }
LABEL_193:
                  v246 = v296;
                  *(_QWORD *)&v296 = 0;
                  v247 = *(void **)v224;
                  *(_QWORD *)v224 = v246;

                  v248 = *((_QWORD *)&v296 + 1);
                  *((_QWORD *)&v296 + 1) = 0;
                  v249 = (void *)*((_QWORD *)v224 + 1);
                  *((_QWORD *)v224 + 1) = v248;

                  std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)v291, *((_QWORD *)v224 + 3));
                  *((_QWORD *)v224 + 2) = v297;
                  v250 = v298;
                  *((_QWORD *)v224 + 3) = v298;
                  v251 = v299;
                  *((_QWORD *)v224 + 5) = v299;
                  if (v251)
                  {
                    *(_QWORD *)(v250 + 16) = v232;
                    v250 = 0;
                    v297 = (uint64_t *)&v298;
                    *(_QWORD *)&v298 = 0;
                    v299 = 0;
                  }
                  else
                  {
                    *v291 = v232;
                  }
                  v208 = v289;
                  std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)&v297, v250);

                }
              }
            }
            std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)&v293, v294);

            v183 = v208;
            v188 = v181-- <= 2;
            v182 = (__int128 *)(a1 + 24);
            if (v188)
              return;
          }
        }
        v10 = v9 >> 1;
        if ((unint64_t)v8 < 0x1801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0 &,md::RouteRangeAnnotationRequest*>((__int128 *)(a1 + 48 * (v9 >> 1)), (__int128 *)a1, v286);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0 &,md::RouteRangeAnnotationRequest*>((__int128 *)a1, (__int128 *)(a1 + 48 * (v9 >> 1)), v286);
          v11 = 48 * v10;
          v12 = (__int128 *)(48 * v10 + a1 - 48);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0 &,md::RouteRangeAnnotationRequest*>((__int128 *)(a1 + 48), v12, v284);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0 &,md::RouteRangeAnnotationRequest*>((__int128 *)(a1 + 96), (__int128 *)(a1 + 48 + v11), v283);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0 &,md::RouteRangeAnnotationRequest*>(v12, (__int128 *)(a1 + 48 * (v9 >> 1)), (_QWORD *)(a1 + 48 + v11));
          std::swap[abi:nn180100]<md::RouteRangeAnnotationRequest>((__int128 *)a1, (_QWORD *)(a1 + 48 * (v9 >> 1)));
        }
        --a3;
        if ((a4 & 1) == 0
          && !md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()(a1 - 48, a1))
        {
          v71 = *(_OWORD *)a1;
          *(_QWORD *)a1 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          v296 = v71;
          v72 = *(uint64_t **)(a1 + 16);
          v73 = a1 + 24;
          v298 = *(_OWORD *)(a1 + 24);
          v74 = *(void **)(a1 + 40);
          v297 = v72;
          v299 = v74;
          if (v74)
          {
            *(_QWORD *)(v298 + 16) = &v298;
            *(_QWORD *)(a1 + 16) = v73;
            *(_QWORD *)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 40) = 0;
          }
          else
          {
            v297 = (uint64_t *)&v298;
          }
          if (md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()((uint64_t)&v296, (uint64_t)v286))
          {
            v7 = a1;
            do
              v7 += 48;
            while (!md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()((uint64_t)&v296, v7));
          }
          else
          {
            v75 = a1 + 48;
            do
            {
              v7 = v75;
              if (v75 >= (unint64_t)v288)
                break;
              v76 = md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()((uint64_t)&v296, v75);
              v75 = v7 + 48;
            }
            while (!v76);
          }
          v77 = (unint64_t)v288;
          if (v7 < (unint64_t)v288)
          {
            v77 = (unint64_t)v288;
            do
              v77 -= 48;
            while (md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()((uint64_t)&v296, v77));
          }
LABEL_83:
          while (v7 < v77)
          {
            std::swap[abi:nn180100]<md::RouteRangeAnnotationRequest>((__int128 *)v7, (_QWORD *)v77);
            while (1)
            {
              while (1)
              {
                v7 += 48;
                objc_msgSend(*((id *)&v296 + 1), "etaDescription", v283);
                v78 = (void *)objc_claimAutoreleasedReturnValue();
                v79 = objc_msgSend(v78, "routeEtaType");

                objc_msgSend(*(id *)(v7 + 8), "etaDescription");
                v80 = (void *)objc_claimAutoreleasedReturnValue();
                v81 = objc_msgSend(v80, "routeEtaType");

                if (v79 == v81)
                  break;
                objc_msgSend(*((id *)&v296 + 1), "etaDescription");
                v86 = (void *)objc_claimAutoreleasedReturnValue();
                v87 = objc_msgSend(v86, "routeEtaType");

                objc_msgSend(*(id *)(v7 + 8), "etaDescription");
                v88 = (void *)objc_claimAutoreleasedReturnValue();
                v89 = objc_msgSend(v88, "routeEtaType");

                if (v87 < v89)
                  goto LABEL_79;
              }
              v82 = objc_msgSend(*((id *)&v296 + 1), "start");
              v83 = objc_msgSend(*(id *)(v7 + 8), "start");
              if (v82 < v83)
                break;
              if ((_DWORD)v82 == (_DWORD)v83)
              {
                LODWORD(v84) = HIDWORD(v83);
                LODWORD(v85) = HIDWORD(v82);
                if (*((float *)&v82 + 1) < *((float *)&v83 + 1))
                  break;
              }
            }
            while (1)
            {
LABEL_79:
              while (1)
              {
                v77 -= 48;
                objc_msgSend(*((id *)&v296 + 1), "etaDescription", v84, v85);
                v94 = (void *)objc_claimAutoreleasedReturnValue();
                v95 = objc_msgSend(v94, "routeEtaType");

                objc_msgSend(*(id *)(v77 + 8), "etaDescription");
                v96 = (void *)objc_claimAutoreleasedReturnValue();
                v97 = objc_msgSend(v96, "routeEtaType");

                if (v95 == v97)
                  break;
                objc_msgSend(*((id *)&v296 + 1), "etaDescription");
                v90 = (void *)objc_claimAutoreleasedReturnValue();
                v91 = objc_msgSend(v90, "routeEtaType");

                objc_msgSend(*(id *)(v77 + 8), "etaDescription");
                v92 = (void *)objc_claimAutoreleasedReturnValue();
                v93 = objc_msgSend(v92, "routeEtaType");

                if (v91 >= v93)
                  goto LABEL_83;
              }
              v98 = objc_msgSend(*((id *)&v296 + 1), "start");
              v99 = objc_msgSend(*(id *)(v77 + 8), "start");
              if (v98 >= v99)
              {
                if ((_DWORD)v98 != (_DWORD)v99)
                  break;
                LODWORD(v84) = HIDWORD(v99);
                LODWORD(v85) = HIDWORD(v98);
                if (*((float *)&v98 + 1) >= *((float *)&v99 + 1))
                  break;
              }
            }
          }
          if (v7 - 48 != a1)
          {
            v100 = *(_QWORD *)(v7 - 48);
            *(_QWORD *)(v7 - 48) = 0;
            v101 = *(void **)a1;
            *(_QWORD *)a1 = v100;

            v102 = *(_QWORD *)(v7 - 40);
            *(_QWORD *)(v7 - 40) = 0;
            v103 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v102;

            std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(a1 + 16, *(_QWORD *)(a1 + 24));
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 - 32);
            v104 = *(_QWORD *)(v7 - 24);
            *(_QWORD *)(a1 + 24) = v104;
            v105 = *(_QWORD *)(v7 - 8);
            *(_QWORD *)(a1 + 40) = v105;
            if (v105)
            {
              *(_QWORD *)(v104 + 16) = v73;
              *(_QWORD *)(v7 - 32) = v7 - 24;
              *(_QWORD *)(v7 - 24) = 0;
              *(_QWORD *)(v7 - 8) = 0;
            }
            else
            {
              *(_QWORD *)(a1 + 16) = v73;
            }
          }
          v106 = v296;
          *(_QWORD *)&v296 = 0;
          v107 = *(void **)(v7 - 48);
          *(_QWORD *)(v7 - 48) = v106;

          v108 = *((_QWORD *)&v296 + 1);
          *((_QWORD *)&v296 + 1) = 0;
          v109 = *(void **)(v7 - 40);
          *(_QWORD *)(v7 - 40) = v108;

          v110 = v7 - 24;
          std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(v7 - 32, *(_QWORD *)(v7 - 24));
          *(_QWORD *)(v7 - 32) = v297;
          v111 = v298;
          *(_QWORD *)(v7 - 24) = v298;
          v112 = v299;
          *(_QWORD *)(v7 - 8) = v299;
          if (v112)
          {
            v113 = 0;
            *(_QWORD *)(v111 + 16) = v110;
            v297 = (uint64_t *)&v298;
            *(_QWORD *)&v298 = 0;
            v299 = 0;
          }
          else
          {
            *(_QWORD *)(v7 - 32) = v110;
            v113 = v298;
          }
          a2 = v288;
          std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)&v297, v113);

          a4 = 0;
          continue;
        }
        v13 = *(_OWORD *)a1;
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        v296 = v13;
        v14 = *(uint64_t **)(a1 + 16);
        v15 = a1 + 24;
        v298 = *(_OWORD *)(a1 + 24);
        v16 = *(void **)(a1 + 40);
        v297 = v14;
        v299 = v16;
        if (v16)
        {
          *(_QWORD *)(v298 + 16) = &v298;
          *(_QWORD *)(a1 + 16) = v15;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 40) = 0;
        }
        else
        {
          v297 = (uint64_t *)&v298;
        }
        v17 = a1 + 48;
        while (2)
        {
          objc_msgSend(*(id *)(v17 + 8), "etaDescription", v283);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = objc_msgSend(v18, "routeEtaType");

          objc_msgSend(*((id *)&v296 + 1), "etaDescription");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v21 = objc_msgSend(v20, "routeEtaType");

          v22 = *(void **)(v17 + 8);
          if (v19 != v21)
          {
            objc_msgSend(v22, "etaDescription");
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            v26 = objc_msgSend(v25, "routeEtaType");

            objc_msgSend(*((id *)&v296 + 1), "etaDescription");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            v28 = objc_msgSend(v27, "routeEtaType");

            if (v26 >= v28)
              goto LABEL_21;
LABEL_14:
            v17 += 48;
            continue;
          }
          break;
        }
        v23 = objc_msgSend(v22, "start");
        v24 = objc_msgSend(*((id *)&v296 + 1), "start");
        if (v23 < v24
          || (_DWORD)v23 == (_DWORD)v24 && *((float *)&v23 + 1) < *((float *)&v24 + 1))
        {
          goto LABEL_14;
        }
LABEL_21:
        v29 = (unint64_t)v288;
        if (v17 - 48 == a1)
        {
          v29 = (unint64_t)v288;
          do
          {
            if (v17 >= v29)
              break;
            v29 -= 48;
          }
          while (!md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()(v29, (uint64_t)&v296));
        }
        else
        {
          do
            v29 -= 48;
          while (!md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0::operator()(v29, (uint64_t)&v296));
        }
        v7 = v17;
        if (v17 < v29)
        {
          v7 = v17;
          v30 = v29;
          do
          {
            std::swap[abi:nn180100]<md::RouteRangeAnnotationRequest>((__int128 *)v7, (_QWORD *)v30);
            while (1)
            {
              while (1)
              {
                v7 += 48;
                objc_msgSend(*(id *)(v7 + 8), "etaDescription");
                v31 = (void *)objc_claimAutoreleasedReturnValue();
                v32 = objc_msgSend(v31, "routeEtaType");

                objc_msgSend(*((id *)&v296 + 1), "etaDescription");
                v33 = (void *)objc_claimAutoreleasedReturnValue();
                v34 = objc_msgSend(v33, "routeEtaType");

                v35 = *(void **)(v7 + 8);
                if (v32 == v34)
                  break;
                objc_msgSend(v35, "etaDescription");
                v40 = (void *)objc_claimAutoreleasedReturnValue();
                v41 = objc_msgSend(v40, "routeEtaType");

                objc_msgSend(*((id *)&v296 + 1), "etaDescription");
                v42 = (void *)objc_claimAutoreleasedReturnValue();
                v43 = objc_msgSend(v42, "routeEtaType");

                if (v41 >= v43)
                  goto LABEL_39;
              }
              v36 = objc_msgSend(v35, "start");
              v37 = objc_msgSend(*((id *)&v296 + 1), "start");
              if (v36 >= v37)
              {
                if ((_DWORD)v36 != (_DWORD)v37)
                  break;
                LODWORD(v38) = HIDWORD(v37);
                LODWORD(v39) = HIDWORD(v36);
                if (*((float *)&v36 + 1) >= *((float *)&v37 + 1))
                  break;
              }
            }
            while (1)
            {
LABEL_39:
              while (1)
              {
                v30 -= 48;
                objc_msgSend(*(id *)(v30 + 8), "etaDescription", v38, v39);
                v48 = (void *)objc_claimAutoreleasedReturnValue();
                v49 = objc_msgSend(v48, "routeEtaType");

                objc_msgSend(*((id *)&v296 + 1), "etaDescription");
                v50 = (void *)objc_claimAutoreleasedReturnValue();
                v51 = objc_msgSend(v50, "routeEtaType");

                v52 = *(void **)(v30 + 8);
                if (v49 == v51)
                  break;
                objc_msgSend(v52, "etaDescription");
                v44 = (void *)objc_claimAutoreleasedReturnValue();
                v45 = objc_msgSend(v44, "routeEtaType");

                objc_msgSend(*((id *)&v296 + 1), "etaDescription");
                v46 = (void *)objc_claimAutoreleasedReturnValue();
                v47 = objc_msgSend(v46, "routeEtaType");

                if (v45 < v47)
                  goto LABEL_29;
              }
              v53 = objc_msgSend(v52, "start");
              v54 = objc_msgSend(*((id *)&v296 + 1), "start");
              if (v53 < v54)
                break;
              if ((_DWORD)v53 == (_DWORD)v54)
              {
                LODWORD(v38) = HIDWORD(v54);
                LODWORD(v39) = HIDWORD(v53);
                if (*((float *)&v53 + 1) < *((float *)&v54 + 1))
                  break;
              }
            }
LABEL_29:
            ;
          }
          while (v7 < v30);
        }
        if (v7 - 48 != a1)
        {
          v55 = *(_QWORD *)(v7 - 48);
          *(_QWORD *)(v7 - 48) = 0;
          v56 = *(void **)a1;
          *(_QWORD *)a1 = v55;

          v57 = *(_QWORD *)(v7 - 40);
          *(_QWORD *)(v7 - 40) = 0;
          v58 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v57;

          std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(a1 + 16, *(_QWORD *)(a1 + 24));
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 - 32);
          v59 = *(_QWORD *)(v7 - 24);
          *(_QWORD *)(a1 + 24) = v59;
          v60 = *(_QWORD *)(v7 - 8);
          *(_QWORD *)(a1 + 40) = v60;
          if (v60)
          {
            *(_QWORD *)(v59 + 16) = v15;
            *(_QWORD *)(v7 - 32) = v7 - 24;
            *(_QWORD *)(v7 - 24) = 0;
            *(_QWORD *)(v7 - 8) = 0;
          }
          else
          {
            *(_QWORD *)(a1 + 16) = v15;
          }
        }
        v61 = v296;
        *(_QWORD *)&v296 = 0;
        v62 = *(void **)(v7 - 48);
        *(_QWORD *)(v7 - 48) = v61;

        v63 = *((_QWORD *)&v296 + 1);
        *((_QWORD *)&v296 + 1) = 0;
        v64 = *(void **)(v7 - 40);
        *(_QWORD *)(v7 - 40) = v63;

        v65 = v7 - 24;
        std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy(v7 - 32, *(_QWORD *)(v7 - 24));
        *(_QWORD *)(v7 - 32) = v297;
        v66 = v298;
        *(_QWORD *)(v7 - 24) = v298;
        v67 = v299;
        *(_QWORD *)(v7 - 8) = v299;
        if (v67)
        {
          v68 = 0;
          *(_QWORD *)(v66 + 16) = v65;
          v297 = (uint64_t *)&v298;
          *(_QWORD *)&v298 = 0;
          v299 = 0;
        }
        else
        {
          *(_QWORD *)(v7 - 32) = v65;
          v68 = v298;
        }
        std::__tree<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,std::vector<md::ShareSection,geo::StdAllocator<md::ShareSection,mdm::Allocator>>>,mdm::Allocator>>::destroy((uint64_t)&v297, v68);

        v69 = v17 >= v29;
        a2 = v288;
        if (!v69)
        {
LABEL_55:
          std::__introsort<std::_ClassicAlgPolicy,md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0 &,md::RouteRangeAnnotationRequest*,false>(a1, v7 - 48, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v70 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0 &,md::RouteRangeAnnotationRequest*>((__int128 *)a1, (__int128 *)(v7 - 48));
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelNavEtaLabeler::extractAndSortAnnotations(VKRouteInfo *,std::function<BOOL ()(md::RouteRangeAnnotationRequest const&)>)::$_0 &,md::RouteRangeAnnotationRequest*>((__int128 *)v7, v288))
        {
          if (v70)
            continue;
          goto LABEL_55;
        }
        a2 = (__int128 *)(v7 - 48);
        if (!v70)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a2 - 2;
  i = a1;
  while (2)
  {
    a1 = i;
    v11 = (uint64_t)a2 - i;
    v12 = (uint64_t)((uint64_t)a2 - i) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*(_DWORD *)v9 < *(_DWORD *)i
          || *(_DWORD *)v9 == *(_DWORD *)i && (result = *(a2 - 1), result < *(float *)(i + 4)))
        {
          v42 = *(_QWORD *)i;
          *(_QWORD *)i = *(_QWORD *)v9;
          *(_QWORD *)v9 = v42;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,geo::PolylineCoordinate *>((float *)i, (unsigned int *)(i + 8), a2 - 2);
      case 4uLL:
        v43 = (uint64_t *)(i + 16);
        result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,geo::PolylineCoordinate *>((float *)i, (unsigned int *)(i + 8), (float *)(i + 16));
        v44 = *(_DWORD *)(i + 16);
        if (*(_DWORD *)v9 < v44 || *(_DWORD *)v9 == v44 && (result = *(a2 - 1), result < *(float *)(i + 20)))
        {
          v45 = *v43;
          *v43 = *(_QWORD *)v9;
          *(_QWORD *)v9 = v45;
          v46 = *(_DWORD *)(i + 8);
          if (*(_DWORD *)v43 < v46
            || *(_DWORD *)v43 == v46 && (result = *(float *)(i + 20), result < *(float *)(i + 12)))
          {
            v48 = *(_QWORD *)(i + 8);
            v47 = *(_QWORD *)(i + 16);
            *(_QWORD *)(i + 8) = v47;
            *(_QWORD *)(i + 16) = v48;
            if (*(_DWORD *)i > v47
              || *(_DWORD *)i == (_DWORD)v47
              && (result = *((float *)&v47 + 1), *(float *)(i + 4) > *((float *)&v47 + 1)))
            {
              v49 = *(_QWORD *)i;
              *(_QWORD *)i = v47;
              *(_QWORD *)(i + 8) = v49;
            }
          }
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,geo::PolylineCoordinate *>((float *)i, (unsigned int *)(i + 8), (float *)(i + 16), (float *)(i + 24), a2 - 2);
      default:
        if (v11 <= 191)
        {
          v50 = (float *)(i + 8);
          v52 = (float *)i == a2 || v50 == a2;
          if ((a4 & 1) != 0)
          {
            if (v52)
              return result;
            v53 = 0;
            v54 = i;
            while (1)
            {
              v56 = v54;
              v54 = (unint64_t)v50;
              v57 = *(_DWORD *)(v56 + 8);
              if (v57 < *(_DWORD *)v56)
                break;
              if (v57 == *(_DWORD *)v56)
              {
                result = *(float *)(v56 + 12);
                if (result < *(float *)(v56 + 4))
                  goto LABEL_116;
              }
LABEL_111:
              v50 = (float *)(v54 + 8);
              v53 += 8;
              if ((float *)(v54 + 8) == a2)
                return result;
            }
            result = *(float *)(v56 + 12);
LABEL_116:
            *(_QWORD *)(v56 + 8) = *(_QWORD *)v56;
            v55 = i;
            if (v56 != i)
            {
              v58 = v53;
              while (1)
              {
                v59 = *(_DWORD *)(i + v58 - 8);
                if (v57 >= v59)
                {
                  if (v57 != v59)
                  {
                    v55 = i + v58;
                    goto LABEL_110;
                  }
                  if (*(float *)(i + v58 - 4) <= result)
                    break;
                }
                v56 -= 8;
                *(_QWORD *)(i + v58) = *(_QWORD *)(i + v58 - 8);
                v58 -= 8;
                if (!v58)
                {
                  v55 = i;
                  goto LABEL_110;
                }
              }
              v55 = v56;
            }
LABEL_110:
            *(_DWORD *)v55 = v57;
            *(float *)(v55 + 4) = result;
            goto LABEL_111;
          }
          if (v52)
            return result;
          while (1)
          {
            v89 = a1;
            a1 = (uint64_t)v50;
            v90 = *(_DWORD *)(v89 + 8);
            if (v90 < *(_DWORD *)v89)
              break;
            if (v90 == *(_DWORD *)v89)
            {
              result = *(float *)(v89 + 12);
              if (result < *(float *)(v89 + 4))
                goto LABEL_191;
            }
LABEL_186:
            v50 = (float *)(a1 + 8);
            if ((float *)(a1 + 8) == a2)
              return result;
          }
          result = *(float *)(v89 + 12);
          do
          {
            do
            {
LABEL_191:
              v91 = v89;
              *(_QWORD *)(v89 + 8) = *(_QWORD *)v89;
              v92 = *(_DWORD *)(v89 - 8);
              v89 -= 8;
              v93 = v90 == v92;
            }
            while (v90 < v92);
          }
          while (v93 && *(float *)(v91 - 4) > result);
          *(_DWORD *)v91 = v90;
          *(float *)(v91 + 4) = result;
          goto LABEL_186;
        }
        if (!a3)
        {
          if ((float *)i == a2)
            return result;
          v60 = (v12 - 2) >> 1;
          v61 = v60;
          while (1)
          {
            v63 = v61;
            if (v60 >= v61)
            {
              v64 = (2 * v61) | 1;
              v65 = i + 8 * v64;
              if (2 * v63 + 2 < (uint64_t)v12)
              {
                v66 = *(_DWORD *)(v65 + 8);
                if (*(_DWORD *)v65 < v66
                  || *(_DWORD *)v65 == v66 && (result = *(float *)(i + 8 * v64 + 4), result < *(float *)(v65 + 12)))
                {
                  v65 += 8;
                  v64 = 2 * v63 + 2;
                }
              }
              v67 = i + 8 * v63;
              v68 = *(_DWORD *)v67;
              if (*(_DWORD *)v65 >= *(_DWORD *)v67)
              {
                if (*(_DWORD *)v65 != v68)
                {
                  result = *(float *)(v67 + 4);
LABEL_139:
                  *(_QWORD *)v67 = *(_QWORD *)v65;
                  if (v60 >= v64)
                  {
                    while (1)
                    {
                      v69 = 2 * v64;
                      v64 = (2 * v64) | 1;
                      v62 = i + 8 * v64;
                      v70 = v69 + 2;
                      if (v70 < (uint64_t)v12)
                      {
                        v71 = *(_DWORD *)(v62 + 8);
                        if (*(_DWORD *)v62 < v71
                          || *(_DWORD *)v62 == v71 && *(float *)(i + 8 * v64 + 4) < *(float *)(v62 + 12))
                        {
                          v62 += 8;
                          v64 = v70;
                        }
                      }
                      if (*(_DWORD *)v62 < v68 || *(_DWORD *)v62 == v68 && *(float *)(v62 + 4) < result)
                        break;
                      *(_QWORD *)v65 = *(_QWORD *)v62;
                      v65 = v62;
                      if (v60 < v64)
                        goto LABEL_127;
                    }
                  }
                  v62 = v65;
LABEL_127:
                  *(_DWORD *)v62 = v68;
                  *(float *)(v62 + 4) = result;
                  goto LABEL_128;
                }
                result = *(float *)(i + 8 * v63 + 4);
                if (*(float *)(v65 + 4) >= result)
                  goto LABEL_139;
              }
            }
LABEL_128:
            v61 = v63 - 1;
            if (!v63)
            {
              v72 = (unint64_t)v11 >> 3;
              while (1)
              {
                v74 = 0;
                v75 = *(_QWORD *)i;
                v76 = i;
                do
                {
                  v77 = (_QWORD *)v76;
                  v78 = v74 + 1;
                  v76 += 8 * (v74 + 1);
                  v79 = 2 * v74;
                  v74 = (2 * v74) | 1;
                  v80 = v79 + 2;
                  if (v80 < v72)
                  {
                    v81 = *(_DWORD *)(v76 + 8);
                    if (*(_DWORD *)v76 < v81
                      || *(_DWORD *)v76 == v81 && (result = *((float *)&v77[v78] + 1), result < *(float *)(v76 + 12)))
                    {
                      v76 += 8;
                      v74 = v80;
                    }
                  }
                  *v77 = *(_QWORD *)v76;
                }
                while (v74 <= (uint64_t)((unint64_t)(v72 - 2) >> 1));
                a2 -= 2;
                if ((float *)v76 == a2)
                {
                  *(_QWORD *)v76 = v75;
                }
                else
                {
                  *(_QWORD *)v76 = *(_QWORD *)a2;
                  *(_QWORD *)a2 = v75;
                  v82 = v76 - i + 8;
                  if (v82 >= 9)
                  {
                    v83 = ((unint64_t)v82 >> 3) - 2;
                    v84 = v83 >> 1;
                    v85 = (float *)(i + 8 * (v83 >> 1));
                    v86 = *(_DWORD *)v76;
                    if (*(_DWORD *)v85 < *(_DWORD *)v76)
                    {
                      result = *(float *)(v76 + 4);
LABEL_166:
                      *(_QWORD *)v76 = *(_QWORD *)v85;
                      if (v83 >= 2)
                      {
                        while (1)
                        {
                          v88 = v84 - 1;
                          v84 = (v84 - 1) >> 1;
                          v87 = (float *)(i + 8 * v84);
                          if (*(_DWORD *)v87 >= v86 && (*(_DWORD *)v87 != v86 || *(float *)(i + 8 * v84 + 4) >= result))
                            break;
                          *(_QWORD *)v85 = *(_QWORD *)v87;
                          v85 = (float *)(i + 8 * v84);
                          if (v88 <= 1)
                            goto LABEL_168;
                        }
                      }
                      v87 = v85;
LABEL_168:
                      *(_DWORD *)v87 = v86;
                      v87[1] = result;
                      goto LABEL_153;
                    }
                    if (*(_DWORD *)v85 == v86)
                    {
                      result = *(float *)(v76 + 4);
                      if (*(float *)(i + 8 * v84 + 4) < result)
                        goto LABEL_166;
                    }
                  }
                }
LABEL_153:
                if (v72-- <= 2)
                  return result;
              }
            }
          }
        }
        v13 = v12 >> 1;
        v14 = (unsigned int *)(i + 8 * (v12 >> 1));
        if ((unint64_t)v11 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,geo::PolylineCoordinate *>((float *)(a1 + 8 * (v12 >> 1)), (unsigned int *)a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,geo::PolylineCoordinate *>((float *)a1, (unsigned int *)(a1 + 8 * (v12 >> 1)), a2 - 2);
          v15 = (unsigned int *)(a1 + 8 * v13);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,geo::PolylineCoordinate *>((float *)(a1 + 8), v15 - 2, a2 - 4);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,geo::PolylineCoordinate *>((float *)(a1 + 16), (unsigned int *)(a1 + 8 + 8 * v13), a2 - 6);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,geo::PolylineCoordinate *>((float *)v15 - 2, v14, (float *)(a1 + 8 + 8 * v13));
          v16 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v15;
          *(_QWORD *)v15 = v16;
        }
        --a3;
        v17 = *(_DWORD *)a1;
        if ((a4 & 1) == 0)
        {
          v18 = *(_DWORD *)(a1 - 8);
          if (v18 >= v17)
          {
            if (v18 == v17)
            {
              result = *(float *)(a1 + 4);
              if (*(float *)(a1 - 4) < result)
                goto LABEL_13;
            }
            else
            {
              result = *(float *)(a1 + 4);
            }
            v32 = *(_DWORD *)v9;
            if (v17 < *(_DWORD *)v9 || v17 == v32 && *(a2 - 1) > result)
            {
              i = a1;
              do
              {
                v34 = *(_DWORD *)(i + 8);
                i += 8;
                v33 = v34;
              }
              while (v17 >= v34 && (v17 != v33 || *(float *)(i + 4) <= result));
            }
            else
            {
              for (i = a1 + 8;
                    i < (unint64_t)a2
                 && v17 >= *(_DWORD *)i
                 && (v17 != *(_DWORD *)i || *(float *)(i + 4) <= result);
            }
            j = a2;
            if (i < (unint64_t)a2)
            {
              for (j = a2 - 2; v17 < v32 || v17 == v32 && j[1] > result; j -= 2)
              {
                v36 = *((_DWORD *)j - 2);
                v32 = v36;
              }
            }
            while (i < (unint64_t)j)
            {
              v37 = *(_QWORD *)i;
              *(_QWORD *)i = *(_QWORD *)j;
              *(_QWORD *)j = v37;
              do
              {
                v39 = *(_DWORD *)(i + 8);
                i += 8;
                v38 = v39;
              }
              while (v17 >= v39 && (v17 != v38 || *(float *)(i + 4) <= result));
              do
              {
                do
                {
                  v40 = *((_DWORD *)j - 2);
                  j -= 2;
                  v41 = v17 == v40;
                }
                while (v17 < v40);
              }
              while (v41 && j[1] > result);
            }
            if (i - 8 != a1)
              *(_QWORD *)a1 = *(_QWORD *)(i - 8);
            a4 = 0;
            *(_DWORD *)(i - 8) = v17;
            *(float *)(i - 4) = result;
            continue;
          }
        }
LABEL_13:
        v19 = *(float *)(a1 + 4);
        for (k = a1 + 8; *(_DWORD *)k < v17 || *(_DWORD *)k == v17 && *(float *)(k + 4) < v19; k += 8)
          ;
        if (k - 8 == a1)
        {
          m = a2;
          if (k < (unint64_t)a2)
          {
            v24 = *(_DWORD *)v9;
            m = a2 - 2;
            if (*(_DWORD *)v9 >= v17)
            {
              m = a2 - 2;
              do
              {
                if (v24 == v17)
                {
                  if (m[1] < v19 || k >= (unint64_t)m)
                    break;
                }
                else if (k >= (unint64_t)m)
                {
                  break;
                }
                v25 = *((_DWORD *)m - 2);
                m -= 2;
                v24 = v25;
              }
              while (v25 >= v17);
            }
          }
        }
        else
        {
          v21 = *(_DWORD *)v9;
          for (m = a2 - 2; v21 >= v17 && (v21 != v17 || m[1] >= v19); m -= 2)
          {
            v23 = *((_DWORD *)m - 2);
            v21 = v23;
          }
        }
        i = k;
        if (k < (unint64_t)m)
        {
          i = k;
          v27 = (unint64_t)m;
          do
          {
            v28 = *(_QWORD *)i;
            *(_QWORD *)i = *(_QWORD *)v27;
            i += 8;
            *(_QWORD *)v27 = v28;
            while (*(_DWORD *)i < v17 || *(_DWORD *)i == v17 && *(float *)(i + 4) < v19)
              i += 8;
            do
            {
              v30 = *(_DWORD *)(v27 - 8);
              v27 -= 8;
              v29 = v30;
            }
            while (v30 >= v17 && (v29 != v17 || *(float *)(v27 + 4) >= v19));
          }
          while (i < v27);
        }
        if (i - 8 != a1)
          *(_QWORD *)a1 = *(_QWORD *)(i - 8);
        *(_DWORD *)(i - 8) = v17;
        *(float *)(i - 4) = v19;
        if (k < (unint64_t)m)
        {
LABEL_53:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,geo::PolylineCoordinate *,false>(a1, i - 8, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v31 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,geo::PolylineCoordinate *>(a1, i - 8);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,geo::PolylineCoordinate *>(i, (uint64_t)a2))
        {
          if (v31)
            continue;
          goto LABEL_53;
        }
        a2 = (float *)(i - 8);
        if (!v31)
          goto LABEL_1;
        return result;
    }
  }
}

  v8 = a2 - 1;
  i = a1;
  while (2)
  {
    a1 = i;
    v10 = (char *)a2 - (char *)i;
    v11 = a2 - i;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v141 = *v8;
        v142 = *i;
        v143 = (unsigned __int8 *)(*v8 + 1240);
        v144 = atomic_load(v143);
        v145 = atomic_load((unsigned __int8 *)(v142 + 1240));
        if ((v144 & 1) != (v145 & 1))
        {
          v146 = atomic_load(v143);
          if ((v146 & 1) == 0)
            return result;
          goto LABEL_416;
        }
        v267 = *(_QWORD *)(v141 + 24);
        v268 = *(_QWORD *)(v142 + 24);
        if (v267)
        {
          if (v267 == v268)
          {
            if (*(_DWORD *)(v141 + 32) >= *(_DWORD *)(v142 + 32))
              return result;
            goto LABEL_416;
          }
          v269 = *(_QWORD *)(v267 + 72);
          if (v269)
            v141 = v269;
        }
        if (v268)
        {
          v270 = *(_QWORD *)(v268 + 72);
          if (v270)
            v142 = v270;
        }
        result = *(float *)(v141 + 780);
        if (result < *(float *)(v142 + 780))
        {
LABEL_416:
          v292 = *i;
          *i = *v8;
          *v8 = v292;
          return result;
        }
        return result;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPoiLabelSorter &,md::Label **>(i, i + 1, a2 - 1);
        return result;
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPoiLabelSorter &,md::Label **>(i, i + 1, i + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPoiLabelSorter &,md::Label **>(i, i + 1, i + 2, i + 3, a2 - 1);
      default:
        if (v10 <= 191)
        {
          v147 = i + 1;
          v149 = i == a2 || v147 == a2;
          if ((a4 & 1) != 0)
          {
            if (v149)
              return result;
            v150 = 0;
            v151 = i;
LABEL_226:
            v153 = v151;
            v151 = v147;
            v154 = *v153;
            v155 = v153[1];
            v156 = atomic_load((unsigned __int8 *)(v155 + 1240));
            v157 = atomic_load((unsigned __int8 *)(v154 + 1240));
            if ((v156 & 1) != (v157 & 1))
            {
              v158 = atomic_load((unsigned __int8 *)(v155 + 1240));
              if ((v158 & 1) == 0)
                goto LABEL_225;
LABEL_239:
              v163 = v153[1];
              v153[1] = *v153;
              v152 = i;
              if (v153 == i)
                goto LABEL_224;
              v164 = v150;
              while (1)
              {
                v166 = *(uint64_t *)((char *)i + v164 - 8);
                v167 = atomic_load((unsigned __int8 *)(v163 + 1240));
                v168 = atomic_load((unsigned __int8 *)(v166 + 1240));
                if ((v167 & 1) == (v168 & 1))
                {
                  v169 = *(_QWORD *)(v163 + 24);
                  v170 = *(_QWORD *)(v166 + 24);
                  v171 = v163;
                  if (!v169)
                    goto LABEL_248;
                  if (v169 != v170)
                  {
                    v171 = *(_QWORD *)(v169 + 72);
                    if (!v171)
                      v171 = v163;
LABEL_248:
                    if (v170)
                    {
                      v172 = *(_QWORD *)(v170 + 72);
                      if (v172)
                        v166 = v172;
                    }
                    result = *(float *)(v171 + 780);
                    if (result >= *(float *)(v166 + 780))
                    {
                      v152 = (uint64_t *)((char *)i + v164);
                      goto LABEL_224;
                    }
                    goto LABEL_242;
                  }
                  if (*(_DWORD *)(v163 + 32) >= *(_DWORD *)(v166 + 32))
                  {
LABEL_254:
                    v152 = v153;
LABEL_224:
                    *v152 = v163;
LABEL_225:
                    v147 = v151 + 1;
                    v150 += 8;
                    if (v151 + 1 == a2)
                      return result;
                    goto LABEL_226;
                  }
                }
                else
                {
                  v165 = atomic_load((unsigned __int8 *)(v163 + 1240));
                  if ((v165 & 1) == 0)
                    goto LABEL_254;
                }
LABEL_242:
                --v153;
                *(uint64_t *)((char *)i + v164) = *(uint64_t *)((char *)i + v164 - 8);
                v164 -= 8;
                if (!v164)
                {
                  v152 = i;
                  goto LABEL_224;
                }
              }
            }
            v159 = *(_QWORD *)(v155 + 24);
            v160 = *(_QWORD *)(v154 + 24);
            if (v159)
            {
              if (v159 == v160)
              {
                if (*(_DWORD *)(v155 + 32) >= *(_DWORD *)(v154 + 32))
                  goto LABEL_225;
                goto LABEL_239;
              }
              v161 = *(_QWORD *)(v159 + 72);
              if (v161)
                v155 = v161;
            }
            if (v160)
            {
              v162 = *(_QWORD *)(v160 + 72);
              if (v162)
                v154 = v162;
            }
            result = *(float *)(v155 + 780);
            if (result >= *(float *)(v154 + 780))
              goto LABEL_225;
            goto LABEL_239;
          }
          if (v149)
            return result;
          while (1)
          {
            v271 = a1;
            a1 = v147;
            v272 = *v271;
            v273 = v271[1];
            v274 = atomic_load((unsigned __int8 *)(v273 + 1240));
            v275 = atomic_load((unsigned __int8 *)(v272 + 1240));
            if ((v274 & 1) == (v275 & 1))
            {
              v277 = *(_QWORD *)(v273 + 24);
              v278 = *(_QWORD *)(v272 + 24);
              if (!v277)
                goto LABEL_395;
              if (v277 != v278)
              {
                v279 = *(_QWORD *)(v277 + 72);
                if (v279)
                  v273 = v279;
LABEL_395:
                if (v278)
                {
                  v280 = *(_QWORD *)(v278 + 72);
                  if (v280)
                    v272 = v280;
                }
                result = *(float *)(v273 + 780);
                if (result >= *(float *)(v272 + 780))
                  goto LABEL_387;
LABEL_401:
                v281 = *a1;
                while (1)
                {
                  while (1)
                  {
                    v283 = v271;
                    v271[1] = *v271;
                    v285 = *--v271;
                    v284 = v285;
                    v286 = atomic_load((unsigned __int8 *)(v281 + 1240));
                    v287 = atomic_load((unsigned __int8 *)(v285 + 1240));
                    if ((v286 & 1) == (v287 & 1))
                      break;
                    v282 = atomic_load((unsigned __int8 *)(v281 + 1240));
                    if ((v282 & 1) == 0)
                      goto LABEL_386;
                  }
                  v288 = *(_QWORD *)(v281 + 24);
                  v289 = *(_QWORD *)(v284 + 24);
                  v290 = v281;
                  if (v288)
                  {
                    if (v288 == v289)
                    {
                      if (*(_DWORD *)(v281 + 32) >= *(_DWORD *)(v284 + 32))
                        goto LABEL_386;
                      continue;
                    }
                    v290 = *(_QWORD *)(v288 + 72);
                    if (!v290)
                      v290 = v281;
                  }
                  if (v289)
                  {
                    v291 = *(_QWORD *)(v289 + 72);
                    if (v291)
                      v284 = v291;
                  }
                  result = *(float *)(v290 + 780);
                  if (result >= *(float *)(v284 + 780))
                  {
LABEL_386:
                    *v283 = v281;
                    goto LABEL_387;
                  }
                }
              }
              if (*(_DWORD *)(v273 + 32) < *(_DWORD *)(v272 + 32))
                goto LABEL_401;
            }
            else
            {
              v276 = atomic_load((unsigned __int8 *)(v273 + 1240));
              if ((v276 & 1) != 0)
                goto LABEL_401;
            }
LABEL_387:
            v147 = a1 + 1;
            if (a1 + 1 == a2)
              return result;
          }
        }
        if (!a3)
        {
          if (i == a2)
            return result;
          v173 = (v11 - 2) >> 1;
          v174 = v173;
LABEL_260:
          v176 = v174;
          if (v173 < v174)
            goto LABEL_259;
          v177 = (2 * v174) | 1;
          v175 = &i[v177];
          if (2 * v176 + 2 >= (uint64_t)v11)
          {
LABEL_265:
            v184 = *v175;
            v185 = i[v176];
            v186 = (unsigned __int8 *)(*v175 + 1240);
            v187 = atomic_load(v186);
            v188 = atomic_load((unsigned __int8 *)(v185 + 1240));
            if ((v187 & 1) != (v188 & 1))
            {
              v189 = atomic_load(v186);
              if ((v189 & 1) != 0)
                goto LABEL_259;
LABEL_287:
              v198 = i[v176];
              i[v176] = *v175;
              while (1)
              {
                if (v173 < v177)
                  goto LABEL_258;
                v200 = v175;
                v201 = 2 * v177;
                v177 = (2 * v177) | 1;
                v175 = &i[v177];
                v202 = v201 + 2;
                if (v202 >= (uint64_t)v11)
                  goto LABEL_295;
                v203 = *v175;
                v204 = v175[1];
                v205 = (unsigned __int8 *)(*v175 + 1240);
                v206 = atomic_load(v205);
                v207 = atomic_load((unsigned __int8 *)(v204 + 1240));
                if ((v206 & 1) != (v207 & 1))
                {
                  v208 = atomic_load(v205);
                  if ((v208 & 1) == 0)
                    goto LABEL_295;
LABEL_294:
                  ++v175;
                  v177 = v202;
                  goto LABEL_295;
                }
                v218 = *(_QWORD *)(v203 + 24);
                v219 = *(_QWORD *)(v204 + 24);
                if (v218)
                {
                  if (v218 == v219)
                  {
                    if (*(_DWORD *)(v203 + 32) < *(_DWORD *)(v204 + 32))
                      goto LABEL_294;
                    goto LABEL_295;
                  }
                  v220 = *(_QWORD *)(v218 + 72);
                  if (v220)
                    v203 = v220;
                }
                if (v219)
                {
                  v221 = *(_QWORD *)(v219 + 72);
                  if (v221)
                    v204 = v221;
                }
                result = *(float *)(v203 + 780);
                if (result < *(float *)(v204 + 780))
                  goto LABEL_294;
LABEL_295:
                v209 = *v175;
                v210 = (unsigned __int8 *)(*v175 + 1240);
                v211 = atomic_load(v210);
                v212 = atomic_load((unsigned __int8 *)(v198 + 1240));
                if ((v211 & 1) != (v212 & 1))
                {
                  v199 = atomic_load(v210);
                  if ((v199 & 1) != 0)
                    goto LABEL_257;
                  goto LABEL_289;
                }
                v213 = *(_QWORD *)(v209 + 24);
                v214 = *(_QWORD *)(v198 + 24);
                if (v213)
                {
                  if (v213 == v214)
                  {
                    if (*(_DWORD *)(v209 + 32) < *(_DWORD *)(v198 + 32))
                      goto LABEL_257;
                    goto LABEL_289;
                  }
                  v215 = *(_QWORD *)(v213 + 72);
                  if (v215)
                    v209 = v215;
                }
                v216 = v198;
                if (v214)
                {
                  v217 = *(_QWORD *)(v214 + 72);
                  if (v217)
                    v216 = v217;
                  else
                    v216 = v198;
                }
                result = *(float *)(v209 + 780);
                if (result < *(float *)(v216 + 780))
                {
LABEL_257:
                  v175 = v200;
LABEL_258:
                  *v175 = v198;
LABEL_259:
                  v174 = v176 - 1;
                  if (v176)
                    goto LABEL_260;
                  v222 = (unint64_t)v10 >> 3;
                  while (2)
                  {
                    v224 = 0;
                    v225 = *i;
                    v226 = i;
LABEL_327:
                    v227 = v226;
                    v226 += v224 + 1;
                    v228 = 2 * v224;
                    v224 = (2 * v224) | 1;
                    v229 = v228 + 2;
                    if (v229 < v222)
                    {
                      v230 = *v226;
                      v231 = v226[1];
                      v232 = (unsigned __int8 *)(*v226 + 1240);
                      v233 = atomic_load(v232);
                      v234 = atomic_load((unsigned __int8 *)(v231 + 1240));
                      if ((v233 & 1) != (v234 & 1))
                      {
                        v235 = atomic_load(v232);
                        if ((v235 & 1) == 0)
                          goto LABEL_326;
LABEL_325:
                        ++v226;
                        v224 = v229;
                        goto LABEL_326;
                      }
                      v236 = *(_QWORD *)(v230 + 24);
                      v237 = *(_QWORD *)(v231 + 24);
                      if (v236)
                      {
                        if (v236 == v237)
                        {
                          if (*(_DWORD *)(v230 + 32) >= *(_DWORD *)(v231 + 32))
                            goto LABEL_326;
                          goto LABEL_325;
                        }
                        v238 = *(_QWORD *)(v236 + 72);
                        if (v238)
                          v230 = v238;
                      }
                      if (v237)
                      {
                        v239 = *(_QWORD *)(v237 + 72);
                        if (v239)
                          v231 = v239;
                      }
                      result = *(float *)(v230 + 780);
                      if (result < *(float *)(v231 + 780))
                        goto LABEL_325;
                    }
LABEL_326:
                    *v227 = *v226;
                    if (v224 > (uint64_t)((unint64_t)(v222 - 2) >> 1))
                    {
                      if (v226 == --a2)
                      {
                        *v226 = v225;
                        goto LABEL_323;
                      }
                      *v226 = *a2;
                      *a2 = v225;
                      v240 = (char *)v226 - (char *)i + 8;
                      if (v240 >= 9)
                      {
                        v241 = (v240 >> 3) - 2;
                        v242 = v241 >> 1;
                        v243 = &i[v241 >> 1];
                        v244 = *v243;
                        v245 = *v226;
                        v246 = (unsigned __int8 *)(*v243 + 1240);
                        v247 = atomic_load(v246);
                        v248 = atomic_load((unsigned __int8 *)(v245 + 1240));
                        if ((v247 & 1) != (v248 & 1))
                        {
                          v249 = atomic_load(v246);
                          if ((v249 & 1) != 0)
                            goto LABEL_357;
                          goto LABEL_323;
                        }
                        v250 = *(_QWORD *)(v244 + 24);
                        v251 = *(_QWORD *)(v245 + 24);
                        if (v250)
                        {
                          if (v250 == v251)
                          {
                            if (*(_DWORD *)(v244 + 32) < *(_DWORD *)(v245 + 32))
                              goto LABEL_357;
                            goto LABEL_323;
                          }
                          v252 = *(_QWORD *)(v250 + 72);
                          if (v252)
                            v244 = v252;
                        }
                        if (v251)
                        {
                          v253 = *(_QWORD *)(v251 + 72);
                          if (v253)
                            v245 = v253;
                        }
                        result = *(float *)(v244 + 780);
                        if (result >= *(float *)(v245 + 780))
                          goto LABEL_323;
LABEL_357:
                        v254 = *v226;
                        *v226 = *v243;
                        if (v241 < 2)
                        {
LABEL_358:
                          v255 = v243;
LABEL_359:
                          *v255 = v254;
                          goto LABEL_323;
                        }
                        while (2)
                        {
                          v257 = v242 - 1;
                          v242 = (v242 - 1) >> 1;
                          v255 = &i[v242];
                          v258 = *v255;
                          v259 = (unsigned __int8 *)(*v255 + 1240);
                          v260 = atomic_load(v259);
                          v261 = atomic_load((unsigned __int8 *)(v254 + 1240));
                          if ((v260 & 1) == (v261 & 1))
                          {
                            v262 = *(_QWORD *)(v258 + 24);
                            v263 = *(_QWORD *)(v254 + 24);
                            if (v262)
                            {
                              if (v262 != v263)
                              {
                                v264 = *(_QWORD *)(v262 + 72);
                                if (v264)
                                  v258 = v264;
                                goto LABEL_367;
                              }
                              if (*(_DWORD *)(v258 + 32) >= *(_DWORD *)(v254 + 32))
                                goto LABEL_358;
                            }
                            else
                            {
LABEL_367:
                              v265 = v254;
                              if (v263)
                              {
                                v266 = *(_QWORD *)(v263 + 72);
                                if (v266)
                                  v265 = v266;
                                else
                                  v265 = v254;
                              }
                              result = *(float *)(v258 + 780);
                              if (result >= *(float *)(v265 + 780))
                                goto LABEL_358;
                            }
                          }
                          else
                          {
                            v256 = atomic_load(v259);
                            if ((v256 & 1) == 0)
                              goto LABEL_358;
                          }
                          *v243 = *v255;
                          v243 = &i[v242];
                          if (v257 <= 1)
                            goto LABEL_359;
                          continue;
                        }
                      }
LABEL_323:
                      if (v222-- <= 2)
                        return result;
                      continue;
                    }
                    goto LABEL_327;
                  }
                }
LABEL_289:
                *v200 = *v175;
              }
            }
            v190 = *(_QWORD *)(v184 + 24);
            v191 = *(_QWORD *)(v185 + 24);
            if (v190)
            {
              if (v190 == v191)
              {
                if (*(_DWORD *)(v184 + 32) < *(_DWORD *)(v185 + 32))
                  goto LABEL_259;
                goto LABEL_287;
              }
              v192 = *(_QWORD *)(v190 + 72);
              if (v192)
                v184 = v192;
            }
            if (v191)
            {
              v193 = *(_QWORD *)(v191 + 72);
              if (v193)
                v185 = v193;
            }
            result = *(float *)(v184 + 780);
            if (result < *(float *)(v185 + 780))
              goto LABEL_259;
            goto LABEL_287;
          }
          v178 = *v175;
          v179 = v175[1];
          v180 = (unsigned __int8 *)(*v175 + 1240);
          v181 = atomic_load(v180);
          v182 = atomic_load((unsigned __int8 *)(v179 + 1240));
          if ((v181 & 1) != (v182 & 1))
          {
            v183 = atomic_load(v180);
            if ((v183 & 1) == 0)
              goto LABEL_265;
            goto LABEL_264;
          }
          v194 = *(_QWORD *)(v178 + 24);
          v195 = *(_QWORD *)(v179 + 24);
          if (v194)
          {
            if (v194 == v195)
            {
              if (*(_DWORD *)(v178 + 32) >= *(_DWORD *)(v179 + 32))
                goto LABEL_265;
              goto LABEL_264;
            }
            v196 = *(_QWORD *)(v194 + 72);
            if (v196)
              v178 = v196;
          }
          if (v195)
          {
            v197 = *(_QWORD *)(v195 + 72);
            if (v197)
              v179 = v197;
          }
          result = *(float *)(v178 + 780);
          if (result >= *(float *)(v179 + 780))
            goto LABEL_265;
LABEL_264:
          ++v175;
          v177 = 2 * v176 + 2;
          goto LABEL_265;
        }
        v12 = v11 >> 1;
        v13 = &i[v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPoiLabelSorter &,md::Label **>(&a1[v11 >> 1], a1, a2 - 1);
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_11;
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPoiLabelSorter &,md::Label **>(a1, &a1[v11 >> 1], a2 - 1);
          v14 = &a1[v12];
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPoiLabelSorter &,md::Label **>(a1 + 1, v14 - 1, a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPoiLabelSorter &,md::Label **>(a1 + 2, &a1[v12 + 1], a2 - 3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPoiLabelSorter &,md::Label **>(v14 - 1, v13, &a1[v12 + 1]);
          v16 = *a1;
          *a1 = *v14;
          *v14 = v16;
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_11;
        }
        v18 = *(a1 - 1);
        v17 = *a1;
        v19 = atomic_load((unsigned __int8 *)(v18 + 1240));
        v20 = atomic_load((unsigned __int8 *)(v17 + 1240));
        if ((v19 & 1) != (v20 & 1))
        {
          v21 = atomic_load((unsigned __int8 *)(v18 + 1240));
          if ((v21 & 1) != 0)
            goto LABEL_11;
          goto LABEL_113;
        }
        v83 = *(_QWORD *)(v18 + 24);
        v84 = *(_QWORD *)(v17 + 24);
        if (!v83)
          goto LABEL_109;
        if (v83 == v84)
        {
          if (*(_DWORD *)(v18 + 32) < *(_DWORD *)(v17 + 32))
            goto LABEL_11;
LABEL_113:
          v87 = *a1;
          v88 = *v8;
          v89 = (unsigned __int8 *)(*a1 + 1240);
          v90 = atomic_load(v89);
          v91 = atomic_load((unsigned __int8 *)(v88 + 1240));
          if ((v90 & 1) != (v91 & 1))
          {
            v92 = atomic_load(v89);
            if ((v92 & 1) == 0)
              goto LABEL_115;
            goto LABEL_141;
          }
          v101 = *(_QWORD *)(v87 + 24);
          v102 = *(_QWORD *)(v88 + 24);
          v103 = *a1;
          if (v101)
          {
            if (v101 == v102)
            {
              if (*(_DWORD *)(v87 + 32) >= *(_DWORD *)(v88 + 32))
                goto LABEL_115;
              goto LABEL_141;
            }
            v103 = *(_QWORD *)(v101 + 72);
            if (!v103)
              v103 = *a1;
          }
          if (v102)
          {
            v104 = *(_QWORD *)(v102 + 72);
            if (v104)
              v88 = v104;
          }
          result = *(float *)(v103 + 780);
          if (result >= *(float *)(v88 + 780))
          {
LABEL_115:
            for (i = a1 + 1; ; ++i)
            {
              if (i >= a2)
                goto LABEL_155;
              v94 = *i;
              v95 = atomic_load((unsigned __int8 *)(v87 + 1240));
              v96 = atomic_load((unsigned __int8 *)(v94 + 1240));
              if ((v95 & 1) != (v96 & 1))
              {
                v93 = atomic_load((unsigned __int8 *)(v87 + 1240));
                if ((v93 & 1) != 0)
                  goto LABEL_155;
                continue;
              }
              v97 = *(_QWORD *)(v87 + 24);
              v98 = *(_QWORD *)(v94 + 24);
              v99 = *a1;
              if (v97)
              {
                if (v97 == v98)
                {
                  if (*(_DWORD *)(v87 + 32) < *(_DWORD *)(v94 + 32))
                    goto LABEL_155;
                  continue;
                }
                v99 = *(_QWORD *)(v97 + 72);
                if (!v99)
                  v99 = *a1;
              }
              if (v98)
              {
                v100 = *(_QWORD *)(v98 + 72);
                if (v100)
                  v94 = v100;
              }
              result = *(float *)(v99 + 780);
              if (result < *(float *)(v94 + 780))
                goto LABEL_155;
            }
          }
LABEL_141:
          for (i = a1 + 1; ; ++i)
          {
            v106 = *i;
            v107 = atomic_load((unsigned __int8 *)(v87 + 1240));
            v108 = atomic_load((unsigned __int8 *)(v106 + 1240));
            if ((v107 & 1) != (v108 & 1))
            {
              v105 = atomic_load((unsigned __int8 *)(v87 + 1240));
              if ((v105 & 1) != 0)
                goto LABEL_155;
              continue;
            }
            v109 = *(_QWORD *)(v87 + 24);
            v110 = *(_QWORD *)(v106 + 24);
            v111 = *a1;
            if (!v109)
              goto LABEL_149;
            if (v109 != v110)
              break;
            if (*(_DWORD *)(v87 + 32) < *(_DWORD *)(v106 + 32))
              goto LABEL_155;
LABEL_143:
            ;
          }
          v111 = *(_QWORD *)(v109 + 72);
          if (!v111)
            v111 = *a1;
LABEL_149:
          if (v110)
          {
            v112 = *(_QWORD *)(v110 + 72);
            if (v112)
              v106 = v112;
          }
          result = *(float *)(v111 + 780);
          if (result >= *(float *)(v106 + 780))
            goto LABEL_143;
LABEL_155:
          j = a2;
          if (i < a2)
          {
            for (j = a2 - 1; ; --j)
            {
              v115 = *j;
              v116 = atomic_load((unsigned __int8 *)(v87 + 1240));
              v117 = atomic_load((unsigned __int8 *)(v115 + 1240));
              if ((v116 & 1) != (v117 & 1))
              {
                v114 = atomic_load((unsigned __int8 *)(v87 + 1240));
                if ((v114 & 1) == 0)
                  break;
                continue;
              }
              v118 = *(_QWORD *)(v87 + 24);
              v119 = *(_QWORD *)(v115 + 24);
              v120 = *a1;
              if (v118)
              {
                if (v118 == v119)
                {
                  if (*(_DWORD *)(v87 + 32) >= *(_DWORD *)(v115 + 32))
                    break;
                  continue;
                }
                v120 = *(_QWORD *)(v118 + 72);
                if (!v120)
                  v120 = *a1;
              }
              if (v119)
              {
                v121 = *(_QWORD *)(v119 + 72);
                if (v121)
                  v115 = v121;
              }
              result = *(float *)(v120 + 780);
              if (result >= *(float *)(v115 + 780))
                break;
            }
          }
LABEL_198:
          if (i < j)
          {
            v122 = *i;
            *i++ = *j;
            *j = v122;
            while (1)
            {
              v124 = *i;
              v125 = atomic_load((unsigned __int8 *)(v87 + 1240));
              v126 = atomic_load((unsigned __int8 *)(v124 + 1240));
              if ((v125 & 1) != (v126 & 1))
              {
                v123 = atomic_load((unsigned __int8 *)(v87 + 1240));
                if ((v123 & 1) != 0)
                  goto LABEL_187;
                goto LABEL_173;
              }
              v127 = *(_QWORD *)(v87 + 24);
              v128 = *(_QWORD *)(v124 + 24);
              v129 = v87;
              if (v127)
              {
                if (v127 == v128)
                {
                  if (*(_DWORD *)(v87 + 32) < *(_DWORD *)(v124 + 32))
                    goto LABEL_187;
                  goto LABEL_173;
                }
                v129 = *(_QWORD *)(v127 + 72);
                if (!v129)
                  v129 = v87;
              }
              if (v128)
              {
                v130 = *(_QWORD *)(v128 + 72);
                if (v130)
                  v124 = v130;
              }
              result = *(float *)(v129 + 780);
              if (result < *(float *)(v124 + 780))
              {
                while (1)
                {
LABEL_187:
                  while (1)
                  {
                    v133 = *--j;
                    v132 = v133;
                    v134 = atomic_load((unsigned __int8 *)(v87 + 1240));
                    v135 = atomic_load((unsigned __int8 *)(v133 + 1240));
                    if ((v134 & 1) == (v135 & 1))
                      break;
                    v131 = atomic_load((unsigned __int8 *)(v87 + 1240));
                    if ((v131 & 1) == 0)
                      goto LABEL_198;
                  }
                  v136 = *(_QWORD *)(v87 + 24);
                  v137 = *(_QWORD *)(v132 + 24);
                  v138 = v87;
                  if (!v136)
                    goto LABEL_192;
                  if (v136 == v137)
                  {
                    if (*(_DWORD *)(v87 + 32) >= *(_DWORD *)(v132 + 32))
                      goto LABEL_198;
                  }
                  else
                  {
                    v138 = *(_QWORD *)(v136 + 72);
                    if (!v138)
                      v138 = v87;
LABEL_192:
                    if (v137)
                    {
                      v139 = *(_QWORD *)(v137 + 72);
                      if (v139)
                        v132 = v139;
                    }
                    result = *(float *)(v138 + 780);
                    if (result >= *(float *)(v132 + 780))
                      goto LABEL_198;
                  }
                }
              }
LABEL_173:
              ++i;
            }
          }
          v140 = i - 1;
          if (i - 1 != a1)
            *a1 = *v140;
          a4 = 0;
          *v140 = v87;
          continue;
        }
        v85 = *(_QWORD *)(v83 + 72);
        if (v85)
          v18 = v85;
LABEL_109:
        if (v84)
        {
          v86 = *(_QWORD *)(v84 + 72);
          if (v86)
            v17 = v86;
        }
        result = *(float *)(v18 + 780);
        if (result >= *(float *)(v17 + 780))
          goto LABEL_113;
LABEL_11:
        v22 = a1 + 1;
        v23 = *a1;
        while (2)
        {
          v25 = *v22;
          v26 = (unsigned __int8 *)(*v22 + 1240);
          v27 = atomic_load(v26);
          v28 = atomic_load((unsigned __int8 *)(v23 + 1240));
          if ((v27 & 1) != (v28 & 1))
          {
            v24 = atomic_load(v26);
            if ((v24 & 1) == 0)
              goto LABEL_26;
LABEL_13:
            ++v22;
            continue;
          }
          break;
        }
        v29 = *(_QWORD *)(v25 + 24);
        v30 = *(_QWORD *)(v23 + 24);
        if (!v29)
          goto LABEL_19;
        if (v29 == v30)
        {
          if (*(_DWORD *)(v25 + 32) >= *(_DWORD *)(v23 + 32))
            goto LABEL_26;
          goto LABEL_13;
        }
        v31 = *(_QWORD *)(v29 + 72);
        if (v31)
          v25 = v31;
LABEL_19:
        v32 = *a1;
        if (v30)
        {
          v33 = *(_QWORD *)(v30 + 72);
          if (v33)
            v32 = v33;
          else
            v32 = *a1;
        }
        if (*(float *)(v25 + 780) < *(float *)(v32 + 780))
          goto LABEL_13;
LABEL_26:
        v34 = v22 - 1;
        k = a2 - 1;
        if (v22 - 1 != a1)
        {
          while (1)
          {
            v37 = *k;
            v38 = (unsigned __int8 *)(*k + 1240);
            v39 = atomic_load(v38);
            v40 = atomic_load((unsigned __int8 *)(v23 + 1240));
            if ((v39 & 1) != (v40 & 1))
            {
              v36 = atomic_load(v38);
              if ((v36 & 1) != 0)
                goto LABEL_66;
              goto LABEL_30;
            }
            v41 = *(_QWORD *)(v37 + 24);
            v42 = *(_QWORD *)(v23 + 24);
            if (v41)
            {
              if (v41 == v42)
              {
                if (*(_DWORD *)(v37 + 32) < *(_DWORD *)(v23 + 32))
                  goto LABEL_66;
                goto LABEL_30;
              }
              v43 = *(_QWORD *)(v41 + 72);
              if (v43)
                v37 = v43;
            }
            v44 = *a1;
            if (v42)
            {
              v45 = *(_QWORD *)(v42 + 72);
              if (v45)
                v44 = v45;
              else
                v44 = *a1;
            }
            if (*(float *)(v37 + 780) < *(float *)(v44 + 780))
              goto LABEL_66;
LABEL_30:
            --k;
          }
        }
        k = a2;
        if (v22 < a2)
        {
          for (k = a2 - 1; ; --k)
          {
            v47 = *k;
            v48 = (unsigned __int8 *)(*k + 1240);
            v49 = atomic_load(v48);
            v50 = atomic_load((unsigned __int8 *)(v23 + 1240));
            if ((v49 & 1) != (v50 & 1))
            {
              v51 = atomic_load(v48);
              if ((v51 & 1) != 0 || v22 >= k)
                break;
              continue;
            }
            v52 = *(_QWORD *)(v47 + 24);
            v53 = *(_QWORD *)(v23 + 24);
            if (v52)
            {
              if (v52 == v53)
              {
                if (*(_DWORD *)(v47 + 32) < *(_DWORD *)(v23 + 32) || v22 >= k)
                  break;
                continue;
              }
              v54 = *(_QWORD *)(v52 + 72);
              if (v54)
                v47 = v54;
            }
            v55 = *a1;
            if (v53)
            {
              v56 = *(_QWORD *)(v53 + 72);
              if (v56)
                v55 = v56;
              else
                v55 = *a1;
            }
            if (*(float *)(v47 + 780) < *(float *)(v55 + 780) || v22 >= k)
              break;
          }
        }
LABEL_66:
        if (v22 < k)
        {
          v58 = v22;
          v59 = k;
          do
          {
            v60 = *v58;
            *v58++ = *v59;
            *v59 = v60;
            while (1)
            {
              v62 = *v58;
              v63 = (unsigned __int8 *)(*v58 + 1240);
              v64 = atomic_load(v63);
              v65 = atomic_load((unsigned __int8 *)(v23 + 1240));
              if ((v64 & 1) != (v65 & 1))
              {
                v61 = atomic_load(v63);
                if ((v61 & 1) == 0)
                  goto LABEL_84;
                goto LABEL_71;
              }
              v66 = *(_QWORD *)(v62 + 24);
              v67 = *(_QWORD *)(v23 + 24);
              if (!v66)
                goto LABEL_77;
              if (v66 != v67)
                break;
              if (*(_DWORD *)(v62 + 32) >= *(_DWORD *)(v23 + 32))
                goto LABEL_84;
LABEL_71:
              ++v58;
            }
            v68 = *(_QWORD *)(v66 + 72);
            if (v68)
              v62 = v68;
LABEL_77:
            v69 = v23;
            if (v67)
            {
              v70 = *(_QWORD *)(v67 + 72);
              if (v70)
                v69 = v70;
              else
                v69 = v23;
            }
            if (*(float *)(v62 + 780) < *(float *)(v69 + 780))
              goto LABEL_71;
LABEL_84:
            v34 = v58 - 1;
            do
            {
              while (1)
              {
                while (1)
                {
                  v73 = *--v59;
                  v72 = v73;
                  v74 = (unsigned __int8 *)(v73 + 1240);
                  v75 = atomic_load((unsigned __int8 *)(v73 + 1240));
                  v76 = atomic_load((unsigned __int8 *)(v23 + 1240));
                  if ((v75 & 1) == (v76 & 1))
                    break;
                  v71 = atomic_load(v74);
                  if ((v71 & 1) != 0)
                    goto LABEL_68;
                }
                v77 = *(_QWORD *)(v72 + 24);
                v78 = *(_QWORD *)(v23 + 24);
                if (!v77)
                  break;
                if (v77 != v78)
                {
                  v79 = *(_QWORD *)(v77 + 72);
                  if (v79)
                    v72 = v79;
                  break;
                }
                if (*(_DWORD *)(v72 + 32) < *(_DWORD *)(v23 + 32))
                  goto LABEL_68;
              }
              v80 = v23;
              if (v78)
              {
                v81 = *(_QWORD *)(v78 + 72);
                if (v81)
                  v80 = v81;
                else
                  v80 = v23;
              }
            }
            while (*(float *)(v72 + 780) >= *(float *)(v80 + 780));
LABEL_68:
            ;
          }
          while (v58 < v59);
        }
        if (v34 != a1)
          *a1 = *v34;
        *v34 = v23;
        if (v22 < k)
        {
LABEL_104:
          std::__introsort<std::_ClassicAlgPolicy,md::MuninPoiLabelSorter &,md::Label **,false>(a1, v34, a3, a4 & 1);
          a4 = 0;
          i = v34 + 1;
          continue;
        }
        v82 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPoiLabelSorter &,md::Label **>(a1, v34);
        i = v34 + 1;
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninPoiLabelSorter &,md::Label **>(v34 + 1, a2))
        {
          if (v82)
            continue;
          goto LABEL_104;
        }
        a2 = v34;
        if (!v82)
          goto LABEL_1;
        return result;
    }
  }
}

  v7 = a2 - 52;
  v192 = a2 - 156;
  v193 = a2 - 104;
  v245 = a2;
  v194 = a2 - 52;
  while (2)
  {
    v8 = a1;
    v9 = (char *)a2 - (char *)a1;
    v10 = 0x4EC4EC4EC4EC4EC5 * (((char *)a2 - (char *)a1) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(unsigned __int8 *)v7 < *v8)
          goto LABEL_131;
        return;
      case 3:
        v80 = (__int16 *)(v8 + 104);
        v79 = v8[104];
        v81 = *(unsigned __int8 *)v7;
        if (v79 < *v8)
        {
          if (v81 >= v79)
          {
            std::swap[abi:nn180100]<md::LabelExternalTextElement>((__int16 *)v8, (__int16 *)v8 + 52);
            if (*(unsigned __int8 *)v7 >= v8[104])
              return;
            v82 = (__int16 *)(v8 + 104);
          }
          else
          {
LABEL_131:
            v82 = (__int16 *)v8;
          }
          std::swap[abi:nn180100]<md::LabelExternalTextElement>(v82, v7);
          return;
        }
        if (v81 < v79)
        {
          v84 = (__int16 *)(v8 + 104);
          v85 = v7;
          goto LABEL_278;
        }
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalFeature::finalize(void)::{lambda(md::LabelExternalTextElement const&,md::LabelExternalTextElement const&)#1} &,md::LabelExternalTextElement*>((__int16 *)v8, (__int16 *)v8 + 52, (__int16 *)v8 + 104, v7);
        return;
      case 5:
        v80 = (__int16 *)(v8 + 104);
        v83 = v8 + 208;
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalFeature::finalize(void)::{lambda(md::LabelExternalTextElement const&,md::LabelExternalTextElement const&)#1} &,md::LabelExternalTextElement*>((__int16 *)v8, (__int16 *)v8 + 52, (__int16 *)v8 + 104, (__int16 *)v8 + 156);
        if (*(unsigned __int8 *)v7 < v8[312])
        {
          std::swap[abi:nn180100]<md::LabelExternalTextElement>((__int16 *)v8 + 156, v7);
          if (v8[312] < *v83)
          {
            std::swap[abi:nn180100]<md::LabelExternalTextElement>((__int16 *)v8 + 104, (__int16 *)v8 + 156);
            if (*v83 < *(unsigned __int8 *)v80)
            {
              v84 = (__int16 *)(v8 + 104);
              v85 = (__int16 *)(v8 + 208);
LABEL_278:
              std::swap[abi:nn180100]<md::LabelExternalTextElement>(v84, v85);
              if (v8[104] < *v8)
                std::swap[abi:nn180100]<md::LabelExternalTextElement>((__int16 *)v8, v80);
            }
          }
        }
        return;
      default:
        v247 = v8;
        if (v9 <= 2495)
        {
          v86 = (__int16 *)(v8 + 104);
          v88 = v8 == (unsigned __int8 *)a2 || v86 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v88)
            {
              v89 = 0;
              v90 = v8;
              do
              {
                v91 = (unsigned __int8 *)v86;
                if (v90[104] < *v90)
                {
                  v92 = *v86;
                  v209 = (void *)*((_QWORD *)v90 + 14);
                  *(_QWORD *)v264 = *((_QWORD *)v90 + 15);
                  *(_QWORD *)&v264[7] = *(_QWORD *)(v90 + 127);
                  v93 = v90[135];
                  *((_QWORD *)v90 + 14) = 0;
                  *((_QWORD *)v90 + 15) = 0;
                  v221 = (void *)*((_QWORD *)v90 + 17);
                  *(_QWORD *)v258 = *((_QWORD *)v90 + 18);
                  *(_QWORD *)&v258[7] = *(_QWORD *)(v90 + 151);
                  v215 = v90[159];
                  *((_QWORD *)v90 + 16) = 0;
                  *((_QWORD *)v90 + 17) = 0;
                  *((_QWORD *)v90 + 18) = 0;
                  *((_QWORD *)v90 + 19) = 0;
                  v233 = (void *)*((_QWORD *)v90 + 20);
                  *(_QWORD *)&v252[7] = *(_QWORD *)(v90 + 175);
                  *(_QWORD *)v252 = *((_QWORD *)v90 + 21);
                  v227 = v90[183];
                  *((_QWORD *)v90 + 20) = 0;
                  *((_QWORD *)v90 + 21) = 0;
                  v94 = v90[184];
                  v95 = *(_OWORD *)(v90 + 185);
                  *(_QWORD *)&v273[14] = *(_QWORD *)(v90 + 199);
                  v96 = v90[207];
                  *((_QWORD *)v90 + 22) = 0;
                  *((_QWORD *)v90 + 23) = 0;
                  *((_QWORD *)v90 + 24) = 0;
                  *((_QWORD *)v90 + 25) = 0;
                  v97 = v89;
                  *(_OWORD *)v273 = v95;
                  v240 = v96;
                  while (1)
                  {
                    v98 = v97;
                    v99 = &v8[v97];
                    *(_WORD *)&v8[v97 + 104] = *(_WORD *)&v8[v97];
                    v100 = (uint64_t)&v8[v97 + 112];
                    if ((char)v8[v97 + 135] < 0)
                      operator delete(*(void **)v100);
                    *(_OWORD *)v100 = *(_OWORD *)(v99 + 8);
                    *(_QWORD *)(v100 + 16) = *((_QWORD *)v99 + 3);
                    v99[31] = 0;
                    v99[8] = 0;
                    v101 = v99 + 136;
                    if ((char)v99[159] < 0)
                      operator delete(*(void **)v101);
                    v102 = &v8[v98];
                    *(_OWORD *)v101 = *(_OWORD *)&v8[v98 + 32];
                    *((_QWORD *)v101 + 2) = *(_QWORD *)&v8[v98 + 48];
                    v102[55] = 0;
                    v102[32] = 0;
                    v103 = (void **)&v8[v98 + 160];
                    if ((char)v8[v98 + 183] < 0)
                      operator delete(*v103);
                    *(_OWORD *)v103 = *(_OWORD *)(v102 + 56);
                    *(_QWORD *)&v8[v98 + 176] = *((_QWORD *)v102 + 9);
                    v102[79] = 0;
                    v102[56] = 0;
                    v104 = (void **)(v102 + 184);
                    if ((char)v102[207] < 0)
                      operator delete(*v104);
                    v105 = &v8[v98];
                    *(_OWORD *)v104 = *(_OWORD *)&v8[v98 + 80];
                    *((_QWORD *)v102 + 25) = *(_QWORD *)&v8[v98 + 96];
                    v105[103] = 0;
                    v105[80] = 0;
                    if (!v98)
                      break;
                    v106 = *(v105 - 104);
                    v97 = v98 - 104;
                    if (v106 <= v92)
                    {
                      v107 = v94;
                      v108 = &v8[v98];
                      v105 = &v8[v98];
                      goto LABEL_163;
                    }
                  }
                  v107 = v94;
                  v108 = v8;
LABEL_163:
                  v109 = (void **)(v105 + 8);
                  v110 = (void **)(v105 + 32);
                  v111 = (void **)(v105 + 80);
                  v112 = (void **)(v105 + 56);
                  *(_WORD *)v108 = v92;
                  if ((char)v108[31] < 0)
                    operator delete(*v109);
                  *v109 = v209;
                  *((_QWORD *)v108 + 2) = *(_QWORD *)v264;
                  *(_QWORD *)(v108 + 23) = *(_QWORD *)&v264[7];
                  v108[31] = v93;
                  if ((char)v108[55] < 0)
                    operator delete(*v110);
                  *v110 = v221;
                  *((_QWORD *)v108 + 5) = *(_QWORD *)v258;
                  *(_QWORD *)(v108 + 47) = *(_QWORD *)&v258[7];
                  v108[55] = v215;
                  v8 = v247;
                  if ((char)v108[79] < 0)
                    operator delete(*v112);
                  *v112 = v233;
                  *((_QWORD *)v108 + 8) = *(_QWORD *)v252;
                  *(_QWORD *)(v108 + 71) = *(_QWORD *)&v252[7];
                  v108[79] = v227;
                  if ((char)v108[103] < 0)
                    operator delete(*v111);
                  *(_BYTE *)v111 = v107;
                  *(_OWORD *)(v108 + 81) = *(_OWORD *)v273;
                  *(_QWORD *)(v108 + 95) = *(_QWORD *)&v273[14];
                  v108[103] = v240;
                  a2 = v245;
                }
                v86 = (__int16 *)(v91 + 104);
                v89 += 104;
                v90 = v91;
              }
              while (v91 + 104 != (unsigned __int8 *)a2);
            }
          }
          else if (!v88)
          {
            v175 = v8 - 104;
            do
            {
              v176 = (unsigned __int8 *)v86;
              if (v8[104] < *v8)
              {
                v177 = *v86;
                v178 = v8;
                v179 = *((_QWORD *)v8 + 14);
                *(_QWORD *)v267 = *((_QWORD *)v178 + 15);
                *(_QWORD *)&v267[7] = *(_QWORD *)(v178 + 127);
                v180 = v178[135];
                *((_QWORD *)v178 + 14) = 0;
                *((_QWORD *)v178 + 15) = 0;
                v181 = *((_QWORD *)v178 + 17);
                *(_QWORD *)v261 = *((_QWORD *)v178 + 18);
                *(_QWORD *)&v261[7] = *(_QWORD *)(v178 + 151);
                v182 = v178[159];
                *((_QWORD *)v178 + 16) = 0;
                *((_QWORD *)v178 + 17) = 0;
                *((_QWORD *)v178 + 18) = 0;
                *((_QWORD *)v178 + 19) = 0;
                v237 = *((_QWORD *)v178 + 20);
                *(_QWORD *)&v255[7] = *(_QWORD *)(v178 + 175);
                *(_QWORD *)v255 = *((_QWORD *)v178 + 21);
                v183 = v178[183];
                *((_QWORD *)v178 + 20) = 0;
                *((_QWORD *)v178 + 21) = 0;
                v248 = v178[184];
                v184 = *(_OWORD *)(v178 + 185);
                *(_QWORD *)&v276[14] = *(_QWORD *)(v178 + 199);
                v244 = v178[207];
                *((_QWORD *)v178 + 22) = 0;
                *((_QWORD *)v178 + 23) = 0;
                *((_QWORD *)v178 + 24) = 0;
                *((_QWORD *)v178 + 25) = 0;
                v185 = v175;
                *(_OWORD *)v276 = v184;
                do
                {
                  v186 = v185;
                  *((_WORD *)v185 + 104) = *((_WORD *)v185 + 52);
                  v187 = v185 + 216;
                  if ((char)v186[239] < 0)
                    operator delete(*(void **)v187);
                  *(_OWORD *)v187 = *((_OWORD *)v186 + 7);
                  *((_QWORD *)v187 + 2) = *((_QWORD *)v186 + 16);
                  v186[135] = 0;
                  v186[112] = 0;
                  v188 = (void **)(v186 + 240);
                  if ((char)v186[263] < 0)
                    operator delete(*v188);
                  *(_OWORD *)v188 = *(_OWORD *)(v186 + 136);
                  *((_QWORD *)v186 + 32) = *((_QWORD *)v186 + 19);
                  v186[159] = 0;
                  v186[136] = 0;
                  v189 = (void **)(v186 + 264);
                  if ((char)v186[287] < 0)
                    operator delete(*v189);
                  *(_OWORD *)v189 = *((_OWORD *)v186 + 10);
                  *((_QWORD *)v186 + 35) = *((_QWORD *)v186 + 22);
                  v186[183] = 0;
                  v186[160] = 0;
                  v190 = (void **)(v186 + 288);
                  if ((char)v186[311] < 0)
                    operator delete(*v190);
                  *(_OWORD *)v190 = *(_OWORD *)(v186 + 184);
                  *((_QWORD *)v186 + 38) = *((_QWORD *)v186 + 25);
                  v186[207] = 0;
                  v186[184] = 0;
                  v185 = v186 - 104;
                }
                while (*v186 > v177);
                *((_WORD *)v186 + 52) = v177;
                v191 = v186 + 104;
                if ((char)v191[31] < 0)
                  operator delete(*((void **)v185 + 27));
                *((_QWORD *)v185 + 27) = v179;
                *(_QWORD *)(v191 + 23) = *(_QWORD *)&v267[7];
                *((_QWORD *)v191 + 2) = *(_QWORD *)v267;
                v185[239] = v180;
                if ((char)v185[263] < 0)
                  operator delete(*((void **)v185 + 30));
                *((_QWORD *)v185 + 30) = v181;
                *(_QWORD *)(v191 + 47) = *(_QWORD *)&v261[7];
                *((_QWORD *)v191 + 5) = *(_QWORD *)v261;
                v185[263] = v182;
                if ((char)v185[287] < 0)
                  operator delete(*((void **)v185 + 33));
                *((_QWORD *)v185 + 33) = v237;
                *(_QWORD *)(v191 + 71) = *(_QWORD *)&v255[7];
                *((_QWORD *)v191 + 8) = *(_QWORD *)v255;
                v185[287] = v183;
                if ((char)v185[311] < 0)
                  operator delete(*((void **)v185 + 36));
                v185[288] = v248;
                *(_QWORD *)(v191 + 95) = *(_QWORD *)&v276[14];
                *(_OWORD *)(v191 + 81) = *(_OWORD *)v276;
                v185[311] = v244;
                a2 = v245;
              }
              v86 = (__int16 *)(v176 + 104);
              v175 += 104;
              v8 = v176;
            }
            while (v176 + 104 != (unsigned __int8 *)a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != (unsigned __int8 *)a2)
          {
            v113 = (unint64_t)(v10 - 2) >> 1;
            v241 = v113;
            do
            {
              v114 = v113;
              if (v241 >= v113)
              {
                v115 = (2 * v113) | 1;
                v116 = &v247[104 * v115];
                if (2 * v114 + 2 >= v10)
                {
                  v117 = *v116;
                }
                else
                {
                  v117 = *v116;
                  v118 = v116[104];
                  v119 = v117 >= v118;
                  if (v117 <= v118)
                    v117 = v116[104];
                  if (!v119)
                  {
                    v116 += 104;
                    v115 = 2 * v114 + 2;
                  }
                }
                v120 = &v247[104 * v114];
                if (v117 >= *v120)
                {
                  v121 = *(_WORD *)v120;
                  v122 = &v247[104 * v114];
                  v200 = *((_QWORD *)v122 + 1);
                  *(_QWORD *)&v265[7] = *(_QWORD *)(v122 + 23);
                  *(_QWORD *)v265 = *((_QWORD *)v122 + 2);
                  v197 = v120[31];
                  *((_QWORD *)v122 + 1) = 0;
                  *((_QWORD *)v122 + 2) = 0;
                  *((_QWORD *)v122 + 3) = 0;
                  v204 = *((_QWORD *)v122 + 4);
                  *(_QWORD *)v259 = *((_QWORD *)v122 + 5);
                  *(_QWORD *)&v259[7] = *(_QWORD *)(v122 + 47);
                  v210 = v120[55];
                  *((_QWORD *)v122 + 4) = 0;
                  *((_QWORD *)v122 + 5) = 0;
                  *((_QWORD *)v122 + 6) = 0;
                  v222 = *((_QWORD *)v122 + 7);
                  *(_QWORD *)&v253[7] = *(_QWORD *)(v122 + 71);
                  *(_QWORD *)v253 = *((_QWORD *)v122 + 8);
                  v216 = v120[79];
                  *((_QWORD *)v122 + 7) = 0;
                  *((_QWORD *)v122 + 8) = 0;
                  *((_QWORD *)v122 + 9) = 0;
                  v234 = v122[80];
                  *(_QWORD *)&v274[14] = *(_QWORD *)(v120 + 95);
                  *(_OWORD *)v274 = *(_OWORD *)(v120 + 81);
                  v228 = v120[103];
                  *((_QWORD *)v122 + 10) = 0;
                  *((_QWORD *)v122 + 11) = 0;
                  *((_QWORD *)v122 + 12) = 0;
                  do
                  {
                    v126 = v116;
                    v127 = v116 + 8;
                    *(_WORD *)v120 = *(_WORD *)v116;
                    v128 = (void **)(v120 + 8);
                    if ((char)v120[31] < 0)
                      operator delete(*v128);
                    v129 = *(_OWORD *)v127;
                    *((_QWORD *)v120 + 3) = *((_QWORD *)v127 + 2);
                    *(_OWORD *)v128 = v129;
                    v126[31] = 0;
                    v126[8] = 0;
                    v130 = (void **)(v120 + 32);
                    if ((char)v120[55] < 0)
                      operator delete(*v130);
                    v131 = *((_OWORD *)v126 + 2);
                    *((_QWORD *)v120 + 6) = *((_QWORD *)v126 + 6);
                    *(_OWORD *)v130 = v131;
                    v126[55] = 0;
                    v126[32] = 0;
                    v132 = (void **)(v120 + 56);
                    if ((char)v120[79] < 0)
                      operator delete(*v132);
                    v133 = *(_OWORD *)(v126 + 56);
                    *((_QWORD *)v120 + 9) = *((_QWORD *)v126 + 9);
                    *(_OWORD *)v132 = v133;
                    v126[79] = 0;
                    v126[56] = 0;
                    v134 = (void **)(v120 + 80);
                    if ((char)v120[103] < 0)
                      operator delete(*v134);
                    v135 = *((_OWORD *)v126 + 5);
                    *((_QWORD *)v120 + 12) = *((_QWORD *)v126 + 12);
                    *(_OWORD *)v134 = v135;
                    v126[103] = 0;
                    v126[80] = 0;
                    if (v241 < v115)
                      break;
                    v116 = &v247[104 * ((2 * v115) | 1)];
                    if (2 * v115 + 2 < v10)
                    {
                      v123 = *v116;
                      v124 = v116[104];
                      v125 = v123 >= v124;
                      if (v123 <= v124)
                        v123 = v116[104];
                      if (v125)
                      {
                        v115 = (2 * v115) | 1;
                      }
                      else
                      {
                        v116 += 104;
                        v115 = 2 * v115 + 2;
                      }
                    }
                    else
                    {
                      v123 = *v116;
                      v115 = (2 * v115) | 1;
                    }
                    v120 = v126;
                  }
                  while (v123 >= v121);
                  *(_WORD *)v126 = v121;
                  if ((char)v126[31] < 0)
                    operator delete(*(void **)v127);
                  *((_QWORD *)v126 + 1) = v200;
                  *((_QWORD *)v126 + 2) = *(_QWORD *)v265;
                  *(_QWORD *)(v126 + 23) = *(_QWORD *)&v265[7];
                  v126[31] = v197;
                  if ((char)v126[55] < 0)
                    operator delete(*((void **)v126 + 4));
                  *((_QWORD *)v126 + 4) = v204;
                  *((_QWORD *)v126 + 5) = *(_QWORD *)v259;
                  *(_QWORD *)(v126 + 47) = *(_QWORD *)&v259[7];
                  v126[55] = v210;
                  if ((char)v126[79] < 0)
                    operator delete(*((void **)v126 + 7));
                  *((_QWORD *)v126 + 7) = v222;
                  *((_QWORD *)v126 + 8) = *(_QWORD *)v253;
                  *(_QWORD *)(v126 + 71) = *(_QWORD *)&v253[7];
                  v126[79] = v216;
                  if ((char)v126[103] < 0)
                    operator delete(*((void **)v126 + 10));
                  v126[80] = v234;
                  *(_OWORD *)(v126 + 81) = *(_OWORD *)v274;
                  *(_QWORD *)(v126 + 95) = *(_QWORD *)&v274[14];
                  v126[103] = v228;
                  a2 = v245;
                }
              }
              v113 = v114 - 1;
            }
            while (v114);
            v136 = v9 / 0x68uLL;
            v137 = v247;
            do
            {
              if (v136 >= 2)
              {
                v246 = a2;
                v139 = 0;
                v201 = *(_WORD *)v137;
                v205 = v137[8];
                *(_OWORD *)v266 = *(_OWORD *)(v247 + 9);
                *(_QWORD *)&v266[14] = *(_QWORD *)(v247 + 23);
                v211 = v137[31];
                *((_QWORD *)v247 + 1) = 0;
                *((_QWORD *)v247 + 2) = 0;
                *((_QWORD *)v247 + 3) = 0;
                v217 = v137[32];
                *(_OWORD *)v260 = *(_OWORD *)(v247 + 33);
                *(_QWORD *)&v260[14] = *(_QWORD *)(v247 + 47);
                v223 = v137[55];
                *((_QWORD *)v247 + 4) = 0;
                *((_QWORD *)v247 + 5) = 0;
                *((_QWORD *)v247 + 6) = 0;
                v229 = v137[56];
                *(_QWORD *)&v254[14] = *(_QWORD *)(v247 + 71);
                *(_OWORD *)v254 = *(_OWORD *)(v247 + 57);
                v235 = v137[79];
                *((_QWORD *)v247 + 7) = 0;
                *((_QWORD *)v247 + 8) = 0;
                *((_QWORD *)v247 + 9) = 0;
                v242 = v137[80];
                *(_QWORD *)&v249[14] = *(_QWORD *)(v247 + 95);
                *(_OWORD *)v249 = *(_OWORD *)(v247 + 81);
                v140 = v137[103];
                *((_QWORD *)v247 + 10) = 0;
                *((_QWORD *)v247 + 11) = 0;
                v141 = v137;
                *((_QWORD *)v247 + 12) = 0;
                do
                {
                  v143 = &v141[104 * v139 + 104];
                  v144 = 2 * v139;
                  v139 = (2 * v139) | 1;
                  if (v144 + 2 < v136 && *v143 < v143[104])
                  {
                    v143 += 104;
                    v139 = v144 + 2;
                  }
                  v145 = (void **)(v143 + 8);
                  *(_WORD *)v141 = *(_WORD *)v143;
                  v146 = (void **)(v141 + 8);
                  if ((char)v141[31] < 0)
                    operator delete(*v146);
                  v147 = *(_OWORD *)v145;
                  *((_QWORD *)v141 + 3) = *((_QWORD *)v143 + 3);
                  *(_OWORD *)v146 = v147;
                  v143[31] = 0;
                  v143[8] = 0;
                  v148 = (void **)(v141 + 32);
                  if ((char)v141[55] < 0)
                    operator delete(*v148);
                  v149 = *((_OWORD *)v143 + 2);
                  *((_QWORD *)v141 + 6) = *((_QWORD *)v143 + 6);
                  *(_OWORD *)v148 = v149;
                  v143[55] = 0;
                  v143[32] = 0;
                  v150 = (void **)(v141 + 56);
                  if ((char)v141[79] < 0)
                    operator delete(*v150);
                  v151 = (void **)(v143 + 56);
                  v152 = *(_OWORD *)(v143 + 56);
                  *((_QWORD *)v141 + 9) = *((_QWORD *)v143 + 9);
                  *(_OWORD *)v150 = v152;
                  v143[79] = 0;
                  v143[56] = 0;
                  v153 = (void **)(v141 + 80);
                  if ((char)v141[103] < 0)
                    operator delete(*v153);
                  v142 = *((_OWORD *)v143 + 5);
                  *((_QWORD *)v141 + 12) = *((_QWORD *)v143 + 12);
                  *(_OWORD *)v153 = v142;
                  v143[103] = 0;
                  v143[80] = 0;
                  v141 = v143;
                }
                while (v139 <= (uint64_t)((unint64_t)(v136 - 2) >> 1));
                v154 = (void **)(v143 + 32);
                v155 = (void **)(v143 + 80);
                a2 = v246;
                if (v143 == (unsigned __int8 *)(v246 - 52))
                {
                  *(_WORD *)v143 = v201;
                  if ((char)v143[31] < 0)
                    operator delete(*v145);
                  v143[8] = v205;
                  *(_QWORD *)(v143 + 23) = *(_QWORD *)&v266[14];
                  *(_OWORD *)(v143 + 9) = *(_OWORD *)v266;
                  v143[31] = v211;
                  if ((char)v143[55] < 0)
                    operator delete(*v154);
                  v143[32] = v217;
                  *(_QWORD *)(v143 + 47) = *(_QWORD *)&v260[14];
                  *(_OWORD *)(v143 + 33) = *(_OWORD *)v260;
                  v143[55] = v223;
                  if ((char)v143[79] < 0)
                    operator delete(*v151);
                  v143[56] = v229;
                  *(_QWORD *)(v143 + 71) = *(_QWORD *)&v254[14];
                  *(_OWORD *)(v143 + 57) = *(_OWORD *)v254;
                  v143[79] = v235;
                  if ((char)v143[103] < 0)
                    operator delete(*v155);
                  v143[80] = v242;
                  *(_QWORD *)(v143 + 95) = *(_QWORD *)&v249[14];
                  *(_OWORD *)(v143 + 81) = *(_OWORD *)v249;
                  v143[103] = v140;
                }
                else
                {
                  *(_WORD *)v143 = *(v246 - 52);
                  if ((char)v143[31] < 0)
                    operator delete(*v145);
                  v156 = *((_OWORD *)v246 - 6);
                  *((_QWORD *)v143 + 3) = *((_QWORD *)v246 - 10);
                  *(_OWORD *)v145 = v156;
                  *((_BYTE *)v246 - 73) = 0;
                  *((_BYTE *)v246 - 96) = 0;
                  if ((char)v143[55] < 0)
                    operator delete(*v154);
                  v157 = *(_OWORD *)(v246 - 36);
                  *((_QWORD *)v143 + 6) = *((_QWORD *)v246 - 7);
                  *(_OWORD *)v154 = v157;
                  *((_BYTE *)v246 - 49) = 0;
                  *((_BYTE *)v246 - 72) = 0;
                  if ((char)v143[79] < 0)
                    operator delete(*v151);
                  v158 = *((_OWORD *)v246 - 3);
                  *((_QWORD *)v143 + 9) = *((_QWORD *)v246 - 4);
                  *(_OWORD *)v151 = v158;
                  *((_BYTE *)v246 - 25) = 0;
                  *((_BYTE *)v246 - 48) = 0;
                  if ((char)v143[103] < 0)
                    operator delete(*v155);
                  v159 = *(_OWORD *)(v246 - 12);
                  *((_QWORD *)v143 + 12) = *((_QWORD *)v246 - 1);
                  *(_OWORD *)v155 = v159;
                  *((_BYTE *)v246 - 1) = 0;
                  *((_BYTE *)v246 - 24) = 0;
                  *(v246 - 52) = v201;
                  if (*((char *)v246 - 73) < 0)
                    operator delete(*((void **)v246 - 12));
                  *((_BYTE *)v246 - 96) = v205;
                  *(_QWORD *)((char *)v246 - 81) = *(_QWORD *)&v266[14];
                  *(_OWORD *)((char *)v246 - 95) = *(_OWORD *)v266;
                  *((_BYTE *)v246 - 73) = v211;
                  if (*((char *)v246 - 49) < 0)
                    operator delete(*((void **)v246 - 9));
                  *((_BYTE *)v246 - 72) = v217;
                  *(_QWORD *)((char *)v246 - 57) = *(_QWORD *)&v260[14];
                  *(_OWORD *)((char *)v246 - 71) = *(_OWORD *)v260;
                  *((_BYTE *)v246 - 49) = v223;
                  if (*((char *)v246 - 25) < 0)
                    operator delete(*((void **)v246 - 6));
                  *((_BYTE *)v246 - 48) = v229;
                  *(_QWORD *)((char *)v246 - 33) = *(_QWORD *)&v254[14];
                  *(_OWORD *)((char *)v246 - 47) = *(_OWORD *)v254;
                  *((_BYTE *)v246 - 25) = v235;
                  if (*((char *)v246 - 1) < 0)
                    operator delete(*((void **)v246 - 3));
                  *((_BYTE *)v246 - 24) = v242;
                  *(_QWORD *)((char *)v246 - 9) = *(_QWORD *)&v249[14];
                  *(_OWORD *)((char *)v246 - 23) = *(_OWORD *)v249;
                  *((_BYTE *)v246 - 1) = v140;
                  v160 = v143 + 104 - v247;
                  if (v160 >= 105)
                  {
                    v161 = (unint64_t)(0x4EC4EC4EC4EC4EC5 * (v160 >> 3) - 2) >> 1;
                    v162 = &v247[104 * v161];
                    if (*v162 < *v143)
                    {
                      v163 = *(_WORD *)v143;
                      v206 = *((_QWORD *)v143 + 1);
                      *(_QWORD *)&v270[7] = *(_QWORD *)(v143 + 23);
                      *(_QWORD *)v270 = *((_QWORD *)v143 + 2);
                      v164 = v143[31];
                      *v145 = 0;
                      *((_QWORD *)v143 + 2) = 0;
                      *((_QWORD *)v143 + 3) = 0;
                      v212 = *((_QWORD *)v143 + 4);
                      *(_QWORD *)v269 = *((_QWORD *)v143 + 5);
                      *(_QWORD *)&v269[7] = *(_QWORD *)(v143 + 47);
                      v218 = v143[55];
                      *v154 = 0;
                      *((_QWORD *)v143 + 5) = 0;
                      *((_QWORD *)v143 + 6) = 0;
                      v230 = *((_QWORD *)v143 + 7);
                      *(_QWORD *)&v268[7] = *(_QWORD *)(v143 + 71);
                      *(_QWORD *)v268 = *((_QWORD *)v143 + 8);
                      v224 = v143[79];
                      *v151 = 0;
                      *((_QWORD *)v143 + 8) = 0;
                      *((_QWORD *)v143 + 9) = 0;
                      v243 = v143[80];
                      *(_QWORD *)&v275[14] = *(_QWORD *)(v143 + 95);
                      *(_OWORD *)v275 = *(_OWORD *)(v143 + 81);
                      v236 = v143[103];
                      *v155 = 0;
                      *((_QWORD *)v143 + 11) = 0;
                      *((_QWORD *)v143 + 12) = 0;
                      do
                      {
                        v165 = v162;
                        v166 = v162 + 8;
                        *(_WORD *)v143 = *(_WORD *)v162;
                        v167 = (void **)(v143 + 8);
                        if ((char)v143[31] < 0)
                          operator delete(*v167);
                        v168 = *(_OWORD *)v166;
                        *((_QWORD *)v143 + 3) = *((_QWORD *)v166 + 2);
                        *(_OWORD *)v167 = v168;
                        v165[31] = 0;
                        v165[8] = 0;
                        v169 = (void **)(v143 + 32);
                        if ((char)v143[55] < 0)
                          operator delete(*v169);
                        v170 = *((_OWORD *)v165 + 2);
                        *((_QWORD *)v143 + 6) = *((_QWORD *)v165 + 6);
                        *(_OWORD *)v169 = v170;
                        v165[55] = 0;
                        v165[32] = 0;
                        v171 = (void **)(v143 + 56);
                        if ((char)v143[79] < 0)
                          operator delete(*v171);
                        v172 = *(_OWORD *)(v165 + 56);
                        *((_QWORD *)v143 + 9) = *((_QWORD *)v165 + 9);
                        *(_OWORD *)v171 = v172;
                        v165[79] = 0;
                        v165[56] = 0;
                        v173 = (void **)(v143 + 80);
                        if ((char)v143[103] < 0)
                          operator delete(*v173);
                        v174 = *((_OWORD *)v165 + 5);
                        *((_QWORD *)v143 + 12) = *((_QWORD *)v165 + 12);
                        *(_OWORD *)v173 = v174;
                        v165[103] = 0;
                        v165[80] = 0;
                        if (!v161)
                          break;
                        v161 = (v161 - 1) >> 1;
                        v162 = &v247[104 * v161];
                        v143 = v165;
                      }
                      while (*v162 < v163);
                      *(_WORD *)v165 = v163;
                      if ((char)v165[31] < 0)
                        operator delete(*(void **)v166);
                      *((_QWORD *)v165 + 1) = v206;
                      *((_QWORD *)v165 + 2) = *(_QWORD *)v270;
                      *(_QWORD *)(v165 + 23) = *(_QWORD *)&v270[7];
                      v165[31] = v164;
                      a2 = v246;
                      if ((char)v165[55] < 0)
                        operator delete(*((void **)v165 + 4));
                      *((_QWORD *)v165 + 4) = v212;
                      *((_QWORD *)v165 + 5) = *(_QWORD *)v269;
                      *(_QWORD *)(v165 + 47) = *(_QWORD *)&v269[7];
                      v165[55] = v218;
                      if ((char)v165[79] < 0)
                        operator delete(*((void **)v165 + 7));
                      *((_QWORD *)v165 + 7) = v230;
                      *((_QWORD *)v165 + 8) = *(_QWORD *)v268;
                      *(_QWORD *)(v165 + 71) = *(_QWORD *)&v268[7];
                      v165[79] = v224;
                      if ((char)v165[103] < 0)
                        operator delete(*((void **)v165 + 10));
                      v165[80] = v243;
                      *(_OWORD *)(v165 + 81) = *(_OWORD *)v275;
                      *(_QWORD *)(v165 + 95) = *(_QWORD *)&v275[14];
                      v165[103] = v236;
                    }
                  }
                }
                v137 = v247;
              }
              a2 -= 52;
            }
            while ((unint64_t)v136-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (__int16 *)&v8[104 * ((unint64_t)v10 >> 1)];
        v13 = *(unsigned __int8 *)v7;
        if ((unint64_t)v9 >= 0x3401)
        {
          v14 = *(unsigned __int8 *)v12;
          if (v14 >= *v8)
          {
            if (v13 < v14)
            {
              std::swap[abi:nn180100]<md::LabelExternalTextElement>(v12, v7);
              if (*(unsigned __int8 *)v12 < *v8)
              {
                v15 = (__int16 *)v8;
                v16 = v12;
                goto LABEL_19;
              }
            }
          }
          else
          {
            v15 = (__int16 *)v8;
            if (v13 < v14)
              goto LABEL_10;
            std::swap[abi:nn180100]<md::LabelExternalTextElement>((__int16 *)v8, v12);
            if (*(unsigned __int8 *)v7 < *(unsigned __int8 *)v12)
            {
              v15 = v12;
LABEL_10:
              v16 = v7;
LABEL_19:
              std::swap[abi:nn180100]<md::LabelExternalTextElement>(v15, v16);
            }
          }
          v21 = (__int16 *)(v8 + 104);
          v20 = v8[104];
          v22 = &v8[104 * v11];
          v25 = *(v22 - 104);
          v24 = (__int16 *)(v22 - 104);
          v23 = v25;
          v26 = *(unsigned __int8 *)v193;
          if (v25 >= v20)
          {
            if (v26 < v23)
            {
              std::swap[abi:nn180100]<md::LabelExternalTextElement>(v24, v193);
              if (*(unsigned __int8 *)v24 < *(unsigned __int8 *)v21)
              {
                v27 = v21;
                v28 = v24;
                goto LABEL_32;
              }
            }
          }
          else
          {
            v27 = v21;
            if (v26 < v23)
              goto LABEL_24;
            std::swap[abi:nn180100]<md::LabelExternalTextElement>(v21, v24);
            if (*(unsigned __int8 *)v193 < *(unsigned __int8 *)v24)
            {
              v27 = v24;
LABEL_24:
              v28 = v193;
LABEL_32:
              std::swap[abi:nn180100]<md::LabelExternalTextElement>(v27, v28);
            }
          }
          v29 = &v247[104 * v11];
          v32 = v29[104];
          v31 = (__int16 *)(v29 + 104);
          v30 = v32;
          v33 = *(unsigned __int8 *)v192;
          if (v32 >= v247[208])
          {
            if (v33 < v30)
            {
              std::swap[abi:nn180100]<md::LabelExternalTextElement>(v31, v192);
              if (*(unsigned __int8 *)v31 < v247[208])
              {
                v34 = (__int16 *)(v247 + 208);
                v35 = v31;
                goto LABEL_41;
              }
            }
          }
          else
          {
            v34 = (__int16 *)(v247 + 208);
            if (v33 < v30)
              goto LABEL_37;
            std::swap[abi:nn180100]<md::LabelExternalTextElement>(v34, v31);
            if (*(unsigned __int8 *)v192 < *(unsigned __int8 *)v31)
            {
              v34 = v31;
LABEL_37:
              v35 = v192;
LABEL_41:
              std::swap[abi:nn180100]<md::LabelExternalTextElement>(v34, v35);
            }
          }
          v36 = *(unsigned __int8 *)v12;
          v37 = *(unsigned __int8 *)v31;
          if (v36 >= *(unsigned __int8 *)v24)
          {
            if (v37 < v36)
            {
              std::swap[abi:nn180100]<md::LabelExternalTextElement>(v12, v31);
              if (*(unsigned __int8 *)v12 < *(unsigned __int8 *)v24)
              {
                v38 = v24;
                v39 = v12;
                goto LABEL_50;
              }
            }
          }
          else
          {
            v38 = v24;
            if (v37 < v36)
              goto LABEL_46;
            std::swap[abi:nn180100]<md::LabelExternalTextElement>(v24, v12);
            if (*(unsigned __int8 *)v31 < *(unsigned __int8 *)v12)
            {
              v38 = v12;
LABEL_46:
              v39 = v31;
LABEL_50:
              std::swap[abi:nn180100]<md::LabelExternalTextElement>(v38, v39);
            }
          }
          v8 = v247;
          std::swap[abi:nn180100]<md::LabelExternalTextElement>((__int16 *)v247, v12);
          goto LABEL_52;
        }
        v17 = *v8;
        if (v17 < *(unsigned __int8 *)v12)
        {
          v18 = v12;
          if (v13 >= v17)
          {
            std::swap[abi:nn180100]<md::LabelExternalTextElement>(v12, (__int16 *)v8);
            if (*(unsigned __int8 *)v7 >= *v8)
              goto LABEL_52;
            v18 = (__int16 *)v8;
          }
          v19 = v7;
          goto LABEL_28;
        }
        if (v13 < v17)
        {
          std::swap[abi:nn180100]<md::LabelExternalTextElement>((__int16 *)v8, v7);
          if (*v8 < *(unsigned __int8 *)v12)
          {
            v18 = v12;
            v19 = (__int16 *)v8;
LABEL_28:
            std::swap[abi:nn180100]<md::LabelExternalTextElement>(v18, v19);
          }
        }
LABEL_52:
        v40 = a3 - 1;
        if ((a4 & 1) == 0 && *(v8 - 104) >= *v8)
        {
          v62 = *(_WORD *)v8;
          v63 = (void **)(v8 + 8);
          v203 = *((_QWORD *)v8 + 1);
          *(_QWORD *)&v263[7] = *(_QWORD *)(v8 + 23);
          *(_QWORD *)v263 = *((_QWORD *)v8 + 2);
          v199 = v8[31];
          *((_QWORD *)v8 + 1) = 0;
          *((_QWORD *)v8 + 2) = 0;
          *((_QWORD *)v8 + 3) = 0;
          v64 = (void **)(v8 + 32);
          v214 = *((_QWORD *)v8 + 4);
          *(_QWORD *)v257 = *((_QWORD *)v8 + 5);
          *(_QWORD *)&v257[7] = *(_QWORD *)(v8 + 47);
          v208 = v8[55];
          *((_QWORD *)v8 + 4) = 0;
          *((_QWORD *)v8 + 5) = 0;
          *((_QWORD *)v8 + 6) = 0;
          v65 = (void **)(v8 + 56);
          v226 = *((_QWORD *)v8 + 7);
          *(_QWORD *)&v251[7] = *(_QWORD *)(v8 + 71);
          *(_QWORD *)v251 = *((_QWORD *)v8 + 8);
          v220 = v8[79];
          *((_QWORD *)v8 + 7) = 0;
          v66 = (void **)(v8 + 80);
          v239 = v8[80];
          *((_QWORD *)v8 + 8) = 0;
          *((_QWORD *)v8 + 9) = 0;
          *(_QWORD *)&v272[14] = *(_QWORD *)(v8 + 95);
          *(_OWORD *)v272 = *(_OWORD *)(v8 + 81);
          v232 = v8[103];
          *((_QWORD *)v8 + 10) = 0;
          *((_QWORD *)v8 + 11) = 0;
          *((_QWORD *)v8 + 12) = 0;
          a1 = v8;
          if (*(unsigned __int8 *)v7 <= v62)
          {
            v68 = v8 + 104;
            do
            {
              a1 = v68;
              if (v68 >= (unsigned __int8 *)v245)
                break;
              v68 += 104;
            }
            while (*a1 <= v62);
          }
          else
          {
            do
            {
              v67 = a1[104];
              a1 += 104;
            }
            while (v67 <= v62);
          }
          v69 = v40;
          v70 = v7;
          v71 = v245;
          if (a1 < (unsigned __int8 *)v245)
          {
            v71 = v245;
            do
            {
              v72 = *((unsigned __int8 *)v71 - 104);
              v71 -= 52;
            }
            while (v72 > v62);
          }
          while (a1 < (unsigned __int8 *)v71)
          {
            std::swap[abi:nn180100]<md::LabelExternalTextElement>((__int16 *)a1, v71);
            do
            {
              v73 = a1[104];
              a1 += 104;
            }
            while (v73 <= v62);
            do
            {
              v74 = *((unsigned __int8 *)v71 - 104);
              v71 -= 52;
            }
            while (v74 > v62);
          }
          if (a1 - 104 != v247)
          {
            *(_WORD *)v247 = *((_WORD *)a1 - 52);
            if ((char)v247[31] < 0)
              operator delete(*v63);
            v75 = *((_OWORD *)a1 - 6);
            *((_QWORD *)v8 + 3) = *((_QWORD *)a1 - 10);
            *(_OWORD *)v63 = v75;
            *(a1 - 73) = 0;
            *(a1 - 96) = 0;
            if ((char)v247[55] < 0)
              operator delete(*v64);
            v76 = *(_OWORD *)(a1 - 72);
            *((_QWORD *)v8 + 6) = *((_QWORD *)a1 - 7);
            *(_OWORD *)v64 = v76;
            *(a1 - 49) = 0;
            *(a1 - 72) = 0;
            if ((char)v247[79] < 0)
              operator delete(*v65);
            v77 = *((_OWORD *)a1 - 3);
            *((_QWORD *)v8 + 9) = *((_QWORD *)a1 - 4);
            *(_OWORD *)v65 = v77;
            *(a1 - 25) = 0;
            *(a1 - 48) = 0;
            if ((char)v247[103] < 0)
              operator delete(*v66);
            v78 = *(_OWORD *)(a1 - 24);
            *((_QWORD *)v8 + 12) = *((_QWORD *)a1 - 1);
            *(_OWORD *)v66 = v78;
            *(a1 - 1) = 0;
            *(a1 - 24) = 0;
          }
          *((_WORD *)a1 - 52) = v62;
          if ((char)*(a1 - 73) < 0)
            operator delete(*((void **)a1 - 12));
          *((_QWORD *)a1 - 12) = v203;
          *(_QWORD *)(a1 - 81) = *(_QWORD *)&v263[7];
          *((_QWORD *)a1 - 11) = *(_QWORD *)v263;
          *(a1 - 73) = v199;
          a2 = v245;
          v7 = v70;
          if ((char)*(a1 - 49) < 0)
            operator delete(*((void **)a1 - 9));
          *((_QWORD *)a1 - 9) = v214;
          *(_QWORD *)(a1 - 57) = *(_QWORD *)&v257[7];
          *((_QWORD *)a1 - 8) = *(_QWORD *)v257;
          *(a1 - 49) = v208;
          a3 = v69;
          if ((char)*(a1 - 25) < 0)
            operator delete(*((void **)a1 - 6));
          *((_QWORD *)a1 - 6) = v226;
          *(_QWORD *)(a1 - 33) = *(_QWORD *)&v251[7];
          *((_QWORD *)a1 - 5) = *(_QWORD *)v251;
          *(a1 - 25) = v220;
          if ((char)*(a1 - 1) < 0)
            operator delete(*((void **)a1 - 3));
          a4 = 0;
          *(a1 - 24) = v239;
          *(_QWORD *)(a1 - 9) = *(_QWORD *)&v272[14];
          *(_OWORD *)(a1 - 23) = *(_OWORD *)v272;
          *(a1 - 1) = v232;
          continue;
        }
        v238 = v40;
        v41 = *(_WORD *)v8;
        v43 = v8 + 8;
        v42 = *((_QWORD *)v8 + 1);
        *(_QWORD *)&v262[7] = *(_QWORD *)(v8 + 23);
        *(_QWORD *)v262 = *((_QWORD *)v8 + 2);
        v44 = v8[31];
        *((_QWORD *)v8 + 1) = 0;
        *((_QWORD *)v8 + 2) = 0;
        *((_QWORD *)v8 + 3) = 0;
        v45 = v8 + 32;
        v202 = v42;
        v207 = *((_QWORD *)v8 + 4);
        *(_QWORD *)v256 = *((_QWORD *)v8 + 5);
        *(_QWORD *)&v256[7] = *(_QWORD *)(v8 + 47);
        v196 = v44;
        v198 = v8[55];
        *((_QWORD *)v8 + 4) = 0;
        *((_QWORD *)v8 + 5) = 0;
        *((_QWORD *)v8 + 6) = 0;
        v46 = v8 + 56;
        v219 = *((_QWORD *)v8 + 7);
        *(_QWORD *)&v250[7] = *(_QWORD *)(v8 + 71);
        *(_QWORD *)v250 = *((_QWORD *)v8 + 8);
        v213 = v8[79];
        *((_QWORD *)v8 + 7) = 0;
        *((_QWORD *)v8 + 8) = 0;
        *((_QWORD *)v8 + 9) = 0;
        v47 = v8 + 80;
        v231 = v8[80];
        *(_QWORD *)&v271[14] = *(_QWORD *)(v8 + 95);
        *(_OWORD *)v271 = *(_OWORD *)(v8 + 81);
        v225 = v8[103];
        *((_QWORD *)v8 + 10) = 0;
        *((_QWORD *)v8 + 11) = 0;
        v48 = v8;
        *((_QWORD *)v8 + 12) = 0;
        do
        {
          v49 = v48;
          v50 = v48[104];
          v48 += 104;
        }
        while (v50 < v41);
        v51 = v245;
        if (v49 == v8)
        {
          v51 = v245;
          do
          {
            if (v48 >= (unsigned __int8 *)v51)
              break;
            v53 = *((unsigned __int8 *)v51 - 104);
            v51 -= 52;
          }
          while (v53 >= v41);
        }
        else
        {
          do
          {
            v52 = *((unsigned __int8 *)v51 - 104);
            v51 -= 52;
          }
          while (v52 >= v41);
        }
        a1 = v48;
        if (v48 < (unsigned __int8 *)v51)
        {
          v54 = v51;
          do
          {
            std::swap[abi:nn180100]<md::LabelExternalTextElement>((__int16 *)a1, v54);
            do
            {
              v55 = a1[104];
              a1 += 104;
            }
            while (v55 < v41);
            do
            {
              v56 = *((unsigned __int8 *)v54 - 104);
              v54 -= 52;
            }
            while (v56 >= v41);
          }
          while (a1 < (unsigned __int8 *)v54);
        }
        if (a1 - 104 != v247)
        {
          *(_WORD *)v247 = *((_WORD *)a1 - 52);
          if ((char)v247[31] < 0)
            operator delete(*(void **)v43);
          v57 = *((_OWORD *)a1 - 6);
          *((_QWORD *)v43 + 2) = *((_QWORD *)a1 - 10);
          *(_OWORD *)v43 = v57;
          *(a1 - 73) = 0;
          *(a1 - 96) = 0;
          if ((char)v247[55] < 0)
            operator delete(*(void **)v45);
          v58 = *(_OWORD *)(a1 - 72);
          *((_QWORD *)v45 + 2) = *((_QWORD *)a1 - 7);
          *(_OWORD *)v45 = v58;
          *(a1 - 49) = 0;
          *(a1 - 72) = 0;
          if ((char)v247[79] < 0)
            operator delete(*(void **)v46);
          v59 = *((_OWORD *)a1 - 3);
          *((_QWORD *)v46 + 2) = *((_QWORD *)a1 - 4);
          *(_OWORD *)v46 = v59;
          *(a1 - 25) = 0;
          *(a1 - 48) = 0;
          if ((char)v247[103] < 0)
            operator delete(*(void **)v47);
          v60 = *(_OWORD *)(a1 - 24);
          *((_QWORD *)v47 + 2) = *((_QWORD *)a1 - 1);
          *(_OWORD *)v47 = v60;
          *(a1 - 1) = 0;
          *(a1 - 24) = 0;
        }
        *((_WORD *)a1 - 52) = v41;
        if ((char)*(a1 - 73) < 0)
          operator delete(*((void **)a1 - 12));
        *((_QWORD *)a1 - 12) = v202;
        *(_QWORD *)(a1 - 81) = *(_QWORD *)&v262[7];
        *((_QWORD *)a1 - 11) = *(_QWORD *)v262;
        *(a1 - 73) = v196;
        a3 = v238;
        a2 = v245;
        if ((char)*(a1 - 49) < 0)
          operator delete(*((void **)a1 - 9));
        *((_QWORD *)a1 - 9) = v207;
        *(_QWORD *)(a1 - 57) = *(_QWORD *)&v256[7];
        *((_QWORD *)a1 - 8) = *(_QWORD *)v256;
        *(a1 - 49) = v198;
        if ((char)*(a1 - 25) < 0)
          operator delete(*((void **)a1 - 6));
        *((_QWORD *)a1 - 6) = v219;
        *(_QWORD *)(a1 - 33) = *(_QWORD *)&v250[7];
        *((_QWORD *)a1 - 5) = *(_QWORD *)v250;
        *(a1 - 25) = v213;
        if ((char)*(a1 - 1) < 0)
          operator delete(*((void **)a1 - 3));
        *(a1 - 24) = v231;
        *(_QWORD *)(a1 - 9) = *(_QWORD *)&v271[14];
        *(_OWORD *)(a1 - 23) = *(_OWORD *)v271;
        *(a1 - 1) = v225;
        v119 = v48 >= (unsigned __int8 *)v51;
        v7 = v194;
        if (!v119)
        {
LABEL_90:
          std::__introsort<std::_ClassicAlgPolicy,md::LabelExternalFeature::finalize(void)::{lambda(md::LabelExternalTextElement const&,md::LabelExternalTextElement const&)#1} &,md::LabelExternalTextElement*,false>(v247, a1 - 104, v238, a4 & 1);
          a4 = 0;
          continue;
        }
        v61 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalFeature::finalize(void)::{lambda(md::LabelExternalTextElement const&,md::LabelExternalTextElement const&)#1} &,md::LabelExternalTextElement*>((__int16 *)v247, (__int16 *)a1 - 52);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalFeature::finalize(void)::{lambda(md::LabelExternalTextElement const&,md::LabelExternalTextElement const&)#1} &,md::LabelExternalTextElement*>((__int16 *)a1, v245))
        {
          if (v61)
            continue;
          goto LABEL_90;
        }
        a2 = (__int16 *)(a1 - 104);
        a1 = v247;
        if (!v61)
          goto LABEL_1;
        return;
    }
  }
}

  v128 = (__int128 *)(a2 - 64);
  v129 = a2 - 32;
  v127 = (__int128 *)(a2 - 96);
  v7 = a1;
  v135 = a2;
  while (2)
  {
    a1 = v7;
    v8 = a2 - v7;
    v9 = (uint64_t)(a2 - v7) >> 5;
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(unsigned __int8 *)(a2 - 6) < *(unsigned __int8 *)(v7 + 26))
        {
          v56 = *(_OWORD *)v7;
          v57 = *(_QWORD *)(v7 + 16);
          *(_QWORD *)(v7 + 8) = 0;
          *(_QWORD *)(v7 + 16) = 0;
          *(_QWORD *)v7 = 0;
          v145 = *(_WORD *)(v7 + 24);
          v146 = *(_BYTE *)(v7 + 26);
          *(_OWORD *)v7 = *(_OWORD *)(a2 - 32);
          *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 - 16);
          *(_QWORD *)v129 = 0;
          *(_QWORD *)(v129 + 8) = 0;
          *(_QWORD *)(v129 + 16) = 0;
          v58 = *(_WORD *)(a2 - 8);
          *(_BYTE *)(v7 + 26) = *(_BYTE *)(a2 - 6);
          *(_WORD *)(v7 + 24) = v58;
          v59 = *(void **)(a2 - 32);
          if (v59)
          {
            *(_QWORD *)(a2 - 24) = v59;
            v139 = v56;
            operator delete(v59);
            v56 = v139;
          }
          *(_OWORD *)(a2 - 32) = v56;
          *(_QWORD *)(a2 - 16) = v57;
          *(_WORD *)(a2 - 8) = v145;
          *(_BYTE *)(a2 - 6) = v146;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalPointFeature::finalize(void)::{lambda(md::LabelFeaturePlacementInfo const&,md::LabelFeaturePlacementInfo const&)#1} &,md::LabelFeaturePlacementInfo*>((__int128 *)v7, (__int128 *)(v7 + 32), (__int128 *)v129);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalPointFeature::finalize(void)::{lambda(md::LabelFeaturePlacementInfo const&,md::LabelFeaturePlacementInfo const&)#1} &,md::LabelFeaturePlacementInfo*>(v7, v7 + 32, v7 + 64, v129);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalPointFeature::finalize(void)::{lambda(md::LabelFeaturePlacementInfo const&,md::LabelFeaturePlacementInfo const&)#1} &,md::LabelFeaturePlacementInfo*>(v7, v7 + 32, v7 + 64, v7 + 96, v129);
        return;
      default:
        if (v8 <= 767)
        {
          v60 = v7 + 32;
          v62 = v7 == a2 || v60 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v62)
            {
              v63 = 0;
              v64 = v7;
              do
              {
                v65 = v60;
                if (*(unsigned __int8 *)(v64 + 58) < *(unsigned __int8 *)(v64 + 26))
                {
                  v140 = *(_OWORD *)v60;
                  v66 = *(_QWORD *)(v64 + 48);
                  *(_QWORD *)v60 = 0;
                  *(_QWORD *)(v60 + 8) = 0;
                  *(_QWORD *)(v60 + 16) = 0;
                  v67 = *(_WORD *)(v64 + 56);
                  v68 = v63;
                  v69 = *(unsigned __int8 *)(v64 + 58);
                  v70 = a1 + v63;
                  while (1)
                  {
                    *(_OWORD *)(v70 + 32) = *(_OWORD *)v70;
                    *(_QWORD *)(v70 + 48) = *(_QWORD *)(v70 + 16);
                    *(_QWORD *)(v70 + 8) = 0;
                    *(_QWORD *)(v70 + 16) = 0;
                    *(_QWORD *)v70 = 0;
                    *(_WORD *)(v70 + 56) = *(_WORD *)(v70 + 24);
                    *(_BYTE *)(v70 + 58) = *(_BYTE *)(v70 + 26);
                    if (!v68)
                    {
                      v73 = (_WORD *)(a1 + 24);
                      v71 = a1;
                      v74 = *(void **)a1;
                      if (!*(_QWORD *)a1)
                        goto LABEL_85;
                      goto LABEL_97;
                    }
                    v71 = a1 + v68;
                    if (v69 >= *(unsigned __int8 *)(a1 + v68 - 6))
                      break;
                    v72 = *(void **)v70;
                    v68 -= 32;
                    v70 = a1 + v68;
                    if (v72)
                    {
                      *(_QWORD *)(v70 + 40) = v72;
                      operator delete(v72);
                      *(_QWORD *)(v70 + 40) = 0;
                      *(_QWORD *)(v70 + 48) = 0;
                    }
                  }
                  v73 = (_WORD *)(v71 + 24);
                  v74 = *(void **)v71;
                  if (!*(_QWORD *)v71)
                    goto LABEL_85;
LABEL_97:
                  *(_QWORD *)(v71 + 8) = v74;
                  operator delete(v74);
LABEL_85:
                  *(_OWORD *)v71 = v140;
                  *(_QWORD *)(v71 + 16) = v66;
                  *v73 = v67;
                  *(_BYTE *)(v71 + 26) = v69;
                  a2 = v135;
                }
                v60 = v65 + 32;
                v63 += 32;
                v64 = v65;
              }
              while (v65 + 32 != a2);
            }
          }
          else if (!v62)
          {
            do
            {
              v120 = v60;
              if (*(unsigned __int8 *)(a1 + 58) < *(unsigned __int8 *)(a1 + 26))
              {
                v144 = *(_OWORD *)v60;
                v121 = *(_QWORD *)(a1 + 48);
                *(_QWORD *)v60 = 0;
                *(_QWORD *)(v60 + 8) = 0;
                *(_QWORD *)(v60 + 16) = 0;
                v122 = *(_WORD *)(a1 + 56);
                v123 = *(unsigned __int8 *)(a1 + 58);
                while (1)
                {
                  *(_OWORD *)(a1 + 32) = *(_OWORD *)a1;
                  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 16);
                  *(_QWORD *)(a1 + 8) = 0;
                  *(_QWORD *)(a1 + 16) = 0;
                  *(_QWORD *)a1 = 0;
                  *(_WORD *)(a1 + 56) = *(_WORD *)(a1 + 24);
                  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a1 + 26);
                  if (v123 >= *(unsigned __int8 *)(a1 - 6))
                    break;
                  v125 = *(void **)a1;
                  a1 -= 32;
                  v124 = v125;
                  if (v125)
                  {
                    *(_QWORD *)(a1 + 40) = v124;
                    operator delete(v124);
                    *(_QWORD *)(a1 + 40) = 0;
                    *(_QWORD *)(a1 + 48) = 0;
                  }
                }
                v126 = *(void **)a1;
                if (*(_QWORD *)a1)
                {
                  *(_QWORD *)(a1 + 8) = v126;
                  operator delete(v126);
                }
                *(_OWORD *)a1 = v144;
                *(_QWORD *)(a1 + 16) = v121;
                *(_WORD *)(a1 + 24) = v122;
                *(_BYTE *)(a1 + 26) = v123;
                a2 = v135;
              }
              v60 = v120 + 32;
              a1 = v120;
            }
            while (v120 + 32 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v7 == a2)
            return;
          v75 = (v9 - 2) >> 1;
          v76 = v75;
          do
          {
            v77 = v76;
            if (v75 >= v76)
            {
              v78 = (2 * v76) | 1;
              v79 = a1 + 32 * v78;
              if (2 * v77 + 2 < (uint64_t)v9)
              {
                v80 = *(unsigned __int8 *)(v79 + 26);
                v81 = *(unsigned __int8 *)(v79 + 58);
                v79 += 32 * (v80 < v81);
                if (v80 < v81)
                  v78 = 2 * v77 + 2;
              }
              v82 = a1 + 32 * v77;
              v83 = *(unsigned __int8 *)(v82 + 26);
              if (*(unsigned __int8 *)(v79 + 26) >= v83)
              {
                v84 = a1 + 32 * v77;
                v141 = *(_OWORD *)v84;
                v85 = *(_QWORD *)(v84 + 16);
                *(_QWORD *)(v84 + 8) = 0;
                *(_QWORD *)(v84 + 16) = 0;
                *(_QWORD *)v84 = 0;
                v134 = *(_WORD *)(v82 + 24);
                v86 = v79;
                while (1)
                {
                  *(_OWORD *)v84 = *(_OWORD *)v86;
                  *(_QWORD *)(v84 + 16) = *(_QWORD *)(v86 + 16);
                  *(_QWORD *)v86 = 0;
                  *(_QWORD *)(v86 + 8) = 0;
                  *(_QWORD *)(v86 + 16) = 0;
                  v87 = *(_WORD *)(v86 + 24);
                  *(_BYTE *)(v84 + 26) = *(_BYTE *)(v86 + 26);
                  *(_WORD *)(v84 + 24) = v87;
                  if (v75 < v78)
                    break;
                  v88 = a1 + 32 * ((2 * v78) | 1);
                  if (2 * v78 + 2 >= (uint64_t)v9)
                  {
                    v78 = (2 * v78) | 1;
                  }
                  else
                  {
                    v89 = *(unsigned __int8 *)(v88 + 26);
                    v90 = *(unsigned __int8 *)(v88 + 58);
                    v88 += 32 * (v89 < v90);
                    v78 = v89 >= v90 ? (2 * v78) | 1 : 2 * v78 + 2;
                  }
                  if (*(unsigned __int8 *)(v88 + 26) < v83)
                    break;
                  v91 = *(void **)v86;
                  v84 = v86;
                  v86 = v88;
                  if (v91)
                  {
                    *(_QWORD *)(v84 + 8) = v91;
                    operator delete(v91);
                    *(_QWORD *)v84 = 0;
                    *(_QWORD *)(v84 + 8) = 0;
                    *(_QWORD *)(v84 + 16) = 0;
                  }
                }
                v92 = *(void **)v86;
                if (*(_QWORD *)v86)
                {
                  *(_QWORD *)(v86 + 8) = v92;
                  operator delete(v92);
                }
                *(_OWORD *)v86 = v141;
                *(_QWORD *)(v86 + 16) = v85;
                *(_WORD *)(v86 + 24) = v134;
                *(_BYTE *)(v86 + 26) = v83;
              }
            }
            v76 = v77 - 1;
          }
          while (v77);
          v93 = (unint64_t)v8 >> 5;
          v94 = v135;
          while (2)
          {
            if (v93 >= 2)
            {
              v96 = 0;
              v97 = *(void **)a1;
              v136 = v94;
              v142 = *(_QWORD *)(a1 + 8);
              v98 = *(_QWORD *)(a1 + 16);
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              v149 = *(_WORD *)(a1 + 24);
              v150 = *(_BYTE *)(a1 + 26);
              v99 = a1;
              do
              {
                v102 = v99 + 32 * (v96 + 1);
                v103 = 2 * v96;
                v96 = (2 * v96) | 1;
                v104 = v103 + 2;
                if (v103 + 2 < v93)
                {
                  v105 = *(unsigned __int8 *)(v102 + 26);
                  v106 = *(unsigned __int8 *)(v102 + 58);
                  v102 += 32 * (v105 < v106);
                  if (v105 < v106)
                    v96 = v104;
                }
                v107 = *(void **)v99;
                if (*(_QWORD *)v99)
                {
                  *(_QWORD *)(v99 + 8) = v107;
                  operator delete(v107);
                  *(_QWORD *)v99 = 0;
                  *(_QWORD *)(v99 + 8) = 0;
                  *(_QWORD *)(v99 + 16) = 0;
                }
                *(_OWORD *)v99 = *(_OWORD *)v102;
                *(_QWORD *)(v99 + 16) = *(_QWORD *)(v102 + 16);
                *(_QWORD *)v102 = 0;
                *(_QWORD *)(v102 + 8) = 0;
                v101 = (_WORD *)(v102 + 24);
                v100 = *(_WORD *)(v102 + 24);
                *(_QWORD *)(v102 + 16) = 0;
                *(_BYTE *)(v99 + 26) = *(_BYTE *)(v102 + 26);
                *(_WORD *)(v99 + 24) = v100;
                v99 = v102;
              }
              while (v96 <= (uint64_t)((unint64_t)(v93 - 2) >> 1));
              v108 = *(void **)v102;
              if (v102 == v136 - 32)
              {
                if (v108)
                {
                  *(_QWORD *)(v102 + 8) = v108;
                  operator delete(v108);
                }
                *(_QWORD *)v102 = v97;
                *(_QWORD *)(v102 + 8) = v142;
                *(_QWORD *)(v102 + 16) = v98;
                *v101 = v149;
                *(_BYTE *)(v102 + 26) = v150;
LABEL_122:
                v94 = v136;
              }
              else
              {
                if (v108)
                {
                  *(_QWORD *)(v102 + 8) = v108;
                  operator delete(v108);
                  *(_QWORD *)v102 = 0;
                  *(_QWORD *)(v102 + 8) = 0;
                  *(_QWORD *)(v102 + 16) = 0;
                }
                *(_OWORD *)v102 = *(_OWORD *)(v136 - 32);
                *(_QWORD *)(v102 + 16) = *(_QWORD *)(v136 - 16);
                *(_QWORD *)(v136 - 32) = 0;
                *(_QWORD *)(v136 - 24) = 0;
                *(_QWORD *)(v136 - 16) = 0;
                v109 = *(_WORD *)(v136 - 8);
                *(_BYTE *)(v102 + 26) = *(_BYTE *)(v136 - 6);
                *v101 = v109;
                v94 = v136;
                v110 = *(void **)(v136 - 32);
                if (v110)
                {
                  *(_QWORD *)(v136 - 24) = v110;
                  operator delete(v110);
                }
                *(_QWORD *)(v136 - 32) = v97;
                *(_QWORD *)(v136 - 24) = v142;
                *(_QWORD *)(v136 - 16) = v98;
                *(_BYTE *)(v136 - 6) = v150;
                *(_WORD *)(v136 - 8) = v149;
                v111 = v102 + 32 - a1;
                if (v111 >= 33)
                {
                  v112 = (unint64_t)((v111 >> 5) - 2) >> 1;
                  v113 = *(unsigned __int8 *)(v102 + 26);
                  if (*(unsigned __int8 *)(a1 + 32 * v112 + 26) < v113)
                  {
                    v143 = *(_OWORD *)v102;
                    v114 = *(_QWORD *)(v102 + 16);
                    *(_QWORD *)(v102 + 8) = 0;
                    *(_QWORD *)(v102 + 16) = 0;
                    *(_QWORD *)v102 = 0;
                    v115 = *(_WORD *)(v102 + 24);
                    while (1)
                    {
                      v116 = a1 + 32 * v112;
                      *(_OWORD *)v102 = *(_OWORD *)v116;
                      *(_QWORD *)(v102 + 16) = *(_QWORD *)(v116 + 16);
                      *(_QWORD *)v116 = 0;
                      *(_QWORD *)(v116 + 8) = 0;
                      *(_QWORD *)(v116 + 16) = 0;
                      v117 = *(_WORD *)(v116 + 24);
                      *(_BYTE *)(v102 + 26) = *(_BYTE *)(v116 + 26);
                      *(_WORD *)(v102 + 24) = v117;
                      if (!v112)
                        break;
                      v112 = (v112 - 1) >> 1;
                      if (*(unsigned __int8 *)(a1 + 32 * v112 + 26) >= v113)
                        break;
                      v118 = *(void **)v116;
                      v102 = v116;
                      if (*(_QWORD *)v116)
                      {
                        *(_QWORD *)(v116 + 8) = v118;
                        operator delete(v118);
                        *(_QWORD *)v116 = 0;
                        *(_QWORD *)(v116 + 8) = 0;
                        *(_QWORD *)(v116 + 16) = 0;
                      }
                    }
                    v119 = *(void **)v116;
                    if (*(_QWORD *)v116)
                    {
                      *(_QWORD *)(v116 + 8) = v119;
                      operator delete(v119);
                    }
                    *(_OWORD *)v116 = v143;
                    *(_QWORD *)(v116 + 16) = v114;
                    *(_WORD *)(v116 + 24) = v115;
                    *(_BYTE *)(v116 + 26) = v113;
                    goto LABEL_122;
                  }
                }
              }
            }
            v94 -= 32;
            if ((unint64_t)v93-- <= 2)
              return;
            continue;
          }
        }
        v10 = v7 + 32 * (v9 >> 1);
        if ((unint64_t)v8 <= 0x1000)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalPointFeature::finalize(void)::{lambda(md::LabelFeaturePlacementInfo const&,md::LabelFeaturePlacementInfo const&)#1} &,md::LabelFeaturePlacementInfo*>((__int128 *)(a1 + 32 * (v9 >> 1)), (__int128 *)a1, (__int128 *)v129);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalPointFeature::finalize(void)::{lambda(md::LabelFeaturePlacementInfo const&,md::LabelFeaturePlacementInfo const&)#1} &,md::LabelFeaturePlacementInfo*>((__int128 *)a1, (__int128 *)(a1 + 32 * (v9 >> 1)), (__int128 *)v129);
          v11 = 32 * (v9 >> 1);
          v12 = a1 + v11;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalPointFeature::finalize(void)::{lambda(md::LabelFeaturePlacementInfo const&,md::LabelFeaturePlacementInfo const&)#1} &,md::LabelFeaturePlacementInfo*>((__int128 *)(a1 + 32), (__int128 *)(a1 + v11 - 32), v128);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalPointFeature::finalize(void)::{lambda(md::LabelFeaturePlacementInfo const&,md::LabelFeaturePlacementInfo const&)#1} &,md::LabelFeaturePlacementInfo*>((__int128 *)(a1 + 64), (__int128 *)(a1 + 32 + v11), v127);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalPointFeature::finalize(void)::{lambda(md::LabelFeaturePlacementInfo const&,md::LabelFeaturePlacementInfo const&)#1} &,md::LabelFeaturePlacementInfo*>((__int128 *)(a1 + v11 - 32), (__int128 *)(a1 + v11), (__int128 *)(a1 + 32 + v11));
          v13 = *(_QWORD *)(a1 + 16);
          v14 = *(_OWORD *)a1;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v148 = *(_BYTE *)(a1 + 26);
          v147 = *(_WORD *)(a1 + 24);
          *(_OWORD *)a1 = *(_OWORD *)v10;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v10 + 16);
          v15 = *(_WORD *)(a1 + v11 + 24);
          *(_BYTE *)(a1 + 26) = *(_BYTE *)(a1 + v11 + 26);
          *(_WORD *)(a1 + 24) = v15;
          *(_OWORD *)v10 = v14;
          *(_QWORD *)(v10 + 16) = v13;
          *(_BYTE *)(v12 + 26) = v148;
          *(_WORD *)(v12 + 24) = v147;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v16 = *(unsigned __int8 *)(a1 + 26);
          if (*(unsigned __int8 *)(a1 - 6) < v16)
            goto LABEL_11;
          v133 = *(_OWORD *)a1;
          v38 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          if (v16 >= *(unsigned __int8 *)(a2 - 6))
          {
            v41 = a1 + 32;
            do
            {
              v7 = v41;
              if (v41 >= a2)
                break;
              v42 = *(unsigned __int8 *)(v41 + 26);
              v41 += 32;
            }
            while (v16 >= v42);
          }
          else
          {
            v39 = a1;
            do
            {
              v7 = v39 + 32;
              v40 = *(unsigned __int8 *)(v39 + 58);
              v39 += 32;
            }
            while (v16 >= v40);
          }
          if (v7 < a2)
          {
            v43 = v135;
            do
            {
              a2 = v43 - 32;
              v44 = *(unsigned __int8 *)(v43 - 6);
              v43 -= 32;
            }
            while (v16 < v44);
          }
          v45 = *(_WORD *)(a1 + 24);
          while (v7 < a2)
          {
            v46 = *(_OWORD *)v7;
            v47 = *(_QWORD *)(v7 + 16);
            *(_QWORD *)(v7 + 8) = 0;
            *(_QWORD *)(v7 + 16) = 0;
            *(_QWORD *)v7 = 0;
            v151 = *(_WORD *)(v7 + 24);
            v152 = *(_BYTE *)(v7 + 26);
            *(_OWORD *)v7 = *(_OWORD *)a2;
            *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 + 16);
            *(_QWORD *)(a2 + 8) = 0;
            *(_QWORD *)(a2 + 16) = 0;
            *(_QWORD *)a2 = 0;
            v48 = *(_WORD *)(a2 + 24);
            *(_BYTE *)(v7 + 26) = *(_BYTE *)(a2 + 26);
            *(_WORD *)(v7 + 24) = v48;
            v49 = *(void **)a2;
            if (*(_QWORD *)a2)
            {
              *(_QWORD *)(a2 + 8) = v49;
              v138 = v46;
              operator delete(v49);
              v46 = v138;
            }
            *(_OWORD *)a2 = v46;
            *(_QWORD *)(a2 + 16) = v47;
            *(_WORD *)(a2 + 24) = v151;
            *(_BYTE *)(a2 + 26) = v152;
            do
            {
              v50 = *(unsigned __int8 *)(v7 + 58);
              v7 += 32;
            }
            while (v16 >= v50);
            do
            {
              v51 = *(unsigned __int8 *)(a2 - 6);
              a2 -= 32;
            }
            while (v16 < v51);
          }
          v52 = (void **)(v7 - 32);
          if (v7 - 32 != a1)
          {
            v53 = *(void **)a1;
            if (*(_QWORD *)a1)
            {
              *(_QWORD *)(a1 + 8) = v53;
              operator delete(v53);
              *(_QWORD *)a1 = 0;
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
            }
            *(_OWORD *)a1 = *(_OWORD *)(v7 - 32);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 - 16);
            *v52 = 0;
            *(_QWORD *)(v7 - 24) = 0;
            *(_QWORD *)(v7 - 16) = 0;
            v54 = *(_WORD *)(v7 - 8);
            *(_BYTE *)(a1 + 26) = *(_BYTE *)(v7 - 6);
            *(_WORD *)(a1 + 24) = v54;
          }
          v55 = *v52;
          if (*v52)
          {
            *(_QWORD *)(v7 - 24) = v55;
            operator delete(v55);
          }
          a4 = 0;
          *(_OWORD *)(v7 - 32) = v133;
          *(_QWORD *)(v7 - 16) = v38;
          *(_WORD *)(v7 - 8) = v45;
          *(_BYTE *)(v7 - 6) = v16;
          a2 = v135;
          continue;
        }
        v16 = *(unsigned __int8 *)(a1 + 26);
LABEL_11:
        v132 = *(_OWORD *)a1;
        v131 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v17 = a1;
        v18 = *(_WORD *)(a1 + 24);
        do
        {
          v19 = v17;
          v17 += 32;
        }
        while (*(unsigned __int8 *)(v19 + 58) < v16);
        v20 = a2;
        if (v19 == a1)
        {
          v23 = v135;
          while (v17 < v23)
          {
            v21 = v23 - 32;
            v24 = *(unsigned __int8 *)(v23 - 6);
            v23 -= 32;
            if (v24 < v16)
              goto LABEL_21;
          }
          v21 = v23;
        }
        else
        {
          do
          {
            v21 = v20 - 32;
            v22 = *(unsigned __int8 *)(v20 - 6);
            v20 -= 32;
          }
          while (v22 >= v16);
        }
LABEL_21:
        v7 = v17;
        if (v17 < v21)
        {
          v25 = v21;
          do
          {
            v26 = *(_OWORD *)v7;
            v27 = *(_QWORD *)(v7 + 16);
            *(_QWORD *)(v7 + 8) = 0;
            *(_QWORD *)(v7 + 16) = 0;
            *(_QWORD *)v7 = 0;
            v153 = *(_WORD *)(v7 + 24);
            v154 = *(_BYTE *)(v7 + 26);
            *(_OWORD *)v7 = *(_OWORD *)v25;
            *(_QWORD *)(v7 + 16) = *(_QWORD *)(v25 + 16);
            *(_QWORD *)(v25 + 8) = 0;
            *(_QWORD *)(v25 + 16) = 0;
            *(_QWORD *)v25 = 0;
            v28 = *(_WORD *)(v25 + 24);
            *(_BYTE *)(v7 + 26) = *(_BYTE *)(v25 + 26);
            *(_WORD *)(v7 + 24) = v28;
            v29 = *(void **)v25;
            if (*(_QWORD *)v25)
            {
              *(_QWORD *)(v25 + 8) = v29;
              v137 = v26;
              operator delete(v29);
              v26 = v137;
            }
            *(_OWORD *)v25 = v26;
            *(_QWORD *)(v25 + 16) = v27;
            *(_WORD *)(v25 + 24) = v153;
            *(_BYTE *)(v25 + 26) = v154;
            do
            {
              v30 = *(unsigned __int8 *)(v7 + 58);
              v7 += 32;
            }
            while (v30 < v16);
            do
            {
              v31 = *(unsigned __int8 *)(v25 - 6);
              v25 -= 32;
            }
            while (v31 >= v16);
          }
          while (v7 < v25);
        }
        v32 = (void **)(v7 - 32);
        if (v7 - 32 != a1)
        {
          v33 = *(void **)a1;
          if (*(_QWORD *)a1)
          {
            *(_QWORD *)(a1 + 8) = v33;
            operator delete(v33);
            *(_QWORD *)a1 = 0;
            *(_QWORD *)(a1 + 8) = 0;
            *(_QWORD *)(a1 + 16) = 0;
          }
          *(_OWORD *)a1 = *(_OWORD *)(v7 - 32);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 - 16);
          *v32 = 0;
          *(_QWORD *)(v7 - 24) = 0;
          *(_QWORD *)(v7 - 16) = 0;
          v34 = *(_WORD *)(v7 - 8);
          *(_BYTE *)(a1 + 26) = *(_BYTE *)(v7 - 6);
          *(_WORD *)(a1 + 24) = v34;
        }
        v35 = *v32;
        if (*v32)
        {
          *(_QWORD *)(v7 - 24) = v35;
          operator delete(v35);
        }
        *(_OWORD *)(v7 - 32) = v132;
        *(_QWORD *)(v7 - 16) = v131;
        *(_WORD *)(v7 - 8) = v18;
        *(_BYTE *)(v7 - 6) = v16;
        v36 = v17 >= v21;
        a2 = v135;
        if (!v36)
        {
LABEL_39:
          std::__introsort<std::_ClassicAlgPolicy,md::LabelExternalPointFeature::finalize(void)::{lambda(md::LabelFeaturePlacementInfo const&,md::LabelFeaturePlacementInfo const&)#1} &,md::LabelFeaturePlacementInfo*,false>(a1, v7 - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v37 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalPointFeature::finalize(void)::{lambda(md::LabelFeaturePlacementInfo const&,md::LabelFeaturePlacementInfo const&)#1} &,md::LabelFeaturePlacementInfo*>(a1, v7 - 32);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelExternalPointFeature::finalize(void)::{lambda(md::LabelFeaturePlacementInfo const&,md::LabelFeaturePlacementInfo const&)#1} &,md::LabelFeaturePlacementInfo*>(v7, v135))
        {
          if (v37)
            continue;
          goto LABEL_39;
        }
        a2 = v7 - 32;
        if (!v37)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a2 - 6;
  v10 = a2 - 2;
  v140 = a2 - 12;
  v141 = a2 - 8;
  v139 = a2 - 18;
  v11 = a2 - 14;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v12) >> 3);
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = *v10;
        if (*v10 < *(float *)(v12 + 16))
        {
          v166 = *(_OWORD *)v12;
          *(_OWORD *)v12 = *(_OWORD *)v9;
          *(_OWORD *)v9 = v166;
          result = *(float *)(v12 + 16);
          *(float *)(v12 + 16) = *v10;
          *v10 = result;
        }
        return result;
      case 3:
        v89 = (float *)(v12 + 16);
        v90 = (_OWORD *)(v12 + 24);
        v91 = (float *)(v12 + 40);
        result = *(float *)(v12 + 40);
        v92 = *v10;
        if (result < *(float *)(v12 + 16))
        {
          if (v92 >= result)
          {
            v174 = *(_OWORD *)v12;
            *(_OWORD *)v12 = *v90;
            *v90 = v174;
            result = *(float *)(v12 + 16);
            *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 + 40);
            *(float *)(v12 + 40) = result;
            if (*v10 >= result)
              return result;
            v138 = *v90;
            *v90 = *(_OWORD *)v9;
            *(_OWORD *)v9 = v138;
            v89 = (float *)(v12 + 40);
          }
          else
          {
            v167 = *(_OWORD *)v12;
            *(_OWORD *)v12 = *(_OWORD *)v9;
            *(_OWORD *)v9 = v167;
          }
          v91 = a2 - 2;
          goto LABEL_175;
        }
        if (v92 < result)
        {
          v132 = *v90;
          *v90 = *(_OWORD *)v9;
          *(_OWORD *)v9 = v132;
          *(float *)&v132 = *v91;
          *v91 = *v10;
          *(_DWORD *)v10 = v132;
          result = *v91;
          if (*v91 < *v89)
          {
            v172 = *(_OWORD *)v12;
            *(_OWORD *)v12 = *v90;
            *v90 = v172;
LABEL_175:
            result = *v89;
            *v89 = *v91;
            *v91 = result;
            return result;
          }
        }
        return result;
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLogic::getTransitLineMarkersForSelectionAtGroundPoint(gm::Matrix<double,3,1> const&)::$_0 &,std::pair<md::TransitLineWithLink,float> *>((float *)v12, (float *)(v12 + 24), (float *)(v12 + 48), a2 - 6);
      case 5:
        v93 = (__int128 *)(v12 + 24);
        v94 = (__int128 *)(v12 + 48);
        v95 = (__int128 *)(v12 + 72);
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLogic::getTransitLineMarkersForSelectionAtGroundPoint(gm::Matrix<double,3,1> const&)::$_0 &,std::pair<md::TransitLineWithLink,float> *>((float *)v12, (float *)(v12 + 24), (float *)(v12 + 48), (float *)(v12 + 72));
        result = *v10;
        if (*v10 < *(float *)(v12 + 88))
        {
          v96 = *v95;
          *v95 = *(_OWORD *)v9;
          *(_OWORD *)v9 = v96;
          LODWORD(v96) = *(_DWORD *)(v12 + 88);
          *(float *)(v12 + 88) = *v10;
          *(_DWORD *)v10 = v96;
          result = *(float *)(v12 + 88);
          if (result < *(float *)(v12 + 64))
          {
            v97 = *v94;
            *v94 = *v95;
            *v95 = v97;
            LODWORD(v97) = *(_DWORD *)(v12 + 64);
            v98 = *(float *)(v12 + 88);
            *(float *)(v12 + 64) = v98;
            *(_DWORD *)(v12 + 88) = v97;
            result = *(float *)(v12 + 40);
            if (v98 < result)
            {
              v99 = *v93;
              *v93 = *v94;
              *v94 = v99;
              LODWORD(v99) = *(_DWORD *)(v12 + 40);
              v100 = *(float *)(v12 + 64);
              *(float *)(v12 + 40) = v100;
              *(_DWORD *)(v12 + 64) = v99;
              result = *(float *)(v12 + 16);
              if (v100 < result)
              {
                v168 = *(_OWORD *)v12;
                *(_OWORD *)v12 = *v93;
                *v93 = v168;
                result = *(float *)(v12 + 16);
                *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 + 40);
                *(float *)(v12 + 40) = result;
              }
            }
          }
        }
        return result;
      default:
        if (v13 <= 575)
        {
          v101 = (float *)(v12 + 24);
          v103 = (float *)v12 == a2 || v101 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v103)
            {
              v104 = 0;
              v105 = (float *)v12;
              do
              {
                result = v105[10];
                v107 = v105[4];
                v105 = v101;
                if (result < v107)
                {
                  v169 = *(_OWORD *)v101;
                  v108 = v104;
                  do
                  {
                    v109 = v12 + v108;
                    *(_OWORD *)(v109 + 24) = *(_OWORD *)(v12 + v108);
                    *(_DWORD *)(v109 + 40) = *(_DWORD *)(v12 + v108 + 16);
                    if (!v108)
                    {
                      v106 = v12;
                      goto LABEL_124;
                    }
                    v108 -= 24;
                  }
                  while (result < *(float *)(v109 - 8));
                  v106 = v12 + v108 + 24;
LABEL_124:
                  *(_OWORD *)v106 = v169;
                  *(float *)(v106 + 16) = result;
                }
                v101 = v105 + 6;
                v104 += 24;
              }
              while (v105 + 6 != a2);
            }
          }
          else if (!v103)
          {
            v133 = v12 + 16;
            do
            {
              result = *(float *)(a1 + 40);
              v134 = *(float *)(a1 + 16);
              a1 = (uint64_t)v101;
              if (result < v134)
              {
                v173 = *(_OWORD *)v101;
                v135 = v133;
                do
                {
                  v136 = (float *)v135;
                  *(_OWORD *)(v135 + 8) = *(_OWORD *)(v135 - 16);
                  *(_DWORD *)(v135 + 24) = *(_DWORD *)v135;
                  v137 = *(float *)(v135 - 24);
                  v135 -= 24;
                }
                while (result < v137);
                *((_OWORD *)v136 - 1) = v173;
                *v136 = result;
              }
              v101 = (float *)(a1 + 24);
              v133 += 24;
            }
            while ((float *)(a1 + 24) != a2);
          }
          return result;
        }
        if (a3)
        {
          v15 = (unint64_t)v14 >> 1;
          v16 = v12 + 24 * ((unint64_t)v14 >> 1);
          v17 = *v10;
          if ((unint64_t)v13 >= 0xC01)
          {
            v18 = (float *)(v16 + 16);
            v19 = *(float *)(v16 + 16);
            v20 = (float *)(v12 + 16);
            if (v19 >= *(float *)(v12 + 16))
            {
              if (v17 >= v19
                || (v147 = *(_OWORD *)v16,
                    *(_OWORD *)v16 = *(_OWORD *)v9,
                    *(_OWORD *)v9 = v147,
                    v24 = *(_DWORD *)(v16 + 16),
                    *(float *)(v16 + 16) = *v10,
                    *(_DWORD *)v10 = v24,
                    *(float *)(v16 + 16) >= *v20))
              {
LABEL_22:
                v29 = (__int128 *)(v12 + 24);
                v30 = v12 + 24 * v15;
                v32 = *(float *)(v30 - 8);
                v31 = (float *)(v30 - 8);
                v33 = v32;
                v34 = v31 - 4;
                v35 = (float *)(v12 + 40);
                v36 = *v141;
                if (v32 >= *(float *)(v12 + 40))
                {
                  if (v36 >= v33
                    || (v153 = *(_OWORD *)v34,
                        *(_OWORD *)v34 = *(_OWORD *)v140,
                        *(_OWORD *)v140 = v153,
                        v38 = *v31,
                        *v31 = *v141,
                        *v141 = v38,
                        *v31 >= *v35))
                  {
LABEL_35:
                    v44 = (__int128 *)(v12 + 48);
                    v45 = v12 + 24 * v15;
                    v47 = *(float *)(v45 + 40);
                    v46 = (float *)(v45 + 40);
                    v48 = v47;
                    v49 = v46 - 4;
                    v50 = (float *)(v12 + 64);
                    v51 = *v11;
                    if (v47 >= *(float *)(v12 + 64))
                    {
                      if (v51 >= v48
                        || (v157 = *(_OWORD *)v49,
                            *(_OWORD *)v49 = *(_OWORD *)v139,
                            *(_OWORD *)v139 = v157,
                            v53 = *v46,
                            *v46 = *v11,
                            *v11 = v53,
                            v48 = *v46,
                            *v46 >= *v50))
                      {
LABEL_45:
                        v58 = *v18;
                        if (*v18 >= *v31)
                        {
                          if (v48 >= v58)
                            goto LABEL_55;
                          v160 = *(_OWORD *)v16;
                          *(_OWORD *)v16 = *(_OWORD *)v49;
                          *(_OWORD *)v49 = v160;
                          v59 = *(_DWORD *)(v16 + 16);
                          v60 = *v46;
                          *(float *)(v16 + 16) = *v46;
                          *(_DWORD *)v46 = v59;
                          if (v60 >= *v31)
                            goto LABEL_55;
                          v161 = *(_OWORD *)v34;
                          *(_OWORD *)v34 = *(_OWORD *)v16;
                          *(_OWORD *)v16 = v161;
                        }
                        else
                        {
                          if (v48 >= v58)
                          {
                            v162 = *(_OWORD *)v34;
                            *(_OWORD *)v34 = *(_OWORD *)v16;
                            *(_OWORD *)v16 = v162;
                            v61 = *v31;
                            *v31 = *(float *)(v16 + 16);
                            *(float *)(v16 + 16) = v61;
                            if (*v46 >= v61)
                            {
LABEL_55:
                              v164 = *(_OWORD *)v12;
                              *(_OWORD *)v12 = *(_OWORD *)v16;
                              *(_OWORD *)v16 = v164;
                              v22 = (float *)(v12 + 24 * v15 + 16);
                              goto LABEL_56;
                            }
                            v163 = *(_OWORD *)v16;
                            *(_OWORD *)v16 = *(_OWORD *)v49;
                            *(_OWORD *)v49 = v163;
                            v31 = (float *)(v16 + 16);
                          }
                          else
                          {
                            v159 = *(_OWORD *)v34;
                            *(_OWORD *)v34 = *(_OWORD *)v49;
                            *(_OWORD *)v49 = v159;
                          }
                          v18 = v46;
                        }
                        v62 = *v31;
                        *v31 = *v18;
                        *v18 = v62;
                        goto LABEL_55;
                      }
                      v54 = *v44;
                      *v44 = *(_OWORD *)v49;
                      *(_OWORD *)v49 = v54;
                      v55 = v46;
                    }
                    else
                    {
                      if (v51 >= v48)
                      {
                        v56 = *v44;
                        *v44 = *(_OWORD *)v49;
                        *(_OWORD *)v49 = v56;
                        v48 = *v50;
                        *v50 = *v46;
                        *v46 = v48;
                        if (*v11 >= v48)
                          goto LABEL_45;
                        v158 = *(_OWORD *)v49;
                        *(_OWORD *)v49 = *(_OWORD *)v139;
                        *(_OWORD *)v139 = v158;
                        v50 = v46;
                      }
                      else
                      {
                        v52 = *v44;
                        *v44 = *(_OWORD *)v139;
                        *(_OWORD *)v139 = v52;
                      }
                      v55 = a2 - 14;
                    }
                    v57 = *v50;
                    *v50 = *v55;
                    *v55 = v57;
                    v48 = *v46;
                    goto LABEL_45;
                  }
                  v39 = *v29;
                  *v29 = *(_OWORD *)v34;
                  *(_OWORD *)v34 = v39;
                  v40 = v31;
                }
                else
                {
                  if (v36 >= v33)
                  {
                    v42 = *v29;
                    *v29 = *(_OWORD *)v34;
                    *(_OWORD *)v34 = v42;
                    *(float *)&v42 = *v35;
                    *v35 = *v31;
                    *(_DWORD *)v31 = v42;
                    if (*v141 >= *(float *)&v42)
                      goto LABEL_35;
                    v156 = *(_OWORD *)v34;
                    *(_OWORD *)v34 = *(_OWORD *)v140;
                    *(_OWORD *)v140 = v156;
                    v35 = v31;
                  }
                  else
                  {
                    v37 = *v29;
                    *v29 = *(_OWORD *)v140;
                    *(_OWORD *)v140 = v37;
                  }
                  v40 = a2 - 8;
                }
                v43 = *v35;
                *v35 = *v40;
                *v40 = v43;
                goto LABEL_35;
              }
              v148 = *(_OWORD *)v12;
              *(_OWORD *)v12 = *(_OWORD *)v16;
              *(_OWORD *)v16 = v148;
              v21 = (int *)(v12 + 16);
              v25 = (float *)(v16 + 16);
            }
            else
            {
              if (v17 >= v19)
              {
                v151 = *(_OWORD *)v12;
                *(_OWORD *)v12 = *(_OWORD *)v16;
                *(_OWORD *)v16 = v151;
                v27 = *(float *)(v12 + 16);
                *(_DWORD *)(v12 + 16) = *(_DWORD *)(v16 + 16);
                *(float *)(v16 + 16) = v27;
                if (*v10 >= v27)
                  goto LABEL_22;
                v152 = *(_OWORD *)v16;
                *(_OWORD *)v16 = *(_OWORD *)v9;
                *(_OWORD *)v9 = v152;
                v21 = (int *)(v16 + 16);
              }
              else
              {
                v145 = *(_OWORD *)v12;
                *(_OWORD *)v12 = *(_OWORD *)v9;
                *(_OWORD *)v9 = v145;
                v21 = (int *)(v12 + 16);
              }
              v25 = a2 - 2;
            }
            v28 = *v21;
            *v21 = *(_DWORD *)v25;
            *(_DWORD *)v25 = v28;
            goto LABEL_22;
          }
          v22 = (float *)(v12 + 16);
          v23 = *(float *)(v12 + 16);
          v20 = (float *)(v16 + 16);
          if (v23 < *(float *)(v16 + 16))
          {
            if (v17 >= v23)
            {
              v154 = *(_OWORD *)v16;
              *(_OWORD *)v16 = *(_OWORD *)v12;
              *(_OWORD *)v12 = v154;
              v41 = *(float *)(v16 + 16);
              *(_DWORD *)(v16 + 16) = *(_DWORD *)(v12 + 16);
              *(float *)(v12 + 16) = v41;
              if (*v10 >= v41)
                goto LABEL_57;
              v155 = *(_OWORD *)v12;
              *(_OWORD *)v12 = *(_OWORD *)v9;
              *(_OWORD *)v9 = v155;
              v20 = (float *)(v12 + 16);
            }
            else
            {
              v146 = *(_OWORD *)v16;
              *(_OWORD *)v16 = *(_OWORD *)v9;
              *(_OWORD *)v9 = v146;
            }
            v22 = a2 - 2;
            goto LABEL_56;
          }
          if (v17 < v23)
          {
            v149 = *(_OWORD *)v12;
            *(_OWORD *)v12 = *(_OWORD *)v9;
            *(_OWORD *)v9 = v149;
            v26 = *(_DWORD *)(v12 + 16);
            *(float *)(v12 + 16) = *v10;
            *(_DWORD *)v10 = v26;
            if (*(float *)(v12 + 16) < *v20)
            {
              v150 = *(_OWORD *)v16;
              *(_OWORD *)v16 = *(_OWORD *)v12;
              *(_OWORD *)v12 = v150;
LABEL_56:
              v63 = *v20;
              *v20 = *v22;
              *v22 = v63;
            }
          }
LABEL_57:
          --a3;
          if ((a4 & 1) == 0)
          {
            v64 = *(float *)(v12 + 16);
            if (*(float *)(v12 - 8) < v64)
              goto LABEL_60;
            v143 = *(_OWORD *)v12;
            result = *(float *)(v12 + 16);
            if (result >= *v10)
            {
              v80 = v12 + 24;
              do
              {
                v12 = v80;
                if (v80 >= (unint64_t)a2)
                  break;
                v81 = *(float *)(v80 + 16);
                v80 += 24;
              }
              while (result >= v81);
            }
            else
            {
              v78 = v12;
              do
              {
                v12 = v78 + 24;
                v79 = *(float *)(v78 + 40);
                v78 += 24;
              }
              while (result >= v79);
            }
            v82 = a2;
            if (v12 < (unint64_t)a2)
            {
              v83 = a2;
              do
              {
                v82 = v83 - 6;
                v84 = *(v83 - 2);
                v83 -= 6;
              }
              while (result < v84);
            }
            while (v12 < (unint64_t)v82)
            {
              v165 = *(_OWORD *)v12;
              *(_OWORD *)v12 = *(_OWORD *)v82;
              *(_OWORD *)v82 = v165;
              v85 = *(_DWORD *)(v12 + 16);
              *(float *)(v12 + 16) = v82[4];
              *((_DWORD *)v82 + 4) = v85;
              do
              {
                v86 = *(float *)(v12 + 40);
                v12 += 24;
              }
              while (result >= v86);
              do
              {
                v87 = *(v82 - 2);
                v82 -= 6;
              }
              while (result < v87);
            }
            v88 = (_OWORD *)(v12 - 24);
            if (v12 - 24 != a1)
            {
              *(_OWORD *)a1 = *v88;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(v12 - 8);
            }
            a4 = 0;
            *v88 = v143;
            *(float *)(v12 - 8) = result;
            continue;
          }
          v64 = *(float *)(v12 + 16);
LABEL_60:
          v142 = *(_OWORD *)v12;
          v65 = v12;
          do
          {
            v66 = v65;
            v65 += 24;
          }
          while (*(float *)(v66 + 40) < v64);
          v67 = a2;
          if (v66 == v12)
          {
            v70 = a2;
            while (v65 < (unint64_t)v70)
            {
              v68 = v70 - 6;
              v71 = *(v70 - 2);
              v70 -= 6;
              if (v71 < v64)
                goto LABEL_70;
            }
            v68 = v70;
          }
          else
          {
            do
            {
              v68 = v67 - 6;
              v69 = *(v67 - 2);
              v67 -= 6;
            }
            while (v69 >= v64);
          }
LABEL_70:
          v12 = v65;
          if (v65 < (unint64_t)v68)
          {
            v72 = (unint64_t)v68;
            do
            {
              v73 = *(_OWORD *)v12;
              *(_OWORD *)v12 = *(_OWORD *)v72;
              *(_OWORD *)v72 = v73;
              LODWORD(v73) = *(_DWORD *)(v12 + 16);
              *(_DWORD *)(v12 + 16) = *(_DWORD *)(v72 + 16);
              *(_DWORD *)(v72 + 16) = v73;
              do
              {
                v74 = *(float *)(v12 + 40);
                v12 += 24;
              }
              while (v74 < v64);
              do
              {
                v75 = *(float *)(v72 - 8);
                v72 -= 24;
              }
              while (v75 >= v64);
            }
            while (v12 < v72);
          }
          v76 = (_OWORD *)(v12 - 24);
          if (v12 - 24 != a1)
          {
            *(_OWORD *)a1 = *v76;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v12 - 8);
          }
          *v76 = v142;
          *(float *)(v12 - 8) = v64;
          if (v65 < (unint64_t)v68)
            goto LABEL_81;
          v77 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLogic::getTransitLineMarkersForSelectionAtGroundPoint(gm::Matrix<double,3,1> const&)::$_0 &,std::pair<md::TransitLineWithLink,float> *>(a1, v12 - 24);
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::TransitLogic::getTransitLineMarkersForSelectionAtGroundPoint(gm::Matrix<double,3,1> const&)::$_0 &,std::pair<md::TransitLineWithLink,float> *>(v12, (uint64_t)a2))
          {
            if (v77)
              continue;
LABEL_81:
            std::__introsort<std::_ClassicAlgPolicy,md::TransitLogic::getTransitLineMarkersForSelectionAtGroundPoint(gm::Matrix<double,3,1> const&)::$_0 &,std::pair<md::TransitLineWithLink,float> *,false>(a1, v12 - 24, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (float *)(v12 - 24);
          if (v77)
            return result;
          goto LABEL_1;
        }
        if ((float *)v12 != a2)
        {
          v110 = (unint64_t)(v14 - 2) >> 1;
          v111 = v110;
          do
          {
            if (v110 >= v111)
            {
              v113 = (2 * v111) | 1;
              v114 = v12 + 24 * v113;
              if (2 * v111 + 2 < v14 && *(float *)(v114 + 16) < *(float *)(v114 + 40))
              {
                v114 += 24;
                v113 = 2 * v111 + 2;
              }
              v115 = v12 + 24 * v111;
              v116 = *(float *)(v115 + 16);
              if (*(float *)(v114 + 16) >= v116)
              {
                v170 = *(_OWORD *)v115;
                do
                {
                  v117 = v115;
                  v115 = v114;
                  *(_OWORD *)v117 = *(_OWORD *)v114;
                  *(_DWORD *)(v117 + 16) = *(_DWORD *)(v114 + 16);
                  if (v110 < v113)
                    break;
                  v118 = 2 * v113;
                  v113 = (2 * v113) | 1;
                  v114 = v12 + 24 * v113;
                  v119 = v118 + 2;
                  if (v119 < v14 && *(float *)(v114 + 16) < *(float *)(v114 + 40))
                  {
                    v114 += 24;
                    v113 = v119;
                  }
                }
                while (*(float *)(v114 + 16) >= v116);
                *(_OWORD *)v115 = v170;
                *(float *)(v115 + 16) = v116;
              }
            }
            v112 = v111-- <= 0;
          }
          while (!v112);
          v120 = v13 / 0x18uLL;
          do
          {
            v122 = 0;
            v123 = a2;
            v144 = *(_OWORD *)v12;
            result = *(float *)(v12 + 16);
            v124 = v12;
            do
            {
              v125 = v124;
              v124 += 24 * v122 + 24;
              v126 = 2 * v122;
              v122 = (2 * v122) | 1;
              v127 = v126 + 2;
              if (v127 < v120 && *(float *)(v124 + 16) < *(float *)(v124 + 40))
              {
                v124 += 24;
                v122 = v127;
              }
              *(_OWORD *)v125 = *(_OWORD *)v124;
              *(_DWORD *)(v125 + 16) = *(_DWORD *)(v124 + 16);
            }
            while (v122 <= (uint64_t)((unint64_t)(v120 - 2) >> 1));
            a2 -= 6;
            if ((float *)v124 == v123 - 6)
            {
              v121 = v144;
            }
            else
            {
              *(_OWORD *)v124 = *(_OWORD *)a2;
              *(float *)(v124 + 16) = *(v123 - 2);
              *(_OWORD *)a2 = v144;
              *(v123 - 2) = result;
              v128 = v124 - v12 + 24;
              if (v128 < 25)
                goto LABEL_149;
              v129 = (v128 / 0x18uLL - 2) >> 1;
              v130 = v12 + 24 * v129;
              result = *(float *)(v124 + 16);
              if (*(float *)(v130 + 16) >= result)
                goto LABEL_149;
              v171 = *(_OWORD *)v124;
              do
              {
                v131 = v124;
                v124 = v130;
                *(_OWORD *)v131 = *(_OWORD *)v130;
                *(_DWORD *)(v131 + 16) = *(_DWORD *)(v130 + 16);
                if (!v129)
                  break;
                v129 = (v129 - 1) >> 1;
                v130 = v12 + 24 * v129;
              }
              while (*(float *)(v130 + 16) < result);
              v121 = v171;
            }
            *(_OWORD *)v124 = v121;
            *(float *)(v124 + 16) = result;
LABEL_149:
            v112 = v120-- <= 2;
          }
          while (!v112);
        }
        return result;
    }
  }
}

  v96 = a2 - 48;
  v97 = a2 - 24;
  v95 = a2 - 72;
  v8 = a1;
  v98 = a2;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(v97, v8))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &>(v8, v97);
        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0 &,geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>(v8, v8 + 24, v97);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0 &,geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>(v8, v8 + 24, v8 + 48, v97);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0 &,geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *,0>(v8, v8 + 24, v8 + 48, v8 + 72, v97);
        return;
      default:
        if (v9 <= 575)
        {
          if ((a4 & 1) != 0)
          {
            if (v8 != a2)
            {
              v37 = v8 + 24;
              if (v8 + 24 != a2)
              {
                v38 = 0;
                v39 = v8;
                do
                {
                  v44 = v37;
                  if (md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(v37, v39))
                  {
                    v100 = &off_1E42B4CB0;
                    obj = *(id *)(v39 + 32);
                    v45 = *(void **)(v39 + 32);
                    *(_QWORD *)(v39 + 32) = 0;

                    v46 = v38;
                    do
                    {
                      v47 = v8 + v46;
                      objc_storeStrong((id *)(v8 + v46 + 32), *(id *)(v8 + v46 + 8));
                      v48 = *(void **)(v8 + v46 + 8);
                      *(_QWORD *)(v8 + v46 + 8) = 0;

                      if (!v46)
                      {
                        v40 = v8;
                        goto LABEL_60;
                      }
                      v46 -= 24;
                    }
                    while (md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()((uint64_t)&v100, v47 - 24));
                    v40 = v8 + v46 + 24;
LABEL_60:
                    v41 = obj;
                    v42 = *(void **)(v40 + 8);
                    *(_QWORD *)(v40 + 8) = obj;
                    v43 = v41;

                  }
                  v37 = v44 + 24;
                  v38 += 24;
                  v39 = v44;
                }
                while (v44 + 24 != a2);
              }
            }
          }
          else if (v8 != a2)
          {
            v85 = v8 + 24;
            if (v8 + 24 != a2)
            {
              v86 = (id *)(v8 + 32);
              do
              {
                v87 = v85;
                if (md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(v85, a1))
                {
                  v100 = &off_1E42B4CB0;
                  obj = *(id *)(a1 + 32);
                  v88 = *(void **)(a1 + 32);
                  *(_QWORD *)(a1 + 32) = 0;

                  v89 = v86;
                  do
                  {
                    objc_storeStrong(v89, *(v89 - 3));
                    v90 = *(v89 - 3);
                    *(v89 - 3) = 0;

                    v91 = md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()((uint64_t)&v100, (uint64_t)(v89 - 7));
                    v89 -= 3;
                  }
                  while (v91);
                  v92 = obj;
                  v93 = *v89;
                  *v89 = obj;
                  v94 = v92;

                }
                v85 = v87 + 24;
                v86 += 3;
                a1 = v87;
              }
              while (v87 + 24 != a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if (v8 == a2)
            return;
          v49 = (unint64_t)(v10 - 2) >> 1;
          v50 = v49;
          do
          {
            v51 = v50;
            if (v49 >= v50)
            {
              v52 = (2 * v50) | 1;
              v53 = a1 + 24 * v52;
              if (2 * v50 + 2 < v10
                && md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(a1 + 24 * v52, v53 + 24))
              {
                v53 += 24;
                v52 = 2 * v51 + 2;
              }
              v54 = a1 + 24 * v51;
              if (!md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(v53, v54))
              {
                v100 = &off_1E42B4CB0;
                v55 = a1 + 24 * v51;
                obj = *(id *)(v55 + 8);
                v56 = *(void **)(v55 + 8);
                *(_QWORD *)(v55 + 8) = 0;

                do
                {
                  v57 = v53;
                  objc_storeStrong((id *)(v54 + 8), *(id *)(v53 + 8));
                  v58 = *(void **)(v53 + 8);
                  *(_QWORD *)(v53 + 8) = 0;

                  if (v49 < v52)
                    break;
                  v59 = (2 * v52) | 1;
                  v53 = a1 + 24 * v59;
                  v52 = 2 * v52 + 2;
                  if (v52 >= v10)
                  {
                    v52 = v59;
                  }
                  else if (md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(a1 + 24 * v59, v53 + 24))
                  {
                    v53 += 24;
                  }
                  else
                  {
                    v52 = v59;
                  }
                  v54 = v57;
                }
                while (!md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(v53, (uint64_t)&v100));
                objc_storeStrong((id *)(v57 + 8), obj);

              }
            }
            v50 = v51 - 1;
          }
          while (v51);
          v60 = v9 / 0x18uLL;
          v61 = v98;
          while (2)
          {
            v99 = v61;
            v65 = *(id *)(a1 + 8);
            v66 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

            v67 = 0;
            v68 = a1;
            do
            {
              v70 = v68 + 24 * v67 + 24;
              v71 = (2 * v67) | 1;
              v72 = 2 * v67 + 2;
              if (v72 < v60
                && md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(v68 + 24 * v67 + 24, v68 + 24 * v67 + 48))
              {
                v70 += 24;
                v71 = v72;
              }
              objc_storeStrong((id *)(v68 + 8), *(id *)(v70 + 8));
              v69 = *(void **)(v70 + 8);
              *(_QWORD *)(v70 + 8) = 0;

              v68 = v70;
              v67 = v71;
            }
            while (v71 <= (uint64_t)((unint64_t)(v60 - 2) >> 1));
            v73 = (id *)(v70 + 8);
            v61 -= 24;
            if (v70 != v99 - 24)
            {
              objc_storeStrong((id *)(v70 + 8), *(id *)(v99 - 16));
              v74 = *(void **)(v99 - 16);
              *(_QWORD *)(v99 - 16) = 0;

              v75 = *(void **)(v99 - 16);
              *(_QWORD *)(v99 - 16) = v65;
              v76 = v65;

              v77 = v70 - a1 + 24;
              if (v77 >= 25)
              {
                v78 = (v77 / 0x18uLL - 2) >> 1;
                v79 = a1 + 24 * v78;
                if (md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(v79, v70))
                {
                  v100 = &off_1E42B4CB0;
                  obj = *v73;
                  v80 = *v73;
                  *v73 = 0;

                  do
                  {
                    v81 = v79;
                    objc_storeStrong((id *)(v70 + 8), *(id *)(v79 + 8));
                    v82 = *(void **)(v79 + 8);
                    *(_QWORD *)(v79 + 8) = 0;

                    if (!v78)
                      break;
                    v78 = (v78 - 1) >> 1;
                    v79 = a1 + 24 * v78;
                    v70 = v81;
                  }
                  while (md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(v79, (uint64_t)&v100));
                  v83 = obj;
                  v84 = *(void **)(v81 + 8);
                  *(_QWORD *)(v81 + 8) = obj;
                  v63 = v83;

LABEL_87:
                }
              }
              if (v60-- <= 2)
                return;
              continue;
            }
            break;
          }
          v62 = *v73;
          *v73 = v65;
          v63 = v65;

          goto LABEL_87;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 24 * v11;
        if ((unint64_t)v9 < 0xC01)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0 &,geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>(v8 + 24 * v11, v8, v97);
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_10;
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0 &,geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>(v8, v8 + 24 * v11, v97);
          v13 = 24 * v11;
          v14 = v8 + v13;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0 &,geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>(v8 + 24, v8 + v13 - 24, v96);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0 &,geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>(v8 + 48, v8 + 24 + v13, v95);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0 &,geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>(v8 + v13 - 24, v12, v8 + 24 + v13);
          v15 = *(id *)(v8 + 8);
          v16 = *(void **)(v8 + 8);
          *(_QWORD *)(v8 + 8) = 0;

          objc_storeStrong((id *)(v8 + 8), *(id *)(v8 + v13 + 8));
          v17 = *(void **)(v8 + v13 + 8);
          *(_QWORD *)(v14 + 8) = 0;

          v18 = *(void **)(v8 + v13 + 8);
          *(_QWORD *)(v14 + 8) = v15;
          a2 = v98;
          v19 = v15;

          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_10;
        }
        if (!md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(v8 - 24, v8))
        {
          v100 = &off_1E42B4CB0;
          v29 = *(id *)(v8 + 8);
          obj = v29;
          v30 = *(void **)(v8 + 8);
          *(_QWORD *)(v8 + 8) = 0;

          if (md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()((uint64_t)&v100, v97))
          {
            do
              v8 += 24;
            while (!md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()((uint64_t)&v100, v8));
          }
          else
          {
            v31 = v8 + 24;
            do
            {
              v8 = v31;
              if (v31 >= a2)
                break;
              v32 = md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()((uint64_t)&v100, v31);
              v31 = v8 + 24;
            }
            while (!v32);
          }
          v33 = a2;
          if (v8 < a2)
          {
            v33 = a2;
            do
              v33 -= 24;
            while (md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()((uint64_t)&v100, v33));
          }
          while (v8 < v33)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &>(v8, v33);
            do
              v8 += 24;
            while (!md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()((uint64_t)&v100, v8));
            do
              v33 -= 24;
            while (md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()((uint64_t)&v100, v33));
          }
          if (v8 - 24 != a1)
          {
            objc_storeStrong((id *)(a1 + 8), *(id *)(v8 - 16));
            v34 = *(void **)(v8 - 16);
            *(_QWORD *)(v8 - 16) = 0;

          }
          v35 = *(void **)(v8 - 16);
          *(_QWORD *)(v8 - 16) = v29;
          v36 = v29;

          a4 = 0;
          continue;
        }
LABEL_10:
        v100 = &off_1E42B4CB0;
        v20 = *(id *)(v8 + 8);
        obj = v20;
        v21 = *(void **)(v8 + 8);
        *(_QWORD *)(v8 + 8) = 0;

        v22 = v8;
        do
          v22 += 24;
        while (md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(v22, (uint64_t)&v100));
        v23 = a2;
        if (v22 - 24 == v8)
        {
          v23 = a2;
          do
          {
            if (v22 >= v23)
              break;
            v23 -= 24;
          }
          while (!md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(v23, (uint64_t)&v100));
        }
        else
        {
          do
            v23 -= 24;
          while (!md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(v23, (uint64_t)&v100));
        }
        v8 = v22;
        if (v22 < v23)
        {
          v24 = v23;
          do
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &,std::__wrap_iter<geo::_retain_ptr<VKOverlay * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *> &>(v8, v24);
            do
              v8 += 24;
            while (md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(v8, (uint64_t)&v100));
            do
              v24 -= 24;
            while (!md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0::operator()(v24, (uint64_t)&v100));
          }
          while (v8 < v24);
        }
        if (v8 - 24 != a1)
        {
          objc_storeStrong((id *)(a1 + 8), *(id *)(v8 - 16));
          v25 = *(void **)(v8 - 16);
          *(_QWORD *)(v8 - 16) = 0;

        }
        v26 = *(void **)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v20;
        v27 = v20;

        a2 = v98;
        if (v22 < v23)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0 &,geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *,false>(a1, v8 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0 &,geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>(a1, v8 - 24);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationLabelFeature::RouteAnnotationLabelFeature(geo::Mercator3<double> const&,geo::PolylineCoordinate const&,double,double,std::vector<VKTrafficFeature * {__strong}> const&,std::shared_ptr<md::LabelDedupingGroup> const&,md::LabelManager *)::$_0 &,geo::_retain_ptr<VKTrafficFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc> *>(v8, v98))
        {
          if (v28)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 24;
        if (!v28)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a2 - 1;
  while (2)
  {
    v10 = i;
    v11 = (char *)a2 - (char *)i;
    v12 = a2 - i;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v142 = *v9;
        v143 = *v10;
        v144 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v9 + 64) + 248))(*(_QWORD *)(*v9 + 64));
        v145 = a3[2] > *v144 && *a3 < v144[2] && a3[3] > v144[1] && a3[1] < v144[3];
        v218 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v143 + 64) + 248))(*(_QWORD *)(v143 + 64));
        result = a3[2];
        v219 = 0;
        if (result > *v218)
        {
          result = *a3;
          if (*a3 < v218[2])
          {
            result = a3[3];
            if (result > v218[1])
            {
              result = a3[1];
              if (result < v218[3])
                v219 = 1;
            }
          }
        }
        if (*(_BYTE *)(v142 + 493) == 2)
          v220 = v145;
        else
          v220 = 0;
        if (*(_BYTE *)(v143 + 493) == 2)
          v221 = v219;
        else
          v221 = 0;
        if ((v220 | v221) == 1 && ((v220 ^ v221) & 1) != 0 || (v220 = v145, v145 != v219))
        {
          if (!v220)
            return result;
          goto LABEL_572;
        }
        result = *(float *)(v142 + 476);
        v286 = *(float *)(v143 + 476);
        if (result == v286)
        {
          if (v142 < v143)
            goto LABEL_572;
        }
        else if (result > v286)
        {
LABEL_572:
          v222 = *v10;
          *v10 = *v9;
          *v9 = v222;
          return result;
        }
        return result;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::MuninRoadLabel **>(v10, v10 + 1, v9, a3);
        return result;
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::MuninRoadLabel **>(v10, v10 + 1, v10 + 2, v9, a3);
      case 5:
        return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::MuninRoadLabel **,0>(v10, v10 + 1, v10 + 2, v10 + 3, v9, a3);
      default:
        v293 = v10;
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != a2)
            {
              v173 = (unint64_t)(v12 - 2) >> 1;
              v290 = v173;
              while (1)
              {
                v175 = v173;
                if (v290 < v173)
                  goto LABEL_438;
                v176 = (2 * v173) | 1;
                v174 = &v10[v176];
                if (2 * v173 + 2 < v12)
                {
                  v177 = *v174;
                  v178 = v174[1];
                  v179 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v174 + 64) + 248))(*(_QWORD *)(*v174 + 64));
                  v180 = a3[2] > *v179 && *a3 < v179[2] && a3[3] > v179[1] && a3[1] < v179[3];
                  v181 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v178 + 64) + 248))(*(_QWORD *)(v178 + 64));
                  v182 = a3[2] > *v181 && *a3 < v181[2] && a3[3] > v181[1] && a3[1] < v181[3];
                  if (*(_BYTE *)(v177 + 493) == 2)
                    v183 = v180;
                  else
                    v183 = 0;
                  if (*(_BYTE *)(v178 + 493) == 2)
                    v184 = v182;
                  else
                    v184 = 0;
                  if ((v183 | v184) != 1 || ((v183 ^ v184) & 1) == 0)
                  {
                    v183 = v180;
                    if (v180 == v182)
                    {
                      v216 = *(float *)(v177 + 476);
                      v217 = *(float *)(v178 + 476);
                      if (v216 == v217)
                      {
                        v10 = v293;
                        if (v177 >= v178)
                          goto LABEL_464;
                      }
                      else
                      {
                        v10 = v293;
                        if (v216 <= v217)
                          goto LABEL_464;
                      }
LABEL_463:
                      ++v174;
                      v176 = 2 * v175 + 2;
                      goto LABEL_464;
                    }
                  }
                  v10 = v293;
                  if (v183)
                    goto LABEL_463;
                }
LABEL_464:
                v185 = *v174;
                v186 = v10[v175];
                v187 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v174 + 64) + 248))(*(_QWORD *)(*v174 + 64));
                v188 = a3[2] > *v187 && *a3 < v187[2] && a3[3] > v187[1] && a3[1] < v187[3];
                v189 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v186 + 64) + 248))(*(_QWORD *)(v186 + 64));
                result = a3[2];
                v190 = 0;
                if (result > *v189)
                {
                  result = *a3;
                  if (*a3 < v189[2])
                  {
                    result = a3[3];
                    if (result > v189[1])
                    {
                      result = a3[1];
                      if (result < v189[3])
                        v190 = 1;
                    }
                  }
                }
                if (*(_BYTE *)(v185 + 493) == 2)
                  v191 = v188;
                else
                  v191 = 0;
                if (*(_BYTE *)(v186 + 493) == 2)
                  v192 = v190;
                else
                  v192 = 0;
                if ((v191 | v192) == 1 && ((v191 ^ v192) & 1) != 0 || (LOBYTE(v191) = v188, v188 != v190))
                {
                  if ((v191 & 1) == 0)
                    goto LABEL_486;
                }
                else
                {
                  result = *(float *)(v185 + 476);
                  v215 = *(float *)(v186 + 476);
                  if (result == v215)
                  {
                    if (v185 >= v186)
                    {
LABEL_486:
                      v287 = v175;
                      v193 = v10[v175];
                      v10[v175] = *v174;
                      if (v290 >= v176)
                      {
                        v289 = v193;
                        do
                        {
                          v194 = v174;
                          v195 = 2 * v176;
                          v176 = (2 * v176) | 1;
                          v174 = &v10[v176];
                          v196 = v195 + 2;
                          v295 = v194;
                          if (v195 + 2 < v12)
                          {
                            v197 = *v174;
                            v198 = v174[1];
                            v199 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v174 + 64) + 248))(*(_QWORD *)(*v174 + 64));
                            v200 = a3[2] > *v199 && *a3 < v199[2] && a3[3] > v199[1] && a3[1] < v199[3];
                            v201 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v198 + 64) + 248))(*(_QWORD *)(v198 + 64));
                            v202 = a3[2] > *v201 && *a3 < v201[2] && a3[3] > v201[1] && a3[1] < v201[3];
                            if (*(_BYTE *)(v197 + 493) == 2)
                              v203 = v200;
                            else
                              v203 = 0;
                            if (*(_BYTE *)(v198 + 493) == 2)
                              v204 = v202;
                            else
                              v204 = 0;
                            if ((v203 | v204) != 1 || ((v203 ^ v204) & 1) == 0)
                            {
                              v203 = v200;
                              if (v200 == v202)
                              {
                                v213 = *(float *)(v197 + 476);
                                v214 = *(float *)(v198 + 476);
                                if (v213 == v214)
                                {
                                  v10 = v293;
                                  if (v197 >= v198)
                                    goto LABEL_514;
                                }
                                else
                                {
                                  v10 = v293;
                                  if (v213 <= v214)
                                    goto LABEL_514;
                                }
LABEL_513:
                                ++v174;
                                v176 = v196;
                                goto LABEL_514;
                              }
                            }
                            v10 = v293;
                            if (v203)
                              goto LABEL_513;
                          }
LABEL_514:
                          v205 = *v174;
                          v206 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v174 + 64) + 248))(*(_QWORD *)(*v174 + 64));
                          v207 = a3[2] > *v206 && *a3 < v206[2] && a3[3] > v206[1] && a3[1] < v206[3];
                          v193 = v289;
                          v208 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v289 + 64) + 248))(*(_QWORD *)(v289 + 64));
                          result = a3[2];
                          v209 = 0;
                          if (result > *v208)
                          {
                            result = *a3;
                            if (*a3 < v208[2])
                            {
                              result = a3[3];
                              if (result > v208[1])
                              {
                                result = a3[1];
                                if (result < v208[3])
                                  v209 = 1;
                              }
                            }
                          }
                          if (*(_BYTE *)(v205 + 493) == 2)
                            v210 = v207;
                          else
                            v210 = 0;
                          if (*(_BYTE *)(v289 + 493) == 2)
                            v211 = v209;
                          else
                            v211 = 0;
                          if ((v210 | v211) == 1 && ((v210 ^ v211) & 1) != 0 || (LOBYTE(v210) = v207, v207 != v209))
                          {
                            if ((v210 & 1) != 0)
                              goto LABEL_436;
                          }
                          else
                          {
                            result = *(float *)(v205 + 476);
                            v212 = *(float *)(v289 + 476);
                            if (result == v212)
                            {
                              if (v205 < v289)
                              {
LABEL_436:
                                v174 = v295;
                                break;
                              }
                            }
                            else if (result > v212)
                            {
                              goto LABEL_436;
                            }
                          }
                          *v295 = *v174;
                        }
                        while (v290 >= v176);
                      }
                      *v174 = v193;
                      v175 = v287;
                    }
                  }
                  else if (result <= v215)
                  {
                    goto LABEL_486;
                  }
                }
LABEL_438:
                v173 = v175 - 1;
                if (!v175)
                {
                  v223 = (unint64_t)v11 >> 3;
                  while (1)
                  {
                    v225 = 0;
                    v291 = *v10;
                    v226 = (unint64_t)(v223 - 2) >> 1;
                    v227 = v10;
                    v296 = v223;
                    do
                    {
                      v228 = v227;
                      v227 += v225 + 1;
                      v229 = 2 * v225;
                      v225 = (2 * v225) | 1;
                      v230 = v229 + 2;
                      if (v229 + 2 < v223)
                      {
                        v231 = *v227;
                        v232 = v227[1];
                        v233 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v227 + 64) + 248))(*(_QWORD *)(*v227 + 64));
                        v234 = a3[2] > *v233 && *a3 < v233[2] && a3[3] > v233[1] && a3[1] < v233[3];
                        v235 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v232 + 64) + 248))(*(_QWORD *)(v232 + 64));
                        result = a3[2];
                        v236 = 0;
                        if (result > *v235)
                        {
                          result = *a3;
                          if (*a3 < v235[2])
                          {
                            result = a3[3];
                            if (result > v235[1])
                            {
                              result = a3[1];
                              if (result < v235[3])
                                v236 = 1;
                            }
                          }
                        }
                        if (*(_BYTE *)(v231 + 493) == 2)
                          v237 = v234;
                        else
                          v237 = 0;
                        if (*(_BYTE *)(v232 + 493) == 2)
                          v238 = v236;
                        else
                          v238 = 0;
                        if ((v237 | v238) == 1 && ((v237 ^ v238) & 1) != 0 || (v237 = v234, v234 != v236))
                        {
                          v223 = v296;
                          if (v237)
                            goto LABEL_577;
                        }
                        else
                        {
                          result = *(float *)(v231 + 476);
                          v239 = *(float *)(v232 + 476);
                          if (result == v239)
                          {
                            v223 = v296;
                            if (v231 < v232)
                            {
LABEL_577:
                              ++v227;
                              v225 = v230;
                            }
                          }
                          else
                          {
                            v223 = v296;
                            if (result > v239)
                              goto LABEL_577;
                          }
                        }
                      }
                      *v228 = *v227;
                    }
                    while (v225 <= v226);
                    v240 = a2 - 1;
                    v147 = v227 == --a2;
                    if (v147)
                    {
                      *v227 = v291;
                      v10 = v293;
                      goto LABEL_575;
                    }
                    *v227 = *v240;
                    *v240 = v291;
                    v10 = v293;
                    v241 = (char *)v227 - (char *)v293 + 8;
                    if (v241 >= 9)
                    {
                      v242 = ((unint64_t)v241 >> 3) - 2;
                      v243 = v242 >> 1;
                      v244 = &v293[v242 >> 1];
                      v245 = *v244;
                      v246 = *v227;
                      v247 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v244 + 64) + 248))(*(_QWORD *)(*v244 + 64));
                      v248 = a3[2] > *v247 && *a3 < v247[2] && a3[3] > v247[1] && a3[1] < v247[3];
                      v249 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v246 + 64) + 248))(*(_QWORD *)(v246 + 64));
                      result = a3[2];
                      v250 = 0;
                      if (result > *v249)
                      {
                        result = *a3;
                        if (*a3 < v249[2])
                        {
                          result = a3[3];
                          if (result > v249[1])
                          {
                            result = a3[1];
                            if (result < v249[3])
                              v250 = 1;
                          }
                        }
                      }
                      if (*(_BYTE *)(v245 + 493) == 2)
                        v251 = v248;
                      else
                        v251 = 0;
                      if (*(_BYTE *)(v246 + 493) == 2)
                        v252 = v250;
                      else
                        v252 = 0;
                      if ((v251 | v252) == 1 && ((v251 ^ v252) & 1) != 0 || (v251 = v248, v248 != v250))
                      {
                        if (v251)
                          goto LABEL_631;
                      }
                      else
                      {
                        result = *(float *)(v245 + 476);
                        v264 = *(float *)(v246 + 476);
                        if (result == v264)
                        {
                          if (v245 >= v246)
                            goto LABEL_575;
                        }
                        else if (result <= v264)
                        {
                          goto LABEL_575;
                        }
LABEL_631:
                        v253 = *v227;
                        *v227 = *v244;
                        if (v242 >= 2)
                        {
                          while (1)
                          {
                            v255 = v243 - 1;
                            v243 = (v243 - 1) >> 1;
                            v254 = &v293[v243];
                            v256 = *v254;
                            v257 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v254 + 64) + 248))(*(_QWORD *)(*v254 + 64));
                            v258 = a3[2] > *v257 && *a3 < v257[2] && a3[3] > v257[1] && a3[1] < v257[3];
                            v259 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v253 + 64) + 248))(*(_QWORD *)(v253 + 64));
                            result = a3[2];
                            v260 = 0;
                            if (result > *v259)
                            {
                              result = *a3;
                              if (*a3 < v259[2])
                              {
                                result = a3[3];
                                if (result > v259[1])
                                {
                                  result = a3[1];
                                  if (result < v259[3])
                                    v260 = 1;
                                }
                              }
                            }
                            if (*(_BYTE *)(v256 + 493) == 2)
                              v261 = v258;
                            else
                              v261 = 0;
                            if (*(_BYTE *)(v253 + 493) == 2)
                              v262 = v260;
                            else
                              v262 = 0;
                            if ((v261 | v262) == 1 && ((v261 ^ v262) & 1) != 0 || (v261 = v258, v258 != v260))
                            {
                              if (!v261)
                                break;
                            }
                            else
                            {
                              result = *(float *)(v256 + 476);
                              v263 = *(float *)(v253 + 476);
                              if (result == v263)
                              {
                                if (v256 >= v253)
                                  break;
                              }
                              else if (result <= v263)
                              {
                                break;
                              }
                            }
                            *v244 = *v254;
                            v244 = &v293[v243];
                            if (v255 <= 1)
                              goto LABEL_633;
                          }
                        }
                        v254 = v244;
LABEL_633:
                        *v254 = v253;
                      }
                    }
LABEL_575:
                    if (v223-- <= 2)
                      return result;
                  }
                }
              }
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[(unint64_t)v12 >> 1];
          if ((unint64_t)v11 < 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::MuninRoadLabel **>(v14, v10, v9, a3);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::MuninRoadLabel **>(v10, v14, v9, a3);
            v15 = v10 + 1;
            v16 = v13;
            v17 = &v10[v16];
            v18 = &v10[v16 - 1];
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::MuninRoadLabel **>(v15, v18, a2 - 2, a3);
            v19 = &v15[v16];
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::MuninRoadLabel **>(v293 + 2, v19, a2 - 3, a3);
            v20 = v18;
            v10 = v293;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::MuninRoadLabel **>(v20, v14, v19, a3);
            v21 = *v293;
            *v293 = *v17;
            *v17 = v21;
          }
          --a4;
          if ((a5 & 1) == 0)
          {
            v22 = *(v10 - 1);
            v23 = *v10;
            v24 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v22 + 64) + 248))(*(_QWORD *)(v22 + 64));
            v25 = a3[2] > *v24 && *a3 < v24[2] && a3[3] > v24[1] && a3[1] < v24[3];
            v26 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v23 + 64) + 248))(*(_QWORD *)(v23 + 64));
            v27 = a3[2] > *v26 && *a3 < v26[2] && a3[3] > v26[1] && a3[1] < v26[3];
            if (*(_BYTE *)(v22 + 493) == 2)
              v28 = v25;
            else
              v28 = 0;
            if (*(_BYTE *)(v23 + 493) == 2)
              v29 = v27;
            else
              v29 = 0;
            if ((v28 | v29) == 1 && ((v28 ^ v29) & 1) != 0 || (LOBYTE(v28) = v25, v25 != v27))
            {
              if ((v28 & 1) != 0)
                goto LABEL_31;
            }
            else
            {
              v85 = *(float *)(v22 + 476);
              v86 = *(float *)(v23 + 476);
              if (v85 == v86)
              {
                if (v22 < v23)
                  goto LABEL_31;
              }
              else if (v85 > v86)
              {
                goto LABEL_31;
              }
            }
            v87 = *v10;
            v88 = *v9;
            v89 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v10 + 64) + 248))(*(_QWORD *)(*v10 + 64));
            v90 = a3[2] > *v89 && *a3 < v89[2] && a3[3] > v89[1] && a3[1] < v89[3];
            v91 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v88 + 64) + 248))(*(_QWORD *)(v88 + 64));
            result = a3[2];
            v92 = 0;
            if (result > *v91)
            {
              result = *a3;
              if (*a3 < v91[2])
              {
                result = a3[3];
                if (result > v91[1])
                {
                  result = a3[1];
                  if (result < v91[3])
                    v92 = 1;
                }
              }
            }
            if (*(_BYTE *)(v87 + 493) == 2)
              v93 = v90;
            else
              v93 = 0;
            if (*(_BYTE *)(v88 + 493) == 2)
              v94 = v92;
            else
              v94 = 0;
            if ((v93 | v94) == 1 && ((v93 ^ v94) & 1) != 0 || (v93 = v90, v90 != v92))
            {
              if (v93)
                goto LABEL_208;
            }
            else
            {
              result = *(float *)(v87 + 476);
              v133 = *(float *)(v88 + 476);
              if (result == v133)
              {
                if (v87 < v88)
                {
LABEL_208:
                  for (i = v10 + 1; ; ++i)
                  {
                    v95 = *i;
                    v96 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v87 + 64) + 248))(*(_QWORD *)(v87 + 64));
                    v97 = a3[2] > *v96 && *a3 < v96[2] && a3[3] > v96[1] && a3[1] < v96[3];
                    v98 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v95 + 64) + 248))(*(_QWORD *)(v95 + 64));
                    result = a3[2];
                    v99 = 0;
                    if (result > *v98)
                    {
                      result = *a3;
                      if (*a3 < v98[2])
                      {
                        result = a3[3];
                        if (result > v98[1])
                        {
                          result = a3[1];
                          if (result < v98[3])
                            v99 = 1;
                        }
                      }
                    }
                    if (*(_BYTE *)(v87 + 493) == 2)
                      v100 = v97;
                    else
                      v100 = 0;
                    if (*(_BYTE *)(v95 + 493) == 2)
                      v101 = v99;
                    else
                      v101 = 0;
                    if ((v100 | v101) == 1 && ((v100 ^ v101) & 1) != 0 || (LOBYTE(v100) = v97, v97 != v99))
                    {
                      if ((v100 & 1) != 0)
                        goto LABEL_235;
                    }
                    else
                    {
                      result = *(float *)(v87 + 476);
                      v102 = *(float *)(v95 + 476);
                      if (result == v102)
                      {
                        if (v87 < v95)
                          goto LABEL_235;
                      }
                      else if (result > v102)
                      {
                        goto LABEL_235;
                      }
                    }
                  }
                }
              }
              else if (result > v133)
              {
                goto LABEL_208;
              }
            }
            for (i = v10 + 1; ; ++i)
            {
              v103 = a2;
              if (i >= a2)
                break;
              v134 = *i;
              v135 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v87 + 64) + 248))(*(_QWORD *)(v87 + 64));
              v136 = a3[2] > *v135 && *a3 < v135[2] && a3[3] > v135[1] && a3[1] < v135[3];
              v137 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v134 + 64) + 248))(*(_QWORD *)(v134 + 64));
              result = a3[2];
              v138 = 0;
              if (result > *v137)
              {
                result = *a3;
                if (*a3 < v137[2])
                {
                  result = a3[3];
                  if (result > v137[1])
                  {
                    result = a3[1];
                    if (result < v137[3])
                      v138 = 1;
                  }
                }
              }
              if (*(_BYTE *)(v87 + 493) == 2)
                v139 = v136;
              else
                v139 = 0;
              if (*(_BYTE *)(v134 + 493) == 2)
                v140 = v138;
              else
                v140 = 0;
              if ((v139 | v140) == 1 && ((v139 ^ v140) & 1) != 0 || (LOBYTE(v139) = v136, v136 != v138))
              {
                if ((v139 & 1) != 0)
                  goto LABEL_235;
              }
              else
              {
                result = *(float *)(v87 + 476);
                v141 = *(float *)(v134 + 476);
                if (result == v141)
                {
                  if (v87 < v134)
                  {
LABEL_235:
                    v103 = a2;
                    break;
                  }
                }
                else if (result > v141)
                {
                  goto LABEL_235;
                }
              }
            }
            j = v103;
            if (i >= v103)
              goto LABEL_318;
            for (j = v9; ; --j)
            {
              v105 = *j;
              v106 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v87 + 64) + 248))(*(_QWORD *)(v87 + 64));
              v107 = a3[2] > *v106 && *a3 < v106[2] && a3[3] > v106[1] && a3[1] < v106[3];
              v108 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v105 + 64) + 248))(*(_QWORD *)(v105 + 64));
              result = a3[2];
              v109 = 0;
              if (result > *v108)
              {
                result = *a3;
                if (*a3 < v108[2])
                {
                  result = a3[3];
                  if (result > v108[1])
                  {
                    result = a3[1];
                    if (result < v108[3])
                      v109 = 1;
                  }
                }
              }
              if (*(_BYTE *)(v87 + 493) == 2)
                v110 = v107;
              else
                v110 = 0;
              if (*(_BYTE *)(v105 + 493) == 2)
                v111 = v109;
              else
                v111 = 0;
              if ((v110 | v111) == 1 && ((v110 ^ v111) & 1) != 0 || (v110 = v107, v107 != v109))
              {
                if (!v110)
                  goto LABEL_318;
                continue;
              }
              result = *(float *)(v87 + 476);
              v112 = *(float *)(v105 + 476);
              if (result == v112)
                break;
              if (result <= v112)
                goto LABEL_318;
LABEL_239:
              ;
            }
            if (v87 < v105)
              goto LABEL_239;
LABEL_318:
            if (i < j)
            {
              v113 = *i;
              *i++ = *j;
              *j = v113;
              while (1)
              {
                v114 = *i;
                v115 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v87 + 64) + 248))(*(_QWORD *)(v87 + 64));
                v116 = a3[2] > *v115 && *a3 < v115[2] && a3[3] > v115[1] && a3[1] < v115[3];
                v117 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v114 + 64) + 248))(*(_QWORD *)(v114 + 64));
                v118 = a3[2] > *v117 && *a3 < v117[2] && a3[3] > v117[1] && a3[1] < v117[3];
                if (*(_BYTE *)(v87 + 493) == 2)
                  v119 = v116;
                else
                  v119 = 0;
                if (*(_BYTE *)(v114 + 493) == 2)
                  v120 = v118;
                else
                  v120 = 0;
                if ((v119 | v120) == 1 && ((v119 ^ v120) & 1) != 0 || (LOBYTE(v119) = v116, v116 != v118))
                {
                  if ((v119 & 1) != 0)
                  {
                    do
                    {
                      while (1)
                      {
LABEL_294:
                        while (1)
                        {
                          v124 = *--j;
                          v123 = v124;
                          v125 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v87 + 64) + 248))(*(_QWORD *)(v87 + 64));
                          v126 = a3[2] > *v125 && *a3 < v125[2] && a3[3] > v125[1] && a3[1] < v125[3];
                          v127 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v123 + 64) + 248))(*(_QWORD *)(v123 + 64));
                          result = a3[2];
                          v128 = 0;
                          if (result > *v127)
                          {
                            result = *a3;
                            if (*a3 < v127[2])
                            {
                              result = a3[3];
                              if (result > v127[1])
                              {
                                result = a3[1];
                                if (result < v127[3])
                                  v128 = 1;
                              }
                            }
                          }
                          v129 = *(_BYTE *)(v87 + 493) == 2 ? v126 : 0;
                          v130 = *(_BYTE *)(v123 + 493) == 2 ? v128 : 0;
                          if ((v129 | v130) != 1 || ((v129 ^ v130) & 1) == 0)
                          {
                            v129 = v126;
                            if (v126 == v128)
                              break;
                          }
                          if (!v129)
                            goto LABEL_318;
                        }
                        result = *(float *)(v87 + 476);
                        v131 = *(float *)(v123 + 476);
                        if (result == v131)
                          break;
                        if (result <= v131)
                          goto LABEL_318;
                      }
                    }
                    while (v87 < v123);
                    goto LABEL_318;
                  }
                }
                else
                {
                  v121 = *(float *)(v87 + 476);
                  v122 = *(float *)(v114 + 476);
                  if (v121 == v122)
                  {
                    if (v87 < v114)
                      goto LABEL_294;
                  }
                  else if (v121 > v122)
                  {
                    goto LABEL_294;
                  }
                }
                ++i;
              }
            }
            v132 = i - 1;
            if (i - 1 != v10)
              *v10 = *v132;
            a5 = 0;
            *v132 = v87;
            continue;
          }
LABEL_31:
          v30 = v10 + 1;
          v31 = *v10;
          v294 = a4;
          while (2)
          {
            v32 = *v30;
            v33 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v30 + 64) + 248))(*(_QWORD *)(*v30 + 64));
            v34 = a3[2] > *v33 && *a3 < v33[2] && a3[3] > v33[1] && a3[1] < v33[3];
            v35 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v31 + 64) + 248))(*(_QWORD *)(v31 + 64));
            v36 = a3[2] > *v35 && *a3 < v35[2] && a3[3] > v35[1] && a3[1] < v35[3];
            if (*(_BYTE *)(v32 + 493) == 2)
              v37 = v34;
            else
              v37 = 0;
            if (*(_BYTE *)(v31 + 493) == 2)
              v38 = v36;
            else
              v38 = 0;
            if ((v37 | v38) == 1 && ((v37 ^ v38) & 1) != 0 || (v37 = v34, v34 != v36))
            {
              if (!v37)
                goto LABEL_58;
LABEL_33:
              ++v30;
              continue;
            }
            break;
          }
          v39 = *(float *)(v32 + 476);
          v40 = *(float *)(v31 + 476);
          if (v39 != v40)
          {
            if (v39 <= v40)
              goto LABEL_58;
            goto LABEL_33;
          }
          if (v32 < v31)
            goto LABEL_33;
LABEL_58:
          v41 = v30 - 1;
          k = v9;
          if (v30 - 1 != v293)
          {
            while (1)
            {
              v43 = *k;
              v44 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*k + 64) + 248))(*(_QWORD *)(*k + 64));
              v45 = a3[2] > *v44 && *a3 < v44[2] && a3[3] > v44[1] && a3[1] < v44[3];
              v46 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v31 + 64) + 248))(*(_QWORD *)(v31 + 64));
              v47 = a3[2] > *v46 && *a3 < v46[2] && a3[3] > v46[1] && a3[1] < v46[3];
              if (*(_BYTE *)(v43 + 493) == 2)
                v48 = v45;
              else
                v48 = 0;
              if (*(_BYTE *)(v31 + 493) == 2)
                v49 = v47;
              else
                v49 = 0;
              if ((v48 | v49) == 1 && ((v48 ^ v49) & 1) != 0 || (LOBYTE(v48) = v45, v45 != v47))
              {
                if ((v48 & 1) != 0)
                  goto LABEL_87;
              }
              else
              {
                v50 = *(float *)(v43 + 476);
                v51 = *(float *)(v31 + 476);
                if (v50 == v51)
                {
                  if (v43 < v31)
                    goto LABEL_87;
                }
                else if (v50 > v51)
                {
                  goto LABEL_87;
                }
              }
              --k;
            }
          }
          k = a2;
          if (v30 < a2)
          {
            for (k = a2 - 1; ; --k)
            {
              v74 = *k;
              v75 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*k + 64) + 248))(*(_QWORD *)(*k + 64));
              v76 = a3[2] > *v75 && *a3 < v75[2] && a3[3] > v75[1] && a3[1] < v75[3];
              v77 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v31 + 64) + 248))(*(_QWORD *)(v31 + 64));
              v78 = a3[2] > *v77 && *a3 < v77[2] && a3[3] > v77[1] && a3[1] < v77[3];
              if (*(_BYTE *)(v74 + 493) == 2)
                v79 = v76;
              else
                v79 = 0;
              if (*(_BYTE *)(v31 + 493) == 2)
                v80 = v78;
              else
                v80 = 0;
              if ((v79 | v80) == 1 && ((v79 ^ v80) & 1) != 0 || (LOBYTE(v79) = v76, v76 != v78))
              {
                if (v30 >= k || (v79 & 1) != 0)
                  break;
              }
              else
              {
                v81 = *(float *)(v74 + 476);
                v82 = *(float *)(v31 + 476);
                if (v81 == v82)
                {
                  if (v74 < v31 || v30 >= k)
                    break;
                }
                else if (v30 >= k || v81 > v82)
                {
                  break;
                }
              }
            }
          }
LABEL_87:
          if (v30 < k)
          {
            v52 = (unint64_t)v30;
            v53 = k;
            do
            {
              v54 = *(_QWORD *)v52;
              *(_QWORD *)v52 = *v53;
              v52 += 8;
              *v53 = v54;
              while (1)
              {
                v55 = *(_QWORD *)v52;
                v56 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v52 + 64) + 248))(*(_QWORD *)(*(_QWORD *)v52 + 64));
                v57 = a3[2] > *v56 && *a3 < v56[2] && a3[3] > v56[1] && a3[1] < v56[3];
                v58 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v31 + 64) + 248))(*(_QWORD *)(v31 + 64));
                v59 = a3[2] > *v58 && *a3 < v58[2] && a3[3] > v58[1] && a3[1] < v58[3];
                if (*(_BYTE *)(v55 + 493) == 2)
                  v60 = v57;
                else
                  v60 = 0;
                if (*(_BYTE *)(v31 + 493) == 2)
                  v61 = v59;
                else
                  v61 = 0;
                if ((v60 | v61) == 1 && ((v60 ^ v61) & 1) != 0 || (v60 = v57, v57 != v59))
                {
                  if (!v60)
                    goto LABEL_117;
                  goto LABEL_92;
                }
                v62 = *(float *)(v55 + 476);
                v63 = *(float *)(v31 + 476);
                if (v62 == v63)
                  break;
                if (v62 <= v63)
                  goto LABEL_117;
LABEL_92:
                v52 += 8;
              }
              if (v55 < v31)
                goto LABEL_92;
LABEL_117:
              v41 = (unint64_t *)(v52 - 8);
              do
              {
                while (1)
                {
                  while (1)
                  {
                    v65 = *--v53;
                    v64 = v65;
                    v66 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v65 + 64) + 248))(*(_QWORD *)(v65 + 64));
                    v67 = a3[2] > *v66 && *a3 < v66[2] && a3[3] > v66[1] && a3[1] < v66[3];
                    v68 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v31 + 64) + 248))(*(_QWORD *)(v31 + 64));
                    v69 = a3[2] > *v68 && *a3 < v68[2] && a3[3] > v68[1] && a3[1] < v68[3];
                    v70 = *(_BYTE *)(v64 + 493) == 2 ? v67 : 0;
                    v71 = *(_BYTE *)(v31 + 493) == 2 ? v69 : 0;
                    if ((v70 | v71) != 1 || ((v70 ^ v71) & 1) == 0)
                    {
                      LOBYTE(v70) = v67;
                      if (v67 == v69)
                        break;
                    }
                    if ((v70 & 1) != 0)
                      goto LABEL_89;
                  }
                  v72 = *(float *)(v64 + 476);
                  v73 = *(float *)(v31 + 476);
                  if (v72 == v73)
                    break;
                  if (v72 > v73)
                    goto LABEL_89;
                }
              }
              while (v64 >= v31);
LABEL_89:
              ;
            }
            while (v52 < (unint64_t)v53);
          }
          if (v41 != v293)
            *v293 = *v41;
          *v41 = v31;
          v83 = v30 >= k;
          v9 = a2 - 1;
          a4 = v294;
          if (!v83)
            goto LABEL_181;
          v84 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::MuninRoadLabel **>(v293, v41, a3);
          i = v41 + 1;
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::MuninRoadLabel **>(v41 + 1, a2, a3))
          {
            if (v84)
              continue;
LABEL_181:
            std::__introsort<std::_ClassicAlgPolicy,md::MuninRoadLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::MuninRoadLabel **,false>(v293, v41, a3, v294, a5 & 1);
            a5 = 0;
            i = v41 + 1;
            continue;
          }
          a2 = v41;
          i = v293;
          if (v84)
            return result;
          goto LABEL_1;
        }
        v146 = v10 + 1;
        v147 = v10 == a2 || v146 == a2;
        v148 = v147;
        if ((a5 & 1) != 0)
        {
          if ((v148 & 1) != 0)
            return result;
          v149 = 0;
          v150 = v10;
LABEL_378:
          v152 = v150;
          v150 = v146;
          v154 = *v152;
          v153 = v152[1];
          v155 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v153 + 64) + 248))(*(_QWORD *)(v153 + 64));
          v156 = a3[2] > *v155 && *a3 < v155[2] && a3[3] > v155[1] && a3[1] < v155[3];
          v157 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v154 + 64) + 248))(*(_QWORD *)(v154 + 64));
          result = a3[2];
          v158 = 0;
          if (result > *v157)
          {
            result = *a3;
            if (*a3 < v157[2])
            {
              result = a3[3];
              if (result > v157[1])
              {
                result = a3[1];
                if (result < v157[3])
                  v158 = 1;
              }
            }
          }
          if (*(_BYTE *)(v153 + 493) == 2)
            v159 = v156;
          else
            v159 = 0;
          if (*(_BYTE *)(v154 + 493) == 2)
            v160 = v158;
          else
            v160 = 0;
          if ((v159 | v160) == 1 && ((v159 ^ v160) & 1) != 0 || (v159 = v156, v156 != v158))
          {
            if (!v159)
              goto LABEL_377;
          }
          else
          {
            result = *(float *)(v153 + 476);
            v172 = *(float *)(v154 + 476);
            if (result == v172)
            {
              if (v153 >= v154)
                goto LABEL_377;
            }
            else if (result <= v172)
            {
              goto LABEL_377;
            }
          }
          v161 = v152[1];
          v152[1] = *v152;
          v151 = v10;
          if (v152 == v10)
            goto LABEL_376;
          v162 = v149;
          while (1)
          {
            v163 = (unint64_t *)((char *)v10 + v162);
            v164 = *(unint64_t *)((char *)v10 + v162 - 8);
            v165 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v161 + 64) + 248))(*(_QWORD *)(v161 + 64));
            v166 = a3[2] > *v165 && *a3 < v165[2] && a3[3] > v165[1] && a3[1] < v165[3];
            v167 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v164 + 64) + 248))(*(_QWORD *)(v164 + 64));
            result = a3[2];
            v168 = 0;
            if (result > *v167)
            {
              result = *a3;
              if (*a3 < v167[2])
              {
                result = a3[3];
                if (result > v167[1])
                {
                  result = a3[1];
                  if (result < v167[3])
                    v168 = 1;
                }
              }
            }
            if (*(_BYTE *)(v161 + 493) == 2)
              v169 = v166;
            else
              v169 = 0;
            if (*(_BYTE *)(v164 + 493) == 2)
              v170 = v168;
            else
              v170 = 0;
            if ((v169 | v170) == 1 && ((v169 ^ v170) & 1) != 0 || (v169 = v166, v166 != v168))
            {
              if (!v169)
                goto LABEL_431;
            }
            else
            {
              result = *(float *)(v161 + 476);
              v171 = *(float *)(v164 + 476);
              if (result == v171)
              {
                if (v161 >= v164)
                {
                  v10 = v293;
                  v151 = (unint64_t *)((char *)v293 + v162);
                  goto LABEL_376;
                }
              }
              else if (result <= v171)
              {
LABEL_431:
                v151 = v152;
                v10 = v293;
LABEL_376:
                *v151 = v161;
LABEL_377:
                v146 = v150 + 1;
                v149 += 8;
                if (v150 + 1 == a2)
                  return result;
                goto LABEL_378;
              }
            }
            --v152;
            *v163 = *(v163 - 1);
            v162 -= 8;
            v10 = v293;
            if (!v162)
            {
              v151 = v293;
              goto LABEL_376;
            }
          }
        }
        if ((v148 & 1) == 0)
        {
          do
          {
            v265 = v10;
            v10 = v146;
            v267 = *v265;
            v266 = v265[1];
            v268 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v266 + 64) + 248))(*(_QWORD *)(v266 + 64));
            v269 = a3[2] > *v268 && *a3 < v268[2] && a3[3] > v268[1] && a3[1] < v268[3];
            v270 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v267 + 64) + 248))(*(_QWORD *)(v267 + 64));
            result = a3[2];
            v271 = 0;
            if (result > *v270)
            {
              result = *a3;
              if (*a3 < v270[2])
              {
                result = a3[3];
                if (result > v270[1])
                {
                  result = a3[1];
                  if (result < v270[3])
                    v271 = 1;
                }
              }
            }
            if (*(_BYTE *)(v266 + 493) == 2)
              v272 = v269;
            else
              v272 = 0;
            if (*(_BYTE *)(v267 + 493) == 2)
              v273 = v271;
            else
              v273 = 0;
            if ((v272 | v273) == 1 && ((v272 ^ v273) & 1) != 0 || (v272 = v269, v269 != v271))
            {
              if (v272)
                goto LABEL_692;
            }
            else
            {
              result = *(float *)(v266 + 476);
              v285 = *(float *)(v267 + 476);
              if (result == v285)
              {
                if (v266 < v267)
                {
LABEL_692:
                  v274 = *v10;
                  do
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v275 = v265;
                        v265[1] = *v265;
                        v277 = *--v265;
                        v276 = v277;
                        v278 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v274 + 64) + 248))(*(_QWORD *)(v274 + 64));
                        v279 = a3[2] > *v278 && *a3 < v278[2] && a3[3] > v278[1] && a3[1] < v278[3];
                        v280 = (float *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v276 + 64) + 248))(*(_QWORD *)(v276 + 64));
                        result = a3[2];
                        v281 = 0;
                        if (result > *v280)
                        {
                          result = *a3;
                          if (*a3 < v280[2])
                          {
                            result = a3[3];
                            if (result > v280[1])
                            {
                              result = a3[1];
                              if (result < v280[3])
                                v281 = 1;
                            }
                          }
                        }
                        v282 = *(_BYTE *)(v274 + 493) == 2 ? v279 : 0;
                        v283 = *(_BYTE *)(v276 + 493) == 2 ? v281 : 0;
                        if ((v282 | v283) != 1 || ((v282 ^ v283) & 1) == 0)
                        {
                          LOBYTE(v282) = v279;
                          if (v279 == v281)
                            break;
                        }
                        if ((v282 & 1) == 0)
                          goto LABEL_669;
                      }
                      result = *(float *)(v274 + 476);
                      v284 = *(float *)(v276 + 476);
                      if (result == v284)
                        break;
                      if (result <= v284)
                        goto LABEL_669;
                    }
                  }
                  while (v274 < v276);
LABEL_669:
                  *v275 = v274;
                }
              }
              else if (result > v285)
              {
                goto LABEL_692;
              }
            }
            v146 = v10 + 1;
          }
          while (v10 + 1 != a2);
        }
        return result;
    }
  }
}

  v9 = (__n128 *)((char *)a2 - 24);
  v10 = a2 - 3;
  v11 = &a2[-5].n128_i8[8];
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v12) >> 3);
    switch(v14)
    {
      case 0:
      case 1:
        return a5.n128_f64[0];
      case 2:
        a5.n128_u64[0] = a2[-1].n128_u64[0];
        if (a5.n128_f64[0] < *(double *)(v12 + 8))
          goto LABEL_104;
        return a5.n128_f64[0];
      case 3:
        v92 = (__n128 *)(v12 + 24);
        a5.n128_u64[0] = *(_QWORD *)(v12 + 32);
        v93 = a2[-1].n128_f64[0];
        if (a5.n128_f64[0] >= *(double *)(v12 + 8))
        {
          if (v93 < a5.n128_f64[0])
          {
            a5 = *v92;
            v140 = *(_QWORD *)(v12 + 40);
            v141 = a2[-1].n128_u32[2];
            *v92 = *v9;
            *(_DWORD *)(v12 + 40) = v141;
            a2[-1].n128_u32[2] = v140;
            *v9 = a5;
            a5.n128_u64[0] = *(_QWORD *)(v12 + 32);
            if (a5.n128_f64[0] < *(double *)(v12 + 8))
            {
              v194 = *(_QWORD *)(v12 + 16);
              v171 = *(__n128 *)v12;
              *(__n128 *)v12 = *v92;
              *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 + 40);
              a5.n128_u64[0] = v171.n128_u64[0];
              *v92 = v171;
              *(_DWORD *)(v12 + 40) = v194;
            }
          }
        }
        else
        {
          if (v93 < a5.n128_f64[0])
          {
LABEL_104:
            v191 = *(_QWORD *)(v12 + 16);
            v168 = *(__n128 *)v12;
            v94 = *v9;
            *(_DWORD *)(v12 + 16) = a2[-1].n128_u32[2];
            *(__n128 *)v12 = v94;
            a5 = v168;
            a2[-1].n128_u32[2] = v191;
LABEL_105:
            *v9 = a5;
            return a5.n128_f64[0];
          }
          v195 = *(_QWORD *)(v12 + 16);
          v172 = *(__n128 *)v12;
          *(__n128 *)v12 = *v92;
          *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 + 40);
          *v92 = v172;
          *(_DWORD *)(v12 + 40) = v195;
          a5.n128_u64[0] = a2[-1].n128_u64[0];
          if (a5.n128_f64[0] < *(double *)(v12 + 32))
          {
            a5 = *v92;
            v147 = *(_QWORD *)(v12 + 40);
            v148 = a2[-1].n128_u32[2];
            *v92 = *v9;
            *(_DWORD *)(v12 + 40) = v148;
            a2[-1].n128_u32[2] = v147;
            goto LABEL_105;
          }
        }
        return a5.n128_f64[0];
      case 4:
        a5.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_0 &,md::MuninJunctionInfo*>((__n128 *)v12, (__n128 *)(v12 + 24), (__n128 *)(v12 + 48), (__n128 *)((char *)a2 - 24), a5).n128_u64[0];
        return a5.n128_f64[0];
      case 5:
        v95 = (__n128 *)(v12 + 24);
        v96 = (__n128 *)(v12 + 48);
        v97 = (__n128 *)(v12 + 72);
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_0 &,md::MuninJunctionInfo*>((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a1 + 72), a5);
        a5.n128_u64[0] = a2[-1].n128_u64[0];
        if (a5.n128_f64[0] < *(double *)(a1 + 80))
        {
          a5 = *v97;
          v98 = *(_QWORD *)(a1 + 88);
          v99 = a2[-1].n128_u32[2];
          *v97 = *v9;
          *(_DWORD *)(a1 + 88) = v99;
          a2[-1].n128_u32[2] = v98;
          *v9 = a5;
          a5.n128_u64[0] = *(_QWORD *)(a1 + 80);
          if (a5.n128_f64[0] < *(double *)(a1 + 56))
          {
            v100 = *(_QWORD *)(a1 + 64);
            a5 = *v96;
            *v96 = *v97;
            *(_DWORD *)(a1 + 64) = *(_DWORD *)(a1 + 88);
            *v97 = a5;
            *(_DWORD *)(a1 + 88) = v100;
            a5.n128_u64[0] = *(_QWORD *)(a1 + 56);
            if (a5.n128_f64[0] < *(double *)(a1 + 32))
            {
              v101 = *(_QWORD *)(a1 + 40);
              a5 = *v95;
              *v95 = *v96;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
              *v96 = a5;
              *(_DWORD *)(a1 + 64) = v101;
              a5.n128_u64[0] = *(_QWORD *)(a1 + 32);
              if (a5.n128_f64[0] < *(double *)(a1 + 8))
              {
                v192 = *(_QWORD *)(a1 + 16);
                v169 = *(__n128 *)a1;
                *(__n128 *)a1 = *v95;
                *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
                a5.n128_u64[0] = v169.n128_u64[0];
                *v95 = v169;
                *(_DWORD *)(a1 + 40) = v192;
              }
            }
          }
        }
        return a5.n128_f64[0];
      default:
        if (v13 > 575)
        {
          if (!a3)
          {
            if ((__n128 *)v12 != a2)
            {
              v113 = (unint64_t)(v14 - 2) >> 1;
              v114 = v113;
              do
              {
                if (v113 >= v114)
                {
                  v116 = (2 * v114) | 1;
                  v117 = v12 + 24 * v116;
                  if (2 * v114 + 2 < v14 && *(double *)(v117 + 8) < *(double *)(v117 + 32))
                  {
                    v117 += 24;
                    v116 = 2 * v114 + 2;
                  }
                  v118 = v12 + 24 * v114;
                  v119 = *(double *)(v118 + 8);
                  if (*(double *)(v117 + 8) >= v119)
                  {
                    v120 = *(_QWORD *)v118;
                    v121 = *(_DWORD *)(v118 + 16);
                    do
                    {
                      v122 = v118;
                      v118 = v117;
                      v123 = *(_OWORD *)v117;
                      *(_DWORD *)(v122 + 16) = *(_DWORD *)(v117 + 16);
                      *(_OWORD *)v122 = v123;
                      if (v113 < v116)
                        break;
                      v124 = 2 * v116;
                      v116 = (2 * v116) | 1;
                      v117 = v12 + 24 * v116;
                      v125 = v124 + 2;
                      if (v125 < v14 && *(double *)(v117 + 8) < *(double *)(v117 + 32))
                      {
                        v117 += 24;
                        v116 = v125;
                      }
                    }
                    while (*(double *)(v117 + 8) >= v119);
                    *(_QWORD *)v118 = v120;
                    *(double *)(v118 + 8) = v119;
                    *(_DWORD *)(v118 + 16) = v121;
                  }
                }
                v115 = v114-- <= 0;
              }
              while (!v115);
              v126 = v13 / 0x18uLL;
              do
              {
                v127 = 0;
                v193 = *(_QWORD *)(v12 + 16);
                v170 = *(__n128 *)v12;
                v128 = (__n128 *)v12;
                do
                {
                  v130 = v128;
                  v128 = (__n128 *)((char *)v128 + 24 * v127 + 24);
                  v131 = 2 * v127;
                  v127 = (2 * v127) | 1;
                  v132 = v131 + 2;
                  if (v132 < v126 && v128->n128_f64[1] < v128[2].n128_f64[0])
                  {
                    v128 = (__n128 *)((char *)v128 + 24);
                    v127 = v132;
                  }
                  v129 = *v128;
                  v130[1].n128_u32[0] = v128[1].n128_u32[0];
                  *v130 = v129;
                }
                while (v127 <= (uint64_t)((unint64_t)(v126 - 2) >> 1));
                a2 = (__n128 *)((char *)a2 - 24);
                if (v128 == a2)
                {
                  a5.n128_u64[0] = v170.n128_u64[0];
                  v128[1].n128_u32[0] = v193;
                  *v128 = v170;
                }
                else
                {
                  a5 = *a2;
                  v128[1].n128_u32[0] = a2[1].n128_u32[0];
                  *v128 = a5;
                  a5.n128_u64[0] = v170.n128_u64[0];
                  a2[1].n128_u32[0] = v193;
                  *a2 = v170;
                  v133 = (uint64_t)&v128[1].n128_i64[1] - v12;
                  if (v133 >= 25)
                  {
                    v134 = (v133 / 0x18uLL - 2) >> 1;
                    v135 = v12 + 24 * v134;
                    a5.n128_u64[0] = v128->n128_u64[1];
                    if (*(double *)(v135 + 8) < a5.n128_f64[0])
                    {
                      v136 = v128->n128_u64[0];
                      v137 = v128[1].n128_u32[0];
                      do
                      {
                        v138 = v128;
                        v128 = (__n128 *)v135;
                        v139 = *(__n128 *)v135;
                        v138[1].n128_u32[0] = *(_DWORD *)(v135 + 16);
                        *v138 = v139;
                        if (!v134)
                          break;
                        v134 = (v134 - 1) >> 1;
                        v135 = v12 + 24 * v134;
                      }
                      while (*(double *)(v135 + 8) < a5.n128_f64[0]);
                      v128->n128_u64[0] = v136;
                      v128->n128_u64[1] = a5.n128_u64[0];
                      v128[1].n128_u32[0] = v137;
                    }
                  }
                }
                v115 = v126-- <= 2;
              }
              while (!v115);
            }
            return a5.n128_f64[0];
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = (__n128 *)(v12 + 24 * ((unint64_t)v14 >> 1));
          v17 = a2[-1].n128_f64[0];
          if ((unint64_t)v13 < 0xC01)
          {
            v20 = *(double *)(v12 + 8);
            if (v20 >= v16->n128_f64[1])
            {
              if (v17 < v20)
              {
                v177 = *(_QWORD *)(v12 + 16);
                v154 = *(__n128 *)v12;
                a5 = *v9;
                *(_DWORD *)(v12 + 16) = a2[-1].n128_u32[2];
                *(__n128 *)v12 = a5;
                a5.n128_u64[1] = v154.n128_u64[1];
                a2[-1].n128_u32[2] = v177;
                *v9 = v154;
                if (*(double *)(v12 + 8) < v16->n128_f64[1])
                {
                  v178 = v16[1].n128_u64[0];
                  v155 = *v16;
                  a5 = *(__n128 *)v12;
                  v16[1].n128_u32[0] = *(_DWORD *)(v12 + 16);
                  *v16 = a5;
                  a5.n128_u64[1] = v155.n128_u64[1];
                  *(_DWORD *)(v12 + 16) = v178;
                  *(__n128 *)v12 = v155;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v17 >= v20)
              {
                v181 = v16[1].n128_u64[0];
                v158 = *v16;
                a5 = *(__n128 *)v12;
                v16[1].n128_u32[0] = *(_DWORD *)(v12 + 16);
                *v16 = a5;
                a5.n128_u64[1] = v158.n128_u64[1];
                *(_DWORD *)(v12 + 16) = v181;
                *(__n128 *)v12 = v158;
                if (a2[-1].n128_f64[0] >= *(double *)(v12 + 8))
                  goto LABEL_31;
                v174 = *(_QWORD *)(v12 + 16);
                v151 = *(__n128 *)v12;
                v38 = *v9;
                *(_DWORD *)(v12 + 16) = a2[-1].n128_u32[2];
                *(__n128 *)v12 = v38;
              }
              else
              {
                v174 = v16[1].n128_u64[0];
                v151 = *v16;
                v21 = *v9;
                v16[1].n128_u32[0] = a2[-1].n128_u32[2];
                *v16 = v21;
              }
              a5.n128_u64[1] = v151.n128_u64[1];
              a2[-1].n128_u32[2] = v174;
              *v9 = v151;
            }
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
LABEL_55:
            a5.n128_u64[0] = *(_QWORD *)(v12 + 8);
            if (*(double *)(v12 - 16) < a5.n128_f64[0])
              goto LABEL_56;
            if (a5.n128_f64[0] >= a2[-1].n128_f64[0])
            {
              v81 = v12 + 24;
              do
              {
                v12 = v81;
                if (v81 >= (unint64_t)a2)
                  break;
                v82 = *(double *)(v81 + 8);
                v81 += 24;
              }
              while (a5.n128_f64[0] >= v82);
            }
            else
            {
              v79 = v12;
              do
              {
                v12 = v79 + 24;
                v80 = *(double *)(v79 + 32);
                v79 += 24;
              }
              while (a5.n128_f64[0] >= v80);
            }
            v83 = a2;
            if (v12 < (unint64_t)a2)
            {
              v84 = a2;
              do
              {
                v83 = (__n128 *)((char *)v84 - 24);
                v85 = v84[-1].n128_f64[0];
                v84 = (__n128 *)((char *)v84 - 24);
              }
              while (a5.n128_f64[0] < v85);
            }
            v86 = *(_QWORD *)a1;
            v87 = *(_QWORD *)(a1 + 16);
            while (v12 < (unint64_t)v83)
            {
              v190 = *(_QWORD *)(v12 + 16);
              v167 = *(__n128 *)v12;
              v88 = *v83;
              *(_DWORD *)(v12 + 16) = v83[1].n128_u32[0];
              *(__n128 *)v12 = v88;
              v83[1].n128_u32[0] = v190;
              *v83 = v167;
              do
              {
                v89 = *(double *)(v12 + 32);
                v12 += 24;
              }
              while (a5.n128_f64[0] >= v89);
              do
              {
                v90 = v83[-1].n128_f64[0];
                v83 = (__n128 *)((char *)v83 - 24);
              }
              while (a5.n128_f64[0] < v90);
            }
            if (v12 - 24 != a1)
            {
              v91 = *(_OWORD *)(v12 - 24);
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(v12 - 8);
              *(_OWORD *)a1 = v91;
            }
            a4 = 0;
            *(_QWORD *)(v12 - 24) = v86;
            *(_QWORD *)(v12 - 16) = a5.n128_u64[0];
            *(_DWORD *)(v12 - 8) = v87;
            continue;
          }
          v18 = v16->n128_f64[1];
          if (v18 >= *(double *)(v12 + 8))
          {
            if (v17 < v18)
            {
              v175 = v16[1].n128_u64[0];
              v152 = *v16;
              v22 = *v9;
              v16[1].n128_u32[0] = a2[-1].n128_u32[2];
              *v16 = v22;
              a2[-1].n128_u32[2] = v175;
              *v9 = v152;
              if (v16->n128_f64[1] < *(double *)(v12 + 8))
              {
                v176 = *(_QWORD *)(v12 + 16);
                v153 = *(__n128 *)v12;
                v23 = *v16;
                *(_DWORD *)(v12 + 16) = v16[1].n128_u32[0];
                *(__n128 *)v12 = v23;
                v16[1].n128_u32[0] = v176;
                *v16 = v153;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v179 = *(_QWORD *)(v12 + 16);
              v156 = *(__n128 *)v12;
              v24 = *v16;
              *(_DWORD *)(v12 + 16) = v16[1].n128_u32[0];
              *(__n128 *)v12 = v24;
              v16[1].n128_u32[0] = v179;
              *v16 = v156;
              if (a2[-1].n128_f64[0] >= v16->n128_f64[1])
                goto LABEL_22;
              v173 = v16[1].n128_u64[0];
              v150 = *v16;
              v25 = *v9;
              v16[1].n128_u32[0] = a2[-1].n128_u32[2];
              *v16 = v25;
            }
            else
            {
              v173 = *(_QWORD *)(v12 + 16);
              v150 = *(__n128 *)v12;
              v19 = *v9;
              *(_DWORD *)(v12 + 16) = a2[-1].n128_u32[2];
              *(__n128 *)v12 = v19;
            }
            a2[-1].n128_u32[2] = v173;
            *v9 = v150;
          }
LABEL_22:
          v26 = (__n128 *)(v12 + 24);
          v27 = v12 + 24 * v15;
          v28 = (__n128 *)(v27 - 24);
          v29 = *(double *)(v27 - 16);
          v30 = a2[-3].n128_f64[1];
          if (v29 >= *(double *)(v12 + 32))
          {
            if (v30 < v29)
            {
              v180 = *(_QWORD *)(v27 - 8);
              v157 = *v28;
              v34 = *v10;
              *(_DWORD *)(v27 - 8) = a2[-2].n128_u32[0];
              *v28 = v34;
              a2[-2].n128_u32[0] = v180;
              *v10 = v157;
              if (*(double *)(v27 - 16) < *(double *)(v12 + 32))
              {
                v35 = *v26;
                v36 = *(_QWORD *)(v12 + 40);
                v37 = v28[1].n128_i32[0];
                *v26 = *v28;
                *(_DWORD *)(v12 + 40) = v37;
                v28[1].n128_u32[0] = v36;
                *v28 = v35;
              }
            }
          }
          else
          {
            if (v30 >= v29)
            {
              v39 = *v26;
              v40 = *(_QWORD *)(v12 + 40);
              v41 = v28[1].n128_i32[0];
              *v26 = *v28;
              *(_DWORD *)(v12 + 40) = v41;
              v28[1].n128_u32[0] = v40;
              *v28 = v39;
              if (a2[-3].n128_f64[1] >= v28->n128_f64[1])
                goto LABEL_36;
              v182 = v28[1].n128_i64[0];
              v159 = *v28;
              v42 = *v10;
              v28[1].n128_u32[0] = a2[-2].n128_u32[0];
              *v28 = v42;
              v31 = v159;
              a2[-2].n128_u32[0] = v182;
            }
            else
            {
              v31 = *v26;
              v32 = *(_QWORD *)(v12 + 40);
              v33 = a2[-2].n128_u32[0];
              *v26 = *v10;
              *(_DWORD *)(v12 + 40) = v33;
              a2[-2].n128_u32[0] = v32;
            }
            *v10 = v31;
          }
LABEL_36:
          v43 = (__n128 *)(v12 + 48);
          v44 = v12 + 24 * v15;
          v45 = (__n128 *)(v44 + 24);
          v46 = *(double *)(v44 + 32);
          v47 = a2[-4].n128_f64[0];
          if (v46 >= *(double *)(v12 + 56))
          {
            if (v47 < v46)
            {
              v183 = *(_QWORD *)(v44 + 40);
              v160 = *v45;
              v51 = *(__n128 *)v11;
              *(_DWORD *)(v44 + 40) = a2[-4].n128_u32[2];
              *v45 = v51;
              a2[-4].n128_u32[2] = v183;
              *(__n128 *)v11 = v160;
              if (*(double *)(v44 + 32) < *(double *)(v12 + 56))
              {
                v52 = *v43;
                v53 = *(_QWORD *)(v12 + 64);
                v54 = v45[1].n128_i32[0];
                *v43 = *v45;
                *(_DWORD *)(v12 + 64) = v54;
                v45[1].n128_u32[0] = v53;
                *v45 = v52;
              }
            }
          }
          else
          {
            if (v47 >= v46)
            {
              v55 = *v43;
              v56 = *(_QWORD *)(v12 + 64);
              v57 = v45[1].n128_i32[0];
              *v43 = *v45;
              *(_DWORD *)(v12 + 64) = v57;
              v45[1].n128_u32[0] = v56;
              *v45 = v55;
              if (a2[-4].n128_f64[0] >= v45->n128_f64[1])
                goto LABEL_45;
              v184 = v45[1].n128_i64[0];
              v161 = *v45;
              v58 = *(__n128 *)v11;
              v45[1].n128_u32[0] = a2[-4].n128_u32[2];
              *v45 = v58;
              v48 = v161;
              a2[-4].n128_u32[2] = v184;
            }
            else
            {
              v48 = *v43;
              v49 = *(_QWORD *)(v12 + 64);
              v50 = a2[-4].n128_u32[2];
              *v43 = *(__n128 *)v11;
              *(_DWORD *)(v12 + 64) = v50;
              a2[-4].n128_u32[2] = v49;
            }
            *(__n128 *)v11 = v48;
          }
LABEL_45:
          v59 = v16->n128_f64[1];
          v60 = v45->n128_f64[1];
          if (v59 >= v28->n128_f64[1])
          {
            if (v60 < v59)
            {
              v186 = v16[1].n128_u64[0];
              v163 = *v16;
              *v16 = *v45;
              v16[1].n128_u32[0] = v45[1].n128_u32[0];
              v45[1].n128_u32[0] = v186;
              *v45 = v163;
              if (v16->n128_f64[1] < v28->n128_f64[1])
              {
                v187 = v28[1].n128_i64[0];
                v164 = *v28;
                *v28 = *v16;
                v28[1].n128_u32[0] = v16[1].n128_u32[0];
                v16[1].n128_u32[0] = v187;
                *v16 = v164;
              }
            }
          }
          else
          {
            if (v60 >= v59)
            {
              v188 = v28[1].n128_i64[0];
              v165 = *v28;
              *v28 = *v16;
              v28[1].n128_u32[0] = v16[1].n128_u32[0];
              v16[1].n128_u32[0] = v188;
              *v16 = v165;
              if (v45->n128_f64[1] >= v16->n128_f64[1])
                goto LABEL_54;
              v185 = v16[1].n128_u64[0];
              v162 = *v16;
              *v16 = *v45;
              v16[1].n128_u32[0] = v45[1].n128_u32[0];
            }
            else
            {
              v185 = v28[1].n128_u64[0];
              v162 = *v28;
              *v28 = *v45;
              v28[1].n128_u32[0] = v45[1].n128_u32[0];
            }
            v45[1].n128_u32[0] = v185;
            *v45 = v162;
          }
LABEL_54:
          v189 = *(_QWORD *)(v12 + 16);
          v166 = *(__n128 *)v12;
          a5 = *v16;
          *(_DWORD *)(v12 + 16) = v16[1].n128_u32[0];
          *(__n128 *)v12 = a5;
          a5.n128_u64[1] = v166.n128_u64[1];
          v16[1].n128_u32[0] = v189;
          *v16 = v166;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_32:
          a5.n128_u64[0] = *(_QWORD *)(v12 + 8);
LABEL_56:
          v61 = *(_QWORD *)v12;
          v62 = *(_QWORD *)(v12 + 16);
          v63 = v12;
          do
          {
            v64 = v63;
            v63 += 24;
          }
          while (*(double *)(v64 + 32) < a5.n128_f64[0]);
          v65 = a2;
          if (v64 == v12)
          {
            v68 = a2;
            while (v63 < (unint64_t)v68)
            {
              v66 = (__n128 *)((char *)v68 - 24);
              v69 = v68[-1].n128_f64[0];
              v68 = (__n128 *)((char *)v68 - 24);
              if (v69 < a5.n128_f64[0])
                goto LABEL_66;
            }
            v66 = v68;
          }
          else
          {
            do
            {
              v66 = (__n128 *)((char *)v65 - 24);
              v67 = v65[-1].n128_f64[0];
              v65 = (__n128 *)((char *)v65 - 24);
            }
            while (v67 >= a5.n128_f64[0]);
          }
LABEL_66:
          v12 = v63;
          if (v63 < (unint64_t)v66)
          {
            v70 = (unint64_t)v66;
            do
            {
              v71 = *(__n128 *)v12;
              v72 = *(_QWORD *)(v12 + 16);
              v73 = *(_DWORD *)(v70 + 16);
              *(_OWORD *)v12 = *(_OWORD *)v70;
              *(_DWORD *)(v12 + 16) = v73;
              *(_DWORD *)(v70 + 16) = v72;
              *(__n128 *)v70 = v71;
              do
              {
                v74 = *(double *)(v12 + 32);
                v12 += 24;
              }
              while (v74 < a5.n128_f64[0]);
              do
              {
                v75 = *(double *)(v70 - 16);
                v70 -= 24;
              }
              while (v75 >= a5.n128_f64[0]);
            }
            while (v12 < v70);
          }
          if (v12 - 24 != a1)
          {
            v76 = *(_OWORD *)(v12 - 24);
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v12 - 8);
            *(_OWORD *)a1 = v76;
          }
          *(_QWORD *)(v12 - 24) = v61;
          *(_QWORD *)(v12 - 16) = a5.n128_u64[0];
          *(_DWORD *)(v12 - 8) = v62;
          if (v63 < (unint64_t)v66)
            goto LABEL_77;
          v77 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_0 &,md::MuninJunctionInfo*>(a1, v12 - 24, a5);
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_0 &,md::MuninJunctionInfo*>(v12, (uint64_t)a2, v78))
          {
            if (v77)
              continue;
LABEL_77:
            std::__introsort<std::_ClassicAlgPolicy,md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_0 &,md::MuninJunctionInfo*,false>(a1, v12 - 24, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__n128 *)(v12 - 24);
          if (v77)
            return a5.n128_f64[0];
          goto LABEL_1;
        }
        v102 = (__n128 *)(v12 + 24);
        v104 = (__n128 *)v12 == a2 || v102 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v104)
          {
            v105 = 0;
            v106 = v12;
            do
            {
              v108 = v102;
              a5.n128_u64[0] = *(_QWORD *)(v106 + 32);
              if (a5.n128_f64[0] < *(double *)(v106 + 8))
              {
                v109 = v102->n128_u64[0];
                v110 = *(_DWORD *)(v106 + 40);
                v111 = v105;
                do
                {
                  v112 = v12 + v111;
                  *(_OWORD *)(v112 + 24) = *(_OWORD *)(v12 + v111);
                  *(_DWORD *)(v112 + 40) = *(_DWORD *)(v12 + v111 + 16);
                  if (!v111)
                  {
                    v107 = v12;
                    goto LABEL_122;
                  }
                  v111 -= 24;
                }
                while (a5.n128_f64[0] < *(double *)(v112 - 16));
                v107 = v12 + v111 + 24;
LABEL_122:
                *(_QWORD *)v107 = v109;
                *(_QWORD *)(v107 + 8) = a5.n128_u64[0];
                *(_DWORD *)(v107 + 16) = v110;
              }
              v102 = (__n128 *)((char *)v108 + 24);
              v105 += 24;
              v106 = (unint64_t)v108;
            }
            while (&v108[1].n128_i8[8] != (__int8 *)a2);
          }
        }
        else if (!v104)
        {
          do
          {
            v142 = v102;
            a5.n128_u64[0] = *(_QWORD *)(a1 + 32);
            if (a5.n128_f64[0] < *(double *)(a1 + 8))
            {
              v143 = v102->n128_u64[0];
              v144 = *(_QWORD *)(a1 + 40);
              v145 = v142;
              do
              {
                *v145 = *(__n128 *)((char *)v145 - 24);
                v145[1].n128_u32[0] = v145[-1].n128_u32[2];
                v146 = v145[-3].n128_f64[1];
                v145 = (__n128 *)((char *)v145 - 24);
              }
              while (a5.n128_f64[0] < v146);
              v145->n128_u64[0] = v143;
              v145->n128_u64[1] = a5.n128_u64[0];
              v145[1].n128_u32[0] = v144;
            }
            v102 = (__n128 *)((char *)v142 + 24);
            a1 = (uint64_t)v142;
          }
          while (&v142[1].n128_i8[8] != (__int8 *)a2);
        }
        return a5.n128_f64[0];
    }
  }
}

  v9 = (__n128 *)((char *)a2 - 24);
  v10 = a2 - 3;
  v11 = &a2[-5].n128_i8[8];
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v12) >> 3);
    switch(v14)
    {
      case 0:
      case 1:
        return a5.n128_f64[0];
      case 2:
        a5.n128_u64[0] = a2[-1].n128_u64[0];
        if (a5.n128_f64[0] < *(double *)(v12 + 8))
          goto LABEL_104;
        return a5.n128_f64[0];
      case 3:
        v92 = (__n128 *)(v12 + 24);
        a5.n128_u64[0] = *(_QWORD *)(v12 + 32);
        v93 = a2[-1].n128_f64[0];
        if (a5.n128_f64[0] >= *(double *)(v12 + 8))
        {
          if (v93 < a5.n128_f64[0])
          {
            a5 = *v92;
            v140 = *(_QWORD *)(v12 + 40);
            v141 = a2[-1].n128_u32[2];
            *v92 = *v9;
            *(_DWORD *)(v12 + 40) = v141;
            a2[-1].n128_u32[2] = v140;
            *v9 = a5;
            a5.n128_u64[0] = *(_QWORD *)(v12 + 32);
            if (a5.n128_f64[0] < *(double *)(v12 + 8))
            {
              v194 = *(_QWORD *)(v12 + 16);
              v171 = *(__n128 *)v12;
              *(__n128 *)v12 = *v92;
              *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 + 40);
              a5.n128_u64[0] = v171.n128_u64[0];
              *v92 = v171;
              *(_DWORD *)(v12 + 40) = v194;
            }
          }
        }
        else
        {
          if (v93 < a5.n128_f64[0])
          {
LABEL_104:
            v191 = *(_QWORD *)(v12 + 16);
            v168 = *(__n128 *)v12;
            v94 = *v9;
            *(_DWORD *)(v12 + 16) = a2[-1].n128_u32[2];
            *(__n128 *)v12 = v94;
            a5 = v168;
            a2[-1].n128_u32[2] = v191;
LABEL_105:
            *v9 = a5;
            return a5.n128_f64[0];
          }
          v195 = *(_QWORD *)(v12 + 16);
          v172 = *(__n128 *)v12;
          *(__n128 *)v12 = *v92;
          *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 + 40);
          *v92 = v172;
          *(_DWORD *)(v12 + 40) = v195;
          a5.n128_u64[0] = a2[-1].n128_u64[0];
          if (a5.n128_f64[0] < *(double *)(v12 + 32))
          {
            a5 = *v92;
            v147 = *(_QWORD *)(v12 + 40);
            v148 = a2[-1].n128_u32[2];
            *v92 = *v9;
            *(_DWORD *)(v12 + 40) = v148;
            a2[-1].n128_u32[2] = v147;
            goto LABEL_105;
          }
        }
        return a5.n128_f64[0];
      case 4:
        a5.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_0 &,md::MuninJunctionInfo*>((__n128 *)v12, (__n128 *)(v12 + 24), (__n128 *)(v12 + 48), (__n128 *)((char *)a2 - 24), a5).n128_u64[0];
        return a5.n128_f64[0];
      case 5:
        v95 = (__n128 *)(v12 + 24);
        v96 = (__n128 *)(v12 + 48);
        v97 = (__n128 *)(v12 + 72);
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabeler::findNearbyJunctions(geo::Mercator3<double> const&,double,std::vector<md::MuninJunctionInfo> &)::$_0 &,md::MuninJunctionInfo*>((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a1 + 72), a5);
        a5.n128_u64[0] = a2[-1].n128_u64[0];
        if (a5.n128_f64[0] < *(double *)(a1 + 80))
        {
          a5 = *v97;
          v98 = *(_QWORD *)(a1 + 88);
          v99 = a2[-1].n128_u32[2];
          *v97 = *v9;
          *(_DWORD *)(a1 + 88) = v99;
          a2[-1].n128_u32[2] = v98;
          *v9 = a5;
          a5.n128_u64[0] = *(_QWORD *)(a1 + 80);
          if (a5.n128_f64[0] < *(double *)(a1 + 56))
          {
            v100 = *(_QWORD *)(a1 + 64);
            a5 = *v96;
            *v96 = *v97;
            *(_DWORD *)(a1 + 64) = *(_DWORD *)(a1 + 88);
            *v97 = a5;
            *(_DWORD *)(a1 + 88) = v100;
            a5.n128_u64[0] = *(_QWORD *)(a1 + 56);
            if (a5.n128_f64[0] < *(double *)(a1 + 32))
            {
              v101 = *(_QWORD *)(a1 + 40);
              a5 = *v95;
              *v95 = *v96;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
              *v96 = a5;
              *(_DWORD *)(a1 + 64) = v101;
              a5.n128_u64[0] = *(_QWORD *)(a1 + 32);
              if (a5.n128_f64[0] < *(double *)(a1 + 8))
              {
                v192 = *(_QWORD *)(a1 + 16);
                v169 = *(__n128 *)a1;
                *(__n128 *)a1 = *v95;
                *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
                a5.n128_u64[0] = v169.n128_u64[0];
                *v95 = v169;
                *(_DWORD *)(a1 + 40) = v192;
              }
            }
          }
        }
        return a5.n128_f64[0];
      default:
        if (v13 > 575)
        {
          if (!a3)
          {
            if ((__n128 *)v12 != a2)
            {
              v113 = (unint64_t)(v14 - 2) >> 1;
              v114 = v113;
              do
              {
                if (v113 >= v114)
                {
                  v116 = (2 * v114) | 1;
                  v117 = v12 + 24 * v116;
                  if (2 * v114 + 2 < v14 && *(double *)(v117 + 8) < *(double *)(v117 + 32))
                  {
                    v117 += 24;
                    v116 = 2 * v114 + 2;
                  }
                  v118 = v12 + 24 * v114;
                  v119 = *(double *)(v118 + 8);
                  if (*(double *)(v117 + 8) >= v119)
                  {
                    v120 = *(_QWORD *)v118;
                    v121 = *(_DWORD *)(v118 + 16);
                    do
                    {
                      v122 = v118;
                      v118 = v117;
                      v123 = *(_OWORD *)v117;
                      *(_DWORD *)(v122 + 16) = *(_DWORD *)(v117 + 16);
                      *(_OWORD *)v122 = v123;
                      if (v113 < v116)
                        break;
                      v124 = 2 * v116;
                      v116 = (2 * v116) | 1;
                      v117 = v12 + 24 * v116;
                      v125 = v124 + 2;
                      if (v125 < v14 && *(double *)(v117 + 8) < *(double *)(v117 + 32))
                      {
                        v117 += 24;
                        v116 = v125;
                      }
                    }
                    while (*(double *)(v117 + 8) >= v119);
                    *(_QWORD *)v118 = v120;
                    *(double *)(v118 + 8) = v119;
                    *(_DWORD *)(v118 + 16) = v121;
                  }
                }
                v115 = v114-- <= 0;
              }
              while (!v115);
              v126 = v13 / 0x18uLL;
              do
              {
                v127 = 0;
                v193 = *(_QWORD *)(v12 + 16);
                v170 = *(__n128 *)v12;
                v128 = (__n128 *)v12;
                do
                {
                  v130 = v128;
                  v128 = (__n128 *)((char *)v128 + 24 * v127 + 24);
                  v131 = 2 * v127;
                  v127 = (2 * v127) | 1;
                  v132 = v131 + 2;
                  if (v132 < v126 && v128->n128_f64[1] < v128[2].n128_f64[0])
                  {
                    v128 = (__n128 *)((char *)v128 + 24);
                    v127 = v132;
                  }
                  v129 = *v128;
                  v130[1].n128_u32[0] = v128[1].n128_u32[0];
                  *v130 = v129;
                }
                while (v127 <= (uint64_t)((unint64_t)(v126 - 2) >> 1));
                a2 = (__n128 *)((char *)a2 - 24);
                if (v128 == a2)
                {
                  a5.n128_u64[0] = v170.n128_u64[0];
                  v128[1].n128_u32[0] = v193;
                  *v128 = v170;
                }
                else
                {
                  a5 = *a2;
                  v128[1].n128_u32[0] = a2[1].n128_u32[0];
                  *v128 = a5;
                  a5.n128_u64[0] = v170.n128_u64[0];
                  a2[1].n128_u32[0] = v193;
                  *a2 = v170;
                  v133 = (uint64_t)&v128[1].n128_i64[1] - v12;
                  if (v133 >= 25)
                  {
                    v134 = (v133 / 0x18uLL - 2) >> 1;
                    v135 = v12 + 24 * v134;
                    a5.n128_u64[0] = v128->n128_u64[1];
                    if (*(double *)(v135 + 8) < a5.n128_f64[0])
                    {
                      v136 = v128->n128_u64[0];
                      v137 = v128[1].n128_u32[0];
                      do
                      {
                        v138 = v128;
                        v128 = (__n128 *)v135;
                        v139 = *(__n128 *)v135;
                        v138[1].n128_u32[0] = *(_DWORD *)(v135 + 16);
                        *v138 = v139;
                        if (!v134)
                          break;
                        v134 = (v134 - 1) >> 1;
                        v135 = v12 + 24 * v134;
                      }
                      while (*(double *)(v135 + 8) < a5.n128_f64[0]);
                      v128->n128_u64[0] = v136;
                      v128->n128_u64[1] = a5.n128_u64[0];
                      v128[1].n128_u32[0] = v137;
                    }
                  }
                }
                v115 = v126-- <= 2;
              }
              while (!v115);
            }
            return a5.n128_f64[0];
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = (__n128 *)(v12 + 24 * ((unint64_t)v14 >> 1));
          v17 = a2[-1].n128_f64[0];
          if ((unint64_t)v13 < 0xC01)
          {
            v20 = *(double *)(v12 + 8);
            if (v20 >= v16->n128_f64[1])
            {
              if (v17 < v20)
              {
                v177 = *(_QWORD *)(v12 + 16);
                v154 = *(__n128 *)v12;
                a5 = *v9;
                *(_DWORD *)(v12 + 16) = a2[-1].n128_u32[2];
                *(__n128 *)v12 = a5;
                a5.n128_u64[1] = v154.n128_u64[1];
                a2[-1].n128_u32[2] = v177;
                *v9 = v154;
                if (*(double *)(v12 + 8) < v16->n128_f64[1])
                {
                  v178 = v16[1].n128_u64[0];
                  v155 = *v16;
                  a5 = *(__n128 *)v12;
                  v16[1].n128_u32[0] = *(_DWORD *)(v12 + 16);
                  *v16 = a5;
                  a5.n128_u64[1] = v155.n128_u64[1];
                  *(_DWORD *)(v12 + 16) = v178;
                  *(__n128 *)v12 = v155;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v17 >= v20)
              {
                v181 = v16[1].n128_u64[0];
                v158 = *v16;
                a5 = *(__n128 *)v12;
                v16[1].n128_u32[0] = *(_DWORD *)(v12 + 16);
                *v16 = a5;
                a5.n128_u64[1] = v158.n128_u64[1];
                *(_DWORD *)(v12 + 16) = v181;
                *(__n128 *)v12 = v158;
                if (a2[-1].n128_f64[0] >= *(double *)(v12 + 8))
                  goto LABEL_31;
                v174 = *(_QWORD *)(v12 + 16);
                v151 = *(__n128 *)v12;
                v38 = *v9;
                *(_DWORD *)(v12 + 16) = a2[-1].n128_u32[2];
                *(__n128 *)v12 = v38;
              }
              else
              {
                v174 = v16[1].n128_u64[0];
                v151 = *v16;
                v21 = *v9;
                v16[1].n128_u32[0] = a2[-1].n128_u32[2];
                *v16 = v21;
              }
              a5.n128_u64[1] = v151.n128_u64[1];
              a2[-1].n128_u32[2] = v174;
              *v9 = v151;
            }
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
LABEL_55:
            a5.n128_u64[0] = *(_QWORD *)(v12 + 8);
            if (*(double *)(v12 - 16) < a5.n128_f64[0])
              goto LABEL_56;
            if (a5.n128_f64[0] >= a2[-1].n128_f64[0])
            {
              v81 = v12 + 24;
              do
              {
                v12 = v81;
                if (v81 >= (unint64_t)a2)
                  break;
                v82 = *(double *)(v81 + 8);
                v81 += 24;
              }
              while (a5.n128_f64[0] >= v82);
            }
            else
            {
              v79 = v12;
              do
              {
                v12 = v79 + 24;
                v80 = *(double *)(v79 + 32);
                v79 += 24;
              }
              while (a5.n128_f64[0] >= v80);
            }
            v83 = a2;
            if (v12 < (unint64_t)a2)
            {
              v84 = a2;
              do
              {
                v83 = (__n128 *)((char *)v84 - 24);
                v85 = v84[-1].n128_f64[0];
                v84 = (__n128 *)((char *)v84 - 24);
              }
              while (a5.n128_f64[0] < v85);
            }
            v86 = *(_QWORD *)a1;
            v87 = *(_QWORD *)(a1 + 16);
            while (v12 < (unint64_t)v83)
            {
              v190 = *(_QWORD *)(v12 + 16);
              v167 = *(__n128 *)v12;
              v88 = *v83;
              *(_DWORD *)(v12 + 16) = v83[1].n128_u32[0];
              *(__n128 *)v12 = v88;
              v83[1].n128_u32[0] = v190;
              *v83 = v167;
              do
              {
                v89 = *(double *)(v12 + 32);
                v12 += 24;
              }
              while (a5.n128_f64[0] >= v89);
              do
              {
                v90 = v83[-1].n128_f64[0];
                v83 = (__n128 *)((char *)v83 - 24);
              }
              while (a5.n128_f64[0] < v90);
            }
            if (v12 - 24 != a1)
            {
              v91 = *(_OWORD *)(v12 - 24);
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(v12 - 8);
              *(_OWORD *)a1 = v91;
            }
            a4 = 0;
            *(_QWORD *)(v12 - 24) = v86;
            *(_QWORD *)(v12 - 16) = a5.n128_u64[0];
            *(_DWORD *)(v12 - 8) = v87;
            continue;
          }
          v18 = v16->n128_f64[1];
          if (v18 >= *(double *)(v12 + 8))
          {
            if (v17 < v18)
            {
              v175 = v16[1].n128_u64[0];
              v152 = *v16;
              v22 = *v9;
              v16[1].n128_u32[0] = a2[-1].n128_u32[2];
              *v16 = v22;
              a2[-1].n128_u32[2] = v175;
              *v9 = v152;
              if (v16->n128_f64[1] < *(double *)(v12 + 8))
              {
                v176 = *(_QWORD *)(v12 + 16);
                v153 = *(__n128 *)v12;
                v23 = *v16;
                *(_DWORD *)(v12 + 16) = v16[1].n128_u32[0];
                *(__n128 *)v12 = v23;
                v16[1].n128_u32[0] = v176;
                *v16 = v153;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v179 = *(_QWORD *)(v12 + 16);
              v156 = *(__n128 *)v12;
              v24 = *v16;
              *(_DWORD *)(v12 + 16) = v16[1].n128_u32[0];
              *(__n128 *)v12 = v24;
              v16[1].n128_u32[0] = v179;
              *v16 = v156;
              if (a2[-1].n128_f64[0] >= v16->n128_f64[1])
                goto LABEL_22;
              v173 = v16[1].n128_u64[0];
              v150 = *v16;
              v25 = *v9;
              v16[1].n128_u32[0] = a2[-1].n128_u32[2];
              *v16 = v25;
            }
            else
            {
              v173 = *(_QWORD *)(v12 + 16);
              v150 = *(__n128 *)v12;
              v19 = *v9;
              *(_DWORD *)(v12 + 16) = a2[-1].n128_u32[2];
              *(__n128 *)v12 = v19;
            }
            a2[-1].n128_u32[2] = v173;
            *v9 = v150;
          }
LABEL_22:
          v26 = (__n128 *)(v12 + 24);
          v27 = v12 + 24 * v15;
          v28 = (__n128 *)(v27 - 24);
          v29 = *(double *)(v27 - 16);
          v30 = a2[-3].n128_f64[1];
          if (v29 >= *(double *)(v12 + 32))
          {
            if (v30 < v29)
            {
              v180 = *(_QWORD *)(v27 - 8);
              v157 = *v28;
              v34 = *v10;
              *(_DWORD *)(v27 - 8) = a2[-2].n128_u32[0];
              *v28 = v34;
              a2[-2].n128_u32[0] = v180;
              *v10 = v157;
              if (*(double *)(v27 - 16) < *(double *)(v12 + 32))
              {
                v35 = *v26;
                v36 = *(_QWORD *)(v12 + 40);
                v37 = v28[1].n128_i32[0];
                *v26 = *v28;
                *(_DWORD *)(v12 + 40) = v37;
                v28[1].n128_u32[0] = v36;
                *v28 = v35;
              }
            }
          }
          else
          {
            if (v30 >= v29)
            {
              v39 = *v26;
              v40 = *(_QWORD *)(v12 + 40);
              v41 = v28[1].n128_i32[0];
              *v26 = *v28;
              *(_DWORD *)(v12 + 40) = v41;
              v28[1].n128_u32[0] = v40;
              *v28 = v39;
              if (a2[-3].n128_f64[1] >= v28->n128_f64[1])
                goto LABEL_36;
              v182 = v28[1].n128_i64[0];
              v159 = *v28;
              v42 = *v10;
              v28[1].n128_u32[0] = a2[-2].n128_u32[0];
              *v28 = v42;
              v31 = v159;
              a2[-2].n128_u32[0] = v182;
            }
            else
            {
              v31 = *v26;
              v32 = *(_QWORD *)(v12 + 40);
              v33 = a2[-2].n128_u32[0];
              *v26 = *v10;
              *(_DWORD *)(v12 + 40) = v33;
              a2[-2].n128_u32[0] = v32;
            }
            *v10 = v31;
          }
LABEL_36:
          v43 = (__n128 *)(v12 + 48);
          v44 = v12 + 24 * v15;
          v45 = (__n128 *)(v44 + 24);
          v46 = *(double *)(v44 + 32);
          v47 = a2[-4].n128_f64[0];
          if (v46 >= *(double *)(v12 + 56))
          {
            if (v47 < v46)
            {
              v183 = *(_QWORD *)(v44 + 40);
              v160 = *v45;
              v51 = *(__n128 *)v11;
              *(_DWORD *)(v44 + 40) = a2[-4].n128_u32[2];
              *v45 = v51;
              a2[-4].n128_u32[2] = v183;
              *(__n128 *)v11 = v160;
              if (*(double *)(v44 + 32) < *(double *)(v12 + 56))
              {
                v52 = *v43;
                v53 = *(_QWORD *)(v12 + 64);
                v54 = v45[1].n128_i32[0];
                *v43 = *v45;
                *(_DWORD *)(v12 + 64) = v54;
                v45[1].n128_u32[0] = v53;
                *v45 = v52;
              }
            }
          }
          else
          {
            if (v47 >= v46)
            {
              v55 = *v43;
              v56 = *(_QWORD *)(v12 + 64);
              v57 = v45[1].n128_i32[0];
              *v43 = *v45;
              *(_DWORD *)(v12 + 64) = v57;
              v45[1].n128_u32[0] = v56;
              *v45 = v55;
              if (a2[-4].n128_f64[0] >= v45->n128_f64[1])
                goto LABEL_45;
              v184 = v45[1].n128_i64[0];
              v161 = *v45;
              v58 = *(__n128 *)v11;
              v45[1].n128_u32[0] = a2[-4].n128_u32[2];
              *v45 = v58;
              v48 = v161;
              a2[-4].n128_u32[2] = v184;
            }
            else
            {
              v48 = *v43;
              v49 = *(_QWORD *)(v12 + 64);
              v50 = a2[-4].n128_u32[2];
              *v43 = *(__n128 *)v11;
              *(_DWORD *)(v12 + 64) = v50;
              a2[-4].n128_u32[2] = v49;
            }
            *(__n128 *)v11 = v48;
          }
LABEL_45:
          v59 = v16->n128_f64[1];
          v60 = v45->n128_f64[1];
          if (v59 >= v28->n128_f64[1])
          {
            if (v60 < v59)
            {
              v186 = v16[1].n128_u64[0];
              v163 = *v16;
              *v16 = *v45;
              v16[1].n128_u32[0] = v45[1].n128_u32[0];
              v45[1].n128_u32[0] = v186;
              *v45 = v163;
              if (v16->n128_f64[1] < v28->n128_f64[1])
              {
                v187 = v28[1].n128_i64[0];
                v164 = *v28;
                *v28 = *v16;
                v28[1].n128_u32[0] = v16[1].n128_u32[0];
                v16[1].n128_u32[0] = v187;
                *v16 = v164;
              }
            }
          }
          else
          {
            if (v60 >= v59)
            {
              v188 = v28[1].n128_i64[0];
              v165 = *v28;
              *v28 = *v16;
              v28[1].n128_u32[0] = v16[1].n128_u32[0];
              v16[1].n128_u32[0] = v188;
              *v16 = v165;
              if (v45->n128_f64[1] >= v16->n128_f64[1])
                goto LABEL_54;
              v185 = v16[1].n128_u64[0];
              v162 = *v16;
              *v16 = *v45;
              v16[1].n128_u32[0] = v45[1].n128_u32[0];
            }
            else
            {
              v185 = v28[1].n128_u64[0];
              v162 = *v28;
              *v28 = *v45;
              v28[1].n128_u32[0] = v45[1].n128_u32[0];
            }
            v45[1].n128_u32[0] = v185;
            *v45 = v162;
          }
LABEL_54:
          v189 = *(_QWORD *)(v12 + 16);
          v166 = *(__n128 *)v12;
          a5 = *v16;
          *(_DWORD *)(v12 + 16) = v16[1].n128_u32[0];
          *(__n128 *)v12 = a5;
          a5.n128_u64[1] = v166.n128_u64[1];
          v16[1].n128_u32[0] = v189;
          *v16 = v166;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_32:
          a5.n128_u64[0] = *(_QWORD *)(v12 + 8);
LABEL_56:
          v61 = *(_QWORD *)v12;
          v62 = *(_QWORD *)(v12 + 16);
          v63 = v12;
          do
          {
            v64 = v63;
            v63 += 24;
          }
          while (*(double *)(v64 + 32) < a5.n128_f64[0]);
          v65 = a2;
          if (v64 == v12)
          {
            v68 = a2;
            while (v63 < (unint64_t)v68)
            {
              v66 = (__n128 *)((char *)v68 - 24);
              v69 = v68[-1].n128_f64[0];
              v68 = (__n128 *)((char *)v68 - 24);
              if (v69 < a5.n128_f64[0])
                goto LABEL_66;
            }
            v66 = v68;
          }
          else
          {
            do
            {
              v66 = (__n128 *)((char *)v65 - 24);
              v67 = v65[-1].n128_f64[0];
              v65 = (__n128 *)((char *)v65 - 24);
            }
            while (v67 >= a5.n128_f64[0]);
          }
LABEL_66:
          v12 = v63;
          if (v63 < (unint64_t)v66)
          {
            v70 = (unint64_t)v66;
            do
            {
              v71 = *(__n128 *)v12;
              v72 = *(_QWORD *)(v12 + 16);
              v73 = *(_DWORD *)(v70 + 16);
              *(_OWORD *)v12 = *(_OWORD *)v70;
              *(_DWORD *)(v12 + 16) = v73;
              *(_DWORD *)(v70 + 16) = v72;
              *(__n128 *)v70 = v71;
              do
              {
                v74 = *(double *)(v12 + 32);
                v12 += 24;
              }
              while (v74 < a5.n128_f64[0]);
              do
              {
                v75 = *(double *)(v70 - 16);
                v70 -= 24;
              }
              while (v75 >= a5.n128_f64[0]);
            }
            while (v12 < v70);
          }
          if (v12 - 24 != a1)
          {
            v76 = *(_OWORD *)(v12 - 24);
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v12 - 8);
            *(_OWORD *)a1 = v76;
          }
          *(_QWORD *)(v12 - 24) = v61;
          *(_QWORD *)(v12 - 16) = a5.n128_u64[0];
          *(_DWORD *)(v12 - 8) = v62;
          if (v63 < (unint64_t)v66)
            goto LABEL_77;
          v77 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabeler::findConnectedJunctions(md::MuninRoadEdge const*,std::vector<std::vector<md::MuninJunctionInfo>> &,unsigned int)::$_0 &,md::MuninJunctionInfo*>(a1, v12 - 24, a5);
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabeler::findConnectedJunctions(md::MuninRoadEdge const*,std::vector<std::vector<md::MuninJunctionInfo>> &,unsigned int)::$_0 &,md::MuninJunctionInfo*>(v12, (uint64_t)a2, v78))
          {
            if (v77)
              continue;
LABEL_77:
            std::__introsort<std::_ClassicAlgPolicy,md::MuninRoadLabeler::findConnectedJunctions(md::MuninRoadEdge const*,std::vector<std::vector<md::MuninJunctionInfo>> &,unsigned int)::$_0 &,md::MuninJunctionInfo*,false>(a1, v12 - 24, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__n128 *)(v12 - 24);
          if (v77)
            return a5.n128_f64[0];
          goto LABEL_1;
        }
        v102 = (__n128 *)(v12 + 24);
        v104 = (__n128 *)v12 == a2 || v102 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v104)
          {
            v105 = 0;
            v106 = v12;
            do
            {
              v108 = v102;
              a5.n128_u64[0] = *(_QWORD *)(v106 + 32);
              if (a5.n128_f64[0] < *(double *)(v106 + 8))
              {
                v109 = v102->n128_u64[0];
                v110 = *(_DWORD *)(v106 + 40);
                v111 = v105;
                do
                {
                  v112 = v12 + v111;
                  *(_OWORD *)(v112 + 24) = *(_OWORD *)(v12 + v111);
                  *(_DWORD *)(v112 + 40) = *(_DWORD *)(v12 + v111 + 16);
                  if (!v111)
                  {
                    v107 = v12;
                    goto LABEL_122;
                  }
                  v111 -= 24;
                }
                while (a5.n128_f64[0] < *(double *)(v112 - 16));
                v107 = v12 + v111 + 24;
LABEL_122:
                *(_QWORD *)v107 = v109;
                *(_QWORD *)(v107 + 8) = a5.n128_u64[0];
                *(_DWORD *)(v107 + 16) = v110;
              }
              v102 = (__n128 *)((char *)v108 + 24);
              v105 += 24;
              v106 = (unint64_t)v108;
            }
            while (&v108[1].n128_i8[8] != (__int8 *)a2);
          }
        }
        else if (!v104)
        {
          do
          {
            v142 = v102;
            a5.n128_u64[0] = *(_QWORD *)(a1 + 32);
            if (a5.n128_f64[0] < *(double *)(a1 + 8))
            {
              v143 = v102->n128_u64[0];
              v144 = *(_QWORD *)(a1 + 40);
              v145 = v142;
              do
              {
                *v145 = *(__n128 *)((char *)v145 - 24);
                v145[1].n128_u32[0] = v145[-1].n128_u32[2];
                v146 = v145[-3].n128_f64[1];
                v145 = (__n128 *)((char *)v145 - 24);
              }
              while (a5.n128_f64[0] < v146);
              v145->n128_u64[0] = v143;
              v145->n128_u64[1] = a5.n128_u64[0];
              v145[1].n128_u32[0] = v144;
            }
            v102 = (__n128 *)((char *)v142 + 24);
            a1 = (uint64_t)v142;
          }
          while (&v142[1].n128_i8[8] != (__int8 *)a2);
        }
        return a5.n128_f64[0];
    }
  }
}

  v178 = (__int128 *)(a2 - 4);
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = (uint64_t)a2 - v9;
    v11 = (uint64_t)((uint64_t)a2 - v9) >> 5;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        LODWORD(result) = *((_DWORD *)a2 - 2);
        if (*(float *)&result < *(float *)(v9 + 24))
        {
          v83 = *(_OWORD *)v9;
          v82 = *(_OWORD *)(v9 + 16);
          *(_QWORD *)v9 = 0;
          *(_QWORD *)(v9 + 8) = 0;
          v196 = v82;
          v84 = *((_OWORD *)a2 - 2);
          *(_QWORD *)v178 = 0;
          *(a2 - 3) = 0;
          v85 = *(std::__shared_weak_count **)(v9 + 8);
          *(_OWORD *)v9 = v84;
          if (v85)
          {
            p_shared_owners = (unint64_t *)&v85->__shared_owners_;
            do
              v87 = __ldaxr(p_shared_owners);
            while (__stlxr(v87 - 1, p_shared_owners));
            if (!v87)
            {
              v189 = v83;
              ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
              std::__shared_weak_count::__release_weak(v85);
              v83 = v189;
            }
          }
          *(_OWORD *)(v9 + 16) = *((_OWORD *)a2 - 1);
          v88 = (std::__shared_weak_count *)*(a2 - 3);
          *((_OWORD *)a2 - 2) = v83;
          if (v88)
          {
            v89 = (unint64_t *)&v88->__shared_owners_;
            do
              v90 = __ldaxr(v89);
            while (__stlxr(v90 - 1, v89));
            if (!v90)
            {
              ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
              std::__shared_weak_count::__release_weak(v88);
            }
          }
          result = *(double *)&v196;
          *((_OWORD *)a2 - 1) = v196;
        }
        return result;
      case 3uLL:
        *(_QWORD *)&result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_0 &,md::RoadSearchResult *>((__int128 *)v9, (__int128 *)(v9 + 32), v178).n128_u64[0];
        return result;
      case 4uLL:
        *(_QWORD *)&result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_0 &,md::RoadSearchResult *>(v9, v9 + 32, v9 + 64, v178).n128_u64[0];
        return result;
      case 5uLL:
        *(_QWORD *)&result = std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_0 &,md::RoadSearchResult *,0>(v9, v9 + 32, v9 + 64, v9 + 96, v178).n128_u64[0];
        return result;
      default:
        if (v10 <= 767)
        {
          v91 = (_QWORD *)(v9 + 32);
          v93 = (_QWORD *)v9 == a2 || v91 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v93)
            {
              v94 = v9;
              do
              {
                v95 = v91;
                LODWORD(result) = *(_DWORD *)(v94 + 56);
                if (*(float *)&result < *(float *)(v94 + 24))
                {
                  v96 = *(_OWORD *)v91;
                  *v91 = 0;
                  v91[1] = 0;
                  v97 = *(_QWORD *)(v94 + 48);
                  v98 = v91;
                  a6.n128_u64[0] = *(_QWORD *)(v94 + 56);
                  v182 = v96;
                  v190 = a6;
                  while (1)
                  {
                    v99 = v94;
                    v100 = *(_OWORD *)v94;
                    *(_QWORD *)v94 = 0;
                    *(_QWORD *)(v94 + 8) = 0;
                    v101 = (std::__shared_weak_count *)v98[1];
                    *(_OWORD *)v98 = v100;
                    if (v101)
                    {
                      v102 = (unint64_t *)&v101->__shared_owners_;
                      do
                        v103 = __ldaxr(v102);
                      while (__stlxr(v103 - 1, v102));
                      if (!v103)
                      {
                        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                        std::__shared_weak_count::__release_weak(v101);
                        a6 = v190;
                      }
                    }
                    *((_OWORD *)v98 + 1) = *(_OWORD *)(v99 + 16);
                    if (v99 == v9)
                      break;
                    v94 = v99 - 32;
                    v98 = (_QWORD *)v99;
                    if (a6.n128_f32[0] >= *(float *)(v99 - 8))
                    {
                      v104 = v99;
                      goto LABEL_143;
                    }
                  }
                  v104 = v9;
LABEL_143:
                  v105 = *(std::__shared_weak_count **)(v104 + 8);
                  result = *(double *)&v182;
                  *(_OWORD *)v104 = v182;
                  if (v105)
                  {
                    v106 = (unint64_t *)&v105->__shared_owners_;
                    do
                      v107 = __ldaxr(v106);
                    while (__stlxr(v107 - 1, v106));
                    if (!v107)
                    {
                      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                      std::__shared_weak_count::__release_weak(v105);
                      a6 = v190;
                    }
                  }
                  *(_QWORD *)(v99 + 16) = v97;
                  *(_QWORD *)(v104 + 24) = a6.n128_u64[0];
                }
                v91 = v95 + 4;
                v94 = (unint64_t)v95;
              }
              while (v95 + 4 != a2);
            }
          }
          else if (!v93)
          {
            do
            {
              v166 = (uint64_t)v91;
              LODWORD(result) = *(_DWORD *)(a1 + 56);
              if (*(float *)&result < *(float *)(a1 + 24))
              {
                v167 = *(_OWORD *)v91;
                *v91 = 0;
                v91[1] = 0;
                v168 = *(_QWORD *)(a1 + 48);
                v169 = (uint64_t)v91;
                a6.n128_u64[0] = *(_QWORD *)(a1 + 56);
                v185 = v167;
                v192 = a6;
                do
                {
                  v170 = v169;
                  v169 = a1;
                  v171 = *(_OWORD *)a1;
                  *(_QWORD *)a1 = 0;
                  *(_QWORD *)(a1 + 8) = 0;
                  v172 = *(std::__shared_weak_count **)(v170 + 8);
                  *(_OWORD *)v170 = v171;
                  if (v172)
                  {
                    v173 = (unint64_t *)&v172->__shared_owners_;
                    do
                      v174 = __ldaxr(v173);
                    while (__stlxr(v174 - 1, v173));
                    if (!v174)
                    {
                      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                      std::__shared_weak_count::__release_weak(v172);
                      a6 = v192;
                    }
                  }
                  *(_OWORD *)(v170 + 16) = *(_OWORD *)(a1 + 16);
                  a1 -= 32;
                }
                while (a6.n128_f32[0] < *(float *)(v169 - 8));
                v175 = *(std::__shared_weak_count **)(v169 + 8);
                result = *(double *)&v185;
                *(_OWORD *)v169 = v185;
                if (v175)
                {
                  v176 = (unint64_t *)&v175->__shared_owners_;
                  do
                    v177 = __ldaxr(v176);
                  while (__stlxr(v177 - 1, v176));
                  if (!v177)
                  {
                    ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                    std::__shared_weak_count::__release_weak(v175);
                    a6 = v192;
                  }
                }
                *(_QWORD *)(v169 + 16) = v168;
                *(_QWORD *)(v169 + 24) = a6.n128_u64[0];
              }
              v91 = (_QWORD *)(v166 + 32);
              a1 = v166;
            }
            while ((_QWORD *)(v166 + 32) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((_QWORD *)v9 != a2)
          {
            v108 = (v11 - 2) >> 1;
            v109 = v108;
            do
            {
              v110 = v109;
              if (v108 >= v109)
              {
                v111 = (2 * v109) | 1;
                v112 = a1 + 32 * v111;
                if (2 * v110 + 2 < (uint64_t)v11 && *(float *)(v112 + 24) < *(float *)(v112 + 56))
                {
                  v112 += 32;
                  v111 = 2 * v110 + 2;
                }
                v113 = a1 + 32 * v110;
                v114 = *(float *)(v113 + 24);
                if (*(float *)(v112 + 24) >= v114)
                {
                  v183 = *(_OWORD *)v113;
                  *(_QWORD *)v113 = 0;
                  *(_QWORD *)(v113 + 8) = 0;
                  v115 = a1 + 32 * v110;
                  v191 = *(_QWORD *)(v115 + 16);
                  v116 = *(_DWORD *)(v115 + 28);
                  do
                  {
                    v117 = v112;
                    v118 = *(_OWORD *)v112;
                    *(_QWORD *)v112 = 0;
                    *(_QWORD *)(v112 + 8) = 0;
                    v119 = *(std::__shared_weak_count **)(v113 + 8);
                    *(_OWORD *)v113 = v118;
                    if (v119)
                    {
                      v120 = (unint64_t *)&v119->__shared_owners_;
                      do
                        v121 = __ldaxr(v120);
                      while (__stlxr(v121 - 1, v120));
                      if (!v121)
                      {
                        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                        std::__shared_weak_count::__release_weak(v119);
                      }
                    }
                    *(_OWORD *)(v113 + 16) = *(_OWORD *)(v117 + 16);
                    if (v108 < v111)
                      break;
                    v122 = 2 * v111;
                    v111 = (2 * v111) | 1;
                    v112 = a1 + 32 * v111;
                    v123 = v122 + 2;
                    if (v123 < (uint64_t)v11 && *(float *)(v112 + 24) < *(float *)(v112 + 56))
                    {
                      v112 += 32;
                      v111 = v123;
                    }
                    v113 = v117;
                  }
                  while (*(float *)(v112 + 24) >= v114);
                  v124 = *(std::__shared_weak_count **)(v117 + 8);
                  *(_OWORD *)v117 = v183;
                  if (v124)
                  {
                    v125 = (unint64_t *)&v124->__shared_owners_;
                    do
                      v126 = __ldaxr(v125);
                    while (__stlxr(v126 - 1, v125));
                    if (!v126)
                    {
                      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                      std::__shared_weak_count::__release_weak(v124);
                    }
                  }
                  *(_QWORD *)(v117 + 16) = v191;
                  *(float *)(v117 + 24) = v114;
                  *(_DWORD *)(v117 + 28) = v116;
                }
              }
              v109 = v110 - 1;
            }
            while (v110);
            v127 = (unint64_t)v10 >> 5;
            do
            {
              v129 = 0;
              v130 = a2;
              v132 = *(_QWORD *)a1;
              v131 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)a1 = 0;
              *(_QWORD *)(a1 + 8) = 0;
              v197 = *(_OWORD *)(a1 + 16);
              v133 = a1;
              do
              {
                v134 = v133;
                v133 += 32 * v129 + 32;
                v135 = 2 * v129;
                v129 = (2 * v129) | 1;
                v136 = v135 + 2;
                if (v136 < v127 && *(float *)(v133 + 24) < *(float *)(v133 + 56))
                {
                  v133 += 32;
                  v129 = v136;
                }
                v137 = *(_OWORD *)v133;
                *(_QWORD *)v133 = 0;
                *(_QWORD *)(v133 + 8) = 0;
                v138 = *(std::__shared_weak_count **)(v134 + 8);
                *(_OWORD *)v134 = v137;
                if (v138)
                {
                  v139 = (unint64_t *)&v138->__shared_owners_;
                  do
                    v140 = __ldaxr(v139);
                  while (__stlxr(v140 - 1, v139));
                  if (!v140)
                  {
                    ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                    std::__shared_weak_count::__release_weak(v138);
                  }
                }
                *(_OWORD *)(v134 + 16) = *(_OWORD *)(v133 + 16);
              }
              while (v129 <= (uint64_t)((unint64_t)(v127 - 2) >> 1));
              v141 = (_OWORD *)(v133 + 16);
              a2 = v130 - 4;
              if ((_QWORD *)v133 == v130 - 4)
              {
                v163 = *(std::__shared_weak_count **)(v133 + 8);
                *(_QWORD *)v133 = v132;
                *(_QWORD *)(v133 + 8) = v131;
                if (v163)
                {
                  v164 = (unint64_t *)&v163->__shared_owners_;
                  do
                    v165 = __ldaxr(v164);
                  while (__stlxr(v165 - 1, v164));
                  if (!v165)
                  {
                    ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                    std::__shared_weak_count::__release_weak(v163);
                  }
                }
                result = *(double *)&v197;
                *v141 = v197;
              }
              else
              {
                v142 = *((_OWORD *)v130 - 2);
                *a2 = 0;
                *(v130 - 3) = 0;
                v143 = *(std::__shared_weak_count **)(v133 + 8);
                *(_OWORD *)v133 = v142;
                if (v143)
                {
                  v144 = (unint64_t *)&v143->__shared_owners_;
                  do
                    v145 = __ldaxr(v144);
                  while (__stlxr(v145 - 1, v144));
                  if (!v145)
                  {
                    ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                    std::__shared_weak_count::__release_weak(v143);
                  }
                }
                *v141 = *((_OWORD *)v130 - 1);
                v146 = (std::__shared_weak_count *)*(v130 - 3);
                *(v130 - 4) = v132;
                *(v130 - 3) = v131;
                if (v146)
                {
                  v147 = (unint64_t *)&v146->__shared_owners_;
                  do
                    v148 = __ldaxr(v147);
                  while (__stlxr(v148 - 1, v147));
                  if (!v148)
                  {
                    ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                    std::__shared_weak_count::__release_weak(v146);
                  }
                }
                result = *(double *)&v197;
                *((_OWORD *)v130 - 1) = v197;
                v149 = v133 + 32 - a1;
                if (v149 >= 33)
                {
                  v150 = (((unint64_t)v149 >> 5) - 2) >> 1;
                  v151 = a1 + 32 * v150;
                  LODWORD(result) = *(_DWORD *)(v151 + 24);
                  v152 = *(float *)(v133 + 24);
                  if (*(float *)&result < v152)
                  {
                    v184 = *(_OWORD *)v133;
                    *(_QWORD *)v133 = 0;
                    *(_QWORD *)(v133 + 8) = 0;
                    v153 = *(_QWORD *)(v133 + 16);
                    v154 = *(_DWORD *)(v133 + 28);
                    do
                    {
                      v155 = v151;
                      v156 = *(_OWORD *)v151;
                      *(_QWORD *)v151 = 0;
                      *(_QWORD *)(v151 + 8) = 0;
                      v157 = *(std::__shared_weak_count **)(v133 + 8);
                      *(_OWORD *)v133 = v156;
                      if (v157)
                      {
                        v158 = (unint64_t *)&v157->__shared_owners_;
                        do
                          v159 = __ldaxr(v158);
                        while (__stlxr(v159 - 1, v158));
                        if (!v159)
                        {
                          ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                          std::__shared_weak_count::__release_weak(v157);
                        }
                      }
                      *(_OWORD *)(v133 + 16) = *(_OWORD *)(v155 + 16);
                      if (!v150)
                        break;
                      v150 = (v150 - 1) >> 1;
                      v151 = a1 + 32 * v150;
                      v133 = v155;
                    }
                    while (*(float *)(v151 + 24) < v152);
                    v160 = *(std::__shared_weak_count **)(v155 + 8);
                    result = *(double *)&v184;
                    *(_OWORD *)v155 = v184;
                    if (v160)
                    {
                      v161 = (unint64_t *)&v160->__shared_owners_;
                      do
                        v162 = __ldaxr(v161);
                      while (__stlxr(v162 - 1, v161));
                      if (!v162)
                      {
                        ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                        std::__shared_weak_count::__release_weak(v160);
                      }
                    }
                    *(_QWORD *)(v155 + 16) = v153;
                    *(float *)(v155 + 24) = v152;
                    *(_DWORD *)(v155 + 28) = v154;
                  }
                }
              }
            }
            while (v127-- > 2);
          }
          return result;
        }
        v12 = v11 >> 1;
        v13 = v9 + 32 * (v11 >> 1);
        if ((unint64_t)v10 <= 0x1000)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_0 &,md::RoadSearchResult *>((__int128 *)(a1 + 32 * (v11 >> 1)), (__int128 *)a1, v178);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_0 &,md::RoadSearchResult *>((__int128 *)a1, (__int128 *)(a1 + 32 * (v11 >> 1)), v178);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_0 &,md::RoadSearchResult *>((__int128 *)(a1 + 32), (__int128 *)(32 * v12 + a1 - 32), (__int128 *)a2 - 4);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_0 &,md::RoadSearchResult *>((__int128 *)(a1 + 64), (__int128 *)(a1 + 32 + 32 * v12), (__int128 *)a2 - 6);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_0 &,md::RoadSearchResult *>((__int128 *)(32 * v12 + a1 - 32), (__int128 *)(a1 + 32 * (v11 >> 1)), (__int128 *)(a1 + 32 + 32 * v12));
          a6 = *(__n128 *)a1;
          v14 = *(_OWORD *)(a1 + 16);
          *(_QWORD *)a1 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          v193 = v14;
          v15 = *(__n128 *)v13;
          *(_QWORD *)v13 = 0;
          *(_QWORD *)(v13 + 8) = 0;
          v16 = *(std::__shared_weak_count **)(a1 + 8);
          *(__n128 *)a1 = v15;
          if (v16)
          {
            v17 = (unint64_t *)&v16->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              v186 = a6;
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
              a6 = v186;
            }
          }
          v19 = a1 + 32 * v12;
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(v19 + 16);
          v20 = *(std::__shared_weak_count **)(v13 + 8);
          *(__n128 *)v13 = a6;
          if (v20)
          {
            v21 = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          *(_OWORD *)(v19 + 16) = v193;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v23 = *(float *)(a1 + 24);
          if (*(float *)(a1 - 8) < v23)
            goto LABEL_21;
          v181 = *(_OWORD *)a1;
          *(_QWORD *)a1 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          if (v23 >= *((float *)a2 - 2))
          {
            v57 = a1 + 32;
            do
            {
              v9 = v57;
              if (v57 >= (unint64_t)a2)
                break;
              v58 = *(float *)(v57 + 24);
              v57 += 32;
            }
            while (v23 >= v58);
          }
          else
          {
            v55 = a1;
            do
            {
              v9 = v55 + 32;
              v56 = *(float *)(v55 + 56);
              v55 += 32;
            }
            while (v23 >= v56);
          }
          v59 = (float *)a2;
          if (v9 < (unint64_t)a2)
          {
            v60 = (float *)a2;
            do
            {
              v59 = v60 - 8;
              v61 = *(v60 - 2);
              v60 -= 8;
            }
            while (v23 < v61);
          }
          v62 = *(_QWORD *)(a1 + 16);
          v63 = *(_DWORD *)(a1 + 28);
          while (v9 < (unint64_t)v59)
          {
            a6 = *(__n128 *)v9;
            v64 = *(_OWORD *)(v9 + 16);
            *(_QWORD *)v9 = 0;
            *(_QWORD *)(v9 + 8) = 0;
            v195 = v64;
            v65 = *(__n128 *)v59;
            *(_QWORD *)v59 = 0;
            *((_QWORD *)v59 + 1) = 0;
            v66 = *(std::__shared_weak_count **)(v9 + 8);
            *(__n128 *)v9 = v65;
            if (v66)
            {
              v67 = (unint64_t *)&v66->__shared_owners_;
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                v188 = a6;
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
                a6 = v188;
              }
            }
            *(_OWORD *)(v9 + 16) = *((_OWORD *)v59 + 1);
            v69 = (std::__shared_weak_count *)*((_QWORD *)v59 + 1);
            *(__n128 *)v59 = a6;
            if (v69)
            {
              v70 = (unint64_t *)&v69->__shared_owners_;
              do
                v71 = __ldaxr(v70);
              while (__stlxr(v71 - 1, v70));
              if (!v71)
              {
                ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                std::__shared_weak_count::__release_weak(v69);
              }
            }
            *((_OWORD *)v59 + 1) = v195;
            do
            {
              v72 = *(float *)(v9 + 56);
              v9 += 32;
            }
            while (v23 >= v72);
            do
            {
              v73 = *(v59 - 2);
              v59 -= 8;
            }
            while (v23 < v73);
          }
          v74 = (__int128 *)(v9 - 32);
          if (v9 - 32 != a1)
          {
            v75 = *v74;
            *(_QWORD *)v74 = 0;
            *(_QWORD *)(v9 - 24) = 0;
            v76 = *(std::__shared_weak_count **)(a1 + 8);
            *(_OWORD *)a1 = v75;
            if (v76)
            {
              v77 = (unint64_t *)&v76->__shared_owners_;
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
            *(_OWORD *)(a1 + 16) = *(_OWORD *)(v9 - 16);
          }
          v79 = *(std::__shared_weak_count **)(v9 - 24);
          result = *(double *)&v181;
          *(_OWORD *)(v9 - 32) = v181;
          if (v79)
          {
            v80 = (unint64_t *)&v79->__shared_owners_;
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
          }
          a4 = 0;
          *(_QWORD *)(v9 - 16) = v62;
          *(float *)(v9 - 8) = v23;
          *(_DWORD *)(v9 - 4) = v63;
          continue;
        }
        v23 = *(float *)(a1 + 24);
LABEL_21:
        v180 = *(_OWORD *)a1;
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        v24 = *(_QWORD *)(a1 + 16);
        v25 = a1;
        v26 = *(_DWORD *)(a1 + 28);
        do
        {
          v27 = v25;
          v25 += 32;
        }
        while (*(float *)(v27 + 56) < v23);
        v28 = (float *)a2;
        if (v27 == a1)
        {
          v31 = (float *)a2;
          while (v25 < (unint64_t)v31)
          {
            v29 = v31 - 8;
            v32 = *(v31 - 2);
            v31 -= 8;
            if (v32 < v23)
              goto LABEL_31;
          }
          v29 = v31;
        }
        else
        {
          do
          {
            v29 = v28 - 8;
            v30 = *(v28 - 2);
            v28 -= 8;
          }
          while (v30 >= v23);
        }
LABEL_31:
        v9 = v25;
        if (v25 < (unint64_t)v29)
        {
          v33 = (unint64_t)v29;
          do
          {
            v35 = *(_OWORD *)v9;
            v34 = *(_OWORD *)(v9 + 16);
            *(_QWORD *)v9 = 0;
            *(_QWORD *)(v9 + 8) = 0;
            v194 = v34;
            v36 = *(_OWORD *)v33;
            *(_QWORD *)v33 = 0;
            *(_QWORD *)(v33 + 8) = 0;
            v37 = *(std::__shared_weak_count **)(v9 + 8);
            *(_OWORD *)v9 = v36;
            if (v37)
            {
              v38 = (unint64_t *)&v37->__shared_owners_;
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                v187 = v35;
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
                v35 = v187;
              }
            }
            *(_OWORD *)(v9 + 16) = *(_OWORD *)(v33 + 16);
            v40 = *(std::__shared_weak_count **)(v33 + 8);
            *(_OWORD *)v33 = v35;
            if (v40)
            {
              v41 = (unint64_t *)&v40->__shared_owners_;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }
            *(_OWORD *)(v33 + 16) = v194;
            do
            {
              v43 = *(float *)(v9 + 56);
              v9 += 32;
            }
            while (v43 < v23);
            do
            {
              v44 = *(float *)(v33 - 8);
              v33 -= 32;
            }
            while (v44 >= v23);
          }
          while (v9 < v33);
        }
        v45 = (__int128 *)(v9 - 32);
        if (v9 - 32 != a1)
        {
          v46 = *v45;
          *(_QWORD *)v45 = 0;
          *(_QWORD *)(v9 - 24) = 0;
          v47 = *(std::__shared_weak_count **)(a1 + 8);
          *(_OWORD *)a1 = v46;
          if (v47)
          {
            v48 = (unint64_t *)&v47->__shared_owners_;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(v9 - 16);
        }
        v50 = *(std::__shared_weak_count **)(v9 - 24);
        *(_OWORD *)(v9 - 32) = v180;
        if (v50)
        {
          v51 = (unint64_t *)&v50->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        *(_QWORD *)(v9 - 16) = v24;
        *(float *)(v9 - 8) = v23;
        *(_DWORD *)(v9 - 4) = v26;
        if (v25 < (unint64_t)v29)
        {
LABEL_62:
          std::__introsort<std::_ClassicAlgPolicy,findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_0 &,md::RoadSearchResult *,false>(a1, v9 - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v53 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_0 &,md::RoadSearchResult *>(a1, v9 - 32);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,findClosestRoad(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&,md::MuninRoadGraphZData const*,geo::Mercator3<double> const&,double)::$_0 &,md::RoadSearchResult *>(v9, (uint64_t)a2))
        {
          if (v53)
            continue;
          goto LABEL_62;
        }
        a2 = (_QWORD *)(v9 - 32);
        if (!v53)
          goto LABEL_1;
        return result;
    }
  }
}

  v8 = (unint64_t *)(a2 - 16);
  v221 = a2 - 8;
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = a2 - (char *)v9;
    v11 = v10 >> 4;
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v116 = *a1;
        if (*v8 < *a1)
        {
          *a1 = *v8;
          *v8 = v116;
          v117 = a1[1];
          a1[1] = *(_QWORD *)v221;
          *(_QWORD *)v221 = v117;
        }
        return;
      case 3:
        v118 = a1[2];
        v119 = *a1;
        v120 = *v8;
        if (v118 >= *a1)
        {
          if (v120 >= v118)
            return;
          a1[2] = v120;
          *v8 = v118;
          v200 = a1[3];
          a1[3] = *(_QWORD *)v221;
          *(_QWORD *)v221 = v200;
          v201 = a1[2];
          v202 = *a1;
          if (v201 >= *a1)
            return;
          *a1 = v201;
          a1[2] = v202;
          v121 = (uint64_t *)(a1 + 1);
          v221 = (char *)(a1 + 3);
        }
        else
        {
          if (v120 >= v118)
          {
            v121 = (uint64_t *)(a1 + 3);
            v216 = a1[3];
            v217 = a1[1];
            *a1 = v118;
            a1[1] = v216;
            a1[2] = v119;
            a1[3] = v217;
            if (*v8 >= v119)
              return;
            a1[2] = *v8;
          }
          else
          {
            v121 = (uint64_t *)(a1 + 1);
            *a1 = v120;
          }
          *v8 = v119;
        }
        v218 = *v121;
        *v121 = *(_QWORD *)v221;
        *(_QWORD *)v221 = v218;
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::shared_ptr<md::MuninRoadNetworkData> *>((uint64_t *)a1, a1 + 2, a1 + 4, (unint64_t *)a2 - 2);
        return;
      case 5:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::shared_ptr<md::MuninRoadNetworkData> *>((uint64_t *)a1, a1 + 2, a1 + 4, a1 + 6);
        v122 = a1[6];
        if (*v8 < v122)
        {
          a1[6] = *v8;
          *v8 = v122;
          v123 = a1[7];
          a1[7] = *(_QWORD *)v221;
          *(_QWORD *)v221 = v123;
          v124 = a1[6];
          v125 = a1[4];
          if (v124 < v125)
          {
            v126 = a1[5];
            v127 = a1[7];
            a1[4] = v124;
            a1[5] = v127;
            a1[6] = v125;
            a1[7] = v126;
            v128 = a1[2];
            if (v124 < v128)
            {
              v129 = a1[3];
              a1[2] = v124;
              a1[3] = v127;
              a1[4] = v128;
              a1[5] = v129;
              v130 = *a1;
              if (v124 < *a1)
              {
                v131 = a1[1];
                *a1 = v124;
                a1[1] = v127;
                a1[2] = v130;
                a1[3] = v131;
              }
            }
          }
        }
        return;
      default:
        if (v10 <= 383)
        {
          v132 = (char *)(a1 + 2);
          v134 = a1 == (unint64_t *)a2 || v132 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v134)
            {
              v135 = a1;
              do
              {
                v136 = v135;
                v135 = v132;
                v137 = v136[2];
                v138 = *v136;
                if (v137 < *v136)
                {
                  v139 = v136[3];
                  v140 = v135;
                  *v135 = 0;
                  v135[1] = 0;
                  while (1)
                  {
                    v141 = v140;
                    v140 = v136;
                    v142 = v136[1];
                    *v140 = 0;
                    v140[1] = 0;
                    v143 = (std::__shared_weak_count *)v141[1];
                    *v141 = v138;
                    v141[1] = v142;
                    if (v143)
                    {
                      p_shared_owners = (unint64_t *)&v143->__shared_owners_;
                      do
                        v145 = __ldaxr(p_shared_owners);
                      while (__stlxr(v145 - 1, p_shared_owners));
                      if (!v145)
                      {
                        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                        std::__shared_weak_count::__release_weak(v143);
                      }
                    }
                    if (v140 == a1)
                      break;
                    v136 = v140 - 2;
                    v138 = *(v140 - 2);
                    if (v137 >= v138)
                      goto LABEL_154;
                  }
                  v140 = a1;
LABEL_154:
                  v146 = (std::__shared_weak_count *)v140[1];
                  *v140 = v137;
                  v140[1] = v139;
                  if (v146)
                  {
                    v147 = (unint64_t *)&v146->__shared_owners_;
                    do
                      v148 = __ldaxr(v147);
                    while (__stlxr(v148 - 1, v147));
                    if (!v148)
                    {
                      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                      std::__shared_weak_count::__release_weak(v146);
                    }
                  }
                }
                v132 = (char *)(v135 + 2);
              }
              while (v135 + 2 != (_QWORD *)a2);
            }
          }
          else if (!v134)
          {
            do
            {
              v203 = a1;
              a1 = (unint64_t *)v132;
              v204 = v203[2];
              v205 = *v203;
              if (v204 < *v203)
              {
                v206 = v203[3];
                v207 = a1;
                *a1 = 0;
                a1[1] = 0;
                do
                {
                  v208 = v207;
                  v207 = v203;
                  v209 = v203[1];
                  *v207 = 0;
                  v207[1] = 0;
                  v210 = (std::__shared_weak_count *)v208[1];
                  *v208 = v205;
                  v208[1] = v209;
                  if (v210)
                  {
                    v211 = (unint64_t *)&v210->__shared_owners_;
                    do
                      v212 = __ldaxr(v211);
                    while (__stlxr(v212 - 1, v211));
                    if (!v212)
                    {
                      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                      std::__shared_weak_count::__release_weak(v210);
                    }
                  }
                  v203 = v207 - 2;
                  v205 = *(v207 - 2);
                }
                while (v204 < v205);
                v213 = (std::__shared_weak_count *)v207[1];
                *v207 = v204;
                v207[1] = v206;
                if (v213)
                {
                  v214 = (unint64_t *)&v213->__shared_owners_;
                  do
                    v215 = __ldaxr(v214);
                  while (__stlxr(v215 - 1, v214));
                  if (!v215)
                  {
                    ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                    std::__shared_weak_count::__release_weak(v213);
                  }
                }
              }
              v132 = (char *)(a1 + 2);
            }
            while (a1 + 2 != (unint64_t *)a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 == (unint64_t *)a2)
            return;
          v149 = (unint64_t)(v11 - 2) >> 1;
          v150 = v149;
          do
          {
            v151 = v150;
            if (v149 >= v150)
            {
              v152 = (2 * v150) | 1;
              v153 = &a1[2 * v152];
              if (2 * v151 + 2 >= v11)
              {
                v154 = *v153;
              }
              else
              {
                v154 = *v153;
                if (*v153 < v153[2])
                {
                  v154 = v153[2];
                  v153 += 2;
                  v152 = 2 * v151 + 2;
                }
              }
              v155 = &a1[2 * v151];
              v156 = *v155;
              if (v154 >= *v155)
              {
                v222 = a1[2 * v151 + 1];
                *v155 = 0;
                v155[1] = 0;
                v157 = *v153;
                do
                {
                  v158 = v153;
                  v159 = v153[1];
                  *v158 = 0;
                  v158[1] = 0;
                  v160 = (std::__shared_weak_count *)v155[1];
                  *v155 = v157;
                  v155[1] = v159;
                  if (v160)
                  {
                    v161 = (unint64_t *)&v160->__shared_owners_;
                    do
                      v162 = __ldaxr(v161);
                    while (__stlxr(v162 - 1, v161));
                    if (!v162)
                    {
                      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                      std::__shared_weak_count::__release_weak(v160);
                    }
                  }
                  if (v149 < v152)
                    break;
                  v153 = &a1[2 * ((2 * v152) | 1)];
                  if (2 * v152 + 2 < v11)
                  {
                    v157 = *v153;
                    if (*v153 >= v153[2])
                    {
                      v152 = (2 * v152) | 1;
                    }
                    else
                    {
                      v157 = v153[2];
                      v153 += 2;
                      v152 = 2 * v152 + 2;
                    }
                  }
                  else
                  {
                    v157 = *v153;
                    v152 = (2 * v152) | 1;
                  }
                  v155 = v158;
                }
                while (v157 >= v156);
                v163 = (std::__shared_weak_count *)v158[1];
                *v158 = v156;
                v158[1] = v222;
                if (v163)
                {
                  v164 = (unint64_t *)&v163->__shared_owners_;
                  do
                    v165 = __ldaxr(v164);
                  while (__stlxr(v165 - 1, v164));
                  if (!v165)
                  {
                    ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                    std::__shared_weak_count::__release_weak(v163);
                  }
                }
              }
            }
            v150 = v151 - 1;
          }
          while (v151);
          v166 = (unint64_t)v10 >> 4;
          while (2)
          {
            if (v166 >= 2)
            {
              v168 = 0;
              v170 = *a1;
              v169 = a1[1];
              v171 = (uint64_t *)a1;
              *a1 = 0;
              a1[1] = 0;
              do
              {
                v172 = v171;
                v171 += 2 * v168 + 2;
                if (2 * v168 + 2 >= v166)
                {
                  v173 = *v171;
                  v168 = (2 * v168) | 1;
                }
                else
                {
                  v173 = *v171;
                  if (*v171 >= (unint64_t)v171[2])
                  {
                    v168 = (2 * v168) | 1;
                  }
                  else
                  {
                    v173 = v171[2];
                    v171 += 2;
                    v168 = 2 * v168 + 2;
                  }
                }
                v174 = v171[1];
                *v171 = 0;
                v171[1] = 0;
                v175 = (std::__shared_weak_count *)v172[1];
                *v172 = v173;
                v172[1] = v174;
                if (v175)
                {
                  v176 = (unint64_t *)&v175->__shared_owners_;
                  do
                    v177 = __ldaxr(v176);
                  while (__stlxr(v177 - 1, v176));
                  if (!v177)
                  {
                    ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                    std::__shared_weak_count::__release_weak(v175);
                  }
                }
              }
              while (v168 <= (uint64_t)((unint64_t)(v166 - 2) >> 1));
              if (v171 == (uint64_t *)(a2 - 16))
              {
                v196 = (std::__shared_weak_count *)v171[1];
                *v171 = v170;
                v171[1] = v169;
                if (v196)
                {
                  v199 = (unint64_t *)&v196->__shared_owners_;
                  do
                    v198 = __ldaxr(v199);
                  while (__stlxr(v198 - 1, v199));
                  goto LABEL_231;
                }
              }
              else
              {
                v178 = *((_OWORD *)a2 - 1);
                *((_QWORD *)a2 - 2) = 0;
                *((_QWORD *)a2 - 1) = 0;
                v179 = (std::__shared_weak_count *)v171[1];
                *(_OWORD *)v171 = v178;
                if (v179)
                {
                  v180 = (unint64_t *)&v179->__shared_owners_;
                  do
                    v181 = __ldaxr(v180);
                  while (__stlxr(v181 - 1, v180));
                  if (!v181)
                  {
                    ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                    std::__shared_weak_count::__release_weak(v179);
                  }
                }
                v182 = (std::__shared_weak_count *)*((_QWORD *)a2 - 1);
                *((_QWORD *)a2 - 2) = v170;
                *((_QWORD *)a2 - 1) = v169;
                if (v182)
                {
                  v183 = (unint64_t *)&v182->__shared_owners_;
                  do
                    v184 = __ldaxr(v183);
                  while (__stlxr(v184 - 1, v183));
                  if (!v184)
                  {
                    ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                    std::__shared_weak_count::__release_weak(v182);
                  }
                }
                v185 = (char *)(v171 + 2) - (char *)a1;
                if (v185 >= 17)
                {
                  v186 = (((unint64_t)v185 >> 4) - 2) >> 1;
                  v187 = &a1[2 * v186];
                  v188 = *v171;
                  if (*v187 < *v171)
                  {
                    v189 = v171[1];
                    *v171 = 0;
                    v171[1] = 0;
                    v190 = *v187;
                    do
                    {
                      v191 = (uint64_t *)v187;
                      v192 = v187[1];
                      *v191 = 0;
                      v191[1] = 0;
                      v193 = (std::__shared_weak_count *)v171[1];
                      *v171 = v190;
                      v171[1] = v192;
                      if (v193)
                      {
                        v194 = (unint64_t *)&v193->__shared_owners_;
                        do
                          v195 = __ldaxr(v194);
                        while (__stlxr(v195 - 1, v194));
                        if (!v195)
                        {
                          ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                          std::__shared_weak_count::__release_weak(v193);
                        }
                      }
                      if (!v186)
                        break;
                      v186 = (v186 - 1) >> 1;
                      v187 = &a1[2 * v186];
                      v190 = *v187;
                      v171 = v191;
                    }
                    while (*v187 < v188);
                    v196 = (std::__shared_weak_count *)v191[1];
                    *v191 = v188;
                    v191[1] = v189;
                    if (v196)
                    {
                      v197 = (unint64_t *)&v196->__shared_owners_;
                      do
                        v198 = __ldaxr(v197);
                      while (__stlxr(v198 - 1, v197));
LABEL_231:
                      if (!v198)
                      {
                        ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                        std::__shared_weak_count::__release_weak(v196);
                      }
                    }
                  }
                }
              }
            }
            a2 -= 16;
            if ((unint64_t)v166-- <= 2)
              return;
            continue;
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &a1[2 * ((unint64_t)v11 >> 1)];
        v14 = *v8;
        if ((unint64_t)v10 >= 0x801)
        {
          v15 = *v13;
          v16 = *a1;
          if (*v13 >= *a1)
          {
            if (v14 < v15)
            {
              *v13 = v14;
              *v8 = v15;
              v21 = &a1[2 * v12];
              v23 = v21[1];
              v22 = (char *)(v21 + 1);
              *(_QWORD *)v22 = *(_QWORD *)v221;
              *(_QWORD *)v221 = v23;
              v24 = *a1;
              if (*v13 < *a1)
              {
                *a1 = *v13;
                v17 = a1 + 1;
                *v13 = v24;
                goto LABEL_21;
              }
            }
          }
          else
          {
            if (v14 < v15)
            {
              v17 = a1 + 1;
              *a1 = v14;
              goto LABEL_20;
            }
            *a1 = v15;
            *v13 = v16;
            v28 = a1[1];
            v17 = &a1[2 * v12 + 1];
            a1[1] = *v17;
            *v17 = v28;
            if (*v8 < v16)
            {
              *v13 = *v8;
LABEL_20:
              *v8 = v16;
              v22 = a2 - 8;
LABEL_21:
              v29 = *v17;
              *v17 = *(_QWORD *)v22;
              *(_QWORD *)v22 = v29;
            }
          }
          v30 = v12 - 1;
          v31 = &a1[2 * v12 - 2];
          v32 = *v31;
          v33 = a1[2];
          v34 = *((_QWORD *)a2 - 4);
          if (*v31 >= v33)
          {
            if (v34 < v32)
            {
              *v31 = v34;
              *((_QWORD *)a2 - 4) = v32;
              v36 = &a1[2 * v30];
              v38 = v36[1];
              v37 = (char *)(v36 + 1);
              *(_QWORD *)v37 = *((_QWORD *)a2 - 3);
              *((_QWORD *)a2 - 3) = v38;
              v39 = a1[2];
              if (*v31 < v39)
              {
                a1[2] = *v31;
                *v31 = v39;
                v35 = a1 + 3;
                goto LABEL_34;
              }
            }
          }
          else
          {
            if (v34 < v32)
            {
              v35 = a1 + 3;
              a1[2] = v34;
              goto LABEL_33;
            }
            v42 = &a1[2 * v30];
            v43 = v42[1];
            v35 = v42 + 1;
            v44 = a1[3];
            a1[2] = v32;
            a1[3] = v43;
            *v31 = v33;
            *v35 = v44;
            v45 = *((_QWORD *)a2 - 4);
            if (v45 < v33)
            {
              *v31 = v45;
LABEL_33:
              *((_QWORD *)a2 - 4) = v33;
              v37 = a2 - 24;
LABEL_34:
              v46 = *v35;
              *v35 = *(_QWORD *)v37;
              *(_QWORD *)v37 = v46;
            }
          }
          v47 = v12 + 1;
          v48 = &a1[2 * v12 + 2];
          v49 = *v48;
          v50 = a1[4];
          v51 = *((_QWORD *)a2 - 6);
          if (*v48 >= v50)
          {
            if (v51 < v49)
            {
              *v48 = v51;
              *((_QWORD *)a2 - 6) = v49;
              v53 = &a1[2 * v47];
              v55 = v53[1];
              v54 = (char *)(v53 + 1);
              *(_QWORD *)v54 = *((_QWORD *)a2 - 5);
              *((_QWORD *)a2 - 5) = v55;
              v49 = *v48;
              v56 = a1[4];
              if (*v48 < v56)
              {
                a1[4] = v49;
                *v48 = v56;
                v52 = a1 + 5;
                goto LABEL_44;
              }
            }
          }
          else
          {
            if (v51 < v49)
            {
              v52 = a1 + 5;
              a1[4] = v51;
              goto LABEL_43;
            }
            v57 = &a1[2 * v47];
            v58 = v57[1];
            v52 = v57 + 1;
            v59 = a1[5];
            a1[4] = v49;
            a1[5] = v58;
            *v48 = v50;
            *v52 = v59;
            v60 = *((_QWORD *)a2 - 6);
            if (v60 >= v50)
            {
              v49 = v50;
            }
            else
            {
              *v48 = v60;
LABEL_43:
              *((_QWORD *)a2 - 6) = v50;
              v54 = a2 - 40;
LABEL_44:
              v61 = *v52;
              *v52 = *(_QWORD *)v54;
              *(_QWORD *)v54 = v61;
              v49 = *v48;
            }
          }
          v62 = *v13;
          v63 = *v31;
          if (*v13 >= *v31)
          {
            if (v49 < v62)
            {
              *v13 = v49;
              v66 = &a1[2 * v12];
              v67 = v66[1];
              v65 = v66 + 1;
              *v48 = v62;
              v68 = &a1[2 * v47];
              *v65 = v68[1];
              v68[1] = v67;
              if (v49 < v63)
              {
                *v31 = v49;
                *v13 = v63;
                v64 = &a1[2 * v30 + 1];
                goto LABEL_53;
              }
              v62 = v49;
            }
          }
          else
          {
            v64 = &a1[2 * v30 + 1];
            if (v49 < v62)
            {
              *v31 = v49;
              *v48 = v63;
              v65 = &a1[2 * v47 + 1];
              goto LABEL_53;
            }
            *v31 = v62;
            *v13 = v63;
            v69 = &a1[2 * v12];
            v71 = v69[1];
            v70 = v69 + 1;
            v72 = *v64;
            *v64 = v71;
            *v70 = v72;
            if (v49 >= v63)
            {
              v62 = v63;
            }
            else
            {
              *v13 = v49;
              *v48 = v63;
              v65 = &a1[2 * v47 + 1];
              v64 = v70;
LABEL_53:
              v73 = *v64;
              *v64 = *v65;
              *v65 = v73;
              v62 = *v13;
            }
          }
          v74 = *a1;
          *a1 = v62;
          v20 = a1 + 1;
          *v13 = v74;
          v25 = (char *)&a1[2 * v12 + 1];
LABEL_55:
          v75 = *v20;
          *v20 = *(_QWORD *)v25;
          *(_QWORD *)v25 = v75;
          goto LABEL_56;
        }
        v18 = *a1;
        v19 = *v13;
        if (*a1 < *v13)
        {
          v20 = &a1[2 * v12 + 1];
          if (v14 >= v18)
          {
            *v13 = v18;
            v40 = a1[1];
            *a1 = v19;
            v41 = *v20;
            *v20 = v40;
            a1[1] = v41;
            if (*v8 >= v19)
              goto LABEL_56;
            *a1 = *v8;
            *v8 = v19;
            v20 = a1 + 1;
          }
          else
          {
            *v13 = v14;
            *v8 = v19;
          }
          v25 = a2 - 8;
          goto LABEL_55;
        }
        if (v14 < v18)
        {
          *a1 = v14;
          *v8 = v18;
          v25 = (char *)(a1 + 1);
          v26 = a1[1];
          a1[1] = *(_QWORD *)v221;
          *(_QWORD *)v221 = v26;
          v27 = *v13;
          if (*a1 < *v13)
          {
            *v13 = *a1;
            *a1 = v27;
            v20 = &a1[2 * v12 + 1];
            goto LABEL_55;
          }
        }
LABEL_56:
        --a3;
        if ((a4 & 1) == 0 && *(a1 - 2) >= *a1)
        {
          v98 = *(_OWORD *)a1;
          *a1 = 0;
          a1[1] = 0;
          if ((unint64_t)v98 >= *v8)
          {
            v100 = a1 + 2;
            do
            {
              v9 = v100;
              if (v100 >= (unint64_t *)a2)
                break;
              v100 += 2;
            }
            while ((unint64_t)v98 >= *v9);
          }
          else
          {
            v9 = a1;
            do
            {
              v99 = v9[2];
              v9 += 2;
            }
            while ((unint64_t)v98 >= v99);
          }
          v101 = (unint64_t *)a2;
          if (v9 < (unint64_t *)a2)
          {
            v101 = (unint64_t *)a2;
            do
            {
              v102 = *(v101 - 2);
              v101 -= 2;
            }
            while ((unint64_t)v98 < v102);
          }
          if (v9 < v101)
          {
            v103 = *v9;
            v104 = *v101;
            do
            {
              *v9 = v104;
              *v101 = v103;
              v105 = v9[1];
              v9[1] = v101[1];
              v101[1] = v105;
              do
              {
                v106 = v9[2];
                v9 += 2;
                v103 = v106;
              }
              while ((unint64_t)v98 >= v106);
              do
              {
                v107 = *(v101 - 2);
                v101 -= 2;
                v104 = v107;
              }
              while ((unint64_t)v98 < v107);
            }
            while (v9 < v101);
          }
          v108 = v9 - 2;
          if (v9 - 2 != a1)
          {
            v109 = *(_OWORD *)v108;
            *v108 = 0;
            *(v9 - 1) = 0;
            v110 = (std::__shared_weak_count *)a1[1];
            *(_OWORD *)a1 = v109;
            if (v110)
            {
              v111 = (unint64_t *)&v110->__shared_owners_;
              do
                v112 = __ldaxr(v111);
              while (__stlxr(v112 - 1, v111));
              if (!v112)
              {
                v220 = v98;
                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                std::__shared_weak_count::__release_weak(v110);
                v98 = v220;
              }
            }
          }
          a4 = 0;
          v113 = (std::__shared_weak_count *)*(v9 - 1);
          *((_OWORD *)v9 - 1) = v98;
          if (v113)
          {
            v114 = (unint64_t *)&v113->__shared_owners_;
            do
              v115 = __ldaxr(v114);
            while (__stlxr(v115 - 1, v114));
            a4 = 0;
            if (!v115)
            {
              ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
              std::__shared_weak_count::__release_weak(v113);
              a4 = 0;
            }
          }
          continue;
        }
        v76 = *(_OWORD *)a1;
        *a1 = 0;
        a1[1] = 0;
        v77 = a1;
        do
        {
          v78 = v77;
          v80 = v77[2];
          v77 += 2;
          v79 = v80;
        }
        while (v80 < (unint64_t)v76);
        v81 = a2;
        if (v78 == a1)
        {
          v81 = a2;
          do
          {
            if (v77 >= (unint64_t *)v81)
              break;
            v83 = *((_QWORD *)v81 - 2);
            v81 -= 16;
          }
          while (v83 >= (unint64_t)v76);
        }
        else
        {
          do
          {
            v82 = *((_QWORD *)v81 - 2);
            v81 -= 16;
          }
          while (v82 >= (unint64_t)v76);
        }
        if (v77 >= (unint64_t *)v81)
        {
          v9 = v77;
        }
        else
        {
          v84 = *(_QWORD *)v81;
          v9 = v77;
          v85 = (unint64_t *)v81;
          do
          {
            *v9 = v84;
            *v85 = v79;
            v86 = v9[1];
            v9[1] = v85[1];
            v85[1] = v86;
            do
            {
              v87 = v9[2];
              v9 += 2;
              v79 = v87;
            }
            while (v87 < (unint64_t)v76);
            do
            {
              v88 = *(v85 - 2);
              v85 -= 2;
              v84 = v88;
            }
            while (v88 >= (unint64_t)v76);
          }
          while (v9 < v85);
        }
        v89 = v9 - 2;
        if (v9 - 2 != a1)
        {
          v90 = *(_OWORD *)v89;
          *v89 = 0;
          *(v9 - 1) = 0;
          v91 = (std::__shared_weak_count *)a1[1];
          *(_OWORD *)a1 = v90;
          if (v91)
          {
            v92 = (unint64_t *)&v91->__shared_owners_;
            do
              v93 = __ldaxr(v92);
            while (__stlxr(v93 - 1, v92));
            if (!v93)
            {
              v219 = v76;
              ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
              std::__shared_weak_count::__release_weak(v91);
              v76 = v219;
            }
          }
        }
        v94 = (std::__shared_weak_count *)*(v9 - 1);
        *((_OWORD *)v9 - 1) = v76;
        if (v94)
        {
          v95 = (unint64_t *)&v94->__shared_owners_;
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }
        if (v77 < (unint64_t *)v81)
        {
LABEL_88:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::shared_ptr<md::mun::MuninMetadata> *,false>(a1, v9 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v97 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::shared_ptr<md::mun::MuninMetadata> *>(a1, (char *)v9 - 16);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::shared_ptr<md::mun::MuninMetadata> *>(v9, a2))
        {
          if (v97)
            continue;
          goto LABEL_88;
        }
        a2 = (char *)(v9 - 2);
        if (!v97)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (unint64_t *)(a2 - 16);
  v221 = a2 - 8;
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = a2 - (char *)v9;
    v11 = v10 >> 4;
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v116 = *a1;
        if (*v8 < *a1)
        {
          *a1 = *v8;
          *v8 = v116;
          v117 = a1[1];
          a1[1] = *(_QWORD *)v221;
          *(_QWORD *)v221 = v117;
        }
        return;
      case 3:
        v118 = a1[2];
        v119 = *a1;
        v120 = *v8;
        if (v118 >= *a1)
        {
          if (v120 >= v118)
            return;
          a1[2] = v120;
          *v8 = v118;
          v200 = a1[3];
          a1[3] = *(_QWORD *)v221;
          *(_QWORD *)v221 = v200;
          v201 = a1[2];
          v202 = *a1;
          if (v201 >= *a1)
            return;
          *a1 = v201;
          a1[2] = v202;
          v121 = (uint64_t *)(a1 + 1);
          v221 = (char *)(a1 + 3);
        }
        else
        {
          if (v120 >= v118)
          {
            v121 = (uint64_t *)(a1 + 3);
            v216 = a1[3];
            v217 = a1[1];
            *a1 = v118;
            a1[1] = v216;
            a1[2] = v119;
            a1[3] = v217;
            if (*v8 >= v119)
              return;
            a1[2] = *v8;
          }
          else
          {
            v121 = (uint64_t *)(a1 + 1);
            *a1 = v120;
          }
          *v8 = v119;
        }
        v218 = *v121;
        *v121 = *(_QWORD *)v221;
        *(_QWORD *)v221 = v218;
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::shared_ptr<md::MuninRoadNetworkData> *>((uint64_t *)a1, a1 + 2, a1 + 4, (unint64_t *)a2 - 2);
        return;
      case 5:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::shared_ptr<md::MuninRoadNetworkData> *>((uint64_t *)a1, a1 + 2, a1 + 4, a1 + 6);
        v122 = a1[6];
        if (*v8 < v122)
        {
          a1[6] = *v8;
          *v8 = v122;
          v123 = a1[7];
          a1[7] = *(_QWORD *)v221;
          *(_QWORD *)v221 = v123;
          v124 = a1[6];
          v125 = a1[4];
          if (v124 < v125)
          {
            v126 = a1[5];
            v127 = a1[7];
            a1[4] = v124;
            a1[5] = v127;
            a1[6] = v125;
            a1[7] = v126;
            v128 = a1[2];
            if (v124 < v128)
            {
              v129 = a1[3];
              a1[2] = v124;
              a1[3] = v127;
              a1[4] = v128;
              a1[5] = v129;
              v130 = *a1;
              if (v124 < *a1)
              {
                v131 = a1[1];
                *a1 = v124;
                a1[1] = v127;
                a1[2] = v130;
                a1[3] = v131;
              }
            }
          }
        }
        return;
      default:
        if (v10 <= 383)
        {
          v132 = (char *)(a1 + 2);
          v134 = a1 == (unint64_t *)a2 || v132 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v134)
            {
              v135 = a1;
              do
              {
                v136 = v135;
                v135 = v132;
                v137 = v136[2];
                v138 = *v136;
                if (v137 < *v136)
                {
                  v139 = v136[3];
                  v140 = v135;
                  *v135 = 0;
                  v135[1] = 0;
                  while (1)
                  {
                    v141 = v140;
                    v140 = v136;
                    v142 = v136[1];
                    *v140 = 0;
                    v140[1] = 0;
                    v143 = (std::__shared_weak_count *)v141[1];
                    *v141 = v138;
                    v141[1] = v142;
                    if (v143)
                    {
                      p_shared_owners = (unint64_t *)&v143->__shared_owners_;
                      do
                        v145 = __ldaxr(p_shared_owners);
                      while (__stlxr(v145 - 1, p_shared_owners));
                      if (!v145)
                      {
                        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                        std::__shared_weak_count::__release_weak(v143);
                      }
                    }
                    if (v140 == a1)
                      break;
                    v136 = v140 - 2;
                    v138 = *(v140 - 2);
                    if (v137 >= v138)
                      goto LABEL_154;
                  }
                  v140 = a1;
LABEL_154:
                  v146 = (std::__shared_weak_count *)v140[1];
                  *v140 = v137;
                  v140[1] = v139;
                  if (v146)
                  {
                    v147 = (unint64_t *)&v146->__shared_owners_;
                    do
                      v148 = __ldaxr(v147);
                    while (__stlxr(v148 - 1, v147));
                    if (!v148)
                    {
                      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                      std::__shared_weak_count::__release_weak(v146);
                    }
                  }
                }
                v132 = (char *)(v135 + 2);
              }
              while (v135 + 2 != (_QWORD *)a2);
            }
          }
          else if (!v134)
          {
            do
            {
              v203 = a1;
              a1 = (unint64_t *)v132;
              v204 = v203[2];
              v205 = *v203;
              if (v204 < *v203)
              {
                v206 = v203[3];
                v207 = a1;
                *a1 = 0;
                a1[1] = 0;
                do
                {
                  v208 = v207;
                  v207 = v203;
                  v209 = v203[1];
                  *v207 = 0;
                  v207[1] = 0;
                  v210 = (std::__shared_weak_count *)v208[1];
                  *v208 = v205;
                  v208[1] = v209;
                  if (v210)
                  {
                    v211 = (unint64_t *)&v210->__shared_owners_;
                    do
                      v212 = __ldaxr(v211);
                    while (__stlxr(v212 - 1, v211));
                    if (!v212)
                    {
                      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                      std::__shared_weak_count::__release_weak(v210);
                    }
                  }
                  v203 = v207 - 2;
                  v205 = *(v207 - 2);
                }
                while (v204 < v205);
                v213 = (std::__shared_weak_count *)v207[1];
                *v207 = v204;
                v207[1] = v206;
                if (v213)
                {
                  v214 = (unint64_t *)&v213->__shared_owners_;
                  do
                    v215 = __ldaxr(v214);
                  while (__stlxr(v215 - 1, v214));
                  if (!v215)
                  {
                    ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                    std::__shared_weak_count::__release_weak(v213);
                  }
                }
              }
              v132 = (char *)(a1 + 2);
            }
            while (a1 + 2 != (unint64_t *)a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 == (unint64_t *)a2)
            return;
          v149 = (unint64_t)(v11 - 2) >> 1;
          v150 = v149;
          do
          {
            v151 = v150;
            if (v149 >= v150)
            {
              v152 = (2 * v150) | 1;
              v153 = &a1[2 * v152];
              if (2 * v151 + 2 >= v11)
              {
                v154 = *v153;
              }
              else
              {
                v154 = *v153;
                if (*v153 < v153[2])
                {
                  v154 = v153[2];
                  v153 += 2;
                  v152 = 2 * v151 + 2;
                }
              }
              v155 = &a1[2 * v151];
              v156 = *v155;
              if (v154 >= *v155)
              {
                v222 = a1[2 * v151 + 1];
                *v155 = 0;
                v155[1] = 0;
                v157 = *v153;
                do
                {
                  v158 = v153;
                  v159 = v153[1];
                  *v158 = 0;
                  v158[1] = 0;
                  v160 = (std::__shared_weak_count *)v155[1];
                  *v155 = v157;
                  v155[1] = v159;
                  if (v160)
                  {
                    v161 = (unint64_t *)&v160->__shared_owners_;
                    do
                      v162 = __ldaxr(v161);
                    while (__stlxr(v162 - 1, v161));
                    if (!v162)
                    {
                      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                      std::__shared_weak_count::__release_weak(v160);
                    }
                  }
                  if (v149 < v152)
                    break;
                  v153 = &a1[2 * ((2 * v152) | 1)];
                  if (2 * v152 + 2 < v11)
                  {
                    v157 = *v153;
                    if (*v153 >= v153[2])
                    {
                      v152 = (2 * v152) | 1;
                    }
                    else
                    {
                      v157 = v153[2];
                      v153 += 2;
                      v152 = 2 * v152 + 2;
                    }
                  }
                  else
                  {
                    v157 = *v153;
                    v152 = (2 * v152) | 1;
                  }
                  v155 = v158;
                }
                while (v157 >= v156);
                v163 = (std::__shared_weak_count *)v158[1];
                *v158 = v156;
                v158[1] = v222;
                if (v163)
                {
                  v164 = (unint64_t *)&v163->__shared_owners_;
                  do
                    v165 = __ldaxr(v164);
                  while (__stlxr(v165 - 1, v164));
                  if (!v165)
                  {
                    ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                    std::__shared_weak_count::__release_weak(v163);
                  }
                }
              }
            }
            v150 = v151 - 1;
          }
          while (v151);
          v166 = (unint64_t)v10 >> 4;
          while (2)
          {
            if (v166 >= 2)
            {
              v168 = 0;
              v170 = *a1;
              v169 = a1[1];
              v171 = (uint64_t *)a1;
              *a1 = 0;
              a1[1] = 0;
              do
              {
                v172 = v171;
                v171 += 2 * v168 + 2;
                if (2 * v168 + 2 >= v166)
                {
                  v173 = *v171;
                  v168 = (2 * v168) | 1;
                }
                else
                {
                  v173 = *v171;
                  if (*v171 >= (unint64_t)v171[2])
                  {
                    v168 = (2 * v168) | 1;
                  }
                  else
                  {
                    v173 = v171[2];
                    v171 += 2;
                    v168 = 2 * v168 + 2;
                  }
                }
                v174 = v171[1];
                *v171 = 0;
                v171[1] = 0;
                v175 = (std::__shared_weak_count *)v172[1];
                *v172 = v173;
                v172[1] = v174;
                if (v175)
                {
                  v176 = (unint64_t *)&v175->__shared_owners_;
                  do
                    v177 = __ldaxr(v176);
                  while (__stlxr(v177 - 1, v176));
                  if (!v177)
                  {
                    ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                    std::__shared_weak_count::__release_weak(v175);
                  }
                }
              }
              while (v168 <= (uint64_t)((unint64_t)(v166 - 2) >> 1));
              if (v171 == (uint64_t *)(a2 - 16))
              {
                v196 = (std::__shared_weak_count *)v171[1];
                *v171 = v170;
                v171[1] = v169;
                if (v196)
                {
                  v199 = (unint64_t *)&v196->__shared_owners_;
                  do
                    v198 = __ldaxr(v199);
                  while (__stlxr(v198 - 1, v199));
                  goto LABEL_231;
                }
              }
              else
              {
                v178 = *((_OWORD *)a2 - 1);
                *((_QWORD *)a2 - 2) = 0;
                *((_QWORD *)a2 - 1) = 0;
                v179 = (std::__shared_weak_count *)v171[1];
                *(_OWORD *)v171 = v178;
                if (v179)
                {
                  v180 = (unint64_t *)&v179->__shared_owners_;
                  do
                    v181 = __ldaxr(v180);
                  while (__stlxr(v181 - 1, v180));
                  if (!v181)
                  {
                    ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                    std::__shared_weak_count::__release_weak(v179);
                  }
                }
                v182 = (std::__shared_weak_count *)*((_QWORD *)a2 - 1);
                *((_QWORD *)a2 - 2) = v170;
                *((_QWORD *)a2 - 1) = v169;
                if (v182)
                {
                  v183 = (unint64_t *)&v182->__shared_owners_;
                  do
                    v184 = __ldaxr(v183);
                  while (__stlxr(v184 - 1, v183));
                  if (!v184)
                  {
                    ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                    std::__shared_weak_count::__release_weak(v182);
                  }
                }
                v185 = (char *)(v171 + 2) - (char *)a1;
                if (v185 >= 17)
                {
                  v186 = (((unint64_t)v185 >> 4) - 2) >> 1;
                  v187 = &a1[2 * v186];
                  v188 = *v171;
                  if (*v187 < *v171)
                  {
                    v189 = v171[1];
                    *v171 = 0;
                    v171[1] = 0;
                    v190 = *v187;
                    do
                    {
                      v191 = (uint64_t *)v187;
                      v192 = v187[1];
                      *v191 = 0;
                      v191[1] = 0;
                      v193 = (std::__shared_weak_count *)v171[1];
                      *v171 = v190;
                      v171[1] = v192;
                      if (v193)
                      {
                        v194 = (unint64_t *)&v193->__shared_owners_;
                        do
                          v195 = __ldaxr(v194);
                        while (__stlxr(v195 - 1, v194));
                        if (!v195)
                        {
                          ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                          std::__shared_weak_count::__release_weak(v193);
                        }
                      }
                      if (!v186)
                        break;
                      v186 = (v186 - 1) >> 1;
                      v187 = &a1[2 * v186];
                      v190 = *v187;
                      v171 = v191;
                    }
                    while (*v187 < v188);
                    v196 = (std::__shared_weak_count *)v191[1];
                    *v191 = v188;
                    v191[1] = v189;
                    if (v196)
                    {
                      v197 = (unint64_t *)&v196->__shared_owners_;
                      do
                        v198 = __ldaxr(v197);
                      while (__stlxr(v198 - 1, v197));
LABEL_231:
                      if (!v198)
                      {
                        ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                        std::__shared_weak_count::__release_weak(v196);
                      }
                    }
                  }
                }
              }
            }
            a2 -= 16;
            if ((unint64_t)v166-- <= 2)
              return;
            continue;
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &a1[2 * ((unint64_t)v11 >> 1)];
        v14 = *v8;
        if ((unint64_t)v10 >= 0x801)
        {
          v15 = *v13;
          v16 = *a1;
          if (*v13 >= *a1)
          {
            if (v14 < v15)
            {
              *v13 = v14;
              *v8 = v15;
              v21 = &a1[2 * v12];
              v23 = v21[1];
              v22 = (char *)(v21 + 1);
              *(_QWORD *)v22 = *(_QWORD *)v221;
              *(_QWORD *)v221 = v23;
              v24 = *a1;
              if (*v13 < *a1)
              {
                *a1 = *v13;
                v17 = a1 + 1;
                *v13 = v24;
                goto LABEL_21;
              }
            }
          }
          else
          {
            if (v14 < v15)
            {
              v17 = a1 + 1;
              *a1 = v14;
              goto LABEL_20;
            }
            *a1 = v15;
            *v13 = v16;
            v28 = a1[1];
            v17 = &a1[2 * v12 + 1];
            a1[1] = *v17;
            *v17 = v28;
            if (*v8 < v16)
            {
              *v13 = *v8;
LABEL_20:
              *v8 = v16;
              v22 = a2 - 8;
LABEL_21:
              v29 = *v17;
              *v17 = *(_QWORD *)v22;
              *(_QWORD *)v22 = v29;
            }
          }
          v30 = v12 - 1;
          v31 = &a1[2 * v12 - 2];
          v32 = *v31;
          v33 = a1[2];
          v34 = *((_QWORD *)a2 - 4);
          if (*v31 >= v33)
          {
            if (v34 < v32)
            {
              *v31 = v34;
              *((_QWORD *)a2 - 4) = v32;
              v36 = &a1[2 * v30];
              v38 = v36[1];
              v37 = (char *)(v36 + 1);
              *(_QWORD *)v37 = *((_QWORD *)a2 - 3);
              *((_QWORD *)a2 - 3) = v38;
              v39 = a1[2];
              if (*v31 < v39)
              {
                a1[2] = *v31;
                *v31 = v39;
                v35 = a1 + 3;
                goto LABEL_34;
              }
            }
          }
          else
          {
            if (v34 < v32)
            {
              v35 = a1 + 3;
              a1[2] = v34;
              goto LABEL_33;
            }
            v42 = &a1[2 * v30];
            v43 = v42[1];
            v35 = v42 + 1;
            v44 = a1[3];
            a1[2] = v32;
            a1[3] = v43;
            *v31 = v33;
            *v35 = v44;
            v45 = *((_QWORD *)a2 - 4);
            if (v45 < v33)
            {
              *v31 = v45;
LABEL_33:
              *((_QWORD *)a2 - 4) = v33;
              v37 = a2 - 24;
LABEL_34:
              v46 = *v35;
              *v35 = *(_QWORD *)v37;
              *(_QWORD *)v37 = v46;
            }
          }
          v47 = v12 + 1;
          v48 = &a1[2 * v12 + 2];
          v49 = *v48;
          v50 = a1[4];
          v51 = *((_QWORD *)a2 - 6);
          if (*v48 >= v50)
          {
            if (v51 < v49)
            {
              *v48 = v51;
              *((_QWORD *)a2 - 6) = v49;
              v53 = &a1[2 * v47];
              v55 = v53[1];
              v54 = (char *)(v53 + 1);
              *(_QWORD *)v54 = *((_QWORD *)a2 - 5);
              *((_QWORD *)a2 - 5) = v55;
              v49 = *v48;
              v56 = a1[4];
              if (*v48 < v56)
              {
                a1[4] = v49;
                *v48 = v56;
                v52 = a1 + 5;
                goto LABEL_44;
              }
            }
          }
          else
          {
            if (v51 < v49)
            {
              v52 = a1 + 5;
              a1[4] = v51;
              goto LABEL_43;
            }
            v57 = &a1[2 * v47];
            v58 = v57[1];
            v52 = v57 + 1;
            v59 = a1[5];
            a1[4] = v49;
            a1[5] = v58;
            *v48 = v50;
            *v52 = v59;
            v60 = *((_QWORD *)a2 - 6);
            if (v60 >= v50)
            {
              v49 = v50;
            }
            else
            {
              *v48 = v60;
LABEL_43:
              *((_QWORD *)a2 - 6) = v50;
              v54 = a2 - 40;
LABEL_44:
              v61 = *v52;
              *v52 = *(_QWORD *)v54;
              *(_QWORD *)v54 = v61;
              v49 = *v48;
            }
          }
          v62 = *v13;
          v63 = *v31;
          if (*v13 >= *v31)
          {
            if (v49 < v62)
            {
              *v13 = v49;
              v66 = &a1[2 * v12];
              v67 = v66[1];
              v65 = v66 + 1;
              *v48 = v62;
              v68 = &a1[2 * v47];
              *v65 = v68[1];
              v68[1] = v67;
              if (v49 < v63)
              {
                *v31 = v49;
                *v13 = v63;
                v64 = &a1[2 * v30 + 1];
                goto LABEL_53;
              }
              v62 = v49;
            }
          }
          else
          {
            v64 = &a1[2 * v30 + 1];
            if (v49 < v62)
            {
              *v31 = v49;
              *v48 = v63;
              v65 = &a1[2 * v47 + 1];
              goto LABEL_53;
            }
            *v31 = v62;
            *v13 = v63;
            v69 = &a1[2 * v12];
            v71 = v69[1];
            v70 = v69 + 1;
            v72 = *v64;
            *v64 = v71;
            *v70 = v72;
            if (v49 >= v63)
            {
              v62 = v63;
            }
            else
            {
              *v13 = v49;
              *v48 = v63;
              v65 = &a1[2 * v47 + 1];
              v64 = v70;
LABEL_53:
              v73 = *v64;
              *v64 = *v65;
              *v65 = v73;
              v62 = *v13;
            }
          }
          v74 = *a1;
          *a1 = v62;
          v20 = a1 + 1;
          *v13 = v74;
          v25 = (char *)&a1[2 * v12 + 1];
LABEL_55:
          v75 = *v20;
          *v20 = *(_QWORD *)v25;
          *(_QWORD *)v25 = v75;
          goto LABEL_56;
        }
        v18 = *a1;
        v19 = *v13;
        if (*a1 < *v13)
        {
          v20 = &a1[2 * v12 + 1];
          if (v14 >= v18)
          {
            *v13 = v18;
            v40 = a1[1];
            *a1 = v19;
            v41 = *v20;
            *v20 = v40;
            a1[1] = v41;
            if (*v8 >= v19)
              goto LABEL_56;
            *a1 = *v8;
            *v8 = v19;
            v20 = a1 + 1;
          }
          else
          {
            *v13 = v14;
            *v8 = v19;
          }
          v25 = a2 - 8;
          goto LABEL_55;
        }
        if (v14 < v18)
        {
          *a1 = v14;
          *v8 = v18;
          v25 = (char *)(a1 + 1);
          v26 = a1[1];
          a1[1] = *(_QWORD *)v221;
          *(_QWORD *)v221 = v26;
          v27 = *v13;
          if (*a1 < *v13)
          {
            *v13 = *a1;
            *a1 = v27;
            v20 = &a1[2 * v12 + 1];
            goto LABEL_55;
          }
        }
LABEL_56:
        --a3;
        if ((a4 & 1) == 0 && *(a1 - 2) >= *a1)
        {
          v98 = *(_OWORD *)a1;
          *a1 = 0;
          a1[1] = 0;
          if ((unint64_t)v98 >= *v8)
          {
            v100 = a1 + 2;
            do
            {
              v9 = v100;
              if (v100 >= (unint64_t *)a2)
                break;
              v100 += 2;
            }
            while ((unint64_t)v98 >= *v9);
          }
          else
          {
            v9 = a1;
            do
            {
              v99 = v9[2];
              v9 += 2;
            }
            while ((unint64_t)v98 >= v99);
          }
          v101 = (unint64_t *)a2;
          if (v9 < (unint64_t *)a2)
          {
            v101 = (unint64_t *)a2;
            do
            {
              v102 = *(v101 - 2);
              v101 -= 2;
            }
            while ((unint64_t)v98 < v102);
          }
          if (v9 < v101)
          {
            v103 = *v9;
            v104 = *v101;
            do
            {
              *v9 = v104;
              *v101 = v103;
              v105 = v9[1];
              v9[1] = v101[1];
              v101[1] = v105;
              do
              {
                v106 = v9[2];
                v9 += 2;
                v103 = v106;
              }
              while ((unint64_t)v98 >= v106);
              do
              {
                v107 = *(v101 - 2);
                v101 -= 2;
                v104 = v107;
              }
              while ((unint64_t)v98 < v107);
            }
            while (v9 < v101);
          }
          v108 = v9 - 2;
          if (v9 - 2 != a1)
          {
            v109 = *(_OWORD *)v108;
            *v108 = 0;
            *(v9 - 1) = 0;
            v110 = (std::__shared_weak_count *)a1[1];
            *(_OWORD *)a1 = v109;
            if (v110)
            {
              v111 = (unint64_t *)&v110->__shared_owners_;
              do
                v112 = __ldaxr(v111);
              while (__stlxr(v112 - 1, v111));
              if (!v112)
              {
                v220 = v98;
                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                std::__shared_weak_count::__release_weak(v110);
                v98 = v220;
              }
            }
          }
          a4 = 0;
          v113 = (std::__shared_weak_count *)*(v9 - 1);
          *((_OWORD *)v9 - 1) = v98;
          if (v113)
          {
            v114 = (unint64_t *)&v113->__shared_owners_;
            do
              v115 = __ldaxr(v114);
            while (__stlxr(v115 - 1, v114));
            a4 = 0;
            if (!v115)
            {
              ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
              std::__shared_weak_count::__release_weak(v113);
              a4 = 0;
            }
          }
          continue;
        }
        v76 = *(_OWORD *)a1;
        *a1 = 0;
        a1[1] = 0;
        v77 = a1;
        do
        {
          v78 = v77;
          v80 = v77[2];
          v77 += 2;
          v79 = v80;
        }
        while (v80 < (unint64_t)v76);
        v81 = a2;
        if (v78 == a1)
        {
          v81 = a2;
          do
          {
            if (v77 >= (unint64_t *)v81)
              break;
            v83 = *((_QWORD *)v81 - 2);
            v81 -= 16;
          }
          while (v83 >= (unint64_t)v76);
        }
        else
        {
          do
          {
            v82 = *((_QWORD *)v81 - 2);
            v81 -= 16;
          }
          while (v82 >= (unint64_t)v76);
        }
        if (v77 >= (unint64_t *)v81)
        {
          v9 = v77;
        }
        else
        {
          v84 = *(_QWORD *)v81;
          v9 = v77;
          v85 = (unint64_t *)v81;
          do
          {
            *v9 = v84;
            *v85 = v79;
            v86 = v9[1];
            v9[1] = v85[1];
            v85[1] = v86;
            do
            {
              v87 = v9[2];
              v9 += 2;
              v79 = v87;
            }
            while (v87 < (unint64_t)v76);
            do
            {
              v88 = *(v85 - 2);
              v85 -= 2;
              v84 = v88;
            }
            while (v88 >= (unint64_t)v76);
          }
          while (v9 < v85);
        }
        v89 = v9 - 2;
        if (v9 - 2 != a1)
        {
          v90 = *(_OWORD *)v89;
          *v89 = 0;
          *(v9 - 1) = 0;
          v91 = (std::__shared_weak_count *)a1[1];
          *(_OWORD *)a1 = v90;
          if (v91)
          {
            v92 = (unint64_t *)&v91->__shared_owners_;
            do
              v93 = __ldaxr(v92);
            while (__stlxr(v93 - 1, v92));
            if (!v93)
            {
              v219 = v76;
              ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
              std::__shared_weak_count::__release_weak(v91);
              v76 = v219;
            }
          }
        }
        v94 = (std::__shared_weak_count *)*(v9 - 1);
        *((_OWORD *)v9 - 1) = v76;
        if (v94)
        {
          v95 = (unint64_t *)&v94->__shared_owners_;
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }
        if (v77 < (unint64_t *)v81)
        {
LABEL_88:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::shared_ptr<md::MuninRoadNetworkData> *,false>(a1, v9 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v97 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::shared_ptr<md::MuninRoadNetworkData> *>(a1, (char *)v9 - 16);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::shared_ptr<md::MuninRoadNetworkData> *>(v9, a2))
        {
          if (v97)
            continue;
          goto LABEL_88;
        }
        a2 = (char *)(v9 - 2);
        if (!v97)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = (__int128 *)(a2 - 56);
  v10 = (__int128 *)(a2 - 112);
  v11 = (__int128 *)(a2 - 168);
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = a2 - v12;
    v14 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2 - v12) >> 3);
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*(__int16 *)(a2 - 24) > *(__int16 *)(v12 + 32))
          goto LABEL_103;
        return result;
      case 3:
        v159 = (__n128 *)(v12 + 56);
        v160 = *(__int16 *)(v12 + 88);
        v161 = *(__int16 *)(a2 - 24);
        if (v160 <= *(__int16 *)(v12 + 32))
        {
          if (v161 > v160)
          {
            result = *v159;
            v314 = *(_OWORD *)(v12 + 72);
            v231 = *(_OWORD *)(v12 + 88);
            v232 = *(_QWORD *)(v12 + 104);
            v233 = *(_QWORD *)(a2 - 8);
            v235 = *(_OWORD *)(a2 - 40);
            v234 = *(_OWORD *)(a2 - 24);
            *v159 = (__n128)*v9;
            *(_OWORD *)(v12 + 72) = v235;
            *(_OWORD *)(v12 + 88) = v234;
            *(_QWORD *)(v12 + 104) = v233;
            *(_OWORD *)(a2 - 40) = v314;
            *(_OWORD *)(a2 - 24) = v231;
            *(_QWORD *)(a2 - 8) = v232;
            *v9 = (__int128)result;
            if (*(__int16 *)(v12 + 88) > *(__int16 *)(v12 + 32))
            {
              v362 = *(_QWORD *)(v12 + 48);
              v315 = *(_OWORD *)(v12 + 16);
              v339 = *(_OWORD *)(v12 + 32);
              v282 = *(__n128 *)v12;
              v236 = *(_OWORD *)(v12 + 72);
              *(__n128 *)v12 = *v159;
              *(_OWORD *)(v12 + 16) = v236;
              *(_OWORD *)(v12 + 32) = *(_OWORD *)(v12 + 88);
              *(_QWORD *)(v12 + 48) = *(_QWORD *)(v12 + 104);
              result = v282;
              *(_QWORD *)(v12 + 104) = v362;
              *(_OWORD *)(v12 + 72) = v315;
              *(_OWORD *)(v12 + 88) = v339;
              *v159 = v282;
            }
          }
        }
        else
        {
          if (v161 > v160)
          {
LABEL_103:
            v359 = *(_QWORD *)(v12 + 48);
            v308 = *(_OWORD *)(v12 + 16);
            v336 = *(_OWORD *)(v12 + 32);
            v277 = *(__n128 *)v12;
            v162 = (__n128)*v9;
            v163 = *(_OWORD *)(a2 - 40);
            v164 = *(_OWORD *)(a2 - 24);
            *(_QWORD *)(v12 + 48) = *(_QWORD *)(a2 - 8);
            *(_OWORD *)(v12 + 16) = v163;
            *(_OWORD *)(v12 + 32) = v164;
            *(__n128 *)v12 = v162;
            result = v277;
            v165 = v308;
            *(_QWORD *)(a2 - 8) = v359;
            *(_OWORD *)(a2 - 24) = v336;
LABEL_104:
            *v9 = (__int128)result;
            *(_OWORD *)(a2 - 40) = v165;
            return result;
          }
          v363 = *(_QWORD *)(v12 + 48);
          v317 = *(_OWORD *)(v12 + 16);
          v340 = *(_OWORD *)(v12 + 32);
          v284 = *(__n128 *)v12;
          v241 = *(_OWORD *)(v12 + 72);
          *(__n128 *)v12 = *v159;
          *(_OWORD *)(v12 + 16) = v241;
          *(_OWORD *)(v12 + 32) = *(_OWORD *)(v12 + 88);
          *(_QWORD *)(v12 + 48) = *(_QWORD *)(v12 + 104);
          result = v284;
          *(_QWORD *)(v12 + 104) = v363;
          *(_OWORD *)(v12 + 72) = v317;
          *(_OWORD *)(v12 + 88) = v340;
          *v159 = v284;
          if (*(__int16 *)(a2 - 24) > *(__int16 *)(v12 + 88))
          {
            result = *v159;
            v165 = *(_OWORD *)(v12 + 72);
            v242 = *(_OWORD *)(v12 + 88);
            v243 = *(_QWORD *)(v12 + 104);
            v244 = *(_QWORD *)(a2 - 8);
            v246 = *(_OWORD *)(a2 - 40);
            v245 = *(_OWORD *)(a2 - 24);
            *v159 = (__n128)*v9;
            *(_OWORD *)(v12 + 72) = v246;
            *(_OWORD *)(v12 + 88) = v245;
            *(_QWORD *)(v12 + 104) = v244;
            *(_OWORD *)(a2 - 24) = v242;
            *(_QWORD *)(a2 - 8) = v243;
            goto LABEL_104;
          }
        }
        return result;
      case 4:
        result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogic::updateVenueLevelScales(void)::$_0 &,md::VenueLevelScale *>((__int128 *)v12, (__int128 *)(v12 + 56), (__int128 *)(v12 + 112), (__int128 *)(a2 - 56), result).n128_u64[0];
        return result;
      case 5:
        v166 = (__n128 *)(v12 + 56);
        v167 = (__n128 *)(v12 + 112);
        v168 = (__n128 *)(v12 + 168);
        result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogic::updateVenueLevelScales(void)::$_0 &,md::VenueLevelScale *>((__int128 *)a1, (__int128 *)(a1 + 56), (__int128 *)(a1 + 112), (__int128 *)(a1 + 168), result).n128_u64[0];
        if (*(__int16 *)(a2 - 24) > *(__int16 *)(a1 + 200))
        {
          result = *v168;
          v309 = *(_OWORD *)(a1 + 184);
          v169 = *(_OWORD *)(a1 + 200);
          v170 = *(_QWORD *)(a1 + 216);
          v171 = *(_QWORD *)(a2 - 8);
          v173 = *(_OWORD *)(a2 - 40);
          v172 = *(_OWORD *)(a2 - 24);
          *v168 = (__n128)*v9;
          *(_OWORD *)(a1 + 184) = v173;
          *(_OWORD *)(a1 + 200) = v172;
          *(_QWORD *)(a1 + 216) = v171;
          *(_OWORD *)(a2 - 40) = v309;
          *(_OWORD *)(a2 - 24) = v169;
          *(_QWORD *)(a2 - 8) = v170;
          *v9 = (__int128)result;
          if (*(__int16 *)(a1 + 200) > *(__int16 *)(a1 + 144))
          {
            v174 = *(_QWORD *)(a1 + 160);
            v175 = *(_OWORD *)(a1 + 128);
            result = *(__n128 *)(a1 + 144);
            v176 = *v167;
            v177 = *(_OWORD *)(a1 + 184);
            *v167 = *v168;
            *(_OWORD *)(a1 + 128) = v177;
            *(_OWORD *)(a1 + 144) = *(_OWORD *)(a1 + 200);
            *(_QWORD *)(a1 + 160) = *(_QWORD *)(a1 + 216);
            *v168 = v176;
            *(_OWORD *)(a1 + 184) = v175;
            *(__n128 *)(a1 + 200) = result;
            *(_QWORD *)(a1 + 216) = v174;
            if (*(__int16 *)(a1 + 144) > *(__int16 *)(a1 + 88))
            {
              v178 = *(_QWORD *)(a1 + 104);
              v179 = *(_OWORD *)(a1 + 72);
              result = *(__n128 *)(a1 + 88);
              v180 = *v166;
              v181 = *(_OWORD *)(a1 + 128);
              *v166 = *v167;
              *(_OWORD *)(a1 + 72) = v181;
              *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 144);
              *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 160);
              *v167 = v180;
              *(_OWORD *)(a1 + 128) = v179;
              *(__n128 *)(a1 + 144) = result;
              *(_QWORD *)(a1 + 160) = v178;
              if (*(__int16 *)(a1 + 88) > *(__int16 *)(a1 + 32))
              {
                v360 = *(_QWORD *)(a1 + 48);
                v310 = *(_OWORD *)(a1 + 16);
                v337 = *(_OWORD *)(a1 + 32);
                v278 = *(__n128 *)a1;
                v182 = *(_OWORD *)(a1 + 72);
                *(__n128 *)a1 = *v166;
                *(_OWORD *)(a1 + 16) = v182;
                *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
                *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 104);
                result = v278;
                *(_QWORD *)(a1 + 104) = v360;
                *(_OWORD *)(a1 + 72) = v310;
                *(_OWORD *)(a1 + 88) = v337;
                *v166 = v278;
              }
            }
          }
        }
        return result;
      default:
        if (v13 > 1343)
        {
          if (!a3)
          {
            if (v12 != a2)
            {
              v194 = (unint64_t)(v14 - 2) >> 1;
              v195 = v194;
              do
              {
                if (v194 >= v195)
                {
                  v196 = (2 * v195) | 1;
                  v197 = v12 + 56 * v196;
                  if (2 * v195 + 2 < v14)
                  {
                    v198 = *(__int16 *)(v197 + 32);
                    v199 = *(__int16 *)(v197 + 88);
                    v197 += 56 * (v198 > v199);
                    if (v198 > v199)
                      v196 = 2 * v195 + 2;
                  }
                  v200 = v12 + 56 * v195;
                  v201 = *(__int16 *)(v200 + 32);
                  if (*(__int16 *)(v197 + 32) <= v201)
                  {
                    v280 = *(_OWORD *)v200;
                    v312 = *(_OWORD *)(v200 + 16);
                    *(_QWORD *)&v253[14] = *(_QWORD *)(v200 + 48);
                    *(_OWORD *)v253 = *(_OWORD *)(v200 + 34);
                    do
                    {
                      v202 = v200;
                      v200 = v197;
                      v203 = *(_OWORD *)v197;
                      v204 = *(_OWORD *)(v197 + 16);
                      v205 = *(_OWORD *)(v197 + 32);
                      *(_QWORD *)(v202 + 48) = *(_QWORD *)(v197 + 48);
                      *(_OWORD *)(v202 + 16) = v204;
                      *(_OWORD *)(v202 + 32) = v205;
                      *(_OWORD *)v202 = v203;
                      if (v194 < v196)
                        break;
                      v206 = (2 * v196) | 1;
                      v197 = v12 + 56 * v206;
                      v207 = 2 * v196 + 2;
                      if (v207 < v14)
                      {
                        v208 = *(__int16 *)(v197 + 32);
                        v209 = *(__int16 *)(v197 + 88);
                        v197 += 56 * (v208 > v209);
                        if (v208 > v209)
                          v206 = v207;
                      }
                      v196 = v206;
                    }
                    while (*(__int16 *)(v197 + 32) <= v201);
                    *(_OWORD *)v200 = v280;
                    *(_OWORD *)(v200 + 16) = v312;
                    *(_WORD *)(v200 + 32) = v201;
                    *(_OWORD *)(v200 + 34) = *(_OWORD *)v253;
                    *(_QWORD *)(v200 + 48) = *(_QWORD *)&v253[14];
                  }
                }
                v125 = v195-- <= 0;
              }
              while (!v125);
              v210 = v13 / 0x38uLL;
              do
              {
                v211 = 0;
                v361 = *(_QWORD *)(v12 + 48);
                v313 = *(_OWORD *)(v12 + 16);
                v338 = *(_OWORD *)(v12 + 32);
                v281 = *(__n128 *)v12;
                v212 = v12;
                do
                {
                  v216 = v212 + 56 * v211 + 56;
                  v217 = (2 * v211) | 1;
                  v218 = 2 * v211 + 2;
                  if (v218 < v210)
                  {
                    v219 = *(__int16 *)(v216 + 32);
                    v220 = *(__int16 *)(v216 + 88);
                    v216 += 56 * (v219 > v220);
                    if (v219 > v220)
                      v217 = v218;
                  }
                  v213 = *(_OWORD *)v216;
                  v214 = *(_OWORD *)(v216 + 16);
                  v215 = *(_OWORD *)(v216 + 32);
                  *(_QWORD *)(v212 + 48) = *(_QWORD *)(v216 + 48);
                  *(_OWORD *)(v212 + 16) = v214;
                  *(_OWORD *)(v212 + 32) = v215;
                  *(_OWORD *)v212 = v213;
                  v212 = v216;
                  v211 = v217;
                }
                while (v217 <= (uint64_t)((unint64_t)(v210 - 2) >> 1));
                a2 -= 56;
                if (v216 == a2)
                {
                  result = v281;
                  *(_QWORD *)(v216 + 48) = v361;
                  *(_OWORD *)(v216 + 16) = v313;
                  *(_OWORD *)(v216 + 32) = v338;
                  *(__n128 *)v216 = v281;
                }
                else
                {
                  v221 = *(_OWORD *)a2;
                  v222 = *(_OWORD *)(a2 + 16);
                  v223 = *(_OWORD *)(a2 + 32);
                  *(_QWORD *)(v216 + 48) = *(_QWORD *)(a2 + 48);
                  *(_OWORD *)(v216 + 16) = v222;
                  *(_OWORD *)(v216 + 32) = v223;
                  *(_OWORD *)v216 = v221;
                  result = v281;
                  *(_QWORD *)(a2 + 48) = v361;
                  *(_OWORD *)(a2 + 16) = v313;
                  *(_OWORD *)(a2 + 32) = v338;
                  *(__n128 *)a2 = v281;
                  v224 = v216 - v12 + 56;
                  if (v224 >= 57)
                  {
                    v225 = (v224 / 0x38uLL - 2) >> 1;
                    v226 = v12 + 56 * v225;
                    v227 = *(__int16 *)(v216 + 32);
                    if (*(__int16 *)(v226 + 32) > v227)
                    {
                      v254 = *(_OWORD *)v216;
                      v258 = *(_OWORD *)(v216 + 16);
                      *(_QWORD *)&v249[14] = *(_QWORD *)(v216 + 48);
                      *(_OWORD *)v249 = *(_OWORD *)(v216 + 34);
                      do
                      {
                        v228 = v216;
                        v216 = v226;
                        result = *(__n128 *)v226;
                        v229 = *(_OWORD *)(v226 + 16);
                        v230 = *(_OWORD *)(v226 + 32);
                        *(_QWORD *)(v228 + 48) = *(_QWORD *)(v226 + 48);
                        *(_OWORD *)(v228 + 16) = v229;
                        *(_OWORD *)(v228 + 32) = v230;
                        *(__n128 *)v228 = result;
                        if (!v225)
                          break;
                        v225 = (v225 - 1) >> 1;
                        v226 = v12 + 56 * v225;
                      }
                      while (*(__int16 *)(v226 + 32) > v227);
                      *(_OWORD *)v216 = v254;
                      *(_OWORD *)(v216 + 16) = v258;
                      *(_WORD *)(v216 + 32) = v227;
                      result.n128_u64[0] = *(_QWORD *)v249;
                      *(_OWORD *)(v216 + 34) = *(_OWORD *)v249;
                      *(_QWORD *)(v216 + 48) = *(_QWORD *)&v249[14];
                    }
                  }
                }
                v125 = v210-- <= 2;
              }
              while (!v125);
            }
            return result;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = v12 + 56 * ((unint64_t)v14 >> 1);
          v17 = *(__int16 *)(a2 - 24);
          if ((unint64_t)v13 < 0x1C01)
          {
            v22 = *(__int16 *)(v12 + 32);
            if (v22 <= *(__int16 *)(v16 + 32))
            {
              if (v17 > v22)
              {
                v345 = *(_QWORD *)(v12 + 48);
                v289 = *(_OWORD *)(v12 + 16);
                v322 = *(_OWORD *)(v12 + 32);
                v263 = *(_OWORD *)v12;
                v32 = (__n128)*v9;
                v33 = *(_OWORD *)(a2 - 40);
                v34 = *(_OWORD *)(a2 - 24);
                *(_QWORD *)(v12 + 48) = *(_QWORD *)(a2 - 8);
                *(_OWORD *)(v12 + 16) = v33;
                *(_OWORD *)(v12 + 32) = v34;
                *(__n128 *)v12 = v32;
                *(_QWORD *)(a2 - 8) = v345;
                *(_OWORD *)(a2 - 40) = v289;
                *(_OWORD *)(a2 - 24) = v322;
                *v9 = v263;
                if (*(__int16 *)(v12 + 32) > *(__int16 *)(v16 + 32))
                {
                  v346 = *(_QWORD *)(v16 + 48);
                  v290 = *(_OWORD *)(v16 + 16);
                  v323 = *(_OWORD *)(v16 + 32);
                  v264 = *(_OWORD *)v16;
                  v35 = *(_OWORD *)v12;
                  v36 = *(_OWORD *)(v12 + 16);
                  v37 = *(_OWORD *)(v12 + 32);
                  *(_QWORD *)(v16 + 48) = *(_QWORD *)(v12 + 48);
                  *(_OWORD *)(v16 + 16) = v36;
                  *(_OWORD *)(v16 + 32) = v37;
                  *(_OWORD *)v16 = v35;
                  *(_QWORD *)(v12 + 48) = v346;
                  *(_OWORD *)(v12 + 16) = v290;
                  *(_OWORD *)(v12 + 32) = v323;
                  *(_OWORD *)v12 = v264;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v17 <= v22)
              {
                v349 = *(_QWORD *)(v16 + 48);
                v294 = *(_OWORD *)(v16 + 16);
                v326 = *(_OWORD *)(v16 + 32);
                v267 = *(_OWORD *)v16;
                v65 = *(_OWORD *)v12;
                v66 = *(_OWORD *)(v12 + 16);
                v67 = *(_OWORD *)(v12 + 32);
                *(_QWORD *)(v16 + 48) = *(_QWORD *)(v12 + 48);
                *(_OWORD *)(v16 + 16) = v66;
                *(_OWORD *)(v16 + 32) = v67;
                *(_OWORD *)v16 = v65;
                *(_QWORD *)(v12 + 48) = v349;
                *(_OWORD *)(v12 + 16) = v294;
                *(_OWORD *)(v12 + 32) = v326;
                *(_OWORD *)v12 = v267;
                if (*(__int16 *)(a2 - 24) <= *(__int16 *)(v12 + 32))
                  goto LABEL_31;
                v342 = *(_QWORD *)(v12 + 48);
                v286 = *(_OWORD *)(v12 + 16);
                v319 = *(_OWORD *)(v12 + 32);
                v260 = *(_OWORD *)v12;
                v68 = (__n128)*v9;
                v69 = *(_OWORD *)(a2 - 40);
                v70 = *(_OWORD *)(a2 - 24);
                *(_QWORD *)(v12 + 48) = *(_QWORD *)(a2 - 8);
                *(_OWORD *)(v12 + 16) = v69;
                *(_OWORD *)(v12 + 32) = v70;
                *(__n128 *)v12 = v68;
              }
              else
              {
                v342 = *(_QWORD *)(v16 + 48);
                v286 = *(_OWORD *)(v16 + 16);
                v319 = *(_OWORD *)(v16 + 32);
                v260 = *(_OWORD *)v16;
                v23 = (__n128)*v9;
                v24 = *(_OWORD *)(a2 - 40);
                v25 = *(_OWORD *)(a2 - 24);
                *(_QWORD *)(v16 + 48) = *(_QWORD *)(a2 - 8);
                *(_OWORD *)(v16 + 16) = v24;
                *(_OWORD *)(v16 + 32) = v25;
                *(__n128 *)v16 = v23;
              }
              *(_QWORD *)(a2 - 8) = v342;
              *(_OWORD *)(a2 - 40) = v286;
              *(_OWORD *)(a2 - 24) = v319;
              *v9 = v260;
            }
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
LABEL_55:
            v71 = *(__int16 *)(v12 + 32);
            if (*(__int16 *)(v12 - 24) > v71)
              goto LABEL_56;
            v251 = *(_OWORD *)v12;
            v257 = *(_OWORD *)(v12 + 16);
            v142 = *(__int16 *)(v12 + 32);
            *(_OWORD *)v248 = *(_OWORD *)(v12 + 34);
            *(_QWORD *)&v248[14] = *(_QWORD *)(v12 + 48);
            if (v142 <= *(__int16 *)(a2 - 24))
            {
              v145 = v12 + 56;
              do
              {
                v12 = v145;
                if (v145 >= a2)
                  break;
                v146 = *(__int16 *)(v145 + 32);
                v145 += 56;
              }
              while (v142 <= v146);
            }
            else
            {
              v143 = v12;
              do
              {
                v12 = v143 + 56;
                v144 = *(__int16 *)(v143 + 88);
                v143 += 56;
              }
              while (v142 <= v144);
            }
            v147 = a2;
            if (v12 < a2)
            {
              v148 = a2;
              do
              {
                v147 = v148 - 56;
                v149 = *(__int16 *)(v148 - 24);
                v148 -= 56;
              }
              while (v142 > v149);
            }
            while (v12 < v147)
            {
              v358 = *(_QWORD *)(v12 + 48);
              v307 = *(_OWORD *)(v12 + 16);
              v335 = *(_OWORD *)(v12 + 32);
              v276 = *(_OWORD *)v12;
              v150 = *(_OWORD *)v147;
              v151 = *(_OWORD *)(v147 + 16);
              v152 = *(_OWORD *)(v147 + 32);
              *(_QWORD *)(v12 + 48) = *(_QWORD *)(v147 + 48);
              *(_OWORD *)(v12 + 16) = v151;
              *(_OWORD *)(v12 + 32) = v152;
              *(_OWORD *)v12 = v150;
              *(_QWORD *)(v147 + 48) = v358;
              *(_OWORD *)(v147 + 16) = v307;
              *(_OWORD *)(v147 + 32) = v335;
              *(_OWORD *)v147 = v276;
              do
              {
                v153 = *(__int16 *)(v12 + 88);
                v12 += 56;
              }
              while (v142 <= v153);
              do
              {
                v154 = *(__int16 *)(v147 - 24);
                v147 -= 56;
              }
              while (v142 > v154);
            }
            v155 = (__int128 *)(v12 - 56);
            if (v12 - 56 != a1)
            {
              v156 = *v155;
              v157 = *(_OWORD *)(v12 - 40);
              v158 = *(_OWORD *)(v12 - 24);
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(v12 - 8);
              *(_OWORD *)(a1 + 16) = v157;
              *(_OWORD *)(a1 + 32) = v158;
              *(_OWORD *)a1 = v156;
            }
            a4 = 0;
            *v155 = v251;
            *(_OWORD *)(v12 - 40) = v257;
            *(_WORD *)(v12 - 24) = v142;
            result = *(__n128 *)v248;
            *(_QWORD *)(v12 - 8) = *(_QWORD *)&v248[14];
            *(_OWORD *)(v12 - 22) = *(_OWORD *)v248;
            continue;
          }
          v18 = *(__int16 *)(v16 + 32);
          if (v18 <= *(__int16 *)(v12 + 32))
          {
            if (v17 > v18)
            {
              v343 = *(_QWORD *)(v16 + 48);
              v287 = *(_OWORD *)(v16 + 16);
              v320 = *(_OWORD *)(v16 + 32);
              v261 = *(_OWORD *)v16;
              v26 = (__n128)*v9;
              v27 = *(_OWORD *)(a2 - 40);
              v28 = *(_OWORD *)(a2 - 24);
              *(_QWORD *)(v16 + 48) = *(_QWORD *)(a2 - 8);
              *(_OWORD *)(v16 + 16) = v27;
              *(_OWORD *)(v16 + 32) = v28;
              *(__n128 *)v16 = v26;
              *(_QWORD *)(a2 - 8) = v343;
              *(_OWORD *)(a2 - 40) = v287;
              *(_OWORD *)(a2 - 24) = v320;
              *v9 = v261;
              if (*(__int16 *)(v16 + 32) > *(__int16 *)(v12 + 32))
              {
                v344 = *(_QWORD *)(v12 + 48);
                v288 = *(_OWORD *)(v12 + 16);
                v321 = *(_OWORD *)(v12 + 32);
                v262 = *(_OWORD *)v12;
                v29 = *(_OWORD *)v16;
                v30 = *(_OWORD *)(v16 + 16);
                v31 = *(_OWORD *)(v16 + 32);
                *(_QWORD *)(v12 + 48) = *(_QWORD *)(v16 + 48);
                *(_OWORD *)(v12 + 16) = v30;
                *(_OWORD *)(v12 + 32) = v31;
                *(_OWORD *)v12 = v29;
                *(_QWORD *)(v16 + 48) = v344;
                *(_OWORD *)(v16 + 16) = v288;
                *(_OWORD *)(v16 + 32) = v321;
                *(_OWORD *)v16 = v262;
              }
            }
          }
          else
          {
            if (v17 <= v18)
            {
              v347 = *(_QWORD *)(v12 + 48);
              v291 = *(_OWORD *)(v12 + 16);
              v324 = *(_OWORD *)(v12 + 32);
              v265 = *(_OWORD *)v12;
              v38 = *(_OWORD *)v16;
              v39 = *(_OWORD *)(v16 + 16);
              v40 = *(_OWORD *)(v16 + 32);
              *(_QWORD *)(v12 + 48) = *(_QWORD *)(v16 + 48);
              *(_OWORD *)(v12 + 16) = v39;
              *(_OWORD *)(v12 + 32) = v40;
              *(_OWORD *)v12 = v38;
              *(_QWORD *)(v16 + 48) = v347;
              *(_OWORD *)(v16 + 16) = v291;
              *(_OWORD *)(v16 + 32) = v324;
              *(_OWORD *)v16 = v265;
              if (*(__int16 *)(a2 - 24) <= *(__int16 *)(v16 + 32))
                goto LABEL_22;
              v341 = *(_QWORD *)(v16 + 48);
              v285 = *(_OWORD *)(v16 + 16);
              v318 = *(_OWORD *)(v16 + 32);
              v259 = *(_OWORD *)v16;
              v41 = (__n128)*v9;
              v42 = *(_OWORD *)(a2 - 40);
              v43 = *(_OWORD *)(a2 - 24);
              *(_QWORD *)(v16 + 48) = *(_QWORD *)(a2 - 8);
              *(_OWORD *)(v16 + 16) = v42;
              *(_OWORD *)(v16 + 32) = v43;
              *(__n128 *)v16 = v41;
            }
            else
            {
              v341 = *(_QWORD *)(v12 + 48);
              v285 = *(_OWORD *)(v12 + 16);
              v318 = *(_OWORD *)(v12 + 32);
              v259 = *(_OWORD *)v12;
              v19 = (__n128)*v9;
              v20 = *(_OWORD *)(a2 - 40);
              v21 = *(_OWORD *)(a2 - 24);
              *(_QWORD *)(v12 + 48) = *(_QWORD *)(a2 - 8);
              *(_OWORD *)(v12 + 16) = v20;
              *(_OWORD *)(v12 + 32) = v21;
              *(__n128 *)v12 = v19;
            }
            *(_QWORD *)(a2 - 8) = v341;
            *(_OWORD *)(a2 - 40) = v285;
            *(_OWORD *)(a2 - 24) = v318;
            *v9 = v259;
          }
LABEL_22:
          v44 = (__int128 *)(v12 + 56);
          v45 = v12 + 56 * v15;
          v46 = v45 - 56;
          v47 = *(__int16 *)(v45 - 24);
          v48 = *(__int16 *)(a2 - 80);
          if (v47 <= *(__int16 *)(v12 + 88))
          {
            if (v48 > v47)
            {
              v348 = *(_QWORD *)(v46 + 48);
              v292 = *(_OWORD *)(v46 + 16);
              v325 = *(_OWORD *)(v46 + 32);
              v266 = *(_OWORD *)v46;
              v56 = *v10;
              v57 = *(_OWORD *)(a2 - 96);
              v58 = *(_OWORD *)(a2 - 80);
              *(_QWORD *)(v46 + 48) = *(_QWORD *)(a2 - 64);
              *(_OWORD *)(v46 + 16) = v57;
              *(_OWORD *)(v46 + 32) = v58;
              *(_OWORD *)v46 = v56;
              *(_QWORD *)(a2 - 64) = v348;
              *(_OWORD *)(a2 - 96) = v292;
              *(_OWORD *)(a2 - 80) = v325;
              *v10 = v266;
              if (*(__int16 *)(v46 + 32) > *(__int16 *)(v12 + 88))
              {
                v59 = *v44;
                v293 = *(_OWORD *)(v12 + 72);
                v60 = *(_OWORD *)(v12 + 88);
                v61 = *(_QWORD *)(v12 + 104);
                v62 = *(_QWORD *)(v46 + 48);
                v64 = *(_OWORD *)(v46 + 16);
                v63 = *(_OWORD *)(v46 + 32);
                *v44 = *(_OWORD *)v46;
                *(_OWORD *)(v12 + 72) = v64;
                *(_OWORD *)(v12 + 88) = v63;
                *(_QWORD *)(v12 + 104) = v62;
                *(_OWORD *)(v46 + 16) = v293;
                *(_OWORD *)(v46 + 32) = v60;
                *(_QWORD *)(v46 + 48) = v61;
                *(_OWORD *)v46 = v59;
              }
            }
          }
          else
          {
            if (v48 <= v47)
            {
              v72 = *v44;
              v295 = *(_OWORD *)(v12 + 72);
              v73 = *(_OWORD *)(v12 + 88);
              v74 = *(_QWORD *)(v12 + 104);
              v75 = *(_QWORD *)(v46 + 48);
              v77 = *(_OWORD *)(v46 + 16);
              v76 = *(_OWORD *)(v46 + 32);
              *v44 = *(_OWORD *)v46;
              *(_OWORD *)(v12 + 72) = v77;
              *(_OWORD *)(v12 + 88) = v76;
              *(_QWORD *)(v12 + 104) = v75;
              *(_OWORD *)(v46 + 16) = v295;
              *(_OWORD *)(v46 + 32) = v73;
              *(_QWORD *)(v46 + 48) = v74;
              *(_OWORD *)v46 = v72;
              if (*(__int16 *)(a2 - 80) <= *(__int16 *)(v46 + 32))
                goto LABEL_36;
              v350 = *(_QWORD *)(v46 + 48);
              v296 = *(_OWORD *)(v46 + 16);
              v327 = *(_OWORD *)(v46 + 32);
              v268 = *(_OWORD *)v46;
              v78 = *v10;
              v79 = *(_OWORD *)(a2 - 96);
              v80 = *(_OWORD *)(a2 - 80);
              *(_QWORD *)(v46 + 48) = *(_QWORD *)(a2 - 64);
              *(_OWORD *)(v46 + 16) = v79;
              *(_OWORD *)(v46 + 32) = v80;
              *(_OWORD *)v46 = v78;
              v49 = v268;
              v50 = v296;
              *(_QWORD *)(a2 - 64) = v350;
              *(_OWORD *)(a2 - 80) = v327;
            }
            else
            {
              v49 = *v44;
              v50 = *(_OWORD *)(v12 + 72);
              v51 = *(_OWORD *)(v12 + 88);
              v52 = *(_QWORD *)(v12 + 104);
              v53 = *(_QWORD *)(a2 - 64);
              v55 = *(_OWORD *)(a2 - 96);
              v54 = *(_OWORD *)(a2 - 80);
              *v44 = *v10;
              *(_OWORD *)(v12 + 72) = v55;
              *(_OWORD *)(v12 + 88) = v54;
              *(_QWORD *)(v12 + 104) = v53;
              *(_OWORD *)(a2 - 80) = v51;
              *(_QWORD *)(a2 - 64) = v52;
            }
            *v10 = v49;
            *(_OWORD *)(a2 - 96) = v50;
          }
LABEL_36:
          v81 = (__int128 *)(v12 + 112);
          v82 = v12 + 56 * v15;
          v83 = v82 + 56;
          v84 = *(__int16 *)(v82 + 88);
          v85 = *(__int16 *)(a2 - 136);
          if (v84 <= *(__int16 *)(v12 + 144))
          {
            if (v85 > v84)
            {
              v351 = *(_QWORD *)(v83 + 48);
              v297 = *(_OWORD *)(v83 + 16);
              v328 = *(_OWORD *)(v83 + 32);
              v269 = *(_OWORD *)v83;
              v93 = *v11;
              v94 = *(_OWORD *)(a2 - 152);
              v95 = *(_OWORD *)(a2 - 136);
              *(_QWORD *)(v83 + 48) = *(_QWORD *)(a2 - 120);
              *(_OWORD *)(v83 + 16) = v94;
              *(_OWORD *)(v83 + 32) = v95;
              *(_OWORD *)v83 = v93;
              *(_QWORD *)(a2 - 120) = v351;
              *(_OWORD *)(a2 - 152) = v297;
              *(_OWORD *)(a2 - 136) = v328;
              *v11 = v269;
              if (*(__int16 *)(v83 + 32) > *(__int16 *)(v12 + 144))
              {
                v96 = *v81;
                v298 = *(_OWORD *)(v12 + 128);
                v97 = *(_OWORD *)(v12 + 144);
                v98 = *(_QWORD *)(v12 + 160);
                v99 = *(_QWORD *)(v83 + 48);
                v101 = *(_OWORD *)(v83 + 16);
                v100 = *(_OWORD *)(v83 + 32);
                *v81 = *(_OWORD *)v83;
                *(_OWORD *)(v12 + 128) = v101;
                *(_OWORD *)(v12 + 144) = v100;
                *(_QWORD *)(v12 + 160) = v99;
                *(_OWORD *)(v83 + 16) = v298;
                *(_OWORD *)(v83 + 32) = v97;
                *(_QWORD *)(v83 + 48) = v98;
                *(_OWORD *)v83 = v96;
              }
            }
          }
          else
          {
            if (v85 <= v84)
            {
              v102 = *v81;
              v299 = *(_OWORD *)(v12 + 128);
              v103 = *(_OWORD *)(v12 + 144);
              v104 = *(_QWORD *)(v12 + 160);
              v105 = *(_QWORD *)(v83 + 48);
              v107 = *(_OWORD *)(v83 + 16);
              v106 = *(_OWORD *)(v83 + 32);
              *v81 = *(_OWORD *)v83;
              *(_OWORD *)(v12 + 128) = v107;
              *(_OWORD *)(v12 + 144) = v106;
              *(_QWORD *)(v12 + 160) = v105;
              *(_OWORD *)(v83 + 16) = v299;
              *(_OWORD *)(v83 + 32) = v103;
              *(_QWORD *)(v83 + 48) = v104;
              *(_OWORD *)v83 = v102;
              if (*(__int16 *)(a2 - 136) <= *(__int16 *)(v83 + 32))
                goto LABEL_45;
              v352 = *(_QWORD *)(v83 + 48);
              v300 = *(_OWORD *)(v83 + 16);
              v329 = *(_OWORD *)(v83 + 32);
              v270 = *(_OWORD *)v83;
              v108 = *v11;
              v109 = *(_OWORD *)(a2 - 152);
              v110 = *(_OWORD *)(a2 - 136);
              *(_QWORD *)(v83 + 48) = *(_QWORD *)(a2 - 120);
              *(_OWORD *)(v83 + 16) = v109;
              *(_OWORD *)(v83 + 32) = v110;
              *(_OWORD *)v83 = v108;
              v86 = v270;
              v87 = v300;
              *(_QWORD *)(a2 - 120) = v352;
              *(_OWORD *)(a2 - 136) = v329;
            }
            else
            {
              v86 = *v81;
              v87 = *(_OWORD *)(v12 + 128);
              v88 = *(_OWORD *)(v12 + 144);
              v89 = *(_QWORD *)(v12 + 160);
              v90 = *(_QWORD *)(a2 - 120);
              v92 = *(_OWORD *)(a2 - 152);
              v91 = *(_OWORD *)(a2 - 136);
              *v81 = *v11;
              *(_OWORD *)(v12 + 128) = v92;
              *(_OWORD *)(v12 + 144) = v91;
              *(_QWORD *)(v12 + 160) = v90;
              *(_OWORD *)(a2 - 136) = v88;
              *(_QWORD *)(a2 - 120) = v89;
            }
            *v11 = v86;
            *(_OWORD *)(a2 - 152) = v87;
          }
LABEL_45:
          v111 = *(__int16 *)(v16 + 32);
          v112 = *(__int16 *)(v83 + 32);
          if (v111 <= *(__int16 *)(v46 + 32))
          {
            if (v112 > v111)
            {
              v354 = *(_QWORD *)(v16 + 48);
              v302 = *(_OWORD *)(v16 + 16);
              v331 = *(_OWORD *)(v16 + 32);
              v272 = *(_OWORD *)v16;
              v114 = *(_OWORD *)(v83 + 16);
              *(_OWORD *)v16 = *(_OWORD *)v83;
              *(_OWORD *)(v16 + 16) = v114;
              *(_OWORD *)(v16 + 32) = *(_OWORD *)(v83 + 32);
              *(_QWORD *)(v16 + 48) = *(_QWORD *)(v83 + 48);
              *(_OWORD *)(v83 + 16) = v302;
              *(_OWORD *)(v83 + 32) = v331;
              *(_QWORD *)(v83 + 48) = v354;
              *(_OWORD *)v83 = v272;
              if (*(__int16 *)(v16 + 32) > *(__int16 *)(v46 + 32))
              {
                v355 = *(_QWORD *)(v46 + 48);
                v303 = *(_OWORD *)(v46 + 16);
                v332 = *(_OWORD *)(v46 + 32);
                v273 = *(_OWORD *)v46;
                v115 = *(_OWORD *)(v16 + 16);
                *(_OWORD *)v46 = *(_OWORD *)v16;
                *(_OWORD *)(v46 + 16) = v115;
                *(_OWORD *)(v46 + 32) = *(_OWORD *)(v16 + 32);
                *(_QWORD *)(v46 + 48) = *(_QWORD *)(v16 + 48);
                *(_OWORD *)(v16 + 16) = v303;
                *(_OWORD *)(v16 + 32) = v332;
                *(_QWORD *)(v16 + 48) = v355;
                *(_OWORD *)v16 = v273;
              }
            }
          }
          else
          {
            if (v112 <= v111)
            {
              v356 = *(_QWORD *)(v46 + 48);
              v304 = *(_OWORD *)(v46 + 16);
              v333 = *(_OWORD *)(v46 + 32);
              v274 = *(_OWORD *)v46;
              v116 = *(_OWORD *)(v16 + 16);
              *(_OWORD *)v46 = *(_OWORD *)v16;
              *(_OWORD *)(v46 + 16) = v116;
              *(_OWORD *)(v46 + 32) = *(_OWORD *)(v16 + 32);
              *(_QWORD *)(v46 + 48) = *(_QWORD *)(v16 + 48);
              *(_OWORD *)(v16 + 16) = v304;
              *(_OWORD *)(v16 + 32) = v333;
              *(_QWORD *)(v16 + 48) = v356;
              *(_OWORD *)v16 = v274;
              if (*(__int16 *)(v83 + 32) <= *(__int16 *)(v16 + 32))
                goto LABEL_54;
              v353 = *(_QWORD *)(v16 + 48);
              v301 = *(_OWORD *)(v16 + 16);
              v330 = *(_OWORD *)(v16 + 32);
              v271 = *(_OWORD *)v16;
              v117 = *(_OWORD *)(v83 + 16);
              *(_OWORD *)v16 = *(_OWORD *)v83;
              *(_OWORD *)(v16 + 16) = v117;
              *(_OWORD *)(v16 + 32) = *(_OWORD *)(v83 + 32);
              *(_QWORD *)(v16 + 48) = *(_QWORD *)(v83 + 48);
            }
            else
            {
              v353 = *(_QWORD *)(v46 + 48);
              v301 = *(_OWORD *)(v46 + 16);
              v330 = *(_OWORD *)(v46 + 32);
              v271 = *(_OWORD *)v46;
              v113 = *(_OWORD *)(v83 + 16);
              *(_OWORD *)v46 = *(_OWORD *)v83;
              *(_OWORD *)(v46 + 16) = v113;
              *(_OWORD *)(v46 + 32) = *(_OWORD *)(v83 + 32);
              *(_QWORD *)(v46 + 48) = *(_QWORD *)(v83 + 48);
            }
            *(_OWORD *)(v83 + 16) = v301;
            *(_OWORD *)(v83 + 32) = v330;
            *(_QWORD *)(v83 + 48) = v353;
            *(_OWORD *)v83 = v271;
          }
LABEL_54:
          v357 = *(_QWORD *)(v12 + 48);
          v305 = *(_OWORD *)(v12 + 16);
          v334 = *(_OWORD *)(v12 + 32);
          v275 = *(_OWORD *)v12;
          v118 = *(_OWORD *)v16;
          v119 = *(_OWORD *)(v16 + 16);
          v120 = *(_OWORD *)(v16 + 32);
          *(_QWORD *)(v12 + 48) = *(_QWORD *)(v16 + 48);
          *(_OWORD *)(v12 + 16) = v119;
          *(_OWORD *)(v12 + 32) = v120;
          *(_OWORD *)v12 = v118;
          *(_QWORD *)(v16 + 48) = v357;
          *(_OWORD *)(v16 + 16) = v305;
          *(_OWORD *)(v16 + 32) = v334;
          *(_OWORD *)v16 = v275;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_32:
          LOWORD(v71) = *(_WORD *)(v12 + 32);
LABEL_56:
          v250 = *(_OWORD *)v12;
          v256 = *(_OWORD *)(v12 + 16);
          *(_OWORD *)v247 = *(_OWORD *)(v12 + 34);
          *(_QWORD *)&v247[14] = *(_QWORD *)(v12 + 48);
          v121 = v12;
          do
          {
            v122 = v121;
            v121 += 56;
          }
          while (*(__int16 *)(v122 + 88) > (__int16)v71);
          v123 = a2;
          if (v122 == v12)
          {
            v126 = a2;
            while (v121 < v126)
            {
              v124 = v126 - 56;
              v125 = *(__int16 *)(v126 - 24) <= (__int16)v71;
              v126 -= 56;
              if (!v125)
                goto LABEL_66;
            }
            v124 = v126;
          }
          else
          {
            do
            {
              v124 = v123 - 56;
              v125 = *(__int16 *)(v123 - 24) <= (__int16)v71;
              v123 -= 56;
            }
            while (v125);
          }
LABEL_66:
          v12 = v121;
          if (v121 < v124)
          {
            v127 = v124;
            do
            {
              v128 = *(_OWORD *)v12;
              v306 = *(_OWORD *)(v12 + 16);
              v129 = *(_OWORD *)(v12 + 32);
              v130 = *(_QWORD *)(v12 + 48);
              v131 = *(_QWORD *)(v127 + 48);
              v133 = *(_OWORD *)(v127 + 16);
              v132 = *(_OWORD *)(v127 + 32);
              *(_OWORD *)v12 = *(_OWORD *)v127;
              *(_OWORD *)(v12 + 16) = v133;
              *(_OWORD *)(v12 + 32) = v132;
              *(_QWORD *)(v12 + 48) = v131;
              *(_OWORD *)(v127 + 16) = v306;
              *(_OWORD *)(v127 + 32) = v129;
              *(_QWORD *)(v127 + 48) = v130;
              *(_OWORD *)v127 = v128;
              do
              {
                v134 = *(__int16 *)(v12 + 88);
                v12 += 56;
              }
              while (v134 > (__int16)v71);
              do
              {
                v135 = *(__int16 *)(v127 - 24);
                v127 -= 56;
              }
              while (v135 <= (__int16)v71);
            }
            while (v12 < v127);
          }
          v136 = (__int128 *)(v12 - 56);
          if (v12 - 56 != a1)
          {
            v137 = *v136;
            v138 = *(_OWORD *)(v12 - 40);
            v139 = *(_OWORD *)(v12 - 24);
            *(_QWORD *)(a1 + 48) = *(_QWORD *)(v12 - 8);
            *(_OWORD *)(a1 + 16) = v138;
            *(_OWORD *)(a1 + 32) = v139;
            *(_OWORD *)a1 = v137;
          }
          *v136 = v250;
          *(_OWORD *)(v12 - 40) = v256;
          *(_WORD *)(v12 - 24) = v71;
          *(_QWORD *)(v12 - 8) = *(_QWORD *)&v247[14];
          *(_OWORD *)(v12 - 22) = *(_OWORD *)v247;
          if (v121 < v124)
            goto LABEL_77;
          v140 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogic::updateVenueLevelScales(void)::$_0 &,md::VenueLevelScale *>(a1, v12 - 56, *(__n128 *)v247);
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogic::updateVenueLevelScales(void)::$_0 &,md::VenueLevelScale *>(v12, a2, v141))
          {
            if (v140)
              continue;
LABEL_77:
            std::__introsort<std::_ClassicAlgPolicy,md::VenueLogic::updateVenueLevelScales(void)::$_0 &,md::VenueLevelScale *,false>(a1, v12 - 56, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v12 - 56;
          if (v140)
            return result;
          goto LABEL_1;
        }
        v183 = (char *)(v12 + 56);
        v185 = v12 == a2 || v183 == (char *)a2;
        if ((a4 & 1) != 0)
        {
          if (!v185)
          {
            v186 = 0;
            v187 = (_OWORD *)v12;
            do
            {
              v189 = v183;
              v190 = *((__int16 *)v187 + 44);
              if (v190 > *((__int16 *)v187 + 16))
              {
                v279 = *v189;
                v311 = v189[1];
                *(_OWORD *)v252 = *(_OWORD *)((char *)v187 + 90);
                *(_QWORD *)&v252[14] = *((_QWORD *)v187 + 13);
                v191 = v186;
                do
                {
                  v192 = v12 + v191;
                  v193 = *(_OWORD *)(v12 + v191 + 16);
                  *(_OWORD *)(v192 + 56) = *(_OWORD *)(v12 + v191);
                  *(_OWORD *)(v192 + 72) = v193;
                  *(_OWORD *)(v192 + 88) = *(_OWORD *)(v12 + v191 + 32);
                  *(_QWORD *)(v192 + 104) = *(_QWORD *)(v12 + v191 + 48);
                  if (!v191)
                  {
                    v188 = v12;
                    goto LABEL_121;
                  }
                  v191 -= 56;
                }
                while (v190 > *(__int16 *)(v192 - 24));
                v188 = v12 + v191 + 56;
LABEL_121:
                *(_OWORD *)v188 = v279;
                *(_OWORD *)(v188 + 16) = v311;
                *(_WORD *)(v188 + 32) = v190;
                result.n128_u64[0] = *(_QWORD *)v252;
                *(_OWORD *)(v188 + 34) = *(_OWORD *)v252;
                *(_QWORD *)(v188 + 48) = *(_QWORD *)&v252[14];
              }
              v183 = (char *)v189 + 56;
              v186 += 56;
              v187 = v189;
            }
            while ((_OWORD *)((char *)v189 + 56) != (_OWORD *)a2);
          }
        }
        else if (!v185)
        {
          do
          {
            v237 = (uint64_t)v183;
            v238 = *(__int16 *)(a1 + 88);
            if (v238 > *(__int16 *)(a1 + 32))
            {
              v283 = *(_OWORD *)v183;
              v316 = *((_OWORD *)v183 + 1);
              *(_OWORD *)v255 = *(_OWORD *)(a1 + 90);
              *(_QWORD *)&v255[14] = *(_QWORD *)(a1 + 104);
              do
              {
                v239 = *(_OWORD *)(v183 - 40);
                *(_OWORD *)v183 = *(_OWORD *)(v183 - 56);
                *((_OWORD *)v183 + 1) = v239;
                *((_OWORD *)v183 + 2) = *(_OWORD *)(v183 - 24);
                *((_QWORD *)v183 + 6) = *((_QWORD *)v183 - 1);
                v240 = *((__int16 *)v183 - 40);
                v183 -= 56;
              }
              while (v238 > v240);
              *(_OWORD *)v183 = v283;
              *((_OWORD *)v183 + 1) = v316;
              *((_WORD *)v183 + 16) = v238;
              result = *(__n128 *)v255;
              *((_QWORD *)v183 + 6) = *(_QWORD *)&v255[14];
              *(_OWORD *)(v183 + 34) = *(_OWORD *)v255;
            }
            v183 = (char *)(v237 + 56);
            a1 = v237;
          }
          while (v237 + 56 != a2);
        }
        return result;
    }
  }
}

  v9 = (__n128 *)(a2 - 24);
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = a2 - v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 3);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (v9 == (__n128 *)v10)
          return result;
        v56 = *(unsigned __int8 *)(a2 - 16);
        if (v56 == *(unsigned __int8 *)(v10 + 8)
          && (v56 = *(unsigned __int8 *)(a2 - 15), v56 == *(unsigned __int8 *)(v10 + 9)))
        {
          result = *(double *)(a2 - 8);
          if (result >= *(double *)(v10 + 16))
            return result;
        }
        else if (!v56)
        {
          return result;
        }
        v145 = *(_QWORD *)(v10 + 16);
        v137 = *(__n128 *)v10;
        v123 = *v9;
        *(_QWORD *)(v10 + 16) = *(_QWORD *)(a2 - 8);
        *(__n128 *)v10 = v123;
        result = v137.n128_f64[0];
        *(_QWORD *)(a2 - 8) = v145;
        *v9 = v137;
        return result;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *>((double *)v10, (double *)(v10 + 24), (double *)(a2 - 24));
        return result;
      case 4:
        *(_QWORD *)&result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *>(v10, v10 + 24, v10 + 48, a2 - 24).n128_u64[0];
        return result;
      case 5:
        *(_QWORD *)&result = std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *,0>((__n128 *)v10, (__n128 *)(v10 + 24), (__n128 *)(v10 + 48), (__n128 *)(v10 + 72), (__n128 *)(a2 - 24)).n128_u64[0];
        return result;
      default:
        if (v11 <= 575)
        {
          v57 = v10 + 24;
          v59 = v10 == a2 || v57 == a2;
          if ((a4 & 1) != 0)
          {
            if (v59)
              return result;
            v60 = 0;
            v61 = v10;
            while (1)
            {
              v63 = v61;
              v61 = v57;
              v64 = *(unsigned __int8 *)(v63 + 32);
              if (v64 == *(unsigned __int8 *)(v63 + 8)
                && (v64 = *(unsigned __int8 *)(v63 + 33), v64 == *(unsigned __int8 *)(v63 + 9)))
              {
                result = *(double *)(v63 + 40);
                if (result >= *(double *)(v63 + 16))
                  goto LABEL_196;
              }
              else if (!v64)
              {
                goto LABEL_196;
              }
              v65 = *(unsigned __int8 *)(v61 + 8);
              v66 = *(_BYTE *)(v61 + 9);
              v133 = *(_DWORD *)(v61 + 10);
              v138 = *(_WORD *)(v61 + 14);
              result = *(double *)(v61 + 16);
              v67 = *(_QWORD *)(v63 + 24);
              *(_QWORD *)(v61 + 16) = *(_QWORD *)(v63 + 16);
              *(_OWORD *)v61 = *(_OWORD *)v63;
              v62 = v10;
              if (v63 == v10)
                goto LABEL_195;
              v68 = v60;
              if (!v65)
              {
                if (v66)
                {
                  while (1)
                  {
                    v62 = v10 + v68;
                    if (*(_BYTE *)(v10 + v68 - 16))
                      goto LABEL_195;
                    if (*(unsigned __int8 *)(v62 - 15) == v66 && result >= *(double *)(v10 + v68 - 8))
                      break;
                    v63 -= 24;
                    *(_OWORD *)v62 = *(_OWORD *)(v62 - 24);
                    *(_QWORD *)(v62 + 16) = *(_QWORD *)(v62 - 8);
                    v68 -= 24;
                    if (!v68)
                    {
LABEL_194:
                      v62 = v10;
                      goto LABEL_195;
                    }
                  }
                }
                else
                {
                  while (1)
                  {
                    v62 = v10 + v68;
                    if (*(_BYTE *)(v10 + v68 - 16))
                      goto LABEL_195;
                    if (*(_BYTE *)(v62 - 15) || result >= *(double *)(v10 + v68 - 8))
                      break;
                    v63 -= 24;
                    *(_OWORD *)v62 = *(_OWORD *)(v62 - 24);
                    *(_QWORD *)(v62 + 16) = *(_QWORD *)(v62 - 8);
                    v68 -= 24;
                    if (!v68)
                      goto LABEL_194;
                  }
                }
LABEL_226:
                v62 = v63;
                goto LABEL_195;
              }
              if (!v66)
              {
                v69 = v60;
                while (1)
                {
                  v71 = v10 + v69;
                  if (v65 == *(unsigned __int8 *)(v10 + v69 - 16))
                  {
                    if (*(_BYTE *)(v71 - 15))
                    {
                      v62 = v10 + v69;
                      goto LABEL_195;
                    }
                    if (result >= *(double *)(v10 + v69 - 8))
                      goto LABEL_226;
                  }
                  v63 -= 24;
                  *(_OWORD *)v71 = *(_OWORD *)(v71 - 24);
                  *(_QWORD *)(v71 + 16) = *(_QWORD *)(v71 - 8);
                  v69 -= 24;
                  if (!v69)
                    goto LABEL_194;
                }
              }
              while (1)
              {
                v70 = v10 + v68;
                if (v65 == *(unsigned __int8 *)(v10 + v68 - 16) && *(unsigned __int8 *)(v70 - 15) == v66)
                {
                  v62 = v10 + v68;
                  if (result >= *(double *)(v10 + v68 - 8))
                    break;
                }
                *(_OWORD *)v70 = *(_OWORD *)(v70 - 24);
                *(_QWORD *)(v70 + 16) = *(_QWORD *)(v70 - 8);
                v68 -= 24;
                if (!v68)
                  goto LABEL_194;
              }
LABEL_195:
              *(_QWORD *)v62 = v67;
              *(_BYTE *)(v62 + 8) = v65;
              *(_BYTE *)(v62 + 9) = v66;
              *(_DWORD *)(v62 + 10) = v133;
              *(_WORD *)(v62 + 14) = v138;
              *(double *)(v62 + 16) = result;
LABEL_196:
              v57 = v61 + 24;
              v60 += 24;
              if (v61 + 24 == a2)
                return result;
            }
          }
          if (v59)
            return result;
          while (1)
          {
            v114 = *(unsigned __int8 *)(a1 + 32);
            if (v114 == *(unsigned __int8 *)(a1 + 8)
              && (v114 = *(unsigned __int8 *)(a1 + 33), v114 == *(unsigned __int8 *)(a1 + 9)))
            {
              result = *(double *)(a1 + 40);
              if (result >= *(double *)(a1 + 16))
                goto LABEL_300;
            }
            else if (!v114)
            {
              goto LABEL_300;
            }
            v115 = *(_QWORD *)v57;
            v116 = *(unsigned __int8 *)(v57 + 8);
            v117 = *(_BYTE *)(v57 + 9);
            v136 = *(_DWORD *)(v57 + 10);
            v140 = *(_WORD *)(v57 + 14);
            result = *(double *)(v57 + 16);
            if (*(_BYTE *)(v57 + 8))
            {
              v118 = a1;
              if (*(_BYTE *)(v57 + 9))
              {
                do
                {
                  do
                  {
                    v113 = v118;
                    *(_OWORD *)(v118 + 24) = *(_OWORD *)v118;
                    *(_QWORD *)(v118 + 40) = *(_QWORD *)(v118 + 16);
                    v118 -= 24;
                  }
                  while (v116 != *(unsigned __int8 *)(v113 - 16));
                }
                while (*(unsigned __int8 *)(v113 - 15) != v117 || result < *(double *)(v113 - 8));
              }
              else
              {
                v119 = a1;
                do
                {
                  do
                  {
                    v113 = v119;
                    *(_OWORD *)(v119 + 24) = *(_OWORD *)v119;
                    *(_QWORD *)(v119 + 40) = *(_QWORD *)(v119 + 16);
                    v119 -= 24;
                  }
                  while (v116 != *(unsigned __int8 *)(v113 - 16));
                }
                while (!*(_BYTE *)(v113 - 15) && result < *(double *)(v113 - 8));
              }
            }
            else
            {
              *(_OWORD *)v57 = *(_OWORD *)a1;
              *(_QWORD *)(v57 + 16) = *(_QWORD *)(a1 + 16);
              v113 = a1;
              if (!*(_BYTE *)(a1 - 16))
              {
                v120 = a1;
                if (v117)
                {
                  while (*(unsigned __int8 *)(v120 - 15) != v117 || result < *(double *)(v120 - 8))
                  {
                    v113 = v120 - 24;
                    *(_OWORD *)v120 = *(_OWORD *)(v120 - 24);
                    *(_QWORD *)(v120 + 16) = *(_QWORD *)(v120 - 8);
                    v122 = *(unsigned __int8 *)(v120 - 40);
                    v120 -= 24;
                    if (v122)
                      goto LABEL_299;
                  }
                }
                else
                {
                  v120 = a1;
                  while (!*(_BYTE *)(v120 - 15) && result < *(double *)(v120 - 8))
                  {
                    v113 = v120 - 24;
                    *(_OWORD *)v120 = *(_OWORD *)(v120 - 24);
                    *(_QWORD *)(v120 + 16) = *(_QWORD *)(v120 - 8);
                    v121 = *(unsigned __int8 *)(v120 - 40);
                    v120 -= 24;
                    if (v121)
                      goto LABEL_299;
                  }
                }
                v113 = v120;
              }
            }
LABEL_299:
            *(_QWORD *)v113 = v115;
            *(_BYTE *)(v113 + 8) = v116;
            *(_BYTE *)(v113 + 9) = v117;
            *(_DWORD *)(v113 + 10) = v136;
            *(_WORD *)(v113 + 14) = v140;
            *(double *)(v113 + 16) = result;
LABEL_300:
            v57 += 24;
            a1 += 24;
            if (v57 == a2)
              return result;
          }
        }
        if (!a3)
        {
          if (v10 == a2)
            return result;
          v72 = (unint64_t)(v12 - 2) >> 1;
          v73 = v72;
          while (1)
          {
            v75 = v73;
            if (v72 < v73)
              goto LABEL_232;
            v76 = (2 * v73) | 1;
            v74 = v10 + 24 * v76;
            if (2 * v75 + 2 >= v12)
              goto LABEL_241;
            v77 = *(unsigned __int8 *)(v10 + 24 * v76 + 8);
            if (v77 == *(unsigned __int8 *)(v74 + 32))
            {
              v77 = *(unsigned __int8 *)(v10 + 24 * v76 + 9);
              if (v77 == *(unsigned __int8 *)(v74 + 33))
                break;
            }
            if (v77)
              goto LABEL_240;
LABEL_241:
            v78 = v10 + 24 * v75;
            if (v74 == v78)
            {
              v79 = *(unsigned __int8 *)(v78 + 8);
            }
            else
            {
              v79 = *(unsigned __int8 *)(v74 + 8);
              if (v79 == *(unsigned __int8 *)(v10 + 24 * v75 + 8))
              {
                if (*(unsigned __int8 *)(v74 + 9) == *(unsigned __int8 *)(v10 + 24 * v75 + 9))
                {
                  if (*(double *)(v74 + 16) < *(double *)(v10 + 24 * v75 + 16))
                    goto LABEL_232;
                }
                else if (*(_BYTE *)(v74 + 9))
                {
                  goto LABEL_232;
                }
              }
              else
              {
                if (*(_BYTE *)(v74 + 8))
                  goto LABEL_232;
                v79 = *(unsigned __int8 *)(v10 + 24 * v75 + 8);
              }
            }
            v80 = *(_QWORD *)v78;
            v81 = *(unsigned __int8 *)(v78 + 9);
            v139 = *(_WORD *)(v78 + 14);
            v134 = *(_DWORD *)(v78 + 10);
            v82 = *(double *)(v78 + 16);
            v83 = *(_QWORD *)(v74 + 16);
            *(_OWORD *)v78 = *(_OWORD *)v74;
            *(_QWORD *)(v78 + 16) = v83;
            while (1)
            {
              if (v72 < v76)
                goto LABEL_231;
              v85 = v74;
              v86 = 2 * v76;
              v76 = (2 * v76) | 1;
              v74 = v10 + 24 * v76;
              v87 = v86 + 2;
              if (v87 < v12)
              {
                v88 = *(unsigned __int8 *)(v10 + 24 * v76 + 8);
                if (v88 == *(unsigned __int8 *)(v74 + 32))
                {
                  v88 = *(unsigned __int8 *)(v10 + 24 * v76 + 9);
                  if (v88 == *(unsigned __int8 *)(v74 + 33))
                  {
                    if (*(double *)(v10 + 24 * v76 + 16) >= *(double *)(v74 + 40))
                      goto LABEL_261;
LABEL_260:
                    v74 += 24;
                    v76 = v87;
                    goto LABEL_261;
                  }
                }
                if (v88)
                  goto LABEL_260;
              }
LABEL_261:
              v89 = *(unsigned __int8 *)(v74 + 8);
              if (v89 == v79)
              {
                v89 = *(unsigned __int8 *)(v74 + 9);
                if (v89 == v81)
                  break;
              }
              if (v89)
                goto LABEL_230;
LABEL_252:
              v84 = *(_OWORD *)v74;
              *(_QWORD *)(v85 + 16) = *(_QWORD *)(v74 + 16);
              *(_OWORD *)v85 = v84;
            }
            if (*(double *)(v74 + 16) >= v82)
              goto LABEL_252;
LABEL_230:
            v74 = v85;
LABEL_231:
            *(_QWORD *)v74 = v80;
            *(_BYTE *)(v74 + 8) = v79;
            *(_BYTE *)(v74 + 9) = v81;
            *(_DWORD *)(v74 + 10) = v134;
            *(_WORD *)(v74 + 14) = v139;
            *(double *)(v74 + 16) = v82;
LABEL_232:
            v73 = v75 - 1;
            if (!v75)
            {
              v90 = v11 / 0x18uLL;
              while (1)
              {
                v92 = 0;
                v144 = *(_QWORD *)(v10 + 16);
                v135 = *(__n128 *)v10;
                v93 = v10;
                do
                {
                  v95 = (__n128 *)v93;
                  v96 = v92 + 1;
                  v93 += 24 * (v92 + 1);
                  v97 = 2 * v92;
                  v92 = (2 * v92) | 1;
                  v98 = v97 + 2;
                  if (v98 < v90)
                  {
                    v99 = v95->n128_u8[24 * v96 + 8];
                    if (v99 != *(unsigned __int8 *)(v93 + 32)
                      || (v99 = v95->n128_u8[24 * v96 + 9], v99 != *(unsigned __int8 *)(v93 + 33)))
                    {
                      if (!v99)
                        goto LABEL_271;
LABEL_270:
                      v93 += 24;
                      v92 = v98;
                      goto LABEL_271;
                    }
                    if (v95[1].n128_f64[3 * v96] < *(double *)(v93 + 40))
                      goto LABEL_270;
                  }
LABEL_271:
                  v94 = *(__n128 *)v93;
                  v95[1].n128_u64[0] = *(_QWORD *)(v93 + 16);
                  *v95 = v94;
                }
                while (v92 <= (uint64_t)((unint64_t)(v90 - 2) >> 1));
                a2 -= 24;
                if (v93 == a2)
                {
                  result = v135.n128_f64[0];
                  *(_QWORD *)(v93 + 16) = v144;
                  *(__n128 *)v93 = v135;
                }
                else
                {
                  v100 = *(_OWORD *)a2;
                  *(_QWORD *)(v93 + 16) = *(_QWORD *)(a2 + 16);
                  *(_OWORD *)v93 = v100;
                  result = v135.n128_f64[0];
                  *(_QWORD *)(a2 + 16) = v144;
                  *(__n128 *)a2 = v135;
                  v101 = v93 - v10 + 24;
                  if (v101 >= 25)
                  {
                    v102 = v101 / 0x18uLL - 2;
                    v103 = v102 >> 1;
                    v104 = v10 + 24 * (v102 >> 1);
                    if (v104 != v93)
                    {
                      v105 = *(unsigned __int8 *)(v93 + 8);
                      if (*(unsigned __int8 *)(v10 + 24 * v103 + 8) == v105)
                      {
                        v106 = *(unsigned __int8 *)(v93 + 9);
                        if (*(unsigned __int8 *)(v10 + 24 * v103 + 9) == v106)
                        {
                          result = *(double *)(v10 + 24 * v103 + 16);
                          v106 = *(unsigned __int8 *)(v10 + 24 * v103 + 9);
                          if (result < *(double *)(v93 + 16))
                          {
LABEL_287:
                            v107 = *(_QWORD *)v93;
                            v126 = *(_DWORD *)(v93 + 10);
                            v129 = *(_WORD *)(v93 + 14);
                            result = *(double *)(v93 + 16);
                            v108 = *(_OWORD *)v104;
                            *(_QWORD *)(v93 + 16) = *(_QWORD *)(v104 + 16);
                            *(_OWORD *)v93 = v108;
                            if (v102 >= 2)
                            {
                              while (1)
                              {
                                v111 = v103 - 1;
                                v103 = (v103 - 1) >> 1;
                                v109 = v10 + 24 * v103;
                                v112 = *(unsigned __int8 *)(v109 + 8);
                                if (v112 == v105 && (v112 = *(unsigned __int8 *)(v10 + 24 * v103 + 9), v112 == v106))
                                {
                                  if (*(double *)(v10 + 24 * v103 + 16) >= result)
                                    break;
                                }
                                else if (!v112)
                                {
                                  break;
                                }
                                v110 = *(_OWORD *)v109;
                                *(_QWORD *)(v104 + 16) = *(_QWORD *)(v109 + 16);
                                *(_OWORD *)v104 = v110;
                                v104 = v10 + 24 * v103;
                                if (v111 <= 1)
                                  goto LABEL_289;
                              }
                            }
                            v109 = v104;
LABEL_289:
                            *(_QWORD *)v109 = v107;
                            *(_BYTE *)(v109 + 8) = v105;
                            *(_BYTE *)(v109 + 9) = v106;
                            *(_DWORD *)(v109 + 10) = v126;
                            *(_WORD *)(v109 + 14) = v129;
                            *(double *)(v109 + 16) = result;
                          }
                        }
                        else if (*(_BYTE *)(v10 + 24 * v103 + 9))
                        {
                          goto LABEL_287;
                        }
                      }
                      else if (*(_BYTE *)(v10 + 24 * v103 + 8))
                      {
                        v106 = *(unsigned __int8 *)(v93 + 9);
                        goto LABEL_287;
                      }
                    }
                  }
                }
                if (v90-- <= 2)
                  return result;
              }
            }
          }
          if (*(double *)(v10 + 24 * v76 + 16) >= *(double *)(v74 + 40))
            goto LABEL_241;
LABEL_240:
          v74 += 24;
          v76 = 2 * v75 + 2;
          goto LABEL_241;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = v10 + 24 * ((unint64_t)v12 >> 1);
        if ((unint64_t)v11 >= 0xC01)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *>((double *)a1, (double *)(a1 + 24 * v13), (double *)(a2 - 24));
          v15 = 24 * v13;
          v16 = (double *)(24 * v13 + a1 - 24);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *>((double *)(a1 + 24), v16, (double *)(a2 - 48));
          v17 = (double *)(a1 + 24 + v15);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *>((double *)(a1 + 48), v17, (double *)(a2 - 72));
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *>(v16, (double *)v14, v17);
          v141 = *(_QWORD *)(a1 + 16);
          v130 = *(_OWORD *)a1;
          v18 = *(_QWORD *)(v14 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(_QWORD *)(a1 + 16) = v18;
          *(_QWORD *)(v14 + 16) = v141;
          *(_OWORD *)v14 = v130;
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_12;
LABEL_7:
          v19 = *(unsigned __int8 *)(a1 - 16);
          if (v19 != *(unsigned __int8 *)(a1 + 8))
          {
            if (!*(_BYTE *)(a1 - 16))
            {
              v20 = *(unsigned __int8 *)(a1 + 9);
              v19 = *(unsigned __int8 *)(a1 + 8);
              goto LABEL_69;
            }
            v19 = *(unsigned __int8 *)(a1 + 8);
            goto LABEL_16;
          }
          v20 = *(unsigned __int8 *)(a1 - 15);
          if (v20 == *(unsigned __int8 *)(a1 + 9))
          {
            if (*(double *)(a1 - 8) < *(double *)(a1 + 16))
              goto LABEL_16;
          }
          else
          {
            if (*(_BYTE *)(a1 - 15))
              goto LABEL_16;
            v20 = *(unsigned __int8 *)(a1 + 9);
          }
LABEL_69:
          v37 = *(double *)a1;
          v125 = *(_DWORD *)(a1 + 10);
          v128 = *(_WORD *)(a1 + 14);
          result = *(double *)(a1 + 16);
          v38 = *(unsigned __int8 *)(a2 - 16);
          if (v19 != v38)
          {
            if (v19)
            {
              v39 = v20 == 0;
LABEL_89:
              v10 = a1 + 24;
              if (v19 == *(unsigned __int8 *)(a1 + 32))
              {
                if (v39)
                {
                  v40 = (unsigned __int8 *)(a1 + 33);
                  do
                  {
                    if (!*v40 && result < *(double *)(v40 + 7))
                      break;
                    v41 = v40[23];
                    v40 += 24;
                  }
                  while (v19 == v41);
                }
                else
                {
                  v40 = (unsigned __int8 *)(a1 + 33);
                  do
                  {
                    if (v20 != *v40)
                      break;
                    if (result < *(double *)(v40 + 7))
                      goto LABEL_121;
                    v10 += 24;
                    v44 = v40[23];
                    v40 += 24;
                  }
                  while (v19 == v44);
                }
                v10 = (unint64_t)(v40 - 9);
              }
              goto LABEL_121;
            }
            v10 = a1 + 24;
            if (a1 + 24 < a2)
            {
LABEL_97:
              if (v20)
              {
                v42 = v10;
                v43 = a1;
                while (1)
                {
                  v10 = v42;
                  if (!*(_BYTE *)(v43 + 32)
                    && (v20 != *(unsigned __int8 *)(v43 + 33) || result < *(double *)(v43 + 40)))
                  {
                    break;
                  }
                  v42 += 24;
                  v43 = v10;
                  if (v10 + 24 >= a2)
                  {
                    v10 += 24;
                    goto LABEL_121;
                  }
                }
              }
              else
              {
                v54 = v10;
                v10 = a1;
                while (1)
                {
                  v55 = v10;
                  v10 = v54;
                  if (!*(_BYTE *)(v55 + 32) && !*(_BYTE *)(v55 + 33) && result < *(double *)(v55 + 40))
                    break;
                  v54 += 24;
                  if (v10 + 24 >= a2)
                  {
                    v10 += 24;
                    goto LABEL_121;
                  }
                }
              }
              goto LABEL_121;
            }
            goto LABEL_120;
          }
          if (v20 != *(unsigned __int8 *)(a2 - 15))
          {
            if (!v20)
              goto LABEL_72;
LABEL_88:
            v39 = v20 == 0;
            if (v19)
              goto LABEL_89;
            v10 = a1 + 24;
            if (v20)
            {
              while (*(_BYTE *)(v10 + 8) || v20 == *(unsigned __int8 *)(v10 + 9) && result >= *(double *)(v10 + 16))
                v10 += 24;
            }
            else
            {
              while (*(_BYTE *)(v10 + 8) || *(_BYTE *)(v10 + 9) || result >= *(double *)(v10 + 16))
                v10 += 24;
            }
LABEL_120:
            v19 = 0;
            goto LABEL_121;
          }
          if (result < *(double *)(a2 - 8))
            goto LABEL_88;
LABEL_72:
          v10 = a1 + 24;
          if (a1 + 24 < a2)
          {
            if (!v19)
              goto LABEL_97;
            if (v20)
            {
              do
              {
                if (!*(_BYTE *)(v10 + 8))
                  break;
                if (v20 != *(unsigned __int8 *)(v10 + 9))
                  break;
                if (result < *(double *)(v10 + 16))
                  break;
                v10 += 24;
              }
              while (v10 < a2);
            }
            else
            {
              do
              {
                if (!*(_BYTE *)(v10 + 8) || !*(_BYTE *)(v10 + 9) && result < *(double *)(v10 + 16))
                  break;
                v10 += 24;
              }
              while (v10 < a2);
            }
          }
LABEL_121:
          v45 = (unsigned __int8 *)a2;
          if (v10 >= a2)
            goto LABEL_161;
          for (i = (unsigned __int8 *)(a2 - 15); ; i -= 24)
          {
            if (v19 != v38)
            {
              if (!v19)
                goto LABEL_130;
              goto LABEL_124;
            }
            if (v20 != *i)
              break;
            if (result >= *(double *)(i + 7))
              goto LABEL_130;
LABEL_124:
            v38 = *(i - 25);
          }
          if (v20)
            goto LABEL_124;
LABEL_130:
          v45 = i - 9;
LABEL_161:
          while (v10 < (unint64_t)v45)
          {
            v143 = *(_QWORD *)(v10 + 16);
            v132 = *(__n128 *)v10;
            v47 = *(__n128 *)v45;
            *(_QWORD *)(v10 + 16) = *((_QWORD *)v45 + 2);
            *(__n128 *)v10 = v47;
            *((_QWORD *)v45 + 2) = v143;
            *(__n128 *)v45 = v132;
            if (v19)
            {
              v48 = v10 + 24;
              if (!*(_BYTE *)(v10 + 32))
              {
                v10 += 24;
                goto LABEL_156;
              }
              if (v20)
              {
                v49 = (unsigned __int8 *)(v10 + 33);
                do
                {
                  if (v20 != *v49)
                    break;
                  if (result < *(double *)(v49 + 7))
                  {
                    v10 = v48;
                    goto LABEL_156;
                  }
                  v48 += 24;
                  v50 = v49[23];
                  v49 += 24;
                }
                while (v50);
                v10 = (unint64_t)(v49 - 9);
                goto LABEL_156;
              }
              v51 = v10 + 33;
              do
              {
                if (!*(_BYTE *)v51 && result < *(double *)(v51 + 7))
                  break;
                v52 = *(unsigned __int8 *)(v51 + 23);
                v51 += 24;
              }
              while (v52);
              v10 = v51 - 9;
            }
            else if (v20)
            {
              do
              {
                do
                  v10 += 24;
                while (*(_BYTE *)(v10 + 8));
              }
              while (v20 == *(unsigned __int8 *)(v10 + 9) && result >= *(double *)(v10 + 16));
            }
            else
            {
              do
              {
                do
                  v10 += 24;
                while (*(_BYTE *)(v10 + 8));
              }
              while (*(_BYTE *)(v10 + 9) || result >= *(double *)(v10 + 16));
            }
            do
            {
              while (1)
              {
LABEL_156:
                while (1)
                {
                  v45 -= 24;
                  if (v19 == v45[8])
                    break;
                  if (!v19)
                    goto LABEL_161;
                }
                if (v20 != v45[9])
                  break;
                if (result >= *((double *)v45 + 2))
                  goto LABEL_161;
              }
            }
            while (v20);
          }
          if (v10 - 24 != a1)
          {
            v53 = *(_OWORD *)(v10 - 24);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v10 - 8);
            *(_OWORD *)a1 = v53;
          }
          a4 = 0;
          *(double *)(v10 - 24) = v37;
          *(_BYTE *)(v10 - 16) = v19;
          *(_BYTE *)(v10 - 15) = v20;
          *(_DWORD *)(v10 - 14) = v125;
          *(_WORD *)(v10 - 10) = v128;
          *(double *)(v10 - 8) = result;
          continue;
        }
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *>((double *)(a1 + 24 * v13), (double *)a1, (double *)(a2 - 24));
        --a3;
        if ((a4 & 1) == 0)
          goto LABEL_7;
LABEL_12:
        v19 = *(unsigned __int8 *)(a1 + 8);
LABEL_16:
        v21 = *(double *)a1;
        v22 = *(unsigned __int8 *)(a1 + 9);
        v124 = *(_DWORD *)(a1 + 10);
        v127 = *(_WORD *)(a1 + 14);
        v23 = *(double *)(a1 + 16);
        for (j = a1 + 24; ; j += 24)
        {
          v25 = *(unsigned __int8 *)(j + 8);
          if (v25 == v19)
          {
            v25 = *(unsigned __int8 *)(j + 9);
            if (v25 == v22)
              break;
          }
          if (!v25)
            goto LABEL_22;
LABEL_18:
          ;
        }
        if (*(double *)(j + 16) < v23)
          goto LABEL_18;
LABEL_22:
        v26 = j - 24;
        k = a2 - 24;
        if (j - 24 != a1)
        {
          while (1)
          {
            v28 = *(unsigned __int8 *)(k + 8);
            if (v28 == v19 && (v28 = *(unsigned __int8 *)(k + 9), v28 == v22))
            {
              if (*(double *)(k + 16) < v23)
                goto LABEL_43;
            }
            else if (v28)
            {
              goto LABEL_43;
            }
            k -= 24;
          }
        }
        k = a2;
        if (j < a2)
        {
          for (k = a2 - 24; ; k -= 24)
          {
            v30 = *(unsigned __int8 *)(k + 8);
            if (v30 == v19 && (v30 = *(unsigned __int8 *)(k + 9), v30 == v22))
            {
              if (*(double *)(k + 16) < v23 || j >= k)
                break;
            }
            else
            {
              if (v30)
                v29 = 1;
              else
                v29 = j >= k;
              if (v29)
                break;
            }
          }
        }
LABEL_43:
        if (j < k)
        {
          v32 = j;
          v33 = k;
          do
          {
            v142 = *(_QWORD *)(v32 + 16);
            v131 = *(_OWORD *)v32;
            v34 = *(_OWORD *)v33;
            *(_QWORD *)(v32 + 16) = *(_QWORD *)(v33 + 16);
            *(_OWORD *)v32 = v34;
            *(_QWORD *)(v33 + 16) = v142;
            *(_OWORD *)v33 = v131;
            do
            {
              while (1)
              {
                while (1)
                {
                  v32 += 24;
                  if (*(unsigned __int8 *)(v32 + 8) == v19)
                    break;
                  if (!*(_BYTE *)(v32 + 8))
                    goto LABEL_53;
                }
                if (*(unsigned __int8 *)(v32 + 9) != v22)
                  break;
                if (*(double *)(v32 + 16) >= v23)
                  goto LABEL_53;
              }
            }
            while (*(_BYTE *)(v32 + 9));
LABEL_53:
            v26 = v32 - 24;
            do
            {
              while (1)
              {
                while (1)
                {
                  v33 -= 24;
                  if (*(unsigned __int8 *)(v33 + 8) == v19)
                    break;
                  if (*(_BYTE *)(v33 + 8))
                    goto LABEL_45;
                }
                if (*(unsigned __int8 *)(v33 + 9) != v22)
                  break;
                if (*(double *)(v33 + 16) < v23)
                  goto LABEL_45;
              }
            }
            while (!*(_BYTE *)(v33 + 9));
LABEL_45:
            ;
          }
          while (v32 < v33);
        }
        if (v26 != a1)
        {
          v35 = *(_OWORD *)v26;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v26 + 16);
          *(_OWORD *)a1 = v35;
        }
        *(double *)v26 = v21;
        *(_BYTE *)(v26 + 8) = v19;
        *(_BYTE *)(v26 + 9) = v22;
        *(_DWORD *)(v26 + 10) = v124;
        *(_WORD *)(v26 + 14) = v127;
        *(double *)(v26 + 16) = v23;
        if (j < k)
        {
LABEL_66:
          std::__introsort<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *,false>(a1, v26, a3, a4 & 1);
          a4 = 0;
          v10 = v26 + 24;
          continue;
        }
        v36 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *>(a1, v26);
        v10 = v26 + 24;
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::VenueLogicContext::venuesInProximityToWorldPoint(geo::Mercator2<double> const&,double)::$_0 &,md::VenueProximityResult *>(v26 + 24, a2))
        {
          if (v36)
            continue;
          goto LABEL_66;
        }
        a2 = v26;
        if (!v36)
          goto LABEL_1;
        return result;
    }
  }
}

  v208 = (__int128 *)((char *)a2 - 72);
  v6 = (unint64_t)a1;
  while (2)
  {
    v7 = (uint64_t)a2 - v6;
    v8 = 0x8E38E38E38E38E39 * ((uint64_t)((uint64_t)a2 - v6) >> 3);
    a1 = (__int128 *)v6;
    switch(v8)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*(_DWORD *)(*(_QWORD *)v208 + 44) - *(_DWORD *)(*(_QWORD *)v208 + 36) > (*(_DWORD *)(*(_QWORD *)v6 + 44) - *(_DWORD *)(*(_QWORD *)v6 + 36)))
        {
          v97 = *(_OWORD *)v6;
          v96 = *(_OWORD *)(v6 + 16);
          *(_QWORD *)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
          v267 = *(_BYTE *)(v6 + 64);
          v98 = *(_OWORD *)(v6 + 32);
          v259 = *(_OWORD *)(v6 + 48);
          v99 = *(__int128 *)((char *)a2 - 72);
          *(_QWORD *)v208 = 0;
          *((_QWORD *)a2 - 8) = 0;
          v100 = *(std::__shared_weak_count **)(v6 + 8);
          *(_OWORD *)v6 = v99;
          if (v100)
          {
            p_shared_owners = (unint64_t *)&v100->__shared_owners_;
            do
              v102 = __ldaxr(p_shared_owners);
            while (__stlxr(v102 - 1, p_shared_owners));
            if (!v102)
            {
              v230 = v98;
              v243 = v96;
              v219 = v97;
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
              v97 = v219;
              v98 = v230;
              v96 = v243;
            }
          }
          *(_DWORD *)(v6 + 16) = *((_DWORD *)a2 - 14);
          *(_DWORD *)(v6 + 20) = *((_DWORD *)a2 - 13);
          *(_DWORD *)(v6 + 24) = *((_DWORD *)a2 - 12);
          *(_DWORD *)(v6 + 28) = *((_DWORD *)a2 - 11);
          *(_DWORD *)(v6 + 32) = *((_DWORD *)a2 - 10);
          *(_DWORD *)(v6 + 36) = *((_DWORD *)a2 - 9);
          *(_DWORD *)(v6 + 40) = *((_DWORD *)a2 - 8);
          *(_DWORD *)(v6 + 44) = *((_DWORD *)a2 - 7);
          v103 = *(__int128 *)((char *)a2 - 24);
          *(_BYTE *)(v6 + 64) = *((_BYTE *)a2 - 8);
          *(_OWORD *)(v6 + 48) = v103;
          v104 = (std::__shared_weak_count *)*((_QWORD *)a2 - 8);
          *(__int128 *)((char *)a2 - 72) = v97;
          if (v104)
          {
            v105 = (unint64_t *)&v104->__shared_owners_;
            do
              v106 = __ldaxr(v105);
            while (__stlxr(v106 - 1, v105));
            if (!v106)
            {
              v231 = v98;
              v244 = v96;
              ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
              std::__shared_weak_count::__release_weak(v104);
              v98 = v231;
              v96 = v244;
            }
          }
          *(__int128 *)((char *)a2 - 56) = v96;
          *(__int128 *)((char *)a2 - 40) = v98;
          result = *(double *)&v259;
          *((_BYTE *)a2 - 8) = v267;
          *(__int128 *)((char *)a2 - 24) = v259;
        }
        return result;
      case 3:
        *(_QWORD *)&result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>((__int128 *)v6, (__int128 *)(v6 + 72), v208).n128_u64[0];
        return result;
      case 4:
        *(_QWORD *)&result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>(v6, v6 + 72, v6 + 144, v208).n128_u64[0];
        return result;
      case 5:
        *(_QWORD *)&result = std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*,0>(v6, v6 + 72, v6 + 144, v6 + 216, v208).n128_u64[0];
        return result;
      default:
        v9 = v6;
        if (v7 <= 1727)
        {
          v107 = (__int128 *)(v6 + 72);
          v109 = (__int128 *)v6 == a2 || v107 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v109)
            {
              v110 = v6;
              do
              {
                v111 = v107;
                v112 = *(_QWORD *)(v110 + 72);
                if (*(_DWORD *)(v112 + 44) - *(_DWORD *)(v112 + 36) > (*(_DWORD *)(*(_QWORD *)v110 + 44)
                                                                                    - *(_DWORD *)(*(_QWORD *)v110 + 36)))
                {
                  v113 = a2;
                  v114 = *(_QWORD *)(v110 + 80);
                  *(_QWORD *)v107 = 0;
                  *((_QWORD *)v107 + 1) = 0;
                  v232 = *(_OWORD *)(v110 + 104);
                  v245 = *(_OWORD *)(v110 + 88);
                  v260 = *(_OWORD *)(v110 + 120);
                  v268 = *(_BYTE *)(v110 + 136);
                  v115 = *(_QWORD *)v110;
                  v116 = v111;
                  while (1)
                  {
                    v117 = v110;
                    v118 = *(_QWORD *)(v110 + 8);
                    *(_QWORD *)v117 = 0;
                    *(_QWORD *)(v117 + 8) = 0;
                    v119 = (std::__shared_weak_count *)*((_QWORD *)v116 + 1);
                    *(_QWORD *)v116 = v115;
                    *((_QWORD *)v116 + 1) = v118;
                    if (v119)
                    {
                      v120 = (unint64_t *)&v119->__shared_owners_;
                      do
                        v121 = __ldaxr(v120);
                      while (__stlxr(v121 - 1, v120));
                      if (!v121)
                      {
                        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                        std::__shared_weak_count::__release_weak(v119);
                      }
                    }
                    *((_DWORD *)v116 + 4) = *(_DWORD *)(v117 + 16);
                    *((_DWORD *)v116 + 5) = *(_DWORD *)(v117 + 20);
                    *((_DWORD *)v116 + 6) = *(_DWORD *)(v117 + 24);
                    *((_DWORD *)v116 + 7) = *(_DWORD *)(v117 + 28);
                    *((_DWORD *)v116 + 8) = *(_DWORD *)(v117 + 32);
                    *((_DWORD *)v116 + 9) = *(_DWORD *)(v117 + 36);
                    *((_DWORD *)v116 + 10) = *(_DWORD *)(v117 + 40);
                    *((_DWORD *)v116 + 11) = *(_DWORD *)(v117 + 44);
                    v116[3] = *(_OWORD *)(v117 + 48);
                    *((_BYTE *)v116 + 64) = *(_BYTE *)(v117 + 64);
                    if ((__int128 *)v117 == a1)
                      break;
                    v110 = v117 - 72;
                    v115 = *(_QWORD *)(v117 - 72);
                    v116 = (__int128 *)v117;
                    if (*(_DWORD *)(v112 + 44) - *(_DWORD *)(v112 + 36) <= (*(_DWORD *)(v115 + 44)
                                                                                         - *(_DWORD *)(v115 + 36)))
                    {
                      v122 = (__int128 *)v117;
                      goto LABEL_139;
                    }
                  }
                  v122 = a1;
LABEL_139:
                  v123 = (std::__shared_weak_count *)*((_QWORD *)v122 + 1);
                  *(_QWORD *)v122 = v112;
                  *((_QWORD *)v122 + 1) = v114;
                  if (v123)
                  {
                    v124 = (unint64_t *)&v123->__shared_owners_;
                    do
                      v125 = __ldaxr(v124);
                    while (__stlxr(v125 - 1, v124));
                    if (!v125)
                    {
                      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                      std::__shared_weak_count::__release_weak(v123);
                    }
                  }
                  v122[1] = v245;
                  v122[2] = v232;
                  result = *(double *)&v260;
                  *(_OWORD *)(v117 + 48) = v260;
                  *(_BYTE *)(v117 + 64) = v268;
                  a2 = v113;
                }
                v107 = (__int128 *)((char *)v111 + 72);
                v110 = (unint64_t)v111;
              }
              while ((__int128 *)((char *)v111 + 72) != a2);
            }
          }
          else if (!v109)
          {
            do
            {
              v189 = v107;
              v190 = a1;
              v191 = *((_QWORD *)a1 + 9);
              if (*(_DWORD *)(v191 + 44) - *(_DWORD *)(v191 + 36) > (*(_DWORD *)(*(_QWORD *)a1 + 44)
                                                                                  - *(_DWORD *)(*(_QWORD *)a1 + 36)))
              {
                v192 = a2;
                v193 = *((_QWORD *)a1 + 10);
                *(_QWORD *)v107 = 0;
                *((_QWORD *)v107 + 1) = 0;
                v236 = *(__int128 *)((char *)a1 + 104);
                v249 = *(__int128 *)((char *)a1 + 88);
                v263 = *(__int128 *)((char *)a1 + 120);
                v271 = *((_BYTE *)a1 + 136);
                v194 = *(_QWORD *)a1;
                v195 = v107;
                do
                {
                  v196 = v195;
                  v195 = v190;
                  v197 = *((_QWORD *)v190 + 1);
                  *(_QWORD *)v190 = 0;
                  *((_QWORD *)v190 + 1) = 0;
                  v198 = (std::__shared_weak_count *)*((_QWORD *)v196 + 1);
                  *(_QWORD *)v196 = v194;
                  *((_QWORD *)v196 + 1) = v197;
                  if (v198)
                  {
                    v199 = (unint64_t *)&v198->__shared_owners_;
                    do
                      v200 = __ldaxr(v199);
                    while (__stlxr(v200 - 1, v199));
                    if (!v200)
                    {
                      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
                      std::__shared_weak_count::__release_weak(v198);
                    }
                  }
                  *((_DWORD *)v196 + 4) = *((_DWORD *)v195 + 4);
                  *((_DWORD *)v196 + 5) = *((_DWORD *)v195 + 5);
                  *((_DWORD *)v196 + 6) = *((_DWORD *)v195 + 6);
                  *((_DWORD *)v196 + 7) = *((_DWORD *)v195 + 7);
                  *((_DWORD *)v196 + 8) = *((_DWORD *)v195 + 8);
                  *((_DWORD *)v196 + 9) = *((_DWORD *)v195 + 9);
                  *((_DWORD *)v196 + 10) = *((_DWORD *)v195 + 10);
                  *((_DWORD *)v196 + 11) = *((_DWORD *)v195 + 11);
                  v196[3] = v195[3];
                  *((_BYTE *)v196 + 64) = *((_BYTE *)v195 + 64);
                  v190 = (__int128 *)((char *)v195 - 72);
                  v194 = *((_QWORD *)v195 - 9);
                }
                while (*(_DWORD *)(v191 + 44) - *(_DWORD *)(v191 + 36) > (*(_DWORD *)(v194 + 44)
                                                                                       - *(_DWORD *)(v194 + 36)));
                v201 = (std::__shared_weak_count *)*((_QWORD *)v195 + 1);
                *(_QWORD *)v195 = v191;
                *((_QWORD *)v195 + 1) = v193;
                a2 = v192;
                if (v201)
                {
                  v202 = (unint64_t *)&v201->__shared_owners_;
                  do
                    v203 = __ldaxr(v202);
                  while (__stlxr(v203 - 1, v202));
                  if (!v203)
                  {
                    ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
                    std::__shared_weak_count::__release_weak(v201);
                  }
                }
                v195[1] = v249;
                v195[2] = v236;
                result = *(double *)&v263;
                v195[3] = v263;
                *((_BYTE *)v195 + 64) = v271;
              }
              v107 = (__int128 *)((char *)v189 + 72);
              a1 = v189;
            }
            while ((__int128 *)((char *)v189 + 72) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((__int128 *)v6 != a2)
          {
            v214 = a2;
            v126 = (unint64_t)(v8 - 2) >> 1;
            v127 = v126;
            v128 = v6;
            do
            {
              v129 = v127;
              if (v126 >= v127)
              {
                v130 = (2 * v127) | 1;
                v131 = (_QWORD *)(v128 + 72 * v130);
                if (2 * v129 + 2 >= v8)
                {
                  v132 = *v131;
                }
                else
                {
                  v132 = *v131;
                  if (*(_DWORD *)(*v131 + 44) - *(_DWORD *)(*v131 + 36) > (*(_DWORD *)(v131[9] + 44)
                                                                                            - *(_DWORD *)(v131[9] + 36)))
                  {
                    v132 = v131[9];
                    v131 += 9;
                    v130 = 2 * v129 + 2;
                  }
                }
                v133 = (_QWORD *)(v128 + 72 * v129);
                v134 = *v133;
                if (*(_DWORD *)(v132 + 44) - *(_DWORD *)(v132 + 36) <= (*(_DWORD *)(*v133 + 44)
                                                                                     - *(_DWORD *)(*v133 + 36)))
                {
                  v220 = v133[1];
                  *v133 = 0;
                  v133[1] = 0;
                  v135 = v128 + 72 * v129;
                  v233 = *(_OWORD *)(v135 + 32);
                  v246 = *(_OWORD *)(v135 + 16);
                  v269 = *(_BYTE *)(v135 + 64);
                  v261 = *(_OWORD *)(v135 + 48);
                  v136 = *v131;
                  do
                  {
                    v137 = v131;
                    v138 = v131[1];
                    *v137 = 0;
                    v137[1] = 0;
                    v139 = (std::__shared_weak_count *)v133[1];
                    *v133 = v136;
                    v133[1] = v138;
                    if (v139)
                    {
                      v140 = (unint64_t *)&v139->__shared_owners_;
                      do
                        v141 = __ldaxr(v140);
                      while (__stlxr(v141 - 1, v140));
                      if (!v141)
                      {
                        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                        std::__shared_weak_count::__release_weak(v139);
                      }
                    }
                    *((_DWORD *)v133 + 4) = *((_DWORD *)v137 + 4);
                    *((_DWORD *)v133 + 5) = *((_DWORD *)v137 + 5);
                    *((_DWORD *)v133 + 6) = *((_DWORD *)v137 + 6);
                    *((_DWORD *)v133 + 7) = *((_DWORD *)v137 + 7);
                    *((_DWORD *)v133 + 8) = *((_DWORD *)v137 + 8);
                    *((_DWORD *)v133 + 9) = *((_DWORD *)v137 + 9);
                    *((_DWORD *)v133 + 10) = *((_DWORD *)v137 + 10);
                    *((_DWORD *)v133 + 11) = *((_DWORD *)v137 + 11);
                    v142 = *((_OWORD *)v137 + 3);
                    *((_BYTE *)v133 + 64) = *((_BYTE *)v137 + 64);
                    *((_OWORD *)v133 + 3) = v142;
                    if (v126 < v130)
                      break;
                    v131 = (_QWORD *)a1 + 9 * ((2 * v130) | 1);
                    if (2 * v130 + 2 < v8)
                    {
                      v136 = *v131;
                      if (*(_DWORD *)(*v131 + 44) - *(_DWORD *)(*v131 + 36) <= (*(_DWORD *)(v131[9] + 44)
                                                                                                 - *(_DWORD *)(v131[9] + 36)))
                      {
                        v130 = (2 * v130) | 1;
                      }
                      else
                      {
                        v136 = v131[9];
                        v131 += 9;
                        v130 = 2 * v130 + 2;
                      }
                    }
                    else
                    {
                      v136 = *v131;
                      v130 = (2 * v130) | 1;
                    }
                    v133 = v137;
                  }
                  while (*(_DWORD *)(v136 + 44) - *(_DWORD *)(v136 + 36) <= (*(_DWORD *)(v134 + 44)
                                                                                          - *(_DWORD *)(v134 + 36)));
                  v143 = (std::__shared_weak_count *)v137[1];
                  *v137 = v134;
                  v137[1] = v220;
                  if (v143)
                  {
                    v144 = (unint64_t *)&v143->__shared_owners_;
                    do
                      v145 = __ldaxr(v144);
                    while (__stlxr(v145 - 1, v144));
                    if (!v145)
                    {
                      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                      std::__shared_weak_count::__release_weak(v143);
                    }
                  }
                  *((_OWORD *)v137 + 1) = v246;
                  *((_OWORD *)v137 + 2) = v233;
                  *((_OWORD *)v137 + 3) = v261;
                  *((_BYTE *)v137 + 64) = v269;
                  v128 = (unint64_t)a1;
                }
              }
              v127 = v129 - 1;
            }
            while (v129);
            v146 = v7 / 0x48uLL;
            v204 = v128 + 48;
            v147 = v214;
            do
            {
              v149 = 0;
              v150 = a1;
              v152 = *(_QWORD *)a1;
              v151 = *((_QWORD *)a1 + 1);
              *(_QWORD *)a1 = 0;
              *((_QWORD *)a1 + 1) = 0;
              v247 = *((_DWORD *)a1 + 4);
              v234 = *((_DWORD *)a1 + 5);
              v221 = *((_DWORD *)a1 + 6);
              v215 = *((_DWORD *)a1 + 7);
              v211 = *((_DWORD *)a1 + 8);
              v207 = *((_DWORD *)a1 + 10);
              v209 = *((_DWORD *)a1 + 9);
              v205 = *((_DWORD *)a1 + 11);
              v255 = *(_BYTE *)(v204 + 16);
              v252 = *(_OWORD *)v204;
              do
              {
                v154 = v150;
                v150 = (__int128 *)((char *)v150 + 72 * v149 + 72);
                if (2 * v149 + 2 >= v146)
                {
                  v155 = *(_QWORD *)v150;
                  v149 = (2 * v149) | 1;
                }
                else
                {
                  v155 = *(_QWORD *)v150;
                  if (*(_DWORD *)(*(_QWORD *)v150 + 44) - *(_DWORD *)(*(_QWORD *)v150 + 36) <= (*(_DWORD *)(*((_QWORD *)v150 + 9) + 44) - *(_DWORD *)(*((_QWORD *)v150 + 9) + 36)))
                  {
                    v149 = (2 * v149) | 1;
                  }
                  else
                  {
                    v155 = *((_QWORD *)v150 + 9);
                    v150 = (__int128 *)((char *)v150 + 72);
                    v149 = 2 * v149 + 2;
                  }
                }
                v156 = *((_QWORD *)v150 + 1);
                *(_QWORD *)v150 = 0;
                *((_QWORD *)v150 + 1) = 0;
                v157 = (std::__shared_weak_count *)*((_QWORD *)v154 + 1);
                *(_QWORD *)v154 = v155;
                *((_QWORD *)v154 + 1) = v156;
                if (v157)
                {
                  v158 = (unint64_t *)&v157->__shared_owners_;
                  do
                    v159 = __ldaxr(v158);
                  while (__stlxr(v159 - 1, v158));
                  if (!v159)
                  {
                    ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                    std::__shared_weak_count::__release_weak(v157);
                  }
                }
                *((_DWORD *)v154 + 4) = *((_DWORD *)v150 + 4);
                *((_DWORD *)v154 + 5) = *((_DWORD *)v150 + 5);
                *((_DWORD *)v154 + 6) = *((_DWORD *)v150 + 6);
                *((_DWORD *)v154 + 7) = *((_DWORD *)v150 + 7);
                *((_DWORD *)v154 + 8) = *((_DWORD *)v150 + 8);
                *((_DWORD *)v154 + 9) = *((_DWORD *)v150 + 9);
                *((_DWORD *)v154 + 10) = *((_DWORD *)v150 + 10);
                *((_DWORD *)v154 + 11) = *((_DWORD *)v150 + 11);
                v153 = v150[3];
                *((_BYTE *)v154 + 64) = *((_BYTE *)v150 + 64);
                v154[3] = v153;
              }
              while (v149 <= (uint64_t)((unint64_t)(v146 - 2) >> 1));
              v160 = v150 + 3;
              if (v150 == (__int128 *)((char *)v147 - 72))
              {
                v162 = (__int128 *)((char *)v147 - 72);
                v186 = (std::__shared_weak_count *)*((_QWORD *)v150 + 1);
                *(_QWORD *)v150 = v152;
                *((_QWORD *)v150 + 1) = v151;
                if (v186)
                {
                  v187 = (unint64_t *)&v186->__shared_owners_;
                  do
                    v188 = __ldaxr(v187);
                  while (__stlxr(v188 - 1, v187));
                  if (!v188)
                  {
                    ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                    std::__shared_weak_count::__release_weak(v186);
                  }
                }
                *((_DWORD *)v150 + 4) = v247;
                *((_DWORD *)v150 + 5) = v234;
                *((_DWORD *)v150 + 6) = v221;
                *((_DWORD *)v150 + 7) = v215;
                *((_DWORD *)v150 + 8) = v211;
                *((_DWORD *)v150 + 9) = v209;
                *((_DWORD *)v150 + 10) = v207;
                *((_DWORD *)v150 + 11) = v205;
                result = *(double *)&v252;
                *((_BYTE *)v150 + 64) = v255;
                *v160 = v252;
              }
              else
              {
                v161 = *(__int128 *)((char *)v147 - 72);
                *((_QWORD *)v147 - 9) = 0;
                *((_QWORD *)v147 - 8) = 0;
                v162 = (__int128 *)((char *)v147 - 72);
                v163 = (std::__shared_weak_count *)*((_QWORD *)v150 + 1);
                *v150 = v161;
                if (v163)
                {
                  v164 = (unint64_t *)&v163->__shared_owners_;
                  do
                    v165 = __ldaxr(v164);
                  while (__stlxr(v165 - 1, v164));
                  if (!v165)
                  {
                    ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                    std::__shared_weak_count::__release_weak(v163);
                  }
                }
                *((_DWORD *)v150 + 4) = *((_DWORD *)v147 - 14);
                *((_DWORD *)v150 + 5) = *((_DWORD *)v147 - 13);
                *((_DWORD *)v150 + 6) = *((_DWORD *)v147 - 12);
                *((_DWORD *)v150 + 7) = *((_DWORD *)v147 - 11);
                *((_DWORD *)v150 + 8) = *((_DWORD *)v147 - 10);
                *((_DWORD *)v150 + 9) = *((_DWORD *)v147 - 9);
                *((_DWORD *)v150 + 10) = *((_DWORD *)v147 - 8);
                *((_DWORD *)v150 + 11) = *((_DWORD *)v147 - 7);
                v166 = *(__int128 *)((char *)v147 - 24);
                *((_BYTE *)v150 + 64) = *((_BYTE *)v147 - 8);
                *v160 = v166;
                v167 = (std::__shared_weak_count *)*((_QWORD *)v147 - 8);
                *((_QWORD *)v147 - 9) = v152;
                *((_QWORD *)v147 - 8) = v151;
                if (v167)
                {
                  v168 = (unint64_t *)&v167->__shared_owners_;
                  do
                    v169 = __ldaxr(v168);
                  while (__stlxr(v169 - 1, v168));
                  if (!v169)
                  {
                    ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                    std::__shared_weak_count::__release_weak(v167);
                  }
                }
                v170 = (uint64_t)v147 - 24;
                *((_DWORD *)v147 - 14) = v247;
                *((_DWORD *)v147 - 13) = v234;
                *((_DWORD *)v147 - 12) = v221;
                *((_DWORD *)v147 - 11) = v215;
                *((_DWORD *)v147 - 10) = v211;
                *((_DWORD *)v147 - 9) = v209;
                *((_DWORD *)v147 - 8) = v207;
                *((_DWORD *)v147 - 7) = v205;
                result = *(double *)&v252;
                *(_BYTE *)(v170 + 16) = v255;
                *(_OWORD *)v170 = v252;
                v171 = (char *)v150 + 72 - (char *)a1;
                if (v171 >= 73)
                {
                  v172 = (v171 / 0x48uLL - 2) >> 1;
                  v173 = (_QWORD *)a1 + 9 * v172;
                  v174 = *(_QWORD *)v150;
                  if (*(_DWORD *)(*v173 + 44) - *(_DWORD *)(*v173 + 36) > (*(_DWORD *)(*(_QWORD *)v150 + 44)
                                                                                            - *(_DWORD *)(*(_QWORD *)v150 + 36)))
                  {
                    v175 = *((_QWORD *)v150 + 1);
                    *(_QWORD *)v150 = 0;
                    *((_QWORD *)v150 + 1) = 0;
                    v235 = v150[2];
                    v248 = v150[1];
                    v270 = *((_BYTE *)v150 + 64);
                    v262 = *v160;
                    v176 = *v173;
                    do
                    {
                      v177 = v173;
                      v178 = v173[1];
                      *v177 = 0;
                      v177[1] = 0;
                      v179 = (std::__shared_weak_count *)*((_QWORD *)v150 + 1);
                      *(_QWORD *)v150 = v176;
                      *((_QWORD *)v150 + 1) = v178;
                      if (v179)
                      {
                        v180 = (unint64_t *)&v179->__shared_owners_;
                        do
                          v181 = __ldaxr(v180);
                        while (__stlxr(v181 - 1, v180));
                        if (!v181)
                        {
                          ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                          std::__shared_weak_count::__release_weak(v179);
                        }
                      }
                      *((_DWORD *)v150 + 4) = *((_DWORD *)v177 + 4);
                      *((_DWORD *)v150 + 5) = *((_DWORD *)v177 + 5);
                      *((_DWORD *)v150 + 6) = *((_DWORD *)v177 + 6);
                      *((_DWORD *)v150 + 7) = *((_DWORD *)v177 + 7);
                      *((_DWORD *)v150 + 8) = *((_DWORD *)v177 + 8);
                      *((_DWORD *)v150 + 9) = *((_DWORD *)v177 + 9);
                      *((_DWORD *)v150 + 10) = *((_DWORD *)v177 + 10);
                      *((_DWORD *)v150 + 11) = *((_DWORD *)v177 + 11);
                      v182 = *((_OWORD *)v177 + 3);
                      *((_BYTE *)v150 + 64) = *((_BYTE *)v177 + 64);
                      v150[3] = v182;
                      if (!v172)
                        break;
                      v172 = (v172 - 1) >> 1;
                      v173 = (_QWORD *)a1 + 9 * v172;
                      v176 = *v173;
                      v150 = (__int128 *)v177;
                    }
                    while (*(_DWORD *)(*v173 + 44) - *(_DWORD *)(*v173 + 36) > (*(_DWORD *)(v174 + 44)
                                                                                                 - *(_DWORD *)(v174 + 36)));
                    v183 = (std::__shared_weak_count *)v177[1];
                    *v177 = v174;
                    v177[1] = v175;
                    if (v183)
                    {
                      v184 = (unint64_t *)&v183->__shared_owners_;
                      do
                        v185 = __ldaxr(v184);
                      while (__stlxr(v185 - 1, v184));
                      if (!v185)
                      {
                        ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                        std::__shared_weak_count::__release_weak(v183);
                      }
                    }
                    *((_OWORD *)v177 + 1) = v248;
                    *((_OWORD *)v177 + 2) = v235;
                    result = *(double *)&v262;
                    *((_OWORD *)v177 + 3) = v262;
                    *((_BYTE *)v177 + 64) = v270;
                  }
                }
              }
              v148 = v146-- <= 2;
              v147 = v162;
            }
            while (!v148);
          }
          return result;
        }
        v10 = (unint64_t)v8 >> 1;
        v11 = v6 + 72 * v10;
        if ((unint64_t)v7 < 0x2401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>((__int128 *)(v9 + 72 * v10), (__int128 *)v9, v208);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>((__int128 *)v9, (__int128 *)(v9 + 72 * v10), v208);
          v12 = (__int128 *)(v9 + 72);
          v13 = (__int128 *)(72 * v10 + v9 - 72);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>(v12, v13, a2 - 9);
          v14 = (__int128 *)((char *)v12 + 72 * v10);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>(a1 + 9, v14, (__int128 *)((char *)a2 - 216));
          v15 = v13;
          v9 = (unint64_t)a1;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>(v15, (__int128 *)v11, v14);
          v17 = *a1;
          v16 = a1[1];
          *(_QWORD *)a1 = 0;
          *((_QWORD *)a1 + 1) = 0;
          v264 = *((_BYTE *)a1 + 64);
          v18 = a1[2];
          v256 = a1[3];
          v19 = *(_OWORD *)v11;
          *(_QWORD *)v11 = 0;
          *(_QWORD *)(v11 + 8) = 0;
          v20 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
          *a1 = v19;
          if (v20)
          {
            v21 = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              v224 = v18;
              v237 = v16;
              v216 = v17;
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
              v17 = v216;
              v18 = v224;
              v16 = v237;
            }
          }
          v23 = (char *)a1 + 72 * v10;
          v25 = *((_OWORD *)v23 + 1);
          v24 = v23 + 16;
          v26 = *((_OWORD *)v24 + 1);
          a1[1] = v25;
          a1[2] = v26;
          v27 = v24[48];
          a1[3] = *((_OWORD *)v24 + 2);
          *((_BYTE *)a1 + 64) = v27;
          v28 = *(std::__shared_weak_count **)(v11 + 8);
          *(_OWORD *)v11 = v17;
          if (v28)
          {
            v29 = (unint64_t *)&v28->__shared_owners_;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              v225 = v18;
              v238 = v16;
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
              v18 = v225;
              v16 = v238;
            }
          }
          *(_OWORD *)v24 = v16;
          *((_OWORD *)v24 + 1) = v18;
          v24[48] = v264;
          *((_OWORD *)v24 + 2) = v256;
        }
        --a3;
        v31 = *(_QWORD *)v9;
        if ((a4 & 1) == 0
          && *(_DWORD *)(*(_QWORD *)(v9 - 72) + 44) - *(_DWORD *)(*(_QWORD *)(v9 - 72) + 36) <= (*(_DWORD *)(v31 + 44) - *(_DWORD *)(v31 + 36)))
        {
          v67 = *(_QWORD *)(v9 + 8);
          *(_QWORD *)v9 = 0;
          *(_QWORD *)(v9 + 8) = 0;
          v213 = *(_OWORD *)(v9 + 32);
          v218 = *(_OWORD *)(v9 + 16);
          v251 = *(_OWORD *)(v9 + 48);
          v254 = *(_BYTE *)(v9 + 64);
          v68 = *(_DWORD *)(v31 + 44) - *(_DWORD *)(v31 + 36);
          if (v68 <= *(_DWORD *)(*(_QWORD *)v208 + 44) - *(_DWORD *)(*(_QWORD *)v208 + 36))
          {
            v70 = v9 + 72;
            do
            {
              v6 = v70;
              if (v70 >= (unint64_t)a2)
                break;
              v70 += 72;
            }
            while (v68 <= *(_DWORD *)(*(_QWORD *)v6 + 44) - *(_DWORD *)(*(_QWORD *)v6 + 36));
          }
          else
          {
            v6 = v9;
            do
            {
              v69 = *(_QWORD *)(v6 + 72);
              v6 += 72;
            }
            while (v68 <= *(_DWORD *)(v69 + 44) - *(_DWORD *)(v69 + 36));
          }
          v71 = a2;
          if (v6 < (unint64_t)a2)
          {
            v71 = a2;
            do
            {
              v72 = *((_QWORD *)v71 - 9);
              v71 = (__int128 *)((char *)v71 - 72);
            }
            while (v68 > *(_DWORD *)(v72 + 44) - *(_DWORD *)(v72 + 36));
          }
          while (v6 < (unint64_t)v71)
          {
            v74 = *(_OWORD *)v6;
            v73 = *(_OWORD *)(v6 + 16);
            *(_QWORD *)v6 = 0;
            *(_QWORD *)(v6 + 8) = 0;
            v266 = *(_BYTE *)(v6 + 64);
            v75 = *(_OWORD *)(v6 + 32);
            v258 = *(_OWORD *)(v6 + 48);
            v76 = *v71;
            *(_QWORD *)v71 = 0;
            *((_QWORD *)v71 + 1) = 0;
            v77 = *(std::__shared_weak_count **)(v6 + 8);
            *(_OWORD *)v6 = v76;
            if (v77)
            {
              v78 = (unint64_t *)&v77->__shared_owners_;
              do
                v79 = __ldaxr(v78);
              while (__stlxr(v79 - 1, v78));
              if (!v79)
              {
                v228 = v75;
                v241 = v73;
                v223 = v74;
                ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                std::__shared_weak_count::__release_weak(v77);
                v74 = v223;
                v75 = v228;
                v73 = v241;
              }
            }
            *(_DWORD *)(v6 + 16) = *((_DWORD *)v71 + 4);
            *(_DWORD *)(v6 + 20) = *((_DWORD *)v71 + 5);
            *(_DWORD *)(v6 + 24) = *((_DWORD *)v71 + 6);
            *(_DWORD *)(v6 + 28) = *((_DWORD *)v71 + 7);
            *(_DWORD *)(v6 + 32) = *((_DWORD *)v71 + 8);
            *(_DWORD *)(v6 + 36) = *((_DWORD *)v71 + 9);
            *(_DWORD *)(v6 + 40) = *((_DWORD *)v71 + 10);
            *(_DWORD *)(v6 + 44) = *((_DWORD *)v71 + 11);
            v80 = v71[3];
            *(_BYTE *)(v6 + 64) = *((_BYTE *)v71 + 64);
            *(_OWORD *)(v6 + 48) = v80;
            v81 = (std::__shared_weak_count *)*((_QWORD *)v71 + 1);
            *v71 = v74;
            if (v81)
            {
              v82 = (unint64_t *)&v81->__shared_owners_;
              do
                v83 = __ldaxr(v82);
              while (__stlxr(v83 - 1, v82));
              if (!v83)
              {
                v229 = v75;
                v242 = v73;
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
                v75 = v229;
                v73 = v242;
              }
            }
            v71[1] = v73;
            v71[2] = v75;
            v71[3] = v258;
            *((_BYTE *)v71 + 64) = v266;
            v84 = *(_DWORD *)(v31 + 44) - *(_DWORD *)(v31 + 36);
            do
            {
              v85 = *(_QWORD *)(v6 + 72);
              v6 += 72;
            }
            while (v84 <= *(_DWORD *)(v85 + 44) - *(_DWORD *)(v85 + 36));
            do
            {
              v86 = *((_QWORD *)v71 - 9);
              v71 = (__int128 *)((char *)v71 - 72);
            }
            while (v84 > *(_DWORD *)(v86 + 44) - *(_DWORD *)(v86 + 36));
          }
          v87 = (__int128 *)(v6 - 72);
          if (v6 - 72 != v9)
          {
            v88 = *v87;
            *(_QWORD *)v87 = 0;
            *(_QWORD *)(v6 - 64) = 0;
            v89 = *(std::__shared_weak_count **)(v9 + 8);
            *(_OWORD *)v9 = v88;
            if (v89)
            {
              v90 = (unint64_t *)&v89->__shared_owners_;
              do
                v91 = __ldaxr(v90);
              while (__stlxr(v91 - 1, v90));
              if (!v91)
              {
                ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                std::__shared_weak_count::__release_weak(v89);
              }
            }
            *(_DWORD *)(v9 + 16) = *(_DWORD *)(v6 - 56);
            *(_DWORD *)(v9 + 20) = *(_DWORD *)(v6 - 52);
            *(_DWORD *)(v9 + 24) = *(_DWORD *)(v6 - 48);
            *(_DWORD *)(v9 + 28) = *(_DWORD *)(v6 - 44);
            *(_DWORD *)(v9 + 32) = *(_DWORD *)(v6 - 40);
            *(_DWORD *)(v9 + 36) = *(_DWORD *)(v6 - 36);
            *(_DWORD *)(v9 + 40) = *(_DWORD *)(v6 - 32);
            *(_DWORD *)(v9 + 44) = *(_DWORD *)(v6 - 28);
            v92 = *(_OWORD *)(v6 - 24);
            *(_BYTE *)(v9 + 64) = *(_BYTE *)(v6 - 8);
            *(_OWORD *)(v9 + 48) = v92;
          }
          v93 = *(std::__shared_weak_count **)(v6 - 64);
          *(_QWORD *)(v6 - 72) = v31;
          *(_QWORD *)(v6 - 64) = v67;
          if (v93)
          {
            v94 = (unint64_t *)&v93->__shared_owners_;
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
              std::__shared_weak_count::__release_weak(v93);
            }
          }
          a4 = 0;
          *(_OWORD *)(v6 - 56) = v218;
          *(_OWORD *)(v6 - 40) = v213;
          result = *(double *)&v251;
          *(_BYTE *)(v6 - 8) = v254;
          *(_OWORD *)(v6 - 24) = v251;
          continue;
        }
        v32 = *(_QWORD *)(v9 + 8);
        *(_QWORD *)v9 = 0;
        *(_QWORD *)(v9 + 8) = 0;
        v210 = *(_OWORD *)(v9 + 32);
        v212 = *(_OWORD *)(v9 + 16);
        v33 = v9 + 48;
        v250 = *(_OWORD *)(v9 + 48);
        v253 = *(_BYTE *)(v9 + 64);
        v34 = *(_DWORD *)(v31 + 44) - *(_DWORD *)(v31 + 36);
        v35 = v9;
        do
        {
          v36 = v35;
          v37 = *(_QWORD *)(v35 + 72);
          v35 += 72;
        }
        while (*(_DWORD *)(v37 + 44) - *(_DWORD *)(v37 + 36) > v34);
        v38 = a2;
        if (v36 == v9)
        {
          v38 = a2;
          do
          {
            if (v35 >= (unint64_t)v38)
              break;
            v40 = *((_QWORD *)v38 - 9);
            v38 = (__int128 *)((char *)v38 - 72);
          }
          while (*(_DWORD *)(v40 + 44) - *(_DWORD *)(v40 + 36) <= v34);
        }
        else
        {
          do
          {
            v39 = *((_QWORD *)v38 - 9);
            v38 = (__int128 *)((char *)v38 - 72);
          }
          while (*(_DWORD *)(v39 + 44) - *(_DWORD *)(v39 + 36) <= v34);
        }
        v6 = v35;
        if (v35 < (unint64_t)v38)
        {
          v41 = (unint64_t)v38;
          do
          {
            v43 = *(_OWORD *)v6;
            v42 = *(_OWORD *)(v6 + 16);
            *(_QWORD *)v6 = 0;
            *(_QWORD *)(v6 + 8) = 0;
            v265 = *(_BYTE *)(v6 + 64);
            v44 = *(_OWORD *)(v6 + 32);
            v257 = *(_OWORD *)(v6 + 48);
            v45 = *(_OWORD *)v41;
            *(_QWORD *)v41 = 0;
            *(_QWORD *)(v41 + 8) = 0;
            v46 = *(std::__shared_weak_count **)(v6 + 8);
            *(_OWORD *)v6 = v45;
            if (v46)
            {
              v47 = (unint64_t *)&v46->__shared_owners_;
              do
                v48 = __ldaxr(v47);
              while (__stlxr(v48 - 1, v47));
              if (!v48)
              {
                v226 = v44;
                v239 = v42;
                v217 = v43;
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
                v43 = v217;
                v44 = v226;
                v42 = v239;
              }
            }
            *(_DWORD *)(v6 + 16) = *(_DWORD *)(v41 + 16);
            *(_DWORD *)(v6 + 20) = *(_DWORD *)(v41 + 20);
            *(_DWORD *)(v6 + 24) = *(_DWORD *)(v41 + 24);
            *(_DWORD *)(v6 + 28) = *(_DWORD *)(v41 + 28);
            *(_DWORD *)(v6 + 32) = *(_DWORD *)(v41 + 32);
            *(_DWORD *)(v6 + 36) = *(_DWORD *)(v41 + 36);
            *(_DWORD *)(v6 + 40) = *(_DWORD *)(v41 + 40);
            *(_DWORD *)(v6 + 44) = *(_DWORD *)(v41 + 44);
            v49 = *(_OWORD *)(v41 + 48);
            *(_BYTE *)(v6 + 64) = *(_BYTE *)(v41 + 64);
            *(_OWORD *)(v6 + 48) = v49;
            v50 = *(std::__shared_weak_count **)(v41 + 8);
            *(_OWORD *)v41 = v43;
            if (v50)
            {
              v51 = (unint64_t *)&v50->__shared_owners_;
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                v227 = v44;
                v240 = v42;
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
                v44 = v227;
                v42 = v240;
              }
            }
            *(_OWORD *)(v41 + 16) = v42;
            *(_OWORD *)(v41 + 32) = v44;
            *(_OWORD *)(v41 + 48) = v257;
            *(_BYTE *)(v41 + 64) = v265;
            v53 = *(_DWORD *)(v31 + 44) - *(_DWORD *)(v31 + 36);
            do
            {
              v54 = *(_QWORD *)(v6 + 72);
              v6 += 72;
            }
            while (*(_DWORD *)(v54 + 44) - *(_DWORD *)(v54 + 36) > v53);
            do
            {
              v55 = *(_QWORD *)(v41 - 72);
              v41 -= 72;
            }
            while (*(_DWORD *)(v55 + 44) - *(_DWORD *)(v55 + 36) <= v53);
          }
          while (v6 < v41);
        }
        v56 = (__int128 *)(v6 - 72);
        if ((__int128 *)(v6 - 72) != a1)
        {
          v57 = *v56;
          *(_QWORD *)v56 = 0;
          *(_QWORD *)(v6 - 64) = 0;
          v58 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
          *a1 = v57;
          if (v58)
          {
            v59 = (unint64_t *)&v58->__shared_owners_;
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
          *((_DWORD *)a1 + 4) = *(_DWORD *)(v6 - 56);
          *((_DWORD *)a1 + 5) = *(_DWORD *)(v6 - 52);
          *((_DWORD *)a1 + 6) = *(_DWORD *)(v6 - 48);
          *((_DWORD *)a1 + 7) = *(_DWORD *)(v6 - 44);
          *((_DWORD *)a1 + 8) = *(_DWORD *)(v6 - 40);
          *((_DWORD *)a1 + 9) = *(_DWORD *)(v6 - 36);
          *((_DWORD *)a1 + 10) = *(_DWORD *)(v6 - 32);
          *((_DWORD *)a1 + 11) = *(_DWORD *)(v6 - 28);
          v61 = *(_OWORD *)(v6 - 24);
          *(_BYTE *)(v33 + 16) = *(_BYTE *)(v6 - 8);
          *(_OWORD *)v33 = v61;
        }
        v62 = *(std::__shared_weak_count **)(v6 - 64);
        *(_QWORD *)(v6 - 72) = v31;
        *(_QWORD *)(v6 - 64) = v32;
        if (v62)
        {
          v63 = (unint64_t *)&v62->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        *(_OWORD *)(v6 - 56) = v212;
        *(_OWORD *)(v6 - 40) = v210;
        *(_BYTE *)(v6 - 8) = v253;
        *(_OWORD *)(v6 - 24) = v250;
        if (v35 < (unint64_t)v38)
        {
LABEL_59:
          std::__introsort<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*,false>(a1, v6 - 72, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v65 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>(a1, (__int128 *)(v6 - 72));
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,ta2::TextureAtlas::sortRegionItems(std::vector<ta2::TextureAtlas::RegionItem> &)::$_0 &,ta2::TextureAtlas::RegionItem*>((__int128 *)v6, a2))
        {
          if (v65)
            continue;
          goto LABEL_59;
        }
        a2 = (__int128 *)(v6 - 72);
        if (!v65)
          goto LABEL_1;
        return result;
    }
  }
}

  n128_u64 = a2[-1].n128_u64;
  n128_f64 = a2[-2].n128_f64;
  v11 = a2[-3].n128_f64;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (char *)a2 - (char *)v12;
    v14 = a2 - v12;
    switch(v14)
    {
      case 0:
      case 1:
        return a5.n128_f64[0];
      case 2:
        a5.n128_u64[0] = *n128_u64;
        if (*(double *)n128_u64 < v12->n128_f64[0])
          goto LABEL_99;
        return a5.n128_f64[0];
      case 3:
        v60 = v12 + 1;
        a5.n128_u64[0] = v12[1].n128_u64[0];
        v61 = *(double *)n128_u64;
        if (a5.n128_f64[0] < v12->n128_f64[0])
        {
          if (v61 >= a5.n128_f64[0])
          {
            v124 = *v12;
            *v12 = *v60;
            *v60 = v124;
            a5.n128_u64[0] = *n128_u64;
            if (*(double *)n128_u64 >= v12[1].n128_f64[0])
              return a5.n128_f64[0];
            a5 = *v60;
            *v60 = *(__n128 *)n128_u64;
          }
          else
          {
LABEL_99:
            v120 = *v12;
            *v12 = *(__n128 *)n128_u64;
            a5 = v120;
          }
          *(__n128 *)n128_u64 = a5;
          return a5.n128_f64[0];
        }
        if (v61 < a5.n128_f64[0])
        {
          a5 = *v60;
          *v60 = *(__n128 *)n128_u64;
          *(__n128 *)n128_u64 = a5;
          a5.n128_u64[0] = v12[1].n128_u64[0];
          if (a5.n128_f64[0] < v12->n128_f64[0])
          {
            v123 = *v12;
            *v12 = *v60;
            a5.n128_u64[0] = v123.n128_u64[0];
            *v60 = v123;
          }
        }
        return a5.n128_f64[0];
      case 4:
        a5.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,-[LabelNavRouteLabeler(Debug) drawNavOverlayDebugView:navContext:]::$_0 &,gm::Range<double> *>(v12, v12[1].n128_f64, v12[2].n128_f64, a2[-1].n128_u64, a5).n128_u64[0];
        return a5.n128_f64[0];
      case 5:
        v62 = v12 + 1;
        v63 = v12 + 2;
        v64 = v12 + 3;
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,-[LabelNavRouteLabeler(Debug) drawNavOverlayDebugView:navContext:]::$_0 &,gm::Range<double> *>(v12, v12[1].n128_f64, v12[2].n128_f64, v12[3].n128_u64, a5);
        a5.n128_u64[0] = *n128_u64;
        if (*(double *)n128_u64 < v12[3].n128_f64[0])
        {
          a5 = *v64;
          *v64 = *(__n128 *)n128_u64;
          *(__n128 *)n128_u64 = a5;
          a5.n128_u64[0] = v64->n128_u64[0];
          if (v64->n128_f64[0] < v63->n128_f64[0])
          {
            a5 = *v63;
            *v63 = *v64;
            *v64 = a5;
            a5.n128_u64[0] = v63->n128_u64[0];
            if (v63->n128_f64[0] < v62->n128_f64[0])
            {
              a5 = *v62;
              *v62 = *v63;
              *v63 = a5;
              a5.n128_u64[0] = v12[1].n128_u64[0];
              if (a5.n128_f64[0] < v12->n128_f64[0])
              {
                v121 = *v12;
                *v12 = *v62;
                a5.n128_u64[0] = v121.n128_u64[0];
                *v62 = v121;
              }
            }
          }
        }
        return a5.n128_f64[0];
      default:
        if (v13 <= 383)
        {
          v65 = v12 + 1;
          v67 = v12 == a2 || v65 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v67)
            {
              v68 = 0;
              v69 = v12;
              do
              {
                v71 = v65;
                a5.n128_u64[0] = v69[1].n128_u64[0];
                if (a5.n128_f64[0] < v69->n128_f64[0])
                {
                  v72 = v69[1].n128_u64[1];
                  v73 = v68;
                  do
                  {
                    *(__n128 *)((char *)v12 + v73 + 16) = *(__n128 *)((char *)v12 + v73);
                    if (!v73)
                    {
                      v70 = v12;
                      goto LABEL_117;
                    }
                    v74 = *(double *)((char *)v12[-1].n128_f64 + v73);
                    v73 -= 16;
                  }
                  while (a5.n128_f64[0] < v74);
                  v70 = (__n128 *)((char *)v12 + v73 + 16);
LABEL_117:
                  v70->n128_u64[0] = a5.n128_u64[0];
                  v70->n128_u64[1] = v72;
                }
                v65 = v71 + 1;
                v68 += 16;
                v69 = v71;
              }
              while (&v71[1] != a2);
            }
          }
          else if (!v67)
          {
            do
            {
              v97 = v65;
              a5.n128_u64[0] = a1[1].n128_u64[0];
              if (a5.n128_f64[0] < a1->n128_f64[0])
              {
                v98 = a1[1].n128_u64[1];
                v99 = v65;
                do
                {
                  *v99 = v99[-1];
                  v100 = v99[-2].n128_f64[0];
                  --v99;
                }
                while (a5.n128_f64[0] < v100);
                v99->n128_u64[0] = a5.n128_u64[0];
                v99->n128_u64[1] = v98;
              }
              ++v65;
              a1 = v97;
            }
            while (&v97[1] != a2);
          }
          return a5.n128_f64[0];
        }
        if (!a3)
        {
          if (v12 != a2)
          {
            v75 = (unint64_t)(v14 - 2) >> 1;
            v76 = v75;
            do
            {
              if (v75 >= v76)
              {
                v78 = (2 * v76) | 1;
                v79 = v12[v78].n128_f64;
                if (2 * v76 + 2 < v14 && *v79 < v79[2])
                {
                  v79 += 2;
                  v78 = 2 * v76 + 2;
                }
                v80 = &v12[v76];
                v81 = v80->n128_f64[0];
                if (*v79 >= v80->n128_f64[0])
                {
                  v82 = v80->n128_u64[1];
                  do
                  {
                    v83 = v80;
                    v80 = (__n128 *)v79;
                    *v83 = *(__n128 *)v79;
                    if (v75 < v78)
                      break;
                    v84 = 2 * v78;
                    v78 = (2 * v78) | 1;
                    v79 = v12[v78].n128_f64;
                    v85 = v84 + 2;
                    if (v85 < v14 && *v79 < v79[2])
                    {
                      v79 += 2;
                      v78 = v85;
                    }
                  }
                  while (*v79 >= v81);
                  v80->n128_f64[0] = v81;
                  v80->n128_u64[1] = v82;
                }
              }
              v77 = v76-- <= 0;
            }
            while (!v77);
            v86 = (unint64_t)v13 >> 4;
            do
            {
              v87 = 0;
              v122 = *v12;
              v88 = v12;
              do
              {
                v89 = v88;
                v88 += v87 + 1;
                v90 = 2 * v87;
                v87 = (2 * v87) | 1;
                v91 = v90 + 2;
                if (v91 < v86 && v88->n128_f64[0] < v88[1].n128_f64[0])
                {
                  ++v88;
                  v87 = v91;
                }
                *v89 = *v88;
              }
              while (v87 <= (uint64_t)((unint64_t)(v86 - 2) >> 1));
              if (v88 == --a2)
              {
                a5.n128_u64[0] = v122.n128_u64[0];
                *v88 = v122;
              }
              else
              {
                *v88 = *a2;
                a5.n128_u64[0] = v122.n128_u64[0];
                *a2 = v122;
                v92 = (char *)v88 - (char *)v12 + 16;
                if (v92 >= 17)
                {
                  v93 = (((unint64_t)v92 >> 4) - 2) >> 1;
                  v94 = &v12[v93];
                  a5.n128_u64[0] = v88->n128_u64[0];
                  if (v94->n128_f64[0] < v88->n128_f64[0])
                  {
                    v95 = v88->n128_u64[1];
                    do
                    {
                      v96 = v88;
                      v88 = v94;
                      *v96 = *v94;
                      if (!v93)
                        break;
                      v93 = (v93 - 1) >> 1;
                      v94 = &v12[v93];
                    }
                    while (v94->n128_f64[0] < a5.n128_f64[0]);
                    v88->n128_u64[0] = a5.n128_u64[0];
                    v88->n128_u64[1] = v95;
                  }
                }
              }
              v77 = v86-- <= 2;
            }
            while (!v77);
          }
          return a5.n128_f64[0];
        }
        v15 = (unint64_t)v14 >> 1;
        v16 = v12[(unint64_t)v14 >> 1].n128_f64;
        v17 = *(double *)n128_u64;
        if ((unint64_t)v13 >= 0x801)
        {
          v18 = *v16;
          if (*v16 >= v12->n128_f64[0])
          {
            if (v17 < v18)
            {
              v104 = *(__n128 *)v16;
              *(_OWORD *)v16 = *(_OWORD *)n128_u64;
              *(__n128 *)n128_u64 = v104;
              if (*v16 < v12->n128_f64[0])
              {
                v105 = *v12;
                *v12 = *(__n128 *)v16;
                *(__n128 *)v16 = v105;
              }
            }
          }
          else
          {
            if (v17 < v18)
            {
              v102 = *v12;
              *v12 = *(__n128 *)n128_u64;
              goto LABEL_20;
            }
            v108 = *v12;
            *v12 = *(__n128 *)v16;
            *(__n128 *)v16 = v108;
            if (*(double *)n128_u64 < *v16)
            {
              v102 = *(__n128 *)v16;
              *(_OWORD *)v16 = *(_OWORD *)n128_u64;
LABEL_20:
              *(__n128 *)n128_u64 = v102;
            }
          }
          v20 = v12 + 1;
          v21 = &v12[v15];
          v23 = v21[-1].n128_f64[0];
          v22 = v21 - 1;
          v24 = v23;
          v25 = *n128_f64;
          if (v23 >= v12[1].n128_f64[0])
          {
            if (v25 < v24)
            {
              v109 = *v22;
              *v22 = *(__n128 *)n128_f64;
              *(__n128 *)n128_f64 = v109;
              if (v22->n128_f64[0] < v20->n128_f64[0])
              {
                v27 = *v20;
                *v20 = *v22;
                *v22 = v27;
              }
            }
          }
          else
          {
            if (v25 < v24)
            {
              v26 = *v20;
              *v20 = *(__n128 *)n128_f64;
              goto LABEL_32;
            }
            v28 = *v20;
            *v20 = *v22;
            *v22 = v28;
            if (*n128_f64 < v22->n128_f64[0])
            {
              v111 = *v22;
              *v22 = *(__n128 *)n128_f64;
              v26 = v111;
LABEL_32:
              *(__n128 *)n128_f64 = v26;
            }
          }
          v29 = v12 + 2;
          v30 = &v12[v15];
          v32 = v30[1].n128_f64[0];
          v31 = v30 + 1;
          v33 = v32;
          v34 = *v11;
          if (v32 >= v12[2].n128_f64[0])
          {
            if (v34 < v33)
            {
              v112 = *v31;
              *v31 = *(__n128 *)v11;
              *(__n128 *)v11 = v112;
              if (v31->n128_f64[0] < v29->n128_f64[0])
              {
                v36 = *v29;
                *v29 = *v31;
                *v31 = v36;
              }
            }
          }
          else
          {
            if (v34 < v33)
            {
              v35 = *v29;
              *v29 = *(__n128 *)v11;
              goto LABEL_41;
            }
            v37 = *v29;
            *v29 = *v31;
            *v31 = v37;
            if (*v11 < v31->n128_f64[0])
            {
              v113 = *v31;
              *v31 = *(__n128 *)v11;
              v35 = v113;
LABEL_41:
              *(__n128 *)v11 = v35;
            }
          }
          v38 = *v16;
          v39 = v31->n128_f64[0];
          if (*v16 >= v22->n128_f64[0])
          {
            if (v39 < v38)
            {
              v115 = *(__n128 *)v16;
              *(__n128 *)v16 = *v31;
              *v31 = v115;
              if (*v16 < v22->n128_f64[0])
              {
                v116 = *v22;
                *v22 = *(__n128 *)v16;
                *(__n128 *)v16 = v116;
              }
            }
          }
          else
          {
            if (v39 < v38)
            {
              v114 = *v22;
              *v22 = *v31;
              goto LABEL_50;
            }
            v117 = *v22;
            *v22 = *(__n128 *)v16;
            *(__n128 *)v16 = v117;
            if (v31->n128_f64[0] < *v16)
            {
              v114 = *(__n128 *)v16;
              *(__n128 *)v16 = *v31;
LABEL_50:
              *v31 = v114;
            }
          }
          v118 = *v12;
          *v12 = *(__n128 *)v16;
          a5.n128_u64[1] = v118.n128_u64[1];
          *(__n128 *)v16 = v118;
          goto LABEL_52;
        }
        v19 = v12->n128_f64[0];
        if (v12->n128_f64[0] >= *v16)
        {
          if (v17 < v19)
          {
            v106 = *v12;
            *v12 = *(__n128 *)n128_u64;
            a5.n128_u64[1] = v106.n128_u64[1];
            *(__n128 *)n128_u64 = v106;
            if (v12->n128_f64[0] < *v16)
            {
              v107 = *(__n128 *)v16;
              *(__n128 *)v16 = *v12;
              a5.n128_u64[1] = v107.n128_u64[1];
              *v12 = v107;
            }
          }
        }
        else
        {
          if (v17 >= v19)
          {
            v110 = *(__n128 *)v16;
            *(__n128 *)v16 = *v12;
            a5.n128_u64[1] = v110.n128_u64[1];
            *v12 = v110;
            if (*(double *)n128_u64 >= v12->n128_f64[0])
              goto LABEL_52;
            v103 = *v12;
            *v12 = *(__n128 *)n128_u64;
          }
          else
          {
            v103 = *(__n128 *)v16;
            *(_OWORD *)v16 = *(_OWORD *)n128_u64;
          }
          a5.n128_u64[1] = v103.n128_u64[1];
          *(__n128 *)n128_u64 = v103;
        }
LABEL_52:
        --a3;
        a5.n128_u64[0] = v12->n128_u64[0];
        if ((a4 & 1) == 0 && v12[-1].n128_f64[0] >= a5.n128_f64[0])
        {
          if (a5.n128_f64[0] >= *(double *)n128_u64)
          {
            v54 = v12 + 1;
            do
            {
              v12 = v54;
              if (v54 >= a2)
                break;
              ++v54;
            }
            while (a5.n128_f64[0] >= v12->n128_f64[0]);
          }
          else
          {
            do
            {
              v53 = v12[1].n128_f64[0];
              ++v12;
            }
            while (a5.n128_f64[0] >= v53);
          }
          v55 = a2;
          if (v12 < a2)
          {
            v55 = a2;
            do
            {
              v56 = v55[-1].n128_f64[0];
              --v55;
            }
            while (a5.n128_f64[0] < v56);
          }
          v57 = a1->n128_u64[1];
          while (v12 < v55)
          {
            v119 = *v12;
            *v12 = *v55;
            *v55 = v119;
            do
            {
              v58 = v12[1].n128_f64[0];
              ++v12;
            }
            while (a5.n128_f64[0] >= v58);
            do
            {
              v59 = v55[-1].n128_f64[0];
              --v55;
            }
            while (a5.n128_f64[0] < v59);
          }
          if (&v12[-1] != a1)
            *a1 = v12[-1];
          a4 = 0;
          v12[-1].n128_u64[0] = a5.n128_u64[0];
          v12[-1].n128_u64[1] = v57;
          continue;
        }
        v40 = v12->n128_u64[1];
        v41 = v12;
        do
        {
          v42 = v41;
          v43 = v41[1].n128_f64[0];
          ++v41;
        }
        while (v43 < a5.n128_f64[0]);
        v44 = a2;
        if (v42 == v12)
        {
          v44 = a2;
          do
          {
            if (v41 >= v44)
              break;
            v46 = v44[-1].n128_f64[0];
            --v44;
          }
          while (v46 >= a5.n128_f64[0]);
        }
        else
        {
          do
          {
            v45 = v44[-1].n128_f64[0];
            --v44;
          }
          while (v45 >= a5.n128_f64[0]);
        }
        v12 = v41;
        if (v41 < v44)
        {
          v47 = v44;
          do
          {
            v48 = *v12;
            *v12 = *v47;
            *v47 = v48;
            do
            {
              v49 = v12[1].n128_f64[0];
              ++v12;
            }
            while (v49 < a5.n128_f64[0]);
            do
            {
              v50 = v47[-1].n128_f64[0];
              --v47;
            }
            while (v50 >= a5.n128_f64[0]);
          }
          while (v12 < v47);
        }
        if (&v12[-1] != a1)
          *a1 = v12[-1];
        v12[-1].n128_u64[0] = a5.n128_u64[0];
        v12[-1].n128_u64[1] = v40;
        if (v41 < v44)
        {
LABEL_73:
          std::__introsort<std::_ClassicAlgPolicy,-[LabelNavRouteLabeler(Debug) drawNavOverlayDebugView:navContext:]::$_0 &,gm::Range<double> *,false>(a1, &v12[-1], a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v51 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,-[LabelNavRouteLabeler(Debug) drawNavOverlayDebugView:navContext:]::$_0 &,gm::Range<double> *>(a1, v12 - 1, a5);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,-[LabelNavRouteLabeler(Debug) drawNavOverlayDebugView:navContext:]::$_0 &,gm::Range<double> *>(v12, a2, v52))
        {
          if (v51)
            continue;
          goto LABEL_73;
        }
        a2 = v12 - 1;
        if (!v51)
          goto LABEL_1;
        return a5.n128_f64[0];
    }
  }
}

  v7 = a2 - 233;
  v8 = a2 - 223;
  v47 = a2 - 689;
  v48 = a2 - 456;
  v9 = a1;
  while (2)
  {
    v10 = a3 - 1;
LABEL_3:
    a1 = v9;
    a3 = v10;
    v11 = (char *)a2 - (char *)v9;
    v12 = 0x63FB9AEB1FDCD759 * (a2 - v9);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*v8 < (unint64_t)v9[10])
          goto LABEL_68;
        return;
      case 3uLL:
        v40 = v9 + 233;
        v41 = v9[243];
        v42 = *v8;
        if (v41 < v9[10])
        {
          if (v42 >= v41)
          {
            std::swap[abi:nn180100]<md::mun::CollectionPoint>(v9, v9 + 233);
            if (*v8 >= (unint64_t)v9[243])
              return;
            v43 = v9 + 233;
          }
          else
          {
LABEL_68:
            v43 = v9;
          }
          v44 = v7;
          goto LABEL_70;
        }
        if (v42 < v41)
        {
          v45 = v9 + 233;
          v46 = v7;
LABEL_81:
          std::swap[abi:nn180100]<md::mun::CollectionPoint>(v45, v46);
          if (v9[243] < (unint64_t)v9[10])
          {
            v43 = v9;
            v44 = v40;
LABEL_70:
            std::swap[abi:nn180100]<md::mun::CollectionPoint>(v43, v44);
          }
        }
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_0 &,md::mun::CollectionPoint *>(v9, v9 + 233, v9 + 466, v7);
        return;
      case 5uLL:
        v40 = v9 + 233;
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_0 &,md::mun::CollectionPoint *>(v9, v9 + 233, v9 + 466, v9 + 699);
        if (*v8 >= (unint64_t)v9[709])
          return;
        std::swap[abi:nn180100]<md::mun::CollectionPoint>(v9 + 699, v7);
        if (v9[709] >= (unint64_t)v9[476])
          return;
        std::swap[abi:nn180100]<md::mun::CollectionPoint>(v9 + 466, v9 + 699);
        if (v9[476] >= (unint64_t)v9[243])
          return;
        v45 = v9 + 233;
        v46 = v9 + 466;
        goto LABEL_81;
      default:
        if (v11 > 44735)
        {
          if (a3 == -1)
          {
            std::__partial_sort[abi:nn180100]<std::_ClassicAlgPolicy,md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_0 &,md::mun::CollectionPoint *,md::mun::CollectionPoint *>((uint64_t)v9, a2, a2);
            return;
          }
          v13 = v12 >> 1;
          v14 = &v9[233 * (v12 >> 1)];
          v15 = *v8;
          if ((unint64_t)v11 >= 0x3A401)
          {
            v16 = v14[10];
            if (v16 < v9[10])
            {
              v17 = v9;
              if (v15 >= v16)
              {
                std::swap[abi:nn180100]<md::mun::CollectionPoint>(v9, v14);
                if (*v8 >= (unint64_t)v14[10])
                  goto LABEL_21;
                v17 = v14;
              }
              v18 = v7;
              goto LABEL_20;
            }
            if (v15 < v16)
            {
              std::swap[abi:nn180100]<md::mun::CollectionPoint>(v14, v7);
              if (v14[10] < (unint64_t)v9[10])
              {
                v17 = v9;
                v18 = v14;
LABEL_20:
                std::swap[abi:nn180100]<md::mun::CollectionPoint>(v17, v18);
              }
            }
LABEL_21:
            v22 = v7;
            v23 = v9[233 * v13 - 223];
            v24 = *v48;
            if (v23 < v9[243])
            {
              v25 = v9 + 233;
              if (v24 >= v23)
              {
                std::swap[abi:nn180100]<md::mun::CollectionPoint>(v25, &v9[233 * v13 - 233]);
                if (*v48 >= (unint64_t)v9[233 * v13 - 223])
                  goto LABEL_36;
                v25 = &v9[233 * v13 - 233];
              }
              v26 = a2 - 466;
              goto LABEL_35;
            }
            if (v24 < v23)
            {
              std::swap[abi:nn180100]<md::mun::CollectionPoint>(&v9[233 * v13 - 233], a2 - 466);
              if (v9[233 * v13 - 223] < (unint64_t)v9[243])
              {
                v25 = v9 + 233;
                v26 = &v9[233 * v13 - 233];
LABEL_35:
                std::swap[abi:nn180100]<md::mun::CollectionPoint>(v25, v26);
              }
            }
LABEL_36:
            v27 = &v9[233 * v13];
            v28 = v27 + 233;
            v29 = v27[243];
            v30 = *v47;
            if (v29 < v9[476])
            {
              v31 = v9 + 466;
              if (v30 >= v29)
              {
                std::swap[abi:nn180100]<md::mun::CollectionPoint>(v31, v28);
                if (*v47 >= (unint64_t)v28[10])
                  goto LABEL_45;
                v31 = v28;
              }
              v32 = a2 - 699;
              goto LABEL_44;
            }
            if (v30 < v29)
            {
              std::swap[abi:nn180100]<md::mun::CollectionPoint>(v28, a2 - 699);
              if (v28[10] < (unint64_t)v9[476])
              {
                v31 = v9 + 466;
                v32 = v28;
LABEL_44:
                std::swap[abi:nn180100]<md::mun::CollectionPoint>(v31, v32);
              }
            }
LABEL_45:
            v33 = v14[10];
            v34 = v28[10];
            if (v33 < v9[233 * v13 - 223])
            {
              v35 = &v9[233 * v13 - 233];
              if (v34 >= v33)
              {
                std::swap[abi:nn180100]<md::mun::CollectionPoint>(v35, v14);
                if (v28[10] >= (unint64_t)v14[10])
                  goto LABEL_54;
                v35 = v14;
              }
              v36 = v28;
              goto LABEL_53;
            }
            if (v34 < v33)
            {
              std::swap[abi:nn180100]<md::mun::CollectionPoint>(v14, v28);
              if (v14[10] < (unint64_t)v9[233 * v13 - 223])
              {
                v35 = &v9[233 * v13 - 233];
                v36 = v14;
LABEL_53:
                std::swap[abi:nn180100]<md::mun::CollectionPoint>(v35, v36);
              }
            }
LABEL_54:
            std::swap[abi:nn180100]<md::mun::CollectionPoint>(v9, v14);
            v7 = v22;
            if ((a4 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v9 - 223) < (unint64_t)v9[10])
              goto LABEL_56;
            v9 = std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,md::mun::CollectionPoint *,md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_0 &>((uint64_t)v9, a2);
            a4 = 0;
            continue;
          }
          v19 = v9[10];
          if (v19 < v14[10])
          {
            v20 = v14;
            if (v15 >= v19)
            {
              std::swap[abi:nn180100]<md::mun::CollectionPoint>(v14, v9);
              if (*v8 >= (unint64_t)v9[10])
                goto LABEL_30;
              v20 = v9;
            }
            v21 = v7;
            goto LABEL_29;
          }
          if (v15 < v19)
          {
            std::swap[abi:nn180100]<md::mun::CollectionPoint>(v9, v7);
            if (v9[10] < (unint64_t)v14[10])
            {
              v20 = v14;
              v21 = v9;
LABEL_29:
              std::swap[abi:nn180100]<md::mun::CollectionPoint>(v20, v21);
            }
          }
LABEL_30:
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v37 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,md::mun::CollectionPoint *,md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_0 &>((uint64_t)v9, a2);
          if ((v38 & 1) == 0)
            goto LABEL_59;
          v39 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_0 &,md::mun::CollectionPoint *>(v9, v37);
          v9 = v37 + 233;
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_0 &,md::mun::CollectionPoint *>(v37 + 233, a2))
          {
            v10 = a3 - 1;
            if (v39)
              goto LABEL_3;
LABEL_59:
            std::__introsort<std::_ClassicAlgPolicy,md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_0 &,md::mun::CollectionPoint *,false>(a1, v37, a3, a4 & 1);
            a4 = 0;
            v9 = v37 + 233;
            continue;
          }
          a2 = v37;
          if (v39)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) != 0)
          std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_0 &,md::mun::CollectionPoint *>(v9, a2);
        else
          std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,md::mun::MuninOverlayRenderLayer::debugLayout(md::LayoutContext const&)::$_0 &,md::mun::CollectionPoint *>(v9, a2);
        return;
    }
  }
}

  v9 = (unsigned int *)(a2 - 16);
  i = a1;
  while (2)
  {
    a1 = i;
    v11 = a2 - i;
    v12 = (uint64_t)(a2 - i) >> 4;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return a5.n128_f64[0];
      case 2uLL:
        v57 = *v9 >= *(_DWORD *)i;
        if (*v9 != *(_DWORD *)i)
          goto LABEL_129;
        a5.n128_u32[0] = *(_DWORD *)(a2 - 12);
        v58 = *(float *)(i + 4);
        if (vabds_f32(a5.n128_f32[0], v58) >= 0.00000011921)
        {
          if (a5.n128_f32[0] >= v58)
            return a5.n128_f64[0];
        }
        else
        {
          v57 = *(_QWORD *)(a2 - 8) >= *(_QWORD *)(i + 8);
LABEL_129:
          if (v57)
            return a5.n128_f64[0];
        }
        v133 = *(_OWORD *)i;
        *(_OWORD *)i = *(_OWORD *)v9;
        a5.n128_u64[0] = v133;
        *(_OWORD *)v9 = v133;
        return a5.n128_f64[0];
      case 3uLL:
        a5.n128_u64[0] = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(i, (int *)(i + 16), a2 - 16, a5).n128_u64[0];
        return a5.n128_f64[0];
      case 4uLL:
        a5.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(i, i + 16, i + 32, a2 - 16, a5).n128_u64[0];
        return a5.n128_f64[0];
      case 5uLL:
        a5.n128_u64[0] = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(i, i + 16, i + 32, i + 48, a2 - 16, a5).n128_u64[0];
        return a5.n128_f64[0];
      default:
        if (v11 <= 383)
        {
          v59 = (_OWORD *)(i + 16);
          v61 = i == a2 || v59 == (_OWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (v61)
              return a5.n128_f64[0];
            v62 = 0;
            a5.n128_u64[0] = 0x3400000034000000;
            v63 = (_OWORD *)i;
            while (1)
            {
              v65 = v63;
              v63 = v59;
              v66 = *((_DWORD *)v65 + 4);
              if (v66 == *(_DWORD *)v65)
              {
                v67 = *((float *)v65 + 5);
                v68 = *((float *)v65 + 1);
                if (vabds_f32(v67, v68) >= 0.00000011921)
                {
                  if (v67 >= v68)
                    goto LABEL_145;
                }
                else if (*((_QWORD *)v65 + 3) >= *((_QWORD *)v65 + 1))
                {
                  goto LABEL_145;
                }
              }
              else
              {
                if (v66 >= *(_DWORD *)v65)
                  goto LABEL_145;
                v67 = *((float *)v65 + 5);
              }
              v69 = *((_QWORD *)v65 + 3);
              *v63 = *v65;
              v64 = i;
              if (v65 == (_OWORD *)i)
                goto LABEL_144;
              v70 = v62;
              while (1)
              {
                v71 = (float *)(i + v70);
                v72 = *(_DWORD *)(i + v70 - 16);
                if (v66 != v72)
                {
                  if (v66 >= v72)
                    goto LABEL_163;
                  goto LABEL_156;
                }
                v73 = *(v71 - 3);
                if (vabds_f32(v67, v73) < 0.00000011921)
                  break;
                if (v67 >= v73)
                {
                  v64 = i + v70;
                  goto LABEL_144;
                }
LABEL_156:
                --v65;
                *(_OWORD *)v71 = *(_OWORD *)(i + v70 - 16);
                v70 -= 16;
                if (!v70)
                {
                  v64 = i;
                  goto LABEL_144;
                }
              }
              if (v69 < *(_QWORD *)(i + v70 - 8))
                goto LABEL_156;
LABEL_163:
              v64 = (unint64_t)v65;
LABEL_144:
              *(_DWORD *)v64 = v66;
              *(float *)(v64 + 4) = v67;
              *(_QWORD *)(v64 + 8) = v69;
LABEL_145:
              v59 = v63 + 1;
              v62 += 16;
              if (v63 + 1 == (_OWORD *)a2)
                return a5.n128_f64[0];
            }
          }
          if (v61)
            return a5.n128_f64[0];
          a5.n128_u64[0] = 0x3400000034000000;
          while (1)
          {
            v119 = a1;
            a1 = (uint64_t)v59;
            v120 = *(_DWORD *)(v119 + 16);
            if (v120 == *(_DWORD *)v119)
            {
              v121 = *(float *)(v119 + 20);
              v122 = *(float *)(v119 + 4);
              if (vabds_f32(v121, v122) >= 0.00000011921)
              {
                if (v121 >= v122)
                  goto LABEL_242;
              }
              else if (*(_QWORD *)(v119 + 24) >= *(_QWORD *)(v119 + 8))
              {
                goto LABEL_242;
              }
            }
            else
            {
              if (v120 >= *(_DWORD *)v119)
                goto LABEL_242;
              v121 = *(float *)(v119 + 20);
            }
            v123 = *(_QWORD *)(v119 + 24);
            do
            {
              while (1)
              {
                while (1)
                {
                  v124 = v119;
                  *(_OWORD *)(v119 + 16) = *(_OWORD *)v119;
                  v125 = *(_DWORD *)(v119 - 16);
                  v119 -= 16;
                  v126 = v120 >= v125;
                  if (v120 == v125)
                    break;
                  if (v126)
                    goto LABEL_241;
                }
                v127 = *(float *)(v124 - 12);
                if (vabds_f32(v121, v127) >= 0.00000011921)
                  break;
                if (v123 >= *(_QWORD *)(v124 - 8))
                  goto LABEL_241;
              }
            }
            while (v121 < v127);
LABEL_241:
            *(_DWORD *)v124 = v120;
            *(float *)(v124 + 4) = v121;
            *(_QWORD *)(v124 + 8) = v123;
LABEL_242:
            v59 = (_OWORD *)(a1 + 16);
            if (a1 + 16 == a2)
              return a5.n128_f64[0];
          }
        }
        if (!a3)
        {
          if (i == a2)
            return a5.n128_f64[0];
          v74 = (v12 - 2) >> 1;
          v75 = v74;
          while (1)
          {
            v77 = v75;
            if (v74 < v75)
              goto LABEL_168;
            v78 = (2 * v75) | 1;
            v76 = i + 16 * v78;
            if (2 * v77 + 2 >= (uint64_t)v12)
              goto LABEL_176;
            v79 = *(_DWORD *)(v76 + 16);
            v80 = *(_DWORD *)v76 >= v79;
            if (*(_DWORD *)v76 == v79)
            {
              v81 = *(float *)(v76 + 4);
              v82 = *(float *)(v76 + 20);
              if (vabds_f32(v81, v82) >= 0.00000011921)
              {
                if (v81 >= v82)
                  goto LABEL_176;
LABEL_175:
                v76 += 16;
                v78 = 2 * v77 + 2;
                goto LABEL_176;
              }
              v80 = *(_QWORD *)(i + 16 * v78 + 8) >= *(_QWORD *)(v76 + 24);
            }
            if (!v80)
              goto LABEL_175;
LABEL_176:
            v83 = i + 16 * v77;
            v84 = *(_DWORD *)v83;
            if (*(_DWORD *)v76 == *(_DWORD *)v83)
            {
              v85 = *(float *)(v76 + 4);
              v86 = *(float *)(v83 + 4);
              if (vabds_f32(v85, v86) >= 0.00000011921)
              {
                if (v85 < v86)
                  goto LABEL_168;
              }
              else if (*(_QWORD *)(v76 + 8) < *(_QWORD *)(i + 16 * v77 + 8))
              {
                goto LABEL_168;
              }
            }
            else
            {
              if (*(_DWORD *)v76 < v84)
                goto LABEL_168;
              v86 = *(float *)(v83 + 4);
            }
            v87 = *(_QWORD *)(v83 + 8);
            do
            {
              while (1)
              {
                while (1)
                {
                  *(_OWORD *)v83 = *(_OWORD *)v76;
                  if (v74 < v78)
                    goto LABEL_167;
                  v83 = v76;
                  v88 = 2 * v78;
                  v78 = (2 * v78) | 1;
                  v76 = i + 16 * v78;
                  v89 = v88 + 2;
                  if (v89 < (uint64_t)v12)
                  {
                    v90 = *(_DWORD *)(v76 + 16);
                    v91 = *(_DWORD *)v76 >= v90;
                    if (*(_DWORD *)v76 != v90)
                      goto LABEL_190;
                    v92 = *(float *)(v76 + 4);
                    v93 = *(float *)(v76 + 20);
                    if (vabds_f32(v92, v93) < 0.00000011921)
                    {
                      v91 = *(_QWORD *)(i + 16 * v78 + 8) >= *(_QWORD *)(v76 + 24);
LABEL_190:
                      if (v91)
                        goto LABEL_192;
LABEL_191:
                      v76 += 16;
                      v78 = v89;
                      goto LABEL_192;
                    }
                    if (v92 < v93)
                      goto LABEL_191;
                  }
LABEL_192:
                  if (*(_DWORD *)v76 == v84)
                    break;
                  if (*(_DWORD *)v76 < v84)
                    goto LABEL_166;
                }
                v94 = *(float *)(v76 + 4);
                if (vabds_f32(v94, v86) >= 0.00000011921)
                  break;
                if (*(_QWORD *)(v76 + 8) < v87)
                  goto LABEL_166;
              }
            }
            while (v94 >= v86);
LABEL_166:
            v76 = v83;
LABEL_167:
            *(_DWORD *)v76 = v84;
            *(float *)(v76 + 4) = v86;
            *(_QWORD *)(v76 + 8) = v87;
LABEL_168:
            v75 = v77 - 1;
            if (!v77)
            {
              v95 = (unint64_t)v11 >> 4;
              a5.n128_u64[0] = 0x3400000034000000;
              while (2)
              {
                if (v95 < 2)
                  goto LABEL_204;
                v97 = 0;
                v132 = *(_OWORD *)i;
                v98 = i;
LABEL_210:
                v99 = (_OWORD *)v98;
                v100 = v97 + 1;
                v98 += 16 * (v97 + 1);
                v101 = 2 * v97;
                v97 = (2 * v97) | 1;
                v102 = v101 + 2;
                if (v102 < v95)
                {
                  v103 = *(_DWORD *)(v98 + 16);
                  v104 = *(_DWORD *)v98 >= v103;
                  if (*(_DWORD *)v98 != v103)
                    goto LABEL_214;
                  v105 = *(float *)(v98 + 4);
                  v106 = *(float *)(v98 + 20);
                  if (vabds_f32(v105, v106) >= 0.00000011921)
                  {
                    if (v105 < v106)
                      goto LABEL_208;
                  }
                  else
                  {
                    v104 = *((_QWORD *)&v99[v100] + 1) >= *(_QWORD *)(v98 + 24);
LABEL_214:
                    if (!v104)
                    {
LABEL_208:
                      v98 += 16;
                      v97 = v102;
                    }
                  }
                }
                *v99 = *(_OWORD *)v98;
                if (v97 > (uint64_t)((unint64_t)(v95 - 2) >> 1))
                {
                  v107 = (_OWORD *)(a2 - 16);
                  if (v98 == a2 - 16)
                  {
                    *(_OWORD *)v98 = v132;
                  }
                  else
                  {
                    *(_OWORD *)v98 = *v107;
                    *v107 = v132;
                    v108 = v98 - i + 16;
                    if (v108 >= 17)
                    {
                      v109 = ((unint64_t)v108 >> 4) - 2;
                      v110 = v109 >> 1;
                      v111 = (float *)(i + 16 * (v109 >> 1));
                      v112 = *(_DWORD *)v98;
                      if (*(_DWORD *)v111 == *(_DWORD *)v98)
                      {
                        v113 = v111[1];
                        v114 = *(float *)(v98 + 4);
                        if (vabds_f32(v113, v114) >= 0.00000011921)
                        {
                          if (v113 < v114)
                            goto LABEL_228;
                        }
                        else if (*(_QWORD *)(i + 16 * v110 + 8) < *(_QWORD *)(v98 + 8))
                        {
LABEL_228:
                          v115 = *(_QWORD *)(v98 + 8);
                          *(_OWORD *)v98 = *(_OWORD *)v111;
                          if (v109 >= 2)
                          {
                            do
                            {
                              v116 = v111;
                              v117 = v110 - 1;
                              v110 = (v110 - 1) >> 1;
                              v111 = (float *)(i + 16 * v110);
                              if (*(_DWORD *)v111 == v112)
                              {
                                v118 = v111[1];
                                if (vabds_f32(v118, v114) >= 0.00000011921)
                                {
                                  if (v118 >= v114)
                                  {
LABEL_237:
                                    v111 = v116;
                                    break;
                                  }
                                }
                                else if (*(_QWORD *)(i + 16 * v110 + 8) >= v115)
                                {
                                  goto LABEL_237;
                                }
                              }
                              else if (*(_DWORD *)v111 >= v112)
                              {
                                goto LABEL_237;
                              }
                              *(_OWORD *)v116 = *(_OWORD *)v111;
                            }
                            while (v117 > 1);
                          }
                          *(_DWORD *)v111 = v112;
                          v111[1] = v114;
                          *((_QWORD *)v111 + 1) = v115;
                        }
                      }
                      else if (*(_DWORD *)v111 < v112)
                      {
                        v114 = *(float *)(v98 + 4);
                        goto LABEL_228;
                      }
                    }
                  }
LABEL_204:
                  a2 -= 16;
                  if ((unint64_t)v95-- <= 2)
                    return a5.n128_f64[0];
                  continue;
                }
                goto LABEL_210;
              }
            }
          }
        }
        v13 = v12 >> 1;
        v14 = (int *)(i + 16 * (v12 >> 1));
        if ((unint64_t)v11 < 0x801)
        {
          a5 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(a1 + 16 * (v12 >> 1), (int *)a1, a2 - 16, a5);
        }
        else
        {
          v15 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(a1, (int *)(a1 + 16 * (v12 >> 1)), a2 - 16, a5);
          v16 = 16 * v13;
          v17 = (int *)(16 * v13 + a1 - 16);
          v18 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(a1 + 16, v17, a2 - 32, v15);
          v19 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(a1 + 32, (int *)(a1 + 16 + v16), a2 - 48, v18);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>((uint64_t)v17, v14, a1 + 16 + v16, v19);
          v129 = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v14;
          a5 = v129;
          *(__n128 *)v14 = v129;
        }
        --a3;
        v20 = *(_DWORD *)a1;
        if ((a4 & 1) == 0)
        {
          v21 = *(_DWORD *)(a1 - 16);
          if (v21 == v20)
          {
            v22 = *(float *)(a1 - 12);
            a5.n128_u32[0] = *(_DWORD *)(a1 + 4);
            if (vabds_f32(v22, a5.n128_f32[0]) >= 0.00000011921)
            {
              if (v22 < a5.n128_f32[0])
                goto LABEL_16;
            }
            else if (*(_QWORD *)(a1 - 8) < *(_QWORD *)(a1 + 8))
            {
              goto LABEL_16;
            }
          }
          else
          {
            if (v21 < v20)
              goto LABEL_16;
            a5.n128_u32[0] = *(_DWORD *)(a1 + 4);
          }
          v42 = *(_QWORD *)(a1 + 8);
          v43 = *v9;
          v44 = v20 >= *v9;
          if (v20 != *v9)
            goto LABEL_74;
          v45 = *(float *)(a2 - 12);
          if (vabds_f32(a5.n128_f32[0], v45) < 0.00000011921)
          {
            v44 = v42 >= *(_QWORD *)(a2 - 8);
LABEL_74:
            if (!v44)
              goto LABEL_75;
            goto LABEL_85;
          }
          if (a5.n128_f32[0] < v45)
          {
LABEL_75:
            for (i = a1 + 16; ; i += 16)
            {
              if (v20 == *(_DWORD *)i)
              {
                v46 = *(float *)(i + 4);
                if (vabds_f32(a5.n128_f32[0], v46) >= 0.00000011921)
                {
                  if (a5.n128_f32[0] < v46)
                    goto LABEL_94;
                }
                else if (v42 < *(_QWORD *)(i + 8))
                {
                  goto LABEL_94;
                }
              }
              else if (v20 < *(_DWORD *)i)
              {
                goto LABEL_94;
              }
            }
          }
LABEL_85:
          for (i = a1 + 16; i < a2; i += 16)
          {
            if (v20 == *(_DWORD *)i)
            {
              v47 = *(float *)(i + 4);
              if (vabds_f32(a5.n128_f32[0], v47) >= 0.00000011921)
              {
                if (a5.n128_f32[0] < v47)
                  break;
              }
              else if (v42 < *(_QWORD *)(i + 8))
              {
                break;
              }
            }
            else if (v20 < *(_DWORD *)i)
            {
              break;
            }
          }
LABEL_94:
          j = a2;
          if (i < a2)
          {
            for (j = a2 - 16; ; j -= 16)
            {
              if (v20 == v43)
              {
                v50 = *(float *)(j + 4);
                if (vabds_f32(a5.n128_f32[0], v50) >= 0.00000011921)
                {
                  if (a5.n128_f32[0] >= v50)
                    break;
                }
                else if (v42 >= *(_QWORD *)(j + 8))
                {
                  break;
                }
              }
              else if (v20 >= v43)
              {
                break;
              }
              v49 = *(_DWORD *)(j - 16);
              v43 = v49;
            }
          }
LABEL_118:
          if (i < j)
          {
            v131 = *(_OWORD *)i;
            *(_OWORD *)i = *(_OWORD *)j;
            *(_OWORD *)j = v131;
            do
            {
              while (1)
              {
                while (1)
                {
                  v51 = *(_DWORD *)(i + 16);
                  i += 16;
                  v52 = v20 >= v51;
                  if (v20 == v51)
                    break;
                  if (!v52)
                    goto LABEL_115;
                }
                v53 = *(float *)(i + 4);
                if (vabds_f32(a5.n128_f32[0], v53) >= 0.00000011921)
                  break;
                if (v42 < *(_QWORD *)(i + 8))
                  goto LABEL_115;
              }
            }
            while (a5.n128_f32[0] >= v53);
            while (1)
            {
LABEL_115:
              v55 = *(_DWORD *)(j - 16);
              j -= 16;
              v54 = v20 >= v55;
              if (v20 != v55)
                goto LABEL_114;
              v56 = *(float *)(j + 4);
              if (vabds_f32(a5.n128_f32[0], v56) < 0.00000011921)
              {
                v54 = v42 >= *(_QWORD *)(j + 8);
LABEL_114:
                if (v54)
                  goto LABEL_118;
              }
              else if (a5.n128_f32[0] >= v56)
              {
                goto LABEL_118;
              }
            }
          }
          if (i - 16 != a1)
            *(_OWORD *)a1 = *(_OWORD *)(i - 16);
          a4 = 0;
          *(_DWORD *)(i - 16) = v20;
          *(_DWORD *)(i - 12) = a5.n128_u32[0];
          *(_QWORD *)(i - 8) = v42;
          continue;
        }
LABEL_16:
        a5.n128_u32[0] = *(_DWORD *)(a1 + 4);
        v23 = *(_QWORD *)(a1 + 8);
        for (k = a1 + 16; ; k += 16)
        {
          v25 = *(_DWORD *)k >= v20;
          if (*(_DWORD *)k == v20)
            break;
LABEL_18:
          if (v25)
            goto LABEL_23;
LABEL_19:
          ;
        }
        v26 = *(float *)(k + 4);
        if (vabds_f32(v26, a5.n128_f32[0]) < 0.00000011921)
        {
          v25 = *(_QWORD *)(k + 8) >= v23;
          goto LABEL_18;
        }
        if (v26 < a5.n128_f32[0])
          goto LABEL_19;
LABEL_23:
        m = a2 - 16;
        if (k - 16 != a1)
        {
          while (1)
          {
            if (*(_DWORD *)m == v20)
            {
              v28 = *(float *)(m + 4);
              if (vabds_f32(v28, a5.n128_f32[0]) >= 0.00000011921)
              {
                if (v28 < a5.n128_f32[0])
                  goto LABEL_47;
              }
              else if (*(_QWORD *)(m + 8) < v23)
              {
                goto LABEL_47;
              }
            }
            else if (*(_DWORD *)m < v20)
            {
              goto LABEL_47;
            }
            m -= 16;
          }
        }
        m = a2;
        if (k < a2)
        {
          for (m = a2 - 16; ; m -= 16)
          {
            v29 = *(_DWORD *)m >= v20;
            if (*(_DWORD *)m == v20)
            {
              v31 = *(float *)(m + 4);
              if (vabds_f32(v31, a5.n128_f32[0]) >= 0.00000011921)
              {
                if (v31 < a5.n128_f32[0] || k >= m)
                  break;
                continue;
              }
              v29 = *(_QWORD *)(m + 8) >= v23;
            }
            if (!v29 || k >= m)
              break;
          }
        }
LABEL_47:
        i = k;
        if (k >= m)
          goto LABEL_65;
        i = k;
        v33 = m;
        while (2)
        {
          v130 = *(_OWORD *)i;
          *(_OWORD *)i = *(_OWORD *)v33;
          *(_OWORD *)v33 = v130;
          do
          {
            while (1)
            {
              while (1)
              {
                v34 = *(_DWORD *)(i + 16);
                i += 16;
                v35 = v34 >= v20;
                if (v34 == v20)
                  break;
                if (v35)
                  goto LABEL_61;
              }
              v36 = *(float *)(i + 4);
              if (vabds_f32(v36, a5.n128_f32[0]) >= 0.00000011921)
                break;
              if (*(_QWORD *)(i + 8) >= v23)
                goto LABEL_61;
            }
          }
          while (v36 < a5.n128_f32[0]);
LABEL_61:
          while (2)
          {
            while (2)
            {
              v38 = *(_DWORD *)(v33 - 16);
              v33 -= 16;
              v37 = v38 >= v20;
              if (v38 != v20)
                goto LABEL_59;
              v39 = *(float *)(v33 + 4);
              if (vabds_f32(v39, a5.n128_f32[0]) < 0.00000011921)
              {
                v37 = *(_QWORD *)(v33 + 8) >= v23;
LABEL_59:
                if (!v37)
                  goto LABEL_49;
                continue;
              }
              break;
            }
            if (v39 >= a5.n128_f32[0])
              continue;
            break;
          }
LABEL_49:
          if (i < v33)
            continue;
          break;
        }
LABEL_65:
        if (i - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)(i - 16);
        *(_DWORD *)(i - 16) = v20;
        *(_DWORD *)(i - 12) = a5.n128_u32[0];
        *(_QWORD *)(i - 8) = v23;
        if (k < m)
        {
LABEL_70:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *,false>(a1, i - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v40 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(a1, i - 16, a5);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,RouteJunctionInfo *>(i, a2, v41))
        {
          if (v40)
            continue;
          goto LABEL_70;
        }
        a2 = i - 16;
        if (!v40)
          goto LABEL_1;
        return a5.n128_f64[0];
    }
  }
}

  v119 = a2 - 2;
  v121 = a2 - 1;
  v118 = a2 - 3;
  v10 = a1;
  v123 = a2;
  while (2)
  {
    a1 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        v55 = *v121;
        v125 = *a1;
        v126 = v55;
        v56 = *(_QWORD *)(a3 + 24);
        if (!v56)
          goto LABEL_142;
        if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v56 + 48))(v56, &v126, &v125))
        {
          v57 = *a1;
          *a1 = *v121;
          *v121 = v57;
        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, v121, a3);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, v121, a3);
        return;
      case 5:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, a1 + 1, a1 + 2, a1 + 3, v121, a3);
        return;
      default:
        if (v11 <= 191)
        {
          v58 = a1 + 1;
          v60 = a1 == a2 || v58 == a2;
          if ((a5 & 1) != 0)
          {
            if (v60)
              return;
            v61 = 0;
            v62 = a1;
            while (1)
            {
              v64 = v62[1];
              v125 = *v62;
              v126 = v64;
              v65 = *(_QWORD *)(a3 + 24);
              if (!v65)
                break;
              v62 = v58;
              if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v65 + 48))(v65, &v126, &v125))
              {
                v66 = *v62;
                v67 = v61;
                do
                {
                  *(uint64_t *)((char *)a1 + v67 + 8) = *(uint64_t *)((char *)a1 + v67);
                  if (!v67)
                  {
                    v63 = a1;
                    goto LABEL_80;
                  }
                  v125 = *(uint64_t *)((char *)a1 + v67 - 8);
                  v126 = v66;
                  v68 = *(_QWORD *)(a3 + 24);
                  if (!v68)
                    goto LABEL_142;
                  v67 -= 8;
                }
                while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v68 + 48))(v68, &v126, &v125) & 1) != 0);
                v63 = (uint64_t *)((char *)a1 + v67 + 8);
LABEL_80:
                *v63 = v66;
              }
              v58 = v62 + 1;
              v61 += 8;
              if (v62 + 1 == a2)
                return;
            }
          }
          else
          {
            if (v60)
              return;
            while (1)
            {
              v109 = a1[1];
              v125 = *a1;
              v126 = v109;
              v110 = *(_QWORD *)(a3 + 24);
              if (!v110)
                break;
              a1 = v58;
              if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v110 + 48))(v110, &v126, &v125))
              {
                v111 = *a1;
                v112 = a1;
                while (1)
                {
                  v113 = *(v112 - 2);
                  *v112 = *(v112 - 1);
                  v125 = v113;
                  v126 = v111;
                  v114 = *(_QWORD *)(a3 + 24);
                  if (!v114)
                    goto LABEL_142;
                  --v112;
                  if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v114 + 48))(v114, &v126, &v125) & 1) == 0)
                  {
                    *v112 = v111;
                    break;
                  }
                }
              }
              v58 = a1 + 1;
              if (a1 + 1 == a2)
                return;
            }
          }
LABEL_142:
          std::__throw_bad_function_call[abi:nn180100]();
          std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciRoadTileDataRenderable *,md::DaVinciRoadTileDataRenderable *)> &,md::DaVinciRoadTileDataRenderable **>(v115, v116, v117);
          return;
        }
        if (!a4)
        {
          if (a1 != a2)
          {
            v120 = v11;
            v69 = (unint64_t)(v12 - 2) >> 1;
            v70 = v69;
            while (1)
            {
              v71 = v70;
              if (v69 >= v70)
              {
                v72 = (2 * v70) | 1;
                v73 = &a1[v72];
                v74 = 2 * v70 + 2;
                if (v74 < v12)
                {
                  v75 = v70;
                  v76 = *v73;
                  v125 = v73[1];
                  v126 = v76;
                  v77 = *(_QWORD *)(a3 + 24);
                  if (!v77)
                    goto LABEL_142;
                  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v77 + 48))(v77, &v126, &v125))
                  {
                    ++v73;
                    v72 = v74;
                  }
                  a2 = v123;
                  v71 = v75;
                }
                v122 = v71;
                v78 = &a1[v71];
                v79 = *v73;
                v125 = *v78;
                v126 = v79;
                v80 = *(_QWORD *)(a3 + 24);
                if (!v80)
                  goto LABEL_142;
                v81 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v80 + 48))(v80, &v126, &v125);
                v71 = v122;
                if ((v81 & 1) == 0)
                {
                  v82 = *v78;
                  do
                  {
                    v83 = v73;
                    *v78 = *v73;
                    if (v69 < v72)
                      break;
                    v84 = (2 * v72) | 1;
                    v73 = &a1[v84];
                    v72 = 2 * v72 + 2;
                    if (v72 >= v12)
                    {
                      v72 = v84;
                    }
                    else
                    {
                      v85 = *v73;
                      v125 = v73[1];
                      v126 = v85;
                      v86 = *(_QWORD *)(a3 + 24);
                      if (!v86)
                        goto LABEL_142;
                      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v86 + 48))(v86, &v126, &v125))
                      {
                        ++v73;
                      }
                      else
                      {
                        v72 = v84;
                      }
                    }
                    v87 = *v73;
                    v125 = v82;
                    v126 = v87;
                    v88 = *(_QWORD *)(a3 + 24);
                    if (!v88)
                      goto LABEL_142;
                    v78 = v83;
                  }
                  while (!(*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v88 + 48))(v88, &v126, &v125));
                  *v83 = v82;
                  v71 = v122;
                  a2 = v123;
                }
              }
              v70 = v71 - 1;
              if (!v71)
              {
                v89 = v120 >> 3;
                while (1)
                {
                  if (v89 >= 2)
                  {
                    v124 = a2;
                    v91 = 0;
                    v92 = *a1;
                    v93 = a1;
                    do
                    {
                      v94 = &v93[v91 + 1];
                      v95 = (2 * v91) | 1;
                      v96 = 2 * v91 + 2;
                      if (v96 < v89)
                      {
                        v97 = *v94;
                        v125 = v94[1];
                        v126 = v97;
                        v98 = *(_QWORD *)(a3 + 24);
                        if (!v98)
                          goto LABEL_142;
                        if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v98 + 48))(v98, &v126, &v125))
                        {
                          ++v94;
                          v95 = v96;
                        }
                      }
                      *v93 = *v94;
                      v93 = v94;
                      v91 = v95;
                    }
                    while (v95 <= (uint64_t)((unint64_t)(v89 - 2) >> 1));
                    a2 = v124;
                    v99 = v124 - 1;
                    if (v94 == v124 - 1)
                    {
                      *v94 = v92;
                    }
                    else
                    {
                      *v94 = *v99;
                      *v99 = v92;
                      v100 = (char *)v94 - (char *)a1 + 8;
                      if (v100 >= 9)
                      {
                        v101 = (((unint64_t)v100 >> 3) - 2) >> 1;
                        v102 = &a1[v101];
                        v103 = *v102;
                        v125 = *v94;
                        v126 = v103;
                        v104 = *(_QWORD *)(a3 + 24);
                        if (!v104)
                          goto LABEL_142;
                        if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v104 + 48))(v104, &v126, &v125))
                        {
                          v105 = *v94;
                          do
                          {
                            v106 = v102;
                            *v94 = *v102;
                            if (!v101)
                              break;
                            v101 = (v101 - 1) >> 1;
                            v102 = &a1[v101];
                            v107 = *v102;
                            v125 = v105;
                            v126 = v107;
                            v108 = *(_QWORD *)(a3 + 24);
                            if (!v108)
                              goto LABEL_142;
                            v94 = v106;
                          }
                          while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v108 + 48))(v108, &v126, &v125) & 1) != 0);
                          *v106 = v105;
                          a2 = v124;
                        }
                      }
                    }
                  }
                  --a2;
                  if ((unint64_t)v89-- <= 2)
                    return;
                }
              }
            }
          }
          return;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &a1[(unint64_t)v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(v14, a1, v121, a3);
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_11;
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1, v14, v121, a3);
          v15 = v13;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1 + 1, &a1[v15 - 1], v119, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(a1 + 2, &a1[v15 + 1], v118, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::RoadTileDataRenderable *,md::RoadTileDataRenderable *)> &,md::RoadTileDataRenderable **>(&a1[v15 - 1], v14, &a1[v15 + 1], a3);
          v16 = *a1;
          *a1 = a1[v15];
          a1[v15] = v16;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_11;
        }
        v17 = *(a1 - 1);
        v125 = *a1;
        v126 = v17;
        v18 = *(_QWORD *)(a3 + 24);
        if (!v18)
          goto LABEL_142;
        if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v18 + 48))(v18, &v126, &v125) & 1) == 0)
        {
          v39 = *a1;
          v125 = *v121;
          v126 = v39;
          v40 = *(_QWORD *)(a3 + 24);
          if (!v40)
            goto LABEL_142;
          if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v40 + 48))(v40, &v126, &v125) & 1) != 0)
          {
            v10 = a1;
            while (1)
            {
              v41 = v10[1];
              ++v10;
              v125 = v41;
              v126 = v39;
              v42 = *(_QWORD *)(a3 + 24);
              if (!v42)
                goto LABEL_142;
              if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v42 + 48))(v42, &v126, &v125) & 1) != 0)goto LABEL_47;
            }
          }
          v43 = a1 + 1;
          do
          {
            v10 = v43;
            if (v43 >= a2)
              break;
            v125 = *v43;
            v126 = v39;
            v44 = *(_QWORD *)(a3 + 24);
            if (!v44)
              goto LABEL_142;
            v45 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v44 + 48))(v44, &v126, &v125);
            v43 = v10 + 1;
          }
          while (!v45);
LABEL_47:
          v46 = a2;
          if (v10 < a2)
          {
            v46 = a2;
            do
            {
              v47 = *--v46;
              v125 = v47;
              v126 = v39;
              v48 = *(_QWORD *)(a3 + 24);
              if (!v48)
                goto LABEL_142;
            }
            while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v48 + 48))(v48, &v126, &v125) & 1) != 0);
          }
LABEL_57:
          if (v10 < v46)
          {
            v49 = *v10;
            *v10 = *v46;
            *v46 = v49;
            while (1)
            {
              v50 = v10[1];
              ++v10;
              v125 = v50;
              v126 = v39;
              v51 = *(_QWORD *)(a3 + 24);
              if (!v51)
                goto LABEL_142;
              if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v51 + 48))(v51, &v126, &v125))
              {
                while (1)
                {
                  v52 = *--v46;
                  v125 = v52;
                  v126 = v39;
                  v53 = *(_QWORD *)(a3 + 24);
                  if (!v53)
                    goto LABEL_142;
                  if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v53 + 48))(v53, &v126, &v125) & 1) == 0)goto LABEL_57;
                }
              }
            }
          }
          v54 = v10 - 1;
          if (v10 - 1 != a1)
            *a1 = *v54;
          a5 = 0;
          *v54 = v39;
          continue;
        }
LABEL_11:
        v19 = *a1;
        v20 = a1;
        do
        {
          v21 = v20[1];
          ++v20;
          v125 = v19;
          v126 = v21;
          v22 = *(_QWORD *)(a3 + 24);
          if (!v22)
            goto LABEL_142;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v22 + 48))(v22, &v126, &v125) & 1) != 0);
        v23 = v20 - 1;
        v24 = a2;
        if (v20 - 1 != a1)
        {
          while (1)
          {
            v25 = *--v24;
            v125 = v19;
            v126 = v25;
            v26 = *(_QWORD *)(a3 + 24);
            if (!v26)
              goto LABEL_142;
            if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v26 + 48))(v26, &v126, &v125))
            {
              goto LABEL_22;
            }
          }
        }
        v24 = a2;
        do
        {
          if (v20 >= v24)
            break;
          v27 = *--v24;
          v125 = v19;
          v126 = v27;
          v28 = *(_QWORD *)(a3 + 24);
          if (!v28)
            goto LABEL_142;
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v28 + 48))(v28, &v126, &v125) & 1) == 0);
LABEL_22:
        if (v20 < v24)
        {
          v29 = v20;
          v30 = v24;
          do
          {
            v31 = *v29;
            *v29 = *v30;
            *v30 = v31;
            do
            {
              v32 = v29[1];
              ++v29;
              v125 = v19;
              v126 = v32;
              v33 = *(_QWORD *)(a3 + 24);
              if (!v33)
                goto LABEL_142;
            }
            while (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v126, &v125) & 1) != 0);
            v23 = v29 - 1;
            do
            {
              v34 = *--v30;
              v125 = v19;
              v126 = v34;
              v35 = *(_QWORD *)(a3 + 24);
              if (!v35)
                goto LABEL_142;
            }
            while (!(*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v35 + 48))(v35, &v126, &v125));
          }
          while (v29 < v30);
        }
        if (v23 != a1)
          *a1 = *v23;
        *v23 = v19;
        a2 = v123;
        if (v20 < v24)
        {
LABEL_36:
          std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciRoadTileDataRenderable *,md::DaVinciRoadTileDataRenderable *)> &,md::DaVinciRoadTileDataRenderable **,false>(a1, v23, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v23 + 1;
          continue;
        }
        std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciRoadTileDataRenderable *,md::DaVinciRoadTileDataRenderable *)> &,md::DaVinciRoadTileDataRenderable **>(a1, v23, a3);
        v37 = v36;
        v10 = v23 + 1;
        std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::function<BOOL ()(md::DaVinciRoadTileDataRenderable *,md::DaVinciRoadTileDataRenderable *)> &,md::DaVinciRoadTileDataRenderable **>(v23 + 1, v123, a3);
        if (!v38)
        {
          if ((v37 & 1) != 0)
            continue;
          goto LABEL_36;
        }
        a2 = v23;
        if ((v37 & 1) == 0)
          goto LABEL_1;
        return;
    }
  }
}

  v171 = (unsigned int *)(a2 - 48);
  v172 = (unsigned int *)(a2 - 24);
  v170 = (unsigned int *)(a2 - 72);
  v8 = a1;
  v173 = a2;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v75 = *(_DWORD *)v8;
        if (*v172 < *(_DWORD *)v8)
        {
          v76 = *(_OWORD *)(v8 + 8);
          *(_QWORD *)(v8 + 8) = 0;
          *(_QWORD *)(v8 + 16) = 0;
          *(_DWORD *)v8 = *(_DWORD *)(a2 - 24);
          v77 = *(_OWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = 0;
          *(_QWORD *)(a2 - 8) = 0;
          v78 = *(std::__shared_weak_count **)(v8 + 16);
          *(_OWORD *)(v8 + 8) = v77;
          if (v78)
          {
            p_shared_owners = (unint64_t *)&v78->__shared_owners_;
            do
              v80 = __ldaxr(p_shared_owners);
            while (__stlxr(v80 - 1, p_shared_owners));
            if (!v80)
            {
              v180 = v76;
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
              v76 = v180;
            }
          }
          *(_DWORD *)(a2 - 24) = v75;
          v81 = *(std::__shared_weak_count **)(a2 - 8);
          *(_OWORD *)(a2 - 16) = v76;
          if (v81)
          {
            v82 = (unint64_t *)&v81->__shared_owners_;
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>((unsigned int *)v8, (unsigned int *)(v8 + 24), v172);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>(v8, v8 + 24, v8 + 48, (uint64_t)v172);
        return;
      case 5:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>(v8, v8 + 24, v8 + 48, v8 + 72, (uint64_t)v172);
        return;
      default:
        if (v9 <= 575)
        {
          v84 = v8 + 24;
          v86 = v8 == a2 || v84 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v86)
            {
              v87 = v8;
              do
              {
                v88 = v87;
                v87 = v84;
                v89 = *(_DWORD *)(v88 + 24);
                v90 = *(_DWORD *)v88;
                if (v89 < *(_DWORD *)v88)
                {
                  v91 = *(_QWORD *)(v88 + 32);
                  v92 = *(_QWORD *)(v88 + 40);
                  v93 = v87;
                  *(_QWORD *)(v88 + 32) = 0;
                  *(_QWORD *)(v88 + 40) = 0;
                  while (1)
                  {
                    v94 = v93;
                    v93 = v88;
                    *(_DWORD *)v94 = v90;
                    v95 = *(_OWORD *)(v88 + 8);
                    *(_QWORD *)(v88 + 8) = 0;
                    *(_QWORD *)(v88 + 16) = 0;
                    v96 = *(std::__shared_weak_count **)(v94 + 16);
                    *(_OWORD *)(v94 + 8) = v95;
                    if (v96)
                    {
                      v97 = (unint64_t *)&v96->__shared_owners_;
                      do
                        v98 = __ldaxr(v97);
                      while (__stlxr(v98 - 1, v97));
                      if (!v98)
                      {
                        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                        std::__shared_weak_count::__release_weak(v96);
                      }
                    }
                    if (v93 == a1)
                      break;
                    v88 = v93 - 24;
                    v90 = *(_DWORD *)(v93 - 24);
                    if (v89 >= v90)
                    {
                      v99 = v93;
                      goto LABEL_132;
                    }
                  }
                  v99 = a1;
LABEL_132:
                  *(_DWORD *)v99 = v89;
                  *(_QWORD *)(v93 + 8) = v91;
                  v100 = *(std::__shared_weak_count **)(v99 + 16);
                  *(_QWORD *)(v99 + 16) = v92;
                  a2 = v173;
                  if (v100)
                  {
                    v101 = (unint64_t *)&v100->__shared_owners_;
                    do
                      v102 = __ldaxr(v101);
                    while (__stlxr(v102 - 1, v101));
                    if (!v102)
                    {
                      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                      std::__shared_weak_count::__release_weak(v100);
                    }
                  }
                }
                v84 = v87 + 24;
              }
              while (v87 + 24 != a2);
            }
          }
          else if (!v86)
          {
            do
            {
              v158 = a1;
              a1 = v84;
              v159 = *(_DWORD *)(v158 + 24);
              v160 = *(_DWORD *)v158;
              if (v159 < *(_DWORD *)v158)
              {
                v184 = *(_OWORD *)(v158 + 32);
                v161 = a1;
                *(_QWORD *)(v158 + 32) = 0;
                *(_QWORD *)(v158 + 40) = 0;
                do
                {
                  v162 = v161;
                  v161 = v158;
                  *(_DWORD *)v162 = v160;
                  v163 = *(_OWORD *)(v158 + 8);
                  *(_QWORD *)(v158 + 8) = 0;
                  *(_QWORD *)(v158 + 16) = 0;
                  v164 = *(std::__shared_weak_count **)(v162 + 16);
                  *(_OWORD *)(v162 + 8) = v163;
                  if (v164)
                  {
                    v165 = (unint64_t *)&v164->__shared_owners_;
                    do
                      v166 = __ldaxr(v165);
                    while (__stlxr(v166 - 1, v165));
                    if (!v166)
                    {
                      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                      std::__shared_weak_count::__release_weak(v164);
                    }
                  }
                  v158 = v161 - 24;
                  v160 = *(_DWORD *)(v161 - 24);
                }
                while (v159 < v160);
                *(_DWORD *)v161 = v159;
                v167 = *(std::__shared_weak_count **)(v161 + 16);
                *(_OWORD *)(v161 + 8) = v184;
                if (v167)
                {
                  v168 = (unint64_t *)&v167->__shared_owners_;
                  do
                    v169 = __ldaxr(v168);
                  while (__stlxr(v169 - 1, v168));
                  if (!v169)
                  {
                    ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                    std::__shared_weak_count::__release_weak(v167);
                  }
                }
              }
              v84 = a1 + 24;
            }
            while (a1 + 24 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 == a2)
            return;
          v103 = (unint64_t)(v10 - 2) >> 1;
          v104 = v103;
          do
          {
            v105 = v104;
            if (v103 >= v104)
            {
              v106 = (2 * v104) | 1;
              v107 = v8 + 24 * v106;
              if (2 * v105 + 2 >= v10)
              {
                v108 = *(_DWORD *)v107;
              }
              else
              {
                v108 = *(_DWORD *)v107;
                v109 = *(_DWORD *)(v107 + 24);
                if (*(_DWORD *)v107 <= v109)
                  v108 = *(_DWORD *)(v107 + 24);
                if (*(_DWORD *)v107 < v109)
                {
                  v107 += 24;
                  v106 = 2 * v105 + 2;
                }
              }
              v110 = v8 + 24 * v105;
              v111 = *(_DWORD *)v110;
              if (v108 >= *(_DWORD *)v110)
              {
                v112 = v8 + 24 * v105;
                v181 = *(_OWORD *)(v112 + 8);
                *(_QWORD *)(v112 + 8) = 0;
                *(_QWORD *)(v112 + 16) = 0;
                v113 = *(_DWORD *)v107;
                while (1)
                {
                  v115 = v110;
                  v110 = v107;
                  *(_DWORD *)v115 = v113;
                  v116 = *(_OWORD *)(v107 + 8);
                  *(_QWORD *)(v107 + 8) = 0;
                  *(_QWORD *)(v107 + 16) = 0;
                  v117 = *(std::__shared_weak_count **)(v115 + 16);
                  *(_OWORD *)(v115 + 8) = v116;
                  if (v117)
                  {
                    v118 = (unint64_t *)&v117->__shared_owners_;
                    do
                      v119 = __ldaxr(v118);
                    while (__stlxr(v119 - 1, v118));
                    if (!v119)
                    {
                      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                      std::__shared_weak_count::__release_weak(v117);
                    }
                  }
                  if (v103 < v106)
                    break;
                  v107 = v8 + 24 * ((2 * v106) | 1);
                  if (2 * v106 + 2 < v10)
                  {
                    v113 = *(_DWORD *)v107;
                    v114 = *(_DWORD *)(v107 + 24);
                    if (*(_DWORD *)v107 <= v114)
                      v113 = *(_DWORD *)(v107 + 24);
                    if (*(_DWORD *)v107 >= v114)
                    {
                      v106 = (2 * v106) | 1;
                    }
                    else
                    {
                      v107 += 24;
                      v106 = 2 * v106 + 2;
                    }
                    if (v113 < v111)
                      break;
                  }
                  else
                  {
                    v113 = *(_DWORD *)v107;
                    v106 = (2 * v106) | 1;
                    if (*(_DWORD *)v107 < v111)
                      break;
                  }
                }
                *(_DWORD *)v110 = v111;
                v120 = *(std::__shared_weak_count **)(v110 + 16);
                *(_OWORD *)(v110 + 8) = v181;
                if (v120)
                {
                  v121 = (unint64_t *)&v120->__shared_owners_;
                  do
                    v122 = __ldaxr(v121);
                  while (__stlxr(v122 - 1, v121));
                  if (!v122)
                  {
                    ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                    std::__shared_weak_count::__release_weak(v120);
                  }
                }
              }
            }
            v104 = v105 - 1;
          }
          while (v105);
          v123 = v9 / 0x18uLL;
          v124 = v173;
          while (2)
          {
            if (v123 >= 2)
            {
              v126 = 0;
              v127 = *(_DWORD *)v8;
              v182 = *(_QWORD *)(v8 + 8);
              v176 = *(_QWORD *)(v8 + 16);
              v128 = v8;
              *(_QWORD *)(v8 + 8) = 0;
              *(_QWORD *)(v8 + 16) = 0;
              do
              {
                v129 = v128;
                v128 += 24 * v126 + 24;
                if (2 * v126 + 2 >= v123)
                {
                  v130 = *(_DWORD *)v128;
                  v126 = (2 * v126) | 1;
                }
                else
                {
                  v130 = *(_DWORD *)v128;
                  v131 = *(_DWORD *)(v128 + 24);
                  if (*(_DWORD *)v128 <= v131)
                    v130 = *(_DWORD *)(v128 + 24);
                  if (*(_DWORD *)v128 >= v131)
                  {
                    v126 = (2 * v126) | 1;
                  }
                  else
                  {
                    v128 += 24;
                    v126 = 2 * v126 + 2;
                  }
                }
                *(_DWORD *)v129 = v130;
                v132 = (__int128 *)(v128 + 8);
                v133 = *(_OWORD *)(v128 + 8);
                *(_QWORD *)(v128 + 8) = 0;
                *(_QWORD *)(v128 + 16) = 0;
                v134 = *(std::__shared_weak_count **)(v129 + 16);
                *(_OWORD *)(v129 + 8) = v133;
                if (v134)
                {
                  v135 = (unint64_t *)&v134->__shared_owners_;
                  do
                    v136 = __ldaxr(v135);
                  while (__stlxr(v136 - 1, v135));
                  if (!v136)
                  {
                    ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                    std::__shared_weak_count::__release_weak(v134);
                  }
                }
              }
              while (v126 <= (uint64_t)((unint64_t)(v123 - 2) >> 1));
              if (v128 == v124 - 24)
              {
                *(_DWORD *)v128 = v127;
                v154 = *(std::__shared_weak_count **)(v128 + 16);
                *(_QWORD *)(v128 + 8) = v182;
                *(_QWORD *)(v128 + 16) = v176;
                if (v154)
                {
                  v157 = (unint64_t *)&v154->__shared_owners_;
                  do
                    v156 = __ldaxr(v157);
                  while (__stlxr(v156 - 1, v157));
                  goto LABEL_215;
                }
              }
              else
              {
                *(_DWORD *)v128 = *(_DWORD *)(v124 - 24);
                v137 = *(_OWORD *)(v124 - 16);
                *(_QWORD *)(v124 - 16) = 0;
                *(_QWORD *)(v124 - 8) = 0;
                v138 = *(std::__shared_weak_count **)(v128 + 16);
                *(_OWORD *)(v128 + 8) = v137;
                if (v138)
                {
                  v139 = (unint64_t *)&v138->__shared_owners_;
                  do
                    v140 = __ldaxr(v139);
                  while (__stlxr(v140 - 1, v139));
                  if (!v140)
                  {
                    ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                    std::__shared_weak_count::__release_weak(v138);
                  }
                }
                *(_DWORD *)(v124 - 24) = v127;
                v141 = *(std::__shared_weak_count **)(v124 - 8);
                *(_QWORD *)(v124 - 16) = v182;
                *(_QWORD *)(v124 - 8) = v176;
                if (v141)
                {
                  v142 = (unint64_t *)&v141->__shared_owners_;
                  do
                    v143 = __ldaxr(v142);
                  while (__stlxr(v143 - 1, v142));
                  if (!v143)
                  {
                    ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                    std::__shared_weak_count::__release_weak(v141);
                  }
                }
                v144 = v128 + 24 - v8;
                if (v144 >= 25)
                {
                  v145 = (unint64_t)(-2 - 0x5555555555555555 * (v144 >> 3)) >> 1;
                  v146 = v8 + 24 * v145;
                  v147 = *(_DWORD *)v128;
                  if (*(_DWORD *)v146 < *(_DWORD *)v128)
                  {
                    v183 = *v132;
                    *(_QWORD *)v132 = 0;
                    *(_QWORD *)(v128 + 16) = 0;
                    v148 = *(_DWORD *)v146;
                    do
                    {
                      v149 = v128;
                      v128 = v146;
                      *(_DWORD *)v149 = v148;
                      v150 = *(_OWORD *)(v146 + 8);
                      *(_QWORD *)(v146 + 8) = 0;
                      *(_QWORD *)(v146 + 16) = 0;
                      v151 = *(std::__shared_weak_count **)(v149 + 16);
                      *(_OWORD *)(v149 + 8) = v150;
                      if (v151)
                      {
                        v152 = (unint64_t *)&v151->__shared_owners_;
                        do
                          v153 = __ldaxr(v152);
                        while (__stlxr(v153 - 1, v152));
                        if (!v153)
                        {
                          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                          std::__shared_weak_count::__release_weak(v151);
                        }
                      }
                      if (!v145)
                        break;
                      v145 = (v145 - 1) >> 1;
                      v146 = v8 + 24 * v145;
                      v148 = *(_DWORD *)v146;
                    }
                    while (*(_DWORD *)v146 < v147);
                    *(_DWORD *)v128 = v147;
                    v154 = *(std::__shared_weak_count **)(v128 + 16);
                    *(_OWORD *)(v128 + 8) = v183;
                    if (v154)
                    {
                      v155 = (unint64_t *)&v154->__shared_owners_;
                      do
                        v156 = __ldaxr(v155);
                      while (__stlxr(v156 - 1, v155));
LABEL_215:
                      if (!v156)
                      {
                        ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                        std::__shared_weak_count::__release_weak(v154);
                      }
                    }
                  }
                }
              }
            }
            v124 -= 24;
            if ((unint64_t)v123-- <= 2)
              return;
            continue;
          }
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (unsigned int *)(v8 + 24 * v11);
        if ((unint64_t)v9 < 0xC01)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>((unsigned int *)(a1 + 24 * v11), (unsigned int *)a1, v172);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>((unsigned int *)a1, (unsigned int *)(a1 + 24 * v11), v172);
          v13 = 24 * v11;
          v14 = a1 + 24 * v11;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>((unsigned int *)(a1 + 24), (unsigned int *)(v14 - 24), v171);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>((unsigned int *)(a1 + 48), (unsigned int *)(a1 + 24 + v13), v170);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>((unsigned int *)(v14 - 24), v12, (unsigned int *)(a1 + 24 + v13));
          v15 = *(_DWORD *)a1;
          v16 = *(_OWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          v17 = (_QWORD *)(v14 + 8);
          v18 = *(_OWORD *)(v14 + 8);
          *(_DWORD *)a1 = *v12;
          *(_QWORD *)(v14 + 16) = 0;
          v19 = (std::__shared_weak_count **)(v14 + 16);
          *v17 = 0;
          v20 = *(std::__shared_weak_count **)(a1 + 16);
          *(_OWORD *)(a1 + 8) = v18;
          if (v20)
          {
            v21 = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              v177 = v16;
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
              v16 = v177;
            }
          }
          *v12 = v15;
          v23 = *v19;
          *(_OWORD *)v17 = v16;
          a2 = v173;
          if (v23)
          {
            v24 = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
        }
        --a3;
        v26 = *(_DWORD *)a1;
        if ((a4 & 1) == 0 && *(_DWORD *)(a1 - 24) >= v26)
        {
          v175 = *(_OWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          if (v26 >= *v172)
          {
            v54 = a1 + 24;
            do
            {
              v8 = v54;
              if (v54 >= a2)
                break;
              v54 += 24;
            }
            while (v26 >= *(_DWORD *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v53 = *(_DWORD *)(v8 + 24);
              v8 += 24;
            }
            while (v26 >= v53);
          }
          v55 = a2;
          if (v8 < a2)
          {
            v55 = a2;
            do
            {
              v56 = *(_DWORD *)(v55 - 24);
              v55 -= 24;
            }
            while (v26 < v56);
          }
          if (v8 < v55)
          {
            v57 = *(_DWORD *)v8;
            do
            {
              v58 = *(_OWORD *)(v8 + 8);
              *(_QWORD *)(v8 + 8) = 0;
              *(_QWORD *)(v8 + 16) = 0;
              *(_DWORD *)v8 = *(_DWORD *)v55;
              v59 = *(_OWORD *)(v55 + 8);
              *(_QWORD *)(v55 + 8) = 0;
              *(_QWORD *)(v55 + 16) = 0;
              v60 = *(std::__shared_weak_count **)(v8 + 16);
              *(_OWORD *)(v8 + 8) = v59;
              if (v60)
              {
                v61 = (unint64_t *)&v60->__shared_owners_;
                do
                  v62 = __ldaxr(v61);
                while (__stlxr(v62 - 1, v61));
                if (!v62)
                {
                  v179 = v58;
                  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                  std::__shared_weak_count::__release_weak(v60);
                  v58 = v179;
                }
              }
              *(_DWORD *)v55 = v57;
              v63 = *(std::__shared_weak_count **)(v55 + 16);
              *(_OWORD *)(v55 + 8) = v58;
              if (v63)
              {
                v64 = (unint64_t *)&v63->__shared_owners_;
                do
                  v65 = __ldaxr(v64);
                while (__stlxr(v65 - 1, v64));
                if (!v65)
                {
                  ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                  std::__shared_weak_count::__release_weak(v63);
                }
              }
              do
              {
                v66 = *(_DWORD *)(v8 + 24);
                v8 += 24;
                v57 = v66;
              }
              while (v26 >= v66);
              do
              {
                v67 = *(_DWORD *)(v55 - 24);
                v55 -= 24;
              }
              while (v26 < v67);
            }
            while (v8 < v55);
          }
          if (v8 - 24 != a1)
          {
            *(_DWORD *)a1 = *(_DWORD *)(v8 - 24);
            v68 = *(_OWORD *)(v8 - 16);
            *(_QWORD *)(v8 - 16) = 0;
            *(_QWORD *)(v8 - 8) = 0;
            v69 = *(std::__shared_weak_count **)(a1 + 16);
            *(_OWORD *)(a1 + 8) = v68;
            if (v69)
            {
              v70 = (unint64_t *)&v69->__shared_owners_;
              do
                v71 = __ldaxr(v70);
              while (__stlxr(v71 - 1, v70));
              if (!v71)
              {
                ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                std::__shared_weak_count::__release_weak(v69);
              }
            }
          }
          a4 = 0;
          *(_DWORD *)(v8 - 24) = v26;
          v72 = *(std::__shared_weak_count **)(v8 - 8);
          *(_OWORD *)(v8 - 16) = v175;
          if (v72)
          {
            v73 = (unint64_t *)&v72->__shared_owners_;
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 - 1, v73));
            a4 = 0;
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
              a4 = 0;
            }
          }
          continue;
        }
        v174 = *(_OWORD *)(a1 + 8);
        v27 = a1;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        do
        {
          v28 = v27;
          v30 = *(_DWORD *)(v27 + 24);
          v27 += 24;
          v29 = v30;
        }
        while (v30 < v26);
        v31 = a2;
        if (v28 == a1)
        {
          v31 = a2;
          do
          {
            if (v27 >= v31)
              break;
            v33 = *(_DWORD *)(v31 - 24);
            v31 -= 24;
          }
          while (v33 >= v26);
        }
        else
        {
          do
          {
            v32 = *(_DWORD *)(v31 - 24);
            v31 -= 24;
          }
          while (v32 >= v26);
        }
        v8 = v27;
        if (v27 < v31)
        {
          v34 = v31;
          do
          {
            v35 = *(_OWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = 0;
            *(_QWORD *)(v8 + 16) = 0;
            *(_DWORD *)v8 = *(_DWORD *)v34;
            v36 = *(_OWORD *)(v34 + 8);
            *(_QWORD *)(v34 + 8) = 0;
            *(_QWORD *)(v34 + 16) = 0;
            v37 = *(std::__shared_weak_count **)(v8 + 16);
            *(_OWORD *)(v8 + 8) = v36;
            if (v37)
            {
              v38 = (unint64_t *)&v37->__shared_owners_;
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                v178 = v35;
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
                v35 = v178;
              }
            }
            *(_DWORD *)v34 = v29;
            v40 = *(std::__shared_weak_count **)(v34 + 16);
            *(_OWORD *)(v34 + 8) = v35;
            if (v40)
            {
              v41 = (unint64_t *)&v40->__shared_owners_;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }
            do
            {
              v43 = *(_DWORD *)(v8 + 24);
              v8 += 24;
              v29 = v43;
            }
            while (v43 < v26);
            do
            {
              v44 = *(_DWORD *)(v34 - 24);
              v34 -= 24;
            }
            while (v44 >= v26);
          }
          while (v8 < v34);
        }
        a2 = v173;
        if (v8 - 24 != a1)
        {
          *(_DWORD *)a1 = *(_DWORD *)(v8 - 24);
          v45 = *(_OWORD *)(v8 - 16);
          *(_QWORD *)(v8 - 16) = 0;
          *(_QWORD *)(v8 - 8) = 0;
          v46 = *(std::__shared_weak_count **)(a1 + 16);
          *(_OWORD *)(a1 + 8) = v45;
          if (v46)
          {
            v47 = (unint64_t *)&v46->__shared_owners_;
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
        }
        *(_DWORD *)(v8 - 24) = v26;
        v49 = *(std::__shared_weak_count **)(v8 - 8);
        *(_OWORD *)(v8 - 16) = v174;
        if (v49)
        {
          v50 = (unint64_t *)&v49->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        if (v27 < v31)
        {
LABEL_56:
          std::__introsort<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *,false>(a1, v8 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v52 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>(a1, v8 - 24);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,karo::JobManager::JobQueueLess &,karo::JobManager::QueueElement *>(v8, v173))
        {
          if (v52)
            continue;
          goto LABEL_56;
        }
        a2 = v8 - 24;
        if (!v52)
          goto LABEL_1;
        return;
    }
  }
}

  v11 = (__n128 *)(a2 - 24);
  i = (unint64_t)a1;
  while (2)
  {
    a1 = (_QWORD *)i;
    v13 = a2 - i;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - i) >> 3);
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v107 = *(_QWORD *)(a2 - 24);
        if (*(unsigned __int8 *)(a2 - 8) == *(unsigned __int8 *)(i + 16))
        {
          v108 = *(_QWORD *)i;
        }
        else
        {
          v108 = *(_QWORD *)i;
          if (v107 == *(_QWORD *)(i + 8) && *(_QWORD *)(a2 - 16) == v108)
          {
            if (!*(_BYTE *)(a2 - 8))
              return result;
            goto LABEL_411;
          }
        }
        v173 = **a3;
        v174 = (unint64_t *)(v173 + 16 * v107);
        v175 = (double *)(v173 + 16 * v108);
        result.n128_u64[0] = *v174;
        if (*(double *)v174 >= *v175)
        {
          if (*(double *)v174 != *v175)
            return result;
          result.n128_u64[0] = v174[1];
          if (result.n128_f64[0] >= v175[1])
            return result;
        }
LABEL_411:
        v242 = *(_QWORD *)(i + 16);
        v237 = *(__n128 *)i;
        v232 = *v11;
        *(_BYTE *)(i + 16) = *(_BYTE *)(a2 - 8);
        *(__n128 *)i = v232;
        result = v237;
        *(_BYTE *)(a2 - 8) = v242;
        *v11 = v237;
        return result;
      case 3:
        result.n128_u64[0] = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::{lambda(BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&)#1} &,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo*>((_QWORD *)i, (uint64_t *)(i + 24), (uint64_t *)(a2 - 24), a3, result).n128_u64[0];
        return result;
      case 4:
        result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::{lambda(BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&)#1} &,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo*>((uint64_t *)i, i + 24, (uint64_t *)(i + 48), (uint64_t *)(a2 - 24), a3, result).n128_u64[0];
        return result;
      case 5:
        result.n128_u64[0] = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::{lambda(BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&)#1} &,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo*>(i, i + 24, i + 48, (uint64_t *)(i + 72), (uint64_t *)(a2 - 24), a3, result).n128_u64[0];
        return result;
      default:
        if (v13 <= 575)
        {
          v109 = (_QWORD *)(i + 24);
          v111 = i == a2 || v109 == (_QWORD *)a2;
          if ((a5 & 1) != 0)
          {
            if (v111)
              return result;
            v112 = 0;
            v113 = i;
            while (1)
            {
              v115 = v113;
              v113 = (unint64_t)v109;
              v116 = *(unsigned __int8 *)(v115 + 40);
              v117 = *(_QWORD *)(v115 + 24);
              if (v116 == *(unsigned __int8 *)(v115 + 16))
              {
                v118 = *(_QWORD *)v115;
              }
              else
              {
                v118 = *(_QWORD *)v115;
                if (v117 == *(_QWORD *)(v115 + 8) && *(_QWORD *)(v115 + 32) == v118)
                {
                  if (!*(_BYTE *)(v115 + 40))
                    goto LABEL_224;
                  result = *(__n128 *)v115;
                  *(_OWORD *)v113 = *(_OWORD *)v115;
                  *(_BYTE *)(v113 + 16) = *(_BYTE *)(v115 + 16);
                  v114 = i;
                  if (v115 == i)
                    goto LABEL_223;
                  goto LABEL_252;
                }
              }
              v120 = **a3;
              v121 = (unint64_t *)(v120 + 16 * v117);
              v122 = (double *)(v120 + 16 * v118);
              result.n128_u64[0] = *v121;
              if (*(double *)v121 >= *v122)
              {
                if (*(double *)v121 != *v122)
                  goto LABEL_224;
                result.n128_u64[0] = v121[1];
                if (result.n128_f64[0] >= v122[1])
                  goto LABEL_224;
              }
              v118 = *(_QWORD *)(v115 + 32);
              result = *(__n128 *)v115;
              *(_OWORD *)v113 = *(_OWORD *)v115;
              *(_BYTE *)(v113 + 16) = *(_BYTE *)(v115 + 16);
              if (v115 == i)
              {
LABEL_222:
                v114 = i;
                goto LABEL_223;
              }
              if (!v116)
              {
                v123 = v112;
                while (1)
                {
                  v124 = (__n128 *)(i + v123);
                  v125 = (__n128 *)(i + v123 - 24);
                  if (*(_BYTE *)(i + v123 - 8))
                  {
                    v126 = v125->n128_u64[0];
                    if (v117 == v124[-1].n128_u64[0] && v118 == v126)
                      goto LABEL_264;
                  }
                  else
                  {
                    v126 = v125->n128_u64[0];
                  }
                  v128 = **a3;
                  v129 = (unint64_t *)(v128 + 16 * v117);
                  v130 = (double *)(v128 + 16 * v126);
                  result.n128_u64[0] = *v129;
                  if (*(double *)v129 >= *v130)
                  {
                    if (*(double *)v129 != *v130)
                      goto LABEL_263;
                    result.n128_u64[0] = v129[1];
                    if (result.n128_f64[0] >= v130[1])
                      goto LABEL_263;
                  }
                  v115 -= 24;
                  result = *v125;
                  *v124 = *v125;
                  v124[1].n128_u8[0] = *(_BYTE *)(i + v123 - 8);
                  v123 -= 24;
                  if (!v123)
                    goto LABEL_222;
                }
              }
LABEL_252:
              v123 = v112;
              while (1)
              {
                v131 = (__n128 *)(i + v123);
                v132 = (__n128 *)(i + v123 - 24);
                if (v116 == *(unsigned __int8 *)(i + v123 - 8))
                {
                  v133 = v132->n128_u64[0];
                }
                else
                {
                  v133 = v132->n128_u64[0];
                  if (v117 == v131[-1].n128_u64[0] && v118 == v133)
                    goto LABEL_253;
                }
                v135 = **a3;
                v136 = (unint64_t *)(v135 + 16 * v117);
                v137 = (double *)(v135 + 16 * v133);
                result.n128_u64[0] = *v136;
                if (*(double *)v136 >= *v137)
                  break;
LABEL_253:
                v115 -= 24;
                result = *v132;
                *v131 = *v132;
                v131[1].n128_u8[0] = *(_BYTE *)(i + v123 - 8);
                v123 -= 24;
                if (!v123)
                  goto LABEL_222;
              }
              if (*(double *)v136 == *v137)
              {
                result.n128_u64[0] = v136[1];
                if (result.n128_f64[0] >= v137[1])
                {
LABEL_263:
                  v114 = v115;
                  goto LABEL_223;
                }
                goto LABEL_253;
              }
LABEL_264:
              v114 = i + v123;
LABEL_223:
              *(_QWORD *)v114 = v117;
              *(_QWORD *)(v114 + 8) = v118;
              *(_BYTE *)(v114 + 16) = v116;
LABEL_224:
              v109 = (_QWORD *)(v113 + 24);
              v112 += 24;
              if (v113 + 24 == a2)
                return result;
            }
          }
          if (v111)
            return result;
          while (1)
          {
            v176 = a1;
            a1 = v109;
            v177 = *((unsigned __int8 *)v176 + 40);
            v178 = v176[3];
            if (v177 == *((unsigned __int8 *)v176 + 16))
              break;
            v179 = *v176;
            if (v178 != v176[1] || v176[4] != v179)
              goto LABEL_338;
            if (*((_BYTE *)v176 + 40))
              goto LABEL_355;
LABEL_331:
            v109 = a1 + 3;
            if (a1 + 3 == (_QWORD *)a2)
              return result;
          }
          v179 = *v176;
LABEL_338:
          v181 = **a3;
          v182 = (unint64_t *)(v181 + 16 * v178);
          v183 = (double *)(v181 + 16 * v179);
          result.n128_u64[0] = *v182;
          if (*(double *)v182 >= *v183)
          {
            if (*(double *)v182 != *v183)
              goto LABEL_331;
            result.n128_u64[0] = v182[1];
            if (result.n128_f64[0] >= v183[1])
              goto LABEL_331;
          }
          v179 = v176[4];
          if (!*((_BYTE *)v176 + 40))
          {
            while (1)
            {
              v184 = v176;
              result = *(__n128 *)v176;
              *(_OWORD *)(v176 + 3) = *(_OWORD *)v176;
              *((_BYTE *)v176 + 40) = *((_BYTE *)v176 + 16);
              if (*((_BYTE *)v176 - 8))
              {
                v185 = *(v176 - 3);
                if (v178 == *(v176 - 2) && v179 == v185)
                  goto LABEL_330;
              }
              else
              {
                v185 = *(v176 - 3);
              }
              v176 -= 3;
              v187 = **a3;
              v188 = (unint64_t *)(v187 + 16 * v178);
              v189 = (double *)(v187 + 16 * v185);
              result.n128_u64[0] = *v188;
              if (*(double *)v188 >= *v189)
              {
                if (*(double *)v188 != *v189)
                  goto LABEL_330;
                result.n128_u64[0] = v188[1];
                if (result.n128_f64[0] >= v189[1])
                  goto LABEL_330;
              }
            }
          }
          while (1)
          {
LABEL_355:
            v184 = v176;
            *(_OWORD *)(v176 + 3) = *(_OWORD *)v176;
            *((_BYTE *)v176 + 40) = *((_BYTE *)v176 + 16);
            v176 -= 3;
            if (v177 == *((unsigned __int8 *)v184 - 8))
            {
              v190 = *(v184 - 3);
LABEL_361:
              v192 = **a3;
              v193 = (unint64_t *)(v192 + 16 * v178);
              v194 = (double *)(v192 + 16 * v190);
              result.n128_u64[0] = *v193;
              if (*(double *)v193 >= *v194)
              {
                if (*(double *)v193 != *v194 || (result.n128_u64[0] = v193[1], result.n128_f64[0] >= v194[1]))
                {
LABEL_330:
                  *v184 = v178;
                  v184[1] = v179;
                  *((_BYTE *)v184 + 16) = v177;
                  goto LABEL_331;
                }
              }
            }
            else
            {
              v190 = *(v184 - 3);
              if (v178 != *(v184 - 2) || v179 != v190)
                goto LABEL_361;
            }
          }
        }
        if (!a4)
        {
          if (i == a2)
            return result;
          v138 = (unint64_t)(v14 - 2) >> 1;
          v139 = v138;
          while (1)
          {
            v141 = v139;
            if (v138 < v139)
              goto LABEL_269;
            v142 = (2 * v139) | 1;
            v140 = i + 24 * v142;
            if (2 * v141 + 2 < v14)
            {
              v143 = *(_QWORD *)v140;
              if (*(unsigned __int8 *)(i + 24 * v142 + 16) == *(unsigned __int8 *)(v140 + 40))
              {
                v144 = *(_QWORD *)(v140 + 24);
              }
              else
              {
                v144 = *(_QWORD *)(v140 + 24);
                if (v143 == *(_QWORD *)(v140 + 32) && *(_QWORD *)(i + 24 * v142 + 8) == v144)
                {
                  if (!*(_BYTE *)(i + 24 * v142 + 16))
                    goto LABEL_284;
LABEL_283:
                  v140 += 24;
                  v142 = 2 * v141 + 2;
                  goto LABEL_284;
                }
              }
              v146 = **a3;
              v147 = (double *)(v146 + 16 * v143);
              v148 = (double *)(v146 + 16 * v144);
              if (*v147 < *v148 || *v147 == *v148 && v147[1] < v148[1])
                goto LABEL_283;
            }
LABEL_284:
            v149 = i + 24 * v141;
            v150 = *(unsigned __int8 *)(v149 + 16);
            v151 = *(_QWORD *)v140;
            if (*(unsigned __int8 *)(v140 + 16) == v150)
            {
              v152 = *(_QWORD *)v149;
LABEL_290:
              v154 = **a3;
              v155 = (double *)(v154 + 16 * v151);
              v156 = (double *)(v154 + 16 * v152);
              if (*v155 < *v156 || *v155 == *v156 && v155[1] < v156[1])
                goto LABEL_269;
              goto LABEL_295;
            }
            v152 = *(_QWORD *)v149;
            if (v151 != *(_QWORD *)(i + 24 * v141 + 8) || *(_QWORD *)(v140 + 8) != v152)
              goto LABEL_290;
            if (*(_BYTE *)(v140 + 16))
              goto LABEL_269;
LABEL_295:
            v157 = *(_QWORD *)(v149 + 8);
            do
            {
              while (1)
              {
                v158 = *(_OWORD *)v140;
                *(_BYTE *)(v149 + 16) = *(_BYTE *)(v140 + 16);
                *(_OWORD *)v149 = v158;
                if (v138 < v142)
                  goto LABEL_268;
                v149 = v140;
                v159 = 2 * v142;
                v142 = (2 * v142) | 1;
                v140 = i + 24 * v142;
                v160 = v159 + 2;
                if (v160 < v14)
                {
                  v161 = *(_QWORD *)v140;
                  if (*(unsigned __int8 *)(i + 24 * v142 + 16) == *(unsigned __int8 *)(v140 + 40))
                  {
                    v162 = *(_QWORD *)(v140 + 24);
LABEL_305:
                    v164 = **a3;
                    v165 = (double *)(v164 + 16 * v161);
                    v166 = (double *)(v164 + 16 * v162);
                    if (*v165 >= *v166 && (*v165 != *v166 || v165[1] >= v166[1]))
                      goto LABEL_311;
LABEL_310:
                    v140 += 24;
                    v142 = v160;
                    goto LABEL_311;
                  }
                  v162 = *(_QWORD *)(v140 + 24);
                  if (v161 != *(_QWORD *)(v140 + 32) || *(_QWORD *)(i + 24 * v142 + 8) != v162)
                    goto LABEL_305;
                  if (*(_BYTE *)(i + 24 * v142 + 16))
                    goto LABEL_310;
                }
LABEL_311:
                v167 = *(_QWORD *)v140;
                if (*(unsigned __int8 *)(v140 + 16) == v150)
                  break;
                if (v167 != v157 || *(_QWORD *)(v140 + 8) != v152)
                  break;
                if (*(_BYTE *)(v140 + 16))
                  goto LABEL_267;
              }
              v169 = **a3;
              v170 = (double *)(v169 + 16 * v167);
              v171 = (double *)(v169 + 16 * v152);
            }
            while (*v170 >= *v171 && (*v170 != *v171 || v170[1] >= v171[1]));
LABEL_267:
            v140 = v149;
LABEL_268:
            *(_QWORD *)v140 = v152;
            *(_QWORD *)(v140 + 8) = v157;
            *(_BYTE *)(v140 + 16) = v150;
LABEL_269:
            v139 = v141 - 1;
            if (!v141)
            {
              v195 = v13 / 0x18uLL;
              while (1)
              {
                v197 = 0;
                v241 = *(_QWORD *)(i + 16);
                v236 = *(__n128 *)i;
                v198 = i;
                do
                {
                  v200 = v198;
                  v201 = v197 + 1;
                  v198 += 24 * (v197 + 1);
                  v202 = 2 * v197;
                  v197 = (2 * v197) | 1;
                  v203 = v202 + 2;
                  if (v203 < v195)
                  {
                    v204 = *(unsigned __int8 *)(v200 + 24 * v201 + 16);
                    v205 = *(_QWORD *)v198;
                    if (v204 == *(unsigned __int8 *)(v198 + 40))
                    {
                      v206 = *(_QWORD *)(v198 + 24);
                    }
                    else
                    {
                      v206 = *(_QWORD *)(v198 + 24);
                      v207 = *(_QWORD *)(v200 + 24 * v201 + 8);
                      if (v205 == *(_QWORD *)(v198 + 32) && v207 == v206)
                      {
                        if (!v204)
                          goto LABEL_371;
LABEL_370:
                        v198 += 24;
                        v197 = v203;
                        goto LABEL_371;
                      }
                    }
                    v209 = **a3;
                    v210 = (double *)(v209 + 16 * v205);
                    v211 = (double *)(v209 + 16 * v206);
                    if (*v210 < *v211 || *v210 == *v211 && v210[1] < v211[1])
                      goto LABEL_370;
                  }
LABEL_371:
                  v199 = *(_OWORD *)v198;
                  *(_BYTE *)(v200 + 16) = *(_BYTE *)(v198 + 16);
                  *(_OWORD *)v200 = v199;
                }
                while (v197 <= (uint64_t)((unint64_t)(v195 - 2) >> 1));
                a2 -= 24;
                if (v198 == a2)
                {
                  result = v236;
                  *(_BYTE *)(v198 + 16) = v241;
                  *(__n128 *)v198 = v236;
                }
                else
                {
                  v212 = *(_OWORD *)a2;
                  *(_BYTE *)(v198 + 16) = *(_BYTE *)(a2 + 16);
                  *(_OWORD *)v198 = v212;
                  result = v236;
                  *(_BYTE *)(a2 + 16) = v241;
                  *(__n128 *)a2 = v236;
                  v213 = v198 - i + 24;
                  if (v213 >= 25)
                  {
                    v214 = 0xAAAAAAAAAAAAAAABLL * (v213 >> 3) - 2;
                    v215 = v214 >> 1;
                    v216 = i + 24 * (v214 >> 1);
                    v217 = *(unsigned __int8 *)(v198 + 16);
                    v218 = *(_QWORD *)v216;
                    if (*(unsigned __int8 *)(v216 + 16) == v217)
                    {
                      v219 = *(_QWORD *)v198;
                      goto LABEL_391;
                    }
                    v219 = *(_QWORD *)v198;
                    if (v218 == *(_QWORD *)(v198 + 8) && *(_QWORD *)(i + 24 * v215 + 8) == v219)
                    {
                      if (*(_BYTE *)(v216 + 16))
                        goto LABEL_396;
                    }
                    else
                    {
LABEL_391:
                      v221 = **a3;
                      v222 = (unint64_t *)(v221 + 16 * v218);
                      v223 = (double *)(v221 + 16 * v219);
                      result.n128_u64[0] = *v222;
                      if (*(double *)v222 < *v223
                        || *(double *)v222 == *v223 && (result.n128_u64[0] = v222[1], result.n128_f64[0] < v223[1]))
                      {
LABEL_396:
                        v224 = *(_QWORD *)(v198 + 8);
                        result = *(__n128 *)v216;
                        *(_BYTE *)(v198 + 16) = *(_BYTE *)(v216 + 16);
                        *(__n128 *)v198 = result;
                        if (v214 >= 2)
                        {
                          while (1)
                          {
                            v226 = v215 - 1;
                            v215 = (v215 - 1) >> 1;
                            v225 = i + 24 * v215;
                            v227 = *(_QWORD *)v225;
                            if (*(unsigned __int8 *)(v225 + 16) != v217
                              && (v227 == v224 ? (v228 = *(_QWORD *)(i + 24 * v215 + 8) == v219) : (v228 = 0), v228))
                            {
                              if (!*(_BYTE *)(v225 + 16))
                                break;
                            }
                            else
                            {
                              v229 = **a3;
                              v230 = (unint64_t *)(v229 + 16 * v227);
                              v231 = (double *)(v229 + 16 * v219);
                              result.n128_u64[0] = *v230;
                              if (*(double *)v230 >= *v231)
                              {
                                if (*(double *)v230 != *v231)
                                  break;
                                result.n128_u64[0] = v230[1];
                                if (result.n128_f64[0] >= v231[1])
                                  break;
                              }
                            }
                            result = *(__n128 *)v225;
                            *(_BYTE *)(v216 + 16) = *(_BYTE *)(v225 + 16);
                            *(__n128 *)v216 = result;
                            v216 = i + 24 * v215;
                            if (v226 <= 1)
                              goto LABEL_398;
                          }
                        }
                        v225 = v216;
LABEL_398:
                        *(_QWORD *)v225 = v219;
                        *(_QWORD *)(v225 + 8) = v224;
                        *(_BYTE *)(v225 + 16) = v217;
                      }
                    }
                  }
                }
                if (v195-- <= 2)
                  return result;
              }
            }
          }
        }
        v15 = (unint64_t)v14 >> 1;
        v16 = i + 24 * ((unint64_t)v14 >> 1);
        if ((unint64_t)v13 >= 0xC01)
        {
          v17 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::{lambda(BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&)#1} &,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo*>(a1, &a1[3 * v15], (uint64_t *)(a2 - 24), a3, result);
          v18 = 3 * v15;
          v19 = &a1[3 * v15 - 3];
          v20 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::{lambda(BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&)#1} &,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo*>(a1 + 3, v19, (uint64_t *)(a2 - 48), a3, v17);
          v21 = &a1[v18 + 3];
          v22 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::{lambda(BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&)#1} &,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo*>(a1 + 6, v21, (uint64_t *)(a2 - 72), a3, v20);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::{lambda(BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&)#1} &,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo*>(v19, (uint64_t *)v16, v21, a3, v22);
          v238 = a1[2];
          v233 = *(__n128 *)a1;
          v23 = *(_BYTE *)(v16 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v16;
          *((_BYTE *)a1 + 16) = v23;
          result = v233;
          *(_BYTE *)(v16 + 16) = v238;
          *(__n128 *)v16 = v233;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_10;
LABEL_7:
          v24 = *((unsigned __int8 *)a1 + 16);
          v25 = *(a1 - 3);
          if (*((unsigned __int8 *)a1 - 8) == v24)
          {
            v26 = *a1;
          }
          else
          {
            v26 = *a1;
            if (v25 == a1[1] && *(a1 - 2) == v26)
            {
              if (*((_BYTE *)a1 - 8))
                goto LABEL_18;
              goto LABEL_93;
            }
          }
          v27 = **a3;
          v28 = (unint64_t *)(v27 + 16 * v25);
          v29 = (double *)(v27 + 16 * v26);
          result.n128_u64[0] = *v28;
          if (*(double *)v28 < *v29)
            goto LABEL_18;
          if (*(double *)v28 == *v29)
          {
            result.n128_u64[0] = v28[1];
            if (result.n128_f64[0] < v29[1])
              goto LABEL_18;
          }
LABEL_93:
          v63 = a1[1];
          v64 = *(unsigned __int8 *)(a2 - 8);
          if (v24 == v64)
          {
            v65 = v11->n128_u64[0];
          }
          else
          {
            v65 = *(_QWORD *)(a2 - 24);
            if (v26 == *(_QWORD *)(a2 - 16) && v63 == v65)
            {
              if (*((_BYTE *)a1 + 16))
              {
                v66 = *a3;
                goto LABEL_116;
              }
              goto LABEL_128;
            }
          }
          v66 = *a3;
          v67 = **a3;
          v68 = v67 + 16 * v26;
          v69 = (double *)(v67 + 16 * v65);
          result.n128_u64[0] = *(_QWORD *)v68;
          if (*(double *)v68 < *v69 || *(double *)v68 == *v69 && *(double *)(v68 + 8) < v69[1])
          {
            if (!*((_BYTE *)a1 + 16))
            {
              for (i = (unint64_t)(a1 + 3); ; i += 24)
              {
                if (*(_BYTE *)(i + 16))
                {
                  v70 = *(_QWORD *)i;
                  if (v26 == *(_QWORD *)(i + 8) && v63 == v70)
                    continue;
                }
                else
                {
                  v70 = *(_QWORD *)i;
                }
                v72 = (double *)(v67 + 16 * v70);
                if (result.n128_f64[0] < *v72 || result.n128_f64[0] == *v72 && *(double *)(v68 + 8) < v72[1])
                  goto LABEL_141;
              }
            }
LABEL_116:
            for (i = (unint64_t)(a1 + 3); ; i += 24)
            {
              if (v24 == *(unsigned __int8 *)(i + 16))
              {
                v73 = *(_QWORD *)i;
              }
              else
              {
                v73 = *(_QWORD *)i;
                if (v26 == *(_QWORD *)(i + 8) && v63 == v73)
                  goto LABEL_141;
              }
              v75 = (unint64_t *)(*v66 + 16 * v26);
              v76 = (double *)(*v66 + 16 * v73);
              result.n128_u64[0] = *v75;
              if (*(double *)v75 < *v76)
                goto LABEL_141;
              if (*(double *)v75 == *v76)
              {
                result.n128_u64[0] = v75[1];
                if (result.n128_f64[0] < v76[1])
                  goto LABEL_141;
              }
            }
          }
LABEL_128:
          i = (unint64_t)(a1 + 3);
          if ((unint64_t)(a1 + 3) < a2)
          {
            v77 = *a3;
            do
            {
              if (v24 == *(unsigned __int8 *)(i + 16))
              {
                v78 = *(_QWORD *)i;
              }
              else
              {
                v78 = *(_QWORD *)i;
                if (v26 == *(_QWORD *)(i + 8) && v63 == v78)
                {
                  if (*((_BYTE *)a1 + 16))
                    break;
                  goto LABEL_131;
                }
              }
              v80 = (unint64_t *)(*v77 + 16 * v26);
              v81 = (double *)(*v77 + 16 * v78);
              result.n128_u64[0] = *v80;
              if (*(double *)v80 < *v81)
                break;
              if (*(double *)v80 == *v81)
              {
                result.n128_u64[0] = v80[1];
                if (result.n128_f64[0] < v81[1])
                  break;
              }
LABEL_131:
              i += 24;
            }
            while (i < a2);
          }
LABEL_141:
          v82 = (_QWORD *)a2;
          if (i >= a2)
            goto LABEL_201;
          v83 = *a3;
          if (*((_BYTE *)a1 + 16))
          {
            for (j = (_QWORD *)(a2 - 16); ; j -= 3)
            {
              if (v24 == v64)
              {
                v85 = *(j - 1);
              }
              else
              {
                v85 = *(j - 1);
                if (v26 == *j && v63 == v85)
                  goto LABEL_144;
              }
              v87 = (unint64_t *)(*v83 + 16 * v26);
              v88 = (double *)(*v83 + 16 * v85);
              result.n128_u64[0] = *v87;
              if (*(double *)v87 >= *v88)
              {
                if (*(double *)v87 != *v88)
                  goto LABEL_168;
                result.n128_u64[0] = v87[1];
                if (result.n128_f64[0] >= v88[1])
                  goto LABEL_168;
              }
LABEL_144:
              v64 = *((unsigned __int8 *)j - 16);
            }
          }
          for (j = (_QWORD *)(a2 - 16); ; j -= 3)
          {
            if (!v64)
            {
              v89 = *(j - 1);
              goto LABEL_165;
            }
            v89 = *(j - 1);
            if (v26 == *j && v63 == v89)
              break;
LABEL_165:
            v91 = (unint64_t *)(*v83 + 16 * v26);
            v92 = (double *)(*v83 + 16 * v89);
            result.n128_u64[0] = *v91;
            if (*(double *)v91 >= *v92)
            {
              if (*(double *)v91 != *v92)
                break;
              result.n128_u64[0] = v91[1];
              if (result.n128_f64[0] >= v92[1])
                break;
            }
            v64 = *((unsigned __int8 *)j - 16);
          }
LABEL_168:
          v82 = j - 1;
LABEL_201:
          if (i < (unint64_t)v82)
          {
            v240 = *(_QWORD *)(i + 16);
            v235 = *(__n128 *)i;
            v93 = *(__n128 *)v82;
            *(_BYTE *)(i + 16) = *((_BYTE *)v82 + 16);
            *(__n128 *)i = v93;
            result = v235;
            *((_BYTE *)v82 + 16) = v240;
            *(__n128 *)v82 = v235;
            v94 = *a3;
            if (v24)
            {
              while (1)
              {
                i += 24;
                if (v24 != *(unsigned __int8 *)(i + 16))
                  break;
                v95 = *(_QWORD *)i;
LABEL_176:
                v97 = (unint64_t *)(*v94 + 16 * v26);
                v98 = (double *)(*v94 + 16 * v95);
                result.n128_u64[0] = *v97;
                if (*(double *)v97 >= *v98)
                {
                  if (*(double *)v97 != *v98)
                    continue;
                  result.n128_u64[0] = v97[1];
                  if (result.n128_f64[0] >= v98[1])
                    continue;
                }
                goto LABEL_192;
              }
              v95 = *(_QWORD *)i;
              if (v26 != *(_QWORD *)(i + 8) || v63 != v95)
                goto LABEL_176;
              while (1)
              {
LABEL_192:
                v82 -= 3;
                if (v24 == *((unsigned __int8 *)v82 + 16))
                {
                  v103 = *v82;
                }
                else
                {
                  v103 = *v82;
                  if (v26 == v82[1] && v63 == v103)
                  {
                    if (!v24)
                      goto LABEL_201;
                    continue;
                  }
                }
                v105 = (unint64_t *)(*v94 + 16 * v26);
                v106 = (double *)(*v94 + 16 * v103);
                result.n128_u64[0] = *v105;
                if (*(double *)v105 >= *v106)
                {
                  if (*(double *)v105 != *v106)
                    goto LABEL_201;
                  result.n128_u64[0] = v105[1];
                  if (result.n128_f64[0] >= v106[1])
                    goto LABEL_201;
                }
              }
            }
            while (1)
            {
              i += 24;
              if (*(_BYTE *)(i + 16))
              {
                v99 = *(_QWORD *)i;
                if (v26 == *(_QWORD *)(i + 8) && v63 == v99)
                  continue;
              }
              else
              {
                v99 = *(_QWORD *)i;
              }
              v101 = (unint64_t *)(*v94 + 16 * v26);
              v102 = (double *)(*v94 + 16 * v99);
              result.n128_u64[0] = *v101;
              if (*(double *)v101 >= *v102)
              {
                if (*(double *)v101 != *v102)
                  continue;
                result.n128_u64[0] = v101[1];
                if (result.n128_f64[0] >= v102[1])
                  continue;
              }
              goto LABEL_192;
            }
          }
          if ((_QWORD *)(i - 24) != a1)
          {
            result = *(__n128 *)(i - 24);
            *((_BYTE *)a1 + 16) = *(_BYTE *)(i - 8);
            *(__n128 *)a1 = result;
          }
          a5 = 0;
          *(_QWORD *)(i - 24) = v26;
          *(_QWORD *)(i - 16) = v63;
          *(_BYTE *)(i - 8) = v24;
          continue;
        }
        result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::{lambda(BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&)#1} &,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo*>(&a1[3 * v15], a1, (uint64_t *)(a2 - 24), a3, result);
        --a4;
        if ((a5 & 1) == 0)
          goto LABEL_7;
LABEL_10:
        v26 = *a1;
        v24 = *((unsigned __int8 *)a1 + 16);
LABEL_18:
        v30 = a1[1];
        v31 = *a3;
        for (k = a1 + 3; ; k += 3)
        {
          v33 = *k;
          if (*((unsigned __int8 *)k + 16) == v24)
            break;
          if (v33 != v30 || k[1] != v26)
            break;
          if (!*((_BYTE *)k + 16))
            goto LABEL_29;
LABEL_20:
          ;
        }
        v35 = (unint64_t *)(*v31 + 16 * v33);
        v36 = (double *)(*v31 + 16 * v26);
        result.n128_u64[0] = *v35;
        if (*(double *)v35 < *v36)
          goto LABEL_20;
        if (*(double *)v35 == *v36)
        {
          result.n128_u64[0] = v35[1];
          if (result.n128_f64[0] < v36[1])
            goto LABEL_20;
        }
LABEL_29:
        m = a2 - 24;
        if (k - 3 != a1)
        {
          while (1)
          {
            v38 = *(_QWORD *)m;
            if (*(unsigned __int8 *)(m + 16) != v24
              && (v38 == v30 ? (v39 = *(_QWORD *)(m + 8) == v26) : (v39 = 0), v39))
            {
              if (*(_BYTE *)(m + 16))
                goto LABEL_42;
            }
            else
            {
              v40 = (unint64_t *)(*v31 + 16 * v38);
              v41 = (double *)(*v31 + 16 * v26);
              result.n128_u64[0] = *v40;
              if (*(double *)v40 < *v41)
                goto LABEL_42;
              if (*(double *)v40 == *v41)
              {
                result.n128_u64[0] = v40[1];
                if (result.n128_f64[0] < v41[1])
                  goto LABEL_42;
              }
            }
            m -= 24;
          }
        }
        m = a2;
        if ((unint64_t)k < a2)
        {
          for (m = a2 - 24; ; m -= 24)
          {
            v57 = *(_QWORD *)m;
            if (*(unsigned __int8 *)(m + 16) != v24
              && (v57 == v30 ? (v58 = *(_QWORD *)(m + 8) == v26) : (v58 = 0), v58))
            {
              if (*(_BYTE *)(m + 16))
                v62 = 1;
              else
                v62 = (unint64_t)k >= m;
              if (v62)
                break;
            }
            else
            {
              v59 = (unint64_t *)(*v31 + 16 * v57);
              v60 = (double *)(*v31 + 16 * v26);
              result.n128_u64[0] = *v59;
              if (*(double *)v59 < *v60)
                break;
              if (*(double *)v59 == *v60)
              {
                result.n128_u64[0] = v59[1];
                if (result.n128_f64[0] < v60[1] || (unint64_t)k >= m)
                  break;
              }
              else if ((unint64_t)k >= m)
              {
                break;
              }
            }
          }
        }
LABEL_42:
        i = (unint64_t)k;
        if ((unint64_t)k < m)
        {
          i = (unint64_t)k;
          v42 = m;
          do
          {
            v239 = *(_QWORD *)(i + 16);
            v234 = *(__n128 *)i;
            v43 = *(__n128 *)v42;
            *(_BYTE *)(i + 16) = *(_BYTE *)(v42 + 16);
            *(__n128 *)i = v43;
            result = v234;
            *(_BYTE *)(v42 + 16) = v239;
            *(__n128 *)v42 = v234;
            v44 = *a3;
            do
            {
              while (1)
              {
                i += 24;
                v45 = *(_QWORD *)i;
                if (*(unsigned __int8 *)(i + 16) != v24 && v45 == v30 && *(_QWORD *)(i + 8) == v26)
                  break;
                v47 = (unint64_t *)(*v44 + 16 * v45);
                v48 = (double *)(*v44 + 16 * v26);
                result.n128_u64[0] = *v47;
                if (*(double *)v47 >= *v48)
                {
                  if (*(double *)v47 != *v48)
                    goto LABEL_57;
                  result.n128_u64[0] = v47[1];
                  if (result.n128_f64[0] >= v48[1])
                    goto LABEL_57;
                }
              }
            }
            while (*(_BYTE *)(i + 16));
            while (1)
            {
LABEL_57:
              while (1)
              {
                v42 -= 24;
                v49 = *(_QWORD *)v42;
                if (*(unsigned __int8 *)(v42 + 16) == v24)
                  break;
                if (v49 != v30 || *(_QWORD *)(v42 + 8) != v26)
                  break;
                if (*(_BYTE *)(v42 + 16))
                  goto LABEL_44;
              }
              v51 = (unint64_t *)(*v44 + 16 * v49);
              v52 = (double *)(*v44 + 16 * v26);
              result.n128_u64[0] = *v51;
              if (*(double *)v51 < *v52)
                break;
              if (*(double *)v51 == *v52)
              {
                result.n128_u64[0] = v51[1];
                if (result.n128_f64[0] < v52[1])
                  break;
              }
            }
LABEL_44:
            ;
          }
          while (i < v42);
        }
        if ((_QWORD *)(i - 24) != a1)
        {
          result = *(__n128 *)(i - 24);
          *((_BYTE *)a1 + 16) = *(_BYTE *)(i - 8);
          *(__n128 *)a1 = result;
        }
        *(_QWORD *)(i - 24) = v26;
        *(_QWORD *)(i - 16) = v30;
        *(_BYTE *)(i - 8) = v24;
        if ((unint64_t)k < m)
        {
LABEL_71:
          std::__introsort<std::_ClassicAlgPolicy,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::{lambda(BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&)#1} &,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo*,false>(a1, i - 24, a3, a4, a5 & 1, result);
          a5 = 0;
          continue;
        }
        v53 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::{lambda(BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&)#1} &,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo*>((uint64_t)a1, i - 24, a3, result);
        v55 = v54;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::{lambda(BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo const&)#1} &,BOOL geo::Intersect::isSelfIntersecting<double>(std::vector<gm::Matrix<double,2,1>> const&,BOOL)::EventInfo*>(i, a2, a3, v53);
        if (!v56)
        {
          if ((v55 & 1) != 0)
            continue;
          goto LABEL_71;
        }
        a2 = i - 24;
        if ((v55 & 1) == 0)
          goto LABEL_1;
        return result;
    }
  }
}

  v8 = a2 - 16;
  i = a1;
  while (2)
  {
    a1 = i;
    v10 = a2 - (_QWORD)i;
    v11 = (uint64_t)(a2 - (_QWORD)i) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return *(double *)&v16;
      case 2uLL:
        v64 = *(_QWORD *)(*(_QWORD *)v8 + 8);
        v65 = *(_QWORD *)(*(_QWORD *)i + 8);
        if ((*(_BYTE *)(v64 + 60) != 0) == (*(_BYTE *)(v65 + 60) != 0))
        {
          if (*(_QWORD *)(*(_QWORD *)(v64 + 16) + 24) >= *(_QWORD *)(*(_QWORD *)(v65 + 16) + 24))
            return *(double *)&v16;
        }
        else if (*(_BYTE *)(v64 + 60))
        {
          return *(double *)&v16;
        }
        v16 = *(_OWORD *)i;
        v142 = *(_OWORD *)i;
        v127 = *(_QWORD *)v8;
        i[4] = *(_WORD *)(a2 - 8);
        *(_QWORD *)i = v127;
        *(_WORD *)(a2 - 8) = WORD4(v142);
        *(_QWORD *)v8 = v142;
        return *(double *)&v16;
      case 3uLL:
        *(_QWORD *)&v16 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::connectTileLabelLineSegments(std::vector<md::SegmentConnectionEntry,geo::StdAllocator<md::SegmentConnectionEntry,mdm::Allocator>> &,double,std::vector<std::pair<unsigned long,unsigned long>> &)::$_0 &,md::SegmentConnectionEntry*>(i, i + 8, (_WORD *)(a2 - 16)).n128_u64[0];
        return *(double *)&v16;
      case 4uLL:
        *(_QWORD *)&v16 = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::connectTileLabelLineSegments(std::vector<md::SegmentConnectionEntry,geo::StdAllocator<md::SegmentConnectionEntry,mdm::Allocator>> &,double,std::vector<std::pair<unsigned long,unsigned long>> &)::$_0 &,md::SegmentConnectionEntry*>(i, i + 8, i + 16, (_WORD *)(a2 - 16)).n128_u64[0];
        return *(double *)&v16;
      case 5uLL:
        *(_QWORD *)&v16 = std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::connectTileLabelLineSegments(std::vector<md::SegmentConnectionEntry,geo::StdAllocator<md::SegmentConnectionEntry,mdm::Allocator>> &,double,std::vector<std::pair<unsigned long,unsigned long>> &)::$_0 &,md::SegmentConnectionEntry*,0>(i, i + 8, i + 16, i + 24, (_WORD *)(a2 - 16)).n128_u64[0];
        return *(double *)&v16;
      default:
        if (v10 <= 383)
        {
          v66 = i + 8;
          v68 = i == (_WORD *)a2 || v66 == (_WORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (v68)
              return *(double *)&v16;
            v69 = 0;
            v70 = i;
            while (1)
            {
              v72 = v70;
              v70 = v66;
              v73 = *((_QWORD *)v72 + 2);
              v74 = *(_QWORD *)(v73 + 8);
              v75 = *(_QWORD *)(*(_QWORD *)v72 + 8);
              if ((*(_BYTE *)(v74 + 60) != 0) == (*(_BYTE *)(v75 + 60) != 0))
              {
                if (*(_QWORD *)(*(_QWORD *)(v74 + 16) + 24) >= *(_QWORD *)(*(_QWORD *)(v75 + 16) + 24))
                  goto LABEL_131;
              }
              else if (*(_BYTE *)(v74 + 60))
              {
                goto LABEL_131;
              }
              v76 = v72[12];
              *(_QWORD *)v70 = *(_QWORD *)v72;
              v70[4] = v72[4];
              v71 = (char *)i;
              if (v72 == i)
                goto LABEL_130;
              v77 = v69;
              while (1)
              {
                v78 = (char *)i + v77;
                v79 = *(_QWORD *)(v73 + 8);
                v80 = *(_QWORD *)(*(_QWORD *)((char *)i + v77 - 16) + 8);
                if ((*(_BYTE *)(v79 + 60) != 0) != (*(_BYTE *)(v80 + 60) != 0))
                  break;
                if (*(_QWORD *)(*(_QWORD *)(v79 + 16) + 24) >= *(_QWORD *)(*(_QWORD *)(v80 + 16) + 24))
                {
                  v71 = (char *)v72;
                  goto LABEL_130;
                }
LABEL_139:
                v72 -= 8;
                *(_QWORD *)v78 = *(_QWORD *)((char *)i + v77 - 16);
                *((_WORD *)v78 + 4) = *(_WORD *)((char *)i + v77 - 8);
                v77 -= 16;
                if (!v77)
                {
                  v71 = (char *)i;
                  goto LABEL_130;
                }
              }
              if (!*(_BYTE *)(v79 + 60))
                goto LABEL_139;
              v71 = (char *)i + v77;
LABEL_130:
              *(_QWORD *)v71 = v73;
              *((_WORD *)v71 + 4) = v76;
LABEL_131:
              v66 = v70 + 8;
              v69 += 16;
              if (v70 + 8 == (_WORD *)a2)
                return *(double *)&v16;
            }
          }
          if (v68)
            return *(double *)&v16;
          while (1)
          {
            v128 = a1;
            a1 = v66;
            v129 = *((_QWORD *)v128 + 2);
            v130 = *(_QWORD *)(v129 + 8);
            v131 = *(_QWORD *)(*(_QWORD *)v128 + 8);
            if ((*(_BYTE *)(v130 + 60) != 0) == (*(_BYTE *)(v131 + 60) != 0))
            {
              if (*(_QWORD *)(*(_QWORD *)(v130 + 16) + 24) >= *(_QWORD *)(*(_QWORD *)(v131 + 16) + 24))
                goto LABEL_204;
            }
            else if (*(_BYTE *)(v130 + 60))
            {
              goto LABEL_204;
            }
            v132 = v128[12];
            do
            {
              while (1)
              {
                v133 = v128;
                *((_QWORD *)v128 + 2) = *(_QWORD *)v128;
                v128[12] = v128[4];
                v134 = *((_QWORD *)v128 - 2);
                v128 -= 8;
                v135 = *(_QWORD *)(v129 + 8);
                v136 = *(_QWORD *)(v134 + 8);
                if ((*(_BYTE *)(v135 + 60) != 0) != (*(_BYTE *)(v136 + 60) != 0))
                  break;
                if (*(_QWORD *)(*(_QWORD *)(v135 + 16) + 24) >= *(_QWORD *)(*(_QWORD *)(v136 + 16) + 24))
                  goto LABEL_203;
              }
            }
            while (!*(_BYTE *)(v135 + 60));
LABEL_203:
            *(_QWORD *)v133 = v129;
            v133[4] = v132;
LABEL_204:
            v66 = a1 + 8;
            if (a1 + 8 == (_WORD *)a2)
              return *(double *)&v16;
          }
        }
        if (!a3)
        {
          if (i == (_WORD *)a2)
            return *(double *)&v16;
          v81 = (v11 - 2) >> 1;
          v82 = v81;
          while (1)
          {
            v84 = v82;
            if (v81 < v82)
              goto LABEL_148;
            v85 = (2 * v82) | 1;
            v86 = &i[8 * v85];
            if (2 * v84 + 2 < (uint64_t)v11)
            {
              v87 = *(_QWORD *)(*(_QWORD *)v86 + 8);
              v88 = *(_QWORD *)(*((_QWORD *)v86 + 2) + 8);
              if ((*(_BYTE *)(v87 + 60) != 0) == (*(_BYTE *)(v88 + 60) != 0))
              {
                if (*(_QWORD *)(*(_QWORD *)(v87 + 16) + 24) >= *(_QWORD *)(*(_QWORD *)(v88 + 16) + 24))
                  goto LABEL_156;
              }
              else if (*(_BYTE *)(v87 + 60))
              {
                goto LABEL_156;
              }
              v86 += 8;
              v85 = 2 * v84 + 2;
            }
LABEL_156:
            v89 = &i[8 * v84];
            v90 = *(_QWORD *)v89;
            v91 = *(_QWORD *)(*(_QWORD *)v86 + 8);
            v92 = *(_QWORD *)(*(_QWORD *)v89 + 8);
            if ((*(_BYTE *)(v91 + 60) != 0) == (*(_BYTE *)(v92 + 60) != 0))
            {
              if (*(_QWORD *)(*(_QWORD *)(v91 + 16) + 24) >= *(_QWORD *)(*(_QWORD *)(v92 + 16) + 24))
              {
LABEL_160:
                v93 = v89[4];
                v94 = v86[4];
                *(_QWORD *)v89 = *(_QWORD *)v86;
                v89[4] = v94;
                if (v81 < v85)
                {
LABEL_146:
                  v83 = v86;
LABEL_147:
                  *(_QWORD *)v83 = v90;
                  v83[4] = v93;
                  goto LABEL_148;
                }
                while (2)
                {
                  v96 = 2 * v85;
                  v85 = (2 * v85) | 1;
                  v83 = &i[8 * v85];
                  v97 = v96 + 2;
                  if (v97 < (uint64_t)v11)
                  {
                    v98 = *(_QWORD *)(*(_QWORD *)v83 + 8);
                    v99 = *(_QWORD *)(*((_QWORD *)v83 + 2) + 8);
                    if ((*(_BYTE *)(v98 + 60) != 0) == (*(_BYTE *)(v99 + 60) != 0))
                    {
                      if (*(_QWORD *)(*(_QWORD *)(v98 + 16) + 24) < *(_QWORD *)(*(_QWORD *)(v99 + 16) + 24))
                        goto LABEL_169;
                    }
                    else if (!*(_BYTE *)(v98 + 60))
                    {
LABEL_169:
                      v83 += 8;
                      v85 = v97;
                    }
                  }
                  v100 = *(_QWORD *)(*(_QWORD *)v83 + 8);
                  v101 = *(_QWORD *)(v90 + 8);
                  if ((*(_BYTE *)(v100 + 60) != 0) == (*(_BYTE *)(v101 + 60) != 0))
                  {
                    if (*(_QWORD *)(*(_QWORD *)(v100 + 16) + 24) < *(_QWORD *)(*(_QWORD *)(v101 + 16) + 24))
                      goto LABEL_146;
                  }
                  else if (!*(_BYTE *)(v100 + 60))
                  {
                    goto LABEL_146;
                  }
                  v95 = *(_QWORD *)v83;
                  v86[4] = v83[4];
                  *(_QWORD *)v86 = v95;
                  v86 = v83;
                  if (v81 < v85)
                    goto LABEL_147;
                  continue;
                }
              }
            }
            else if (*(_BYTE *)(v91 + 60))
            {
              goto LABEL_160;
            }
LABEL_148:
            v82 = v84 - 1;
            if (!v84)
            {
              v102 = (unint64_t)v10 >> 4;
              while (1)
              {
                v104 = 0;
                v16 = *(_OWORD *)i;
                v141 = *(_OWORD *)i;
                v105 = i;
                do
                {
                  v107 = v105;
                  v105 += 8 * v104 + 8;
                  v108 = 2 * v104;
                  v104 = (2 * v104) | 1;
                  v109 = v108 + 2;
                  if (v109 < v102)
                  {
                    v110 = *(_QWORD *)(*(_QWORD *)v105 + 8);
                    v111 = *(_QWORD *)(*((_QWORD *)v105 + 2) + 8);
                    if ((*(_BYTE *)(v110 + 60) != 0) == (*(_BYTE *)(v111 + 60) != 0))
                    {
                      if (*(_QWORD *)(*(_QWORD *)(v110 + 16) + 24) < *(_QWORD *)(*(_QWORD *)(v111 + 16) + 24))
                      {
LABEL_177:
                        v105 += 8;
                        v104 = v109;
                      }
                    }
                    else if (!*(_BYTE *)(v110 + 60))
                    {
                      goto LABEL_177;
                    }
                  }
                  v106 = *(_QWORD *)v105;
                  v107[4] = v105[4];
                  *(_QWORD *)v107 = v106;
                }
                while (v104 <= (uint64_t)((unint64_t)(v102 - 2) >> 1));
                a2 -= 16;
                if (v105 == (_WORD *)a2)
                {
                  v105[4] = WORD4(v141);
                  *(_QWORD *)v105 = v141;
                }
                else
                {
                  v112 = *(_QWORD *)a2;
                  v105[4] = *(_WORD *)(a2 + 8);
                  *(_QWORD *)v105 = v112;
                  *(_WORD *)(a2 + 8) = WORD4(v141);
                  *(_QWORD *)a2 = v141;
                  v113 = (char *)v105 - (char *)i + 16;
                  if (v113 >= 17)
                  {
                    v114 = ((unint64_t)v113 >> 4) - 2;
                    v115 = v114 >> 1;
                    v116 = &i[8 * (v114 >> 1)];
                    v117 = *(_QWORD *)v105;
                    v118 = *(_QWORD *)(*(_QWORD *)v116 + 8);
                    v119 = *(_QWORD *)(*(_QWORD *)v105 + 8);
                    if ((*(_BYTE *)(v118 + 60) != 0) == (*(_BYTE *)(v119 + 60) != 0))
                    {
                      if (*(_QWORD *)(*(_QWORD *)(v118 + 16) + 24) < *(_QWORD *)(*(_QWORD *)(v119 + 16) + 24))
                        goto LABEL_191;
                    }
                    else if (!*(_BYTE *)(v118 + 60))
                    {
LABEL_191:
                      v120 = v105[4];
                      v121 = v116[4];
                      *(_QWORD *)v105 = *(_QWORD *)v116;
                      v105[4] = v121;
                      if (v114 >= 2)
                      {
                        while (1)
                        {
                          v123 = v115 - 1;
                          v115 = (v115 - 1) >> 1;
                          v124 = &i[8 * v115];
                          v125 = *(_QWORD *)(*(_QWORD *)v124 + 8);
                          v126 = *(_QWORD *)(v117 + 8);
                          if ((*(_BYTE *)(v125 + 60) != 0) == (*(_BYTE *)(v126 + 60) != 0))
                          {
                            if (*(_QWORD *)(*(_QWORD *)(v125 + 16) + 24) >= *(_QWORD *)(*(_QWORD *)(v126 + 16) + 24))
                              break;
                          }
                          else if (*(_BYTE *)(v125 + 60))
                          {
                            break;
                          }
                          v122 = *(_QWORD *)v124;
                          v116[4] = v124[4];
                          *(_QWORD *)v116 = v122;
                          v116 = &i[8 * v115];
                          if (v123 <= 1)
                            goto LABEL_198;
                        }
                      }
                      v124 = v116;
LABEL_198:
                      *(_QWORD *)v124 = v117;
                      v124[4] = v120;
                    }
                  }
                }
                if (v102-- <= 2)
                  return *(double *)&v16;
              }
            }
          }
        }
        v12 = v11 >> 1;
        v13 = &i[8 * (v11 >> 1)];
        if ((unint64_t)v10 < 0x801)
        {
          *(_QWORD *)&v16 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::connectTileLabelLineSegments(std::vector<md::SegmentConnectionEntry,geo::StdAllocator<md::SegmentConnectionEntry,mdm::Allocator>> &,double,std::vector<std::pair<unsigned long,unsigned long>> &)::$_0 &,md::SegmentConnectionEntry*>(&a1[8 * (v11 >> 1)], a1, (_WORD *)(a2 - 16)).n128_u64[0];
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::connectTileLabelLineSegments(std::vector<md::SegmentConnectionEntry,geo::StdAllocator<md::SegmentConnectionEntry,mdm::Allocator>> &,double,std::vector<std::pair<unsigned long,unsigned long>> &)::$_0 &,md::SegmentConnectionEntry*>(a1, &a1[8 * (v11 >> 1)], (_WORD *)(a2 - 16));
          v14 = 8 * v12;
          v15 = &a1[8 * v12 - 8];
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::connectTileLabelLineSegments(std::vector<md::SegmentConnectionEntry,geo::StdAllocator<md::SegmentConnectionEntry,mdm::Allocator>> &,double,std::vector<std::pair<unsigned long,unsigned long>> &)::$_0 &,md::SegmentConnectionEntry*>(a1 + 8, v15, (_WORD *)(a2 - 32));
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::connectTileLabelLineSegments(std::vector<md::SegmentConnectionEntry,geo::StdAllocator<md::SegmentConnectionEntry,mdm::Allocator>> &,double,std::vector<std::pair<unsigned long,unsigned long>> &)::$_0 &,md::SegmentConnectionEntry*>(a1 + 16, &a1[v14 + 8], (_WORD *)(a2 - 48));
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::connectTileLabelLineSegments(std::vector<md::SegmentConnectionEntry,geo::StdAllocator<md::SegmentConnectionEntry,mdm::Allocator>> &,double,std::vector<std::pair<unsigned long,unsigned long>> &)::$_0 &,md::SegmentConnectionEntry*>(v15, v13, &a1[v14 + 8]);
          v16 = *(_OWORD *)a1;
          v138 = *(_OWORD *)a1;
          v17 = *(_QWORD *)v13;
          a1[4] = v13[4];
          *(_QWORD *)a1 = v17;
          v13[4] = WORD4(v138);
          *(_QWORD *)v13 = v138;
        }
        --a3;
        v18 = *(_QWORD *)a1;
        if ((a4 & 1) == 0)
        {
          v21 = *(_QWORD *)(*((_QWORD *)a1 - 2) + 8);
          v19 = *(_QWORD *)(v18 + 8);
          v20 = *(unsigned __int8 *)(v19 + 60);
          if ((*(_BYTE *)(v21 + 60) != 0) == (*(_BYTE *)(v19 + 60) != 0))
          {
            if (*(_QWORD *)(*(_QWORD *)(v21 + 16) + 24) < *(_QWORD *)(*(_QWORD *)(v19 + 16) + 24))
              goto LABEL_12;
          }
          else if (!*(_BYTE *)(v21 + 60))
          {
            goto LABEL_12;
          }
          v38 = *((_QWORD *)a1 + 1);
          v39 = *(_QWORD *)(*(_QWORD *)v8 + 8);
          v40 = *(unsigned __int8 *)(v39 + 60);
          if ((v20 != 0) == (*(_BYTE *)(v39 + 60) != 0))
          {
            v42 = *(_QWORD *)(*(_QWORD *)(v19 + 16) + 24);
            if (v42 >= *(_QWORD *)(*(_QWORD *)(v39 + 16) + 24))
            {
              i = a1 + 8;
              if ((unint64_t)(a1 + 8) >= a2)
                goto LABEL_77;
              if (!*(_BYTE *)(v19 + 60))
              {
                do
                {
                  v45 = *(_QWORD *)(*(_QWORD *)i + 8);
                  if (*(_BYTE *)(v45 + 60))
                    break;
                  if (v42 < *(_QWORD *)(*(_QWORD *)(v45 + 16) + 24))
                    break;
                  i += 8;
                }
                while ((unint64_t)i < a2);
                goto LABEL_77;
              }
              do
              {
LABEL_72:
                v46 = *(_QWORD *)(*(_QWORD *)i + 8);
                if (*(_BYTE *)(v46 + 60)
                  && *(_QWORD *)(*(_QWORD *)(v19 + 16) + 24) < *(_QWORD *)(*(_QWORD *)(v46 + 16) + 24))
                {
                  break;
                }
                i += 8;
              }
              while ((unint64_t)i < a2);
LABEL_77:
              if ((unint64_t)i >= a2)
              {
                v41 = a2;
                goto LABEL_91;
              }
              if (*(_BYTE *)(v19 + 60))
              {
                if (*(_BYTE *)(v39 + 60))
                {
                  v48 = *(_QWORD *)(*(_QWORD *)(v19 + 16) + 24);
                  v41 = a2 - 16;
                  do
                  {
                    if (v48 >= *(_QWORD *)(*(_QWORD *)(v39 + 16) + 24))
                      break;
                    v49 = *(_QWORD *)(v41 - 16);
                    v41 -= 16;
                    v39 = *(_QWORD *)(v49 + 8);
                  }
                  while (*(_BYTE *)(v39 + 60));
                }
                else
                {
                  v41 = a2 - 16;
                }
                goto LABEL_91;
              }
              goto LABEL_85;
            }
            if (*(_BYTE *)(v19 + 60))
            {
              for (i = a1 + 8; ; i += 8)
              {
                v43 = *(_QWORD *)(*(_QWORD *)i + 8);
                if (*(_BYTE *)(v43 + 60))
                {
                  if (v42 < *(_QWORD *)(*(_QWORD *)(v43 + 16) + 24))
                    break;
                }
              }
              goto LABEL_77;
            }
          }
          else if (*(_BYTE *)(v19 + 60))
          {
            i = a1 + 8;
            v41 = a2;
            if ((unint64_t)(a1 + 8) >= a2)
              goto LABEL_91;
            goto LABEL_72;
          }
          i = a1 + 8;
          v44 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8);
          if (!*(_BYTE *)(v44 + 60))
          {
            do
            {
              if (*(_QWORD *)(*(_QWORD *)(v19 + 16) + 24) < *(_QWORD *)(*(_QWORD *)(v44 + 16) + 24))
                break;
              v47 = *((_QWORD *)i + 2);
              i += 8;
              v44 = *(_QWORD *)(v47 + 8);
            }
            while (!*(_BYTE *)(v44 + 60));
            goto LABEL_77;
          }
          v41 = a2;
          if ((unint64_t)i >= a2)
            goto LABEL_91;
LABEL_85:
          v41 = a2 - 16;
          while (v40 || *(_QWORD *)(*(_QWORD *)(v19 + 16) + 24) < *(_QWORD *)(*(_QWORD *)(v39 + 16) + 24))
          {
            v50 = *(_QWORD *)(v41 - 16);
            v41 -= 16;
            v39 = *(_QWORD *)(v50 + 8);
            v40 = *(unsigned __int8 *)(v39 + 60);
          }
LABEL_91:
          while ((unint64_t)i < v41)
          {
            v16 = *(_OWORD *)i;
            v140 = *(_OWORD *)i;
            v51 = *(_QWORD *)v41;
            i[4] = *(_WORD *)(v41 + 8);
            *(_QWORD *)i = v51;
            *(_WORD *)(v41 + 8) = WORD4(v140);
            *(_QWORD *)v41 = v140;
            v52 = *(_QWORD *)(v18 + 8);
            if (*(_BYTE *)(v52 + 60))
            {
              do
              {
                do
                {
                  v53 = *((_QWORD *)i + 2);
                  i += 8;
                  v54 = *(_QWORD *)(v53 + 8);
                }
                while (!*(_BYTE *)(v54 + 60));
                v55 = *(_QWORD *)(*(_QWORD *)(v52 + 16) + 24);
              }
              while (v55 >= *(_QWORD *)(*(_QWORD *)(v54 + 16) + 24));
            }
            else
            {
              v58 = *((_QWORD *)i + 2);
              i += 8;
              v59 = *(_QWORD *)(v58 + 8);
              if (*(_BYTE *)(v59 + 60))
                goto LABEL_100;
              v55 = *(_QWORD *)(*(_QWORD *)(v52 + 16) + 24);
              do
              {
                if (v55 < *(_QWORD *)(*(_QWORD *)(v59 + 16) + 24))
                  break;
                v62 = *((_QWORD *)i + 2);
                i += 8;
                v59 = *(_QWORD *)(v62 + 8);
              }
              while (!*(_BYTE *)(v59 + 60));
            }
            if (*(_BYTE *)(v52 + 60))
            {
              do
              {
                v56 = *(_QWORD *)(v41 - 16);
                v41 -= 16;
                v57 = *(_QWORD *)(v56 + 8);
              }
              while (*(_BYTE *)(v57 + 60) && v55 < *(_QWORD *)(*(_QWORD *)(v57 + 16) + 24));
            }
            else
            {
              do
              {
                do
                {
LABEL_100:
                  v60 = *(_QWORD *)(v41 - 16);
                  v41 -= 16;
                  v61 = *(_QWORD *)(v60 + 8);
                }
                while (*(_BYTE *)(v61 + 60));
              }
              while (*(_QWORD *)(*(_QWORD *)(v52 + 16) + 24) < *(_QWORD *)(*(_QWORD *)(v61 + 16) + 24));
            }
          }
          if (i - 8 != a1)
          {
            v63 = *((_QWORD *)i - 2);
            a1[4] = *(i - 4);
            *(_QWORD *)a1 = v63;
          }
          a4 = 0;
          *((_QWORD *)i - 2) = v18;
          *(i - 4) = v38;
          continue;
        }
        v19 = *(_QWORD *)(v18 + 8);
        v20 = *(unsigned __int8 *)(v19 + 60);
LABEL_12:
        v22 = *((_QWORD *)a1 + 1);
        v23 = a1 + 8;
        while (2)
        {
          v24 = *(_QWORD *)(*(_QWORD *)v23 + 8);
          if ((v20 != 0) == (*(_BYTE *)(v24 + 60) != 0))
          {
            if (*(_QWORD *)(*(_QWORD *)(v24 + 16) + 24) >= *(_QWORD *)(*(_QWORD *)(v19 + 16) + 24))
              goto LABEL_17;
LABEL_14:
            v23 += 8;
            continue;
          }
          break;
        }
        if (!*(_BYTE *)(v24 + 60))
          goto LABEL_14;
LABEL_17:
        j = a2 - 16;
        if (v23 - 8 != a1)
        {
          while (1)
          {
            v26 = *(_QWORD *)(*(_QWORD *)j + 8);
            if ((v20 != 0) == (*(_BYTE *)(v26 + 60) != 0))
            {
              if (*(_QWORD *)(*(_QWORD *)(v26 + 16) + 24) < *(_QWORD *)(*(_QWORD *)(v19 + 16) + 24))
                goto LABEL_24;
            }
            else if (!*(_BYTE *)(v26 + 60))
            {
              goto LABEL_24;
            }
            j -= 16;
          }
        }
        j = a2;
        if ((unint64_t)v23 < a2)
        {
          for (j = a2 - 16; ; j -= 16)
          {
            v35 = *(_QWORD *)(*(_QWORD *)j + 8);
            if ((v20 != 0) == (*(_BYTE *)(v35 + 60) != 0))
            {
              if ((unint64_t)v23 >= j
                || *(_QWORD *)(*(_QWORD *)(v35 + 16) + 24) < *(_QWORD *)(*(_QWORD *)(v19 + 16) + 24))
              {
                break;
              }
            }
            else if ((unint64_t)v23 >= j || !*(_BYTE *)(v35 + 60))
            {
              break;
            }
          }
        }
LABEL_24:
        i = v23;
        if ((unint64_t)v23 < j)
        {
          i = v23;
          v27 = j;
          do
          {
            v139 = *(_OWORD *)i;
            v28 = *(_QWORD *)v27;
            i[4] = *(_WORD *)(v27 + 8);
            *(_QWORD *)i = v28;
            *(_WORD *)(v27 + 8) = WORD4(v139);
            *(_QWORD *)v27 = v139;
            v29 = *(_QWORD *)(v18 + 8);
            v30 = *(unsigned __int8 *)(v29 + 60);
            do
            {
              while (1)
              {
                v31 = *((_QWORD *)i + 2);
                i += 8;
                v32 = *(_QWORD *)(v31 + 8);
                if ((v30 != 0) != (*(_BYTE *)(v32 + 60) != 0))
                  break;
                if (*(_QWORD *)(*(_QWORD *)(v32 + 16) + 24) >= *(_QWORD *)(*(_QWORD *)(v29 + 16) + 24))
                  goto LABEL_33;
              }
            }
            while (!*(_BYTE *)(v32 + 60));
            do
            {
LABEL_33:
              while (1)
              {
                v33 = *(_QWORD *)(v27 - 16);
                v27 -= 16;
                v34 = *(_QWORD *)(v33 + 8);
                if ((v30 != 0) != (*(_BYTE *)(v34 + 60) != 0))
                  break;
                if (*(_QWORD *)(*(_QWORD *)(v34 + 16) + 24) < *(_QWORD *)(*(_QWORD *)(v29 + 16) + 24))
                  goto LABEL_26;
              }
            }
            while (*(_BYTE *)(v34 + 60));
LABEL_26:
            ;
          }
          while ((unint64_t)i < v27);
        }
        if (i - 8 != a1)
        {
          v36 = *((_QWORD *)i - 2);
          a1[4] = *(i - 4);
          *(_QWORD *)a1 = v36;
        }
        *((_QWORD *)i - 2) = v18;
        *(i - 4) = v22;
        if ((unint64_t)v23 < j)
        {
LABEL_49:
          std::__introsort<std::_ClassicAlgPolicy,md::LabelLineZSet::connectTileLabelLineSegments(std::vector<md::SegmentConnectionEntry,geo::StdAllocator<md::SegmentConnectionEntry,mdm::Allocator>> &,double,std::vector<std::pair<unsigned long,unsigned long>> &)::$_0 &,md::SegmentConnectionEntry*,false>(a1, i - 8, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v37 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::connectTileLabelLineSegments(std::vector<md::SegmentConnectionEntry,geo::StdAllocator<md::SegmentConnectionEntry,mdm::Allocator>> &,double,std::vector<std::pair<unsigned long,unsigned long>> &)::$_0 &,md::SegmentConnectionEntry*>((char *)a1, (char *)i - 16);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelLineZSet::connectTileLabelLineSegments(std::vector<md::SegmentConnectionEntry,geo::StdAllocator<md::SegmentConnectionEntry,mdm::Allocator>> &,double,std::vector<std::pair<unsigned long,unsigned long>> &)::$_0 &,md::SegmentConnectionEntry*>((char *)i, (char *)a2))
        {
          if (v37)
            continue;
          goto LABEL_49;
        }
        a2 = (unint64_t)(i - 8);
        if (!v37)
          goto LABEL_1;
        return *(double *)&v16;
    }
  }
}

  v6 = a2;
  v7 = a2 - 4;
  j = (unint64_t)a1;
  while (2)
  {
    v9 = j;
    v10 = (uint64_t)v6 - j;
    v11 = (uint64_t)((uint64_t)v6 - j) >> 5;
    switch(v11)
    {
      case 0:
      case 1:
        return *(double *)&v71;
      case 2:
        v118 = *((char *)a2 - 9);
        if (v118 >= 0)
          v119 = v7;
        else
          v119 = (const void **)*(a2 - 4);
        if (v118 >= 0)
          v120 = *((unsigned __int8 *)a2 - 9);
        else
          v120 = (size_t)*(a2 - 3);
        v121 = *(char *)(v9 + 23);
        if (v121 >= 0)
          v122 = (const void *)v9;
        else
          v122 = *(const void **)v9;
        if (v121 >= 0)
          v123 = *(unsigned __int8 *)(v9 + 23);
        else
          v123 = *(_QWORD *)(v9 + 8);
        if (v123 >= v120)
          v124 = v120;
        else
          v124 = v123;
        v125 = memcmp(v119, v122, v124);
        if (v125)
        {
          if ((v125 & 0x80000000) == 0)
            return *(double *)&v71;
        }
        else if (v120 >= v123)
        {
          return *(double *)&v71;
        }
        v253 = *(_OWORD *)v9;
        *(_QWORD *)&v264 = *(_QWORD *)(v9 + 16);
        v263 = v253;
        v254 = *(_OWORD *)v7;
        *(_QWORD *)(v9 + 16) = v7[2];
        *(_OWORD *)v9 = v254;
        v71 = v263;
        v7[2] = (const void *)v264;
        *(_OWORD *)v7 = v71;
        return *(double *)&v71;
      case 3:
        *(_QWORD *)&v71 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> *>((const void **)v9, (const void **)(v9 + 32), v7).n128_u64[0];
        return *(double *)&v71;
      case 4:
        *(_QWORD *)&v71 = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> *>(v9, (__int128 *)(v9 + 32), (__int128 *)(v9 + 64), v7).n128_u64[0];
        return *(double *)&v71;
      case 5:
        *(_QWORD *)&v71 = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> *>(v9, v9 + 32, v9 + 64, (__int128 *)(v9 + 96), v7).n128_u64[0];
        return *(double *)&v71;
      default:
        v262 = (_QWORD *)v9;
        if (v10 <= 767)
        {
          if ((a4 & 1) != 0)
          {
            if ((const void **)v9 == v6)
              return *(double *)&v71;
            v126 = (_OWORD *)(v9 + 32);
            if ((const void **)(v9 + 32) == a2)
              return *(double *)&v71;
            v127 = 0;
            v128 = (_OWORD *)v9;
            while (1)
            {
              v174 = (const void **)v128;
              v128 = v126;
              v175 = *((char *)v174 + 55);
              if (v175 >= 0)
                v176 = v126;
              else
                v176 = v174[4];
              if (v175 >= 0)
                v177 = *((unsigned __int8 *)v174 + 55);
              else
                v177 = (size_t)v174[5];
              v178 = *((char *)v174 + 23);
              if (v178 >= 0)
                v179 = v174;
              else
                v179 = *v174;
              if (v178 >= 0)
                v180 = *((unsigned __int8 *)v174 + 23);
              else
                v180 = (size_t)v174[1];
              if (v180 >= v177)
                v181 = v177;
              else
                v181 = v180;
              v182 = memcmp(v176, v179, v181);
              if (v182)
              {
                if ((v182 & 0x80000000) == 0)
                  goto LABEL_350;
              }
              else if (v177 >= v180)
              {
                goto LABEL_350;
              }
              v183 = v128[1];
              v263 = *v128;
              v264 = v183;
              if ((SBYTE7(v183) & 0x80u) == 0)
                v184 = &v263;
              else
                v184 = (__int128 *)v263;
              if ((SBYTE7(v183) & 0x80u) == 0)
                v185 = BYTE7(v183);
              else
                v185 = *((_QWORD *)&v263 + 1);
              *((_QWORD *)v128 + 2) = v174[2];
              *v128 = *(_OWORD *)v174;
              *((_BYTE *)v174 + 23) = 0;
              *(_BYTE *)v174 = 0;
              v173 = (char *)v9;
              if (v174 != (const void **)v9)
              {
                v186 = v127;
                while (1)
                {
                  v187 = (char *)v262 + v186;
                  v188 = *((char *)v262 + v186 - 9);
                  if (v188 >= 0)
                    v189 = (char *)v262 + v186 - 32;
                  else
                    v189 = *(char **)((char *)v262 + v186 - 32);
                  if (v188 >= 0)
                    v190 = *((unsigned __int8 *)v262 + v186 - 9);
                  else
                    v190 = *(_QWORD *)((char *)v262 + v186 - 24);
                  if (v190 >= v185)
                    v191 = v185;
                  else
                    v191 = v190;
                  v192 = memcmp(v184, v189, v191);
                  if (v192)
                  {
                    if ((v192 & 0x80000000) == 0)
                    {
                      v173 = (char *)v262 + v186;
                      v9 = (uint64_t)v262;
                      break;
                    }
                  }
                  else if (v185 >= v190)
                  {
                    v173 = (char *)v174;
                    v9 = (uint64_t)v262;
                    break;
                  }
                  v174 -= 4;
                  *(_OWORD *)v187 = *(_OWORD *)((char *)v262 + v186 - 32);
                  *((_QWORD *)v187 + 2) = *(_QWORD *)((char *)v262 + v186 - 16);
                  *(v187 - 9) = 0;
                  *(v187 - 32) = 0;
                  v186 -= 32;
                  if (!v186)
                  {
                    v9 = (uint64_t)v262;
                    v173 = (char *)v262;
                    break;
                  }
                }
              }
              v71 = v263;
              *((_QWORD *)v173 + 2) = v264;
              *(_OWORD *)v173 = v71;
LABEL_350:
              v126 = v128 + 2;
              v127 += 32;
              if (v128 + 2 == (_OWORD *)a2)
                return *(double *)&v71;
            }
          }
          if ((const void **)v9 == v6)
            return *(double *)&v71;
          v233 = (const void *)(v9 + 32);
          if ((const void **)(v9 + 32) == a2)
            return *(double *)&v71;
LABEL_472:
          v235 = (const void **)v9;
          v9 = (uint64_t)v233;
          v236 = *((char *)v235 + 55);
          if (v236 >= 0)
            v237 = v233;
          else
            v237 = v235[4];
          if (v236 >= 0)
            v238 = *((unsigned __int8 *)v235 + 55);
          else
            v238 = (size_t)v235[5];
          v239 = *((char *)v235 + 23);
          if (v239 >= 0)
            v240 = v235;
          else
            v240 = *v235;
          if (v239 >= 0)
            v241 = *((unsigned __int8 *)v235 + 23);
          else
            v241 = (size_t)v235[1];
          if (v241 >= v238)
            v242 = v238;
          else
            v242 = v241;
          v243 = memcmp(v237, v240, v242);
          if (v243)
          {
            if ((v243 & 0x80000000) == 0)
              goto LABEL_471;
          }
          else if (v238 >= v241)
          {
            goto LABEL_471;
          }
          v244 = *(_OWORD *)(v9 + 16);
          v263 = *(_OWORD *)v9;
          v264 = v244;
          *(_QWORD *)(v9 + 8) = 0;
          *(_QWORD *)(v9 + 16) = 0;
          *(_QWORD *)v9 = 0;
          if ((SBYTE7(v264) & 0x80u) == 0)
            v245 = &v263;
          else
            v245 = (__int128 *)v263;
          if ((SBYTE7(v264) & 0x80u) == 0)
            v246 = BYTE7(v264);
          else
            v246 = *((_QWORD *)&v263 + 1);
          for (i = v9; ; i -= 32)
          {
            *(_OWORD *)i = *(_OWORD *)(i - 32);
            *(_QWORD *)(i + 16) = *(_QWORD *)(i - 16);
            *(_BYTE *)(i - 9) = 0;
            *(_BYTE *)(i - 32) = 0;
            v248 = *(char *)(i - 41);
            if (v248 >= 0)
              v249 = (const void *)(i - 64);
            else
              v249 = *(const void **)(i - 64);
            if (v248 >= 0)
              v250 = *(unsigned __int8 *)(i - 41);
            else
              v250 = *(_QWORD *)(i - 56);
            if (v250 >= v246)
              v251 = v246;
            else
              v251 = v250;
            v252 = memcmp(v245, v249, v251);
            if (v252)
            {
              if ((v252 & 0x80000000) == 0)
              {
LABEL_470:
                v234 = i - 32;
                v71 = v263;
                *(_QWORD *)(v234 + 16) = v264;
                *(_OWORD *)v234 = v71;
LABEL_471:
                v233 = (const void *)(v9 + 32);
                if ((const void **)(v9 + 32) == a2)
                  return *(double *)&v71;
                goto LABEL_472;
              }
            }
            else if (v246 >= v250)
            {
              goto LABEL_470;
            }
          }
        }
        if (!a3)
        {
          if ((const void **)v9 == v6)
            return *(double *)&v71;
          v129 = (unint64_t)(v11 - 2) >> 1;
          v130 = v129;
          while (1)
          {
            v132 = v130;
            if (v129 < v130)
              goto LABEL_264;
            v133 = v9 + 32 * ((2 * v130) | 1);
            v134 = 2 * v130 + 2;
            if (v134 >= v11)
              goto LABEL_284;
            v135 = (const void **)(v133 + 32);
            v136 = *(char *)(v133 + 23);
            v137 = v136 >= 0 ? (const void *)(v9 + 32 * ((2 * v130) | 1)) : *(const void **)v133;
            v138 = v136 >= 0 ? *(unsigned __int8 *)(v133 + 23) : *(_QWORD *)(v133 + 8);
            v139 = *(char *)(v133 + 55);
            v140 = v139 >= 0 ? (const void *)(v133 + 32) : *(const void **)(v133 + 32);
            v141 = v139 >= 0 ? *(unsigned __int8 *)(v133 + 55) : *(_QWORD *)(v133 + 40);
            v142 = v141 >= v138 ? v138 : v141;
            v143 = memcmp(v137, v140, v142);
            if (v143)
              break;
            v61 = v138 >= v141;
            v9 = (uint64_t)v262;
            if (v61)
              goto LABEL_284;
LABEL_285:
            v144 = v9 + 32 * v132;
            v145 = *((char *)v135 + 23);
            if (v145 >= 0)
              v146 = v135;
            else
              v146 = *v135;
            if (v145 >= 0)
              v147 = *((unsigned __int8 *)v135 + 23);
            else
              v147 = (size_t)v135[1];
            v148 = *(char *)(v144 + 23);
            if (v148 >= 0)
              v149 = (const void *)(v9 + 32 * v132);
            else
              v149 = *(const void **)v144;
            if (v148 >= 0)
              v150 = *(unsigned __int8 *)(v144 + 23);
            else
              v150 = *(_QWORD *)(v144 + 8);
            if (v150 >= v147)
              v151 = v147;
            else
              v151 = v150;
            v152 = memcmp(v146, v149, v151);
            if (v152)
            {
              v129 = (unint64_t)(v11 - 2) >> 1;
              if ((v152 & 0x80000000) == 0)
                goto LABEL_305;
            }
            else
            {
              v61 = v147 >= v150;
              v129 = (unint64_t)(v11 - 2) >> 1;
              if (v61)
              {
LABEL_305:
                v256 = v132;
                v153 = *(_OWORD *)(v144 + 16);
                v263 = *(_OWORD *)v144;
                v264 = v153;
                *(_QWORD *)(v144 + 8) = 0;
                *(_QWORD *)(v144 + 16) = 0;
                *(_QWORD *)v144 = 0;
                v154 = *(_OWORD *)v135;
                *(_QWORD *)(v144 + 16) = v135[2];
                *(_OWORD *)v144 = v154;
                *((_BYTE *)v135 + 23) = 0;
                *(_BYTE *)v135 = 0;
                if (v129 < v134)
                {
LABEL_262:
                  v131 = v135;
LABEL_263:
                  v71 = v263;
                  v131[2] = (const void *)v264;
                  *(_OWORD *)v131 = v71;
                  v9 = (uint64_t)v262;
                  v132 = v256;
                  goto LABEL_264;
                }
                v155 = &v263;
                if (SBYTE7(v264) < 0)
                  v155 = (__int128 *)v263;
                __s2 = v155;
                if ((SBYTE7(v264) & 0x80u) == 0)
                  v156 = BYTE7(v264);
                else
                  v156 = *((_QWORD *)&v263 + 1);
                while (2)
                {
                  v158 = (2 * v134) | 1;
                  v159 = &v262[4 * v158];
                  v134 = 2 * v134 + 2;
                  if (v134 < v11)
                  {
                    v131 = (const void **)(v159 + 4);
                    v160 = *((char *)v159 + 23);
                    if (v160 >= 0)
                      v161 = &v262[4 * v158];
                    else
                      v161 = (_QWORD *)*v159;
                    if (v160 >= 0)
                      v162 = *((unsigned __int8 *)v159 + 23);
                    else
                      v162 = v159[1];
                    v163 = *((char *)v159 + 55);
                    if (v163 >= 0)
                      v164 = v159 + 4;
                    else
                      v164 = (const void *)v159[4];
                    if (v163 >= 0)
                      v165 = *((unsigned __int8 *)v159 + 55);
                    else
                      v165 = v159[5];
                    if (v165 >= v162)
                      v166 = v162;
                    else
                      v166 = v165;
                    v167 = memcmp(v161, v164, v166);
                    if (v167)
                    {
                      v129 = (unint64_t)(v11 - 2) >> 1;
                      if ((v167 & 0x80000000) == 0)
                        break;
LABEL_332:
                      v168 = *((char *)v131 + 23);
                      if (v168 >= 0)
                        v169 = v131;
                      else
                        v169 = *v131;
                      if (v168 >= 0)
                        v170 = *((unsigned __int8 *)v131 + 23);
                      else
                        v170 = (size_t)v131[1];
                      if (v156 >= v170)
                        v171 = v170;
                      else
                        v171 = v156;
                      v172 = memcmp(v169, __s2, v171);
                      if (v172)
                      {
                        if (v172 < 0)
                          goto LABEL_262;
                      }
                      else if (v170 < v156)
                      {
                        goto LABEL_262;
                      }
                      v157 = *(_OWORD *)v131;
                      v135[2] = v131[2];
                      *(_OWORD *)v135 = v157;
                      *((_BYTE *)v131 + 23) = 0;
                      *(_BYTE *)v131 = 0;
                      v135 = v131;
                      if (v129 < v134)
                        goto LABEL_263;
                      continue;
                    }
                    v61 = v162 >= v165;
                    v129 = (unint64_t)(v11 - 2) >> 1;
                    if (!v61)
                      goto LABEL_332;
                  }
                  break;
                }
                v131 = (const void **)&v262[4 * v158];
                v134 = v158;
                goto LABEL_332;
              }
            }
LABEL_264:
            v130 = v132 - 1;
            if (!v132)
            {
              v193 = (unint64_t)v10 >> 5;
LABEL_397:
              if (v193 < 2)
                goto LABEL_395;
              v195 = 0;
              v196 = (const void *)v262[2];
              v258 = (const void *)v262[1];
              __s2a = (void *)*v262;
              v262[1] = 0;
              v262[2] = 0;
              v197 = v262;
              *v262 = 0;
              while (1)
              {
                v198 = (uint64_t)&v197[4 * v195 + 4];
                v199 = (2 * v195) | 1;
                v195 = 2 * v195 + 2;
                if (v195 >= v193)
                  goto LABEL_418;
                v200 = v198 + 32;
                v201 = *(char *)(v198 + 23);
                v202 = v201 >= 0 ? (const void *)v198 : *(const void **)v198;
                v203 = v201 >= 0 ? *(unsigned __int8 *)(v198 + 23) : *(_QWORD *)(v198 + 8);
                v204 = *(char *)(v198 + 55);
                v205 = v204 >= 0 ? (const void *)(v198 + 32) : *(const void **)(v198 + 32);
                v206 = v204 >= 0 ? *(unsigned __int8 *)(v198 + 55) : *(_QWORD *)(v198 + 40);
                v207 = v206 >= v203 ? v203 : v206;
                v208 = memcmp(v202, v205, v207);
                if (!v208)
                  break;
                if ((v208 & 0x80000000) == 0)
                  goto LABEL_418;
LABEL_419:
                if (*((char *)v197 + 23) < 0)
                  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)v197[3] + 40))(v197[3], *v197, v197[2] & 0x7FFFFFFFFFFFFFFFLL);
                v71 = *(_OWORD *)v200;
                v197[2] = *(_QWORD *)(v200 + 16);
                *(_OWORD *)v197 = v71;
                *(_BYTE *)(v200 + 23) = 0;
                *(_BYTE *)v200 = 0;
                v197 = (_QWORD *)v200;
                if (v195 > (uint64_t)((unint64_t)(v193 - 2) >> 1))
                {
                  if ((const void **)v200 == a2 - 4)
                  {
                    *(_QWORD *)v200 = __s2a;
                    *(_QWORD *)(v200 + 8) = v258;
                    *(_QWORD *)(v200 + 16) = v196;
                  }
                  else
                  {
                    v71 = *((_OWORD *)a2 - 2);
                    *(_QWORD *)(v200 + 16) = *(a2 - 2);
                    *(_OWORD *)v200 = v71;
                    *(a2 - 4) = __s2a;
                    *(a2 - 3) = v258;
                    *(a2 - 2) = v196;
                    v209 = v200 - (_QWORD)v262 + 32;
                    if (v209 >= 33)
                    {
                      v210 = (v209 >> 5) - 2;
                      v211 = v210 >> 1;
                      v212 = &v262[4 * (v210 >> 1)];
                      v213 = *((char *)v212 + 23);
                      if (v213 >= 0)
                        v214 = &v262[4 * (v210 >> 1)];
                      else
                        v214 = (_QWORD *)*v212;
                      if (v213 >= 0)
                        v215 = *((unsigned __int8 *)v212 + 23);
                      else
                        v215 = v212[1];
                      v216 = *(char *)(v200 + 23);
                      if (v216 >= 0)
                        v217 = (const void *)v200;
                      else
                        v217 = *(const void **)v200;
                      if (v216 >= 0)
                        v218 = *(unsigned __int8 *)(v200 + 23);
                      else
                        v218 = *(_QWORD *)(v200 + 8);
                      if (v218 >= v215)
                        v219 = v215;
                      else
                        v219 = v218;
                      v220 = memcmp(v214, v217, v219);
                      if (v220)
                      {
                        if (v220 < 0)
                        {
LABEL_444:
                          v221 = *(_OWORD *)(v200 + 16);
                          v263 = *(_OWORD *)v200;
                          v264 = v221;
                          *(_QWORD *)(v200 + 8) = 0;
                          *(_QWORD *)(v200 + 16) = 0;
                          *(_QWORD *)v200 = 0;
                          if ((SBYTE7(v264) & 0x80u) == 0)
                            v222 = &v263;
                          else
                            v222 = (__int128 *)v263;
                          if ((SBYTE7(v264) & 0x80u) == 0)
                            v223 = BYTE7(v264);
                          else
                            v223 = *((_QWORD *)&v263 + 1);
                          v224 = *(_OWORD *)v212;
                          *(_QWORD *)(v200 + 16) = v212[2];
                          *(_OWORD *)v200 = v224;
                          *((_BYTE *)v212 + 23) = 0;
                          *(_BYTE *)v212 = 0;
                          if (v210 >= 2)
                          {
                            while (1)
                            {
                              v226 = v211 - 1;
                              v211 = (v211 - 1) >> 1;
                              v227 = &v262[4 * v211];
                              v228 = *((char *)v227 + 23);
                              if (v228 >= 0)
                                v229 = &v262[4 * v211];
                              else
                                v229 = (_QWORD *)*v227;
                              if (v228 >= 0)
                                v230 = *((unsigned __int8 *)v227 + 23);
                              else
                                v230 = v227[1];
                              if (v223 >= v230)
                                v231 = v230;
                              else
                                v231 = v223;
                              v232 = memcmp(v229, v222, v231);
                              if (v232)
                              {
                                if ((v232 & 0x80000000) == 0)
                                  break;
                              }
                              else if (v230 >= v223)
                              {
                                break;
                              }
                              v225 = *(_OWORD *)v227;
                              v212[2] = v227[2];
                              *(_OWORD *)v212 = v225;
                              *((_BYTE *)v227 + 23) = 0;
                              *(_BYTE *)v227 = 0;
                              v212 = &v262[4 * v211];
                              if (v226 <= 1)
                                goto LABEL_466;
                            }
                          }
                          v227 = v212;
LABEL_466:
                          v71 = v263;
                          v227[2] = v264;
                          *(_OWORD *)v227 = v71;
                        }
                      }
                      else if (v215 < v218)
                      {
                        goto LABEL_444;
                      }
                    }
                  }
LABEL_395:
                  a2 -= 4;
                  if ((unint64_t)v193-- <= 2)
                    return *(double *)&v71;
                  goto LABEL_397;
                }
              }
              if (v203 < v206)
                goto LABEL_419;
LABEL_418:
              v200 = v198;
              v195 = v199;
              goto LABEL_419;
            }
          }
          v9 = (uint64_t)v262;
          if (v143 < 0)
            goto LABEL_285;
LABEL_284:
          v135 = (const void **)v133;
          v134 = (2 * v132) | 1;
          goto LABEL_285;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = v9 + 32 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 <= 0x1000)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> *>((const void **)v13, (const void **)v9, v7);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> *>((const void **)v9, (const void **)v13, v7);
          v14 = 32 * v12;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> *>((const void **)(v9 + 32), (const void **)(v14 + v9 - 32), a2 - 8);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> *>((const void **)(v9 + 64), (const void **)(v9 + 32 + v14), a2 - 12);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> *>((const void **)(v14 + v9 - 32), (const void **)v13, (const void **)(v9 + 32 + v14));
          v15 = *(_OWORD *)v9;
          *(_QWORD *)&v264 = *(_QWORD *)(v9 + 16);
          v263 = v15;
          v16 = *(_QWORD *)(v13 + 16);
          *(_OWORD *)v9 = *(_OWORD *)v13;
          *(_QWORD *)(v9 + 16) = v16;
          v17 = v263;
          *(_QWORD *)(v13 + 16) = v264;
          *(_OWORD *)v13 = v17;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v18 = *(char *)(v9 - 9);
          if (v18 >= 0)
            v19 = (const void *)(v9 - 32);
          else
            v19 = *(const void **)(v9 - 32);
          if (v18 >= 0)
            v20 = *(unsigned __int8 *)(v9 - 9);
          else
            v20 = *(_QWORD *)(v9 - 24);
          v21 = *(char *)(v9 + 23);
          if (v21 >= 0)
            v22 = (const void *)v9;
          else
            v22 = *(const void **)v9;
          if (v21 >= 0)
            v23 = *(unsigned __int8 *)(v9 + 23);
          else
            v23 = *(_QWORD *)(v9 + 8);
          if (v23 >= v20)
            v24 = v20;
          else
            v24 = v23;
          v25 = memcmp(v19, v22, v24);
          if (v25)
          {
            if (v25 < 0)
              goto LABEL_26;
          }
          else if (v20 < v23)
          {
            goto LABEL_26;
          }
          v72 = *(_OWORD *)(v9 + 16);
          v263 = *(_OWORD *)v9;
          v264 = v72;
          *(_QWORD *)(v9 + 8) = 0;
          *(_QWORD *)(v9 + 16) = 0;
          *(_QWORD *)v9 = 0;
          if ((SBYTE7(v264) & 0x80u) == 0)
            v73 = &v263;
          else
            v73 = (__int128 *)v263;
          if ((SBYTE7(v264) & 0x80u) == 0)
            v74 = BYTE7(v264);
          else
            v74 = *((_QWORD *)&v263 + 1);
          v75 = *((unsigned __int8 *)a2 - 9);
          v76 = v7;
          v78 = (const void **)*(a2 - 4);
          v77 = (size_t)*(a2 - 3);
          if ((v75 & 0x80u) == 0)
            v79 = v76;
          else
            v79 = (const void **)*(a2 - 4);
          if ((v75 & 0x80u) == 0)
            v80 = *((unsigned __int8 *)a2 - 9);
          else
            v80 = (size_t)*(a2 - 3);
          if (v80 >= v74)
            v81 = v74;
          else
            v81 = v80;
          v82 = memcmp(v73, v79, v81);
          if (v82)
          {
            if ((v82 & 0x80000000) == 0)
              goto LABEL_143;
          }
          else if (v74 >= v80)
          {
LABEL_143:
            for (j = (unint64_t)(v262 + 4); j < (unint64_t)a2; j += 32)
            {
              v83 = *(char *)(j + 23);
              if (v83 >= 0)
                v84 = (const void *)j;
              else
                v84 = *(const void **)j;
              if (v83 >= 0)
                v85 = *(unsigned __int8 *)(j + 23);
              else
                v85 = *(_QWORD *)(j + 8);
              if (v85 >= v74)
                v86 = v74;
              else
                v86 = v85;
              v87 = memcmp(v73, v84, v86);
              if (v87)
              {
                if (v87 < 0)
                  goto LABEL_173;
              }
              else if (v74 < v85)
              {
                goto LABEL_173;
              }
            }
            goto LABEL_173;
          }
          v88 = v262 + 4;
          do
          {
            while (1)
            {
              j = (unint64_t)v88;
              v89 = *((unsigned __int8 *)v88 + 23);
              v90 = (v89 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
              v91 = (v89 & 0x80u) == 0 ? v89 : *(_QWORD *)(j + 8);
              v92 = v91 >= v74 ? v74 : v91;
              v93 = memcmp(v73, v90, v92);
              v88 = (_QWORD *)(j + 32);
              if (v93)
                break;
              if (v74 < v91)
                goto LABEL_173;
            }
          }
          while ((v93 & 0x80000000) == 0);
LABEL_173:
          k = a2;
          if (j < (unint64_t)a2)
          {
            for (k = a2 - 4; ; v77 = (size_t)k[1])
            {
              if ((v75 & 0x80u) == 0)
                v96 = k;
              else
                v96 = v78;
              if ((v75 & 0x80u) == 0)
                v77 = v75;
              if (v77 >= v74)
                v97 = v74;
              else
                v97 = v77;
              v98 = memcmp(v73, v96, v97);
              if (v98)
              {
                if ((v98 & 0x80000000) == 0)
                  break;
              }
              else if (v74 >= v77)
              {
                break;
              }
              v95 = (const void **)*(k - 4);
              k -= 4;
              v78 = v95;
              v75 = *((unsigned __int8 *)k + 23);
            }
          }
          if (j >= (unint64_t)k)
          {
            v7 = a2 - 4;
          }
          else
          {
            v7 = a2 - 4;
            do
            {
              v99 = *(_OWORD *)j;
              v266 = *(const void **)(j + 16);
              v265 = v99;
              v100 = *(_OWORD *)k;
              *(_QWORD *)(j + 16) = k[2];
              *(_OWORD *)j = v100;
              v101 = v265;
              k[2] = v266;
              *(_OWORD *)k = v101;
              if ((SBYTE7(v264) & 0x80u) == 0)
                v102 = &v263;
              else
                v102 = (__int128 *)v263;
              if ((SBYTE7(v264) & 0x80u) == 0)
                v103 = BYTE7(v264);
              else
                v103 = *((_QWORD *)&v263 + 1);
              v104 = j + 32;
              do
              {
                while (1)
                {
                  j = v104;
                  v105 = *(unsigned __int8 *)(v104 + 23);
                  v106 = (v105 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
                  v107 = (v105 & 0x80u) == 0 ? v105 : *(_QWORD *)(j + 8);
                  v108 = v107 >= v103 ? v103 : v107;
                  v109 = memcmp(v102, v106, v108);
                  v104 = j + 32;
                  if (v109)
                    break;
                  if (v103 < v107)
                    goto LABEL_209;
                }
              }
              while ((v109 & 0x80000000) == 0);
LABEL_209:
              v110 = k - 4;
              do
              {
                while (1)
                {
                  k = v110;
                  v111 = (const void *)*((unsigned __int8 *)v110 + 23);
                  v112 = (char)v111 >= 0 ? k : (const void **)*k;
                  v113 = (char)v111 >= 0 ? v111 : k[1];
                  v114 = (unint64_t)v113 >= v103 ? v103 : (size_t)v113;
                  v115 = memcmp(v102, v112, v114);
                  v110 = k - 4;
                  if (v115)
                    break;
                  if (v103 >= (unint64_t)v113)
                    goto LABEL_189;
                }
              }
              while (v115 < 0);
LABEL_189:
              ;
            }
            while (j < (unint64_t)k);
          }
          v116 = (__int128 *)(j - 32);
          if ((_QWORD *)(j - 32) == v262)
          {
            if (*(char *)(j - 9) < 0)
              (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(j - 8) + 40))(*(_QWORD *)(j - 8), *v262, *(_QWORD *)(j - 16) & 0x7FFFFFFFFFFFFFFFLL);
          }
          else
          {
            if (*((char *)v262 + 23) < 0)
              (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)v262[3] + 40))(v262[3], *v262, v262[2] & 0x7FFFFFFFFFFFFFFFLL);
            v117 = *v116;
            v262[2] = *(_QWORD *)(j - 16);
            *(_OWORD *)v262 = v117;
            *(_BYTE *)(j - 9) = 0;
            *(_BYTE *)(j - 32) = 0;
          }
          a4 = 0;
          v71 = v263;
          *(_QWORD *)(j - 16) = v264;
          *v116 = v71;
          v6 = a2;
          continue;
        }
LABEL_26:
        v26 = *(_OWORD *)(v9 + 16);
        v263 = *(_OWORD *)v9;
        v264 = v26;
        *(_QWORD *)(v9 + 8) = 0;
        *(_QWORD *)(v9 + 16) = 0;
        *(_QWORD *)v9 = 0;
        if ((SBYTE7(v264) & 0x80u) == 0)
          v27 = &v263;
        else
          v27 = (__int128 *)v263;
        if ((SBYTE7(v264) & 0x80u) == 0)
          v28 = BYTE7(v264);
        else
          v28 = *((_QWORD *)&v263 + 1);
        v29 = (const void **)(v9 + 32);
        while (2)
        {
          v30 = *((char *)v29 + 23);
          if (v30 >= 0)
            v31 = v29;
          else
            v31 = *v29;
          if (v30 >= 0)
            v32 = *((unsigned __int8 *)v29 + 23);
          else
            v32 = (size_t)v29[1];
          if (v28 >= v32)
            v33 = v32;
          else
            v33 = v28;
          v34 = memcmp(v31, v27, v33);
          if (!v34)
          {
            if (v32 >= v28)
              goto LABEL_46;
LABEL_34:
            v29 += 4;
            continue;
          }
          break;
        }
        if (v34 < 0)
          goto LABEL_34;
LABEL_46:
        v35 = v7;
        if (v29 - 4 == (const void **)v9)
        {
          v36 = a2;
          if (v29 < a2)
          {
            v37 = a2 - 4;
            do
            {
              while (1)
              {
                v36 = v37;
                v62 = (const void *)*((unsigned __int8 *)v37 + 23);
                v63 = (char)v62 >= 0 ? v36 : (const void **)*v36;
                v64 = (char)v62 >= 0 ? v62 : v36[1];
                v65 = v28 >= (unint64_t)v64 ? (size_t)v64 : v28;
                v66 = memcmp(v63, v27, v65);
                v37 = v36 - 4;
                if (!v66)
                  break;
                if (v66 < 0 || v29 >= v36)
                  goto LABEL_61;
              }
              v61 = (unint64_t)v64 < v28 || v29 >= v36;
            }
            while (!v61);
          }
        }
        else
        {
          do
          {
            while (1)
            {
              v36 = v35;
              v38 = (const void *)*((unsigned __int8 *)v35 + 23);
              v39 = (char)v38 >= 0 ? v36 : (const void **)*v36;
              v40 = (char)v38 >= 0 ? v38 : v36[1];
              v41 = v28 >= (unint64_t)v40 ? (size_t)v40 : v28;
              v42 = memcmp(v39, v27, v41);
              v35 = v36 - 4;
              if (v42)
                break;
              if ((unint64_t)v40 < v28)
                goto LABEL_61;
            }
          }
          while ((v42 & 0x80000000) == 0);
        }
LABEL_61:
        j = (unint64_t)v29;
        if (v29 < v36)
        {
          j = (unint64_t)v29;
          v43 = v36;
          do
          {
            v44 = *(_OWORD *)j;
            v266 = *(const void **)(j + 16);
            v265 = v44;
            v45 = *(_OWORD *)v43;
            *(_QWORD *)(j + 16) = v43[2];
            *(_OWORD *)j = v45;
            v46 = v265;
            v43[2] = v266;
            *(_OWORD *)v43 = v46;
            if ((SBYTE7(v264) & 0x80u) == 0)
              v47 = &v263;
            else
              v47 = (__int128 *)v263;
            if ((SBYTE7(v264) & 0x80u) == 0)
              v48 = BYTE7(v264);
            else
              v48 = *((_QWORD *)&v263 + 1);
            v49 = j + 32;
            do
            {
              while (1)
              {
                j = v49;
                v50 = *(unsigned __int8 *)(v49 + 23);
                v51 = (v50 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
                v52 = (v50 & 0x80u) == 0 ? v50 : *(_QWORD *)(j + 8);
                v53 = v48 >= v52 ? v52 : v48;
                v54 = memcmp(v51, v47, v53);
                v49 = j + 32;
                if (v54)
                  break;
                if (v52 >= v48)
                  goto LABEL_83;
              }
            }
            while (v54 < 0);
LABEL_83:
            v55 = v43 - 4;
            do
            {
              while (1)
              {
                v43 = v55;
                v56 = (const void *)*((unsigned __int8 *)v55 + 23);
                v57 = (char)v56 >= 0 ? v43 : (const void **)*v43;
                v58 = (char)v56 >= 0 ? v56 : v43[1];
                v59 = v48 >= (unint64_t)v58 ? (size_t)v58 : v48;
                v60 = memcmp(v57, v47, v59);
                v55 = v43 - 4;
                if (v60)
                  break;
                if ((unint64_t)v58 < v48)
                  goto LABEL_63;
              }
            }
            while ((v60 & 0x80000000) == 0);
LABEL_63:
            ;
          }
          while (j < (unint64_t)v43);
        }
        v67 = (__int128 *)(j - 32);
        a1 = v262;
        if ((_QWORD *)(j - 32) == v262)
        {
          v7 = a2 - 4;
          if (*(char *)(j - 9) < 0)
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(j - 8) + 40))(*(_QWORD *)(j - 8), *v262, *(_QWORD *)(j - 16) & 0x7FFFFFFFFFFFFFFFLL);
        }
        else
        {
          if (*((char *)v262 + 23) < 0)
            (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)v262[3] + 40))(v262[3], *v262, v262[2] & 0x7FFFFFFFFFFFFFFFLL);
          v68 = *v67;
          v262[2] = *(_QWORD *)(j - 16);
          *(_OWORD *)v262 = v68;
          *(_BYTE *)(j - 9) = 0;
          *(_BYTE *)(j - 32) = 0;
          v7 = a2 - 4;
        }
        v69 = v263;
        *(_QWORD *)(j - 16) = v264;
        *v67 = v69;
        v61 = v29 >= v36;
        v6 = a2;
        if (!v61)
        {
LABEL_124:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> *,false>(v262, j - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v70 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> *>((uint64_t)v262, (const void **)(j - 32));
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>> *>(j, a2))
        {
          if (v70)
            continue;
          goto LABEL_124;
        }
        a2 = (const void **)(j - 32);
        if (!v70)
          goto LABEL_1;
        return *(double *)&v71;
    }
  }
}

  v185 = (uint64_t)(a2 - 8);
  v186 = (uint64_t)(a2 - 4);
  v184 = (uint64_t)(a2 - 12);
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = (uint64_t)a2 - v7;
    v9 = (uint64_t)((uint64_t)a2 - v7) >> 4;
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        v85 = *((unsigned __int8 *)a2 - 8);
        v86 = *(unsigned __int8 *)(a1 + 8);
        v94 = v85 == v86;
        v87 = v85 < v86;
        if (v94)
          v87 = *(a2 - 1) < *(float *)(a1 + 12);
        if (v87)
        {
          v88 = *(void **)a1;
          v89 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)a1 = 0;
          v90 = *((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 2) = 0;
          v91 = *(void **)a1;
          *(_QWORD *)a1 = v90;

          *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 - 1);
          v92 = (void *)*((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 2) = v88;

          *((_QWORD *)a2 - 1) = v89;
        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,-[VKLabelNavRoadGraph(junctionlist) offRouteGraphJunctionsWithNavContext:maxJunctions:isOnRoute:]::$_2 &,OffRouteJunctionInfo *>(a1, a1 + 16, v186);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,-[VKLabelNavRoadGraph(junctionlist) offRouteGraphJunctionsWithNavContext:maxJunctions:isOnRoute:]::$_2 &,OffRouteJunctionInfo *>(a1, a1 + 16, a1 + 32, v186);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,-[VKLabelNavRoadGraph(junctionlist) offRouteGraphJunctionsWithNavContext:maxJunctions:isOnRoute:]::$_2 &,OffRouteJunctionInfo *,0>(a1, a1 + 16, a1 + 32, a1 + 48, v186);
        return;
      default:
        if (v8 <= 383)
        {
          v93 = (float *)(a1 + 16);
          v94 = (float *)a1 == a2 || v93 == a2;
          v95 = v94;
          if ((a4 & 1) != 0)
          {
            if ((v95 & 1) == 0)
            {
              v96 = 0;
              v97 = (float *)a1;
              do
              {
                v100 = v93;
                v101 = *((unsigned __int8 *)v97 + 24);
                v102 = *((unsigned __int8 *)v97 + 8);
                v94 = v101 == v102;
                v103 = v101 < v102;
                if (v94)
                  v103 = v97[7] < v97[3];
                if (v103)
                {
                  v104 = *(_QWORD *)v100;
                  *(_QWORD *)v100 = 0;
                  v105 = *((_DWORD *)v97 + 6);
                  v106 = v97[7];
                  v107 = v96;
                  do
                  {
                    v108 = (float *)(a1 + v107);
                    v109 = *(_QWORD *)(a1 + v107);
                    *(_QWORD *)v108 = 0;
                    v110 = *(void **)(a1 + v107 + 16);
                    *((_QWORD *)v108 + 2) = v109;

                    *((_QWORD *)v108 + 3) = *((_QWORD *)v108 + 1);
                    if (!v107)
                    {
                      v98 = a1;
                      goto LABEL_96;
                    }
                    v111 = *((unsigned __int8 *)v108 - 8);
                    v94 = v111 == v105;
                    v112 = v111 > v105;
                    if (v94)
                      v112 = *(v108 - 1) > v106;
                    v107 -= 16;
                  }
                  while (v112);
                  v98 = a1 + v107 + 16;
LABEL_96:
                  v99 = *(void **)v98;
                  *(_QWORD *)v98 = v104;

                  *(_DWORD *)(v98 + 8) = v105;
                  *(float *)(v98 + 12) = v106;
                }
                v93 = v100 + 4;
                v96 += 16;
                v97 = v100;
              }
              while (v100 + 4 != a2);
            }
          }
          else if ((v95 & 1) == 0)
          {
            v170 = (unsigned __int8 *)(a1 - 8);
            do
            {
              v171 = v93;
              v172 = *(unsigned __int8 *)(a1 + 24);
              v173 = *(unsigned __int8 *)(a1 + 8);
              v94 = v172 == v173;
              v174 = v172 < v173;
              if (v94)
                v174 = *(float *)(a1 + 28) < *(float *)(a1 + 12);
              if (v174)
              {
                v175 = *(_QWORD *)v171;
                *(_QWORD *)v171 = 0;
                v176 = *(_DWORD *)(a1 + 24);
                v177 = *(float *)(a1 + 28);
                v178 = v170;
                do
                {
                  v179 = *((_QWORD *)v178 + 1);
                  *((_QWORD *)v178 + 1) = 0;
                  v180 = (void *)*((_QWORD *)v178 + 3);
                  *((_QWORD *)v178 + 3) = v179;

                  *((_QWORD *)v178 + 4) = *((_QWORD *)v178 + 2);
                  v181 = *v178;
                  v94 = v181 == v176;
                  v182 = v181 > v176;
                  if (v94)
                    v182 = *((float *)v178 + 1) > v177;
                  v178 -= 16;
                }
                while (v182);
                v183 = (void *)*((_QWORD *)v178 + 3);
                *((_QWORD *)v178 + 3) = v175;

                *((_DWORD *)v178 + 8) = v176;
                *((float *)v178 + 9) = v177;
              }
              v93 = v171 + 4;
              v170 += 16;
              a1 = (uint64_t)v171;
            }
            while (v171 + 4 != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((float *)a1 != a2)
          {
            v113 = (unint64_t)(v9 - 2) >> 1;
            v114 = v113;
            do
            {
              v116 = v114;
              if (v113 >= v114)
              {
                v117 = (2 * v114) | 1;
                v118 = a1 + 16 * v117;
                if (2 * v116 + 2 < v9)
                {
                  v119 = *(unsigned __int8 *)(v118 + 8);
                  v120 = *(unsigned __int8 *)(v118 + 24);
                  v94 = v119 == v120;
                  v121 = v119 < v120;
                  if (v94)
                    v121 = *(float *)(v118 + 12) < *(float *)(v118 + 28);
                  v118 += 16 * v121;
                  if (v121)
                    v117 = 2 * v116 + 2;
                }
                v122 = a1 + 16 * v116;
                v123 = *(unsigned __int8 *)(v118 + 8);
                v124 = *(unsigned __int8 *)(v122 + 8);
                v125 = *(float *)(v122 + 12);
                v94 = v123 == v124;
                v126 = v123 < v124;
                if (v94)
                  v126 = *(float *)(v118 + 12) < v125;
                if (!v126)
                {
                  v189 = *(void **)v122;
                  *(_QWORD *)v122 = 0;
                  v191 = *(_DWORD *)(v122 + 8);
                  do
                  {
                    v129 = v122;
                    v122 = v118;
                    v130 = *(_QWORD *)v118;
                    *(_QWORD *)v122 = 0;
                    v131 = *(void **)v129;
                    *(_QWORD *)v129 = v130;

                    *(_QWORD *)(v129 + 8) = *(_QWORD *)(v122 + 8);
                    if (v113 < v117)
                      break;
                    v132 = (2 * v117) | 1;
                    v118 = a1 + 16 * v132;
                    if (2 * v117 + 2 < v9)
                    {
                      v133 = *(unsigned __int8 *)(v118 + 8);
                      v134 = *(unsigned __int8 *)(v118 + 24);
                      v94 = v133 == v134;
                      v135 = v133 < v134;
                      if (v94)
                        v135 = *(float *)(v118 + 12) < *(float *)(v118 + 28);
                      v118 += 16 * v135;
                      if (v135)
                        v132 = 2 * v117 + 2;
                    }
                    v127 = *(unsigned __int8 *)(v118 + 8);
                    v94 = v127 == v191;
                    v128 = v127 < v191;
                    if (v94)
                      v128 = *(float *)(v118 + 12) < v125;
                    v117 = v132;
                  }
                  while (!v128);
                  v115 = *(void **)v122;
                  *(_QWORD *)v122 = v189;

                  *(_DWORD *)(v122 + 8) = v191;
                  *(float *)(v122 + 12) = v125;
                }
              }
              v114 = v116 - 1;
            }
            while (v116);
            v136 = (unint64_t)v8 >> 4;
            do
            {
              v139 = 0;
              v141 = *(void **)a1;
              v140 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)a1 = 0;
              v142 = a1;
              do
              {
                v145 = v142 + 16 * v139 + 16;
                v146 = (2 * v139) | 1;
                v147 = 2 * v139 + 2;
                if (v147 < v136)
                {
                  v148 = *(unsigned __int8 *)(v145 + 8);
                  v149 = *(unsigned __int8 *)(v145 + 24);
                  v94 = v148 == v149;
                  v150 = v148 < v149;
                  if (v94)
                    v150 = *(float *)(v145 + 12) < *(float *)(v145 + 28);
                  v145 += 16 * v150;
                  if (v150)
                    v146 = v147;
                }
                v143 = *(void **)v145;
                *(_QWORD *)v145 = 0;
                v144 = *(void **)v142;
                *(_QWORD *)v142 = v143;

                *(_QWORD *)(v142 + 8) = *(_QWORD *)(v145 + 8);
                v142 = v145;
                v139 = v146;
              }
              while (v146 <= (uint64_t)((unint64_t)(v136 - 2) >> 1));
              v151 = a2 - 4;
              if ((float *)v145 == a2 - 4)
              {
                v137 = *(void **)v145;
                *(_QWORD *)v145 = v141;

                *(_QWORD *)(v145 + 8) = v140;
              }
              else
              {
                v152 = *((_QWORD *)a2 - 2);
                *((_QWORD *)a2 - 2) = 0;
                v153 = *(void **)v145;
                *(_QWORD *)v145 = v152;

                *(_QWORD *)(v145 + 8) = *((_QWORD *)a2 - 1);
                v154 = (void *)*((_QWORD *)a2 - 2);
                *((_QWORD *)a2 - 2) = v141;

                *((_QWORD *)a2 - 1) = v140;
                v155 = v145 - a1 + 16;
                if (v155 >= 17)
                {
                  v156 = (((unint64_t)v155 >> 4) - 2) >> 1;
                  v157 = a1 + 16 * v156;
                  v158 = *(unsigned __int8 *)(v157 + 8);
                  v159 = *(unsigned __int8 *)(v145 + 8);
                  v160 = *(float *)(v145 + 12);
                  v94 = v158 == v159;
                  v161 = v158 < v159;
                  if (v94)
                    v161 = *(float *)(v157 + 12) < v160;
                  if (v161)
                  {
                    v162 = *(void **)v145;
                    *(_QWORD *)v145 = 0;
                    v163 = *(_DWORD *)(v145 + 8);
                    do
                    {
                      v164 = v145;
                      v145 = v157;
                      v165 = *(_QWORD *)v157;
                      *(_QWORD *)v145 = 0;
                      v166 = *(void **)v164;
                      *(_QWORD *)v164 = v165;

                      *(_QWORD *)(v164 + 8) = *(_QWORD *)(v145 + 8);
                      if (!v156)
                        break;
                      v156 = (v156 - 1) >> 1;
                      v157 = a1 + 16 * v156;
                      v167 = *(unsigned __int8 *)(v157 + 8);
                      v94 = v167 == v163;
                      v168 = v167 < v163;
                      if (v94)
                        v168 = *(float *)(v157 + 12) < v160;
                    }
                    while (v168);
                    v169 = *(void **)v145;
                    *(_QWORD *)v145 = v162;

                    *(_DWORD *)(v145 + 8) = v163;
                    *(float *)(v145 + 12) = v160;
                  }
                }
              }
              a2 = v151;
            }
            while (v136-- > 2);
          }
          return;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = (void **)(a1 + 16 * ((unint64_t)v9 >> 1));
        if ((unint64_t)v8 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,-[VKLabelNavRoadGraph(junctionlist) offRouteGraphJunctionsWithNavContext:maxJunctions:isOnRoute:]::$_2 &,OffRouteJunctionInfo *>((uint64_t)v11, a1, v186);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,-[VKLabelNavRoadGraph(junctionlist) offRouteGraphJunctionsWithNavContext:maxJunctions:isOnRoute:]::$_2 &,OffRouteJunctionInfo *>(a1, (uint64_t)v11, v186);
          v12 = 16 * v10;
          v13 = a1 + v12;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,-[VKLabelNavRoadGraph(junctionlist) offRouteGraphJunctionsWithNavContext:maxJunctions:isOnRoute:]::$_2 &,OffRouteJunctionInfo *>(a1 + 16, a1 + v12 - 16, v185);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,-[VKLabelNavRoadGraph(junctionlist) offRouteGraphJunctionsWithNavContext:maxJunctions:isOnRoute:]::$_2 &,OffRouteJunctionInfo *>(a1 + 32, a1 + 16 + v12, v184);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,-[VKLabelNavRoadGraph(junctionlist) offRouteGraphJunctionsWithNavContext:maxJunctions:isOnRoute:]::$_2 &,OffRouteJunctionInfo *>(a1 + v12 - 16, (uint64_t)v11, a1 + 16 + v12);
          v14 = *(void **)a1;
          v15 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)a1 = 0;
          v16 = *v11;
          *v11 = 0;
          v17 = *(void **)a1;
          *(_QWORD *)a1 = v16;

          *(_QWORD *)(a1 + 8) = *(_QWORD *)(v13 + 8);
          v18 = *v11;
          *v11 = v14;

          *(_QWORD *)(v13 + 8) = v15;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v20 = *(unsigned __int8 *)(a1 - 8);
          v21 = *(unsigned __int8 *)(a1 + 8);
          v19 = *(float *)(a1 + 12);
          v94 = v20 == v21;
          v22 = v20 < v21;
          if (v94)
            v22 = *(float *)(a1 - 4) < v19;
          if (v22)
            goto LABEL_13;
          v54 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          v55 = *(_DWORD *)(a1 + 8);
          v56 = *((unsigned __int8 *)a2 - 8);
          v94 = v56 == v55;
          v57 = v56 > v55;
          if (v94)
            v57 = *(a2 - 1) > v19;
          if (v57)
          {
            v58 = a1;
            do
            {
              v7 = v58 + 16;
              v59 = *(unsigned __int8 *)(v58 + 24);
              v60 = *(float *)(v58 + 28) > v19;
              v94 = v59 == v55;
              v61 = v59 > v55;
              if (v94)
                v61 = v60;
              v58 = v7;
            }
            while (!v61);
          }
          else
          {
            v62 = a1 + 16;
            do
            {
              v7 = v62;
              if (v62 >= (unint64_t)a2)
                break;
              v63 = *(unsigned __int8 *)(v62 + 8);
              v64 = *(float *)(v7 + 12) > v19;
              v94 = v63 == v55;
              v65 = v63 > v55;
              if (!v94)
                v64 = v65;
              v62 = v7 + 16;
            }
            while (!v64);
          }
          v66 = a2;
          if (v7 < (unint64_t)a2)
          {
            v67 = a2;
            do
            {
              v66 = v67 - 4;
              v68 = *((unsigned __int8 *)v67 - 8);
              v69 = *(v67 - 1) > v19;
              v94 = v68 == v55;
              v70 = v68 > v55;
              if (v94)
                v70 = v69;
              v67 = v66;
            }
            while (v70);
          }
          while (v7 < (unint64_t)v66)
          {
            v71 = *(void **)v7;
            v72 = *(_QWORD *)(v7 + 8);
            *(_QWORD *)v7 = 0;
            v73 = *(void **)v66;
            *(_QWORD *)v66 = 0;
            v74 = *(void **)v7;
            *(_QWORD *)v7 = v73;

            *(_QWORD *)(v7 + 8) = *((_QWORD *)v66 + 1);
            v75 = *(void **)v66;
            *(_QWORD *)v66 = v71;

            *((_QWORD *)v66 + 1) = v72;
            do
            {
              v76 = *(unsigned __int8 *)(v7 + 24);
              v77 = *(float *)(v7 + 28);
              v7 += 16;
              v94 = v76 == v55;
              v78 = v76 > v55;
              if (v94)
                v78 = v77 > v19;
            }
            while (!v78);
            do
            {
              v79 = *((unsigned __int8 *)v66 - 8);
              v80 = *(v66 - 1);
              v66 -= 4;
              v94 = v79 == v55;
              v81 = v79 > v55;
              if (v94)
                v81 = v80 > v19;
            }
            while (v81);
          }
          if (v7 - 16 != a1)
          {
            v82 = *(_QWORD *)(v7 - 16);
            *(_QWORD *)(v7 - 16) = 0;
            v83 = *(void **)a1;
            *(_QWORD *)a1 = v82;

            *(_QWORD *)(a1 + 8) = *(_QWORD *)(v7 - 8);
          }
          v84 = *(void **)(v7 - 16);
          *(_QWORD *)(v7 - 16) = v54;

          a4 = 0;
          *(_DWORD *)(v7 - 8) = v55;
          *(float *)(v7 - 4) = v19;
          continue;
        }
        v19 = *(float *)(a1 + 12);
LABEL_13:
        v188 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        v23 = *(_DWORD *)(a1 + 8);
        v24 = a1;
        do
        {
          v25 = v24;
          v24 += 16;
          v26 = *(unsigned __int8 *)(v25 + 24);
          v94 = v26 == v23;
          v27 = v26 < v23;
          if (v94)
            v27 = *(float *)(v25 + 28) < v19;
        }
        while (v27);
        v28 = a2;
        if (v25 == a1)
        {
          v33 = a2;
          while (v24 < (unint64_t)v33)
          {
            v29 = v33 - 4;
            v34 = *((unsigned __int8 *)v33 - 8);
            v35 = *(v33 - 1) < v19;
            v94 = v34 == v23;
            v36 = v34 < v23;
            if (v94)
              v36 = v35;
            v33 = v29;
            if (v36)
              goto LABEL_29;
          }
          v29 = v33;
        }
        else
        {
          do
          {
            v29 = v28 - 4;
            v30 = *((unsigned __int8 *)v28 - 8);
            v31 = *(v28 - 1) < v19;
            v94 = v30 == v23;
            v32 = v30 < v23;
            if (v94)
              v32 = v31;
            v28 = v29;
          }
          while (!v32);
        }
LABEL_29:
        v190 = a3;
        v37 = (uint64_t)a2;
        v7 = v24;
        if (v24 < (unint64_t)v29)
        {
          v38 = v29;
          do
          {
            v40 = *(void **)v7;
            v39 = *(_QWORD *)(v7 + 8);
            *(_QWORD *)v7 = 0;
            v41 = *(void **)v38;
            *(_QWORD *)v38 = 0;
            v42 = *(void **)v7;
            *(_QWORD *)v7 = v41;

            *(_QWORD *)(v7 + 8) = *((_QWORD *)v38 + 1);
            v43 = *(void **)v38;
            *(_QWORD *)v38 = v40;

            *((_QWORD *)v38 + 1) = v39;
            do
            {
              v44 = *(unsigned __int8 *)(v7 + 24);
              v45 = *(float *)(v7 + 28);
              v7 += 16;
              v94 = v44 == v23;
              v46 = v44 < v23;
              if (v94)
                v46 = v45 < v19;
            }
            while (v46);
            do
            {
              v47 = *((unsigned __int8 *)v38 - 8);
              v48 = *(v38 - 1);
              v38 -= 4;
              v94 = v47 == v23;
              v49 = v47 < v23;
              if (v94)
                v49 = v48 < v19;
            }
            while (!v49);
          }
          while (v7 < (unint64_t)v38);
        }
        if (v7 - 16 != a1)
        {
          v50 = *(_QWORD *)(v7 - 16);
          *(_QWORD *)(v7 - 16) = 0;
          v51 = *(void **)a1;
          *(_QWORD *)a1 = v50;

          *(_QWORD *)(a1 + 8) = *(_QWORD *)(v7 - 8);
        }
        v52 = *(void **)(v7 - 16);
        *(_QWORD *)(v7 - 16) = v188;

        *(_DWORD *)(v7 - 8) = v23;
        *(float *)(v7 - 4) = v19;
        a2 = (float *)v37;
        a3 = v190;
        if (v24 < (unint64_t)v29)
        {
LABEL_44:
          std::__introsort<std::_ClassicAlgPolicy,-[VKLabelNavRoadGraph(junctionlist) offRouteGraphJunctionsWithNavContext:maxJunctions:isOnRoute:]::$_2 &,OffRouteJunctionInfo *,false>(a1, v7 - 16, v190, a4 & 1);
          a4 = 0;
          continue;
        }
        v53 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,-[VKLabelNavRoadGraph(junctionlist) offRouteGraphJunctionsWithNavContext:maxJunctions:isOnRoute:]::$_2 &,OffRouteJunctionInfo *>(a1, v7 - 16);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,-[VKLabelNavRoadGraph(junctionlist) offRouteGraphJunctionsWithNavContext:maxJunctions:isOnRoute:]::$_2 &,OffRouteJunctionInfo *>(v7, v37))
        {
          if (v53)
            continue;
          goto LABEL_44;
        }
        a2 = (float *)(v7 - 16);
        if (!v53)
          goto LABEL_1;
        return;
    }
  }
}

  n128_u64 = a2[-1].n128_u64;
  n128_f64 = a2[-2].n128_f64;
  v11 = a2[-3].n128_f64;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (char *)a2 - (char *)v12;
    v14 = a2 - v12;
    switch(v14)
    {
      case 0:
      case 1:
        return a5.n128_f64[0];
      case 2:
        a5.n128_u64[0] = *n128_u64;
        if (*(double *)n128_u64 < v12->n128_f64[0])
          goto LABEL_99;
        return a5.n128_f64[0];
      case 3:
        v60 = v12 + 1;
        a5.n128_u64[0] = v12[1].n128_u64[0];
        v61 = *(double *)n128_u64;
        if (a5.n128_f64[0] < v12->n128_f64[0])
        {
          if (v61 >= a5.n128_f64[0])
          {
            v124 = *v12;
            *v12 = *v60;
            *v60 = v124;
            a5.n128_u64[0] = *n128_u64;
            if (*(double *)n128_u64 >= v12[1].n128_f64[0])
              return a5.n128_f64[0];
            a5 = *v60;
            *v60 = *(__n128 *)n128_u64;
          }
          else
          {
LABEL_99:
            v120 = *v12;
            *v12 = *(__n128 *)n128_u64;
            a5 = v120;
          }
          *(__n128 *)n128_u64 = a5;
          return a5.n128_f64[0];
        }
        if (v61 < a5.n128_f64[0])
        {
          a5 = *v60;
          *v60 = *(__n128 *)n128_u64;
          *(__n128 *)n128_u64 = a5;
          a5.n128_u64[0] = v12[1].n128_u64[0];
          if (a5.n128_f64[0] < v12->n128_f64[0])
          {
            v123 = *v12;
            *v12 = *v60;
            a5.n128_u64[0] = v123.n128_u64[0];
            *v60 = v123;
          }
        }
        return a5.n128_f64[0];
      case 4:
        a5.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,-[LabelNavRouteLabeler(Debug) drawNavOverlayDebugView:navContext:]::$_0 &,gm::Range<double> *>(v12, v12[1].n128_f64, v12[2].n128_f64, a2[-1].n128_u64, a5).n128_u64[0];
        return a5.n128_f64[0];
      case 5:
        v62 = v12 + 1;
        v63 = v12 + 2;
        v64 = v12 + 3;
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,-[LabelNavRouteLabeler(Debug) drawNavOverlayDebugView:navContext:]::$_0 &,gm::Range<double> *>(v12, v12[1].n128_f64, v12[2].n128_f64, v12[3].n128_u64, a5);
        a5.n128_u64[0] = *n128_u64;
        if (*(double *)n128_u64 < v12[3].n128_f64[0])
        {
          a5 = *v64;
          *v64 = *(__n128 *)n128_u64;
          *(__n128 *)n128_u64 = a5;
          a5.n128_u64[0] = v64->n128_u64[0];
          if (v64->n128_f64[0] < v63->n128_f64[0])
          {
            a5 = *v63;
            *v63 = *v64;
            *v64 = a5;
            a5.n128_u64[0] = v63->n128_u64[0];
            if (v63->n128_f64[0] < v62->n128_f64[0])
            {
              a5 = *v62;
              *v62 = *v63;
              *v63 = a5;
              a5.n128_u64[0] = v12[1].n128_u64[0];
              if (a5.n128_f64[0] < v12->n128_f64[0])
              {
                v121 = *v12;
                *v12 = *v62;
                a5.n128_u64[0] = v121.n128_u64[0];
                *v62 = v121;
              }
            }
          }
        }
        return a5.n128_f64[0];
      default:
        if (v13 <= 383)
        {
          v65 = v12 + 1;
          v67 = v12 == a2 || v65 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v67)
            {
              v68 = 0;
              v69 = v12;
              do
              {
                v71 = v65;
                a5.n128_u64[0] = v69[1].n128_u64[0];
                if (a5.n128_f64[0] < v69->n128_f64[0])
                {
                  v72 = v69[1].n128_u64[1];
                  v73 = v68;
                  do
                  {
                    *(__n128 *)((char *)v12 + v73 + 16) = *(__n128 *)((char *)v12 + v73);
                    if (!v73)
                    {
                      v70 = v12;
                      goto LABEL_117;
                    }
                    v74 = *(double *)((char *)v12[-1].n128_f64 + v73);
                    v73 -= 16;
                  }
                  while (a5.n128_f64[0] < v74);
                  v70 = (__n128 *)((char *)v12 + v73 + 16);
LABEL_117:
                  v70->n128_u64[0] = a5.n128_u64[0];
                  v70->n128_u64[1] = v72;
                }
                v65 = v71 + 1;
                v68 += 16;
                v69 = v71;
              }
              while (&v71[1] != a2);
            }
          }
          else if (!v67)
          {
            do
            {
              v97 = v65;
              a5.n128_u64[0] = a1[1].n128_u64[0];
              if (a5.n128_f64[0] < a1->n128_f64[0])
              {
                v98 = a1[1].n128_u64[1];
                v99 = v65;
                do
                {
                  *v99 = v99[-1];
                  v100 = v99[-2].n128_f64[0];
                  --v99;
                }
                while (a5.n128_f64[0] < v100);
                v99->n128_u64[0] = a5.n128_u64[0];
                v99->n128_u64[1] = v98;
              }
              ++v65;
              a1 = v97;
            }
            while (&v97[1] != a2);
          }
          return a5.n128_f64[0];
        }
        if (!a3)
        {
          if (v12 != a2)
          {
            v75 = (unint64_t)(v14 - 2) >> 1;
            v76 = v75;
            do
            {
              if (v75 >= v76)
              {
                v78 = (2 * v76) | 1;
                v79 = v12[v78].n128_f64;
                if (2 * v76 + 2 < v14 && *v79 < v79[2])
                {
                  v79 += 2;
                  v78 = 2 * v76 + 2;
                }
                v80 = &v12[v76];
                v81 = v80->n128_f64[0];
                if (*v79 >= v80->n128_f64[0])
                {
                  v82 = v80->n128_u64[1];
                  do
                  {
                    v83 = v80;
                    v80 = (__n128 *)v79;
                    *v83 = *(__n128 *)v79;
                    if (v75 < v78)
                      break;
                    v84 = 2 * v78;
                    v78 = (2 * v78) | 1;
                    v79 = v12[v78].n128_f64;
                    v85 = v84 + 2;
                    if (v85 < v14 && *v79 < v79[2])
                    {
                      v79 += 2;
                      v78 = v85;
                    }
                  }
                  while (*v79 >= v81);
                  v80->n128_f64[0] = v81;
                  v80->n128_u64[1] = v82;
                }
              }
              v77 = v76-- <= 0;
            }
            while (!v77);
            v86 = (unint64_t)v13 >> 4;
            do
            {
              v87 = 0;
              v122 = *v12;
              v88 = v12;
              do
              {
                v89 = v88;
                v88 += v87 + 1;
                v90 = 2 * v87;
                v87 = (2 * v87) | 1;
                v91 = v90 + 2;
                if (v91 < v86 && v88->n128_f64[0] < v88[1].n128_f64[0])
                {
                  ++v88;
                  v87 = v91;
                }
                *v89 = *v88;
              }
              while (v87 <= (uint64_t)((unint64_t)(v86 - 2) >> 1));
              if (v88 == --a2)
              {
                a5.n128_u64[0] = v122.n128_u64[0];
                *v88 = v122;
              }
              else
              {
                *v88 = *a2;
                a5.n128_u64[0] = v122.n128_u64[0];
                *a2 = v122;
                v92 = (char *)v88 - (char *)v12 + 16;
                if (v92 >= 17)
                {
                  v93 = (((unint64_t)v92 >> 4) - 2) >> 1;
                  v94 = &v12[v93];
                  a5.n128_u64[0] = v88->n128_u64[0];
                  if (v94->n128_f64[0] < v88->n128_f64[0])
                  {
                    v95 = v88->n128_u64[1];
                    do
                    {
                      v96 = v88;
                      v88 = v94;
                      *v96 = *v94;
                      if (!v93)
                        break;
                      v93 = (v93 - 1) >> 1;
                      v94 = &v12[v93];
                    }
                    while (v94->n128_f64[0] < a5.n128_f64[0]);
                    v88->n128_u64[0] = a5.n128_u64[0];
                    v88->n128_u64[1] = v95;
                  }
                }
              }
              v77 = v86-- <= 2;
            }
            while (!v77);
          }
          return a5.n128_f64[0];
        }
        v15 = (unint64_t)v14 >> 1;
        v16 = v12[(unint64_t)v14 >> 1].n128_f64;
        v17 = *(double *)n128_u64;
        if ((unint64_t)v13 >= 0x801)
        {
          v18 = *v16;
          if (*v16 >= v12->n128_f64[0])
          {
            if (v17 < v18)
            {
              v104 = *(__n128 *)v16;
              *(_OWORD *)v16 = *(_OWORD *)n128_u64;
              *(__n128 *)n128_u64 = v104;
              if (*v16 < v12->n128_f64[0])
              {
                v105 = *v12;
                *v12 = *(__n128 *)v16;
                *(__n128 *)v16 = v105;
              }
            }
          }
          else
          {
            if (v17 < v18)
            {
              v102 = *v12;
              *v12 = *(__n128 *)n128_u64;
              goto LABEL_20;
            }
            v108 = *v12;
            *v12 = *(__n128 *)v16;
            *(__n128 *)v16 = v108;
            if (*(double *)n128_u64 < *v16)
            {
              v102 = *(__n128 *)v16;
              *(_OWORD *)v16 = *(_OWORD *)n128_u64;
LABEL_20:
              *(__n128 *)n128_u64 = v102;
            }
          }
          v20 = v12 + 1;
          v21 = &v12[v15];
          v23 = v21[-1].n128_f64[0];
          v22 = v21 - 1;
          v24 = v23;
          v25 = *n128_f64;
          if (v23 >= v12[1].n128_f64[0])
          {
            if (v25 < v24)
            {
              v109 = *v22;
              *v22 = *(__n128 *)n128_f64;
              *(__n128 *)n128_f64 = v109;
              if (v22->n128_f64[0] < v20->n128_f64[0])
              {
                v27 = *v20;
                *v20 = *v22;
                *v22 = v27;
              }
            }
          }
          else
          {
            if (v25 < v24)
            {
              v26 = *v20;
              *v20 = *(__n128 *)n128_f64;
              goto LABEL_32;
            }
            v28 = *v20;
            *v20 = *v22;
            *v22 = v28;
            if (*n128_f64 < v22->n128_f64[0])
            {
              v111 = *v22;
              *v22 = *(__n128 *)n128_f64;
              v26 = v111;
LABEL_32:
              *(__n128 *)n128_f64 = v26;
            }
          }
          v29 = v12 + 2;
          v30 = &v12[v15];
          v32 = v30[1].n128_f64[0];
          v31 = v30 + 1;
          v33 = v32;
          v34 = *v11;
          if (v32 >= v12[2].n128_f64[0])
          {
            if (v34 < v33)
            {
              v112 = *v31;
              *v31 = *(__n128 *)v11;
              *(__n128 *)v11 = v112;
              if (v31->n128_f64[0] < v29->n128_f64[0])
              {
                v36 = *v29;
                *v29 = *v31;
                *v31 = v36;
              }
            }
          }
          else
          {
            if (v34 < v33)
            {
              v35 = *v29;
              *v29 = *(__n128 *)v11;
              goto LABEL_41;
            }
            v37 = *v29;
            *v29 = *v31;
            *v31 = v37;
            if (*v11 < v31->n128_f64[0])
            {
              v113 = *v31;
              *v31 = *(__n128 *)v11;
              v35 = v113;
LABEL_41:
              *(__n128 *)v11 = v35;
            }
          }
          v38 = *v16;
          v39 = v31->n128_f64[0];
          if (*v16 >= v22->n128_f64[0])
          {
            if (v39 < v38)
            {
              v115 = *(__n128 *)v16;
              *(__n128 *)v16 = *v31;
              *v31 = v115;
              if (*v16 < v22->n128_f64[0])
              {
                v116 = *v22;
                *v22 = *(__n128 *)v16;
                *(__n128 *)v16 = v116;
              }
            }
          }
          else
          {
            if (v39 < v38)
            {
              v114 = *v22;
              *v22 = *v31;
              goto LABEL_50;
            }
            v117 = *v22;
            *v22 = *(__n128 *)v16;
            *(__n128 *)v16 = v117;
            if (v31->n128_f64[0] < *v16)
            {
              v114 = *(__n128 *)v16;
              *(__n128 *)v16 = *v31;
LABEL_50:
              *v31 = v114;
            }
          }
          v118 = *v12;
          *v12 = *(__n128 *)v16;
          a5.n128_u64[1] = v118.n128_u64[1];
          *(__n128 *)v16 = v118;
          goto LABEL_52;
        }
        v19 = v12->n128_f64[0];
        if (v12->n128_f64[0] >= *v16)
        {
          if (v17 < v19)
          {
            v106 = *v12;
            *v12 = *(__n128 *)n128_u64;
            a5.n128_u64[1] = v106.n128_u64[1];
            *(__n128 *)n128_u64 = v106;
            if (v12->n128_f64[0] < *v16)
            {
              v107 = *(__n128 *)v16;
              *(__n128 *)v16 = *v12;
              a5.n128_u64[1] = v107.n128_u64[1];
              *v12 = v107;
            }
          }
        }
        else
        {
          if (v17 >= v19)
          {
            v110 = *(__n128 *)v16;
            *(__n128 *)v16 = *v12;
            a5.n128_u64[1] = v110.n128_u64[1];
            *v12 = v110;
            if (*(double *)n128_u64 >= v12->n128_f64[0])
              goto LABEL_52;
            v103 = *v12;
            *v12 = *(__n128 *)n128_u64;
          }
          else
          {
            v103 = *(__n128 *)v16;
            *(_OWORD *)v16 = *(_OWORD *)n128_u64;
          }
          a5.n128_u64[1] = v103.n128_u64[1];
          *(__n128 *)n128_u64 = v103;
        }
LABEL_52:
        --a3;
        a5.n128_u64[0] = v12->n128_u64[0];
        if ((a4 & 1) == 0 && v12[-1].n128_f64[0] >= a5.n128_f64[0])
        {
          if (a5.n128_f64[0] >= *(double *)n128_u64)
          {
            v54 = v12 + 1;
            do
            {
              v12 = v54;
              if (v54 >= a2)
                break;
              ++v54;
            }
            while (a5.n128_f64[0] >= v12->n128_f64[0]);
          }
          else
          {
            do
            {
              v53 = v12[1].n128_f64[0];
              ++v12;
            }
            while (a5.n128_f64[0] >= v53);
          }
          v55 = a2;
          if (v12 < a2)
          {
            v55 = a2;
            do
            {
              v56 = v55[-1].n128_f64[0];
              --v55;
            }
            while (a5.n128_f64[0] < v56);
          }
          v57 = a1->n128_u64[1];
          while (v12 < v55)
          {
            v119 = *v12;
            *v12 = *v55;
            *v55 = v119;
            do
            {
              v58 = v12[1].n128_f64[0];
              ++v12;
            }
            while (a5.n128_f64[0] >= v58);
            do
            {
              v59 = v55[-1].n128_f64[0];
              --v55;
            }
            while (a5.n128_f64[0] < v59);
          }
          if (&v12[-1] != a1)
            *a1 = v12[-1];
          a4 = 0;
          v12[-1].n128_u64[0] = a5.n128_u64[0];
          v12[-1].n128_u64[1] = v57;
          continue;
        }
        v40 = v12->n128_u64[1];
        v41 = v12;
        do
        {
          v42 = v41;
          v43 = v41[1].n128_f64[0];
          ++v41;
        }
        while (v43 < a5.n128_f64[0]);
        v44 = a2;
        if (v42 == v12)
        {
          v44 = a2;
          do
          {
            if (v41 >= v44)
              break;
            v46 = v44[-1].n128_f64[0];
            --v44;
          }
          while (v46 >= a5.n128_f64[0]);
        }
        else
        {
          do
          {
            v45 = v44[-1].n128_f64[0];
            --v44;
          }
          while (v45 >= a5.n128_f64[0]);
        }
        v12 = v41;
        if (v41 < v44)
        {
          v47 = v44;
          do
          {
            v48 = *v12;
            *v12 = *v47;
            *v47 = v48;
            do
            {
              v49 = v12[1].n128_f64[0];
              ++v12;
            }
            while (v49 < a5.n128_f64[0]);
            do
            {
              v50 = v47[-1].n128_f64[0];
              --v47;
            }
            while (v50 >= a5.n128_f64[0]);
          }
          while (v12 < v47);
        }
        if (&v12[-1] != a1)
          *a1 = v12[-1];
        v12[-1].n128_u64[0] = a5.n128_u64[0];
        v12[-1].n128_u64[1] = v40;
        if (v41 < v44)
        {
LABEL_73:
          std::__introsort<std::_ClassicAlgPolicy,md::MuninRoadLabeler::debugDrawZData(md::DebugConsoleMapRect *)::$_0 &,gm::Range<double> *,false>(a1, &v12[-1], a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v51 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabeler::debugDrawZData(md::DebugConsoleMapRect *)::$_0 &,gm::Range<double> *>(a1, v12 - 1, a5);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninRoadLabeler::debugDrawZData(md::DebugConsoleMapRect *)::$_0 &,gm::Range<double> *>(v12, a2, v52))
        {
          if (v51)
            continue;
          goto LABEL_73;
        }
        a2 = v12 - 1;
        if (!v51)
          goto LABEL_1;
        return a5.n128_f64[0];
    }
  }
}

  v8 = a2;
  v208 = a2 - 32;
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = v8 - v9;
    v11 = (uint64_t)(v8 - v9) >> 5;
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v87 = *(_DWORD *)(a2 - 16);
        v88 = *(_DWORD *)(a1 + 16);
        if (v87 < v88 || (v87 == v88 ? (v89 = *(float *)(a2 - 12) < *(float *)(a1 + 20)) : (v89 = 0), v89))
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(a1, v208);
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *>(a1, a1 + 32, v208);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *>(a1, a1 + 32, a1 + 64, v208);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *,0>(a1, a1 + 32, a1 + 64, a1 + 96, v208);
        return;
      default:
        if (v10 <= 767)
        {
          v90 = (unint64_t *)(a1 + 32);
          v92 = a1 == v8 || v90 == (unint64_t *)v8;
          if ((a4 & 1) != 0)
          {
            if (v92)
              return;
            v93 = 0;
            v94 = (unint64_t *)a1;
            while (1)
            {
              v95 = v94;
              v94 = v90;
              v96 = *((_DWORD *)v95 + 12);
              v97 = *((_DWORD *)v95 + 4);
              if (v96 < v97)
                break;
              if (v96 == v97 && *((float *)v95 + 13) < *((float *)v95 + 5))
                break;
LABEL_182:
              v90 = v94 + 4;
              v93 += 32;
              if (v94 + 4 == (unint64_t *)a2)
                return;
            }
            v99 = *((unsigned __int8 *)v95 + 40);
            if (*((_BYTE *)v95 + 40))
            {
              v4 = *v94;
              *v94 = 0;
              v96 = *((_DWORD *)v95 + 12);
              v100 = 1;
            }
            else
            {
              v100 = 0;
              v4 &= 0xFFFFFFFFFFFFFF00;
            }
            v101 = *((float *)v95 + 13);
            v102 = v95[7];
            for (i = v93; ; i -= 32)
            {
              v104 = a1;
              v105 = (uint64_t *)(a1 + i);
              if (*((unsigned __int8 *)v105 + 40) == *((unsigned __int8 *)v105 + 8))
              {
                if (*((_BYTE *)v105 + 40))
                {
                  v106 = *v105;
                  *v105 = 0;
                  v107 = (void *)v105[4];
                  v105[4] = v106;

                }
              }
              else if (*((_BYTE *)v105 + 40))
              {

                *((_BYTE *)v105 + 40) = 0;
              }
              else
              {
                v108 = *v105;
                *v105 = 0;
                v105[4] = v108;
                *((_BYTE *)v105 + 40) = 1;
              }
              v109 = v104 + i;
              *(_OWORD *)(v104 + i + 48) = *(_OWORD *)(v104 + i + 16);
              if (!i)
                break;
              v110 = *(_DWORD *)(v109 - 16);
              if (v96 >= v110)
              {
                v111 = v104 + i;
                if (v96 != v110 || v101 >= *(float *)(v104 + i - 12))
                {
                  v113 = (unsigned int *)(v111 + 16);
                  goto LABEL_208;
                }
              }
              a1 = v104;
            }
            v111 = v104;
            v113 = (unsigned int *)(v109 + 16);
LABEL_208:
            if (*(unsigned __int8 *)(v111 + 8) == v100)
            {
              if (*(_BYTE *)(v111 + 8))
              {
                v114 = *(id *)v111;
                *(_QWORD *)v111 = v4;

LABEL_214:
                v4 = 0;
              }
            }
            else
            {
              if (!*(_BYTE *)(v111 + 8))
              {
                *(_QWORD *)v111 = v4;
                *(_BYTE *)(v111 + 8) = 1;
                goto LABEL_214;
              }

              *(_BYTE *)(v111 + 8) = 0;
            }
            *v113 = v96;
            *(float *)(v111 + 20) = v101;
            *(_QWORD *)(v111 + 24) = v102;
            if (v99)

            a1 = v104;
            goto LABEL_182;
          }
          if (v92)
            return;
          for (j = a1 + 48; ; j += 32)
          {
            v182 = a1;
            a1 = (uint64_t)v90;
            v183 = *(_DWORD *)(v182 + 48);
            v184 = *(_DWORD *)(v182 + 16);
            if (v183 < v184)
              break;
            if (v183 == v184 && *(float *)(v182 + 52) < *(float *)(v182 + 20))
              break;
LABEL_350:
            v90 = (unint64_t *)(a1 + 32);
            if (a1 + 32 == a2)
              return;
          }
          v186 = *(unsigned __int8 *)(v182 + 40);
          if (*(_BYTE *)(v182 + 40))
          {
            v5 = *(_QWORD *)a1;
            *(_QWORD *)a1 = 0;
            v183 = *(_DWORD *)(v182 + 48);
            v187 = 1;
          }
          else
          {
            v187 = 0;
            v5 &= 0xFFFFFFFFFFFFFF00;
          }
          v188 = *(float *)(v182 + 52);
          v189 = *(_QWORD *)(v182 + 56);
          v190 = (_OWORD *)j;
          do
          {
            v191 = v190;
            v192 = *((unsigned __int8 *)v190 - 8);
            if (v192 == *((unsigned __int8 *)v191 - 40))
            {
              if (v192)
              {
                v193 = *((_QWORD *)v191 - 6);
                *((_QWORD *)v191 - 6) = 0;
                v194 = (void *)*((_QWORD *)v191 - 2);
                *((_QWORD *)v191 - 2) = v193;

              }
            }
            else if (v192)
            {

              *((_BYTE *)v191 - 8) = 0;
            }
            else
            {
              v195 = *((_QWORD *)v191 - 6);
              *((_QWORD *)v191 - 6) = 0;
              *((_QWORD *)v191 - 2) = v195;
              *((_BYTE *)v191 - 8) = 1;
            }
            v190 = v191 - 2;
            *v191 = *(v191 - 2);
            v196 = *((_DWORD *)v191 - 16);
          }
          while (v183 < v196 || v183 == v196 && v188 < *((float *)v191 - 15));
          if (*((unsigned __int8 *)v191 - 40) == v187)
          {
            if (!*((_BYTE *)v191 - 40))
              goto LABEL_379;
            v198 = (void *)*((_QWORD *)v191 - 6);
            *((_QWORD *)v191 - 6) = v5;

          }
          else
          {
            if (*((_BYTE *)v191 - 40))
            {

              *((_BYTE *)v191 - 40) = 0;
              goto LABEL_379;
            }
            *((_QWORD *)v191 - 6) = v5;
            *((_BYTE *)v191 - 40) = 1;
          }
          v5 = 0;
LABEL_379:
          *((_DWORD *)v191 - 8) = v183;
          *((float *)v191 - 7) = v188;
          *((_QWORD *)v191 - 3) = v189;
          if (v186)

          goto LABEL_350;
        }
        if (!a3)
        {
          if (a1 == v8)
            return;
          v115 = (unint64_t)(v11 - 2) >> 1;
          v116 = v115;
          while (1)
          {
            v117 = v116;
            if (v115 < v116)
              goto LABEL_219;
            v118 = (2 * v116) | 1;
            v119 = a1 + 32 * v118;
            if (2 * v117 + 2 < v11)
            {
              v120 = *(_DWORD *)(v119 + 16);
              v121 = *(_DWORD *)(v119 + 48);
              if (v120 < v121
                || (v120 == v121 ? (v122 = *(float *)(v119 + 20) < *(float *)(v119 + 52)) : (v122 = 0), v122))
              {
                v119 += 32;
                v118 = 2 * v117 + 2;
              }
            }
            v123 = a1 + 32 * v117;
            v124 = *(_DWORD *)(v119 + 16);
            v125 = *(_DWORD *)(v123 + 16);
            if (v124 < v125)
              goto LABEL_219;
            v126 = *(float *)(v123 + 20);
            if (v124 == v125 && *(float *)(v119 + 20) < v126)
              goto LABEL_219;
            v128 = *(unsigned __int8 *)(v123 + 8);
            if (*(_BYTE *)(v123 + 8))
            {
              v204 = *(id *)v123;
              *(_QWORD *)v123 = 0;
              v207 = 1;
            }
            else
            {
              v207 = 0;
              v204 = 0;
            }
            v209 = *(_QWORD *)(a1 + 32 * v117 + 24);
            do
            {
              v129 = v119;
              if (*(unsigned __int8 *)(v123 + 8) == *(unsigned __int8 *)(v119 + 8))
              {
                if (*(_BYTE *)(v123 + 8))
                {
                  v130 = *(_QWORD *)v119;
                  *(_QWORD *)v129 = 0;
                  v131 = *(id *)v123;
                  *(_QWORD *)v123 = v130;

                }
              }
              else if (*(_BYTE *)(v123 + 8))
              {

                *(_BYTE *)(v123 + 8) = 0;
              }
              else
              {
                v132 = *(_QWORD *)v119;
                *(_QWORD *)v129 = 0;
                *(_QWORD *)v123 = v132;
                *(_BYTE *)(v123 + 8) = 1;
              }
              *(_OWORD *)(v123 + 16) = *(_OWORD *)(v129 + 16);
              if (v115 < v118)
                break;
              v133 = 2 * v118;
              v118 = (2 * v118) | 1;
              v119 = a1 + 32 * v118;
              v134 = v133 + 2;
              if (v134 < v11)
              {
                v135 = *(_DWORD *)(v119 + 16);
                v136 = *(_DWORD *)(v119 + 48);
                if (v135 < v136
                  || (v135 == v136 ? (v137 = *(float *)(v119 + 20) < *(float *)(v119 + 52)) : (v137 = 0), v137))
                {
                  v119 += 32;
                  v118 = v134;
                }
              }
              v138 = *(_DWORD *)(v119 + 16);
              if (v138 < v125)
                break;
              v139 = v138 == v125 && *(float *)(v119 + 20) < v126;
              v123 = v129;
            }
            while (!v139);
            if (*(unsigned __int8 *)(v129 + 8) == v207)
            {
              if (!*(_BYTE *)(v129 + 8))
                goto LABEL_264;
              v140 = *(id *)v129;
              *(_QWORD *)v129 = v204;

            }
            else
            {
              if (*(_BYTE *)(v129 + 8))
              {

                *(_BYTE *)(v129 + 8) = 0;
LABEL_264:
                v141 = v204;
                goto LABEL_267;
              }
              *(_QWORD *)v129 = v204;
              *(_BYTE *)(v129 + 8) = 1;
            }
            v141 = 0;
LABEL_267:
            *(_DWORD *)(v129 + 16) = v125;
            *(float *)(v129 + 20) = v126;
            *(_QWORD *)(v129 + 24) = v209;
            if (v128)

LABEL_219:
            v116 = v117 - 1;
            if (!v117)
            {
              v142 = (unint64_t)v10 >> 5;
              while (1)
              {
                v143 = *(unsigned __int8 *)(a1 + 8);
                if (*(_BYTE *)(a1 + 8))
                {
                  v144 = *(void **)a1;
                  *(_QWORD *)a1 = 0;
                  v145 = 1;
                }
                else
                {
                  v145 = 0;
                  v144 = 0;
                }
                v146 = 0;
                v213 = *(_OWORD *)(a1 + 16);
                v147 = a1;
                do
                {
                  v149 = v147;
                  v147 += 32 * v146 + 32;
                  v150 = 2 * v146;
                  v146 = (2 * v146) | 1;
                  v151 = v150 + 2;
                  if (v151 < v142)
                  {
                    v152 = *(_DWORD *)(v147 + 16);
                    v153 = *(_DWORD *)(v147 + 48);
                    if (v152 < v153
                      || (v152 == v153 ? (v154 = *(float *)(v147 + 20) < *(float *)(v147 + 52)) : (v154 = 0), v154))
                    {
                      v147 += 32;
                      v146 = v151;
                    }
                  }
                  if (*(unsigned __int8 *)(v149 + 8) == *(unsigned __int8 *)(v147 + 8))
                  {
                    if (*(_BYTE *)(v149 + 8))
                    {
                      v155 = *(id *)v147;
                      *(_QWORD *)v147 = 0;
                      v156 = *(id *)v149;
                      *(_QWORD *)v149 = v155;

                    }
                  }
                  else if (*(_BYTE *)(v149 + 8))
                  {

                    *(_BYTE *)(v149 + 8) = 0;
                  }
                  else
                  {
                    v148 = *(id *)v147;
                    *(_QWORD *)v147 = 0;
                    *(_QWORD *)v149 = v148;
                    *(_BYTE *)(v149 + 8) = 1;
                  }
                  *(_OWORD *)(v149 + 16) = *(_OWORD *)(v147 + 16);
                }
                while (v146 <= (uint64_t)((unint64_t)(v142 - 2) >> 1));
                v157 = (_OWORD *)(v147 + 16);
                v158 = (void **)(a2 - 32);
                v159 = *(unsigned __int8 *)(v147 + 8);
                if (v147 == a2 - 32)
                {
                  if (v159 == v145)
                  {
                    if (*(_BYTE *)(v147 + 8))
                    {
                      v162 = *(id *)v147;
                      *(_QWORD *)v147 = v144;

                      goto LABEL_339;
                    }
                  }
                  else if (*(_BYTE *)(v147 + 8))
                  {

                    *(_BYTE *)(v147 + 8) = 0;
                  }
                  else
                  {
                    *(_QWORD *)v147 = v144;
                    *(_BYTE *)(v147 + 8) = 1;
LABEL_339:
                    v144 = 0;
                  }
                  *v157 = v213;
                  goto LABEL_346;
                }
                if (v159 == *(unsigned __int8 *)(a2 - 24))
                {
                  if (*(_BYTE *)(v147 + 8))
                  {
                    v160 = *v158;
                    *v158 = 0;
                    v161 = *(id *)v147;
                    *(_QWORD *)v147 = v160;

                  }
                }
                else if (*(_BYTE *)(v147 + 8))
                {

                  *(_BYTE *)(v147 + 8) = 0;
                }
                else
                {
                  v163 = *v158;
                  *v158 = 0;
                  *(_QWORD *)v147 = v163;
                  *(_BYTE *)(v147 + 8) = 1;
                }
                *v157 = *(_OWORD *)(a2 - 16);
                if (*(unsigned __int8 *)(a2 - 24) == v145)
                {
                  if (*(_BYTE *)(a2 - 24))
                  {
                    v164 = *v158;
                    *v158 = v144;

LABEL_308:
                    v144 = 0;
                  }
                }
                else
                {
                  if (!*(_BYTE *)(a2 - 24))
                  {
                    *(_QWORD *)(a2 - 32) = v144;
                    *(_BYTE *)(a2 - 24) = 1;
                    goto LABEL_308;
                  }

                  *(_BYTE *)(a2 - 24) = 0;
                }
                *(_OWORD *)(a2 - 16) = v213;
                v165 = v147 + 32 - a1;
                if (v165 >= 33)
                {
                  v166 = (((unint64_t)v165 >> 5) - 2) >> 1;
                  v167 = a1 + 32 * v166;
                  v168 = *(_DWORD *)(v167 + 16);
                  v169 = *(_DWORD *)v157;
                  if (v168 < *(_DWORD *)v157
                    || (v168 == v169 ? (v170 = *(float *)(v167 + 20) < *(float *)(v147 + 20)) : (v170 = 0), v170))
                  {
                    v171 = *(unsigned __int8 *)(v147 + 8);
                    if (*(_BYTE *)(v147 + 8))
                    {
                      v205 = *(id *)v147;
                      *(_QWORD *)v147 = 0;
                      v199 = 1;
                    }
                    else
                    {
                      v199 = 0;
                      v205 = 0;
                    }
                    v172 = *(float *)(v147 + 20);
                    v201 = *(_QWORD *)(v147 + 24);
                    v211 = v171;
                    while (1)
                    {
                      v173 = v167;
                      if (v171 == *(unsigned __int8 *)(v167 + 8))
                      {
                        if (v171)
                        {
                          v174 = *(_QWORD *)v167;
                          *(_QWORD *)v173 = 0;
                          v175 = *(id *)v147;
                          *(_QWORD *)v147 = v174;

                        }
                      }
                      else if (v171)
                      {

                        *(_BYTE *)(v147 + 8) = 0;
                      }
                      else
                      {
                        v176 = *(_QWORD *)v167;
                        *(_QWORD *)v173 = 0;
                        *(_QWORD *)v147 = v176;
                        *(_BYTE *)(v147 + 8) = 1;
                      }
                      *(_OWORD *)(v147 + 16) = *(_OWORD *)(v173 + 16);
                      if (!v166)
                        break;
                      v166 = (v166 - 1) >> 1;
                      v167 = a1 + 32 * v166;
                      v177 = *(_DWORD *)(v167 + 16);
                      if (v177 >= v169 && (v177 != v169 || *(float *)(v167 + 20) >= v172))
                        break;
                      v171 = *(unsigned __int8 *)(v173 + 8);
                      v147 = v173;
                    }
                    if (*(unsigned __int8 *)(v173 + 8) == v199)
                    {
                      if (*(_BYTE *)(v173 + 8))
                      {
                        v179 = *(id *)v173;
                        *(_QWORD *)v173 = v205;

                        goto LABEL_343;
                      }
                      v180 = v205;
                    }
                    else if (*(_BYTE *)(v173 + 8))
                    {

                      *(_BYTE *)(v173 + 8) = 0;
                      v180 = v205;
                    }
                    else
                    {
                      *(_QWORD *)v173 = v205;
                      *(_BYTE *)(v173 + 8) = 1;
LABEL_343:
                      v180 = 0;
                    }
                    *(_DWORD *)(v173 + 16) = v169;
                    *(float *)(v173 + 20) = v172;
                    *(_QWORD *)(v173 + 24) = v201;
                    if (v211)

                  }
                }
LABEL_346:
                if (v143)

                a2 = (unint64_t)v158;
                v37 = v142-- <= 2;
                if (v37)
                  return;
              }
            }
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = a1 + 32 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 <= 0x1000)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *>(v13, a1, v208);
          goto LABEL_24;
        }
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *>(a1, v13, v208);
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *>(a1 + 32, 32 * v12 + a1 - 32, a2 - 64);
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *>(a1 + 64, a1 + 32 + 32 * v12, a2 - 96);
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *>(32 * v12 + a1 - 32, v13, a1 + 32 + 32 * v12);
        v14 = *(unsigned __int8 *)(a1 + 8);
        if (*(_BYTE *)(a1 + 8))
        {
          v15 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          v16 = (_OWORD *)(a1 + 16);
          v212 = *(_OWORD *)(a1 + 16);
          v17 = a1;
          v18 = (unsigned __int8 *)(v13 + 8);
          if (*(_BYTE *)(v13 + 8))
          {
            v19 = *(id *)v13;
            *(_QWORD *)v13 = 0;
            v20 = *(void **)v17;
            *(_QWORD *)v17 = v19;

          }
          else
          {
            *(_BYTE *)(v17 + 8) = 0;
          }
          v21 = 1;
        }
        else
        {
          v16 = (_OWORD *)(a1 + 16);
          v212 = *(_OWORD *)(a1 + 16);
          v17 = a1;
          v18 = (unsigned __int8 *)(v13 + 8);
          if (!*(_BYTE *)(v13 + 8))
          {
            v26 = v17 + 32 * v12;
            *v16 = *(_OWORD *)(v26 + 16);
            *(_OWORD *)(v26 + 16) = v212;
            a1 = v17;
            v8 = a2;
            goto LABEL_24;
          }
          v15 = 0;
          v21 = 0;
          v22 = *(id *)v13;
          *(_QWORD *)v13 = 0;
          *(_QWORD *)v17 = v22;
          *(_BYTE *)(v17 + 8) = 1;
        }
        v23 = *v18;
        v24 = v17 + 32 * v12;
        *v16 = *(_OWORD *)(v24 + 16);
        a1 = v17;
        if (v23 == v21)
        {
          v8 = a2;
          if (!v23)
            goto LABEL_21;
          v25 = *(id *)v13;
          *(_QWORD *)v13 = v15;

        }
        else
        {
          v8 = a2;
          if (v23)
          {

            *(_BYTE *)(v13 + 8) = 0;
            goto LABEL_21;
          }
          *(_QWORD *)v13 = v15;
          *(_BYTE *)(v13 + 8) = 1;
        }
        v15 = 0;
LABEL_21:
        *(_OWORD *)(v24 + 16) = v212;
        if (v14)

LABEL_24:
        v27 = a3 - 1;
        if ((a4 & 1) == 0)
        {
          v28 = *(_DWORD *)(a1 - 16);
          v29 = *(_DWORD *)(a1 + 16);
          if (v28 >= v29)
          {
            v30 = *(float *)(a1 + 20);
            if (v28 != v29 || *(float *)(a1 - 12) >= v30)
            {
              v61 = *(unsigned __int8 *)(a1 + 8);
              if (*(_BYTE *)(a1 + 8))
              {
                v203 = *(void **)a1;
                *(_QWORD *)a1 = 0;
                v5 = 1;
              }
              else
              {
                v203 = 0;
                v5 = 0;
              }
              v62 = *(_DWORD *)(v8 - 16);
              if (v29 < v62 || v29 == v62 && v30 < *(float *)(v8 - 12))
              {
                v63 = a1 + 32;
                do
                {
                  v9 = v63;
                  v64 = *(_DWORD *)(v63 + 16);
                  if (v29 < v64)
                    break;
                  v65 = *(float *)(v63 + 20);
                  v63 += 32;
                }
                while (v29 != v64 || v30 >= v65);
              }
              else
              {
                v80 = a1 + 32;
                do
                {
                  v9 = v80;
                  if (v80 >= v8)
                    break;
                  v81 = *(_DWORD *)(v80 + 16);
                  if (v29 < v81)
                    break;
                  v82 = *(float *)(v80 + 20);
                  v80 += 32;
                }
                while (v29 != v81 || v30 >= v82);
              }
              v67 = v27;
              v68 = v8;
              if (v9 < v8)
              {
                for (k = a2 - 48; v29 < v62 || v29 == v62 && v30 < *(float *)(k + 36); k -= 32)
                {
                  v70 = *(_DWORD *)k;
                  v62 = v70;
                }
                v68 = k + 16;
              }
              v4 = *(_QWORD *)(a1 + 24);
              while (v9 < v68)
              {
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(v9, v68);
                v71 = v9 + 32;
                do
                {
                  v9 = v71;
                  v72 = *(_DWORD *)(v71 + 16);
                  if (v29 < v72)
                    break;
                  v73 = *(float *)(v71 + 20);
                  v71 += 32;
                }
                while (v29 != v72 || v30 >= v73);
                do
                {
                  do
                  {
                    v68 -= 32;
                    v75 = *(_DWORD *)(v68 + 16);
                  }
                  while (v29 < v75);
                }
                while (v29 == v75 && v30 < *(float *)(v68 + 20));
              }
              v77 = (void **)(v9 - 32);
              a3 = v67;
              if (v9 - 32 != a1)
              {
                if (*(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(v9 - 24))
                {
                  if (*(_BYTE *)(a1 + 8))
                  {
                    v78 = *v77;
                    *v77 = 0;
                    v79 = *(void **)a1;
                    *(_QWORD *)a1 = v78;

                  }
                }
                else if (*(_BYTE *)(a1 + 8))
                {

                  *(_BYTE *)(a1 + 8) = 0;
                }
                else
                {
                  v84 = *v77;
                  *v77 = 0;
                  *(_QWORD *)a1 = v84;
                  *(_BYTE *)(a1 + 8) = 1;
                }
                *(_OWORD *)(a1 + 16) = *(_OWORD *)(v9 - 16);
              }
              if (*(unsigned __int8 *)(v9 - 24) == (_DWORD)v5)
              {
                if (*(_BYTE *)(v9 - 24))
                {
                  v85 = *v77;
                  *v77 = v203;

LABEL_155:
                  v86 = 0;
                  goto LABEL_156;
                }
              }
              else
              {
                if (!*(_BYTE *)(v9 - 24))
                {
                  *(_QWORD *)(v9 - 32) = v203;
                  *(_BYTE *)(v9 - 24) = 1;
                  goto LABEL_155;
                }

                *(_BYTE *)(v9 - 24) = 0;
              }
              v86 = v203;
LABEL_156:
              a4 = 0;
              *(_DWORD *)(v9 - 16) = v29;
              *(float *)(v9 - 12) = v30;
              *(_QWORD *)(v9 - 8) = v4;
              if (v61)
              {

                a4 = 0;
              }
              continue;
            }
          }
        }
        v31 = *(unsigned __int8 *)(a1 + 8);
        v206 = v27;
        if (*(_BYTE *)(a1 + 8))
        {
          v32 = *(id *)a1;
          *(_QWORD *)a1 = 0;
          v5 = 1;
        }
        else
        {
          v32 = 0;
          v5 = 0;
        }
        v4 = a1 + 16;
        v33 = *(_DWORD *)(a1 + 16);
        v34 = *(float *)(a1 + 20);
        v202 = *(_QWORD *)(a1 + 24);
        for (m = a1 + 32; ; m += 32)
        {
          v36 = *(_DWORD *)(m + 16);
          if (v36 >= v33)
          {
            v37 = v36 == v33 && *(float *)(m + 20) < v34;
            if (!v37)
              break;
          }
        }
        v38 = a2 - 32;
        if (m - 32 == a1)
        {
          v39 = a2;
          if (m < a2)
          {
            v43 = a2 - 32;
            do
            {
              v39 = v43;
              v44 = *(_DWORD *)(v43 + 16);
              if (v44 < v33)
                break;
              v45 = *(float *)(v43 + 20);
              v43 -= 32;
              v46 = v45 < v34 && v44 == v33;
              v47 = v46 || m >= v39;
            }
            while (!v47);
          }
        }
        else
        {
          do
          {
            v39 = v38;
            v40 = *(_DWORD *)(v38 + 16);
            if (v40 < v33)
              break;
            v41 = *(float *)(v38 + 20);
            v38 -= 32;
          }
          while (v40 != v33 || v41 >= v34);
        }
        v9 = m;
        if (m < v39)
        {
          v9 = m;
          v48 = v39;
          do
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(v9, v48);
            do
            {
              do
              {
                v9 += 32;
                v49 = *(_DWORD *)(v9 + 16);
              }
              while (v49 < v33);
            }
            while (v49 == v33 && *(float *)(v9 + 20) < v34);
            v51 = v48 - 32;
            do
            {
              v48 = v51;
              v52 = *(_DWORD *)(v51 + 16);
              if (v52 < v33)
                break;
              v53 = *(float *)(v51 + 20);
              v51 -= 32;
            }
            while (v52 != v33 || v53 >= v34);
          }
          while (v9 < v48);
        }
        v55 = (void **)(v9 - 32);
        if (v9 - 32 != a1)
        {
          if (*(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(v9 - 24))
          {
            if (*(_BYTE *)(a1 + 8))
            {
              v56 = *v55;
              *v55 = 0;
              v57 = *(id *)a1;
              *(_QWORD *)a1 = v56;

            }
          }
          else if (*(_BYTE *)(a1 + 8))
          {

            *(_BYTE *)(a1 + 8) = 0;
          }
          else
          {
            v58 = *v55;
            *v55 = 0;
            *(_QWORD *)a1 = v58;
            *(_BYTE *)(a1 + 8) = 1;
          }
          *(_OWORD *)v4 = *(_OWORD *)(v9 - 16);
        }
        if (*(unsigned __int8 *)(v9 - 24) == (_DWORD)v5)
        {
          if (*(_BYTE *)(v9 - 24))
          {
            v59 = *v55;
            *v55 = v32;

            goto LABEL_88;
          }
        }
        else if (*(_BYTE *)(v9 - 24))
        {

          *(_BYTE *)(v9 - 24) = 0;
        }
        else
        {
          *(_QWORD *)(v9 - 32) = v32;
          *(_BYTE *)(v9 - 24) = 1;
LABEL_88:
          v32 = 0;
        }
        *(_DWORD *)(v9 - 16) = v33;
        *(float *)(v9 - 12) = v34;
        *(_QWORD *)(v9 - 8) = v202;
        if (v31)

        v47 = m >= v39;
        v8 = a2;
        a3 = v206;
        if (!v47)
        {
LABEL_95:
          std::__introsort<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *,false>(a1, v9 - 32, v206, a4 & 1);
          a4 = 0;
          continue;
        }
        v60 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *>(a1, v9 - 32);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *>(v9, a2))
        {
          if ((v60 & 1) != 0)
            continue;
          goto LABEL_95;
        }
        a2 = v9 - 32;
        if ((v60 & 1) == 0)
          goto LABEL_1;
        return;
    }
  }
}

  v7 = a2;
  v106 = a2 - 1;
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)v7 - (char *)v8;
    v10 = v7 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v52 = *v8;
        if (*v106 < *v8)
        {
          *v8 = 0;
          v53 = *v106;
          *v106 = 0;
          v54 = *v8;
          *v8 = v53;

          v55 = *v106;
          *v106 = v52;

        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(v8, v8 + 1, v106);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(v8, v8 + 1, v8 + 2, v106);
        return;
      case 5:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(v8, v8 + 1, v8 + 2, v8 + 3, v106);
        return;
      default:
        if (v9 <= 191)
        {
          v56 = v8 + 1;
          v58 = v8 == v7 || v56 == v7;
          if ((a4 & 1) != 0)
          {
            if (!v58)
            {
              v59 = 0;
              v60 = v8;
              do
              {
                v63 = *v60;
                v64 = v60[1];
                v60 = v56;
                if (v64 < v63)
                {
                  *v56 = 0;
                  v65 = v59;
                  do
                  {
                    v66 = (void **)((char *)a1 + v65);
                    v67 = *(void **)((char *)a1 + v65 + 8);
                    *v66 = 0;
                    v66[1] = v63;

                    if (!v65)
                    {
                      v61 = a1;
                      goto LABEL_68;
                    }
                    v63 = (void *)*(v66 - 1);
                    v65 -= 8;
                  }
                  while (v64 < v63);
                  v61 = (void **)((char *)a1 + v65 + 8);
LABEL_68:
                  v62 = *v61;
                  *v61 = v64;

                }
                v56 = v60 + 1;
                v59 += 8;
              }
              while (v60 + 1 != a2);
            }
          }
          else if (!v58)
          {
            do
            {
              v100 = *a1;
              v101 = a1[1];
              a1 = v56;
              if (v101 < v100)
              {
                *v56 = 0;
                v102 = v56;
                do
                {
                  v103 = v102;
                  *--v102 = 0;
                  v104 = *v103;
                  *v103 = v100;

                  v100 = *(v103 - 2);
                }
                while (v101 < v100);
                v105 = *v102;
                *v102 = v101;

              }
              v56 = a1 + 1;
            }
            while (a1 + 1 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 == v7)
            return;
          v68 = (unint64_t)(v10 - 2) >> 1;
          v69 = v68;
          do
          {
            v71 = v69;
            if (v68 >= v69)
            {
              v72 = (2 * v69) | 1;
              v73 = &a1[v72];
              if (2 * v71 + 2 >= v10)
              {
                v74 = *v73;
              }
              else
              {
                v74 = *v73;
                if (*v73 < v73[1])
                {
                  v74 = v73[1];
                  ++v73;
                  v72 = 2 * v71 + 2;
                }
              }
              v75 = &a1[v71];
              v76 = *v75;
              if (v74 >= *v75)
              {
                *v75 = 0;
                v77 = *v73;
                do
                {
                  v78 = v73;
                  *v73 = 0;
                  v79 = *v75;
                  *v75 = v77;

                  if (v68 < v72)
                    break;
                  v73 = &a1[(2 * v72) | 1];
                  if (2 * v72 + 2 < v10)
                  {
                    v77 = *v73;
                    if (*v73 >= v73[1])
                    {
                      v72 = (2 * v72) | 1;
                    }
                    else
                    {
                      v77 = v73[1];
                      ++v73;
                      v72 = 2 * v72 + 2;
                    }
                  }
                  else
                  {
                    v77 = *v73;
                    v72 = (2 * v72) | 1;
                  }
                  v75 = v78;
                }
                while (v77 >= v76);
                v70 = *v78;
                *v78 = v76;

              }
            }
            v69 = v71 - 1;
          }
          while (v71);
          v80 = (unint64_t)v9 >> 3;
          while (2)
          {
            if (v80 >= 2)
            {
              v83 = 0;
              v84 = *a1;
              *a1 = 0;
              v85 = a1;
              do
              {
                v87 = &v85[v83 + 1];
                if (2 * v83 + 2 < v80)
                {
                  v86 = *v87;
                  if (*v87 >= v85[v83 + 2])
                  {
                    v83 = (2 * v83) | 1;
                  }
                  else
                  {
                    v86 = v85[v83 + 2];
                    v87 = &v85[v83 + 2];
                    v83 = 2 * v83 + 2;
                  }
                }
                else
                {
                  v86 = *v87;
                  v83 = (2 * v83) | 1;
                }
                *v87 = 0;
                v88 = *v85;
                *v85 = v86;

                v85 = v87;
              }
              while (v83 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
              v89 = a2 - 1;
              if (v87 == a2 - 1)
              {
                v81 = *v87;
                *v87 = v84;
                goto LABEL_96;
              }
              v90 = *v89;
              *v89 = 0;
              v91 = *v87;
              *v87 = v90;

              v92 = *v89;
              *v89 = v84;

              v93 = (char *)v87 - (char *)a1 + 8;
              if (v93 >= 9)
              {
                v94 = (((unint64_t)v93 >> 3) - 2) >> 1;
                v95 = &a1[v94];
                v96 = *v87;
                if (*v95 < *v87)
                {
                  *v87 = 0;
                  v97 = *v95;
                  do
                  {
                    v98 = v95;
                    *v95 = 0;
                    v99 = *v87;
                    *v87 = v97;

                    if (!v94)
                      break;
                    v94 = (v94 - 1) >> 1;
                    v95 = &a1[v94];
                    v97 = *v95;
                    v87 = v98;
                  }
                  while (*v95 < v96);
                  v81 = *v98;
                  *v98 = v96;
LABEL_96:

                }
              }
            }
            --a2;
            if ((unint64_t)v80-- <= 2)
              return;
            continue;
          }
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(v12, v8, v106);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(v8, v12, v106);
          v13 = v11;
          v14 = &v8[v13];
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(v8 + 1, &v8[v13 - 1], a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(v8 + 2, &v8[v13 + 1], a2 - 3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(&v8[v13 - 1], v12, &v8[v13 + 1]);
          v15 = *v8;
          *v8 = 0;
          v16 = *v14;
          *v14 = 0;
          v17 = *v8;
          *v8 = v16;

          v18 = *v14;
          *v14 = v15;

        }
        --a3;
        v19 = *v8;
        if ((a4 & 1) == 0 && *(v8 - 1) >= v19)
        {
          *v8 = 0;
          if (v19 >= *v106)
          {
            v39 = v8 + 1;
            do
            {
              v8 = v39;
              if (v39 >= v7)
                break;
              ++v39;
            }
            while (v19 >= *v8);
          }
          else
          {
            do
            {
              v38 = v8[1];
              ++v8;
            }
            while (v19 >= v38);
          }
          v40 = v7;
          if (v8 < v7)
          {
            v40 = v7;
            do
              v41 = (unint64_t)*--v40;
            while ((unint64_t)v19 < v41);
          }
          if (v8 < v40)
          {
            v42 = *v8;
            do
            {
              *v8 = 0;
              v43 = *v40;
              *v40 = 0;
              v44 = *v8;
              *v8 = v43;

              v45 = *v40;
              *v40 = v42;

              do
              {
                v46 = v8[1];
                ++v8;
                v42 = v46;
              }
              while (v19 >= v46);
              do
                v47 = (unint64_t)*--v40;
              while ((unint64_t)v19 < v47);
            }
            while (v8 < v40);
          }
          v48 = v8 - 1;
          if (v8 - 1 != a1)
          {
            v49 = *v48;
            *v48 = 0;
            v50 = *a1;
            *a1 = v49;

          }
          v51 = *v48;
          *v48 = v19;

          a4 = 0;
          continue;
        }
        *v8 = 0;
        v20 = v8;
        do
        {
          v21 = v20;
          v23 = (unint64_t)v20[1];
          ++v20;
          v22 = (void *)v23;
        }
        while (v23 < (unint64_t)v19);
        if (v21 == a1)
        {
          v7 = a2;
          do
          {
            if (v20 >= v7)
              break;
            v25 = (unint64_t)*--v7;
          }
          while (v25 >= (unint64_t)v19);
        }
        else
        {
          do
            v24 = (unint64_t)*--v7;
          while (v24 >= (unint64_t)v19);
        }
        if (v20 < v7)
        {
          v26 = v20;
          v27 = v7;
          do
          {
            *v26 = 0;
            v28 = *v27;
            *v27 = 0;
            v29 = *v26;
            *v26 = v28;

            v30 = *v27;
            *v27 = v22;

            do
            {
              v21 = v26;
              v31 = (unint64_t)v26[1];
              ++v26;
              v22 = (void *)v31;
            }
            while (v31 < (unint64_t)v19);
            do
              v32 = (unint64_t)*--v27;
            while (v32 >= (unint64_t)v19);
          }
          while (v26 < v27);
        }
        if (v21 != a1)
        {
          v33 = *v21;
          *v21 = 0;
          v34 = *a1;
          *a1 = v33;

        }
        v35 = *v21;
        *v21 = v19;

        v36 = v20 >= v7;
        v7 = a2;
        if (!v36)
        {
LABEL_30:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*,false>(a1, v21, a3, a4 & 1);
          a4 = 0;
          v8 = v21 + 1;
          continue;
        }
        v37 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(a1, v21);
        v8 = v21 + 1;
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(v21 + 1, a2))
        {
          if (v37)
            continue;
          goto LABEL_30;
        }
        a2 = v21;
        if (!v37)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = (__n128 *)((char *)a2 - 24);
  v10 = a2 - 3;
  v11 = &a2[-5].n128_i8[8];
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v12) >> 3);
    switch(v14)
    {
      case 0:
      case 1:
        return a5.n128_f64[0];
      case 2:
        a5.n128_u64[0] = a2[-1].n128_u64[0];
        if (a5.n128_f64[0] < *(double *)(v12 + 8))
          goto LABEL_104;
        return a5.n128_f64[0];
      case 3:
        v92 = (__n128 *)(v12 + 24);
        a5.n128_u64[0] = *(_QWORD *)(v12 + 32);
        v93 = a2[-1].n128_f64[0];
        if (a5.n128_f64[0] >= *(double *)(v12 + 8))
        {
          if (v93 < a5.n128_f64[0])
          {
            a5 = *v92;
            v140 = *(_QWORD *)(v12 + 40);
            v141 = a2[-1].n128_u8[8];
            *v92 = *v9;
            *(_BYTE *)(v12 + 40) = v141;
            a2[-1].n128_u8[8] = v140;
            *v9 = a5;
            a5.n128_u64[0] = *(_QWORD *)(v12 + 32);
            if (a5.n128_f64[0] < *(double *)(v12 + 8))
            {
              v194 = *(_QWORD *)(v12 + 16);
              v171 = *(__n128 *)v12;
              *(__n128 *)v12 = *v92;
              *(_BYTE *)(v12 + 16) = *(_BYTE *)(v12 + 40);
              a5.n128_u64[0] = v171.n128_u64[0];
              *v92 = v171;
              *(_BYTE *)(v12 + 40) = v194;
            }
          }
        }
        else
        {
          if (v93 < a5.n128_f64[0])
          {
LABEL_104:
            v191 = *(_QWORD *)(v12 + 16);
            v168 = *(__n128 *)v12;
            v94 = *v9;
            *(_BYTE *)(v12 + 16) = a2[-1].n128_u8[8];
            *(__n128 *)v12 = v94;
            a5 = v168;
            a2[-1].n128_u8[8] = v191;
LABEL_105:
            *v9 = a5;
            return a5.n128_f64[0];
          }
          v195 = *(_QWORD *)(v12 + 16);
          v172 = *(__n128 *)v12;
          *(__n128 *)v12 = *v92;
          *(_BYTE *)(v12 + 16) = *(_BYTE *)(v12 + 40);
          *v92 = v172;
          *(_BYTE *)(v12 + 40) = v195;
          a5.n128_u64[0] = a2[-1].n128_u64[0];
          if (a5.n128_f64[0] < *(double *)(v12 + 32))
          {
            a5 = *v92;
            v147 = *(_QWORD *)(v12 + 40);
            v148 = a2[-1].n128_u8[8];
            *v92 = *v9;
            *(_BYTE *)(v12 + 40) = v148;
            a2[-1].n128_u8[8] = v147;
            goto LABEL_105;
          }
        }
        return a5.n128_f64[0];
      case 4:
        a5.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::$_0 &,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::RoadEdgeInfo *>((__n128 *)v12, (__n128 *)(v12 + 24), (__n128 *)(v12 + 48), (__n128 *)((char *)a2 - 24), a5).n128_u64[0];
        return a5.n128_f64[0];
      case 5:
        v95 = (__n128 *)(v12 + 24);
        v96 = (__n128 *)(v12 + 48);
        v97 = (__n128 *)(v12 + 72);
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::$_0 &,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::RoadEdgeInfo *>((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a1 + 72), a5);
        a5.n128_u64[0] = a2[-1].n128_u64[0];
        if (a5.n128_f64[0] < *(double *)(a1 + 80))
        {
          a5 = *v97;
          v98 = *(_QWORD *)(a1 + 88);
          v99 = a2[-1].n128_u8[8];
          *v97 = *v9;
          *(_BYTE *)(a1 + 88) = v99;
          a2[-1].n128_u8[8] = v98;
          *v9 = a5;
          a5.n128_u64[0] = *(_QWORD *)(a1 + 80);
          if (a5.n128_f64[0] < *(double *)(a1 + 56))
          {
            v100 = *(_QWORD *)(a1 + 64);
            a5 = *v96;
            *v96 = *v97;
            *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 88);
            *v97 = a5;
            *(_BYTE *)(a1 + 88) = v100;
            a5.n128_u64[0] = *(_QWORD *)(a1 + 56);
            if (a5.n128_f64[0] < *(double *)(a1 + 32))
            {
              v101 = *(_QWORD *)(a1 + 40);
              a5 = *v95;
              *v95 = *v96;
              *(_BYTE *)(a1 + 40) = *(_BYTE *)(a1 + 64);
              *v96 = a5;
              *(_BYTE *)(a1 + 64) = v101;
              a5.n128_u64[0] = *(_QWORD *)(a1 + 32);
              if (a5.n128_f64[0] < *(double *)(a1 + 8))
              {
                v192 = *(_QWORD *)(a1 + 16);
                v169 = *(__n128 *)a1;
                *(__n128 *)a1 = *v95;
                *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 40);
                a5.n128_u64[0] = v169.n128_u64[0];
                *v95 = v169;
                *(_BYTE *)(a1 + 40) = v192;
              }
            }
          }
        }
        return a5.n128_f64[0];
      default:
        if (v13 > 575)
        {
          if (!a3)
          {
            if ((__n128 *)v12 != a2)
            {
              v113 = (unint64_t)(v14 - 2) >> 1;
              v114 = v113;
              do
              {
                if (v113 >= v114)
                {
                  v116 = (2 * v114) | 1;
                  v117 = v12 + 24 * v116;
                  if (2 * v114 + 2 < v14 && *(double *)(v117 + 8) < *(double *)(v117 + 32))
                  {
                    v117 += 24;
                    v116 = 2 * v114 + 2;
                  }
                  v118 = v12 + 24 * v114;
                  v119 = *(double *)(v118 + 8);
                  if (*(double *)(v117 + 8) >= v119)
                  {
                    v120 = *(_QWORD *)v118;
                    v121 = *(_BYTE *)(v118 + 16);
                    do
                    {
                      v122 = v118;
                      v118 = v117;
                      v123 = *(_OWORD *)v117;
                      *(_BYTE *)(v122 + 16) = *(_BYTE *)(v117 + 16);
                      *(_OWORD *)v122 = v123;
                      if (v113 < v116)
                        break;
                      v124 = 2 * v116;
                      v116 = (2 * v116) | 1;
                      v117 = v12 + 24 * v116;
                      v125 = v124 + 2;
                      if (v125 < v14 && *(double *)(v117 + 8) < *(double *)(v117 + 32))
                      {
                        v117 += 24;
                        v116 = v125;
                      }
                    }
                    while (*(double *)(v117 + 8) >= v119);
                    *(_QWORD *)v118 = v120;
                    *(double *)(v118 + 8) = v119;
                    *(_BYTE *)(v118 + 16) = v121;
                  }
                }
                v115 = v114-- <= 0;
              }
              while (!v115);
              v126 = v13 / 0x18uLL;
              do
              {
                v127 = 0;
                v193 = *(_QWORD *)(v12 + 16);
                v170 = *(__n128 *)v12;
                v128 = (__n128 *)v12;
                do
                {
                  v130 = v128;
                  v128 = (__n128 *)((char *)v128 + 24 * v127 + 24);
                  v131 = 2 * v127;
                  v127 = (2 * v127) | 1;
                  v132 = v131 + 2;
                  if (v132 < v126 && v128->n128_f64[1] < v128[2].n128_f64[0])
                  {
                    v128 = (__n128 *)((char *)v128 + 24);
                    v127 = v132;
                  }
                  v129 = *v128;
                  v130[1].n128_u8[0] = v128[1].n128_u8[0];
                  *v130 = v129;
                }
                while (v127 <= (uint64_t)((unint64_t)(v126 - 2) >> 1));
                a2 = (__n128 *)((char *)a2 - 24);
                if (v128 == a2)
                {
                  a5.n128_u64[0] = v170.n128_u64[0];
                  v128[1].n128_u8[0] = v193;
                  *v128 = v170;
                }
                else
                {
                  a5 = *a2;
                  v128[1].n128_u8[0] = a2[1].n128_u8[0];
                  *v128 = a5;
                  a5.n128_u64[0] = v170.n128_u64[0];
                  a2[1].n128_u8[0] = v193;
                  *a2 = v170;
                  v133 = (uint64_t)&v128[1].n128_i64[1] - v12;
                  if (v133 >= 25)
                  {
                    v134 = (v133 / 0x18uLL - 2) >> 1;
                    v135 = v12 + 24 * v134;
                    a5.n128_u64[0] = v128->n128_u64[1];
                    if (*(double *)(v135 + 8) < a5.n128_f64[0])
                    {
                      v136 = v128->n128_u64[0];
                      v137 = v128[1].n128_u8[0];
                      do
                      {
                        v138 = v128;
                        v128 = (__n128 *)v135;
                        v139 = *(__n128 *)v135;
                        v138[1].n128_u8[0] = *(_BYTE *)(v135 + 16);
                        *v138 = v139;
                        if (!v134)
                          break;
                        v134 = (v134 - 1) >> 1;
                        v135 = v12 + 24 * v134;
                      }
                      while (*(double *)(v135 + 8) < a5.n128_f64[0]);
                      v128->n128_u64[0] = v136;
                      v128->n128_u64[1] = a5.n128_u64[0];
                      v128[1].n128_u8[0] = v137;
                    }
                  }
                }
                v115 = v126-- <= 2;
              }
              while (!v115);
            }
            return a5.n128_f64[0];
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = (__n128 *)(v12 + 24 * ((unint64_t)v14 >> 1));
          v17 = a2[-1].n128_f64[0];
          if ((unint64_t)v13 < 0xC01)
          {
            v20 = *(double *)(v12 + 8);
            if (v20 >= v16->n128_f64[1])
            {
              if (v17 < v20)
              {
                v177 = *(_QWORD *)(v12 + 16);
                v154 = *(__n128 *)v12;
                a5 = *v9;
                *(_BYTE *)(v12 + 16) = a2[-1].n128_u8[8];
                *(__n128 *)v12 = a5;
                a5.n128_u64[1] = v154.n128_u64[1];
                a2[-1].n128_u8[8] = v177;
                *v9 = v154;
                if (*(double *)(v12 + 8) < v16->n128_f64[1])
                {
                  v178 = v16[1].n128_u64[0];
                  v155 = *v16;
                  a5 = *(__n128 *)v12;
                  v16[1].n128_u8[0] = *(_BYTE *)(v12 + 16);
                  *v16 = a5;
                  a5.n128_u64[1] = v155.n128_u64[1];
                  *(_BYTE *)(v12 + 16) = v178;
                  *(__n128 *)v12 = v155;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v17 >= v20)
              {
                v181 = v16[1].n128_u64[0];
                v158 = *v16;
                a5 = *(__n128 *)v12;
                v16[1].n128_u8[0] = *(_BYTE *)(v12 + 16);
                *v16 = a5;
                a5.n128_u64[1] = v158.n128_u64[1];
                *(_BYTE *)(v12 + 16) = v181;
                *(__n128 *)v12 = v158;
                if (a2[-1].n128_f64[0] >= *(double *)(v12 + 8))
                  goto LABEL_31;
                v174 = *(_QWORD *)(v12 + 16);
                v151 = *(__n128 *)v12;
                v38 = *v9;
                *(_BYTE *)(v12 + 16) = a2[-1].n128_u8[8];
                *(__n128 *)v12 = v38;
              }
              else
              {
                v174 = v16[1].n128_u64[0];
                v151 = *v16;
                v21 = *v9;
                v16[1].n128_u8[0] = a2[-1].n128_u8[8];
                *v16 = v21;
              }
              a5.n128_u64[1] = v151.n128_u64[1];
              a2[-1].n128_u8[8] = v174;
              *v9 = v151;
            }
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
LABEL_55:
            a5.n128_u64[0] = *(_QWORD *)(v12 + 8);
            if (*(double *)(v12 - 16) < a5.n128_f64[0])
              goto LABEL_56;
            if (a5.n128_f64[0] >= a2[-1].n128_f64[0])
            {
              v81 = v12 + 24;
              do
              {
                v12 = v81;
                if (v81 >= (unint64_t)a2)
                  break;
                v82 = *(double *)(v81 + 8);
                v81 += 24;
              }
              while (a5.n128_f64[0] >= v82);
            }
            else
            {
              v79 = v12;
              do
              {
                v12 = v79 + 24;
                v80 = *(double *)(v79 + 32);
                v79 += 24;
              }
              while (a5.n128_f64[0] >= v80);
            }
            v83 = a2;
            if (v12 < (unint64_t)a2)
            {
              v84 = a2;
              do
              {
                v83 = (__n128 *)((char *)v84 - 24);
                v85 = v84[-1].n128_f64[0];
                v84 = (__n128 *)((char *)v84 - 24);
              }
              while (a5.n128_f64[0] < v85);
            }
            v86 = *(_QWORD *)a1;
            v87 = *(_QWORD *)(a1 + 16);
            while (v12 < (unint64_t)v83)
            {
              v190 = *(_QWORD *)(v12 + 16);
              v167 = *(__n128 *)v12;
              v88 = *v83;
              *(_BYTE *)(v12 + 16) = v83[1].n128_u8[0];
              *(__n128 *)v12 = v88;
              v83[1].n128_u8[0] = v190;
              *v83 = v167;
              do
              {
                v89 = *(double *)(v12 + 32);
                v12 += 24;
              }
              while (a5.n128_f64[0] >= v89);
              do
              {
                v90 = v83[-1].n128_f64[0];
                v83 = (__n128 *)((char *)v83 - 24);
              }
              while (a5.n128_f64[0] < v90);
            }
            if (v12 - 24 != a1)
            {
              v91 = *(_OWORD *)(v12 - 24);
              *(_BYTE *)(a1 + 16) = *(_BYTE *)(v12 - 8);
              *(_OWORD *)a1 = v91;
            }
            a4 = 0;
            *(_QWORD *)(v12 - 24) = v86;
            *(_QWORD *)(v12 - 16) = a5.n128_u64[0];
            *(_BYTE *)(v12 - 8) = v87;
            continue;
          }
          v18 = v16->n128_f64[1];
          if (v18 >= *(double *)(v12 + 8))
          {
            if (v17 < v18)
            {
              v175 = v16[1].n128_u64[0];
              v152 = *v16;
              v22 = *v9;
              v16[1].n128_u8[0] = a2[-1].n128_u8[8];
              *v16 = v22;
              a2[-1].n128_u8[8] = v175;
              *v9 = v152;
              if (v16->n128_f64[1] < *(double *)(v12 + 8))
              {
                v176 = *(_QWORD *)(v12 + 16);
                v153 = *(__n128 *)v12;
                v23 = *v16;
                *(_BYTE *)(v12 + 16) = v16[1].n128_u8[0];
                *(__n128 *)v12 = v23;
                v16[1].n128_u8[0] = v176;
                *v16 = v153;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v179 = *(_QWORD *)(v12 + 16);
              v156 = *(__n128 *)v12;
              v24 = *v16;
              *(_BYTE *)(v12 + 16) = v16[1].n128_u8[0];
              *(__n128 *)v12 = v24;
              v16[1].n128_u8[0] = v179;
              *v16 = v156;
              if (a2[-1].n128_f64[0] >= v16->n128_f64[1])
                goto LABEL_22;
              v173 = v16[1].n128_u64[0];
              v150 = *v16;
              v25 = *v9;
              v16[1].n128_u8[0] = a2[-1].n128_u8[8];
              *v16 = v25;
            }
            else
            {
              v173 = *(_QWORD *)(v12 + 16);
              v150 = *(__n128 *)v12;
              v19 = *v9;
              *(_BYTE *)(v12 + 16) = a2[-1].n128_u8[8];
              *(__n128 *)v12 = v19;
            }
            a2[-1].n128_u8[8] = v173;
            *v9 = v150;
          }
LABEL_22:
          v26 = (__n128 *)(v12 + 24);
          v27 = v12 + 24 * v15;
          v28 = (__n128 *)(v27 - 24);
          v29 = *(double *)(v27 - 16);
          v30 = a2[-3].n128_f64[1];
          if (v29 >= *(double *)(v12 + 32))
          {
            if (v30 < v29)
            {
              v180 = *(_QWORD *)(v27 - 8);
              v157 = *v28;
              v34 = *v10;
              *(_BYTE *)(v27 - 8) = a2[-2].n128_u8[0];
              *v28 = v34;
              a2[-2].n128_u8[0] = v180;
              *v10 = v157;
              if (*(double *)(v27 - 16) < *(double *)(v12 + 32))
              {
                v35 = *v26;
                v36 = *(_QWORD *)(v12 + 40);
                v37 = v28[1].n128_i8[0];
                *v26 = *v28;
                *(_BYTE *)(v12 + 40) = v37;
                v28[1].n128_u8[0] = v36;
                *v28 = v35;
              }
            }
          }
          else
          {
            if (v30 >= v29)
            {
              v39 = *v26;
              v40 = *(_QWORD *)(v12 + 40);
              v41 = v28[1].n128_i8[0];
              *v26 = *v28;
              *(_BYTE *)(v12 + 40) = v41;
              v28[1].n128_u8[0] = v40;
              *v28 = v39;
              if (a2[-3].n128_f64[1] >= v28->n128_f64[1])
                goto LABEL_36;
              v182 = v28[1].n128_i64[0];
              v159 = *v28;
              v42 = *v10;
              v28[1].n128_u8[0] = a2[-2].n128_u8[0];
              *v28 = v42;
              v31 = v159;
              a2[-2].n128_u8[0] = v182;
            }
            else
            {
              v31 = *v26;
              v32 = *(_QWORD *)(v12 + 40);
              v33 = a2[-2].n128_u8[0];
              *v26 = *v10;
              *(_BYTE *)(v12 + 40) = v33;
              a2[-2].n128_u8[0] = v32;
            }
            *v10 = v31;
          }
LABEL_36:
          v43 = (__n128 *)(v12 + 48);
          v44 = v12 + 24 * v15;
          v45 = (__n128 *)(v44 + 24);
          v46 = *(double *)(v44 + 32);
          v47 = a2[-4].n128_f64[0];
          if (v46 >= *(double *)(v12 + 56))
          {
            if (v47 < v46)
            {
              v183 = *(_QWORD *)(v44 + 40);
              v160 = *v45;
              v51 = *(__n128 *)v11;
              *(_BYTE *)(v44 + 40) = a2[-4].n128_u8[8];
              *v45 = v51;
              a2[-4].n128_u8[8] = v183;
              *(__n128 *)v11 = v160;
              if (*(double *)(v44 + 32) < *(double *)(v12 + 56))
              {
                v52 = *v43;
                v53 = *(_QWORD *)(v12 + 64);
                v54 = v45[1].n128_i8[0];
                *v43 = *v45;
                *(_BYTE *)(v12 + 64) = v54;
                v45[1].n128_u8[0] = v53;
                *v45 = v52;
              }
            }
          }
          else
          {
            if (v47 >= v46)
            {
              v55 = *v43;
              v56 = *(_QWORD *)(v12 + 64);
              v57 = v45[1].n128_i8[0];
              *v43 = *v45;
              *(_BYTE *)(v12 + 64) = v57;
              v45[1].n128_u8[0] = v56;
              *v45 = v55;
              if (a2[-4].n128_f64[0] >= v45->n128_f64[1])
                goto LABEL_45;
              v184 = v45[1].n128_i64[0];
              v161 = *v45;
              v58 = *(__n128 *)v11;
              v45[1].n128_u8[0] = a2[-4].n128_u8[8];
              *v45 = v58;
              v48 = v161;
              a2[-4].n128_u8[8] = v184;
            }
            else
            {
              v48 = *v43;
              v49 = *(_QWORD *)(v12 + 64);
              v50 = a2[-4].n128_u8[8];
              *v43 = *(__n128 *)v11;
              *(_BYTE *)(v12 + 64) = v50;
              a2[-4].n128_u8[8] = v49;
            }
            *(__n128 *)v11 = v48;
          }
LABEL_45:
          v59 = v16->n128_f64[1];
          v60 = v45->n128_f64[1];
          if (v59 >= v28->n128_f64[1])
          {
            if (v60 < v59)
            {
              v186 = v16[1].n128_u64[0];
              v163 = *v16;
              *v16 = *v45;
              v16[1].n128_u8[0] = v45[1].n128_u8[0];
              v45[1].n128_u8[0] = v186;
              *v45 = v163;
              if (v16->n128_f64[1] < v28->n128_f64[1])
              {
                v187 = v28[1].n128_i64[0];
                v164 = *v28;
                *v28 = *v16;
                v28[1].n128_u8[0] = v16[1].n128_u8[0];
                v16[1].n128_u8[0] = v187;
                *v16 = v164;
              }
            }
          }
          else
          {
            if (v60 >= v59)
            {
              v188 = v28[1].n128_i64[0];
              v165 = *v28;
              *v28 = *v16;
              v28[1].n128_u8[0] = v16[1].n128_u8[0];
              v16[1].n128_u8[0] = v188;
              *v16 = v165;
              if (v45->n128_f64[1] >= v16->n128_f64[1])
                goto LABEL_54;
              v185 = v16[1].n128_u64[0];
              v162 = *v16;
              *v16 = *v45;
              v16[1].n128_u8[0] = v45[1].n128_u8[0];
            }
            else
            {
              v185 = v28[1].n128_u64[0];
              v162 = *v28;
              *v28 = *v45;
              v28[1].n128_u8[0] = v45[1].n128_u8[0];
            }
            v45[1].n128_u8[0] = v185;
            *v45 = v162;
          }
LABEL_54:
          v189 = *(_QWORD *)(v12 + 16);
          v166 = *(__n128 *)v12;
          a5 = *v16;
          *(_BYTE *)(v12 + 16) = v16[1].n128_u8[0];
          *(__n128 *)v12 = a5;
          a5.n128_u64[1] = v166.n128_u64[1];
          v16[1].n128_u8[0] = v189;
          *v16 = v166;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_32:
          a5.n128_u64[0] = *(_QWORD *)(v12 + 8);
LABEL_56:
          v61 = *(_QWORD *)v12;
          v62 = *(_QWORD *)(v12 + 16);
          v63 = v12;
          do
          {
            v64 = v63;
            v63 += 24;
          }
          while (*(double *)(v64 + 32) < a5.n128_f64[0]);
          v65 = a2;
          if (v64 == v12)
          {
            v68 = a2;
            while (v63 < (unint64_t)v68)
            {
              v66 = (__n128 *)((char *)v68 - 24);
              v69 = v68[-1].n128_f64[0];
              v68 = (__n128 *)((char *)v68 - 24);
              if (v69 < a5.n128_f64[0])
                goto LABEL_66;
            }
            v66 = v68;
          }
          else
          {
            do
            {
              v66 = (__n128 *)((char *)v65 - 24);
              v67 = v65[-1].n128_f64[0];
              v65 = (__n128 *)((char *)v65 - 24);
            }
            while (v67 >= a5.n128_f64[0]);
          }
LABEL_66:
          v12 = v63;
          if (v63 < (unint64_t)v66)
          {
            v70 = (unint64_t)v66;
            do
            {
              v71 = *(__n128 *)v12;
              v72 = *(_QWORD *)(v12 + 16);
              v73 = *(_BYTE *)(v70 + 16);
              *(_OWORD *)v12 = *(_OWORD *)v70;
              *(_BYTE *)(v12 + 16) = v73;
              *(_BYTE *)(v70 + 16) = v72;
              *(__n128 *)v70 = v71;
              do
              {
                v74 = *(double *)(v12 + 32);
                v12 += 24;
              }
              while (v74 < a5.n128_f64[0]);
              do
              {
                v75 = *(double *)(v70 - 16);
                v70 -= 24;
              }
              while (v75 >= a5.n128_f64[0]);
            }
            while (v12 < v70);
          }
          if (v12 - 24 != a1)
          {
            v76 = *(_OWORD *)(v12 - 24);
            *(_BYTE *)(a1 + 16) = *(_BYTE *)(v12 - 8);
            *(_OWORD *)a1 = v76;
          }
          *(_QWORD *)(v12 - 24) = v61;
          *(_QWORD *)(v12 - 16) = a5.n128_u64[0];
          *(_BYTE *)(v12 - 8) = v62;
          if (v63 < (unint64_t)v66)
            goto LABEL_77;
          v77 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::$_0 &,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::RoadEdgeInfo *>(a1, v12 - 24, a5);
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::$_0 &,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::RoadEdgeInfo *>(v12, (uint64_t)a2, v78))
          {
            if (v77)
              continue;
LABEL_77:
            std::__introsort<std::_ClassicAlgPolicy,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::$_0 &,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::RoadEdgeInfo *,false>(a1, v12 - 24, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__n128 *)(v12 - 24);
          if (v77)
            return a5.n128_f64[0];
          goto LABEL_1;
        }
        v102 = (__n128 *)(v12 + 24);
        v104 = (__n128 *)v12 == a2 || v102 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v104)
          {
            v105 = 0;
            v106 = v12;
            do
            {
              v108 = v102;
              a5.n128_u64[0] = *(_QWORD *)(v106 + 32);
              if (a5.n128_f64[0] < *(double *)(v106 + 8))
              {
                v109 = v102->n128_u64[0];
                v110 = *(_BYTE *)(v106 + 40);
                v111 = v105;
                do
                {
                  v112 = v12 + v111;
                  *(_OWORD *)(v112 + 24) = *(_OWORD *)(v12 + v111);
                  *(_BYTE *)(v112 + 40) = *(_BYTE *)(v12 + v111 + 16);
                  if (!v111)
                  {
                    v107 = v12;
                    goto LABEL_122;
                  }
                  v111 -= 24;
                }
                while (a5.n128_f64[0] < *(double *)(v112 - 16));
                v107 = v12 + v111 + 24;
LABEL_122:
                *(_QWORD *)v107 = v109;
                *(_QWORD *)(v107 + 8) = a5.n128_u64[0];
                *(_BYTE *)(v107 + 16) = v110;
              }
              v102 = (__n128 *)((char *)v108 + 24);
              v105 += 24;
              v106 = (unint64_t)v108;
            }
            while (&v108[1].n128_i8[8] != (__int8 *)a2);
          }
        }
        else if (!v104)
        {
          do
          {
            v142 = v102;
            a5.n128_u64[0] = *(_QWORD *)(a1 + 32);
            if (a5.n128_f64[0] < *(double *)(a1 + 8))
            {
              v143 = v102->n128_u64[0];
              v144 = *(_QWORD *)(a1 + 40);
              v145 = v142;
              do
              {
                *v145 = *(__n128 *)((char *)v145 - 24);
                v145[1].n128_u8[0] = v145[-1].n128_u8[8];
                v146 = v145[-3].n128_f64[1];
                v145 = (__n128 *)((char *)v145 - 24);
              }
              while (a5.n128_f64[0] < v146);
              v145->n128_u64[0] = v143;
              v145->n128_u64[1] = a5.n128_u64[0];
              v145[1].n128_u8[0] = v144;
            }
            v102 = (__n128 *)((char *)v142 + 24);
            a1 = (uint64_t)v142;
          }
          while (&v142[1].n128_i8[8] != (__int8 *)a2);
        }
        return a5.n128_f64[0];
    }
  }
}

  v8 = a2;
  k = a2 - 1;
  i = a1;
  while (2)
  {
    v11 = i;
    v12 = (char *)v8 - (char *)i;
    v13 = v8 - i;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v140 = *(_QWORD *)(*k + 8);
        v141 = *(_QWORD *)(*i + 8);
        v142 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v140 + 640))(v140);
        if (v142 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v141 + 640))(v141))
        {
          v143 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
          v144 = (*(double (**)(uint64_t))(*(_QWORD *)v143 + 72))(v143);
          v145 = vabdd_f64(v144, (*(double (**)(uint64_t))(*(_QWORD *)v140 + 632))(v140));
          v146 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
          v147 = (*(double (**)(uint64_t))(*(_QWORD *)v146 + 72))(v146);
          v148 = (*(double (**)(uint64_t))(*(_QWORD *)v141 + 632))(v141);
          v149 = a2 - 1;
          if (v145 >= vabdd_f64(v147, v148))
            return;
        }
        else
        {
          v267 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v140 + 640))(v140);
          v268 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v141 + 640))(v141);
          v149 = a2 - 1;
          if (v267 <= v268)
            return;
        }
        v269 = *i;
        *i = *v149;
        *v149 = v269;
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(i, i + 1, k, a3);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(i, i + 1, i + 2, k, a3);
        return;
      case 5uLL:
        std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **,0>(i, i + 1, i + 2, i + 3, k, a3);
        return;
      default:
        v298 = i;
        if (v12 > 191)
        {
          if (!a4)
          {
            if (i != a2)
            {
              v292 = (char *)v8 - (char *)i;
              v178 = (v13 - 2) >> 1;
              v300 = v178;
              while (1)
              {
                v180 = v178;
                if (v300 < v178)
                  goto LABEL_125;
                v294 = v178;
                v181 = (2 * v178) | 1;
                v182 = &v11[v181];
                v183 = 2 * v178 + 2;
                if (v183 < (uint64_t)v13)
                {
                  v184 = *(_QWORD *)(*v182 + 8);
                  v185 = *(_QWORD *)(v182[1] + 8);
                  v186 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v184 + 640))(v184);
                  if (v186 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v185 + 640))(v185))
                  {
                    v192 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v184 + 640))(v184);
                    if (v192 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v185 + 640))(v185))
                      goto LABEL_133;
LABEL_132:
                    ++v182;
                    v181 = v183;
                    goto LABEL_133;
                  }
                  v187 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                  v188 = (*(double (**)(uint64_t))(*(_QWORD *)v187 + 72))(v187);
                  v189 = vabdd_f64(v188, (*(double (**)(uint64_t))(*(_QWORD *)v184 + 632))(v184));
                  v190 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                  v191 = (*(double (**)(uint64_t))(*(_QWORD *)v190 + 72))(v190);
                  if (v189 < vabdd_f64(v191, (*(double (**)(uint64_t))(*(_QWORD *)v185 + 632))(v185)))goto LABEL_132;
                }
LABEL_133:
                v11 = v298;
                v180 = v294;
                v193 = *(_QWORD *)(*v182 + 8);
                v194 = *(_QWORD *)(v298[v294] + 8);
                v195 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v193 + 640))(v193);
                if (v195 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v194 + 640))(v194))
                {
                  v196 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                  v197 = (*(double (**)(uint64_t))(*(_QWORD *)v196 + 72))(v196);
                  v198 = vabdd_f64(v197, (*(double (**)(uint64_t))(*(_QWORD *)v193 + 632))(v193));
                  v199 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                  v200 = (*(double (**)(uint64_t))(*(_QWORD *)v199 + 72))(v199);
                  if (v198 >= vabdd_f64(v200, (*(double (**)(uint64_t))(*(_QWORD *)v194 + 632))(v194)))goto LABEL_137;
                }
                else
                {
                  v201 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v193 + 640))(v193);
                  if (v201 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v194 + 640))(v194))
                  {
LABEL_137:
                    v295 = v298[v294];
                    v298[v294] = *v182;
                    if (v300 < v181)
                    {
LABEL_123:
                      v179 = v182;
LABEL_124:
                      *v179 = v295;
                      v180 = v294;
                      goto LABEL_125;
                    }
                    while (2)
                    {
                      v203 = 2 * v181;
                      v181 = (2 * v181) | 1;
                      v179 = &v11[v181];
                      v204 = v203 + 2;
                      if (v203 + 2 < (uint64_t)v13)
                      {
                        v205 = *(_QWORD *)(*v179 + 8);
                        v206 = *(_QWORD *)(v179[1] + 8);
                        v207 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v205 + 640))(v205);
                        if (v207 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v206 + 640))(v206))
                        {
                          v208 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                          v209 = (*(double (**)(uint64_t))(*(_QWORD *)v208 + 72))(v208);
                          v210 = vabdd_f64(v209, (*(double (**)(uint64_t))(*(_QWORD *)v205 + 632))(v205));
                          v211 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                          v212 = (*(double (**)(uint64_t))(*(_QWORD *)v211 + 72))(v211);
                          if (v210 >= vabdd_f64(v212, (*(double (**)(uint64_t))(*(_QWORD *)v206 + 632))(v206)))goto LABEL_147;
LABEL_146:
                          ++v179;
                          v181 = v204;
                        }
                        else
                        {
                          v213 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v205 + 640))(v205);
                          if (v213 > (*(unsigned int (**)(uint64_t))(*(_QWORD *)v206 + 640))(v206))
                            goto LABEL_146;
                        }
                      }
LABEL_147:
                      v214 = *(_QWORD *)(*v179 + 8);
                      v215 = *(_QWORD *)(v295 + 8);
                      v216 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v214 + 640))(v214);
                      if (v216 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v215 + 640))(v215))
                      {
                        v217 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                        v218 = (*(double (**)(uint64_t))(*(_QWORD *)v217 + 72))(v217);
                        v219 = vabdd_f64(v218, (*(double (**)(uint64_t))(*(_QWORD *)v214 + 632))(v214));
                        v220 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                        v221 = (*(double (**)(uint64_t))(*(_QWORD *)v220 + 72))(v220);
                        v11 = v298;
                        if (v219 < vabdd_f64(v221, (*(double (**)(uint64_t))(*(_QWORD *)v215 + 632))(v215)))goto LABEL_123;
                      }
                      else
                      {
                        v202 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v214 + 640))(v214);
                        v11 = v298;
                        if (v202 > (*(unsigned int (**)(uint64_t))(*(_QWORD *)v215 + 640))(v215))
                          goto LABEL_123;
                      }
                      *v182 = *v179;
                      v182 = v179;
                      if (v300 < v181)
                        goto LABEL_124;
                      continue;
                    }
                  }
                }
LABEL_125:
                v178 = v180 - 1;
                if (!v180)
                {
                  v222 = v292 >> 3;
                  while (1)
                  {
                    v224 = v11;
                    v225 = 0;
                    v296 = *v224;
                    v226 = (unint64_t)(v222 - 2) >> 1;
                    do
                    {
                      v227 = v224;
                      v224 += v225 + 1;
                      v228 = 2 * v225;
                      v225 = (2 * v225) | 1;
                      v229 = v228 + 2;
                      if (v228 + 2 < v222)
                      {
                        v230 = *(_QWORD *)(*v224 + 8);
                        v231 = *(_QWORD *)(v224[1] + 8);
                        v232 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v230 + 640))(v230);
                        if (v232 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v231 + 640))(v231))
                        {
                          v233 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                          v234 = (*(double (**)(uint64_t))(*(_QWORD *)v233 + 72))(v233);
                          v235 = vabdd_f64(v234, (*(double (**)(uint64_t))(*(_QWORD *)v230 + 632))(v230));
                          v236 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                          v237 = (*(double (**)(uint64_t))(*(_QWORD *)v236 + 72))(v236);
                          v238 = (*(double (**)(uint64_t))(*(_QWORD *)v231 + 632))(v231);
                          v226 = (unint64_t)(v222 - 2) >> 1;
                          if (v235 < vabdd_f64(v237, v238))
                            goto LABEL_154;
                        }
                        else
                        {
                          v239 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v230 + 640))(v230);
                          v240 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v231 + 640))(v231);
                          v226 = (unint64_t)(v222 - 2) >> 1;
                          if (v239 > v240)
                          {
LABEL_154:
                            ++v224;
                            v225 = v229;
                          }
                        }
                      }
                      *v227 = *v224;
                    }
                    while (v225 <= v226);
                    v241 = a2 - 1;
                    v151 = v224 == --a2;
                    if (v151)
                    {
                      *v224 = v296;
                    }
                    else
                    {
                      *v224 = *v241;
                      *v241 = v296;
                      v242 = (char *)v224 - (char *)v298 + 8;
                      if (v242 >= 9)
                      {
                        v301 = v222;
                        v243 = ((unint64_t)v242 >> 3) - 2;
                        v244 = v243 >> 1;
                        v245 = &v298[v243 >> 1];
                        v246 = *(_QWORD *)(*v245 + 8);
                        v247 = *(_QWORD *)(*v224 + 8);
                        v248 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v246 + 640))(v246);
                        if (v248 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v247 + 640))(v247))
                        {
                          v249 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                          v250 = (*(double (**)(uint64_t))(*(_QWORD *)v249 + 72))(v249);
                          v251 = vabdd_f64(v250, (*(double (**)(uint64_t))(*(_QWORD *)v246 + 632))(v246));
                          v252 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                          v253 = (*(double (**)(uint64_t))(*(_QWORD *)v252 + 72))(v252);
                          if (v251 < vabdd_f64(v253, (*(double (**)(uint64_t))(*(_QWORD *)v247 + 632))(v247)))
                          {
LABEL_168:
                            v255 = *v224;
                            *v224 = *v245;
                            if (v243 >= 2)
                            {
                              while (1)
                              {
                                v257 = v244 - 1;
                                v244 = (v244 - 1) >> 1;
                                v258 = &v298[v244];
                                v259 = *(_QWORD *)(*v258 + 8);
                                v260 = *(_QWORD *)(v255 + 8);
                                v261 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v259 + 640))(v259);
                                if (v261 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v260 + 640))(v260))
                                {
                                  v262 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                                  v263 = (*(double (**)(uint64_t))(*(_QWORD *)v262 + 72))(v262);
                                  v264 = vabdd_f64(v263, (*(double (**)(uint64_t))(*(_QWORD *)v259 + 632))(v259));
                                  v265 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                                  v266 = (*(double (**)(uint64_t))(*(_QWORD *)v265 + 72))(v265);
                                  if (v264 >= vabdd_f64(v266, (*(double (**)(uint64_t))(*(_QWORD *)v260+ 632))(v260)))break;
                                }
                                else
                                {
                                  v256 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v259 + 640))(v259);
                                  if (v256 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v260 + 640))(v260))
                                    break;
                                }
                                *v245 = *v258;
                                v245 = &v298[v244];
                                if (v257 <= 1)
                                  goto LABEL_175;
                              }
                            }
                            v258 = v245;
LABEL_175:
                            *v258 = v255;
                            v222 = v301;
                          }
                        }
                        else
                        {
                          v254 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v246 + 640))(v246);
                          if (v254 > (*(unsigned int (**)(uint64_t))(*(_QWORD *)v247 + 640))(v247))
                            goto LABEL_168;
                        }
                      }
                    }
                    v223 = v222-- <= 2;
                    v11 = v298;
                    if (v223)
                      return;
                  }
                }
              }
            }
            return;
          }
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(&i[v13 >> 1], i, k, a3);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(i, &i[v13 >> 1], k, a3);
            v14 = v13 >> 1;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(i + 1, &i[v14 - 1], a2 - 2, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(i + 2, &i[v14 + 1], a2 - 3, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(&i[v14 - 1], &i[v14], &i[v14 + 1], a3);
            v15 = *i;
            *i = i[v14];
            i[v14] = v15;
          }
          --a4;
          if ((a5 & 1) == 0)
          {
            v16 = *(_QWORD *)(*(i - 1) + 8);
            v17 = *(_QWORD *)(*i + 8);
            v18 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v16 + 640))(*(_QWORD *)(*(v11 - 1) + 8));
            if (v18 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 640))(v17))
            {
              v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
              v20 = (*(double (**)(uint64_t))(*(_QWORD *)v19 + 72))(v19);
              v21 = vabdd_f64(v20, (*(double (**)(uint64_t))(*(_QWORD *)v16 + 632))(v16));
              v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
              v23 = (*(double (**)(uint64_t))(*(_QWORD *)v22 + 72))(v22);
              if (v21 < vabdd_f64(v23, (*(double (**)(uint64_t))(*(_QWORD *)v17 + 632))(v17)))
                goto LABEL_15;
            }
            else
            {
              v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 640))(v16);
              if (v33 > (*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 640))(v17))
                goto LABEL_15;
            }
            v24 = *v11;
            v25 = *(_QWORD *)(*v11 + 8);
            v26 = *(_QWORD *)(*k + 8);
            v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 640))(v25);
            if (v27 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 640))(v26))
            {
              v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
              v29 = (*(double (**)(uint64_t))(*(_QWORD *)v28 + 72))(v28);
              v30 = vabdd_f64(v29, (*(double (**)(uint64_t))(*(_QWORD *)v25 + 632))(v25));
              v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
              v32 = (*(double (**)(uint64_t))(*(_QWORD *)v31 + 72))(v31);
              if (v30 < vabdd_f64(v32, (*(double (**)(uint64_t))(*(_QWORD *)v26 + 632))(v26)))
                goto LABEL_62;
            }
            else
            {
              v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 640))(v25);
              if (v99 > (*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 640))(v26))
              {
LABEL_62:
                for (i = v298 + 1; ; ++i)
                {
                  v101 = *(_QWORD *)(v24 + 8);
                  v102 = *(_QWORD *)(*i + 8);
                  v103 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 640))(v101);
                  if (v103 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v102 + 640))(v102))
                  {
                    v104 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                    v105 = (*(double (**)(uint64_t))(*(_QWORD *)v104 + 72))(v104);
                    v106 = vabdd_f64(v105, (*(double (**)(uint64_t))(*(_QWORD *)v101 + 632))(v101));
                    v107 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                    v108 = (*(double (**)(uint64_t))(*(_QWORD *)v107 + 72))(v107);
                    if (v106 < vabdd_f64(v108, (*(double (**)(uint64_t))(*(_QWORD *)v102 + 632))(v102)))goto LABEL_67;
                  }
                  else
                  {
                    v100 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 640))(v101);
                    if (v100 > (*(unsigned int (**)(uint64_t))(*(_QWORD *)v102 + 640))(v102))
                      goto LABEL_67;
                  }
                }
              }
            }
            for (i = v298 + 1; i < a2; ++i)
            {
              v91 = *(_QWORD *)(v24 + 8);
              v92 = *(_QWORD *)(*i + 8);
              v93 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v91 + 640))(v91);
              if (v93 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v92 + 640))(v92))
              {
                v94 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                v95 = (*(double (**)(uint64_t))(*(_QWORD *)v94 + 72))(v94);
                v96 = vabdd_f64(v95, (*(double (**)(uint64_t))(*(_QWORD *)v91 + 632))(v91));
                v97 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                v98 = (*(double (**)(uint64_t))(*(_QWORD *)v97 + 72))(v97);
                if (v96 < vabdd_f64(v98, (*(double (**)(uint64_t))(*(_QWORD *)v92 + 632))(v92)))break;
              }
              else
              {
                v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v91 + 640))(v91);
                if (v90 > (*(unsigned int (**)(uint64_t))(*(_QWORD *)v92 + 640))(v92))
                  break;
              }
            }
LABEL_67:
            j = a2;
            if (i >= a2)
              goto LABEL_83;
            for (j = k; ; --j)
            {
              v111 = *(_QWORD *)(v24 + 8);
              v112 = *(_QWORD *)(*j + 8);
              v113 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v111 + 640))(v111);
              if (v113 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v112 + 640))(v112))
                break;
              v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v111 + 640))(v111);
              if (v110 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v112 + 640))(v112))
                goto LABEL_83;
LABEL_70:
              ;
            }
            v114 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
            v115 = (*(double (**)(uint64_t))(*(_QWORD *)v114 + 72))(v114);
            v116 = vabdd_f64(v115, (*(double (**)(uint64_t))(*(_QWORD *)v111 + 632))(v111));
            v117 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
            v118 = (*(double (**)(uint64_t))(*(_QWORD *)v117 + 72))(v117);
            if (v116 < vabdd_f64(v118, (*(double (**)(uint64_t))(*(_QWORD *)v112 + 632))(v112)))goto LABEL_70;
LABEL_83:
            while (i < j)
            {
              v119 = *i;
              *i++ = *j;
              *j = v119;
              while (1)
              {
                v121 = *(_QWORD *)(v24 + 8);
                v122 = *(_QWORD *)(*i + 8);
                v123 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v121 + 640))(v121);
                if (v123 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v122 + 640))(v122))
                  break;
                v120 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v121 + 640))(v121);
                if (v120 > (*(unsigned int (**)(uint64_t))(*(_QWORD *)v122 + 640))(v122))
                  goto LABEL_81;
LABEL_76:
                ++i;
              }
              v124 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
              v125 = (*(double (**)(uint64_t))(*(_QWORD *)v124 + 72))(v124);
              v126 = vabdd_f64(v125, (*(double (**)(uint64_t))(*(_QWORD *)v121 + 632))(v121));
              v127 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
              v128 = (*(double (**)(uint64_t))(*(_QWORD *)v127 + 72))(v127);
              if (v126 >= vabdd_f64(v128, (*(double (**)(uint64_t))(*(_QWORD *)v122 + 632))(v122)))goto LABEL_76;
              do
              {
LABEL_81:
                while (1)
                {
                  v130 = *--j;
                  v131 = *(_QWORD *)(v24 + 8);
                  v132 = *(_QWORD *)(v130 + 8);
                  v133 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v131 + 640))(v131);
                  if (v133 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v132 + 640))(v132))
                    break;
                  v129 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v131 + 640))(v131);
                  if (v129 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v132 + 640))(v132))
                    goto LABEL_83;
                }
                v134 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                v135 = (*(double (**)(uint64_t))(*(_QWORD *)v134 + 72))(v134);
                v136 = vabdd_f64(v135, (*(double (**)(uint64_t))(*(_QWORD *)v131 + 632))(v131));
                v137 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                v138 = (*(double (**)(uint64_t))(*(_QWORD *)v137 + 72))(v137);
              }
              while (v136 < vabdd_f64(v138, (*(double (**)(uint64_t))(*(_QWORD *)v132 + 632))(v132)));
            }
            v139 = i - 1;
            if (i - 1 != v298)
              *v298 = *v139;
            a5 = 0;
            *v139 = v24;
            v8 = a2;
            continue;
          }
LABEL_15:
          v299 = a4;
          v34 = (unint64_t)(v11 + 1);
          v35 = *v11;
          while (1)
          {
            v37 = *(_QWORD *)(*(_QWORD *)v34 + 8);
            v38 = *(_QWORD *)(v35 + 8);
            v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 640))(v37);
            if (v39 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 640))(v38))
              break;
            v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 640))(v37);
            if (v36 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 640))(v38))
              goto LABEL_20;
LABEL_17:
            v34 += 8;
          }
          v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
          v41 = (*(double (**)(uint64_t))(*(_QWORD *)v40 + 72))(v40);
          v42 = vabdd_f64(v41, (*(double (**)(uint64_t))(*(_QWORD *)v37 + 632))(v37));
          v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
          v44 = (*(double (**)(uint64_t))(*(_QWORD *)v43 + 72))(v43);
          if (v42 < vabdd_f64(v44, (*(double (**)(uint64_t))(*(_QWORD *)v38 + 632))(v38)))
            goto LABEL_17;
LABEL_20:
          v45 = (uint64_t *)(v34 - 8);
          if ((uint64_t *)(v34 - 8) != v11)
          {
            while (1)
            {
              v47 = *(_QWORD *)(*k + 8);
              v48 = *(_QWORD *)(v35 + 8);
              v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 640))(v47);
              if (v49 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v48 + 640))(v48))
              {
                v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                v51 = (*(double (**)(uint64_t))(*(_QWORD *)v50 + 72))(v50);
                v52 = vabdd_f64(v51, (*(double (**)(uint64_t))(*(_QWORD *)v47 + 632))(v47));
                v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                v54 = (*(double (**)(uint64_t))(*(_QWORD *)v53 + 72))(v53);
                if (v52 < vabdd_f64(v54, (*(double (**)(uint64_t))(*(_QWORD *)v48 + 632))(v48)))goto LABEL_27;
              }
              else
              {
                v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 640))(v47);
                if (v46 > (*(unsigned int (**)(uint64_t))(*(_QWORD *)v48 + 640))(v48))
                  goto LABEL_27;
              }
              --k;
            }
          }
          k = a2;
          if (v34 < (unint64_t)a2)
          {
            for (k = a2 - 1; ; --k)
            {
              v77 = *(_QWORD *)(*k + 8);
              v78 = *(_QWORD *)(v35 + 8);
              v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 640))(v77);
              if (v79 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v78 + 640))(v78))
              {
                v80 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                v81 = (*(double (**)(uint64_t))(*(_QWORD *)v80 + 72))(v80);
                v82 = (*(double (**)(uint64_t))(*(_QWORD *)v77 + 632))(v77);
                v83 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                v84 = (*(double (**)(uint64_t))(*(_QWORD *)v83 + 72))(v83);
                (*(void (**)(uint64_t))(*(_QWORD *)v78 + 632))(v78);
                if (v34 >= (unint64_t)k || vabdd_f64(v81, v82) < vabdd_f64(v84, v85))
                  break;
              }
              else
              {
                v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 640))(v77);
                v87 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 640))(v78);
                if (v34 >= (unint64_t)k || v86 > v87)
                  break;
              }
            }
          }
LABEL_27:
          if (v34 < (unint64_t)k)
          {
            v55 = v34;
            v56 = k;
            do
            {
              v57 = *(_QWORD *)v55;
              *(_QWORD *)v55 = *v56;
              v55 += 8;
              *v56 = v57;
              while (1)
              {
                v59 = *(_QWORD *)(*(_QWORD *)v55 + 8);
                v60 = *(_QWORD *)(v35 + 8);
                v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 640))(v59);
                if (v61 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v60 + 640))(v60))
                  break;
                v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 640))(v59);
                if (v58 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v60 + 640))(v60))
                  goto LABEL_35;
LABEL_32:
                v55 += 8;
              }
              v62 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
              v63 = (*(double (**)(uint64_t))(*(_QWORD *)v62 + 72))(v62);
              v64 = vabdd_f64(v63, (*(double (**)(uint64_t))(*(_QWORD *)v59 + 632))(v59));
              v65 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
              v66 = (*(double (**)(uint64_t))(*(_QWORD *)v65 + 72))(v65);
              if (v64 < vabdd_f64(v66, (*(double (**)(uint64_t))(*(_QWORD *)v60 + 632))(v60)))
                goto LABEL_32;
LABEL_35:
              v45 = (uint64_t *)(v55 - 8);
              do
              {
                while (1)
                {
                  v68 = *--v56;
                  v69 = *(_QWORD *)(v68 + 8);
                  v70 = *(_QWORD *)(v35 + 8);
                  v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 640))(v69);
                  if (v71 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v70 + 640))(v70))
                    break;
                  v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 640))(v69);
                  if (v67 > (*(unsigned int (**)(uint64_t))(*(_QWORD *)v70 + 640))(v70))
                    goto LABEL_29;
                }
                v72 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                v73 = (*(double (**)(uint64_t))(*(_QWORD *)v72 + 72))(v72);
                v74 = vabdd_f64(v73, (*(double (**)(uint64_t))(*(_QWORD *)v69 + 632))(v69));
                v75 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                v76 = (*(double (**)(uint64_t))(*(_QWORD *)v75 + 72))(v75);
              }
              while (v74 >= vabdd_f64(v76, (*(double (**)(uint64_t))(*(_QWORD *)v70 + 632))(v70)));
LABEL_29:
              ;
            }
            while (v55 < (unint64_t)v56);
          }
          a1 = v298;
          if (v45 != v298)
            *v298 = *v45;
          *v45 = v35;
          v88 = v34 >= (unint64_t)k;
          k = a2 - 1;
          v8 = a2;
          a4 = v299;
          if (!v88)
            goto LABEL_54;
          v89 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(v298, v45, a3);
          i = v45 + 1;
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(v45 + 1, a2, a3))
          {
            if (v89)
              continue;
LABEL_54:
            std::__introsort<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **,false>(v298, v45, a3, v299, a5 & 1);
            a5 = 0;
            i = v45 + 1;
            continue;
          }
          a2 = v45;
          if (v89)
            return;
          goto LABEL_1;
        }
        v150 = i + 1;
        v151 = i == a2 || v150 == a2;
        v152 = v151;
        if ((a5 & 1) != 0)
        {
          if ((v152 & 1) != 0)
            return;
          v153 = 0;
          v154 = i;
LABEL_109:
          v156 = v154;
          v154 = v150;
          v157 = *(_QWORD *)(v156[1] + 8);
          v158 = *(_QWORD *)(*v156 + 8);
          v159 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v157 + 640))(v157);
          if (v159 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v158 + 640))(v158))
          {
            v160 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
            v161 = (*(double (**)(uint64_t))(*(_QWORD *)v160 + 72))(v160);
            v162 = vabdd_f64(v161, (*(double (**)(uint64_t))(*(_QWORD *)v157 + 632))(v157));
            v163 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
            v164 = (*(double (**)(uint64_t))(*(_QWORD *)v163 + 72))(v163);
            if (v162 >= vabdd_f64(v164, (*(double (**)(uint64_t))(*(_QWORD *)v158 + 632))(v158)))goto LABEL_108;
          }
          else
          {
            v165 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v157 + 640))(v157);
            if (v165 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v158 + 640))(v158))
              goto LABEL_108;
          }
          v166 = v11;
          v167 = v156[1];
          v156[1] = *v156;
          v155 = v166;
          if (v156 == v166)
            goto LABEL_107;
          v168 = v153;
          while (1)
          {
            v174 = *(_QWORD *)(v167 + 8);
            v175 = *(_QWORD *)(*(uint64_t *)((char *)v298 + v168 - 8) + 8);
            v176 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 640))(v174);
            if (v176 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v175 + 640))(v175))
            {
              v169 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
              v170 = (*(double (**)(uint64_t))(*(_QWORD *)v169 + 72))(v169);
              v171 = vabdd_f64(v170, (*(double (**)(uint64_t))(*(_QWORD *)v174 + 632))(v174));
              v172 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
              v173 = (*(double (**)(uint64_t))(*(_QWORD *)v172 + 72))(v172);
              if (v171 >= vabdd_f64(v173, (*(double (**)(uint64_t))(*(_QWORD *)v175 + 632))(v175)))
              {
                v155 = (uint64_t *)((char *)v298 + v168);
LABEL_107:
                *v155 = v167;
                v11 = v298;
LABEL_108:
                v150 = v154 + 1;
                v153 += 8;
                if (v154 + 1 == a2)
                  return;
                goto LABEL_109;
              }
            }
            else
            {
              v177 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 640))(v174);
              if (v177 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v175 + 640))(v175))
              {
                v155 = v156;
                goto LABEL_107;
              }
            }
            --v156;
            *(uint64_t *)((char *)v298 + v168) = *(uint64_t *)((char *)v298 + v168 - 8);
            v168 -= 8;
            if (!v168)
            {
              v155 = v298;
              goto LABEL_107;
            }
          }
        }
        if ((v152 & 1) == 0)
        {
          do
          {
            v270 = v11;
            v11 = v150;
            v271 = *(_QWORD *)(v270[1] + 8);
            v272 = *(_QWORD *)(*v270 + 8);
            v273 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v271 + 640))(v271);
            if (v273 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v272 + 640))(v272))
            {
              v274 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
              v275 = (*(double (**)(uint64_t))(*(_QWORD *)v274 + 72))(v274);
              v276 = vabdd_f64(v275, (*(double (**)(uint64_t))(*(_QWORD *)v271 + 632))(v271));
              v277 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
              v278 = (*(double (**)(uint64_t))(*(_QWORD *)v277 + 72))(v277);
              if (v276 < vabdd_f64(v278, (*(double (**)(uint64_t))(*(_QWORD *)v272 + 632))(v272)))goto LABEL_186;
            }
            else
            {
              v279 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v271 + 640))(v271);
              if (v279 > (*(unsigned int (**)(uint64_t))(*(_QWORD *)v272 + 640))(v272))
              {
LABEL_186:
                v280 = *v11;
                do
                {
                  while (1)
                  {
                    v282 = v270;
                    v270[1] = *v270;
                    v283 = *--v270;
                    v284 = *(_QWORD *)(v280 + 8);
                    v285 = *(_QWORD *)(v283 + 8);
                    v286 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v284 + 640))(v284);
                    if (v286 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v285 + 640))(v285))
                      break;
                    v281 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v284 + 640))(v284);
                    if (v281 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v285 + 640))(v285))
                      goto LABEL_180;
                  }
                  v287 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                  v288 = (*(double (**)(uint64_t))(*(_QWORD *)v287 + 72))(v287);
                  v289 = vabdd_f64(v288, (*(double (**)(uint64_t))(*(_QWORD *)v284 + 632))(v284));
                  v290 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                  v291 = (*(double (**)(uint64_t))(*(_QWORD *)v290 + 72))(v290);
                }
                while (v289 < vabdd_f64(v291, (*(double (**)(uint64_t))(*(_QWORD *)v285 + 632))(v285)));
LABEL_180:
                *v282 = v280;
              }
            }
            v150 = v11 + 1;
          }
          while (v11 + 1 != a2);
        }
        return;
    }
  }
}

  v245 = a2 - 1;
  v248 = a2;
  v240 = a2 - 3;
  v241 = a2 - 2;
  v9 = a1;
  while (2)
  {
    v10 = v9;
    v11 = (char *)a2 - (char *)v9;
    v12 = a2 - v9;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v123 = *(_QWORD *)(*v245 + 8);
        v124 = *(_QWORD *)(*v9 + 8);
        v125 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
        v126 = (*(double (**)(uint64_t))(*(_QWORD *)v125 + 72))(v125);
        LODWORD(v123) = vabdd_f64(v126, (*(double (**)(uint64_t))(*(_QWORD *)v123 + 632))(v123));
        v127 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
        v128 = (*(double (**)(uint64_t))(*(_QWORD *)v127 + 72))(v127);
        if (v123 < vabdd_f64(v128, (*(double (**)(uint64_t))(*(_QWORD *)v124 + 632))(v124)))
        {
          v129 = *v9;
          *v9 = *v245;
          *v245 = v129;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(v9, v9 + 1, v245, a3);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(v9, v9 + 1, v9 + 2, v245, a3);
        return;
      case 5uLL:
        std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **,0>(v9, v9 + 1, v9 + 2, v9 + 3, v245, a3);
        return;
      default:
        if (v11 <= 191)
        {
          v130 = v9 + 1;
          v132 = v9 == a2 || v130 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v132)
            {
              v133 = 0;
              v134 = v9;
              do
              {
                v137 = *v134;
                v136 = v134[1];
                v134 = v130;
                v138 = *(_QWORD *)(v136 + 8);
                v139 = *(_QWORD *)(v137 + 8);
                v140 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                v141 = (*(double (**)(uint64_t))(*(_QWORD *)v140 + 72))(v140);
                v142 = vabdd_f64(v141, (*(double (**)(uint64_t))(*(_QWORD *)v138 + 632))(v138));
                v143 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                v144 = (*(double (**)(uint64_t))(*(_QWORD *)v143 + 72))(v143);
                if (v142 < vabdd_f64(v144, (*(double (**)(uint64_t))(*(_QWORD *)v139 + 632))(v139)))
                {
                  v145 = *v134;
                  v146 = v133;
                  do
                  {
                    *(uint64_t *)((char *)v9 + v146 + 8) = *(uint64_t *)((char *)v9 + v146);
                    if (!v146)
                    {
                      v135 = v9;
                      goto LABEL_67;
                    }
                    v147 = *(_QWORD *)(v145 + 8);
                    v148 = *(_QWORD *)(*(uint64_t *)((char *)v9 + v146 - 8) + 8);
                    v149 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                    v150 = (*(double (**)(uint64_t))(*(_QWORD *)v149 + 72))(v149);
                    LODWORD(v147) = vabdd_f64(v150, (*(double (**)(uint64_t))(*(_QWORD *)v147 + 632))(v147));
                    v151 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                    v152 = (*(double (**)(uint64_t))(*(_QWORD *)v151 + 72))(v151);
                    v146 -= 8;
                  }
                  while (v147 < vabdd_f64(v152, (*(double (**)(uint64_t))(*(_QWORD *)v148+ 632))(v148)));
                  v135 = (uint64_t *)((char *)v9 + v146 + 8);
LABEL_67:
                  *v135 = v145;
                }
                v130 = v134 + 1;
                v133 += 8;
              }
              while (v134 + 1 != a2);
            }
          }
          else if (!v132)
          {
            do
            {
              v221 = *v10;
              v222 = v10[1];
              v10 = v130;
              v223 = *(_QWORD *)(v222 + 8);
              v224 = *(_QWORD *)(v221 + 8);
              v225 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
              v226 = (*(double (**)(uint64_t))(*(_QWORD *)v225 + 72))(v225);
              v227 = vabdd_f64(v226, (*(double (**)(uint64_t))(*(_QWORD *)v223 + 632))(v223));
              v228 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
              v229 = (*(double (**)(uint64_t))(*(_QWORD *)v228 + 72))(v228);
              if (v227 < vabdd_f64(v229, (*(double (**)(uint64_t))(*(_QWORD *)v224 + 632))(v224)))
              {
                v230 = *v10;
                v231 = v10;
                do
                {
                  v232 = v231;
                  v233 = *--v231;
                  *v232 = v233;
                  v234 = *(_QWORD *)(v230 + 8);
                  v235 = *(_QWORD *)(*(v232 - 2) + 8);
                  v236 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                  v237 = (*(double (**)(uint64_t))(*(_QWORD *)v236 + 72))(v236);
                  LODWORD(v234) = vabdd_f64(v237, (*(double (**)(uint64_t))(*(_QWORD *)v234 + 632))(v234));
                  v238 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                  v239 = (*(double (**)(uint64_t))(*(_QWORD *)v238 + 72))(v238);
                }
                while (v234 < vabdd_f64(v239, (*(double (**)(uint64_t))(*(_QWORD *)v235 + 632))(v235)));
                *v231 = v230;
              }
              v130 = v10 + 1;
            }
            while (v10 + 1 != a2);
          }
          return;
        }
        v251 = v9;
        if (!a4)
        {
          if (v9 != a2)
          {
            v153 = (v12 - 2) >> 1;
            v246 = v153;
            do
            {
              v154 = v153;
              if (v246 >= v153)
              {
                v155 = (2 * v153) | 1;
                v156 = &v251[v155];
                v157 = 2 * v153 + 2;
                v242 = v153;
                if (v157 < (uint64_t)v12)
                {
                  v158 = *(_QWORD *)(*v156 + 8);
                  v159 = *(_QWORD *)(v156[1] + 8);
                  v160 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                  v161 = (*(double (**)(uint64_t))(*(_QWORD *)v160 + 72))(v160);
                  v162 = vabdd_f64(v161, (*(double (**)(uint64_t))(*(_QWORD *)v158 + 632))(v158));
                  v163 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                  v164 = (*(double (**)(uint64_t))(*(_QWORD *)v163 + 72))(v163);
                  v165 = (*(double (**)(uint64_t))(*(_QWORD *)v159 + 632))(v159);
                  v154 = v242;
                  v166 = vabdd_f64(v164, v165);
                  if (v162 < v166)
                    ++v156;
                  a2 = v248;
                  if (v162 < v166)
                    v155 = v157;
                }
                v167 = &v251[v154];
                v168 = *(_QWORD *)(*v156 + 8);
                v169 = *(_QWORD *)(*v167 + 8);
                v170 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                v171 = (*(double (**)(uint64_t))(*(_QWORD *)v170 + 72))(v170);
                v172 = vabdd_f64(v171, (*(double (**)(uint64_t))(*(_QWORD *)v168 + 632))(v168));
                v173 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                v174 = (*(double (**)(uint64_t))(*(_QWORD *)v173 + 72))(v173);
                v175 = (*(double (**)(uint64_t))(*(_QWORD *)v169 + 632))(v169);
                v154 = v242;
                if (v172 >= vabdd_f64(v174, v175))
                {
                  v244 = *v167;
                  do
                  {
                    v182 = v156;
                    *v167 = *v156;
                    if (v246 < v155)
                      break;
                    v183 = (2 * v155) | 1;
                    v156 = &v251[v183];
                    if (2 * v155 + 2 < (uint64_t)v12)
                    {
                      v184 = *(_QWORD *)(*v156 + 8);
                      v185 = *(_QWORD *)(v156[1] + 8);
                      v186 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                      v187 = (*(double (**)(uint64_t))(*(_QWORD *)v186 + 72))(v186);
                      LODWORD(v184) = vabdd_f64(v187, (*(double (**)(uint64_t))(*(_QWORD *)v184 + 632))(v184));
                      v188 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                      v189 = (*(double (**)(uint64_t))(*(_QWORD *)v188 + 72))(v188);
                      if (v184 < vabdd_f64(v189, (*(double (**)(uint64_t))(*(_QWORD *)v185+ 632))(v185)))
                      {
                        ++v156;
                        v183 = 2 * v155 + 2;
                      }
                    }
                    v176 = *(_QWORD *)(*v156 + 8);
                    v177 = *(_QWORD *)(v244 + 8);
                    v178 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                    v179 = (*(double (**)(uint64_t))(*(_QWORD *)v178 + 72))(v178);
                    LODWORD(v176) = vabdd_f64(v179, (*(double (**)(uint64_t))(*(_QWORD *)v176 + 632))(v176));
                    v180 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                    v181 = (*(double (**)(uint64_t))(*(_QWORD *)v180 + 72))(v180);
                    v167 = v182;
                    v155 = v183;
                  }
                  while (v176 >= vabdd_f64(v181, (*(double (**)(uint64_t))(*(_QWORD *)v177+ 632))(v177)));
                  v154 = v242;
                  *v182 = v244;
                  a2 = v248;
                }
              }
              v153 = v154 - 1;
            }
            while (v154);
            v190 = (unint64_t)v11 >> 3;
            v191 = v251;
            do
            {
              v193 = 0;
              v247 = *v191;
              v249 = a2;
              v194 = v191;
              do
              {
                v195 = (uint64_t)&v194[v193 + 1];
                v196 = (2 * v193) | 1;
                v197 = 2 * v193 + 2;
                if (v197 < v190)
                {
                  v198 = *(_QWORD *)(*(_QWORD *)v195 + 8);
                  v199 = *(_QWORD *)(v194[v193 + 2] + 8);
                  v200 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                  v201 = (*(double (**)(uint64_t))(*(_QWORD *)v200 + 72))(v200);
                  LODWORD(v198) = vabdd_f64(v201, (*(double (**)(uint64_t))(*(_QWORD *)v198 + 632))(v198));
                  v202 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                  v203 = (*(double (**)(uint64_t))(*(_QWORD *)v202 + 72))(v202);
                  if (v198 < vabdd_f64(v203, (*(double (**)(uint64_t))(*(_QWORD *)v199 + 632))(v199)))
                  {
                    v195 += 8;
                    v196 = v197;
                  }
                }
                *v194 = *(_QWORD *)v195;
                v194 = (_QWORD *)v195;
                v193 = v196;
              }
              while (v196 <= (uint64_t)((unint64_t)(v190 - 2) >> 1));
              a2 = v249 - 1;
              if ((uint64_t *)v195 == v249 - 1)
              {
                *(_QWORD *)v195 = v247;
                v191 = v251;
              }
              else
              {
                *(_QWORD *)v195 = *a2;
                *a2 = v247;
                v191 = v251;
                v204 = v195 - (_QWORD)v251 + 8;
                if (v204 >= 9)
                {
                  v205 = (((unint64_t)v204 >> 3) - 2) >> 1;
                  v206 = &v251[v205];
                  v207 = *(_QWORD *)(*v206 + 8);
                  v208 = *(_QWORD *)(*(_QWORD *)v195 + 8);
                  v209 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                  v210 = (*(double (**)(uint64_t))(*(_QWORD *)v209 + 72))(v209);
                  LODWORD(v207) = vabdd_f64(v210, (*(double (**)(uint64_t))(*(_QWORD *)v207 + 632))(v207));
                  v211 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                  v212 = (*(double (**)(uint64_t))(*(_QWORD *)v211 + 72))(v211);
                  if (v207 < vabdd_f64(v212, (*(double (**)(uint64_t))(*(_QWORD *)v208 + 632))(v208)))
                  {
                    v250 = v249 - 1;
                    v213 = *(_QWORD *)v195;
                    do
                    {
                      v214 = v206;
                      *(_QWORD *)v195 = *v206;
                      if (!v205)
                        break;
                      v205 = (v205 - 1) >> 1;
                      v206 = &v251[v205];
                      v215 = *(_QWORD *)(*v206 + 8);
                      v216 = *(_QWORD *)(v213 + 8);
                      v217 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                      v218 = (*(double (**)(uint64_t))(*(_QWORD *)v217 + 72))(v217);
                      LODWORD(v215) = vabdd_f64(v218, (*(double (**)(uint64_t))(*(_QWORD *)v215 + 632))(v215));
                      v219 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                      v220 = (*(double (**)(uint64_t))(*(_QWORD *)v219 + 72))(v219);
                      v195 = (uint64_t)v214;
                    }
                    while (v215 < vabdd_f64(v220, (*(double (**)(uint64_t))(*(_QWORD *)v216 + 632))(v216)));
                    *v214 = v213;
                    a2 = v250;
                  }
                }
              }
            }
            while (v190-- > 2);
          }
          return;
        }
        v13 = v12 >> 1;
        v14 = &v9[v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(&v10[v12 >> 1], v10, v245, a3);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(v10, &v10[v12 >> 1], v245, a3);
          v15 = v13;
          v16 = &v10[v13];
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(v10 + 1, v16 - 1, v241, a3);
          v17 = &v10[v15 + 1];
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(v251 + 2, v17, v240, a3);
          v10 = v251;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(v16 - 1, v14, v17, a3);
          v18 = *v251;
          *v251 = *v16;
          *v16 = v18;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v19 = *(_QWORD *)(*(v10 - 1) + 8);
          v20 = *(_QWORD *)(*v10 + 8);
          v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
          v22 = (*(double (**)(uint64_t))(*(_QWORD *)v21 + 72))(v21);
          v23 = vabdd_f64(v22, (*(double (**)(uint64_t))(*(_QWORD *)v19 + 632))(v19));
          v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
          v25 = (*(double (**)(uint64_t))(*(_QWORD *)v24 + 72))(v24);
          if (v23 >= vabdd_f64(v25, (*(double (**)(uint64_t))(*(_QWORD *)v20 + 632))(v20)))
          {
            v9 = v10;
            v72 = *v10;
            v73 = *(_QWORD *)(v72 + 8);
            v74 = *(_QWORD *)(*v245 + 8);
            v75 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
            v76 = (*(double (**)(uint64_t))(*(_QWORD *)v75 + 72))(v75);
            v77 = vabdd_f64(v76, (*(double (**)(uint64_t))(*(_QWORD *)v73 + 632))(v73));
            v78 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
            v79 = (*(double (**)(uint64_t))(*(_QWORD *)v78 + 72))(v78);
            if (v77 >= vabdd_f64(v79, (*(double (**)(uint64_t))(*(_QWORD *)v74 + 632))(v74)))
            {
              v88 = v9 + 1;
              do
              {
                v9 = v88;
                if (v88 >= v248)
                  break;
                ++v88;
                v89 = *(_QWORD *)(v72 + 8);
                v90 = *(_QWORD *)(*v9 + 8);
                v91 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                v92 = (*(double (**)(uint64_t))(*(_QWORD *)v91 + 72))(v91);
                v93 = vabdd_f64(v92, (*(double (**)(uint64_t))(*(_QWORD *)v89 + 632))(v89));
                v94 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                v95 = (*(double (**)(uint64_t))(*(_QWORD *)v94 + 72))(v94);
              }
              while (v93 >= vabdd_f64(v95, (*(double (**)(uint64_t))(*(_QWORD *)v90 + 632))(v90)));
            }
            else
            {
              do
              {
                v80 = v9[1];
                ++v9;
                v81 = *(_QWORD *)(v72 + 8);
                v82 = *(_QWORD *)(v80 + 8);
                v83 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                v84 = (*(double (**)(uint64_t))(*(_QWORD *)v83 + 72))(v83);
                v85 = vabdd_f64(v84, (*(double (**)(uint64_t))(*(_QWORD *)v81 + 632))(v81));
                v86 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                v87 = (*(double (**)(uint64_t))(*(_QWORD *)v86 + 72))(v86);
              }
              while (v85 >= vabdd_f64(v87, (*(double (**)(uint64_t))(*(_QWORD *)v82 + 632))(v82)));
            }
            v96 = v248;
            if (v9 < v248)
            {
              v96 = v248;
              do
              {
                v97 = *--v96;
                v98 = *(_QWORD *)(v72 + 8);
                v99 = *(_QWORD *)(v97 + 8);
                v100 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                v101 = (*(double (**)(uint64_t))(*(_QWORD *)v100 + 72))(v100);
                v102 = vabdd_f64(v101, (*(double (**)(uint64_t))(*(_QWORD *)v98 + 632))(v98));
                v103 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                v104 = (*(double (**)(uint64_t))(*(_QWORD *)v103 + 72))(v103);
              }
              while (v102 < vabdd_f64(v104, (*(double (**)(uint64_t))(*(_QWORD *)v99 + 632))(v99)));
            }
            while (v9 < v96)
            {
              v105 = *v9;
              *v9 = *v96;
              *v96 = v105;
              do
              {
                v106 = v9[1];
                ++v9;
                v107 = *(_QWORD *)(v72 + 8);
                v108 = *(_QWORD *)(v106 + 8);
                v109 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                v110 = (*(double (**)(uint64_t))(*(_QWORD *)v109 + 72))(v109);
                v111 = vabdd_f64(v110, (*(double (**)(uint64_t))(*(_QWORD *)v107 + 632))(v107));
                v112 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                v113 = (*(double (**)(uint64_t))(*(_QWORD *)v112 + 72))(v112);
              }
              while (v111 >= vabdd_f64(v113, (*(double (**)(uint64_t))(*(_QWORD *)v108 + 632))(v108)));
              do
              {
                v114 = *--v96;
                v115 = *(_QWORD *)(v72 + 8);
                v116 = *(_QWORD *)(v114 + 8);
                v117 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                v118 = (*(double (**)(uint64_t))(*(_QWORD *)v117 + 72))(v117);
                v119 = vabdd_f64(v118, (*(double (**)(uint64_t))(*(_QWORD *)v115 + 632))(v115));
                v120 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
                v121 = (*(double (**)(uint64_t))(*(_QWORD *)v120 + 72))(v120);
              }
              while (v119 < vabdd_f64(v121, (*(double (**)(uint64_t))(*(_QWORD *)v116 + 632))(v116)));
            }
            v122 = v9 - 1;
            if (v9 - 1 != v251)
              *v251 = *v122;
            a5 = 0;
            *v122 = v72;
            a2 = v248;
            continue;
          }
        }
        v26 = *v10;
        v27 = v10;
        do
        {
          v28 = v27;
          v29 = v27[1];
          ++v27;
          v30 = *(_QWORD *)(v29 + 8);
          v31 = *(_QWORD *)(v26 + 8);
          v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
          v33 = (*(double (**)(uint64_t))(*(_QWORD *)v32 + 72))(v32);
          v34 = vabdd_f64(v33, (*(double (**)(uint64_t))(*(_QWORD *)v30 + 632))(v30));
          v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
          v36 = (*(double (**)(uint64_t))(*(_QWORD *)v35 + 72))(v35);
        }
        while (v34 < vabdd_f64(v36, (*(double (**)(uint64_t))(*(_QWORD *)v31 + 632))(v31)));
        if (v28 == v10)
        {
          a2 = v248;
          do
          {
            if (v27 >= a2)
              break;
            v45 = *--a2;
            v46 = *(_QWORD *)(v45 + 8);
            v47 = *(_QWORD *)(v26 + 8);
            v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
            v49 = (*(double (**)(uint64_t))(*(_QWORD *)v48 + 72))(v48);
            v50 = vabdd_f64(v49, (*(double (**)(uint64_t))(*(_QWORD *)v46 + 632))(v46));
            v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
            v52 = (*(double (**)(uint64_t))(*(_QWORD *)v51 + 72))(v51);
          }
          while (v50 >= vabdd_f64(v52, (*(double (**)(uint64_t))(*(_QWORD *)v47 + 632))(v47)));
        }
        else
        {
          do
          {
            v37 = *--a2;
            v38 = *(_QWORD *)(v37 + 8);
            v39 = *(_QWORD *)(v26 + 8);
            v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
            v41 = (*(double (**)(uint64_t))(*(_QWORD *)v40 + 72))(v40);
            v42 = vabdd_f64(v41, (*(double (**)(uint64_t))(*(_QWORD *)v38 + 632))(v38));
            v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
            v44 = (*(double (**)(uint64_t))(*(_QWORD *)v43 + 72))(v43);
          }
          while (v42 >= vabdd_f64(v44, (*(double (**)(uint64_t))(*(_QWORD *)v39 + 632))(v39)));
        }
        if (v27 < a2)
        {
          v53 = v27;
          v54 = a2;
          do
          {
            v55 = *v53;
            *v53 = *v54;
            *v54 = v55;
            do
            {
              v28 = v53;
              v56 = v53[1];
              ++v53;
              v57 = *(_QWORD *)(v56 + 8);
              v58 = *(_QWORD *)(v26 + 8);
              v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
              v60 = (*(double (**)(uint64_t))(*(_QWORD *)v59 + 72))(v59);
              LODWORD(v57) = vabdd_f64(v60, (*(double (**)(uint64_t))(*(_QWORD *)v57 + 632))(v57));
              v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
              v62 = (*(double (**)(uint64_t))(*(_QWORD *)v61 + 72))(v61);
            }
            while (v57 < vabdd_f64(v62, (*(double (**)(uint64_t))(*(_QWORD *)v58 + 632))(v58)));
            do
            {
              v63 = *--v54;
              v64 = *(_QWORD *)(v63 + 8);
              v65 = *(_QWORD *)(v26 + 8);
              v66 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
              v67 = (*(double (**)(uint64_t))(*(_QWORD *)v66 + 72))(v66);
              LODWORD(v64) = vabdd_f64(v67, (*(double (**)(uint64_t))(*(_QWORD *)v64 + 632))(v64));
              v68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
              v69 = (*(double (**)(uint64_t))(*(_QWORD *)v68 + 72))(v68);
            }
            while (v64 >= vabdd_f64(v69, (*(double (**)(uint64_t))(*(_QWORD *)v65 + 632))(v65)));
          }
          while (v53 < v54);
        }
        a1 = v251;
        if (v28 != v251)
          *v251 = *v28;
        *v28 = v26;
        v70 = v27 >= a2;
        a2 = v248;
        if (!v70)
        {
LABEL_30:
          std::__introsort<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **,false>(v251, v28, a3, a4, a5 & 1);
          a5 = 0;
          v9 = v28 + 1;
          continue;
        }
        v71 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(v251, v28, a3);
        v9 = v28 + 1;
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(v28 + 1, v248, a3))
        {
          if (v71)
            continue;
          goto LABEL_30;
        }
        a2 = v28;
        if (!v71)
          goto LABEL_1;
        return;
    }
  }
}

  v143 = a2;
  v145 = a2 - 2;
  v141 = a2 - 6;
  v142 = a2 - 4;
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, v145, a1))
        {
          v51 = *a1;
          *a1 = *(a2 - 2);
          *(a2 - 2) = v51;
          v52 = a1[1];
          a1[1] = *(a2 - 1);
          *(a2 - 1) = v52;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *>(a1, a1 + 2, v145, a3);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *>(a1, a1 + 2, a1 + 4, v145, a3);
        return;
      case 5uLL:
        std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *,0>(a1, a1 + 2, a1 + 4, a1 + 6, v145, a3);
        return;
      default:
        if (v11 <= 383)
        {
          if ((a5 & 1) != 0)
          {
            if (a1 != a2)
            {
              v53 = a1 + 2;
              if (a1 + 2 != a2)
              {
                v54 = a1;
                do
                {
                  v55 = v53;
                  if (md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, v53, v54))
                  {
                    v148 = *(_OWORD *)v55;
                    *v55 = 0;
                    v55[1] = 0;
                    v56 = v55;
                    while (1)
                    {
                      v57 = v56;
                      v56 = v54;
                      v58 = *(_OWORD *)v54;
                      *v54 = 0;
                      v54[1] = 0;
                      v59 = (std::__shared_weak_count *)v57[1];
                      *(_OWORD *)v57 = v58;
                      if (v59)
                      {
                        p_shared_owners = (unint64_t *)&v59->__shared_owners_;
                        do
                          v61 = __ldaxr(p_shared_owners);
                        while (__stlxr(v61 - 1, p_shared_owners));
                        if (!v61)
                        {
                          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                          std::__shared_weak_count::__release_weak(v59);
                        }
                      }
                      if (v56 == a1)
                        break;
                      v54 = v56 - 2;
                      if ((md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, (unint64_t *)&v148, v56 - 2) & 1) == 0)goto LABEL_100;
                    }
                    v56 = a1;
LABEL_100:
                    v62 = v148;
                    v148 = 0uLL;
                    v63 = (std::__shared_weak_count *)v56[1];
                    *(_OWORD *)v56 = v62;
                    if (v63)
                    {
                      v64 = (unint64_t *)&v63->__shared_owners_;
                      do
                        v65 = __ldaxr(v64);
                      while (__stlxr(v65 - 1, v64));
                      if (!v65)
                      {
                        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                        std::__shared_weak_count::__release_weak(v63);
                      }
                    }
                    v66 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
                    if (*((_QWORD *)&v148 + 1))
                    {
                      v67 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
                      do
                        v68 = __ldaxr(v67);
                      while (__stlxr(v68 - 1, v67));
                      if (!v68)
                      {
                        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                        std::__shared_weak_count::__release_weak(v66);
                      }
                    }
                  }
                  v53 = v55 + 2;
                  v54 = v55;
                }
                while (v55 + 2 != a2);
              }
            }
          }
          else if (a1 != a2)
          {
            v126 = a1 + 2;
            while (v126 != a2)
            {
              v127 = v126;
              if (md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, v126, a1))
              {
                v148 = *(_OWORD *)v127;
                *v127 = 0;
                v127[1] = 0;
                v128 = v127;
                do
                {
                  v129 = v128;
                  v128 = a1;
                  v130 = *(_OWORD *)a1;
                  *a1 = 0;
                  a1[1] = 0;
                  v131 = (std::__shared_weak_count *)v129[1];
                  *(_OWORD *)v129 = v130;
                  if (v131)
                  {
                    v132 = (unint64_t *)&v131->__shared_owners_;
                    do
                      v133 = __ldaxr(v132);
                    while (__stlxr(v133 - 1, v132));
                    if (!v133)
                    {
                      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                      std::__shared_weak_count::__release_weak(v131);
                    }
                  }
                  a1 -= 2;
                }
                while ((md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, (unint64_t *)&v148, v128 - 2) & 1) != 0);
                v134 = v148;
                v148 = 0uLL;
                v135 = (std::__shared_weak_count *)v128[1];
                *(_OWORD *)v128 = v134;
                if (v135)
                {
                  v136 = (unint64_t *)&v135->__shared_owners_;
                  do
                    v137 = __ldaxr(v136);
                  while (__stlxr(v137 - 1, v136));
                  if (!v137)
                  {
                    ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                    std::__shared_weak_count::__release_weak(v135);
                  }
                }
                v138 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
                if (*((_QWORD *)&v148 + 1))
                {
                  v139 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
                  do
                    v140 = __ldaxr(v139);
                  while (__stlxr(v140 - 1, v139));
                  if (!v140)
                  {
                    ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                    std::__shared_weak_count::__release_weak(v138);
                  }
                }
              }
              v126 = v127 + 2;
              a1 = v127;
            }
          }
          return;
        }
        if (!a4)
        {
          if (a1 == a2)
            return;
          v69 = (v12 - 2) >> 1;
          v146 = v69;
          do
          {
            v70 = v69;
            if (v146 >= v69)
            {
              v71 = (2 * v69) | 1;
              v72 = &a1[2 * v71];
              if (2 * v69 + 2 < (uint64_t)v12
                && md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, &a1[2 * v71], v72 + 2))
              {
                v72 += 2;
                v71 = 2 * v70 + 2;
              }
              v73 = &a1[2 * v70];
              a2 = v143;
              if ((md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, v72, v73) & 1) == 0)
              {
                v148 = *(_OWORD *)v73;
                *v73 = 0;
                v73[1] = 0;
                do
                {
                  v74 = v72;
                  v75 = *(_OWORD *)v72;
                  *v72 = 0;
                  v72[1] = 0;
                  v76 = (std::__shared_weak_count *)v73[1];
                  *(_OWORD *)v73 = v75;
                  if (v76)
                  {
                    v77 = (unint64_t *)&v76->__shared_owners_;
                    do
                      v78 = __ldaxr(v77);
                    while (__stlxr(v78 - 1, v77));
                    if (!v78)
                    {
                      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                      std::__shared_weak_count::__release_weak(v76);
                    }
                  }
                  if (v146 < v71)
                    break;
                  v79 = (2 * v71) | 1;
                  v72 = &a1[2 * v79];
                  v71 = 2 * v71 + 2;
                  if (v71 >= (uint64_t)v12)
                  {
                    v71 = v79;
                  }
                  else if (md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, &a1[2 * v79], v72 + 2))
                  {
                    v72 += 2;
                  }
                  else
                  {
                    v71 = v79;
                  }
                  v73 = v74;
                }
                while (!md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, v72, (unint64_t *)&v148));
                v80 = v148;
                v148 = 0uLL;
                v81 = (std::__shared_weak_count *)v74[1];
                *(_OWORD *)v74 = v80;
                if (v81)
                {
                  v82 = (unint64_t *)&v81->__shared_owners_;
                  do
                    v83 = __ldaxr(v82);
                  while (__stlxr(v83 - 1, v82));
                  if (!v83)
                  {
                    ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                    std::__shared_weak_count::__release_weak(v81);
                  }
                }
                v84 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
                a2 = v143;
                if (*((_QWORD *)&v148 + 1))
                {
                  v85 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
                  do
                    v86 = __ldaxr(v85);
                  while (__stlxr(v86 - 1, v85));
                  if (!v86)
                  {
                    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                    std::__shared_weak_count::__release_weak(v84);
                  }
                }
              }
            }
            v69 = v70 - 1;
          }
          while (v70);
          v87 = (unint64_t)v11 >> 4;
          while (2)
          {
            v89 = a2;
            v90 = 0;
            v144 = *a1;
            v147 = a1[1];
            *a1 = 0;
            a1[1] = 0;
            v91 = a1;
            do
            {
              v92 = v91;
              v91 += 2 * v90 + 2;
              v93 = 2 * v90;
              v90 = (2 * v90) | 1;
              v94 = v93 + 2;
              if (v93 + 2 < v87
                && md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, v91, v91 + 2))
              {
                v91 += 2;
                v90 = v94;
              }
              v95 = *(_OWORD *)v91;
              *v91 = 0;
              v91[1] = 0;
              v96 = (std::__shared_weak_count *)v92[1];
              *(_OWORD *)v92 = v95;
              if (v96)
              {
                v97 = (unint64_t *)&v96->__shared_owners_;
                do
                  v98 = __ldaxr(v97);
                while (__stlxr(v98 - 1, v97));
                if (!v98)
                {
                  ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                  std::__shared_weak_count::__release_weak(v96);
                }
              }
            }
            while (v90 <= (uint64_t)((unint64_t)(v87 - 2) >> 1));
            a2 = v89 - 2;
            if (v91 == v89 - 2)
            {
              v123 = (std::__shared_weak_count *)v91[1];
              *v91 = v144;
              v91[1] = v147;
              if (v123)
              {
                v124 = (unint64_t *)&v123->__shared_owners_;
                do
                  v125 = __ldaxr(v124);
                while (__stlxr(v125 - 1, v124));
                if (!v125)
                {
                  ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                  v122 = v123;
LABEL_142:
                  std::__shared_weak_count::__release_weak(v122);
                }
              }
            }
            else
            {
              v99 = *((_OWORD *)v89 - 1);
              *a2 = 0;
              *(v89 - 1) = 0;
              v100 = (std::__shared_weak_count *)v91[1];
              *(_OWORD *)v91 = v99;
              if (v100)
              {
                v101 = (unint64_t *)&v100->__shared_owners_;
                do
                  v102 = __ldaxr(v101);
                while (__stlxr(v102 - 1, v101));
                if (!v102)
                {
                  ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                  std::__shared_weak_count::__release_weak(v100);
                }
              }
              v103 = (std::__shared_weak_count *)*(v89 - 1);
              *(v89 - 2) = v144;
              *(v89 - 1) = v147;
              if (v103)
              {
                v104 = (unint64_t *)&v103->__shared_owners_;
                do
                  v105 = __ldaxr(v104);
                while (__stlxr(v105 - 1, v104));
                if (!v105)
                {
                  ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                  std::__shared_weak_count::__release_weak(v103);
                }
              }
              v106 = (char *)(v91 + 2) - (char *)a1;
              if (v106 >= 17)
              {
                v107 = (((unint64_t)v106 >> 4) - 2) >> 1;
                v108 = &a1[2 * v107];
                if (md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, v108, v91))
                {
                  v109 = v89 - 2;
                  v148 = *(_OWORD *)v91;
                  *v91 = 0;
                  v91[1] = 0;
                  do
                  {
                    v110 = v108;
                    v111 = *(_OWORD *)v108;
                    *v108 = 0;
                    v108[1] = 0;
                    v112 = (std::__shared_weak_count *)v91[1];
                    *(_OWORD *)v91 = v111;
                    if (v112)
                    {
                      v113 = (unint64_t *)&v112->__shared_owners_;
                      do
                        v114 = __ldaxr(v113);
                      while (__stlxr(v114 - 1, v113));
                      if (!v114)
                      {
                        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                        std::__shared_weak_count::__release_weak(v112);
                      }
                    }
                    if (!v107)
                      break;
                    v107 = (v107 - 1) >> 1;
                    v108 = &a1[2 * v107];
                    v91 = v110;
                  }
                  while ((md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, v108, (unint64_t *)&v148) & 1) != 0);
                  v115 = v148;
                  v148 = 0uLL;
                  v116 = (std::__shared_weak_count *)v110[1];
                  *(_OWORD *)v110 = v115;
                  if (v116)
                  {
                    v117 = (unint64_t *)&v116->__shared_owners_;
                    do
                      v118 = __ldaxr(v117);
                    while (__stlxr(v118 - 1, v117));
                    if (!v118)
                    {
                      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                      std::__shared_weak_count::__release_weak(v116);
                    }
                  }
                  v119 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
                  a2 = v109;
                  if (*((_QWORD *)&v148 + 1))
                  {
                    v120 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
                    do
                      v121 = __ldaxr(v120);
                    while (__stlxr(v121 - 1, v120));
                    if (!v121)
                    {
                      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                      v122 = v119;
                      goto LABEL_142;
                    }
                  }
                }
              }
            }
            if (v87-- <= 2)
              return;
            continue;
          }
        }
        if ((unint64_t)v11 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *>(&a1[2 * (v12 >> 1)], a1, v145, a3);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *>(a1, &a1[2 * (v12 >> 1)], v145, a3);
          v13 = 2 * (v12 >> 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *>(a1 + 2, &a1[v13 - 2], v142, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *>(a1 + 4, &a1[v13 + 2], v141, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *>(&a1[v13 - 2], &a1[v13], &a1[v13 + 2], a3);
          v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)&a1[v13];
          *(_OWORD *)&a1[v13] = v14;
        }
        --a4;
        a2 = v143;
        if ((a5 & 1) == 0
          && (md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, a1 - 2, a1) & 1) == 0)
        {
          v33 = a1[1];
          *(_QWORD *)&v148 = *a1;
          *((_QWORD *)&v148 + 1) = v33;
          *a1 = 0;
          a1[1] = 0;
          if ((md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, (unint64_t *)&v148, v145) & 1) != 0)
          {
            v10 = a1;
            do
              v10 += 2;
            while ((md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, (unint64_t *)&v148, v10) & 1) == 0);
          }
          else
          {
            v34 = a1 + 2;
            do
            {
              v10 = v34;
              if (v34 >= v143)
                break;
              v35 = md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, (unint64_t *)&v148, v34);
              v34 = v10 + 2;
            }
            while (!v35);
          }
          v36 = v143;
          if (v10 < v143)
          {
            v36 = v143;
            do
              v36 -= 2;
            while ((md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, (unint64_t *)&v148, v36) & 1) != 0);
          }
          while (v10 < v36)
          {
            v37 = *v10;
            *v10 = *v36;
            *v36 = v37;
            v38 = v10[1];
            v10[1] = v36[1];
            v36[1] = v38;
            do
              v10 += 2;
            while (!md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, (unint64_t *)&v148, v10));
            do
              v36 -= 2;
            while ((md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, (unint64_t *)&v148, v36) & 1) != 0);
          }
          v39 = v10 - 2;
          if (v10 - 2 != a1)
          {
            v40 = *(_OWORD *)v39;
            *v39 = 0;
            *(v10 - 1) = 0;
            v41 = (std::__shared_weak_count *)a1[1];
            *(_OWORD *)a1 = v40;
            if (v41)
            {
              v42 = (unint64_t *)&v41->__shared_owners_;
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 - 1, v42));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
          }
          v44 = v148;
          v148 = 0uLL;
          v45 = (std::__shared_weak_count *)*(v10 - 1);
          *((_OWORD *)v10 - 1) = v44;
          if (v45)
          {
            v46 = (unint64_t *)&v45->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          v48 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
          if (*((_QWORD *)&v148 + 1))
          {
            v49 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          a5 = 0;
          continue;
        }
        v148 = *(_OWORD *)a1;
        *a1 = 0;
        a1[1] = 0;
        v15 = a1;
        do
          v15 += 2;
        while ((md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, v15, (unint64_t *)&v148) & 1) != 0);
        v16 = v143;
        if (v15 - 2 == a1)
        {
          v16 = v143;
          do
          {
            if (v15 >= v16)
              break;
            v16 -= 2;
          }
          while ((md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, v16, (unint64_t *)&v148) & 1) == 0);
        }
        else
        {
          do
            v16 -= 2;
          while (!md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, v16, (unint64_t *)&v148));
        }
        v10 = v15;
        if (v15 < v16)
        {
          v17 = v16;
          do
          {
            v18 = *v10;
            *v10 = *v17;
            *v17 = v18;
            v19 = v10[1];
            v10[1] = v17[1];
            v17[1] = v19;
            do
              v10 += 2;
            while ((md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, v10, (unint64_t *)&v148) & 1) != 0);
            do
              v17 -= 2;
            while (!md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, v17, (unint64_t *)&v148));
          }
          while (v10 < v17);
        }
        v20 = v10 - 2;
        if (v10 - 2 != a1)
        {
          v21 = *(_OWORD *)v20;
          *v20 = 0;
          *(v10 - 1) = 0;
          v22 = (std::__shared_weak_count *)a1[1];
          *(_OWORD *)a1 = v21;
          if (v22)
          {
            v23 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
        }
        v25 = v148;
        v148 = 0uLL;
        v26 = (std::__shared_weak_count *)*(v10 - 1);
        *((_OWORD *)v10 - 1) = v25;
        if (!v26)
          goto LABEL_34;
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
          v29 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
          if (*((_QWORD *)&v148 + 1))
          {
LABEL_35:
            v30 = (unint64_t *)&v29->__shared_owners_;
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
        }
        else
        {
LABEL_34:
          v29 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
          if (*((_QWORD *)&v148 + 1))
            goto LABEL_35;
        }
        if (v15 < v16)
        {
LABEL_43:
          std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *,false>(a1, v10 - 2, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v32 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *>(a1, v10 - 2, a3);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *>(v10, v143, a3))
        {
          if (v32)
            continue;
          goto LABEL_43;
        }
        a2 = v10 - 2;
        if (!v32)
          goto LABEL_1;
        return;
    }
  }
}

  v209 = a2 - 2;
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = (char *)a2 - (char *)v7;
    v9 = ((char *)a2 - (char *)v7) >> 4;
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v85 = *v209;
        v86 = *v7;
        if (*v209 != *v7)
        {
          v87 = *(_QWORD *)(v85 + 24);
          v88 = *(_QWORD *)(v86 + 24);
          v89 = v87 >= v88;
          if (v87 == v88)
            v89 = *(_DWORD *)(v85 + 32) >= *(_DWORD *)(v86 + 32);
          if (!v89)
          {
            *v7 = v85;
            *(a2 - 2) = v86;
            v90 = v7[1];
            v7[1] = *(a2 - 1);
            *(a2 - 1) = v90;
          }
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *>(v7, v7 + 2, v209);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *>(v7, v7 + 2, v7 + 4, v209);
        return;
      case 5uLL:
        std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *,0>(v7, v7 + 2, v7 + 4, v7 + 6, v209);
        return;
      default:
        if (v8 <= 383)
        {
          v91 = v7 + 2;
          v93 = v7 == a2 || v91 == a2;
          if ((a4 & 1) != 0)
          {
            if (v93)
              return;
            v94 = v7;
            while (1)
            {
              v95 = v94;
              v94 = v91;
              v96 = v95[2];
              v97 = *v95;
              if (v96 != *v95)
              {
                v98 = *(_QWORD *)(v96 + 24);
                v99 = *(_QWORD *)(v97 + 24);
                if (v98 == v99)
                {
                  if (*(_DWORD *)(v96 + 32) < *(_DWORD *)(v97 + 32))
                  {
LABEL_151:
                    v100 = v95[3];
                    v101 = v94;
                    *v94 = 0;
                    v94[1] = 0;
                    while (1)
                    {
                      v102 = v101;
                      v101 = v95;
                      v103 = v95[1];
                      *v101 = 0;
                      v101[1] = 0;
                      v104 = (std::__shared_weak_count *)v102[1];
                      *v102 = v97;
                      v102[1] = v103;
                      if (v104)
                      {
                        p_shared_owners = (unint64_t *)&v104->__shared_owners_;
                        do
                          v106 = __ldaxr(p_shared_owners);
                        while (__stlxr(v106 - 1, p_shared_owners));
                        if (!v106)
                        {
                          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                          std::__shared_weak_count::__release_weak(v104);
                        }
                      }
                      if (v101 == a1)
                        break;
                      v95 = v101 - 2;
                      v97 = *(v101 - 2);
                      if (v96 != v97)
                      {
                        v107 = *(_QWORD *)(v96 + 24);
                        v108 = *(_QWORD *)(v97 + 24);
                        v109 = v107 >= v108;
                        if (v107 == v108)
                          v109 = *(_DWORD *)(v96 + 32) >= *(_DWORD *)(v97 + 32);
                        if (!v109)
                          continue;
                      }
                      goto LABEL_163;
                    }
                    v101 = a1;
LABEL_163:
                    v110 = (std::__shared_weak_count *)v101[1];
                    *v101 = v96;
                    v101[1] = v100;
                    if (v110)
                    {
                      v111 = (unint64_t *)&v110->__shared_owners_;
                      do
                        v112 = __ldaxr(v111);
                      while (__stlxr(v112 - 1, v111));
                      if (!v112)
                      {
                        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                        std::__shared_weak_count::__release_weak(v110);
                      }
                    }
                  }
                }
                else if (v98 < v99)
                {
                  goto LABEL_151;
                }
              }
              v91 = v94 + 2;
              if (v94 + 2 == a2)
                return;
            }
          }
          if (v93)
            return;
          while (1)
          {
            v190 = a1;
            a1 = v91;
            v191 = v190[2];
            v192 = *v190;
            if (v191 != *v190)
            {
              v193 = *(_QWORD *)(v191 + 24);
              v194 = *(_QWORD *)(v192 + 24);
              if (v193 == v194)
              {
                if (*(_DWORD *)(v191 + 32) < *(_DWORD *)(v192 + 32))
                {
LABEL_269:
                  v195 = v190[3];
                  v196 = a1;
                  *a1 = 0;
                  a1[1] = 0;
                  do
                  {
                    v197 = v196;
                    v196 = v190;
                    v198 = v190[1];
                    *v196 = 0;
                    v196[1] = 0;
                    v199 = (std::__shared_weak_count *)v197[1];
                    *v197 = v192;
                    v197[1] = v198;
                    if (v199)
                    {
                      v200 = (unint64_t *)&v199->__shared_owners_;
                      do
                        v201 = __ldaxr(v200);
                      while (__stlxr(v201 - 1, v200));
                      if (!v201)
                      {
                        ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                        std::__shared_weak_count::__release_weak(v199);
                      }
                    }
                    v190 = v196 - 2;
                    v192 = *(v196 - 2);
                    if (v191 == v192)
                      break;
                    v202 = *(_QWORD *)(v191 + 24);
                    v203 = *(_QWORD *)(v192 + 24);
                    v204 = v202 >= v203;
                    if (v202 == v203)
                      v204 = *(_DWORD *)(v191 + 32) >= *(_DWORD *)(v192 + 32);
                  }
                  while (!v204);
                  v205 = (std::__shared_weak_count *)v196[1];
                  *v196 = v191;
                  v196[1] = v195;
                  if (v205)
                  {
                    v206 = (unint64_t *)&v205->__shared_owners_;
                    do
                      v207 = __ldaxr(v206);
                    while (__stlxr(v207 - 1, v206));
                    if (!v207)
                    {
                      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                      std::__shared_weak_count::__release_weak(v205);
                    }
                  }
                }
              }
              else if (v193 < v194)
              {
                goto LABEL_269;
              }
            }
            v91 = a1 + 2;
            if (a1 + 2 == a2)
              return;
          }
        }
        if (!a3)
        {
          if (v7 == a2)
            return;
          v113 = (v9 - 2) >> 1;
          v114 = v113;
LABEL_171:
          v115 = v114;
          if (v113 < v114)
            goto LABEL_170;
          v116 = (2 * v114) | 1;
          v117 = &a1[2 * v116];
          if (2 * v115 + 2 >= (uint64_t)v9)
            goto LABEL_177;
          v118 = v117[2];
          v119 = *v117;
          if (*v117 == v118)
            goto LABEL_177;
          v120 = *(_QWORD *)(v119 + 24);
          v121 = *(_QWORD *)(v118 + 24);
          if (v120 == v121)
          {
            if (*(_DWORD *)(v119 + 32) >= *(_DWORD *)(v118 + 32))
              goto LABEL_177;
          }
          else if (v120 >= v121)
          {
LABEL_177:
            v122 = &a1[2 * v115];
            v123 = *v117;
            v124 = *v122;
            if (*v117 != *v122)
            {
              v125 = *(_QWORD *)(v123 + 24);
              v126 = *(_QWORD *)(v124 + 24);
              if (v125 == v126)
              {
                if (*(_DWORD *)(v123 + 32) < *(_DWORD *)(v124 + 32))
                  goto LABEL_170;
              }
              else if (v125 < v126)
              {
                goto LABEL_170;
              }
            }
            v210 = a1[2 * v115 + 1];
            *v122 = 0;
            v122[1] = 0;
            v127 = *v117;
            while (1)
            {
              v128 = v117;
              v129 = v117[1];
              *v128 = 0;
              v128[1] = 0;
              v130 = (std::__shared_weak_count *)v122[1];
              *v122 = v127;
              v122[1] = v129;
              if (v130)
              {
                v131 = (unint64_t *)&v130->__shared_owners_;
                do
                  v132 = __ldaxr(v131);
                while (__stlxr(v132 - 1, v131));
                if (!v132)
                {
                  ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                  std::__shared_weak_count::__release_weak(v130);
                }
              }
              if (v113 < v116)
              {
LABEL_201:
                v142 = (std::__shared_weak_count *)v128[1];
                *v128 = v124;
                v128[1] = v210;
                if (v142)
                {
                  v143 = (unint64_t *)&v142->__shared_owners_;
                  do
                    v144 = __ldaxr(v143);
                  while (__stlxr(v144 - 1, v143));
                  if (!v144)
                  {
                    ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                    std::__shared_weak_count::__release_weak(v142);
                  }
                }
LABEL_170:
                v114 = v115 - 1;
                if (v115)
                  goto LABEL_171;
                v145 = (unint64_t)v8 >> 4;
                while (2)
                {
                  v147 = 0;
                  v148 = a2;
                  v150 = *a1;
                  v149 = a1[1];
                  *a1 = 0;
                  a1[1] = 0;
                  v151 = a1;
LABEL_212:
                  v152 = v151;
                  v151 += 2 * v147 + 2;
                  v153 = 2 * v147;
                  v147 = (2 * v147) | 1;
                  v154 = v153 + 2;
                  if (v154 < v145)
                  {
                    v155 = v151[2];
                    v156 = *v151;
                    if (*v151 != v155)
                    {
                      v157 = *(_QWORD *)(v156 + 24);
                      v158 = *(_QWORD *)(v155 + 24);
                      if (v157 == v158)
                      {
                        if (*(_DWORD *)(v156 + 32) < *(_DWORD *)(v155 + 32))
                        {
LABEL_216:
                          v151 += 2;
                          v147 = v154;
                        }
                      }
                      else if (v157 < v158)
                      {
                        goto LABEL_216;
                      }
                    }
                  }
                  v159 = *(_OWORD *)v151;
                  *v151 = 0;
                  v151[1] = 0;
                  v160 = (std::__shared_weak_count *)v152[1];
                  *(_OWORD *)v152 = v159;
                  if (v160)
                  {
                    v161 = (unint64_t *)&v160->__shared_owners_;
                    do
                      v162 = __ldaxr(v161);
                    while (__stlxr(v162 - 1, v161));
                    if (!v162)
                    {
                      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                      std::__shared_weak_count::__release_weak(v160);
                    }
                  }
                  if (v147 > (uint64_t)((unint64_t)(v145 - 2) >> 1))
                  {
                    a2 = v148 - 2;
                    if (v151 == v148 - 2)
                    {
                      v177 = (std::__shared_weak_count *)v151[1];
                      *v151 = v150;
                      v151[1] = v149;
                      if (!v177)
                        goto LABEL_209;
                      v178 = (unint64_t *)&v177->__shared_owners_;
                      do
                        v179 = __ldaxr(v178);
                      while (__stlxr(v179 - 1, v178));
                      goto LABEL_259;
                    }
                    v163 = *((_OWORD *)v148 - 1);
                    *a2 = 0;
                    *(v148 - 1) = 0;
                    v164 = (std::__shared_weak_count *)v151[1];
                    *(_OWORD *)v151 = v163;
                    if (v164)
                    {
                      v165 = (unint64_t *)&v164->__shared_owners_;
                      do
                        v166 = __ldaxr(v165);
                      while (__stlxr(v166 - 1, v165));
                      if (!v166)
                      {
                        ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                        std::__shared_weak_count::__release_weak(v164);
                      }
                    }
                    v167 = (std::__shared_weak_count *)*(v148 - 1);
                    *(v148 - 2) = v150;
                    *(v148 - 1) = v149;
                    if (v167)
                    {
                      v168 = (unint64_t *)&v167->__shared_owners_;
                      do
                        v169 = __ldaxr(v168);
                      while (__stlxr(v169 - 1, v168));
                      if (!v169)
                      {
                        ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                        std::__shared_weak_count::__release_weak(v167);
                      }
                    }
                    v170 = (char *)(v151 + 2) - (char *)a1;
                    if (v170 < 17)
                      goto LABEL_209;
                    v171 = (((unint64_t)v170 >> 4) - 2) >> 1;
                    v172 = &a1[2 * v171];
                    v173 = *v172;
                    v174 = *v151;
                    if (*v172 == *v151)
                      goto LABEL_209;
                    v175 = *(_QWORD *)(v173 + 24);
                    v176 = *(_QWORD *)(v174 + 24);
                    if (v175 != v176)
                    {
                      if (v175 < v176)
                        goto LABEL_245;
                      goto LABEL_209;
                    }
                    if (*(_DWORD *)(v173 + 32) >= *(_DWORD *)(v174 + 32))
                      goto LABEL_209;
LABEL_245:
                    v180 = v151[1];
                    *v151 = 0;
                    v151[1] = 0;
                    v181 = *v172;
                    while (1)
                    {
                      v182 = v172;
                      v183 = v172[1];
                      *v182 = 0;
                      v182[1] = 0;
                      v184 = (std::__shared_weak_count *)v151[1];
                      *v151 = v181;
                      v151[1] = v183;
                      if (v184)
                      {
                        v185 = (unint64_t *)&v184->__shared_owners_;
                        do
                          v186 = __ldaxr(v185);
                        while (__stlxr(v186 - 1, v185));
                        if (!v186)
                        {
                          ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                          std::__shared_weak_count::__release_weak(v184);
                        }
                      }
                      if (!v171)
                        break;
                      v171 = (v171 - 1) >> 1;
                      v172 = &a1[2 * v171];
                      v181 = *v172;
                      if (*v172 == v174)
                        break;
                      v187 = *(_QWORD *)(v181 + 24);
                      v188 = *(_QWORD *)(v174 + 24);
                      if (v187 == v188)
                      {
                        v151 = v182;
                        if (*(_DWORD *)(v181 + 32) >= *(_DWORD *)(v174 + 32))
                          break;
                      }
                      else
                      {
                        v151 = v182;
                        if (v187 >= v188)
                          break;
                      }
                    }
                    v177 = (std::__shared_weak_count *)v182[1];
                    *v182 = v174;
                    v182[1] = v180;
                    if (v177)
                    {
                      v189 = (unint64_t *)&v177->__shared_owners_;
                      do
                        v179 = __ldaxr(v189);
                      while (__stlxr(v179 - 1, v189));
LABEL_259:
                      if (!v179)
                      {
                        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                        std::__shared_weak_count::__release_weak(v177);
                      }
                    }
LABEL_209:
                    if (v145-- <= 2)
                      return;
                    continue;
                  }
                  goto LABEL_212;
                }
              }
              v133 = 2 * v116;
              v116 = (2 * v116) | 1;
              v117 = &a1[2 * v116];
              v134 = v133 + 2;
              if (v134 < (uint64_t)v9)
              {
                v135 = v117[2];
                v136 = *v117;
                if (*v117 != v135)
                {
                  v137 = *(_QWORD *)(v136 + 24);
                  v138 = *(_QWORD *)(v135 + 24);
                  if (v137 == v138)
                  {
                    if (*(_DWORD *)(v136 + 32) >= *(_DWORD *)(v135 + 32))
                      goto LABEL_195;
LABEL_194:
                    v117 += 2;
                    v116 = v134;
                    goto LABEL_195;
                  }
                  if (v137 < v138)
                    goto LABEL_194;
                }
              }
LABEL_195:
              v127 = *v117;
              v122 = v128;
              if (*v117 != v124)
              {
                v139 = *(_QWORD *)(v127 + 24);
                v140 = *(_QWORD *)(v124 + 24);
                v141 = v139 >= v140;
                if (v139 == v140)
                {
                  v122 = v128;
                  if (*(_DWORD *)(v127 + 32) < *(_DWORD *)(v124 + 32))
                    goto LABEL_201;
                }
                else
                {
                  v122 = v128;
                  if (!v141)
                    goto LABEL_201;
                }
              }
            }
          }
          v117 += 2;
          v116 = 2 * v115 + 2;
          goto LABEL_177;
        }
        if ((unint64_t)v8 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *>(&v7[2 * (v9 >> 1)], v7, v209);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *>(v7, &v7[2 * (v9 >> 1)], v209);
          v10 = 2 * (v9 >> 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *>(v7 + 2, &v7[v10 - 2], a2 - 4);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *>(v7 + 4, &v7[v10 + 2], a2 - 6);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *>(&v7[v10 - 2], &v7[v10], &v7[v10 + 2]);
          v11 = *(_OWORD *)v7;
          *(_OWORD *)v7 = *(_OWORD *)&v7[v10];
          *(_OWORD *)&v7[v10] = v11;
        }
        --a3;
        v12 = *v7;
        if ((a4 & 1) == 0)
        {
          v13 = *(v7 - 2);
          if (v13 == v12)
            goto LABEL_74;
          v14 = *(_QWORD *)(v13 + 24);
          v15 = *(_QWORD *)(v12 + 24);
          v16 = v14 >= v15;
          if (v14 == v15)
            v16 = *(_DWORD *)(v13 + 32) >= *(_DWORD *)(v12 + 32);
          if (v16)
          {
LABEL_74:
            v51 = v7[1];
            *v7 = 0;
            v7[1] = 0;
            v52 = *v209;
            if (v12 == *v209)
              goto LABEL_85;
            v53 = *(_QWORD *)(v12 + 24);
            v54 = *(_QWORD *)(v52 + 24);
            v55 = v53 >= v54;
            if (v53 == v54)
              v55 = *(_DWORD *)(v12 + 32) >= *(_DWORD *)(v52 + 32);
            if (v55)
            {
LABEL_85:
              for (v7 += 2; v7 < a2; v7 += 2)
              {
                v59 = *v7;
                if (v12 != *v7)
                {
                  v60 = *(_QWORD *)(v12 + 24);
                  v61 = *(_QWORD *)(v59 + 24);
                  if (v60 == v61)
                  {
                    if (*(_DWORD *)(v12 + 32) < *(_DWORD *)(v59 + 32))
                      break;
                  }
                  else if (v60 < v61)
                  {
                    break;
                  }
                }
              }
            }
            else
            {
              for (v7 += 2; ; v7 += 2)
              {
                v56 = *v7;
                if (v12 != *v7)
                {
                  v57 = *(_QWORD *)(v56 + 24);
                  v58 = v53 >= v57;
                  if (v53 == v57)
                    v58 = *(_DWORD *)(v12 + 32) >= *(_DWORD *)(v56 + 32);
                  if (!v58)
                    break;
                }
              }
            }
            v62 = a2;
            if (v7 < a2)
            {
              v62 = a2 - 2;
              if (v12 != v52)
              {
                v63 = *(_QWORD *)(v12 + 24);
                v62 = a2 - 2;
                do
                {
                  v64 = *(_QWORD *)(v52 + 24);
                  v65 = v63 >= v64;
                  if (v63 == v64)
                    v65 = *(_DWORD *)(v12 + 32) >= *(_DWORD *)(v52 + 32);
                  if (v65)
                    break;
                  v66 = *(v62 - 2);
                  v62 -= 2;
                  v52 = v66;
                }
                while (v12 != v66);
              }
            }
            if (v7 < v62)
            {
              v67 = *v7;
              v68 = *v62;
              do
              {
                *v7 = v68;
                *v62 = v67;
                v69 = v7[1];
                v7[1] = v62[1];
                v62[1] = v69;
                do
                {
                  do
                  {
                    v70 = v7[2];
                    v7 += 2;
                    v67 = v70;
                  }
                  while (v12 == v70);
                  v71 = *(_QWORD *)(v12 + 24);
                  v72 = *(_QWORD *)(v67 + 24);
                  v73 = v71 >= v72;
                  if (v71 == v72)
                    v73 = *(_DWORD *)(v12 + 32) >= *(_DWORD *)(v67 + 32);
                }
                while (v73);
                while (1)
                {
                  v74 = *(v62 - 2);
                  v62 -= 2;
                  v68 = v74;
                  if (v12 == v74)
                    break;
                  v75 = *(_QWORD *)(v68 + 24);
                  v76 = v71 >= v75;
                  if (v71 == v75)
                    v76 = *(_DWORD *)(v12 + 32) >= *(_DWORD *)(v68 + 32);
                  if (v76)
                    goto LABEL_102;
                }
                v68 = v12;
LABEL_102:
                ;
              }
              while (v7 < v62);
            }
            v77 = v7 - 2;
            if (v7 - 2 != a1)
            {
              v78 = *(_OWORD *)v77;
              *v77 = 0;
              *(v7 - 1) = 0;
              v79 = (std::__shared_weak_count *)a1[1];
              *(_OWORD *)a1 = v78;
              if (v79)
              {
                v80 = (unint64_t *)&v79->__shared_owners_;
                do
                  v81 = __ldaxr(v80);
                while (__stlxr(v81 - 1, v80));
                if (!v81)
                {
                  ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                  std::__shared_weak_count::__release_weak(v79);
                }
              }
            }
            a4 = 0;
            v82 = (std::__shared_weak_count *)*(v7 - 1);
            *(v7 - 2) = v12;
            *(v7 - 1) = v51;
            if (v82)
            {
              v83 = (unint64_t *)&v82->__shared_owners_;
              do
                v84 = __ldaxr(v83);
              while (__stlxr(v84 - 1, v83));
              a4 = 0;
              if (!v84)
              {
                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                std::__shared_weak_count::__release_weak(v82);
                a4 = 0;
              }
            }
            continue;
          }
        }
        v17 = v7[1];
        *v7 = 0;
        v7[1] = 0;
        v19 = v7 + 2;
        v18 = v7[2];
        if (v18 == v12)
        {
          v18 = v12;
          if (v19 >= a2)
            goto LABEL_35;
          goto LABEL_21;
        }
        v20 = *(_QWORD *)(v12 + 24);
        v21 = v7;
        do
        {
          v22 = v19;
          v23 = *(_QWORD *)(v18 + 24);
          if (v23 == v20)
          {
            if (*(_DWORD *)(v18 + 32) >= *(_DWORD *)(v12 + 32))
              goto LABEL_33;
          }
          else if (v23 >= v20)
          {
            v21 = v22 - 2;
            goto LABEL_33;
          }
          v19 = v22 + 2;
          v18 = v22[2];
          v21 = v22;
        }
        while (v18 != v12);
        v18 = v12;
        v21 = v22;
        v22 += 2;
LABEL_33:
        i = a2 - 2;
        if (v21 == v7)
        {
          v19 = v22;
          if (v22 >= a2)
          {
LABEL_35:
            v22 = v19;
            i = a2;
            goto LABEL_36;
          }
LABEL_21:
          for (i = a2 - 2; ; i -= 2)
          {
            v25 = *i;
            if (*i == v12)
            {
              if (v19 >= i)
                goto LABEL_31;
            }
            else
            {
              v26 = *(_QWORD *)(v25 + 24);
              v27 = *(_QWORD *)(v12 + 24);
              if (v26 == v27)
              {
                if (v19 >= i || *(_DWORD *)(v25 + 32) < *(_DWORD *)(v12 + 32))
                {
LABEL_31:
                  v22 = v19;
                  goto LABEL_36;
                }
              }
              else if (v19 >= i || v26 < v27)
              {
                goto LABEL_31;
              }
            }
          }
        }
        while (1)
        {
          v39 = *i;
          if (*i != v12)
          {
            v40 = *(_QWORD *)(v39 + 24);
            v41 = v40 >= v20;
            if (v40 == v20)
              v41 = *(_DWORD *)(v39 + 32) >= *(_DWORD *)(v12 + 32);
            if (!v41)
              break;
          }
          i -= 2;
        }
LABEL_36:
        v7 = v22;
        if (v22 < i)
        {
          v28 = *i;
          v7 = v22;
          v29 = i;
          do
          {
            *v7 = v28;
            *v29 = v18;
            v30 = v7[1];
            v7[1] = v29[1];
            v29[1] = v30;
            v31 = v7[2];
            v7 += 2;
            v18 = v31;
            if (v31 == v12)
            {
              v18 = v12;
            }
            else
            {
              v32 = *(_QWORD *)(v12 + 24);
              do
              {
                v34 = *(_QWORD *)(v18 + 24);
                if (v34 == v32)
                {
                  if (*(_DWORD *)(v18 + 32) >= *(_DWORD *)(v12 + 32))
                    goto LABEL_50;
                }
                else if (v34 >= v32)
                {
                  goto LABEL_50;
                }
                v33 = v7[2];
                v7 += 2;
                v18 = v33;
              }
              while (v33 != v12);
              v18 = v12;
            }
            do
            {
              do
              {
LABEL_50:
                v35 = *(v29 - 2);
                v29 -= 2;
                v28 = v35;
              }
              while (v35 == v12);
              v36 = *(_QWORD *)(v28 + 24);
              v37 = *(_QWORD *)(v12 + 24);
              v38 = v36 >= v37;
              if (v36 == v37)
                v38 = *(_DWORD *)(v28 + 32) >= *(_DWORD *)(v12 + 32);
            }
            while (v38);
          }
          while (v7 < v29);
        }
        v42 = v7 - 2;
        if (v7 - 2 != a1)
        {
          v43 = *(_OWORD *)v42;
          *v42 = 0;
          *(v7 - 1) = 0;
          v44 = (std::__shared_weak_count *)a1[1];
          *(_OWORD *)a1 = v43;
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
        }
        v47 = (std::__shared_weak_count *)*(v7 - 1);
        *(v7 - 2) = v12;
        *(v7 - 1) = v17;
        if (v47)
        {
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        if (v22 < i)
        {
LABEL_73:
          std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *,false>(a1, v7 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v50 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *>(a1, v7 - 2);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *>(v7, a2))
        {
          if (v50)
            continue;
          goto LABEL_73;
        }
        a2 = v7 - 2;
        if (!v50)
          goto LABEL_1;
        return;
    }
  }
}

