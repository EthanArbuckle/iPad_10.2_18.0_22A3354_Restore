void sub_19FE91D78(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::ShadowTileClearItem>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ShadowTileClearItem>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::ShadowTileClearItem>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ShadowTileClearItem>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

uint64_t altitude::GlobeTileRenderEffect::occludesGrid(altitude::GlobeTileRenderEffect *this)
{
  return 1;
}

void altitude::HideMeshEffect::~HideMeshEffect(altitude::HideMeshEffect *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = &off_1E42C42F8;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = &off_1E42C42F8;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void altitude::HideMeshEffect::update(altitude::HideMeshEffect *this, float a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  BOOL v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  std::__shared_weak_count *v45;

  v4 = *((_QWORD *)this + 2);
  v5 = *(_QWORD *)(v4 + 120);
  v6 = *(std::__shared_weak_count **)(v4 + 128);
  v44 = v5;
  v45 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (!v5)
  {
    v21 = *((_QWORD *)this + 2);
    v23 = *(_QWORD *)(v21 + 208);
    v22 = *(std::__shared_weak_count **)(v21 + 216);
    if (v22)
    {
      v24 = (unint64_t *)&v22->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v44 = v23;
    v45 = v22;
    if (v6)
    {
      v26 = (unint64_t *)&v6->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  v9 = *((unsigned __int8 *)this + 273);
  if (*((_BYTE *)this + 273) && *((float *)this + 14) == 0.0)
  {
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 9) = 0;
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    *((_BYTE *)this + 273) = 0;
  }
  if (*((_QWORD *)this + 8))
    goto LABEL_14;
  if (!v44)
  {
    *((float *)this + 13) = fmaxf(*((float *)this + 13) - a2, 0.0);
    *((_DWORD *)this + 14) = 0;
    goto LABEL_20;
  }
  if (!*((_BYTE *)this + 272))
  {
    v38 = v45;
    if (v45)
    {
      v39 = (unint64_t *)&v45->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 8) = v44;
    *((_QWORD *)this + 9) = v38;
    if (!v32)
    {
LABEL_14:
      v13 = fmaxf(*((float *)this + 13) - a2, 0.0);
      *((float *)this + 13) = v13;
      goto LABEL_15;
    }
    v41 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v41);
    while (__stlxr(v34 - 1, v41));
    goto LABEL_63;
  }
  altitude::util::createFallbackElement(&v43, &v44, (double *)this + 10);
  v28 = v43;
  v43 = 0uLL;
  v29 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  *((_OWORD *)this + 4) = v28;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
LABEL_63:
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v42 = *((_QWORD *)this + 8);
  v13 = fmaxf(*((float *)this + 13) - a2, 0.0);
  *((float *)this + 13) = v13;
  if (!v42)
  {
    *((_DWORD *)this + 14) = 0;
    goto LABEL_20;
  }
LABEL_15:
  v14 = *((float *)this + 14);
  v15 = *((float *)this + 15);
  if (v9 || v13 > 0.0)
    v16 = fmaxf(v14 - (float)(v15 * a2), 0.0);
  else
    v16 = fminf(v14 + (float)(v15 * a2), 1.0);
  *((float *)this + 14) = v16;
LABEL_20:
  if (!altitude::Tile::getOrCreateTileView(*(altitude::Tile **)(*((_QWORD *)this + 2) + 16), *((const altitude::View **)this + 3))[40])
  {
    *(_QWORD *)((char *)this + 52) = 0x3F80000000000000;
LABEL_49:
    v20 = 1;
    goto LABEL_50;
  }
  v17 = *((float *)this + 13);
  v18 = *((float *)this + 14);
  if (v17 == 0.0 && v18 == 1.0)
    goto LABEL_49;
  v20 = 0;
  if (v18 == 0.0 && *((_BYTE *)this + 274) && v17 <= 0.0)
    v20 = *((_QWORD *)this + 8) == 0;
LABEL_50:
  *((_BYTE *)this + 48) = v20;
  v35 = v45;
  if (v45)
  {
    v36 = (unint64_t *)&v45->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void altitude::HideMeshEffect::willBeDrawn(altitude::HideMeshEffect *this, karo::graphics::Viewport *a2, uint64_t a3)
{
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  char v8;

  v4 = *((float *)this + 14);
  if (v4 > 0.0)
  {
    altitude::GlobeTileComponent::setupGlobeElement(a3, *((altitude::View **)this + 3), *((_QWORD *)this + 8), v4);
    v4 = *((float *)this + 14);
  }
  if (v4 < 1.0)
    altitude::GlobeTileComponent::setupSurfaceElement(*(altitude::GlobeTileComponent **)(*((_QWORD *)this + 2) + 136), *((altitude::View **)this + 3));
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 16) + 336);
  if (v5)
  {
    v6 = *((float *)this + 14);
    *(_BYTE *)(v5 + 122) = v6 > 0.0;
    if (*(float *)(v5 + 124) != v6 && v6 > 0.0)
    {
      v7 = *(_QWORD *)(v5 + 88);
      if (v7)
      {
        *(float *)(v5 + 124) = v6;
        if (v6 >= 1.0)
        {
          v8 = 0;
        }
        else
        {
          *(float *)(v7 + 164) = v6;
          v8 = 1;
        }
        *(_BYTE *)(v7 + 160) = v8;
      }
    }
  }
}

uint64_t altitude::HideMeshEffect::collectRenderItems(uint64_t this, md::PassList *a2, md::RealisticCommandBufferSelector *a3)
{
  uint64_t v5;
  float v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v5 = this;
  v6 = *(float *)(this + 56);
  if (v6 > 0.0)
  {
    v7 = (_QWORD *)*((_QWORD *)a2 + 1);
    v9 = v7[3];
    v8 = v7[4];
    v10 = v8 - v9;
    if (v8 == v9)
      goto LABEL_9;
    v11 = 0;
    v12 = *((_QWORD *)a3 + 1);
    v13 = v10 >> 3;
    while (1)
    {
      v14 = *(unsigned __int8 **)(v9 + 8 * v11);
      if (*v14 == *(unsigned __int8 *)(v12 + 10))
      {
        v15 = *((_QWORD *)v14 + 1);
        v16 = v7[15];
        if (v15 < (v7[16] - v16) >> 3)
          break;
      }
      if (++v11 >= v13)
        goto LABEL_9;
    }
    v17 = *(_QWORD *)(v16 + 8 * v15);
    if (!v17)
LABEL_9:
      v18 = 0;
    else
      v18 = *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * *(unsigned __int8 *)(v12 + 11));
    v19 = *(_QWORD *)(this + 64);
    v20 = *(_QWORD *)(v19 + 48);
    v21 = *(_QWORD *)(v19 + 56);
    if (v20 != v21)
    {
      do
      {
        if (*(_BYTE *)(*(_QWORD *)v20 + 180))
          this = ggl::CommandBuffer::pushRenderItem(v18, *(ggl::RenderItem **)(*(_QWORD *)v20 + 184));
        v20 += 8;
      }
      while (v20 != v21);
      v6 = *(float *)(v5 + 56);
    }
  }
  if (v6 < 1.0)
  {
    v22 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 136);
    if (v22)
    {
      v23 = (_QWORD *)*((_QWORD *)a2 + 1);
      v25 = v23[3];
      v24 = v23[4];
      v26 = v24 - v25;
      if (v24 == v25)
        goto LABEL_25;
      v27 = 0;
      v28 = *((_QWORD *)a3 + 1);
      v29 = v26 >> 3;
      while (1)
      {
        v30 = *(unsigned __int8 **)(v25 + 8 * v27);
        if (*v30 == *(unsigned __int8 *)(v28 + 6))
        {
          v31 = *((_QWORD *)v30 + 1);
          v32 = v23[15];
          if (v31 < (v23[16] - v32) >> 3)
            break;
        }
        if (++v27 >= v29)
          goto LABEL_25;
      }
      v33 = *(_QWORD *)(v32 + 8 * v31);
      if (!v33)
LABEL_25:
        v34 = 0;
      else
        v34 = *(_QWORD *)(*(_QWORD *)(v33 + 24) + 8 * *(unsigned __int8 *)(v28 + 7));
      v35 = *(_QWORD *)(v22 + 48);
      v36 = *(_QWORD *)(v22 + 56);
      while (v35 != v36)
      {
        if (*(_BYTE *)(*(_QWORD *)v35 + 180))
          this = ggl::CommandBuffer::pushRenderItem(v34, *(ggl::RenderItem **)(*(_QWORD *)v35 + 184));
        v35 += 8;
      }
    }
  }
  return this;
}

uint64_t altitude::HideMeshEffect::occludesGrid(altitude::HideMeshEffect *this)
{
  return 0;
}

void altitude::BlendEffect::~BlendEffect(altitude::BlendEffect *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C3AA0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42C3AA0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x1A1AF4E00);
}

char *altitude::BlendEffect::update(char *this, float a2)
{
  char *v2;
  float v3;
  BOOL v4;

  v2 = this;
  v3 = fminf(*((float *)this + 30) + (float)(*((float *)this + 31) * a2), 1.0);
  *((float *)this + 30) = v3;
  if (v3 == 1.0)
  {
    v4 = 1;
  }
  else
  {
    this = altitude::Tile::getOrCreateTileView(*(altitude::Tile **)(*((_QWORD *)this + 2) + 16), *((const altitude::View **)this + 3));
    v4 = this[40] == 0;
  }
  v2[48] = v4;
  return this;
}

void altitude::BlendEffect::willBeDrawn(altitude::BlendEffect *this, karo::graphics::Viewport *a2, uint64_t a3)
{
  float v5;
  float v6;
  float v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  float v12;
  float v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  v5 = *((float *)this + 30) + *((float *)this + 30);
  v6 = fmaxf(2.0 - v5, 0.0);
  v7 = fmaxf(v5, 0.0);
  v8 = *((_QWORD *)this + 7);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = fminf(v6, 1.0);
  v13 = fminf(v7, 1.0);
  v15 = *((_QWORD *)this + 9);
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v14)
  {
    altitude::GlobeTileComponent::setupGlobeElement(a3, *((altitude::View **)this + 3), v8, v12);
    altitude::GlobeTileComponent::setupGlobeElement(a3, *((altitude::View **)this + 3), v15, v13);
    if (!v9)
      return;
    goto LABEL_14;
  }
  v16 = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  altitude::GlobeTileComponent::setupGlobeElement(a3, *((altitude::View **)this + 3), v8, v12);
  altitude::GlobeTileComponent::setupGlobeElement(a3, *((altitude::View **)this + 3), v15, v13);
  do
    v18 = __ldaxr(v16);
  while (__stlxr(v18 - 1, v16));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (v9)
  {
LABEL_14:
    v19 = (unint64_t *)&v9->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

uint64_t altitude::BlendEffect::collectRenderItems(uint64_t this, md::PassList *a2, md::RealisticCommandBufferSelector *a3)
{
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = this;
  v6 = *(float *)(this + 120);
  if (v6 >= 0.5)
    v7 = 5;
  else
    v7 = 4;
  v8 = *((_QWORD *)a3 + 1);
  v9 = (_QWORD *)*((_QWORD *)a2 + 1);
  v10 = v9[3];
  v11 = v9[4];
  if (v11 == v10)
    goto LABEL_11;
  v12 = 0;
  while (1)
  {
    v13 = *(unsigned __int8 **)(v10 + 8 * v12);
    if (*v13 == *(unsigned __int8 *)(v8 + 2 * v7))
    {
      v14 = *((_QWORD *)v13 + 1);
      v15 = v9[15];
      this = v9[16] - v15;
      if (v14 < this >> 3)
        break;
    }
    if (++v12 >= (unint64_t)((v11 - v10) >> 3))
      goto LABEL_11;
  }
  v16 = *(_QWORD *)(v15 + 8 * v14);
  if (!v16)
LABEL_11:
    v17 = 0;
  else
    v17 = *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * *(unsigned __int8 *)(v8 + 2 * v7 + 1));
  v18 = *(_QWORD *)(v5 + 56);
  v19 = *(_QWORD *)(v18 + 48);
  v20 = *(_QWORD *)(v18 + 56);
  if (v19 != v20)
  {
    do
    {
      if (*(_BYTE *)(*(_QWORD *)v19 + 180))
        this = ggl::CommandBuffer::pushRenderItem(v17, *(ggl::RenderItem **)(*(_QWORD *)v19 + 184));
      v19 += 8;
    }
    while (v19 != v20);
    v6 = *(float *)(v5 + 120);
    v8 = *((_QWORD *)a3 + 1);
    v9 = (_QWORD *)*((_QWORD *)a2 + 1);
    v10 = v9[3];
    v11 = v9[4];
  }
  v21 = 4;
  if (v6 < 0.5)
    v21 = 5;
  v22 = v11 - v10;
  if (v11 == v10)
    goto LABEL_27;
  v23 = 0;
  v24 = v22 >> 3;
  while (1)
  {
    v25 = *(unsigned __int8 **)(v10 + 8 * v23);
    if (*v25 == *(unsigned __int8 *)(v8 + 2 * v21))
    {
      v26 = *((_QWORD *)v25 + 1);
      v27 = v9[15];
      if (v26 < (v9[16] - v27) >> 3)
        break;
    }
    if (++v23 >= v24)
      goto LABEL_27;
  }
  v28 = *(_QWORD *)(v27 + 8 * v26);
  if (!v28)
LABEL_27:
    v29 = 0;
  else
    v29 = *(_QWORD *)(*(_QWORD *)(v28 + 24) + 8 * *(unsigned __int8 *)(v8 + 2 * v21 + 1));
  v30 = *(_QWORD *)(v5 + 72);
  v31 = *(_QWORD *)(v30 + 48);
  v32 = *(_QWORD *)(v30 + 56);
  while (v31 != v32)
  {
    if (*(_BYTE *)(*(_QWORD *)v31 + 180))
      this = ggl::CommandBuffer::pushRenderItem(v29, *(ggl::RenderItem **)(*(_QWORD *)v31 + 184));
    v31 += 8;
  }
  return this;
}

void altitude::MorphEffect::~MorphEffect(altitude::MorphEffect *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = &off_1E42C3B90;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = &off_1E42C3B90;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

char *altitude::MorphEffect::update(char *this, float a2)
{
  char *v2;
  float v3;
  BOOL v4;

  v2 = this;
  v3 = fminf(*((float *)this + 26) + (float)(*((float *)this + 27) * a2), 1.0);
  *((float *)this + 26) = v3;
  if (v3 == 1.0)
  {
    v4 = 1;
  }
  else
  {
    this = altitude::Tile::getOrCreateTileView(*(altitude::Tile **)(*((_QWORD *)this + 2) + 16), *((const altitude::View **)this + 3));
    v4 = this[40] == 0;
  }
  v2[48] = v4;
  return this;
}

void altitude::MorphEffect::willBeDrawn(altitude::MorphEffect *this, karo::graphics::Viewport *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  float v8;
  uint64_t v9;
  int v10;
  double *v11;
  float v12;
  ggl::PipelineSetup *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  double *v16;
  ggl::PipelineSetup *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  double *v20;
  ggl::PipelineSetup *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  _QWORD *v70;
  unint64_t v71;
  float32x4_t *v72;
  float32x4_t v73;
  float32x4_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  float32x4_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  int v108;
  unint64_t v109;
  uint64_t v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  uint64_t v139;
  uint64_t v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  _QWORD *v157;
  unint64_t v158;
  float32x4_t *v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  uint64_t v188;
  uint64_t v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  _QWORD *v206;
  unint64_t v207;
  float32x4_t *v208;
  float32x4_t v209;
  float32x4_t v210;
  uint64_t v211;
  uint64_t v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  float32x4_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  char *v234;
  char *v235;
  unint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  float32x4_t v243;
  float32x4_t v244;
  uint64_t v245;
  uint64_t v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  double v254;
  double v255;
  double v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  float32x4_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  char *v268;
  char *v269;
  unint64_t v270;
  char *v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  float v277;
  BOOL v278;
  double v279[2];
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  double v296;
  double v297;
  double v298;
  uint64_t v299;
  double v300;
  double v301;
  double v302;
  uint64_t v303;
  double v304;
  double v305;
  double v306;
  uint64_t v307;
  __int128 v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  uint64_t v319;

  v3 = *((_QWORD *)this + 7);
  v4 = *(uint64_t **)(v3 + 48);
  v5 = *(uint64_t **)(v3 + 56);
  if (v4 != v5)
  {
    while (1)
    {
      v9 = *v4;
      v10 = *(_DWORD *)(*v4 + 160);
      if (v10 == 6)
        break;
      if (v10 == 5)
      {
        v16 = (double *)*((_QWORD *)this + 3);
        v12 = *((float *)this + 26);
        v17 = *(ggl::PipelineSetup **)(v9 + 192);
        if (*(_BYTE *)(v9 + 312))
        {
          v18 = *(_QWORD *)(v9 + 296);
          v19 = *(std::__shared_weak_count **)(v9 + 304);
          goto LABEL_19;
        }
        v18 = *(_QWORD *)(v9 + 280);
        if (*((_QWORD *)v17 + 2) != v18)
        {
          v19 = *(std::__shared_weak_count **)(v9 + 288);
LABEL_19:
          ggl::Flyover::FlyoverPipelineSetup::setState(v17, v18, v19);
        }
        v24 = v16[10];
        v25 = v16[11];
        v26 = v16[12];
        v28 = v16[8];
        v27 = v16[9];
        v30 = v16[6];
        v29 = v16[7];
        v31 = -(v28 * v24 - v29 * v25) - (v28 * v24 - v29 * v25);
        v32 = -(v30 * v25 - v28 * v27) - (v30 * v25 - v28 * v27);
        v33 = -(v29 * v27 - v30 * v24) - (v29 * v27 - v30 * v24);
        v34 = -(v33 * v27 - (-(v29 - v31 * v25) - v32 * v26));
        v35 = -(v30 + v31 * v26 + v32 * v25 - v33 * v24);
        v36 = -(v28 + v31 * v24 + v33 * v26 - v32 * v27);
        v37 = v24 * -2.0;
        v38 = -(v24 * (v24 * -2.0));
        v39 = 1.0 - (v38 - v25 * (v25 * -2.0));
        v40 = v27 * -2.0;
        v41 = -(v24 * (v27 * -2.0));
        v42 = v25 * -2.0 * v26;
        v43 = v41 - v42;
        v44 = -(v25 * (v27 * -2.0));
        v45 = v26 * v37;
        v46 = v26 * v37 - v25 * (v27 * -2.0);
        v47 = v42 + v41;
        v48 = v27 * -2.0 * v27 + 1.0;
        v49 = v48 - -(v25 * (v25 * -2.0));
        v50 = -(v25 * v37);
        v51 = v26 * v40;
        v280.f64[0] = v39;
        v280.f64[1] = v47;
        v282.f64[0] = v43;
        v282.f64[1] = v49;
        v284.f64[0] = v46;
        v284.f64[1] = v50 - v51;
        v281.f64[0] = v44 - v45;
        v283 = (float64x2_t)COERCE_UNSIGNED_INT64(v51 + v50);
        v285.f64[0] = v48 - v38;
        v281.f64[1] = 0.0;
        v285.f64[1] = 0.0;
        v286.f64[0] = v35;
        v286.f64[1] = v34;
        v287.f64[0] = v36;
        v287.f64[1] = 1.0;
        v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
        v317 = 0u;
        v318 = 0u;
        v315 = 0u;
        v316 = 0u;
        v313 = 0u;
        v314 = 0u;
        v312 = 0u;
        v319 = 0x3FF0000000000000;
        v53 = *(_QWORD *)(v9 + 240);
        v311 = *(_QWORD *)(v9 + 232);
        *(_QWORD *)&v314 = v53;
        *((_QWORD *)&v316 + 1) = *(_QWORD *)(v9 + 248);
        v54 = *(double *)(v52 + 24);
        v55 = *(double *)(v52 + 32);
        v56 = *(double *)(v52 + 40);
        v57 = *(double *)(v52 + 48);
        v58 = v55 + v55;
        v59 = (v55 + v55) * v55;
        v60 = (v56 + v56) * v56;
        v61 = v54 + v54;
        v62 = (v54 + v54) * v55;
        v63 = (v56 + v56) * v57;
        v64 = v56 * (v54 + v54);
        v65 = v57 * v58;
        v66 = v57 * v58 + v64;
        v67 = 1.0 - (v54 + v54) * v54;
        v68 = v58 * v56;
        v69 = v57 * v61;
        v296 = 1.0 - (v59 + v60);
        v297 = v63 + v62;
        v300 = v62 - v63;
        v301 = v67 - v60;
        v304 = v66;
        v305 = v68 - v69;
        v298 = v64 - v65;
        v302 = v69 + v68;
        v306 = v67 - v59;
        v299 = 0;
        v303 = 0;
        v307 = 0;
        v308 = *(_OWORD *)v52;
        v309 = *(_QWORD *)(v52 + 16);
        v310 = 0x3FF0000000000000;
        gm::operator*<double,4,4,4>(v279, &v296, (double *)&v311);
        gm::operator*<double,4,4,4>(v288.f64, v280.f64, v279);
        if (*(_BYTE *)(v9 + 312))
          *(_QWORD *)(*(_QWORD *)(v9 + 184) + 48) = (unint64_t)((v295.f64[0] + v16[118] * -0.1)
                                                                       * 1.84467441e19
                                                                       / (v16[118]
                                                                        * 1.6)
                                                                       + 1.84467441e19);
        v70 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v9 + 192) + 64) + 16);
        v71 = v70[1];
        if (v71)
          v72 = (float32x4_t *)v70[9];
        else
          v72 = 0;
        v73 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v290), v291);
        *v72 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v288), v289);
        v72[1] = v73;
        v74 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v294), v295);
        v72[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v292), v293);
        v72[3] = v74;
        v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
        v317 = 0u;
        v318 = 0u;
        v315 = 0u;
        v316 = 0u;
        v313 = 0u;
        v314 = 0u;
        v312 = 0u;
        v319 = 0x3FF0000000000000;
        v76 = *(_QWORD *)(v9 + 240);
        v311 = *(_QWORD *)(v9 + 232);
        *(_QWORD *)&v314 = v76;
        *((_QWORD *)&v316 + 1) = *(_QWORD *)(v9 + 248);
        v77 = *(double *)(v75 + 24);
        v78 = *(double *)(v75 + 32);
        v79 = *(double *)(v75 + 40);
        v80 = *(double *)(v75 + 48);
        v81 = v78 + v78;
        v82 = (v78 + v78) * v78;
        v83 = (v79 + v79) * v79;
        v84 = v77 + v77;
        v85 = (v77 + v77) * v78;
        v86 = (v79 + v79) * v80;
        v87 = v79 * (v77 + v77);
        v88 = v80 * v81;
        v89 = v80 * v81 + v87;
        v90 = 1.0 - (v77 + v77) * v77;
        v91 = v81 * v79;
        v92 = v80 * v84;
        v296 = 1.0 - (v82 + v83);
        v297 = v86 + v85;
        v300 = v85 - v86;
        v301 = v90 - v83;
        v304 = v89;
        v305 = v91 - v92;
        v298 = v87 - v88;
        v302 = v92 + v91;
        v306 = v90 - v82;
        v299 = 0;
        v303 = 0;
        v307 = 0;
        v308 = *(_OWORD *)v75;
        v309 = *(_QWORD *)(v75 + 16);
        v310 = 0x3FF0000000000000;
        gm::operator*<double,4,4,4>(v280.f64, &v296, (double *)&v311);
        v93 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v282), v283);
        v72[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v280), v281);
        v72[5] = v93;
        v72[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v284), v285);
        v72[7] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v286), v287);
        if (v71)
        {
          v94 = v70[8];
          if (v94 <= v71)
            v94 = v71;
          v70[7] = 0;
          v70[8] = v94;
        }
        v95 = *(_QWORD *)(v9 + 192);
        v96 = *(_QWORD *)(*(_QWORD *)(v95 + 64) + 48);
        v97 = *(_QWORD *)(v96 + 8);
        **(_DWORD **)(v96 + 72) = 1065353216;
        if (*(_QWORD *)(v96 + 64) > v97)
          v97 = *(_QWORD *)(v96 + 64);
        *(_QWORD *)(v96 + 56) = 0;
        *(_QWORD *)(v96 + 64) = v97;
        v98 = *(char **)(v9 + 256);
        v99 = *(char **)(v9 + 264);
        if (v98 != v99)
        {
          v100 = v99 - v98 - 8;
          v101 = *(char **)(v9 + 256);
          if (v100 < 8)
          {
            do
            {
LABEL_37:
              v106 = *(_QWORD *)v101;
              v101 += 8;
              *(_QWORD *)(v106 + 88) = a3;
            }
            while (v101 != v99);
          }
          else
          {
            v102 = (v100 >> 3) + 1;
            v103 = (uint64_t *)(v98 + 8);
            v104 = v102 & 0x3FFFFFFFFFFFFFFELL;
            do
            {
              v105 = *v103;
              *(_QWORD *)(*(v103 - 1) + 88) = a3;
              *(_QWORD *)(v105 + 88) = a3;
              v103 += 2;
              v104 -= 2;
            }
            while (v104);
            if (v102 != (v102 & 0x3FFFFFFFFFFFFFFELL))
            {
              v101 = &v98[8 * (v102 & 0x3FFFFFFFFFFFFFFELL)];
              goto LABEL_37;
            }
          }
        }
        *(_QWORD *)(*(_QWORD *)(v95 + 96) + 8) = *(_QWORD *)(*(_QWORD *)v98 + 16);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 192) + 96) + 16) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 256)
                                                                                              + 8)
                                                                                  + 16);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 192) + 96) + 24) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 256)
                                                                                              + 16)
                                                                                  + 16);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 192) + 96) + 32) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 256)
                                                                                              + 24)
                                                                                  + 16);
        v107 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v9 + 192) + 64) + 80);
        v108 = *(unsigned __int8 *)(v9 + 313);
        v109 = v107[1];
        v8 = 1.0 - v12;
        if (!v109)
          goto LABEL_4;
        v110 = v107[9];
        goto LABEL_86;
      }
      if (v10 == 4)
      {
        v11 = (double *)*((_QWORD *)this + 3);
        v12 = *((float *)this + 26);
        v13 = *(ggl::PipelineSetup **)(v9 + 192);
        if (*(_BYTE *)(v9 + 312))
        {
          v14 = *(_QWORD *)(v9 + 296);
          v15 = *(std::__shared_weak_count **)(v9 + 304);
          goto LABEL_42;
        }
        v14 = *(_QWORD *)(v9 + 280);
        if (*((_QWORD *)v13 + 2) != v14)
        {
          v15 = *(std::__shared_weak_count **)(v9 + 288);
LABEL_42:
          ggl::Flyover::FlyoverPipelineSetup::setState(v13, v14, v15);
        }
        v111 = v11[10];
        v112 = v11[11];
        v113 = v11[12];
        v115 = v11[8];
        v114 = v11[9];
        v117 = v11[6];
        v116 = v11[7];
        v118 = -(v115 * v111 - v116 * v112) - (v115 * v111 - v116 * v112);
        v119 = -(v117 * v112 - v115 * v114) - (v117 * v112 - v115 * v114);
        v120 = -(v116 * v114 - v117 * v111) - (v116 * v114 - v117 * v111);
        v121 = -(v120 * v114 - (-(v116 - v118 * v112) - v119 * v113));
        v122 = -(v117 + v118 * v113 + v119 * v112 - v120 * v111);
        v123 = -(v115 + v118 * v111 + v120 * v113 - v119 * v114);
        v124 = v111 * -2.0;
        v125 = -(v111 * (v111 * -2.0));
        v126 = 1.0 - (v125 - v112 * (v112 * -2.0));
        v127 = v114 * -2.0;
        v128 = -(v111 * (v114 * -2.0));
        v129 = v112 * -2.0 * v113;
        v130 = v128 - v129;
        v131 = -(v112 * (v114 * -2.0));
        v132 = v113 * v124;
        v133 = v113 * v124 - v112 * (v114 * -2.0);
        v134 = v129 + v128;
        v135 = v114 * -2.0 * v114 + 1.0;
        v136 = v135 - -(v112 * (v112 * -2.0));
        v137 = -(v112 * v124);
        v138 = v113 * v127;
        v280.f64[0] = v126;
        v280.f64[1] = v134;
        v282.f64[0] = v130;
        v282.f64[1] = v136;
        v284.f64[0] = v133;
        v284.f64[1] = v137 - v138;
        v281.f64[0] = v131 - v132;
        v283 = (float64x2_t)COERCE_UNSIGNED_INT64(v138 + v137);
        v285.f64[0] = v135 - v125;
        v281.f64[1] = 0.0;
        v285.f64[1] = 0.0;
        v286.f64[0] = v122;
        v286.f64[1] = v121;
        v287.f64[0] = v123;
        v287.f64[1] = 1.0;
        v139 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
        v317 = 0u;
        v318 = 0u;
        v315 = 0u;
        v316 = 0u;
        v313 = 0u;
        v314 = 0u;
        v312 = 0u;
        v319 = 0x3FF0000000000000;
        v140 = *(_QWORD *)(v9 + 240);
        v311 = *(_QWORD *)(v9 + 232);
        *(_QWORD *)&v314 = v140;
        *((_QWORD *)&v316 + 1) = *(_QWORD *)(v9 + 248);
        v141 = *(double *)(v139 + 24);
        v142 = *(double *)(v139 + 32);
        v143 = *(double *)(v139 + 40);
        v144 = *(double *)(v139 + 48);
        v145 = v142 + v142;
        v146 = (v142 + v142) * v142;
        v147 = (v143 + v143) * v143;
        v148 = v141 + v141;
        v149 = (v141 + v141) * v142;
        v150 = (v143 + v143) * v144;
        v151 = v143 * (v141 + v141);
        v152 = v144 * v145;
        v153 = v144 * v145 + v151;
        v154 = 1.0 - (v141 + v141) * v141;
        v155 = v145 * v143;
        v156 = v144 * v148;
        v296 = 1.0 - (v146 + v147);
        v297 = v150 + v149;
        v300 = v149 - v150;
        v301 = v154 - v147;
        v304 = v153;
        v305 = v155 - v156;
        v298 = v151 - v152;
        v302 = v156 + v155;
        v306 = v154 - v146;
        v299 = 0;
        v303 = 0;
        v307 = 0;
        v308 = *(_OWORD *)v139;
        v309 = *(_QWORD *)(v139 + 16);
        v310 = 0x3FF0000000000000;
        gm::operator*<double,4,4,4>(v279, &v296, (double *)&v311);
        gm::operator*<double,4,4,4>(v288.f64, v280.f64, v279);
        if (*(_BYTE *)(v9 + 312))
          *(_QWORD *)(*(_QWORD *)(v9 + 184) + 48) = (unint64_t)((v295.f64[0] + v11[118] * -0.1)
                                                                       * 1.84467441e19
                                                                       / (v11[118]
                                                                        * 1.6)
                                                                       + 1.84467441e19);
        v157 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v9 + 192) + 64) + 16);
        v158 = v157[1];
        if (v158)
          v159 = (float32x4_t *)v157[9];
        else
          v159 = 0;
        v209 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v290), v291);
        *v159 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v288), v289);
        v159[1] = v209;
        v210 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v294), v295);
        v159[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v292), v293);
        v159[3] = v210;
        v211 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
        v317 = 0u;
        v318 = 0u;
        v315 = 0u;
        v316 = 0u;
        v313 = 0u;
        v314 = 0u;
        v312 = 0u;
        v319 = 0x3FF0000000000000;
        v212 = *(_QWORD *)(v9 + 240);
        v311 = *(_QWORD *)(v9 + 232);
        *(_QWORD *)&v314 = v212;
        *((_QWORD *)&v316 + 1) = *(_QWORD *)(v9 + 248);
        v213 = *(double *)(v211 + 24);
        v214 = *(double *)(v211 + 32);
        v215 = *(double *)(v211 + 40);
        v216 = *(double *)(v211 + 48);
        v217 = v214 + v214;
        v218 = (v214 + v214) * v214;
        v219 = (v215 + v215) * v215;
        v220 = v213 + v213;
        v221 = (v213 + v213) * v214;
        v222 = (v215 + v215) * v216;
        v223 = v215 * (v213 + v213);
        v224 = v216 * v217;
        v225 = v216 * v217 + v223;
        v226 = 1.0 - (v213 + v213) * v213;
        v227 = v217 * v215;
        v228 = v216 * v220;
        v296 = 1.0 - (v218 + v219);
        v297 = v222 + v221;
        v300 = v221 - v222;
        v301 = v226 - v219;
        v304 = v225;
        v305 = v227 - v228;
        v298 = v223 - v224;
        v302 = v228 + v227;
        v306 = v226 - v218;
        v299 = 0;
        v303 = 0;
        v307 = 0;
        v308 = *(_OWORD *)v211;
        v309 = *(_QWORD *)(v211 + 16);
        v310 = 0x3FF0000000000000;
        gm::operator*<double,4,4,4>(v280.f64, &v296, (double *)&v311);
        v229 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v282), v283);
        v159[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v280), v281);
        v159[5] = v229;
        v159[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v284), v285);
        v159[7] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v286), v287);
        if (v158)
        {
          v230 = v157[8];
          if (v230 <= v158)
            v230 = v158;
          v157[7] = 0;
          v157[8] = v230;
        }
        v231 = *(_QWORD *)(v9 + 192);
        v232 = *(_QWORD *)(*(_QWORD *)(v231 + 64) + 48);
        v233 = *(_QWORD *)(v232 + 8);
        **(_DWORD **)(v232 + 72) = 1065353216;
        if (*(_QWORD *)(v232 + 64) > v233)
          v233 = *(_QWORD *)(v232 + 64);
        *(_QWORD *)(v232 + 56) = 0;
        *(_QWORD *)(v232 + 64) = v233;
        v234 = *(char **)(v9 + 256);
        v235 = *(char **)(v9 + 264);
        if (v234 != v235)
        {
          v236 = v235 - v234 - 8;
          v237 = *(char **)(v9 + 256);
          if (v236 < 8)
          {
            do
            {
LABEL_67:
              v242 = *(_QWORD *)v237;
              v237 += 8;
              *(_QWORD *)(v242 + 88) = a3;
            }
            while (v237 != v235);
          }
          else
          {
            v238 = (v236 >> 3) + 1;
            v239 = (uint64_t *)(v234 + 8);
            v240 = v238 & 0x3FFFFFFFFFFFFFFELL;
            do
            {
              v241 = *v239;
              *(_QWORD *)(*(v239 - 1) + 88) = a3;
              *(_QWORD *)(v241 + 88) = a3;
              v239 += 2;
              v240 -= 2;
            }
            while (v240);
            if (v238 != (v238 & 0x3FFFFFFFFFFFFFFELL))
            {
              v237 = &v234[8 * (v238 & 0x3FFFFFFFFFFFFFFELL)];
              goto LABEL_67;
            }
          }
        }
        *(_QWORD *)(*(_QWORD *)(v231 + 96) + 8) = *(_QWORD *)(*(_QWORD *)v234 + 16);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 192) + 96) + 16) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 256)
                                                                                              + 8)
                                                                                  + 16);
LABEL_84:
        v107 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v9 + 192) + 64) + 80);
        v108 = *(unsigned __int8 *)(v9 + 313);
        v109 = v107[1];
        if (!v109)
        {
          v8 = 1.0 - v12;
LABEL_4:
          MEMORY[0x10] = LODWORD(v8);
          if (!v108)
            v8 = v12;
          MEMORY[0x14] = LODWORD(v8);
          goto LABEL_7;
        }
        v110 = v107[9];
        v8 = 1.0 - v12;
LABEL_86:
        if (v108)
          v277 = v8;
        else
          v277 = v12;
        *(float *)(v110 + 16) = v8;
        *(float *)(v110 + 20) = v277;
        if (v110)
          v278 = v109 == 0;
        else
          v278 = 1;
        if (!v278)
        {
          if (v107[8] > v109)
            v109 = v107[8];
          v107[7] = 0;
          v107[8] = v109;
        }
      }
LABEL_7:
      if (++v4 == v5)
        return;
    }
    v20 = (double *)*((_QWORD *)this + 3);
    v12 = *((float *)this + 26);
    v21 = *(ggl::PipelineSetup **)(v9 + 192);
    if (*(_BYTE *)(v9 + 312))
    {
      v22 = *(_QWORD *)(v9 + 296);
      v23 = *(std::__shared_weak_count **)(v9 + 304);
    }
    else
    {
      v22 = *(_QWORD *)(v9 + 280);
      if (*((_QWORD *)v21 + 2) == v22)
        goto LABEL_50;
      v23 = *(std::__shared_weak_count **)(v9 + 288);
    }
    ggl::Flyover::FlyoverPipelineSetup::setState(v21, v22, v23);
LABEL_50:
    v160 = v20[10];
    v161 = v20[11];
    v162 = v20[12];
    v164 = v20[8];
    v163 = v20[9];
    v166 = v20[6];
    v165 = v20[7];
    v167 = -(v164 * v160 - v165 * v161) - (v164 * v160 - v165 * v161);
    v168 = -(v166 * v161 - v164 * v163) - (v166 * v161 - v164 * v163);
    v169 = -(v165 * v163 - v166 * v160) - (v165 * v163 - v166 * v160);
    v170 = -(v169 * v163 - (-(v165 - v167 * v161) - v168 * v162));
    v171 = -(v166 + v167 * v162 + v168 * v161 - v169 * v160);
    v172 = -(v164 + v167 * v160 + v169 * v162 - v168 * v163);
    v173 = v160 * -2.0;
    v174 = -(v160 * (v160 * -2.0));
    v175 = 1.0 - (v174 - v161 * (v161 * -2.0));
    v176 = v163 * -2.0;
    v177 = -(v160 * (v163 * -2.0));
    v178 = v161 * -2.0 * v162;
    v179 = v177 - v178;
    v180 = -(v161 * (v163 * -2.0));
    v181 = v162 * v173;
    v182 = v162 * v173 - v161 * (v163 * -2.0);
    v183 = v178 + v177;
    v184 = v163 * -2.0 * v163 + 1.0;
    v185 = v184 - -(v161 * (v161 * -2.0));
    v186 = -(v161 * v173);
    v187 = v162 * v176;
    v280.f64[0] = v175;
    v280.f64[1] = v183;
    v282.f64[0] = v179;
    v282.f64[1] = v185;
    v284.f64[0] = v182;
    v284.f64[1] = v186 - v187;
    v281.f64[0] = v180 - v181;
    v283 = (float64x2_t)COERCE_UNSIGNED_INT64(v187 + v186);
    v285.f64[0] = v184 - v174;
    v281.f64[1] = 0.0;
    v285.f64[1] = 0.0;
    v286.f64[0] = v171;
    v286.f64[1] = v170;
    v287.f64[0] = v172;
    v287.f64[1] = 1.0;
    v188 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
    v317 = 0u;
    v318 = 0u;
    v315 = 0u;
    v316 = 0u;
    v313 = 0u;
    v314 = 0u;
    v312 = 0u;
    v319 = 0x3FF0000000000000;
    v189 = *(_QWORD *)(v9 + 240);
    v311 = *(_QWORD *)(v9 + 232);
    *(_QWORD *)&v314 = v189;
    *((_QWORD *)&v316 + 1) = *(_QWORD *)(v9 + 248);
    v190 = *(double *)(v188 + 24);
    v191 = *(double *)(v188 + 32);
    v192 = *(double *)(v188 + 40);
    v193 = *(double *)(v188 + 48);
    v194 = v191 + v191;
    v195 = (v191 + v191) * v191;
    v196 = (v192 + v192) * v192;
    v197 = v190 + v190;
    v198 = (v190 + v190) * v191;
    v199 = (v192 + v192) * v193;
    v200 = v192 * (v190 + v190);
    v201 = v193 * v194;
    v202 = v193 * v194 + v200;
    v203 = 1.0 - (v190 + v190) * v190;
    v204 = v194 * v192;
    v205 = v193 * v197;
    v296 = 1.0 - (v195 + v196);
    v297 = v199 + v198;
    v300 = v198 - v199;
    v301 = v203 - v196;
    v304 = v202;
    v305 = v204 - v205;
    v298 = v200 - v201;
    v302 = v205 + v204;
    v306 = v203 - v195;
    v299 = 0;
    v303 = 0;
    v307 = 0;
    v308 = *(_OWORD *)v188;
    v309 = *(_QWORD *)(v188 + 16);
    v310 = 0x3FF0000000000000;
    gm::operator*<double,4,4,4>(v279, &v296, (double *)&v311);
    gm::operator*<double,4,4,4>(v288.f64, v280.f64, v279);
    if (*(_BYTE *)(v9 + 312))
      *(_QWORD *)(*(_QWORD *)(v9 + 184) + 48) = (unint64_t)((v295.f64[0] + v20[118] * -0.1)
                                                                   * 1.84467441e19
                                                                   / (v20[118]
                                                                    * 1.6)
                                                                   + 1.84467441e19);
    v206 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v9 + 192) + 64) + 16);
    v207 = v206[1];
    if (v207)
      v208 = (float32x4_t *)v206[9];
    else
      v208 = 0;
    v243 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v290), v291);
    *v208 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v288), v289);
    v208[1] = v243;
    v244 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v294), v295);
    v208[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v292), v293);
    v208[3] = v244;
    v245 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
    v317 = 0u;
    v318 = 0u;
    v315 = 0u;
    v316 = 0u;
    v313 = 0u;
    v314 = 0u;
    v312 = 0u;
    v319 = 0x3FF0000000000000;
    v246 = *(_QWORD *)(v9 + 240);
    v311 = *(_QWORD *)(v9 + 232);
    *(_QWORD *)&v314 = v246;
    *((_QWORD *)&v316 + 1) = *(_QWORD *)(v9 + 248);
    v247 = *(double *)(v245 + 24);
    v248 = *(double *)(v245 + 32);
    v249 = *(double *)(v245 + 40);
    v250 = *(double *)(v245 + 48);
    v251 = v248 + v248;
    v252 = (v248 + v248) * v248;
    v253 = (v249 + v249) * v249;
    v254 = v247 + v247;
    v255 = (v247 + v247) * v248;
    v256 = (v249 + v249) * v250;
    v257 = v249 * (v247 + v247);
    v258 = v250 * v251;
    v259 = v250 * v251 + v257;
    v260 = 1.0 - (v247 + v247) * v247;
    v261 = v251 * v249;
    v262 = v250 * v254;
    v296 = 1.0 - (v252 + v253);
    v297 = v256 + v255;
    v300 = v255 - v256;
    v301 = v260 - v253;
    v304 = v259;
    v305 = v261 - v262;
    v298 = v257 - v258;
    v302 = v262 + v261;
    v306 = v260 - v252;
    v299 = 0;
    v303 = 0;
    v307 = 0;
    v308 = *(_OWORD *)v245;
    v309 = *(_QWORD *)(v245 + 16);
    v310 = 0x3FF0000000000000;
    gm::operator*<double,4,4,4>(v280.f64, &v296, (double *)&v311);
    v263 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v282), v283);
    v208[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v280), v281);
    v208[5] = v263;
    v208[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v284), v285);
    v208[7] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v286), v287);
    if (v207)
    {
      v264 = v206[8];
      if (v264 <= v207)
        v264 = v207;
      v206[7] = 0;
      v206[8] = v264;
    }
    v265 = *(_QWORD *)(v9 + 192);
    v266 = *(_QWORD *)(*(_QWORD *)(v265 + 64) + 48);
    v267 = *(_QWORD *)(v266 + 8);
    **(_DWORD **)(v266 + 72) = 1065353216;
    if (*(_QWORD *)(v266 + 64) > v267)
      v267 = *(_QWORD *)(v266 + 64);
    *(_QWORD *)(v266 + 56) = 0;
    *(_QWORD *)(v266 + 64) = v267;
    v268 = *(char **)(v9 + 256);
    v269 = *(char **)(v9 + 264);
    if (v268 == v269)
      goto LABEL_83;
    v270 = v269 - v268 - 8;
    v271 = *(char **)(v9 + 256);
    if (v270 >= 8)
    {
      v272 = (v270 >> 3) + 1;
      v273 = (uint64_t *)(v268 + 8);
      v274 = v272 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v275 = *v273;
        *(_QWORD *)(*(v273 - 1) + 88) = a3;
        *(_QWORD *)(v275 + 88) = a3;
        v273 += 2;
        v274 -= 2;
      }
      while (v274);
      if (v272 == (v272 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_83;
      v271 = &v268[8 * (v272 & 0x3FFFFFFFFFFFFFFELL)];
    }
    do
    {
      v276 = *(_QWORD *)v271;
      v271 += 8;
      *(_QWORD *)(v276 + 88) = a3;
    }
    while (v271 != v269);
LABEL_83:
    *(_QWORD *)(*(_QWORD *)(v265 + 96) + 8) = *(_QWORD *)(*(_QWORD *)v268 + 16);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 192) + 96) + 16) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 256) + 8)
                                                                              + 16);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 192) + 96) + 24) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 256) + 16)
                                                                              + 16);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 192) + 96) + 32) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 256) + 24)
                                                                              + 16);
    goto LABEL_84;
  }
}

uint64_t altitude::MorphEffect::collectRenderItems(uint64_t this, md::PassList *a2, md::RealisticCommandBufferSelector *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (_QWORD *)*((_QWORD *)a2 + 1);
  v5 = v3[3];
  v4 = v3[4];
  v6 = v4 - v5;
  if (v4 == v5)
    goto LABEL_8;
  v7 = 0;
  v8 = *((_QWORD *)a3 + 1);
  v9 = v6 >> 3;
  while (1)
  {
    v10 = *(unsigned __int8 **)(v5 + 8 * v7);
    if (*v10 == *(unsigned __int8 *)(v8 + 8))
    {
      v11 = *((_QWORD *)v10 + 1);
      v12 = v3[15];
      if (v11 < (v3[16] - v12) >> 3)
        break;
    }
    if (++v7 >= v9)
      goto LABEL_8;
  }
  v13 = *(_QWORD *)(v12 + 8 * v11);
  if (!v13)
LABEL_8:
    v14 = 0;
  else
    v14 = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 8 * *(unsigned __int8 *)(v8 + 9));
  v15 = *(_QWORD *)(this + 56);
  v16 = *(_QWORD *)(v15 + 48);
  v17 = *(_QWORD *)(v15 + 56);
  while (v16 != v17)
  {
    if (*(_BYTE *)(*(_QWORD *)v16 + 180))
      this = ggl::CommandBuffer::pushRenderItem(v14, *(ggl::RenderItem **)(*(_QWORD *)v16 + 184));
    v16 += 8;
  }
  return this;
}

void altitude::CoarsenEffect::~CoarsenEffect(altitude::CoarsenEffect *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  *(_QWORD *)this = off_1E42C4090;
  v2 = (_QWORD *)*((_QWORD *)this + 7);
  v3 = (_QWORD *)*((_QWORD *)this + 8);
  if (v2 != v3)
  {
    do
    {
      v5 = v2[2];
      v6 = (_QWORD *)*((_QWORD *)this + 5);
      switch(*(_DWORD *)(v5 + 8))
      {
        case 1:
          (**(void (***)(_QWORD))v5)(v2[2]);
          v4 = v6 + 37;
          goto LABEL_4;
        case 2:
          (**(void (***)(_QWORD))v5)(v2[2]);
          v4 = v6 + 42;
          goto LABEL_4;
        case 3:
          (**(void (***)(_QWORD))v5)(v2[2]);
          v4 = v6 + 57;
          goto LABEL_4;
        case 4:
          (**(void (***)(_QWORD))v5)(v2[2]);
          v4 = v6 + 62;
          goto LABEL_4;
        case 5:
          (**(void (***)(_QWORD))v5)(v2[2]);
          v4 = v6 + 52;
          goto LABEL_4;
        case 6:
          (**(void (***)(_QWORD))v5)(v2[2]);
          v4 = v6 + 47;
LABEL_4:
          *(_QWORD *)v5 = *v4;
          *v4 = v5;
          break;
        default:
          break;
      }
      v2 += 3;
    }
    while (v2 != v3);
    v2 = (_QWORD *)*((_QWORD *)this + 7);
  }
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
}

{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  *(_QWORD *)this = off_1E42C4090;
  v2 = (_QWORD *)*((_QWORD *)this + 7);
  v3 = (_QWORD *)*((_QWORD *)this + 8);
  if (v2 != v3)
  {
    do
    {
      v5 = v2[2];
      v6 = (_QWORD *)*((_QWORD *)this + 5);
      switch(*(_DWORD *)(v5 + 8))
      {
        case 1:
          (**(void (***)(_QWORD))v5)(v2[2]);
          v4 = v6 + 37;
          goto LABEL_4;
        case 2:
          (**(void (***)(_QWORD))v5)(v2[2]);
          v4 = v6 + 42;
          goto LABEL_4;
        case 3:
          (**(void (***)(_QWORD))v5)(v2[2]);
          v4 = v6 + 57;
          goto LABEL_4;
        case 4:
          (**(void (***)(_QWORD))v5)(v2[2]);
          v4 = v6 + 62;
          goto LABEL_4;
        case 5:
          (**(void (***)(_QWORD))v5)(v2[2]);
          v4 = v6 + 52;
          goto LABEL_4;
        case 6:
          (**(void (***)(_QWORD))v5)(v2[2]);
          v4 = v6 + 47;
LABEL_4:
          *(_QWORD *)v5 = *v4;
          *v4 = v5;
          break;
        default:
          break;
      }
      v2 += 3;
    }
    while (v2 != v3);
    v2 = (_QWORD *)*((_QWORD *)this + 7);
  }
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A1AF4E00);
}

char *altitude::CoarsenEffect::update(altitude::CoarsenEffect *this, float a2)
{
  char *result;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;

  *((_BYTE *)this + 48) = 1;
  result = altitude::Tile::getOrCreateTileView(*(altitude::Tile **)(*((_QWORD *)this + 2) + 16), *((const altitude::View **)this + 3));
  if (result[40])
  {
    v5 = *((_QWORD *)this + 7);
    v6 = *((_QWORD *)this + 8);
    while (v5 != v6)
    {
      v7 = *(_BYTE **)(v5 + 16);
      result = (char *)(*(uint64_t (**)(_BYTE *, float))(*(_QWORD *)v7 + 16))(v7, a2);
      if (!v7[48])
        *((_BYTE *)this + 48) = 0;
      v5 += 24;
    }
  }
  return result;
}

uint64_t altitude::CoarsenEffect::willBeDrawn(uint64_t this, karo::graphics::Viewport *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t i;

  v3 = *(_QWORD *)(this + 56);
  for (i = *(_QWORD *)(this + 64); v3 != i; v3 += 24)
    this = (*(uint64_t (**)(_QWORD, karo::graphics::Viewport *, uint64_t))(**(_QWORD **)(v3 + 16) + 24))(*(_QWORD *)(v3 + 16), a2, a3);
  return this;
}

uint64_t altitude::CoarsenEffect::collectRenderItems(uint64_t this, md::PassList *a2, md::RealisticCommandBufferSelector *a3)
{
  uint64_t v3;
  uint64_t i;

  v3 = *(_QWORD *)(this + 56);
  for (i = *(_QWORD *)(this + 64); v3 != i; v3 += 24)
    this = (*(uint64_t (**)(_QWORD, md::PassList *, md::RealisticCommandBufferSelector *))(**(_QWORD **)(v3 + 16) + 32))(*(_QWORD *)(v3 + 16), a2, a3);
  return this;
}

uint64_t altitude::CoarsenEffect::occludesGrid(altitude::CoarsenEffect *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  BOOL v5;

  v1 = *((_QWORD *)this + 7);
  v2 = *((_QWORD *)this + 8);
  if (v1 == v2)
    return 1;
  v3 = v1 + 24;
  do
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 - 8) + 40))(*(_QWORD *)(v3 - 8));
    if ((_DWORD)result)
      v5 = v3 == v2;
    else
      v5 = 1;
    v3 += 24;
  }
  while (!v5);
  return result;
}

void altitude::RefineEffect::~RefineEffect(altitude::RefineEffect *this)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = off_1E42C3F40;
  v1 = *((_QWORD *)this + 7);
  v2 = (_QWORD *)*((_QWORD *)this + 5);
  switch(*(_DWORD *)(v1 + 8))
  {
    case 1:
      (**(void (***)(_QWORD))v1)(*((_QWORD *)this + 7));
      v3 = v2 + 37;
      goto LABEL_8;
    case 2:
      (**(void (***)(_QWORD))v1)(*((_QWORD *)this + 7));
      v3 = v2 + 42;
      goto LABEL_8;
    case 3:
      (**(void (***)(_QWORD))v1)(*((_QWORD *)this + 7));
      v3 = v2 + 57;
      goto LABEL_8;
    case 4:
      (**(void (***)(_QWORD))v1)(*((_QWORD *)this + 7));
      v3 = v2 + 62;
      goto LABEL_8;
    case 5:
      (**(void (***)(_QWORD))v1)(*((_QWORD *)this + 7));
      v3 = v2 + 52;
      goto LABEL_8;
    case 6:
      (**(void (***)(_QWORD))v1)(*((_QWORD *)this + 7));
      v3 = v2 + 47;
LABEL_8:
      *(_QWORD *)v1 = *v3;
      *v3 = v1;
      break;
    default:
      return;
  }
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = off_1E42C3F40;
  v1 = *((_QWORD *)this + 7);
  v2 = (_QWORD *)*((_QWORD *)this + 5);
  switch(*(_DWORD *)(v1 + 8))
  {
    case 1:
      (**(void (***)(_QWORD))v1)(*((_QWORD *)this + 7));
      v3 = v2 + 37;
      goto LABEL_8;
    case 2:
      (**(void (***)(_QWORD))v1)(*((_QWORD *)this + 7));
      v3 = v2 + 42;
      goto LABEL_8;
    case 3:
      (**(void (***)(_QWORD))v1)(*((_QWORD *)this + 7));
      v3 = v2 + 57;
      goto LABEL_8;
    case 4:
      (**(void (***)(_QWORD))v1)(*((_QWORD *)this + 7));
      v3 = v2 + 62;
      goto LABEL_8;
    case 5:
      (**(void (***)(_QWORD))v1)(*((_QWORD *)this + 7));
      v3 = v2 + 52;
      goto LABEL_8;
    case 6:
      (**(void (***)(_QWORD))v1)(*((_QWORD *)this + 7));
      v3 = v2 + 47;
LABEL_8:
      *(_QWORD *)v1 = *v3;
      *v3 = v1;
      break;
    default:
      break;
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t altitude::RefineEffect::update(altitude::RefineEffect *this, float a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 7) + 16))(*((_QWORD *)this + 7), a2);
  *((_BYTE *)this + 48) = *(_BYTE *)(*((_QWORD *)this + 7) + 48);
  return result;
}

uint64_t altitude::RefineEffect::willBeDrawn(altitude::RefineEffect *this, karo::graphics::Viewport *a2)
{
  return (*(uint64_t (**)(_QWORD, karo::graphics::Viewport *))(**((_QWORD **)this + 7) + 24))(*((_QWORD *)this + 7), a2);
}

uint64_t altitude::RefineEffect::collectRenderItems(altitude::RefineEffect *this, md::PassList *a2, md::RealisticCommandBufferSelector *a3)
{
  return (*(uint64_t (**)(_QWORD, md::PassList *, md::RealisticCommandBufferSelector *))(**((_QWORD **)this + 7)
                                                                                                 + 32))(*((_QWORD *)this + 7), a2, a3);
}

uint64_t altitude::RefineEffect::occludesGrid(altitude::RefineEffect *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7));
}

__n128 altitude::CoarsenEffect::addChildEffect(_QWORD *a1, __n128 *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __n128 result;

  v7 = (_QWORD *)a1[8];
  v6 = a1[9];
  if ((unint64_t)v7 >= v6)
  {
    v9 = (_QWORD *)a1[7];
    v10 = 0xAAAAAAAAAAAAAAABLL * (v7 - v9) + 1;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (_QWORD)v9) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = (char *)operator new(24 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * (v7 - v9)];
    *(_QWORD *)v14 = 0;
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    v8 = v14 + 24;
    if (v7 != v9)
    {
      do
      {
        v15 = *(_OWORD *)(v7 - 3);
        *((_QWORD *)v14 - 1) = *(v7 - 1);
        *(_OWORD *)(v14 - 24) = v15;
        v14 -= 24;
        v7 -= 3;
      }
      while (v7 != v9);
      v7 = (_QWORD *)a1[7];
    }
    a1[7] = v14;
    a1[8] = v8;
    a1[9] = &v13[24 * v12];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v8 = v7 + 3;
    v7[2] = 0;
  }
  a1[8] = v8;
  result = *a2;
  *(__n128 *)(v8 - 3) = *a2;
  *(_QWORD *)(a1[8] - 8) = a3;
  return result;
}

void altitude::FlyoverTour::~FlyoverTour(altitude::FlyoverTour *this)
{
  altitude::FlyoverTour::~FlyoverTour(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  md::AnimationData *v5;
  altitude::FlyoverTour *v6;
  uint64_t v7;
  altitude::FlyoverTour *v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11[2];
  char v12;

  *(_QWORD *)this = &off_1E42C3AE0;
  *((_QWORD *)this + 5) = &unk_1E42C3B20;
  v2 = (char *)this + 40;
  v3 = *((_QWORD *)this + 7);
  if (v3)
  {
    v12 = 8;
    strcpy((char *)v11, "triggers");
    altitude::ManifestManager::unregisterListener(v3, v11, (unint64_t)v2);
  }
  *((_QWORD *)this + 7) = 0;
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    v5 = *(md::AnimationData **)(v4 + 8);
    if (v5)
    {
      md::AnimationData::~AnimationData(v5);
      MEMORY[0x1A1AF4E00]();
    }

    MEMORY[0x1A1AF4E00](v4, 0x10E0C402FD04164);
  }
  v6 = (altitude::FlyoverTour *)*((_QWORD *)this + 22);
  if (v6 == (altitude::FlyoverTour *)((char *)this + 152))
  {
    v7 = 4;
    v6 = (altitude::FlyoverTour *)((char *)this + 152);
  }
  else
  {
    if (!v6)
      goto LABEL_12;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_12:
  v8 = (altitude::FlyoverTour *)*((_QWORD *)this + 18);
  if (v8 == (altitude::FlyoverTour *)((char *)this + 120))
  {
    v9 = 4;
    v8 = (altitude::FlyoverTour *)((char *)this + 120);
  }
  else
  {
    if (!v8)
      goto LABEL_17;
    v9 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_17:
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v10)
  {
    std::__tree<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>>>::destroy(*(_QWORD **)(v10 + 8));
    MEMORY[0x1A1AF4E00](v10, 0x1020C4062D53EE8);
  }
  *(_QWORD *)this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void altitude::FlyoverTour::loadBegin(altitude::FlyoverTour *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 6);
  std::__tree<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>>>::destroy(*(_QWORD **)(v1 + 8));
  *(_QWORD *)v1 = v1 + 8;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 8) = 0;
}

void altitude::FlyoverTour::tagRead(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const xmlChar *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  const xmlChar *v8;
  int v9;
  xmlChar *v10;
  xmlChar *v11;
  size_t v12;
  size_t v13;
  __int128 *p_dst;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::ios_base *v20;
  uint64_t v21;
  __int128 *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  char v27;
  unint64_t v28;
  int v29;
  char v30;
  unint64_t v31;
  size_t v32;
  unint64_t v33;
  __int128 *v34;
  size_t v35;
  _BYTE *v36;
  __int128 *v37;
  unint64_t v38;
  uint64_t v39;
  __int128 *v40;
  size_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  const char *v46;
  size_t v47;
  std::locale::__imp *v48;
  std::locale::__imp *v49;
  uint64_t v50;
  uint64_t v51;
  std::ios_base *v52;
  uint64_t v53;
  char *locale;
  const std::locale::facet *v55;
  char v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  char v60;
  int v61;
  size_t *v62;
  size_t v63;
  size_t v64;
  unint64_t v65;
  uint64_t v66;
  size_t *v67;
  size_t *v68;
  _BYTE *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  std::ios_base *v73;
  char *v74;
  char v75;
  unint64_t v76;
  uint64_t v77;
  __int128 *v78;
  char *v79;
  unint64_t v80;
  size_t v81;
  unint64_t v82;
  unint64_t v83;
  size_t v84;
  __int128 *v85;
  size_t v86;
  unint64_t v87;
  _BYTE *v88;
  __int128 *v89;
  unint64_t v90;
  uint64_t v91;
  __int128 *v92;
  size_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  xmlChar *v106;
  _BOOL8 v107;
  id *v108;
  unint64_t v109;
  unint64_t v110;
  const xmlChar *v111;
  int v112;
  std::__shared_weak_count *v113;
  unint64_t *p_shared_owners;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  xmlChar *v125;
  xmlChar *v126;
  size_t v127;
  _BYTE *v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  _BOOL4 v132;
  void *v133;
  void **v134;
  NSObject *v135;
  uint64_t v136;
  const xmlChar *v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  int *v148;
  uint64_t v150;
  void *v151;
  void *v152;
  int64_t v153;
  uint64_t v154;
  void *v155;
  void *v156;
  uint64_t v157;
  int64_t v158;
  void *v159;
  void *v160;
  __int128 *v161;
  __int128 *__src;
  id __srca;
  std::locale::__imp *v164;
  std::locale::__imp *v165;
  std::locale::__imp *v166;
  std::locale::__imp *v167;
  _OWORD v168[5];
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  std::locale v176[2];
  _QWORD v177[6];
  char *v178;
  char *v179;
  __int128 v180;
  __int128 v181;
  int v182;
  uint64_t v183[19];
  size_t __len[2];
  unint64_t v185;
  __int128 __dst;
  unint64_t v187;
  char *v188;
  _QWORD v189[5];
  __int128 v190;
  uint64_t v191;
  char *v192;
  int v193;
  uint64_t v194[19];
  int v195;
  void *__p[2];
  int64_t v197;
  _QWORD v198[6];
  char *v199;
  char *v200;
  __int128 v201;
  int64_t v202;
  char *v203;
  int v204;
  uint64_t v205[19];
  unint64_t v206;
  _OWORD v207[3];
  _OWORD v208[4];

  HIBYTE(v197) = 7;
  strcpy((char *)__p, "trigger");
  if (*(_QWORD *)a3 && (v3 = *(_QWORD *)(*(_QWORD *)a3 + 24)) != 0)
  {
    while (1)
    {
      v4 = v197 >= 0 ? (const xmlChar *)__p : (const xmlChar *)__p[0];
      v5 = v197 >= 0 ? HIBYTE(v197) : LODWORD(__p[1]);
      if (!xmlStrncmp(*(const xmlChar **)(v3 + 16), v4, v5))
        break;
      v3 = *(_QWORD *)(v3 + 48);
      if (!v3)
        goto LABEL_11;
    }
    memset((char *)v208 + 8, 0, 40);
    *(_QWORD *)&v208[0] = v3;
    if (SHIBYTE(v197) < 0)
    {
LABEL_15:
      operator delete(__p[0]);
      v3 = *(_QWORD *)&v208[0];
      if (*(_QWORD *)&v208[0])
        goto LABEL_16;
      goto LABEL_321;
    }
  }
  else
  {
LABEL_11:
    v3 = 0;
    memset(v208, 0, 48);
    if (SHIBYTE(v197) < 0)
      goto LABEL_15;
  }
  if (v3)
  {
LABEL_16:
    v159 = *(void **)(MEMORY[0x1E0DE4F50] + 24);
    v160 = *(void **)(MEMORY[0x1E0DE4F50] + 16);
    v158 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 32);
    v157 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 40);
    v156 = *(void **)(MEMORY[0x1E0DE4F50] + 48);
    v164 = (std::locale::__imp *)*MEMORY[0x1E0DE4F58];
    v166 = *(std::locale::__imp **)(MEMORY[0x1E0DE4F58] + 16);
    v167 = *(std::locale::__imp **)(MEMORY[0x1E0DE4F58] + 8);
    v165 = *(std::locale::__imp **)(MEMORY[0x1E0DE4F58] + 24);
    v155 = *(void **)(MEMORY[0x1E0DE4F50] + 8);
    v151 = (void *)*MEMORY[0x1E0DE4F50];
    v152 = *(void **)(MEMORY[0x1E0DE4F50] + 64);
    v153 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    v148 = (int *)(a1 + 72);
    v154 = MEMORY[0x1E0DE4FB8] + 16;
    v6 = MEMORY[0x1E0DE4FD8];
    v150 = MEMORY[0x1E0DE4FD8] + 64;
    while (1)
    {
      HIBYTE(v197) = 11;
      strcpy((char *)__p, "flyovertour");
      v7 = *(_QWORD *)(v3 + 24);
      if (v7)
      {
        while (1)
        {
          v8 = v197 >= 0 ? (const xmlChar *)__p : (const xmlChar *)__p[0];
          v9 = v197 >= 0 ? HIBYTE(v197) : LODWORD(__p[1]);
          if (!xmlStrncmp(*(const xmlChar **)(v7 + 16), v8, v9))
            break;
          v7 = *(_QWORD *)(v7 + 48);
          if (!v7)
            goto LABEL_28;
        }
        *(_QWORD *)&v207[0] = v7;
        memset((char *)v207 + 8, 0, 40);
        if (SHIBYTE(v197) < 0)
        {
LABEL_34:
          operator delete(__p[0]);
          if (!v7)
            goto LABEL_280;
          while (1)
          {
LABEL_38:
            v206 = 0;
            v10 = XmlNode::Attribute((XmlNode *)v207, (const xmlChar *)"tourid");
            if (!v10)
              goto LABEL_255;
            v11 = v10;
            v12 = strlen((const char *)v10);
            if (v12 > 0x7FFFFFFFFFFFFFF7)
              abort();
            v13 = v12;
            if (v12 >= 0x17)
              break;
            HIBYTE(v187) = v12;
            p_dst = &__dst;
            if (v12)
              goto LABEL_48;
LABEL_49:
            *((_BYTE *)p_dst + v13) = 0;
            v17 = MEMORY[0x1E0DE4FD0];
            v18 = MEMORY[0x1E0DE4FD0] + 104;
            v205[0] = MEMORY[0x1E0DE4FD0] + 104;
            v19 = MEMORY[0x1E0DE4FD0] + 64;
            v197 = MEMORY[0x1E0DE4FD0] + 64;
            __p[0] = v160;
            *(void **)((char *)__p + *((_QWORD *)v160 - 3)) = v159;
            __p[1] = 0;
            v20 = (std::ios_base *)((char *)__p + *((_QWORD *)__p[0] - 3));
            std::ios_base::init(v20, v198);
            v20[1].__vftable = 0;
            v20[1].__fmtflags_ = -1;
            v197 = v158;
            *(_QWORD *)((char *)&v198[-1] + *(_QWORD *)(v158 - 24)) = v157;
            __p[0] = v155;
            *(void **)((char *)__p + *((_QWORD *)v155 - 3)) = v156;
            v205[0] = v18;
            __p[0] = (void *)(v17 + 24);
            v197 = v19;
            std::streambuf::basic_streambuf();
            v202 = v187;
            v201 = __dst;
            __dst = 0uLL;
            v187 = 0;
            v204 = 24;
            v21 = *((_QWORD *)&v201 + 1);
            v22 = (__int128 *)v201;
            if (v202 >= 0)
              v23 = (char *)&v201;
            else
              v23 = (char *)v201;
            if (v202 >= 0)
              v24 = HIBYTE(v202);
            else
              v24 = *((_QWORD *)&v201 + 1);
            v198[0] = v154;
            v198[2] = v23;
            v198[3] = v23;
            v198[4] = &v23[v24];
            v203 = &v23[v24];
            if (SHIBYTE(v202) < 0)
            {
              v28 = (v202 & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if (*((_QWORD *)&v201 + 1) < v28)
              {
                v25 = HIBYTE(v202);
                v26 = v28 - *((_QWORD *)&v201 + 1);
                if (v28 == *((_QWORD *)&v201 + 1))
                {
LABEL_58:
                  v27 = 24;
                  v6 = MEMORY[0x1E0DE4FD8];
                  goto LABEL_98;
                }
LABEL_61:
                v29 = (char)v25;
                if ((v25 & 0x80u) == 0)
                  v30 = v25;
                else
                  v30 = HIBYTE(v202);
                if ((v25 & 0x80u) == 0)
                  v31 = 22;
                else
                  v31 = (v202 & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if ((v25 & 0x80u) == 0)
                  v32 = v25;
                else
                  v32 = *((_QWORD *)&v201 + 1);
                if (v31 - v32 >= v26)
                {
                  v37 = &v201;
                  if (v30 < 0)
                    goto LABEL_92;
                }
                else
                {
                  v33 = v32 + v26;
                  if (0x7FFFFFFFFFFFFFF7 - v31 < v32 + v26 - v31)
                    abort();
                  v34 = &v201;
                  if (v29 < 0)
                    v34 = (__int128 *)v201;
                  __src = v34;
                  v35 = 0x7FFFFFFFFFFFFFF7;
                  if (v31 < 0x3FFFFFFFFFFFFFF3)
                  {
                    if (v33 <= 2 * v31)
                      v33 = 2 * v31;
                    if (v33 >= 0x17)
                    {
                      v38 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
                      v39 = v33 | 7;
                      if (v39 == 23)
                        v39 = v38;
                      v35 = v39 + 1;
                    }
                    else
                    {
                      v35 = 23;
                    }
                  }
                  v40 = (__int128 *)operator new(v35);
                  v22 = v40;
                  if (v32)
                    memmove(v40, __src, v32);
                  if (v31 != 22)
                    operator delete(__src);
                  v202 = v35 | 0x8000000000000000;
                  *(_QWORD *)&v201 = v22;
                  *((_QWORD *)&v201 + 1) = v32;
LABEL_92:
                  v37 = v22;
                }
                bzero((char *)v37 + v32, v26);
                v41 = v32 + v26;
                if (SHIBYTE(v202) < 0)
                  *((_QWORD *)&v201 + 1) = v32 + v26;
                else
                  HIBYTE(v202) = v41 & 0x7F;
                v6 = MEMORY[0x1E0DE4FD8];
                v36 = (char *)v37 + v41;
                goto LABEL_97;
              }
              *((_QWORD *)&v201 + 1) = (v202 & 0x7FFFFFFFFFFFFFFFLL) - 1;
            }
            else
            {
              LODWORD(v25) = HIBYTE(v202);
              if (HIBYTE(v202) <= 0x15u)
              {
                v26 = 22 - HIBYTE(v202);
                if (HIBYTE(v202) == 22)
                  goto LABEL_58;
                goto LABEL_61;
              }
              HIBYTE(v202) = 22;
              v28 = 22;
              v22 = &v201;
            }
            v36 = (char *)v22 + v28;
LABEL_97:
            *v36 = 0;
            LODWORD(v25) = HIBYTE(v202);
            v21 = *((_QWORD *)&v201 + 1);
            v27 = v204;
LABEL_98:
            if ((v25 & 0x80u) == 0)
              v21 = v25;
            v199 = v23;
            v198[5] = v23;
            v200 = &v23[v21];
            if ((v27 & 3) != 0)
            {
              if (v24 >> 31)
              {
                v42 = ((v24 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
                v43 = 0x7FFFFFFF * ((v42 + ((v24 - 0x80000000 - v42) >> 1)) >> 30);
                v23 += v43 + 0x7FFFFFFF;
                v24 = v24 - v43 - 0x7FFFFFFF;
                v199 = v23;
              }
              if (v24)
                v199 = &v23[v24];
            }
            if (SHIBYTE(v187) < 0)
              operator delete((void *)__dst);
            v44 = (_QWORD *)MEMORY[0x1A1AF49BC](__p, &v206);
            if ((*((_BYTE *)v44 + *(_QWORD *)(*v44 - 24) + 32) & 5) != 0)
              goto LABEL_252;
            v195 = -1;
            XmlNode::Attribute((XmlNode *)v208, (const xmlChar *)"region", &v195);
            if (*(_QWORD *)&v207[0] && (v45 = *(_QWORD *)(*(_QWORD *)&v207[0] + 24), *(_DWORD *)(v45 + 8) == 3))
              v46 = *(const char **)(v45 + 80);
            else
              v46 = 0;
            v47 = strlen(v46);
            if (v47 > 0x7FFFFFFFFFFFFFF7)
              abort();
            v48 = (std::locale::__imp *)v47;
            if (v47 >= 0x17)
            {
              v50 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v47 | 7) != 0x17)
                v50 = v47 | 7;
              v51 = v50 + 1;
              v49 = (std::locale::__imp *)operator new(v50 + 1);
              v177[0] = v51 | 0x8000000000000000;
              v176[0].__locale_ = v49;
              v176[1].__locale_ = v48;
LABEL_119:
              memmove(v49, v46, (size_t)v48);
              goto LABEL_120;
            }
            HIBYTE(v177[0]) = v47;
            v49 = (std::locale::__imp *)v176;
            if (v47)
              goto LABEL_119;
LABEL_120:
            *((_BYTE *)v48 + (_QWORD)v49) = 0;
            v194[0] = v150;
            *(_QWORD *)&__dst = v167;
            *(_QWORD *)((char *)&__dst + *((_QWORD *)v167 - 3)) = v166;
            *((_QWORD *)&__dst + 1) = 0;
            v52 = (std::ios_base *)((char *)&__dst + *(_QWORD *)(__dst - 24));
            std::ios_base::init(v52, &v187);
            v52[1].__vftable = 0;
            v52[1].__fmtflags_ = -1;
            *(_QWORD *)&__dst = v6 + 24;
            v194[0] = v6 + 64;
            std::streambuf::basic_streambuf();
            v191 = v177[0];
            v190 = *(_OWORD *)&v176[0].__locale_;
            v53 = HIBYTE(v177[0]);
            locale = (char *)v176[0].__locale_;
            if (v177[0] < 0)
              v53 = *((_QWORD *)&v190 + 1);
            v193 = 8;
            if (v191 >= 0)
              locale = (char *)&v190;
            v192 = &locale[v53];
            v187 = MEMORY[0x1E0DE4FB8] + 16;
            v188 = locale;
            v189[0] = locale;
            v189[1] = &locale[v53];
            __srca = objc_alloc_init(MEMORY[0x1E0D272D8]);
            __len[1] = 0;
            __len[0] = 0;
            v185 = 0;
            while (2)
            {
              std::ios_base::getloc((const std::ios_base *)((char *)&__dst + *(_QWORD *)(__dst - 24)));
              v55 = std::locale::use_facet(v176, MEMORY[0x1E0DE4A90]);
              v56 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
              std::locale::~locale(v176);
              MEMORY[0x1A1AF4980](v176, &__dst, 1);
              if (!LOBYTE(v176[0].__locale_))
                goto LABEL_164;
              if (SHIBYTE(v185) < 0)
              {
                *(_BYTE *)__len[0] = 0;
                __len[1] = 0;
              }
              else
              {
                LOBYTE(__len[0]) = 0;
                HIBYTE(v185) = 0;
              }
              v57 = 0;
              while (1)
              {
                v58 = *(_QWORD **)((char *)v189 + *(_QWORD *)(__dst - 24));
                v59 = (char *)v58[3];
                if (v59 != (char *)v58[4])
                {
                  v58[3] = v59 + 1;
                  v60 = *v59;
                  goto LABEL_134;
                }
                v61 = (*(uint64_t (**)(_QWORD *))(*v58 + 80))(v58);
                v60 = v61;
                if (v61 == -1)
                  break;
LABEL_134:
                if (v56 == v60)
                {
                  v70 = 0;
                  goto LABEL_163;
                }
                if ((SHIBYTE(v185) & 0x80000000) == 0)
                {
                  if (HIBYTE(v185) != 22)
                  {
                    v63 = HIBYTE(v185);
                    HIBYTE(v185) = (HIBYTE(v185) + 1) & 0x7F;
                    v68 = __len;
                    goto LABEL_156;
                  }
                  v62 = __len;
                  v63 = 22;
LABEL_141:
                  if (v63 + 1 > 2 * v63)
                    v65 = v63 + 1;
                  else
                    v65 = 2 * v63;
                  v66 = (v65 & 0x7FFFFFFFFFFFFFF8) + 8;
                  if ((v65 | 7) != 0x17)
                    v66 = v65 | 7;
                  if (v65 >= 0x17)
                    v64 = v66 + 1;
                  else
                    v64 = 23;
LABEL_149:
                  v67 = (size_t *)operator new(v64);
                  v68 = v67;
                  if (!v63 || (memmove(v67, v62, v63), v63 != 22))
                    operator delete(v62);
                  __len[0] = (size_t)v68;
                  v185 = v64 | 0x8000000000000000;
                  goto LABEL_155;
                }
                v63 = (v185 & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if (__len[1] == v63)
                {
                  if ((v185 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                    abort();
                  v62 = (size_t *)__len[0];
                  v64 = 0x7FFFFFFFFFFFFFF7;
                  if (v63 < 0x3FFFFFFFFFFFFFF3)
                    goto LABEL_141;
                  goto LABEL_149;
                }
                v68 = (size_t *)__len[0];
                v63 = __len[1];
LABEL_155:
                __len[1] = v63 + 1;
LABEL_156:
                v69 = (char *)v68 + v63;
                *v69 = v60;
                v69[1] = 0;
                ++v57;
                if (SHIBYTE(v185) < 0 && __len[1] == 0x7FFFFFFFFFFFFFF7)
                {
                  v70 = 4;
                  goto LABEL_163;
                }
              }
              if (v57)
                v70 = 2;
              else
                v70 = 6;
LABEL_163:
              std::ios_base::clear((std::ios_base *)((char *)&__dst + *(_QWORD *)(__dst - 24)), *(_DWORD *)((char *)&v189[-1] + *(_QWORD *)(__dst - 24)) | v70);
LABEL_164:
              if ((*((_BYTE *)&v189[-1] + *(_QWORD *)(__dst - 24)) & 5) == 0)
              {
                v71 = MEMORY[0x1E0DE4FD8];
                v72 = MEMORY[0x1E0DE4FD8] + 64;
                v183[0] = MEMORY[0x1E0DE4FD8] + 64;
                v176[0].__locale_ = v167;
                *(std::locale::__imp **)((char *)&v176[0].__locale_ + *((_QWORD *)v167 - 3)) = v166;
                v176[1].__locale_ = 0;
                v73 = (std::ios_base *)((char *)v176 + *((_QWORD *)v176[0].__locale_ - 3));
                std::ios_base::init(v73, v177);
                v73[1].__vftable = 0;
                v73[1].__fmtflags_ = -1;
                v176[0].__locale_ = (std::locale::__imp *)(v71 + 24);
                v183[0] = v72;
                std::streambuf::basic_streambuf();
                v177[0] = MEMORY[0x1E0DE4FB8] + 16;
                v74 = (char *)&v180;
                v180 = 0u;
                v181 = 0u;
                v182 = 8;
                if (SHIBYTE(v185) < 0)
                {
                  v74 = (char *)std::string::__assign_no_alias<true>(&v180, (void *)__len[0], __len[1]);
                  v75 = v182;
                }
                else
                {
                  v180 = *(_OWORD *)__len;
                  *(_QWORD *)&v181 = v185;
                  v75 = 8;
                }
                *((_QWORD *)&v181 + 1) = 0;
                LOBYTE(v76) = BYTE7(v181);
                v77 = *((_QWORD *)&v180 + 1);
                v78 = (__int128 *)v180;
                if ((SBYTE7(v181) & 0x80u) == 0)
                  v79 = v74;
                else
                  v79 = (char *)v180;
                if ((SBYTE7(v181) & 0x80u) == 0)
                  v80 = BYTE7(v181);
                else
                  v80 = *((_QWORD *)&v180 + 1);
                if ((v75 & 8) != 0)
                {
                  v177[2] = v79;
                  v177[3] = v79;
                  *((_QWORD *)&v181 + 1) = &v79[v80];
                  v177[4] = &v79[v80];
                }
                if ((v75 & 0x10) != 0)
                {
                  *((_QWORD *)&v181 + 1) = &v79[v80];
                  if ((SBYTE7(v181) & 0x80000000) == 0)
                  {
                    if (SBYTE7(v181) <= 0x15)
                    {
                      v81 = 22 - BYTE7(v181);
                      if (BYTE7(v181) == 22)
                        goto LABEL_218;
LABEL_183:
                      if ((v76 & 0x80u) == 0)
                        v83 = 22;
                      else
                        v83 = (v181 & 0x7FFFFFFFFFFFFFFFLL) - 1;
                      if ((v76 & 0x80u) == 0)
                        v84 = v76;
                      else
                        v84 = *((_QWORD *)&v180 + 1);
                      if (v83 - v84 >= v81)
                      {
                        v89 = &v180;
                        if ((v76 & 0x80) != 0)
                        {
                          v89 = &v180;
                          if ((v181 & 0x8000000000000000) != 0)
                            goto LABEL_212;
                        }
                      }
                      else
                      {
                        if (0x7FFFFFFFFFFFFFF7 - v83 < v84 + v81 - v83)
                          abort();
                        v85 = &v180;
                        if ((v76 & 0x80u) != 0)
                          v85 = (__int128 *)v180;
                        v161 = v85;
                        v86 = 0x7FFFFFFFFFFFFFF7;
                        if (v83 < 0x3FFFFFFFFFFFFFF3)
                        {
                          v87 = 2 * v83;
                          if (v84 + v81 > 2 * v83)
                            v87 = v84 + v81;
                          if (v87 >= 0x17)
                          {
                            v90 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
                            v91 = v87 | 7;
                            if (v91 == 23)
                              v91 = v90;
                            v86 = v91 + 1;
                          }
                          else
                          {
                            v86 = 23;
                          }
                        }
                        v92 = (__int128 *)operator new(v86);
                        v78 = v92;
                        if (v84)
                          memmove(v92, v161, v84);
                        if (v83 != 22)
                          operator delete(v161);
                        *(_QWORD *)&v181 = v86 | 0x8000000000000000;
                        *(_QWORD *)&v180 = v78;
                        *((_QWORD *)&v180 + 1) = v84;
LABEL_212:
                        v89 = v78;
                      }
                      bzero((char *)v89 + v84, v81);
                      v93 = v84 + v81;
                      if (SBYTE7(v181) < 0)
                        *((_QWORD *)&v180 + 1) = v84 + v81;
                      else
                        BYTE7(v181) = v93 & 0x7F;
                      v88 = (char *)v89 + v93;
LABEL_217:
                      *v88 = 0;
                      LOBYTE(v76) = BYTE7(v181);
                      v77 = *((_QWORD *)&v180 + 1);
                      v75 = v182;
                      goto LABEL_218;
                    }
                    BYTE7(v181) = 22;
                    v82 = 22;
                    v78 = &v180;
LABEL_200:
                    v88 = (char *)v78 + v82;
                    goto LABEL_217;
                  }
                  v82 = (v181 & 0x7FFFFFFFFFFFFFFFLL) - 1;
                  if (*((_QWORD *)&v180 + 1) >= v82)
                  {
                    *((_QWORD *)&v180 + 1) = (v181 & 0x7FFFFFFFFFFFFFFFLL) - 1;
                    goto LABEL_200;
                  }
                  v76 = BYTE7(v181);
                  v81 = v82 - *((_QWORD *)&v180 + 1);
                  if (v82 != *((_QWORD *)&v180 + 1))
                    goto LABEL_183;
LABEL_218:
                  if ((v76 & 0x80u) == 0)
                    v77 = v76;
                  v178 = v79;
                  v177[5] = v79;
                  v179 = &v79[v77];
                  if ((v75 & 3) != 0)
                  {
                    if (v80 >> 31)
                    {
                      v94 = ((v80 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
                      v95 = 0x7FFFFFFF * ((v94 + ((v80 - 0x80000000 - v94) >> 1)) >> 30);
                      v79 += v95 + 0x7FFFFFFF;
                      v80 = v80 - v95 - 0x7FFFFFFF;
                      v178 = v79;
                    }
                    if (v80)
                      v178 = &v79[v80];
                  }
                }
                v175 = 0;
                v173 = 0u;
                v174 = 0u;
                v171 = 0u;
                v172 = 0u;
                v170 = 0u;
                v96 = MEMORY[0x1A1AF4998](v176, (char *)&v171 + 8);
                v97 = MEMORY[0x1A1AF4998](v96, &v172);
                v98 = MEMORY[0x1A1AF4998](v97, &v171);
                v99 = MEMORY[0x1A1AF4998](v98, (char *)&v174 + 8);
                v100 = MEMORY[0x1A1AF4998](v99, &v174);
                v101 = MEMORY[0x1A1AF4998](v100, &v173);
                v102 = (_QWORD *)MEMORY[0x1A1AF4998](v101, (char *)&v172 + 8);
                if ((*((_BYTE *)v102 + *(_QWORD *)(*v102 - 24) + 32) & 5) == 0)
                {
                  v103 = (_QWORD *)MEMORY[0x1A1AF4998](v176, (char *)&v173 + 8);
                  if ((*((_BYTE *)v103 + *(_QWORD *)(*v103 - 24) + 32) & 5) != 0)
                    *((_QWORD *)&v173 + 1) = 0;
                  v104 = (_QWORD *)MEMORY[0x1A1AF49A4](v176, &v170);
                  if ((*((_BYTE *)v104 + *(_QWORD *)(*v104 - 24) + 32) & 5) != 0)
                    LODWORD(v170) = 0;
                  v105 = (_QWORD *)MEMORY[0x1A1AF49A4](v176, (char *)&v170 + 4);
                  if ((*((_BYTE *)v105 + *(_QWORD *)(*v105 - 24) + 32) & 5) != 0)
                    DWORD1(v170) = 1065353216;
                  v168[2] = v172;
                  v168[3] = v173;
                  v168[4] = v174;
                  v169 = v175;
                  v168[0] = v170;
                  v168[1] = v171;
                  objc_msgSend(__srca, "addCameraPath:", v168, v148);
                }
                v176[0].__locale_ = v164;
                *(std::locale::__imp **)((char *)&v176[0].__locale_ + *((_QWORD *)v164 - 3)) = v165;
                v177[0] = MEMORY[0x1E0DE4FB8] + 16;
                if (SBYTE7(v181) < 0)
                  operator delete((void *)v180);
                std::streambuf::~streambuf();
                std::istream::~istream();
                MEMORY[0x1A1AF4D64](v183);
                continue;
              }
              break;
            }
            v106 = XmlNode::Attribute((XmlNode *)v207, (const xmlChar *)"usesplines");
            v6 = MEMORY[0x1E0DE4FD8];
            if (v106)
              v107 = strncmp((const char *)v106, "yes", 3uLL) == 0;
            else
              v107 = 0;
            objc_msgSend(__srca, "setUseSplines:", v107, v148);
            if (objc_msgSend(__srca, "cameraPathsCount"))
            {
              v108 = *(id **)(*(_QWORD *)(a1 + 48) + 8);
              if (!v108)
LABEL_339:
                abort();
              while (1)
              {
                while (1)
                {
                  v109 = (unint64_t)v108[4];
                  if (v206 >= v109)
                    break;
                  v108 = (id *)*v108;
                  if (!v108)
                    goto LABEL_339;
                }
                if (v109 >= v206)
                  break;
                v108 = (id *)v108[1];
                if (!v108)
                  goto LABEL_339;
              }
              objc_storeStrong(v108 + 5, __srca);
            }
            if (SHIBYTE(v185) < 0)
              operator delete((void *)__len[0]);

            *(_QWORD *)&__dst = v164;
            *(_QWORD *)((char *)&__dst + *((_QWORD *)v164 - 3)) = v165;
            v187 = MEMORY[0x1E0DE4FB8] + 16;
            if (SHIBYTE(v191) < 0)
              operator delete((void *)v190);
            std::streambuf::~streambuf();
            std::istream::~istream();
            MEMORY[0x1A1AF4D64](v194);
LABEL_252:
            __p[0] = v151;
            *(void **)((char *)__p + *((_QWORD *)v151 - 3)) = v152;
            v197 = v153;
            v198[0] = MEMORY[0x1E0DE4FB8] + 16;
            if (SHIBYTE(v202) < 0)
              operator delete((void *)v201);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x1A1AF4D64](v205);
LABEL_255:
            HIBYTE(v197) = 11;
            strcpy((char *)__p, "flyovertour");
            v110 = *(_QWORD *)&v207[0];
            if (*(_QWORD *)&v207[0])
            {
              do
              {
                v110 = *(_QWORD *)(v110 + 48);
                if (!v110)
                  break;
                v111 = v197 >= 0 ? (const xmlChar *)__p : (const xmlChar *)__p[0];
                v112 = v197 >= 0 ? HIBYTE(v197) : LODWORD(__p[1]);
              }
              while (xmlStrncmp(*(const xmlChar **)(v110 + 16), v111, v112));
            }
            v113 = *(std::__shared_weak_count **)&v207[1];
            *(_QWORD *)&v207[1] = 0;
            v207[0] = v110;
            if (v113)
            {
              p_shared_owners = (unint64_t *)&v113->__shared_owners_;
              do
                v115 = __ldaxr(p_shared_owners);
              while (__stlxr(v115 - 1, p_shared_owners));
              if (!v115)
              {
                ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                std::__shared_weak_count::__release_weak(v113);
              }
            }
            std::vector<std::shared_ptr<unsigned char>>::__assign_with_size[abi:nn180100]<std::shared_ptr<unsigned char>*,std::shared_ptr<unsigned char>*>((uint64_t)&v207[1] + 8, 0, 0, 0);
            if ((SHIBYTE(v197) & 0x80000000) == 0)
            {
              if (!*(_QWORD *)&v207[0])
                goto LABEL_269;
              continue;
            }
            operator delete(__p[0]);
            if (!*(_QWORD *)&v207[0])
            {
LABEL_269:
              v116 = *((_QWORD *)&v207[1] + 1);
              if (*((_QWORD *)&v207[1] + 1))
              {
                v117 = *(_QWORD *)&v207[2];
                v118 = (void *)*((_QWORD *)&v207[1] + 1);
                if (*(_QWORD *)&v207[2] != *((_QWORD *)&v207[1] + 1))
                {
                  do
                  {
                    v119 = *(std::__shared_weak_count **)(v117 - 8);
                    if (v119)
                    {
                      v120 = (unint64_t *)&v119->__shared_owners_;
                      do
                        v121 = __ldaxr(v120);
                      while (__stlxr(v121 - 1, v120));
                      if (!v121)
                      {
                        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                        std::__shared_weak_count::__release_weak(v119);
                      }
                    }
                    v117 -= 16;
                  }
                  while (v117 != v116);
                  v118 = (void *)*((_QWORD *)&v207[1] + 1);
                }
                *(_QWORD *)&v207[2] = v116;
                operator delete(v118);
              }
              goto LABEL_280;
            }
          }
          v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v12 | 7) != 0x17)
            v15 = v12 | 7;
          v16 = v15 + 1;
          p_dst = (__int128 *)operator new(v15 + 1);
          v187 = v16 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
          *((_QWORD *)&__dst + 1) = v13;
LABEL_48:
          memmove(p_dst, v11, v13);
          goto LABEL_49;
        }
      }
      else
      {
LABEL_28:
        v7 = 0;
        memset(v207, 0, sizeof(v207));
        if (SHIBYTE(v197) < 0)
          goto LABEL_34;
      }
      if (v7)
        goto LABEL_38;
LABEL_280:
      v122 = *(std::__shared_weak_count **)&v207[1];
      if (*(_QWORD *)&v207[1])
      {
        v123 = (unint64_t *)(*(_QWORD *)&v207[1] + 8);
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 - 1, v123));
        if (!v124)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
      v125 = XmlNode::Attribute((XmlNode *)v208, (const xmlChar *)"type");
      if (!v125)
        goto LABEL_311;
      v126 = v125;
      v127 = strlen((const char *)v125);
      if (v127 > 0x7FFFFFFFFFFFFFF7)
        abort();
      v128 = (_BYTE *)v127;
      if (v127 >= 0x17)
        break;
      HIBYTE(v197) = v127;
      v129 = __p;
      if (v127)
        goto LABEL_293;
LABEL_294:
      v132 = 0;
      v128[(_QWORD)v129] = 0;
      v133 = (void *)HIBYTE(v197);
      if (v197 < 0)
        v133 = __p[1];
      if (v133 == (void *)4)
      {
        v134 = (void **)__p[0];
        if (v197 >= 0)
          v134 = __p;
        v132 = *(_DWORD *)v134 == 1920298868;
        if (SHIBYTE(v197) < 0)
        {
LABEL_300:
          operator delete(__p[0]);
          if (v132)
            goto LABEL_304;
          goto LABEL_311;
        }
      }
      else if (SHIBYTE(v197) < 0)
      {
        goto LABEL_300;
      }
      if (v132)
      {
LABEL_304:
        if (!XmlNode::Attribute((XmlNode *)v208, (const xmlChar *)"source")
          && !XmlNode::Attribute((XmlNode *)v208, (const xmlChar *)"region", v148))
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
          v135 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl(&dword_19F029000, v135, OS_LOG_TYPE_ERROR, "Missing tour_region in tour trigger specification", (uint8_t *)__p, 2u);
          }

        }
      }
LABEL_311:
      HIBYTE(v197) = 7;
      strcpy((char *)__p, "trigger");
      v136 = *(_QWORD *)&v208[0];
      if (*(_QWORD *)&v208[0])
      {
        do
        {
          v136 = *(_QWORD *)(v136 + 48);
          if (!v136)
            break;
          v137 = v197 >= 0 ? (const xmlChar *)__p : (const xmlChar *)__p[0];
          v138 = v197 >= 0 ? HIBYTE(v197) : LODWORD(__p[1]);
        }
        while (xmlStrncmp(*(const xmlChar **)(v136 + 16), v137, v138));
      }
      XmlNodeWrapper::operator=(v208, v136);
      if (SHIBYTE(v197) < 0)
      {
        operator delete(__p[0]);
        v3 = *(_QWORD *)&v208[0];
        if (!*(_QWORD *)&v208[0])
          goto LABEL_321;
      }
      else
      {
        v3 = *(_QWORD *)&v208[0];
        if (!*(_QWORD *)&v208[0])
          goto LABEL_321;
      }
    }
    v130 = (v127 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v127 | 7) != 0x17)
      v130 = v127 | 7;
    v131 = v130 + 1;
    v129 = operator new(v130 + 1);
    v197 = v131 | 0x8000000000000000;
    __p[0] = v129;
    __p[1] = v128;
LABEL_293:
    memmove(v129, v126, (size_t)v128);
    goto LABEL_294;
  }
LABEL_321:
  v139 = *((_QWORD *)&v208[1] + 1);
  if (*((_QWORD *)&v208[1] + 1))
  {
    v140 = *(_QWORD *)&v208[2];
    v141 = (void *)*((_QWORD *)&v208[1] + 1);
    if (*(_QWORD *)&v208[2] != *((_QWORD *)&v208[1] + 1))
    {
      do
      {
        v142 = *(std::__shared_weak_count **)(v140 - 8);
        if (v142)
        {
          v143 = (unint64_t *)&v142->__shared_owners_;
          do
            v144 = __ldaxr(v143);
          while (__stlxr(v144 - 1, v143));
          if (!v144)
          {
            ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
            std::__shared_weak_count::__release_weak(v142);
          }
        }
        v140 -= 16;
      }
      while (v140 != v139);
      v141 = (void *)*((_QWORD *)&v208[1] + 1);
    }
    *(_QWORD *)&v208[2] = v139;
    operator delete(v141);
  }
  v145 = *(std::__shared_weak_count **)&v208[1];
  if (*(_QWORD *)&v208[1])
  {
    v146 = (unint64_t *)(*(_QWORD *)&v208[1] + 8);
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
}

void sub_19FE959E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = *(_QWORD *)(v1 - 120);
  if (v3)
  {
    v4 = *(_QWORD *)(v1 - 112);
    v5 = *(void **)(v1 - 120);
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *(void **)(v1 - 120);
    }
    *(_QWORD *)(v1 - 112) = v3;
    operator delete(v5);
  }
  v9 = *(std::__shared_weak_count **)(v1 - 128);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'altitude::FlyoverTour::~FlyoverTour(altitude::FlyoverTour *this)
{
  altitude::FlyoverTour::~FlyoverTour((altitude::FlyoverTour *)((char *)this - 40));
}

{
  altitude::FlyoverTour::~FlyoverTour((altitude::FlyoverTour *)((char *)this - 40));
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'altitude::FlyoverTour::loadBegin(altitude::FlyoverTour *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  std::__tree<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>>>::destroy(*(_QWORD **)(v1 + 8));
  *(_QWORD *)v1 = v1 + 8;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 8) = 0;
}

void `non-virtual thunk to'altitude::FlyoverTour::tagRead(uint64_t a1, uint64_t a2, uint64_t a3)
{
  altitude::FlyoverTour::tagRead(a1 - 40, a2, a3);
}

double altitude::AnimationData::interpolateFrames(altitude::AnimationData *this, double a2, uint64_t a3, unsigned int a4)
{
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  float v9;
  double v10;
  double v11;
  double v12;
  double v13;
  long double v14;
  double v15;
  long double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  __double2 v25;
  double v26;
  __double2 v27;
  double v28;
  uint64_t v29;
  double *v30;
  double v31;
  double *v32;
  long double v33;
  long double v34;
  long double v35;
  double v36;
  long double v37;
  long double v38;
  long double v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double *v43;
  long double v44;
  long double v45;
  long double v46;
  double result;
  double v48;

  *(int64x2_t *)this = vdupq_n_s64(0xC00921FB54442D18);
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 6) = 0;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  if (v6 > a4 + 1)
    v7 = a4 + 1;
  else
    v7 = v6 - 1;
  v8 = a4;
  if (v7 == a4)
  {
    LODWORD(a2) = 1.0;
  }
  else
  {
    a2 = (a2 / *(double *)(a3 + 144) - *(double *)(*(_QWORD *)(a3 + 72) + 8 * a4))
       / (*(double *)(*(_QWORD *)(a3 + 72) + 8 * v7) - *(double *)(*(_QWORD *)(a3 + 72) + 8 * a4));
    *(float *)&a2 = a2;
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a3 + 96) + 24 * a4 + 8), "_solveForInput:", a2);
  v10 = v9;
  if (*(_BYTE *)(a3 + 152))
  {
    v11 = *(double *)(*(_QWORD *)(a3 + 72) + 8 * v8)
        + (*(double *)(*(_QWORD *)(a3 + 72) + 8 * v7) - *(double *)(*(_QWORD *)(a3 + 72) + 8 * v8)) * v10;
    v12 = altitude::interpolateSpline(a3, (char **)(a3 + 72), v11).n128_f64[0];
    v14 = v13;
    v16 = v15;
    *(_QWORD *)&v17 = altitude::interpolateSpline(a3 + 48, (char **)(a3 + 72), v11).n128_u64[0];
    v19 = v18;
    v21 = v20;
    *(_QWORD *)&v48 = altitude::interpolateSpline(a3 + 24, (char **)(a3 + 72), v11).n128_u64[0];
    v22 = sqrt(v12 * v12 + v14 * v14);
    v23 = atan2(v16, v22 * 0.996647189);
    v24 = atan2(v14, v12);
    v25 = __sincos_stret(v23);
    v26 = atan2(v16 + v25.__sinval * v25.__sinval * 42841.3115 * v25.__sinval, v22 + v25.__cosval * v25.__cosval * -42697.6727 * v25.__cosval);
    v27 = __sincos_stret(v26);
    v28 = v22 / v27.__cosval + -6378137.0 / sqrt(v27.__sinval * v27.__sinval * -0.00669437999 + 1.0);
  }
  else
  {
    v29 = 24 * v8;
    v30 = (double *)(*(_QWORD *)a3 + v29);
    v31 = *v30;
    v32 = (double *)(*(_QWORD *)a3 + 24 * v7);
    v33 = fmod(3.14159265 - *v30 + *v32, 6.28318531);
    v34 = fmod(v33 + 6.28318531, 6.28318531);
    v35 = fmod(v31 + 3.14159265 + (v34 + -3.14159265) * v10, 6.28318531);
    v26 = fmod(v35 + 6.28318531, 6.28318531) + -3.14159265;
    v36 = v30[1];
    v37 = fmod(3.14159265 - v36 + v32[1], 6.28318531);
    v38 = fmod(v37 + 6.28318531, 6.28318531);
    v39 = fmod(v36 + 3.14159265 + (v38 + -3.14159265) * v10, 6.28318531);
    v24 = fmod(v39 + 6.28318531, 6.28318531) + -3.14159265;
    v28 = v30[2] + (v32[2] - v30[2]) * v10;
    v48 = *(double *)(*(_QWORD *)(a3 + 24) + v29)
        + (*(double *)(*(_QWORD *)(a3 + 24) + 24 * v7) - *(double *)(*(_QWORD *)(a3 + 24) + v29)) * v10;
    v40 = *(_QWORD *)(a3 + 48);
    v41 = v40 + v29;
    v42 = *(double *)(v40 + v29);
    v43 = (double *)(v40 + 24 * v7);
    v44 = fmod(3.14159265 - v42 + *v43, 6.28318531);
    v45 = fmod(v44 + 6.28318531, 6.28318531);
    v46 = fmod(v42 + 3.14159265 + (v45 + -3.14159265) * v10, 6.28318531);
    v17 = fmod(v46 + 6.28318531, 6.28318531) + -3.14159265;
    v19 = *(double *)(v41 + 8) + (v43[1] - *(double *)(v41 + 8)) * v10;
    v21 = *(double *)(v41 + 16) + (v43[2] - *(double *)(v41 + 16)) * v10;
  }
  *(double *)this = v26;
  *((double *)this + 1) = v24;
  result = v48;
  *((double *)this + 2) = v28;
  *((double *)this + 3) = v48;
  *((double *)this + 4) = v19;
  *((double *)this + 5) = v17;
  *((double *)this + 6) = v21;
  return result;
}

__n128 altitude::interpolateSpline(uint64_t a1, char **a2, double a3)
{
  unint64_t v6;
  int v7;
  float64_t v8;
  uint64_t v9;
  float64x2_t *v10;
  float64x2_t *v11;
  float64x2_t *v12;
  uint64_t v13;
  float64x2_t *v14;
  double *v15;
  double *v16;
  double *v17;
  float64x2_t *v18;
  float64x2_t v19;
  double v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  float64x2_t *v24;
  char *v25;
  char *v26;
  __int128 v27;
  double v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  double *v34;
  unint64_t v35;
  double *v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  double *v40;
  uint64_t v41;
  __int128 v42;
  double v43;
  uint64_t v44;
  unint64_t v45;
  double v46;
  unint64_t v47;
  float64x2_t *v48;
  float64x2_t v49;
  unint64_t v50;
  float64x2_t v51;
  uint64_t v52;
  double *v53;
  double v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  float64x2_t *v58;
  float64x2_t *v59;
  char *v60;
  size_t v61;
  uint64_t v62;
  double *v63;
  double *v64;
  double *v65;
  double v66;
  double v67;
  double v68;
  float v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  double *v78;
  __int128 v79;
  _BOOL4 v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v87;
  float64x2_t *v88;
  double *v89;
  char *v90;
  char *v91;
  float64x2_t v92;
  float64x2_t v93;
  double v94;
  double v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  int32x2_t v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  unint64_t v108;
  double v109;
  double v110;
  double v111;
  float64x2_t *v112;
  double v113;
  float64x2_t *v114;
  double v115;
  float64x2_t v116;
  double v117;
  double *v118;
  float64x2_t v119;
  float64x2_t v120;
  double v121;
  double v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  int32x2_t v126;
  double v127;
  double v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  float64x2_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  float64x2_t *v136;
  float64x2_t *v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  float64x2_t v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  double *v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  float64x2_t *v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t *v162;
  float64x2_t *v163;
  uint64_t *v164;
  char v165;
  double v166;
  uint64_t v167;
  float64x2_t *v168;
  float64x2_t v169;
  float64x2_t *v170;
  float64_t *v171;
  unint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  float64x2_t v176;
  __int128 v177;
  double v178;
  double v179;
  unint64_t v180;
  uint64_t v181;
  float64_t v182;
  float64_t v183;
  unint64_t v184;
  double *v185;
  char v186;
  double v187;
  float64_t v188;
  char *v189;
  float64_t v190;
  char *v191;
  unint64_t v192;
  double v193;
  char v194;
  uint64_t v195;
  double v196;
  double v197;
  double v198;
  unint64_t v199;
  void *v200;
  void *v201;
  BOOL v202;
  unint64_t v203;
  unint64_t v205;
  double v206;
  double v207;
  double v208;
  uint64_t v209;
  float64x2_t *v210;
  uint64_t v211;
  float64x2_t *v212;
  float64x2_t v217;
  _BOOL4 v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  uint64_t v224;
  unint64_t v225;
  float64x2_t v226;
  int v227;
  float64x2_t v228;
  void *v229;
  _BYTE *v230;
  char *v231;
  void *v232;
  _BYTE *v233;
  char *v234;
  void *v235[2];
  __int128 v236;
  __int128 v237;
  void *__p[2];
  uint64_t v239;
  __int16 v240;
  char v241;
  float64x2_t v242;
  uint64_t v243;
  double *v244;
  double *v245;
  uint64_t v246;

  *(_OWORD *)v235 = 0u;
  v236 = 0u;
  v237 = 0u;
  *(_OWORD *)__p = 0u;
  v239 = 0;
  v243 = 0;
  v242 = 0uLL;
  v240 = 256;
  v241 = 1;
  v229 = operator new(0x18uLL);
  v230 = v229;
  v231 = (char *)v229 + 24;
  v232 = operator new(0x48uLL);
  v233 = v232;
  v234 = (char *)v232 + 72;
  if (&v232 != (void **)a1)
    std::vector<gm::Matrix<double,3,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,3,1>*,gm::Matrix<double,3,1>*>((uint64_t)&v232, *(_QWORD *)a1, *(char **)(a1 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3));
  v241 = 1;
  if (&v229 != (void **)a2)
    std::vector<gdc::Entity>::__assign_with_size[abi:nn180100]<gdc::Entity*,gdc::Entity*>(&v229, *a2, a2[1], (a2[1] - *a2) >> 3);
  v241 = 0;
  v6 = (unint64_t)(v230 - (_BYTE *)v229) >> 3;
  v7 = -1431655765 * ((unint64_t)(v233 - (_BYTE *)v232) >> 3);
  if ((int)v6 >= v7)
    *(_QWORD *)&v8 = v7;
  else
    *(_QWORD *)&v8 = v6;
  v224 = (LODWORD(v8) - 2);
  if (SLODWORD(v8) < 2)
    goto LABEL_296;
  v9 = (LODWORD(v8) - 1);
  v10 = (float64x2_t *)operator new(24 * v9);
  v11 = (float64x2_t *)operator new(8 * v9);
  v12 = (float64x2_t *)((char *)v10 + 24 * v9);
  v13 = 1;
  v14 = v10;
  v15 = (double *)v11;
  v225 = (LODWORD(v8) - 1);
  v16 = &v11->f64[v225];
  v228.f64[0] = v8;
  do
  {
    v18 = (float64x2_t *)((char *)v232 + 24 * v13);
    v19 = vsubq_f64(*v18, *(float64x2_t *)((char *)v18 - 24));
    v20 = v18[1].f64[0] - v18[-1].f64[1];
    if (v14 >= v12)
    {
      v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)v10) >> 3) + 1;
      if (v21 > 0xAAAAAAAAAAAAAAALL)
        abort();
      if (0x5555555555555556 * (((char *)v12 - (char *)v10) >> 3) > v21)
        v21 = 0x5555555555555556 * (((char *)v12 - (char *)v10) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v10) >> 3) >= 0x555555555555555)
        v22 = 0xAAAAAAAAAAAAAAALL;
      else
        v22 = v21;
      v226 = v19;
      if (v22)
      {
        if (v22 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_329;
        v23 = (char *)operator new(24 * v22);
        v19 = v226;
      }
      else
      {
        v23 = 0;
      }
      v24 = (float64x2_t *)&v23[8 * (((char *)v14 - (char *)v10) >> 3)];
      *v24 = v19;
      v24[1].f64[0] = v20;
      if (v14 == v10)
      {
        v26 = &v23[8 * (((char *)v14 - (char *)v10) >> 3)];
      }
      else
      {
        v25 = &v23[8 * (((char *)v14 - (char *)v10) >> 3)];
        do
        {
          v26 = v25 - 24;
          v27 = *(__int128 *)((char *)&v14[-2] + 8);
          *((_QWORD *)v25 - 1) = *(_QWORD *)&v14[-1].f64[1];
          *(_OWORD *)(v25 - 24) = v27;
          v14 = (float64x2_t *)((char *)v14 - 24);
          v25 -= 24;
        }
        while (v14 != v10);
      }
      v12 = (float64x2_t *)&v23[24 * v22];
      v14 = (float64x2_t *)((char *)v24 + 24);
      if (v10)
      {
        operator delete(v10);
        v19 = v226;
      }
      v10 = (float64x2_t *)v26;
      v8 = v228.f64[0];
    }
    else
    {
      *v14 = v19;
      v14[1].f64[0] = v20;
      v14 = (float64x2_t *)((char *)v14 + 24);
    }
    v28 = sqrt(vaddvq_f64(vmulq_f64(v19, v19)) + v20 * v20);
    if (v15 < v16)
    {
      *v15 = v28;
      v17 = v15 + 1;
      goto LABEL_11;
    }
    v29 = (char *)v15 - (char *)v11;
    v30 = ((char *)v15 - (char *)v11) >> 3;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 61)
      abort();
    if (((char *)v16 - (char *)v11) >> 2 > v31)
      v31 = ((char *)v16 - (char *)v11) >> 2;
    if ((unint64_t)((char *)v16 - (char *)v11) >= 0x7FFFFFFFFFFFFFF8)
      v32 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v32 = v31;
    if (v32)
    {
      if (v32 >> 61)
LABEL_329:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v33 = operator new(8 * v32);
    }
    else
    {
      v33 = 0;
    }
    v34 = (double *)&v33[8 * v30];
    *v34 = v28;
    v17 = v34 + 1;
    if (v15 != (double *)v11)
    {
      v35 = (char *)(v15 - 1) - (char *)v11;
      if (v35 >= 0x168)
      {
        if (&v33[v29 - 8 - (v35 & 0xFFFFFFFFFFFFFFF8)] > &v33[v29 - 8])
        {
          v36 = v15;
        }
        else if ((double *)((char *)v15 - (v35 & 0xFFFFFFFFFFFFFFF8) - 8) > v15 - 1)
        {
          v36 = v15;
        }
        else if ((unint64_t)((char *)v11 - v33) >= 0x20)
        {
          v38 = (v35 >> 3) + 1;
          v36 = &v15[-(v38 & 0x3FFFFFFFFFFFFFFCLL)];
          v39 = &v33[v29 - 16];
          v40 = v15 - 2;
          v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v42 = *(_OWORD *)v40;
            *(v39 - 1) = *((_OWORD *)v40 - 1);
            *v39 = v42;
            v39 -= 2;
            v40 -= 4;
            v41 -= 4;
          }
          while (v41);
          v34 -= v38 & 0x3FFFFFFFFFFFFFFCLL;
          if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_47;
        }
        else
        {
          v36 = v15;
        }
      }
      else
      {
        v36 = v15;
      }
      do
      {
        v37 = *((_QWORD *)v36-- - 1);
        *((_QWORD *)v34-- - 1) = v37;
      }
      while (v36 != (double *)v11);
    }
LABEL_47:
    v16 = (double *)&v33[8 * v32];
    if (v11)
      operator delete(v11);
    v11 = (float64x2_t *)v34;
    v8 = v228.f64[0];
LABEL_11:
    ++v13;
    v15 = v17;
  }
  while (v13 != *(_QWORD *)&v8);
  v227 = HIBYTE(v240);
  if (HIBYTE(v240))
  {
    if (LODWORD(v8) > 4)
    {
      v47 = (*(_QWORD *)&v8 - 1) & 0xFFFFFFFFFFFFFFFCLL;
      v48 = v11 + 1;
      v49 = 0uLL;
      v50 = v47;
      v51 = 0uLL;
      do
      {
        v49 = vaddq_f64(v48[-1], v49);
        v51 = vaddq_f64(*v48, v51);
        v48 += 2;
        v50 -= 4;
      }
      while (v50);
      v43 = vaddvq_f64(vaddq_f64(v51, v49));
      v45 = v225;
      if (*(_QWORD *)&v8 - 1 != v47)
      {
        v44 = v47 | 1;
        goto LABEL_68;
      }
    }
    else
    {
      v43 = 0.0;
      v44 = 1;
      v45 = v225;
LABEL_68:
      v52 = *(_QWORD *)&v8 - v44;
      v53 = &v11->f64[v44 - 1];
      do
      {
        v54 = *v53++;
        v43 = v54 + v43;
        --v52;
      }
      while (v52);
    }
    v46 = v43 / (double)(int)v45;
  }
  else
  {
    v46 = 0.0;
    v45 = v225;
  }
  v55 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*(_QWORD *)&v8 <= v55)
  {
    if (*(_QWORD *)&v8 < v55)
      __p[1] = (char *)__p[0] + 24 * LODWORD(v8);
  }
  else
  {
    std::vector<gm::Matrix<double,3,1>>::__append(__p, *(_QWORD *)&v8 - v55);
  }
  v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v237 - *((_QWORD *)&v236 + 1)) >> 3);
  if (*(_QWORD *)&v8 <= v56)
  {
    if (*(_QWORD *)&v8 < v56)
      *(_QWORD *)&v237 = *((_QWORD *)&v236 + 1) + 24 * LODWORD(v8);
  }
  else
  {
    std::vector<gm::Matrix<double,3,1>>::__append((void **)&v236 + 1, *(_QWORD *)&v8 - v56);
  }
  v57 = v240;
  v58 = (float64x2_t *)operator new(24 * *(_QWORD *)&v8);
  v59 = v58;
  v60 = (char *)v58 + 24 * LODWORD(v8);
  v61 = 0xAAAAAAAAAAAAAAABLL * (((char *)v235[1] - (char *)v235[0]) >> 3);
  if (v61 == 0xAAAAAAAAAAAAAAABLL * ((v233 - (_BYTE *)v232) >> 3))
  {
    if (v227)
    {
      v62 = 0;
      v63 = (double *)v58;
      while (1)
      {
        v65 = (double *)((char *)v235[0] + 24 * v62);
        v66 = *v65;
        v67 = v65[1];
        v68 = v65[2];
        v69 = sqrt(v66 * v66 + v67 * v67 + v68 * v68);
        v70 = v69;
        if (v70 <= 1.0e-20)
          v70 = 1.0;
        v71 = v46 / v70;
        v72 = v71 * v66;
        v73 = v71 * v67;
        v74 = v71 * v68;
        if (v63 < (double *)v60)
        {
          *v63 = v72;
          v63[1] = v73;
          v64 = v63 + 3;
          v63[2] = v74;
        }
        else
        {
          v75 = 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (char *)v59) >> 3) + 1;
          if (v75 > 0xAAAAAAAAAAAAAAALL)
            abort();
          if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v75)
            v75 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555)
            v76 = 0xAAAAAAAAAAAAAAALL;
          else
            v76 = v75;
          if (v76)
          {
            if (v76 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_329;
            v77 = (char *)operator new(24 * v76);
          }
          else
          {
            v77 = 0;
          }
          v78 = (double *)&v77[8 * (((char *)v63 - (char *)v59) >> 3)];
          v60 = &v77[24 * v76];
          *v78 = v72;
          v78[1] = v73;
          v78[2] = v74;
          v64 = v78 + 3;
          if (v63 == (double *)v59)
            goto LABEL_100;
          do
          {
            v79 = *(_OWORD *)(v63 - 3);
            *(v78 - 1) = *(v63 - 1);
            *(_OWORD *)(v78 - 3) = v79;
            v78 -= 3;
            v63 -= 3;
          }
          while (v63 != (double *)v59);
          if (v59)
LABEL_100:
            operator delete(v59);
          v59 = (float64x2_t *)v78;
        }
        ++v62;
        v63 = v64;
        if (v62 == *(_QWORD *)&v228.f64[0])
          goto LABEL_274;
      }
    }
    v167 = 0;
    v168 = v58;
    do
    {
      v171 = (float64_t *)((char *)v235[0] + 24 * v167);
      if (v168 < (float64x2_t *)v60)
      {
        v169 = *(float64x2_t *)v171;
        v168[1].f64[0] = v171[2];
        *v168 = v169;
        v170 = (float64x2_t *)((char *)v168 + 24);
      }
      else
      {
        v172 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168 - (char *)v59) >> 3) + 1;
        if (v172 > 0xAAAAAAAAAAAAAAALL)
          abort();
        if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v172)
          v172 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555)
          v173 = 0xAAAAAAAAAAAAAAALL;
        else
          v173 = v172;
        if (v173)
        {
          if (v173 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_329;
          v174 = (char *)operator new(24 * v173);
        }
        else
        {
          v174 = 0;
        }
        v175 = &v174[8 * (((char *)v168 - (char *)v59) >> 3)];
        v176 = *(float64x2_t *)v171;
        v60 = &v174[24 * v173];
        *((float64_t *)v175 + 2) = v171[2];
        *(float64x2_t *)v175 = v176;
        v170 = (float64x2_t *)(v175 + 24);
        if (v168 == v59)
          goto LABEL_272;
        do
        {
          v177 = *(__int128 *)((char *)&v168[-2] + 8);
          *((_QWORD *)v175 - 1) = *(_QWORD *)&v168[-1].f64[1];
          *(_OWORD *)(v175 - 24) = v177;
          v175 -= 24;
          v168 = (float64x2_t *)((char *)v168 - 24);
        }
        while (v168 != v59);
        if (v59)
LABEL_272:
          operator delete(v59);
        v59 = (float64x2_t *)v175;
      }
      ++v167;
      v168 = v170;
    }
    while (v167 != *(_QWORD *)&v228.f64[0]);
LABEL_274:
    v162 = (float64x2_t *)*((_QWORD *)&v236 + 1);
    v163 = (float64x2_t *)__p[0];
    v8 = v228.f64[0];
    v45 = v225;
    v164 = &qword_19FFB2000;
    goto LABEL_275;
  }
  v244 = 0;
  v245 = 0;
  v246 = 0;
  if ((void *)((char *)v235[1] - (char *)v235[0]) == (void *)48)
    std::vector<gm::Matrix<double,3,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,3,1>*,gm::Matrix<double,3,1>*>((uint64_t)&v244, (unint64_t)v235[0], (char *)v235[1], v61);
  v80 = 0;
  if (SLODWORD(v8) >= 3 && v57)
  {
    v81 = (uint64_t *)((char *)v232 + 24 * v45);
    v82 = *v81;
    v83 = v81[1];
    v84 = v81[2];
    v80 = *(_QWORD *)v232 == v82 && *((_QWORD *)v232 + 1) == v83 && *((_QWORD *)v232 + 2) == v84;
  }
  v87 = 0;
  if (v244 != v245)
    v80 = 1;
  v220 = v80;
  v228 = (float64x2_t)vdupq_n_s64(0x3BC79CA10C924223uLL);
  v88 = v59;
  while (2)
  {
    if (!v87)
    {
      v118 = v244;
      if (v244 != v245)
      {
        if (v227)
        {
          v119 = vsubq_f64(*(float64x2_t *)((char *)v232 + 8), *((float64x2_t *)v232 + 2));
          v120 = vmulq_f64(v119, v119);
          v121 = *v244;
          v122 = v244[2];
          v123.f64[0] = v244[1];
          v123.f64[1] = *(double *)v232 - *((double *)v232 + 3);
          v124 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v120.f64[0], 0);
          v124.f64[0] = v121 * v121;
          v120.f64[0] = v122 * v122;
          v125 = vcvtq_f64_f32(vcvt_f32_f64(vsqrtq_f64(vaddq_f64(vmlaq_f64(v124, v123, v123), v120))));
          v126 = vmovn_s64(vcgtq_f64(v125, v228));
          v127 = v125.f64[1];
          if ((v126.i8[4] & 1) == 0)
            v127 = 1.0;
          if ((v126.i8[0] & 1) == 0)
            v125.f64[0] = 1.0;
          v128 = v127 / v125.f64[0];
          v102 = v128 * v121;
          v103 = v128 * v244[1];
          v104 = v128 * v122;
          if (v88 >= (float64x2_t *)v60)
          {
            v129 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
            if (v129 > 0xAAAAAAAAAAAAAAALL)
              abort();
            if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v129)
              v129 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555)
              v130 = 0xAAAAAAAAAAAAAAALL;
            else
              v130 = v129;
            if (v130)
            {
              if (v130 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_329;
              v131 = (char *)operator new(24 * v130);
            }
            else
            {
              v131 = 0;
            }
            v151 = (double *)&v131[8 * (((char *)v88 - (char *)v59) >> 3)];
            v60 = &v131[24 * v130];
            *v151 = v102;
            v151[1] = v103;
            v151[2] = v104;
            v89 = v151 + 3;
            if (v88 != v59)
            {
              v45 = v225;
              do
              {
                v156 = *(__int128 *)((char *)&v88[-2] + 8);
                *(v151 - 1) = v88[-1].f64[1];
                *(_OWORD *)(v151 - 3) = v156;
                v151 -= 3;
                v88 = (float64x2_t *)((char *)v88 - 24);
              }
              while (v88 != v59);
LABEL_236:
              if (!v59)
              {
LABEL_240:
                v59 = (float64x2_t *)v151;
                goto LABEL_119;
              }
LABEL_239:
              operator delete(v59);
              goto LABEL_240;
            }
LABEL_238:
            v45 = v225;
            goto LABEL_239;
          }
          goto LABEL_118;
        }
        if (v88 < (float64x2_t *)v60)
          goto LABEL_184;
        v148 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
        if (v148 > 0xAAAAAAAAAAAAAAALL)
LABEL_335:
          abort();
        if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v148)
          v148 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555)
          v149 = 0xAAAAAAAAAAAAAAALL;
        else
          v149 = v148;
        if (v149)
        {
          if (v149 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_329;
          v150 = (char *)operator new(24 * v149);
        }
        else
        {
          v150 = 0;
        }
        v157 = (float64x2_t *)&v150[8 * (((char *)v88 - (char *)v59) >> 3)];
        v160 = *(float64x2_t *)v118;
        v60 = &v150[24 * v149];
        v157[1].f64[0] = v118[2];
        *v157 = v160;
        v89 = &v157[1].f64[1];
        if (v88 == v59)
          goto LABEL_249;
        do
        {
          v161 = *(float64x2_t *)((char *)v88 - 24);
          v157[-1].f64[1] = v88[-1].f64[1];
          *(float64x2_t *)((char *)v157 - 24) = v161;
          v157 = (float64x2_t *)((char *)v157 - 24);
          v88 = (float64x2_t *)((char *)v88 - 24);
        }
        while (v88 != v59);
LABEL_248:
        if (v59)
          goto LABEL_249;
        goto LABEL_250;
      }
    }
    if (v87 != v45 || v244 == v245)
    {
      if (v87)
      {
        v108 = v87 - 1;
        if (v87 < v45)
        {
          v109 = v11->f64[v108];
          v110 = v11->f64[v87];
          v111 = 1.0 / (v110 + v109);
          if (fabs(v110 + v109) <= 1.0e-20)
            v111 = 0.0;
          v112 = (float64x2_t *)((char *)v10 + 24 * v108);
          v113 = v111 * v110;
          v114 = (float64x2_t *)((char *)v10 + 24 * v87);
          v115 = v111 * v109;
          v116 = vmlaq_n_f64(vmulq_n_f64(*v112, v113), *v114, v115);
          v117 = v113 * v112[1].f64[0] + v114[1].f64[0] * v115;
          if (v88 >= (float64x2_t *)v60)
          {
            v142 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
            if (v142 > 0xAAAAAAAAAAAAAAALL)
              abort();
            if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v142)
              v142 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555)
              v143 = 0xAAAAAAAAAAAAAAALL;
            else
              v143 = v142;
            if (v143)
            {
              v222 = v116;
              if (v143 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_329;
              v144 = (char *)operator new(24 * v143);
              v116 = v222;
            }
            else
            {
              v144 = 0;
            }
            v151 = (double *)&v144[8 * (((char *)v88 - (char *)v59) >> 3)];
            v60 = &v144[24 * v143];
            *(float64x2_t *)v151 = v116;
            v151[2] = v117;
            v89 = v151 + 3;
            if (v88 != v59)
            {
              v45 = v225;
              do
              {
                v153 = *(__int128 *)((char *)&v88[-2] + 8);
                *(v151 - 1) = v88[-1].f64[1];
                *(_OWORD *)(v151 - 3) = v153;
                v151 -= 3;
                v88 = (float64x2_t *)((char *)v88 - 24);
              }
              while (v88 != v59);
              goto LABEL_236;
            }
            goto LABEL_238;
          }
          *v88 = v116;
LABEL_172:
          v88[1].f64[0] = v117;
          v89 = &v88[1].f64[1];
          goto LABEL_119;
        }
        v136 = (float64x2_t *)((char *)v232 + 24 * v87);
        v137 = (float64x2_t *)((char *)v232 + 24 * v108);
        v132 = vsubq_f64(*v136, *v137);
        v117 = v136[1].f64[0] - v137[1].f64[0];
        if (v88 >= (float64x2_t *)v60)
        {
          v145 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
          if (v145 > 0xAAAAAAAAAAAAAAALL)
            abort();
          if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v145)
            v145 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555)
            v146 = 0xAAAAAAAAAAAAAAALL;
          else
            v146 = v145;
          if (v146)
          {
            v223 = v132;
            if (v146 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_329;
            v147 = (char *)operator new(24 * v146);
            v132 = v223;
          }
          else
          {
            v147 = 0;
          }
          v151 = (double *)&v147[8 * (((char *)v88 - (char *)v59) >> 3)];
          v60 = &v147[24 * v146];
          *(float64x2_t *)v151 = v132;
          v151[2] = v117;
          v89 = v151 + 3;
          if (v88 != v59)
          {
            v45 = v225;
            do
            {
              v154 = *(__int128 *)((char *)&v88[-2] + 8);
              *(v151 - 1) = v88[-1].f64[1];
              *(_OWORD *)(v151 - 3) = v154;
              v151 -= 3;
              v88 = (float64x2_t *)((char *)v88 - 24);
            }
            while (v88 != v59);
            goto LABEL_236;
          }
          goto LABEL_238;
        }
      }
      else
      {
        v132 = vsubq_f64(*(float64x2_t *)((char *)v232 + 24), *(float64x2_t *)v232);
        v117 = *((double *)v232 + 5) - *((double *)v232 + 2);
        if (v88 >= (float64x2_t *)v60)
        {
          v133 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
          if (v133 > 0xAAAAAAAAAAAAAAALL)
            abort();
          if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v133)
            v133 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555)
            v134 = 0xAAAAAAAAAAAAAAALL;
          else
            v134 = v133;
          if (v134)
          {
            v221 = v132;
            if (v134 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_329;
            v135 = (char *)operator new(24 * v134);
            v132 = v221;
          }
          else
          {
            v135 = 0;
          }
          v151 = (double *)&v135[8 * (((char *)v88 - (char *)v59) >> 3)];
          v60 = &v135[24 * v134];
          *(float64x2_t *)v151 = v132;
          v151[2] = v117;
          v89 = v151 + 3;
          if (v88 != v59)
          {
            v45 = v225;
            do
            {
              v152 = *(__int128 *)((char *)&v88[-2] + 8);
              *(v151 - 1) = v88[-1].f64[1];
              *(_OWORD *)(v151 - 3) = v152;
              v151 -= 3;
              v88 = (float64x2_t *)((char *)v88 - 24);
            }
            while (v88 != v59);
            goto LABEL_236;
          }
          goto LABEL_238;
        }
      }
      *v88 = v132;
      goto LABEL_172;
    }
    if (v227)
    {
      v90 = (char *)v232 + 24 * v45;
      v91 = (char *)v232 + 24 * v224;
      v92 = vsubq_f64(*(float64x2_t *)(v90 + 8), *(float64x2_t *)(v91 + 8));
      v93 = vmulq_f64(v92, v92);
      v94 = v244[3];
      v95 = v244[5];
      v96.f64[0] = v244[4];
      v96.f64[1] = *(double *)v90 - *(double *)v91;
      v97 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v93.f64[0], 0);
      v97.f64[0] = v94 * v94;
      v93.f64[0] = v95 * v95;
      v98 = vcvtq_f64_f32(vcvt_f32_f64(vsqrtq_f64(vaddq_f64(vmlaq_f64(v97, v96, v96), v93))));
      v99 = vmovn_s64(vcgtq_f64(v98, v228));
      v100 = v98.f64[1];
      if ((v99.i8[4] & 1) == 0)
        v100 = 1.0;
      if ((v99.i8[0] & 1) == 0)
        v98.f64[0] = 1.0;
      v101 = v100 / v98.f64[0];
      v102 = v101 * v94;
      v103 = v101 * v244[4];
      v104 = v101 * v95;
      if (v88 >= (float64x2_t *)v60)
      {
        v105 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
        if (v105 > 0xAAAAAAAAAAAAAAALL)
          abort();
        if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v105)
          v105 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555)
          v106 = 0xAAAAAAAAAAAAAAALL;
        else
          v106 = v105;
        if (v106)
        {
          if (v106 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_329;
          v107 = (char *)operator new(24 * v106);
        }
        else
        {
          v107 = 0;
        }
        v151 = (double *)&v107[8 * (((char *)v88 - (char *)v59) >> 3)];
        v60 = &v107[24 * v106];
        *v151 = v102;
        v151[1] = v103;
        v151[2] = v104;
        v89 = v151 + 3;
        if (v88 != v59)
        {
          v45 = v225;
          do
          {
            v155 = *(__int128 *)((char *)&v88[-2] + 8);
            *(v151 - 1) = v88[-1].f64[1];
            *(_OWORD *)(v151 - 3) = v155;
            v151 -= 3;
            v88 = (float64x2_t *)((char *)v88 - 24);
          }
          while (v88 != v59);
          goto LABEL_236;
        }
        goto LABEL_238;
      }
LABEL_118:
      v88->f64[0] = v102;
      v88->f64[1] = v103;
      v89 = &v88[1].f64[1];
      v88[1].f64[0] = v104;
      goto LABEL_119;
    }
    v118 = v244 + 3;
    if (v88 < (float64x2_t *)v60)
    {
LABEL_184:
      v141 = *(float64x2_t *)v118;
      v88[1].f64[0] = v118[2];
      *v88 = v141;
      v89 = &v88[1].f64[1];
      goto LABEL_119;
    }
    v138 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
    if (v138 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_335;
    if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v138)
      v138 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555)
      v139 = 0xAAAAAAAAAAAAAAALL;
    else
      v139 = v138;
    if (v139)
    {
      if (v139 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_329;
      v140 = (char *)operator new(24 * v139);
    }
    else
    {
      v140 = 0;
    }
    v157 = (float64x2_t *)&v140[8 * (((char *)v88 - (char *)v59) >> 3)];
    v158 = *(float64x2_t *)v118;
    v60 = &v140[24 * v139];
    v157[1].f64[0] = v118[2];
    *v157 = v158;
    v89 = &v157[1].f64[1];
    if (v88 != v59)
    {
      do
      {
        v159 = *(float64x2_t *)((char *)v88 - 24);
        v157[-1].f64[1] = v88[-1].f64[1];
        *(float64x2_t *)((char *)v157 - 24) = v159;
        v157 = (float64x2_t *)((char *)v157 - 24);
        v88 = (float64x2_t *)((char *)v88 - 24);
      }
      while (v88 != v59);
      goto LABEL_248;
    }
LABEL_249:
    operator delete(v59);
LABEL_250:
    v59 = v157;
    v45 = v225;
LABEL_119:
    ++v87;
    v88 = (float64x2_t *)v89;
    if (v87 != *(_QWORD *)&v8)
      continue;
    break;
  }
  if (v244)
    operator delete(v244);
  v162 = (float64x2_t *)*((_QWORD *)&v236 + 1);
  v163 = (float64x2_t *)__p[0];
  v164 = &qword_19FFB2000;
  if (v220)
  {
LABEL_275:
    v178 = *((double *)v229 + v224);
    v179 = *((double *)v229 + 1) + 1.0 - v178;
    if (v179 <= *((double *)v164 + 360))
      v166 = 0.0;
    else
      v166 = (1.0 - v178 + *(double *)v229 + 1.0 - v178 + *(double *)v229) / v179;
    v165 = 1;
    goto LABEL_279;
  }
  v165 = 0;
  v166 = 0.0;
LABEL_279:
  v180 = 0;
  v181 = 0;
  v182 = v59[1].f64[0] * v166;
  *v162 = vmulq_n_f64(*v59, v166);
  v162[1].f64[0] = v182;
  v183 = v59[1].f64[0] * v166;
  *v163 = vmulq_n_f64(*v59, v166);
  v163[1].f64[0] = v183;
  v184 = 1;
  v185 = (double *)v229;
  v186 = v165 ^ 1;
  v187 = *((double *)v164 + 360);
  do
  {
    v192 = v184 + 1;
    v193 = 0.0;
    if (v45 == v184)
      v194 = v186;
    else
      v194 = 0;
    if ((v194 & 1) == 0)
    {
      v195 = (v184 + 1);
      v193 = 0.0;
      if (v184 >= v45)
        v196 = 1.0;
      else
        v196 = 0.0;
      if (v184 >= v45)
        v195 = 1;
      v197 = *(double *)((char *)v185 + (v181 >> 29));
      v198 = v196 + v185[v195] - v197;
      if (v198 > v187)
        v193 = (v185[v184] - v197 + v185[v184] - v197) / v198;
    }
    v188 = v59[2].f64[v180 / 8 + 1] * v193;
    v189 = (char *)v162 + v180;
    *(float64x2_t *)(v189 + 24) = vmulq_n_f64(*(float64x2_t *)((char *)v59 + v180 + 24), v193);
    *((float64_t *)v189 + 5) = v188;
    v190 = v59[2].f64[v180 / 8 + 1] * v193;
    v191 = (char *)v163 + v180;
    *(float64x2_t *)(v191 + 24) = vmulq_n_f64(*(float64x2_t *)((char *)v59 + v180 + 24), v193);
    *((float64_t *)v191 + 5) = v190;
    v181 += 0x100000000;
    v180 += 24;
    ++v184;
  }
  while (*(_QWORD *)&v8 != v192);
  operator delete(v59);
  if (v11)
    operator delete(v11);
  if (v10)
    operator delete(v10);
LABEL_296:
  v199 = 0xAAAAAAAAAAAAAAABLL * ((v233 - (_BYTE *)v232) >> 3);
  if ((v230 - (_BYTE *)v229) >> 3 < v199)
    v199 = (v230 - (_BYTE *)v229) >> 3;
  v200 = (void *)*((_QWORD *)&v236 + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v237 - *((_QWORD *)&v236 + 1)) >> 3) != v199)
  {
    v201 = __p[0];
    goto LABEL_313;
  }
  v201 = __p[0];
  if (v199)
    v202 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3) == v199;
  else
    v202 = 0;
  if (v202)
  {
    v203 = 0;
    while (*((double *)v229 + v203) <= a3)
    {
      if (v199 == ++v203)
      {
        v203 = v199;
        break;
      }
    }
    if (v203)
    {
      if (v203 == v199)
      {
        v228 = *(float64x2_t *)((char *)v232 + 24 * v199 - 24);
        if (__p[0])
          goto LABEL_314;
        goto LABEL_315;
      }
      v205 = v203 - 1;
      v206 = *((double *)v229 + v203 - 1);
      v207 = *((double *)v229 + v203) - v206;
      v208 = 0.0;
      if (v207 != 0.0)
        v208 = (a3 - v206) / v207;
      v209 = 24 * v205;
      v210 = (float64x2_t *)((char *)v232 + 24 * v205);
      v211 = 24 * v203;
      v212 = (float64x2_t *)(*((_QWORD *)&v236 + 1) + v209);
      __asm { FMOV            V17.2D, #2.0 }
      v217 = vmlaq_f64(v242, _Q17, *v210);
      __asm
      {
        FMOV            V17.2D, #-3.0
        FMOV            V4.2D, #3.0
      }
      v228 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*v210, *v212, v208), vaddq_f64(vaddq_f64(*(float64x2_t *)((char *)__p[0] + v211), *v212), vsubq_f64(v217, vaddq_f64(*(float64x2_t *)((char *)v232 + v211), *(float64x2_t *)((char *)v232 + v211)))), v208 * v208 * v208), vsubq_f64(vsubq_f64(vmlaq_f64(vmlaq_f64(v242, _Q17, *v210), _Q4, *(float64x2_t *)((char *)v232 + v211)), vaddq_f64(*v212, *v212)), *(float64x2_t *)((char *)__p[0] + v211)), v208 * v208);
    }
    else
    {
      v228 = *(float64x2_t *)v232;
      if (!__p[0])
        goto LABEL_315;
    }
LABEL_314:
    __p[1] = v201;
    operator delete(v201);
    v200 = (void *)*((_QWORD *)&v236 + 1);
    goto LABEL_315;
  }
LABEL_313:
  if (v201)
    goto LABEL_314;
LABEL_315:
  if (v200)
  {
    *(_QWORD *)&v237 = v200;
    operator delete(v200);
  }
  if (v235[0])
  {
    v235[1] = v235[0];
    operator delete(v235[0]);
  }
  if (v232)
  {
    v233 = v232;
    operator delete(v232);
  }
  if (v229)
  {
    v230 = v229;
    operator delete(v229);
  }
  return (__n128)v228;
}

void sub_19FE9782C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v24;

  v24 = *(void **)(v22 - 176);
  if (v24)
  {
    operator delete(v24);
    if (!v21)
    {
LABEL_3:
      if (!v19)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if (!v21)
  {
    goto LABEL_3;
  }
  operator delete(v21);
  if (!v19)
  {
LABEL_4:
    if (!v20)
    {
LABEL_10:
      altitude::SplineInterpolator<gm::Matrix<double,3,1>>::~SplineInterpolator(&a19);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(v20);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(v19);
  if (!v20)
    goto LABEL_10;
  goto LABEL_9;
}

_QWORD *altitude::SplineInterpolator<gm::Matrix<double,3,1>>::~SplineInterpolator(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *a1 = &off_1E42C56C0;
  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[1];
  if (v6)
  {
    a1[2] = v6;
    operator delete(v6);
  }
  return a1;
}

void altitude::SplineInterpolator<gm::Matrix<double,3,1>>::~SplineInterpolator(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *a1 = &off_1E42C56C0;
  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[1];
  if (v6)
  {
    a1[2] = v6;
    operator delete(v6);
  }
  JUMPOUT(0x1A1AF4E00);
}

char *std::vector<altitude::AnimationData::LabelEntry>::__push_back_slow_path<altitude::AnimationData::LabelEntry const&>(char **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  std::string *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  char *v17;
  char *v19;
  char *v20;
  char *v21;
  char *v22;

  v2 = *a1;
  v3 = a1[1];
  v4 = (v3 - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    abort();
  v8 = a1[2] - v2;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 59)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v10 = (char *)operator new(32 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[32 * v4];
  v20 = v11;
  v21 = v11;
  v22 = &v10[32 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  v12 = (std::string *)(v11 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
    v2 = *a1;
    v3 = a1[1];
    v11 = v20;
    v13 = v21;
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
    v13 = v11;
  }
  v14 = v13 + 32;
  if (v3 == v2)
  {
    v17 = v2;
  }
  else
  {
    do
    {
      v15 = *((_QWORD *)v3 - 4);
      v3 -= 32;
      *((_QWORD *)v11 - 4) = v15;
      v11 -= 32;
      v16 = *(_OWORD *)(v3 + 8);
      *((_QWORD *)v11 + 3) = *((_QWORD *)v3 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((_QWORD *)v3 + 2) = 0;
      *((_QWORD *)v3 + 3) = 0;
      *((_QWORD *)v3 + 1) = 0;
    }
    while (v3 != v2);
    v17 = *a1;
    v2 = a1[1];
    v14 = v13 + 32;
  }
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v22;
  if (v2 == v17)
  {
    if (v2)
LABEL_20:
      operator delete(v2);
  }
  else
  {
    do
    {
      v19 = v2 - 32;
      if (*(v2 - 1) < 0)
        operator delete(*((void **)v2 - 3));
      v2 -= 32;
    }
    while (v19 != v17);
    v2 = v17;
    if (v17)
      goto LABEL_20;
  }
  return v14;
}

void sub_19FE97BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<md::AnimationData::LabelEntry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void altitude::FlyoverTour::checkLoading(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  uint64_t v4;
  int Status;
  NSObject *v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  pthread_mutex_t **v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void (**v30)(karo::AsyncFileLoader::FileObject *__hidden);
  uint64_t v31;
  std::__shared_weak_count *v32;
  pthread_mutex_t **v33;
  std::__shared_weak_count *v34;
  id v35;
  _QWORD block[5];
  _BYTE v37[24];
  _BYTE *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    return;
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v4 + 104))(&v30);
  Status = karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v30);
  if ((Status & 3) == 0)
  {
    if (Status == 4
      && (v12 = v33,
          pthread_mutex_lock(v33[19]),
          v13 = *((_DWORD *)v12 + 40),
          pthread_mutex_unlock(v12[19]),
          (v13 & 1) != 0)
      && (v14 = (*(uint64_t (**)(pthread_mutex_t **))&(*v33)->__opaque[48])(v33)) != 0)
    {
      v15 = v14;
      v16 = objc_alloc(MEMORY[0x1E0C99D50]);
      v17 = (void *)objc_msgSend(v16, "initWithBytes:length:", v15, (*(uint64_t (**)(pthread_mutex_t **))&(*v33)->__opaque[40])(v33));
      if (v17)
        v18 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D272D8]), "initWithData:", v17);
      else
        v18 = 0;

    }
    else
    {
      v18 = 0;
    }
    v19 = v18;
    v35 = v19;
    v20 = a3[3];
    if (!v20)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
      return;
    }
    (*(void (**)(uint64_t, id *))(*(_QWORD *)v20 + 48))(v20, &v35);

    goto LABEL_21;
  }
  v8 = **(id **)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 856) + 8);
  block[1] = 3321888768;
  v9 = a2[1];
  v39 = *a2;
  block[0] = MEMORY[0x1E0C809B0];
  block[2] = ___ZNK8altitude11FlyoverTour12checkLoadingENS_7TileKeyENSt3__18functionIFvPK12GEOPDFlyoverEEE_block_invoke;
  block[3] = &__block_descriptor_104_ea8_40c42_ZTSNSt3__18functionIFvPK12GEOPDFlyoverEEE72c24_ZTSKN8altitude7TileKeyE_e5_v8__0l;
  block[4] = a1;
  v40 = v9;
  v10 = v37;
  v11 = a3[3];
  if (!v11)
    goto LABEL_6;
  if ((_QWORD *)v11 != a3)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
LABEL_6:
    v38 = (_BYTE *)v11;
    goto LABEL_16;
  }
  v38 = v37;
  (*(void (**)(_QWORD *, _BYTE *))(*a3 + 24))(a3, v37);
LABEL_16:
  dispatch_async(v8, block);

  if (v38 == v37)
  {
    v21 = 4;
  }
  else
  {
    if (!v38)
      goto LABEL_21;
    v21 = 5;
    v10 = v38;
  }
  (*(void (**)(_QWORD *))(*v10 + 8 * v21))(v10);
LABEL_21:
  v30 = &off_1E42C2C18;
  v22 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v30 = &off_1E42C2D08;
  if (v31)
  {
    v25 = (unsigned int *)(v31 + 128);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
  }
  v27 = v32;
  if (v32)
  {
    v28 = (unint64_t *)&v32->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_19FE97EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  karo::AsyncFileLoader::FileObject::~FileObject((karo::AsyncFileLoader::FileObject *)&a9);
  _Unwind_Resume(a1);
}

void sub_19FE98018(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FE98024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      _Unwind_Resume(exception_object);
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
  _Unwind_Resume(exception_object);
}

__n128 __copy_helper_block_ea8_40c42_ZTSNSt3__18functionIFvPK12GEOPDFlyoverEEE72c24_ZTSKN8altitude7TileKeyE(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 result;

  v4 = *(_QWORD *)(a2 + 64);
  if (v4)
  {
    if (v4 == a2 + 40)
    {
      *(_QWORD *)(a1 + 64) = a1 + 40;
      (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 64) + 24))(*(_QWORD *)(a2 + 64));
    }
    else
    {
      *(_QWORD *)(a1 + 64) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  result = *(__n128 *)(a2 + 88);
  *(__n128 *)(a1 + 88) = result;
  return result;
}

_QWORD *__destroy_helper_block_ea8_40c42_ZTSNSt3__18functionIFvPK12GEOPDFlyoverEEE72(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

_QWORD *std::__function::__func<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0,std::allocator<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0>,void ()(GEOPDFlyover const*)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E42D9488;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0,std::allocator<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0>,void ()(GEOPDFlyover const*)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E42D9488;
  v1 = a1 + 3;
  v2 = (_QWORD *)a1[6];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1A1AF4E00);
}

char *std::__function::__func<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0,std::allocator<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0>,void ()(GEOPDFlyover const*)>::__clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E42D9488;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    if (v3 == a1 + 24)
    {
      *((_QWORD *)v2 + 6) = v2 + 24;
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
      return v2;
    }
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  }
  *((_QWORD *)v2 + 6) = v3;
  return v2;
}

void sub_19FE98254(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0,std::allocator<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0>,void ()(GEOPDFlyover const*)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a2 = &off_1E42D9488;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v3 = *(_QWORD *)(result + 48);
  if (v3)
  {
    if (v3 == result + 24)
    {
      *(_QWORD *)(a2 + 48) = a2 + 24;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 48) + 24))(*(_QWORD *)(result + 48));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 16))(*(_QWORD *)(result + 48));
      *(_QWORD *)(a2 + 48) = result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 48) = 0;
  }
  return result;
}

_QWORD *std::__function::__func<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0,std::allocator<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0>,void ()(GEOPDFlyover const*)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 24);
  result = *(_QWORD **)(a1 + 48);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0,std::allocator<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0>,void ()(GEOPDFlyover const*)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 24;
  v3 = (char *)*((_QWORD *)__p + 6);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0,std::allocator<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0>,void ()(GEOPDFlyover const*)>::operator()(_QWORD *a1, id *a2)
{
  id v3;
  id v4;
  id *v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  id v10;

  v3 = *a2;
  v4 = *a2;
  v5 = *(id **)(*(_QWORD *)(a1[1] + 48) + 8);
  if (!v5)
LABEL_7:
    abort();
  v6 = a1[2];
  while (1)
  {
    while (1)
    {
      v7 = (unint64_t)v5[4];
      if (v6 >= v7)
        break;
      v5 = (id *)*v5;
      if (!v5)
        goto LABEL_7;
    }
    if (v7 >= v6)
      break;
    v5 = (id *)v5[1];
    if (!v5)
      goto LABEL_7;
  }
  objc_storeStrong(v5 + 5, v3);
  v8 = v4;
  v10 = v8;
  v9 = a1[6];
  if (v9)
  {
    (*(void (**)(uint64_t, id *))(*(_QWORD *)v9 + 48))(v9, &v10);

  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
}

void sub_19FE9842C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void ggl::DaVinci::GroundPipelineSetup::~GroundPipelineSetup(ggl::DaVinci::GroundPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::DaVinci::GroundNonCompressedPipelineSetup::~GroundNonCompressedPipelineSetup(ggl::DaVinci::GroundNonCompressedPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::DaVinci::GroundNonCompressedPipelineSetup::constantDataIsEnabled(ggl::DaVinci::GroundNonCompressedPipelineSetup *this, uint64_t a2)
{
  _BOOL8 result;
  int v4;

  result = 1;
  switch(a2)
  {
    case 0:
    case 1:
    case 3:
    case 5:
    case 8:
    case 10:
    case 13:
    case 28:
      return result;
    case 2:
    case 18:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 309);
      goto LABEL_20;
    case 4:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 329);
      goto LABEL_20;
    case 6:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 330);
      goto LABEL_20;
    case 7:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 331);
      goto LABEL_20;
    case 9:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 335);
      goto LABEL_20;
    case 11:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 336);
      goto LABEL_20;
    case 12:
    case 21:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 326);
      goto LABEL_20;
    case 14:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 317);
      goto LABEL_20;
    case 15:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 318);
      goto LABEL_20;
    case 16:
    case 25:
    case 26:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 324);
      goto LABEL_20;
    case 17:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 343);
      goto LABEL_20;
    case 19:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 327);
      goto LABEL_20;
    case 20:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 320);
      goto LABEL_20;
    case 22:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 310);
      goto LABEL_20;
    case 23:
    case 24:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 311);
      goto LABEL_20;
    case 27:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 325);
      goto LABEL_20;
    case 29:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 315);
LABEL_20:
      result = v4 != 0;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

BOOL ggl::DaVinci::GroundNonCompressedPipelineSetup::textureIsEnabled(ggl::DaVinci::GroundNonCompressedPipelineSetup *this, uint64_t a2)
{
  _BOOL8 result;
  int v4;

  result = 1;
  switch(a2)
  {
    case 0:
    case 2:
    case 3:
      return result;
    case 1:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 309);
      goto LABEL_11;
    case 4:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 315);
      goto LABEL_11;
    case 5:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 327);
      goto LABEL_11;
    case 6:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 324);
      goto LABEL_11;
    case 7:
    case 8:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 314);
      goto LABEL_11;
    case 9:
    case 10:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 338);
      goto LABEL_11;
    case 11:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 310);
      goto LABEL_11;
    case 12:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 311);
LABEL_11:
      result = v4 != 0;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void std::__shared_ptr_emplace<ggl::Sky::SkyPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4188;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::Sky::SkyPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E4188;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::Sky::SkyPipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::Sky::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::Sky::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Sky::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2128;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Sky::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E2128;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Sky::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CC188;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CC140;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CC140;
  a2[1] = v2;
  return result;
}

void md::ARWalkingManeuverLabelFeature::~ARWalkingManeuverLabelFeature(md::ARWalkingManeuverLabelFeature *this)
{
  md::ARWalkingManeuverLabelFeature::~ARWalkingManeuverLabelFeature(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42A6758;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 103));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 100);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!*((_BYTE *)this + 776))
      goto LABEL_12;
  }
  else
  {
LABEL_5:
    if (!*((_BYTE *)this + 776))
      goto LABEL_12;
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 96);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
LABEL_12:
  if (*((char *)this + 719) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 90) + 40))(*((_QWORD *)this + 90), *((_QWORD *)this + 87), *((_QWORD *)this + 89) & 0x7FFFFFFFFFFFFFFFLL);
  *((_QWORD *)this + 84) = &off_1E42B51D0;

  md::PointLabelFeature::~PointLabelFeature(this);
}

uint64_t md::ARWalkingManeuverLabelFeature::labelTypeAtPosition()
{
  return 13;
}

uint64_t md::ARWalkingManeuverLabelFeature::newRootPart(_QWORD *a1, md::LabelManager *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 *v14;
  int v15;
  int v17;

  v7 = a1[58];
  if (!v7)
    goto LABEL_12;
  v8 = *(_DWORD *)(a3 + 48);
  v9 = a1 + 58;
  do
  {
    v10 = *(_DWORD *)(v7 + 32);
    v11 = v10 >= v8;
    if (v10 >= v8)
      v12 = (uint64_t *)v7;
    else
      v12 = (uint64_t *)(v7 + 8);
    if (v11)
      v9 = (_QWORD *)v7;
    v7 = *v12;
  }
  while (*v12);
  if (v9 == a1 + 58 || v8 < *((_DWORD *)v9 + 8))
  {
LABEL_12:
    v13 = (uint64_t)(a1 + 87);
    v14 = (__int128 *)(*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 480))(a1, 0);
    v15 = (*(unsigned __int8 *)(a4 + 250) >> 4) & 1;
    return md::ARWalkingFaceAlignedManeuverLabelPart::createPart(a2, (float *)a3, a4, v13, v15, v14);
  }
  v17 = *((unsigned __int8 *)v9 + 121);
  v13 = (uint64_t)(a1 + 87);
  v14 = (__int128 *)(*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 480))(a1, 0);
  v15 = (*(unsigned __int8 *)(a4 + 250) >> 4) & 1;
  if (v17 == 1)
    return md::ARWalkingPerpendicularManeuverLabelPart::createPart(a2, (float *)a3, a4, v13, v15, v14);
  if (!v17)
    return md::ARWalkingFaceAlignedManeuverLabelPart::createPart(a2, (float *)a3, a4, v13, v15, v14);
  return 0;
}

BOOL md::ARWalkingManeuverLabelFeature::updateDynamicStyling(md::ARWalkingManeuverLabelFeature *this, LabelManager *a2, md::Label *a3)
{
  uint64_t **v4;
  char *v5;
  unsigned int v6;
  uint64_t **v7;
  char *v8;
  unsigned int v9;
  BOOL v10;
  char **v11;
  _BOOL8 v12;
  char v13;
  char *v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;

  v4 = (uint64_t **)((char *)this + 824);
  v5 = (char *)*((_QWORD *)this + 103);
  if (v5)
  {
    v6 = *((_DWORD *)a3 + 12);
    v7 = (uint64_t **)((char *)this + 824);
    v8 = (char *)*((_QWORD *)this + 103);
    do
    {
      v9 = *((_DWORD *)v8 + 7);
      v10 = v9 >= v6;
      if (v9 >= v6)
        v11 = (char **)v8;
      else
        v11 = (char **)(v8 + 8);
      if (v10)
        v7 = (uint64_t **)v8;
      v8 = *v11;
    }
    while (*v11);
    v12 = v7 != v4 && v6 >= *((_DWORD *)v7 + 7) && *((unsigned __int8 *)v7 + 32) != *((unsigned __int8 *)this + 809);
    v13 = *((_BYTE *)this + 809);
    do
    {
      while (1)
      {
        v14 = v5;
        v15 = *((_DWORD *)v5 + 7);
        if (v6 < v15)
          break;
        if (v15 >= v6)
          goto LABEL_25;
        v5 = (char *)*((_QWORD *)v14 + 1);
        if (!v5)
        {
          v4 = (uint64_t **)(v14 + 8);
          goto LABEL_22;
        }
      }
      v5 = *(char **)v14;
    }
    while (*(_QWORD *)v14);
    v4 = (uint64_t **)v14;
  }
  else
  {
    v12 = 0;
    v13 = *((_BYTE *)this + 809);
    v6 = *((_DWORD *)a3 + 12);
    v14 = (char *)this + 824;
  }
LABEL_22:
  v16 = v14;
  v14 = (char *)operator new(0x28uLL);
  *((_DWORD *)v14 + 7) = v6;
  v14[32] = 0;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = v16;
  *v4 = (uint64_t *)v14;
  v17 = **((_QWORD **)this + 102);
  v18 = (uint64_t *)v14;
  if (v17)
  {
    *((_QWORD *)this + 102) = v17;
    v18 = *v4;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 103), v18);
  ++*((_QWORD *)this + 104);
LABEL_25:
  v14[32] = v13;
  return v12;
}

uint64_t md::ARWalkingManeuverLabelFeature::facingVector(uint64_t a1)
{
  return *(_QWORD *)(a1 + 728);
}

unint64_t md::ARWalkingManeuverLabelFeature::skewOffsettingVector(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 464);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 464;
  do
  {
    v5 = *(_DWORD *)(v2 + 32);
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 464 || v3 < *(_DWORD *)(v4 + 32) || *(_BYTE *)(v4 + 121) == 1)
    return 0;
  else
    return *(_QWORD *)(a1 + 744) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a1 + 744);
}

uint64_t md::ARWalkingManeuverLabelFeature::skewOffsettingLimits@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, int8x8_t *a3@<X8>, int8x8_t a4@<D1>)
{
  uint64_t v4;
  int8x8_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;

  v4 = *(_QWORD *)(result + 464);
  v5 = 0;
  if (v4)
  {
    v6 = *a2;
    v7 = result + 464;
    do
    {
      v8 = *(_DWORD *)(v4 + 32);
      v9 = v8 >= v6;
      if (v8 >= v6)
        v10 = (uint64_t *)v4;
      else
        v10 = (uint64_t *)(v4 + 8);
      if (v9)
        v7 = v4;
      v4 = *v10;
    }
    while (*v10);
    if (v7 != result + 464 && v6 >= *(_DWORD *)(v7 + 32))
    {
      v5.i8[0] = *(_BYTE *)(v7 + 121);
      a4.i32[0] = 1;
      v5 = vbic_s8((int8x8_t)0x4000000040000000, vdup_lane_s8(vceq_s8(v5, a4), 0));
    }
  }
  *a3 = v5;
  return result;
}

id md::ARWalkingManeuverLabelFeature::arWalkingFeature(id *this)
{
  return this[85];
}

uint64_t md::ARWalkingManeuverLabelFeature::labelFeatureType(md::ARWalkingManeuverLabelFeature *this)
{
  return 24;
}

uint64_t md::ARWalkingManeuverLabelFeature::dedupingGroup@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 800);
  *a2 = *(_QWORD *)(this + 792);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t md::ARWalkingManeuverLabelFeature::routeCoordinate(uint64_t a1)
{
  return *(_QWORD *)(a1 + 784);
}

uint64_t md::ARWalkingManeuverLabelFeature::isRouteFeature(md::ARWalkingManeuverLabelFeature *this)
{
  return 1;
}

void md::ARWalkingManeuverLabelFeature::populateDebugNode(id *this, gdc::DebugTreeNode *a2, const md::LabelManager *a3)
{
  id v5;
  void *v6;
  const std::string::value_type *v7;
  const std::string::value_type *v8;
  const std::string::value_type *v9;
  id v10;
  id v11;
  uint64_t v12;
  char *ChildNode;
  uint64_t v14;
  float v15;
  char *v16;
  int v17;
  uint64_t v18;
  float v19;
  int v20;
  float v21;
  int v22;
  float v23;
  char *v24;
  uint64_t *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  id *v33;
  id **v34;
  unsigned int v35;
  char *v36;
  char *v37;
  uint64_t v38;
  id *v39;
  id **v40;
  BOOL v41;
  void *v42;
  _QWORD v43[7];
  int v44;
  char v45[16];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char v51[16];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  char v57[16];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  std::string v63;
  _BYTE v64[24];
  void *v65;
  char v66;
  void **v67;
  void *__p;
  void *v69;
  _QWORD v70[7];
  int v71;
  char v72[16];
  double v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  char v78[16];
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  char v84[16];
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  char v90[16];
  double v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  char v96[8];
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  char v102[16];
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  char v108[32];
  std::string v109;
  int v110;
  char v111[32];
  std::string v112;
  int v113;

  md::LabelFeature::populateDebugNode((md::LabelFeature *)this, a2, (unint64_t)a3);
  v5 = this[85];
  objc_msgSend(v5, "description");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v42 = v6;
  if (v6)
  {
    v64[23] = 18;
    strcpy(v64, "VKARWalkingFeature");
    v7 = (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(v6), "UTF8String");
    memset(&v112, 0, sizeof(v112));
    v113 = 4;
    if (v7)
    {
      std::string::__assign_external(&v112, v7);
    }
    else
    {
      *((_BYTE *)&v112.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&v112, "<null>");
    }
    gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v64, (uint64_t)v111);
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v112.__r_.__value_.__l.__data_);
  }
  v64[23] = 4;
  strcpy(v64, "Text");
  v8 = (const std::string::value_type *)(this + 87);
  if (*((char *)this + 719) < 0)
  {
    v9 = *(const std::string::value_type **)v8;
    memset(&v109, 0, sizeof(v109));
    v110 = 4;
    if (v9)
    {
      std::string::__assign_external(&v109, v9);
    }
    else
    {
      *((_BYTE *)&v109.__r_.__value_.__s + 23) = 6;
      qmemcpy(&v109, "<null>", 6);
    }
  }
  else
  {
    memset(&v109, 0, sizeof(v109));
    v110 = 4;
    std::string::__assign_external(&v109, v8);
  }
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v64, (uint64_t)v108);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  v10 = this[85];
  v64[23] = 7;
  strcpy(v64, "Bearing");
  v11 = v10;
  objc_msgSend(v11, "maneuverHeading");
  v105 = 0;
  v104 = 0;
  v106 = 0;
  v107 = 2;
  v103 = v12;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v64, (uint64_t)v102);

  v64[23] = 15;
  strcpy(v64, "RouteCoordinate");
  ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (__int128 *)v64);
  v14 = *((unsigned int *)this + 196);
  v64[23] = 5;
  strcpy(v64, "index");
  v100 = 0;
  v99 = 0;
  v101 = 1;
  v98 = 0;
  v97 = v14;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v64, (uint64_t)v96);
  v15 = *((float *)this + 197);
  v64[23] = 6;
  strcpy(v64, "offset");
  v94 = 0;
  v92 = 0;
  v93 = 0;
  v95 = 2;
  v91 = v15;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v64, (uint64_t)v90);
  if (*((_BYTE *)this + 740))
  {
    v64[23] = 10;
    strcpy(v64, "FaceVector");
    v16 = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (__int128 *)v64);
    v17 = *((unsigned __int8 *)this + 740);
    v64[23] = 1;
    strcpy(v64, "x");
    if (!v17)
      goto LABEL_46;
    v18 = (uint64_t)v16;
    v19 = *((float *)this + 182);
    v88 = 0;
    v86 = 0;
    v87 = 0;
    v89 = 2;
    v85 = v19;
    gdc::DebugTreeNode::addProperty((uint64_t)v16, (uint64_t)v64, (uint64_t)v84);
    v20 = *((unsigned __int8 *)this + 740);
    v64[23] = 1;
    strcpy(v64, "y");
    if (!v20)
      goto LABEL_46;
    v21 = *((float *)this + 183);
    v82 = 0;
    v80 = 0;
    v81 = 0;
    v83 = 2;
    v79 = v21;
    gdc::DebugTreeNode::addProperty(v18, (uint64_t)v64, (uint64_t)v78);
    v22 = *((unsigned __int8 *)this + 740);
    v64[23] = 1;
    strcpy(v64, "z");
    if (!v22)
      goto LABEL_46;
    v23 = *((float *)this + 184);
    v76 = 0;
    v74 = 0;
    v75 = 0;
    v77 = 2;
    v73 = v23;
    gdc::DebugTreeNode::addProperty(v18, (uint64_t)v64, (uint64_t)v72);
  }
  if (!*((_BYTE *)this + 776))
    goto LABEL_29;
  v24 = (char *)operator new(0x28uLL);
  *(_QWORD *)v64 = v24;
  *(_OWORD *)&v64[8] = xmmword_19FFB3840;
  strcpy(v24, "HighPrecisionAltitudeRequestIsSet");
  v71 = 0;
  memset(&v70[4], 0, 24);
  v70[0] = 1;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v64, (uint64_t)v70);
  operator delete(v24);
  if (!*((_BYTE *)this + 776))
  {
LABEL_46:
    std::__throw_bad_optional_access[abi:nn180100]();
    __break(1u);
    return;
  }
  v25 = (uint64_t *)this[95];
  if (v25)
  {
    md::HighPrecisionAltitudeRequest::createDebugNode((md::HighPrecisionAltitudeRequest *)v64, v25);
    gdc::DebugTreeNode::addChildNode(a2, (__int128 *)v64);
    v26 = __p;
    if (__p)
    {
      v27 = (uint64_t)v69;
      v28 = __p;
      if (v69 != __p)
      {
        do
        {
          v27 -= 80;
          std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v27);
        }
        while ((void *)v27 != v26);
        v28 = __p;
      }
      v69 = v26;
      operator delete(v28);
    }
    std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v67);
    if (v66 < 0)
    {
      operator delete(v65);
      if ((v64[23] & 0x80000000) == 0)
        goto LABEL_29;
    }
    else if ((v64[23] & 0x80000000) == 0)
    {
      goto LABEL_29;
    }
    operator delete(*(void **)v64);
  }
LABEL_29:
  LODWORD(v63.__r_.__value_.__l.__data_) = 1;
  v29 = (*((uint64_t (**)(id *, std::string *))*this + 14))(this, &v63);
  md::LabelPoint::coordinate((md::LabelPoint *)v64, v29);
  *((_BYTE *)&v63.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&v63, "LabelPoint");
  v30 = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (__int128 *)&v63);
  *((_BYTE *)&v63.__r_.__value_.__s + 23) = 3;
  LODWORD(v63.__r_.__value_.__l.__data_) = 7627116;
  v60 = 0;
  v61 = 0;
  v59 = 0;
  v62 = 2;
  v58 = *(_QWORD *)v64;
  gdc::DebugTreeNode::addProperty((uint64_t)v30, (uint64_t)&v63, (uint64_t)v57);
  *((_BYTE *)&v63.__r_.__value_.__s + 23) = 3;
  LODWORD(v63.__r_.__value_.__l.__data_) = 7237484;
  v54 = 0;
  v55 = 0;
  v53 = 0;
  v56 = 2;
  v52 = *(_QWORD *)&v64[8];
  gdc::DebugTreeNode::addProperty((uint64_t)v30, (uint64_t)&v63, (uint64_t)v51);
  *((_BYTE *)&v63.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&v63, "altitude");
  v48 = 0;
  v49 = 0;
  v47 = 0;
  v50 = 2;
  v46 = *(_QWORD *)&v64[16];
  gdc::DebugTreeNode::addProperty((uint64_t)v30, (uint64_t)&v63, (uint64_t)v45);
  v31 = (char *)operator new(0x20uLL);
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  *(_OWORD *)&v63.__r_.__value_.__r.__words[1] = xmmword_19FFB3800;
  strcpy(v31, "FallbackOcclusionStyling");
  v32 = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (__int128 *)&v63);
  operator delete(v31);
  v33 = (id *)this[102];
  v34 = (id **)(this + 103);
  if (v33 != this + 103)
  {
    do
    {
      v35 = *((_DWORD *)v33 + 7);
      if (v35)
      {
        std::to_string(&v63, v35);
      }
      else
      {
        *((_BYTE *)&v63.__r_.__value_.__s + 23) = 7;
        strcpy((char *)&v63, "UNKNOWN");
      }
      v36 = gdc::DebugTreeNode::createChildNode((uint64_t)v32, (__int128 *)&v63);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      v37 = (char *)operator new(0x20uLL);
      v63.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
      *(_OWORD *)&v63.__r_.__value_.__r.__words[1] = xmmword_19FFB3800;
      strcpy(v37, "FallbackOcclusionStyling");
      v38 = *((unsigned __int8 *)v33 + 32);
      memset(&v43[4], 0, 24);
      v44 = 0;
      v43[0] = v38;
      gdc::DebugTreeNode::addProperty((uint64_t)v36, (uint64_t)&v63, (uint64_t)v43);
      operator delete(v37);
      v39 = (id *)v33[1];
      if (v39)
      {
        do
        {
          v40 = (id **)v39;
          v39 = (id *)*v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          v40 = (id **)v33[2];
          v41 = *v40 == v33;
          v33 = (id *)v40;
        }
        while (!v41);
      }
      v33 = (id *)v40;
    }
    while (v40 != v34);
  }

}

void sub_19FE995EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t md::ARWalkingManeuverLabelFeature::style(_QWORD *a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  unsigned int v13;
  int v14;

  v2 = a1[58];
  if (!v2)
    return (uint64_t)(a1 + 10);
  v3 = a1 + 58;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 >= a2;
    if (v4 >= a2)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (v5)
      v3 = (_QWORD *)v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == a1 + 58 || *((_DWORD *)v3 + 8) > a2)
    return (uint64_t)(a1 + 10);
  v8 = a1[103];
  if (!v8)
    goto LABEL_24;
  v9 = a1 + 103;
  do
  {
    v10 = *(_DWORD *)(v8 + 28);
    v11 = v10 >= a2;
    if (v10 >= a2)
      v12 = (uint64_t *)v8;
    else
      v12 = (uint64_t *)(v8 + 8);
    if (v11)
      v9 = (_QWORD *)v8;
    v8 = *v12;
  }
  while (*v12);
  if (v9 != a1 + 103 && *((_DWORD *)v9 + 7) <= a2)
  {
    v13 = *((unsigned __int8 *)v9 + 32);
    v14 = *((unsigned __int8 *)v3 + 121);
    if (v14)
      return a1[12] + 16 * (v13 + v14 + 1);
  }
  else
  {
LABEL_24:
    v13 = 0;
    v14 = *((unsigned __int8 *)v3 + 121);
    if (v14)
      return a1[12] + 16 * (v13 + v14 + 1);
  }
  return a1[12] + 16 * v13;
}

void md::ARWalkingManeuverLabelFeature::populateStyleQueries(_BYTE *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 v9;
  char *v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unsigned __int8 v25;
  size_t v26;
  _QWORD *v27;
  uint64_t v28;
  int *v29;
  int v30;
  uint64_t v31;
  int *v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  _QWORD *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  int *v49;
  int v50;
  unsigned __int8 v51;
  int *v52;
  int v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  _OWORD *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  __int128 v82;
  __int128 v83;
  __int16 v84;
  char *v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v91 = 0;
  if ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 488))(a1)
    && (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)a1 + 480))(a1, 0))
  {
    v6 = operator new();
    v7 = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)a1 + 480))(a1, 0);
    *(_QWORD *)(v6 + 24) = *(_QWORD *)(v7 + 24);
    if (*(char *)(v7 + 23) < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)v6, *(void **)v7, *(_QWORD *)(v7 + 8));
    }
    else
    {
      v8 = *(_OWORD *)v7;
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v6 = v8;
    }
    v91 = (_QWORD *)v6;
  }
  v87 = 0;
  v88 = 0;
  v89 = 0;
  {
    v79 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v79, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v90 = mdm::Allocator::instance(void)::alloc;
  v10 = (char *)operator new(0x40uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1E42DAB40;
  *(_OWORD *)(v10 + 24) = 0u;
  v11 = (uint64_t)(v10 + 24);
  *(_OWORD *)(v10 + 40) = 0u;
  *(_DWORD *)(v10 + 55) = 0;
  v12 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  *((_QWORD *)v10 + 3) = v12;
  if (v12)
  {
    *(_QWORD *)&v13 = -1;
    *((_QWORD *)&v13 + 1) = -1;
    v12[14] = v13;
    v12[15] = v13;
    v12[12] = v13;
    v12[13] = v13;
    v12[10] = v13;
    v12[11] = v13;
    v12[8] = v13;
    v12[9] = v13;
    v12[6] = v13;
    v12[7] = v13;
    v12[4] = v13;
    v12[5] = v13;
    v12[2] = v13;
    v12[3] = v13;
    *v12 = v13;
    v12[1] = v13;
  }
  v14 = 0;
  v15 = 0;
  v85 = v10 + 24;
  v86 = (std::__shared_weak_count *)v10;
  v84 = 256;
  do
  {
    v16 = v14;
    v17 = *((unsigned __int8 *)&v84 + v15);
    if (a1[808])
      v18 = 0;
    else
      v18 = (_DWORD)v17 == 1;
    if (v18)
      goto LABEL_11;
    v88 = v87;
    v19 = v11 & 0xFFFFFFFFFFFF0000 | v17;
    v11 = v19 | 0x100;
    md::ARWalkingManeuverLabelFeature::attributesForFeature((uint64_t)&v87, v19 | 0x100);
    (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a1 + 544))(a1, &v87);
    v20 = v85;
    v21 = v87;
    if (((v88 - v87) & 0x7FFFFFFF8) != 0)
    {
      v22 = 0;
      v23 = 0;
      v24 = ((unint64_t)(v88 - v87) >> 3);
      v25 = v85[33];
      while (1)
      {
        v26 = v25;
        v27 = *(_QWORD **)v20;
        if (v25)
          break;
LABEL_18:
        v27[v26] = *(_QWORD *)(v21 + 8 * v22);
        v25 = v20[33] + 1;
        v20[33] = v25;
        ++v22;
        v23 = 1;
        if (v22 == v24)
        {
          v27 = *(_QWORD **)v20;
          v26 = v25;
LABEL_35:
          qsort(v27, v26, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
          goto LABEL_36;
        }
      }
      if (v25 > 0x1Fu)
      {
        do
        {
          v31 = 0;
          v32 = (int *)v27;
          while (1)
          {
            v33 = *v32;
            v32 += 2;
            if (v33 == *(_DWORD *)(v21 + 8 * v22))
              break;
            if (v26 == ++v31)
              goto LABEL_29;
          }
          HIDWORD(v27[v31]) = *(_DWORD *)(v21 + 8 * v22 + 4);
LABEL_29:
          ++v22;
        }
        while (v22 != v24);
      }
      else
      {
        do
        {
          v28 = 0;
          v29 = (int *)v27;
          while (1)
          {
            v30 = *v29;
            v29 += 2;
            if (v30 == *(_DWORD *)(v21 + 8 * v22))
              break;
            if (v26 == ++v28)
              goto LABEL_18;
          }
          HIDWORD(v27[v28]) = *(_DWORD *)(v21 + 8 * v22++ + 4);
        }
        while (v22 != v24);
      }
      if ((v23 & 1) != 0)
        goto LABEL_35;
    }
LABEL_36:
    v34 = v86;
    *(_QWORD *)&v82 = v20;
    *((_QWORD *)&v82 + 1) = v86;
    if (v86)
    {
      p_shared_owners = (unint64_t *)&v86->__shared_owners_;
      do
        v36 = __ldxr(p_shared_owners);
      while (__stxr(v36 + 1, p_shared_owners));
    }
    v37 = v91;
    md::createFeatureAttributeSet((gss::Allocator *)&v92, (uint64_t *)&v82);
    md::LabelStyleCache::styleQueryForFeatureAttributes((unint64_t *)&v83, a3, &v92, v37);
    if (v92)
    {
      v93 = v92;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v95 + 40))(v95, v92, v94 - v92);
    }
    if (v34)
    {
      v38 = (unint64_t *)&v34->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v40 = *(_QWORD **)(a2 + 8);
    if ((unint64_t)v40 >= *(_QWORD *)(a2 + 16))
    {
      v44 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(a2, &v83);
    }
    else
    {
      if (v40)
      {
        *v40 = v83;
        v41 = *((_QWORD *)&v83 + 1);
        v40[1] = *((_QWORD *)&v83 + 1);
        if (v41)
        {
          v42 = (unint64_t *)(v41 + 8);
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
      }
      v44 = v40 + 2;
    }
    *(_QWORD *)(a2 + 8) = v44;
    v45 = (uint64_t)v85;
    v46 = v85[33];
    v47 = *(_DWORD **)v85;
    if (v85[33])
    {
      if (v46 >= 0x20)
      {
        v48 = 0;
        v52 = *(int **)v85;
        while (1)
        {
          v53 = *v52;
          v52 += 2;
          if (v53 == 65594)
            break;
          if (v46 == ++v48)
            goto LABEL_64;
        }
      }
      else
      {
        v48 = 0;
        v49 = *(int **)v85;
        while (1)
        {
          v50 = *v49;
          v49 += 2;
          if (v50 == 65594)
            break;
          if (v46 == ++v48)
            goto LABEL_58;
        }
      }
      v47[2 * v48 + 1] = 1;
    }
    else
    {
LABEL_58:
      *(_QWORD *)&v47[2 * v46] = 0x10001003ALL;
      v51 = *(_BYTE *)(v45 + 33) + 1;
      *(_BYTE *)(v45 + 33) = v51;
      qsort(*(void **)v45, v51, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
    }
LABEL_64:
    v80 = v45;
    v81 = v86;
    if (v86)
    {
      v54 = (unint64_t *)&v86->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    v56 = v91;
    md::createFeatureAttributeSet((gss::Allocator *)&v92, &v80);
    md::LabelStyleCache::styleQueryForFeatureAttributes((unint64_t *)&v82, a3, &v92, v56);
    if (v92)
    {
      v93 = v92;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v95 + 40))(v95, v92, v94 - v92);
    }
    v57 = v82;
    v82 = 0uLL;
    v58 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
    v83 = v57;
    if (!v58)
      goto LABEL_73;
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
      v61 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
      if (*((_QWORD *)&v82 + 1))
      {
LABEL_74:
        v62 = (unint64_t *)&v61->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
    }
    else
    {
LABEL_73:
      v61 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
      if (*((_QWORD *)&v82 + 1))
        goto LABEL_74;
    }
    v64 = v81;
    if (v81)
    {
      v65 = (unint64_t *)&v81->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v67 = *(_QWORD **)(a2 + 8);
    if ((unint64_t)v67 >= *(_QWORD *)(a2 + 16))
    {
      v71 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(a2, &v83);
    }
    else
    {
      if (v67)
      {
        *v67 = v83;
        v68 = *((_QWORD *)&v83 + 1);
        v67[1] = *((_QWORD *)&v83 + 1);
        if (v68)
        {
          v69 = (unint64_t *)(v68 + 8);
          do
            v70 = __ldxr(v69);
          while (__stxr(v70 + 1, v69));
        }
      }
      v71 = v67 + 2;
    }
    *(_QWORD *)(a2 + 8) = v71;
    v72 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
    if (*((_QWORD *)&v83 + 1))
    {
      v73 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
LABEL_11:
    v14 = 1;
    v15 = 1;
  }
  while ((v16 & 1) == 0);
  v75 = v86;
  if (v86)
  {
    v76 = (unint64_t *)&v86->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (v87)
  {
    v88 = v87;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v90 + 40))(v90, v87, v89 - v87);
  }
  v78 = v91;
  if (v91)
  {
    if (*((char *)v91 + 23) < 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)v91[3] + 40))(v91[3], *v91, v91[2] & 0x7FFFFFFFFFFFFFFFLL);
    MEMORY[0x1A1AF4E00](v78, 0x1032C402ED93987);
  }
}

void sub_19FE99E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  MEMORY[0x1A1AF4E00](v14, 0x1032C402ED93987);
  std::unique_ptr<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t md::ARWalkingManeuverLabelFeature::attributesForFeature(uint64_t result, __int16 a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  __int128 *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  __int128 *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if ((unint64_t)v4 < v5)
  {
    if (v4)
      *v4 = 65632;
    v6 = v4 + 1;
    goto LABEL_27;
  }
  v7 = ((uint64_t)v4 - *(_QWORD *)result) >> 3;
  v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) >> 61)
    goto LABEL_78;
  v9 = v5 - *(_QWORD *)result;
  if (v9 >> 2 > v8)
    v8 = v9 >> 2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  if (v8)
  {
    v10 = 8 * v8;
    result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 8 * v8, 4);
    v11 = (_QWORD *)(result + 8 * v7);
    v8 = result + v10;
    if (result)
      *v11 = 65632;
  }
  else
  {
    v11 = (_QWORD *)(8 * v7);
  }
  v6 = v11 + 1;
  v13 = *(_QWORD *)v3;
  v12 = *(_QWORD *)(v3 + 8);
  if (v12 != *(_QWORD *)v3)
  {
    v14 = v12 - *(_QWORD *)v3 - 8;
    if (v14 < 0x38)
    {
      v16 = *(_QWORD *)(v3 + 8);
    }
    else if ((unint64_t)(v12 - (_QWORD)v11) < 0x20)
    {
      v16 = *(_QWORD *)(v3 + 8);
    }
    else
    {
      v15 = (v14 >> 3) + 1;
      v16 = v12 - 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
      v17 = v11 - 2;
      v18 = (__int128 *)(v12 - 16);
      v19 = v15 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v20 = *v18;
        *(v17 - 1) = *(v18 - 1);
        *v17 = v20;
        v17 -= 2;
        v18 -= 2;
        v19 -= 4;
      }
      while (v19);
      v11 -= v15 & 0x3FFFFFFFFFFFFFFCLL;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_24;
    }
    do
    {
      v21 = *(_QWORD *)(v16 - 8);
      v16 -= 8;
      *--v11 = v21;
    }
    while (v16 != v13);
LABEL_24:
    v12 = *(_QWORD *)v3;
  }
  *(_QWORD *)v3 = v11;
  *(_QWORD *)(v3 + 8) = v6;
  v22 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v8;
  if (v12)
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v12, v22 - v12);
LABEL_27:
  *(_QWORD *)(v3 + 8) = v6;
  v23 = *(_QWORD *)(v3 + 16);
  if ((unint64_t)v6 < v23)
  {
    *v6 = 65594;
    v24 = v6 + 1;
    goto LABEL_51;
  }
  v25 = ((uint64_t)v6 - *(_QWORD *)v3) >> 3;
  if ((unint64_t)(v25 + 1) >> 61)
    goto LABEL_78;
  v26 = v23 - *(_QWORD *)v3;
  v27 = v26 >> 2;
  if (v26 >> 2 <= (unint64_t)(v25 + 1))
    v27 = v25 + 1;
  v28 = (unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8;
  v29 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v28)
    v29 = v27;
  if (v29)
  {
    v30 = 8 * v29;
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 16))(*(_QWORD *)(v3 + 24), 8 * v29, 4);
    v31 = (_QWORD *)(result + 8 * v25);
    v29 = result + v30;
    if (result)
      *v31 = 65594;
  }
  else
  {
    v31 = (_QWORD *)(8 * v25);
  }
  v24 = v31 + 1;
  v33 = *(_QWORD *)v3;
  v32 = *(_QWORD *)(v3 + 8);
  if (v32 != *(_QWORD *)v3)
  {
    v34 = v32 - *(_QWORD *)v3 - 8;
    if (v34 < 0x38)
    {
      v36 = *(_QWORD *)(v3 + 8);
    }
    else if ((unint64_t)(v32 - (_QWORD)v31) < 0x20)
    {
      v36 = *(_QWORD *)(v3 + 8);
    }
    else
    {
      v35 = (v34 >> 3) + 1;
      v36 = v32 - 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
      v37 = v31 - 2;
      v38 = (__int128 *)(v32 - 16);
      v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v40 = *v38;
        *(v37 - 1) = *(v38 - 1);
        *v37 = v40;
        v37 -= 2;
        v38 -= 2;
        v39 -= 4;
      }
      while (v39);
      v31 -= v35 & 0x3FFFFFFFFFFFFFFCLL;
      if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_48;
    }
    do
    {
      v41 = *(_QWORD *)(v36 - 8);
      v36 -= 8;
      *--v31 = v41;
    }
    while (v36 != v33);
LABEL_48:
    v32 = *(_QWORD *)v3;
  }
  *(_QWORD *)v3 = v31;
  *(_QWORD *)(v3 + 8) = v24;
  v42 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v29;
  if (v32)
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v32, v42 - v32);
LABEL_51:
  *(_QWORD *)(v3 + 8) = v24;
  if ((a2 & 0xFF00) == 0)
    return result;
  v43 = *(_QWORD *)(v3 + 16);
  if ((unint64_t)v24 >= v43)
  {
    v45 = ((uint64_t)v24 - *(_QWORD *)v3) >> 3;
    if (!((unint64_t)(v45 + 1) >> 61))
    {
      v46 = v43 - *(_QWORD *)v3;
      v47 = v46 >> 2;
      if (v46 >> 2 <= (unint64_t)(v45 + 1))
        v47 = v45 + 1;
      v28 = (unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8;
      v48 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v28)
        v48 = v47;
      if (v48)
      {
        v49 = 8 * v48;
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 16))(*(_QWORD *)(v3 + 24), 8 * v48, 4);
        v50 = (_QWORD *)(result + 8 * v45);
        v48 = result + v49;
        if (result)
          *v50 = (((unint64_t)a2 << 32) | 0x1003A) + 51;
      }
      else
      {
        v50 = (_QWORD *)(8 * v45);
      }
      v44 = v50 + 1;
      v52 = *(_QWORD *)v3;
      v51 = *(_QWORD *)(v3 + 8);
      if (v51 == *(_QWORD *)v3)
        goto LABEL_74;
      v53 = v51 - *(_QWORD *)v3 - 8;
      if (v53 < 0x38)
      {
        v55 = *(_QWORD *)(v3 + 8);
      }
      else if ((unint64_t)(v51 - (_QWORD)v50) < 0x20)
      {
        v55 = *(_QWORD *)(v3 + 8);
      }
      else
      {
        v54 = (v53 >> 3) + 1;
        v55 = v51 - 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
        v56 = v50 - 2;
        v57 = (__int128 *)(v51 - 16);
        v58 = v54 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v59 = *v57;
          *(v56 - 1) = *(v57 - 1);
          *v56 = v59;
          v56 -= 2;
          v57 -= 2;
          v58 -= 4;
        }
        while (v58);
        v50 -= v54 & 0x3FFFFFFFFFFFFFFCLL;
        if (v54 == (v54 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_73;
      }
      do
      {
        v60 = *(_QWORD *)(v55 - 8);
        v55 -= 8;
        *--v50 = v60;
      }
      while (v55 != v52);
LABEL_73:
      v51 = *(_QWORD *)v3;
LABEL_74:
      *(_QWORD *)v3 = v50;
      *(_QWORD *)(v3 + 8) = v44;
      v61 = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 16) = v48;
      if (v51)
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v51, v61 - v51);
      goto LABEL_76;
    }
LABEL_78:
    abort();
  }
  *v24 = (((unint64_t)a2 << 32) | 0x1003A) + 51;
  v44 = v24 + 1;
LABEL_76:
  *(_QWORD *)(v3 + 8) = v44;
  return result;
}

uint64_t geo::_retain_ptr<VKARWalkingManeuverFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B51D0;

  return a1;
}

void geo::_retain_ptr<VKARWalkingManeuverFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E42B51D0;

  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_pointer<ARWalkingManeuverFeatureDedupingGroup *,std::shared_ptr<md::LabelDedupingGroup>::__shared_ptr_default_delete<md::LabelDedupingGroup,ARWalkingManeuverFeatureDedupingGroup>,std::allocator<ARWalkingManeuverFeatureDedupingGroup>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ARWalkingManeuverFeatureDedupingGroup *,std::shared_ptr<md::LabelDedupingGroup>::__shared_ptr_default_delete<md::LabelDedupingGroup,ARWalkingManeuverFeatureDedupingGroup>,std::allocator<ARWalkingManeuverFeatureDedupingGroup>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ARWalkingManeuverFeatureDedupingGroup::~ARWalkingManeuverFeatureDedupingGroup(ARWalkingManeuverFeatureDedupingGroup *this)
{
  md::ARWalkingLabelLayoutDedupingGroup::~ARWalkingLabelLayoutDedupingGroup(this);
  JUMPOUT(0x1A1AF4E00);
}

void ARWalkingManeuverFeatureDedupingGroup::prepareForCollision(int8x8_t *this, const md::LabelLayoutContext **a2)
{
  unint64_t *v3;
  unint64_t *i;
  unint64_t v5;
  unint64_t v6;
  int8x8_t *v7;
  int8x8_t *v8;
  unint64_t v9;
  uint64_t v10;
  int8x8_t *v11;
  uint64_t v12;
  uint64_t v13;
  int8x8_t *v14;
  int8x8_t v15;
  int8x8_t v16;
  uint64_t v17;

  this[6] = this[5];
  this[9] = 0;
  md::ARWalkingLabelLayoutDedupingGroup::prepareLayoutGroups(this, a2[54]);
  v3 = (unint64_t *)this[1];
  for (i = (unint64_t *)this[2]; v3 != i; *i = v5)
  {
    while (1)
    {
      v5 = *v3;
      if (!*(_BYTE *)(*v3 + 1290)
        || !std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(&this[26], *v3))
      {
        break;
      }
      if (++v3 == i)
        goto LABEL_12;
    }
    if (v3 == --i)
      break;
    while (1)
    {
      v6 = *i;
      if (*(_BYTE *)(*i + 1290))
      {
        if (std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(&this[26], *i))
        {
          break;
        }
      }
      if (--i == v3)
        goto LABEL_12;
    }
    *v3++ = v6;
  }
LABEL_12:
  v7 = (int8x8_t *)this[1];
  v8 = (int8x8_t *)this[2];
  if (v7 != v8)
  {
    v9 = (char *)v8 - (char *)v7 - 8;
    if (v9 > 7)
    {
      v12 = 0;
      v13 = (v9 >> 3) + 1;
      v10 = v13 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v14 = &v7[v12];
        v16 = *v14;
        v15 = v14[1];
        *(_DWORD *)(*(_QWORD *)&v16 + 32) = v12;
        *(_DWORD *)(*(_QWORD *)&v15 + 32) = v12 + 1;
        v12 += 2;
      }
      while (v10 != v12);
      if (v13 == v10)
        goto LABEL_20;
      v11 = &v7[v13 & 0x3FFFFFFFFFFFFFFELL];
    }
    else
    {
      LODWORD(v10) = 0;
      v11 = (int8x8_t *)this[1];
    }
    do
    {
      v17 = (uint64_t)*v11++;
      *(_DWORD *)(v17 + 32) = v10;
      LODWORD(v10) = v10 + 1;
    }
    while (v11 != v8);
LABEL_20:
    this[9] = *v7;
  }
}

BOOL ARWalkingManeuverFeatureDedupingGroup::isResolved(ARWalkingManeuverFeatureDedupingGroup *this)
{
  return *((_QWORD *)this + 6) != *((_QWORD *)this + 5);
}

uint64_t ARWalkingManeuverFeatureDedupingGroup::getAlternateLayout(ARWalkingManeuverFeatureDedupingGroup *this, md::LabelBase *a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) - (_QWORD)v2 == 16)
    return v2[*v2 == (_QWORD)a2];
  else
    return 0;
}

void md::ARWalkingManeuverLabelFeature::updateWithHighPrecisionAltitude(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  float v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  void **v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  float v28[2];

  if (*((_BYTE *)a1 + 776))
  {
    if (a4)
    {
      v6 = (unint64_t *)(a4 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    a1[95] = a3;
    v8 = (std::__shared_weak_count *)a1[96];
    a1[96] = a4;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (!*(_BYTE *)(a2 + 8))
      return;
  }
  else
  {
    a1[95] = a3;
    a1[96] = a4;
    if (a4)
    {
      v11 = (unint64_t *)(a4 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    *((_BYTE *)a1 + 776) = 1;
    if (!*(_BYTE *)(a2 + 8))
      return;
  }
  v13 = (_QWORD *)a1[57];
  if (v13 != a1 + 58)
  {
    while (1)
    {
      v14 = (*(uint64_t (**)(_QWORD *, _QWORD *))(*a1 + 112))(a1, v13 + 4);
      v15 = *(_OWORD *)v14;
      v26 = *(_QWORD *)(v14 + 16);
      v25 = v15;
      v27 = *(_OWORD *)(v14 + 24);
      v16 = *(_DWORD *)(v14 + 43);
      v28[0] = *(float *)(v14 + 40);
      *(_DWORD *)((char *)v28 + 3) = v16;
      if (!*(_BYTE *)(a2 + 8))
        break;
      v17 = *(double *)a2;
      v28[0] = v17;
      (*(void (**)(_QWORD *, _QWORD *, __int128 *))(*a1 + 104))(a1, v13 + 4, &v25);
      v18 = (_QWORD *)v13[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v13[2];
          v20 = *v19 == (_QWORD)v13;
          v13 = v19;
        }
        while (!v20);
      }
      v13 = v19;
      if (v19 == a1 + 58)
        return;
    }
    v21 = (void **)std::__throw_bad_optional_access[abi:nn180100]();
    altitude::FlyoverTrafficTile::append(v21, v22, v23, v24);
  }
}

void altitude::FlyoverTrafficTile::append(void **a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v8;
  gss::Allocator *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  gss::Allocator *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count *get_deleter;
  uint64_t on_zero_shared;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  uint64_t *v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  uint64_t *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  unsigned __int8 v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 v80;
  __int128 v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  __int128 v84;

  v8 = (uint64_t)a1[7];
  md::TrafficStyleAttributes((gss::Allocator *)&v76, 0);
  *(_QWORD *)((char *)&v84 + 7) = 0;
  *(_QWORD *)&v84 = 0;
  HIBYTE(v84) = 1;
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(&v82, v8, (gss::FeatureAttributeSet *)&v76, (gss::QueryOverrides *)&v84);
  if (BYTE14(v84))
    v10 = 1;
  else
    v10 = (_QWORD)v84 == 0;
  if (!v10)
  {
    v11 = gss::Allocator::instance(v9);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 40))(v11, v84, WORD6(v84));
  }
  if (v76)
  {
    v77 = v76;
    (*(void (**)(uint64_t, std::__shared_weak_count *, uint64_t))(*(_QWORD *)v79 + 40))(v79, v76, v78 - (_QWORD)v76);
  }
  v12 = (uint64_t)a1[7];
  md::createFeatureAttributeSet((gss::Allocator *)&v76, (uint64_t *)(*(_QWORD *)(**(_QWORD **)a2 + 80 * *(unsigned int *)(a2 + 8)) + 24));
  *(_QWORD *)((char *)&v84 + 7) = 0;
  *(_QWORD *)&v84 = 0;
  HIBYTE(v84) = 1;
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((unint64_t *)&v81, v12, (gss::FeatureAttributeSet *)&v76, (gss::QueryOverrides *)&v84);
  if (!BYTE14(v84) && (_QWORD)v84)
  {
    v14 = gss::Allocator::instance(v13);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v14 + 40))(v14, v84, WORD6(v84));
  }
  if (v76)
  {
    v77 = v76;
    (*(void (**)(uint64_t, std::__shared_weak_count *, uint64_t))(*(_QWORD *)v79 + 40))(v79, v76, v78 - (_QWORD)v76);
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
  v15 = (std::__shared_weak_count *)v81;
  v84 = v81;
  if (*((_QWORD *)&v81 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v77 = v16;
    do
      v19 = __ldxr(v17);
    while (__stxr(v19 + 1, v17));
  }
  else
  {
    v77 = 0;
  }
  v78 = 0;
  v79 = 0;
  v76 = v15;
  v80 = 0;
  if (v15)
    LODWORD(v15) = ((uint64_t (*)(std::__shared_weak_count *, uint64_t *))v15->__vftable[1].~__shared_weak_count_0)(v15, &v78);
  v80 = v15;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    LODWORD(v15) = v80;
  }
  if ((_DWORD)v15)
  {
    v22 = v76[1].__vftable;
    on_zero_shared = (uint64_t)v22->__on_zero_shared;
    get_deleter = (std::__shared_weak_count *)v22->__get_deleter;
    if (get_deleter)
    {
      v25 = (unint64_t *)&get_deleter->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))get_deleter->__on_zero_shared)(get_deleter);
        std::__shared_weak_count::__release_weak(get_deleter);
      }
    }
  }
  else
  {
    on_zero_shared = *(unsigned int *)(*(_QWORD *)(**(_QWORD **)a2 + 80 * *(unsigned int *)(a2 + 8) + 64) + 16);
  }
  v28 = a1[4];
  v29 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[5] - v28) >> 3);
  a1[1] = (void *)v29;
  v30 = v29 - (_QWORD)*a1;
  if ((int)v30 > 1)
  {
    {
      v73 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v73, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 136, 8);
    v36 = v35;
    *(_OWORD *)(v35 + 64) = 0u;
    *(_OWORD *)(v35 + 80) = 0u;
    *(_OWORD *)(v35 + 32) = 0u;
    *(_OWORD *)(v35 + 48) = 0u;
    *(_OWORD *)v35 = 0u;
    *(_OWORD *)(v35 + 16) = 0u;
    *(_DWORD *)(v35 + 88) = -1;
    *(_QWORD *)(v35 + 96) = 0x7FEFFFFFFFFFFFFFLL;
    *(_OWORD *)(v35 + 104) = 0u;
    *(_OWORD *)(v35 + 120) = 0u;
    v37 = *a1;
    *(_QWORD *)(v35 + 56) = *a1;
    *(_QWORD *)(v35 + 48) = (_BYTE *)a1[1] - v37;
    v38 = (_QWORD *)(**(_QWORD **)a2 + 80 * *(unsigned int *)(a2 + 8));
    v39 = v38[9];
    *(_DWORD *)(v35 + 72) = *(float *)(v39 + 12) <= 0.0;
    *(_DWORD *)(v35 + 80) = *(unsigned __int8 *)(*v38 + 153);
    if (*(_DWORD *)(v39 + 24) == 1)
      v40 = -1;
    else
      v40 = 1;
    *(_DWORD *)(v35 + 76) = v40;
    v41 = *a3;
    v42 = a3[1];
    if (*a3 == v42)
    {
LABEL_49:
      v43 = operator new();
      md::FlyoverTrafficBatch::FlyoverTrafficBatch(v43, &v82, &v81, on_zero_shared, *(unsigned int *)(*(_QWORD *)(**(_QWORD **)a2 + 80 * *(unsigned int *)(a2 + 8) + 64) + 16), a4);
      v45 = a3[1];
      v44 = (unint64_t)a3[2];
      if ((unint64_t)v45 >= v44)
      {
        v47 = *a3;
        v48 = (char *)v45 - (char *)*a3;
        v49 = v48 >> 3;
        v50 = (v48 >> 3) + 1;
        if (v50 >> 61)
          abort();
        v51 = v44 - (_QWORD)v47;
        if (v51 >> 2 > v50)
          v50 = v51 >> 2;
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
          v52 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v52 = v50;
        if (v52)
        {
          if (v52 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v53 = operator new(8 * v52);
        }
        else
        {
          v53 = 0;
        }
        v54 = (uint64_t *)&v53[8 * v49];
        v55 = (uint64_t *)&v53[8 * v52];
        *v54 = v43;
        v46 = v54 + 1;
        if (v45 == v47)
        {
          v47 = v45;
        }
        else
        {
          v56 = (char *)v45 - (char *)v47 - 8;
          if (v56 < 0x58)
            goto LABEL_105;
          if ((unint64_t)((char *)v45 - v53 - v48) < 0x20)
            goto LABEL_105;
          v57 = (v56 >> 3) + 1;
          v58 = &v53[8 * v49 - 16];
          v59 = v45 - 2;
          v60 = v57 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v61 = *(_OWORD *)v59;
            *(v58 - 1) = *((_OWORD *)v59 - 1);
            *v58 = v61;
            v58 -= 2;
            v59 -= 4;
            v60 -= 4;
          }
          while (v60);
          v54 -= v57 & 0x3FFFFFFFFFFFFFFCLL;
          v45 -= v57 & 0x3FFFFFFFFFFFFFFCLL;
          if (v57 != (v57 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_105:
            do
            {
              v62 = *--v45;
              *--v54 = v62;
            }
            while (v45 != v47);
            v47 = *a3;
          }
        }
        *a3 = v54;
        a3[1] = v46;
        a3[2] = v55;
        if (v47)
          operator delete(v47);
      }
      else
      {
        *v45 = v43;
        v46 = v45 + 1;
      }
      a3[1] = v46;
    }
    else
    {
      while (1)
      {
        v43 = *v41;
        if (*(_QWORD *)(*v41 + 280) == on_zero_shared
          && *(_QWORD *)(v43 + 288) == *(_DWORD *)(*(_QWORD *)(**(_QWORD **)a2 + 80 * *(unsigned int *)(a2 + 8) + 64)
                                                 + 16))
        {
          break;
        }
        if (++v41 == v42)
          goto LABEL_49;
      }
    }
    v63 = *(_QWORD *)(*(_QWORD *)(v43 + 248) + 8 * (_QWORD)a1[2]);
    v75 = v36;
    v64 = *(uint64_t **)(v63 + 184);
    if ((unint64_t)v64 >= *(_QWORD *)(v63 + 192))
    {
      v65 = std::vector<std::unique_ptr<md::FlyoverTraffic,mdm::TypeDeleter<md::FlyoverTraffic>>,geo::StdAllocator<std::unique_ptr<md::FlyoverTraffic,mdm::TypeDeleter<md::FlyoverTraffic>>,mdm::Allocator>>::__push_back_slow_path<std::unique_ptr<md::FlyoverTraffic,mdm::TypeDeleter<md::FlyoverTraffic>>>(v63 + 176, &v75);
      v36 = v75;
    }
    else
    {
      if (v64)
      {
        *v64 = v36;
        v36 = 0;
      }
      v65 = v64 + 1;
    }
    *(_QWORD *)(v63 + 184) = v65;
    v75 = 0;
    if (v36)
    {
      {
        v74 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v74, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v36, 136);
    }
    *a1 = a1[1];
  }
  else
  {
    v31 = (int)v30;
    v32 = v29 >= (int)v30;
    v33 = v29 - (int)v30;
    if (v32)
    {
      if (v29 > v33)
        a1[5] = &v28[24 * v33];
      a1[1] = (void *)v33;
    }
    else
    {
      std::vector<gm::Matrix<double,3,1>>::__append(a1 + 4, -v31);
      a1[1] = (char *)a1[1] - v31;
    }
  }
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v76);
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
  if (*((_QWORD *)&v81 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v83;
  if (v83)
  {
    v71 = (unint64_t *)&v83->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
}

void sub_19FE9AFB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_19FE9B0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)va);
  if (a3)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a6 + 40))(a6, a3, a5 - a3);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19FE9B0D4);
}

void md::S2RasterTileResourceFetcher::~S2RasterTileResourceFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::S2RasterTileResourceFetcher::tileKey(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;

  v2 = a2;
  objc_msgSend(v2, "size");
  objc_msgSend(v2, "scale");
  objc_msgSend(v2, "style");
  v3 = GEOS2TileKeyMake();

  return v3;
}

void sub_19FE9B1D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#2},std::allocator<md::ita::CleanUpFrameGraphResources &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#2},std::allocator<md::ita::CleanUpFrameGraphResources &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285A98;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#2},std::allocator<md::ita::CleanUpFrameGraphResources &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285A98;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#2},std::allocator<md::ita::CleanUpFrameGraphResources &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x9792F5BB2E6066F1;
  v2[1] = "md::ls::FrameGraphBuilder]";
  *(_QWORD *)&result = 25;
  *((_OWORD *)v2 + 1) = xmmword_19FFB5F70;
  v2[4] = "md::ls::FrameGraphRenderTarget]";
  v2[5] = 30;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#1},std::allocator<md::ita::CleanUpFrameGraphResources &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#1},std::allocator<md::ita::CleanUpFrameGraphResources &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285AE0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#1},std::allocator<md::ita::CleanUpFrameGraphResources &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285AE0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#1},std::allocator<md::ita::CleanUpFrameGraphResources &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CleanUpFrameGraphResources>,std::allocator<ecs2::ForwardToExecute<md::ita::CleanUpFrameGraphResources>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::CleanUpFrameGraphResources>,std::allocator<ecs2::ForwardToExecute<md::ita::CleanUpFrameGraphResources>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42775F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CleanUpFrameGraphResources>,std::allocator<ecs2::ForwardToExecute<md::ita::CleanUpFrameGraphResources>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42775F0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::CleanUpFrameGraphResources>,std::allocator<ecs2::ForwardToExecute<md::ita::CleanUpFrameGraphResources>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  md::FrameGraphBuilder **v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v30;
  md::FrameGraphBuilder *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t (***v35)();
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t (***v39)();
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64[4];
  unint64_t *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t *v69;
  char v70;
  uint64_t (**v71)();
  uint64_t v72;
  int v73;
  uint64_t (***v74)();
  uint64_t (**v75)();
  uint64_t v76;
  int v77;
  uint64_t (***v78)();
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::FrameGraphBuilder>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::FrameGraphRenderTarget>(v3);
  v6 = v5;
  v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7])
    v8 = (uint64_t)(v4 + 4);
  else
    v8 = (uint64_t)(v5 + 4);
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v66, v8, v4, v5, *(_QWORD *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7])
    v9 = (uint64_t)(v4 + 4);
  else
    v9 = (uint64_t)v7;
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v64, v9, v4, v6, *(_QWORD *)(v9 + 32));
  if (v65 != v69)
  {
    v11 = (uint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      *v11 = *v10;
      v12 = *v10;
      v13 = HIDWORD(*v10);
      v14 = v12 >> 39;
      v15 = v4[4];
      if (v12 >> 39 >= (v4[5] - v15) >> 3)
        goto LABEL_17;
      v16 = *(_QWORD *)(v15 + 8 * v14);
      if (!v16)
        goto LABEL_17;
      v17 = *(unsigned __int16 *)(v16 + 2 * (HIDWORD(v12) & 0x7F));
      v19 = v4[7];
      v18 = v4[8];
      if (v17 >= (v18 - v19) >> 3)
        goto LABEL_17;
      v20 = v19 + 8 * v17;
      v21 = v20 != v18 && *(_DWORD *)(v20 + 4) == (_DWORD)v13;
      if (v21)
        v22 = (md::FrameGraphBuilder **)(v4[10] + 8 * v17);
      else
LABEL_17:
        v22 = (md::FrameGraphBuilder **)v4[11];
      v23 = v6[4];
      if (v14 >= (v6[5] - v23) >> 3)
        break;
      v24 = *(_QWORD *)(v23 + 8 * v14);
      if (!v24)
        break;
      v25 = *(unsigned __int16 *)(v24 + 2 * (HIDWORD(v12) & 0x7F));
      v27 = v6[7];
      v26 = v6[8];
      if (v25 >= (v26 - v27) >> 3)
        break;
      v28 = v27 + 8 * v25;
      if (v28 == v26 || *(_DWORD *)(v28 + 4) != (_DWORD)v13)
        break;
      v30 = (uint64_t *)(v6[10] + 8 * v25);
      v31 = *v22;
      if (*v22)
        goto LABEL_26;
LABEL_27:
      v32 = *v30;
      if (*v30)
      {
        if (*(_BYTE *)(v32 + 72))
          *(_BYTE *)(v32 + 72) = 0;
        MEMORY[0x1A1AF4E00]();
      }
      v33 = *(_QWORD **)(a1 + 8);
      v34 = *v11;
      v71 = (uint64_t (**)())&unk_1E4282690;
      v72 = v34;
      v74 = &v71;
      v75 = (uint64_t (**)())&unk_1E4282690;
      v78 = &v75;
      v76 = v34;
      v79 = 1;
      ecs2::Runtime::queueCommand(v33, (uint64_t)&v75);
      if (v79 != -1)
        ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v79])(&v70, &v75);
      v79 = -1;
      v35 = v74;
      if (v74 == &v71)
      {
        v35 = &v71;
        v36 = 4;
      }
      else
      {
        if (!v74)
          goto LABEL_38;
        v36 = 5;
      }
      (*v35)[v36]();
LABEL_38:
      v37 = *(_QWORD **)(a1 + 8);
      v38 = *v11;
      v71 = &off_1E42827B0;
      v72 = v38;
      v74 = &v71;
      v75 = &off_1E42827B0;
      v78 = &v75;
      v76 = v38;
      v79 = 1;
      ecs2::Runtime::queueCommand(v37, (uint64_t)&v75);
      if (v79 != -1)
        ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v79])(&v70, &v75);
      v79 = -1;
      v39 = v74;
      if (v74 == &v71)
      {
        v39 = &v71;
        v40 = 4;
      }
      else
      {
        if (!v74)
          goto LABEL_45;
        v40 = 5;
      }
      (*v39)[v40]();
LABEL_45:
      v41 = *(_QWORD **)(a1 + 8);
      v42 = HIDWORD(*v11);
      v43 = *v11 << 32;
      v71 = &off_1E427F510;
      v72 = v43;
      v73 = v42;
      v74 = &v71;
      v75 = &off_1E427F510;
      v78 = &v75;
      v76 = v43;
      v77 = v42;
      v79 = 0;
      ecs2::Runtime::queueCommand(v41, (uint64_t)&v75);
      if (v79 != -1)
        ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v79])(&v70, &v75);
      v79 = -1;
      result = (uint64_t)v74;
      if (v74 == &v71)
      {
        result = (uint64_t)&v71;
        v45 = 4;
        goto LABEL_51;
      }
      if (v74)
      {
        v45 = 5;
LABEL_51:
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v45))();
      }
      v46 = v69;
      v10 = *(unint64_t **)(v66 + 32);
      if (++v69 != v10)
      {
        v47 = v67[4];
        v48 = (v67[5] - v47) >> 3;
        v49 = v46 + 2;
        while (1)
        {
          v50 = *((unsigned int *)v49 - 1);
          v51 = v50 >> 7;
          if (v50 >> 7 < v48)
          {
            v52 = *(_QWORD *)(v47 + 8 * v51);
            if (v52)
            {
              v53 = *(unsigned __int16 *)(v52 + 2 * (v50 & 0x7F));
              v54 = v67[7];
              result = v67[8];
              if (v53 < (result - v54) >> 3)
              {
                v55 = v54 + 8 * v53;
                if (v55 != result && *(_DWORD *)(v55 + 4) == (_DWORD)v50)
                {
                  v57 = v68[4];
                  result = v68[5] - v57;
                  if (v51 < result >> 3)
                  {
                    v58 = *(_QWORD *)(v57 + 8 * v51);
                    if (v58)
                    {
                      v59 = *(unsigned __int16 *)(v58 + 2 * (v50 & 0x7F));
                      v61 = v68[7];
                      v60 = v68[8];
                      result = v60 - v61;
                      if (v59 < (v60 - v61) >> 3)
                      {
                        v62 = v61 + 8 * v59;
                        if (v62 != v60 && *(_DWORD *)(v62 + 4) == (_DWORD)v50)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
          v69 = v49;
          v21 = v49++ == v10;
          if (v21)
            goto LABEL_9;
        }
        v10 = v49 - 1;
      }
LABEL_9:
      if (v65 == v10)
        goto LABEL_76;
    }
    v30 = (uint64_t *)v6[11];
    v31 = *v22;
    if (!*v22)
      goto LABEL_27;
LABEL_26:
    md::FrameGraphBuilder::~FrameGraphBuilder(v31);
    MEMORY[0x1A1AF4E00]();
    goto LABEL_27;
  }
  result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v11 = (uint64_t *)result;
LABEL_76:
  *v11 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::FrameGraphBuilder>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x9792F5BB2E6066F1;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x9792F5BB2E6066F1;
      if (*(_QWORD *)&v3 <= 0x9792F5BB2E6066F1)
        v5 = 0x9792F5BB2E6066F1 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x9792F5BB2E6066F1;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x9792F5BB2E6066F1)
            {
              if (v7[2] == 0x9792F5BB2E6066F1)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x9792F5BB2E6066F1)
          {
            if (v7[2] == 0x9792F5BB2E6066F1)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::FrameGraphBuilder]";
  *(_QWORD *)(v11 + 24) = 25;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3A08;
  *(_QWORD *)(v11 + 8) = 0x9792F5BB2E6066F1;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x9792F5BB2E6066F1, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x9792F5BB2E6066F1;
  v15[1] = "md::ls::FrameGraphBuilder]";
  v15[2] = 25;
  gdc::Registry::_registerStorageDataSignals(a1, 0x9792F5BB2E6066F1, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FE9BA54(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::FrameGraphRenderTarget>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x2CF7C0CBD63AB273;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x2CF7C0CBD63AB273;
      if (*(_QWORD *)&v3 <= 0x2CF7C0CBD63AB273uLL)
        v5 = 0x2CF7C0CBD63AB273uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x2CF7C0CBD63AB273;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x2CF7C0CBD63AB273)
            {
              if (v7[2] == 0x2CF7C0CBD63AB273)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x2CF7C0CBD63AB273)
          {
            if (v7[2] == 0x2CF7C0CBD63AB273)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::FrameGraphRenderTarget]";
  *(_QWORD *)(v11 + 24) = 30;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3BB8;
  *(_QWORD *)(v11 + 8) = 0x2CF7C0CBD63AB273;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x2CF7C0CBD63AB273uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x2CF7C0CBD63AB273;
  v15[1] = "md::ls::FrameGraphRenderTarget]";
  v15[2] = 30;
  gdc::Registry::_registerStorageDataSignals(a1, 0x2CF7C0CBD63AB273, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FE9BC7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphRenderTarget>(gdc::Entity,std::type_identity<md::ls::FrameGraphRenderTarget>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphRenderTarget>(gdc::Entity,std::type_identity<md::ls::FrameGraphRenderTarget>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphRenderTarget>(gdc::Entity,std::type_identity<md::ls::FrameGraphRenderTarget>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphRenderTarget>(gdc::Entity,std::type_identity<md::ls::FrameGraphRenderTarget>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42827B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphRenderTarget>(gdc::Entity,std::type_identity<md::ls::FrameGraphRenderTarget>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphRenderTarget>(gdc::Entity,std::type_identity<md::ls::FrameGraphRenderTarget>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42827B0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphRenderTarget>(gdc::Entity,std::type_identity<md::ls::FrameGraphRenderTarget>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphRenderTarget>(gdc::Entity,std::type_identity<md::ls::FrameGraphRenderTarget>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)gdc::Registry::storage<md::ls::FrameGraphRenderTarget>(a2);
  return gdc::ComponentStorageWrapper<md::ls::FrameGraphRenderTarget>::remove(v3, *(_QWORD *)(a1 + 8));
}

uint64_t gdc::ComponentStorageWrapper<md::ls::FrameGraphRenderTarget>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v20[2];

  v18 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (v15)
  {
    v16 = a1[31];
    do
    {
      v20[0] = &v18;
      v20[1] = 1;
      v19 = v16;
      v17 = v15[6];
      if (!v17)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        JUMPOUT(0x19FE9BE18);
      }
      (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v19, v20);
      v15 = (_QWORD *)*v15;
    }
    while (v15);
  }
  return 1;
}

void std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphBuilder>(gdc::Entity,std::type_identity<md::ls::FrameGraphBuilder>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphBuilder>(gdc::Entity,std::type_identity<md::ls::FrameGraphBuilder>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphBuilder>(gdc::Entity,std::type_identity<md::ls::FrameGraphBuilder>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphBuilder>(gdc::Entity,std::type_identity<md::ls::FrameGraphBuilder>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E4282690;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphBuilder>(gdc::Entity,std::type_identity<md::ls::FrameGraphBuilder>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphBuilder>(gdc::Entity,std::type_identity<md::ls::FrameGraphBuilder>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &unk_1E4282690;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphBuilder>(gdc::Entity,std::type_identity<md::ls::FrameGraphBuilder>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphBuilder>(gdc::Entity,std::type_identity<md::ls::FrameGraphBuilder>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)gdc::Registry::storage<md::ls::FrameGraphBuilder>(a2);
  return gdc::ComponentStorageWrapper<md::ls::FrameGraphBuilder>::remove(v3, *(_QWORD *)(a1 + 8));
}

uint64_t gdc::ComponentStorageWrapper<md::ls::FrameGraphBuilder>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v20[2];

  v18 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    v19 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v19, v20);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FrameGraphRenderTarget>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::FrameGraphRenderTarget>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FrameGraphRenderTarget>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::FrameGraphBuilder>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FrameGraphBuilder>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::EndFrameGraphPreparation>(md::ita::EndFrameGraphPreparation &&)::{lambda(void)#2},std::allocator<md::ita::EndFrameGraphPreparation &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::EndFrameGraphPreparation>(md::ita::EndFrameGraphPreparation &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::EndFrameGraphPreparation>(md::ita::EndFrameGraphPreparation &&)::{lambda(void)#2},std::allocator<md::ita::EndFrameGraphPreparation &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::EndFrameGraphPreparation>(md::ita::EndFrameGraphPreparation &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285228;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::EndFrameGraphPreparation>(md::ita::EndFrameGraphPreparation &&)::{lambda(void)#2},std::allocator<md::ita::EndFrameGraphPreparation &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::EndFrameGraphPreparation>(md::ita::EndFrameGraphPreparation &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285228;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::EndFrameGraphPreparation>(md::ita::EndFrameGraphPreparation &&)::{lambda(void)#2},std::allocator<md::ita::EndFrameGraphPreparation &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::EndFrameGraphPreparation>(md::ita::EndFrameGraphPreparation &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FrameGraphBuilderEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19FE9C13C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FrameGraphBuilderEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;

  v3 = a1[1];
  v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 >= v2)
  {
    v5 = *a1;
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
    v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (_QWORD)v5) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[24 * v6];
    *(_QWORD *)v11 = 0x9792F5BB2E6066F1;
    *((_QWORD *)v11 + 1) = "md::ls::FrameGraphBuilder]";
    *((_QWORD *)v11 + 2) = 25;
    v4 = v11 + 24;
    if (v3 != v5)
    {
      do
      {
        v12 = *(_OWORD *)(v3 - 24);
        *((_QWORD *)v11 - 1) = *((_QWORD *)v3 - 1);
        *(_OWORD *)(v11 - 24) = v12;
        v11 -= 24;
        v3 -= 24;
      }
      while (v3 != v5);
      v3 = *a1;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = &v10[24 * v9];
    if (v3)
      operator delete(v3);
  }
  else
  {
    *(_QWORD *)v3 = 0x9792F5BB2E6066F1;
    *((_QWORD *)v3 + 1) = "md::ls::FrameGraphBuilder]";
    *((_QWORD *)v3 + 2) = 25;
    v4 = v3 + 24;
  }
  a1[1] = v4;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::EndFrameGraphPreparation>(md::ita::EndFrameGraphPreparation &&)::{lambda(void)#1},std::allocator<md::ita::EndFrameGraphPreparation &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::EndFrameGraphPreparation>(md::ita::EndFrameGraphPreparation &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::EndFrameGraphPreparation>(md::ita::EndFrameGraphPreparation &&)::{lambda(void)#1},std::allocator<md::ita::EndFrameGraphPreparation &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::EndFrameGraphPreparation>(md::ita::EndFrameGraphPreparation &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285270;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::EndFrameGraphPreparation>(md::ita::EndFrameGraphPreparation &&)::{lambda(void)#1},std::allocator<md::ita::EndFrameGraphPreparation &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::EndFrameGraphPreparation>(md::ita::EndFrameGraphPreparation &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285270;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::EndFrameGraphPreparation>(md::ita::EndFrameGraphPreparation &&)::{lambda(void)#1},std::allocator<md::ita::EndFrameGraphPreparation &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::EndFrameGraphPreparation>(md::ita::EndFrameGraphPreparation &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0xE0E0BD7780EC271BLL;
  v2[1] = "md::ls::PreviousResourceStamp]";
  *(_QWORD *)&result = 29;
  *((_OWORD *)v2 + 1) = xmmword_19FFB5F80;
  v2[4] = "md::ls::PassCount]";
  v2[5] = 17;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::EndFrameGraphPreparation>,std::allocator<ecs2::ForwardToExecute<md::ita::EndFrameGraphPreparation>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::EndFrameGraphPreparation>,std::allocator<ecs2::ForwardToExecute<md::ita::EndFrameGraphPreparation>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42771B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::EndFrameGraphPreparation>,std::allocator<ecs2::ForwardToExecute<md::ita::EndFrameGraphPreparation>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E42771B8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::EndFrameGraphPreparation>,std::allocator<ecs2::ForwardToExecute<md::ita::EndFrameGraphPreparation>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  md::FrameGraphBuilder **v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t v41;
  float **v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::PreviousResourceStamp>(v3);
  v5 = gdc::Registry::storage<md::ls::PassCount>(v3);
  v6 = gdc::Registry::storage<md::ls::FrameGraphBuilder>(v3);
  v7 = (_QWORD *)v6;
  v8 = (_QWORD *)(v6 + 32);
  if (v4[8] - v4[7] < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v8 = v4 + 4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v8[4] - v8[3])
    v8 = (_QWORD *)(v5 + 32);
  v67 = v8;
  v68 = (_QWORD *)v6;
  v69 = v4;
  v70 = (_QWORD *)v5;
  v9 = (_QWORD *)v8[3];
  v10 = (_QWORD *)v8[4];
  v71 = v9;
  if (v10 != v9
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v67))
  {
    v11 = v9 + 1;
    do
    {
      v9 = v11;
      v71 = v11;
      if (v11 == v10)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v67);
      v11 = v9 + 1;
    }
    while (!isValid);
  }
  if (v10 == v9)
  {
    v13 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    v13 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *v13 = *v9;
      v15 = *v9;
      v16 = HIDWORD(*v9);
      v17 = *v9 >> 39;
      v18 = v7[4];
      if (v17 < (v7[5] - v18) >> 3
        && (v19 = *(_QWORD *)(v18 + 8 * v17)) != 0
        && (v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            v22 = v7[7],
            v21 = v7[8],
            v20 < (v21 - v22) >> 3)
        && ((v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == (_DWORD)v16) : (v24 = 0), v24))
      {
        v25 = (md::FrameGraphBuilder **)(v7[10] + 8 * v20);
      }
      else
      {
        v25 = (md::FrameGraphBuilder **)v7[11];
      }
      v26 = v4[4];
      if (v17 < (v4[5] - v26) >> 3
        && (v27 = *(_QWORD *)(v26 + 8 * v17)) != 0
        && (v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v15) & 0x7F)),
            v30 = v4[7],
            v29 = v4[8],
            v28 < (v29 - v30) >> 3)
        && ((v31 = v30 + 8 * v28, v31 != v29) ? (v32 = *(_DWORD *)(v31 + 4) == (_DWORD)v16) : (v32 = 0), v32))
      {
        v33 = (uint64_t *)(v4[10] + 8 * v28);
      }
      else
      {
        v33 = (uint64_t *)v4[11];
      }
      v34 = ***(uint64_t ****)(a1 + 8);
      if (v34 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v34 != 0xD369A4D92C8FFE6CLL)
      {
        v35 = v34 + 5;
        do
        {
          v36 = *v35;
          v35 += 5;
        }
        while (v36 != 0xD369A4D92C8FFE6CLL);
        v34 = v35 - 5;
      }
      v37 = v34[3];
      v38 = (std::__shared_weak_count *)v34[4];
      if (v38)
      {
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldxr(p_shared_owners);
        while (__stxr(v40 + 1, p_shared_owners));
        do
          v41 = __ldaxr(p_shared_owners);
        while (__stlxr(v41 - 1, p_shared_owners));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v42 = (float **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      if (v42)
        md::PassList::updateGraphState(v42, *v25, *v33);
      v9 = (_QWORD *)v67[4];
      v14 = v71 + 1;
      v71 = v14;
      if (v14 != v9)
      {
        v43 = v68[4];
        while (1)
        {
          v44 = *((unsigned int *)v14 + 1);
          v45 = v44 >> 7;
          if (v44 >> 7 < (v68[5] - v43) >> 3)
          {
            v46 = *(_QWORD *)(v43 + 8 * v45);
            if (v46)
            {
              v47 = v44 & 0x7F;
              v48 = *(unsigned __int16 *)(v46 + 2 * v47);
              v50 = v68[7];
              v49 = v68[8];
              if (v48 < (v49 - v50) >> 3)
              {
                v51 = v50 + 8 * v48;
                if (v51 != v49 && *(_DWORD *)(v51 + 4) == (_DWORD)v44)
                {
                  v53 = v69[4];
                  if (v45 < (v69[5] - v53) >> 3)
                  {
                    v54 = *(_QWORD *)(v53 + 8 * v45);
                    if (v54)
                    {
                      v55 = *(unsigned __int16 *)(v54 + 2 * v47);
                      v57 = v69[7];
                      v56 = v69[8];
                      if (v55 < (v56 - v57) >> 3)
                      {
                        v58 = v57 + 8 * v55;
                        if (v58 != v56 && *(_DWORD *)(v58 + 4) == (_DWORD)v44)
                        {
                          v60 = v70[4];
                          if (v45 < (v70[5] - v60) >> 3)
                          {
                            v61 = *(_QWORD *)(v60 + 8 * v45);
                            if (v61)
                            {
                              v62 = *(unsigned __int16 *)(v61 + 2 * v47);
                              v64 = v70[7];
                              v63 = v70[8];
                              if (v62 < (v63 - v64) >> 3)
                              {
                                v65 = v64 + 8 * v62;
                                if (*(_DWORD *)(v65 + 4) == (_DWORD)v44 && v65 != v63)
                                  break;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v9)
          {
            v14 = v9;
            goto LABEL_13;
          }
        }
        v9 = v14;
LABEL_13:
        v71 = v14;
      }
    }
    while (v10 != v9);
  }
  *v13 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
}

uint64_t gdc::Registry::storage<md::ls::PreviousResourceStamp>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xE0E0BD7780EC271BLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xE0E0BD7780EC271BLL;
      if (*(_QWORD *)&v3 <= 0xE0E0BD7780EC271BLL)
        v5 = 0xE0E0BD7780EC271BLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xE0E0BD7780EC271BLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xE0E0BD7780EC271BLL)
            {
              if (v7[2] == 0xE0E0BD7780EC271BLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xE0E0BD7780EC271BLL)
          {
            if (v7[2] == 0xE0E0BD7780EC271BLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::PreviousResourceStamp]";
  *(_QWORD *)(v11 + 24) = 29;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3B58;
  *(_QWORD *)(v11 + 8) = 0xE0E0BD7780EC271BLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xE0E0BD7780EC271BLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xE0E0BD7780EC271BLL;
  v15[1] = "md::ls::PreviousResourceStamp]";
  v15[2] = 29;
  gdc::Registry::_registerStorageDataSignals(a1, 0xE0E0BD7780EC271BLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FE9C9A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::PassCount>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x256170776297ADC7;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x256170776297ADC7;
      if (*(_QWORD *)&v3 <= 0x256170776297ADC7uLL)
        v5 = 0x256170776297ADC7uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x256170776297ADC7;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x256170776297ADC7)
            {
              if (v7[2] == 0x256170776297ADC7)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x256170776297ADC7)
          {
            if (v7[2] == 0x256170776297ADC7)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::PassCount]";
  *(_QWORD *)(v11 + 24) = 17;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3D68;
  *(_QWORD *)(v11 + 8) = 0x256170776297ADC7;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x256170776297ADC7uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x256170776297ADC7;
  v15[1] = "md::ls::PassCount]";
  v15[2] = 17;
  gdc::Registry::_registerStorageDataSignals(a1, 0x256170776297ADC7, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FE9CBD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::PassCount>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassCount>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PassCount>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassCount>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::PreviousResourceStamp>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PreviousResourceStamp>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(v15 - 8);
  a1[11] = v15 - 8;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PreviousResourceStamp>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PreviousResourceStamp>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildRouteLineFrameGraph>(md::ita::BuildRouteLineFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildRouteLineFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildRouteLineFrameGraph>(md::ita::BuildRouteLineFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildRouteLineFrameGraph>(md::ita::BuildRouteLineFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildRouteLineFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildRouteLineFrameGraph>(md::ita::BuildRouteLineFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4285198;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildRouteLineFrameGraph>(md::ita::BuildRouteLineFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildRouteLineFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildRouteLineFrameGraph>(md::ita::BuildRouteLineFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4285198;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildRouteLineFrameGraph>(md::ita::BuildRouteLineFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildRouteLineFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildRouteLineFrameGraph>(md::ita::BuildRouteLineFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;
  char **v3;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 48;
  v3 = (char **)a1;
  _ZZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FrameGraphBuilderENS4_9PassCountEEEEZNS_18typelist_as_vectorIS7_EENS1_6vectorINS_8TypeInfoENS1_9allocatorISA_EEEEvEUlTyvE_EEvOT0_ENKUlTpTnmNS1_16integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSI_(&v3);
}

void sub_19FE9CF64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FrameGraphBuilderENS4_9PassCountEEEEZNS_18typelist_as_vectorIS7_EENS1_6vectorINS_8TypeInfoENS1_9allocatorISA_EEEEvEUlTyvE_EEvOT0_ENKUlTpTnmNS1_16integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSI_(char ***a1)
{
  char **v2;
  unint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  char **v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;

  v2 = *a1;
  v4 = (*a1)[1];
  v3 = (unint64_t)(*a1)[2];
  if ((unint64_t)v4 >= v3)
  {
    v6 = *v2;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *v2) >> 3);
    v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_36;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - (_QWORD)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_37;
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[24 * v7];
    *(_QWORD *)v12 = 0x9792F5BB2E6066F1;
    *((_QWORD *)v12 + 1) = "md::ls::FrameGraphBuilder]";
    *((_QWORD *)v12 + 2) = 25;
    v5 = v12 + 24;
    if (v4 != v6)
    {
      do
      {
        v13 = *(_OWORD *)(v4 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v4 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v4 -= 24;
      }
      while (v4 != v6);
      v4 = *v2;
    }
    *v2 = v12;
    v2[1] = v5;
    v2[2] = &v11[24 * v10];
    if (v4)
      operator delete(v4);
  }
  else
  {
    *(_QWORD *)v4 = 0x9792F5BB2E6066F1;
    *((_QWORD *)v4 + 1) = "md::ls::FrameGraphBuilder]";
    *((_QWORD *)v4 + 2) = 25;
    v5 = v4 + 24;
  }
  v2[1] = v5;
  v14 = *a1;
  v16 = (*a1)[1];
  v15 = (unint64_t)v14[2];
  if ((unint64_t)v16 < v15)
  {
    *(_QWORD *)v16 = 0x256170776297ADC7;
    *((_QWORD *)v16 + 1) = "md::ls::PassCount]";
    *((_QWORD *)v16 + 2) = 17;
    v17 = v16 + 24;
    goto LABEL_35;
  }
  v18 = *v14;
  v19 = 0xAAAAAAAAAAAAAAABLL * ((v16 - *v14) >> 3);
  v20 = v19 + 1;
  if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_36:
    abort();
  v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)v18) >> 3);
  if (2 * v21 > v20)
    v20 = 2 * v21;
  if (v21 >= 0x555555555555555)
    v22 = 0xAAAAAAAAAAAAAAALL;
  else
    v22 = v20;
  if (!v22)
  {
    v23 = 0;
    goto LABEL_30;
  }
  if (v22 > 0xAAAAAAAAAAAAAAALL)
LABEL_37:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v23 = (char *)operator new(24 * v22);
LABEL_30:
  v24 = &v23[24 * v19];
  *(_QWORD *)v24 = 0x256170776297ADC7;
  *((_QWORD *)v24 + 1) = "md::ls::PassCount]";
  *((_QWORD *)v24 + 2) = 17;
  v17 = v24 + 24;
  if (v16 != v18)
  {
    do
    {
      v25 = *(_OWORD *)(v16 - 24);
      *((_QWORD *)v24 - 1) = *((_QWORD *)v16 - 1);
      *(_OWORD *)(v24 - 24) = v25;
      v24 -= 24;
      v16 -= 24;
    }
    while (v16 != v18);
    v16 = *v14;
  }
  *v14 = v24;
  v14[1] = v17;
  v14[2] = &v23[24 * v22];
  if (v16)
    operator delete(v16);
LABEL_35:
  v14[1] = v17;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildRouteLineFrameGraph>(md::ita::BuildRouteLineFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildRouteLineFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildRouteLineFrameGraph>(md::ita::BuildRouteLineFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildRouteLineFrameGraph>(md::ita::BuildRouteLineFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildRouteLineFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildRouteLineFrameGraph>(md::ita::BuildRouteLineFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42851E0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildRouteLineFrameGraph>(md::ita::BuildRouteLineFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildRouteLineFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildRouteLineFrameGraph>(md::ita::BuildRouteLineFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42851E0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildRouteLineFrameGraph>(md::ita::BuildRouteLineFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildRouteLineFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildRouteLineFrameGraph>(md::ita::BuildRouteLineFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0xD7B05696AE714D71;
  v2[1] = "md::ls::FrameBufferDesc]";
  *(_QWORD *)&result = 23;
  *((_OWORD *)v2 + 1) = xmmword_19FFB5F90;
  v2[4] = "md::ls::PassRoutelineMaskConfiguration]";
  v2[5] = 38;
  v2[6] = 0x6738F9098C50E08CLL;
  v2[7] = "md::ls::PassDeviceCapabilities]";
  v2[8] = 30;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildRouteLineFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildRouteLineFrameGraph>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildRouteLineFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildRouteLineFrameGraph>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277170;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildRouteLineFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildRouteLineFrameGraph>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277170;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

unint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildRouteLineFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildRouteLineFrameGraph>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _BOOL4 isValid;
  unint64_t result;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  int32x2_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  _BYTE *v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  char v115;
  _QWORD v116[2];
  int v117;
  _QWORD *v118;
  _QWORD v119[2];
  int v120;
  _QWORD *v121;
  int v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = gdc::Registry::storage<md::ls::FrameBufferDesc>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::PassRoutelineMaskConfiguration>(v2);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::PassDeviceCapabilities>(v2);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::FrameGraphBuilder>(v2);
  v7 = gdc::Registry::storage<md::ls::PassCount>(v2);
  if (*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56) >= v6[8] - v6[7])
    v8 = v6;
  else
    v8 = (_QWORD *)v7;
  if (*(_QWORD *)(v3 + 64) - *(_QWORD *)(v3 + 56) >= v8[8] - v8[7])
    v9 = (uint64_t)(v8 + 4);
  else
    v9 = v3 + 32;
  if (v4[8] - v4[7] >= *(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24))
    v10 = (_QWORD *)v9;
  else
    v10 = v4 + 4;
  if (v5[8] - v5[7] < v10[4] - v10[3])
    v10 = v5 + 4;
  v11 = (_QWORD *)v10[3];
  v108 = v10;
  v109 = v6;
  v110 = (_QWORD *)v7;
  v111 = (_QWORD *)v3;
  v105 = (_QWORD *)v3;
  v112 = v4;
  v113 = v5;
  v114 = v11;
  v12 = (_QWORD *)v10[4];
  if (v12 != v11
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v108))
  {
    v13 = v11 + 1;
    do
    {
      v11 = v13;
      v114 = v13;
      if (v13 == v12)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v108);
      v13 = v11 + 1;
    }
    while (!isValid);
  }
  result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v106 = (_QWORD *)result;
  v104 = v16;
  if (v16 != v11)
  {
    while (1)
    {
      *v106 = *v11;
      v18 = *v11;
      v19 = HIDWORD(*v11);
      v20 = *v11 >> 39;
      v21 = v6[4];
      if (v20 < (v6[5] - v21) >> 3
        && (v22 = *(_QWORD *)(v21 + 8 * v20)) != 0
        && (v23 = *(unsigned __int16 *)(v22 + 2 * (HIDWORD(v18) & 0x7F)),
            v25 = v6[7],
            v24 = v6[8],
            v23 < (v24 - v25) >> 3)
        && ((v26 = v25 + 8 * v23, v26 != v24) ? (v27 = *(_DWORD *)(v26 + 4) == (_DWORD)v19) : (v27 = 0), v27))
      {
        v28 = (uint64_t *)(v6[10] + 8 * v23);
      }
      else
      {
        v28 = (uint64_t *)v6[11];
      }
      v29 = v105[4];
      if (v20 < (v105[5] - v29) >> 3
        && (v30 = *(_QWORD *)(v29 + 8 * v20)) != 0
        && (v31 = *(unsigned __int16 *)(v30 + 2 * (HIDWORD(v18) & 0x7F)),
            v33 = v105[7],
            v32 = v105[8],
            v31 < (v32 - v33) >> 3)
        && ((v34 = v33 + 8 * v31, v34 != v32) ? (v35 = *(_DWORD *)(v34 + 4) == (_DWORD)v19) : (v35 = 0), v35))
      {
        v36 = v105[11];
        v37 = v105[10] + 8 * v31;
      }
      else
      {
        v36 = v105[11];
        v37 = v36;
      }
      if (v37 == v36)
        v38 = 0;
      else
        v38 = (int32x2_t *)v37;
      v39 = v4[4];
      if (v20 < (v4[5] - v39) >> 3
        && (v40 = *(_QWORD *)(v39 + 8 * v20)) != 0
        && (v41 = *(unsigned __int16 *)(v40 + 2 * (HIDWORD(v18) & 0x7F)),
            v43 = v4[7],
            v42 = v4[8],
            v41 < (v42 - v43) >> 3)
        && ((v44 = v43 + 8 * v41, v44 != v42) ? (v45 = *(_DWORD *)(v44 + 4) == (_DWORD)v19) : (v45 = 0), v45))
      {
        v46 = v4[11];
        v47 = v4[10] + 8 * v41;
      }
      else
      {
        v46 = v4[11];
        v47 = v46;
      }
      if (v47 == v46)
        v48 = 0;
      else
        v48 = v47;
      v49 = v5[4];
      if (v20 < (v5[5] - v49) >> 3
        && (v50 = *(_QWORD *)(v49 + 8 * v20)) != 0
        && (v51 = *(unsigned __int16 *)(v50 + 2 * (HIDWORD(v18) & 0x7F)),
            v53 = v5[7],
            v52 = v5[8],
            v51 < (v52 - v53) >> 3)
        && ((v54 = v53 + 8 * v51, v54 != v52) ? (v55 = *(_DWORD *)(v54 + 4) == (_DWORD)v19) : (v55 = 0), v55))
      {
        v56 = (_BYTE *)v5[11];
        v57 = (_BYTE *)(v5[10] + v51);
      }
      else
      {
        v56 = (_BYTE *)v5[11];
        v57 = v56;
      }
      if (v57 == v56)
        v58 = 0;
      else
        v58 = v57;
      v59 = ***(uint64_t ****)(a1 + 8);
      if (v59 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v59 != 0xD369A4D92C8FFE6CLL)
      {
        v60 = v59 + 5;
        do
        {
          v61 = *v60;
          v60 += 5;
        }
        while (v61 != 0xD369A4D92C8FFE6CLL);
        v59 = v60 - 5;
      }
      v63 = v59[3];
      v62 = (std::__shared_weak_count *)v59[4];
      if (v62)
      {
        p_shared_owners = (unint64_t *)&v62->__shared_owners_;
        do
          v65 = __ldxr(p_shared_owners);
        while (__stxr(v65 + 1, p_shared_owners));
        do
          v66 = __ldaxr(p_shared_owners);
        while (__stlxr(v66 - 1, p_shared_owners));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
      if (!result)
        goto LABEL_83;
      result = (unint64_t)md::StandardPassList::_buildRouteLineMaskFrameGraph((_QWORD *)result, *(_BYTE *)(v48 + 4), (float *)v48, v58, v38, *v28);
      if (!*(_BYTE *)(v48 + 4))
        goto LABEL_83;
      v67 = *(_QWORD **)(a1 + 8);
      v68 = HIDWORD(*v106);
      v69 = *v106 << 32;
      v116[0] = &off_1E427FAF8;
      v116[1] = v69;
      v117 = v68;
      v118 = v116;
      v121 = v119;
      v119[0] = &off_1E427FAF8;
      v119[1] = v69;
      v120 = v68;
      v122 = 0;
      ecs2::Runtime::queueCommand(v67, (uint64_t)v119);
      if (v122 != -1)
        ((void (*)(char *, _QWORD *))off_1E42FB340[v122])(&v115, v119);
      v122 = -1;
      result = (unint64_t)v118;
      if (v118 == v116)
        break;
      if (v118)
      {
        v70 = 5;
LABEL_82:
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v70))();
      }
LABEL_83:
      v11 = (_QWORD *)v108[4];
      v17 = v114 + 1;
      v114 = v17;
      if (v17 != v11)
      {
        v71 = v109[4];
        while (1)
        {
          v72 = *((unsigned int *)v17 + 1);
          v73 = v72 >> 7;
          if (v72 >> 7 < (v109[5] - v71) >> 3)
          {
            v74 = *(_QWORD *)(v71 + 8 * v73);
            if (v74)
            {
              result = v72 & 0x7F;
              v75 = *(unsigned __int16 *)(v74 + 2 * result);
              v77 = v109[7];
              v76 = v109[8];
              if (v75 < (v76 - v77) >> 3)
              {
                v78 = v77 + 8 * v75;
                if (v78 != v76 && *(_DWORD *)(v78 + 4) == (_DWORD)v72)
                {
                  v80 = v110[4];
                  if (v73 < (v110[5] - v80) >> 3)
                  {
                    v81 = *(_QWORD *)(v80 + 8 * v73);
                    if (v81)
                    {
                      v82 = *(unsigned __int16 *)(v81 + 2 * result);
                      v84 = v110[7];
                      v83 = v110[8];
                      if (v82 < (v83 - v84) >> 3)
                      {
                        v85 = v84 + 8 * v82;
                        if (v85 != v83 && *(_DWORD *)(v85 + 4) == (_DWORD)v72)
                        {
                          v87 = v111[4];
                          if (v73 < (v111[5] - v87) >> 3)
                          {
                            v88 = *(_QWORD *)(v87 + 8 * v73);
                            if (v88)
                            {
                              v89 = *(unsigned __int16 *)(v88 + 2 * result);
                              v91 = v111[7];
                              v90 = v111[8];
                              if (v89 < (v90 - v91) >> 3)
                              {
                                v92 = v91 + 8 * v89;
                                if (v92 != v90 && *(_DWORD *)(v92 + 4) == (_DWORD)v72)
                                {
                                  v94 = v112[4];
                                  if (v73 < (v112[5] - v94) >> 3)
                                  {
                                    v95 = *(_QWORD *)(v94 + 8 * v73);
                                    if (v95)
                                    {
                                      v96 = *(unsigned __int16 *)(v95 + 2 * result);
                                      v98 = v112[7];
                                      v97 = v112[8];
                                      if (v96 < (v97 - v98) >> 3)
                                      {
                                        v99 = v98 + 8 * v96;
                                        if (v99 != v97 && *(_DWORD *)(v99 + 4) == (_DWORD)v72)
                                        {
                                          v100 = v113[4];
                                          if (v73 < (v113[5] - v100) >> 3)
                                          {
                                            v101 = *(_QWORD *)(v100 + 8 * v73);
                                            if (v101)
                                            {
                                              result = *(unsigned __int16 *)(v101 + 2 * result);
                                              v102 = v113[7];
                                              v103 = v113[8];
                                              if (result < (v103 - v102) >> 3)
                                              {
                                                result = v102 + 8 * result;
                                                if (*(_DWORD *)(result + 4) == (_DWORD)v72 && result != v103)
                                                  break;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v17 == v11)
          {
            v17 = v11;
            goto LABEL_20;
          }
        }
        v11 = v17;
LABEL_20:
        v114 = v17;
      }
      if (v104 == v11)
        goto LABEL_125;
    }
    result = (unint64_t)v116;
    v70 = 4;
    goto LABEL_82;
  }
LABEL_125:
  *v106 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::FrameBufferDesc>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xD7B05696AE714D71;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xD7B05696AE714D71;
      if (*(_QWORD *)&v3 <= 0xD7B05696AE714D71)
        v5 = 0xD7B05696AE714D71 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xD7B05696AE714D71;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xD7B05696AE714D71)
            {
              if (v7[2] == 0xD7B05696AE714D71)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xD7B05696AE714D71)
          {
            if (v7[2] == 0xD7B05696AE714D71)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::FrameBufferDesc]";
  *(_QWORD *)(v11 + 24) = 23;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B39D8;
  *(_QWORD *)(v11 + 8) = 0xD7B05696AE714D71;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xD7B05696AE714D71, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xD7B05696AE714D71;
  v15[1] = "md::ls::FrameBufferDesc]";
  v15[2] = 23;
  gdc::Registry::_registerStorageDataSignals(a1, 0xD7B05696AE714D71, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FE9DC18(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::PassRoutelineMaskConfiguration>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xCDD99CCED5CBB5CBLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xCDD99CCED5CBB5CBLL;
      if (*(_QWORD *)&v3 <= 0xCDD99CCED5CBB5CBLL)
        v5 = 0xCDD99CCED5CBB5CBLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xCDD99CCED5CBB5CBLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xCDD99CCED5CBB5CBLL)
            {
              if (v7[2] == 0xCDD99CCED5CBB5CBLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xCDD99CCED5CBB5CBLL)
          {
            if (v7[2] == 0xCDD99CCED5CBB5CBLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::PassRoutelineMaskConfiguration]";
  *(_QWORD *)(v11 + 24) = 38;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3CD8;
  *(_QWORD *)(v11 + 8) = 0xCDD99CCED5CBB5CBLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xCDD99CCED5CBB5CBLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xCDD99CCED5CBB5CBLL;
  v15[1] = "md::ls::PassRoutelineMaskConfiguration]";
  v15[2] = 38;
  gdc::Registry::_registerStorageDataSignals(a1, 0xCDD99CCED5CBB5CBLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FE9DE40(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::PassDeviceCapabilities>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x6738F9098C50E08CLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x6738F9098C50E08CLL;
      if (*(_QWORD *)&v3 <= 0x6738F9098C50E08CuLL)
        v5 = 0x6738F9098C50E08CuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x6738F9098C50E08CLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x6738F9098C50E08CLL)
            {
              if (v7[2] == 0x6738F9098C50E08CLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x6738F9098C50E08CLL)
          {
            if (v7[2] == 0x6738F9098C50E08CLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::PassDeviceCapabilities]";
  *(_QWORD *)(v11 + 24) = 30;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3BE8;
  *(_QWORD *)(v11 + 8) = 0x6738F9098C50E08CLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x6738F9098C50E08CuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x6738F9098C50E08CLL;
  v15[1] = "md::ls::PassDeviceCapabilities]";
  v15[2] = 30;
  gdc::Registry::_registerStorageDataSignals(a1, 0x6738F9098C50E08CLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FE9E068(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassRouteLineDescriptor>(gdc::Entity,md::ls::PassRouteLineDescriptor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassRouteLineDescriptor>(gdc::Entity,md::ls::PassRouteLineDescriptor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427FAF8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassRouteLineDescriptor>(gdc::Entity,md::ls::PassRouteLineDescriptor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427FAF8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassRouteLineDescriptor>(gdc::Entity,md::ls::PassRouteLineDescriptor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::PassRouteLineDescriptor>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

uint64_t gdc::Registry::storage<md::ls::PassRouteLineDescriptor>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x6D136A48B3800686;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x6D136A48B3800686;
      if (*(_QWORD *)&v3 <= 0x6D136A48B3800686uLL)
        v5 = 0x6D136A48B3800686uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x6D136A48B3800686;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x6D136A48B3800686)
            {
              if (v7[2] == 0x6D136A48B3800686)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x6D136A48B3800686)
          {
            if (v7[2] == 0x6D136A48B3800686)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::PassRouteLineDescriptor]";
  *(_QWORD *)(v11 + 24) = 31;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3C48;
  *(_QWORD *)(v11 + 8) = 0x6D136A48B3800686;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x6D136A48B3800686uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x6D136A48B3800686;
  v15[1] = "md::ls::PassRouteLineDescriptor]";
  v15[2] = 31;
  gdc::Registry::_registerStorageDataSignals(a1, 0x6D136A48B3800686, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FE9E48C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::PassRouteLineDescriptor>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassRouteLineDescriptor>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PassRouteLineDescriptor>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassRouteLineDescriptor>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::PassDeviceCapabilities>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassDeviceCapabilities>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PassDeviceCapabilities>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassDeviceCapabilities>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::PassRoutelineMaskConfiguration>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassRoutelineMaskConfiguration>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PassRoutelineMaskConfiguration>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassRoutelineMaskConfiguration>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::FrameBufferDesc>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FrameBufferDesc>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = (_DWORD *)(a1[10] + 8 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_DWORD *)(v15 - 8);
  v15 -= 8;
  *v14 = v16;
  v14[1] = *(_DWORD *)(v15 + 4);
  a1[11] = v15;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FrameBufferDesc>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FrameBufferDesc>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildPrimaryFrameGraph>(md::ita::BuildPrimaryFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildPrimaryFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildPrimaryFrameGraph>(md::ita::BuildPrimaryFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildPrimaryFrameGraph>(md::ita::BuildPrimaryFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildPrimaryFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildPrimaryFrameGraph>(md::ita::BuildPrimaryFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284658;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildPrimaryFrameGraph>(md::ita::BuildPrimaryFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildPrimaryFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildPrimaryFrameGraph>(md::ita::BuildPrimaryFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284658;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildPrimaryFrameGraph>(md::ita::BuildPrimaryFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildPrimaryFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildPrimaryFrameGraph>(md::ita::BuildPrimaryFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;
  char **v3;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 48;
  v3 = (char **)a1;
  _ZZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FrameGraphBuilderENS4_9PassCountEEEEZNS_18typelist_as_vectorIS7_EENS1_6vectorINS_8TypeInfoENS1_9allocatorISA_EEEEvEUlTyvE_EEvOT0_ENKUlTpTnmNS1_16integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSI_(&v3);
}

void sub_19FE9EB04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildPrimaryFrameGraph>(md::ita::BuildPrimaryFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildPrimaryFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildPrimaryFrameGraph>(md::ita::BuildPrimaryFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildPrimaryFrameGraph>(md::ita::BuildPrimaryFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildPrimaryFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildPrimaryFrameGraph>(md::ita::BuildPrimaryFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42846A0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildPrimaryFrameGraph>(md::ita::BuildPrimaryFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildPrimaryFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildPrimaryFrameGraph>(md::ita::BuildPrimaryFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42846A0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildPrimaryFrameGraph>(md::ita::BuildPrimaryFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildPrimaryFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildPrimaryFrameGraph>(md::ita::BuildPrimaryFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(char **a1@<X8>)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x78uLL);
  a1[2] = (char *)(v2 + 15);
  *v2 = 0x2CF7C0CBD63AB273;
  v2[1] = "md::ls::FrameGraphRenderTarget]";
  *((_OWORD *)v2 + 1) = xmmword_19FFB5FA0;
  v2[4] = "md::ls::PassDeviceCapabilities]";
  v2[5] = 30;
  v2[6] = 0x937D85B25618F8B3;
  v2[7] = "md::ls::PassSSAODescriptor]";
  v2[8] = 26;
  v3 = (char *)(v2 + 9);
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 9);
  if (v2 + 9 < v2 + 15)
  {
    *(_QWORD *)v3 = 0x73F7A94D4E0637DDLL;
    v2[10] = "md::ls::PassShadowDescriptor]";
    v2[11] = 28;
    v4 = (char *)(v2 + 12);
    goto LABEL_19;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_38;
  if (0x5555555555555556 * (((char *)(v2 + 15) - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * (((char *)(v2 + 15) - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)(v2 + 15) - v5) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v7;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_39;
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v6];
  v11 = &v9[24 * v8];
  *(_QWORD *)v10 = 0x73F7A94D4E0637DDLL;
  *((_QWORD *)v10 + 1) = "md::ls::PassShadowDescriptor]";
  *((_QWORD *)v10 + 2) = 28;
  v4 = v10 + 24;
  if (v3 == v5)
  {
    *a1 = v10;
    a1[1] = v4;
    a1[2] = v11;
LABEL_18:
    operator delete(v3);
    goto LABEL_19;
  }
  do
  {
    v12 = *((_QWORD *)v3 - 1);
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v3 - 24);
    *((_QWORD *)v10 - 1) = v12;
    v10 -= 24;
    v3 -= 24;
  }
  while (v3 != v5);
  v3 = *a1;
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  if (v3)
    goto LABEL_18;
LABEL_19:
  a1[1] = v4;
  v13 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v13)
  {
    *(_QWORD *)v4 = 0x6D136A48B3800686;
    *((_QWORD *)v4 + 1) = "md::ls::PassRouteLineDescriptor]";
    *((_QWORD *)v4 + 2) = 31;
    v14 = v4 + 24;
    goto LABEL_37;
  }
  v15 = *a1;
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v17 = v16 + 1;
  if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_38:
    abort();
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 3);
  if (2 * v18 > v17)
    v17 = 2 * v18;
  if (v18 >= 0x555555555555555)
    v19 = 0xAAAAAAAAAAAAAAALL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 <= 0xAAAAAAAAAAAAAAALL)
    {
      v20 = (char *)operator new(24 * v19);
      goto LABEL_31;
    }
LABEL_39:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v20 = 0;
LABEL_31:
  v21 = &v20[24 * v16];
  v22 = &v20[24 * v19];
  *(_QWORD *)v21 = 0x6D136A48B3800686;
  *((_QWORD *)v21 + 1) = "md::ls::PassRouteLineDescriptor]";
  *((_QWORD *)v21 + 2) = 31;
  v14 = v21 + 24;
  if (v4 == v15)
  {
    *a1 = v21;
    a1[1] = v14;
    a1[2] = v22;
LABEL_36:
    operator delete(v4);
    goto LABEL_37;
  }
  do
  {
    v23 = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v21 - 24) = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v21 - 1) = v23;
    v21 -= 24;
    v4 -= 24;
  }
  while (v4 != v15);
  v4 = *a1;
  *a1 = v21;
  a1[1] = v14;
  a1[2] = v22;
  if (v4)
    goto LABEL_36;
LABEL_37:
  a1[1] = v14;
}

void sub_19FE9EE8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildPrimaryFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildPrimaryFrameGraph>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildPrimaryFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildPrimaryFrameGraph>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276BD0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildPrimaryFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildPrimaryFrameGraph>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276BD0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

unint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildPrimaryFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildPrimaryFrameGraph>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _BOOL4 isValid;
  unint64_t result;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  BOOL v81;
  BOOL v82;
  BOOL v83;
  BOOL v84;
  BOOL v85;
  unsigned __int8 ***v86;
  BOOL v87;
  BOOL v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t *v119;
  unsigned __int8 ****v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  BOOL v127;
  BOOL v128;
  BOOL v129;
  uint64_t v130;
  _QWORD v131[3];
  _QWORD *v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::FrameGraphRenderTarget>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::PassDeviceCapabilities>(v2);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::PassSSAODescriptor>(v2);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::PassShadowDescriptor>(v2);
  v116 = (_QWORD *)gdc::Registry::storage<md::ls::PassRouteLineDescriptor>(v2);
  v7 = gdc::Registry::storage<md::ls::FrameGraphBuilder>(v2);
  v8 = gdc::Registry::storage<md::ls::PassCount>(v2);
  if (*(_QWORD *)(v8 + 64) - *(_QWORD *)(v8 + 56) >= *(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56))
    v9 = v7;
  else
    v9 = v8;
  if (v3[8] - v3[7] >= *(_QWORD *)(v9 + 64) - *(_QWORD *)(v9 + 56))
    v10 = (_QWORD *)(v9 + 32);
  else
    v10 = v3 + 4;
  if (v4[8] - v4[7] >= v10[4] - v10[3])
    v11 = v10;
  else
    v11 = v4 + 4;
  v12 = (_QWORD *)v11[3];
  v121 = v11;
  v122 = (_QWORD *)v7;
  v115 = (_QWORD *)v7;
  v123 = (_QWORD *)v8;
  v124 = v3;
  v125 = v4;
  v126 = v12;
  v13 = (_QWORD *)v11[4];
  if (v13 != v12
    && !gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v121))
  {
    v14 = v12 + 1;
    do
    {
      v12 = v14;
      v126 = v14;
      if (v14 == v13)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RequiresShaderTextureID<Flyover::NightTexture> const,md::ls::TextureHandleForType<Flyover::NightTexture> const,md::ls::FlyoverInstance const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v121);
      v14 = v12 + 1;
    }
    while (!isValid);
  }
  result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v117 = (_QWORD *)result;
  v114 = v17;
  if (v17 != v12)
  {
    v110 = v6;
    v111 = v5;
    v112 = v4;
    v113 = v3;
    while (1)
    {
      *v117 = *v12;
      v18 = *v12;
      v19 = HIDWORD(*v12);
      v20 = *v12 >> 39;
      v21 = v115[4];
      if (v20 < (v115[5] - v21) >> 3
        && (v22 = *(_QWORD *)(v21 + 8 * v20)) != 0
        && (v23 = *(unsigned __int16 *)(v22 + 2 * (HIDWORD(v18) & 0x7F)),
            v25 = v115[7],
            v24 = v115[8],
            v23 < (v24 - v25) >> 3)
        && ((v26 = v25 + 8 * v23, v26 != v24) ? (v27 = *(_DWORD *)(v26 + 4) == (_DWORD)v19) : (v27 = 0), v27))
      {
        v28 = v115[10] + 8 * v23;
      }
      else
      {
        v28 = v115[11];
      }
      v120 = (unsigned __int8 ****)v28;
      v29 = v3[4];
      if (v20 < (v3[5] - v29) >> 3
        && (v30 = *(_QWORD *)(v29 + 8 * v20)) != 0
        && (v31 = *(unsigned __int16 *)(v30 + 2 * (HIDWORD(v18) & 0x7F)),
            v33 = v3[7],
            v32 = v3[8],
            v31 < (v32 - v33) >> 3)
        && ((v34 = v33 + 8 * v31, v34 != v32) ? (v35 = *(_DWORD *)(v34 + 4) == (_DWORD)v19) : (v35 = 0), v35))
      {
        v36 = v3[10] + 8 * v31;
      }
      else
      {
        v36 = v3[11];
      }
      v119 = (uint64_t *)v36;
      v37 = v4[4];
      if (v20 < (v4[5] - v37) >> 3
        && (v38 = *(_QWORD *)(v37 + 8 * v20)) != 0
        && (v39 = *(unsigned __int16 *)(v38 + 2 * (HIDWORD(v18) & 0x7F)),
            v41 = v4[7],
            v40 = v4[8],
            v39 < (v40 - v41) >> 3)
        && ((v42 = v41 + 8 * v39, v42 != v40) ? (v43 = *(_DWORD *)(v42 + 4) == (_DWORD)v19) : (v43 = 0), v43))
      {
        v44 = (_BYTE *)(v4[10] + v39);
      }
      else
      {
        v44 = (_BYTE *)v4[11];
      }
      v45 = v5[4];
      if (v20 < (v5[5] - v45) >> 3
        && (v46 = *(_QWORD *)(v45 + 8 * v20)) != 0
        && (v47 = *(unsigned __int16 *)(v46 + 2 * (HIDWORD(v18) & 0x7F)),
            v49 = v5[7],
            v48 = v5[8],
            v47 < (v48 - v49) >> 3)
        && ((v50 = v49 + 8 * v47, v50 != v48) ? (v51 = *(_DWORD *)(v50 + 4) == (_DWORD)v19) : (v51 = 0), v51))
      {
        v52 = v5[11];
        v53 = v5[10] + v47;
      }
      else
      {
        v52 = v5[11];
        v53 = v52;
      }
      v54 = v6[4];
      if (v20 < (v6[5] - v54) >> 3
        && (v55 = *(_QWORD *)(v54 + 8 * v20)) != 0
        && (v56 = *(unsigned __int16 *)(v55 + 2 * (HIDWORD(v18) & 0x7F)),
            v58 = v6[7],
            v57 = v6[8],
            v56 < (v57 - v58) >> 3)
        && ((v59 = v58 + 8 * v56, v59 != v57) ? (v60 = *(_DWORD *)(v59 + 4) == (_DWORD)v19) : (v60 = 0), v60))
      {
        v61 = v6[11];
        v62 = v6[10] + v56;
      }
      else
      {
        v61 = v6[11];
        v62 = v61;
      }
      v63 = v116[4];
      if (v20 < (v116[5] - v63) >> 3
        && (v64 = *(_QWORD *)(v63 + 8 * v20)) != 0
        && (v65 = *(unsigned __int16 *)(v64 + 2 * (HIDWORD(v18) & 0x7F)),
            v67 = v116[7],
            v66 = v116[8],
            v65 < (v66 - v67) >> 3)
        && ((v68 = v67 + 8 * v65, v68 != v66) ? (v69 = *(_DWORD *)(v68 + 4) == (_DWORD)v19) : (v69 = 0), v69))
      {
        v70 = v116[11];
        v71 = v116[10] + v65;
      }
      else
      {
        v70 = v116[11];
        v71 = v70;
      }
      v72 = ***(uint64_t ****)(a1 + 8);
      if (v72 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v72 != 0xD369A4D92C8FFE6CLL)
      {
        v73 = v72 + 5;
        do
        {
          v74 = *v73;
          v73 += 5;
        }
        while (v74 != 0xD369A4D92C8FFE6CLL);
        v72 = v73 - 5;
      }
      v75 = v72[3];
      v76 = (std::__shared_weak_count *)v72[4];
      if (v76)
      {
        p_shared_owners = (unint64_t *)&v76->__shared_owners_;
        do
          v78 = __ldxr(p_shared_owners);
        while (__stxr(v78 + 1, p_shared_owners));
        do
          v79 = __ldaxr(p_shared_owners);
        while (__stlxr(v79 - 1, p_shared_owners));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
      v80 = result;
      if (result)
        v81 = *v44 == 0;
      else
        v81 = 1;
      if (v81)
        goto LABEL_105;
      v82 = v53 == v52 || v53 == 0;
      v83 = !v82;
      v84 = v62 == v61 || v62 == 0;
      v85 = !v84;
      v86 = *v120;
      v129 = v83;
      v128 = v85;
      v87 = v71 == v70 || v71 == 0;
      v88 = !v87;
      v127 = v88;
      v130 = *v119;
      v89 = operator new(0x30uLL);
      *v89 = &off_1E42CE1E0;
      v89[1] = &v128;
      v89[2] = v80;
      v89[3] = &v129;
      v89[4] = &v127;
      v89[5] = &v130;
      v132 = v89;
      md::FrameGraphBuilder::addRenderPass<md::StandardCommandBufferIdInfo>(v86, 9, v131);
      result = (unint64_t)v132;
      if (v132 == v131)
        break;
      if (v132)
      {
        v90 = 5;
LABEL_104:
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v90))();
      }
LABEL_105:
      v12 = (_QWORD *)v121[4];
      v91 = v126 + 1;
      v126 = v91;
      if (v91 == v12)
      {
        v4 = v112;
        v3 = v113;
        v6 = v110;
        v5 = v111;
      }
      else
      {
        v92 = v122[4];
        v4 = v112;
        v3 = v113;
        v6 = v110;
        v5 = v111;
        do
        {
          v93 = *((unsigned int *)v91 + 1);
          v94 = v93 >> 7;
          if (v93 >> 7 < (v122[5] - v92) >> 3)
          {
            result = *(_QWORD *)(v92 + 8 * v94);
            if (result)
            {
              v95 = v93 & 0x7F;
              result = *(unsigned __int16 *)(result + 2 * v95);
              v97 = v122[7];
              v96 = v122[8];
              if (result < (v96 - v97) >> 3)
              {
                result = v97 + 8 * result;
                if (result != v96 && *(_DWORD *)(result + 4) == (_DWORD)v93)
                {
                  result = v123[4];
                  if (v94 < (uint64_t)(v123[5] - result) >> 3)
                  {
                    result = *(_QWORD *)(result + 8 * v94);
                    if (result)
                    {
                      result = *(unsigned __int16 *)(result + 2 * v95);
                      v100 = v123[7];
                      v99 = v123[8];
                      if (result < (v99 - v100) >> 3)
                      {
                        result = v100 + 8 * result;
                        if (result != v99 && *(_DWORD *)(result + 4) == (_DWORD)v93)
                        {
                          result = v124[4];
                          if (v94 < (uint64_t)(v124[5] - result) >> 3)
                          {
                            result = *(_QWORD *)(result + 8 * v94);
                            if (result)
                            {
                              result = *(unsigned __int16 *)(result + 2 * v95);
                              v103 = v124[7];
                              v102 = v124[8];
                              if (result < (v102 - v103) >> 3)
                              {
                                result = v103 + 8 * result;
                                if (result != v102 && *(_DWORD *)(result + 4) == (_DWORD)v93)
                                {
                                  result = v125[4];
                                  if (v94 < (uint64_t)(v125[5] - result) >> 3)
                                  {
                                    v105 = *(_QWORD *)(result + 8 * v94);
                                    if (v105)
                                    {
                                      v106 = *(unsigned __int16 *)(v105 + 2 * v95);
                                      result = v125[7];
                                      v107 = v125[8];
                                      if (v106 < (uint64_t)(v107 - result) >> 3)
                                      {
                                        v108 = result + 8 * v106;
                                        result = *(unsigned int *)(v108 + 4);
                                        if ((_DWORD)result == (_DWORD)v93 && v108 != v107)
                                        {
                                          v12 = v91;
                                          goto LABEL_141;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v91;
        }
        while (v91 != v12);
        v91 = v12;
LABEL_141:
        v126 = v91;
      }
      if (v114 == v12)
        goto LABEL_148;
    }
    result = (unint64_t)v131;
    v90 = 4;
    goto LABEL_104;
  }
LABEL_148:
  *v117 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19FE9F5EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 - 104);
  if (v3 == (_QWORD *)(v1 - 128))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 128);
  }
  else
  {
    if (!v3)
      _Unwind_Resume(exception_object);
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  _Unwind_Resume(exception_object);
}

uint64_t gdc::Registry::storage<md::ls::PassSSAODescriptor>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0x937D85B25618F8B3;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x937D85B25618F8B3;
      if (*(_QWORD *)&v3 <= 0x937D85B25618F8B3)
        v5 = 0x937D85B25618F8B3 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x937D85B25618F8B3;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x937D85B25618F8B3)
            {
              if (v7[2] == 0x937D85B25618F8B3)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x937D85B25618F8B3)
          {
            if (v7[2] == 0x937D85B25618F8B3)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::PassSSAODescriptor]";
  *(_QWORD *)(v11 + 24) = 26;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3A38;
  *(_QWORD *)(v11 + 8) = 0x937D85B25618F8B3;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x937D85B25618F8B3, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x937D85B25618F8B3;
  v15[1] = "md::ls::PassSSAODescriptor]";
  v15[2] = 26;
  gdc::Registry::_registerStorageDataSignals(a1, 0x937D85B25618F8B3, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FE9F840(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::PassShadowDescriptor>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x73F7A94D4E0637DDLL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x73F7A94D4E0637DDLL;
      if (*(_QWORD *)&v3 <= 0x73F7A94D4E0637DDuLL)
        v5 = 0x73F7A94D4E0637DDuLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x73F7A94D4E0637DDLL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x73F7A94D4E0637DDLL)
            {
              if (v7[2] == 0x73F7A94D4E0637DDLL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x73F7A94D4E0637DDLL)
          {
            if (v7[2] == 0x73F7A94D4E0637DDLL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::PassShadowDescriptor]";
  *(_QWORD *)(v11 + 24) = 28;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3A98;
  *(_QWORD *)(v11 + 8) = 0x73F7A94D4E0637DDLL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x73F7A94D4E0637DDuLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x73F7A94D4E0637DDLL;
  v15[1] = "md::ls::PassShadowDescriptor]";
  v15[2] = 28;
  gdc::Registry::_registerStorageDataSignals(a1, 0x73F7A94D4E0637DDLL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FE9FA68(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::PassShadowDescriptor>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassShadowDescriptor>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PassShadowDescriptor>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassShadowDescriptor>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::PassSSAODescriptor>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassSSAODescriptor>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PassSSAODescriptor>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassSSAODescriptor>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildShadowFrameGraph>(md::ita::BuildShadowFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildShadowFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildShadowFrameGraph>(md::ita::BuildShadowFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildShadowFrameGraph>(md::ita::BuildShadowFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildShadowFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildShadowFrameGraph>(md::ita::BuildShadowFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283F98;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildShadowFrameGraph>(md::ita::BuildShadowFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildShadowFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildShadowFrameGraph>(md::ita::BuildShadowFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283F98;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildShadowFrameGraph>(md::ita::BuildShadowFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildShadowFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildShadowFrameGraph>(md::ita::BuildShadowFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;
  char **v3;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 48;
  v3 = (char **)a1;
  _ZZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FrameGraphBuilderENS4_9PassCountEEEEZNS_18typelist_as_vectorIS7_EENS1_6vectorINS_8TypeInfoENS1_9allocatorISA_EEEEvEUlTyvE_EEvOT0_ENKUlTpTnmNS1_16integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSI_(&v3);
}

void sub_19FE9FDEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildShadowFrameGraph>(md::ita::BuildShadowFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildShadowFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildShadowFrameGraph>(md::ita::BuildShadowFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildShadowFrameGraph>(md::ita::BuildShadowFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildShadowFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildShadowFrameGraph>(md::ita::BuildShadowFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283FE0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildShadowFrameGraph>(md::ita::BuildShadowFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildShadowFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildShadowFrameGraph>(md::ita::BuildShadowFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283FE0;
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildShadowFrameGraph>(md::ita::BuildShadowFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildShadowFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildShadowFrameGraph>(md::ita::BuildShadowFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = operator new(0x18uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *result = 0x7216A09FEC0661A6;
  result[1] = "md::ls::PassShadowConfiguration]";
  result[2] = 31;
  *a1 = result;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildShadowFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildShadowFrameGraph>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildShadowFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildShadowFrameGraph>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276870;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildShadowFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildShadowFrameGraph>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276870;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildShadowFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildShadowFrameGraph>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _BOOL4 isValid;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unsigned __int8 ****v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  uint64_t result;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  char v75;
  _QWORD v76[2];
  int v77;
  _QWORD *v78;
  _QWORD v79[2];
  int v80;
  _QWORD *v81;
  int v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::PassShadowConfiguration>(v3);
  v5 = (_QWORD *)gdc::Registry::storage<md::ls::FrameGraphBuilder>(v3);
  v6 = gdc::Registry::storage<md::ls::PassCount>(v3);
  v7 = v5 + 4;
  if (*(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) < v5[8] - v5[7])
    v7 = (_QWORD *)(v6 + 32);
  if (v4[8] - v4[7] < v7[4] - v7[3])
    v7 = v4 + 4;
  v70 = v7;
  v71 = v5;
  v72 = (_QWORD *)v6;
  v73 = v4;
  v8 = (_QWORD *)v7[3];
  v9 = (_QWORD *)v7[4];
  v74 = v8;
  if (v9 != v8
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v70))
  {
    v10 = v8 + 1;
    do
    {
      v8 = v10;
      v74 = v10;
      if (v10 == v9)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v70);
      v10 = v8 + 1;
    }
    while (!isValid);
  }
  if (v9 != v8)
  {
    v12 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    while (1)
    {
      *v12 = *v8;
      v14 = *v8;
      v15 = HIDWORD(*v8);
      v16 = *v8 >> 39;
      v17 = v5[4];
      if (v16 < (v5[5] - v17) >> 3
        && (v18 = *(_QWORD *)(v17 + 8 * v16)) != 0
        && (v19 = *(unsigned __int16 *)(v18 + 2 * (HIDWORD(v14) & 0x7F)),
            v21 = v5[7],
            v20 = v5[8],
            v19 < (v20 - v21) >> 3)
        && ((v22 = v21 + 8 * v19, v22 != v20) ? (v23 = *(_DWORD *)(v22 + 4) == (_DWORD)v15) : (v23 = 0), v23))
      {
        v24 = (unsigned __int8 ****)(v5[10] + 8 * v19);
      }
      else
      {
        v24 = (unsigned __int8 ****)v5[11];
      }
      v25 = v4[4];
      if (v16 < (v4[5] - v25) >> 3
        && (v26 = *(_QWORD *)(v25 + 8 * v16)) != 0
        && (v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v14) & 0x7F)),
            v29 = v4[7],
            v28 = v4[8],
            v27 < (v28 - v29) >> 3)
        && ((v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == (_DWORD)v15) : (v31 = 0), v31))
      {
        v32 = (_BYTE *)v4[11];
        v33 = (_BYTE *)(v4[10] + v27);
      }
      else
      {
        v32 = (_BYTE *)v4[11];
        v33 = v32;
      }
      if (v33 == v32)
        v34 = 0;
      else
        v34 = v33;
      v35 = ***(uint64_t ****)(a1 + 8);
      if (v35 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v35 != 0xD369A4D92C8FFE6CLL)
      {
        v36 = v35 + 5;
        do
        {
          v37 = *v36;
          v36 += 5;
        }
        while (v37 != 0xD369A4D92C8FFE6CLL);
        v35 = v36 - 5;
      }
      v38 = v35[3];
      v39 = (std::__shared_weak_count *)v35[4];
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(p_shared_owners);
        while (__stxr(v41 + 1, p_shared_owners));
        do
          v42 = __ldaxr(p_shared_owners);
        while (__stlxr(v42 - 1, p_shared_owners));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
      if (!result)
        goto LABEL_54;
      result = (uint64_t)md::StandardPassList::_buildShadowFrameGraph((_QWORD *)result, (const BOOL *)*v34, *v24);
      if (!*v34)
        goto LABEL_54;
      v44 = *(_QWORD **)(a1 + 8);
      v45 = HIDWORD(*v12);
      v46 = *v12 << 32;
      v76[0] = &off_1E427F0D8;
      v76[1] = v46;
      v77 = v45;
      v78 = v76;
      v79[0] = &off_1E427F0D8;
      v81 = v79;
      v79[1] = v46;
      v80 = v45;
      v82 = 0;
      ecs2::Runtime::queueCommand(v44, (uint64_t)v79);
      if (v82 != -1)
        ((void (*)(char *, _QWORD *))off_1E42FB340[v82])(&v75, v79);
      v82 = -1;
      result = (uint64_t)v78;
      if (v78 == v76)
        break;
      if (v78)
      {
        v47 = 5;
LABEL_53:
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v47))();
      }
LABEL_54:
      v8 = (_QWORD *)v70[4];
      v13 = v74 + 1;
      v74 = v13;
      if (v13 != v8)
      {
        v48 = v71[4];
        while (1)
        {
          v49 = *((unsigned int *)v13 + 1);
          v50 = v49 >> 7;
          if (v49 >> 7 < (v71[5] - v48) >> 3)
          {
            v51 = *(_QWORD *)(v48 + 8 * v50);
            if (v51)
            {
              v52 = v49 & 0x7F;
              v53 = *(unsigned __int16 *)(v51 + 2 * v52);
              v54 = v71[7];
              result = v71[8];
              if (v53 < (result - v54) >> 3)
              {
                v55 = v54 + 8 * v53;
                if (v55 != result && *(_DWORD *)(v55 + 4) == (_DWORD)v49)
                {
                  v57 = v72[4];
                  result = v72[5] - v57;
                  if (v50 < result >> 3)
                  {
                    v58 = *(_QWORD *)(v57 + 8 * v50);
                    if (v58)
                    {
                      v59 = *(unsigned __int16 *)(v58 + 2 * v52);
                      v60 = v72[7];
                      result = v72[8];
                      if (v59 < (result - v60) >> 3)
                      {
                        v61 = v60 + 8 * v59;
                        if (v61 != result && *(_DWORD *)(v61 + 4) == (_DWORD)v49)
                        {
                          v63 = v73[4];
                          result = v73[5] - v63;
                          if (v50 < result >> 3)
                          {
                            v64 = *(_QWORD *)(v63 + 8 * v50);
                            if (v64)
                            {
                              v65 = *(unsigned __int16 *)(v64 + 2 * v52);
                              v67 = v73[7];
                              v66 = v73[8];
                              result = v66 - v67;
                              if (v65 < (v66 - v67) >> 3)
                              {
                                v68 = v67 + 8 * v65;
                                if (*(_DWORD *)(v68 + 4) == (_DWORD)v49 && v68 != v66)
                                  break;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v13 == v8)
          {
            v13 = v8;
            goto LABEL_13;
          }
        }
        v8 = v13;
LABEL_13:
        v74 = v13;
      }
      if (v9 == v8)
        goto LABEL_84;
    }
    result = (uint64_t)v76;
    v47 = 4;
    goto LABEL_53;
  }
  result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v12 = (_QWORD *)result;
LABEL_84:
  *v12 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t gdc::Registry::storage<md::ls::PassShadowConfiguration>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x7216A09FEC0661A6;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x7216A09FEC0661A6;
      if (*(_QWORD *)&v3 <= 0x7216A09FEC0661A6uLL)
        v5 = 0x7216A09FEC0661A6uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x7216A09FEC0661A6;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x7216A09FEC0661A6)
            {
              if (v7[2] == 0x7216A09FEC0661A6)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x7216A09FEC0661A6)
          {
            if (v7[2] == 0x7216A09FEC0661A6)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::PassShadowConfiguration]";
  *(_QWORD *)(v11 + 24) = 31;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3C78;
  *(_QWORD *)(v11 + 8) = 0x7216A09FEC0661A6;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x7216A09FEC0661A6uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x7216A09FEC0661A6;
  v15[1] = "md::ls::PassShadowConfiguration]";
  v15[2] = 31;
  gdc::Registry::_registerStorageDataSignals(a1, 0x7216A09FEC0661A6, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FEA05E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassShadowDescriptor>(gdc::Entity,md::ls::PassShadowDescriptor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassShadowDescriptor>(gdc::Entity,md::ls::PassShadowDescriptor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427F0D8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassShadowDescriptor>(gdc::Entity,md::ls::PassShadowDescriptor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427F0D8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassShadowDescriptor>(gdc::Entity,md::ls::PassShadowDescriptor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::PassShadowDescriptor>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void gdc::ComponentStorageWrapper<md::ls::PassShadowConfiguration>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassShadowConfiguration>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PassShadowConfiguration>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassShadowConfiguration>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAOFrameGraph>(md::ita::BuildSSAOFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildSSAOFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAOFrameGraph>(md::ita::BuildSSAOFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAOFrameGraph>(md::ita::BuildSSAOFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildSSAOFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAOFrameGraph>(md::ita::BuildSSAOFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4283968;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAOFrameGraph>(md::ita::BuildSSAOFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildSSAOFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAOFrameGraph>(md::ita::BuildSSAOFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4283968;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAOFrameGraph>(md::ita::BuildSSAOFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildSSAOFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAOFrameGraph>(md::ita::BuildSSAOFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;
  char **v3;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 48;
  v3 = (char **)a1;
  _ZZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FrameGraphBuilderENS4_9PassCountEEEEZNS_18typelist_as_vectorIS7_EENS1_6vectorINS_8TypeInfoENS1_9allocatorISA_EEEEvEUlTyvE_EEvOT0_ENKUlTpTnmNS1_16integer_sequenceImJXspT_EEEEE_clIJLm0ELm1EEEEDaSI_(&v3);
}

void sub_19FEA0A0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAOFrameGraph>(md::ita::BuildSSAOFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildSSAOFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAOFrameGraph>(md::ita::BuildSSAOFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAOFrameGraph>(md::ita::BuildSSAOFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildSSAOFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAOFrameGraph>(md::ita::BuildSSAOFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42839B0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAOFrameGraph>(md::ita::BuildSSAOFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildSSAOFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAOFrameGraph>(md::ita::BuildSSAOFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42839B0;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAOFrameGraph>(md::ita::BuildSSAOFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildSSAOFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAOFrameGraph>(md::ita::BuildSSAOFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x48uLL);
  a1[2] = v2 + 9;
  *v2 = 0xD7B05696AE714D71;
  v2[1] = "md::ls::FrameBufferDesc]";
  *(_QWORD *)&result = 23;
  *((_OWORD *)v2 + 1) = xmmword_19FFB5FB0;
  v2[4] = "md::ls::PassSSAOConfiguration]";
  v2[5] = 29;
  v2[6] = 0xC5E1935BF25B6EDALL;
  v2[7] = "md::ls::PassMapEngineCapabilities]";
  v2[8] = 33;
  *a1 = v2;
  a1[1] = v2 + 9;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildSSAOFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildSSAOFrameGraph>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildSSAOFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildSSAOFrameGraph>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276558;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildSSAOFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildSSAOFrameGraph>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276558;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildSSAOFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildSSAOFrameGraph>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _BOOL4 isValid;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  int32x2_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  char v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  char v110;
  _QWORD v111[2];
  int v112;
  _QWORD *v113;
  _QWORD v114[2];
  int v115;
  _QWORD *v116;
  int v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v2 = *(_QWORD *)(a2 + 8);
  v3 = (_QWORD *)gdc::Registry::storage<md::ls::FrameBufferDesc>(v2);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::PassSSAOConfiguration>(v2);
  v5 = gdc::Registry::storage<md::ls::PassMapEngineCapabilities>(v2);
  v6 = (_QWORD *)gdc::Registry::storage<md::ls::FrameGraphBuilder>(v2);
  v7 = gdc::Registry::storage<md::ls::PassCount>(v2);
  if (*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56) >= v6[8] - v6[7])
    v8 = v6;
  else
    v8 = (_QWORD *)v7;
  if (v3[8] - v3[7] >= v8[8] - v8[7])
    v9 = v8 + 4;
  else
    v9 = v3 + 4;
  if (v4[8] - v4[7] >= v9[4] - v9[3])
    v10 = v9;
  else
    v10 = v4 + 4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v10[4] - v10[3])
    v10 = (_QWORD *)(v5 + 32);
  v11 = (_QWORD *)v10[3];
  v103 = v10;
  v104 = v6;
  v105 = (_QWORD *)v7;
  v106 = v3;
  v107 = v4;
  v108 = (_QWORD *)v5;
  v109 = v11;
  v12 = (_QWORD *)v10[4];
  if (v12 != v11
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v103))
  {
    v13 = v11 + 1;
    do
    {
      v11 = v13;
      v109 = v13;
      if (v13 == v12)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v103);
      v13 = v11 + 1;
    }
    while (!isValid);
  }
  v15 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v101 = v16;
  if (v16 != v11)
  {
    while (1)
    {
      *v15 = *v11;
      v18 = *v11;
      v19 = HIDWORD(*v11);
      v20 = *v11 >> 39;
      v21 = v6[4];
      if (v20 < (v6[5] - v21) >> 3
        && (v22 = *(_QWORD *)(v21 + 8 * v20)) != 0
        && (v23 = *(unsigned __int16 *)(v22 + 2 * (HIDWORD(v18) & 0x7F)),
            v25 = v6[7],
            v24 = v6[8],
            v23 < (v24 - v25) >> 3)
        && ((v26 = v25 + 8 * v23, v26 != v24) ? (v27 = *(_DWORD *)(v26 + 4) == (_DWORD)v19) : (v27 = 0), v27))
      {
        v28 = (uint64_t *)(v6[10] + 8 * v23);
      }
      else
      {
        v28 = (uint64_t *)v6[11];
      }
      v29 = v3[4];
      if (v20 < (v3[5] - v29) >> 3
        && (v30 = *(_QWORD *)(v29 + 8 * v20)) != 0
        && (v31 = *(unsigned __int16 *)(v30 + 2 * (HIDWORD(v18) & 0x7F)),
            v33 = v3[7],
            v32 = v3[8],
            v31 < (v32 - v33) >> 3)
        && ((v34 = v33 + 8 * v31, v34 != v32) ? (v35 = *(_DWORD *)(v34 + 4) == (_DWORD)v19) : (v35 = 0), v35))
      {
        v36 = v3[11];
        v37 = v3[10] + 8 * v31;
      }
      else
      {
        v36 = v3[11];
        v37 = v36;
      }
      if (v37 == v36)
        v38 = 0;
      else
        v38 = (int32x2_t *)v37;
      v39 = v4[4];
      if (v20 < (v4[5] - v39) >> 3
        && (v40 = *(_QWORD *)(v39 + 8 * v20)) != 0
        && (v41 = *(unsigned __int16 *)(v40 + 2 * (HIDWORD(v18) & 0x7F)),
            v43 = v4[7],
            v42 = v4[8],
            v41 < (v42 - v43) >> 3)
        && ((v44 = v43 + 8 * v41, v44 != v42) ? (v45 = *(_DWORD *)(v44 + 4) == (_DWORD)v19) : (v45 = 0), v45))
      {
        v46 = v4[11];
        v47 = v4[10] + 12 * v41;
      }
      else
      {
        v46 = v4[11];
        v47 = v46;
      }
      if (v47 == v46)
        v48 = 0;
      else
        v48 = v47;
      v49 = ***(uint64_t ****)(a1 + 8);
      if (v49 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v49 != 0xD369A4D92C8FFE6CLL)
      {
        v50 = v49 + 5;
        do
        {
          v51 = *v50;
          v50 += 5;
        }
        while (v51 != 0xD369A4D92C8FFE6CLL);
        v49 = v50 - 5;
      }
      v52 = v49[3];
      v53 = (std::__shared_weak_count *)v49[4];
      if (v53)
      {
        p_shared_owners = (unint64_t *)&v53->__shared_owners_;
        do
          v55 = __ldxr(p_shared_owners);
        while (__stxr(v55 + 1, p_shared_owners));
        do
          v56 = __ldaxr(p_shared_owners);
        while (__stlxr(v56 - 1, p_shared_owners));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
      if (!v57)
        goto LABEL_72;
      v59 = *(_BYTE *)(v48 + 10);
      v58 = (_BYTE *)(v48 + 10);
      md::StandardPassList::_buildSSAOFrameGraph(v57, v59, (float *)(v58 - 6), v58 - 1, v38, *v28);
      if (!*v58)
        goto LABEL_72;
      v60 = *(_QWORD **)(a1 + 8);
      v61 = HIDWORD(*v15);
      v62 = *v15 << 32;
      v111[0] = &off_1E427ECA0;
      v111[1] = v62;
      v112 = v61;
      v113 = v111;
      v114[0] = &off_1E427ECA0;
      v116 = v114;
      v114[1] = v62;
      v115 = v61;
      v117 = 0;
      ecs2::Runtime::queueCommand(v60, (uint64_t)v114);
      if (v117 != -1)
        ((void (*)(char *, _QWORD *))off_1E42FB340[v117])(&v110, v114);
      v117 = -1;
      v63 = v113;
      if (v113 == v111)
        break;
      if (v113)
      {
        v64 = 5;
LABEL_71:
        (*(void (**)(void))(*v63 + 8 * v64))();
      }
LABEL_72:
      v11 = (_QWORD *)v103[4];
      v17 = v109 + 1;
      v109 = v17;
      if (v17 != v11)
      {
        v65 = v104[4];
        while (1)
        {
          v66 = *((unsigned int *)v17 + 1);
          v67 = v66 >> 7;
          if (v66 >> 7 < (v104[5] - v65) >> 3)
          {
            v68 = *(_QWORD *)(v65 + 8 * v67);
            if (v68)
            {
              v69 = v66 & 0x7F;
              v70 = *(unsigned __int16 *)(v68 + 2 * v69);
              v72 = v104[7];
              v71 = v104[8];
              if (v70 < (v71 - v72) >> 3)
              {
                v73 = v72 + 8 * v70;
                if (v73 != v71 && *(_DWORD *)(v73 + 4) == (_DWORD)v66)
                {
                  v75 = v105[4];
                  if (v67 < (v105[5] - v75) >> 3)
                  {
                    v76 = *(_QWORD *)(v75 + 8 * v67);
                    if (v76)
                    {
                      v77 = *(unsigned __int16 *)(v76 + 2 * v69);
                      v79 = v105[7];
                      v78 = v105[8];
                      if (v77 < (v78 - v79) >> 3)
                      {
                        v80 = v79 + 8 * v77;
                        if (v80 != v78 && *(_DWORD *)(v80 + 4) == (_DWORD)v66)
                        {
                          v82 = v106[4];
                          if (v67 < (v106[5] - v82) >> 3)
                          {
                            v83 = *(_QWORD *)(v82 + 8 * v67);
                            if (v83)
                            {
                              v84 = *(unsigned __int16 *)(v83 + 2 * v69);
                              v86 = v106[7];
                              v85 = v106[8];
                              if (v84 < (v85 - v86) >> 3)
                              {
                                v87 = v86 + 8 * v84;
                                if (v87 != v85 && *(_DWORD *)(v87 + 4) == (_DWORD)v66)
                                {
                                  v89 = v107[4];
                                  if (v67 < (v107[5] - v89) >> 3)
                                  {
                                    v90 = *(_QWORD *)(v89 + 8 * v67);
                                    if (v90)
                                    {
                                      v91 = *(unsigned __int16 *)(v90 + 2 * v69);
                                      v93 = v107[7];
                                      v92 = v107[8];
                                      if (v91 < (v92 - v93) >> 3)
                                      {
                                        v94 = v93 + 8 * v91;
                                        if (v94 != v92 && *(_DWORD *)(v94 + 4) == (_DWORD)v66)
                                        {
                                          v95 = v108[4];
                                          if (v67 < (v108[5] - v95) >> 3)
                                          {
                                            v96 = *(_QWORD *)(v95 + 8 * v67);
                                            if (v96)
                                            {
                                              v97 = *(unsigned __int16 *)(v96 + 2 * v69);
                                              v98 = v108[7];
                                              v99 = v108[8];
                                              if (v97 < (v99 - v98) >> 3)
                                              {
                                                v100 = v98 + 8 * v97;
                                                if (*(_DWORD *)(v100 + 4) == (_DWORD)v66 && v100 != v99)
                                                  break;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v17 == v11)
          {
            v17 = v11;
            goto LABEL_20;
          }
        }
        v11 = v17;
LABEL_20:
        v109 = v17;
      }
      if (v101 == v11)
        goto LABEL_113;
    }
    v63 = v111;
    v64 = 4;
    goto LABEL_71;
  }
LABEL_113:
  *v15 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
}

uint64_t gdc::Registry::storage<md::ls::PassSSAOConfiguration>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v16 = 0x73C8822C1D168C4;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0x73C8822C1D168C4;
      if (*(_QWORD *)&v3 <= 0x73C8822C1D168C4uLL)
        v5 = 0x73C8822C1D168C4uLL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0x73C8822C1D168C4;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0x73C8822C1D168C4)
            {
              if (v7[2] == 0x73C8822C1D168C4)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0x73C8822C1D168C4)
          {
            if (v7[2] == 0x73C8822C1D168C4)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::PassSSAOConfiguration]";
  *(_QWORD *)(v11 + 24) = 29;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3B28;
  *(_QWORD *)(v11 + 8) = 0x73C8822C1D168C4;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0x73C8822C1D168C4uLL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0x73C8822C1D168C4;
  v15[1] = "md::ls::PassSSAOConfiguration]";
  v15[2] = 29;
  gdc::Registry::_registerStorageDataSignals(a1, 0x73C8822C1D168C4, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FEA13BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<md::ls::PassMapEngineCapabilities>(uint64_t a1)
{
  uint64_t *v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  unint64_t v16;

  v16 = 0xC5E1935BF25B6EDALL;
  v2 = (uint64_t *)(a1 + 120);
  v3 = *(int8x8_t *)(a1 + 128);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = 0xC5E1935BF25B6EDALL;
      if (*(_QWORD *)&v3 <= 0xC5E1935BF25B6EDALL)
        v5 = 0xC5E1935BF25B6EDALL % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & 0xC5E1935BF25B6EDALL;
    }
    v6 = *(_QWORD **)(*v2 + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == 0xC5E1935BF25B6EDALL)
            {
              if (v7[2] == 0xC5E1935BF25B6EDALL)
                return v7[3];
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == 0xC5E1935BF25B6EDALL)
          {
            if (v7[2] == 0xC5E1935BF25B6EDALL)
              return v7[3];
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = "md::ls::PassMapEngineCapabilities]";
  *(_QWORD *)(v11 + 24) = 33;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_DWORD *)(v11 + 144) = 1065353216;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1065353216;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 232) = 0;
  *(_DWORD *)(v11 + 240) = 1065353216;
  *(_QWORD *)v11 = &off_1E42B3CA8;
  *(_QWORD *)(v11 + 8) = 0xC5E1935BF25B6EDALL;
  *(_QWORD *)(v11 + 248) = a1;
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v2, 0xC5E1935BF25B6EDALL, &v16);
  v13 = v12[3];
  v12[3] = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15[0] = 0xC5E1935BF25B6EDALL;
  v15[1] = "md::ls::PassMapEngineCapabilities]";
  v15[2] = 33;
  gdc::Registry::_registerStorageDataSignals(a1, 0xC5E1935BF25B6EDALL, (uint64_t)v15, (uint64_t *)(v11 + 104));
  return v11;
}

void sub_19FEA15E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassSSAODescriptor>(gdc::Entity,md::ls::PassSSAODescriptor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassSSAODescriptor>(gdc::Entity,md::ls::PassSSAODescriptor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427ECA0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassSSAODescriptor>(gdc::Entity,md::ls::PassSSAODescriptor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427ECA0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassSSAODescriptor>(gdc::Entity,md::ls::PassSSAODescriptor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 12);
  v3 = (uint64_t *)gdc::Registry::storage<md::ls::PassSSAODescriptor>(a2);
  v22 = v2;
  v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if ((v5 & 1) != 0)
  {
    v10 = (_BYTE *)v3[11];
    v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)v3[10];
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        goto LABEL_28;
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)operator new(v16);
      else
        v17 = 0;
      v18 = &v17[v16];
      v11 = (uint64_t)&v17[v13 + 1];
      v19 = (char *)(v12 - v10);
      if (v12 == v10)
        v19 = 0;
      v3[10] = (uint64_t)&v17[v13 + (_QWORD)v19];
      v3[11] = v11;
      v3[12] = (uint64_t)v18;
      if (v12)
        operator delete(v12);
    }
    else
    {
      v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    v6 = v3[31];
  }
  else
  {
    v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      v7 = (_QWORD *)v3[16];
      if (v7)
      {
        while (1)
        {
          v24 = &v22;
          v25 = 1;
          v23 = v6;
          v8 = v7[6];
          if (!v8)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v8 + 48))(v8, &v23, &v24);
          v7 = (_QWORD *)*v7;
          if (!v7)
            return;
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  v20 = (_QWORD *)v3[22];
  if (v20)
  {
    while (1)
    {
      v24 = &v22;
      v25 = 1;
      v23 = v6;
      v21 = v20[6];
      if (!v21)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v21 + 48))(v21, &v23, &v24);
      v20 = (_QWORD *)*v20;
      if (!v20)
        return;
    }
    goto LABEL_27;
  }
}

void gdc::ComponentStorageWrapper<md::ls::PassMapEngineCapabilities>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassMapEngineCapabilities>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PassMapEngineCapabilities>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassMapEngineCapabilities>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::PassSSAOConfiguration>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassSSAOConfiguration>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v22 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10] + 12 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  v16 = *(_DWORD *)(v15 - 4);
  *(_QWORD *)v14 = *(_QWORD *)(v15 - 12);
  *(_DWORD *)(v14 + 8) = v16;
  a1[11] -= 12;
  v17 = (_QWORD *)a1[28];
  if (!v17)
    return 1;
  v18 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    v23 = v18;
    v19 = v17[6];
    if (!v19)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v19 + 48))(v19, &v23, v24);
    v17 = (_QWORD *)*v17;
    if (!v17)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PassSSAOConfiguration>::contains(v20, v21);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassSSAOConfiguration>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildSSAODOFCommonFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildSSAODOFCommonFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286548;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildSSAODOFCommonFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286548;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildSSAODOFCommonFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md2ls17FrameGraphBuilderEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19FEA1B80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildSSAODOFCommonFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildSSAODOFCommonFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4286590;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildSSAODOFCommonFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4286590;
}

double std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildSSAODOFCommonFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  double result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x30uLL);
  a1[1] = v2 + 6;
  a1[2] = v2 + 6;
  *v2 = 0x73C8822C1D168C4;
  v2[1] = "md::ls::PassSSAOConfiguration]";
  *(_QWORD *)&result = 29;
  *((_OWORD *)v2 + 1) = xmmword_19FFB5FC0;
  v2[4] = "md::ls::PassMapEngineCapabilities]";
  v2[5] = 33;
  *a1 = v2;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildSSAODOFCommonFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildSSAODOFCommonFrameGraph>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildSSAODOFCommonFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildSSAODOFCommonFrameGraph>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4277B48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildSSAODOFCommonFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildSSAODOFCommonFrameGraph>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4277B48;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildSSAODOFCommonFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildSSAODOFCommonFrameGraph>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _BOOL4 isValid;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unsigned __int8 ****v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t v43;
  uint64_t result;
  unsigned __int8 ***v45;
  float v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  float v74;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)gdc::Registry::storage<md::ls::PassSSAOConfiguration>(v3);
  v5 = gdc::Registry::storage<md::ls::PassMapEngineCapabilities>(v3);
  v6 = gdc::Registry::storage<md::ls::FrameGraphBuilder>(v3);
  v7 = (_QWORD *)v6;
  v8 = (_QWORD *)(v6 + 32);
  if (v4[8] - v4[7] < *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56))
    v8 = v4 + 4;
  if (*(_QWORD *)(v5 + 64) - *(_QWORD *)(v5 + 56) < v8[4] - v8[3])
    v8 = (_QWORD *)(v5 + 32);
  v69 = v8;
  v70 = (_QWORD *)v6;
  v71 = v4;
  v72 = (_QWORD *)v5;
  v9 = (_QWORD *)v8[3];
  v10 = (_QWORD *)v8[4];
  v73 = v9;
  if (v10 != v9
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v69))
  {
    v11 = v9 + 1;
    do
    {
      v9 = v11;
      v73 = v11;
      if (v11 == v10)
        break;
      isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v69);
      v11 = v9 + 1;
    }
    while (!isValid);
  }
  if (v10 == v9)
  {
    result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    v13 = (_QWORD *)result;
  }
  else
  {
    v13 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *v13 = *v9;
      v15 = *v9;
      v16 = HIDWORD(*v9);
      v17 = *v9 >> 39;
      v18 = v7[4];
      if (v17 < (v7[5] - v18) >> 3
        && (v19 = *(_QWORD *)(v18 + 8 * v17)) != 0
        && (v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            v22 = v7[7],
            v21 = v7[8],
            v20 < (v21 - v22) >> 3)
        && ((v23 = v22 + 8 * v20, v23 != v21) ? (v24 = *(_DWORD *)(v23 + 4) == (_DWORD)v16) : (v24 = 0), v24))
      {
        v25 = (unsigned __int8 ****)(v7[10] + 8 * v20);
      }
      else
      {
        v25 = (unsigned __int8 ****)v7[11];
      }
      v26 = v4[4];
      if (v17 < (v4[5] - v26) >> 3
        && (v27 = *(_QWORD *)(v26 + 8 * v17)) != 0
        && (v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v15) & 0x7F)),
            v30 = v4[7],
            v29 = v4[8],
            v28 < (v29 - v30) >> 3)
        && ((v31 = v30 + 8 * v28, v31 != v29) ? (v32 = *(_DWORD *)(v31 + 4) == (_DWORD)v16) : (v32 = 0), v32))
      {
        v33 = v4[11];
        v34 = v4[10] + 12 * v28;
      }
      else
      {
        v33 = v4[11];
        v34 = v33;
      }
      if (v34 == v33)
        v35 = 0;
      else
        v35 = v34;
      v36 = ***(uint64_t ****)(a1 + 8);
      if (v36 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v36 != 0xD369A4D92C8FFE6CLL)
      {
        v37 = v36 + 5;
        do
        {
          v38 = *v37;
          v37 += 5;
        }
        while (v38 != 0xD369A4D92C8FFE6CLL);
        v36 = v37 - 5;
      }
      v39 = v36[3];
      v40 = (std::__shared_weak_count *)v36[4];
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(p_shared_owners);
        while (__stxr(v42 + 1, p_shared_owners));
        do
          v43 = __ldaxr(p_shared_owners);
        while (__stlxr(v43 - 1, p_shared_owners));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      if (result)
      {
        v45 = *v25;
        v46 = *(float *)v35;
        if (!*(_BYTE *)(v35 + 10))
          v46 = 1.0;
        v74 = v46;
        result = (uint64_t)md::StandardPassList::_buildSSAODOFCommonFrameGraph((_QWORD *)result, (const BOOL *)(v35 + 10), 0, &v74, v45);
      }
      v9 = (_QWORD *)v69[4];
      v14 = v73 + 1;
      v73 = v14;
      if (v14 != v9)
      {
        v47 = v70[4];
        while (1)
        {
          v48 = *((unsigned int *)v14 + 1);
          v49 = v48 >> 7;
          if (v48 >> 7 < (v70[5] - v47) >> 3)
          {
            v50 = *(_QWORD *)(v47 + 8 * v49);
            if (v50)
            {
              v51 = v48 & 0x7F;
              v52 = *(unsigned __int16 *)(v50 + 2 * v51);
              v53 = v70[7];
              result = v70[8];
              if (v52 < (result - v53) >> 3)
              {
                v54 = v53 + 8 * v52;
                if (v54 != result && *(_DWORD *)(v54 + 4) == (_DWORD)v48)
                {
                  v56 = v71[4];
                  result = v71[5] - v56;
                  if (v49 < result >> 3)
                  {
                    v57 = *(_QWORD *)(v56 + 8 * v49);
                    if (v57)
                    {
                      v58 = *(unsigned __int16 *)(v57 + 2 * v51);
                      v59 = v71[7];
                      result = v71[8];
                      if (v58 < (result - v59) >> 3)
                      {
                        v60 = v59 + 8 * v58;
                        if (v60 != result && *(_DWORD *)(v60 + 4) == (_DWORD)v48)
                        {
                          v62 = v72[4];
                          result = v72[5] - v62;
                          if (v49 < result >> 3)
                          {
                            v63 = *(_QWORD *)(v62 + 8 * v49);
                            if (v63)
                            {
                              v64 = *(unsigned __int16 *)(v63 + 2 * v51);
                              v66 = v72[7];
                              v65 = v72[8];
                              result = v65 - v66;
                              if (v64 < (v65 - v66) >> 3)
                              {
                                v67 = v66 + 8 * v64;
                                if (*(_DWORD *)(v67 + 4) == (_DWORD)v48 && v67 != v65)
                                  break;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v9)
          {
            v14 = v9;
            goto LABEL_13;
          }
        }
        v9 = v14;
LABEL_13:
        v73 = v14;
      }
    }
    while (v10 != v9);
  }
  *v13 = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::DetermineIfLegacy>,std::allocator<ecs2::ForwardToExecute<md::DetermineIfLegacy>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::DetermineIfLegacy>,std::allocator<ecs2::ForwardToExecute<md::DetermineIfLegacy>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4275E50;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::DetermineIfLegacy>,std::allocator<ecs2::ForwardToExecute<md::DetermineIfLegacy>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4275E50;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::DetermineIfLegacy>,std::allocator<ecs2::ForwardToExecute<md::DetermineIfLegacy>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t ***a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  id *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint8x8_t v21;
  unint64_t v22;
  uint64_t ***v23;
  uint64_t **v24;
  unint64_t v25;
  uint64_t *v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  void *v34[2];
  void *__p[2];
  int v36;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = **a2;
  if (v3 != (*a2)[1] && *v3 != 0xD369A4D92C8FFE6CLL)
  {
    v4 = v3 + 5;
    do
    {
      v5 = *v4;
      v4 += 5;
    }
    while (v5 != 0xD369A4D92C8FFE6CLL);
    v3 = v4 - 5;
  }
  v6 = v3[3];
  v7 = (std::__shared_weak_count *)v3[4];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v11 = (id *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v12 = ***(uint64_t ****)(a1 + 8);
  if (v12 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v12 != 0xD369A4D92C8FFE6CLL)
  {
    v13 = v12 + 5;
    do
    {
      v14 = *v13;
      v13 += 5;
    }
    while (v14 != 0xD369A4D92C8FFE6CLL);
    v12 = v13 - 5;
  }
  v15 = v12[3];
  v16 = (std::__shared_weak_count *)v12[4];
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  *(_OWORD *)v34 = 0u;
  *(_OWORD *)__p = 0u;
  v36 = 1065353216;
  std::__hash_table<md::MapEngineModeType,std::hash<md::MapEngineModeType>,std::equal_to<md::MapEngineModeType>,std::allocator<md::MapEngineModeType>>::__emplace_unique_key_args<md::MapEngineModeType,md::MapEngineModeType const&>((float *)v34, 0x12u, 18);
  std::__hash_table<md::MapEngineModeType,std::hash<md::MapEngineModeType>,std::equal_to<md::MapEngineModeType>,std::allocator<md::MapEngineModeType>>::__emplace_unique_key_args<md::MapEngineModeType,md::MapEngineModeType const&>((float *)v34, 0xEu, 14);
  std::__hash_table<md::MapEngineModeType,std::hash<md::MapEngineModeType>,std::equal_to<md::MapEngineModeType>,std::allocator<md::MapEngineModeType>>::__emplace_unique_key_args<md::MapEngineModeType,md::MapEngineModeType const&>((float *)v34, 0x10u, 16);
  std::__hash_table<md::MapEngineModeType,std::hash<md::MapEngineModeType>,std::equal_to<md::MapEngineModeType>,std::allocator<md::MapEngineModeType>>::__emplace_unique_key_args<md::MapEngineModeType,md::MapEngineModeType const&>((float *)v34, 0xFu, 15);
  std::__hash_table<md::MapEngineModeType,std::hash<md::MapEngineModeType>,std::equal_to<md::MapEngineModeType>,std::allocator<md::MapEngineModeType>>::__emplace_unique_key_args<md::MapEngineModeType,md::MapEngineModeType const&>((float *)v34, 0x11u, 17);
  if (!v34[1])
    goto LABEL_43;
  v21 = (uint8x8_t)vcnt_s8((int8x8_t)v34[1]);
  v21.i16[0] = vaddlv_u8(v21);
  if (v21.u32[0] > 1uLL)
  {
    v22 = v20;
    if (v34[1] <= (void *)v20)
      v22 = v20 % (unint64_t)v34[1];
  }
  else
  {
    v22 = (LODWORD(v34[1]) - 1) & v20;
  }
  v23 = (uint64_t ***)*((_QWORD *)v34[0] + v22);
  if (v23)
  {
    v24 = *v23;
    if (*v23)
    {
      if (v21.u32[0] < 2uLL)
      {
        while (1)
        {
          v26 = v24[1];
          if (v26 == (uint64_t *)v20)
          {
            if (*((unsigned __int8 *)v24 + 16) == v20)
              goto LABEL_44;
          }
          else if (((unint64_t)v26 & ((unint64_t)v34[1] - 1)) != v22)
          {
            goto LABEL_43;
          }
          v24 = (uint64_t **)*v24;
          if (!v24)
            goto LABEL_44;
        }
      }
      do
      {
        v25 = (unint64_t)v24[1];
        if (v25 == v20)
        {
          if (*((unsigned __int8 *)v24 + 16) == v20)
            break;
        }
        else
        {
          if ((void *)v25 >= v34[1])
            v25 %= (unint64_t)v34[1];
          if (v25 != v22)
            goto LABEL_43;
        }
        v24 = (uint64_t **)*v24;
      }
      while (v24);
    }
  }
  else
  {
LABEL_43:
    v24 = 0;
  }
LABEL_44:
  v27 = (*((uint64_t (**)(id *))*v11 + 7))(v11);
  v28 = objc_msgSend(v11[13], "supportsFramebufferFetch") ^ 1;
  if (v24)
    v29 = 0;
  else
    v29 = v27 == 0;
  if (v29)
    v30 = v28;
  else
    v30 = 1;
  if (v30 == 1)
    (*((void (**)(id *))*v11 + 7))(v11);
  ecs2::UtilityContext::toggleTask(*(ecs2::UtilityContext **)(*(_QWORD *)(a1 + 8) + 16), 28850, v30 ^ 1);
  ecs2::UtilityContext::toggleTask(*(ecs2::UtilityContext **)(*(_QWORD *)(a1 + 8) + 16), 13110, v30);
  v31 = __p[0];
  if (__p[0])
  {
    do
    {
      v32 = (_QWORD *)*v31;
      operator delete(v31);
      v31 = v32;
    }
    while (v32);
  }
  v33 = v34[0];
  v34[0] = 0;
  if (v33)
    operator delete(v33);
  *(_QWORD *)(a1 + 8) = 0;
}

void sub_19FEA2460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, _QWORD *__p)
{
  _QWORD *v12;
  _QWORD *v13;

  v12 = __p;
  if (__p)
  {
    do
    {
      v13 = (_QWORD *)*v12;
      operator delete(v12);
      v12 = v13;
    }
    while (v13);
  }
  if (a9)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<md::MapEngineModeType,std::hash<md::MapEngineModeType>,std::equal_to<md::MapEngineModeType>,std::allocator<md::MapEngineModeType>>::__emplace_unique_key_args<md::MapEngineModeType,md::MapEngineModeType const&>(float *a1, unsigned __int8 a2, char a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t ***v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  _QWORD *i;
  size_t v29;
  uint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  size_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == (uint64_t *)a2)
            {
              if (*((unsigned __int8 *)v10 + 16) == a2)
                return;
            }
            else if (((unint64_t)v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (uint64_t **)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = (unint64_t)v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int8 *)v10 + 16) == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x18uLL);
  *v13 = 0;
  v13[1] = v6;
  *((_BYTE *)v13 + 16) = a3;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v7)
    {
      if (prime >= v7)
        goto LABEL_59;
      v31 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (prime <= v31)
        prime = v31;
      if (prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6)
            v3 = v6 % v7;
          else
            v3 = v6;
        }
        else
        {
          v3 = ((_DWORD)v7 - 1) & v6;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v40 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v40)
          operator delete(v40);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v20 = operator new(8 * prime);
    v21 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
    while (prime != v22);
    v24 = (uint64_t *)(a1 + 4);
    v23 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v23)
    {
LABEL_58:
      v7 = prime;
      goto LABEL_59;
    }
    v25 = v23[1];
    v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v27 = v25 & v26;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v24;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v29 = i[1] & v26;
        if (v29 == v27)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
        {
          *v23 = *i;
          v30 = 8 * v29;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v30);
          **(_QWORD **)(*(_QWORD *)a1 + v30) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v23;
          v23 = i;
          v27 = v29;
        }
      }
      goto LABEL_58;
    }
    if (v25 >= prime)
      v25 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v24;
    v34 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_58;
    while (1)
    {
      v36 = v34[1];
      if (v36 >= prime)
        v36 %= prime;
      if (v36 != v25)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v23;
          goto LABEL_63;
        }
        *v23 = *v34;
        v35 = 8 * v36;
        *v34 = **(_QWORD **)(*(_QWORD *)a1 + v35);
        **(_QWORD **)(*(_QWORD *)a1 + v35) = v34;
        v34 = v23;
      }
      v36 = v25;
LABEL_63:
      v23 = v34;
      v34 = (_QWORD *)*v34;
      v25 = v36;
      if (!v34)
        goto LABEL_58;
    }
  }
LABEL_72:
  v37 = *(_QWORD **)a1;
  v38 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v38)
  {
    *v13 = *v38;
LABEL_80:
    *v38 = v13;
    goto LABEL_81;
  }
  *v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v13;
  v37[v3] = a1 + 4;
  if (*v13)
  {
    v39 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v39 >= v7)
        v39 %= v7;
    }
    else
    {
      v39 &= v7 - 1;
    }
    v38 = (_QWORD *)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
}

void sub_19FEA2900(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::PrepareBuildFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::PrepareBuildFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E4284778;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::PrepareBuildFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E4284778;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::PrepareBuildFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::PrepareBuildFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::PrepareBuildFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42847C0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::PrepareBuildFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42847C0;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::PrepareBuildFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::operator()(uint64_t a1@<X8>)
{
  char *v2;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 24;
  _ZN3gdc16forEachInnerTypeINSt3__15tupleIJN2md3ita11FrameHandleEEEEZNS_18typelist_as_vectorIS6_EENS1_6vectorINS_8TypeInfoENS1_9allocatorIS9_EEEEvEUlTyvE_EEvOT0_((char **)a1);
}

void sub_19FEA2A08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareBuildFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareBuildFrameGraph>>,void ()(ecs2::Runtime &)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareBuildFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareBuildFrameGraph>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4276C60;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareBuildFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareBuildFrameGraph>>,void ()(ecs2::Runtime &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E4276C60;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareBuildFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareBuildFrameGraph>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (***v25)(_QWORD);
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t v29;
  md::LayoutContext *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  _DWORD *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  md::LayoutContext *v60;
  _QWORD *v61;
  int8x8_t v62;
  uint8x8_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t (***v77)();
  uint64_t v78;
  _QWORD *v79;
  uint64_t (***v80)();
  uint64_t v81;
  _QWORD *v82;
  uint64_t (***v83)();
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t (***v87)();
  uint64_t v88;
  void *v89;
  int v90;
  int v91;
  void *v92;
  int v93;
  int v94;
  void *v95;
  void *v96;
  _QWORD *v97;
  char *v98;
  uint64_t (***v99)();
  uint64_t v100;
  _QWORD *v101;
  uint64_t (***v102)();
  uint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  uint64_t (***v106)();
  uint64_t v107;
  _QWORD *v108;
  int8x8_t v109;
  uint8x8_t v110;
  unint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  BOOL v119;
  void *v120;
  int v121;
  int v122;
  _QWORD *v123;
  uint64_t (***v124)();
  uint64_t v125;
  _QWORD *v126;
  uint64_t (***v127)();
  uint64_t v128;
  _QWORD *v129;
  uint64_t (***v130)();
  uint64_t v131;
  unsigned int *v132;
  _QWORD *v133;
  unint64_t v134;
  uint64_t (***v135)();
  uint64_t v136;
  _QWORD *v137;
  uint64_t (***v138)();
  uint64_t v139;
  _QWORD *v140;
  uint64_t (***v141)();
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  _QWORD *result;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  unsigned __int8 v156;
  void *v157;
  _BOOL4 v158;
  _QWORD *v159;
  md::LayoutContext *v160;
  char v161;
  uint64_t (**v162)();
  __int128 v163;
  uint64_t (***v164)();
  uint64_t (**v165)();
  __int128 v166;
  uint64_t (***v167)();
  int v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a2;
  v3 = (_QWORD *)gdc::Registry::storage<md::ita::FrameHandle>(*(_QWORD *)(a2 + 8));
  v4 = v3;
  v6 = v3[7];
  v5 = v3[8];
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if ((v8 = *(unsigned int *)(v6 + 4), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 >= v10)
      || (v11 = *(_QWORD *)(v9 + 8 * (v8 >> 7))) == 0
      || (v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 >= v7 >> 3)
      || ((v13 = v6 + 8 * v12, v13 != v5) ? (v14 = *(_DWORD *)(v13 + 4) == (_DWORD)v8) : (v14 = 0), !v14))
    {
      v15 = v7 >> 3;
      v16 = v6 + 8;
      do
      {
        if (v16 == v5)
          goto LABEL_228;
        v17 = *(unsigned int *)(v16 + 4);
        v18 = v3[8];
        if (v17 >> 7 < v10)
        {
          v19 = *(_QWORD *)(v9 + 8 * (v17 >> 7));
          v18 = v3[8];
          if (v19)
          {
            v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
            v18 = v3[8];
            if (v15 > v20)
            {
              v18 = v6 + 8 * v20;
              if (*(_DWORD *)(v18 + 4) != (_DWORD)v17)
                v18 = v3[8];
            }
          }
        }
        v16 += 8;
      }
      while (v18 == v5);
      v6 = v16 - 8;
    }
  }
  if (v5 == v6)
    goto LABEL_228;
  v159 = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v151 = v5;
  v152 = v4;
  while (2)
  {
    *v159 = *(_QWORD *)v6;
    v22 = ***(uint64_t ****)(a1 + 8);
    if (v22 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v22 != 0x22D45F5AAD4BF408)
    {
      v23 = v22 + 5;
      do
      {
        v24 = *v23;
        v23 += 5;
      }
      while (v24 != 0x22D45F5AAD4BF408);
      v22 = v23 - 5;
    }
    v25 = (uint64_t (***)(_QWORD))v22[3];
    v26 = (std::__shared_weak_count *)v22[4];
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(p_shared_owners);
      while (__stxr(v28 + 1, p_shared_owners));
      do
        v29 = __ldaxr(p_shared_owners);
      while (__stlxr(v29 - 1, p_shared_owners));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v30 = (md::LayoutContext *)(**v25)(v25);
    md::LayoutContext::frameState(v30);
    if (*(_BYTE *)(v31 + 117))
      goto LABEL_217;
    v160 = v30;
    v32 = ***(uint64_t ****)(a1 + 8);
    if (v32 != *(uint64_t **)(**(_QWORD **)(a1 + 8) + 8) && *v32 != 0xD369A4D92C8FFE6CLL)
    {
      v33 = v32 + 5;
      do
      {
        v34 = *v33;
        v33 += 5;
      }
      while (v34 != 0xD369A4D92C8FFE6CLL);
      v32 = v33 - 5;
    }
    v35 = v32[3];
    v36 = (std::__shared_weak_count *)v32[4];
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      do
        v39 = __ldaxr(v37);
      while (__stlxr(v39 - 1, v37));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v155 = v6;
    v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
    v41 = *(id *)(v40 + 104);
    v42 = objc_msgSend(v41, "finalRenderTarget");

    v43 = *(_QWORD *)(v40 + 32);
    if (!v42)
      goto LABEL_72;
    v44 = *(_QWORD *)(v42 + 336);
    if (!v44)
    {
      v45 = *(_QWORD *)(v42 + 88);
      if (v45)
      {
        v47 = (_DWORD *)(v42 + 96);
      }
      else
      {
        v45 = *(_QWORD *)(v42 + 280);
        if (!v45)
          goto LABEL_60;
        v47 = (_DWORD *)(v42 + 288);
      }
      v48 = 196;
      if (*(_DWORD *)(v45 + 56) != 3)
        v48 = 84;
      v49 = *(_DWORD *)(v45 + v48);
      v50 = v49 >> *v47;
      if (v50 <= 1)
        v50 = 1;
      if (v49)
        LODWORD(v45) = v50;
      else
        LODWORD(v45) = 0;
LABEL_60:
      v44 = *(_QWORD *)(v42 + 88);
      if (v44)
      {
        v51 = (_DWORD *)(v42 + 96);
      }
      else
      {
        v44 = *(_QWORD *)(v42 + 280);
        if (!v44)
          goto LABEL_71;
        v51 = (_DWORD *)(v42 + 288);
      }
      v52 = 80;
      if (*(_DWORD *)(v44 + 56) == 3)
        v52 = 196;
      v53 = *(_DWORD *)(v44 + v52);
      v54 = v53 >> *v51;
      if (v54 <= 1)
        v54 = 1;
      if (v53)
        LODWORD(v44) = v54;
      else
        LODWORD(v44) = 0;
      goto LABEL_71;
    }
    v46 = v44 + 36;
    LODWORD(v44) = *(_DWORD *)(v44 + 36);
    LODWORD(v45) = *(_DWORD *)(v46 + 4);
LABEL_71:
    *(_DWORD *)(v43 + 40) = v44;
    *(_DWORD *)(v43 + 44) = v45;
    v55 = *(_OWORD *)(v42 + 72);
    *(_OWORD *)(v43 + 48) = *(_OWORD *)(v42 + 56);
    *(_OWORD *)(v43 + 64) = v55;
LABEL_72:
    v56 = operator new();
    *(_OWORD *)v56 = 0u;
    *(_OWORD *)(v56 + 16) = 0u;
    *(_OWORD *)(v56 + 32) = 0u;
    *(_OWORD *)(v56 + 48) = 0u;
    *(_OWORD *)(v56 + 64) = 0u;
    *(_DWORD *)(v56 + 80) = 1065353216;
    *(_OWORD *)(v56 + 88) = 0u;
    *(_OWORD *)(v56 + 104) = 0u;
    *(_DWORD *)(v56 + 120) = 1065353216;
    *(_QWORD *)(v56 + 136) = 0;
    *(_QWORD *)(v56 + 144) = 0;
    *(_QWORD *)(v56 + 128) = 0;
    *(_BYTE *)(v56 + 152) = 0;
    v57 = operator new();
    *(_OWORD *)v57 = 0u;
    *(_OWORD *)(v57 + 16) = 0u;
    *(_OWORD *)(v57 + 32) = 0u;
    *(_OWORD *)(v57 + 48) = 0u;
    *(_OWORD *)(v57 + 64) = 0u;
    *(_OWORD *)(v57 + 80) = 0u;
    md::FrameGraphUtils::prepareGraphBuilderForRenderTarget(v57, v56, (_QWORD *)v42, "renderTarget_colorBuffer", 0xC1B9767C00000018, "renderTarget_depthStencilBuffer", 0xE505BC120000001FLL, v58, "renderTarget_msaaResolveBuffer", 0xF53364270000001ELL);
    v59 = *(id *)(v40 + 104);
    v154 = objc_msgSend(v59, "supportsFramebufferFetch");

    v60 = v160;
    v61 = (_QWORD *)*((_QWORD *)v160 + 1);
    v62 = (int8x8_t)v61[1];
    if (!*(_QWORD *)&v62)
      goto LABEL_97;
    v63 = (uint8x8_t)vcnt_s8(v62);
    v63.i16[0] = vaddlv_u8(v63);
    if (v63.u32[0] > 1uLL)
    {
      v64 = 0x41E8D6E445F4145;
      if (*(_QWORD *)&v62 <= 0x41E8D6E445F4145uLL)
        v64 = 0x41E8D6E445F4145uLL % *(_QWORD *)&v62;
    }
    else
    {
      v64 = (*(_QWORD *)&v62 - 1) & 0x41E8D6E445F4145;
    }
    v65 = *(_QWORD **)(*v61 + 8 * v64);
    if (!v65)
      goto LABEL_97;
    v66 = (_QWORD *)*v65;
    if (!v66)
      goto LABEL_97;
    if (v63.u32[0] < 2uLL)
    {
      v67 = *(_QWORD *)&v62 - 1;
      while (1)
      {
        v69 = v66[1];
        if (v69 == 0x41E8D6E445F4145)
        {
          if (v66[2] == 0x41E8D6E445F4145)
            goto LABEL_93;
        }
        else if ((v69 & v67) != v64)
        {
          goto LABEL_97;
        }
        v66 = (_QWORD *)*v66;
        if (!v66)
          goto LABEL_97;
      }
    }
    while (1)
    {
      v68 = v66[1];
      if (v68 == 0x41E8D6E445F4145)
        break;
      if (v68 >= *(_QWORD *)&v62)
        v68 %= *(_QWORD *)&v62;
      if (v68 != v64)
        goto LABEL_97;
LABEL_82:
      v66 = (_QWORD *)*v66;
      if (!v66)
        goto LABEL_97;
    }
    if (v66[2] != 0x41E8D6E445F4145)
      goto LABEL_82;
LABEL_93:
    v70 = v66[5];
    if (*(_QWORD *)(v70 + 8) != 0x41E8D6E445F4145 || (v71 = *(unsigned __int8 **)(v70 + 32)) == 0)
    {
LABEL_97:
      v153 = 0;
      v72 = 0;
      v156 = 0;
      v158 = 0;
      goto LABEL_98;
    }
    v156 = v71[227];
    if (v71[224])
    {
      +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
      v157 = (void *)objc_claimAutoreleasedReturnValue();
      v72 = objc_msgSend(v157, "enableDOF");

      v153 = v71[224];
      v60 = v160;
    }
    else
    {
      v153 = 0;
      v72 = 0;
    }
    v158 = v71[225] != 0;
LABEL_98:
    v73 = *(_QWORD *)(v43 + 128);
    md::LayoutContext::frameState(v60);
    *(_QWORD *)(v43 + 128) = (unint64_t)(*(double *)(v74 + 88) * 1000.0);
    v75 = gdc::Registry::create(*(gdc::Registry **)(*(_QWORD *)(a1 + 8) + 8));
    v76 = *(_QWORD **)(a1 + 8);
    v162 = &off_1E427F5E8;
    *(_QWORD *)&v163 = v73;
    *((_QWORD *)&v163 + 1) = v75;
    v164 = &v162;
    v167 = &v165;
    v165 = &off_1E427F5E8;
    v166 = v163;
    v168 = 0;
    ecs2::Runtime::queueCommand(v76, (uint64_t)&v165);
    if (v168 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v168])(&v161, &v165);
    v168 = -1;
    v77 = v164;
    if (v164 == &v162)
    {
      v77 = &v162;
      v78 = 4;
LABEL_104:
      (*v77)[v78]();
    }
    else if (v164)
    {
      v78 = 5;
      goto LABEL_104;
    }
    v79 = *(_QWORD **)(a1 + 8);
    v162 = &off_1E427E988;
    *(_QWORD *)&v163 = v56;
    *((_QWORD *)&v163 + 1) = v75;
    v164 = &v162;
    v167 = &v165;
    v165 = &off_1E427E988;
    v166 = v163;
    v168 = 0;
    ecs2::Runtime::queueCommand(v79, (uint64_t)&v165);
    if (v168 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v168])(&v161, &v165);
    v168 = -1;
    v80 = v164;
    if (v164 == &v162)
    {
      v80 = &v162;
      v81 = 4;
LABEL_111:
      (*v80)[v81]();
    }
    else if (v164)
    {
      v81 = 5;
      goto LABEL_111;
    }
    v82 = *(_QWORD **)(a1 + 8);
    v162 = &off_1E427F750;
    *(_QWORD *)&v163 = v57;
    *((_QWORD *)&v163 + 1) = v75;
    v164 = &v162;
    v167 = &v165;
    v165 = &off_1E427F750;
    v166 = v163;
    v168 = 0;
    ecs2::Runtime::queueCommand(v82, (uint64_t)&v165);
    if (v168 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v168])(&v161, &v165);
    v168 = -1;
    v83 = v164;
    if (v164 == &v162)
    {
      v83 = &v162;
      v84 = 4;
LABEL_118:
      (*v83)[v84]();
    }
    else if (v164)
    {
      v84 = 5;
      goto LABEL_118;
    }
    v85 = *(_QWORD *)(v40 + 32);
    v86 = *(_QWORD **)(a1 + 8);
    v162 = &off_1E4281AC0;
    *(_QWORD *)&v163 = v85;
    *((_QWORD *)&v163 + 1) = v75;
    v164 = &v162;
    v167 = &v165;
    v165 = &off_1E4281AC0;
    v166 = v163;
    v168 = 0;
    ecs2::Runtime::queueCommand(v86, (uint64_t)&v165);
    if (v168 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v168])(&v161, &v165);
    v168 = -1;
    v87 = v164;
    if (v164 == &v162)
    {
      v87 = &v162;
      v88 = 4;
LABEL_125:
      (*v87)[v88]();
    }
    else if (v164)
    {
      v88 = 5;
      goto LABEL_125;
    }
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v89, "daVinciSSAODepthTextureScale");
    v91 = v90;

    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v92, "daVinciSSAOTextureScale");
    v94 = v93;

    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v92) = objc_msgSend(v95, "daVinciSSAODepthAwareUpsampleEnabled");

    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v95) = objc_msgSend(v96, "daVinciSSAOEnableBlur");

    v97 = *(_QWORD **)(a1 + 8);
    v98 = (char *)operator new(0x20uLL);
    *(_QWORD *)v98 = &off_1E427F558;
    *((_DWORD *)v98 + 2) = v91;
    *((_DWORD *)v98 + 3) = v94;
    v98[16] = (char)v92;
    v98[17] = (char)v95;
    v98[18] = v156;
    *(_QWORD *)(v98 + 20) = v75;
    v167 = (uint64_t (***)())v98;
    v164 = 0;
    v168 = 0;
    ecs2::Runtime::queueCommand(v97, (uint64_t)&v165);
    if (v168 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v168])(&v161, &v165);
    v168 = -1;
    v99 = v164;
    if (v164 == &v162)
    {
      v99 = &v162;
      v100 = 4;
LABEL_132:
      (*v99)[v100]();
    }
    else if (v164)
    {
      v100 = 5;
      goto LABEL_132;
    }
    v101 = *(_QWORD **)(a1 + 8);
    v162 = &off_1E427F090;
    *(_QWORD *)&v163 = v72 | ((unint64_t)v75 << 32);
    DWORD2(v163) = HIDWORD(v75);
    v164 = &v162;
    v165 = &off_1E427F090;
    v167 = &v165;
    *(_QWORD *)&v166 = v163;
    DWORD2(v166) = HIDWORD(v75);
    v168 = 0;
    ecs2::Runtime::queueCommand(v101, (uint64_t)&v165);
    if (v168 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v168])(&v161, &v165);
    v168 = -1;
    v102 = v164;
    if (v164 == &v162)
    {
      v102 = &v162;
      v103 = 4;
LABEL_139:
      (*v102)[v103]();
    }
    else if (v164)
    {
      v103 = 5;
      goto LABEL_139;
    }
    v104 = v75 << 32;
    if (v158)
    {
      v105 = *(_QWORD **)(a1 + 8);
      v162 = &off_1E427FB40;
      *(_QWORD *)&v163 = v104 | 1;
      DWORD2(v163) = HIDWORD(v75);
      v164 = &v162;
      v165 = &off_1E427FB40;
      v167 = &v165;
      *(_QWORD *)&v166 = v104 | 1;
      DWORD2(v166) = HIDWORD(v75);
      v168 = 0;
      ecs2::Runtime::queueCommand(v105, (uint64_t)&v165);
      if (v168 != -1)
        ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v168])(&v161, &v165);
      v168 = -1;
      v106 = v164;
      if (v164 == &v162)
      {
        v106 = &v162;
        v107 = 4;
LABEL_147:
        (*v106)[v107]();
      }
      else if (v164)
      {
        v107 = 5;
        goto LABEL_147;
      }
    }
    v108 = (_QWORD *)*((_QWORD *)v160 + 1);
    v109 = (int8x8_t)v108[1];
    if (!*(_QWORD *)&v109)
      goto LABEL_172;
    v110 = (uint8x8_t)vcnt_s8(v109);
    v110.i16[0] = vaddlv_u8(v110);
    if (v110.u32[0] > 1uLL)
    {
      v111 = 0xDFC317497CF9A4BFLL;
      if (*(_QWORD *)&v109 <= 0xDFC317497CF9A4BFLL)
        v111 = 0xDFC317497CF9A4BFLL % *(_QWORD *)&v109;
    }
    else
    {
      v111 = (*(_QWORD *)&v109 - 1) & 0xDFC317497CF9A4BFLL;
    }
    v112 = *(_QWORD **)(*v108 + 8 * v111);
    if (!v112)
      goto LABEL_172;
    v113 = (_QWORD *)*v112;
    if (!v113)
      goto LABEL_172;
    if (v110.u32[0] < 2uLL)
    {
      v114 = *(_QWORD *)&v109 - 1;
      while (1)
      {
        v116 = v113[1];
        if (v116 == 0xDFC317497CF9A4BFLL)
        {
          if (v113[2] == 0xDFC317497CF9A4BFLL)
            goto LABEL_169;
        }
        else if ((v116 & v114) != v111)
        {
          goto LABEL_172;
        }
        v113 = (_QWORD *)*v113;
        if (!v113)
          goto LABEL_172;
      }
    }
    while (2)
    {
      v115 = v113[1];
      if (v115 != 0xDFC317497CF9A4BFLL)
      {
        if (v115 >= *(_QWORD *)&v109)
          v115 %= *(_QWORD *)&v109;
        if (v115 != v111)
          goto LABEL_172;
        goto LABEL_158;
      }
      if (v113[2] != 0xDFC317497CF9A4BFLL)
      {
LABEL_158:
        v113 = (_QWORD *)*v113;
        if (!v113)
          goto LABEL_172;
        continue;
      }
      break;
    }
LABEL_169:
    v117 = v113[5];
    if (*(_QWORD *)(v117 + 8) == 0xDFC317497CF9A4BFLL)
    {
      v118 = *(_QWORD *)(v117 + 32);
      if (v118)
      {
        v119 = *(_BYTE *)(v118 + 64) != 0;
        goto LABEL_173;
      }
    }
LABEL_172:
    v119 = 0;
LABEL_173:
    +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
    v120 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v120, "daVinciRouteLineMaskScale");
    v122 = v121;

    v123 = *(_QWORD **)(a1 + 8);
    v162 = &off_1E42817A8;
    LODWORD(v163) = v122;
    BYTE4(v163) = v119;
    *((_QWORD *)&v163 + 1) = v75;
    v164 = &v162;
    v167 = &v165;
    v165 = &off_1E42817A8;
    v166 = v163;
    v168 = 0;
    ecs2::Runtime::queueCommand(v123, (uint64_t)&v165);
    if (v168 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v168])(&v161, &v165);
    v168 = -1;
    v124 = v164;
    v6 = v155;
    if (v164 == &v162)
    {
      v124 = &v162;
      v125 = 4;
LABEL_179:
      (*v124)[v125]();
    }
    else if (v164)
    {
      v125 = 5;
      goto LABEL_179;
    }
    v126 = *(_QWORD **)(a1 + 8);
    v162 = &off_1E427F948;
    *(_QWORD *)&v163 = v104 | v154;
    DWORD2(v163) = HIDWORD(v75);
    v164 = &v162;
    v165 = &off_1E427F948;
    v167 = &v165;
    *(_QWORD *)&v166 = v163;
    DWORD2(v166) = HIDWORD(v75);
    v168 = 0;
    ecs2::Runtime::queueCommand(v126, (uint64_t)&v165);
    if (v168 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v168])(&v161, &v165);
    v168 = -1;
    v127 = v164;
    if (v164 == &v162)
    {
      v127 = &v162;
      v128 = 4;
LABEL_186:
      (*v127)[v128]();
    }
    else if (v164)
    {
      v128 = 5;
      goto LABEL_186;
    }
    v129 = *(_QWORD **)(a1 + 8);
    v162 = &off_1E42803B0;
    *(_QWORD *)&v163 = v104 | v153;
    DWORD2(v163) = HIDWORD(v75);
    v164 = &v162;
    v165 = &off_1E42803B0;
    v167 = &v165;
    *(_QWORD *)&v166 = v104 | v153;
    DWORD2(v166) = HIDWORD(v75);
    v168 = 0;
    ecs2::Runtime::queueCommand(v129, (uint64_t)&v165);
    if (v168 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v168])(&v161, &v165);
    v168 = -1;
    v130 = v164;
    if (v164 == &v162)
    {
      v130 = &v162;
      v131 = 4;
LABEL_193:
      (*v130)[v131]();
    }
    else if (v164)
    {
      v131 = 5;
      goto LABEL_193;
    }
    v132 = (unsigned int *)&md::FrameGraphRenderTarget::size(void)const::fallback;
    if (*(_BYTE *)(v57 + 72))
      v132 = (unsigned int *)(v57 + 76);
    v133 = *(_QWORD **)(a1 + 8);
    v134 = v132[1] | ((unint64_t)v132[3] << 32);
    v162 = &off_1E427E1A8;
    *(_QWORD *)&v163 = v134;
    *((_QWORD *)&v163 + 1) = v75;
    v164 = &v162;
    v167 = &v165;
    v165 = &off_1E427E1A8;
    v166 = v163;
    v168 = 0;
    ecs2::Runtime::queueCommand(v133, (uint64_t)&v165);
    if (v168 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v168])(&v161, &v165);
    v168 = -1;
    v135 = v164;
    v5 = v151;
    if (v164 == &v162)
    {
      v135 = &v162;
      v136 = 4;
LABEL_202:
      (*v135)[v136]();
    }
    else if (v164)
    {
      v136 = 5;
      goto LABEL_202;
    }
    v137 = *(_QWORD **)(a1 + 8);
    v162 = &off_1E4281EF8;
    *(_QWORD *)&v163 = v75 << 32;
    DWORD2(v163) = HIDWORD(v75);
    v164 = &v162;
    v165 = &off_1E4281EF8;
    v167 = &v165;
    *(_QWORD *)&v166 = v75 << 32;
    DWORD2(v166) = HIDWORD(v75);
    v168 = 0;
    ecs2::Runtime::queueCommand(v137, (uint64_t)&v165);
    if (v168 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v168])(&v161, &v165);
    v168 = -1;
    v138 = v164;
    if (v164 == &v162)
    {
      v138 = &v162;
      v139 = 4;
LABEL_209:
      (*v138)[v139]();
    }
    else if (v164)
    {
      v139 = 5;
      goto LABEL_209;
    }
    v140 = *(_QWORD **)(a1 + 8);
    v162 = &off_1E427FA20;
    *(_QWORD *)&v163 = v75 << 32;
    DWORD2(v163) = HIDWORD(v75);
    v164 = &v162;
    v165 = &off_1E427FA20;
    v167 = &v165;
    *(_QWORD *)&v166 = v75 << 32;
    DWORD2(v166) = HIDWORD(v75);
    v168 = 0;
    ecs2::Runtime::queueCommand(v140, (uint64_t)&v165);
    if (v168 != -1)
      ((void (*)(char *, uint64_t (***)()))off_1E42FB340[v168])(&v161, &v165);
    v168 = -1;
    v141 = v164;
    v4 = v152;
    if (v164 == &v162)
    {
      v141 = &v162;
      v142 = 4;
LABEL_216:
      (*v141)[v142]();
    }
    else if (v164)
    {
      v142 = 5;
      goto LABEL_216;
    }
LABEL_217:
    v143 = v4[4];
    v144 = v4[7];
    v21 = v4[8];
    v145 = v6 + 8;
    while (v145 != v21)
    {
      v146 = *(unsigned int *)(v145 + 4);
      v147 = v4[8];
      if (v146 >> 7 < (v4[5] - v143) >> 3)
      {
        v148 = *(_QWORD *)(v143 + 8 * (v146 >> 7));
        v147 = v4[8];
        if (v148)
        {
          v149 = *(unsigned __int16 *)(v148 + 2 * (v146 & 0x7F));
          v147 = v4[8];
          if ((v21 - v144) >> 3 > v149)
          {
            v147 = v144 + 8 * v149;
            if (*(_DWORD *)(v147 + 4) != (_DWORD)v146)
              v147 = v4[8];
          }
        }
      }
      v145 += 8;
      if (v147 != v21)
      {
        v21 = v145 - 8;
        break;
      }
    }
    v6 = v21;
    if (v5 != v21)
      continue;
    break;
  }
LABEL_228:
  result = (_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *result = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_19FEA3B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{

  _Unwind_Resume(a1);
}

void sub_19FEA3BA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresStencilReserve>(gdc::Entity,md::ls::RequiresStencilReserve &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresStencilReserve>(gdc::Entity,md::ls::RequiresStencilReserve &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427FA20;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresStencilReserve>(gdc::Entity,md::ls::RequiresStencilReserve &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427FA20;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresStencilReserve>(gdc::Entity,md::ls::RequiresStencilReserve &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int8x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = *(_QWORD *)(a1 + 12);
  v38 = 0x7F7146BC12E4A905;
  v4 = (uint64_t *)(a2 + 120);
  v5 = *(int8x8_t *)(a2 + 128);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = 0x7F7146BC12E4A905;
      if (*(_QWORD *)&v5 <= 0x7F7146BC12E4A905uLL)
        v7 = 0x7F7146BC12E4A905uLL % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & 0x7F7146BC12E4A905;
    }
    v8 = *(_QWORD **)(*v4 + 8 * v7);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == 0x7F7146BC12E4A905)
            {
              if (v9[2] == 0x7F7146BC12E4A905)
                goto LABEL_50;
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_21;
            }
            v9 = (_QWORD *)*v9;
            if (!v9)
              goto LABEL_21;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == 0x7F7146BC12E4A905)
          {
            if (v9[2] == 0x7F7146BC12E4A905)
            {
LABEL_50:
              v13 = v9[3];
              goto LABEL_24;
            }
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_21:
  v13 = operator new();
  *(_QWORD *)(v13 + 16) = "md::ls::RequiresStencilReserve]";
  *(_QWORD *)(v13 + 24) = 30;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_DWORD *)(v13 + 144) = 1065353216;
  *(_OWORD *)(v13 + 152) = 0u;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_QWORD *)(v13 + 184) = 0;
  *(_DWORD *)(v13 + 192) = 1065353216;
  *(_OWORD *)(v13 + 200) = 0u;
  *(_OWORD *)(v13 + 216) = 0u;
  *(_QWORD *)(v13 + 232) = 0;
  *(_DWORD *)(v13 + 240) = 1065353216;
  *(_QWORD *)v13 = &off_1E42B3C18;
  *(_QWORD *)(v13 + 8) = 0x7F7146BC12E4A905;
  *(_QWORD *)(v13 + 248) = a2;
  v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4, 0x7F7146BC12E4A905uLL, &v38);
  v15 = v14[3];
  v14[3] = v13;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v34 = 0x7F7146BC12E4A905;
  v35 = (uint64_t)"md::ls::RequiresStencilReserve]";
  v36 = 30;
  gdc::Registry::_registerStorageDataSignals(a2, 0x7F7146BC12E4A905, (uint64_t)&v34, (uint64_t *)(v13 + 104));
LABEL_24:
  v37 = v3;
  v16 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v13 + 32), (uint64_t)&v37);
  if ((v17 & 1) != 0)
  {
    v22 = *(_BYTE **)(v13 + 88);
    v21 = *(_QWORD *)(v13 + 96);
    if ((unint64_t)v22 >= v21)
    {
      v24 = *(char **)(v13 + 80);
      v25 = v22 - v24;
      v26 = v22 - v24 + 1;
      if (v26 < 0)
        goto LABEL_52;
      v27 = v21 - (_QWORD)v24;
      if (2 * v27 > v26)
        v26 = 2 * v27;
      if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
        v28 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
        v29 = (char *)operator new(v28);
      else
        v29 = 0;
      v30 = &v29[v28];
      v23 = (uint64_t)&v29[v25 + 1];
      v31 = (char *)(v24 - v22);
      if (v24 == v22)
        v31 = 0;
      *(_QWORD *)(v13 + 80) = &v29[v25 + (_QWORD)v31];
      *(_QWORD *)(v13 + 88) = v23;
      *(_QWORD *)(v13 + 96) = v30;
      if (v24)
        operator delete(v24);
    }
    else
    {
      v23 = (uint64_t)(v22 + 1);
    }
    *(_QWORD *)(v13 + 88) = v23;
    v18 = *(_QWORD *)(v13 + 248);
  }
  else
  {
    v18 = *(_QWORD *)(v13 + 248);
    if (*(_QWORD *)(v13 + 80) + (((uint64_t)v16 - *(_QWORD *)(v13 + 56)) >> 3) != *(_QWORD *)(v13 + 88))
    {
      v19 = *(_QWORD **)(v13 + 128);
      if (v19)
      {
        while (1)
        {
          v34 = (uint64_t)&v37;
          v35 = 1;
          v38 = v18;
          v20 = v19[6];
          if (!v20)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v38, &v34);
          v19 = (_QWORD *)*v19;
          if (!v19)
            return;
        }
LABEL_51:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_52:
        abort();
      }
      return;
    }
  }
  v32 = *(_QWORD **)(v13 + 176);
  if (v32)
  {
    while (1)
    {
      v34 = (uint64_t)&v37;
      v35 = 1;
      v38 = v18;
      v33 = v32[6];
      if (!v33)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v38, &v34);
      v32 = (_QWORD *)*v32;
      if (!v32)
        return;
    }
    goto LABEL_51;
  }
}

void sub_19FEA3FD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::RequiresStencilReserve>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresStencilReserve>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v19 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  --a1[11];
  v14 = (_QWORD *)a1[28];
  if (!v14)
    return 1;
  v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    v20 = v15;
    v16 = v14[6];
    if (!v16)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v16 + 48))(v16, &v20, v21);
    v14 = (_QWORD *)*v14;
    if (!v14)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresStencilReserve>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresStencilReserve>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassCount>(gdc::Entity,md::ls::PassCount &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassCount>(gdc::Entity,md::ls::PassCount &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E4281EF8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassCount>(gdc::Entity,md::ls::PassCount &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E4281EF8;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassCount>(gdc::Entity,md::ls::PassCount &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  _QWORD *v6;
  char v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _DWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::PassCount>(a2);
  v5 = *(_DWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 2;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 62)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(4 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[4 * v16];
      v22 = &v20[4 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 4;
        if (v23 < 0x2C)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 2) + 1;
        v25 = &v20[4 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_DWORD *)v13 = v5;
      v14 = v13 + 4;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_DWORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 1));
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_DWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameBufferDesc>(gdc::Entity,md::ls::FrameBufferDesc &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameBufferDesc>(gdc::Entity,md::ls::FrameBufferDesc &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427E1A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameBufferDesc>(gdc::Entity,md::ls::FrameBufferDesc &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427E1A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameBufferDesc>(gdc::Entity,md::ls::FrameBufferDesc &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::FrameBufferDesc>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassMapEngineCapabilities>(gdc::Entity,md::ls::PassMapEngineCapabilities &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassMapEngineCapabilities>(gdc::Entity,md::ls::PassMapEngineCapabilities &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42803B0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassMapEngineCapabilities>(gdc::Entity,md::ls::PassMapEngineCapabilities &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E42803B0;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassMapEngineCapabilities>(gdc::Entity,md::ls::PassMapEngineCapabilities &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  char v5;
  _QWORD *v6;
  char v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  __int128 *v24;
  char *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::PassMapEngineCapabilities>(a2);
  v5 = *(_BYTE *)(a1 + 8);
  v36 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if ((v7 & 1) != 0)
  {
    v13 = (_BYTE *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      *v13 = v5;
      v14 = (uint64_t)(v13 + 1);
LABEL_37:
      v4[11] = v14;
      v9 = v4[31];
      goto LABEL_38;
    }
    v15 = (_BYTE *)v4[10];
    v16 = v13 - v15;
    v17 = v13 - v15 + 1;
    if (v17 < 0)
      goto LABEL_43;
    v18 = v12 - (_QWORD)v15;
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = (char *)operator new(v19);
    else
      v20 = 0;
    v21 = &v20[v16];
    v22 = &v20[v19];
    v20[v16] = v5;
    v14 = (uint64_t)&v20[v16 + 1];
    if (v13 == v15)
    {
LABEL_35:
      v4[10] = (uint64_t)v21;
      v4[11] = v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
      goto LABEL_37;
    }
    if (v16 < 8 || (unint64_t)(v15 - v20) < 0x20)
      goto LABEL_32;
    if (v16 >= 0x20)
    {
      v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      v24 = (__int128 *)(v13 - 16);
      v25 = &v20[v13 - 16 - v15];
      v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v27 = *v24;
        *((_OWORD *)v25 - 1) = *(v24 - 1);
        *(_OWORD *)v25 = v27;
        v25 -= 32;
        v24 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23)
        goto LABEL_34;
      if ((v16 & 0x18) == 0)
      {
        v21 -= v23;
        v13 -= v23;
        goto LABEL_32;
      }
    }
    else
    {
      v23 = 0;
    }
    v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
    v29 = &v13[-v23 - 8];
    v30 = v29 - v15;
    do
    {
      v31 = *(_QWORD *)v29;
      v29 -= 8;
      *(_QWORD *)&v20[v30] = v31;
      v30 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_34;
    v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    v32 = v21 - 1;
    do
    {
      v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
LABEL_34:
    v21 = v20;
    goto LABEL_35;
  }
  v8 = (_BYTE *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *v8 = v5;
  v9 = v4[31];
  if (v8 != (_BYTE *)v4[11])
  {
    v10 = (_QWORD *)v4[16];
    if (v10)
    {
      while (1)
      {
        v38 = &v36;
        v39 = 1;
        v37 = v9;
        v11 = v10[6];
        if (!v11)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v37, &v38);
        v10 = (_QWORD *)*v10;
        if (!v10)
          return;
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  v34 = (_QWORD *)v4[22];
  if (v34)
  {
    while (1)
    {
      v38 = &v36;
      v39 = 1;
      v37 = v9;
      v35 = v34[6];
      if (!v35)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v35 + 48))(v35, &v37, &v38);
      v34 = (_QWORD *)*v34;
      if (!v34)
        return;
    }
    goto LABEL_42;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassDeviceCapabilities>(gdc::Entity,md::ls::PassDeviceCapabilities &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassDeviceCapabilities>(gdc::Entity,md::ls::PassDeviceCapabilities &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427F948;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassDeviceCapabilities>(gdc::Entity,md::ls::PassDeviceCapabilities &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427F948;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassDeviceCapabilities>(gdc::Entity,md::ls::PassDeviceCapabilities &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  char v5;
  _QWORD *v6;
  char v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  __int128 *v24;
  char *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::PassDeviceCapabilities>(a2);
  v5 = *(_BYTE *)(a1 + 8);
  v36 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if ((v7 & 1) != 0)
  {
    v13 = (_BYTE *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      *v13 = v5;
      v14 = (uint64_t)(v13 + 1);
LABEL_37:
      v4[11] = v14;
      v9 = v4[31];
      goto LABEL_38;
    }
    v15 = (_BYTE *)v4[10];
    v16 = v13 - v15;
    v17 = v13 - v15 + 1;
    if (v17 < 0)
      goto LABEL_43;
    v18 = v12 - (_QWORD)v15;
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = (char *)operator new(v19);
    else
      v20 = 0;
    v21 = &v20[v16];
    v22 = &v20[v19];
    v20[v16] = v5;
    v14 = (uint64_t)&v20[v16 + 1];
    if (v13 == v15)
    {
LABEL_35:
      v4[10] = (uint64_t)v21;
      v4[11] = v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
      goto LABEL_37;
    }
    if (v16 < 8 || (unint64_t)(v15 - v20) < 0x20)
      goto LABEL_32;
    if (v16 >= 0x20)
    {
      v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      v24 = (__int128 *)(v13 - 16);
      v25 = &v20[v13 - 16 - v15];
      v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v27 = *v24;
        *((_OWORD *)v25 - 1) = *(v24 - 1);
        *(_OWORD *)v25 = v27;
        v25 -= 32;
        v24 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23)
        goto LABEL_34;
      if ((v16 & 0x18) == 0)
      {
        v21 -= v23;
        v13 -= v23;
        goto LABEL_32;
      }
    }
    else
    {
      v23 = 0;
    }
    v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
    v29 = &v13[-v23 - 8];
    v30 = v29 - v15;
    do
    {
      v31 = *(_QWORD *)v29;
      v29 -= 8;
      *(_QWORD *)&v20[v30] = v31;
      v30 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_34;
    v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    v32 = v21 - 1;
    do
    {
      v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
LABEL_34:
    v21 = v20;
    goto LABEL_35;
  }
  v8 = (_BYTE *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *v8 = v5;
  v9 = v4[31];
  if (v8 != (_BYTE *)v4[11])
  {
    v10 = (_QWORD *)v4[16];
    if (v10)
    {
      while (1)
      {
        v38 = &v36;
        v39 = 1;
        v37 = v9;
        v11 = v10[6];
        if (!v11)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v37, &v38);
        v10 = (_QWORD *)*v10;
        if (!v10)
          return;
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  v34 = (_QWORD *)v4[22];
  if (v34)
  {
    while (1)
    {
      v38 = &v36;
      v39 = 1;
      v37 = v9;
      v35 = v34[6];
      if (!v35)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v35 + 48))(v35, &v37, &v38);
      v34 = (_QWORD *)*v34;
      if (!v34)
        return;
    }
    goto LABEL_42;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassRoutelineMaskConfiguration>(gdc::Entity,md::ls::PassRoutelineMaskConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassRoutelineMaskConfiguration>(gdc::Entity,md::ls::PassRoutelineMaskConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42817A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassRoutelineMaskConfiguration>(gdc::Entity,md::ls::PassRoutelineMaskConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42817A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassRoutelineMaskConfiguration>(gdc::Entity,md::ls::PassRoutelineMaskConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::PassRoutelineMaskConfiguration>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassShadowConfiguration>(gdc::Entity,md::ls::PassShadowConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassShadowConfiguration>(gdc::Entity,md::ls::PassShadowConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427FB40;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassShadowConfiguration>(gdc::Entity,md::ls::PassShadowConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427FB40;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassShadowConfiguration>(gdc::Entity,md::ls::PassShadowConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  char v5;
  _QWORD *v6;
  char v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  __int128 *v24;
  char *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v3 = *(_QWORD *)(a1 + 12);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::PassShadowConfiguration>(a2);
  v5 = *(_BYTE *)(a1 + 8);
  v36 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if ((v7 & 1) != 0)
  {
    v13 = (_BYTE *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      *v13 = v5;
      v14 = (uint64_t)(v13 + 1);
LABEL_37:
      v4[11] = v14;
      v9 = v4[31];
      goto LABEL_38;
    }
    v15 = (_BYTE *)v4[10];
    v16 = v13 - v15;
    v17 = v13 - v15 + 1;
    if (v17 < 0)
      goto LABEL_43;
    v18 = v12 - (_QWORD)v15;
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = (char *)operator new(v19);
    else
      v20 = 0;
    v21 = &v20[v16];
    v22 = &v20[v19];
    v20[v16] = v5;
    v14 = (uint64_t)&v20[v16 + 1];
    if (v13 == v15)
    {
LABEL_35:
      v4[10] = (uint64_t)v21;
      v4[11] = v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
      goto LABEL_37;
    }
    if (v16 < 8 || (unint64_t)(v15 - v20) < 0x20)
      goto LABEL_32;
    if (v16 >= 0x20)
    {
      v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      v24 = (__int128 *)(v13 - 16);
      v25 = &v20[v13 - 16 - v15];
      v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v27 = *v24;
        *((_OWORD *)v25 - 1) = *(v24 - 1);
        *(_OWORD *)v25 = v27;
        v25 -= 32;
        v24 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23)
        goto LABEL_34;
      if ((v16 & 0x18) == 0)
      {
        v21 -= v23;
        v13 -= v23;
        goto LABEL_32;
      }
    }
    else
    {
      v23 = 0;
    }
    v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
    v29 = &v13[-v23 - 8];
    v30 = v29 - v15;
    do
    {
      v31 = *(_QWORD *)v29;
      v29 -= 8;
      *(_QWORD *)&v20[v30] = v31;
      v30 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_34;
    v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    v32 = v21 - 1;
    do
    {
      v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
LABEL_34:
    v21 = v20;
    goto LABEL_35;
  }
  v8 = (_BYTE *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *v8 = v5;
  v9 = v4[31];
  if (v8 != (_BYTE *)v4[11])
  {
    v10 = (_QWORD *)v4[16];
    if (v10)
    {
      while (1)
      {
        v38 = &v36;
        v39 = 1;
        v37 = v9;
        v11 = v10[6];
        if (!v11)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v37, &v38);
        v10 = (_QWORD *)*v10;
        if (!v10)
          return;
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  v34 = (_QWORD *)v4[22];
  if (v34)
  {
    while (1)
    {
      v38 = &v36;
      v39 = 1;
      v37 = v9;
      v35 = v34[6];
      if (!v35)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v35 + 48))(v35, &v37, &v38);
      v34 = (_QWORD *)*v34;
      if (!v34)
        return;
    }
    goto LABEL_42;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassDOFConfiguration>(gdc::Entity,md::ls::PassDOFConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassDOFConfiguration>(gdc::Entity,md::ls::PassDOFConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x18uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E427F090;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassDOFConfiguration>(gdc::Entity,md::ls::PassDOFConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)a2 = &off_1E427F090;
  v2 = *(_QWORD *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassDOFConfiguration>(gdc::Entity,md::ls::PassDOFConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  char v19;
  _BYTE *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  size_t v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  __int128 *v36;
  char *v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  char *v41;
  int64_t v42;
  uint64_t v43;
  char *v44;
  char v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;

  v4 = *(_QWORD *)(a1 + 12);
  v52 = 0x860C7F11DE38DFC9;
  v5 = (uint64_t *)(a2 + 120);
  v6 = *(int8x8_t *)(a2 + 128);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8(v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = 0x860C7F11DE38DFC9;
      if (*(_QWORD *)&v6 <= 0x860C7F11DE38DFC9)
        v8 = 0x860C7F11DE38DFC9 % *(_QWORD *)&v6;
    }
    else
    {
      v8 = (*(_QWORD *)&v6 - 1) & 0x860C7F11DE38DFC9;
    }
    v9 = *(_QWORD **)(*v5 + 8 * v8);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v7.u32[0] < 2uLL)
        {
          v11 = *(_QWORD *)&v6 - 1;
          while (1)
          {
            v13 = v10[1];
            if (v13 == 0x860C7F11DE38DFC9)
            {
              if (v10[2] == 0x860C7F11DE38DFC9)
                goto LABEL_46;
            }
            else if ((v13 & v11) != v8)
            {
              goto LABEL_21;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_21;
          }
        }
        do
        {
          v12 = v10[1];
          if (v12 == 0x860C7F11DE38DFC9)
          {
            if (v10[2] == 0x860C7F11DE38DFC9)
            {
LABEL_46:
              v14 = v10[3];
              goto LABEL_24;
            }
          }
          else
          {
            if (v12 >= *(_QWORD *)&v6)
              v12 %= *(_QWORD *)&v6;
            if (v12 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_21:
  v14 = operator new();
  *(_QWORD *)(v14 + 16) = "md::ls::PassDOFConfiguration]";
  *(_QWORD *)(v14 + 24) = 28;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_DWORD *)(v14 + 144) = 1065353216;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_QWORD *)(v14 + 184) = 0;
  *(_DWORD *)(v14 + 192) = 1065353216;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_QWORD *)(v14 + 232) = 0;
  *(_DWORD *)(v14 + 240) = 1065353216;
  *(_QWORD *)v14 = &off_1E42B3A68;
  *(_QWORD *)(v14 + 8) = 0x860C7F11DE38DFC9;
  *(_QWORD *)(v14 + 248) = a2;
  v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v5, 0x860C7F11DE38DFC9, &v52);
  v16 = v15[3];
  v15[3] = v14;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v48 = (uint64_t *)0x860C7F11DE38DFC9;
  v49 = (uint64_t)"md::ls::PassDOFConfiguration]";
  v50 = 28;
  gdc::Registry::_registerStorageDataSignals(a2, 0x860C7F11DE38DFC9, (uint64_t)&v48, (uint64_t *)(v14 + 104));
LABEL_24:
  v17 = *(_BYTE *)(a1 + 8);
  v51 = v4;
  v18 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v14 + 32), (uint64_t)&v51);
  if ((v19 & 1) != 0)
  {
    v25 = *(_BYTE **)(v14 + 88);
    v24 = *(_QWORD *)(v14 + 96);
    if ((unint64_t)v25 < v24)
    {
      *v25 = v17;
      v26 = (uint64_t)(v25 + 1);
LABEL_61:
      *(_QWORD *)(v14 + 88) = v26;
      v21 = *(_QWORD *)(v14 + 248);
      goto LABEL_62;
    }
    v27 = *(_BYTE **)(v14 + 80);
    v28 = v25 - v27;
    v29 = v25 - v27 + 1;
    if (v29 < 0)
      goto LABEL_67;
    v30 = v24 - (_QWORD)v27;
    if (2 * v30 > v29)
      v29 = 2 * v30;
    if (v30 >= 0x3FFFFFFFFFFFFFFFLL)
      v31 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v31 = v29;
    if (v31)
      v32 = (char *)operator new(v31);
    else
      v32 = 0;
    v33 = &v32[v28];
    v34 = &v32[v31];
    v32[v28] = v17;
    v26 = (uint64_t)&v32[v28 + 1];
    if (v25 == v27)
    {
LABEL_59:
      *(_QWORD *)(v14 + 80) = v33;
      *(_QWORD *)(v14 + 88) = v26;
      *(_QWORD *)(v14 + 96) = v34;
      if (v27)
        operator delete(v27);
      goto LABEL_61;
    }
    if (v28 < 8 || (unint64_t)(v27 - v32) < 0x20)
      goto LABEL_56;
    if (v28 >= 0x20)
    {
      v35 = v28 & 0xFFFFFFFFFFFFFFE0;
      v36 = (__int128 *)(v25 - 16);
      v37 = &v32[v25 - 16 - v27];
      v38 = v28 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v39 = *v36;
        *((_OWORD *)v37 - 1) = *(v36 - 1);
        *(_OWORD *)v37 = v39;
        v37 -= 32;
        v36 -= 2;
        v38 -= 32;
      }
      while (v38);
      if (v28 == v35)
        goto LABEL_58;
      if ((v28 & 0x18) == 0)
      {
        v33 -= v35;
        v25 -= v35;
        goto LABEL_56;
      }
    }
    else
    {
      v35 = 0;
    }
    v40 = v35 - (v28 & 0xFFFFFFFFFFFFFFF8);
    v41 = &v25[-v35 - 8];
    v42 = v41 - v27;
    do
    {
      v43 = *(_QWORD *)v41;
      v41 -= 8;
      *(_QWORD *)&v32[v42] = v43;
      v42 -= 8;
      v40 += 8;
    }
    while (v40);
    if (v28 == (v28 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_58;
    v33 -= v28 & 0xFFFFFFFFFFFFFFF8;
    v25 -= v28 & 0xFFFFFFFFFFFFFFF8;
LABEL_56:
    v44 = v33 - 1;
    do
    {
      v45 = *--v25;
      *v44-- = v45;
    }
    while (v25 != v27);
LABEL_58:
    v33 = v32;
    goto LABEL_59;
  }
  v20 = (_BYTE *)(*(_QWORD *)(v14 + 80) + (((uint64_t)v18 - *(_QWORD *)(v14 + 56)) >> 3));
  *v20 = v17;
  v21 = *(_QWORD *)(v14 + 248);
  if (v20 != *(_BYTE **)(v14 + 88))
  {
    v22 = *(_QWORD **)(v14 + 128);
    if (v22)
    {
      while (1)
      {
        v48 = &v51;
        v49 = 1;
        v52 = v21;
        v23 = v22[6];
        if (!v23)
          break;
        (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(_QWORD *)v23 + 48))(v23, &v52, &v48);
        v22 = (_QWORD *)*v22;
        if (!v22)
          return;
      }
LABEL_66:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_67:
      abort();
    }
    return;
  }
LABEL_62:
  v46 = *(_QWORD **)(v14 + 176);
  if (v46)
  {
    while (1)
    {
      v48 = &v51;
      v49 = 1;
      v52 = v21;
      v47 = v46[6];
      if (!v47)
        break;
      (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(_QWORD *)v47 + 48))(v47, &v52, &v48);
      v46 = (_QWORD *)*v46;
      if (!v46)
        return;
    }
    goto LABEL_66;
  }
}

void sub_19FEA5694(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::PassDOFConfiguration>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassDOFConfiguration>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v21 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  v15 = a1[11];
  *(_BYTE *)(v14 + v7) = *(_BYTE *)(v15 - 1);
  a1[11] = v15 - 1;
  v16 = (_QWORD *)a1[28];
  if (!v16)
    return 1;
  v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    v22 = v17;
    v18 = v16[6];
    if (!v18)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, &v22, v23);
    v16 = (_QWORD *)*v16;
    if (!v16)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PassDOFConfiguration>::contains(v19, v20);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassDOFConfiguration>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassSSAOConfiguration>(gdc::Entity,md::ls::PassSSAOConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassSSAOConfiguration>(gdc::Entity,md::ls::PassSSAOConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E427F558;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_DWORD *)v2 + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassSSAOConfiguration>(gdc::Entity,md::ls::PassSSAOConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427F558;
  result = *(__n128 *)(a1 + 8);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassSSAOConfiguration>(gdc::Entity,md::ls::PassSSAOConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v3 = *(_QWORD *)(a1 + 20);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::PassSSAOConfiguration>(a2);
  v24 = *(_QWORD *)(a1 + 8);
  v25 = *(_DWORD *)(a1 + 16);
  v26 = v3;
  v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v26);
  if ((v6 & 1) != 0)
  {
    v12 = (_DWORD *)v4[11];
    v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      v14 = (_DWORD *)v4[10];
      v15 = 0xAAAAAAAAAAAAAAABLL * (v12 - v14) + 1;
      if (v15 > 0x1555555555555555)
        goto LABEL_30;
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v14) >> 2);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0xAAAAAAAAAAAAAAALL)
        v17 = 0x1555555555555555;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v18 = (char *)operator new(12 * v17);
      }
      else
      {
        v18 = 0;
      }
      v19 = &v18[4 * (v12 - v14)];
      *(_QWORD *)v19 = v24;
      *((_DWORD *)v19 + 2) = v25;
      v13 = v19 + 12;
      if (v12 != v14)
      {
        do
        {
          v20 = *(_QWORD *)(v12 - 3);
          v12 -= 3;
          v21 = v12[2];
          *(_QWORD *)(v19 - 12) = v20;
          v19 -= 12;
          *((_DWORD *)v19 + 2) = v21;
        }
        while (v12 != v14);
        v12 = (_DWORD *)v4[10];
      }
      v4[10] = (uint64_t)v19;
      v4[11] = (uint64_t)v13;
      v4[12] = (uint64_t)&v18[12 * v17];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_QWORD *)v12 = v24;
      v12[2] = v25;
      v13 = v12 + 3;
    }
    v4[11] = (uint64_t)v13;
    v8 = v4[31];
  }
  else
  {
    v7 = v4[10] + 12 * (((uint64_t)v5 - v4[7]) >> 3);
    *(_QWORD *)v7 = v24;
    *(_DWORD *)(v7 + 8) = v25;
    v8 = v4[31];
    if (v7 != v4[11])
    {
      v9 = (_QWORD *)v4[16];
      if (v9)
      {
        while (1)
        {
          v28 = &v26;
          v29 = 1;
          v27 = v8;
          v10 = v9[6];
          if (!v10)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v10 + 48))(v10, &v27, &v28);
          v9 = (_QWORD *)*v9;
          if (!v9)
            return;
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  v22 = (_QWORD *)v4[22];
  if (v22)
  {
    while (1)
    {
      v28 = &v26;
      v29 = 1;
      v27 = v8;
      v23 = v22[6];
      if (!v23)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v23 + 48))(v23, &v27, &v28);
      v22 = (_QWORD *)*v22;
      if (!v22)
        return;
    }
    goto LABEL_29;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameGraphRenderResourcesRegistry>(gdc::Entity,md::ls::FrameGraphRenderResourcesRegistry &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameGraphRenderResourcesRegistry>(gdc::Entity,md::ls::FrameGraphRenderResourcesRegistry &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E4281AC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameGraphRenderResourcesRegistry>(gdc::Entity,md::ls::FrameGraphRenderResourcesRegistry &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E4281AC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameGraphRenderResourcesRegistry>(gdc::Entity,md::ls::FrameGraphRenderResourcesRegistry &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  int8x8_t v6;
  uint8x8_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  __int128 *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = *(_QWORD *)(a1 + 16);
  v48 = 0x5D2A68BC4355A70CLL;
  v5 = (uint64_t *)(a2 + 120);
  v6 = *(int8x8_t *)(a2 + 128);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8(v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = 0x5D2A68BC4355A70CLL;
      if (*(_QWORD *)&v6 <= 0x5D2A68BC4355A70CuLL)
        v8 = 0x5D2A68BC4355A70CuLL % *(_QWORD *)&v6;
    }
    else
    {
      v8 = (*(_QWORD *)&v6 - 1) & 0x5D2A68BC4355A70CLL;
    }
    v9 = *(_QWORD **)(*v5 + 8 * v8);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v7.u32[0] < 2uLL)
        {
          v11 = *(_QWORD *)&v6 - 1;
          while (1)
          {
            v13 = v10[1];
            if (v13 == 0x5D2A68BC4355A70CLL)
            {
              if (v10[2] == 0x5D2A68BC4355A70CLL)
                goto LABEL_57;
            }
            else if ((v13 & v11) != v8)
            {
              goto LABEL_21;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_21;
          }
        }
        do
        {
          v12 = v10[1];
          if (v12 == 0x5D2A68BC4355A70CLL)
          {
            if (v10[2] == 0x5D2A68BC4355A70CLL)
            {
LABEL_57:
              v14 = v10[3];
              goto LABEL_24;
            }
          }
          else
          {
            if (v12 >= *(_QWORD *)&v6)
              v12 %= *(_QWORD *)&v6;
            if (v12 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_21:
  v14 = operator new();
  *(_QWORD *)(v14 + 16) = "md::ls::FrameGraphRenderResourcesRegistry]";
  *(_QWORD *)(v14 + 24) = 41;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_DWORD *)(v14 + 144) = 1065353216;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_QWORD *)(v14 + 184) = 0;
  *(_DWORD *)(v14 + 192) = 1065353216;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_QWORD *)(v14 + 232) = 0;
  *(_DWORD *)(v14 + 240) = 1065353216;
  *(_QWORD *)v14 = &off_1E42B3D38;
  *(_QWORD *)(v14 + 8) = 0x5D2A68BC4355A70CLL;
  *(_QWORD *)(v14 + 248) = a2;
  v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v5, 0x5D2A68BC4355A70CuLL, &v48);
  v16 = v15[3];
  v15[3] = v14;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v44 = 0x5D2A68BC4355A70CLL;
  v45 = (uint64_t)"md::ls::FrameGraphRenderResourcesRegistry]";
  v46 = 41;
  gdc::Registry::_registerStorageDataSignals(a2, 0x5D2A68BC4355A70CLL, (uint64_t)&v44, (uint64_t *)(v14 + 104));
LABEL_24:
  v17 = *(_QWORD *)(a1 + 8);
  v47 = v4;
  v18 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((uint64_t *)(v14 + 32), (uint64_t)&v47);
  if ((v19 & 1) != 0)
  {
    v25 = *(char **)(v14 + 88);
    v24 = *(_QWORD *)(v14 + 96);
    if ((unint64_t)v25 >= v24)
    {
      v27 = *(char **)(v14 + 80);
      v28 = (v25 - v27) >> 3;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 61)
        goto LABEL_59;
      v30 = v24 - (_QWORD)v27;
      if (v30 >> 2 > v29)
        v29 = v30 >> 2;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
        v31 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      if (v31)
      {
        if (v31 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v32 = (char *)operator new(8 * v31);
      }
      else
      {
        v32 = 0;
      }
      v33 = &v32[8 * v28];
      v34 = &v32[8 * v31];
      *(_QWORD *)v33 = v17;
      v26 = v33 + 8;
      if (v25 != v27)
      {
        v35 = v25 - v27 - 8;
        if (v35 < 0x58)
          goto LABEL_63;
        if ((unint64_t)(v27 - v32) < 0x20)
          goto LABEL_63;
        v36 = (v35 >> 3) + 1;
        v37 = &v32[8 * v28 - 16];
        v38 = (__int128 *)(v25 - 16);
        v39 = v36 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v40 = *v38;
          *((_OWORD *)v37 - 1) = *(v38 - 1);
          *(_OWORD *)v37 = v40;
          v37 -= 32;
          v38 -= 2;
          v39 -= 4;
        }
        while (v39);
        v33 -= 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
        v25 -= 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
        if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_63:
          do
          {
            v41 = *((_QWORD *)v25 - 1);
            v25 -= 8;
            *((_QWORD *)v33 - 1) = v41;
            v33 -= 8;
          }
          while (v25 != v27);
        }
        v25 = *(char **)(v14 + 80);
      }
      *(_QWORD *)(v14 + 80) = v33;
      *(_QWORD *)(v14 + 88) = v26;
      *(_QWORD *)(v14 + 96) = v34;
      if (v25)
        operator delete(v25);
    }
    else
    {
      *(_QWORD *)v25 = v17;
      v26 = v25 + 8;
    }
    *(_QWORD *)(v14 + 88) = v26;
    v21 = *(_QWORD *)(v14 + 248);
  }
  else
  {
    v20 = (_QWORD *)((char *)v18 + *(_QWORD *)(v14 + 80) - *(_QWORD *)(v14 + 56));
    *v20 = v17;
    v21 = *(_QWORD *)(v14 + 248);
    if (v20 != *(_QWORD **)(v14 + 88))
    {
      v22 = *(_QWORD **)(v14 + 128);
      if (v22)
      {
        while (1)
        {
          v44 = (uint64_t)&v47;
          v45 = 1;
          v48 = v21;
          v23 = v22[6];
          if (!v23)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v23 + 48))(v23, &v48, &v44);
          v22 = (_QWORD *)*v22;
          if (!v22)
            return;
        }
LABEL_58:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_59:
        abort();
      }
      return;
    }
  }
  v42 = *(_QWORD **)(v14 + 176);
  if (v42)
  {
    while (1)
    {
      v44 = (uint64_t)&v47;
      v45 = 1;
      v48 = v21;
      v43 = v42[6];
      if (!v43)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v43 + 48))(v43, &v48, &v44);
      v42 = (_QWORD *)*v42;
      if (!v42)
        return;
    }
    goto LABEL_58;
  }
}

void sub_19FEA5F28(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ls::FrameGraphRenderResourcesRegistry>::~ComponentStorageWrapper(_QWORD *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A1AF4E00);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FrameGraphRenderResourcesRegistry>::remove(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v20 = a2;
  v4 = a1[4];
  v5 = a1[5];
  v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3)
    return 0;
  v6 = *(_QWORD *)(v4 + 8 * (a2 >> 39));
  if (!v6)
    return 0;
  v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  v9 = a1[7];
  v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3)
    return 0;
  v10 = HIDWORD(a2);
  v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != (_DWORD)v10)
    return 0;
  v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (_QWORD *)v11);
  *(_QWORD *)(v14 + 8 * v7) = *(_QWORD *)(a1[11] - 8);
  a1[11] -= 8;
  v15 = (_QWORD *)a1[28];
  if (!v15)
    return 1;
  v16 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    v21 = v16;
    v17 = v15[6];
    if (!v17)
      break;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v17 + 48))(v17, &v21, v22);
    v15 = (_QWORD *)*v15;
    if (!v15)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FrameGraphRenderResourcesRegistry>::contains(v18, v19);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FrameGraphRenderResourcesRegistry>::contains(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (v3 = *(_QWORD *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    v5 = a1[8];
    goto LABEL_8;
  }
  v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  v6 = a1[7];
  v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    v7 = v5;
    return v7 != v5;
  }
  v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2))
    v7 = a1[8];
  return v7 != v5;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameGraphRenderTarget>(gdc::Entity,md::ls::FrameGraphRenderTarget &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameGraphRenderTarget>(gdc::Entity,md::ls::FrameGraphRenderTarget &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427F750;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameGraphRenderTarget>(gdc::Entity,md::ls::FrameGraphRenderTarget &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427F750;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameGraphRenderTarget>(gdc::Entity,md::ls::FrameGraphRenderTarget &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::FrameGraphRenderTarget>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameGraphBuilder>(gdc::Entity,md::ls::FrameGraphBuilder &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameGraphBuilder>(gdc::Entity,md::ls::FrameGraphBuilder &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427E988;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameGraphBuilder>(gdc::Entity,md::ls::FrameGraphBuilder &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427E988;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameGraphBuilder>(gdc::Entity,md::ls::FrameGraphBuilder &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::FrameGraphBuilder>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_36;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 == v15)
      {
        v15 = v13;
      }
      else
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_40;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_40;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
          v15 = (char *)v4[10];
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PreviousResourceStamp>(gdc::Entity,md::ls::PreviousResourceStamp &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PreviousResourceStamp>(gdc::Entity,md::ls::PreviousResourceStamp &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E427F5E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PreviousResourceStamp>(gdc::Entity,md::ls::PreviousResourceStamp &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E427F5E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PreviousResourceStamp>(gdc::Entity,md::ls::PreviousResourceStamp &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (uint64_t *)gdc::Registry::storage<md::ls::PreviousResourceStamp>(a2);
  v5 = *(_QWORD *)(a1 + 8);
  v32 = v3;
  v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if ((v7 & 1) != 0)
  {
    v13 = (char *)v4[11];
    v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)v4[10];
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_34;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = operator new(8 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v5;
      v14 = v21 + 1;
      if (v13 != v15)
      {
        v23 = v13 - v15 - 8;
        if (v23 < 0x58)
          goto LABEL_38;
        if ((unint64_t)(v15 - v20) < 0x20)
          goto LABEL_38;
        v24 = (v23 >> 3) + 1;
        v25 = &v20[8 * v16 - 16];
        v26 = v13 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            v29 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = (uint64_t)v21;
      v4[11] = (uint64_t)v14;
      v4[12] = (uint64_t)v22;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v13 = v5;
      v14 = v13 + 8;
    }
    v4[11] = (uint64_t)v14;
    v9 = v4[31];
  }
  else
  {
    v8 = (_QWORD *)((char *)v6 + v4[10] - v4[7]);
    *v8 = v5;
    v9 = v4[31];
    if (v8 != (_QWORD *)v4[11])
    {
      v10 = (_QWORD *)v4[16];
      if (v10)
      {
        while (1)
        {
          v34 = &v32;
          v35 = 1;
          v33 = v9;
          v11 = v10[6];
          if (!v11)
            break;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v33, &v34);
          v10 = (_QWORD *)*v10;
          if (!v10)
            return;
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  v30 = (_QWORD *)v4[22];
  if (v30)
  {
    while (1)
    {
      v34 = &v32;
      v35 = 1;
      v33 = v9;
      v31 = v30[6];
      if (!v31)
        break;
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v31 + 48))(v31, &v33, &v34);
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
    goto LABEL_33;
  }
}

void md::GEOVectorTileResourceDecoder::~GEOVectorTileResourceDecoder(md::GEOVectorTileResourceDecoder *this)
{
  *(_QWORD *)this = &off_1E42A5A38;
  *((_QWORD *)this + 1) = &off_1E42B4EB0;

}

{
  *(_QWORD *)this = &off_1E42A5A38;
  *((_QWORD *)this + 1) = &off_1E42B4EB0;

  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::GEOVectorTileResource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC6D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::GEOVectorTileResource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC6D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::GEOVectorTileResource>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  v2 = (std::__shared_weak_count *)a1[22];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (void *)a1[4];
  if (v5 != (void *)a1[6])
    free(v5);
}

void md::TrafficDynamicResourceFetcher::~TrafficDynamicResourceFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A1AF4E00);
}

unint64_t md::TrafficDynamicResourceFetcher::tileKey(uint64_t a1, void *a2)
{
  id v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  objc_msgSend(v3, "size");
  objc_msgSend(v3, "scale");
  v4 = *(_DWORD *)(a1 + 556);
  v5 = GEOTileKeyMake();
  v6 = 128;
  if (v4 > 0x19 || ((1 << v4) & 0x200101C) == 0)
    v6 = (unint64_t)(v4 == 26) << 7;
  v8 = v6 | v5 & 0xFFFFFFFFFFFFFF7FLL;

  return v8;
}

void sub_19FEA6AD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::TrafficDynamicTileDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD2D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TrafficDynamicTileDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD2D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::TrafficDynamicTileDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::RouteAnnotationDedupingGroup::~RouteAnnotationDedupingGroup(md::RouteAnnotationDedupingGroup *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E4294980;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v2, *((_QWORD *)this + 7) - v2);
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v3, *((_QWORD *)this + 3) - v3);
  }
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E4294980;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8), v2, *((_QWORD *)this + 7) - v2);
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v3, *((_QWORD *)this + 3) - v3);
  }
  JUMPOUT(0x1A1AF4E00);
}

void md::RouteAnnotationDedupingGroup::prepareForCollision(md::RouteAnnotationDedupingGroup *this, md::LabelManager *a2)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  int8x16_t *v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  int8x8_t v13;
  unint64_t *v14;
  uint8x8_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  float *v28;
  float *v29;
  uint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  const std::nothrow_t *v52;
  _QWORD *v53;
  BOOL v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  char *v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71[2];
  void *__p[2];
  int v73;
  void **v74;

  *((_QWORD *)this + 6) = *((_QWORD *)this + 5);
  *((_QWORD *)this + 9) = 0;
  v4 = (unint64_t *)*((_QWORD *)this + 1);
  v5 = (unint64_t *)*((_QWORD *)this + 2);
  if (v4 != v5)
  {
    while (((*(uint64_t (**)(unint64_t))(*(_QWORD *)*v4 + 16))(*v4) & 1) != 0)
    {
      ++v4;
LABEL_4:
      if (v4 == v5)
        goto LABEL_11;
    }
    v6 = v5 - 1;
    while (v6 != v4)
    {
      v5 = v6;
      v7 = *v6--;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7))
      {
        v8 = *v4;
        *v4++ = *v5;
        *v5 = v8;
        goto LABEL_4;
      }
    }
  }
  v5 = v4;
LABEL_11:
  v9 = (int8x16_t *)*((_QWORD *)this + 1);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 21) + 32) + 8))(*(_QWORD *)(*((_QWORD *)a2 + 21) + 32));
  v11 = 126 - 2 * __clz(((char *)v5 - (char *)v9) >> 3);
  if (!v10)
  {
    if (v5 == (unint64_t *)v9)
      v30 = 0;
    else
      v30 = v11;
    std::__introsort<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **,false>((uint64_t)v9, v5, v30, 1);
    goto LABEL_115;
  }
  if (v5 == (unint64_t *)v9)
    v12 = 0;
  else
    v12 = v11;
  v70 = v12;
  v71[0] = a2;
  std::__introsort<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **,false>(v9->i64, (uint64_t *)v5, (uint64_t)v71, v12, 1);
  *(_OWORD *)v71 = 0u;
  *(_OWORD *)__p = 0u;
  v73 = 1065353216;
  if (v5 != (unint64_t *)v9)
  {
    v13 = 0;
    v14 = (unint64_t *)v9;
    while (2)
    {
      v15 = (uint8x8_t)vcnt_s8(v13);
      v15.i16[0] = vaddlv_u8(v15);
      v16 = *(_QWORD *)&v13 - 1;
LABEL_19:
      v17 = *v14;
      if (v13)
      {
        v18 = 0x9DDFEA08EB382D69 * (((8 * v17) + 8) ^ HIDWORD(v17));
        v19 = 0x9DDFEA08EB382D69 * (HIDWORD(v17) ^ (v18 >> 47) ^ v18);
        v20 = 0x9DDFEA08EB382D69 * (v19 ^ (v19 >> 47));
        if (v15.u32[0] > 1uLL)
        {
          v21 = v20;
          if (v20 >= *(_QWORD *)&v13)
            v21 = v20 % *(_QWORD *)&v13;
        }
        else
        {
          v21 = v20 & v16;
        }
        v22 = (_QWORD *)*((_QWORD *)v71[0] + v21);
        if (v22)
        {
          v23 = (_QWORD *)*v22;
          if (v23)
          {
            if (v15.u32[0] < 2uLL)
            {
              while (1)
              {
                v24 = v23[1];
                if (v20 == v24)
                {
                  if (v23[2] == v17)
                    goto LABEL_40;
                }
                else if ((v24 & v16) != v21)
                {
                  goto LABEL_42;
                }
                v23 = (_QWORD *)*v23;
                if (!v23)
                  goto LABEL_42;
              }
            }
            do
            {
              v25 = v23[1];
              if (v20 == v25)
              {
                if (v23[2] == v17)
                {
LABEL_40:
                  if (++v14 == v5)
                    goto LABEL_54;
                  goto LABEL_19;
                }
              }
              else
              {
                if (v25 >= *(_QWORD *)&v13)
                  v25 %= *(_QWORD *)&v13;
                if (v25 != v21)
                  break;
              }
              v23 = (_QWORD *)*v23;
            }
            while (v23);
          }
        }
      }
LABEL_42:
      if (++v14 != v5)
      {
        v26 = v14;
        do
        {
          v27 = *v26;
          v28 = (float *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v17 + 24))(v17);
          v29 = (float *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v27 + 24))(v27);
          if (v28[2] > *v29 && *v28 < v29[2] && v28[3] > v29[1] && v28[1] < v29[3])
            std::__hash_table<md::LabelBase *,std::hash<md::LabelBase *>,std::equal_to<md::LabelBase *>,std::allocator<md::LabelBase *>>::__emplace_unique_key_args<md::LabelBase *,md::LabelBase *&>((uint64_t)v71, v27, v27);
          ++v26;
        }
        while (v26 != v5);
        v13 = (int8x8_t)v71[1];
        continue;
      }
      break;
    }
  }
LABEL_54:
  v74 = (void **)a2;
  std::__introsort<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **,false>(v9->i64, (uint64_t *)v5, (uint64_t)&v74, v70, 1);
  v74 = v71;
  if (v5 == (unint64_t *)v9)
    goto LABEL_111;
  v31 = (uint8x8_t)vcnt_s8((int8x8_t)v71[1]);
  v31.i16[0] = vaddlv_u8(v31);
  v32 = (unint64_t)v71[1] - 1;
  while (1)
  {
    if (v71[1])
    {
      v33 = v9->i64[0];
      v34 = HIDWORD(v9->i64[0]);
      v35 = 0x9DDFEA08EB382D69 * ((8 * v9->i64[0] + 8) ^ v34);
      v36 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v34 ^ (v35 >> 47) ^ v35)) ^ ((0x9DDFEA08EB382D69 * (v34 ^ (v35 >> 47) ^ v35)) >> 47));
      if (v31.u32[0] > 1uLL)
      {
        v37 = v36;
        if ((void *)v36 >= v71[1])
          v37 = v36 % (unint64_t)v71[1];
      }
      else
      {
        v37 = v36 & v32;
      }
      v38 = (_QWORD *)*((_QWORD *)v71[0] + v37);
      if (v38)
      {
        v39 = (_QWORD *)*v38;
        if (v39)
          break;
      }
    }
LABEL_56:
    v9 = (int8x16_t *)((char *)v9 + 8);
    if (v9 == (int8x16_t *)v5)
      goto LABEL_111;
  }
  if (v31.u32[0] < 2uLL)
  {
    while (1)
    {
      v40 = v39[1];
      if (v36 == v40)
      {
        if (v39[2] == v33)
          goto LABEL_98;
      }
      else if ((v40 & v32) != v37)
      {
        goto LABEL_56;
      }
      v39 = (_QWORD *)*v39;
      if (!v39)
        goto LABEL_56;
    }
  }
  while (1)
  {
    v41 = v39[1];
    if (v36 == v41)
      break;
    if ((void *)v41 >= v71[1])
      v41 %= (unint64_t)v71[1];
    if (v41 != v37)
      goto LABEL_56;
LABEL_72:
    v39 = (_QWORD *)*v39;
    if (!v39)
      goto LABEL_56;
  }
  if (v39[2] != v33)
    goto LABEL_72;
LABEL_98:
  if (v9 != (int8x16_t *)--v5)
  {
    v42 = *v5;
    v43 = HIDWORD(*v5);
    v44 = 0x9DDFEA08EB382D69 * ((8 * *v5 + 8) ^ v43);
    v45 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v43 ^ (v44 >> 47) ^ v44)) ^ ((0x9DDFEA08EB382D69 * (v43 ^ (v44 >> 47) ^ v44)) >> 47));
    if (v31.u32[0] > 1uLL)
    {
      v46 = v45;
      if ((void *)v45 >= v71[1])
        v46 = v45 % (unint64_t)v71[1];
    }
    else
    {
      v46 = v45 & v32;
    }
    v47 = (_QWORD *)*((_QWORD *)v71[0] + v46);
    if (v47)
    {
      v48 = (_QWORD *)*v47;
      if (v48)
      {
        if (v31.u32[0] < 2uLL)
        {
          while (1)
          {
            v49 = v48[1];
            if (v45 == v49)
            {
              if (v48[2] == v42)
                goto LABEL_98;
            }
            else if ((v49 & v32) != v46)
            {
              goto LABEL_100;
            }
            v48 = (_QWORD *)*v48;
            if (!v48)
              goto LABEL_100;
          }
        }
        do
        {
          v50 = v48[1];
          if (v45 == v50)
          {
            if (v48[2] == v42)
              goto LABEL_98;
          }
          else
          {
            if ((void *)v50 >= v71[1])
              v50 %= (unint64_t)v71[1];
            if (v50 != v46)
              break;
          }
          v48 = (_QWORD *)*v48;
        }
        while (v48);
      }
    }
LABEL_100:
    if ((char *)v5 - (char *)v9 < 17)
    {
LABEL_107:
      v55 = 0;
      v51 = 0;
    }
    else
    {
      if ((((char *)v5 - (char *)v9) >> 3) + 1 >= 0xFFFFFFFFFFFFFFFLL)
        v51 = 0xFFFFFFFFFFFFFFFLL;
      else
        v51 = (((char *)v5 - (char *)v9) >> 3) + 1;
      v52 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      while (1)
      {
        v53 = operator new(8 * v51, v52);
        if (v53)
          break;
        v54 = v51 > 1;
        v51 >>= 1;
        if (!v54)
          goto LABEL_107;
      }
      v55 = v53;
    }
    std::__stable_partition_impl<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,std::__wrap_iter<md::LabelBase **>,long,std::pair<md::LabelBase **,long>>(v9, v5, &v74, (((char *)v5 - (char *)v9) >> 3) + 1, v55, v51);
    if (v55)
      operator delete(v55);
  }
LABEL_111:
  v56 = __p[0];
  if (__p[0])
  {
    do
    {
      v57 = (_QWORD *)*v56;
      operator delete(v56);
      v56 = v57;
    }
    while (v57);
  }
  v58 = v71[0];
  v71[0] = 0;
  if (v58)
    operator delete(v58);
LABEL_115:
  v59 = (char *)*((_QWORD *)this + 1);
  v60 = (char *)*((_QWORD *)this + 2);
  if (v59 != v60)
  {
    v61 = v60 - v59 - 8;
    if (v61 > 7)
    {
      v64 = 0;
      v65 = (v61 >> 3) + 1;
      v62 = v65 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v66 = &v59[8 * v64];
        v68 = *(_QWORD *)v66;
        v67 = *((_QWORD *)v66 + 1);
        *(_DWORD *)(v68 + 32) = v64;
        *(_DWORD *)(v67 + 32) = v64 + 1;
        v64 += 2;
      }
      while (v62 != v64);
      if (v65 != v62)
      {
        v63 = &v59[8 * (v65 & 0x3FFFFFFFFFFFFFFELL)];
        goto LABEL_122;
      }
    }
    else
    {
      LODWORD(v62) = 0;
      v63 = (char *)*((_QWORD *)this + 1);
      do
      {
LABEL_122:
        v69 = *(_QWORD *)v63;
        v63 += 8;
        *(_DWORD *)(v69 + 32) = v62;
        LODWORD(v62) = v62 + 1;
      }
      while (v63 != v60);
    }
    *((_QWORD *)this + 9) = *(_QWORD *)v59;
  }
}

void sub_19FEA7260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL md::RouteAnnotationDedupingGroup::isResolved(md::RouteAnnotationDedupingGroup *this)
{
  return *((_BYTE *)this + 84)
      && *((unsigned int *)this + 20) <= (unint64_t)((uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 3);
}

void std::__introsort<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *k;
  uint64_t *i;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  double v20;
  unsigned int v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  double v29;
  unsigned int v30;
  uint64_t v31;
  double v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  double v41;
  unsigned int v42;
  uint64_t v43;
  double v44;
  uint64_t *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  double v51;
  unsigned int v52;
  uint64_t v53;
  double v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  double v63;
  unsigned int v64;
  uint64_t v65;
  double v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  double v73;
  unsigned int v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  double v81;
  double v82;
  uint64_t v83;
  double v84;
  double v85;
  unsigned int v86;
  unsigned int v87;
  BOOL v88;
  BOOL v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  double v95;
  unsigned int v96;
  uint64_t v97;
  double v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  double v105;
  unsigned int v106;
  uint64_t v107;
  double v108;
  uint64_t *j;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  double v115;
  unsigned int v116;
  uint64_t v117;
  double v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  double v125;
  unsigned int v126;
  uint64_t v127;
  double v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  double v135;
  unsigned int v136;
  uint64_t v137;
  double v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  double v144;
  unsigned int v145;
  uint64_t v146;
  double v147;
  double v148;
  uint64_t *v149;
  uint64_t *v150;
  BOOL v151;
  char v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  double v161;
  unsigned int v162;
  uint64_t v163;
  double v164;
  unsigned int v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  double v170;
  unsigned int v171;
  uint64_t v172;
  double v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  unsigned int v177;
  int64_t v178;
  uint64_t *v179;
  int64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  double v188;
  unsigned int v189;
  uint64_t v190;
  double v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  double v197;
  unsigned int v198;
  uint64_t v199;
  double v200;
  unsigned int v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  double v209;
  unsigned int v210;
  uint64_t v211;
  double v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  double v218;
  unsigned int v219;
  uint64_t v220;
  double v221;
  uint64_t v222;
  BOOL v223;
  uint64_t *v224;
  uint64_t v225;
  int64_t v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  double v234;
  unsigned int v235;
  uint64_t v236;
  double v237;
  double v238;
  unsigned int v239;
  unsigned int v240;
  uint64_t *v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  double v250;
  unsigned int v251;
  uint64_t v252;
  double v253;
  unsigned int v254;
  uint64_t v255;
  unsigned int v256;
  unint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  uint64_t v262;
  double v263;
  unsigned int v264;
  uint64_t v265;
  double v266;
  unsigned int v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  double v275;
  unsigned int v276;
  uint64_t v277;
  double v278;
  unsigned int v279;
  uint64_t v280;
  unsigned int v281;
  uint64_t *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  double v288;
  unsigned int v289;
  uint64_t v290;
  double v291;
  unint64_t v292;
  int64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t *v298;
  uint64_t v299;
  int64_t v300;
  uint64_t v301;

void std::__introsort<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  unsigned int v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  unsigned int v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  unsigned int v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  unsigned int v50;
  uint64_t v51;
  double v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  double v69;
  BOOL v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  unsigned int v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  unsigned int v85;
  uint64_t v86;
  double v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  unsigned int v93;
  uint64_t v94;
  double v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  unsigned int v102;
  uint64_t v103;
  double v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  unsigned int v111;
  uint64_t v112;
  double v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  unsigned int v119;
  uint64_t v120;
  double v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  double v126;
  uint64_t v127;
  double v128;
  uint64_t v129;
  uint64_t *v130;
  BOOL v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  double v141;
  unsigned int v142;
  uint64_t v143;
  double v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  double v150;
  uint64_t v151;
  double v152;
  int64_t v153;
  int64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  double v161;
  unsigned int v162;
  uint64_t v163;
  double v164;
  double v165;
  unsigned int v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  double v171;
  unsigned int v172;
  uint64_t v173;
  double v174;
  double v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  double v179;
  uint64_t v180;
  double v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  double v187;
  uint64_t v188;
  double v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  double v201;
  uint64_t v202;
  double v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  double v210;
  uint64_t v211;
  double v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  double v218;
  uint64_t v219;
  double v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  double v226;
  unsigned int v227;
  uint64_t v228;
  double v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  double v237;
  uint64_t v238;
  double v239;
  uint64_t *v240;
  uint64_t *v241;
  int64_t v242;
  uint64_t v244;
  uint64_t *v245;
  int64_t v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t *v249;
  uint64_t *v250;
  uint64_t *v251;

uint64_t *std::__stable_partition_impl<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,std::__wrap_iter<md::LabelBase **>,long,std::pair<md::LabelBase **,long>>(int8x16_t *a1, unint64_t *a2, _QWORD **a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t i;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  BOOL v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *__src;

  if (a4 == 3)
  {
    v11 = &a1->i64[1];
    v12 = a1->u64[1];
    if (!std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(*a3, v12))
    {
      v10 = a1->i64[0];
      a1->i64[0] = v12;
      a1->i64[1] = v10;
      a1->i64[1] = *a2;
      goto LABEL_21;
    }
    a1->i64[1] = *a2;
    *a2 = v12;
    *a1 = vextq_s8(*a1, *a1, 8uLL);
  }
  else
  {
    if (a4 == 2)
    {
      v10 = a1->i64[0];
      a1->i64[0] = *a2;
LABEL_21:
      *a2 = v10;
      return (uint64_t *)a2;
    }
    v14 = (char *)a5;
    if (a6 >= a4)
    {
      v20 = &a1->u64[1];
      *a5 = a1->i64[0];
      v21 = a5 + 1;
      if (&a1->u64[1] == a2)
      {
        a1->i64[0] = *a2;
        v11 = (uint64_t *)a2;
      }
      else
      {
        v22 = (unint64_t *)a1;
        do
        {
          v23 = *v20;
          if (std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(*a3, *v20))
          {
            *v21++ = v23;
          }
          else
          {
            *v22++ = v23;
          }
          ++v20;
        }
        while (v20 != a2);
        *v22 = *a2;
        v11 = (uint64_t *)(v22 + 1);
        if (v21 <= (unint64_t *)v14)
          return v11;
      }
      v34 = (unint64_t *)(v14 + 8);
      if (v21 > (unint64_t *)v14 + 1)
        v34 = v21;
      v35 = (unint64_t)v34 + ~(unint64_t)v14;
      if (v35 < 0x18)
      {
        v36 = v11;
      }
      else
      {
        v36 = v11;
        if ((unint64_t)((char *)v11 - v14) >= 0x20)
        {
          v37 = 0;
          v38 = (v35 >> 3) + 1;
          v39 = v38 & 0x3FFFFFFFFFFFFFFCLL;
          v40 = v38 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v41 = &v11[v37];
            v42 = *(_OWORD *)&v14[v37 * 8 + 16];
            *(_OWORD *)v41 = *(_OWORD *)&v14[v37 * 8];
            *((_OWORD *)v41 + 1) = v42;
            v37 += 4;
            v40 -= 4;
          }
          while (v40);
          if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL))
            return v11;
          v36 = &v11[v39];
          v14 += v39 * 8;
        }
      }
      do
      {
        v43 = *(_QWORD *)v14;
        v14 += 8;
        *v36++ = v43;
      }
      while (v14 < (char *)v21);
      return v11;
    }
    if (a4 >= 0)
      v15 = a4;
    else
      v15 = a4 + 1;
    v16 = v15 >> 1;
    v17 = v15 >> 1;
    v61 = v16;
    __src = &a1->i64[v17];
    v18 = *a3;
    for (i = v17 * 8 - 8; ; i -= 8)
    {
      if (!std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v18, *(unint64_t *)((char *)a1->u64 + i)))
      {
        v25 = (uint64_t *)std::__stable_partition_impl<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,std::__wrap_iter<md::LabelBase **>,long,std::pair<md::LabelBase **,long>>(a1, &a1->i8[i], a3, v16, v14, a6);
        v18 = *a3;
        goto LABEL_27;
      }
      if (!i)
        break;
      --v16;
    }
    v25 = (uint64_t *)a1;
LABEL_27:
    v11 = (uint64_t *)(a2 + 1);
    v26 = (unint64_t *)__src;
    v27 = a4 - v61;
    while (!std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v18, *v26))
    {
      if (++v26 == a2)
        goto LABEL_32;
      --v27;
    }
    v11 = (uint64_t *)std::__stable_partition_impl<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,std::__wrap_iter<md::LabelBase **>,long,std::pair<md::LabelBase **,long>>(v26, a2, a3, v27, v14, a6);
LABEL_32:
    if (v25 != __src)
    {
      if (__src == v11)
      {
        return v25;
      }
      else if (v25 + 1 == __src)
      {
        v44 = *v25;
        v45 = (char *)v11 - (char *)__src;
        memmove(v25, __src, v45);
        v11 = (uint64_t *)((char *)v25 + v45);
        *v11 = v44;
      }
      else if (__src + 1 == v11)
      {
        v46 = v11 - 1;
        v47 = *(v11 - 1);
        v11 = v25 + 1;
        if (v46 != v25)
          memmove(v25 + 1, v25, (char *)v46 - (char *)v25);
        *v25 = v47;
      }
      else
      {
        v28 = __src - v25;
        v29 = v11 - __src;
        if (v28 == v29)
        {
          v30 = v25 + 1;
          v31 = (uint64_t)&a1->i64[v61 + 1];
          do
          {
            v32 = *(v30 - 1);
            *(v30 - 1) = *(_QWORD *)(v31 - 8);
            *(_QWORD *)(v31 - 8) = v32;
            if (v30 == __src)
              break;
            ++v30;
            v33 = v31 == (_QWORD)v11;
            v31 += 8;
          }
          while (!v33);
          return __src;
        }
        else
        {
          v48 = v11 - __src;
          v49 = __src - v25;
          do
          {
            v50 = v49;
            v49 = v48;
            v48 = v50 % v48;
          }
          while (v48);
          if (v49)
          {
            v51 = &v25[v49];
            do
            {
              v53 = *--v51;
              v52 = v53;
              v54 = &v51[v28];
              v55 = v51;
              do
              {
                v56 = v54;
                *v55 = *v54;
                v57 = v11 - v54;
                v58 = __OFSUB__(v28, v57);
                v60 = v28 - v57;
                v59 = (v60 < 0) ^ v58;
                v54 = &v25[v60];
                if (v59)
                  v54 = &v56[v28];
                v55 = v56;
              }
              while (v54 != v51);
              *v56 = v52;
            }
            while (v51 != v25);
          }
          return &v25[v29];
        }
      }
    }
  }
  return v11;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **,false>(uint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *i;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t *k;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  BOOL v60;
  float v61;
  float v62;
  float v63;
  float v64;
  int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  float v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  _BOOL4 v73;
  BOOL v74;
  size_t v75;
  uint64_t v76;
  int v77;
  size_t v78;
  const void *v79;
  size_t v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned __int8 v89;
  unsigned __int8 v90;
  unsigned __int8 v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  float v96;
  float v97;
  float v98;
  float v99;
  int v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  float v104;
  float v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  BOOL v109;
  size_t v110;
  uint64_t v111;
  int v112;
  size_t v113;
  const void *v114;
  size_t v115;
  int v116;
  unsigned int v117;
  BOOL v118;
  BOOL v119;
  unsigned int v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  unint64_t *j;
  unsigned int v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  unint64_t v137;
  unsigned int v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  unsigned __int8 v143;
  unsigned __int8 v144;
  unsigned __int8 v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  int v149;
  BOOL v150;
  float v151;
  float v152;
  float v153;
  float v154;
  int v155;
  int v156;
  unsigned int v157;
  unsigned int v158;
  float v159;
  float v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  size_t v164;
  uint64_t v165;
  int v166;
  size_t v167;
  const void *v168;
  size_t v169;
  int v170;
  unsigned int v171;
  unsigned int v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  unsigned __int8 v178;
  unsigned __int8 v179;
  unsigned __int8 v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  int v184;
  float v185;
  float v186;
  float v187;
  float v188;
  int v189;
  int v190;
  unsigned int v191;
  unsigned int v192;
  float v193;
  float v194;
  uint64_t v195;
  _BOOL4 v196;
  size_t v197;
  uint64_t v198;
  int v199;
  size_t v200;
  const void *v201;
  size_t v202;
  unsigned int v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  unint64_t *v210;
  unint64_t *v211;
  BOOL v213;
  uint64_t v214;
  unint64_t *v215;
  unint64_t *v216;
  unint64_t *v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  unsigned int v223;
  unint64_t v224;
  uint64_t v225;
  unsigned int v226;
  _QWORD *v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  int64_t v232;
  int64_t v233;
  unint64_t *v234;
  int64_t v235;
  uint64_t v236;
  unint64_t *v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  unsigned int v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  unsigned int v250;
  unsigned int v251;
  unint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  unsigned int v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  unsigned int v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  uint64_t v269;
  int64_t v270;
  unint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  unsigned __int8 v279;
  unsigned __int8 v280;
  unsigned int v281;
  unsigned int v282;
  BOOL v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  int v287;
  BOOL v288;
  float v289;
  float v290;
  float v291;
  float v292;
  int v293;
  int v294;
  unsigned int v295;
  unsigned int v296;
  float v297;
  float v298;
  uint64_t v299;
  BOOL v300;
  size_t v301;
  uint64_t v302;
  int v303;
  size_t v304;
  const void *v305;
  size_t v306;
  unsigned int v307;
  unint64_t *v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t *v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  int v317;
  unsigned int v318;
  unint64_t v319;
  unint64_t *v320;
  unsigned int v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  int v326;
  unint64_t *v327;
  unint64_t v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t *v332;
  int v333;
  unsigned int v334;
  unint64_t *v335;
  unint64_t v336;
  unsigned int v337;
  unint64_t *v338;
  unint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  unsigned __int8 v344;
  unsigned __int8 v345;
  unsigned __int8 v346;
  uint64_t v347;
  int v348;
  uint64_t v349;
  int v350;
  float v351;
  float v352;
  float v353;
  float v354;
  int v355;
  int v356;
  unsigned int v357;
  unsigned int v358;
  float v359;
  float v360;
  uint64_t v361;
  unsigned int v362;
  size_t v363;
  uint64_t v364;
  int v365;
  size_t v366;
  const void *v367;
  size_t v368;
  unsigned int v369;
  unint64_t v370;
  int64_t v372;
  unint64_t v373;
  unint64_t *v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  unint64_t *v379;
  unint64_t *v380;
  int64_t v381;

  v5 = result;
LABEL_2:
  v6 = a2;
  v7 = a2 - 1;
  i = (unint64_t *)v5;
  while (2)
  {
    v9 = i;
    v10 = (char *)v6 - (char *)i;
    v11 = v6 - i;
    v375 = v9;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v205 = *v7;
        v206 = *v9;
        v207 = *(_QWORD *)(v205 + 8);
        v208 = *(_QWORD *)(*v9 + 8);
        if (v207 != v208
          && (v209 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v207 + 640))(*(_QWORD *)(v205 + 8)),
              v74 = v209 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v208 + 640))(v208),
              v9 = v375,
              v74))
        {
          result = md::Label::collisionPriorityCmp(v205, 0, v206, 0, 0);
          v210 = a2 - 1;
          if ((result & 1) == 0)
            return result;
        }
        else
        {
          v265 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v207 + 640))(v207);
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v208 + 640))(v208);
          v210 = a2 - 1;
          if (v265 <= result)
            return result;
        }
        v266 = *v9;
        *v9 = *v210;
        *v210 = v266;
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(v9, v9 + 1, v7);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(v9, v9 + 1, v9 + 2, v7);
      case 5uLL:
        return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **,0>(v9, v9 + 1, v9 + 2, v9 + 3, v7);
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if (v9 != v6)
            {
              v370 = v10;
              v232 = (v11 - 2) >> 1;
              v233 = v232;
              while (1)
              {
                v235 = v233;
                if (v232 < v233)
                  goto LABEL_337;
                v372 = v233;
                v236 = (2 * v233) | 1;
                v237 = &v9[v236];
                v238 = 2 * v233 + 2;
                if (v238 < (uint64_t)v11)
                {
                  v239 = *v237;
                  v240 = v237[1];
                  v241 = *(_QWORD *)(*v237 + 8);
                  v242 = *(_QWORD *)(v240 + 8);
                  if (v241 != v242)
                  {
                    v243 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v241 + 640))(*(_QWORD *)(*v237 + 8));
                    v74 = v243 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v242 + 640))(v242);
                    v9 = v375;
                    if (v74)
                    {
                      if (!md::Label::collisionPriorityCmp(v239, 0, v240, 0, 0))
                        goto LABEL_347;
LABEL_346:
                      ++v237;
                      v236 = v238;
                      goto LABEL_347;
                    }
                  }
                  v244 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v241 + 640))(v241);
                  if (v244 > (*(unsigned int (**)(uint64_t))(*(_QWORD *)v242 + 640))(v242))
                    goto LABEL_346;
                }
LABEL_347:
                v245 = *v237;
                v235 = v372;
                v246 = v9[v372];
                v247 = *(_QWORD *)(*v237 + 8);
                v248 = *(_QWORD *)(v246 + 8);
                if (v247 != v248
                  && (v249 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v247 + 640))(*(_QWORD *)(*v237 + 8)),
                      v74 = v249 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v248 + 640))(v248),
                      v9 = v375,
                      v74))
                {
                  result = md::Label::collisionPriorityCmp(v245, 0, v246, 0, 0);
                  v232 = (v11 - 2) >> 1;
                  if ((result & 1) == 0)
                    goto LABEL_353;
                }
                else
                {
                  v250 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v247 + 640))(v247);
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v248 + 640))(v248);
                  v232 = (v11 - 2) >> 1;
                  if (v250 <= result)
                  {
LABEL_353:
                    v377 = v9[v372];
                    v9[v372] = *v237;
                    if (v232 < v236)
                    {
                      v234 = v237;
LABEL_336:
                      *v234 = v377;
                      v235 = v372;
                      goto LABEL_337;
                    }
                    while (2)
                    {
                      v380 = v237;
                      v253 = 2 * v236;
                      v236 = (2 * v236) | 1;
                      v234 = &v9[v236];
                      v254 = v253 + 2;
                      if (v253 + 2 < (uint64_t)v11)
                      {
                        v255 = *v234;
                        v256 = v234[1];
                        v257 = *(_QWORD *)(*v234 + 8);
                        v258 = *(_QWORD *)(v256 + 8);
                        if (v257 != v258
                          && (v259 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v257 + 640))(*(_QWORD *)(*v234 + 8)),
                              v74 = v259 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v258 + 640))(v258),
                              v232 = (v11 - 2) >> 1,
                              v74))
                        {
                          v9 = v375;
                          if (md::Label::collisionPriorityCmp(v255, 0, v256, 0, 0))
                            goto LABEL_364;
                        }
                        else
                        {
                          v260 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v257 + 640))(v257);
                          v9 = v375;
                          if (v260 > (*(unsigned int (**)(uint64_t))(*(_QWORD *)v258 + 640))(v258))
                          {
LABEL_364:
                            ++v234;
                            v236 = v254;
                          }
                        }
                      }
                      v261 = *v234;
                      v262 = *(_QWORD *)(*v234 + 8);
                      v263 = *(_QWORD *)(v377 + 8);
                      if (v262 != v263
                        && (v264 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v262 + 640))(*(_QWORD *)(*v234 + 8)),
                            v74 = v264 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v263 + 640))(v263),
                            v9 = v375,
                            v74))
                      {
                        result = md::Label::collisionPriorityCmp(v261, 0, v377, 0, 0);
                        v252 = v380;
                        if ((result & 1) != 0)
                        {
LABEL_335:
                          v234 = v252;
                          goto LABEL_336;
                        }
                      }
                      else
                      {
                        v251 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v262 + 640))(v262);
                        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v263 + 640))(v263);
                        v252 = v380;
                        if (v251 > result)
                          goto LABEL_335;
                      }
                      *v252 = *v234;
                      v237 = v234;
                      if (v232 < v236)
                        goto LABEL_336;
                      continue;
                    }
                  }
                }
LABEL_337:
                v233 = v235 - 1;
                if (!v235)
                {
                  v267 = v370 >> 3;
                  while (1)
                  {
                    v268 = v9;
                    v269 = 0;
                    v373 = *v268;
                    v270 = (unint64_t)(v267 - 2) >> 1;
                    v378 = v267;
                    v381 = v270;
                    do
                    {
                      v271 = v268;
                      v268 += v269 + 1;
                      v272 = 2 * v269;
                      v269 = (2 * v269) | 1;
                      v273 = v272 + 2;
                      if (v272 + 2 >= v267)
                        goto LABEL_377;
                      v274 = *v268;
                      v275 = v268[1];
                      v276 = *(_QWORD *)(*v268 + 8);
                      v277 = *(_QWORD *)(v275 + 8);
                      if (v276 == v277
                        || (v278 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v276 + 640))(*(_QWORD *)(*v268 + 8)),
                            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v277 + 640))(v277),
                            v74 = v278 == (_DWORD)result,
                            v267 = v378,
                            !v74))
                      {
                        v282 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v276 + 640))(v276);
                        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v277 + 640))(v277);
                        v283 = v282 > result;
LABEL_387:
                        v270 = v381;
                        if (v283)
                          goto LABEL_376;
                        goto LABEL_377;
                      }
                      v279 = atomic_load((unsigned __int8 *)(v274 + 1240));
                      v280 = atomic_load((unsigned __int8 *)(v275 + 1240));
                      if ((v279 & 1) != (v280 & 1))
                      {
                        LOBYTE(v281) = atomic_load((unsigned __int8 *)(v274 + 1240));
                        goto LABEL_384;
                      }
                      if (*(_BYTE *)(v274 + 1248))
                        v284 = 724;
                      else
                        v284 = 720;
                      v285 = *(_DWORD *)(v274 + v284);
                      if (*(_BYTE *)(v275 + 1248))
                        v286 = 724;
                      else
                        v286 = 720;
                      v287 = *(_DWORD *)(v275 + v286);
                      v288 = v285 < v287;
                      if (v285 != v287)
                        goto LABEL_401;
                      v289 = *(float *)(v274 + 728);
                      v290 = *(float *)(v275 + 728);
                      v288 = v289 < v290;
                      if (v289 != v290)
                        goto LABEL_401;
                      v291 = *(float *)(v274 + 740);
                      v292 = *(float *)(v275 + 740);
                      v288 = v291 < v292;
                      if (v291 != v292)
                        goto LABEL_401;
                      v293 = *(_DWORD *)(v274 + 60);
                      v294 = *(_DWORD *)(v275 + 60);
                      v288 = v293 < v294;
                      if (v293 != v294)
                        goto LABEL_401;
                      v295 = *(unsigned __int8 *)(v274 + 1222);
                      v296 = *(unsigned __int8 *)(v275 + 1222);
                      v283 = v295 > v296;
                      if (v295 != v296)
                        goto LABEL_387;
                      v297 = *(float *)(v274 + 196);
                      v298 = *(float *)(v275 + 196);
                      v288 = v297 < v298;
                      if (v297 == v298)
                      {
                        v299 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v274 + 8) + 472))(*(_QWORD *)(v274 + 8), 0);
                        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v275 + 8) + 472))(*(_QWORD *)(v275 + 8), 0);
                        LOBYTE(v281) = v299 != 0;
                        if (v299 | result)
                        {
                          if (v299)
                            v300 = result == 0;
                          else
                            v300 = 1;
                          if (v300)
                            goto LABEL_384;
                          if (*(char *)(v299 + 23) < 0)
                          {
                            v302 = v299;
                            v299 = *(_QWORD *)v299;
                            v301 = *(_QWORD *)(v302 + 8);
                          }
                          else
                          {
                            v301 = *(unsigned __int8 *)(v299 + 23);
                          }
                          v303 = *(char *)(result + 23);
                          if (v303 >= 0)
                            v304 = *(unsigned __int8 *)(result + 23);
                          else
                            v304 = *(_QWORD *)(result + 8);
                          if (v303 >= 0)
                            v305 = (const void *)result;
                          else
                            v305 = *(const void **)result;
                          if (v304 >= v301)
                            v306 = v301;
                          else
                            v306 = v304;
                          result = memcmp((const void *)v299, v305, v306);
                          v307 = v304 < v301;
                          if (v301 < v304)
                            v307 = -1;
                          if ((_DWORD)result)
                            v307 = result;
                          v267 = v378;
                          if (v307)
                          {
                            v281 = v307 >> 31;
LABEL_384:
                            v270 = v381;
                            if ((v281 & 1) != 0)
                              goto LABEL_376;
                            goto LABEL_377;
                          }
                        }
                        v270 = v381;
                        if (v274 < v275)
                        {
LABEL_376:
                          ++v268;
                          v269 = v273;
                        }
                      }
                      else
                      {
LABEL_401:
                        v270 = v381;
                        if (v288)
                          goto LABEL_376;
                      }
LABEL_377:
                      *v271 = *v268;
                    }
                    while (v269 <= v270);
                    v308 = a2 - 1;
                    v74 = v268 == --a2;
                    if (v74)
                    {
                      *v268 = v373;
                      v9 = v375;
                    }
                    else
                    {
                      *v268 = *v308;
                      *v308 = v373;
                      v9 = v375;
                      v309 = (char *)v268 - (char *)v375 + 8;
                      if (v309 >= 9)
                      {
                        v310 = ((unint64_t)v309 >> 3) - 2;
                        v311 = v310 >> 1;
                        v312 = &v375[v310 >> 1];
                        v313 = *v312;
                        v314 = *v268;
                        v315 = *(_QWORD *)(*v312 + 8);
                        v316 = *(_QWORD *)(*v268 + 8);
                        if (v315 != v316
                          && (v317 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v315 + 640))(*(_QWORD *)(*v312 + 8)),
                              v74 = v317 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v316 + 640))(v316),
                              v9 = v375,
                              v74))
                        {
                          result = md::Label::collisionPriorityCmp(v313, 0, v314, 0, 0);
                          v267 = v378;
                          if ((result & 1) != 0)
                          {
LABEL_436:
                            v319 = *v268;
                            *v268 = *v312;
                            if (v310 >= 2)
                            {
                              while (1)
                              {
                                v322 = v311 - 1;
                                v311 = (v311 - 1) >> 1;
                                v320 = &v9[v311];
                                v323 = *v320;
                                v324 = *(_QWORD *)(*v320 + 8);
                                v325 = *(_QWORD *)(v319 + 8);
                                if (v324 != v325
                                  && (v326 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v324 + 640))(*(_QWORD *)(*v320 + 8)),
                                      v74 = v326 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v325 + 640))(v325),
                                      v9 = v375,
                                      v74))
                                {
                                  result = md::Label::collisionPriorityCmp(v323, 0, v319, 0, 0);
                                  if ((result & 1) == 0)
                                    break;
                                }
                                else
                                {
                                  v321 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v324 + 640))(v324);
                                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v325 + 640))(v325);
                                  if (v321 <= result)
                                    break;
                                }
                                *v312 = *v320;
                                v312 = v320;
                                if (v322 <= 1)
                                  goto LABEL_438;
                              }
                            }
                            v320 = v312;
LABEL_438:
                            *v320 = v319;
                            v267 = v378;
                          }
                        }
                        else
                        {
                          v318 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v315 + 640))(v315);
                          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v316 + 640))(v316);
                          v267 = v378;
                          if (v318 > result)
                            goto LABEL_436;
                        }
                      }
                    }
                    v60 = v267-- <= 2;
                    if (v60)
                      return result;
                  }
                }
              }
            }
            return result;
          }
          if ((unint64_t)v10 < 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(&v9[v11 >> 1], v9, v7);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(v9, &v9[v11 >> 1], v7);
            v12 = v11 >> 1;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(v9 + 1, &v9[v12 - 1], a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(v9 + 2, &v9[v12 + 1], a2 - 3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(&v9[v12 - 1], &v9[v12], &v9[v12 + 1]);
            v13 = *v9;
            *v9 = v9[v12];
            v9[v12] = v13;
          }
          v376 = a3 - 1;
          if ((a4 & 1) == 0)
          {
            v15 = *(v9 - 1);
            v14 = *v9;
            v16 = *(_QWORD *)(v15 + 8);
            v17 = *(_QWORD *)(*v9 + 8);
            if (v16 == v17
              || (v18 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v16 + 640))(*(_QWORD *)(v15 + 8)),
                  v18 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 640))(v17)))
            {
              v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 640))(v16);
              if (v24 > (*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 640))(v17))
                goto LABEL_18;
            }
            else if (md::Label::collisionPriorityCmp(v15, 0, v14, 0, 0))
            {
              goto LABEL_18;
            }
            v19 = *v9;
            v20 = *v7;
            v21 = *(_QWORD *)(*v9 + 8);
            v22 = *(_QWORD *)(*v7 + 8);
            if (v21 == v22
              || (v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 640))(v21),
                  v23 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 640))(v22)))
            {
              v125 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 640))(v21);
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 640))(v22);
              if (v125 > result)
              {
LABEL_167:
                for (i = v375 + 1; ; ++i)
                {
                  v127 = *i;
                  v128 = *(_QWORD *)(v19 + 8);
                  v129 = *(_QWORD *)(*i + 8);
                  if (v128 == v129
                    || (v130 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v128 + 640))(*(_QWORD *)(v19 + 8)),
                        v130 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v129 + 640))(v129)))
                  {
                    v126 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v128 + 640))(v128);
                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v129 + 640))(v129);
                    if (v126 > result)
                      goto LABEL_173;
                  }
                  else
                  {
                    result = md::Label::collisionPriorityCmp(v19, 0, v127, 0, 0);
                    if ((result & 1) != 0)
                      goto LABEL_173;
                  }
                }
              }
            }
            else
            {
              result = md::Label::collisionPriorityCmp(v19, 0, v20, 0, 0);
              if ((result & 1) != 0)
                goto LABEL_167;
            }
            for (i = v375 + 1; i < a2; ++i)
            {
              v121 = *i;
              v122 = *(_QWORD *)(v19 + 8);
              v123 = *(_QWORD *)(*i + 8);
              if (v122 == v123
                || (v124 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v122 + 640))(*(_QWORD *)(v19 + 8)),
                    v124 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v123 + 640))(v123)))
              {
                v120 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v122 + 640))(v122);
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v123 + 640))(v123);
                if (v120 > result)
                  break;
              }
              else
              {
                result = md::Label::collisionPriorityCmp(v19, 0, v121, 0, 0);
                if ((result & 1) != 0)
                  break;
              }
            }
LABEL_173:
            j = a2;
            if (i < a2)
            {
              for (j = v7; ; --j)
              {
                v133 = *j;
                v134 = *(_QWORD *)(v19 + 8);
                v135 = *(_QWORD *)(*j + 8);
                if (v134 == v135
                  || (v136 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v134 + 640))(*(_QWORD *)(v19 + 8)),
                      v136 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v135 + 640))(v135)))
                {
                  v132 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v134 + 640))(v134);
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 640))(v135);
                  if (v132 <= result)
                    break;
                }
                else
                {
                  result = md::Label::collisionPriorityCmp(v19, 0, v133, 0, 0);
                  if ((result & 1) == 0)
                    break;
                }
              }
            }
            if (i < j)
            {
              a3 = v376;
              while (1)
              {
                v137 = *i;
                *i++ = *j;
                *j = v137;
                while (1)
                {
                  v139 = *i;
                  v140 = *(_QWORD *)(v19 + 8);
                  v141 = *(_QWORD *)(*i + 8);
                  if (v140 == v141)
                    break;
                  v142 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v140 + 640))(*(_QWORD *)(v19 + 8));
                  if (v142 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v141 + 640))(v141))
                    break;
                  v143 = atomic_load((unsigned __int8 *)(v19 + 1240));
                  v144 = atomic_load((unsigned __int8 *)(v139 + 1240));
                  if ((v143 & 1) == (v144 & 1))
                  {
                    if (*(_BYTE *)(v19 + 1248))
                      v146 = 724;
                    else
                      v146 = 720;
                    v147 = *(_DWORD *)(v19 + v146);
                    if (*(_BYTE *)(v139 + 1248))
                      v148 = 724;
                    else
                      v148 = 720;
                    v149 = *(_DWORD *)(v139 + v148);
                    v150 = v147 < v149;
                    if (v147 != v149)
                      goto LABEL_203;
                    v151 = *(float *)(v19 + 728);
                    v152 = *(float *)(v139 + 728);
                    v150 = v151 < v152;
                    if (v151 != v152)
                      goto LABEL_203;
                    v153 = *(float *)(v19 + 740);
                    v154 = *(float *)(v139 + 740);
                    v150 = v153 < v154;
                    if (v153 != v154)
                      goto LABEL_203;
                    v155 = *(_DWORD *)(v19 + 60);
                    v156 = *(_DWORD *)(v139 + 60);
                    v150 = v155 < v156;
                    if (v155 != v156)
                      goto LABEL_203;
                    v157 = *(unsigned __int8 *)(v19 + 1222);
                    v158 = *(unsigned __int8 *)(v139 + 1222);
                    if (v157 != v158)
                    {
                      if (v157 > v158)
                        goto LABEL_235;
                      goto LABEL_185;
                    }
                    v159 = *(float *)(v19 + 196);
                    v160 = *(float *)(v139 + 196);
                    v150 = v159 < v160;
                    if (v159 == v160)
                    {
                      v161 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v19 + 8) + 472))(*(_QWORD *)(v19 + 8), 0);
                      v162 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v139 + 8) + 472))(*(_QWORD *)(v139 + 8), 0);
                      LOBYTE(v163) = v161 != 0;
                      if (!(v161 | v162))
                        goto LABEL_232;
                      if (v161 && v162)
                      {
                        if (*(char *)(v161 + 23) < 0)
                        {
                          v165 = v161;
                          v161 = *(_QWORD *)v161;
                          v164 = *(_QWORD *)(v165 + 8);
                        }
                        else
                        {
                          v164 = *(unsigned __int8 *)(v161 + 23);
                        }
                        v166 = *(char *)(v162 + 23);
                        if (v166 >= 0)
                          v167 = *(unsigned __int8 *)(v162 + 23);
                        else
                          v167 = *(_QWORD *)(v162 + 8);
                        if (v166 >= 0)
                          v168 = (const void *)v162;
                        else
                          v168 = *(const void **)v162;
                        if (v167 >= v164)
                          v169 = v164;
                        else
                          v169 = v167;
                        v170 = memcmp((const void *)v161, v168, v169);
                        if (v164 < v167)
                          v171 = -1;
                        else
                          v171 = v167 < v164;
                        if (v170)
                          v171 = v170;
                        v7 = a2 - 1;
                        if (!v171)
                        {
LABEL_232:
                          if (v19 < v139)
                            goto LABEL_235;
                          goto LABEL_185;
                        }
                        v163 = v171 >> 31;
                      }
                      if ((v163 & 1) != 0)
                        goto LABEL_235;
                    }
                    else
                    {
LABEL_203:
                      if (v150)
                        goto LABEL_235;
                    }
                  }
                  else
                  {
                    v145 = atomic_load((unsigned __int8 *)(v19 + 1240));
                    if ((v145 & 1) != 0)
                      goto LABEL_235;
                  }
LABEL_185:
                  ++i;
                }
                v138 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v140 + 640))(v140);
                if (v138 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v141 + 640))(v141))
                  goto LABEL_185;
                do
                {
                  while (1)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        while (1)
                        {
                          while (1)
                          {
                            while (1)
                            {
                              while (1)
                              {
                                while (1)
                                {
LABEL_235:
                                  while (1)
                                  {
                                    v174 = *--j;
                                    v173 = v174;
                                    v175 = *(_QWORD *)(v19 + 8);
                                    v176 = *(_QWORD *)(v174 + 8);
                                    if (v175 != v176)
                                    {
                                      v177 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v175 + 640))(*(_QWORD *)(v19 + 8));
                                      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v176 + 640))(v176);
                                      if (v177 == (_DWORD)result)
                                        break;
                                    }
                                    v172 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v175 + 640))(v175);
                                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v176 + 640))(v176);
                                    if (v172 <= result)
                                      goto LABEL_182;
                                  }
                                  v178 = atomic_load((unsigned __int8 *)(v19 + 1240));
                                  v179 = atomic_load((unsigned __int8 *)(v173 + 1240));
                                  if ((v178 & 1) == (v179 & 1))
                                    break;
                                  v180 = atomic_load((unsigned __int8 *)(v19 + 1240));
                                  if ((v180 & 1) == 0)
                                    goto LABEL_182;
                                }
                                v181 = *(_BYTE *)(v19 + 1248) ? 724 : 720;
                                v182 = *(_DWORD *)(v19 + v181);
                                v183 = *(_BYTE *)(v173 + 1248) ? 724 : 720;
                                v184 = *(_DWORD *)(v173 + v183);
                                if (v182 == v184)
                                  break;
                                if (v182 >= v184)
                                  goto LABEL_182;
                              }
                              v185 = *(float *)(v19 + 728);
                              v186 = *(float *)(v173 + 728);
                              if (v185 == v186)
                                break;
                              if (v185 >= v186)
                                goto LABEL_182;
                            }
                            v187 = *(float *)(v19 + 740);
                            v188 = *(float *)(v173 + 740);
                            if (v187 == v188)
                              break;
                            if (v187 >= v188)
                              goto LABEL_182;
                          }
                          v189 = *(_DWORD *)(v19 + 60);
                          v190 = *(_DWORD *)(v173 + 60);
                          if (v189 == v190)
                            break;
                          if (v189 >= v190)
                            goto LABEL_182;
                        }
                        v191 = *(unsigned __int8 *)(v19 + 1222);
                        v192 = *(unsigned __int8 *)(v173 + 1222);
                        if (v191 == v192)
                          break;
                        if (v191 <= v192)
                          goto LABEL_182;
                      }
                      v193 = *(float *)(v19 + 196);
                      v194 = *(float *)(v173 + 196);
                      if (v193 == v194)
                        break;
                      if (v193 >= v194)
                        goto LABEL_182;
                    }
                    v195 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v19 + 8) + 472))(*(_QWORD *)(v19 + 8), 0);
                    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v173 + 8) + 472))(*(_QWORD *)(v173 + 8), 0);
                    v196 = v195 != 0;
                    if (!(v195 | result))
                      break;
                    if (!v195 || !result)
                      goto LABEL_286;
                    if (*(char *)(v195 + 23) < 0)
                    {
                      v198 = v195;
                      v195 = *(_QWORD *)v195;
                      v197 = *(_QWORD *)(v198 + 8);
                    }
                    else
                    {
                      v197 = *(unsigned __int8 *)(v195 + 23);
                    }
                    v199 = *(char *)(result + 23);
                    if (v199 >= 0)
                      v200 = *(unsigned __int8 *)(result + 23);
                    else
                      v200 = *(_QWORD *)(result + 8);
                    if (v199 >= 0)
                      v201 = (const void *)result;
                    else
                      v201 = *(const void **)result;
                    if (v200 >= v197)
                      v202 = v197;
                    else
                      v202 = v200;
                    result = memcmp((const void *)v195, v201, v202);
                    if (v197 < v200)
                      v203 = -1;
                    else
                      v203 = v200 < v197;
                    if ((_DWORD)result)
                      v203 = result;
                    v7 = a2 - 1;
                    if (!v203)
                      break;
                    v196 = v203 >> 31;
LABEL_286:
                    if (!v196)
                      goto LABEL_182;
                  }
                }
                while (v19 < v173);
LABEL_182:
                if (i >= j)
                  goto LABEL_291;
              }
            }
            a3 = v376;
LABEL_291:
            v204 = i - 1;
            if (i - 1 != v375)
              *v375 = *v204;
            a4 = 0;
            *v204 = v19;
            v6 = a2;
            continue;
          }
LABEL_18:
          v25 = v9 + 1;
          v26 = *v9;
          while (2)
          {
            v28 = *v25;
            v29 = *(_QWORD *)(*v25 + 8);
            v30 = *(_QWORD *)(v26 + 8);
            if (v29 == v30
              || (v31 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v29 + 640))(*(_QWORD *)(*v25 + 8)),
                  v31 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 640))(v30)))
            {
              v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 640))(v29);
              if (v27 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 640))(v30))
                goto LABEL_24;
LABEL_20:
              ++v25;
              continue;
            }
            break;
          }
          if (md::Label::collisionPriorityCmp(v28, 0, v26, 0, 0))
            goto LABEL_20;
LABEL_24:
          k = v7;
          v379 = v25 - 1;
          if (v25 - 1 != v9)
          {
            while (1)
            {
              v34 = *k;
              v35 = *(_QWORD *)(*k + 8);
              v36 = *(_QWORD *)(v26 + 8);
              if (v35 == v36
                || (v37 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v35 + 640))(*(_QWORD *)(*k + 8)),
                    v37 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 640))(v36)))
              {
                v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 640))(v35);
                if (v33 > (*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 640))(v36))
                  goto LABEL_41;
              }
              else if (md::Label::collisionPriorityCmp(v34, 0, v26, 0, 0))
              {
                goto LABEL_41;
              }
              --k;
            }
          }
          k = a2;
          if (v25 < a2)
          {
            for (k = v7; ; --k)
            {
              v38 = *k;
              v39 = *(_QWORD *)(*k + 8);
              v40 = *(_QWORD *)(v26 + 8);
              if (v39 == v40
                || (v41 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v39 + 640))(*(_QWORD *)(*k + 8)),
                    v41 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v40 + 640))(v40)))
              {
                v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 640))(v39);
                v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 640))(v40);
                if (v25 >= k || v43 > v44)
                  break;
              }
              else
              {
                v42 = md::Label::collisionPriorityCmp(v38, 0, v26, 0, 0);
                if (v25 >= k || v42)
                  break;
              }
            }
          }
LABEL_41:
          if (v25 < k)
          {
            v45 = (unint64_t)v25;
            v46 = k;
            while (1)
            {
              v47 = *(_QWORD *)v45;
              *(_QWORD *)v45 = *v46;
              v45 += 8;
              *v46 = v47;
              while (1)
              {
                v49 = *(_QWORD *)v45;
                v50 = *(_QWORD *)(*(_QWORD *)v45 + 8);
                v51 = *(_QWORD *)(v26 + 8);
                if (v50 == v51
                  || (v52 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v50 + 640))(*(_QWORD *)(*(_QWORD *)v45 + 8)),
                      v52 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v51 + 640))(v51)))
                {
                  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 640))(v50);
                  if (v48 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v51 + 640))(v51))
                    goto LABEL_94;
                  goto LABEL_46;
                }
                v53 = atomic_load((unsigned __int8 *)(v49 + 1240));
                v54 = atomic_load((unsigned __int8 *)(v26 + 1240));
                if ((v53 & 1) != (v54 & 1))
                {
                  v55 = atomic_load((unsigned __int8 *)(v49 + 1240));
                  if ((v55 & 1) == 0)
                    goto LABEL_94;
                  goto LABEL_46;
                }
                if (*(_BYTE *)(v49 + 1248))
                  v56 = 724;
                else
                  v56 = 720;
                v57 = *(_DWORD *)(v49 + v56);
                if (*(_BYTE *)(v26 + 1248))
                  v58 = 724;
                else
                  v58 = 720;
                v59 = *(_DWORD *)(v26 + v58);
                v60 = v57 < v59;
                if (v57 != v59)
                  goto LABEL_64;
                v61 = *(float *)(v49 + 728);
                v62 = *(float *)(v26 + 728);
                v60 = v61 < v62;
                if (v61 != v62
                  || (v63 = *(float *)(v49 + 740), v64 = *(float *)(v26 + 740), v60 = v63 < v64, v63 != v64)
                  || (v65 = *(_DWORD *)(v49 + 60), v66 = *(_DWORD *)(v26 + 60), v60 = v65 < v66, v65 != v66))
                {
LABEL_64:
                  if (!v60)
                    goto LABEL_94;
                  goto LABEL_46;
                }
                v67 = *(unsigned __int8 *)(v49 + 1222);
                v68 = *(unsigned __int8 *)(v26 + 1222);
                if (v67 != v68)
                {
                  if (v67 <= v68)
                    goto LABEL_94;
                  goto LABEL_46;
                }
                v69 = *(float *)(v49 + 196);
                v70 = *(float *)(v26 + 196);
                v60 = v69 < v70;
                if (v69 != v70)
                  goto LABEL_64;
                v71 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v49 + 8) + 472))(*(_QWORD *)(v49 + 8), 0);
                v72 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v26 + 8) + 472))(*(_QWORD *)(v26 + 8), 0);
                v73 = v71 != 0;
                if (!(v71 | v72))
                  goto LABEL_93;
                v74 = !v71 || v72 == 0;
                if (!v74)
                  break;
LABEL_91:
                if (!v73)
                  goto LABEL_94;
LABEL_46:
                v45 += 8;
              }
              if (*(char *)(v71 + 23) < 0)
              {
                v76 = v71;
                v71 = *(_QWORD *)v71;
                v75 = *(_QWORD *)(v76 + 8);
              }
              else
              {
                v75 = *(unsigned __int8 *)(v71 + 23);
              }
              v77 = *(char *)(v72 + 23);
              if (v77 >= 0)
                v78 = *(unsigned __int8 *)(v72 + 23);
              else
                v78 = *(_QWORD *)(v72 + 8);
              if (v77 >= 0)
                v79 = (const void *)v72;
              else
                v79 = *(const void **)v72;
              if (v78 >= v75)
                v80 = v75;
              else
                v80 = v78;
              v81 = memcmp((const void *)v71, v79, v80);
              v82 = v78 < v75;
              if (v75 < v78)
                v82 = -1;
              if (v81)
                v82 = v81;
              if (v82)
                break;
LABEL_93:
              if (v49 < v26)
                goto LABEL_46;
LABEL_94:
              v379 = (unint64_t *)(v45 - 8);
              while (1)
              {
                while (1)
                {
                  while (1)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        while (1)
                        {
                          while (1)
                          {
                            while (1)
                            {
LABEL_96:
                              while (1)
                              {
                                v85 = *--v46;
                                v84 = v85;
                                v86 = *(_QWORD *)(v85 + 8);
                                v87 = *(_QWORD *)(v26 + 8);
                                if (v86 != v87)
                                {
                                  v88 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v86 + 640))(v86);
                                  if (v88 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v87 + 640))(v87))
                                    break;
                                }
                                v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v86 + 640))(v86);
                                if (v83 > (*(unsigned int (**)(uint64_t))(*(_QWORD *)v87 + 640))(v87))
                                  goto LABEL_43;
                              }
                              v89 = atomic_load((unsigned __int8 *)(v84 + 1240));
                              v90 = atomic_load((unsigned __int8 *)(v26 + 1240));
                              if ((v89 & 1) == (v90 & 1))
                                break;
                              v91 = atomic_load((unsigned __int8 *)(v84 + 1240));
                              if ((v91 & 1) != 0)
                                goto LABEL_43;
                            }
                            v92 = *(_BYTE *)(v84 + 1248) ? 724 : 720;
                            v93 = *(_DWORD *)(v84 + v92);
                            v94 = *(_BYTE *)(v26 + 1248) ? 724 : 720;
                            v95 = *(_DWORD *)(v26 + v94);
                            if (v93 == v95)
                              break;
                            if (v93 < v95)
                              goto LABEL_43;
                          }
                          v96 = *(float *)(v84 + 728);
                          v97 = *(float *)(v26 + 728);
                          if (v96 == v97)
                            break;
                          if (v96 < v97)
                            goto LABEL_43;
                        }
                        v98 = *(float *)(v84 + 740);
                        v99 = *(float *)(v26 + 740);
                        if (v98 == v99)
                          break;
                        if (v98 < v99)
                          goto LABEL_43;
                      }
                      v100 = *(_DWORD *)(v84 + 60);
                      v101 = *(_DWORD *)(v26 + 60);
                      if (v100 == v101)
                        break;
                      if (v100 < v101)
                        goto LABEL_43;
                    }
                    v102 = *(unsigned __int8 *)(v84 + 1222);
                    v103 = *(unsigned __int8 *)(v26 + 1222);
                    if (v102 == v103)
                      break;
                    if (v102 > v103)
                      goto LABEL_43;
                  }
                  v104 = *(float *)(v84 + 196);
                  v105 = *(float *)(v26 + 196);
                  if (v104 == v105)
                    break;
                  if (v104 < v105)
                    goto LABEL_43;
                }
                v106 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v84 + 8) + 472))(*(_QWORD *)(v84 + 8), 0);
                v107 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v26 + 8) + 472))(*(_QWORD *)(v26 + 8), 0);
                LOBYTE(v108) = v106 != 0;
                if (!(v106 | v107))
                  break;
                if (v106)
                  v109 = v107 == 0;
                else
                  v109 = 1;
                if (!v109)
                {
                  if (*(char *)(v106 + 23) < 0)
                  {
                    v111 = v106;
                    v106 = *(_QWORD *)v106;
                    v110 = *(_QWORD *)(v111 + 8);
                  }
                  else
                  {
                    v110 = *(unsigned __int8 *)(v106 + 23);
                  }
                  v112 = *(char *)(v107 + 23);
                  if (v112 >= 0)
                    v113 = *(unsigned __int8 *)(v107 + 23);
                  else
                    v113 = *(_QWORD *)(v107 + 8);
                  if (v112 >= 0)
                    v114 = (const void *)v107;
                  else
                    v114 = *(const void **)v107;
                  if (v113 >= v110)
                    v115 = v110;
                  else
                    v115 = v113;
                  v116 = memcmp((const void *)v106, v114, v115);
                  v117 = v113 < v110;
                  if (v110 < v113)
                    v117 = -1;
                  if (v116)
                    v117 = v116;
                  if (!v117)
                    break;
                  v108 = v117 >> 31;
                }
                if ((v108 & 1) != 0)
                  goto LABEL_43;
              }
              if (v84 >= v26)
                goto LABEL_96;
LABEL_43:
              if (v45 >= (unint64_t)v46)
                goto LABEL_152;
            }
            v73 = v82 >> 31;
            goto LABEL_91;
          }
LABEL_152:
          v5 = (uint64_t)v375;
          if (v379 != v375)
            *v375 = *v379;
          *v379 = v26;
          v118 = v25 >= k;
          v6 = a2;
          v7 = a2 - 1;
          a3 = v376;
          if (!v118)
            goto LABEL_158;
          v119 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(v375, v379);
          i = v379 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(v379 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v119)
              continue;
LABEL_158:
            result = std::__introsort<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **,false>(v375, v379, v376, a4 & 1);
            a4 = 0;
            i = v379 + 1;
            continue;
          }
          a2 = v379;
          if (v119)
            return result;
          goto LABEL_2;
        }
        v211 = v9 + 1;
        v213 = v9 == v6 || v211 == v6;
        if ((a4 & 1) != 0)
        {
          if (v213)
            return result;
          v214 = 0;
          v215 = v9;
LABEL_317:
          v217 = v215;
          v215 = v211;
          v218 = *v217;
          v219 = v217[1];
          v220 = *(_QWORD *)(v219 + 8);
          v221 = *(_QWORD *)(*v217 + 8);
          if (v220 != v221
            && (v222 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v220 + 640))(*(_QWORD *)(v219 + 8)),
                v74 = v222 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v221 + 640))(v221),
                v9 = v375,
                v74))
          {
            result = md::Label::collisionPriorityCmp(v219, 0, v218, 0, 0);
            if ((result & 1) == 0)
              goto LABEL_316;
          }
          else
          {
            v223 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v220 + 640))(v220);
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v221 + 640))(v221);
            if (v223 <= result)
              goto LABEL_316;
          }
          v224 = v217[1];
          v217[1] = *v217;
          v216 = v9;
          if (v217 == v9)
            goto LABEL_315;
          v225 = v214;
          while (1)
          {
            v227 = (unint64_t *)((char *)v9 + v225);
            v228 = *(unint64_t *)((char *)v9 + v225 - 8);
            v229 = *(_QWORD *)(v224 + 8);
            v230 = *(_QWORD *)(v228 + 8);
            if (v229 != v230
              && (v231 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v229 + 640))(*(_QWORD *)(v224 + 8)),
                  v74 = v231 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v230 + 640))(v230),
                  v9 = v375,
                  v74))
            {
              result = md::Label::collisionPriorityCmp(v224, 0, v228, 0, 0);
              if ((result & 1) == 0)
              {
                v216 = (unint64_t *)((char *)v375 + v225);
                goto LABEL_315;
              }
            }
            else
            {
              v226 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v229 + 640))(v229);
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v230 + 640))(v230);
              if (v226 <= result)
              {
                v216 = v217;
LABEL_315:
                *v216 = v224;
LABEL_316:
                v211 = v215 + 1;
                v214 += 8;
                if (v215 + 1 == a2)
                  return result;
                goto LABEL_317;
              }
            }
            --v217;
            *v227 = *(v227 - 1);
            v225 -= 8;
            if (!v225)
            {
              v216 = v9;
              goto LABEL_315;
            }
          }
        }
        if (!v213)
        {
          do
          {
            v327 = v9;
            v9 = v211;
            v328 = *v327;
            v329 = v327[1];
            v330 = *(_QWORD *)(v329 + 8);
            v331 = *(_QWORD *)(*v327 + 8);
            if (v330 != v331
              && (v332 = v211,
                  v333 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v330 + 640))(*(_QWORD *)(v329 + 8)),
                  v74 = v333 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v331 + 640))(v331),
                  v9 = v332,
                  v74))
            {
              result = md::Label::collisionPriorityCmp(v329, 0, v328, 0, 0);
              if ((result & 1) != 0)
                goto LABEL_457;
            }
            else
            {
              v334 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v330 + 640))(v330);
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v331 + 640))(v331);
              if (v334 > result)
              {
LABEL_457:
                v335 = v9;
                v336 = *v9;
                while (1)
                {
                  while (1)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        while (1)
                        {
                          while (1)
                          {
                            while (1)
                            {
                              while (1)
                              {
                                while (1)
                                {
                                  v338 = v327;
                                  v327[1] = *v327;
                                  v340 = *--v327;
                                  v339 = v340;
                                  v341 = *(_QWORD *)(v336 + 8);
                                  v342 = *(_QWORD *)(v340 + 8);
                                  if (v341 != v342)
                                  {
                                    v343 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v341 + 640))(*(_QWORD *)(v336 + 8));
                                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v342 + 640))(v342);
                                    if (v343 == (_DWORD)result)
                                      break;
                                  }
                                  v337 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v341 + 640))(v341);
                                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v342 + 640))(v342);
                                  if (v337 <= result)
                                    goto LABEL_449;
                                }
                                v344 = atomic_load((unsigned __int8 *)(v336 + 1240));
                                v345 = atomic_load((unsigned __int8 *)(v339 + 1240));
                                if ((v344 & 1) == (v345 & 1))
                                  break;
                                v346 = atomic_load((unsigned __int8 *)(v336 + 1240));
                                if ((v346 & 1) == 0)
                                  goto LABEL_449;
                              }
                              v347 = *(_BYTE *)(v336 + 1248) ? 724 : 720;
                              v348 = *(_DWORD *)(v336 + v347);
                              v349 = *(_BYTE *)(v339 + 1248) ? 724 : 720;
                              v350 = *(_DWORD *)(v339 + v349);
                              if (v348 == v350)
                                break;
                              if (v348 >= v350)
                                goto LABEL_449;
                            }
                            v351 = *(float *)(v336 + 728);
                            v352 = *(float *)(v339 + 728);
                            if (v351 == v352)
                              break;
                            if (v351 >= v352)
                              goto LABEL_449;
                          }
                          v353 = *(float *)(v336 + 740);
                          v354 = *(float *)(v339 + 740);
                          if (v353 == v354)
                            break;
                          if (v353 >= v354)
                            goto LABEL_449;
                        }
                        v355 = *(_DWORD *)(v336 + 60);
                        v356 = *(_DWORD *)(v339 + 60);
                        if (v355 == v356)
                          break;
                        if (v355 >= v356)
                          goto LABEL_449;
                      }
                      v357 = *(unsigned __int8 *)(v336 + 1222);
                      v358 = *(unsigned __int8 *)(v339 + 1222);
                      if (v357 == v358)
                        break;
                      if (v357 <= v358)
                        goto LABEL_449;
                    }
                    v359 = *(float *)(v336 + 196);
                    v360 = *(float *)(v339 + 196);
                    if (v359 == v360)
                      break;
                    if (v359 >= v360)
                      goto LABEL_449;
                  }
                  v361 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v336 + 8) + 472))(*(_QWORD *)(v336 + 8), 0);
                  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v339 + 8) + 472))(*(_QWORD *)(v339 + 8), 0);
                  LOBYTE(v362) = v361 != 0;
                  if (!(v361 | result))
                    goto LABEL_511;
                  if (!v361 || !result)
                    goto LABEL_509;
                  if (*(char *)(v361 + 23) < 0)
                  {
                    v364 = v361;
                    v361 = *(_QWORD *)v361;
                    v363 = *(_QWORD *)(v364 + 8);
                  }
                  else
                  {
                    v363 = *(unsigned __int8 *)(v361 + 23);
                  }
                  v365 = *(char *)(result + 23);
                  if (v365 >= 0)
                    v366 = *(unsigned __int8 *)(result + 23);
                  else
                    v366 = *(_QWORD *)(result + 8);
                  if (v365 >= 0)
                    v367 = (const void *)result;
                  else
                    v367 = *(const void **)result;
                  if (v366 >= v363)
                    v368 = v363;
                  else
                    v368 = v366;
                  result = memcmp((const void *)v361, v367, v368);
                  v369 = v366 < v363;
                  if (v363 < v366)
                    v369 = -1;
                  if ((_DWORD)result)
                    v369 = result;
                  if (v369)
                  {
                    v362 = v369 >> 31;
LABEL_509:
                    if ((v362 & 1) == 0)
                      goto LABEL_449;
                  }
                  else
                  {
LABEL_511:
                    if (v336 >= v339)
                    {
LABEL_449:
                      *v338 = v336;
                      v9 = v335;
                      break;
                    }
                  }
                }
              }
            }
            v211 = v9 + 1;
          }
          while (v9 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  unsigned int v38;

  v4 = a2;
  v5 = a1;
  v6 = *a2;
  v7 = *a1;
  v8 = *(_QWORD *)(*a2 + 8);
  v9 = *(_QWORD *)(*a1 + 8);
  if (v8 == v9
    || (v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v8 + 640))(*(_QWORD *)(*a2 + 8)),
        v10 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 640))(v9)))
  {
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 640))(v8);
    if (v17 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 640))(v9))
    {
LABEL_4:
      v11 = *a3;
      v12 = *v4;
      v13 = *(_QWORD *)(*a3 + 8);
      v14 = *(_QWORD *)(*v4 + 8);
      if (v13 == v14
        || (v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v13 + 640))(*(_QWORD *)(*a3 + 8)),
            v15 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 640))(v14)))
      {
        v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 640))(v13);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 640))(v14);
        if (v28 <= result)
          return result;
      }
      else
      {
        result = md::Label::collisionPriorityCmp(v11, 0, v12, 0, 0);
        if ((result & 1) == 0)
          return result;
      }
      v29 = *v4;
      *v4 = *a3;
      *a3 = v29;
      v30 = *v4;
      v31 = *v5;
      v32 = *(_QWORD *)(*v4 + 8);
      v33 = *(_QWORD *)(*v5 + 8);
      if (v32 == v33
        || (v34 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v32 + 640))(*(_QWORD *)(*v4 + 8)),
            v34 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v33 + 640))(v33)))
      {
        v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 640))(v32);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 640))(v33);
        if (v38 <= result)
          return result;
      }
      else
      {
        result = md::Label::collisionPriorityCmp(v30, 0, v31, 0, 0);
        if ((result & 1) == 0)
          return result;
      }
      goto LABEL_24;
    }
  }
  else if (!md::Label::collisionPriorityCmp(v6, 0, v7, 0, 0))
  {
    goto LABEL_4;
  }
  v18 = *a3;
  v19 = *v4;
  v20 = *(_QWORD *)(*a3 + 8);
  v21 = *(_QWORD *)(*v4 + 8);
  if (v20 == v21
    || (v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v20 + 640))(*(_QWORD *)(*a3 + 8)),
        v22 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 640))(v21)))
  {
    v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 640))(v20);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 640))(v21);
    if (v35 <= result)
      goto LABEL_12;
LABEL_22:
    v4 = a3;
    goto LABEL_24;
  }
  result = md::Label::collisionPriorityCmp(v18, 0, v19, 0, 0);
  if ((result & 1) != 0)
    goto LABEL_22;
LABEL_12:
  v23 = *v5;
  *v5 = *v4;
  *v4 = v23;
  v24 = *a3;
  v25 = *(_QWORD *)(*a3 + 8);
  v26 = *(_QWORD *)(v23 + 8);
  if (v25 == v26
    || (v27 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v25 + 640))(*(_QWORD *)(*a3 + 8)),
        v27 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 640))(v26)))
  {
    v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 640))(v25);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 640))(v26);
    v5 = v4;
    v4 = a3;
    if (v36 <= result)
      return result;
  }
  else
  {
    result = md::Label::collisionPriorityCmp(v24, 0, v23, 0, 0);
    v5 = v4;
    v4 = a3;
    if ((result & 1) == 0)
      return result;
  }
LABEL_24:
  v37 = *v5;
  *v5 = *v4;
  *v4 = v37;
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unint64_t v29;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(a1, a2, a3);
  v8 = *a4;
  v9 = *a3;
  v10 = *(_QWORD *)(*a4 + 8);
  v11 = *(_QWORD *)(*a3 + 8);
  if (v10 == v11
    || (v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v10 + 640))(*(_QWORD *)(*a4 + 8)),
        v12 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 640))(v11)))
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 640))(v10);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 640))(v11);
    if (v14 <= result)
      return result;
  }
  else
  {
    result = md::Label::collisionPriorityCmp(v8, 0, v9, 0, 0);
    if ((result & 1) == 0)
      return result;
  }
  v15 = *a3;
  *a3 = *a4;
  *a4 = v15;
  v16 = *a3;
  v17 = *a2;
  v18 = *(_QWORD *)(*a3 + 8);
  v19 = *(_QWORD *)(*a2 + 8);
  if (v18 == v19
    || (v20 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v18 + 640))(*(_QWORD *)(*a3 + 8)),
        v20 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 640))(v19)))
  {
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 640))(v18);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 640))(v19);
    if (v21 <= result)
      return result;
  }
  else
  {
    result = md::Label::collisionPriorityCmp(v16, 0, v17, 0, 0);
    if ((result & 1) == 0)
      return result;
  }
  v22 = *a2;
  *a2 = *a3;
  *a3 = v22;
  v23 = *a2;
  v24 = *a1;
  v25 = *(_QWORD *)(*a2 + 8);
  v26 = *(_QWORD *)(*a1 + 8);
  if (v25 == v26
    || (v27 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v25 + 640))(*(_QWORD *)(*a2 + 8)),
        v27 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 640))(v26)))
  {
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 640))(v25);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 640))(v26);
    if (v28 <= result)
      return result;
    goto LABEL_16;
  }
  result = md::Label::collisionPriorityCmp(v23, 0, v24, 0, 0);
  if ((result & 1) != 0)
  {
LABEL_16:
    v29 = *a1;
    *a1 = *a2;
    *a2 = v29;
  }
  return result;
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **,0>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  unint64_t v38;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(a1, a2, a3, a4);
  v10 = *a5;
  v11 = *a4;
  v12 = *(_QWORD *)(*a5 + 8);
  v13 = *(_QWORD *)(*a4 + 8);
  if (v12 == v13
    || (v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v12 + 640))(*(_QWORD *)(*a5 + 8)),
        v14 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 640))(v13)))
  {
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 640))(v12);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 640))(v13);
    if (v16 <= result)
      return result;
  }
  else
  {
    result = md::Label::collisionPriorityCmp(v10, 0, v11, 0, 0);
    if ((result & 1) == 0)
      return result;
  }
  v17 = *a4;
  *a4 = *a5;
  *a5 = v17;
  v18 = *a4;
  v19 = *a3;
  v20 = *(_QWORD *)(*a4 + 8);
  v21 = *(_QWORD *)(*a3 + 8);
  if (v20 == v21
    || (v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v20 + 640))(*(_QWORD *)(*a4 + 8)),
        v22 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 640))(v21)))
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 640))(v20);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 640))(v21);
    if (v23 <= result)
      return result;
  }
  else
  {
    result = md::Label::collisionPriorityCmp(v18, 0, v19, 0, 0);
    if ((result & 1) == 0)
      return result;
  }
  v24 = *a3;
  *a3 = *a4;
  *a4 = v24;
  v25 = *a3;
  v26 = *a2;
  v27 = *(_QWORD *)(*a3 + 8);
  v28 = *(_QWORD *)(*a2 + 8);
  if (v27 == v28
    || (v29 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v27 + 640))(*(_QWORD *)(*a3 + 8)),
        v29 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 640))(v28)))
  {
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 640))(v27);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 640))(v28);
    if (v30 <= result)
      return result;
  }
  else
  {
    result = md::Label::collisionPriorityCmp(v25, 0, v26, 0, 0);
    if ((result & 1) == 0)
      return result;
  }
  v31 = *a2;
  *a2 = *a3;
  *a3 = v31;
  v32 = *a2;
  v33 = *a1;
  v34 = *(_QWORD *)(*a2 + 8);
  v35 = *(_QWORD *)(*a1 + 8);
  if (v34 == v35
    || (v36 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v34 + 640))(*(_QWORD *)(*a2 + 8)),
        v36 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v35 + 640))(v35)))
  {
    v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 640))(v34);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 640))(v35);
    if (v37 <= result)
      return result;
    goto LABEL_21;
  }
  result = md::Label::collisionPriorityCmp(v32, 0, v33, 0, 0);
  if ((result & 1) != 0)
  {
LABEL_21:
    v38 = *a1;
    *a1 = *a2;
    *a2 = v38;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(unint64_t *a1, unint64_t *a2)
{
  unint64_t *v2;
  uint64_t v3;
  _BOOL8 result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t *v30;

  v2 = a2;
  v3 = a2 - a1;
  result = 1;
  switch(v3)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v5 = *(a2 - 1);
      v6 = *a1;
      v7 = *(_QWORD *)(v5 + 8);
      v8 = *(_QWORD *)(*a1 + 8);
      if (v7 == v8
        || (v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 640))(*(_QWORD *)(v5 + 8)),
            v9 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 640))(v8)))
      {
        v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 640))(v7);
        if (v28 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 640))(v8))
          return 1;
      }
      else if (!md::Label::collisionPriorityCmp(v5, 0, v6, 0, 0))
      {
        return 1;
      }
      v29 = *a1;
      *a1 = *(v2 - 1);
      *(v2 - 1) = v29;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(a1, a1 + 1, a1 + 2);
      v11 = a1 + 3;
      if (a1 + 3 == v2)
        return 1;
      v12 = 0;
      v13 = 0;
      v30 = v2;
      break;
  }
  while (2)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = *(_QWORD *)(*v11 + 8);
    v18 = *(_QWORD *)(*v10 + 8);
    if (v17 == v18
      || (v19 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v17 + 640))(*(_QWORD *)(*v11 + 8)),
          v19 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 640))(v18)))
    {
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 640))(v17);
      if (v20 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 640))(v18))
        goto LABEL_11;
    }
    else if (!md::Label::collisionPriorityCmp(v15, 0, v16, 0, 0))
    {
      goto LABEL_11;
    }
    v21 = *v11;
    *v11 = *v10;
    v14 = a1;
    if (v10 == a1)
      goto LABEL_10;
    v22 = v12;
    while (1)
    {
      v24 = *(unint64_t *)((char *)a1 + v22 + 8);
      v25 = *(_QWORD *)(v21 + 8);
      v26 = *(_QWORD *)(v24 + 8);
      if (v25 == v26)
        break;
      v27 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v25 + 640))(*(_QWORD *)(v21 + 8));
      if (v27 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 640))(v26))
        break;
      if (!md::Label::collisionPriorityCmp(v21, 0, v24, 0, 0))
      {
        v14 = v10;
        goto LABEL_9;
      }
LABEL_20:
      --v10;
      *(unint64_t *)((char *)a1 + v22 + 16) = *(unint64_t *)((char *)a1 + v22 + 8);
      v22 -= 8;
      if (v22 == -16)
      {
        v14 = a1;
        goto LABEL_9;
      }
    }
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 640))(v25);
    if (v23 > (*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 640))(v26))
      goto LABEL_20;
    v14 = (unint64_t *)((char *)a1 + v22 + 16);
LABEL_9:
    v2 = v30;
LABEL_10:
    *v14 = v21;
    if (++v13 == 8)
      return v11 + 1 == v2;
LABEL_11:
    v10 = v11;
    v12 += 8;
    if (++v11 != v2)
      continue;
    return 1;
  }
}

void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  unsigned int v12;
  uint64_t v13;
  double v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  unsigned int v20;
  uint64_t v21;
  double v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  double v38;

  v8 = *(_QWORD *)(*a2 + 8);
  v9 = *(_QWORD *)(*a1 + 8);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a4 + 168) + 32);
  v11 = (*(double (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
  v12 = vabdd_f64(v11, (*(double (**)(uint64_t))(*(_QWORD *)v8 + 632))(v8));
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a4 + 168) + 32);
  v14 = (*(double (**)(uint64_t))(*(_QWORD *)v13 + 72))(v13);
  v15 = vabdd_f64(v14, (*(double (**)(uint64_t))(*(_QWORD *)v9 + 632))(v9));
  v16 = *(_QWORD *)(*a3 + 8);
  v17 = *(_QWORD *)(*a2 + 8);
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a4 + 168) + 32);
  v19 = (*(double (**)(uint64_t))(*(_QWORD *)v18 + 72))(v18);
  v20 = vabdd_f64(v19, (*(double (**)(uint64_t))(*(_QWORD *)v16 + 632))(v16));
  v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a4 + 168) + 32);
  v22 = (*(double (**)(uint64_t))(*(_QWORD *)v21 + 72))(v21);
  v23 = vabdd_f64(v22, (*(double (**)(uint64_t))(*(_QWORD *)v17 + 632))(v17));
  if (v12 >= v15)
  {
    if (v20 < v23)
    {
      v25 = *a2;
      *a2 = *a3;
      *a3 = v25;
      v26 = *(_QWORD *)(*a2 + 8);
      v27 = *(_QWORD *)(*a1 + 8);
      v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a4 + 168) + 32);
      v29 = (*(double (**)(uint64_t))(*(_QWORD *)v28 + 72))(v28);
      LODWORD(v26) = vabdd_f64(v29, (*(double (**)(uint64_t))(*(_QWORD *)v26 + 632))(v26));
      v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a4 + 168) + 32);
      v31 = (*(double (**)(uint64_t))(*(_QWORD *)v30 + 72))(v30);
      if (v26 < vabdd_f64(v31, (*(double (**)(uint64_t))(*(_QWORD *)v27 + 632))(v27)))
      {
        v32 = *a1;
        *a1 = *a2;
        *a2 = v32;
      }
    }
  }
  else
  {
    v24 = *a1;
    if (v20 >= v23)
    {
      *a1 = *a2;
      *a2 = v24;
      v33 = *(_QWORD *)(*a3 + 8);
      v34 = *(_QWORD *)(v24 + 8);
      v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a4 + 168) + 32);
      v36 = (*(double (**)(uint64_t))(*(_QWORD *)v35 + 72))(v35);
      LODWORD(v33) = vabdd_f64(v36, (*(double (**)(uint64_t))(*(_QWORD *)v33 + 632))(v33));
      v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a4 + 168) + 32);
      v38 = (*(double (**)(uint64_t))(*(_QWORD *)v37 + 72))(v37);
      if (v33 >= vabdd_f64(v38, (*(double (**)(uint64_t))(*(_QWORD *)v34 + 632))(v34)))return;
      v24 = *a2;
      *a2 = *a3;
    }
    else
    {
      *a1 = *a3;
    }
    *a3 = v24;
  }
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(a1, a2, a3, a5);
  v10 = *(_QWORD *)(*a4 + 8);
  v11 = *(_QWORD *)(*a3 + 8);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 168) + 32);
  v13 = (*(double (**)(uint64_t))(*(_QWORD *)v12 + 72))(v12);
  LODWORD(v10) = vabdd_f64(v13, (*(double (**)(uint64_t))(*(_QWORD *)v10 + 632))(v10));
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 168) + 32);
  v15 = (*(double (**)(uint64_t))(*(_QWORD *)v14 + 72))(v14);
  if (v10 < vabdd_f64(v15, (*(double (**)(uint64_t))(*(_QWORD *)v11 + 632))(v11)))
  {
    v16 = *a3;
    *a3 = *a4;
    *a4 = v16;
    v17 = *(_QWORD *)(*a3 + 8);
    v18 = *(_QWORD *)(*a2 + 8);
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 168) + 32);
    v20 = (*(double (**)(uint64_t))(*(_QWORD *)v19 + 72))(v19);
    LODWORD(v17) = vabdd_f64(v20, (*(double (**)(uint64_t))(*(_QWORD *)v17 + 632))(v17));
    v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 168) + 32);
    v22 = (*(double (**)(uint64_t))(*(_QWORD *)v21 + 72))(v21);
    if (v17 < vabdd_f64(v22, (*(double (**)(uint64_t))(*(_QWORD *)v18 + 632))(v18)))
    {
      v23 = *a2;
      *a2 = *a3;
      *a3 = v23;
      v24 = *(_QWORD *)(*a2 + 8);
      v25 = *(_QWORD *)(*a1 + 8);
      v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 168) + 32);
      v27 = (*(double (**)(uint64_t))(*(_QWORD *)v26 + 72))(v26);
      LODWORD(v24) = vabdd_f64(v27, (*(double (**)(uint64_t))(*(_QWORD *)v24 + 632))(v24));
      v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 168) + 32);
      v29 = (*(double (**)(uint64_t))(*(_QWORD *)v28 + 72))(v28);
      if (v24 < vabdd_f64(v29, (*(double (**)(uint64_t))(*(_QWORD *)v25 + 632))(v25)))
      {
        v30 = *a1;
        *a1 = *a2;
        *a2 = v30;
      }
    }
  }
}

void std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(a1, a2, a3, a4, a6);
  v12 = *(_QWORD *)(*a5 + 8);
  v13 = *(_QWORD *)(*a4 + 8);
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a6 + 168) + 32);
  v15 = (*(double (**)(uint64_t))(*(_QWORD *)v14 + 72))(v14);
  LODWORD(v12) = vabdd_f64(v15, (*(double (**)(uint64_t))(*(_QWORD *)v12 + 632))(v12));
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a6 + 168) + 32);
  v17 = (*(double (**)(uint64_t))(*(_QWORD *)v16 + 72))(v16);
  if (v12 < vabdd_f64(v17, (*(double (**)(uint64_t))(*(_QWORD *)v13 + 632))(v13)))
  {
    v18 = *a4;
    *a4 = *a5;
    *a5 = v18;
    v19 = *(_QWORD *)(*a4 + 8);
    v20 = *(_QWORD *)(*a3 + 8);
    v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a6 + 168) + 32);
    v22 = (*(double (**)(uint64_t))(*(_QWORD *)v21 + 72))(v21);
    LODWORD(v19) = vabdd_f64(v22, (*(double (**)(uint64_t))(*(_QWORD *)v19 + 632))(v19));
    v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a6 + 168) + 32);
    v24 = (*(double (**)(uint64_t))(*(_QWORD *)v23 + 72))(v23);
    if (v19 < vabdd_f64(v24, (*(double (**)(uint64_t))(*(_QWORD *)v20 + 632))(v20)))
    {
      v25 = *a3;
      *a3 = *a4;
      *a4 = v25;
      v26 = *(_QWORD *)(*a3 + 8);
      v27 = *(_QWORD *)(*a2 + 8);
      v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a6 + 168) + 32);
      v29 = (*(double (**)(uint64_t))(*(_QWORD *)v28 + 72))(v28);
      LODWORD(v26) = vabdd_f64(v29, (*(double (**)(uint64_t))(*(_QWORD *)v26 + 632))(v26));
      v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a6 + 168) + 32);
      v31 = (*(double (**)(uint64_t))(*(_QWORD *)v30 + 72))(v30);
      if (v26 < vabdd_f64(v31, (*(double (**)(uint64_t))(*(_QWORD *)v27 + 632))(v27)))
      {
        v32 = *a2;
        *a2 = *a3;
        *a3 = v32;
        v33 = *(_QWORD *)(*a2 + 8);
        v34 = *(_QWORD *)(*a1 + 8);
        v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a6 + 168) + 32);
        v36 = (*(double (**)(uint64_t))(*(_QWORD *)v35 + 72))(v35);
        LODWORD(v33) = vabdd_f64(v36, (*(double (**)(uint64_t))(*(_QWORD *)v33 + 632))(v33));
        v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a6 + 168) + 32);
        v38 = (*(double (**)(uint64_t))(*(_QWORD *)v37 + 72))(v37);
        if (v33 < vabdd_f64(v38, (*(double (**)(uint64_t))(*(_QWORD *)v34 + 632))(v34)))
        {
          v39 = *a1;
          *a1 = *a2;
          *a2 = v39;
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  double v34;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(_QWORD *)(*(a2 - 1) + 8);
      v9 = *(_QWORD *)(*a1 + 8);
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
      v11 = (*(double (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
      LODWORD(v8) = vabdd_f64(v11, (*(double (**)(uint64_t))(*(_QWORD *)v8 + 632))(v8));
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
      v13 = (*(double (**)(uint64_t))(*(_QWORD *)v12 + 72))(v12);
      if (v8 < vabdd_f64(v13, (*(double (**)(uint64_t))(*(_QWORD *)v9 + 632))(v9)))
      {
        v14 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v14;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v15 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(a1, a1 + 1, a1 + 2, a3);
      v16 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v17 = 0;
      v18 = 0;
      break;
  }
  while (1)
  {
    v20 = *v15;
    v21 = *(_QWORD *)(*v16 + 8);
    v22 = *(_QWORD *)(v20 + 8);
    v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
    v24 = (*(double (**)(uint64_t))(*(_QWORD *)v23 + 72))(v23);
    LODWORD(v21) = vabdd_f64(v24, (*(double (**)(uint64_t))(*(_QWORD *)v21 + 632))(v21));
    v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
    v26 = (*(double (**)(uint64_t))(*(_QWORD *)v25 + 72))(v25);
    if (v21 < vabdd_f64(v26, (*(double (**)(uint64_t))(*(_QWORD *)v22 + 632))(v22)))
    {
      v27 = *v16;
      v28 = v17;
      do
      {
        *(uint64_t *)((char *)a1 + v28 + 24) = *(uint64_t *)((char *)a1 + v28 + 16);
        if (v28 == -16)
        {
          v19 = a1;
          goto LABEL_7;
        }
        v29 = *(_QWORD *)(v27 + 8);
        v30 = *(_QWORD *)(*(uint64_t *)((char *)a1 + v28 + 8) + 8);
        v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
        v32 = (*(double (**)(uint64_t))(*(_QWORD *)v31 + 72))(v31);
        LODWORD(v29) = vabdd_f64(v32, (*(double (**)(uint64_t))(*(_QWORD *)v29 + 632))(v29));
        v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
        v34 = (*(double (**)(uint64_t))(*(_QWORD *)v33 + 72))(v33);
        v28 -= 8;
      }
      while (v29 < vabdd_f64(v34, (*(double (**)(uint64_t))(*(_QWORD *)v30 + 632))(v30)));
      v19 = (uint64_t *)((char *)a1 + v28 + 24);
LABEL_7:
      *v19 = v27;
      if (++v18 == 8)
        return v16 + 1 == a2;
    }
    v15 = v16;
    v17 += 8;
    if (++v16 == a2)
      return 1;
  }
}

void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  double v12;
  unsigned int v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  double v20;
  unsigned int v21;
  uint64_t v22;
  double v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  double v29;
  unsigned int v30;
  uint64_t v31;
  double v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  double v39;
  unsigned int v40;
  uint64_t v41;
  double v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;

  v6 = a2;
  v7 = a1;
  v8 = *(_QWORD *)(*a2 + 8);
  v9 = *(_QWORD *)(*a1 + 8);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 640))(v8);
  if (v10 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 640))(v9))
  {
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a4 + 168) + 32);
    v12 = (*(double (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
    v13 = vabdd_f64(v12, (*(double (**)(uint64_t))(*(_QWORD *)v8 + 632))(v8));
    v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a4 + 168) + 32);
    v15 = (*(double (**)(uint64_t))(*(_QWORD *)v14 + 72))(v14);
    if (v13 >= vabdd_f64(v15, (*(double (**)(uint64_t))(*(_QWORD *)v9 + 632))(v9)))
      goto LABEL_3;
  }
  else
  {
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 640))(v8);
    if (v24 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 640))(v9))
    {
LABEL_3:
      v16 = *(_QWORD *)(*a3 + 8);
      v17 = *(_QWORD *)(*v6 + 8);
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 640))(v16);
      if (v18 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 640))(v17))
      {
        v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a4 + 168) + 32);
        v20 = (*(double (**)(uint64_t))(*(_QWORD *)v19 + 72))(v19);
        v21 = vabdd_f64(v20, (*(double (**)(uint64_t))(*(_QWORD *)v16 + 632))(v16));
        v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a4 + 168) + 32);
        v23 = (*(double (**)(uint64_t))(*(_QWORD *)v22 + 72))(v22);
        if (v21 >= vabdd_f64(v23, (*(double (**)(uint64_t))(*(_QWORD *)v17 + 632))(v17)))
          return;
      }
      else
      {
        v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 640))(v16);
        if (v33 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 640))(v17))
          return;
      }
      v34 = *v6;
      *v6 = *a3;
      *a3 = v34;
      v35 = *(_QWORD *)(*v6 + 8);
      v36 = *(_QWORD *)(*v7 + 8);
      v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 640))(v35);
      if (v37 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 640))(v36))
      {
        v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a4 + 168) + 32);
        v39 = (*(double (**)(uint64_t))(*(_QWORD *)v38 + 72))(v38);
        v40 = vabdd_f64(v39, (*(double (**)(uint64_t))(*(_QWORD *)v35 + 632))(v35));
        v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a4 + 168) + 32);
        v42 = (*(double (**)(uint64_t))(*(_QWORD *)v41 + 72))(v41);
        v43 = vabdd_f64(v42, (*(double (**)(uint64_t))(*(_QWORD *)v36 + 632))(v36));
        goto LABEL_16;
      }
      v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 640))(v35);
      if (v54 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 640))(v36))
        return;
LABEL_17:
      v53 = *v7;
      *v7 = *v6;
      *v6 = v53;
      return;
    }
  }
  v25 = *(_QWORD *)(*a3 + 8);
  v26 = *(_QWORD *)(*v6 + 8);
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 640))(v25);
  if (v27 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 640))(v26))
  {
    v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a4 + 168) + 32);
    v29 = (*(double (**)(uint64_t))(*(_QWORD *)v28 + 72))(v28);
    v30 = vabdd_f64(v29, (*(double (**)(uint64_t))(*(_QWORD *)v25 + 632))(v25));
    v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a4 + 168) + 32);
    v32 = (*(double (**)(uint64_t))(*(_QWORD *)v31 + 72))(v31);
    if (v30 < vabdd_f64(v32, (*(double (**)(uint64_t))(*(_QWORD *)v26 + 632))(v26)))
    {
LABEL_9:
      v6 = a3;
      goto LABEL_17;
    }
  }
  else
  {
    v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 640))(v25);
    if (v44 > (*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 640))(v26))
      goto LABEL_9;
  }
  v45 = *v7;
  *v7 = *v6;
  *v6 = v45;
  v46 = *(_QWORD *)(*a3 + 8);
  v47 = *(_QWORD *)(v45 + 8);
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 640))(v46);
  if (v48 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 640))(v47))
  {
    v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a4 + 168) + 32);
    v50 = (*(double (**)(uint64_t))(*(_QWORD *)v49 + 72))(v49);
    v40 = vabdd_f64(v50, (*(double (**)(uint64_t))(*(_QWORD *)v46 + 632))(v46));
    v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a4 + 168) + 32);
    v52 = (*(double (**)(uint64_t))(*(_QWORD *)v51 + 72))(v51);
    v43 = vabdd_f64(v52, (*(double (**)(uint64_t))(*(_QWORD *)v47 + 632))(v47));
    v7 = v6;
    v6 = a3;
LABEL_16:
    if (v40 >= v43)
      return;
    goto LABEL_17;
  }
  v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 640))(v46);
  v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 640))(v47);
  v7 = v6;
  v6 = a3;
  if (v55 > v56)
    goto LABEL_17;
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  double v14;
  unsigned int v15;
  uint64_t v16;
  double v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  double v24;
  unsigned int v25;
  uint64_t v26;
  double v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  double v34;
  unsigned int v35;
  uint64_t v36;
  double v37;
  unsigned int v38;
  uint64_t v39;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(a1, a2, a3, a5);
  v10 = *(_QWORD *)(*a4 + 8);
  v11 = *(_QWORD *)(*a3 + 8);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 640))(v10);
  if (v12 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 640))(v11))
  {
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 168) + 32);
    v14 = (*(double (**)(uint64_t))(*(_QWORD *)v13 + 72))(v13);
    v15 = vabdd_f64(v14, (*(double (**)(uint64_t))(*(_QWORD *)v10 + 632))(v10));
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 168) + 32);
    v17 = (*(double (**)(uint64_t))(*(_QWORD *)v16 + 72))(v16);
    if (v15 >= vabdd_f64(v17, (*(double (**)(uint64_t))(*(_QWORD *)v11 + 632))(v11)))
      return;
  }
  else
  {
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 640))(v10);
    if (v18 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 640))(v11))
      return;
  }
  v19 = *a3;
  *a3 = *a4;
  *a4 = v19;
  v20 = *(_QWORD *)(*a3 + 8);
  v21 = *(_QWORD *)(*a2 + 8);
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 640))(v20);
  if (v22 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 640))(v21))
  {
    v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 168) + 32);
    v24 = (*(double (**)(uint64_t))(*(_QWORD *)v23 + 72))(v23);
    v25 = vabdd_f64(v24, (*(double (**)(uint64_t))(*(_QWORD *)v20 + 632))(v20));
    v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 168) + 32);
    v27 = (*(double (**)(uint64_t))(*(_QWORD *)v26 + 72))(v26);
    if (v25 >= vabdd_f64(v27, (*(double (**)(uint64_t))(*(_QWORD *)v21 + 632))(v21)))
      return;
  }
  else
  {
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 640))(v20);
    if (v28 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 640))(v21))
      return;
  }
  v29 = *a2;
  *a2 = *a3;
  *a3 = v29;
  v30 = *(_QWORD *)(*a2 + 8);
  v31 = *(_QWORD *)(*a1 + 8);
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 640))(v30);
  if (v32 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 640))(v31))
  {
    v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 640))(v30);
    if (v38 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 640))(v31))
      return;
    goto LABEL_13;
  }
  v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 168) + 32);
  v34 = (*(double (**)(uint64_t))(*(_QWORD *)v33 + 72))(v33);
  v35 = vabdd_f64(v34, (*(double (**)(uint64_t))(*(_QWORD *)v30 + 632))(v30));
  v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 168) + 32);
  v37 = (*(double (**)(uint64_t))(*(_QWORD *)v36 + 72))(v36);
  if (v35 < vabdd_f64(v37, (*(double (**)(uint64_t))(*(_QWORD *)v31 + 632))(v31)))
  {
LABEL_13:
    v39 = *a1;
    *a1 = *a2;
    *a2 = v39;
  }
}

void std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  double v16;
  unsigned int v17;
  uint64_t v18;
  double v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  double v26;
  unsigned int v27;
  uint64_t v28;
  double v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  double v36;
  unsigned int v37;
  uint64_t v38;
  double v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  double v46;
  unsigned int v47;
  uint64_t v48;
  double v49;
  unsigned int v50;
  uint64_t v51;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(a1, a2, a3, a4, a6);
  v12 = *(_QWORD *)(*a5 + 8);
  v13 = *(_QWORD *)(*a4 + 8);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 640))(v12);
  if (v14 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 640))(v13))
  {
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a6 + 168) + 32);
    v16 = (*(double (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
    v17 = vabdd_f64(v16, (*(double (**)(uint64_t))(*(_QWORD *)v12 + 632))(v12));
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a6 + 168) + 32);
    v19 = (*(double (**)(uint64_t))(*(_QWORD *)v18 + 72))(v18);
    if (v17 >= vabdd_f64(v19, (*(double (**)(uint64_t))(*(_QWORD *)v13 + 632))(v13)))
      return;
  }
  else
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 640))(v12);
    if (v20 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 640))(v13))
      return;
  }
  v21 = *a4;
  *a4 = *a5;
  *a5 = v21;
  v22 = *(_QWORD *)(*a4 + 8);
  v23 = *(_QWORD *)(*a3 + 8);
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 640))(v22);
  if (v24 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 640))(v23))
  {
    v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a6 + 168) + 32);
    v26 = (*(double (**)(uint64_t))(*(_QWORD *)v25 + 72))(v25);
    v27 = vabdd_f64(v26, (*(double (**)(uint64_t))(*(_QWORD *)v22 + 632))(v22));
    v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a6 + 168) + 32);
    v29 = (*(double (**)(uint64_t))(*(_QWORD *)v28 + 72))(v28);
    if (v27 >= vabdd_f64(v29, (*(double (**)(uint64_t))(*(_QWORD *)v23 + 632))(v23)))
      return;
  }
  else
  {
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 640))(v22);
    if (v30 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 640))(v23))
      return;
  }
  v31 = *a3;
  *a3 = *a4;
  *a4 = v31;
  v32 = *(_QWORD *)(*a3 + 8);
  v33 = *(_QWORD *)(*a2 + 8);
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 640))(v32);
  if (v34 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v33 + 640))(v33))
  {
    v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a6 + 168) + 32);
    v36 = (*(double (**)(uint64_t))(*(_QWORD *)v35 + 72))(v35);
    v37 = vabdd_f64(v36, (*(double (**)(uint64_t))(*(_QWORD *)v32 + 632))(v32));
    v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a6 + 168) + 32);
    v39 = (*(double (**)(uint64_t))(*(_QWORD *)v38 + 72))(v38);
    if (v37 >= vabdd_f64(v39, (*(double (**)(uint64_t))(*(_QWORD *)v33 + 632))(v33)))
      return;
  }
  else
  {
    v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 640))(v32);
    if (v40 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v33 + 640))(v33))
      return;
  }
  v41 = *a2;
  *a2 = *a3;
  *a3 = v41;
  v42 = *(_QWORD *)(*a2 + 8);
  v43 = *(_QWORD *)(*a1 + 8);
  v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 640))(v42);
  if (v44 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v43 + 640))(v43))
  {
    v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 640))(v42);
    if (v50 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v43 + 640))(v43))
      return;
    goto LABEL_17;
  }
  v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a6 + 168) + 32);
  v46 = (*(double (**)(uint64_t))(*(_QWORD *)v45 + 72))(v45);
  v47 = vabdd_f64(v46, (*(double (**)(uint64_t))(*(_QWORD *)v42 + 632))(v42));
  v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a6 + 168) + 32);
  v49 = (*(double (**)(uint64_t))(*(_QWORD *)v48 + 72))(v48);
  if (v47 < vabdd_f64(v49, (*(double (**)(uint64_t))(*(_QWORD *)v43 + 632))(v43)))
  {
LABEL_17:
    v51 = *a1;
    *a1 = *a2;
    *a2 = v51;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  double v11;
  unsigned int v12;
  uint64_t v13;
  double v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  double v23;
  unsigned int v24;
  uint64_t v25;
  double v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  double v35;
  unsigned int v36;
  uint64_t v37;
  double v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t *v41;
  int v42;

  v3 = a2;
  v5 = a2 - a1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = *(_QWORD *)(*(a2 - 1) + 8);
      v8 = *(_QWORD *)(*a1 + 8);
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 640))(v7);
      if (v9 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 640))(v8))
      {
        v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
        v11 = (*(double (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
        v12 = vabdd_f64(v11, (*(double (**)(uint64_t))(*(_QWORD *)v7 + 632))(v7));
        v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
        v14 = (*(double (**)(uint64_t))(*(_QWORD *)v13 + 72))(v13);
        if (v12 >= vabdd_f64(v14, (*(double (**)(uint64_t))(*(_QWORD *)v8 + 632))(v8)))
          return 1;
      }
      else
      {
        v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 640))(v7);
        if (v39 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 640))(v8))
          return 1;
      }
      v40 = *a1;
      *a1 = *(v3 - 1);
      *(v3 - 1) = v40;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v15 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(a1, a1 + 1, a1 + 2, a3);
      v16 = a1 + 3;
      if (a1 + 3 == v3)
        return 1;
      v17 = 0;
      v42 = 0;
      v41 = v3;
      break;
  }
  while (2)
  {
    v19 = *(_QWORD *)(*v16 + 8);
    v20 = *(_QWORD *)(*v15 + 8);
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 640))(v19);
    if (v21 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 640))(v20))
    {
      v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
      v23 = (*(double (**)(uint64_t))(*(_QWORD *)v22 + 72))(v22);
      v24 = vabdd_f64(v23, (*(double (**)(uint64_t))(*(_QWORD *)v19 + 632))(v19));
      v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
      v26 = (*(double (**)(uint64_t))(*(_QWORD *)v25 + 72))(v25);
      if (v24 >= vabdd_f64(v26, (*(double (**)(uint64_t))(*(_QWORD *)v20 + 632))(v20)))
        goto LABEL_10;
    }
    else
    {
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 640))(v19);
      if (v27 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 640))(v20))
        goto LABEL_10;
    }
    v28 = *v16;
    *v16 = *v15;
    v18 = a1;
    if (v15 == a1)
      goto LABEL_9;
    v29 = v17;
    while (1)
    {
      v31 = *(_QWORD *)(v28 + 8);
      v32 = *(_QWORD *)(*(uint64_t *)((char *)a1 + v29 + 8) + 8);
      v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 640))(v31);
      if (v33 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 640))(v32))
        break;
      v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
      v35 = (*(double (**)(uint64_t))(*(_QWORD *)v34 + 72))(v34);
      v36 = vabdd_f64(v35, (*(double (**)(uint64_t))(*(_QWORD *)v31 + 632))(v31));
      v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 168) + 32);
      v38 = (*(double (**)(uint64_t))(*(_QWORD *)v37 + 72))(v37);
      if (v36 >= vabdd_f64(v38, (*(double (**)(uint64_t))(*(_QWORD *)v32 + 632))(v32)))
      {
        v18 = v15;
        goto LABEL_8;
      }
LABEL_18:
      --v15;
      *(uint64_t *)((char *)a1 + v29 + 16) = *(uint64_t *)((char *)a1 + v29 + 8);
      v29 -= 8;
      if (v29 == -16)
      {
        v18 = a1;
        goto LABEL_8;
      }
    }
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 640))(v31);
    if (v30 > (*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 640))(v32))
      goto LABEL_18;
    v18 = (uint64_t *)((char *)a1 + v29 + 16);
LABEL_8:
    v3 = v41;
LABEL_9:
    *v18 = v28;
    if (++v42 == 8)
      return v16 + 1 == v3;
LABEL_10:
    v15 = v16;
    v17 += 8;
    if (++v16 != v3)
      continue;
    return 1;
  }
}

uint64_t md::RouteAnnotationDedupingGroup::RouteAnnotationDedupingGroup(uint64_t a1, unint64_t a2)
{
  md::LabelDedupingGroup *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v4 = md::LabelDedupingGroup::LabelDedupingGroup((md::LabelDedupingGroup *)a1);
  *(_QWORD *)v4 = &off_1E42A5DB8;
  *((_QWORD *)v4 + 10) = a2;
  if ((a2 & 0xFF00000000) != 0)
    a2 = a2;
  else
    a2 = 0;
  v5 = *((_QWORD *)v4 + 5);
  if (a2 <= (*((_QWORD *)v4 + 7) - v5) >> 3)
    return a1;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 64) + 16))(*(_QWORD *)(a1 + 64), 8 * a2, 8);
  v8 = v6 - v5;
  v9 = v7 + ((v6 - v5) & 0xFFFFFFFFFFFFFFF8);
  v11 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v12 = v10 - v11;
  if (v10 == v11)
  {
    v14 = v7 + ((v6 - v5) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_15;
  }
  v13 = v12 - 8;
  if ((unint64_t)(v12 - 8) >= 0x58)
  {
    v14 = v7 + ((v6 - v5) & 0xFFFFFFFFFFFFFFF8);
    if (v10 - ((v8 & 0xFFFFFFFFFFFFFFF8) + v7) >= 0x20)
    {
      v15 = v8 >> 3;
      v16 = (v13 >> 3) + 1;
      v17 = (_OWORD *)(v7 + 8 * v15 - 16);
      v18 = (__int128 *)(v10 - 16);
      v19 = v16 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v20 = *v18;
        *(v17 - 1) = *(v18 - 1);
        *v17 = v20;
        v17 -= 2;
        v18 -= 2;
        v19 -= 4;
      }
      while (v19);
      v14 = v9 - 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
      v10 -= 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
      if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_14;
    }
  }
  else
  {
    v14 = v7 + ((v6 - v5) & 0xFFFFFFFFFFFFFFF8);
  }
  do
  {
    v21 = *(_QWORD *)(v10 - 8);
    v10 -= 8;
    *(_QWORD *)(v14 - 8) = v21;
    v14 -= 8;
  }
  while (v10 != v11);
LABEL_14:
  v10 = *(_QWORD *)(a1 + 40);
LABEL_15:
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 48) = v9;
  v22 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v7 + 8 * a2;
  if (v10)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 64) + 40))(*(_QWORD *)(a1 + 64), v10, v22 - v10);
  return a1;
}

void sub_19FEAE6E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)v1 = &off_1E4294980;
  v3 = *(_QWORD *)(v1 + 40);
  if (v3)
  {
    *(_QWORD *)(v1 + 48) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 64) + 40))(*(_QWORD *)(v1 + 64), v3, *(_QWORD *)(v1 + 56) - v3);
    v4 = *(_QWORD *)(v1 + 8);
    if (!v4)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v4 = *(_QWORD *)(v1 + 8);
    if (!v4)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 16) = v4;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 32) + 40))(*(_QWORD *)(v1 + 32), v4, *(_QWORD *)(v1 + 24) - v4);
  _Unwind_Resume(exception_object);
}

void ggl::FlyoverOverlay::P3T2PipelineState::~P3T2PipelineState(ggl::FlyoverOverlay::P3T2PipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

uint64_t ggl::FlyoverOverlay::P3T2PipelineState::P3T2PipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4, char a5)
{
  unsigned __int8 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int16x8_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int8x16_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int8x16_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  _OWORD *v91;
  ggl::FlyoverOverlayShader *v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  _QWORD *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  _BYTE v103[28];

  if ((v7 & 1) == 0)
  {
    v91 = a4;
    v99 = a2;
    v100 = a3;
    a2 = v99;
    a3 = v100;
    a4 = v91;
    if ((_DWORD)v92)
    {
      if ((v93 & 1) == 0)
      {
        if ((_DWORD)v92)
        {
          if ((v96 & 1) == 0
          {
            if ((v98 & 1) == 0
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r;
            *(_QWORD *)algn_1EE585510 = 1;
          }
          ggl::FlyoverOverlay::P3T2PipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r;
          *(_QWORD *)algn_1EE5763E8 = &ggl::FlyoverOverlay::pipelineDataP3T2PipelineDeviceStructs(void)::ref;
          qword_1EE5763F0 = 0;
          if ((v97 & 1) == 0
          {
            ggl::FlyoverOverlay::pipelineDataP3T2PipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverOverlay::Shared::reflection(void)::reflection;
            unk_1EE576420 = ggl::FlyoverOverlay::Transform::reflection(void)::reflection;
            qword_1EE576428 = (uint64_t)ggl::FlyoverOverlay::UVScalar::reflection(void)::reflection;
            unk_1EE576430 = ggl::Blending::SRGBBlendStyle::reflection(void)::reflection;
            qword_1EE576438 = (uint64_t)ggl::OverlayOcclusion::AlphaTint::reflection(void)::reflection;
          }
          qword_1EE5763F8 = (uint64_t)&ggl::FlyoverOverlay::pipelineDataP3T2PipelineConstantStructs(void)::ref;
          unk_1EE576400 = xmmword_19FFB3030;
        }
      }
      ggl::FlyoverOverlay::P3T2PipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverOverlay::P3T2PipelineSetup::typedReflection(void)::ref;
      ggl::FlyoverOverlayShader::typedReflection(v92);
      qword_1EE58C8A0 = (uint64_t)&ggl::FlyoverOverlayShader::typedReflection(void)::ref;
      if ((v94 & 1) == 0
      {
        ggl::FlyoverOverlay::pipelineStateP3T2PipelineAttributeStructBinding(void)::attr = 0;
        unk_1EE58C900 = 0;
        qword_1EE58C908 = (uint64_t)"";
        dword_1EE58C910 = 0;
        qword_1EE58C918 = (uint64_t)&ggl::FlyoverOverlay::pipelineStateP3T2PipelineAttributeBinding_0(void)::attr;
        unk_1EE58C920 = 2;
      }
      qword_1EE58C8A8 = (uint64_t)&ggl::FlyoverOverlay::pipelineStateP3T2PipelineAttributeStructBinding(void)::attr;
      unk_1EE58C8B0 = 1;
      qword_1EE58C8B8 = 0;
      unk_1EE58C8C0 = 1;
      qword_1EE58C8C8 = (uint64_t)&ggl::FlyoverOverlay::pipelineStateP3T2PipelineDeviceStructBinding(void)::ref;
      unk_1EE58C8D0 = 0;
      if ((v95 & 1) == 0
      {
        ggl::FlyoverOverlay::pipelineStateP3T2PipelineConstantStructBinding(void)::ref = 0;
        unk_1EE58C940 = 0;
        qword_1EE58C948 = (uint64_t)"sharedConstants";
        dword_1EE58C950 = 3;
        qword_1EE58C958 = (uint64_t)&ggl::FlyoverOverlay::pipelineStateP3T2PipelineConstantSharedConstantsBinding(void)::reflection;
        unk_1EE58C960 = xmmword_19FFB35A0;
        qword_1EE58C970 = 1;
        unk_1EE58C978 = "transform";
        dword_1EE58C980 = 3;
        qword_1EE58C988 = (uint64_t)&ggl::FlyoverOverlay::pipelineStateP3T2PipelineConstantTransformBinding(void)::reflection;
        *(_OWORD *)algn_1EE58C990 = xmmword_19FFB2DB0;
        qword_1EE58C9A0 = 2;
        unk_1EE58C9A8 = "uvScalar";
        dword_1EE58C9B0 = 3;
        qword_1EE58C9B8 = (uint64_t)&ggl::FlyoverOverlay::pipelineStateP3T2PipelineConstantUvScalarBinding(void)::reflection;
        unk_1EE58C9C0 = xmmword_19FFB3730;
        qword_1EE58C9D0 = 3;
        unk_1EE58C9D8 = "style";
        dword_1EE58C9E0 = 3;
        qword_1EE58C9E8 = (uint64_t)&ggl::FlyoverOverlay::pipelineStateP3T2PipelineConstantStyleBinding(void)::reflection;
        *(_OWORD *)algn_1EE58C9F0 = xmmword_19FFB3440;
        qword_1EE58CA00 = 4;
        unk_1EE58CA08 = "alphaTint";
        dword_1EE58CA10 = 3;
        qword_1EE58CA18 = (uint64_t)&ggl::FlyoverOverlay::pipelineStateP3T2PipelineConstantAlphaTintBinding(void)::reflection;
        unk_1EE58CA20 = 1;
      }
      qword_1EE58C8D8 = (uint64_t)&ggl::FlyoverOverlay::pipelineStateP3T2PipelineConstantStructBinding(void)::ref;
      unk_1EE58C8E0 = 5;
      a4 = v91;
      a2 = v99;
      a3 = v100;
    }
  }
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  *(_OWORD *)v103 = *(_OWORD *)a3;
  *(_OWORD *)&v103[12] = *(_OWORD *)(a3 + 12);
  v12 = *(_OWORD *)(a3 + 28);
  v13 = *(_BYTE *)(a3 + 44);
  v101 = *a4;
  v102 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::FlyoverOverlay::P3T2PipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  if (v9)
  {
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v101;
  *(_OWORD *)(a1 + 272) = v102;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v103;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v103[12];
  *(_OWORD *)(a1 + 92) = v12;
  *(_BYTE *)(a1 + 108) = v13;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_BYTE *)(a1 + 304) = a5;
  *(_BYTE *)(a1 + 305) = 0;
  v18 = *(int8x16_t *)(a1 + 320);
  v19 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v20 = vmovl_high_s8(v19);
  v21 = vmovl_s16(*(int16x4_t *)v20.i8);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  v23 = v22;
  v24 = vmovl_s8(*(int8x8_t *)v19.i8);
  v25 = vmovl_s16(*(int16x4_t *)v24.i8);
  v22.i64[0] = v25.u32[0];
  v22.i64[1] = v25.u32[1];
  v26 = v22;
  *(_QWORD *)a1 = &off_1E42B6AD8;
  v27 = vmovl_high_s16(v20);
  v22.i64[0] = v27.u32[0];
  v22.i64[1] = v27.u32[1];
  v28 = v22;
  v29 = vmovl_high_s16(v24);
  v22.i64[0] = v29.u32[0];
  v22.i64[1] = v29.u32[1];
  v30 = v22;
  v22.i64[0] = v21.u32[2];
  v22.i64[1] = v21.u32[3];
  v31 = v22;
  v22.i64[0] = v25.u32[2];
  v22.i64[1] = v25.u32[3];
  v32 = v22;
  v22.i64[0] = v27.u32[2];
  v22.i64[1] = v27.u32[3];
  v33 = v22;
  v22.i64[0] = v29.u32[2];
  v22.i64[1] = v29.u32[3];
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v22);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v33);
  v36 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v32);
  v37 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v28);
  v38 = vceqzq_s8(v18);
  v39 = vmovl_high_s8(v38);
  v40 = vmovl_s16(*(int16x4_t *)v39.i8);
  v22.i64[0] = v40.u32[0];
  v22.i64[1] = v40.u32[1];
  v41 = v22;
  v42 = vmovl_s8(*(int8x8_t *)v38.i8);
  v43 = vmovl_s16(*(int16x4_t *)v42.i8);
  v22.i64[0] = v43.u32[0];
  v22.i64[1] = v43.u32[1];
  v44 = v22;
  v45 = vmovl_high_s16(v39);
  v22.i64[0] = v45.u32[0];
  v22.i64[1] = v45.u32[1];
  v46 = v22;
  v47 = vmovl_high_s16(v42);
  v22.i64[0] = v47.u32[0];
  v22.i64[1] = v47.u32[1];
  v48 = v22;
  v22.i64[0] = v40.u32[2];
  v22.i64[1] = v40.u32[3];
  v49 = v22;
  v22.i64[0] = v43.u32[2];
  v22.i64[1] = v43.u32[3];
  v50 = v22;
  v22.i64[0] = v45.u32[2];
  v22.i64[1] = v45.u32[3];
  v51 = v22;
  v22.i64[0] = v47.u32[2];
  v22.i64[1] = v47.u32[3];
  v52 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v51);
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v41), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v23));
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v44), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v26));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v46), v37);
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v48), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v30));
  v57 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v49), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v31));
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v50), v36);
  v59 = vorrq_s8(v52, v35);
  v60 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v22), v34);
  v61 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v62 = vmovl_s8(*(int8x8_t *)v61.i8);
  v63 = vmovl_high_s16(v62);
  v22.i64[0] = v63.i32[2];
  v22.i64[1] = v63.i32[3];
  v64 = v22;
  v65 = vmovl_high_s8(v61);
  v66 = vmovl_high_s16(v65);
  v22.i64[0] = v66.i32[2];
  v22.i64[1] = v66.i32[3];
  v67 = v22;
  v68 = vmovl_s16(*(int16x4_t *)v62.i8);
  v22.i64[0] = v68.i32[2];
  v22.i64[1] = v68.i32[3];
  v69 = v22;
  v70 = vmovl_s16(*(int16x4_t *)v65.i8);
  v22.i64[0] = v70.i32[2];
  v22.i64[1] = v70.i32[3];
  v71 = v22;
  v22.i64[0] = v63.i32[0];
  v22.i64[1] = v63.i32[1];
  v72 = v22;
  v22.i64[0] = v66.i32[0];
  v22.i64[1] = v66.i32[1];
  v73 = v22;
  v22.i64[0] = v68.i32[0];
  v22.i64[1] = v68.i32[1];
  v74 = v22;
  v22.i64[0] = v70.i32[0];
  v22.i64[1] = v70.i32[1];
  v75 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v22);
  v76 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v77 = vmovl_high_s8(v76);
  v78 = vmovl_s16(*(int16x4_t *)v77.i8);
  v22.i64[0] = v78.i32[0];
  v22.i64[1] = v78.i32[1];
  v79 = v22;
  v80 = vmovl_s8(*(int8x8_t *)v76.i8);
  v81 = vmovl_s16(*(int16x4_t *)v80.i8);
  v22.i64[0] = v81.i32[0];
  v22.i64[1] = v81.i32[1];
  v82 = v22;
  v83 = vmovl_high_s16(v77);
  v22.i64[0] = v83.i32[0];
  v22.i64[1] = v83.i32[1];
  v84 = v22;
  v85 = vmovl_high_s16(v80);
  v22.i64[0] = v85.i32[0];
  v22.i64[1] = v85.i32[1];
  v86 = v22;
  v22.i64[0] = v78.i32[2];
  v22.i64[1] = v78.i32[3];
  v87 = v22;
  v22.i64[0] = v81.i32[2];
  v22.i64[1] = v81.i32[3];
  v88 = v22;
  v22.i64[0] = v83.i32[2];
  v22.i64[1] = v83.i32[3];
  v89 = v22;
  v22.i64[0] = v85.i32[2];
  v22.i64[1] = v85.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v82), vbicq_s8((int8x16_t)xmmword_19FFB3170, v74)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v79), v75), v53)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v86), vbicq_s8((int8x16_t)xmmword_19FFB3190, v72)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v84), vbicq_s8((int8x16_t)xmmword_19FFB3180, v73)),
                                               v55))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v88), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v69)), v58), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v87), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v71)), v57)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v22), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v64)), v60), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v89),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v67)),
                                               v59)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::FlyoverOverlay::P3T2PipelineSetup::~P3T2PipelineSetup(ggl::FlyoverOverlay::P3T2PipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::FlyoverOverlay::P3T2PipelineSetup::constantDataIsEnabled(ggl::FlyoverOverlay::P3T2PipelineSetup *this, uint64_t a2)
{
  _BOOL8 result;
  int v4;

  result = 1;
  switch(a2)
  {
    case 0:
    case 1:
    case 3:
      return result;
    case 2:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 305);
      goto LABEL_5;
    case 4:
      v4 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 304);
LABEL_5:
      result = v4 != 0;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

BOOL ggl::FlyoverOverlay::P3T2PipelineSetup::textureIsEnabled(ggl::FlyoverOverlay::P3T2PipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t ggl::VertexDataTyped<ggl::Landmark::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::Landmark::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::Landmark::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Landmark::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Landmark::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0790;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Landmark::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Landmark::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0790;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Landmark::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Landmark::DefaultVbo>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Landmark::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Landmark::DefaultVbo>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

void ggl::Landmark::LandmarkMesh::~LandmarkMesh(ggl::Landmark::LandmarkMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::Landmark::LandmarkMesh::~LandmarkMesh(ggl::Landmark::LandmarkMesh *this)
{
  ggl::Mesh::~Mesh((ggl::Landmark::LandmarkMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Landmark::LandmarkMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::Landmark::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::Landmark::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void md::LogicManager::~LogicManager(md::LogicManager *this)
{
  md::LogicManager::~LogicManager(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  NSObject *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  md::LogicManager *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E428CEE0;
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
  v2 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v8 = 134217984;
    v9 = this;
    _os_log_impl(&dword_19F029000, v2, OS_LOG_TYPE_INFO, "Destroy LogicManager:%p", (uint8_t *)&v8, 0xCu);
  }

  if (*((_BYTE *)this + 72))
  {
    v3 = (void *)*((_QWORD *)this + 6);
    if (v3)
    {
      *((_QWORD *)this + 7) = v3;
      operator delete(v3);
    }
  }
  v4 = (_QWORD *)*((_QWORD *)this + 3);
  if (v4)
  {
    do
    {
      v6 = (_QWORD *)*v4;
      v7 = v4[5];
      v4[5] = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      operator delete(v4);
      v4 = v6;
    }
    while (v6);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    operator delete(v5);
}

uint64_t std::vector<md::LogicBase *>::~vector[abi:nn180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_2,std::allocator<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_2>,void ()(md::LogicBase *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_2,std::allocator<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_2>,void ()(md::LogicBase *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CAA30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_2,std::allocator<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_2>,void ()(md::LogicBase *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CAA30;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_1,std::allocator<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_1,std::allocator<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CA9E8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_0,std::allocator<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_0,std::allocator<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CA9A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_0,std::allocator<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CA9A0;
  a2[1] = v2;
  return result;
}

void md::LogicManager::toggleVLR(md::LogicManager *this, int a2)
{
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*((unsigned __int8 *)this + 82) != a2)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_4_11772);
    v4 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *((unsigned __int8 *)this + 82);
      v6[0] = 67109376;
      v6[1] = v5;
      v7 = 1024;
      v8 = a2;
      _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_INFO, "[VLR] Toggle VLR change from %d to %d", (uint8_t *)v6, 0xEu);
    }

    *((_BYTE *)this + 82) = a2;
  }
}

void std::__function::__func<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_0,std::allocator<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "LogicManagerRunLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_1,std::allocator<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_1,std::allocator<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CA910;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_1,std::allocator<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CA910;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_1,std::allocator<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v2 = (id)GEOGetVectorKitPerformanceLog_log;
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v3, OS_SIGNPOST_INTERVAL_END, v4, "LogicManagerRunLogic", (const char *)&unk_1A0189141, v5, 2u);
  }

}

void std::__function::__func<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_0,std::allocator<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_0,std::allocator<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CA8C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_0,std::allocator<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CA8C8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::LogicManager::pruneAllLogics(md::PruneLevel)::$_0,std::allocator<md::LogicManager::pruneAllLogics(md::PruneLevel)::$_0>,void ()(md::LogicBase *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_BYTE *std::__function::__func<md::LogicManager::pruneAllLogics(md::PruneLevel)::$_0,std::allocator<md::LogicManager::pruneAllLogics(md::PruneLevel)::$_0>,void ()(md::LogicBase *)>::__clone(uint64_t a1)
{
  _BYTE *result;
  char v3;

  result = operator new(0x10uLL);
  v3 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E42CA958;
  result[8] = v3;
  return result;
}

uint64_t std::__function::__func<md::LogicManager::pruneAllLogics(md::PruneLevel)::$_0,std::allocator<md::LogicManager::pruneAllLogics(md::PruneLevel)::$_0>,void ()(md::LogicBase *)>::__clone(uint64_t result, uint64_t a2)
{
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)a2 = &off_1E42CA958;
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t std::__function::__func<md::LogicManager::pruneAllLogics(md::PruneLevel)::$_0,std::allocator<md::LogicManager::pruneAllLogics(md::PruneLevel)::$_0>,void ()(md::LogicBase *)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 24))(*a2, *(unsigned __int8 *)(a1 + 8));
}

void std::__function::__func<md::LogicManager::resetAllLogic(void)::$_0,std::allocator<md::LogicManager::resetAllLogic(void)::$_0>,void ()(md::LogicBase *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LogicManager::resetAllLogic(void)::$_0,std::allocator<md::LogicManager::resetAllLogic(void)::$_0>,void ()(md::LogicBase *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CA880;
  return result;
}

void std::__function::__func<md::LogicManager::resetAllLogic(void)::$_0,std::allocator<md::LogicManager::resetAllLogic(void)::$_0>,void ()(md::LogicBase *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CA880;
}

uint64_t std::__function::__func<md::LogicManager::resetAllLogic(void)::$_0,std::allocator<md::LogicManager::resetAllLogic(void)::$_0>,void ()(md::LogicBase *)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
}

void std::__function::__func<md::LogicManager::createDebugNode(std::bitset<4ul> const&)::$_0,std::allocator<md::LogicManager::createDebugNode(std::bitset<4ul> const&)::$_0>,void ()(md::LogicBase const*)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::LogicManager::createDebugNode(std::bitset<4ul> const&)::$_0,std::allocator<md::LogicManager::createDebugNode(std::bitset<4ul> const&)::$_0>,void ()(md::LogicBase const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42D8B40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<md::LogicManager::createDebugNode(std::bitset<4ul> const&)::$_0,std::allocator<md::LogicManager::createDebugNode(std::bitset<4ul> const&)::$_0>,void ()(md::LogicBase const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D8B40;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<md::LogicManager::createDebugNode(std::bitset<4ul> const&)::$_0,std::allocator<md::LogicManager::createDebugNode(std::bitset<4ul> const&)::$_0>,void ()(md::LogicBase const*)>::operator()(uint64_t a1, _QWORD **a2)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  _QWORD *v8;
  _QWORD *v9;
  size_t v10;
  const void *v11;
  __int128 *p_dst;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  char *v20;
  int v21;
  _QWORD *v22;
  BOOL v23;
  void **v24;
  void **v25;
  void **v26;
  void **v27;
  _QWORD *v28;
  size_t v29;
  const void *v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  _QWORD *v38;
  char *v39;
  int v40;
  _QWORD *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  _QWORD *v46;
  uint64_t v47;
  void *v48[2];
  char v49;
  void *v50;
  char v51;
  void **v52;
  void *v53;
  void *v54;
  char v55[32];
  __int128 __p;
  unint64_t v57;
  int v58;
  __int128 __dst;
  unint64_t v60;

  v2 = *a2;
  if (*a2)
  {
    v3 = a1;
    (*(void (**)(void **__return_ptr, _QWORD *, _QWORD))(*v2 + 56))(v48, v2, *(_QWORD *)(a1 + 8));
    v4 = *(void ***)(v3 + 16);
    v5 = (void **)*v4;
    v6 = (void **)v4[1];
    v7 = v4;
    if (v6 != *v4)
    {
      do
      {
        if (*((char *)v6 - 9) < 0)
          operator delete(*(v6 - 4));
        v6 -= 8;
      }
      while (v6 != v5);
      v7 = *(void ***)(v3 + 16);
    }
    v46 = v2;
    v47 = v3;
    v4[1] = v5;
    v8 = (_QWORD *)v2[9];
    v9 = v2 + 10;
    if (v8 != v2 + 10)
    {
      while (1)
      {
        v10 = v8[6];
        if (v10 > 0x7FFFFFFFFFFFFFF7)
LABEL_77:
          abort();
        v11 = (const void *)v8[5];
        if (v10 >= 0x17)
          break;
        HIBYTE(v60) = v8[6];
        p_dst = &__dst;
        if (v10)
          goto LABEL_18;
LABEL_19:
        *((_BYTE *)p_dst + v10) = 0;
        __p = 0uLL;
        v57 = 0;
        v58 = 4;
        if (SHIBYTE(v60) < 0)
        {
          v15 = (void *)__dst;
          std::string::__assign_no_alias<true>(&__p, (void *)__dst, *((size_t *)&__dst + 1));
          operator delete(v15);
        }
        else
        {
          __p = __dst;
          v57 = v60;
        }
        v16 = (char *)v7[1];
        if (v16 >= v7[2])
        {
          v20 = std::vector<gdc::DebugTreeValue>::__push_back_slow_path<gdc::DebugTreeValue>(v7, (uint64_t)v55);
          v21 = SHIBYTE(v57);
          v7[1] = v20;
          if (v21 < 0)
          {
            operator delete((void *)__p);
            v19 = (_QWORD *)v8[1];
            if (v19)
            {
              do
              {
LABEL_27:
                v22 = v19;
                v19 = (_QWORD *)*v19;
              }
              while (v19);
              goto LABEL_10;
            }
          }
          else
          {
            v19 = (_QWORD *)v8[1];
            if (v19)
              goto LABEL_27;
          }
        }
        else
        {
          v17 = *(_OWORD *)v55;
          *(_OWORD *)(v16 + 9) = *(_OWORD *)&v55[9];
          *(_OWORD *)v16 = v17;
          v18 = __p;
          *((_QWORD *)v16 + 6) = v57;
          *((_OWORD *)v16 + 2) = v18;
          *((_DWORD *)v16 + 14) = v58;
          v7[1] = v16 + 64;
          v19 = (_QWORD *)v8[1];
          if (v19)
            goto LABEL_27;
        }
        do
        {
          v22 = (_QWORD *)v8[2];
          v23 = *v22 == (_QWORD)v8;
          v8 = v22;
        }
        while (!v23);
LABEL_10:
        v8 = v22;
        if (v22 == v9)
        {
          v3 = v47;
          v7 = *(void ***)(v47 + 16);
          goto LABEL_34;
        }
      }
      v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v13 = v10 | 7;
      v14 = v13 + 1;
      p_dst = (__int128 *)operator new(v13 + 1);
      *((_QWORD *)&__dst + 1) = v10;
      v60 = v14 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
LABEL_18:
      memmove(p_dst, v11, v10);
      goto LABEL_19;
    }
LABEL_34:
    v55[23] = 20;
    strcpy(v55, "RequiredDependencies");
    gdc::DebugTreeNode::addProperty((uint64_t)v48, (uint64_t)v55, (uint64_t *)v7);
    v24 = *(void ***)(v3 + 16);
    v25 = (void **)*v24;
    v26 = (void **)v24[1];
    v27 = v24;
    if (v26 != *v24)
    {
      do
      {
        if (*((char *)v26 - 9) < 0)
          operator delete(*(v26 - 4));
        v26 -= 8;
      }
      while (v26 != v25);
      v27 = *(void ***)(v3 + 16);
    }
    v24[1] = v25;
    v28 = (_QWORD *)v46[12];
    if (v28 != v46 + 13)
    {
      while (1)
      {
        v29 = v28[6];
        if (v29 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_77;
        v30 = (const void *)v28[5];
        if (v29 >= 0x17)
          break;
        HIBYTE(v60) = v28[6];
        v31 = &__dst;
        if (v29)
          goto LABEL_50;
LABEL_51:
        *((_BYTE *)v31 + v29) = 0;
        __p = 0uLL;
        v57 = 0;
        v58 = 4;
        if (SHIBYTE(v60) < 0)
        {
          v34 = (void *)__dst;
          std::string::__assign_no_alias<true>(&__p, (void *)__dst, *((size_t *)&__dst + 1));
          operator delete(v34);
        }
        else
        {
          __p = __dst;
          v57 = v60;
        }
        v35 = (char *)v27[1];
        if (v35 >= v27[2])
        {
          v39 = std::vector<gdc::DebugTreeValue>::__push_back_slow_path<gdc::DebugTreeValue>(v27, (uint64_t)v55);
          v40 = SHIBYTE(v57);
          v27[1] = v39;
          if (v40 < 0)
          {
            operator delete((void *)__p);
            v38 = (_QWORD *)v28[1];
            if (v38)
            {
              do
              {
LABEL_59:
                v41 = v38;
                v38 = (_QWORD *)*v38;
              }
              while (v38);
              goto LABEL_42;
            }
          }
          else
          {
            v38 = (_QWORD *)v28[1];
            if (v38)
              goto LABEL_59;
          }
        }
        else
        {
          v36 = *(_OWORD *)v55;
          *(_OWORD *)(v35 + 9) = *(_OWORD *)&v55[9];
          *(_OWORD *)v35 = v36;
          v37 = __p;
          *((_QWORD *)v35 + 6) = v57;
          *((_OWORD *)v35 + 2) = v37;
          *((_DWORD *)v35 + 14) = v58;
          v27[1] = v35 + 64;
          v38 = (_QWORD *)v28[1];
          if (v38)
            goto LABEL_59;
        }
        do
        {
          v41 = (_QWORD *)v28[2];
          v23 = *v41 == (_QWORD)v28;
          v28 = v41;
        }
        while (!v23);
LABEL_42:
        v28 = v41;
        if (v41 == v46 + 13)
        {
          v42 = v47;
          v27 = *(void ***)(v47 + 16);
          goto LABEL_67;
        }
      }
      v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17)
        v32 = v29 | 7;
      v33 = v32 + 1;
      v31 = (__int128 *)operator new(v32 + 1);
      *((_QWORD *)&__dst + 1) = v29;
      v60 = v33 | 0x8000000000000000;
      *(_QWORD *)&__dst = v31;
LABEL_50:
      memmove(v31, v30, v29);
      goto LABEL_51;
    }
    v42 = v47;
LABEL_67:
    v55[23] = 20;
    strcpy(v55, "OptionalDependencies");
    gdc::DebugTreeNode::addProperty((uint64_t)v48, (uint64_t)v55, (uint64_t *)v27);
    gdc::DebugTreeNode::addChildNode(*(_QWORD **)(v42 + 24), (__int128 *)v48);
    v43 = v53;
    if (v53)
    {
      v44 = (uint64_t)v54;
      v45 = v53;
      if (v54 != v53)
      {
        do
        {
          v44 -= 80;
          std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v44);
        }
        while ((void *)v44 != v43);
        v45 = v53;
      }
      v54 = v43;
      operator delete(v45);
    }
    std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v52);
    if ((v51 & 0x80000000) == 0)
    {
      if ((v49 & 0x80000000) == 0)
        return;
LABEL_76:
      operator delete(v48[0]);
      return;
    }
    operator delete(v50);
    if (v49 < 0)
      goto LABEL_76;
  }
}

void sub_19FEB0110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  void *v39;
  uint64_t v40;
  void *v41;

  v39 = __p;
  if (__p)
  {
    v40 = (uint64_t)a27;
    v41 = __p;
    if (a27 != __p)
    {
      do
      {
        v40 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v40);
      }
      while ((void *)v40 != v39);
      v41 = __p;
    }
    a27 = v39;
    operator delete(v41);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&a23);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((a16 & 0x80000000) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if ((a16 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(a11);
  _Unwind_Resume(a1);
}

char *std::vector<gdc::DebugTreeValue>::__push_back_slow_path<gdc::DebugTreeValue>(void **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  void **v14;
  void **v15;
  __int128 v16;
  __int128 v17;
  void **v18;

  v2 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 6;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 58)
    abort();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 5 > v3)
    v3 = v5 >> 5;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFC0;
  v7 = 0x3FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v3;
  if (v7 >> 58)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v9 = v7 << 6;
  v10 = (char *)operator new(v7 << 6);
  v11 = &v10[64 * v2];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v12 = &v10[v9];
  *(_OWORD *)(v11 + 9) = *(_OWORD *)(a2 + 9);
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *((_DWORD *)v11 + 14) = *(_DWORD *)(a2 + 56);
  v13 = v11 + 64;
  v14 = (void **)*a1;
  v15 = (void **)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    do
    {
      v16 = *((_OWORD *)v15 - 4);
      *(_OWORD *)(v11 - 55) = *(_OWORD *)((char *)v15 - 55);
      *((_OWORD *)v11 - 4) = v16;
      v17 = *((_OWORD *)v15 - 2);
      *((_QWORD *)v11 - 2) = *(v15 - 2);
      *((_OWORD *)v11 - 2) = v17;
      *(v15 - 3) = 0;
      *(v15 - 2) = 0;
      *(v15 - 4) = 0;
      *((_DWORD *)v11 - 2) = *((_DWORD *)v15 - 2);
      v11 -= 64;
      v15 -= 8;
    }
    while (v15 != v14);
    v15 = (void **)*a1;
    v18 = (void **)a1[1];
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    while (v18 != v15)
    {
      if (*((char *)v18 - 9) < 0)
        operator delete(*(v18 - 4));
      v18 -= 8;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void md::ElevatedStrokeTileData::~ElevatedStrokeTileData(md::ElevatedStrokeTileData *this)
{
  md::ElevatedStrokeTileData::~ElevatedStrokeTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  *(_QWORD *)this = &off_1E429CC10;
  *((_QWORD *)this + 79) = &unk_1E429CC50;
  md::ElevatedStrokeTileData::clearEntities(this);
  v2 = (_QWORD *)*((_QWORD *)this + 99);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v4)
    operator delete(v4);
  v5 = *((_QWORD *)this + 94);
  if (v5)
  {
    v6 = *((_QWORD *)this + 95);
    v7 = (void *)*((_QWORD *)this + 94);
    if (v6 != v5)
    {
      do
        md::ElevatedStrokeGroup::~ElevatedStrokeGroup((md::ElevatedStrokeGroup *)(v6 - 160));
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 94);
    }
    *((_QWORD *)this + 95) = v5;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 91);
  if (v8)
  {
    *((_QWORD *)this + 92) = v8;
    operator delete(v8);
  }
  md::MapTileData::~MapTileData(this);
}

void sub_19FEB03D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1 + 776);
  std::vector<md::ElevatedStrokeGroup>::~vector[abi:nn180100]((void **)(v1 + 752));
  v3 = *(void **)(v1 + 728);
  if (v3)
  {
    *(_QWORD *)(v1 + 736) = v3;
    operator delete(v3);
  }
  md::MapTileData::~MapTileData((md::MapTileData *)v1);
  _Unwind_Resume(a1);
}

void md::ElevatedStrokeTileData::clearEntities(md::ElevatedStrokeTileData *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;

  v2 = (uint64_t *)*((_QWORD *)this + 91);
  v3 = (uint64_t *)*((_QWORD *)this + 92);
  if (v2 != v3)
  {
    v4 = *((_QWORD *)this + 90);
    do
    {
      v5 = *v2;
      v6 = (uint64_t *)gdc::Registry::storage<md::components::QueuedForDestruction<>>(v4);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v6, v5);
      v7 = *v2++;
      v8 = (uint64_t *)gdc::Registry::storage<md::components::QueuedForDestruction<md::DrapingLogic>>(v4);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v8, v7);
    }
    while (v2 != v3);
    v2 = (uint64_t *)*((_QWORD *)this + 91);
    v9 = (uint64_t *)*((_QWORD *)this + 92);
    if (v2 != v9)
    {
      v10 = *((_QWORD *)this + 90);
      do
      {
        v11 = (_QWORD *)gdc::Registry::storage<md::overlayComponents::VectorOverlay>(v10);
        v12 = *v2++;
        gdc::ComponentStorageWrapper<md::overlayComponents::VectorOverlay>::remove(v11, v12);
      }
      while (v2 != v9);
      v2 = (uint64_t *)*((_QWORD *)this + 91);
    }
  }
  *((_QWORD *)this + 92) = v2;
}

void md::ElevatedStrokeGroup::~ElevatedStrokeGroup(md::ElevatedStrokeGroup *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;

  v2 = (_QWORD *)*((_QWORD *)this + 17);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v4)
    operator delete(v4);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    if (!v8)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    if (!v8)
      goto LABEL_15;
  }
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_15:
  v11 = *((_QWORD *)this + 8);
  if (v11)
  {
    v12 = *((_QWORD *)this + 9);
    v13 = (void *)*((_QWORD *)this + 8);
    if (v12 != v11)
    {
      do
      {
        v14 = *(void **)(v12 - 64);
        if (v14)
        {
          *(_QWORD *)(v12 - 56) = v14;
          operator delete(v14);
        }
        v15 = *(void **)(v12 - 88);
        if (v15)
        {
          *(_QWORD *)(v12 - 80) = v15;
          operator delete(v15);
        }
        v12 -= 88;
      }
      while (v12 != v11);
      v13 = (void *)*((_QWORD *)this + 8);
    }
    *((_QWORD *)this + 9) = v11;
    operator delete(v13);
  }
  v16 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v17)
  {
    v18 = *(std::__shared_weak_count **)(v17 + 72);
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = *(std::__shared_weak_count **)(v17 + 8);
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    MEMORY[0x1A1AF4E00](v17, 0x1020C408635837CLL);
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (!v24)
    goto LABEL_43;
  v25 = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    v27 = *(_QWORD *)this;
    if (!*(_QWORD *)this)
      return;
  }
  else
  {
LABEL_43:
    v27 = *(_QWORD *)this;
    if (!*(_QWORD *)this)
      return;
  }
  *((_QWORD *)this + 1) = v27;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), v27, *((_QWORD *)this + 2) - v27);
}

void **std::vector<md::ElevatedStrokeGroup>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        md::ElevatedStrokeGroup::~ElevatedStrokeGroup((md::ElevatedStrokeGroup *)(v3 - 160));
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

int8x8_t *md::ElevatedStrokeTileData::groupContainingFeature(int8x8_t *this, int8x8_t *a2, unint64_t a3)
{
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  while (this != a2)
  {
    v3 = this[16];
    if (v3)
    {
      v4 = (uint8x8_t)vcnt_s8(v3);
      v4.i16[0] = vaddlv_u8(v4);
      if (v4.u32[0] > 1uLL)
      {
        v5 = a3;
        if (*(_QWORD *)&v3 <= a3)
          v5 = a3 % *(_QWORD *)&v3;
      }
      else
      {
        v5 = (*(_QWORD *)&v3 - 1) & a3;
      }
      v6 = *(_QWORD **)(*(_QWORD *)&this[15] + 8 * v5);
      if (v6)
      {
        v7 = (_QWORD *)*v6;
        if (v7)
        {
          if (v4.u32[0] < 2uLL)
          {
            v8 = *(_QWORD *)&v3 - 1;
            while (1)
            {
              v10 = v7[1];
              if (v10 == a3)
              {
                if (v7[2] == a3)
                  return this;
              }
              else if ((v10 & v8) != v5)
              {
                goto LABEL_2;
              }
              v7 = (_QWORD *)*v7;
              if (!v7)
                goto LABEL_2;
            }
          }
          do
          {
            v9 = v7[1];
            if (v9 == a3)
            {
              if (v7[2] == a3)
                return this;
            }
            else
            {
              if (v9 >= *(_QWORD *)&v3)
                v9 %= *(_QWORD *)&v3;
              if (v9 != v5)
                break;
            }
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
      }
    }
LABEL_2:
    this += 20;
  }
  return 0;
}

void sub_19FEB0C68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  md::mun::CollectionPoint::~CollectionPoint((md::mun::CollectionPoint *)&STACK[0x7C0]);
  _Unwind_Resume(a1);
}

void sub_19FEB0F48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FEB14E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::~unordered_set[abi:nn180100]((uint64_t)&a23);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a29);

  _Unwind_Resume(a1);
}

void sub_19FEB1CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  void *v18;

  operator delete(v18);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19FEB1FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  id *v28;

  objc_destroyWeak(v28);

  objc_destroyWeak(&location);
  md::mun::CollectionPoint::~CollectionPoint((md::mun::CollectionPoint *)&a25);

  _Unwind_Resume(a1);
}

void sub_19FEB2224(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FEB2970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,pthread_rwlock_t *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  geo::write_lock_guard::~write_lock_guard(&a26);

  _Unwind_Resume(a1);
}

void ___ZL32GEOGetVectorKitVKMapViewMuninLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "VKMapViewMunin");
  v1 = (void *)GEOGetVectorKitVKMapViewMuninLog(void)::log;
  GEOGetVectorKitVKMapViewMuninLog(void)::log = (uint64_t)v0;

}

void `anonymous namespace'::collectionPointFromStorefrontImagery(uint64_t a1, void *a2)
{
  id v3;
  float v4;
  float v5;
  float v6;
  double v7;
  float64x2_t v8;
  __float2 v9;
  __float2 v10;
  __float2 v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  double v23;
  double v24;
  __double2 v25;
  double v26;
  __double2 v27;
  long double v28;
  long double v29;
  float64x2_t v30;
  float v32;
  long double v33;
  long double v34;
  long double v35;
  double v36;
  double v37;
  __double2 v38;
  double v39;
  __double2 v40;
  long double v41;
  long double v42;
  float64x2_t v43;
  void *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  double v55;
  void *v56;
  BOOL v57;
  _BYTE *v58;
  void *v59;
  float v60;
  float v61;
  float v62;
  double v63;
  char *v64;
  __float2 v65;
  __float2 v66;
  __float2 v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  double v77;
  double v79;
  double v81;
  double v82;
  double v83;
  float64_t v84;
  float64_t v85;
  double v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float32x2_t v92;
  float v93;
  int v94;
  __int128 v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t i;
  _BYTE *v101;
  char v102;
  char *v103;
  _BYTE *v104;
  unint64_t v105;
  char *v106;
  unint64_t v107;
  size_t v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  __int128 *v116;
  _OWORD *v117;
  unint64_t v118;
  __int128 v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  char *v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  double v127;
  double v128;
  double v129;
  double v130;
  void **v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float64x2_t __x;
  void *v137;
  unint64_t v138;
  long double v139;
  void *v140;
  long double objb;
  id objc[2];
  id obj[2];
  void *obja;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  float64x2_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  _OWORD v161[6];
  __int128 v162;
  __int128 v163;
  int v164;
  char v165[40];
  double v166;
  __int128 v167;
  uint64_t v168;
  float64x2_t v169;
  float64x2_t v170;
  char v171[40];
  double v172;
  __int128 v173;
  uint64_t v174;
  double v175;
  double v176;
  double v177;
  double v178;
  _BYTE v179[128];
  uint64_t v180;

  v180 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0x3F80000000000000;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = a1 + 120;
  *(_QWORD *)(a1 + 112) = 6;
  v131 = (void **)(a1 + 88);
  *(_BYTE *)(a1 + 1860) = 0;
  v137 = v3;
  v126 = a1;
  *(_QWORD *)a1 = objc_msgSend(v3, "identifier");
  if (v3)
  {
    objc_msgSend(v3, "position");
    v5 = *((float *)&v150 + 3);
    v4 = *((float *)&v150 + 2);
    v6 = *(float *)&v151;
    v7 = *(double *)&v150;
    v8 = v149;
  }
  else
  {
    v6 = 0.0;
    v7 = 0.0;
    v5 = 0.0;
    v4 = 0.0;
    v8 = 0uLL;
  }
  __x = v8;
  v9 = __sincosf_stret(v4 * 0.5);
  v10 = __sincosf_stret(v5 * 0.5);
  v11 = __sincosf_stret(v6 * 0.5);
  v12 = (float)((float)(v10.__cosval * v9.__cosval) * v11.__cosval)
      + (float)((float)(v10.__sinval * v9.__sinval) * v11.__sinval);
  v134 = -(float)((float)((float)(v10.__sinval * v9.__sinval) * v11.__cosval)
                - (float)((float)(v10.__cosval * v9.__cosval) * v11.__sinval));
  v135 = v12;
  v132 = -(float)((float)((float)(v10.__sinval * v9.__cosval) * v11.__sinval)
                - (float)((float)(v10.__cosval * v9.__sinval) * v11.__cosval));
  v133 = (float)((float)(v10.__sinval * v9.__cosval) * v11.__cosval)
       + (float)((float)(v10.__cosval * v9.__sinval) * v11.__sinval);
  v13 = (float)((float)((float)(v134 * 0.5) + (float)(v12 * -0.5)) + (float)(v133 * 0.5)) - (float)(v132 * -0.5);
  v14 = (float)((float)(v12 * -0.5) - (float)(v134 * 0.5)) + (float)((float)(v133 * 0.5) + (float)(v132 * -0.5));
  v15 = (float)((float)(v134 * -0.5) + (float)(v12 * 0.5)) + (float)((float)(v133 * 0.5) + (float)(v132 * 0.5));
  v16 = (float)((float)(v12 * 0.5) + (float)(v133 * 0.5)) - (float)((float)(v134 * -0.5) + (float)(v132 * 0.5));
  *(float *)(a1 + 32) = v13;
  *(float *)(a1 + 36) = v14;
  *(float *)(a1 + 40) = v15;
  *(float *)(a1 + 44) = v16;
  *(float64x2_t *)(a1 + 8) = __x;
  *(double *)(a1 + 24) = v7;
  _D8 = __x.f64[1];
  __asm { FMLA            D0, D8, V1.D[1] }
  v23 = sqrt(_D0);
  v24 = atan2(v7, v23 * 0.996647189);
  objb = atan2(__x.f64[1], __x.f64[0]);
  v25 = __sincos_stret(v24);
  v130 = v7;
  v26 = atan2(v7 + v25.__sinval * v25.__sinval * 42841.3115 * v25.__sinval, v23 + v25.__cosval * v25.__cosval * -42697.6727 * v25.__cosval);
  v27 = __sincos_stret(v26);
  v28 = tan(v26 * 0.5 + 0.785398163);
  v29 = log(v28);
  v30.f64[0] = objb;
  v30.f64[1] = v29;
  __asm { FMOV            V1.2D, #0.5 }
  *(float64x2_t *)objc = _Q1;
  *(float64x2_t *)(a1 + 56) = vmlaq_f64(_Q1, (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL), v30);
  *(double *)(a1 + 72) = v23 / v27.__cosval + -6378137.0 / sqrt(v27.__sinval * v27.__sinval * -0.00669437999 + 1.0);
  v173 = *(_OWORD *)(a1 + 8);
  v174 = *(_QWORD *)(a1 + 24);
  v175 = v13;
  v176 = v14;
  v177 = v15;
  v178 = v16;
  gdc::CameraFrame<geo::Radians,double>::fromRigidTransformEcefNoOffset((uint64_t)v171, (double *)&v173);
  v32 = v172 * 0.318309886;
  *(float *)(a1 + 48) = v32 * 3.1416;
  *(_QWORD *)(a1 + 80) = objc_msgSend(v3, "timestamp");
  *(_WORD *)(a1 + 1856) = objc_msgSend(v3, "bucketId");
  *(_DWORD *)(a1 + 1852) = objc_msgSend(v3, "buildId");
  v33 = *(double *)(a1 + 8);
  v34 = *(double *)(a1 + 16);
  v35 = *(double *)(a1 + 24);
  v36 = sqrt(v33 * v33 + v34 * v34);
  v37 = atan2(v35, v36 * 0.996647189);
  v139 = atan2(v34, v33);
  v38 = __sincos_stret(v37);
  v39 = atan2(v35 + v38.__sinval * v38.__sinval * 42841.3115 * v38.__sinval, v36 + v38.__cosval * v38.__cosval * -42697.6727 * v38.__cosval);
  v40 = __sincos_stret(v39);
  v41 = tan(v39 * 0.5 + 0.785398163);
  v42 = log(v41);
  v43.f64[0] = v139;
  v43.f64[1] = v42;
  *(float64x2_t *)(a1 + 56) = vmlaq_f64(*(float64x2_t *)objc, (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL), v43);
  *(double *)(a1 + 72) = v36 / v40.__cosval + -6378137.0 / sqrt(v40.__sinval * v40.__sinval * -0.00669437999 + 1.0);
  *(_DWORD *)(a1 + 1848) = 1077936128;
  *(_BYTE *)(a1 + 1858) = 1;
  *(_BYTE *)(a1 + 1859) = objc_msgSend(v3, "dataFormatVersion") != 0;
  objc_msgSend(v3, "cameras");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = objc_msgSend(v44, "count");
  v46 = v45;
  v47 = *(_QWORD *)(a1 + 88);
  v48 = *(_QWORD *)(a1 + 96);
  v49 = 0x8E38E38E38E38E39 * ((v48 - v47) >> 5);
  if (v49 > v45)
  {
    v50 = v47 + 288 * v45;
    if (v50 != v48)
    {
      v51 = v47 + 288 * v45;
      do
      {
        v52 = *(void **)(v51 + 248);
        if (v52 != *(void **)(v51 + 264))
          free(v52);
        v51 += 288;
      }
      while (v51 != v48);
      v48 = v50;
    }
LABEL_17:
    *(_QWORD *)(v126 + 96) = v48;
    goto LABEL_18;
  }
  if (v49 < v45)
  {
    if (*(_QWORD *)(a1 + 112) < v45)
    {
      geo::small_vector_base<md::mun::PhotoInfo>::grow(v131, v45);
      v47 = *(_QWORD *)(a1 + 88);
      v48 = *(_QWORD *)(a1 + 96);
    }
    v53 = v47 + 288 * v46;
    if (v48 != v53)
    {
      do
      {
        *(_OWORD *)(v48 + 256) = 0uLL;
        *(_OWORD *)(v48 + 272) = 0uLL;
        *(_OWORD *)(v48 + 224) = 0uLL;
        *(_OWORD *)(v48 + 240) = 0uLL;
        *(_OWORD *)(v48 + 192) = 0uLL;
        *(_OWORD *)(v48 + 208) = 0uLL;
        *(_OWORD *)(v48 + 160) = 0uLL;
        *(_OWORD *)(v48 + 176) = 0uLL;
        *(_OWORD *)(v48 + 128) = 0uLL;
        *(_OWORD *)(v48 + 144) = 0uLL;
        *(_OWORD *)(v48 + 96) = 0uLL;
        *(_OWORD *)(v48 + 112) = 0uLL;
        *(_OWORD *)(v48 + 64) = 0uLL;
        *(_OWORD *)(v48 + 80) = 0uLL;
        *(_OWORD *)(v48 + 32) = 0uLL;
        *(_OWORD *)(v48 + 48) = 0uLL;
        *(_OWORD *)v48 = 0uLL;
        *(_OWORD *)(v48 + 16) = 0uLL;
        *(_DWORD *)(v48 + 36) = 1065353216;
        *(_QWORD *)(v48 + 248) = v48 + 280;
        *(_QWORD *)(v48 + 256) = v48 + 280;
        *(_QWORD *)(v48 + 264) = v48 + 280;
        *(_QWORD *)(v48 + 272) = 2;
        v48 += 288;
      }
      while (v48 != v53);
      v48 = v53;
    }
    goto LABEL_17;
  }
LABEL_18:

  v54 = 0;
  v127 = v133;
  v55 = v132;
  v128 = v135;
  v129 = v134;
  while (1)
  {
    objc_msgSend(v137, "cameras");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    v57 = v54 < objc_msgSend(v56, "count");

    if (!v57)
      break;
    v58 = *v131;
    objc_msgSend(v137, "cameras");
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v59, "objectAtIndex:", v54);
    v140 = (void *)objc_claimAutoreleasedReturnValue();

    v58[288 * v54 + 240] = objc_msgSend(v140, "cameraNumber");
    if (v140)
    {
      objc_msgSend(v140, "position");
      v61 = *((float *)&v150 + 3);
      v60 = *((float *)&v150 + 2);
      v62 = *(float *)&v151;
      v63 = *(double *)&v150;
      *(float64x2_t *)obj = v149;
    }
    else
    {
      v62 = 0.0;
      v63 = 0.0;
      *(_OWORD *)obj = 0u;
      v61 = 0.0;
      v60 = 0.0;
    }
    v64 = &v58[288 * v54];
    v65 = __sincosf_stret(v60 * 0.5);
    v66 = __sincosf_stret(v61 * 0.5);
    v67 = __sincosf_stret(v62 * 0.5);
    v68 = (float)((float)(v66.__cosval * v65.__cosval) * v67.__cosval)
        + (float)((float)(v66.__sinval * v65.__sinval) * v67.__sinval);
    v69 = -(float)((float)((float)(v66.__sinval * v65.__sinval) * v67.__cosval)
                 - (float)((float)(v66.__cosval * v65.__cosval) * v67.__sinval));
    v70 = (float)((float)(v66.__sinval * v65.__cosval) * v67.__cosval)
        + (float)((float)(v66.__cosval * v65.__sinval) * v67.__sinval);
    v71 = -(float)((float)((float)(v66.__sinval * v65.__cosval) * v67.__sinval)
                 - (float)((float)(v66.__cosval * v65.__sinval) * v67.__cosval));
    v72 = (float)((float)((float)(v69 * v135) + (float)(v134 * v68)) + (float)(v133 * v71)) - (float)(v132 * v70);
    v73 = (float)((float)(v133 * v68) - (float)((float)(v134 * v71) - (float)(v70 * v135))) + (float)(v132 * v69);
    v74 = (float)((float)((float)(v71 * v135) + (float)(v134 * v70)) - (float)(v133 * v69)) + (float)(v132 * v68);
    v75 = -(float)((float)((float)((float)(v134 * v69) + (float)(v133 * v70)) + (float)(v132 * v71))
                 - (float)(v68 * v135));
    _V17.D[1] = obj[1];
    v77 = vmuld_lane_f64(v55, *(float64x2_t *)obj, 1);
    _D18 = v134;
    v79 = vmlad_n_f64(-(v63 * v129), v55, *(double *)obj);
    __asm { FMLA            D7, D18, V17.D[1] }
    v81 = -(v77 - v63 * v127) - (v77 - v63 * v127);
    v82 = v79 + v79;
    v83 = _D7 + _D7;
    v84 = vaddq_f64(__x, *(float64x2_t *)obj).f64[0] + v81 * v128 + v83 * v127 - v82 * v55;
    v85 = __x.f64[1] + *(double *)&obj[1] + v81 * v55 + v82 * v128 - v83 * v129;
    v86 = v130 + v63 - v81 * v127 + v82 * v129 + v83 * v128;
    *(float *)&v82 = v75 * -0.5;
    v87 = v75 * 0.5;
    *(float *)&v83 = v72 * 0.5;
    v88 = v73 * 0.5;
    v89 = v74 * 0.5;
    v90 = v74 * -0.5;
    v91 = v72 * -0.5;
    *((float *)v64 + 6) = (float)((float)(*(float *)&v83 + *(float *)&v82) + v88) - v90;
    *((float *)v64 + 7) = (float)(*(float *)&v82 - *(float *)&v83) + (float)(v88 + v90);
    *((float *)v64 + 8) = (float)(v91 + v87) + (float)(v88 + v89);
    *((float *)v64 + 9) = (float)(v87 + v88) - (float)(v91 + v89);
    *(float64_t *)v64 = v84;
    *((float64_t *)v64 + 1) = v85;
    *((double *)v64 + 2) = v86;
    v167 = *(_OWORD *)v64;
    v168 = *((_QWORD *)v64 + 2);
    v92 = *(float32x2_t *)(v64 + 32);
    v169 = vcvtq_f64_f32(*(float32x2_t *)(v64 + 24));
    v170 = vcvtq_f64_f32(v92);
    gdc::CameraFrame<geo::Radians,double>::fromRigidTransformEcefNoOffset((uint64_t)v165, (double *)&v167);
    v93 = v166 * 0.318309886;
    *((float *)v64 + 10) = v93 * 3.1416;
    if (v140)
    {
      objc_msgSend(v140, "projection");
      *(_DWORD *)&v58[288 * v54 + 236] = LODWORD(v149.f64[0]);
      objc_msgSend(v140, "projection");
      LODWORD(v162) = LODWORD(v149.f64[0]);
      objc_msgSend(v140, "projection");
      DWORD1(v162) = HIDWORD(v149.f64[0]);
      objc_msgSend(v140, "projection");
      DWORD2(v162) = LODWORD(v149.f64[1]);
      objc_msgSend(v140, "projection");
      HIDWORD(v162) = HIDWORD(v149.f64[1]);
      objc_msgSend(v140, "projection");
      LODWORD(v163) = v150;
      objc_msgSend(v140, "projection");
      DWORD1(v163) = DWORD1(v150);
      objc_msgSend(v140, "projection");
      DWORD2(v163) = DWORD2(v150);
      objc_msgSend(v140, "projection");
      HIDWORD(v163) = HIDWORD(v150);
      objc_msgSend(v140, "projection");
      v94 = v151;
      v95 = 0uLL;
    }
    else
    {
      *(_DWORD *)&v58[288 * v54 + 236] = 0;
      v95 = 0uLL;
      v162 = 0u;
      v163 = 0u;
      v94 = 0;
    }
    v164 = v94;
    v161[4] = v95;
    v161[5] = v95;
    v161[2] = v95;
    v161[3] = v95;
    v161[0] = v95;
    v161[1] = v95;
    objc_msgSend(v140, "lensType");
    GEOMuninFrustumFromLensModel();
    md::mun::frustumFromGEOFrustumCorners((uint64_t)&v149, v161);
    v96 = &v58[288 * v54];
    *(float64x2_t *)(v96 + 44) = v149;
    *(_OWORD *)(v96 + 60) = v150;
    *(_OWORD *)(v96 + 76) = v151;
    *(_OWORD *)(v96 + 92) = v152;
    *(_OWORD *)(v96 + 108) = v153;
    *(_OWORD *)(v96 + 124) = v154;
    *(_OWORD *)(v96 + 140) = v155;
    *(_OWORD *)(v96 + 156) = v156;
    *(_OWORD *)(v96 + 172) = v157;
    *(_OWORD *)(v96 + 188) = v158;
    *(_OWORD *)(v96 + 204) = v159;
    *(_OWORD *)(v96 + 220) = v160;
    v145 = 0u;
    v146 = 0u;
    v147 = 0u;
    v148 = 0u;
    objc_msgSend(v140, "textureIds");
    v138 = v54;
    obja = (void *)objc_claimAutoreleasedReturnValue();
    v97 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v145, v179, 16);
    if (v97)
    {
      v98 = *(_QWORD *)v146;
      v99 = (uint64_t)&v58[288 * v54 + 248];
      do
      {
        for (i = 0; i != v97; ++i)
        {
          if (*(_QWORD *)v146 != v98)
            objc_enumerationMutation(obja);
          v102 = objc_msgSend(*(id *)(*((_QWORD *)&v145 + 1) + 8 * i), "unsignedIntegerValue");
          v103 = *(char **)v99;
          v101 = *(_BYTE **)(v99 + 8);
          v104 = &v101[-*(_QWORD *)v99];
          v105 = *(_QWORD *)(v99 + 24);
          if (v105 < (unint64_t)(v104 + 1))
          {
            v106 = *(char **)(v99 + 16);
            v107 = (1 << -(char)__clz(v105 + 1));
            if (v105 >= 0xFFFFFFFFFFFFFFFELL)
              v107 = 1;
            if (v107 <= (unint64_t)(v104 + 1))
              v108 = (size_t)(v104 + 1);
            else
              v108 = v107;
            v109 = (char *)malloc_type_malloc(v108, 0x100004077774924uLL);
            v110 = v109;
            v111 = *(char **)v99;
            v112 = *(char **)(v99 + 8);
            if (*(char **)v99 == v112)
              goto LABEL_55;
            v113 = v112 - v111;
            if ((unint64_t)(v112 - v111) < 8)
            {
              v114 = v109;
            }
            else
            {
              v114 = v109;
              if ((unint64_t)(v109 - v111) >= 0x20)
              {
                if (v113 < 0x20)
                {
                  v115 = 0;
LABEL_49:
                  v120 = v113 & 0xFFFFFFFFFFFFFFF8;
                  v114 = &v109[v113 & 0xFFFFFFFFFFFFFFF8];
                  v121 = v115 - (v113 & 0xFFFFFFFFFFFFFFF8);
                  v122 = (uint64_t *)&v111[v115];
                  v123 = &v109[v115];
                  do
                  {
                    v124 = *v122++;
                    *(_QWORD *)v123 = v124;
                    v123 += 8;
                    v121 += 8;
                  }
                  while (v121);
                  if (v113 != v120)
                  {
                    v111 += v120;
                    goto LABEL_54;
                  }
LABEL_55:
                  if (v103 != v106)
                    free(*(void **)v99);
                  v101 = &v104[(_QWORD)v110];
                  *(_QWORD *)v99 = v110;
                  *(_QWORD *)(v99 + 8) = &v104[(_QWORD)v110];
                  *(_QWORD *)(v99 + 24) = v108;
                  goto LABEL_30;
                }
                v115 = v113 & 0xFFFFFFFFFFFFFFE0;
                v116 = (__int128 *)(v111 + 16);
                v117 = v109 + 16;
                v118 = v113 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v119 = *v116;
                  *(v117 - 1) = *(v116 - 1);
                  *v117 = v119;
                  v116 += 2;
                  v117 += 2;
                  v118 -= 32;
                }
                while (v118);
                if (v113 == v115)
                  goto LABEL_55;
                if ((v113 & 0x18) != 0)
                  goto LABEL_49;
                v111 += v115;
                v114 = &v109[v115];
              }
            }
            do
            {
LABEL_54:
              v125 = *v111++;
              *v114++ = v125;
            }
            while (v111 != v112);
            goto LABEL_55;
          }
LABEL_30:
          *v101 = v102;
          ++*(_QWORD *)(v99 + 8);
        }
        v97 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v145, v179, 16);
      }
      while (v97);
    }

    v54 = v138 + 1;
  }

}

void sub_19FEB3700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _QWORD *v22;
  _QWORD *v23;
  void *v24;

  v23 = (_QWORD *)a9[11];
  v22 = (_QWORD *)a9[12];
  if (v23 != v22)
  {
    do
    {
      v24 = (void *)v23[31];
      if (v24 != (void *)v23[33])
        free(v24);
      v23 += 36;
    }
    while (v23 != v22);
    v23 = *a16;
  }
  if (v23 != (_QWORD *)a9[13])
    free(v23);

  _Unwind_Resume(a1);
}

void sub_19FEB3898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FEB3E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  void *v28;
  void *v29;
  uint64_t v30;

  operator delete(v28);
  if (__p)
    operator delete(__p);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(_QWORD **)(v30 - 104));
  _Unwind_Resume(a1);
}

char *calcHuffmanEncodeTableInt(int a1, int a2, int a3, unsigned int a4)
{
  unsigned int v4;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  __int16 *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v4 = a4;
  v8 = 8 * a4;
  v9 = malloc_type_malloc(v8, 0x2004093837F09uLL);
  v10 = v9;
  if (!v4)
  {
    free(v9);
    return 0;
  }
  v11 = 0;
  do
  {
    v12 = 0xFFFFFFFF / (a3 + a2 * (int)v11);
    v13 = malloc_type_malloc(0x30uLL, 0x102004089A409D2uLL);
    v13[3] = 0;
    v13[4] = 0;
    v13[2] = 0;
    *((_BYTE *)v13 + 40) = 0;
    v10[v11] = v13;
    *(_WORD *)v13 = v11++;
    a2 += a1;
    *((_DWORD *)v13 + 1) = v12;
    *((_DWORD *)v13 + 2) = 0;
  }
  while (v4 != v11);
  v14 = v4 - 1;
  if (v4 != 1)
  {
    do
    {
      v15 = v10[v14];
      v16 = v10[v4 - 2];
      v17 = malloc_type_malloc(0x30uLL, 0x102004089A409D2uLL);
      v17[4] = 0;
      *(_WORD *)v17 = -1;
      v18 = *(_DWORD *)(v16 + 4) + *(_DWORD *)(v15 + 4);
      *(_QWORD *)(v15 + 32) = v17;
      v17[2] = v15;
      v17[3] = v16;
      *(_QWORD *)(v16 + 32) = v17;
      *(_QWORD *)((char *)v17 + 4) = v18;
      *((_BYTE *)v17 + 40) = 0;
      v4 = v14;
      v19 = v14;
      do
      {
        v20 = v19 - 1;
        v21 = v10[v19 - 1];
        if (v18 <= *(_DWORD *)(v21 + 4))
          break;
        v10[v19--] = v21;
      }
      while (v20);
      v10[v19] = v17;
      --v14;
    }
    while ((_DWORD)v14);
  }
  v22 = (_QWORD *)*v10;
  free(v10);
  if (!v22)
    return 0;
  v23 = (char *)malloc_type_malloc(v8, 0x100004090D0E795uLL);
  bzero(v23, v8);
  v24 = malloc_type_malloc(0xA0uLL, 0x2004093837F09uLL);
  v25 = v24;
  *v24 = v22;
  LODWORD(v26) = 1;
  while (1)
  {
    v27 = (int)v26;
    v26 = (int)v26 - 1;
    v28 = (__int16 *)v24[v26];
    if (!v28)
      break;
    if (*v28 < 0)
    {
      v24[v26] = *((_QWORD *)v28 + 2);
      LODWORD(v26) = v27 + 1;
      v24[v27] = *((_QWORD *)v28 + 3);
      v30 = *((_QWORD *)v28 + 2);
      if (!v30)
        goto LABEL_18;
LABEL_17:
      *(_DWORD *)(v30 + 8) = 2 * *((_DWORD *)v28 + 2);
      *(_BYTE *)(v30 + 40) = *((_BYTE *)v28 + 40) + 1;
      goto LABEL_18;
    }
    v29 = &v23[8 * (unsigned __int16)*v28];
    *(_DWORD *)v29 = *((_DWORD *)v28 + 2);
    v29[4] = *((_BYTE *)v28 + 40);
    v30 = *((_QWORD *)v28 + 2);
    if (v30)
      goto LABEL_17;
LABEL_18:
    v31 = *((_QWORD *)v28 + 3);
    if (v31)
    {
      *(_DWORD *)(v31 + 8) = (2 * *((_DWORD *)v28 + 2)) | 1;
      *(_BYTE *)(v31 + 40) = *((_BYTE *)v28 + 40) + 1;
    }
    if (!(_DWORD)v26)
      goto LABEL_25;
  }
  free(v23);
  v23 = 0;
LABEL_25:
  freeHuffmanTreeInt(v22);
  free(v25);
  return v23;
}

void freeHuffmanTreeInt(_QWORD *a1)
{
  if (a1)
  {
    freeHuffmanTreeInt(a1[2]);
    freeHuffmanTreeInt(a1[3]);
    free(a1);
  }
}

_QWORD *calcHuffmanDecodeTable(uint64_t a1, unsigned int a2)
{
  _BYTE *v4;
  unsigned __int16 *v5;
  uint64_t v6;
  char *v7;
  unsigned int v8;
  int v9;
  unsigned __int8 v10;
  unsigned __int16 v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _DWORD *v17;
  uint64_t v19;
  _BYTE *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t *v32;

  v4 = malloc_type_malloc(0x10001uLL, 0xC1B39415uLL);
  v5 = (unsigned __int16 *)malloc_type_malloc(0x20000uLL, 0x1000040BDFB0063uLL);
  bzero(v4, 0x10001uLL);
  bzero(v5, 0x20000uLL);
  if (a2)
  {
    v6 = a2;
    v7 = (char *)(a1 + 4);
    v8 = 1;
    do
    {
      v9 = *v7;
      if (v9 >= 17)
      {
        v10 = v9 - 16;
        v11 = v5[(unsigned __int16)(*((_DWORD *)v7 - 1) >> v10)];
        if (!v11)
        {
          v5[(unsigned __int16)(*((_DWORD *)v7 - 1) >> v10)] = v8;
          v11 = v8++;
        }
        if (v4[v11] < v10)
          v4[v11] = v10;
      }
      v7 += 8;
      --v6;
    }
    while (v6);
  }
  else
  {
    v8 = 1;
  }
  *v4 = 16;
  v12 = malloc_type_malloc(8 * (v8 + 1), 0x2004093837F09uLL);
  v13 = v12;
  if (v8)
  {
    v14 = 0;
    v15 = v8;
    do
    {
      v16 = 1;
      v17 = malloc_type_malloc(8 * (1 << v4[v14]), 0x100004090D0E795uLL);
      v13[v14] = v17;
      do
        v17[2 * v16 - 2] = 0xFFFF;
      while (!(v16++ >> v4[v14]));
      ++v14;
    }
    while (v14 != v8);
    v13[v8] = 0;
    if (!a2)
      goto LABEL_23;
  }
  else
  {
    v15 = 0;
    *v12 = 0;
    if (!a2)
      goto LABEL_23;
  }
  v19 = 0;
  v20 = (_BYTE *)(a1 + 4);
  do
  {
    LODWORD(v24) = (char)*v20;
    v25 = *((_DWORD *)v20 - 1);
    v26 = v24 - 16;
    if ((int)v24 > 16)
    {
      v21 = v25 >> v26;
      v22 = v5[v25 >> v26];
      v24 = *v13 + 8 * v21;
      *(_DWORD *)v24 = v22;
      *(_BYTE *)(v24 + 4) = -v4[v22];
      v23 = v13[v22] + 8 * ((*((_DWORD *)v20 - 1) & ~(-1 << v26)) << (v4[v22] - v26));
      *(_DWORD *)v23 = v19;
      LOBYTE(v24) = *v20;
    }
    else
    {
      v23 = *v13 + 8 * (v25 << (16 - v24));
      *(_DWORD *)v23 = v19;
    }
    *(_BYTE *)(v23 + 4) = v24;
    ++v19;
    v20 += 8;
  }
  while (a2 != v19);
LABEL_23:
  if (v8)
  {
    v27 = 0;
    do
    {
      v28 = v4[v27];
      if (v28)
      {
        v29 = *(_QWORD *)v13[v27];
        v30 = 2;
        do
        {
          v32 = (uint64_t *)(v13[v27] + 8 * (v30 - 1));
          if (*(_DWORD *)v32 == 0xFFFF)
          {
            *v32 = v29;
            v28 = v4[v27];
          }
          else
          {
            v29 = *v32;
          }
        }
        while (!(v30++ >> v28));
      }
      ++v27;
    }
    while (v27 != v15);
  }
  free(v4);
  free(v5);
  return v13;
}

unsigned int *huffmanDecode(unsigned int *result, int a2, _WORD *a3, unsigned int a4, uint64_t *a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;

  if (a4)
  {
    v5 = 0;
    v6 = 0;
    v7 = *a5;
    v8 = result;
    v9 = a4;
    do
    {
      if (v6 <= 0)
      {
        v14 = *v8++;
        v5 |= (unint64_t)bswap32(v14) << (32 - v6);
        v6 += 32;
      }
      v15 = v6 - 1;
      v16 = 2 * v5;
      v17 = v6 - 1 + 8 * ((_DWORD)result - (_DWORD)v8 + a2);
      if (v17 > 0xF)
      {
        if (v6 <= 16)
        {
          v20 = *v8++;
          v16 |= (unint64_t)bswap32(v20) << (33 - v6);
          v15 = v6 + 31;
        }
        v19 = HIWORD(v16);
      }
      else
      {
        if (v6 <= (int)v17)
        {
          v18 = *v8++;
          v16 |= (unint64_t)bswap32(v18) << (33 - v6);
          v15 = v6 + 31;
        }
        LODWORD(v19) = (v16 >> -(char)v17) << (16 - v17);
      }
      v21 = v19;
      v22 = *(char *)(v7 + 8 * v19 + 4);
      v23 = *(unsigned __int8 *)(v7 + 8 * v19 + 4);
      if (v22 < 1)
      {
        if (v15 <= 15)
        {
          v25 = *v8++;
          v16 |= (unint64_t)bswap32(v25) << (32 - v15);
          v15 += 32;
        }
        v26 = -v23;
        v27 = v15 - 16;
        v28 = v16 << 16;
        if (v15 - 16 < (char)v26)
        {
          v29 = *v8++;
          v28 |= (unint64_t)bswap32(v29) << (48 - v15);
          v27 = v15 + 16;
        }
        v30 = *(unsigned __int16 *)(v7 + 8 * v21);
        v31 = v28 >> -(char)v26;
        v32 = a5[v30];
        v33 = *(char *)(v32 + 8 * v31 + 4) - 16;
        if (v27 < v33)
        {
          v34 = *v8++;
          v28 |= (unint64_t)bswap32(v34) << (32 - v27);
          v27 += 32;
        }
        v6 = v27 - v33;
        v10 = v28 << v33;
        v11 = (int *)(v32 + 8 * v31);
      }
      else
      {
        if (v15 < v23)
        {
          v24 = *v8++;
          v16 |= (unint64_t)bswap32(v24) << (32 - v15);
          v15 += 32;
        }
        v6 = v15 - v23;
        v10 = v16 << v22;
        v11 = (int *)(v7 + 8 * v21);
      }
      v12 = *v11;
      if (v5 >= 0)
        LOWORD(v13) = v12;
      else
        v13 = -v12;
      *a3++ = v13;
      v5 = v10;
      --v9;
    }
    while (v9);
  }
  return result;
}

void std::__function::__func<md::ita::ProcessRenderableForStyleGroundOcclusion::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>)::$_0,std::allocator<md::ita::ProcessRenderableForStyleGroundOcclusion::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ita::ProcessRenderableForStyleGroundOcclusion::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>)::$_0,std::allocator<md::ita::ProcessRenderableForStyleGroundOcclusion::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E427C8A0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<md::ita::ProcessRenderableForStyleGroundOcclusion::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>)::$_0,std::allocator<md::ita::ProcessRenderableForStyleGroundOcclusion::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E427C8A0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t (***std::__function::__func<md::ita::ProcessRenderableForStyleGroundOcclusion::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>)::$_0,std::allocator<md::ita::ProcessRenderableForStyleGroundOcclusion::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&)>::operator()(uint64_t (***result)(), uint64_t a2, uint64_t a3))()
{
  float v3;
  uint64_t (***v4)();
  float32x2_t v5;
  size_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  char *v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  _QWORD *v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  uint8x8_t v74;
  _QWORD *v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  float v80;
  float v81;
  _BOOL8 v82;
  unint64_t v83;
  unint64_t v84;
  size_t prime;
  unint64_t v86;
  uint8x8_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint8x8_t v98;
  void **v99;
  _QWORD *v100;
  uint64_t v102;
  unint64_t v104;
  float v105;
  float v106;
  _BOOL8 v107;
  unint64_t v108;
  unint64_t v109;
  void *v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  size_t v115;
  size_t v116;
  size_t v117;
  _QWORD *v118;
  size_t v119;
  uint64_t v120;
  unint64_t v121;
  uint8x8_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  size_t v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  unint64_t v130;
  unint64_t v131;
  uint8x8_t v132;
  _QWORD **v133;
  _QWORD *v134;
  unint64_t v135;
  uint64_t v136;
  float v137;
  float v138;
  _BOOL8 v139;
  unint64_t v140;
  unint64_t v141;
  size_t v142;
  void *v143;
  void *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  size_t v148;
  size_t v149;
  size_t v150;
  _QWORD *v151;
  size_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint8x8_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  size_t v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  _QWORD *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  uint64_t v169;
  _QWORD *v170;
  _QWORD *v171;
  unint64_t v172;
  uint8x8_t v173;
  _QWORD **v174;
  _QWORD *v175;
  unint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  float v179;
  float v180;
  _BOOL8 v181;
  unint64_t v182;
  unint64_t v183;
  size_t v184;
  void *v185;
  void *v186;
  uint64_t v187;
  _QWORD *v188;
  size_t v189;
  size_t v190;
  size_t v191;
  _QWORD *v192;
  size_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint8x8_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  size_t v201;
  uint64_t v202;
  void *v203;
  uint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  unint64_t v209;
  _WORD *v210;
  uint64_t v216;
  uint64_t v217;
  float v218;
  int32x2_t v219;
  char v220;
  uint64_t (**v221)();
  __int128 v222;
  uint64_t (***v223)();
  _BYTE v224[24];
  _BYTE *v225;
  int v226;
  uint64_t v227;

  v227 = *MEMORY[0x1E0C80C00];
  v3 = fmax(*((double *)*result[1] + 4) * 0.5, 250.0)
     * (float)(fmaxf((float)(*(float *)result[3] * 0.125) + -0.875, 0.0)
             * (float)(*(float *)result[2] * *(float *)(a3 + 8)));
  if (v3 < 0.001)
    return result;
  v4 = result;
  v218 = v3;
  v5.f32[0] = v3;
  v5.i32[1] = *(_DWORD *)result[4];
  v6 = (size_t)result[6];
  v7 = (uint64_t)*result[5];
  v8 = (_QWORD *)(v7 + 7256);
  v219 = vcvt_s32_f32(vmul_f32(v5, (float32x2_t)vdup_n_s32(0x447A0000u)));
  v9 = std::__hash_table<std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,std::__unordered_map_hasher<md::StyleGroundOcclusionCacheKey,std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,md::StyleGroundOcclusionCacheKeyHasher,std::equal_to<md::StyleGroundOcclusionCacheKey>,true>,std::__unordered_map_equal<md::StyleGroundOcclusionCacheKey,std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,std::equal_to<md::StyleGroundOcclusionCacheKey>,md::StyleGroundOcclusionCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>>>::find<md::StyleGroundOcclusionCacheKey>((_QWORD *)(v7 + 7256), v219.i32[0], v219.i32[1]);
  if (!v9 || !v9[3])
  {
    memset(v224, 0, sizeof(v224));
    v13 = *(_QWORD *)(v7 + 7128);
    if (*(_QWORD *)(v7 + 7120) == v13)
    {
      v16 = (-1431655765 * ((*(_QWORD *)(v7 + 7176) - *(_QWORD *)(v7 + 7168)) >> 3)) | 0x100000000;
      v17 = *(uint64_t **)(v7 + 7152);
      v18 = *(_QWORD *)(v7 + 7160);
      if ((unint64_t)v17 >= v18)
      {
        v20 = *(char **)(v7 + 7144);
        v6 = (char *)v17 - v20;
        v21 = ((char *)v17 - v20) >> 3;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61)
          goto LABEL_427;
        v23 = v18 - (_QWORD)v20;
        if (v23 >> 2 > v22)
          v22 = v23 >> 2;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          if (v24 >> 61)
            goto LABEL_426;
          v25 = (char *)operator new(8 * v24);
        }
        else
        {
          v25 = 0;
        }
        v26 = (uint64_t *)&v25[8 * v21];
        v27 = &v25[8 * v24];
        *v26 = v16;
        v19 = v26 + 1;
        if (v17 != (uint64_t *)v20)
        {
          v28 = (char *)v17 - v20 - 8;
          if (v28 < 0x58)
            goto LABEL_430;
          if ((unint64_t)(v20 - v25) < 0x20)
            goto LABEL_430;
          v29 = (v28 >> 3) + 1;
          v30 = &v25[8 * v21 - 16];
          v31 = v17 - 2;
          v32 = v29 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v33 = *(_OWORD *)v31;
            *((_OWORD *)v30 - 1) = *((_OWORD *)v31 - 1);
            *(_OWORD *)v30 = v33;
            v30 -= 32;
            v31 -= 4;
            v32 -= 4;
          }
          while (v32);
          v26 -= v29 & 0x3FFFFFFFFFFFFFFCLL;
          v17 -= v29 & 0x3FFFFFFFFFFFFFFCLL;
          if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_430:
            do
            {
              v34 = *--v17;
              *--v26 = v34;
            }
            while (v17 != (uint64_t *)v20);
          }
          v17 = *(uint64_t **)(v7 + 7144);
        }
        *(_QWORD *)(v7 + 7144) = v26;
        *(_QWORD *)(v7 + 7152) = v19;
        *(_QWORD *)(v7 + 7160) = v27;
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v17 = v16;
        v19 = v17 + 1;
      }
      *(_QWORD *)(v7 + 7152) = v19;
      v15 = *(v19 - 1);
    }
    else
    {
      v14 = *(_QWORD *)(v13 - 8);
      *(_QWORD *)(v7 + 7128) = v13 - 8;
      *(_DWORD *)(*(_QWORD *)(v7 + 7144) + 8 * v14) = -1431655765
                                                    * ((*(_QWORD *)(v7 + 7176) - *(_QWORD *)(v7 + 7168)) >> 3);
      *(_DWORD *)(*(_QWORD *)(v7 + 7144) + 8 * v14 + 4) = (((unint64_t)*(unsigned int *)(*(_QWORD *)(v7 + 7144)
                                                                                              + 8 * v14
                                                                                              + 4) << 32)
                                                         + 0x100000000) >> 32;
      v15 = v14 | ((unint64_t)*(unsigned int *)(*(_QWORD *)(v7 + 7144) + 8 * v14 + 4) << 32);
    }
    v35 = *(char **)(v7 + 7176);
    v36 = *(_QWORD *)(v7 + 7184);
    if ((unint64_t)v35 >= v36)
    {
      v41 = *(char **)(v7 + 7168);
      v42 = 0xAAAAAAAAAAAAAAABLL * ((v35 - v41) >> 3) + 1;
      if (v42 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_427;
      v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (_QWORD)v41) >> 3);
      if (2 * v43 > v42)
        v42 = 2 * v43;
      if (v43 >= 0x555555555555555)
        v6 = 0xAAAAAAAAAAAAAAALL;
      else
        v6 = v42;
      if (v6 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_426;
      v44 = (char *)operator new(24 * v6);
      v45 = &v44[8 * ((v35 - v41) >> 3)];
      *(_OWORD *)v45 = *(_OWORD *)v224;
      v46 = *(_QWORD *)&v224[16];
      *((_QWORD *)v45 + 2) = *(_QWORD *)&v224[16];
      if (v46)
      {
        v47 = (unint64_t *)(v46 + 8);
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
        v35 = *(char **)(v7 + 7176);
        v41 = *(char **)(v7 + 7168);
      }
      v49 = &v44[24 * v6];
      v40 = v45 + 24;
      if (v35 == v41)
      {
        *(_QWORD *)(v7 + 7168) = v45;
        *(_QWORD *)(v7 + 7176) = v40;
        *(_QWORD *)(v7 + 7184) = v49;
      }
      else
      {
        do
        {
          v50 = *(_OWORD *)(v35 - 24);
          v35 -= 24;
          *(_OWORD *)(v45 - 24) = v50;
          v45 -= 24;
          *((_QWORD *)v45 + 2) = *((_QWORD *)v35 + 2);
          *((_QWORD *)v35 + 1) = 0;
          *((_QWORD *)v35 + 2) = 0;
        }
        while (v35 != v41);
        v41 = *(char **)(v7 + 7168);
        v6 = *(_QWORD *)(v7 + 7176);
        *(_QWORD *)(v7 + 7168) = v45;
        *(_QWORD *)(v7 + 7176) = v40;
        *(_QWORD *)(v7 + 7184) = v49;
        while ((char *)v6 != v41)
        {
          v51 = *(std::__shared_weak_count **)(v6 - 8);
          if (v51)
          {
            p_shared_owners = (unint64_t *)&v51->__shared_owners_;
            do
              v53 = __ldaxr(p_shared_owners);
            while (__stlxr(v53 - 1, p_shared_owners));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          v6 -= 24;
        }
      }
      if (v41)
        operator delete(v41);
    }
    else
    {
      *(_OWORD *)v35 = *(_OWORD *)v224;
      v37 = *(_QWORD *)&v224[16];
      *((_QWORD *)v35 + 2) = *(_QWORD *)&v224[16];
      if (v37)
      {
        v38 = (unint64_t *)(v37 + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      v40 = v35 + 24;
    }
    *(_QWORD *)(v7 + 7176) = v40;
    v54 = *(char **)(v7 + 7200);
    v55 = *(_QWORD *)(v7 + 7208);
    if ((unint64_t)v54 < v55)
    {
      *(_QWORD *)v54 = v15;
      v56 = (unint64_t)(v54 + 8);
      goto LABEL_80;
    }
    v57 = *(char **)(v7 + 7192);
    v6 = v54 - v57;
    v58 = (v54 - v57) >> 3;
    v59 = v58 + 1;
    if (!((unint64_t)(v58 + 1) >> 61))
    {
      v60 = v55 - (_QWORD)v57;
      if (v60 >> 2 > v59)
        v59 = v60 >> 2;
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
        v61 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v61 = v59;
      if (v61)
      {
        if (v61 >> 61)
          goto LABEL_426;
        v62 = operator new(8 * v61);
      }
      else
      {
        v62 = 0;
      }
      v63 = &v62[8 * v58];
      v64 = &v62[8 * v61];
      *v63 = v15;
      v56 = (unint64_t)(v63 + 1);
      if (v54 != v57)
      {
        v65 = v54 - v57 - 8;
        if (v65 < 0x58)
          goto LABEL_431;
        if ((unint64_t)(v57 - v62) < 0x20)
          goto LABEL_431;
        v66 = (v65 >> 3) + 1;
        v67 = &v62[8 * v58 - 16];
        v68 = v54 - 16;
        v69 = v66 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v70 = *(_OWORD *)v68;
          *(v67 - 1) = *((_OWORD *)v68 - 1);
          *v67 = v70;
          v67 -= 2;
          v68 -= 32;
          v69 -= 4;
        }
        while (v69);
        v63 -= v66 & 0x3FFFFFFFFFFFFFFCLL;
        v54 -= 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
        if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_431:
          do
          {
            v71 = *((_QWORD *)v54 - 1);
            v54 -= 8;
            *--v63 = v71;
          }
          while (v54 != v57);
        }
      }
      *(_QWORD *)(v7 + 7192) = v63;
      *(_QWORD *)(v7 + 7200) = v56;
      *(_QWORD *)(v7 + 7208) = v64;
      if (v57)
        operator delete(v57);
LABEL_80:
      *(_QWORD *)(v7 + 7200) = v56;
      v72 = (uint64_t *)(v7 + 7080);
      v73 = *(_QWORD *)(v7 + 7088);
      if (v73)
      {
        v74 = (uint8x8_t)vcnt_s8((int8x8_t)v73);
        v74.i16[0] = vaddlv_u8(v74);
        if (v74.u32[0] > 1uLL)
        {
          v56 = v15;
          if (v15 >= v73)
            v56 = v15 % v73;
        }
        else
        {
          v56 = (v73 - 1) & v15;
        }
        v75 = *(_QWORD **)(*v72 + 8 * v56);
        if (v75)
        {
          v76 = (_QWORD *)*v75;
          if (v76)
          {
            if (v74.u32[0] < 2uLL)
            {
              while (1)
              {
                v78 = v76[1];
                if (v78 == v15)
                {
                  if (v76[2] == v15)
                    goto LABEL_139;
                }
                else if ((v78 & (v73 - 1)) != v56)
                {
                  goto LABEL_101;
                }
                v76 = (_QWORD *)*v76;
                if (!v76)
                  goto LABEL_101;
              }
            }
            do
            {
              v77 = v76[1];
              if (v77 == v15)
              {
                if (v76[2] == v15)
                  goto LABEL_139;
              }
              else
              {
                if (v77 >= v73)
                  v77 %= v73;
                if (v77 != v56)
                  break;
              }
              v76 = (_QWORD *)*v76;
            }
            while (v76);
          }
        }
      }
LABEL_101:
      v79 = (char *)operator new(0x30uLL);
      *(_QWORD *)v79 = 0;
      *((_QWORD *)v79 + 1) = v15;
      *((_QWORD *)v79 + 2) = v15;
      *(int64x2_t *)(v79 + 24) = vdupq_n_s64(1uLL);
      v79[40] = 0;
      v80 = (float)(unint64_t)(*(_QWORD *)(v7 + 7104) + 1);
      v81 = *(float *)(v7 + 7112);
      if (!v73 || (float)(v81 * (float)v73) < v80)
      {
        v82 = 1;
        if (v73 >= 3)
          v82 = (v73 & (v73 - 1)) != 0;
        v83 = v82 | (2 * v73);
        v84 = vcvtps_u32_f32(v80 / v81);
        if (v83 <= v84)
          prime = v84;
        else
          prime = v83;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v73 = *(_QWORD *)(v7 + 7088);
        }
        if (prime > v73)
          goto LABEL_113;
        if (prime < v73)
        {
          v86 = vcvtps_u32_f32((float)*(unint64_t *)(v7 + 7104) / *(float *)(v7 + 7112));
          if (v73 < 3 || (v87 = (uint8x8_t)vcnt_s8((int8x8_t)v73), v87.i16[0] = vaddlv_u8(v87), v87.u32[0] > 1uLL))
          {
            v86 = std::__next_prime(v86);
          }
          else
          {
            v88 = 1 << -(char)__clz(v86 - 1);
            if (v86 >= 2)
              v86 = v88;
          }
          if (prime <= v86)
            prime = v86;
          if (prime < v73)
LABEL_113:
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v7 + 7080, prime);
        }
        v73 = *(_QWORD *)(v7 + 7088);
        if ((v73 & (v73 - 1)) != 0)
        {
          if (v15 >= v73)
            v56 = v15 % v73;
          else
            v56 = v15;
        }
        else
        {
          v56 = (v73 - 1) & v15;
        }
      }
      v89 = *v72;
      v90 = *(_QWORD **)(*v72 + 8 * v56);
      if (v90)
      {
        *(_QWORD *)v79 = *v90;
      }
      else
      {
        *(_QWORD *)v79 = *(_QWORD *)(v7 + 7096);
        *(_QWORD *)(v7 + 7096) = v79;
        *(_QWORD *)(v89 + 8 * v56) = v7 + 7096;
        if (!*(_QWORD *)v79)
        {
LABEL_138:
          ++*(_QWORD *)(v7 + 7104);
LABEL_139:
          if (*(_QWORD *)&v224[16])
          {
            v92 = (unint64_t *)(*(_QWORD *)&v224[16] + 8);
            do
              v93 = __ldaxr(v92);
            while (__stlxr(v93 - 1, v92));
            if (!v93)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)&v224[16] + 16))(*(_QWORD *)&v224[16]);
              std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v224[16]);
            }
          }
          v94 = v219.i32[0] - 0x61C8864680B583EBLL;
          v95 = (v94 << 6) + v219.i32[1] + (v94 >> 2);
          v96 = (v95 - 0x61C8864680B583EBLL) ^ v94;
          v97 = *(_QWORD *)(v7 + 7264);
          if (v97)
          {
            v98 = (uint8x8_t)vcnt_s8((int8x8_t)v97);
            v98.i16[0] = vaddlv_u8(v98);
            if (v98.u32[0] > 1uLL)
            {
              v73 = (v95 - 0x61C8864680B583EBLL) ^ v94;
              if (v96 >= v97)
                v73 = v96 % v97;
            }
            else
            {
              v73 = v96 & (v97 - 1);
            }
            v99 = *(void ***)(*v8 + 8 * v73);
            if (v99)
            {
              v100 = *v99;
              if (*v99)
              {
                if (v98.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v102 = v100[1];
                    if (v102 == v96)
                    {
                      if (*((_DWORD *)v100 + 4) == v219.i32[0] && *((_DWORD *)v100 + 5) == v219.i32[1])
                        goto LABEL_238;
                    }
                    else if ((v102 & (v97 - 1)) != v73)
                    {
                      goto LABEL_172;
                    }
                    v100 = (_QWORD *)*v100;
                    if (!v100)
                      goto LABEL_172;
                  }
                }
                do
                {
                  v104 = v100[1];
                  if (v104 == v96)
                  {
                    if (*((_DWORD *)v100 + 4) == v219.i32[0] && *((_DWORD *)v100 + 5) == v219.i32[1])
                      goto LABEL_238;
                  }
                  else
                  {
                    if (v104 >= v97)
                      v104 %= v97;
                    if (v104 != v73)
                      break;
                  }
                  v100 = (_QWORD *)*v100;
                }
                while (v100);
              }
            }
          }
LABEL_172:
          v6 = v97 == 0;
          v100 = operator new(0x20uLL);
          *v100 = 0;
          v100[1] = v96;
          *((_OWORD *)v100 + 1) = (unint64_t)v219;
          v105 = (float)(unint64_t)(*(_QWORD *)(v7 + 7280) + 1);
          v106 = *(float *)(v7 + 7288);
          if ((((float)(v106 * (float)v97) >= v105) & ~(_DWORD)v6) != 0)
          {
LABEL_228:
            v128 = (_QWORD *)*v8;
            v129 = *(_QWORD **)(*v8 + 8 * v73);
            if (v129)
            {
              *v100 = *v129;
            }
            else
            {
              *v100 = *(_QWORD *)(v7 + 7272);
              *(_QWORD *)(v7 + 7272) = v100;
              v128[v73] = v7 + 7272;
              if (!*v100)
              {
LABEL_237:
                ++*(_QWORD *)(v7 + 7280);
LABEL_238:
                v100[3] = v15;
                v131 = *(_QWORD *)(v7 + 7304);
                if (v131)
                {
                  v132 = (uint8x8_t)vcnt_s8((int8x8_t)v131);
                  v132.i16[0] = vaddlv_u8(v132);
                  if (v132.u32[0] > 1uLL)
                  {
                    v6 = v15;
                    if (v15 >= v131)
                      v6 = v15 % v131;
                  }
                  else
                  {
                    v6 = (v131 - 1) & v15;
                  }
                  v133 = *(_QWORD ***)(*(_QWORD *)(v7 + 7296) + 8 * v6);
                  if (v133)
                  {
                    v134 = *v133;
                    if (*v133)
                    {
                      if (v132.u32[0] < 2uLL)
                      {
                        while (1)
                        {
                          v136 = v134[1];
                          if (v136 == v15)
                          {
                            if (v134[2] == v15)
                              goto LABEL_325;
                          }
                          else if ((v136 & (v131 - 1)) != v6)
                          {
                            goto LABEL_259;
                          }
                          v134 = (_QWORD *)*v134;
                          if (!v134)
                            goto LABEL_259;
                        }
                      }
                      do
                      {
                        v135 = v134[1];
                        if (v135 == v15)
                        {
                          if (v134[2] == v15)
                            goto LABEL_325;
                        }
                        else
                        {
                          if (v135 >= v131)
                            v135 %= v131;
                          if (v135 != v6)
                            break;
                        }
                        v134 = (_QWORD *)*v134;
                      }
                      while (v134);
                    }
                  }
                }
LABEL_259:
                v134 = operator new(0x20uLL);
                *v134 = 0;
                v134[1] = v15;
                v134[2] = v15;
                v134[3] = 0;
                v137 = (float)(unint64_t)(*(_QWORD *)(v7 + 7320) + 1);
                v138 = *(float *)(v7 + 7328);
                if ((((float)(v138 * (float)v131) >= v137) & ~(v131 == 0)) != 0)
                {
LABEL_315:
                  v163 = *(_QWORD *)(v7 + 7296);
                  v164 = *(_QWORD **)(v163 + 8 * v6);
                  if (v164)
                  {
                    *v134 = *v164;
                  }
                  else
                  {
                    *v134 = *(_QWORD *)(v7 + 7312);
                    *(_QWORD *)(v7 + 7312) = v134;
                    *(_QWORD *)(v163 + 8 * v6) = v7 + 7312;
                    if (!*v134)
                      goto LABEL_324;
                    v165 = *(_QWORD *)(*v134 + 8);
                    if ((v131 & (v131 - 1)) != 0)
                    {
                      if (v165 >= v131)
                        v165 %= v131;
                    }
                    else
                    {
                      v165 &= v131 - 1;
                    }
                    v164 = (_QWORD *)(*(_QWORD *)(v7 + 7296) + 8 * v165);
                  }
                  *v164 = v134;
LABEL_324:
                  ++*(_QWORD *)(v7 + 7320);
LABEL_325:
                  v134[3] = v219;
                  v166 = (uint64_t)*v4[5];
                  v167 = *(_QWORD *)(v166 + 7144);
                  *(_QWORD *)v224 = v15;
                  v168 = *(_DWORD *)(v167 + 8 * v15);
                  v169 = *(_QWORD *)(v166 + 7168);
                  v170 = (_QWORD *)operator new();
                  v171 = (_QWORD *)ggl::BufferData::BufferData((uint64_t)v170, qword_1EE54A4C8, 2, 0, 6, 1);
                  v171[25] = ggl::DaVinci::StyleGroundOcclusion::reflection(void)::reflection;
                  *v171 = &off_1E42B9D30;
                  v172 = *(_QWORD *)(v166 + 7224);
                  if (v172)
                  {
                    v173 = (uint8x8_t)vcnt_s8((int8x8_t)v172);
                    v173.i16[0] = vaddlv_u8(v173);
                    if (v173.u32[0] > 1uLL)
                    {
                      v131 = v15;
                      if (v15 >= v172)
                        v131 = v15 % v172;
                    }
                    else
                    {
                      v131 = (v172 - 1) & v15;
                    }
                    v174 = *(_QWORD ***)(*(_QWORD *)(v166 + 7216) + 8 * v131);
                    if (v174)
                    {
                      v175 = *v174;
                      if (*v174)
                      {
                        if (v173.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            v177 = v175[1];
                            if (v177 == v15)
                            {
                              if (v175[2] == v15)
                                goto LABEL_413;
                            }
                            else if ((v177 & (v172 - 1)) != v131)
                            {
                              goto LABEL_346;
                            }
                            v175 = (_QWORD *)*v175;
                            if (!v175)
                              goto LABEL_346;
                          }
                        }
                        do
                        {
                          v176 = v175[1];
                          if (v176 == v15)
                          {
                            if (v175[2] == v15)
                              goto LABEL_413;
                          }
                          else
                          {
                            if (v176 >= v172)
                              v176 %= v172;
                            if (v176 != v131)
                              break;
                          }
                          v175 = (_QWORD *)*v175;
                        }
                        while (v175);
                      }
                    }
                  }
LABEL_346:
                  v178 = (_QWORD *)(v166 + 7232);
                  v175 = operator new(0x20uLL);
                  *v175 = 0;
                  v175[1] = v15;
                  v175[2] = v15;
                  v175[3] = 0;
                  v179 = (float)(unint64_t)(*(_QWORD *)(v166 + 7240) + 1);
                  v180 = *(float *)(v166 + 7248);
                  if (v172 && (float)(v180 * (float)v172) >= v179)
                  {
LABEL_403:
                    v204 = *(_QWORD *)(v166 + 7216);
                    v205 = *(_QWORD **)(v204 + 8 * v131);
                    if (v205)
                    {
                      *v175 = *v205;
                    }
                    else
                    {
                      *v175 = *v178;
                      *v178 = v175;
                      *(_QWORD *)(v204 + 8 * v131) = v178;
                      if (!*v175)
                        goto LABEL_412;
                      v206 = *(_QWORD *)(*v175 + 8);
                      if ((v172 & (v172 - 1)) != 0)
                      {
                        if (v206 >= v172)
                          v206 %= v172;
                      }
                      else
                      {
                        v206 &= v172 - 1;
                      }
                      v205 = (_QWORD *)(*(_QWORD *)(v166 + 7216) + 8 * v206);
                    }
                    *v205 = v175;
LABEL_412:
                    ++*(_QWORD *)(v166 + 7240);
LABEL_413:
                    v207 = v175[3];
                    v175[3] = v170;
                    if (v207)
                      (*(void (**)(uint64_t))(*(_QWORD *)v207 + 8))(v207);
                    v208 = std::__hash_table<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,md::Counter>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,true>,std::__unordered_map_equal<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,md::Counter>,std::equal_to<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,std::hash<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>> const&>,std::tuple<>>(v166 + 7080, *(unint64_t *)v224, v224);
                    ++v208[3];
                    *(_QWORD *)(v169 + 24 * v168) = v170;
                    v209 = v170[1];
                    v210 = (_WORD *)v170[9];
                    _S0 = v218;
                    __asm { FCVT            H0, S0 }
                    _S1 = *(_DWORD *)v4[4];
                    __asm { FCVT            H1, S1 }
                    *v210 = LOWORD(_S0);
                    v210[1] = _S1;
                    if (v170[8] > v209)
                      v209 = v170[8];
                    v170[7] = 0;
                    v170[8] = v209;
                    v216 = *(_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
                    v221 = &off_1E4281C70;
                    *(_QWORD *)&v222 = v15;
                    *((_QWORD *)&v222 + 1) = v216;
                    v223 = &v221;
                    v225 = v224;
                    goto LABEL_418;
                  }
                  v181 = 1;
                  if (v172 >= 3)
                    v181 = (v172 & (v172 - 1)) != 0;
                  v182 = v181 | (2 * v172);
                  v183 = vcvtps_u32_f32(v179 / v180);
                  if (v182 <= v183)
                    v184 = v183;
                  else
                    v184 = v182;
                  if (v184 == 1)
                  {
                    v184 = 2;
                  }
                  else if ((v184 & (v184 - 1)) != 0)
                  {
                    v184 = std::__next_prime(v184);
                    v172 = *(_QWORD *)(v166 + 7224);
                  }
                  if (v184 <= v172)
                  {
                    if (v184 >= v172)
                      goto LABEL_398;
                    v196 = vcvtps_u32_f32((float)*(unint64_t *)(v166 + 7240) / *(float *)(v166 + 7248));
                    if (v172 < 3
                      || (v197 = (uint8x8_t)vcnt_s8((int8x8_t)v172), v197.i16[0] = vaddlv_u8(v197), v197.u32[0] > 1uLL))
                    {
                      v196 = std::__next_prime(v196);
                    }
                    else
                    {
                      v198 = 1 << -(char)__clz(v196 - 1);
                      if (v196 >= 2)
                        v196 = v198;
                    }
                    if (v184 <= v196)
                      v184 = v196;
                    if (v184 >= v172)
                      goto LABEL_398;
                    if (!v184)
                    {
                      v203 = *(void **)(v166 + 7216);
                      *(_QWORD *)(v166 + 7216) = 0;
                      if (v203)
                        operator delete(v203);
                      *(_QWORD *)(v166 + 7224) = 0;
                      goto LABEL_398;
                    }
                  }
                  if (!(v184 >> 61))
                  {
                    v185 = operator new(8 * v184);
                    v186 = *(void **)(v166 + 7216);
                    *(_QWORD *)(v166 + 7216) = v185;
                    if (v186)
                      operator delete(v186);
                    v187 = 0;
                    *(_QWORD *)(v166 + 7224) = v184;
                    do
                      *(_QWORD *)(*(_QWORD *)(v166 + 7216) + 8 * v187++) = 0;
                    while (v184 != v187);
                    v188 = (_QWORD *)*v178;
                    if (!*v178)
                      goto LABEL_398;
                    v189 = v188[1];
                    v190 = v184 - 1;
                    if ((v184 & (v184 - 1)) == 0)
                    {
                      v191 = v189 & v190;
                      *(_QWORD *)(*(_QWORD *)(v166 + 7216) + 8 * v191) = v178;
                      while (1)
                      {
                        v192 = (_QWORD *)*v188;
                        if (!*v188)
                          break;
                        v193 = v192[1] & v190;
                        if (v193 == v191)
                        {
                          v188 = (_QWORD *)*v188;
                        }
                        else
                        {
                          v194 = *(_QWORD *)(v166 + 7216);
                          if (*(_QWORD *)(v194 + 8 * v193))
                          {
                            *v188 = *v192;
                            v195 = 8 * v193;
                            *v192 = **(_QWORD **)(*(_QWORD *)(v166 + 7216) + v195);
                            **(_QWORD **)(*(_QWORD *)(v166 + 7216) + v195) = v192;
                          }
                          else
                          {
                            *(_QWORD *)(v194 + 8 * v193) = v188;
                            v188 = v192;
                            v191 = v193;
                          }
                        }
                      }
LABEL_398:
                      v172 = *(_QWORD *)(v166 + 7224);
                      if ((v172 & (v172 - 1)) != 0)
                      {
                        if (v15 >= v172)
                          v131 = v15 % v172;
                        else
                          v131 = v15;
                      }
                      else
                      {
                        v131 = (v172 - 1) & v15;
                      }
                      goto LABEL_403;
                    }
                    if (v189 >= v184)
                      v189 %= v184;
                    *(_QWORD *)(*(_QWORD *)(v166 + 7216) + 8 * v189) = v178;
                    v199 = (_QWORD *)*v188;
                    if (!*v188)
                      goto LABEL_398;
                    while (1)
                    {
                      v201 = v199[1];
                      if (v201 >= v184)
                        v201 %= v184;
                      if (v201 != v189)
                      {
                        v202 = *(_QWORD *)(v166 + 7216);
                        if (!*(_QWORD *)(v202 + 8 * v201))
                        {
                          *(_QWORD *)(v202 + 8 * v201) = v188;
                          goto LABEL_384;
                        }
                        *v188 = *v199;
                        v200 = 8 * v201;
                        *v199 = **(_QWORD **)(*(_QWORD *)(v166 + 7216) + v200);
                        **(_QWORD **)(*(_QWORD *)(v166 + 7216) + v200) = v199;
                        v199 = v188;
                      }
                      v201 = v189;
LABEL_384:
                      v188 = v199;
                      v199 = (_QWORD *)*v199;
                      v189 = v201;
                      if (!v199)
                        goto LABEL_398;
                    }
                  }
LABEL_426:
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
                v139 = 1;
                if (v131 >= 3)
                  v139 = (v131 & (v131 - 1)) != 0;
                v140 = v139 | (2 * v131);
                v141 = vcvtps_u32_f32(v137 / v138);
                if (v140 <= v141)
                  v142 = v141;
                else
                  v142 = v140;
                if (v142 == 1)
                {
                  v142 = 2;
                }
                else if ((v142 & (v142 - 1)) != 0)
                {
                  v142 = std::__next_prime(v142);
                  v131 = *(_QWORD *)(v7 + 7304);
                }
                if (v142 <= v131)
                {
                  if (v142 >= v131)
                    goto LABEL_310;
                  v155 = vcvtps_u32_f32((float)*(unint64_t *)(v7 + 7320) / *(float *)(v7 + 7328));
                  if (v131 < 3
                    || (v156 = (uint8x8_t)vcnt_s8((int8x8_t)v131), v156.i16[0] = vaddlv_u8(v156), v156.u32[0] > 1uLL))
                  {
                    v155 = std::__next_prime(v155);
                  }
                  else
                  {
                    v157 = 1 << -(char)__clz(v155 - 1);
                    if (v155 >= 2)
                      v155 = v157;
                  }
                  if (v142 <= v155)
                    v142 = v155;
                  if (v142 >= v131)
                    goto LABEL_310;
                  if (!v142)
                  {
                    v162 = *(void **)(v7 + 7296);
                    *(_QWORD *)(v7 + 7296) = 0;
                    if (v162)
                      operator delete(v162);
                    *(_QWORD *)(v7 + 7304) = 0;
                    goto LABEL_310;
                  }
                }
                if (v142 >> 61)
                  goto LABEL_426;
                v143 = operator new(8 * v142);
                v144 = *(void **)(v7 + 7296);
                *(_QWORD *)(v7 + 7296) = v143;
                if (v144)
                  operator delete(v144);
                v145 = 0;
                *(_QWORD *)(v7 + 7304) = v142;
                do
                  *(_QWORD *)(*(_QWORD *)(v7 + 7296) + 8 * v145++) = 0;
                while (v142 != v145);
                v146 = *(_QWORD **)(v7 + 7312);
                if (!v146)
                  goto LABEL_310;
                v147 = v7 + 7312;
                v148 = v146[1];
                v149 = v142 - 1;
                if ((v142 & (v142 - 1)) == 0)
                {
                  v150 = v148 & v149;
                  *(_QWORD *)(*(_QWORD *)(v7 + 7296) + 8 * v150) = v147;
                  while (1)
                  {
                    v151 = (_QWORD *)*v146;
                    if (!*v146)
                      break;
                    v152 = v151[1] & v149;
                    if (v152 == v150)
                    {
                      v146 = (_QWORD *)*v146;
                    }
                    else
                    {
                      v153 = *(_QWORD *)(v7 + 7296);
                      if (*(_QWORD *)(v153 + 8 * v152))
                      {
                        *v146 = *v151;
                        v154 = 8 * v152;
                        *v151 = **(_QWORD **)(*(_QWORD *)(v7 + 7296) + v154);
                        **(_QWORD **)(*(_QWORD *)(v7 + 7296) + v154) = v151;
                      }
                      else
                      {
                        *(_QWORD *)(v153 + 8 * v152) = v146;
                        v146 = v151;
                        v150 = v152;
                      }
                    }
                  }
LABEL_310:
                  v131 = *(_QWORD *)(v7 + 7304);
                  if ((v131 & (v131 - 1)) != 0)
                  {
                    if (v15 >= v131)
                      v6 = v15 % v131;
                    else
                      v6 = v15;
                  }
                  else
                  {
                    v6 = (v131 - 1) & v15;
                  }
                  goto LABEL_315;
                }
                if (v148 >= v142)
                  v148 %= v142;
                *(_QWORD *)(*(_QWORD *)(v7 + 7296) + 8 * v148) = v147;
                v158 = (_QWORD *)*v146;
                if (!*v146)
                  goto LABEL_310;
                while (1)
                {
                  v160 = v158[1];
                  if (v160 >= v142)
                    v160 %= v142;
                  if (v160 != v148)
                  {
                    v161 = *(_QWORD *)(v7 + 7296);
                    if (!*(_QWORD *)(v161 + 8 * v160))
                    {
                      *(_QWORD *)(v161 + 8 * v160) = v146;
                      goto LABEL_296;
                    }
                    *v146 = *v158;
                    v159 = 8 * v160;
                    *v158 = **(_QWORD **)(*(_QWORD *)(v7 + 7296) + v159);
                    **(_QWORD **)(*(_QWORD *)(v7 + 7296) + v159) = v158;
                    v158 = v146;
                  }
                  v160 = v148;
LABEL_296:
                  v146 = v158;
                  v158 = (_QWORD *)*v158;
                  v148 = v160;
                  if (!v158)
                    goto LABEL_310;
                }
              }
              v130 = *(_QWORD *)(*v100 + 8);
              if ((v97 & (v97 - 1)) != 0)
              {
                if (v130 >= v97)
                  v130 %= v97;
              }
              else
              {
                v130 &= v97 - 1;
              }
              v129 = (_QWORD *)(*v8 + 8 * v130);
            }
            *v129 = v100;
            goto LABEL_237;
          }
          v107 = 1;
          if (v97 >= 3)
            v107 = (v97 & (v97 - 1)) != 0;
          v108 = v107 | (2 * v97);
          v109 = vcvtps_u32_f32(v105 / v106);
          if (v108 <= v109)
            v6 = v109;
          else
            v6 = v108;
          if (v6 == 1)
          {
            v6 = 2;
          }
          else if ((v6 & (v6 - 1)) != 0)
          {
            v6 = std::__next_prime(v6);
            v97 = *(_QWORD *)(v7 + 7264);
          }
          if (v6 <= v97)
          {
            if (v6 >= v97)
              goto LABEL_223;
            v121 = vcvtps_u32_f32((float)*(unint64_t *)(v7 + 7280) / *(float *)(v7 + 7288));
            if (v97 < 3
              || (v122 = (uint8x8_t)vcnt_s8((int8x8_t)v97), v122.i16[0] = vaddlv_u8(v122), v122.u32[0] > 1uLL))
            {
              v121 = std::__next_prime(v121);
            }
            else
            {
              v123 = 1 << -(char)__clz(v121 - 1);
              if (v121 >= 2)
                v121 = v123;
            }
            if (v6 <= v121)
              v6 = v121;
            if (v6 >= v97)
              goto LABEL_223;
            if (!v6)
            {
              v127 = (_QWORD *)*v8;
              *v8 = 0;
              if (v127)
                operator delete(v127);
              *(_QWORD *)(v7 + 7264) = 0;
              goto LABEL_223;
            }
          }
          if (v6 >> 61)
            goto LABEL_426;
          v110 = operator new(8 * v6);
          v111 = (_QWORD *)*v8;
          *v8 = v110;
          if (v111)
            operator delete(v111);
          v112 = 0;
          *(_QWORD *)(v7 + 7264) = v6;
          do
            *(_QWORD *)(*v8 + 8 * v112++) = 0;
          while (v6 != v112);
          v113 = *(_QWORD **)(v7 + 7272);
          if (!v113)
            goto LABEL_223;
          v114 = v7 + 7272;
          v115 = v113[1];
          v116 = v6 - 1;
          if ((v6 & (v6 - 1)) == 0)
          {
            v117 = v115 & v116;
            *(_QWORD *)(*v8 + 8 * v117) = v114;
            while (1)
            {
              v118 = (_QWORD *)*v113;
              if (!*v113)
                break;
              v119 = v118[1] & v116;
              if (v119 == v117)
              {
                v113 = (_QWORD *)*v113;
              }
              else if (*(_QWORD *)(*v8 + 8 * v119))
              {
                *v113 = *v118;
                v120 = 8 * v119;
                *v118 = **(_QWORD **)(*v8 + v120);
                **(_QWORD **)(*v8 + v120) = v118;
              }
              else
              {
                *(_QWORD *)(*v8 + 8 * v119) = v113;
                v113 = v118;
                v117 = v119;
              }
            }
LABEL_223:
            v97 = *(_QWORD *)(v7 + 7264);
            if ((v97 & (v97 - 1)) != 0)
            {
              if (v96 >= v97)
                v73 = v96 % v97;
              else
                v73 = v96;
            }
            else
            {
              v73 = (v97 - 1) & v96;
            }
            goto LABEL_228;
          }
          if (v115 >= v6)
            v115 %= v6;
          *(_QWORD *)(*v8 + 8 * v115) = v114;
          v124 = (_QWORD *)*v113;
          if (!*v113)
            goto LABEL_223;
          while (1)
          {
            v126 = v124[1];
            if (v126 >= v6)
              v126 %= v6;
            if (v126 != v115)
            {
              if (!*(_QWORD *)(*v8 + 8 * v126))
              {
                *(_QWORD *)(*v8 + 8 * v126) = v113;
                goto LABEL_209;
              }
              *v113 = *v124;
              v125 = 8 * v126;
              *v124 = **(_QWORD **)(*v8 + v125);
              **(_QWORD **)(*v8 + v125) = v124;
              v124 = v113;
            }
            v126 = v115;
LABEL_209:
            v113 = v124;
            v124 = (_QWORD *)*v124;
            v115 = v126;
            if (!v124)
              goto LABEL_223;
          }
        }
        v91 = *(_QWORD *)(*(_QWORD *)v79 + 8);
        if ((v73 & (v73 - 1)) != 0)
        {
          if (v91 >= v73)
            v91 %= v73;
        }
        else
        {
          v91 &= v73 - 1;
        }
        v90 = (_QWORD *)(*v72 + 8 * v91);
      }
      *v90 = v79;
      goto LABEL_138;
    }
LABEL_427:
    abort();
  }
  v11 = *(_QWORD *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  v221 = &off_1E4281C70;
  *(_QWORD *)&v222 = v12;
  *((_QWORD *)&v222 + 1) = v11;
  v223 = &v221;
  v225 = v224;
LABEL_418:
  *(_QWORD *)v224 = &off_1E4281C70;
  *(_OWORD *)&v224[8] = v222;
  v226 = 0;
  ecs2::Runtime::queueCommand(v10, (uint64_t)v224);
  if (v226 != -1)
    ((void (*)(char *, _BYTE *))off_1E42FB340[v226])(&v220, v224);
  v226 = -1;
  result = v223;
  if (v223 == &v221)
  {
    v217 = 4;
    result = &v221;
  }
  else
  {
    if (!v223)
      return result;
    v217 = 5;
  }
  return (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))(*result)[v217])(result);
}

void sub_19FEB5DB4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[3];
  v1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19FEB5DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  void *v21;

  operator delete(v21);
  md::components::Material::~Material((md::components::Material *)&a21);
  _Unwind_Resume(a1);
}

double *std::__introsort<std::_ClassicAlgPolicy,md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_0 &,std::pair<md::ARBuildingTileData *,double> *,false>(double *result, double *a2, uint64_t a3, char a4)
{
  double *v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double *v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double *v43;
  double *v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double *v62;
  double *v63;
  double *v64;
  double *v65;
  double v66;
  double *v67;
  double v68;
  double *v69;
  double v70;
  uint64_t v71;
  double v72;
  double v73;
  BOOL v74;
  double *v75;
  double v76;
  double *v77;
  double v78;
  double *v79;
  double *v80;
  double v81;
  double v82;
  uint64_t v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  uint64_t v92;
  double v93;
  double v94;
  uint64_t v95;
  double v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  uint64_t v101;
  double v102;
  double v103;
  double *v104;
  BOOL v106;
  uint64_t v107;
  double *v108;
  uint64_t v109;
  double v110;
  double v111;
  double v112;
  uint64_t v113;
  double *v114;
  int64_t v115;
  int64_t v116;
  BOOL v117;
  uint64_t v118;
  double *v119;
  double *v120;
  double v121;
  uint64_t v122;
  double *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  double v128;
  double v129;
  double *v130;
  double *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  double *v136;
  uint64_t v137;
  double *v138;
  uint64_t v139;
  uint64_t v140;
  double *v141;
  double v142;
  double v143;
  double v144;
  double *v145;
  double v146;
  double v147;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v86 = *(a2 - 1);
        v87 = v8[1];
        if (v86 < v87)
        {
          v88 = *v8;
          *v8 = *(a2 - 2);
          *(a2 - 2) = v88;
          v8[1] = v86;
          *(a2 - 1) = v87;
        }
        return result;
      case 3:
        v89 = v8[3];
        v90 = v8[1];
        v91 = *(a2 - 1);
        if (v89 >= v90)
        {
          if (v91 < v89)
          {
            v139 = *((_QWORD *)v8 + 2);
            v8[2] = *(a2 - 2);
            *((_QWORD *)a2 - 2) = v139;
            v8[3] = v91;
            *(a2 - 1) = v89;
            v96 = v8[3];
            v102 = v8[1];
            if (v96 < v102)
            {
              v140 = *(_QWORD *)v8;
              *v8 = v8[2];
              *((_QWORD *)v8 + 2) = v140;
              goto LABEL_163;
            }
          }
        }
        else
        {
          v92 = *(_QWORD *)v8;
          if (v91 >= v89)
          {
            *v8 = v8[2];
            *((_QWORD *)v8 + 2) = v92;
            v8[1] = v89;
            v8[3] = v90;
            v147 = *(a2 - 1);
            if (v147 >= v90)
              return result;
            v8[2] = *(a2 - 2);
            *((_QWORD *)a2 - 2) = v92;
            v8[3] = v147;
          }
          else
          {
            *v8 = *(a2 - 2);
            *((_QWORD *)a2 - 2) = v92;
            v8[1] = v91;
          }
          *(a2 - 1) = v90;
        }
        return result;
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_0 &,std::pair<md::ARBuildingTileData *,double> *>(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5:
        result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_0 &,std::pair<md::ARBuildingTileData *,double> *>(v8, v8 + 2, v8 + 4, v8 + 6);
        v93 = *(a2 - 1);
        v94 = v8[7];
        if (v93 < v94)
        {
          v95 = *((_QWORD *)v8 + 6);
          v8[6] = *(a2 - 2);
          *((_QWORD *)a2 - 2) = v95;
          v8[7] = v93;
          *(a2 - 1) = v94;
          v96 = v8[7];
          v97 = v8[5];
          if (v96 < v97)
          {
            v98 = *((_QWORD *)v8 + 4);
            v99 = *((_QWORD *)v8 + 6);
            *((_QWORD *)v8 + 4) = v99;
            *((_QWORD *)v8 + 6) = v98;
            v8[5] = v96;
            v8[7] = v97;
            v100 = v8[3];
            if (v96 < v100)
            {
              v101 = *((_QWORD *)v8 + 2);
              *((_QWORD *)v8 + 2) = v99;
              *((_QWORD *)v8 + 4) = v101;
              v8[3] = v96;
              v8[5] = v100;
              v102 = v8[1];
              if (v96 < v102)
              {
                v103 = *v8;
                *(_QWORD *)v8 = v99;
                v8[2] = v103;
LABEL_163:
                v8[1] = v96;
                v8[3] = v102;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 383)
        {
          v104 = v8 + 2;
          v106 = v8 == a2 || v104 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v106)
            {
              v107 = 0;
              v108 = v8;
              do
              {
                v110 = v108[3];
                v111 = v108[1];
                v108 = v104;
                if (v110 < v111)
                {
                  v112 = *v104;
                  v113 = v107;
                  do
                  {
                    v114 = (double *)((char *)v8 + v113);
                    v114[2] = *(double *)((char *)v8 + v113);
                    v114[3] = *(double *)((char *)v8 + v113 + 8);
                    if (!v113)
                    {
                      v109 = (uint64_t)v8;
                      goto LABEL_122;
                    }
                    v113 -= 16;
                  }
                  while (v110 < *(v114 - 1));
                  v109 = (uint64_t)v8 + v113 + 16;
LABEL_122:
                  *(double *)v109 = v112;
                  *(double *)(v109 + 8) = v110;
                }
                v104 = v108 + 2;
                v107 += 16;
              }
              while (v108 + 2 != a2);
            }
          }
          else if (!v106)
          {
            v141 = v8 + 1;
            do
            {
              v142 = v7[3];
              v143 = v7[1];
              v7 = v104;
              if (v142 < v143)
              {
                v144 = *v104;
                v145 = v141;
                do
                {
                  v145[1] = *(v145 - 1);
                  v145[2] = *v145;
                  v146 = *(v145 - 2);
                  v145 -= 2;
                }
                while (v142 < v146);
                v145[1] = v144;
                v145[2] = v142;
              }
              v104 = v7 + 2;
              v141 += 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 == a2)
            return result;
          v115 = (unint64_t)(v10 - 2) >> 1;
          v116 = v115;
          do
          {
            if (v115 >= v116)
            {
              v118 = (2 * v116) | 1;
              v119 = &v8[2 * v118];
              if (2 * v116 + 2 < v10 && v119[1] < v119[3])
              {
                v119 += 2;
                v118 = 2 * v116 + 2;
              }
              v120 = &v8[2 * v116];
              v121 = v120[1];
              if (v119[1] >= v121)
              {
                v122 = *(_QWORD *)v120;
                do
                {
                  v123 = v120;
                  v120 = v119;
                  *v123 = *v119;
                  v123[1] = v119[1];
                  if (v115 < v118)
                    break;
                  v124 = 2 * v118;
                  v118 = (2 * v118) | 1;
                  v119 = &v8[2 * v118];
                  v125 = v124 + 2;
                  if (v125 < v10 && v119[1] < v119[3])
                  {
                    v119 += 2;
                    v118 = v125;
                  }
                }
                while (v119[1] >= v121);
                *(_QWORD *)v120 = v122;
                v120[1] = v121;
              }
            }
            v117 = v116-- <= 0;
          }
          while (!v117);
          v126 = (unint64_t)v9 >> 4;
          while (2)
          {
            v127 = 0;
            v128 = *v8;
            v129 = v8[1];
            v130 = v8;
            do
            {
              v131 = v130;
              v130 += 2 * v127 + 2;
              v132 = 2 * v127;
              v127 = (2 * v127) | 1;
              v133 = v132 + 2;
              if (v133 < v126 && v130[1] < v130[3])
              {
                v130 += 2;
                v127 = v133;
              }
              *v131 = *v130;
              v131[1] = v130[1];
            }
            while (v127 <= (uint64_t)((unint64_t)(v126 - 2) >> 1));
            if (v130 != a2 - 2)
            {
              *v130 = *(a2 - 2);
              v130[1] = *(a2 - 1);
              *(a2 - 2) = v128;
              *(a2 - 1) = v129;
              v134 = (char *)v130 - (char *)v8 + 16;
              if (v134 >= 17)
              {
                v135 = (((unint64_t)v134 >> 4) - 2) >> 1;
                v136 = &v8[2 * v135];
                v129 = v130[1];
                if (v136[1] < v129)
                {
                  v137 = *(_QWORD *)v130;
                  do
                  {
                    v138 = v130;
                    v130 = v136;
                    *v138 = *v136;
                    v138[1] = v136[1];
                    if (!v135)
                      break;
                    v135 = (v135 - 1) >> 1;
                    v136 = &v8[2 * v135];
                  }
                  while (v136[1] < v129);
                  *(_QWORD *)v130 = v137;
LABEL_146:
                  v130[1] = v129;
                }
              }
              a2 -= 2;
              v117 = v126-- <= 2;
              if (v117)
                return result;
              continue;
            }
            break;
          }
          *v130 = v128;
          goto LABEL_146;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[2 * ((unint64_t)v10 >> 1)];
        v13 = *(a2 - 1);
        if ((unint64_t)v9 < 0x801)
        {
          v17 = v8[1];
          v18 = v12[1];
          if (v17 >= v18)
          {
            if (v13 < v17)
            {
              v24 = *v8;
              *v8 = *(a2 - 2);
              *(a2 - 2) = v24;
              v8[1] = v13;
              *(a2 - 1) = v17;
              v25 = v8[1];
              v26 = v12[1];
              if (v25 < v26)
              {
                v27 = *v12;
                *v12 = *v8;
                *v8 = v27;
                v12[1] = v25;
                v8[1] = v26;
                --a3;
                if ((a4 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_57;
              }
            }
          }
          else
          {
            v19 = *(_QWORD *)v12;
            if (v13 >= v17)
            {
              *v12 = *v8;
              *(_QWORD *)v8 = v19;
              v12[1] = v17;
              v8[1] = v18;
              v39 = *(a2 - 1);
              if (v39 >= v18)
                goto LABEL_32;
              *v8 = *(a2 - 2);
              *((_QWORD *)a2 - 2) = v19;
              v8[1] = v39;
            }
            else
            {
              *v12 = *(a2 - 2);
              *((_QWORD *)a2 - 2) = v19;
              v12[1] = v13;
            }
            *(a2 - 1) = v18;
          }
LABEL_32:
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_33;
LABEL_57:
          v41 = v8[1];
          v40 = *v8;
          if (*(v8 - 1) < v41)
            goto LABEL_58;
          if (v41 >= *(a2 - 1))
          {
            v77 = v8 + 2;
            do
            {
              v8 = v77;
              if (v77 >= a2)
                break;
              v78 = v77[1];
              v77 += 2;
            }
            while (v41 >= v78);
          }
          else
          {
            v75 = v8;
            do
            {
              v8 = v75 + 2;
              v76 = v75[3];
              v75 += 2;
            }
            while (v41 >= v76);
          }
          v79 = a2;
          if (v8 < a2)
          {
            v80 = a2;
            do
            {
              v79 = v80 - 2;
              v81 = *(v80 - 1);
              v80 -= 2;
            }
            while (v41 < v81);
          }
          while (v8 < v79)
          {
            v82 = *v8;
            *v8 = *v79;
            *v79 = v82;
            v83 = *((_QWORD *)v8 + 1);
            v8[1] = v79[1];
            *((_QWORD *)v79 + 1) = v83;
            do
            {
              v84 = v8[3];
              v8 += 2;
            }
            while (v41 >= v84);
            do
            {
              v85 = *(v79 - 1);
              v79 -= 2;
            }
            while (v41 < v85);
          }
          if (v8 - 2 != v7)
          {
            *v7 = *(v8 - 2);
            v7[1] = *(v8 - 1);
          }
          a4 = 0;
          *(v8 - 2) = v40;
          *(v8 - 1) = v41;
          continue;
        }
        v14 = v12[1];
        v15 = v8[1];
        if (v14 >= v15)
        {
          if (v13 < v14)
          {
            v20 = *(_QWORD *)v12;
            *v12 = *(a2 - 2);
            *((_QWORD *)a2 - 2) = v20;
            v12[1] = v13;
            *(a2 - 1) = v14;
            v21 = v12[1];
            v22 = v8[1];
            if (v21 < v22)
            {
              v23 = *v8;
              *v8 = *v12;
              *v12 = v23;
              v8[1] = v21;
              v12[1] = v22;
            }
          }
        }
        else
        {
          v16 = *v8;
          if (v13 < v14)
          {
            *v8 = *(a2 - 2);
            *(a2 - 2) = v16;
            v8[1] = v13;
            goto LABEL_22;
          }
          *v8 = *v12;
          *v12 = v16;
          v8[1] = v14;
          v12[1] = v15;
          v28 = *(a2 - 1);
          if (v28 < v15)
          {
            *v12 = *(a2 - 2);
            *(a2 - 2) = v16;
            v12[1] = v28;
LABEL_22:
            *(a2 - 1) = v15;
          }
        }
        v29 = &v8[2 * v11];
        v30 = v29 - 2;
        v31 = *(v29 - 1);
        v32 = v8[3];
        v33 = *(a2 - 3);
        if (v31 >= v32)
        {
          if (v33 < v31)
          {
            v35 = *v30;
            *v30 = *(a2 - 4);
            *(a2 - 4) = v35;
            v30[1] = v33;
            *(a2 - 3) = v31;
            v36 = v30[1];
            v37 = v8[3];
            if (v36 < v37)
            {
              v38 = *((_QWORD *)v8 + 2);
              v8[2] = *v30;
              *(_QWORD *)v30 = v38;
              v8[3] = v36;
              v30[1] = v37;
            }
          }
        }
        else
        {
          v34 = *((_QWORD *)v8 + 2);
          if (v33 < v31)
          {
            v8[2] = *(a2 - 4);
            *((_QWORD *)a2 - 4) = v34;
            v8[3] = v33;
            goto LABEL_36;
          }
          v8[2] = *v30;
          *(_QWORD *)v30 = v34;
          v8[3] = v31;
          v30[1] = v32;
          v42 = *(a2 - 3);
          if (v42 < v32)
          {
            *v30 = *(a2 - 4);
            *((_QWORD *)a2 - 4) = v34;
            v30[1] = v42;
LABEL_36:
            *(a2 - 3) = v32;
          }
        }
        v43 = &v8[2 * v11];
        v44 = v43 + 2;
        v45 = v43[3];
        v46 = v8[5];
        v47 = *(a2 - 5);
        if (v45 >= v46)
        {
          if (v47 < v45)
          {
            v49 = *v44;
            *v44 = *(a2 - 6);
            *(a2 - 6) = v49;
            v44[1] = v47;
            *(a2 - 5) = v45;
            v50 = v44[1];
            v51 = v8[5];
            if (v50 < v51)
            {
              v52 = *((_QWORD *)v8 + 4);
              v8[4] = *v44;
              *(_QWORD *)v44 = v52;
              v8[5] = v50;
              v44[1] = v51;
            }
          }
        }
        else
        {
          v48 = *((_QWORD *)v8 + 4);
          if (v47 < v45)
          {
            v8[4] = *(a2 - 6);
            *((_QWORD *)a2 - 6) = v48;
            v8[5] = v47;
            goto LABEL_45;
          }
          v8[4] = *v44;
          *(_QWORD *)v44 = v48;
          v8[5] = v45;
          v44[1] = v46;
          v53 = *(a2 - 5);
          if (v53 < v46)
          {
            *v44 = *(a2 - 6);
            *((_QWORD *)a2 - 6) = v48;
            v44[1] = v53;
LABEL_45:
            *(a2 - 5) = v46;
          }
        }
        v54 = v12[1];
        v55 = v30[1];
        v56 = v44[1];
        if (v54 >= v55)
        {
          v57 = *v12;
          if (v56 >= v54)
          {
            v55 = v12[1];
          }
          else
          {
            v58 = *v44;
            *v12 = *v44;
            *v44 = v57;
            v12[1] = v56;
            v44[1] = v54;
            if (v56 >= v55)
            {
              v55 = v56;
              v57 = v58;
            }
            else
            {
              v57 = *v30;
              *v30 = v58;
              *v12 = v57;
              v30[1] = v56;
              v12[1] = v55;
            }
          }
        }
        else
        {
          v57 = *v30;
          if (v56 >= v54)
          {
            *v30 = *v12;
            *v12 = v57;
            v30[1] = v54;
            v12[1] = v55;
            if (v56 < v55)
            {
              v59 = *v44;
              *v12 = *v44;
              *v44 = v57;
              v12[1] = v56;
              v44[1] = v55;
              v55 = v56;
              v57 = v59;
            }
          }
          else
          {
            *v30 = *v44;
            *v44 = v57;
            v30[1] = v56;
            v44[1] = v55;
            v57 = *v12;
            v55 = v54;
          }
        }
        v60 = *v8;
        *v8 = v57;
        *v12 = v60;
        v61 = v8[1];
        v8[1] = v55;
        v8[2 * v11 + 1] = v61;
        --a3;
        if ((a4 & 1) == 0)
          goto LABEL_57;
LABEL_33:
        v40 = *v8;
        v41 = v8[1];
LABEL_58:
        v62 = v8;
        do
        {
          v63 = v62;
          v62 += 2;
        }
        while (v63[3] < v41);
        v64 = a2;
        if (v63 == v8)
        {
          v67 = a2;
          while (v62 < v67)
          {
            v65 = v67 - 2;
            v68 = *(v67 - 1);
            v67 -= 2;
            if (v68 < v41)
              goto LABEL_68;
          }
          v65 = v67;
        }
        else
        {
          do
          {
            v65 = v64 - 2;
            v66 = *(v64 - 1);
            v64 -= 2;
          }
          while (v66 >= v41);
        }
LABEL_68:
        v8 = v62;
        if (v62 < v65)
        {
          v69 = v65;
          do
          {
            v70 = *v8;
            *v8 = *v69;
            *v69 = v70;
            v71 = *((_QWORD *)v8 + 1);
            v8[1] = v69[1];
            *((_QWORD *)v69 + 1) = v71;
            do
            {
              v72 = v8[3];
              v8 += 2;
            }
            while (v72 < v41);
            do
            {
              v73 = *(v69 - 1);
              v69 -= 2;
            }
            while (v73 >= v41);
          }
          while (v8 < v69);
        }
        if (v8 - 2 != v7)
        {
          *v7 = *(v8 - 2);
          v7[1] = *(v8 - 1);
        }
        *(v8 - 2) = v40;
        *(v8 - 1) = v41;
        if (v62 < v65)
        {
LABEL_79:
          result = (double *)std::__introsort<std::_ClassicAlgPolicy,md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_0 &,std::pair<md::ARBuildingTileData *,double> *,false>(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v74 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_0 &,std::pair<md::ARBuildingTileData *,double> *>(v7, v8 - 2);
        result = (double *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_0 &,std::pair<md::ARBuildingTileData *,double> *>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v74)
            continue;
          goto LABEL_79;
        }
        a2 = v8 - 2;
        if (!v74)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t md::ARWorldIntersector::visitReferencedAssetOcclusionVolumes(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t *v24;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  BOOL v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  unint64_t v50;
  uint8x8_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void **v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  float v63;
  float v64;
  _BOOL8 v65;
  unint64_t v66;
  unint64_t v67;
  size_t prime;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  _QWORD *v73;
  size_t v74;
  size_t v75;
  size_t v76;
  _QWORD *i;
  size_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint8x8_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  size_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  unint64_t v93;
  _BYTE *v94;
  size_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  char *v107;
  char *v108;
  void *v109;
  void *v110;
  float **v111;
  float **j;
  uint64_t v113;
  unint64_t *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  char *v134;
  float *v135;
  float *v136;
  uint64_t v137;
  float v138;
  float v139;
  float v140;
  float32x2_t v141;
  float *v142;
  float32x2_t v143;
  float v144;
  unint64_t v145;
  __int128 *v146;
  __int128 *v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  char *v153;
  __int128 v154;
  char *v155;
  char *v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  char *v160;
  char *v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  char *v167;
  __int128 *v168;
  void *v169;
  void *v170;
  void *v171;
  _Unwind_Exception *v172;
  _Unwind_Exception *v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  _QWORD *v177;
  void **v180;
  uint64_t v181;
  float v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  unint64_t v189;
  uint64_t v190[3];
  unint64_t *v191;
  uint64_t v192;
  uint64_t *v193;
  _QWORD *v194;
  unint64_t *v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  int v206;

  if (!*(_QWORD *)(a4 + 24))
    return result;
  v181 = result;
  v4 = *(_QWORD *)(a2 + 784);
  v5 = (uint64_t *)gdc::Registry::storage<arComponents::AssetDataReference>(v4);
  v6 = gdc::Registry::storage<arComponents::LocalTransform>(v4);
  v7 = v6;
  v8 = (uint64_t *)(v6 + 32);
  v9 = *(_QWORD *)(v6 + 64) - *(_QWORD *)(v6 + 56) >= (unint64_t)(v5[8] - v5[7]) ? (uint64_t)(v5 + 4) : v6 + 32;
  gdc::RegistryView<md::components::DynamicMeshInstance,md::components::Material>::RegistryViewIterator::RegistryViewIterator(&v192, v9, v5 + 4, v8, *(_QWORD *)(v9 + 24));
  v10 = (uint64_t)(*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56) >= (unint64_t)(v5[8] - v5[7]) ? v5 + 4 : v8);
  result = (uint64_t)gdc::RegistryView<md::components::DynamicMeshInstance,md::components::Material>::RegistryViewIterator::RegistryViewIterator(v190, v10, v5 + 4, v8, *(_QWORD *)(v10 + 32));
  v11 = v195;
  if (v191 == v195)
    return result;
  v12 = (_QWORD *)(v181 + 32);
  v177 = (_QWORD *)(v181 + 64);
  while (1)
  {
    v13 = *v11;
    result = gdc::Registry::storage<arComponents::AssetDataReference>(v4);
    v14 = v13 >> 39;
    v15 = *(_QWORD *)(result + 32);
    if (v13 >> 39 < (*(_QWORD *)(result + 40) - v15) >> 3)
    {
      v16 = *(_QWORD *)(v15 + 8 * v14);
      if (v16)
      {
        v17 = HIDWORD(v13) & 0x7F;
        v18 = *(unsigned __int16 *)(v16 + 2 * v17);
        v20 = *(_QWORD *)(result + 56);
        v19 = *(_QWORD *)(result + 64);
        if (v18 < (v19 - v20) >> 3)
        {
          v21 = v20 + 8 * v18;
          v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == HIDWORD(v13);
          if (v22)
          {
            v23 = *(_QWORD *)(result + 80);
            v24 = (unint64_t *)(v23 + 40 * v18);
            if (v24 != *(unint64_t **)(result + 88) && v23 != 0)
            {
              v26 = (_QWORD *)*v12;
              if (*v12)
              {
                v27 = *v24;
                v28 = v12;
                do
                {
                  v29 = v26[4];
                  v30 = v29 >= v27;
                  if (v29 >= v27)
                    v31 = v26;
                  else
                    v31 = v26 + 1;
                  if (v30)
                    v28 = v26;
                  v26 = (_QWORD *)*v31;
                }
                while (*v31);
                if (v28 != v12 && v27 >= v28[4])
                {
                  v176 = v28[5];
                  if (!*(_BYTE *)(v23 + 40 * v18 + 32))
                    break;
                  v32 = *(_QWORD *)(v23 + 40 * v18 + 24);
                  result = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(a3, v32, v32);
                  if ((result & 1) != 0)
                    break;
                }
              }
            }
          }
        }
      }
    }
LABEL_176:
    v114 = v195;
    v11 = *(unint64_t **)(v192 + 32);
    if (++v195 != v11)
    {
      v115 = *v193;
      v116 = (v193[1] - *v193) >> 3;
      v117 = v114 + 2;
      while (1)
      {
        v118 = *((unsigned int *)v117 - 1);
        v119 = v118 >> 7;
        if (v118 >> 7 < v116)
        {
          v120 = *(_QWORD *)(v115 + 8 * v119);
          if (v120)
          {
            v121 = *(unsigned __int16 *)(v120 + 2 * (v118 & 0x7F));
            v122 = v193[3];
            result = v193[4];
            if (v121 < (result - v122) >> 3)
            {
              v123 = v122 + 8 * v121;
              if (v123 != result && *(_DWORD *)(v123 + 4) == (_DWORD)v118)
              {
                result = v194[1] - *v194;
                if (v119 < result >> 3)
                {
                  v125 = *(_QWORD *)(*v194 + 8 * v119);
                  if (v125)
                  {
                    v126 = *(unsigned __int16 *)(v125 + 2 * (v118 & 0x7F));
                    v128 = v194[3];
                    v127 = v194[4];
                    result = v127 - v128;
                    if (v126 < (v127 - v128) >> 3)
                    {
                      v129 = v128 + 8 * v126;
                      if (v129 != v127 && *(_DWORD *)(v129 + 4) == (_DWORD)v118)
                        break;
                    }
                  }
                }
              }
            }
          }
        }
        v195 = v117;
        v22 = v117++ == v11;
        if (v22)
          goto LABEL_10;
      }
      v11 = v117 - 1;
    }
LABEL_10:
    if (v191 == v11)
      return result;
  }
  v33 = (_QWORD *)gdc::Registry::storage<arComponents::LocalTransform>(v4);
  v34 = v33[4];
  if (v14 < (v33[5] - v34) >> 3
    && (v35 = *(_QWORD *)(v34 + 8 * v14)) != 0
    && (v36 = *(unsigned __int16 *)(v35 + 2 * v17), v38 = v33[7], v37 = v33[8], v36 < (v37 - v38) >> 3)
    && ((v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == HIDWORD(v13)) : (v40 = 0), v40))
  {
    v41 = v33[11];
    v42 = v33[10] + 48 * v36;
  }
  else
  {
    v41 = v33[11];
    v42 = v41;
  }
  if (v42 == v41)
    v42 = 0;
  v182 = *(float *)v42;
  v43 = *(float *)(v42 + 12);
  v44 = *(float *)(v42 + 24);
  v45 = *(float *)(v42 + 36);
  v46 = *(float32x2_t *)(v42 + 4);
  v47 = *(float32x2_t *)(v42 + 16);
  v48 = *(float32x2_t *)(v42 + 28);
  v49 = *(float32x2_t *)(v42 + 40);
  v50 = *(_QWORD *)(v181 + 56);
  v175 = v12;
  if (v50)
  {
    v51 = (uint8x8_t)vcnt_s8((int8x8_t)v50);
    v51.i16[0] = vaddlv_u8(v51);
    if (v51.u32[0] > 1uLL)
    {
      v52 = v13;
      v53 = v181;
      if (v13 >= v50)
        v52 = v13 % v50;
    }
    else
    {
      v52 = (v50 - 1) & v13;
      v53 = v181;
    }
    v54 = *(uint64_t ***)(*(_QWORD *)(v53 + 48) + 8 * v52);
    if (v54)
    {
      v55 = *v54;
      if (v55)
      {
        if (v51.u32[0] < 2uLL)
        {
          while (1)
          {
            v57 = v55[1];
            if (v57 == v13)
            {
              if (__PAIR64__(*((unsigned __int16 *)v55 + 9), *((unsigned __int16 *)v55 + 8)) == __PAIR64__(WORD1(v13), (unsigned __int16)v13)&& *((_DWORD *)v55 + 5) == HIDWORD(v13))
              {
                goto LABEL_68;
              }
            }
            else if ((v57 & (v50 - 1)) != v52)
            {
              goto LABEL_69;
            }
            v55 = (uint64_t *)*v55;
            if (!v55)
              goto LABEL_69;
          }
        }
        do
        {
          v56 = v55[1];
          if (v56 == v13)
          {
            if (__PAIR64__(*((unsigned __int16 *)v55 + 9), *((unsigned __int16 *)v55 + 8)) == __PAIR64__(WORD1(v13), (unsigned __int16)v13)&& *((_DWORD *)v55 + 5) == HIDWORD(v13))
            {
LABEL_68:
              v180 = (void **)(v55 + 3);
              v58 = a4;
              goto LABEL_174;
            }
          }
          else
          {
            if (v56 >= v50)
              v56 %= v50;
            if (v56 != v52)
              break;
          }
          v55 = (uint64_t *)*v55;
        }
        while (v55);
      }
    }
LABEL_69:
    if (v51.u32[0] > 1uLL)
    {
      v14 = v13;
      if (v13 >= v50)
        v14 = v13 % v50;
    }
    else
    {
      v14 = (v50 - 1) & v13;
    }
    v59 = *(void ***)(*(_QWORD *)(v181 + 48) + 8 * v14);
    if (v59)
    {
      v60 = *v59;
      if (*v59)
      {
        if (v51.u32[0] < 2uLL)
        {
          while (1)
          {
            v62 = v60[1];
            if (v62 == v13)
            {
              if (__PAIR64__(*((unsigned __int16 *)v60 + 9), *((unsigned __int16 *)v60 + 8)) == __PAIR64__(WORD1(v13), (unsigned __int16)v13)&& *((_DWORD *)v60 + 5) == HIDWORD(v13))
              {
                goto LABEL_151;
              }
            }
            else if ((v62 & (v50 - 1)) != v14)
            {
              goto LABEL_91;
            }
            v60 = (_QWORD *)*v60;
            if (!v60)
              goto LABEL_91;
          }
        }
        do
        {
          v61 = v60[1];
          if (v61 == v13)
          {
            if (__PAIR64__(*((unsigned __int16 *)v60 + 9), *((unsigned __int16 *)v60 + 8)) == __PAIR64__(WORD1(v13), (unsigned __int16)v13)&& *((_DWORD *)v60 + 5) == HIDWORD(v13))
            {
              goto LABEL_151;
            }
          }
          else
          {
            if (v61 >= v50)
              v61 %= v50;
            if (v61 != v14)
              break;
          }
          v60 = (_QWORD *)*v60;
        }
        while (v60);
      }
    }
  }
LABEL_91:
  v60 = operator new(0x30uLL);
  *(_QWORD *)&v196 = v60;
  *((_QWORD *)&v196 + 1) = v181 + 64;
  *v60 = 0;
  v60[1] = v13;
  v60[2] = v13;
  v60[3] = 0;
  v60[4] = 0;
  v60[5] = 0;
  LOBYTE(v197) = 1;
  v63 = (float)(unint64_t)(*(_QWORD *)(v181 + 72) + 1);
  v64 = *(float *)(v181 + 80);
  if (!v50 || (float)(v64 * (float)v50) < v63)
  {
    v65 = (v50 & (v50 - 1)) != 0;
    if (v50 < 3)
      v65 = 1;
    v66 = v65 | (2 * v50);
    v67 = vcvtps_u32_f32(v63 / v64);
    if (v66 <= v67)
      prime = v67;
    else
      prime = v66;
    if (prime == 1)
    {
      prime = 2;
      v69 = v181;
    }
    else
    {
      v69 = v181;
      if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v50 = *(_QWORD *)(v181 + 56);
      }
    }
    if (prime <= v50)
    {
      if (prime >= v50)
        goto LABEL_128;
      v81 = vcvtps_u32_f32((float)*(unint64_t *)(v69 + 72) / *(float *)(v69 + 80));
      if (v50 < 3 || (v82 = (uint8x8_t)vcnt_s8((int8x8_t)v50), v82.i16[0] = vaddlv_u8(v82), v82.u32[0] > 1uLL))
      {
        v81 = std::__next_prime(v81);
      }
      else
      {
        v83 = 1 << -(char)__clz(v81 - 1);
        if (v81 >= 2)
          v81 = v83;
      }
      if (prime <= v81)
        prime = v81;
      if (prime >= v50)
      {
        v50 = *(_QWORD *)(v69 + 56);
LABEL_128:
        if ((v50 & (v50 - 1)) != 0)
        {
          if (v13 >= v50)
            v14 = v13 % v50;
          else
            v14 = v13;
        }
        else
        {
          v14 = (v50 - 1) & v13;
        }
        goto LABEL_141;
      }
      if (!prime)
      {
        v171 = *(void **)(v69 + 48);
        *(_QWORD *)(v69 + 48) = 0;
        if (v171)
          operator delete(v171);
        v50 = 0;
        *(_QWORD *)(v69 + 56) = 0;
        goto LABEL_128;
      }
    }
    if (prime >> 61)
LABEL_241:
      std::__throw_bad_array_new_length[abi:nn180100]();
    v70 = operator new(8 * prime);
    v71 = *(void **)(v69 + 48);
    *(_QWORD *)(v69 + 48) = v70;
    if (v71)
      operator delete(v71);
    v72 = 0;
    *(_QWORD *)(v69 + 56) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(v69 + 48) + 8 * v72++) = 0;
    while (prime != v72);
    v73 = (_QWORD *)*v177;
    if (!*v177)
    {
LABEL_127:
      v50 = prime;
      goto LABEL_128;
    }
    v74 = v73[1];
    v75 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v76 = v74 & v75;
      *(_QWORD *)(*(_QWORD *)(v69 + 48) + 8 * v76) = v177;
      for (i = (_QWORD *)*v73; *v73; i = (_QWORD *)*v73)
      {
        v78 = i[1] & v75;
        if (v78 == v76)
        {
          v73 = i;
        }
        else
        {
          v79 = *(_QWORD *)(v69 + 48);
          if (*(_QWORD *)(v79 + 8 * v78))
          {
            *v73 = *i;
            v80 = 8 * v78;
            *i = **(_QWORD **)(*(_QWORD *)(v69 + 48) + v80);
            **(_QWORD **)(*(_QWORD *)(v69 + 48) + v80) = i;
          }
          else
          {
            *(_QWORD *)(v79 + 8 * v78) = v73;
            v73 = i;
            v76 = v78;
          }
        }
      }
      goto LABEL_127;
    }
    if (v74 >= prime)
      v74 %= prime;
    *(_QWORD *)(*(_QWORD *)(v69 + 48) + 8 * v74) = v177;
    v84 = (_QWORD *)*v73;
    if (!*v73)
      goto LABEL_127;
    while (1)
    {
      v86 = v84[1];
      if (v86 >= prime)
        v86 %= prime;
      if (v86 != v74)
      {
        v87 = *(_QWORD *)(v69 + 48);
        if (!*(_QWORD *)(v87 + 8 * v86))
        {
          *(_QWORD *)(v87 + 8 * v86) = v73;
          goto LABEL_132;
        }
        *v73 = *v84;
        v85 = 8 * v86;
        *v84 = **(_QWORD **)(*(_QWORD *)(v69 + 48) + v85);
        **(_QWORD **)(*(_QWORD *)(v69 + 48) + v85) = v84;
        v84 = v73;
      }
      v86 = v74;
LABEL_132:
      v73 = v84;
      v84 = (_QWORD *)*v84;
      v74 = v86;
      if (!v84)
        goto LABEL_127;
    }
  }
LABEL_141:
  v88 = *(_QWORD *)(v181 + 48);
  v89 = *(_QWORD **)(v88 + 8 * v14);
  if (v89)
  {
    *v60 = *v89;
    v90 = v181;
  }
  else
  {
    *v60 = *v177;
    *v177 = v60;
    *(_QWORD *)(v88 + 8 * v14) = v177;
    v90 = v181;
    if (!*v60)
      goto LABEL_150;
    v91 = *(_QWORD *)(*v60 + 8);
    if ((v50 & (v50 - 1)) != 0)
    {
      if (v91 >= v50)
        v91 %= v50;
    }
    else
    {
      v91 &= v50 - 1;
    }
    v89 = (_QWORD *)(*(_QWORD *)(v181 + 48) + 8 * v91);
  }
  *v89 = v60;
LABEL_150:
  ++*(_QWORD *)(v90 + 72);
LABEL_151:
  v174 = v4;
  v92 = (char *)v60[3];
  v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v176 + 184) - *(_QWORD *)(v176 + 176)) >> 3);
  v180 = (void **)(v60 + 3);
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v60[5] - (_QWORD)v92) >> 3) < v93)
  {
    if (v93 > 0x186186186186186)
LABEL_240:
      abort();
    v94 = (_BYTE *)v60[4];
    v95 = 56 * ((uint64_t)(*(_QWORD *)(v176 + 184) - *(_QWORD *)(v176 + 176)) >> 3);
    v96 = (char *)operator new(v95);
    v97 = &v96[v95];
    v98 = &v96[v94 - v92];
    if (v94 == v92)
    {
      v60[3] = v98;
      v60[4] = v98;
      v60[5] = v97;
    }
    else
    {
      v99 = 0;
      do
      {
        v100 = &v98[v99];
        v101 = &v94[v99];
        v102 = *(_OWORD *)&v94[v99 - 168];
        v103 = *(_OWORD *)&v94[v99 - 152];
        *(_OWORD *)(v100 - 136) = *(_OWORD *)&v94[v99 - 136];
        *(_OWORD *)(v100 - 152) = v103;
        *(_OWORD *)(v100 - 168) = v102;
        v104 = *(_OWORD *)&v94[v99 - 120];
        v105 = *(_OWORD *)&v94[v99 - 104];
        v106 = *(_OWORD *)&v94[v99 - 88];
        *((_QWORD *)v100 - 9) = *(_QWORD *)&v94[v99 - 72];
        *(_OWORD *)(v100 - 88) = v106;
        *(_OWORD *)(v100 - 104) = v105;
        *(_OWORD *)(v100 - 120) = v104;
        *(v100 - 64) = 0;
        *(v100 - 40) = 0;
        if (v94[v99 - 40])
        {
          *((_OWORD *)v100 - 4) = *((_OWORD *)v101 - 4);
          *((_QWORD *)v100 - 6) = *((_QWORD *)v101 - 6);
          *((_QWORD *)v101 - 8) = 0;
          *((_QWORD *)v101 - 7) = 0;
          *((_QWORD *)v101 - 6) = 0;
          *(v100 - 40) = 1;
        }
        *(v100 - 32) = 0;
        *(v100 - 8) = 0;
        if (*(v101 - 8))
        {
          v107 = &v94[v99];
          *((_OWORD *)v100 - 2) = *(_OWORD *)&v94[v99 - 32];
          *(_QWORD *)&v98[v99 - 16] = *(_QWORD *)&v94[v99 - 16];
          *((_QWORD *)v107 - 4) = 0;
          *((_QWORD *)v107 - 3) = 0;
          *((_QWORD *)v107 - 2) = 0;
          *(v100 - 8) = 1;
        }
        v99 -= 168;
      }
      while (&v94[v99] != v92);
      v92 = (char *)v60[3];
      v108 = (char *)v60[4];
      v60[3] = &v98[v99];
      v60[4] = v98;
      v60[5] = v97;
      while (v108 != v92)
      {
        if (*(v108 - 8))
        {
          v109 = (void *)*((_QWORD *)v108 - 4);
          if (v109)
          {
            *((_QWORD *)v108 - 3) = v109;
            operator delete(v109);
          }
        }
        if (*(v108 - 40))
        {
          v110 = (void *)*((_QWORD *)v108 - 8);
          if (v110)
          {
            *((_QWORD *)v108 - 7) = v110;
            operator delete(v110);
          }
        }
        v108 -= 168;
      }
    }
    if (v92)
      operator delete(v92);
  }
  v111 = *(float ***)(v176 + 176);
  for (j = *(float ***)(v176 + 184); v111 != j; v111 += 3)
  {
    v183 = xmmword_19FFB5880;
    v184 = xmmword_19FFB5880;
    v185 = xmmword_19FFB5880;
    v186 = xmmword_19FFB5880;
    v187 = xmmword_19FFB5880;
    v188 = xmmword_19FFB5880;
    v189 = 0xFF7FFFFF7F7FFFFFLL;
    v135 = *v111;
    v136 = v111[1];
    if (*v111 != v136)
    {
      do
      {
        v137 = 0;
        v138 = v135[1];
        v139 = v135[2];
        v140 = (float)((float)(v45 + (float)(*v135 * v182)) + (float)(v138 * v43)) + (float)(v139 * v44);
        v141 = vmla_n_f32(vmla_n_f32(vmla_n_f32(v49, v46, *v135), v47, v138), v48, v139);
        v142 = (float *)&v183 + 1;
        do
        {
          v196 = xmmword_19FFB3590;
          v197 = xmmword_19FFB3590;
          v198 = xmmword_19FFB36A0;
          v199 = xmmword_19FFB36B0;
          v200 = xmmword_19FFB36C0;
          v201 = xmmword_19FFB36D0;
          v202 = xmmword_19FFB36E0;
          v203 = xmmword_19FFB36F0;
          v204 = xmmword_19FFB3700;
          v205 = 0x3E8483EDBF7746EDLL;
          v206 = 0;
          v143 = vmul_f32(*(float32x2_t *)((char *)&v196 + v137 + 4), v141);
          v144 = (float)(v143.f32[0] + (float)(*(float *)((char *)&v196 + v137) * v140)) + v143.f32[1];
          *(v142 - 1) = fminf(v144, *(v142 - 1));
          *v142 = fmaxf(*v142, v144);
          v142 += 2;
          v137 += 12;
        }
        while (v137 != 156);
        v135 += 3;
      }
      while (v135 != v136);
    }
    v146 = (__int128 *)v60[4];
    v145 = v60[5];
    if ((unint64_t)v146 < v145)
    {
      v131 = v188;
      v146[4] = v187;
      v146[5] = v131;
      *((_QWORD *)v146 + 12) = v189;
      v132 = v184;
      *v146 = v183;
      v146[1] = v132;
      v133 = v186;
      v146[2] = v185;
      v146[3] = v133;
      *((_BYTE *)v146 + 104) = 0;
      *((_BYTE *)v146 + 128) = 0;
      *((_BYTE *)v146 + 136) = 0;
      v134 = (char *)v146 + 168;
      *((_BYTE *)v146 + 160) = 0;
    }
    else
    {
      v147 = (__int128 *)*v180;
      v148 = 0xCF3CF3CF3CF3CF3DLL * (((char *)v146 - (_BYTE *)*v180) >> 3);
      v149 = v148 + 1;
      if (v148 + 1 > 0x186186186186186)
        goto LABEL_240;
      v150 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v145 - (_QWORD)v147) >> 3);
      if (2 * v150 > v149)
        v149 = 2 * v150;
      if (v150 >= 0xC30C30C30C30C3)
        v151 = 0x186186186186186;
      else
        v151 = v149;
      if (v151 > 0x186186186186186)
        goto LABEL_241;
      v152 = 168 * v151;
      v153 = (char *)operator new(168 * v151);
      v154 = v188;
      v155 = &v153[168 * v148];
      v156 = &v153[v152];
      *((_OWORD *)v155 + 4) = v187;
      *((_OWORD *)v155 + 5) = v154;
      *((_QWORD *)v155 + 12) = v189;
      v157 = v184;
      *(_OWORD *)v155 = v183;
      *((_OWORD *)v155 + 1) = v157;
      v158 = v186;
      *((_OWORD *)v155 + 2) = v185;
      *((_OWORD *)v155 + 3) = v158;
      v155[104] = 0;
      v155[128] = 0;
      v155[136] = 0;
      v134 = v155 + 168;
      v155[160] = 0;
      if (v146 == v147)
      {
        v60[3] = v155;
        v60[4] = v134;
        v60[5] = v156;
      }
      else
      {
        v159 = 0;
        do
        {
          v160 = &v155[v159];
          v161 = (char *)v146 + v159;
          v162 = *(__int128 *)((char *)v146 + v159 - 168);
          v163 = *(__int128 *)((char *)v146 + v159 - 152);
          *(_OWORD *)(v160 - 136) = *(__int128 *)((char *)v146 + v159 - 136);
          *(_OWORD *)(v160 - 152) = v163;
          *(_OWORD *)(v160 - 168) = v162;
          v164 = *(__int128 *)((char *)v146 + v159 - 120);
          v165 = *(__int128 *)((char *)v146 + v159 - 104);
          v166 = *(__int128 *)((char *)v146 + v159 - 88);
          *((_QWORD *)v160 - 9) = *(_QWORD *)((char *)v146 + v159 - 72);
          *(_OWORD *)(v160 - 88) = v166;
          *(_OWORD *)(v160 - 104) = v165;
          *(_OWORD *)(v160 - 120) = v164;
          *(v160 - 64) = 0;
          *(v160 - 40) = 0;
          if (*((_BYTE *)v146 + v159 - 40))
          {
            *((_OWORD *)v160 - 4) = *((_OWORD *)v161 - 4);
            *((_QWORD *)v160 - 6) = *((_QWORD *)v161 - 6);
            *((_QWORD *)v161 - 8) = 0;
            *((_QWORD *)v161 - 7) = 0;
            *((_QWORD *)v161 - 6) = 0;
            *(v160 - 40) = 1;
          }
          *(v160 - 32) = 0;
          *(v160 - 8) = 0;
          if (*(v161 - 8))
          {
            v167 = (char *)v146 + v159;
            *((_OWORD *)v160 - 2) = *(__int128 *)((char *)v146 + v159 - 32);
            *(_QWORD *)&v155[v159 - 16] = *(_QWORD *)((char *)v146 + v159 - 16);
            *((_QWORD *)v167 - 4) = 0;
            *((_QWORD *)v167 - 3) = 0;
            *((_QWORD *)v167 - 2) = 0;
            *(v160 - 8) = 1;
          }
          v159 -= 168;
        }
        while ((__int128 *)((char *)v146 + v159) != v147);
        v146 = (__int128 *)v60[3];
        v168 = (__int128 *)v60[4];
        v60[3] = &v155[v159];
        v60[4] = v134;
        v60[5] = v156;
        while (v168 != v146)
        {
          if (*((_BYTE *)v168 - 8))
          {
            v169 = (void *)*((_QWORD *)v168 - 4);
            if (v169)
            {
              *((_QWORD *)v168 - 3) = v169;
              operator delete(v169);
            }
          }
          if (*((_BYTE *)v168 - 40))
          {
            v170 = (void *)*((_QWORD *)v168 - 8);
            if (v170)
            {
              *((_QWORD *)v168 - 7) = v170;
              operator delete(v170);
            }
          }
          v168 = (__int128 *)((char *)v168 - 168);
        }
      }
      if (v146)
        operator delete(v146);
    }
    v60[4] = v134;
  }
  v58 = a4;
  v4 = v174;
  v12 = v175;
LABEL_174:
  *(_QWORD *)&v196 = v176;
  v113 = *(_QWORD *)(v58 + 24);
  if (!v113)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    v173 = v172;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Entity,std::vector<arComponents::LocalBounds>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Entity,std::vector<arComponents::LocalBounds>>,void *>>>>::reset[abi:nn180100]((uint64_t)&v196);
    _Unwind_Resume(v173);
  }
  result = (*(uint64_t (**)(uint64_t, __int128 *, void **))(*(_QWORD *)v113 + 48))(v113, &v196, v180);
  if ((_DWORD)result)
    goto LABEL_176;
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Entity,std::vector<arComponents::LocalBounds>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Entity,std::vector<arComponents::LocalBounds>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v2 = v1[3];
      if (v2)
      {
        v3 = v1[4];
        v4 = (void *)v1[3];
        if (v3 != v2)
        {
          do
          {
            if (*(_BYTE *)(v3 - 8))
            {
              v5 = *(void **)(v3 - 32);
              if (v5)
              {
                *(_QWORD *)(v3 - 24) = v5;
                operator delete(v5);
              }
            }
            if (*(_BYTE *)(v3 - 40))
            {
              v6 = *(void **)(v3 - 64);
              if (v6)
              {
                *(_QWORD *)(v3 - 56) = v6;
                operator delete(v6);
              }
            }
            v3 -= 168;
          }
          while (v3 != v2);
          v4 = (void *)v1[3];
        }
        v1[4] = v2;
        operator delete(v4);
      }
    }
    operator delete(v1);
  }
}

void std::__function::__func<md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_1,std::allocator<md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_1>,BOOL ()(md::ARAssetOcclusionMeshData const*,std::vector<arComponents::LocalBounds> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_1,std::allocator<md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_1>,BOOL ()(md::ARAssetOcclusionMeshData const*,std::vector<arComponents::LocalBounds> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D9098;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_1,std::allocator<md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_1>,BOOL ()(md::ARAssetOcclusionMeshData const*,std::vector<arComponents::LocalBounds> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D9098;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_1,std::allocator<md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_1>,BOOL ()(md::ARAssetOcclusionMeshData const*,std::vector<arComponents::LocalBounds> const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  _BYTE *v16;
  uint64_t v17;
  float32x4_t v18;
  int v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  BOOL v28;
  float v29;
  _BYTE v31[416];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  int v42;

  v3 = *a3;
  v4 = a3[1];
  if (*a3 != v4)
  {
    v5 = *(float **)(a1 + 8);
    v6 = v5[4];
    v7 = v5[5];
    v8 = *v5;
    v9 = v5[1];
    v11 = v5[2];
    v10 = v5[3];
    v12 = (int *)(v3 + 4);
LABEL_4:
    v13 = 0;
    v14 = 0;
    v15 = v12;
    do
    {
      v32 = xmmword_19FFB3590;
      v33 = xmmword_19FFB3590;
      v34 = xmmword_19FFB36A0;
      v35 = xmmword_19FFB36B0;
      v36 = xmmword_19FFB36C0;
      v37 = xmmword_19FFB36D0;
      v38 = xmmword_19FFB36E0;
      v39 = xmmword_19FFB36F0;
      v40 = xmmword_19FFB3700;
      v41 = 0x3E8483EDBF7746EDLL;
      v42 = 0;
      v16 = &v31[v13];
      v17 = *(_QWORD *)((char *)&v32 + v14);
      v18.i32[0] = *(v15 - 1);
      v19 = *v15;
      *((_DWORD *)v16 + 2) = *(_DWORD *)((char *)&v32 + v14 + 8);
      *(_QWORD *)v16 = v17;
      v32 = xmmword_19FFB3590;
      v33 = xmmword_19FFB3590;
      v34 = xmmword_19FFB36A0;
      v35 = xmmword_19FFB36B0;
      v36 = xmmword_19FFB36C0;
      v37 = xmmword_19FFB36D0;
      v38 = xmmword_19FFB36E0;
      v39 = xmmword_19FFB36F0;
      v40 = xmmword_19FFB3700;
      v41 = 0x3E8483EDBF7746EDLL;
      v42 = 0;
      v18.i32[1] = *(_DWORD *)((char *)&v32 + v14);
      v18.i64[1] = *(_QWORD *)((char *)&v32 + v14 + 4);
      *(float32x4_t *)(v16 + 12) = vnegq_f32(v18);
      *((_DWORD *)v16 + 7) = v19;
      v14 += 12;
      v13 += 32;
      v15 += 2;
    }
    while (v14 != 156);
    v20 = 0;
    v21 = 0.0;
    v22 = 1.0;
    while (1)
    {
      v23 = *(float *)&v31[v20];
      v24 = *(float *)&v31[v20 + 4];
      v25 = *(float *)&v31[v20 + 8];
      v26 = (float)((float)(v23 * v10) + (float)(v24 * v6)) + (float)(v25 * v7);
      v27 = (float)((float)(*(float *)&v31[v20 + 12] + (float)(v23 * v8)) + (float)(v24 * v9)) + (float)(v25 * v11);
      v28 = v26 <= 0.0;
      if (v26 == 0.0)
      {
        if (v27 < 0.0)
          goto LABEL_3;
      }
      else
      {
        v29 = (float)-v27 / v26;
        if (v28)
        {
          v22 = fminf(v29, v22);
          if (v21 > v22)
          {
LABEL_3:
            v3 += 168;
            v12 += 42;
            if (v3 == v4)
              return **(_BYTE **)(a1 + 16) == 0;
            goto LABEL_4;
          }
          goto LABEL_13;
        }
        v21 = fmaxf(v21, v29);
      }
      if (v21 > v22)
        goto LABEL_3;
LABEL_13:
      v20 += 16;
      if (v20 == 416)
      {
        **(_BYTE **)(a1 + 16) = 1;
        return **(_BYTE **)(a1 + 16) == 0;
      }
    }
  }
  return **(_BYTE **)(a1 + 16) == 0;
}

double *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_0 &,std::pair<md::ARBuildingTileData *,double> *>(double *result, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;

  v4 = a2[1];
  v5 = result[1];
  v6 = a3[1];
  if (v4 >= v5)
  {
    if (v6 >= v4)
    {
      v4 = a3[1];
    }
    else
    {
      v8 = *a2;
      *a2 = *a3;
      *a3 = v8;
      a2[1] = v6;
      a3[1] = v4;
      v9 = a2[1];
      v10 = result[1];
      if (v9 < v10)
      {
        v11 = *result;
        *result = *a2;
        *a2 = v11;
        result[1] = v9;
        a2[1] = v10;
        v4 = a3[1];
      }
    }
  }
  else
  {
    v7 = *result;
    if (v6 < v4)
    {
      *result = *a3;
      *a3 = v7;
      result[1] = v6;
LABEL_9:
      a3[1] = v5;
      v4 = v5;
      goto LABEL_11;
    }
    *result = *a2;
    *a2 = v7;
    result[1] = v4;
    a2[1] = v5;
    v4 = a3[1];
    if (v4 < v5)
    {
      *a2 = *a3;
      *a3 = v7;
      a2[1] = v4;
      goto LABEL_9;
    }
  }
LABEL_11:
  v12 = a4[1];
  if (v12 < v4)
  {
    v13 = *a3;
    *a3 = *a4;
    *a4 = v13;
    a3[1] = v12;
    a4[1] = v4;
    v14 = a3[1];
    v15 = a2[1];
    if (v14 < v15)
    {
      v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      a2[1] = v14;
      a3[1] = v15;
      v17 = a2[1];
      v18 = result[1];
      if (v17 < v18)
      {
        v19 = *result;
        *result = *a2;
        *a2 = v19;
        result[1] = v17;
        a2[1] = v18;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_0 &,std::pair<md::ARBuildingTileData *,double> *>(double *a1, double *a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double *v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  double *v38;
  uint64_t v39;
  int v40;
  double *v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  double *v46;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = a1[1];
      if (v6 < v7)
      {
        v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      v9 = a1[3];
      v10 = a1[1];
      v11 = *(a2 - 1);
      if (v9 >= v10)
      {
        if (v11 < v9)
        {
          v30 = *((_QWORD *)a1 + 2);
          a1[2] = *(a2 - 2);
          *((_QWORD *)a2 - 2) = v30;
          a1[3] = v11;
          *(a2 - 1) = v9;
          v31 = a1[3];
          v32 = a1[1];
          if (v31 < v32)
          {
            v33 = *(_QWORD *)a1;
            *a1 = a1[2];
            *((_QWORD *)a1 + 2) = v33;
            a1[1] = v31;
            a1[3] = v32;
          }
        }
      }
      else
      {
        v12 = *(_QWORD *)a1;
        if (v11 >= v9)
        {
          *a1 = a1[2];
          *((_QWORD *)a1 + 2) = v12;
          a1[1] = v9;
          a1[3] = v10;
          v37 = *(a2 - 1);
          if (v37 < v10)
          {
            a1[2] = *(a2 - 2);
            *((_QWORD *)a2 - 2) = v12;
            a1[3] = v37;
            *(a2 - 1) = v10;
          }
        }
        else
        {
          *a1 = *(a2 - 2);
          *((_QWORD *)a2 - 2) = v12;
          a1[1] = v11;
          *(a2 - 1) = v10;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_0 &,std::pair<md::ARBuildingTileData *,double> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_0 &,std::pair<md::ARBuildingTileData *,double> *>(a1, a1 + 2, a1 + 4, a1 + 6);
      v19 = *(a2 - 1);
      v20 = a1[7];
      if (v19 < v20)
      {
        v21 = *((_QWORD *)a1 + 6);
        a1[6] = *(a2 - 2);
        *((_QWORD *)a2 - 2) = v21;
        a1[7] = v19;
        *(a2 - 1) = v20;
        v22 = a1[7];
        v23 = a1[5];
        if (v22 < v23)
        {
          v24 = *((_QWORD *)a1 + 4);
          v25 = *((_QWORD *)a1 + 6);
          *((_QWORD *)a1 + 4) = v25;
          *((_QWORD *)a1 + 6) = v24;
          a1[5] = v22;
          a1[7] = v23;
          v26 = a1[3];
          if (v22 < v26)
          {
            v27 = *((_QWORD *)a1 + 2);
            *((_QWORD *)a1 + 2) = v25;
            *((_QWORD *)a1 + 4) = v27;
            a1[3] = v22;
            a1[5] = v26;
            v28 = a1[1];
            if (v22 < v28)
            {
              v29 = *a1;
              *(_QWORD *)a1 = v25;
              a1[2] = v29;
              a1[1] = v22;
              a1[3] = v28;
            }
          }
        }
      }
      return 1;
    default:
      v13 = a1[1];
      v14 = a1 + 3;
      v15 = a1[3];
      v16 = a1[5];
      if (v15 < v13)
      {
        v17 = *a1;
        if (v16 >= v15)
        {
          *a1 = a1[2];
          a1[2] = v17;
          a1[1] = v15;
          a1[3] = v13;
          if (v16 >= v13)
            goto LABEL_28;
          a1[2] = a1[4];
          a1[4] = v17;
          v18 = a1 + 3;
        }
        else
        {
          *a1 = a1[4];
          a1[4] = v17;
          v18 = a1 + 1;
        }
        v14 = a1 + 5;
        goto LABEL_27;
      }
      if (v16 < v15)
      {
        v34 = *((_QWORD *)a1 + 2);
        v35 = *((_QWORD *)a1 + 4);
        *((_QWORD *)a1 + 2) = v35;
        *((_QWORD *)a1 + 4) = v34;
        a1[3] = v16;
        a1[5] = v15;
        if (v16 < v13)
        {
          v36 = *a1;
          *(_QWORD *)a1 = v35;
          a1[2] = v36;
          v18 = a1 + 1;
LABEL_27:
          *v18 = v16;
          *v14 = v13;
        }
      }
LABEL_28:
      v38 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v39 = 0;
      v40 = 0;
      v41 = a1 + 4;
      while (1)
      {
        v43 = v38[1];
        if (v43 < v41[1])
        {
          v44 = *(_QWORD *)v38;
          v45 = v39;
          do
          {
            v46 = (double *)((char *)a1 + v45);
            v46[6] = *(double *)((char *)a1 + v45 + 32);
            v46[7] = *(double *)((char *)a1 + v45 + 40);
            if (v45 == -32)
            {
              v42 = (uint64_t)a1;
              goto LABEL_31;
            }
            v45 -= 16;
          }
          while (v43 < v46[3]);
          v42 = (uint64_t)a1 + v45 + 48;
LABEL_31:
          *(_QWORD *)v42 = v44;
          *(double *)(v42 + 8) = v43;
          if (++v40 == 8)
            return v38 + 2 == a2;
        }
        v41 = v38;
        v39 += 16;
        v38 += 2;
        if (v38 == a2)
          return 1;
      }
  }
}

void md::ARWorldIntersector::resolveWorldPoint(_QWORD *a1, __int128 *a2)
{
  unint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  int8x8_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  double v21;
  double v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  _OWORD *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  double v49;
  double v50;
  long double v51;
  long double v52;
  long double v53;
  long double v54;
  long double v55;
  long double v56;
  long double v57;
  double v58;
  long double v59;
  long double v60;
  float v61;
  float v62;
  float v63;
  float v64;
  double v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  void *v75;
  char *__p;
  char *__pa;
  _QWORD v79[4];
  _DWORD v80[3];
  float v81;
  uint64_t v82;
  void *v83[2];
  void *v84[2];
  int v85;
  __int128 v86;
  uint64_t v87;
  _QWORD v88[3];
  _QWORD *v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v86 = *a2;
  v87 = *((_QWORD *)a2 + 2);
  v3 = a1[2];
  if (v3)
  {
    if (v3 >> 61)
      abort();
    v4 = 8 * v3;
    v5 = (char *)operator new(8 * v3);
    v6 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 == a1 + 1)
  {
LABEL_96:
    if (!v5)
      return;
    goto LABEL_97;
  }
  v8 = v5;
  do
  {
    v9 = v7[4];
    v10 = *(_QWORD **)(v9 + 784);
    v11 = (int8x8_t)v10[1];
    if (!*(_QWORD *)&v11)
      goto LABEL_31;
    v12 = (uint8x8_t)vcnt_s8(v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v13 = 0x64A448A5CD5D38DBLL;
      if (*(_QWORD *)&v11 <= 0x64A448A5CD5D38DBuLL)
        v13 = 0x64A448A5CD5D38DBuLL % *(_QWORD *)&v11;
    }
    else
    {
      v13 = (*(_QWORD *)&v11 - 1) & 0x64A448A5CD5D38DBLL;
    }
    v14 = *(_QWORD **)(*v10 + 8 * v13);
    if (!v14 || (v15 = (_QWORD *)*v14) == 0)
    {
LABEL_31:
      v20 = 0;
      goto LABEL_32;
    }
    if (v12.u32[0] < 2uLL)
    {
      v16 = *(_QWORD *)&v11 - 1;
      while (1)
      {
        v18 = v15[1];
        if (v18 == 0x64A448A5CD5D38DBLL)
        {
          if (v15[2] == 0x64A448A5CD5D38DBLL)
            goto LABEL_29;
        }
        else if ((v18 & v16) != v13)
        {
          goto LABEL_31;
        }
        v15 = (_QWORD *)*v15;
        if (!v15)
          goto LABEL_31;
      }
    }
    while (1)
    {
      v17 = v15[1];
      if (v17 == 0x64A448A5CD5D38DBLL)
        break;
      if (v17 >= *(_QWORD *)&v11)
        v17 %= *(_QWORD *)&v11;
      if (v17 != v13)
        goto LABEL_31;
LABEL_18:
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_31;
    }
    if (v15[2] != 0x64A448A5CD5D38DBLL)
      goto LABEL_18;
LABEL_29:
    v19 = v15[5];
    if (*(_QWORD *)(v19 + 8) != 0x64A448A5CD5D38DBLL)
      goto LABEL_31;
    v20 = *(double **)(v19 + 32);
LABEL_32:
    if (*(double *)a2 < v20[16]
      || *(double *)a2 >= v20[19]
      || (v21 = *((double *)a2 + 1), v21 < v20[17])
      || v21 >= v20[20]
      || (v22 = *((double *)a2 + 2), v22 < v20[18])
      || v22 >= v20[21])
    {
LABEL_40:
      v23 = (_QWORD *)v7[1];
      if (!v23)
        goto LABEL_60;
      do
      {
LABEL_41:
        v24 = v23;
        v23 = (_QWORD *)*v23;
      }
      while (v23);
      goto LABEL_7;
    }
    if (v8 < v6)
    {
      *(_QWORD *)v8 = v9;
      v8 += 8;
      goto LABEL_40;
    }
    v25 = v8 - v5;
    v26 = v5;
    v27 = (v8 - v5) >> 3;
    v28 = v27 + 1;
    __p = v26;
    if ((unint64_t)(v27 + 1) >> 61)
      abort();
    if ((v6 - v26) >> 2 > v28)
      v28 = (v6 - v26) >> 2;
    if ((unint64_t)(v6 - v26) >= 0x7FFFFFFFFFFFFFF8)
      v29 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v29 = v28;
    if (v29)
    {
      if (v29 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v30 = operator new(8 * v29);
    }
    else
    {
      v30 = 0;
    }
    v31 = &v30[8 * v27];
    *(_QWORD *)v31 = v9;
    v32 = v31 + 8;
    v33 = __p;
    if (v8 != __p)
    {
      v34 = v8 - 8 - __p;
      if (v34 < 0x168
        || &v30[v25 - 8 - (v34 & 0xFFFFFFFFFFFFFFF8)] > &v30[v25 - 8]
        || &v8[-(v34 & 0xFFFFFFFFFFFFFFF8) - 8] > v8 - 8
        || (unint64_t)(v8 - &v30[v25]) < 0x20)
      {
        v35 = v8;
        v33 = __p;
      }
      else
      {
        v38 = (v34 >> 3) + 1;
        v35 = &v8[-8 * (v38 & 0x3FFFFFFFFFFFFFFCLL)];
        v39 = &v30[8 * v27 - 16];
        v40 = v8 - 16;
        v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v42 = *(_OWORD *)v40;
          *(v39 - 1) = *((_OWORD *)v40 - 1);
          *v39 = v42;
          v39 -= 2;
          v40 -= 32;
          v41 -= 4;
        }
        while (v41);
        v31 -= 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
        v33 = __p;
        if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_57;
      }
      do
      {
        v36 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        *((_QWORD *)v31 - 1) = v36;
        v31 -= 8;
      }
      while (v35 != v33);
    }
LABEL_57:
    v6 = &v30[8 * v29];
    v8 = v32;
    if (v33)
      operator delete(v33);
    v5 = v31;
    v23 = (_QWORD *)v7[1];
    if (v23)
      goto LABEL_41;
    do
    {
LABEL_60:
      v24 = (_QWORD *)v7[2];
      v37 = *v24 == (_QWORD)v7;
      v7 = v24;
    }
    while (!v37);
LABEL_7:
    v7 = v24;
  }
  while (v24 != a1 + 1);
  *(_OWORD *)v83 = 0u;
  *(_OWORD *)v84 = 0u;
  v85 = 1065353216;
  if (v5 != v8)
  {
    __pa = v5;
    while (1)
    {
      v43 = *(_QWORD **)(*(_QWORD *)v5 + 784);
      v82 = 0;
      v44 = v43[1];
      if ((v44 & (v44 - 1)) != 0)
      {
        v46 = 0x64A448A5CD5D38DBLL;
        if (v44 <= 0x64A448A5CD5D38DBLL)
          v46 = 0x64A448A5CD5D38DBLL % v44;
        v45 = *(_QWORD **)(*v43 + 8 * v46);
        do
        {
          do
            v45 = (_QWORD *)*v45;
          while (v45[1] != 0x64A448A5CD5D38DBLL);
        }
        while (v45[2] != 0x64A448A5CD5D38DBLL);
      }
      else
      {
        v45 = *(_QWORD **)(*v43 + 8 * ((v44 - 1) & 0x64A448A5CD5D38DBLL));
        do
        {
          do
            v45 = (_QWORD *)*v45;
          while (v45[1] != 0x64A448A5CD5D38DBLL);
        }
        while (v45[2] != 0x64A448A5CD5D38DBLL);
      }
      v47 = *(_QWORD *)(v45[5] + 32);
      v82 = v47;
      v48 = *(_BYTE *)(v47 + 1);
      v49 = (double)(1 << v48);
      v50 = (double)((1 << v48) + ~*(_DWORD *)(v47 + 4));
      v51 = exp(1.0 / v49 * 6.28318531 * (v50 + 0.5) + -3.14159265);
      v52 = atan(v51) * 114.591559 + -90.0;
      v53 = cos(v52 * 0.034906585) * -559.82 + 111132.92;
      v54 = v53 + cos(v52 * 0.0698131701) * 1.175;
      v55 = v54 + cos(v52 * 0.104719755) * -0.0023;
      v56 = v52 * 0.00872664626;
      v57 = tan(v52 * 0.00872664626 + 0.78103484);
      v58 = log(v57);
      v59 = tan(v56 + 0.789761487);
      v60 = fabs((log(v59) - v58) * 0.159154943) / (v55 * (1.0 / v49));
      __powidf2();
      v61 = v60;
      v81 = v61;
      v62 = (*(double *)a2 - 1.0 / v49 * (double)*(int *)(v47 + 8)) * v49;
      v63 = (*((double *)a2 + 1) - 1.0 / v49 * v50) * v49;
      v64 = *((double *)a2 + 2) * 40075017.0;
      *(float *)v80 = v62;
      *(float *)&v80[1] = v63;
      *(float *)&v65 = v65 * (0.0000000249532021 * v64);
      v80[2] = LODWORD(v65);
      v79[0] = v80;
      v79[1] = &v81;
      v79[2] = &v86;
      v79[3] = &v82;
      v66 = *(_QWORD *)v5;
      v88[0] = &off_1E42D9050;
      v88[1] = v79;
      v89 = v88;
      md::ARWorldIntersector::visitReferencedAssetOcclusionVolumes((uint64_t)a1, v66, (uint64_t)v83, (uint64_t)v88);
      v67 = v89;
      if (v89 == v88)
        break;
      if (v89)
      {
        v68 = 5;
LABEL_87:
        (*(void (**)(void))(*v67 + 8 * v68))();
      }
      v69 = (_QWORD *)gdc::Registry::storage<arComponents::LocalBounds>((uint64_t)v43);
      v70 = v69[7];
      v71 = v69[8];
      if (v70 != v71)
      {
        v72 = v69[10];
        do
        {
          md::ARWorldIntersector::resolveWorldPoint(gm::Matrix<double,3,1> const&)const::$_0::operator()((uint64_t)v79, v72);
          v72 += 168;
          v70 += 8;
        }
        while (v70 != v71);
      }
      v5 += 8;
      if (v5 == v8)
      {
        v73 = v84[0];
        if (v84[0])
        {
          do
          {
            v74 = (_QWORD *)*v73;
            operator delete(v73);
            v73 = v74;
          }
          while (v74);
        }
        v75 = v83[0];
        v83[0] = 0;
        v5 = __pa;
        if (v75)
          operator delete(v75);
        goto LABEL_96;
      }
    }
    v67 = v88;
    v68 = 4;
    goto LABEL_87;
  }
  v5 = v8;
  if (v8)
LABEL_97:
    operator delete(v5);
}

void sub_19FEB8744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float64x2_t md::ARWorldIntersector::resolveWorldPoint(gm::Matrix<double,3,1> const&)const::$_0::operator()(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  unint64_t v3;
  float64x2_t result;
  float32x2_t v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float32x2_t *v11;
  float32x2_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  _OWORD *v17;
  uint64_t v18;
  float32x4_t v19;
  int v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float64x2_t *v38;
  float64x2_t *v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[9];
  uint64_t v46;
  int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  int v58;

  v2 = 0;
  v3 = 0;
  LODWORD(result.f64[0]) = **(_DWORD **)a1;
  v5 = *(float32x2_t *)(*(_QWORD *)a1 + 4);
  v6 = (float *)(a2 + 4);
  v7 = 1.0;
  v8 = 0.86602;
  v9 = 0.70711;
  v10 = 0.0;
  v11 = (float32x2_t *)((char *)v45 + 4);
  do
  {
    v45[0] = xmmword_19FFB3590;
    v45[1] = xmmword_19FFB3590;
    v45[2] = xmmword_19FFB36A0;
    v45[3] = xmmword_19FFB36B0;
    v45[4] = xmmword_19FFB36C0;
    v45[5] = xmmword_19FFB36D0;
    v45[6] = xmmword_19FFB36E0;
    v45[7] = xmmword_19FFB36F0;
    v45[8] = xmmword_19FFB3700;
    v46 = 0x3E8483EDBF7746EDLL;
    v47 = 0;
    v12 = vmul_f32(v5, *v11);
    v13 = (float)(v12.f32[0] + (float)(*(float *)result.f64 * v11[-1].f32[1])) + v12.f32[1];
    if ((float)(v13 - *(v6 - 1)) < 0.0)
      break;
    if ((float)(v13 - *v6) > 0.0)
      break;
    v2 = v3 > 0xB;
    v6 += 2;
    v11 = (float32x2_t *)((char *)v11 + 12);
    ++v3;
  }
  while (v3 != 13);
  if (v2)
  {
    v14 = 0;
    v15 = 0;
    v16 = (int *)(a2 + 4);
    do
    {
      v48 = xmmword_19FFB3590;
      v49 = xmmword_19FFB3590;
      v50 = xmmword_19FFB36A0;
      v51 = xmmword_19FFB36B0;
      v52 = xmmword_19FFB36C0;
      v53 = xmmword_19FFB36D0;
      v54 = xmmword_19FFB36E0;
      v55 = xmmword_19FFB36F0;
      v56 = xmmword_19FFB3700;
      v57 = 0x3E8483EDBF7746EDLL;
      v58 = 0;
      v17 = &v45[v14];
      v18 = *(_QWORD *)((char *)&v48 + v15);
      v19.i32[0] = *(v16 - 1);
      v20 = *v16;
      *((_DWORD *)v17 + 2) = *(_DWORD *)((char *)&v48 + v15 + 8);
      *(_QWORD *)v17 = v18;
      v48 = xmmword_19FFB3590;
      v49 = xmmword_19FFB3590;
      v50 = xmmword_19FFB36A0;
      v51 = xmmword_19FFB36B0;
      v52 = xmmword_19FFB36C0;
      v53 = xmmword_19FFB36D0;
      v54 = xmmword_19FFB36E0;
      v55 = xmmword_19FFB36F0;
      v56 = xmmword_19FFB3700;
      v57 = 0x3E8483EDBF7746EDLL;
      v58 = 0;
      v19.i32[1] = *(_DWORD *)((char *)&v48 + v15);
      v19.i64[1] = *(_QWORD *)((char *)&v48 + v15 + 4);
      *(float32x4_t *)((char *)v17 + 12) = vnegq_f32(v19);
      *((_DWORD *)v17 + 7) = v20;
      v15 += 12;
      v14 += 2;
      v16 += 2;
    }
    while (v15 != 156);
    v21 = 0;
    v22 = v5.f32[1];
    v23 = 3.4028e38;
    do
    {
      v24 = *(float *)&v45[v21];
      v25 = *((float *)&v45[v21] + 1);
      v26 = *((float *)&v45[v21] + 2);
      v27 = sqrtf((float)((float)(v24 * v24) + (float)(v25 * v25)) + (float)(v26 * v26));
      v28 = fabsf(fabsf(v26 / v27) + -1.0);
      v29 = (float)((float)((float)(*((float *)&v45[v21] + 3) + (float)(*(float *)result.f64 * v24))
                          + (float)(v5.f32[0] * v25))
                  + (float)(v5.f32[1] * v26))
          / v27;
      if (v28 >= 0.01 && v29 < v23)
      {
        v9 = *(float *)&v45[v21];
        v8 = *((float *)&v45[v21] + 1);
        v7 = *((float *)&v45[v21] + 2);
        v10 = *((float *)&v45[v21] + 3);
        v23 = v29;
      }
      ++v21;
    }
    while (v21 != 26);
    if (v23 != 3.4028e38)
    {
      v31 = 1.0 / sqrtf((float)(v9 * v9) + (float)(v8 * v8));
      v32 = v31 * v9;
      v33 = v31 * v8;
      v34 = (float)(v32 * v9) + (float)(v33 * v8);
      v35 = 0.0;
      if (fabsf(v34) <= 0.00000011921
        || (v35 = (float)-(float)((float)((float)(v10 + (float)(*(float *)result.f64 * v9)) + (float)(v5.f32[0] * v8))
                                + (float)(v5.f32[1] * v7))
                / v34,
            v35 <= 0.0))
      {
        v36 = -**(float **)(a1 + 8);
      }
      else
      {
        v36 = **(float **)(a1 + 8);
      }
      v37 = v36 + v35;
      v38 = *(float64x2_t **)(a1 + 16);
      v39 = **(float64x2_t ***)(a1 + 24);
      v40 = (float)(*(float *)result.f64 + (float)(v37 * v32));
      v41 = (float)(v5.f32[0] + (float)(v37 * v33));
      v42 = v22;
      v43 = 1.0 / (v39[26].f64[1] + v39[20].f64[1] * v40 + v39[22].f64[1] * v41 + v39[24].f64[1] * v42);
      v44 = v43 * (v39[26].f64[0] + v39[20].f64[0] * v40 + v39[22].f64[0] * v41 + v39[24].f64[0] * v42);
      result = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v39[25], v39[19], v40), v39[21], v41), v39[23], v42), v43);
      *v38 = result;
      v38[1].f64[0] = v44;
    }
  }
  return result;
}

void std::__function::__func<md::ARWorldIntersector::resolveWorldPoint(gm::Matrix<double,3,1> const&)::$_1,std::allocator<md::ARWorldIntersector::resolveWorldPoint(gm::Matrix<double,3,1> const&)::$_1>,BOOL ()(md::ARAssetOcclusionMeshData const*,std::vector<arComponents::LocalBounds> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARWorldIntersector::resolveWorldPoint(gm::Matrix<double,3,1> const&)::$_1,std::allocator<md::ARWorldIntersector::resolveWorldPoint(gm::Matrix<double,3,1> const&)::$_1>,BOOL ()(md::ARAssetOcclusionMeshData const*,std::vector<arComponents::LocalBounds> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D9050;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ARWorldIntersector::resolveWorldPoint(gm::Matrix<double,3,1> const&)::$_1,std::allocator<md::ARWorldIntersector::resolveWorldPoint(gm::Matrix<double,3,1> const&)::$_1>,BOOL ()(md::ARAssetOcclusionMeshData const*,std::vector<arComponents::LocalBounds> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42D9050;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::ARWorldIntersector::resolveWorldPoint(gm::Matrix<double,3,1> const&)::$_1,std::allocator<md::ARWorldIntersector::resolveWorldPoint(gm::Matrix<double,3,1> const&)::$_1>,BOOL ()(md::ARAssetOcclusionMeshData const*,std::vector<arComponents::LocalBounds> const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  v4 = a3[1];
  if (*a3 != v4)
  {
    do
    {
      md::ARWorldIntersector::resolveWorldPoint(gm::Matrix<double,3,1> const&)const::$_0::operator()(*(_QWORD *)(a1 + 8), v3);
      v3 += 168;
    }
    while (v3 != v4);
  }
  return 1;
}

void std::__function::__func<md::ARWorldIntersector::visitBuildingBoundingVolumes(std::function<BOOL ()(gm::Box<double,3> const&)>,std::function<void ()(gm::Matrix<double,4,4> const&,arComponents::LocalBounds const&)>)::$_0,std::allocator<md::ARWorldIntersector::visitBuildingBoundingVolumes(std::function<BOOL ()(gm::Box<double,3> const&)>,std::function<void ()(gm::Matrix<double,4,4> const&,arComponents::LocalBounds const&)>)::$_0>,BOOL ()(md::ARAssetOcclusionMeshData const*,std::vector<arComponents::LocalBounds> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<md::ARWorldIntersector::visitBuildingBoundingVolumes(std::function<BOOL ()(gm::Box<double,3> const&)>,std::function<void ()(gm::Matrix<double,4,4> const&,arComponents::LocalBounds const&)>)::$_0,std::allocator<md::ARWorldIntersector::visitBuildingBoundingVolumes(std::function<BOOL ()(gm::Box<double,3> const&)>,std::function<void ()(gm::Matrix<double,4,4> const&,arComponents::LocalBounds const&)>)::$_0>,BOOL ()(md::ARAssetOcclusionMeshData const*,std::vector<arComponents::LocalBounds> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E42D90E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ARWorldIntersector::visitBuildingBoundingVolumes(std::function<BOOL ()(gm::Box<double,3> const&)>,std::function<void ()(gm::Matrix<double,4,4> const&,arComponents::LocalBounds const&)>)::$_0,std::allocator<md::ARWorldIntersector::visitBuildingBoundingVolumes(std::function<BOOL ()(gm::Box<double,3> const&)>,std::function<void ()(gm::Matrix<double,4,4> const&,arComponents::LocalBounds const&)>)::$_0>,BOOL ()(md::ARAssetOcclusionMeshData const*,std::vector<arComponents::LocalBounds> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42D90E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<md::ARWorldIntersector::visitBuildingBoundingVolumes(std::function<BOOL ()(gm::Box<double,3> const&)>,std::function<void ()(gm::Matrix<double,4,4> const&,arComponents::LocalBounds const&)>)::$_0,std::allocator<md::ARWorldIntersector::visitBuildingBoundingVolumes(std::function<BOOL ()(gm::Box<double,3> const&)>,std::function<void ()(gm::Matrix<double,4,4> const&,arComponents::LocalBounds const&)>)::$_0>,BOOL ()(md::ARAssetOcclusionMeshData const*,std::vector<arComponents::LocalBounds> const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  VKOverlay *v8;
  SEL v9;

  v3 = *a3;
  v4 = a3[1];
  if (*a3 == v4)
    return 1;
  while (1)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
    if (!v6)
      break;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 48))(v6, *(_QWORD *)(a1 + 16), v3);
    v3 += 168;
    if (v3 == v4)
      return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return (uint64_t)-[VKOverlay init](v8, v9);
}

void sub_19FEB8D88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FEB8DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VKOverlay;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19FEB8F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19FEB93B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  void *v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a17;
  if (a17 == v18)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_19FEB9484(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FEB94E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FEB952C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FEB9578(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FEB95D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FEB963C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FEB96B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FEB9718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FEB9780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FEB97E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FEB9858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FEB98E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FEB9990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19FEB9AB4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FEB9BE0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FEB9D18(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FEBA040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, id a11, char a12, uint64_t a13, char a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_19FEBA284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  os_unfair_lock_s *v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  os_unfair_lock_unlock(v9);
  _Unwind_Resume(a1);
}

void sub_19FEBA3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  os_unfair_lock_s *v9;

  os_unfair_lock_unlock(v9);

  _Unwind_Resume(a1);
}

void sub_19FEBA488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19FEBA5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  os_unfair_lock_s *v9;

  os_unfair_lock_unlock(v9);

  _Unwind_Resume(a1);
}

void sub_19FEBA684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19FEBA810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  os_unfair_lock_s *v9;

  os_unfair_lock_unlock(v9);

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::RasterTileOverlayStyle>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCB30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::RasterTileOverlayStyle>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCB30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void sub_19FEBAB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VKRasterTileOverlayProviderData;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19FEBABAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FEBAC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FEBACA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FEBAEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FEBAF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FEBAF80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FEBAFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void md::DaVinciMetaTileData::~DaVinciMetaTileData(md::DaVinciMetaTileData *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E4297008;
  *((_QWORD *)this + 79) = &unk_1E4297048;
  v2 = (void *)*((_QWORD *)this + 97);
  if (v2)
  {
    *((_QWORD *)this + 98) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 94);
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 91);
  if (v4)
    operator delete(v4);
  md::MapTileData::~MapTileData(this);
}

{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E4297008;
  *((_QWORD *)this + 79) = &unk_1E4297048;
  v2 = (void *)*((_QWORD *)this + 97);
  if (v2)
  {
    *((_QWORD *)this + 98) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 94);
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 91);
  if (v4)
    operator delete(v4);
  md::MapTileData::~MapTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

void std::vector<md::DaVinciMetaTileData::PackedElevationRange>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  unint64_t v22;
  __int128 v23;
  __int16 v24;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 1)
  {
    if (a2)
    {
      bzero(v5, 2 * a2);
      v6 = &v5[2 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 1;
    v10 = (v8 >> 1) + a2;
    if (v10 < 0)
      abort();
    v11 = v4 - (_QWORD)v7;
    if (v11 > v10)
      v10 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 < 0)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = operator new(2 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[2 * v9];
    v15 = 2 * a2;
    v16 = &v13[2 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 == v7)
    {
      v7 = v5;
    }
    else
    {
      v18 = v5 - v7 - 2;
      if (v18 < 0x1E)
        goto LABEL_31;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_31;
      v19 = (v18 >> 1) + 1;
      v6 = &v5[-2 * (v19 & 0xFFFFFFFFFFFFFFF0)];
      v20 = &v13[2 * v9 - 16];
      v21 = v5 - 16;
      v22 = v19 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 16;
      }
      while (v22);
      v14 -= 2 * (v19 & 0xFFFFFFFFFFFFFFF0);
      if (v19 != (v19 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_31:
        do
        {
          v24 = *((_WORD *)v6 - 1);
          v6 -= 2;
          *((_WORD *)v14 - 1) = v24;
          v14 -= 2;
        }
        while (v6 != v7);
        v7 = *(char **)a1;
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void md::PointLabelFeature::~PointLabelFeature(md::PointLabelFeature *this)
{
  md::PointLabelFeature::~PointLabelFeature(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  BOOL v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint8_t v19[16];

  *(_QWORD *)this = &off_1E4292C60;
  if (md::DebugStreamingPOIFeatureID)
    v2 = md::DebugStreamingPOIFeatureID == *((_QWORD *)this + 62);
  else
    v2 = 0;
  if (v2)
  {
    if (GEOGetVectorKitStreamingPOILog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitStreamingPOILog_onceToken, &__block_literal_global_46);
    v3 = (id)GEOGetVectorKitStreamingPOILog_log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_19F029000, v3, OS_LOG_TYPE_DEBUG, "PointLabelFeature::~PointLabelFeature", v19, 2u);
    }

  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 83);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (*((_BYTE *)this + 642))
    *((_BYTE *)this + 642) = 0;
  v7 = *((_QWORD *)this + 72);
  if (v7)
  {
    v8 = *((_QWORD *)this + 73);
    v9 = *((_QWORD *)this + 72);
    if (v8 != v7)
    {
      v10 = *((_QWORD *)this + 73);
      do
      {
        v12 = *(void **)(v10 - 32);
        v10 -= 32;
        v11 = v12;
        if (v12)
        {
          *(_QWORD *)(v8 - 24) = v11;
          operator delete(v11);
        }
        v8 = v10;
      }
      while (v10 != v7);
      v9 = *((_QWORD *)this + 72);
    }
    *((_QWORD *)this + 73) = v7;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 75) + 40))(*((_QWORD *)this + 75), v9, *((_QWORD *)this + 74) - v9);
  }
  v13 = *((_QWORD *)this + 68);
  if (v13)
  {
    v14 = *((_QWORD *)this + 69);
    v15 = *((_QWORD *)this + 68);
    if (v14 == v13)
    {
LABEL_36:
      *((_QWORD *)this + 69) = v13;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 71) + 40))(*((_QWORD *)this + 71), v15, *((_QWORD *)this + 70) - v15);
      goto LABEL_37;
    }
    while (1)
    {
      if (*(char *)(v14 - 9) < 0)
      {
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v14 - 8) + 40))(*(_QWORD *)(v14 - 8), *(_QWORD *)(v14 - 32), *(_QWORD *)(v14 - 16) & 0x7FFFFFFFFFFFFFFFLL);
        if (*(char *)(v14 - 41) < 0)
LABEL_34:
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v14 - 40) + 40))(*(_QWORD *)(v14 - 40), *(_QWORD *)(v14 - 64), *(_QWORD *)(v14 - 48) & 0x7FFFFFFFFFFFFFFFLL);
      }
      else if (*(char *)(v14 - 41) < 0)
      {
        goto LABEL_34;
      }
      v14 -= 64;
      if (v14 == v13)
      {
        v15 = *((_QWORD *)this + 68);
        goto LABEL_36;
      }
    }
  }
LABEL_37:
  *((_QWORD *)this + 65) = &off_1E42B5570;

  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 64);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  std::__tree<std::__value_type<md::LabelIdentifier,md::PointPosition>,std::__map_value_compare<md::LabelIdentifier,std::__value_type<md::LabelIdentifier,md::PointPosition>,std::less<md::LabelIdentifier>,true>,geo::StdAllocator<std::__value_type<md::LabelIdentifier,md::PointPosition>,mdm::Allocator>>::destroy((uint64_t)this + 456, *((_QWORD **)this + 58));
  if (*((_QWORD *)this + 40))
  {
    std::vector<md::PointLabelFeature::WorkUnit,geo::StdAllocator<md::PointLabelFeature::WorkUnit,mdm::Allocator>>::__clear[abi:nn180100]((uint64_t *)this + 40);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 43) + 40))(*((_QWORD *)this + 43), *((_QWORD *)this + 40), *((_QWORD *)this + 42) - *((_QWORD *)this + 40));
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 248));
  md::LabelFeature::~LabelFeature(this);
}

void md::PointLabelFeature::updateText(md::PointLabelFeature **this, const void *a2, char a3)
{
  md::PointLabelFeature *v5;
  md::PointLabelFeature *v6;
  md::PointLabelFeature *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  md::PointLabelFeature *v14;
  md::PointLabelFeature *v15;
  BOOL v16;

  md::PointLabelFeature::updatePositions((md::PointLabelFeature *)this);
  *((_BYTE *)this + 649) = a3;
  v5 = this[69];
  v6 = this[68];
  while (v5 != v6)
  {
    if (*((char *)v5 - 9) < 0)
    {
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)v5 - 1) + 40))(*((_QWORD *)v5 - 1), *((_QWORD *)v5 - 4), *((_QWORD *)v5 - 2) & 0x7FFFFFFFFFFFFFFFLL);
      if ((*((char *)v5 - 41) & 0x80000000) == 0)
        goto LABEL_2;
    }
    else if ((*((char *)v5 - 41) & 0x80000000) == 0)
    {
      goto LABEL_2;
    }
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)v5 - 5) + 40))(*((_QWORD *)v5 - 5), *((_QWORD *)v5 - 8), *((_QWORD *)v5 - 6) & 0x7FFFFFFFFFFFFFFFLL);
LABEL_2:
    v5 = (md::PointLabelFeature *)((char *)v5 - 64);
  }
  this[69] = v6;
  v7 = this[57];
  if (v7 != (md::PointLabelFeature *)(this + 58))
  {
    do
    {
      v8 = (uint64_t *)*((_QWORD *)v7 + 5);
      v9 = (uint64_t *)*((_QWORD *)v7 + 6);
      if (v8 != v9)
      {
        v10 = *((unsigned __int8 *)this + 649);
        do
        {
          v11 = *v8++;
          v12 = v11 + 8;
          if (v11)
            v13 = v12;
          else
            v13 = 0;
          md::PointLabelFeatureElement::updateText(v13, (const md::PointLabelFeature *)this, v10 != 0);
        }
        while (v8 != v9);
      }
      v14 = (md::PointLabelFeature *)*((_QWORD *)v7 + 1);
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = *(md::PointLabelFeature **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (md::PointLabelFeature *)*((_QWORD *)v7 + 2);
          v16 = *(_QWORD *)v15 == (_QWORD)v7;
          v7 = v15;
        }
        while (!v16);
      }
      v7 = v15;
    }
    while (v15 != (md::PointLabelFeature *)(this + 58));
  }
}

uint64_t md::PointLabelFeature::newPoint(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  int v10;
  int v11;
  int v12;

  v3 = *(_QWORD *)(a1 + 464);
  if (!v3)
    return 0;
  v4 = *a2;
  v5 = a1 + 464;
  do
  {
    v6 = *(_DWORD *)(v3 + 32);
    v7 = v6 >= v4;
    if (v6 >= v4)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 == a1 + 464 || v4 < *(_DWORD *)(v5 + 32))
    return 0;
  if (*(_BYTE *)(v5 + 122))
  {
    *(_QWORD *)(v5 + 72) = *(_QWORD *)a3;
    *(_QWORD *)(v5 + 80) = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(v5 + 88) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(v5 + 96) = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(v5 + 104) = *(_QWORD *)(a3 + 32);
    v10 = *(_DWORD *)(a3 + 40);
    *(_DWORD *)(v5 + 115) = *(_DWORD *)(a3 + 43);
    *(_DWORD *)(v5 + 112) = v10;
  }
  else
  {
    v11 = *(_DWORD *)(v5 + 112);
    *(_QWORD *)(v5 + 72) = *(_QWORD *)a3;
    *(_QWORD *)(v5 + 80) = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(v5 + 88) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(v5 + 96) = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(v5 + 104) = *(_QWORD *)(a3 + 32);
    v12 = *(_DWORD *)(a3 + 40);
    *(_DWORD *)(v5 + 115) = *(_DWORD *)(a3 + 43);
    *(_DWORD *)(v5 + 112) = v12;
    *(_DWORD *)(v5 + 112) = v11;
  }
  return 1;
}

__int128 *md::PointLabelFeature::labelPointWithElevationUpdate(uint64_t a1, unsigned int *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  unsigned __int8 v11;
  __int128 *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];

  v4 = *(_QWORD *)(a1 + 464);
  if (!v4)
    goto LABEL_12;
  v6 = *a2;
  v7 = a1 + 464;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 >= v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 != a1 + 464 && v6 >= *(_DWORD *)(v7 + 32))
  {
    if (a4)
    {
      if (!*(_BYTE *)(v7 + 122))
      {
        if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a4 + 64))(a4))
        {
          if (a4[169] > *(unsigned __int8 *)(v7 + 123))
          {
            v14 = *(_QWORD *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v7 + 72));
            v15 = *(_QWORD *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v7 + 72)) + 8);
            v17[0] = v14;
            v17[1] = v15;
            v17[2] = 0;
            v16 = (*(uint64_t (**)(_BYTE *, _QWORD *, uint64_t))(*(_QWORD *)a4 + 56))(a4, v17, 2);
            if ((v16 & 0xFF00000000) != 0)
            {
              *(_BYTE *)(v7 + 123) = a4[169];
              *(_DWORD *)(v7 + 112) = v16;
            }
          }
        }
      }
    }
    return (__int128 *)(v7 + 72);
  }
  else
  {
LABEL_12:
    if ((v11 & 1) != 0)
    {
      return &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
    }
    else
    {
      v12 = &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
      {
        qword_1ECE2FD68 = 0;
        md::LabelPoint::NullPoint(void)::kNullLabelPoint = 0u;
        *(_OWORD *)&qword_1ECE2FD58 = 0u;
        dword_1ECE2FD70 = 2139095039;
        word_1ECE2FD74 = 256;
        byte_1ECE2FD76 = 1;
      }
    }
  }
  return v12;
}

uint64_t md::PointLabelFeature::debugString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  void **v12;
  uint64_t v13;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned __int8 v35;
  _BYTE *v36;
  _BYTE *v37;
  char v38;
  char *v39;
  size_t v40;
  unint64_t v41;
  void **v42;
  uint64_t v43;
  unint64_t v44;
  void **v45;
  char *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  char v52;
  std::string *v53;
  size_t size;
  unint64_t v55;
  size_t v56;
  unint64_t v57;
  void **v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  void **v65;
  size_t v66;
  void **v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  BOOL v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL *v84;
  float v85;
  int v86;
  char v87;
  uint64_t v88;
  unint64_t v89;
  unsigned __int8 v90;
  unint64_t v91;
  _BYTE *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE *v106;
  _BYTE *v107;
  _BYTE *v108;
  char v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _OWORD *v114;
  __int128 *v115;
  unint64_t v116;
  __int128 v117;
  _BYTE *i;
  char *v119;
  uint64_t v120;
  int v121;
  int v122;
  const std::locale::facet *v123;
  char *v124;
  uint64_t v125;
  BOOL v126;
  uint64_t v127;
  size_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  void **v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  const char *v143;
  const char *v144;
  std::string::size_type v145;
  std::string *v146;
  __int128 v147;
  void **v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  const char *v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  int v159;
  int v160;
  __int16 v161;
  std::string::size_type v162;
  std::string *v163;
  __int128 v164;
  void **v165;
  uint64_t v166;
  float v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  const char *v193;
  const char *v194;
  std::string *v195;
  __int128 v196;
  void **v197;
  uint64_t v198;
  BOOL v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  int v204;
  uint64_t v205;
  int v206;
  __int16 v207;
  uint64_t v208;
  size_t v209;
  void *v210;
  unint64_t v211;
  const void **v212;
  const void *v213;
  uint64_t v214;
  uint64_t v215;
  const void *v216;
  void *v217;
  uint64_t result;
  uint64_t v219;
  uint64_t v221;
  char *v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v226;
  unint64_t v227;
  int v229;
  uint64_t v230;
  BOOL v231;
  uint64_t v232;
  int v233;
  unint64_t v234;
  void *__p[3];
  uint64_t v236;
  std::string v237;
  uint64_t v238;
  _QWORD v239[2];
  _QWORD v240[3];
  uint64_t v241;
  unint64_t v242;
  __int128 v243;
  __int128 v244;
  int v245;
  uint64_t v246[21];

  v7 = MEMORY[0x1E0DE4FE0];
  v8 = MEMORY[0x1E0DE4FE0] + 64;
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v246[0] = MEMORY[0x1E0DE4FE0] + 64;
  v238 = v9;
  *(_QWORD *)((char *)&v239[-1] + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v239[-1] + *(_QWORD *)(v238 - 24));
  std::ios_base::init(v11, v239);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v238 = v7 + 24;
  v246[0] = v8;
  std::streambuf::basic_streambuf();
  v239[0] = MEMORY[0x1E0DE4FB8] + 16;
  v243 = 0u;
  v244 = 0u;
  v245 = 16;
  LODWORD(v237.__r_.__value_.__l.__data_) = *a3;
  HIDWORD(v237.__r_.__value_.__r.__words[1]) = -1;
  *(std::string::size_type *)((char *)v237.__r_.__value_.__r.__words + 4) = -1;
  v237.__r_.__value_.__r.__words[2] = 0;
  md::LabelFeature::debugString((_BYTE *)a1, a2, (unsigned int *)&v237, a4, __p);
  if (SHIBYTE(__p[2]) >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if (SHIBYTE(__p[2]) >= 0)
    v13 = HIBYTE(__p[2]);
  else
    v13 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)v12, v13);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)" Point:\n", 8);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)"  layoutZ:", 10);
  std::ostream::operator<<();
  if (*(unsigned __int8 *)(a1 + 244) != 255)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)" flexZone=", 10);
    std::ostream::operator<<();
  }
  if (atomic_load((unsigned __int8 *)(a1 + 653)))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)" MZR Default=", 13);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)" Active(", 8);
    atomic_load((unsigned __int8 *)(a1 + 653));
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)")=", 2);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
    std::ostream::operator<<();
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)"\n", 1);
  if (*(_BYTE *)(a1 + 648))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)"  venueID=", 10);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)" bldg=", 6);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)" level=", 7);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)" floor=", 7);
    v19 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)" positions=", 11);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)" Versions update=", 17);
  v20 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)" remove=", 8);
  v21 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)" [text]\n", 8);
  v22 = *(_QWORD *)(a1 + 544);
  v23 = *(_QWORD *)(a1 + 552);
  if (v22 != v23)
  {
    v24 = 0;
    v25 = v22 + 32;
    do
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)"   ", 3);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)": ", 2);
      v26 = *(char *)(v25 - 9);
      if (v26 >= 0)
        v27 = v25 - 32;
      else
        v27 = *(_QWORD *)(v25 - 32);
      if (v26 >= 0)
        v28 = *(unsigned __int8 *)(v25 - 9);
      else
        v28 = *(_QWORD *)(v25 - 24);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, v27, v28);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)"(", 1);
      v29 = *(char *)(v25 + 23);
      if (v29 >= 0)
        v30 = v25;
      else
        v30 = *(_QWORD *)v25;
      if (v29 >= 0)
        v31 = *(unsigned __int8 *)(v25 + 23);
      else
        v31 = *(_QWORD *)(v25 + 8);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, v30, v31);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)")\n", 2);
      ++v24;
      v32 = v25 + 32;
      v25 += 64;
    }
    while (v32 != v23);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)" [placement]\n", 13);
  v33 = *(_QWORD *)(a1 + 576);
  v230 = *(_QWORD *)(a1 + 584);
  if (v33 != v230)
  {
    v34 = 0;
    do
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)"   ", 3);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)": ", 2);
      if (*(_QWORD *)v33 == *(_QWORD *)(v33 + 8))
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)"<none>", 6);
      }
      else
      {
        LODWORD(v234) = v34;
        memset(__p, 0, sizeof(__p));
        {
          v69 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v69, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v236 = mdm::Allocator::instance(void)::alloc;
        v36 = *(_BYTE **)v33;
        v37 = *(_BYTE **)(v33 + 8);
        v232 = v33;
        if (*(_BYTE **)v33 != v37)
        {
          v38 = 1;
          while (2)
          {
            if ((v38 & 1) != 0)
              goto LABEL_70;
            v39 = (char *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) >= 0)
              v40 = 22;
            else
              v40 = ((unint64_t)__p[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
            if (SHIBYTE(__p[2]) < 0)
              v39 = (char *)__p[1];
            if ((char *)v40 == v39)
            {
              if (v40 == 0x7FFFFFFFFFFFFFF6)
                abort();
              v41 = v40 + 1;
              if (SHIBYTE(__p[2]) >= 0)
                v42 = __p;
              else
                v42 = (void **)__p[0];
              v43 = 0x7FFFFFFFFFFFFFF7;
              if (v40 < 0x3FFFFFFFFFFFFFF3)
              {
                v44 = 2 * v40;
                if (v41 > 2 * v40)
                  v44 = v40 + 1;
                if (v44 >= 0x17)
                {
                  v48 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
                  v49 = v44 | 7;
                  if (v49 == 23)
                    v49 = v48;
                  v43 = v49 + 1;
                }
                else
                {
                  v43 = 23;
                }
              }
              v50 = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v236 + 16))(v236, v43, 1);
              v51 = v50;
              if (v40)
              {
                memmove(v50, v42, v40);
                v51[v40] = 32;
                if (v40 == 22)
                {
LABEL_68:
                  __p[1] = (void *)(v40 + 1);
                  __p[2] = (void *)(v43 | 0x8000000000000000);
                  __p[0] = v51;
                  v47 = &v51[v41];
                  goto LABEL_69;
                }
              }
              else
              {
                *v50 = 32;
              }
              (*(void (**)(uint64_t, void **, size_t))(*(_QWORD *)v236 + 40))(v236, v42, v40 + 1);
              goto LABEL_68;
            }
            if (SHIBYTE(__p[2]) >= 0)
              v45 = __p;
            else
              v45 = (void **)__p[0];
            v39[(_QWORD)v45] = 32;
            v46 = v39 + 1;
            if (SHIBYTE(__p[2]) < 0)
              __p[1] = v46;
            else
              HIBYTE(__p[2]) = v46 & 0x7F;
            v47 = &v46[(_QWORD)v45];
LABEL_69:
            *v47 = 0;
LABEL_70:
            LabelPlacementToShortString(&v237, v36);
            v52 = HIBYTE(v237.__r_.__value_.__r.__words[2]);
            if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v53 = &v237;
            else
              v53 = (std::string *)v237.__r_.__value_.__r.__words[0];
            if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v237.__r_.__value_.__r.__words[2]);
            else
              size = v237.__r_.__value_.__l.__size_;
            if (SHIBYTE(__p[2]) >= 0)
              v55 = 22;
            else
              v55 = ((unint64_t)__p[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
            if (SHIBYTE(__p[2]) >= 0)
              v56 = HIBYTE(__p[2]);
            else
              v56 = (size_t)__p[1];
            if (v55 - v56 < size)
            {
              v57 = v56 + size;
              if (0x7FFFFFFFFFFFFFF6 - v55 < v56 + size - v55)
                abort();
              if (SHIBYTE(__p[2]) >= 0)
                v58 = __p;
              else
                v58 = (void **)__p[0];
              v59 = 0x7FFFFFFFFFFFFFF7;
              if (v55 < 0x3FFFFFFFFFFFFFF3)
              {
                v60 = 2 * v55;
                if (v57 > 2 * v55)
                  v60 = v56 + size;
                v61 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v60 | 7) != 0x17)
                  v61 = v60 | 7;
                if (v60 >= 0x17)
                  v59 = v61 + 1;
                else
                  v59 = 23;
              }
              v62 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v236 + 16))(v236, v59, 1);
              v63 = v62;
              if (v56)
                memmove(v62, v58, v56);
              memmove(&v63[v56], v53, size);
              if (v55 != 22)
                (*(void (**)(uint64_t, void **))(*(_QWORD *)v236 + 40))(v236, v58);
              __p[1] = (void *)(v56 + size);
              __p[2] = (void *)(v59 | 0x8000000000000000);
              __p[0] = v63;
              v64 = &v63[v57];
              goto LABEL_108;
            }
            if (size)
            {
              if (SHIBYTE(__p[2]) >= 0)
                v65 = __p;
              else
                v65 = (void **)__p[0];
              memmove((char *)v65 + v56, v53, size);
              v66 = v56 + size;
              if (SHIBYTE(__p[2]) < 0)
                __p[1] = (void *)(v56 + size);
              else
                HIBYTE(__p[2]) = v66 & 0x7F;
              v64 = (char *)v65 + v66;
LABEL_108:
              *v64 = 0;
              v52 = HIBYTE(v237.__r_.__value_.__r.__words[2]);
            }
            if (v52 < 0)
              operator delete(v237.__r_.__value_.__l.__data_);
            v38 = 0;
            v36 += 5;
            if (v36 == v37)
              break;
            continue;
          }
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)"<", 1);
        v34 = v234;
        if (SHIBYTE(__p[2]) >= 0)
          v67 = __p;
        else
          v67 = (void **)__p[0];
        if (SHIBYTE(__p[2]) >= 0)
          v68 = HIBYTE(__p[2]);
        else
          v68 = (uint64_t)__p[1];
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)v67, v68);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)">", 1);
        v33 = v232;
        if (SHIBYTE(__p[2]) < 0)
          (*(void (**)(uint64_t, void *, unint64_t))(*(_QWORD *)v236 + 40))(v236, __p[0], (unint64_t)__p[2] & 0x7FFFFFFFFFFFFFFFLL);
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)" clientAlternates:", 18);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)"\n", 1);
      ++v34;
      v33 += 32;
    }
    while (v33 != v230);
  }
  v70 = *(_QWORD *)(a1 + 464);
  if (!v70)
    goto LABEL_245;
  v71 = *a3;
  v72 = a1 + 464;
  do
  {
    v73 = *(_DWORD *)(v70 + 32);
    v74 = v73 >= v71;
    if (v73 >= v71)
      v75 = (uint64_t *)v70;
    else
      v75 = (uint64_t *)(v70 + 8);
    if (v74)
      v72 = v70;
    v70 = *v75;
  }
  while (*v75);
  if (v72 == a1 + 464 || v71 < *(_DWORD *)(v72 + 32))
    goto LABEL_245;
  v77 = *(_QWORD *)(v72 + 40);
  v76 = *(_QWORD *)(v72 + 48);
  v78 = v238;
  *(_DWORD *)((char *)v239 + *(_QWORD *)(v238 - 24)) = *(_DWORD *)((_BYTE *)v239 + *(_QWORD *)(v238 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v239[1] + *(_QWORD *)(v78 - 24)) = 2;
  if (!*(_BYTE *)(v72 + 122))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)" demElevation(", 14);
    v79 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v79, (uint64_t)")=", 2);
    std::ostream::operator<<();
  }
  v80 = *(_QWORD *)(v72 + 48);
  if (*(_QWORD *)(v72 + 40) == v80
    || ((v81 = *(_QWORD *)(v80 - 8)) != 0 ? (v82 = v81 + 8) : (v82 = 0),
        *(float *)(v82 + 64) == 3.4028e38
     && !*(_BYTE *)(v82 + 100)
     && !*(_BYTE *)(v82 + 108)
     && *(float *)(v82 + 112) == 0.0))
  {
    v219 = 0;
    goto LABEL_159;
  }
  v83 = operator new();
  *(_OWORD *)(v83 + 4) = 0u;
  v84 = (BOOL *)(v83 + 4);
  *(_OWORD *)(v83 + 20) = 0u;
  v85 = *(float *)(v82 + 64);
  v86 = 0;
  if (v85 != 3.4028e38)
    v86 = *(_DWORD *)(v82 + 64);
  *(_DWORD *)v83 = v86;
  *v84 = v85 != 3.4028e38;
  v87 = *(_BYTE *)(v82 + 100);
  *(_DWORD *)(v83 + 8) = *(_DWORD *)(v82 + 96);
  *(_BYTE *)(v83 + 12) = v87;
  *(_DWORD *)(v83 + 36) = *(_DWORD *)(v82 + 112);
  if (*(_BYTE *)(v82 + 108))
  {
    *(_DWORD *)(v83 + 32) = *(_DWORD *)(v82 + 104);
    v88 = *(_QWORD *)(v82 + 116);
    *(_DWORD *)(v83 + 24) = *(_DWORD *)(v82 + 124);
    *(_QWORD *)(v83 + 16) = v88;
    *(_BYTE *)(v83 + 28) = 1;
  }
  v219 = v83;
  if (v85 != 3.4028e38)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)" elevation=", 11);
    if (!*v84)
      goto LABEL_437;
    std::ostream::operator<<();
  }
  if (*(_BYTE *)(v219 + 12))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)" buildingHeight=", 16);
    if (*(_BYTE *)(v219 + 12))
    {
      std::ostream::operator<<();
      goto LABEL_154;
    }
LABEL_437:
    result = std::__throw_bad_optional_access[abi:nn180100]();
    __break(1u);
    return result;
  }
LABEL_154:
  if (*(_BYTE *)(v219 + 28))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)" normalAzimuth:", 15);
    std::ostream::operator<<();
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)"\n", 1);
LABEL_159:
  v89 = 0;
  v226 = v72;
  v227 = (v76 - v77) >> 3;
  do
  {
    if ((v90 & 1) == 0)
    {
      v136 = v89;
      v89 = v136;
      if (v137)
      {
        v138 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v138, "VectorKitLabels", 0x5ED09DD50000000FLL);
        v89 = v136;
      }
    }
    if (v89 >= v227)
      break;
    v91 = 0;
    v92 = 0;
    v93 = 0;
    v224 = mdm::Allocator::instance(void)::alloc;
    v94 = *(_QWORD *)(v72 + 40);
    v234 = v89;
    v95 = *(_QWORD *)(v94 + 8 * v89);
    v96 = v95 + 8;
    if (v95)
      v97 = v95 + 8;
    else
      v97 = 0;
    v233 = *(unsigned __int8 *)(v97 + 130);
    v229 = *(unsigned __int8 *)(v97 + 131);
    v98 = *(_QWORD *)(v97 + 72);
    v221 = *(_QWORD *)(a1 + 432);
    v231 = 1;
    while (*(unsigned __int8 *)(v96 + 130) == v233 && *(_QWORD *)(v96 + 72) == v98)
    {
      v99 = *(_BYTE *)(v96 + 129);
      if ((unint64_t)v92 < v93)
      {
        v100 = v234;
        if (v92)
          *v92 = v99;
        goto LABEL_189;
      }
      v101 = (unint64_t)&v92[-v91];
      v102 = (uint64_t)&v92[-v91 + 1];
      if (v102 < 0)
        abort();
      v103 = v93 - v91;
      if (2 * (v93 - v91) > v102)
        v102 = 2 * (v93 - v91);
      if (v103 >= 0x3FFFFFFFFFFFFFFFLL)
        v104 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v104 = v102;
      if (v104)
      {
        v105 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v224 + 16))(v224, v104, 1);
        v106 = (_BYTE *)(v105 + v101);
        v93 = v105 + v104;
        if (v105)
          *v106 = v99;
      }
      else
      {
        v93 = 0;
        v106 = &v92[-v91];
      }
      v107 = v106;
      if (v92 != (_BYTE *)v91)
      {
        if (v101 < 0x30
          || &v106[v91 - (_QWORD)v92] > v106 - 1
          || v91 > (unint64_t)(v92 - 1)
          || (unint64_t)(v92 - v106) < 0x20)
        {
          v108 = v92;
          v107 = v106;
        }
        else
        {
          v108 = &v92[-(v101 & 0xFFFFFFFFFFFFFFE0)];
          v114 = v106 - 16;
          v115 = (__int128 *)(v92 - 16);
          v116 = v101 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v117 = *v115;
            *(v114 - 1) = *(v115 - 1);
            *v114 = v117;
            v114 -= 2;
            v115 -= 2;
            v116 -= 32;
          }
          while (v116);
          v107 = &v106[-(v101 & 0xFFFFFFFFFFFFFFE0)];
          if (v101 == (v101 & 0xFFFFFFFFFFFFFFE0))
            goto LABEL_186;
        }
        do
        {
          v109 = *--v108;
          *--v107 = v109;
        }
        while (v108 != (_BYTE *)v91);
      }
LABEL_186:
      if (v91)
        (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v224 + 40))(v224, v91, v103);
      v91 = (unint64_t)v107;
      v92 = v106;
      v100 = v234;
LABEL_189:
      ++v92;
      v110 = v100 + 1;
      v231 = v110 < v227;
      if (v110 == v227)
      {
        v234 = v227;
        break;
      }
      v111 = *(_QWORD *)(v72 + 40);
      v234 = v110;
      v112 = *(_QWORD *)(v111 + 8 * v110);
      v96 = v112 + 8;
      if (v112)
        v113 = v112 + 8;
      else
        v113 = 0;
      if (v229 != *(unsigned __int8 *)(v113 + 131))
        break;
    }
    if ((_BYTE *)v91 != v92)
    {
      v223 = v93;
      if (v98 != v221)
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)" [expired] vers=", 16);
        std::ostream::operator<<();
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)" [element] Z:", 13);
      std::ostream::operator<<();
      for (i = (_BYTE *)(v91 + 1); i != v92; ++i)
      {
        MEMORY[0x1A1AF49E0](&v237, &v238);
        if (v237.__r_.__value_.__s.__data_[0])
        {
          v119 = (char *)&v239[-1] + *(_QWORD *)(v238 - 24);
          v120 = *((_QWORD *)v119 + 5);
          v121 = *((_DWORD *)v119 + 2);
          v122 = *((_DWORD *)v119 + 36);
          if (v122 == -1)
          {
            std::ios_base::getloc((const std::ios_base *)((char *)&v239[-1] + *(_QWORD *)(v238 - 24)));
            v123 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
            v122 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v123->__vftable[2].~facet_0)(v123, 32);
            std::locale::~locale((std::locale *)__p);
            *((_DWORD *)v119 + 36) = v122;
          }
          if ((v121 & 0xB0) == 0x20)
            v124 = "";
          else
            v124 = ",";
          if (!v120)
            goto LABEL_236;
          v125 = *((_QWORD *)v119 + 3);
          v126 = v125 <= 1;
          v127 = v125 - 1;
          v128 = v126 ? 0 : v127;
          if (v124 - "," >= 1
            && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(_QWORD *)v120 + 96))(v120, ",", v124 - ",") != v124 - ",")
          {
            goto LABEL_236;
          }
          if ((uint64_t)v128 >= 1)
          {
            if (v128 > 0x7FFFFFFFFFFFFFF7)
              abort();
            v222 = v124;
            if (v128 >= 0x17)
            {
              v130 = (v128 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v128 | 7) != 0x17)
                v130 = v128 | 7;
              v131 = v130 + 1;
              v129 = operator new(v130 + 1);
              __p[1] = (void *)v128;
              __p[2] = (void *)(v131 | 0x8000000000000000);
              __p[0] = v129;
            }
            else
            {
              HIBYTE(__p[2]) = v128;
              v129 = __p;
            }
            memset(v129, v122, v128);
            *((_BYTE *)v129 + v128) = 0;
            if (SHIBYTE(__p[2]) >= 0)
              v132 = __p;
            else
              v132 = (void **)__p[0];
            v133 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v120 + 96))(v120, v132, v128);
            v134 = v133;
            v124 = v222;
            if (SHIBYTE(__p[2]) < 0)
            {
              operator delete(__p[0]);
              if (v134 != v128)
                goto LABEL_236;
            }
            else if (v133 != v128)
            {
              goto LABEL_236;
            }
          }
          v135 = "," - v124 + 1;
          if (v135 >= 1
            && (*(uint64_t (**)(uint64_t, char *, int64_t))(*(_QWORD *)v120 + 96))(v120, v124, "," - v124 + 1) != v135)
          {
LABEL_236:
            std::ios_base::clear((std::ios_base *)((char *)&v239[-1] + *(_QWORD *)(v238 - 24)), *(_DWORD *)((char *)&v240[1] + *(_QWORD *)(v238 - 24)) | 5);
            v72 = v226;
            goto LABEL_237;
          }
          *((_QWORD *)v119 + 3) = 0;
          v72 = v226;
        }
LABEL_237:
        MEMORY[0x1A1AF49EC](&v237);
        std::ostream::operator<<();
      }
      v93 = v223;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)" text:", 6);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)" placement:", 11);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)"\n", 1);
    }
    if (v91)
      (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v224 + 40))(v224, v91, v93 - v91);
    v89 = v234;
  }
  while (v231);
  if (v219)
    MEMORY[0x1A1AF4E00](v219, 0x1000C40383AD44DLL);
LABEL_245:
  v139 = *(_QWORD *)(a1 + 80);
  if (!v139 || !*(_BYTE *)(v139 + 125) || *(unsigned __int8 *)(v139 + 136) == 255)
    goto LABEL_414;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)" [style]", 8);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)" <icon>", 7);
  v140 = *(_QWORD *)(a1 + 80);
  v141 = *(_QWORD *)(v140 + 296);
  if (!v141)
  {
    v142 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*(_QWORD *)(a1 + 80), 0);
    v141 = *v142;
    *(_QWORD *)(v140 + 296) = *v142;
  }
  switch(*(_BYTE *)(v141 + 88))
  {
    case 0:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v237, "Basic");
      break;
    case 1:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 9;
      LOWORD(v237.__r_.__value_.__r.__words[1]) = 101;
      v143 = "POICircle";
      goto LABEL_260;
    case 2:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 8;
      v145 = 0x6B72616D646E614CLL;
      goto LABEL_258;
    case 3:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 19;
      strcpy((char *)&v237, "POISmall_DEPRECATED");
      break;
    case 4:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 9;
      LOWORD(v237.__r_.__value_.__r.__words[1]) = 101;
      v143 = "POISquare";
LABEL_260:
      v237.__r_.__value_.__r.__words[0] = *(_QWORD *)v143;
      break;
    case 5:
      v237.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
      *(_OWORD *)&v237.__r_.__value_.__r.__words[1] = xmmword_19FFB3490;
      strcpy(v237.__r_.__value_.__l.__data_, "POIRectangle_DEPRECATED");
      break;
    case 6:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 11;
      *(_DWORD *)((char *)v237.__r_.__value_.__r.__words + 7) = 1819044176;
      v144 = "TransitPill";
      goto LABEL_263;
    case 7:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 8;
      v145 = 0x494F5069746C754DLL;
LABEL_258:
      v237.__r_.__value_.__r.__words[0] = v145;
      v237.__r_.__value_.__s.__data_[8] = 0;
      break;
    case 8:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 10;
      strcpy((char *)&v237, "POIBalloon");
      break;
    case 9:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 11;
      *(_DWORD *)((char *)v237.__r_.__value_.__r.__words + 7) = 1852798068;
      v144 = "VenueButton";
LABEL_263:
      v237.__r_.__value_.__r.__words[0] = *(_QWORD *)v144;
      v237.__r_.__value_.__s.__data_[11] = 0;
      break;
    case 0xA:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 16;
      strcpy((char *)&v237, "SelectionBalloon");
      break;
    case 0xB:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&v237, "Ring");
      break;
    default:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 0;
      v237.__r_.__value_.__s.__data_[0] = 0;
      break;
  }
  v146 = std::string::insert(&v237, 0, " style:", 7uLL);
  v147 = *(_OWORD *)&v146->__r_.__value_.__l.__data_;
  __p[2] = (void *)v146->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v147;
  v146->__r_.__value_.__l.__size_ = 0;
  v146->__r_.__value_.__r.__words[2] = 0;
  v146->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p[2]) >= 0)
    v148 = __p;
  else
    v148 = (void **)__p[0];
  if (SHIBYTE(__p[2]) >= 0)
    v149 = HIBYTE(__p[2]);
  else
    v149 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)v148, v149);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v237.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_275;
  }
  else if ((SHIBYTE(v237.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_275;
  }
  operator delete(v237.__r_.__value_.__l.__data_);
LABEL_275:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)" textSource:", 12);
  v150 = *(_QWORD *)(a1 + 80);
  v151 = *(_QWORD *)(v150 + 296);
  if (!v151)
  {
    v152 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*(_QWORD *)(a1 + 80), 0);
    v151 = *v152;
    *(_QWORD *)(v150 + 296) = *v152;
  }
  switch(*(_BYTE *)(v151 + 90))
  {
    case 0:
      v153 = 7;
      HIBYTE(__p[2]) = 7;
      strcpy((char *)__p, "Default");
      break;
    case 1:
      v153 = 4;
      HIBYTE(__p[2]) = 4;
      strcpy((char *)__p, "None");
      break;
    case 2:
      v153 = 8;
      HIBYTE(__p[2]) = 8;
      strcpy((char *)__p, "TypeMain");
      break;
    case 3:
      v153 = 11;
      HIBYTE(__p[2]) = 11;
      *(_DWORD *)((char *)__p + 7) = 1701734732;
      v155 = "TransitLine";
      goto LABEL_293;
    case 4:
      v153 = 13;
      HIBYTE(__p[2]) = 13;
      strcpy((char *)__p, "TransitSystem");
      break;
    case 5:
      v153 = 14;
      HIBYTE(__p[2]) = 14;
      strcpy((char *)__p, "TextAnnotation");
      break;
    case 6:
      v153 = 17;
      HIBYTE(__p[2]) = 17;
      strcpy((char *)__p, "GraphicAnnotation");
      break;
    case 7:
      v153 = 9;
      HIBYTE(__p[2]) = 9;
      strcpy((char *)__p, "ImageText");
      break;
    case 8:
      v153 = 11;
      HIBYTE(__p[2]) = 11;
      *(_DWORD *)((char *)__p + 7) = 1852798068;
      v155 = "VenueButton";
LABEL_293:
      __p[0] = *(void **)v155;
      BYTE3(__p[1]) = 0;
      break;
    case 9:
      v153 = 12;
      HIBYTE(__p[2]) = 12;
      strcpy((char *)__p, "PrimaryChild");
      break;
    case 0xA:
      v153 = 18;
      HIBYTE(__p[2]) = 18;
      LOWORD(__p[2]) = 12654;
      v154 = "FeatureAnnotation1";
      goto LABEL_291;
    case 0xB:
      v153 = 18;
      HIBYTE(__p[2]) = 18;
      LOWORD(__p[2]) = 12910;
      v154 = "FeatureAnnotation2";
LABEL_291:
      *(_OWORD *)__p = *(_OWORD *)v154;
      BYTE2(__p[2]) = 0;
      break;
    default:
      v153 = 0;
      HIBYTE(__p[2]) = 0;
      LOBYTE(__p[0]) = 0;
      break;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)__p, v153);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v156 = *(_QWORD *)(a1 + 80);
  v157 = *(_QWORD *)(v156 + 296);
  if (!v157)
  {
    v158 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*(_QWORD *)(a1 + 80), 0);
    v157 = *v158;
    *(_QWORD *)(v156 + 296) = *v158;
  }
  v159 = *(unsigned __int8 *)(v157 + 92);
  switch(v159)
  {
    case 0:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 7;
      LODWORD(v237.__r_.__value_.__l.__data_) = 1634100548;
      v160 = 1953264993;
      goto LABEL_312;
    case 1:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v237, "Small");
      break;
    case 2:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v237, "Large");
      break;
    case 3:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 6;
      LODWORD(v237.__r_.__value_.__l.__data_) = 1634554712;
      v161 = 27756;
      goto LABEL_314;
    case 4:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 6;
      LODWORD(v237.__r_.__value_.__l.__data_) = 1918979160;
      v161 = 25959;
      goto LABEL_314;
    case 5:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 7;
      LODWORD(v237.__r_.__value_.__l.__data_) = 1834178648;
      v160 = 1819042157;
      goto LABEL_312;
    case 6:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 7;
      LODWORD(v237.__r_.__value_.__l.__data_) = 1632393304;
      v160 = 1701278305;
LABEL_312:
      *(_DWORD *)((char *)v237.__r_.__value_.__r.__words + 3) = v160;
      v237.__r_.__value_.__s.__data_[7] = 0;
      break;
    case 7:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 8;
      v162 = 0x656772614C585858;
      goto LABEL_308;
    case 8:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 6;
      LODWORD(v237.__r_.__value_.__l.__data_) = 1768187213;
      v161 = 28021;
LABEL_314:
      WORD2(v237.__r_.__value_.__r.__words[0]) = v161;
      v237.__r_.__value_.__s.__data_[6] = 0;
      break;
    case 9:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 8;
      v162 = 0x6C6C616D53585858;
LABEL_308:
      v237.__r_.__value_.__r.__words[0] = v162;
      v237.__r_.__value_.__s.__data_[8] = 0;
      break;
    default:
      if (v159 == 255)
      {
        *((_BYTE *)&v237.__r_.__value_.__s + 23) = 4;
        strcpy((char *)&v237, "None");
      }
      else
      {
        *((_BYTE *)&v237.__r_.__value_.__s + 23) = 0;
        v237.__r_.__value_.__s.__data_[0] = 0;
      }
      break;
  }
  v163 = std::string::insert(&v237, 0, " size:", 6uLL);
  v164 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
  __p[2] = (void *)v163->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v164;
  v163->__r_.__value_.__l.__size_ = 0;
  v163->__r_.__value_.__r.__words[2] = 0;
  v163->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p[2]) >= 0)
    v165 = __p;
  else
    v165 = (void **)__p[0];
  if (SHIBYTE(__p[2]) >= 0)
    v166 = HIBYTE(__p[2]);
  else
    v166 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)v165, v166);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v237.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_324;
  }
  else if ((SHIBYTE(v237.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_324;
  }
  operator delete(v237.__r_.__value_.__l.__data_);
LABEL_324:
  v167 = md::LabelStyle::iconContentScale(*(md::LabelStyle **)(a1 + 80));
  v168 = *(_QWORD *)(a1 + 80);
  if (v167 != *(float *)(v168 + 88))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)" scale:", 7);
    v169 = v238;
    *(_DWORD *)((char *)v239 + *(_QWORD *)(v238 - 24)) = *(_DWORD *)((_BYTE *)v239 + *(_QWORD *)(v238 - 24)) & 0xFFFFFEFB | 4;
    *(_QWORD *)((char *)&v239[1] + *(_QWORD *)(v169 - 24)) = 1;
    md::LabelStyle::iconContentScale(*(md::LabelStyle **)(a1 + 80));
    std::ostream::operator<<();
    v168 = *(_QWORD *)(a1 + 80);
  }
  v170 = *(_QWORD *)(v168 + 296);
  if (v170)
  {
    if (!*(_DWORD *)(v170 + 68))
      goto LABEL_335;
  }
  else
  {
    v171 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v168, 0);
    v172 = *v171;
    *(_QWORD *)(v168 + 296) = *v171;
    if (!*(_DWORD *)(v172 + 68))
      goto LABEL_335;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)" MSrcKey:", 9);
  v173 = *(_QWORD *)(a1 + 80);
  if (!*(_QWORD *)(v173 + 296))
    *(_QWORD *)(v173 + 296) = *(_QWORD *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*(_QWORD *)(a1 + 80), 0);
  std::ostream::operator<<();
LABEL_335:
  v174 = *(_QWORD *)(a1 + 80);
  v175 = *(_QWORD *)(v174 + 296);
  if (v175)
  {
    if (!*(_DWORD *)(v175 + 64))
      goto LABEL_342;
  }
  else
  {
    v176 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*(_QWORD *)(a1 + 80), 0);
    v177 = *v176;
    *(_QWORD *)(v174 + 296) = *v176;
    if (!*(_DWORD *)(v177 + 64))
      goto LABEL_342;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)" srcKey:", 8);
  v178 = *(_QWORD *)(a1 + 80);
  if (!*(_QWORD *)(v178 + 296))
    *(_QWORD *)(v178 + 296) = *(_QWORD *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*(_QWORD *)(a1 + 80), 0);
  std::ostream::operator<<();
LABEL_342:
  v179 = *(_QWORD *)(a1 + 80);
  v180 = *(_QWORD *)(v179 + 272);
  if (v180)
  {
    v181 = *(char *)(v180 + 103);
    if ((v181 & 0x80000000) == 0)
      goto LABEL_344;
  }
  else
  {
    v182 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*(_QWORD *)(a1 + 80));
    v180 = *v182;
    *(_QWORD *)(v179 + 272) = *v182;
    v181 = *(char *)(v180 + 103);
    if ((v181 & 0x80000000) == 0)
    {
LABEL_344:
      if (!(_BYTE)v181)
        goto LABEL_357;
      goto LABEL_348;
    }
  }
  if (!*(_QWORD *)(v180 + 88))
    goto LABEL_357;
LABEL_348:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)" name:", 6);
  v183 = *(_QWORD *)(a1 + 80);
  v184 = *(_QWORD *)(v183 + 272);
  if (!v184)
  {
    v185 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*(_QWORD *)(a1 + 80));
    v184 = *v185;
    *(_QWORD *)(v183 + 272) = *v185;
  }
  v188 = *(_QWORD *)(v184 + 80);
  v186 = v184 + 80;
  v187 = v188;
  v189 = *(char *)(v186 + 23);
  if (v189 >= 0)
    v190 = v186;
  else
    v190 = v187;
  if (v189 >= 0)
    v191 = *(unsigned __int8 *)(v186 + 23);
  else
    v191 = *(_QWORD *)(v186 + 8);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, v190, v191);
LABEL_357:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)"\n", 1);
  v192 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 80) + 144);
  switch(*(_BYTE *)(*(_QWORD *)(a1 + 80) + 144))
  {
    case 0:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v237, "Default");
      break;
    case 1:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&v237, "None");
      break;
    case 2:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 8;
      strcpy((char *)&v237, "TypeMain");
      break;
    case 3:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 11;
      *(_DWORD *)((char *)v237.__r_.__value_.__r.__words + 7) = 1701734732;
      v194 = "TransitLine";
      goto LABEL_371;
    case 4:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 13;
      strcpy((char *)&v237, "TransitSystem");
      break;
    case 5:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 14;
      strcpy((char *)&v237, "TextAnnotation");
      break;
    case 6:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 17;
      strcpy((char *)&v237, "GraphicAnnotation");
      break;
    case 7:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 9;
      strcpy((char *)&v237, "ImageText");
      break;
    case 8:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 11;
      *(_DWORD *)((char *)v237.__r_.__value_.__r.__words + 7) = 1852798068;
      v194 = "VenueButton";
LABEL_371:
      v237.__r_.__value_.__r.__words[0] = *(_QWORD *)v194;
      v237.__r_.__value_.__s.__data_[11] = 0;
      break;
    case 9:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 12;
      strcpy((char *)&v237, "PrimaryChild");
      break;
    case 0xA:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 18;
      LOWORD(v237.__r_.__value_.__r.__words[2]) = 12654;
      v193 = "FeatureAnnotation1";
      goto LABEL_369;
    case 0xB:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 18;
      LOWORD(v237.__r_.__value_.__r.__words[2]) = 12910;
      v193 = "FeatureAnnotation2";
LABEL_369:
      *(_OWORD *)&v237.__r_.__value_.__l.__data_ = *(_OWORD *)v193;
      v237.__r_.__value_.__s.__data_[18] = 0;
      break;
    default:
      *((_BYTE *)&v237.__r_.__value_.__s + 23) = 0;
      v237.__r_.__value_.__s.__data_[0] = 0;
      break;
  }
  v195 = std::string::insert(&v237, 0, "  <text> source:", 0x10uLL);
  v196 = *(_OWORD *)&v195->__r_.__value_.__l.__data_;
  __p[2] = (void *)v195->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v196;
  v195->__r_.__value_.__l.__size_ = 0;
  v195->__r_.__value_.__r.__words[2] = 0;
  v195->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p[2]) >= 0)
    v197 = __p;
  else
    v197 = (void **)__p[0];
  if (SHIBYTE(__p[2]) >= 0)
    v198 = HIBYTE(__p[2]);
  else
    v198 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)v197, v198);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v237.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_381;
LABEL_395:
    operator delete(v237.__r_.__value_.__l.__data_);
    goto LABEL_381;
  }
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_395;
LABEL_381:
  v200 = (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 250) & 0x10) == 0 && v192 != 6;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 80) + 250) & 8) != 0 || !v200)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)" shieldThreshold:", 17);
    std::ostream::operator<<();
    if (!v200)
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)" icon-size:", 11);
      v201 = *(_QWORD *)(a1 + 80);
      v202 = *(_QWORD *)(v201 + 296);
      if (!v202)
      {
        v203 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*(_QWORD *)(a1 + 80), 0);
        v202 = *v203;
        *(_QWORD *)(v201 + 296) = *v203;
      }
      v204 = *(unsigned __int8 *)(v202 + 93);
      switch(v204)
      {
        case 0:
          v205 = 7;
          HIBYTE(__p[2]) = 7;
          LODWORD(__p[0]) = 1634100548;
          v206 = 1953264993;
          goto LABEL_407;
        case 1:
          v205 = 5;
          HIBYTE(__p[2]) = 5;
          strcpy((char *)__p, "Small");
          break;
        case 2:
          v205 = 5;
          HIBYTE(__p[2]) = 5;
          strcpy((char *)__p, "Large");
          break;
        case 3:
          v205 = 6;
          HIBYTE(__p[2]) = 6;
          LODWORD(__p[0]) = 1634554712;
          v207 = 27756;
          goto LABEL_409;
        case 4:
          v205 = 6;
          HIBYTE(__p[2]) = 6;
          LODWORD(__p[0]) = 1918979160;
          v207 = 25959;
          goto LABEL_409;
        case 5:
          v205 = 7;
          HIBYTE(__p[2]) = 7;
          LODWORD(__p[0]) = 1834178648;
          v206 = 1819042157;
          goto LABEL_407;
        case 6:
          v205 = 7;
          HIBYTE(__p[2]) = 7;
          LODWORD(__p[0]) = 1632393304;
          v206 = 1701278305;
LABEL_407:
          *(_DWORD *)((char *)__p + 3) = v206;
          HIBYTE(__p[0]) = 0;
          break;
        case 7:
          v205 = 8;
          HIBYTE(__p[2]) = 8;
          v208 = 0x656772614C585858;
          goto LABEL_403;
        case 8:
          v205 = 6;
          HIBYTE(__p[2]) = 6;
          LODWORD(__p[0]) = 1768187213;
          v207 = 28021;
LABEL_409:
          WORD2(__p[0]) = v207;
          BYTE6(__p[0]) = 0;
          break;
        case 9:
          v205 = 8;
          HIBYTE(__p[2]) = 8;
          v208 = 0x6C6C616D53585858;
LABEL_403:
          __p[0] = (void *)v208;
          LOBYTE(__p[1]) = 0;
          break;
        default:
          if (v204 == 255)
          {
            v205 = 4;
            HIBYTE(__p[2]) = 4;
            strcpy((char *)__p, "None");
          }
          else
          {
            v205 = 0;
            HIBYTE(__p[2]) = 0;
            LOBYTE(__p[0]) = 0;
          }
          break;
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)__p, v205);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
    }
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v238, (uint64_t)"\n", 1);
LABEL_414:
  if ((v245 & 0x10) != 0)
  {
    v211 = *((_QWORD *)&v244 + 1);
    if (*((_QWORD *)&v244 + 1) < v242)
    {
      *((_QWORD *)&v244 + 1) = v242;
      v211 = v242;
    }
    v212 = (const void **)&v241;
  }
  else
  {
    if ((v245 & 8) == 0)
    {
      v209 = 0;
      v210 = a5;
      *((_BYTE *)a5 + 23) = 0;
      goto LABEL_429;
    }
    v212 = (const void **)v240;
    v211 = v240[2];
  }
  v213 = *v212;
  v209 = v211 - (_QWORD)*v212;
  if (v209 > 0x7FFFFFFFFFFFFFF7)
    abort();
  if (v209 >= 0x17)
  {
    v214 = (v209 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v209 | 7) != 0x17)
      v214 = v209 | 7;
    v215 = v214 + 1;
    v210 = operator new(v214 + 1);
    a5[1] = v209;
    a5[2] = v215 | 0x8000000000000000;
    *a5 = v210;
  }
  else
  {
    v210 = a5;
    *((_BYTE *)a5 + 23) = v209;
    if (!v209)
      goto LABEL_429;
  }
  v216 = v213;
  v217 = v210;
  memmove(v210, v216, v209);
  v210 = v217;
LABEL_429:
  *((_BYTE *)v210 + v209) = 0;
  v238 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v239[-1] + *(_QWORD *)(v238 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v239[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v244) < 0)
    operator delete((void *)v243);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v246);
}

void sub_19FEBD740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  std::ostringstream::~ostringstream((uint64_t)&a36);
  _Unwind_Resume(a1);
}

float32x4_t md::PointLabelFeature::updateZoomRanks(float32x4_t *this)
{
  uint64_t v1;
  uint64_t v2;
  const float *v3;
  float32x4_t result;

  v1 = this[31].i64[1];
  if (v1)
  {
    this[23].i32[0] = *(_DWORD *)(v1 + 80);
    v2 = 76;
    if (!*(_BYTE *)(v1 + 112))
      v2 = 72;
    v3 = (const float *)(v1 + v2);
    result = vld1q_dup_f32(v3);
    this[22] = result;
  }
  return result;
}

md::CompositeLabelPart *md::PointLabelFeature::newMultiPoiIconPart(md::PointLabelFeature *this, const md::PartCreationContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  _OWORD *v10;
  __int128 v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  md::LabelStyle *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  unsigned __int8 v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  unsigned __int8 v66;
  md::LabelPart *v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  md::CompositeLabelPart *v82;
  uint64_t v83[2];
  __int128 v84;
  char *v85;
  std::__shared_weak_count *v86;
  _QWORD *v87;
  _QWORD *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  std::string v93[2];
  std::string *v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a2 + 2);
  v5 = *(_QWORD *)(v4 + 296);
  if (!v5)
  {
    v6 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*((_QWORD *)a2 + 2), 0);
    v5 = *v6;
    *(_QWORD *)(v4 + 296) = *v6;
  }
  v82 = 0;
  v7 = *(unsigned int *)(v5 + 68);
  while ((_DWORD)v7)
  {
    v8 = (char *)operator new(0x40uLL);
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    *(_QWORD *)v8 = &off_1E42DAB40;
    *(_OWORD *)(v8 + 24) = 0u;
    v9 = v8 + 24;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_DWORD *)(v8 + 55) = 0;
    v10 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
    *((_QWORD *)v8 + 3) = v10;
    if (v10)
    {
      *(_QWORD *)&v11 = -1;
      *((_QWORD *)&v11 + 1) = -1;
      v10[14] = v11;
      v10[15] = v11;
      v10[12] = v11;
      v10[13] = v11;
      v10[10] = v11;
      v10[11] = v11;
      v10[8] = v11;
      v10[9] = v11;
      v10[6] = v11;
      v10[7] = v11;
      v10[4] = v11;
      v10[5] = v11;
      v10[2] = v11;
      v10[3] = v11;
      *v10 = v11;
      v10[1] = v11;
    }
    v91 = (uint64_t)(v8 + 24);
    v92 = (uint64_t)v8;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    {
      v78 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v78, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v13 = 0;
    v90 = mdm::Allocator::instance(void)::alloc;
    while (1)
    {
      v85 = v9;
      v86 = (std::__shared_weak_count *)v8;
      if (v8)
      {
        v14 = (unint64_t *)(v8 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v16 = (*(uint64_t (**)(md::PointLabelFeature *, uint64_t, uint64_t, char **))(*(_QWORD *)this + 744))(this, v7, v13, &v85);
      v17 = v86;
      if (v86)
      {
        p_shared_owners = (unint64_t *)&v86->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if ((v16 & 1) == 0)
        break;
      v20 = *((_QWORD *)a2 + 1);
      v21 = (md::LabelStyle *)*((_QWORD *)a2 + 2);
      v22 = *(_QWORD *)a2;
      v23 = (std::__shared_weak_count *)v92;
      v83[0] = v91;
      v83[1] = v92;
      if (v92)
      {
        v24 = (unint64_t *)(v92 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      if (!(*(uint64_t (**)(md::PointLabelFeature *))(*(_QWORD *)this + 64))(this))
      {
        v94 = 0;
        memset(v93, 0, sizeof(v93));
        goto LABEL_33;
      }
      v26 = *((_QWORD *)this + 63);
      if (*(char *)(v26 + 143) < 0)
        std::string::__init_copy_ctor_external(v93, *(const std::string::value_type **)(v26 + 120), *(_QWORD *)(v26 + 128));
      else
        v93[0] = *(std::string *)(v26 + 120);
      v27 = *(_QWORD *)(v26 + 168);
      if (!v27)
        goto LABEL_31;
      if (v27 != v26 + 144)
      {
        v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
LABEL_31:
        v94 = (std::string *)v27;
        goto LABEL_33;
      }
      v94 = &v93[1];
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v27 + 24))(v27, &v93[1]);
LABEL_33:
      md::LabelStyle::pointIcon((uint64_t *)&v84, v21, v22, v20, v83, 0, 0, v7, 0, 255, 0, (uint64_t)v93);
      v28 = v94;
      if (v94 == &v93[1])
      {
        v28 = &v93[1];
        v29 = 4;
      }
      else
      {
        if (!v94)
          goto LABEL_38;
        v29 = 5;
      }
      (*(void (**)(void))(v28->__r_.__value_.__r.__words[0] + 8 * v29))();
LABEL_38:
      if (SHIBYTE(v93[0].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v93[0].__r_.__value_.__l.__data_);
        if (!v23)
          goto LABEL_45;
      }
      else if (!v23)
      {
        goto LABEL_45;
      }
      v30 = (unint64_t *)&v23->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (v31)
      {
LABEL_45:
        v32 = v84;
        if (!(_QWORD)v84)
          goto LABEL_80;
LABEL_46:
        v34 = v88;
        v33 = v89;
        if ((unint64_t)v88 < v89)
        {
          if (v88)
          {
            *v88 = v32;
            v35 = *((_QWORD *)&v84 + 1);
            v34[1] = *((_QWORD *)&v84 + 1);
            if (v35)
            {
              v36 = (unint64_t *)(v35 + 8);
              do
                v37 = __ldxr(v36);
              while (__stxr(v37 + 1, v36));
            }
          }
          v38 = v34 + 2;
          goto LABEL_79;
        }
        v39 = v87;
        v40 = ((char *)v88 - (char *)v87) >> 4;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 60)
          abort();
        if ((uint64_t)(v89 - (_QWORD)v87) >> 3 > v41)
          v41 = (uint64_t)(v89 - (_QWORD)v87) >> 3;
        if (v89 - (unint64_t)v87 >= 0x7FFFFFFFFFFFFFF0)
          v42 = 0xFFFFFFFFFFFFFFFLL;
        else
          v42 = v41;
        if (v42)
        {
          v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v90 + 16))(v90, 16 * v42, 8);
          v44 = (_OWORD *)(v43 + 16 * v40);
          v45 = v43 + 16 * v42;
          if (v43)
          {
            v46 = *((_QWORD *)&v84 + 1);
            *v44 = v84;
            if (v46)
            {
              v47 = (unint64_t *)(v46 + 8);
              do
                v48 = __ldxr(v47);
              while (__stxr(v48 + 1, v47));
            }
          }
        }
        else
        {
          v45 = 0;
          v44 = (_OWORD *)(16 * v40);
        }
        v38 = v44 + 1;
        if (v34 == v39)
        {
          v87 = v44;
          v89 = v45;
          if (v34)
            goto LABEL_78;
        }
        else
        {
          v49 = v34;
          do
          {
            v50 = *((_OWORD *)v49 - 1);
            v49 -= 2;
            *--v44 = v50;
            *v49 = 0;
            v49[1] = 0;
          }
          while (v49 != v39);
          v87 = v44;
          v88 = v38;
          v89 = v45;
          do
          {
            v51 = (std::__shared_weak_count *)*(v34 - 1);
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            v34 -= 2;
          }
          while (v34 != v39);
          v34 = v39;
          if (!v39)
            goto LABEL_79;
LABEL_78:
          (*(void (**)(uint64_t, _QWORD *, unint64_t))(*(_QWORD *)v90 + 40))(v90, v34, v33 - (_QWORD)v34);
        }
LABEL_79:
        v88 = v38;
        goto LABEL_80;
      }
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      v32 = v84;
      if ((_QWORD)v84)
        goto LABEL_46;
LABEL_80:
      v54 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
      if (*((_QWORD *)&v84 + 1))
      {
        v55 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v13 = (v13 + 1);
      v9 = (char *)v91;
      v8 = (char *)v92;
    }
    v57 = v87;
    v58 = v88;
    if (v87 == v88)
    {
      v7 = (*(uint64_t (**)(md::PointLabelFeature *, uint64_t))(*(_QWORD *)this + 752))(this, v7);
      v60 = v57;
      if (v57)
        goto LABEL_109;
    }
    else
    {
      if ((char *)v88 - (char *)v87 == 16)
      {
        {
          v79 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v79, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v82 = (md::CompositeLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                             + 16))(mdm::Allocator::instance(void)::alloc, 840, 8);
        md::PointIconLabelPart::PointIconLabelPart((uint64_t)v82, v57, *(_QWORD *)a2, *((_QWORD *)a2 + 1), *((md::LabelStyle **)a2 + 2), v7);
        goto LABEL_101;
      }
      {
        v80 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v80, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 760, 8);
      v62 = *((_QWORD *)a2 + 2);
      v63 = v61;
      v64 = (_QWORD *)md::StackLabelPart::StackLabelPart(v61, 1);
      *v64 = off_1E429B2D0;
      md::LabelIconStyleMonitor::LabelIconStyleMonitor((uint64_t)(v64 + 87), v62);
      *(_DWORD *)(v63 + 752) = v7;
      *(_BYTE *)(v63 + 756) = 1;
      v65 = v57;
      v82 = (md::CompositeLabelPart *)v63;
      *(_BYTE *)(v63 + 630) = 1;
      do
      {
        {
          v70 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v70, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v67 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                    + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
        v68 = md::IconLabelPart::IconLabelPart((uint64_t)v67, v65);
        (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v69 + 176))(v69, 4, v68);
        md::CompositeLabelPart::addLabelPart((uint64_t)v82, v67);
        v65 += 2;
      }
      while (v65 != v58);
      if (v57)
      {
LABEL_101:
        v71 = v58;
        do
        {
          v72 = (std::__shared_weak_count *)*(v71 - 1);
          if (v72)
          {
            v73 = (unint64_t *)&v72->__shared_owners_;
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 - 1, v73));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          v71 -= 2;
        }
        while (v71 != v57);
        v60 = v87;
LABEL_109:
        (*(void (**)(uint64_t, _QWORD *, unint64_t))(*(_QWORD *)v90 + 40))(v90, v60, v89 - (_QWORD)v60);
      }
    }
    v75 = (std::__shared_weak_count *)v92;
    if (v92)
    {
      v76 = (unint64_t *)(v92 + 8);
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *, _QWORD *))v75->__on_zero_shared)(v75, v60);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    if (v57 != v58)
      return v82;
  }
  return v82;
}

void sub_19FEBE1B0(mdm::Allocator *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v31;

  v31 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v31 + 40))(v31, a12, 840);
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](&a19);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

uint64_t md::PointLabelFeature::primaryChildTextIndex(md::PointLabelFeature *this, const md::PartCreationContext *a2)
{
  _QWORD *v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v10;
  _QWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (_QWORD *)*((_QWORD *)a2 + 8);
  v4 = atomic_load((unsigned __int8 *)(*(_QWORD *)a2 + 3392));
  md::PointLabelFeatureElement::getSummaryIconInfos((uint64_t)v17, v3, 2, v4 & 1);
  if (!v17[0])
    return 255;
  v5 = v18;
  v6 = v19;
  if (v18 != v19)
  {
    v7 = (const char *)(v18 + 8);
    if (*(char *)(v18 + 31) < 0)
    {
      if (!*(_QWORD *)(v18 + 16))
      {
        v8 = 255;
        goto LABEL_21;
      }
      v7 = *(const char **)v7;
    }
    else if (!*(_BYTE *)(v18 + 31))
    {
      v8 = 255;
      goto LABEL_21;
    }
    v10 = (const char *)(v18 + 32);
    if (*(char *)(v18 + 55) < 0)
      v10 = *(const char **)v10;
    md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp((uint64_t)v11, v7, v10);
    v8 = md::PointLabelFeature::indexForTextEntry((uint64_t *)this, (uint64_t)v11);
    if (SHIBYTE(v15) < 0)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 40))(v16, v14, v15 & 0x7FFFFFFFFFFFFFFFLL);
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_21;
    }
    else if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
      goto LABEL_21;
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v13 + 40))(v13, v11[0], v12 & 0x7FFFFFFFFFFFFFFFLL);
    while (1)
    {
LABEL_21:
      if (*(char *)(v6 - 1) < 0)
      {
        operator delete(*(void **)(v6 - 24));
        if (*(char *)(v6 - 25) < 0)
LABEL_25:
          operator delete(*(void **)(v6 - 48));
      }
      else if (*(char *)(v6 - 25) < 0)
      {
        goto LABEL_25;
      }
      v6 -= 56;
      if (v6 == v5)
        goto LABEL_8;
    }
  }
  v8 = 255;
  if (v18)
LABEL_8:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 40))(v21, v5, v20 - v5);
  return v8;
}

void sub_19FEBE444(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~StringWithLocaleImp((uint64_t)va);
  geo::optional<std::vector<md::PointLabelSummaryIconInfo,geo::StdAllocator<md::PointLabelSummaryIconInfo,mdm::Allocator>>>::~optional((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t md::PointLabelFeature::imageTextIndex(md::PointLabelFeature *this, const md::PartCreationContext *a2)
{
  if ((*(uint64_t (**)(md::PointLabelFeature *))(*(_QWORD *)this + 64))(this))
    return md::PointLabelFeature::externalFeatureTextIndex((uint64_t *)this, 3, *(_QWORD *)a2);
  else
    return 255;
}

uint64_t md::PointLabelFeature::annotationTextIndex(uint64_t a1, uint64_t a2, int a3)
{
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  const char *v10;
  id v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 v30;
  uint64_t v31;
  void *v32;
  int v34;
  id v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  id v42;
  unint64_t v43;
  id *v44;
  id *v45;
  unint64_t v46;
  id v47;
  const char *v48;
  id v49;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55;
  __int128 __dst;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  char v60;
  id v61;
  id v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  if (a3 != 8)
  {
    if ((a3 & 0xFE) != 0xA)
      goto LABEL_32;
    v14 = *(_QWORD *)(a2 + 16);
    v15 = *(_QWORD *)(v14 + 312);
    if (!v15)
    {
      v16 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(*(_QWORD *)(a2 + 16));
      v15 = *v16;
      *(_QWORD *)(v14 + 312) = *v16;
    }
    v17 = 60;
    if (a3 == 10)
      v17 = 56;
    v18 = 54;
    if (a3 != 10)
      v18 = 55;
    v19 = *(unsigned __int8 *)(v15 + v18);
    v20 = *(_DWORD *)(v15 + v17);
    LOBYTE(__dst) = 0;
    v60 = 0;
    if (v20 - 1 < 2)
      goto LABEL_16;
    if (v20 != 3)
    {
      if (v20 != 4)
        return 255;
LABEL_16:
      v21 = **(_QWORD **)(a2 + 64);
      if (!v21)
      {
        LOBYTE(v63) = 0;
        v67 = 0;
        goto LABEL_104;
      }
      v51 = 0uLL;
      v22 = *(std::__shared_weak_count **)(v21 + 8);
      if (v22)
      {
        *((_QWORD *)&v51 + 1) = std::__shared_weak_count::lock(v22);
        if (*((_QWORD *)&v51 + 1))
          *(_QWORD *)&v51 = *(_QWORD *)v21;
      }
      md::LabelFeature::tileAnnotationText(&v63, (geo::codec::VectorTile **)&v51, *(_DWORD *)(v21 + 200), *(unsigned __int8 *)(v21 + 204), v20, v19);
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
      if (*((_QWORD *)&v51 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      if (v60 == v67)
      {
        if (!v60)
          goto LABEL_104;
        if (SBYTE7(v57) < 0)
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)&v57 + 1) + 40))(*((_QWORD *)&v57 + 1), __dst, v57 & 0x7FFFFFFFFFFFFFFFLL);
        __dst = v63;
        *(_QWORD *)&v57 = v64;
        BYTE7(v64) = 0;
        LOBYTE(v63) = 0;
        if (SBYTE7(v59) < 0)
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)&v59 + 1) + 40))(*((_QWORD *)&v59 + 1), v58, v59 & 0x7FFFFFFFFFFFFFFFLL);
        v58 = v65;
        *(_QWORD *)&v59 = v66;
        BYTE7(v66) = 0;
        LOBYTE(v65) = 0;
      }
      else if (v60)
      {
        if (SBYTE7(v59) < 0)
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)&v59 + 1) + 40))(*((_QWORD *)&v59 + 1), v58, v59 & 0x7FFFFFFFFFFFFFFFLL);
        if (SBYTE7(v57) < 0)
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)&v57 + 1) + 40))(*((_QWORD *)&v57 + 1), __dst, v57 & 0x7FFFFFFFFFFFFFFFLL);
        v60 = 0;
      }
      else
      {
        __dst = v63;
        v57 = v64;
        v63 = 0uLL;
        v58 = v65;
        v59 = v66;
        *(_QWORD *)&v64 = 0;
        v65 = 0uLL;
        *(_QWORD *)&v66 = 0;
        v60 = 1;
      }
      if (v67)
      {
        if (SBYTE7(v66) < 0)
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)&v66 + 1) + 40))(*((_QWORD *)&v66 + 1), v65, v66 & 0x7FFFFFFFFFFFFFFFLL);
        if (SBYTE7(v64) < 0)
        {
          v37 = v63;
          v38 = *((_QWORD *)&v64 + 1);
          v39 = v64;
LABEL_103:
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38 + 40))(v38, v37, v39 & 0x7FFFFFFFFFFFFFFFLL);
          goto LABEL_104;
        }
      }
      goto LABEL_104;
    }
    LOBYTE(v51) = 0;
    v55 = 0;
    v32 = *(void **)(*(_QWORD *)a2 + 3472);
    if (v20 != 3 || v32 == 0)
    {
LABEL_98:
      if (v55)
      {
        if (SBYTE7(v54) < 0)
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)&v54 + 1) + 40))(*((_QWORD *)&v54 + 1), v53, v54 & 0x7FFFFFFFFFFFFFFFLL);
        if (SBYTE7(v52) < 0)
        {
          v37 = v51;
          v38 = *((_QWORD *)&v52 + 1);
          v39 = v52;
          goto LABEL_103;
        }
      }
LABEL_104:
      if (v60)
      {
        v12 = md::PointLabelFeature::indexForTextEntry((uint64_t *)a1, (uint64_t)&__dst);
        if (v60)
        {
          if (SBYTE7(v59) < 0)
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)&v59 + 1) + 40))(*((_QWORD *)&v59 + 1), v58, v59 & 0x7FFFFFFFFFFFFFFFLL);
          if (SBYTE7(v57) < 0)
            (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)&v57 + 1) + 40))(*((_QWORD *)&v57 + 1), __dst, v57 & 0x7FFFFFFFFFFFFFFFLL);
        }
        return v12;
      }
      return 255;
    }
    if (*(_BYTE *)(a1 + 655))
    {
      v34 = *(unsigned __int8 *)(a1 + 654);
      switch(v34)
      {
        case 1:
          v42 = v32;
          if (*(_BYTE *)(a1 + 408))
            v43 = (unint64_t)*(float *)(a1 + 404);
          else
            v43 = 0;
          v68 = 0;
          v69 = 0;
          v44 = (id *)&v68;
          v45 = (id *)&v69;
          objc_msgSend(v42, "getAnnotationTextForChargersNoStatus:text:locale:", v43, &v69, &v68, (_QWORD)v51);
          goto LABEL_89;
        case 2:
          v70 = 0;
          v71 = 0;
          v44 = (id *)&v70;
          v45 = (id *)&v71;
          objc_msgSend(v32, "getAnnotationTextForChargersNoneAvailable:locale:", &v71, &v70);
LABEL_89:
          v40 = *v45;
          v41 = *v44;

LABEL_90:
          v47 = objc_retainAutorelease(v40);
          v48 = (const char *)objc_msgSend(v47, "UTF8String");
          v49 = objc_retainAutorelease(v41);
          md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp((uint64_t)&v63, v48, (const char *)objc_msgSend(v49, "UTF8String"));
          v51 = v63;
          v52 = v64;
          v53 = v65;
          v54 = v66;
          v55 = 1;

          if (v60 != 1)
          {
            *((_QWORD *)&v57 + 1) = *((_QWORD *)&v52 + 1);
            if (SBYTE7(v52) < 0)
            {
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&__dst, (void *)v51, *((unint64_t *)&v51 + 1));
            }
            else
            {
              __dst = v51;
              *(_QWORD *)&v57 = v52;
            }
            *((_QWORD *)&v59 + 1) = *((_QWORD *)&v54 + 1);
            if (SBYTE7(v54) < 0)
            {
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((_QWORD **)&v58, (void *)v53, *((unint64_t *)&v53 + 1));
            }
            else
            {
              v58 = v53;
              *(_QWORD *)&v59 = v54;
            }
            v60 = 1;
          }
          goto LABEL_98;
        case 3:
          v35 = v32;
          if (*(_BYTE *)(a1 + 400))
            v36 = (unint64_t)*(float *)(a1 + 396);
          else
            v36 = 0;
          if (*(_BYTE *)(a1 + 408))
            v46 = (unint64_t)*(float *)(a1 + 404);
          else
            v46 = 0;
          v72 = 0;
          v73 = 0;
          v44 = (id *)&v72;
          v45 = (id *)&v73;
          objc_msgSend(v35, "getAnnotationTextForChargersAvailable:total:text:locale:", v36, v46, &v73, &v72, (_QWORD)v51);
          goto LABEL_89;
      }
    }
    v40 = 0;
    v41 = 0;
    goto LABEL_90;
  }
  v5 = *(void **)(*(_QWORD *)a2 + 3472);
  if (v5)
  {
    v6 = v5;
    v61 = 0;
    v62 = 0;
    objc_msgSend(v6, "getTextForKey:text:locale:", &unk_1E43479A8, &v62, &v61);
    v7 = v62;
    v8 = v61;

    v9 = objc_retainAutorelease(v7);
    v10 = (const char *)objc_msgSend(v9, "UTF8String");
    v11 = objc_retainAutorelease(v8);
    md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp((uint64_t)&v63, v10, (const char *)objc_msgSend(v11, "UTF8String"));
    v12 = md::PointLabelFeature::indexForTextEntry((uint64_t *)a1, (uint64_t)&v63);
    if (SBYTE7(v66) < 0)
    {
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)&v66 + 1) + 40))(*((_QWORD *)&v66 + 1), v65, v66 & 0x7FFFFFFFFFFFFFFFLL);
      if ((SBYTE7(v64) & 0x80000000) == 0)
        goto LABEL_5;
    }
    else if ((SBYTE7(v64) & 0x80000000) == 0)
    {
LABEL_5:

      return v12;
    }
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)&v64 + 1) + 40))(*((_QWORD *)&v64 + 1), v63, v64 & 0x7FFFFFFFFFFFFFFFLL);
    goto LABEL_5;
  }
LABEL_32:
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
    return 255;
  v26 = *(_QWORD *)(a1 + 504);
  v27 = *(unsigned __int8 **)(v26 + 48);
  v28 = *(unsigned __int8 **)(v26 + 56);
  if (v27 == v28)
    return 255;
  v29 = 0;
  do
  {
    if (*v27 > (int)*(float *)(*(_QWORD *)(a2 + 8) + 392))
      break;
    if (v27[1] == 2)
      v29 = v27;
    v27 += 104;
  }
  while (v27 != v28);
  if (!v29)
    return 255;
  v30 = atomic_load((unsigned __int8 *)(*(_QWORD *)a2 + 3392));
  if ((v30 & 1) == 0)
    goto LABEL_41;
  if ((char)v29[79] < 0)
  {
    if (!*((_QWORD *)v29 + 8))
    {
LABEL_41:
      md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp<std::string>(&v63, (_QWORD *)v29 + 1);
      v31 = md::PointLabelFeature::indexForTextEntry((uint64_t *)a1, (uint64_t)&v63);
      goto LABEL_66;
    }
  }
  else if (!v29[79])
  {
    goto LABEL_41;
  }
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp<std::string>(&v63, (_QWORD *)v29 + 7);
  v31 = md::PointLabelFeature::indexForTextEntry((uint64_t *)a1, (uint64_t)&v63);
LABEL_66:
  v12 = v31;
  if (SBYTE7(v66) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)&v66 + 1) + 40))(*((_QWORD *)&v66 + 1), v65, v66 & 0x7FFFFFFFFFFFFFFFLL);
  if (SBYTE7(v64) < 0)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)&v64 + 1) + 40))(*((_QWORD *)&v64 + 1), v63, v64 & 0x7FFFFFFFFFFFFFFFLL);
  if ((_DWORD)v12 == (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, a2))
    return 255;
  return v12;
}

void sub_19FEBECEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (SHIBYTE(a21) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a22 + 40))(a22, a19, a21 & 0x7FFFFFFFFFFFFFFFLL);
  std::optional<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>>::~optional((uint64_t)&a9);
  std::optional<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>>::~optional((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_19FEBED84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  void *v30;
  void *v31;

  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~StringWithLocaleImp((uint64_t)&a30);

  _Unwind_Resume(a1);
}

md::CompositeLabelPart *md::PointLabelFeature::newGraphicAnnotationPart(md::PointLabelFeature *this, const md::PartCreationContext *a2)
{
  int *v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  char v10;
  md::LabelStyle *v11;
  std::__shared_count *v12;
  _QWORD *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  uint64_t v25;
  char v26;
  int v27;
  std::__shared_weak_count *v28;
  unsigned __int8 v29;
  md::LabelPart *v30;
  double v31;
  uint64_t v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t v35;
  md::CompositeLabelPart *v36;
  int *v37;
  int *i;
  uint64_t v40;
  int v41;
  md::CompositeLabelPart *v42;
  int v43;
  int *v44;
  int v45;
  int v46;
  char v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  char v50[8];
  int *v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char v56;
  char v57;
  std::string v58[2];
  std::string *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  md::PointLabelFeatureElement::getSummaryIconInfos((uint64_t)v50, *((_QWORD **)a2 + 8), 0, 0);
  if (!v50[0])
    return 0;
  v4 = v51;
  v44 = v52;
  if (v51 == v52)
    goto LABEL_60;
  {
    v40 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v40, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 696, 8);
  v7 = md::StackLabelPart::StackLabelPart(v6, 1);
  *(_QWORD *)v7 = off_1E4292670;
  *(_BYTE *)(v7 + 694) = 1;
  md::LabelPart::setContentType(v7, 7);
  v45 = 0;
  v42 = (md::CompositeLabelPart *)v6;
  *(_BYTE *)(v6 + 630) = 1;
  v8 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 160);
  v9 = v8 <= 0;
  if (v8 < 0)
    v8 = -v8;
  v43 = v8;
  if (v9)
    v8 = 0;
  v41 = v8;
  do
  {
    v12 = (std::__shared_count *)*((_QWORD *)a2 + 1);
    v11 = (md::LabelStyle *)*((_QWORD *)a2 + 2);
    v13 = *(_QWORD **)a2;
    v15 = *v4;
    v14 = v4[1];
    v16 = *((_QWORD *)v11 + 37);
    v17 = (uint64_t)v11;
    if (v16)
    {
      v18 = *((_QWORD *)v11 + 39);
      if (!v18)
        goto LABEL_18;
    }
    else
    {
      v19 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*((_QWORD *)a2 + 2), 0);
      v16 = *v19;
      *((_QWORD *)v11 + 37) = *v19;
      v17 = *((_QWORD *)a2 + 2);
      v18 = *(_QWORD *)(v17 + 312);
      if (!v18)
      {
LABEL_18:
        v20 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(v17);
        v18 = *v20;
        *(_QWORD *)(v17 + 312) = *v20;
      }
    }
    v21 = *(unsigned __int8 *)(v18 + 45);
    if ((v21 - 5) <= 1u
      && (md::PointLabelFeature::iconPackColor((uint64_t)&v55, (uint64_t *)this, (uint64_t)a2, v21), v57))
    {
      LOBYTE(v46) = 0;
      v47 = 0;
      if (v56)
      {
        v46 = v55;
        v47 = 1;
      }
    }
    else
    {
      LOBYTE(v46) = 0;
      v47 = 0;
    }
    if (!(*(uint64_t (**)(md::PointLabelFeature *))(*(_QWORD *)this + 64))(this))
    {
      v59 = 0;
      memset(v58, 0, sizeof(v58));
      goto LABEL_34;
    }
    v22 = *((_QWORD *)this + 63);
    if (*(char *)(v22 + 143) < 0)
      std::string::__init_copy_ctor_external(v58, *(const std::string::value_type **)(v22 + 120), *(_QWORD *)(v22 + 128));
    else
      v58[0] = *(std::string *)(v22 + 120);
    v23 = *(_QWORD *)(v22 + 168);
    if (!v23)
      goto LABEL_32;
    if (v23 != v22 + 144)
    {
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
LABEL_32:
      v59 = (std::string *)v23;
      goto LABEL_34;
    }
    v59 = &v58[1];
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
LABEL_34:
    md::LabelStyle::createIcon(&v48, v11, (uint64_t)v13, v12, (uint64_t *)this + 82, 0, v15, v14, 1, v16, (char *)&v46, (uint64_t)v58);
    v24 = v59;
    if (v59 == &v58[1])
    {
      v24 = &v58[1];
      v25 = 4;
    }
    else
    {
      if (!v59)
        goto LABEL_39;
      v25 = 5;
    }
    (*(void (**)(void))(v24->__r_.__value_.__r.__words[0] + 8 * v25))();
LABEL_39:
    if (SHIBYTE(v58[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v58[0].__r_.__value_.__l.__data_);
      if (!v48)
      {
LABEL_44:
        v26 = 0;
        v28 = v49;
        if (!v49)
          goto LABEL_10;
LABEL_49:
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v34 = __ldaxr(p_shared_owners);
        while (__stlxr(v34 - 1, p_shared_owners));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
        goto LABEL_10;
      }
    }
    else if (!v48)
    {
      goto LABEL_44;
    }
    if (v45 == v43)
    {
      v26 = 1;
      v27 = v41;
    }
    else
    {
      {
        v35 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v35, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v30 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                  + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
      v31 = md::IconLabelPart::IconLabelPart((uint64_t)v30, &v48);
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v32 + 176))(v32, 10, v31);
      md::CompositeLabelPart::addLabelPart((uint64_t)v42, v30);
      v26 = 0;
      v27 = v45 + 1;
    }
    v45 = v27;
    v28 = v49;
    if (v49)
      goto LABEL_49;
LABEL_10:
    v4 += 14;
    if (v4 == v44)
      v10 = 1;
    else
      v10 = v26;
  }
  while ((v10 & 1) == 0);
  if (!v45)
  {
    (*(void (**)(md::CompositeLabelPart *))(*(_QWORD *)v42 + 8))(v42);
LABEL_60:
    v36 = 0;
    if (v50[0])
      goto LABEL_61;
    return v36;
  }
  v36 = v42;
  if (!v50[0])
    return v36;
LABEL_61:
  v37 = v51;
  if (v51)
  {
    for (i = v52; ; i -= 14)
    {
      if (i == v37)
      {
        (*(void (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v54 + 40))(v54, v37, v53 - (_QWORD)v37);
        return v36;
      }
      if (*((char *)i - 1) < 0)
      {
        operator delete(*((void **)i - 3));
        if ((*((char *)i - 25) & 0x80000000) == 0)
          continue;
      }
      else if ((*((char *)i - 25) & 0x80000000) == 0)
      {
        continue;
      }
      operator delete(*((void **)i - 6));
    }
  }
  return v36;
}

void sub_19FEBF2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  geo::optional<std::vector<md::PointLabelSummaryIconInfo,geo::StdAllocator<md::PointLabelSummaryIconInfo,mdm::Allocator>>>::~optional((uint64_t)va);
  _Unwind_Resume(a1);
}

md::LabelPart *md::PointLabelFeature::newLabeledImageAnnotationPart(uint64_t *a1, uint64_t *a2, int a3)
{
  _QWORD *v6;
  unsigned __int8 v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  float *v14;
  md::LabelPart *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  uint64_t *v20;
  std::string *v21;
  uint64_t v22;
  md::LabelStyle *v23;
  std::__shared_count *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *words;
  uint64_t v37;
  int v38;
  std::__shared_weak_count *v39;
  int v40;
  const char *v41;
  const char *v42;
  int v43;
  char v44;
  unint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  md::LabelPart *v51;
  BOOL v52;
  char v53;
  std::__shared_weak_count *v54;
  char v55;
  unsigned __int8 v56;
  uint64_t v57;
  md::LabelPart *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  md::LabelPart *GraphicAnnotationPart;
  int v71;
  char v72;
  unint64_t v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  md::LabelPart *v83;
  uint64_t i;
  uint64_t v86;
  int v87;
  char v88;
  uint64_t v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  int v95;
  char v96;
  int v97;
  char v98;
  char v99;
  int v100;
  char v101;
  int v102;
  char v103;
  char v104;
  md::LabelPart *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  md::LabelPart *v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  int v121;
  char v122;
  int v123;
  char v124;
  char v125;
  md::LabelPart **v126;
  md::LabelPart *v127;
  char v128[8];
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  std::string v133[2];
  uint64_t v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)a2[8];
  v93 = a2;
  v7 = atomic_load((unsigned __int8 *)(*a2 + 3392));
  md::PointLabelFeatureElement::getSummaryIconInfos((uint64_t)v128, v6, 1, v7 & 1);
  if (!v128[0])
    return 0;
  v8 = v129;
  v92 = v130;
  if (v129 == v130)
  {
    v15 = 0;
    if (!v129)
      return v15;
LABEL_153:
    for (i = v130; ; i -= 56)
    {
      if (i == v8)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v132 + 40))(v132, v8, v131 - v8);
        return v15;
      }
      if (*(char *)(i - 1) < 0)
      {
        operator delete(*(void **)(i - 24));
        if ((*(char *)(i - 25) & 0x80000000) == 0)
          continue;
      }
      else if ((*(char *)(i - 25) & 0x80000000) == 0)
      {
        continue;
      }
      operator delete(*(void **)(i - 48));
    }
  }
  {
    v86 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v86, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 696, 8);
  v127 = (md::LabelPart *)md::StackLabelPart::StackLabelPart(v10, 0, 5, 0, 0);
  (*(void (**)(md::LabelPart *, uint64_t))(*(_QWORD *)v127 + 176))(v127, 8);
  *((_BYTE *)v127 + 630) = 1;
  v126 = &v127;
  v11 = v93[2];
  v12 = *(_DWORD *)(v11 + 160);
  if (v12 >= 0)
    v13 = v12;
  else
    v13 = -v12;
  v14 = *(float **)(v11 + 288);
  if (v14)
  {
    if (vabds_f32(v14[2], *(float *)(v11 + 104)) >= 0.01)
    {
      md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(v93[2], (uint64_t)v14, 6);
      v14 = *(float **)(v11 + 288);
    }
  }
  else
  {
    v14 = (float *)md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(v93[2], 6);
    *(_QWORD *)(v11 + 288) = v14;
  }
  v16 = *(unsigned __int8 *)(*(_QWORD *)v14 + 60);
  if ((v16 - 5) > 1u)
  {
    LOBYTE(v121) = 0;
    v125 = 0;
  }
  else
  {
    md::PointLabelFeature::iconPackColor((uint64_t)&v121, a1, (uint64_t)v93, v16);
  }
  v17 = v93[2];
  v18 = *(_QWORD *)(v17 + 280);
  v87 = a3;
  if (v18)
  {
    if (vabds_f32(*(float *)(v18 + 8), *(float *)(v17 + 104)) >= 0.01)
    {
      md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(v17, v18, 0);
      v18 = *(_QWORD *)(v17 + 280);
    }
  }
  else
  {
    v18 = md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(v17, 0);
    *(_QWORD *)(v17 + 280) = v18;
  }
  v88 = 0;
  v91 = 0;
  v19 = &v133[1];
  v89 = *(_QWORD *)v18 + 72;
  v90 = a1 + 82;
  v94 = a1;
  while (1)
  {
    if (*(char *)(v8 + 31) < 0)
    {
      if (!*(_QWORD *)(v8 + 16))
      {
LABEL_22:
        v20 = v94;
        goto LABEL_23;
      }
    }
    else if (!*(_BYTE *)(v8 + 31))
    {
      goto LABEL_22;
    }
    v21 = v19;
    v22 = v13;
    v24 = (std::__shared_count *)v93[1];
    v23 = (md::LabelStyle *)v93[2];
    v25 = *v93;
    v26 = *(_DWORD *)v8;
    v27 = *(_DWORD *)(v8 + 4);
    v28 = *((_QWORD *)v23 + 37);
    v29 = (uint64_t)v23;
    if (v28)
    {
      v30 = *((_QWORD *)v23 + 39);
      if (!v30)
        goto LABEL_32;
    }
    else
    {
      v31 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v93[2], 0);
      v28 = *v31;
      *((_QWORD *)v23 + 37) = *v31;
      v29 = v93[2];
      v30 = *(_QWORD *)(v29 + 312);
      if (!v30)
      {
LABEL_32:
        v32 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(v29);
        v30 = *v32;
        *(_QWORD *)(v29 + 312) = *v32;
      }
    }
    v33 = *(unsigned __int8 *)(v30 + 45);
    if ((v33 - 5) <= 1u
      && (md::PointLabelFeature::iconPackColor((uint64_t)&v110, v94, (uint64_t)v93, v33), BYTE2(v111)))
    {
      LOBYTE(v117) = 0;
      v118 = 0;
      if (BYTE4(v110))
      {
        v117 = v110;
        v118 = 1;
      }
    }
    else
    {
      LOBYTE(v117) = 0;
      v118 = 0;
    }
    if ((*(uint64_t (**)(uint64_t *))(*v94 + 64))(v94))
    {
      v34 = v94[63];
      if (*(char *)(v34 + 143) < 0)
        std::string::__init_copy_ctor_external(v133, *(const std::string::value_type **)(v34 + 120), *(_QWORD *)(v34 + 128));
      else
        v133[0] = *(std::string *)(v34 + 120);
      v35 = *(_QWORD *)(v34 + 168);
      if (v35)
      {
        if (v35 == v34 + 144)
        {
          v134 = (uint64_t)v21;
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v35 + 24))(v35, v21);
          v13 = v22;
        }
        else
        {
          v13 = v22;
          v134 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
        }
      }
      else
      {
        v13 = v22;
        v134 = 0;
      }
    }
    else
    {
      v134 = 0;
      memset(v133, 0, sizeof(v133));
      v13 = v22;
    }
    md::LabelStyle::createIcon(&v119, v23, v25, v24, v90, 0, v26, v27, 1, v28, (char *)&v117, (uint64_t)v133);
    words = (_QWORD *)v134;
    v19 = v21;
    if ((std::string *)v134 == v21)
    {
      words = v21->__r_.__value_.__r.__words;
      v37 = 4;
      v20 = v94;
    }
    else
    {
      v20 = v94;
      if (!v134)
        goto LABEL_53;
      v37 = 5;
    }
    (*(void (**)(void))(*words + 8 * v37))();
LABEL_53:
    if (SHIBYTE(v133[0].__r_.__value_.__r.__words[2]) < 0)
      break;
    if (!v119)
      goto LABEL_59;
LABEL_55:
    if (v91 == (_DWORD)v13)
    {
      v88 = 1;
      v38 = 2;
      v91 = v13;
      v39 = v120;
      if (!v120)
        goto LABEL_111;
      goto LABEL_108;
    }
    md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp((uint64_t)&v110, " … ", 0);
    v40 = md::PointLabelFeature::indexForTextEntry(v20, (uint64_t)&v110);
    if (SHIBYTE(v115) < 0)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v116 + 40))(v116, v114, v115 & 0x7FFFFFFFFFFFFFFFLL);
      if ((SHIBYTE(v112) & 0x80000000) == 0)
        goto LABEL_63;
    }
    else if ((SHIBYTE(v112) & 0x80000000) == 0)
    {
      goto LABEL_63;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v113 + 40))(v113, v110, v112 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_63:
    v41 = (const char *)(v8 + 8);
    if (*(char *)(v8 + 31) < 0)
      v41 = *(const char **)v41;
    v42 = (const char *)(v8 + 32);
    if (*(char *)(v8 + 55) < 0)
      v42 = *(const char **)v42;
    md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp((uint64_t)&v110, v41, v42);
    v43 = md::PointLabelFeature::indexForTextEntry(v20, (uint64_t)&v110);
    if (SHIBYTE(v115) < 0)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v116 + 40))(v116, v114, v115 & 0x7FFFFFFFFFFFFFFFLL);
      if ((SHIBYTE(v112) & 0x80000000) == 0)
        goto LABEL_69;
    }
    else if ((SHIBYTE(v112) & 0x80000000) == 0)
    {
      goto LABEL_69;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v113 + 40))(v113, v110, v112 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_69:
    v44 = *(_BYTE *)(v93[1] + 404);
    v45 = (*(uint64_t (**)(uint64_t *))(*v20 + 488))(v20);
    v46 = (unsigned __int8 *)v20[20];
    v47 = (unsigned __int8 *)v20[21];
    if (v45 > 0x6DB6DB6DB6DB6DB7 * ((v47 - v46) >> 3))
    {
      md::LabelFeature::updateTextVector((md::LabelFeature *)v20);
      v46 = (unsigned __int8 *)v20[20];
      v47 = (unsigned __int8 *)v20[21];
    }
    md::TextDataStore::textDataForZoom(&v110, v46, v47, v40, v89);
    v48 = (*(uint64_t (**)(uint64_t *))(*v20 + 488))(v20);
    v49 = (unsigned __int8 *)v20[20];
    v50 = (unsigned __int8 *)v20[21];
    if (v48 > 0x6DB6DB6DB6DB6DB7 * ((v50 - v49) >> 3))
    {
      md::LabelFeature::updateTextVector((md::LabelFeature *)v20);
      v49 = (unsigned __int8 *)v20[20];
      v50 = (unsigned __int8 *)v20[21];
    }
    md::TextDataStore::textDataForZoom(&v108, v49, v50, v43, v89);
    v106 = 0;
    v107 = 0;
    v51 = v108;
    if (v108)
      v52 = v110 == 0;
    else
      v52 = 1;
    v53 = !v52;
    if (!v52)
    {
      v54 = (std::__shared_weak_count *)operator new(0xB0uLL);
      v54->__shared_owners_ = 0;
      v54->__shared_weak_owners_ = 0;
      v54->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDF50;
      v106 = md::LabelText::LabelText((uint64_t)&v54[1], (uint64_t)v51, (uint64_t)v109, &v110, v44);
      v107 = v54;
      v55 = v53 ^ 1;
      if (!v119)
        v55 = 1;
      if ((v55 & 1) != 0)
        goto LABEL_93;
      {
        v69 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v69, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
      md::IconLabelPart::IconLabelPart(v57, &v119);
      v105 = v58;
      LOBYTE(v100) = 0;
      v104 = 0;
      if (v125)
      {
        v101 = 0;
        if (v122)
        {
          v100 = v121;
          v101 = 1;
        }
        LOBYTE(v102) = 0;
        v103 = 0;
        if (v124)
        {
          v102 = v123;
          v103 = 1;
        }
        v104 = 1;
      }
      md::PointLabelFeature::newLabeledImageAnnotationPart(md::PartCreationContext const&,md::AnnotationID)::$_0::operator()((uint64_t **)&v126, &v105, &v106, &v100);
      if (v105)
        (*(void (**)(md::LabelPart *))(*(_QWORD *)v105 + 8))(v105);
      ++v91;
      v54 = v107;
      if (v107)
      {
LABEL_93:
        p_shared_owners = (unint64_t *)&v54->__shared_owners_;
        do
          v60 = __ldaxr(p_shared_owners);
        while (__stlxr(v60 - 1, p_shared_owners));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
    }
    v61 = v109;
    if (v109)
    {
      v62 = (unint64_t *)&v109->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v64 = v111;
    if (v111)
    {
      v65 = (unint64_t *)&v111->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v38 = 0;
    v39 = v120;
    if (v120)
      goto LABEL_108;
LABEL_111:
    if (v38 != 3)
      goto LABEL_112;
LABEL_23:
    v8 += 56;
    if (v8 == v92)
      goto LABEL_122;
  }
  operator delete(v133[0].__r_.__value_.__l.__data_);
  if (v119)
    goto LABEL_55;
LABEL_59:
  v38 = 3;
  v39 = v120;
  if (!v120)
    goto LABEL_111;
LABEL_108:
  v67 = (unint64_t *)&v39->__shared_owners_;
  do
    v68 = __ldaxr(v67);
  while (__stlxr(v68 - 1, v67));
  if (v68)
    goto LABEL_111;
  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
  std::__shared_weak_count::__release_weak(v39);
  if (v38 == 3)
    goto LABEL_23;
LABEL_112:
  if (!v38)
    goto LABEL_23;
LABEL_122:
  if ((v88 & 1) == 0)
  {
    if (v91)
      goto LABEL_151;
    v83 = v127;
    v127 = 0;
    if (!v83)
      goto LABEL_151;
LABEL_150:
    (*(void (**)(md::LabelPart *))(*(_QWORD *)v83 + 8))(v83);
    goto LABEL_151;
  }
  GraphicAnnotationPart = (md::LabelPart *)md::PointLabelFeature::createGraphicAnnotationPart(v20, v93, v87, 2);
  v108 = GraphicAnnotationPart;
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp((uint64_t)&v110, " … ", 0);
  v71 = md::PointLabelFeature::indexForTextEntry(v20, (uint64_t)&v110);
  if (SHIBYTE(v115) < 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v116 + 40))(v116, v114, v115 & 0x7FFFFFFFFFFFFFFFLL);
    if (SHIBYTE(v112) < 0)
      goto LABEL_163;
  }
  else
  {
    if ((SHIBYTE(v112) & 0x80000000) == 0)
      goto LABEL_125;
LABEL_163:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v113 + 40))(v113, v110, v112 & 0x7FFFFFFFFFFFFFFFLL);
  }
LABEL_125:
  v72 = *(_BYTE *)(v93[1] + 404);
  v73 = (*(uint64_t (**)(uint64_t *))(*v20 + 488))(v20);
  v74 = (unsigned __int8 *)v20[20];
  v75 = (unsigned __int8 *)v20[21];
  if (v73 > 0x6DB6DB6DB6DB6DB7 * ((v75 - v74) >> 3))
  {
    md::LabelFeature::updateTextVector((md::LabelFeature *)v20);
    v74 = (unsigned __int8 *)v20[20];
    v75 = (unsigned __int8 *)v20[21];
  }
  md::TextDataStore::textDataForZoom(&v110, v74, v75, v71, v89);
  v119 = 0;
  v120 = 0;
  v76 = v110;
  if (v110)
  {
    v77 = (std::__shared_weak_count *)operator new(0xB0uLL);
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDF50;
    v119 = md::LabelText::LabelText((uint64_t)&v77[1], v76, (uint64_t)v111, v72);
    v120 = v77;
    if (GraphicAnnotationPart && v76)
    {
      LOBYTE(v95) = 0;
      v99 = 0;
      if (v125)
      {
        v96 = 0;
        if (v122)
        {
          v95 = v121;
          v96 = 1;
        }
        LOBYTE(v97) = 0;
        v98 = 0;
        if (v124)
        {
          v97 = v123;
          v98 = 1;
        }
        v99 = 1;
      }
      md::PointLabelFeature::newLabeledImageAnnotationPart(md::PartCreationContext const&,md::AnnotationID)::$_0::operator()((uint64_t **)&v126, &v108, &v119, &v95);
    }
    v78 = (unint64_t *)&v77->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = v111;
  if (v111)
  {
    v81 = (unint64_t *)&v111->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = v108;
  if (v108)
    goto LABEL_150;
LABEL_151:
  v15 = v127;
  if (v128[0])
  {
    v8 = v129;
    if (v129)
      goto LABEL_153;
  }
  return v15;
}

void sub_19FEBFF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  uint64_t v40;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a38);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  if (a27)
    (*(void (**)(uint64_t))(*(_QWORD *)a27 + 8))(a27);
  v40 = *(_QWORD *)(v38 - 208);
  *(_QWORD *)(v38 - 208) = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  geo::optional<std::vector<md::PointLabelSummaryIconInfo,geo::StdAllocator<md::PointLabelSummaryIconInfo,mdm::Allocator>>>::~optional(v38 - 200);
  _Unwind_Resume(a1);
}

_QWORD *geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>::~fast_shared_ptr(_QWORD *a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unsigned __int8 v7;
  uint64_t v9;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    if ((*v2)-- == 1)
    {
      v4 = (std::__shared_weak_count *)v2[3];
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      {
        v9 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v9, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *a1, 152);
      *a1 = 0;
    }
  }
  return a1;
}

uint64_t std::__split_buffer<md::LabelFeaturePlacementInfo,geo::StdAllocator<md::LabelFeaturePlacementInfo,mdm::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v5 = v2 - 32;
        v4 = *(void **)(v2 - 32);
        *(_QWORD *)(a1 + 16) = v2 - 32;
        if (!v4)
          break;
        *(_QWORD *)(v2 - 24) = v4;
        operator delete(v4);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 32;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 40))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1);
  return a1;
}

_QWORD *std::vector<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,geo::StdAllocator<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,mdm::Allocator>>::__push_back_slow_path<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&>(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  char *v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unsigned __int8 v29;
  _QWORD *v30;
  _QWORD *v31;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  uint64_t v36;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    abort();
  v5 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
  if (v5 >> 2 > v3)
    v3 = v5 >> 2;
  v19 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF8;
  v6 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v19)
    v6 = v3;
  if (v6)
  {
    v8 = 8 * v6;
    v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 8 * v6, 8);
    v10 = (_QWORD *)(v9 + 8 * v2);
    v6 = v9 + v8;
    if (v9)
    {
      *v10 = 0;
      v11 = *a2;
      *v10 = *a2;
      if (v11)
        ++*v11;
    }
  }
  else
  {
    v10 = (_QWORD *)(8 * v2);
  }
  v12 = v10 + 1;
  v13 = *(char **)a1;
  v14 = *(char **)(a1 + 8);
  if (v14 == *(char **)a1)
  {
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v12;
    v28 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_40;
  }
  v15 = (unint64_t)&v14[-*(_QWORD *)a1 - 8];
  if (v15 <= 0x47
    || ((v16 = (v13 - v14 + 7) & 0xFFFFFFFFFFFFFFF8,
         v17 = (char *)v10 + v16,
         v18 = (unint64_t)&v14[v16],
         v17 < v14)
      ? (v19 = v18 >= (unint64_t)v10)
      : (v19 = 1),
        !v19))
  {
    v21 = *(char **)(a1 + 8);
    do
    {
LABEL_23:
      *--v10 = 0;
      v26 = *((_QWORD *)v21 - 1);
      v21 -= 8;
      *v10 = v26;
      *(_QWORD *)v21 = 0;
    }
    while (v21 != v13);
    goto LABEL_24;
  }
  v20 = (v15 >> 3) + 1;
  v21 = &v14[-8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
  v22 = v10 - 4;
  v23 = v14 - 32;
  v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    *v22 = 0uLL;
    v22[1] = 0uLL;
    v25 = *((_OWORD *)v23 + 1);
    *v22 = *(_OWORD *)v23;
    v22[1] = v25;
    v22 -= 2;
    *(_OWORD *)v23 = 0uLL;
    *((_OWORD *)v23 + 1) = 0uLL;
    v23 -= 32;
    v24 -= 4;
  }
  while (v24);
  v10 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
  if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_23;
LABEL_24:
  v14 = *(char **)a1;
  v27 = *(char **)(a1 + 8);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v12;
  v28 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  while (v27 != v14)
  {
    v31 = (_QWORD *)*((_QWORD *)v27 - 1);
    v27 -= 8;
    v30 = v31;
    if (v31)
    {
      if ((*v30)-- == 1)
      {
        v33 = (std::__shared_weak_count *)v30[3];
        if (v33)
        {
          p_shared_owners = (unint64_t *)&v33->__shared_owners_;
          do
            v35 = __ldaxr(p_shared_owners);
          while (__stlxr(v35 - 1, p_shared_owners));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        {
          v36 = operator new();
          mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v36, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *(_QWORD *)v27, 152);
        *(_QWORD *)v27 = 0;
      }
    }
  }
LABEL_40:
  if (v14)
    (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v14, v28 - (_QWORD)v14);
  return v12;
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v3 = *a2;
  v4 = *result;
  if (*a2)
    v5 = *a2 + 8;
  else
    v5 = 0;
  v6 = *(_QWORD *)(v5 + 72);
  v7 = v4 + 8;
  if (!v4)
    v7 = 0;
  v8 = *(_QWORD *)(v7 + 72);
  if (v6 != v8)
  {
    if (v6 <= v8)
      goto LABEL_8;
LABEL_15:
    if (*a3)
      v11 = *a3 + 8;
    else
      v11 = 0;
    v12 = *(_QWORD *)(v11 + 72);
    if (v12 == v6)
    {
      if (*(unsigned __int8 *)(v11 + 129) >= *(unsigned __int8 *)(v5 + 129))
        goto LABEL_20;
    }
    else if (v12 <= v6)
    {
LABEL_20:
      *result = 0;
      *result = *a2;
      *a2 = v4;
      if (*a3)
        v13 = *a3 + 8;
      else
        v13 = 0;
      v14 = *(_QWORD *)(v13 + 72);
      if (v14 == v8)
      {
        if (*(unsigned __int8 *)(v13 + 129) >= *(unsigned __int8 *)(v7 + 129))
          return result;
      }
      else if (v14 <= v8)
      {
        return result;
      }
      *a2 = 0;
      *a2 = *a3;
      *a3 = v4;
      return result;
    }
    *result = 0;
    *result = *a3;
    *a3 = v4;
    return result;
  }
  if (*(unsigned __int8 *)(v5 + 129) < *(unsigned __int8 *)(v7 + 129))
    goto LABEL_15;
LABEL_8:
  if (*a3)
    v9 = *a3 + 8;
  else
    v9 = 0;
  v10 = *(_QWORD *)(v9 + 72);
  if (v10 == v6)
  {
    if (*(unsigned __int8 *)(v9 + 129) >= *(unsigned __int8 *)(v5 + 129))
      return result;
  }
  else if (v10 <= v6)
  {
    return result;
  }
  *a2 = 0;
  *a2 = *a3;
  *a3 = v3;
  v15 = *result;
  if (*a2)
    v16 = *a2 + 8;
  else
    v16 = 0;
  v17 = *(_QWORD *)(v16 + 72);
  v18 = v15 + 8;
  if (!v15)
    v18 = 0;
  v19 = *(_QWORD *)(v18 + 72);
  if (v17 != v19)
  {
    if (v17 <= v19)
      return result;
    goto LABEL_40;
  }
  if (*(unsigned __int8 *)(v16 + 129) < *(unsigned __int8 *)(v18 + 129))
  {
LABEL_40:
    *result = 0;
    *result = *a2;
    *a2 = v15;
  }
  return result;
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*>(a1, a2, a3);
  v9 = *a3;
  if (*a4)
    v10 = *a4 + 8;
  else
    v10 = 0;
  v11 = *(_QWORD *)(v10 + 72);
  v12 = v9 + 8;
  if (!v9)
    v12 = 0;
  v13 = *(_QWORD *)(v12 + 72);
  if (v11 == v13)
  {
    if (*(unsigned __int8 *)(v10 + 129) >= *(unsigned __int8 *)(v12 + 129))
      return result;
  }
  else if (v11 <= v13)
  {
    return result;
  }
  *a3 = 0;
  *a3 = *a4;
  *a4 = v9;
  v14 = *a2;
  if (*a3)
    v15 = *a3 + 8;
  else
    v15 = 0;
  v16 = *(_QWORD *)(v15 + 72);
  v17 = v14 + 8;
  if (!v14)
    v17 = 0;
  v18 = *(_QWORD *)(v17 + 72);
  if (v16 == v18)
  {
    if (*(unsigned __int8 *)(v15 + 129) >= *(unsigned __int8 *)(v17 + 129))
      return result;
  }
  else if (v16 <= v18)
  {
    return result;
  }
  *a2 = 0;
  *a2 = *a3;
  *a3 = v14;
  v19 = *a1;
  if (*a2)
    v20 = *a2 + 8;
  else
    v20 = 0;
  v21 = *(_QWORD *)(v20 + 72);
  v22 = v19 + 8;
  if (!v19)
    v22 = 0;
  v23 = *(_QWORD *)(v22 + 72);
  if (v21 != v23)
  {
    if (v21 <= v23)
      return result;
    goto LABEL_28;
  }
  if (*(unsigned __int8 *)(v20 + 129) < *(unsigned __int8 *)(v22 + 129))
  {
LABEL_28:
    *a1 = 0;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*>(a1, a2, a3, a4);
  v11 = *a4;
  if (*a5)
    v12 = *a5 + 8;
  else
    v12 = 0;
  v13 = *(_QWORD *)(v12 + 72);
  v14 = v11 + 8;
  if (!v11)
    v14 = 0;
  v15 = *(_QWORD *)(v14 + 72);
  if (v13 == v15)
  {
    if (*(unsigned __int8 *)(v12 + 129) >= *(unsigned __int8 *)(v14 + 129))
      return result;
  }
  else if (v13 <= v15)
  {
    return result;
  }
  *a4 = 0;
  *a4 = *a5;
  *a5 = v11;
  v16 = *a3;
  if (*a4)
    v17 = *a4 + 8;
  else
    v17 = 0;
  v18 = *(_QWORD *)(v17 + 72);
  v19 = v16 + 8;
  if (!v16)
    v19 = 0;
  v20 = *(_QWORD *)(v19 + 72);
  if (v18 == v20)
  {
    if (*(unsigned __int8 *)(v17 + 129) >= *(unsigned __int8 *)(v19 + 129))
      return result;
  }
  else if (v18 <= v20)
  {
    return result;
  }
  *a3 = 0;
  *a3 = *a4;
  *a4 = v16;
  v21 = *a2;
  if (*a3)
    v22 = *a3 + 8;
  else
    v22 = 0;
  v23 = *(_QWORD *)(v22 + 72);
  v24 = v21 + 8;
  if (!v21)
    v24 = 0;
  v25 = *(_QWORD *)(v24 + 72);
  if (v23 == v25)
  {
    if (*(unsigned __int8 *)(v22 + 129) >= *(unsigned __int8 *)(v24 + 129))
      return result;
  }
  else if (v23 <= v25)
  {
    return result;
  }
  *a2 = 0;
  *a2 = *a3;
  *a3 = v21;
  v26 = *a1;
  if (*a2)
    v27 = *a2 + 8;
  else
    v27 = 0;
  v28 = *(_QWORD *)(v27 + 72);
  v29 = v26 + 8;
  if (!v26)
    v29 = 0;
  v30 = *(_QWORD *)(v29 + 72);
  if (v28 != v30)
  {
    if (v28 <= v30)
      return result;
    goto LABEL_37;
  }
  if (*(unsigned __int8 *)(v27 + 129) < *(unsigned __int8 *)(v29 + 129))
  {
LABEL_37:
    *a1 = 0;
    *a1 = *a2;
    *a2 = v26;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6)
        v8 = v6 + 8;
      else
        v8 = 0;
      v9 = *(_QWORD *)(v8 + 72);
      v10 = v7 + 8;
      if (!v7)
        v10 = 0;
      v11 = *(_QWORD *)(v10 + 72);
      if (v9 == v11)
      {
        if (*(unsigned __int8 *)(v8 + 129) >= *(unsigned __int8 *)(v10 + 129))
          return result;
      }
      else if (v9 <= v11)
      {
        return result;
      }
      *a1 = 0;
      *a1 = *(a2 - 1);
      *(a2 - 1) = v7;
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v12 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*>(a1, a1 + 1, a1 + 2);
      v13 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v14 = 0;
      v15 = 16;
      break;
  }
  while (1)
  {
    v17 = *v13;
    v18 = *v12;
    v19 = *v13 + 8;
    if (!*v13)
      v19 = 0;
    v20 = *(_QWORD *)(v19 + 72);
    v21 = v18 + 8;
    if (!v18)
      v21 = 0;
    v22 = *(_QWORD *)(v21 + 72);
    if (v20 != v22)
      break;
    if (*(unsigned __int8 *)(v19 + 129) < *(unsigned __int8 *)(v21 + 129))
      goto LABEL_23;
LABEL_14:
    v12 = v13;
    v15 += 8;
    if (++v13 == a2)
      return 1;
  }
  if (v20 <= v22)
    goto LABEL_14;
LABEL_23:
  *v13 = v18;
  *v12 = 0;
  v23 = v15;
  v16 = a1;
  if (v12 != a1)
  {
    while (1)
    {
      v24 = (uint64_t *)((char *)a1 + v23);
      v25 = *(uint64_t *)((char *)a1 + v23 - 8);
      v26 = v25 + 8;
      if (!v25)
        v26 = 0;
      v27 = *(_QWORD *)(v26 + 72);
      if (v20 == v27)
      {
        if (*(unsigned __int8 *)(v19 + 129) >= *(unsigned __int8 *)(v26 + 129))
        {
          v16 = v12;
          break;
        }
      }
      else if (v20 <= v27)
      {
        v16 = (uint64_t *)((char *)a1 + v23);
        break;
      }
      --v12;
      *(v24 - 1) = 0;
      *v24 = v25;
      v23 -= 8;
      if (!v23)
      {
        v16 = a1;
        break;
      }
    }
  }
  *v16 = v17;
  if (++v14 != 8)
    goto LABEL_14;
  return v13 + 1 == a2;
}

void md::PointLabelFeatureElement::getSummaryIconInfos(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  uint64_t v4;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const std::string::value_type *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  const std::string::value_type *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  _BYTE *v36;
  std::string *v37;
  __int128 v38;
  const std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  _QWORD **v57;
  int v58;
  std::string::value_type *__s;
  uint64_t v60;
  std::string v61[2];
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  __int128 v64;
  unint64_t v65;
  uint64_t v66;
  const std::string::value_type *v67;
  const std::string::value_type *v68;
  const std::string::value_type *v69;
  const std::string::value_type *v70;
  uint64_t *v71;

  v4 = *a2;
  if (!*a2)
  {
    *(_BYTE *)a1 = 0;
    return;
  }
  if (a3)
  {
    if (a3 == 2)
    {
      v6 = *(_BYTE *)(v4 + 208) != 0;
    }
    else
    {
      if (a3 != 1)
      {
        v6 = 0;
        v7 = 0;
        v8 = 0;
        goto LABEL_11;
      }
      v6 = *(unsigned __int8 *)(v4 + 208);
    }
    v7 = *(_DWORD *)(v4 + 196);
    v8 = 1;
  }
  else
  {
    v8 = 0;
    v6 = *(unsigned __int8 *)(v4 + 207);
    v7 = *(_DWORD *)(v4 + 192);
  }
LABEL_11:
  v64 = 0uLL;
  v65 = 0;
  {
    v53 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v53, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v66 = mdm::Allocator::instance(void)::alloc;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v65 - v64) >> 3) < v6)
  {
    v10 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                        + 16))(mdm::Allocator::instance(void)::alloc, 56 * v6, 8);
    v11 = v10 + *((_QWORD *)&v64 + 1) - v64;
    v13 = *((_QWORD *)&v64 + 1);
    v12 = v64;
    if (*((_QWORD *)&v64 + 1) != (_QWORD)v64)
    {
      v14 = v10 + *((_QWORD *)&v64 + 1) - v64;
      do
      {
        v15 = *(_QWORD *)(v13 - 56);
        v13 -= 56;
        *(_QWORD *)(v14 - 56) = v15;
        v14 -= 56;
        v16 = *(_OWORD *)(v13 + 8);
        *(_QWORD *)(v14 + 24) = *(_QWORD *)(v13 + 24);
        *(_OWORD *)(v14 + 8) = v16;
        *(_QWORD *)(v13 + 16) = 0;
        *(_QWORD *)(v13 + 24) = 0;
        *(_QWORD *)(v13 + 8) = 0;
        v17 = *(_OWORD *)(v13 + 32);
        *(_QWORD *)(v14 + 48) = *(_QWORD *)(v13 + 48);
        *(_OWORD *)(v14 + 32) = v17;
        *(_QWORD *)(v13 + 40) = 0;
        *(_QWORD *)(v13 + 48) = 0;
        *(_QWORD *)(v13 + 32) = 0;
      }
      while (v13 != v12);
      v18 = *((_QWORD *)&v64 + 1);
      v13 = v64;
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v11;
      v19 = v65;
      v65 = v10 + 56 * v6;
      while (1)
      {
        if (v18 == v13)
          goto LABEL_25;
        if (*(char *)(v18 - 1) < 0)
        {
          operator delete(*(void **)(v18 - 24));
          if ((*(char *)(v18 - 25) & 0x80000000) == 0)
            goto LABEL_17;
        }
        else if ((*(char *)(v18 - 25) & 0x80000000) == 0)
        {
          goto LABEL_17;
        }
        operator delete(*(void **)(v18 - 48));
LABEL_17:
        v18 -= 56;
      }
    }
    *(_QWORD *)&v64 = v10 + *((_QWORD *)&v64 + 1) - v64;
    *((_QWORD *)&v64 + 1) = v11;
    v19 = v65;
    v65 = v10 + 56 * v6;
LABEL_25:
    if (v13)
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v66 + 40))(v66, v13, v19 - v13);
  }
  v62 = 0;
  v63 = 0;
  v20 = *(std::__shared_weak_count **)(v4 + 8);
  if (v20)
  {
    v20 = std::__shared_weak_count::lock(v20);
    v21 = v20;
    v63 = v20;
    if (v20)
    {
      v20 = *(std::__shared_weak_count **)v4;
      v62 = *(std::__shared_weak_count **)v4;
    }
  }
  else
  {
    v21 = 0;
  }
  v54 = v21;
  v22 = geo::codec::VectorTile::labelSummaryIcons((geo::codec::VectorTile *)v20);
  if (v6)
  {
    v23 = 0;
    v24 = v22 + 12 * v7;
    v57 = (_QWORD **)(a2 + 1);
    v58 = v8;
    do
    {
      memset(v61, 0, sizeof(v61));
      v60 = *(_QWORD *)v24;
      if (v8)
      {
        v25 = *(unsigned int *)(v24 + 8);
        if ((_DWORD)v25 != -1)
        {
          if ((v67 = 0, __s = 0, a4)
            && (geo::codec::tileGetLocalizedLabel(v57, v25, (unint64_t *)&v67, (unint64_t *)&__s),
                (v26 = v67) != 0)
            && *v67
            || (geo::codec::tileGetNativeLabel((uint64_t)v57, *(unsigned int *)(v24 + 8), &v67, &__s), (v26 = v67) != 0)
            && *v67)
          {
            std::string::__assign_external(v61, v26);
            std::string::__assign_external(&v61[1], __s);
          }
        }
      }
      v27 = *((_QWORD *)&v64 + 1);
      if (*((_QWORD *)&v64 + 1) >= v65)
      {
        v29 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v64 + 1) - v64) >> 3);
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) > 0x492492492492492)
          abort();
        if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v65 - v64) >> 3) > v30)
          v30 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v65 - v64) >> 3);
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v65 - v64) >> 3)) >= 0x249249249249249)
          v31 = 0x492492492492492;
        else
          v31 = v30;
        v71 = &v66;
        if (v31)
          v32 = (const std::string::value_type *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v66 + 16))(v66, 56 * v31, 8);
        else
          v32 = 0;
        v67 = v32;
        v68 = &v32[56 * v29];
        v69 = v68;
        v70 = &v32[56 * v31];
        if (v32)
        {
          *(_QWORD *)&v32[56 * v29] = v60;
          if (SHIBYTE(v61[0].__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v32[56 * v29 + 8], v61[0].__r_.__value_.__l.__data_, v61[0].__r_.__value_.__l.__size_);
          }
          else
          {
            v33 = *(_OWORD *)&v61[0].__r_.__value_.__l.__data_;
            *(_QWORD *)&v32[56 * v29 + 24] = *((_QWORD *)&v61[0].__r_.__value_.__l + 2);
            *(_OWORD *)&v32[56 * v29 + 8] = v33;
          }
          v37 = (std::string *)&v32[56 * v29 + 32];
          if (SHIBYTE(v61[1].__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v37, v61[1].__r_.__value_.__l.__data_, v61[1].__r_.__value_.__l.__size_);
          }
          else
          {
            v38 = *(_OWORD *)&v61[1].__r_.__value_.__l.__data_;
            *(_QWORD *)&v32[56 * v29 + 48] = *((_QWORD *)&v61[1].__r_.__value_.__l + 2);
            *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v38;
          }
        }
        v39 = v68;
        v36 = v69 + 56;
        v41 = *((_QWORD *)&v64 + 1);
        v40 = v64;
        if (*((_QWORD *)&v64 + 1) != (_QWORD)v64)
        {
          do
          {
            v42 = *(_QWORD *)(v41 - 56);
            v41 -= 56;
            *((_QWORD *)v39 - 7) = v42;
            v39 -= 56;
            v43 = *(_OWORD *)(v41 + 8);
            *((_QWORD *)v39 + 3) = *(_QWORD *)(v41 + 24);
            *(_OWORD *)(v39 + 8) = v43;
            *(_QWORD *)(v41 + 16) = 0;
            *(_QWORD *)(v41 + 24) = 0;
            *(_QWORD *)(v41 + 8) = 0;
            v44 = *(_OWORD *)(v41 + 32);
            *((_QWORD *)v39 + 6) = *(_QWORD *)(v41 + 48);
            *((_OWORD *)v39 + 2) = v44;
            *(_QWORD *)(v41 + 40) = 0;
            *(_QWORD *)(v41 + 48) = 0;
            *(_QWORD *)(v41 + 32) = 0;
          }
          while (v41 != v40);
          v45 = *((_QWORD *)&v64 + 1);
          v41 = v64;
          *(_QWORD *)&v64 = v39;
          *((_QWORD *)&v64 + 1) = v36;
          v46 = v65;
          v65 = (unint64_t)v70;
          while (2)
          {
            if (v45 == v41)
              goto LABEL_78;
            if (*(char *)(v45 - 1) < 0)
            {
              operator delete(*(void **)(v45 - 24));
              if (*(char *)(v45 - 25) < 0)
                goto LABEL_76;
            }
            else if (*(char *)(v45 - 25) < 0)
            {
LABEL_76:
              operator delete(*(void **)(v45 - 48));
            }
            v45 -= 56;
            continue;
          }
        }
        *(_QWORD *)&v64 = v68;
        *((_QWORD *)&v64 + 1) = v69 + 56;
        v46 = v65;
        v65 = (unint64_t)v70;
LABEL_78:
        v8 = v58;
        if (v41)
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)*v71 + 40))(*v71, v41, v46 - v41);
      }
      else
      {
        if (*((_QWORD *)&v64 + 1))
        {
          **((_QWORD **)&v64 + 1) = v60;
          if (SHIBYTE(v61[0].__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v27 + 8), v61[0].__r_.__value_.__l.__data_, v61[0].__r_.__value_.__l.__size_);
          }
          else
          {
            v28 = *(_OWORD *)&v61[0].__r_.__value_.__l.__data_;
            *(_QWORD *)(v27 + 24) = *((_QWORD *)&v61[0].__r_.__value_.__l + 2);
            *(_OWORD *)(v27 + 8) = v28;
          }
          v34 = (std::string *)(v27 + 32);
          if (SHIBYTE(v61[1].__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v34, v61[1].__r_.__value_.__l.__data_, v61[1].__r_.__value_.__l.__size_);
          }
          else
          {
            v35 = *(_OWORD *)&v61[1].__r_.__value_.__l.__data_;
            *(_QWORD *)(v27 + 48) = *((_QWORD *)&v61[1].__r_.__value_.__l + 2);
            *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
          }
        }
        v36 = (_BYTE *)(v27 + 56);
      }
      *((_QWORD *)&v64 + 1) = v36;
      if (SHIBYTE(v61[1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v61[1].__r_.__value_.__l.__data_);
        if (SHIBYTE(v61[0].__r_.__value_.__r.__words[2]) < 0)
LABEL_84:
          operator delete(v61[0].__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v61[0].__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_84;
      }
      ++v23;
      v24 += 12;
    }
    while (v23 != v6);
  }
  *(_BYTE *)a1 = 1;
  *(_OWORD *)(a1 + 8) = v64;
  v47 = v66;
  *(_QWORD *)(a1 + 24) = v65;
  *(_QWORD *)(a1 + 32) = v47;
  v64 = 0uLL;
  v65 = 0;
  if (v54)
  {
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
    v50 = v64;
    if ((_QWORD)v64)
    {
      v51 = *((_QWORD *)&v64 + 1);
      v52 = v64;
      if (*((_QWORD *)&v64 + 1) == (_QWORD)v64)
      {
LABEL_100:
        *((_QWORD *)&v64 + 1) = v50;
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v66 + 40))(v66, v52, v65 - v52);
        return;
      }
      while (1)
      {
        if (*(char *)(v51 - 1) < 0)
        {
          operator delete(*(void **)(v51 - 24));
          if (*(char *)(v51 - 25) < 0)
LABEL_98:
            operator delete(*(void **)(v51 - 48));
        }
        else if (*(char *)(v51 - 25) < 0)
        {
          goto LABEL_98;
        }
        v51 -= 56;
        if (v51 == v50)
        {
          v52 = v64;
          goto LABEL_100;
        }
      }
    }
  }
}

void sub_19FEC11AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  std::vector<md::PointLabelSummaryIconInfo,geo::StdAllocator<md::PointLabelSummaryIconInfo,mdm::Allocator>>::~vector[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t md::PointLabelFeature::newLabeledImageAnnotationPart(md::PartCreationContext const&,md::AnnotationID)::$_0::operator()(uint64_t **a1, md::LabelPart **a2, _QWORD *a3, int *a4)
{
  unsigned __int8 v8;
  uint64_t v9;
  md::LabelPart *v10;
  unsigned __int8 v11;
  md::LabelPart *v12;
  uint64_t v13;
  md::LabelPart *v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  int v20;
  char v21;
  char v22;

  (*(void (**)(md::LabelPart *, uint64_t))(*(_QWORD *)*a2 + 176))(*a2, 10);
  {
    v16 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v16, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 1168, 8);
  v10 = (md::LabelPart *)v9;
  LOBYTE(v18) = 0;
  v22 = 0;
  if (*((_BYTE *)a4 + 10))
  {
    v19 = 0;
    if (*((_BYTE *)a4 + 4))
    {
      v18 = *a4;
      v19 = 1;
    }
    LOBYTE(v20) = 0;
    v21 = 0;
    if (*((_BYTE *)a4 + 9))
    {
      v20 = *(int *)((char *)a4 + 5);
      v21 = 1;
    }
    v22 = 1;
  }
  md::HorizontalTextLabelPart::HorizontalTextLabelPart(v9, a3, (uint64_t)&v18, 1);
  (*(void (**)(md::LabelPart *, uint64_t))(*(_QWORD *)v10 + 176))(v10, 11);
  {
    v17 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v17, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v12 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                              + 16))(mdm::Allocator::instance(void)::alloc, 696, 8);
  v13 = md::StackLabelPart::StackLabelPart((uint64_t)v12, 1, 0, 1, 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 176))(v13, 12);
  *((_BYTE *)v12 + 630) = 1;
  v14 = *a2;
  *a2 = 0;
  md::CompositeLabelPart::addLabelPart((uint64_t)v12, v14);
  md::CompositeLabelPart::addLabelPart((uint64_t)v12, v10);
  return md::CompositeLabelPart::addLabelPart(**a1, v12);
}

void sub_19FEC1464(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t md::PointLabelFeature::createGraphicAnnotationPart(uint64_t *a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  _DWORD *v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  md::LabelStyle *v39;
  std::__shared_count *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  std::string *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  double v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  int *v59;
  int v60;
  uint64_t v61;
  int v62;
  char v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  int v66;
  char v67;
  char v68;
  std::string v69[2];
  std::string *v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  if (a3 == 1)
  {
    v6 = a2[2];
    v7 = *(_QWORD *)(v6 + 312);
    if (a4 == 1)
    {
      if (!v7)
      {
        v8 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(a2[2]);
        v7 = *v8;
        *(_QWORD *)(v6 + 312) = *v8;
      }
      v9 = (_BYTE *)(v7 + 48);
    }
    else
    {
      if (!v7)
      {
        v13 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(a2[2]);
        v7 = *v13;
        *(_QWORD *)(v6 + 312) = *v13;
      }
      v9 = (_BYTE *)(v7 + 50);
    }
  }
  else
  {
    v10 = a2[2];
    v11 = *(_QWORD *)(v10 + 312);
    if (!v11)
    {
      v12 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(a2[2]);
      v11 = *v12;
      *(_QWORD *)(v10 + 312) = *v12;
    }
    v9 = (_BYTE *)(v11 + 53);
  }
  v14 = 0;
  switch(*v9)
  {
    case 0:
    case 2:
      return (*(uint64_t (**)(uint64_t *, uint64_t *))(*a1 + 728))(a1, a2);
    case 1:
    case 6:
      return v14;
    case 3:
      v16 = a2[2];
      v17 = *(_QWORD *)(v16 + 272);
      if (!v17)
      {
        v18 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(a2[2]);
        v17 = *v18;
        *(_QWORD *)(v16 + 272) = *v18;
      }
      v14 = v17 + 80;
      v19 = *(char *)(v17 + 103);
      if (v19 < 0)
        goto LABEL_36;
      goto LABEL_21;
    case 4:
      v20 = a2[2];
      v21 = *(_QWORD *)(v20 + 272);
      if (!v21)
      {
        v22 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(a2[2]);
        v21 = *v22;
        *(_QWORD *)(v20 + 272) = *v22;
      }
      v14 = v21 + 112;
      v19 = *(char *)(v21 + 135);
      if ((v19 & 0x80000000) == 0)
        goto LABEL_21;
      goto LABEL_36;
    case 5:
      v23 = a2[2];
      v24 = *(_QWORD *)(v23 + 296);
      if (!v24)
      {
        v25 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a2[2], 0);
        v24 = *v25;
        *(_QWORD *)(v23 + 296) = *v25;
      }
      v26 = a1[82];
      if (!v26)
        return 0;
      v27 = *(unsigned __int8 *)(v26 + 33);
      if (!*(_BYTE *)(v26 + 33))
        return 0;
      v28 = *(_DWORD *)(v24 + 64);
      v29 = *(_DWORD **)v26;
      if (**(_DWORD **)v26 == v28)
      {
        v30 = 0;
LABEL_29:
        v31 = v29[2 * v30 + 1];
        v32 = a2[2];
        v33 = *(_QWORD *)(v32 + 296);
        if (!v33)
        {
          v34 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a2[2], 0);
          v33 = *v34;
          *(_QWORD *)(v32 + 296) = *v34;
        }
        v35 = *(_DWORD *)(v33 + 64);
        if (v35)
        {
          v14 = 0;
          goto LABEL_38;
        }
        return 0;
      }
      v30 = 0;
      v59 = v29 + 2;
      do
      {
        if (v27 - 1 == v30)
          return 0;
        v60 = *v59;
        v59 += 2;
        ++v30;
      }
      while (v60 != v28);
      if (v30 < v27)
        goto LABEL_29;
      return 0;
    case 7:
      v36 = a2[2];
      v37 = *(_QWORD *)(v36 + 272);
      if (!v37)
      {
        v38 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(a2[2]);
        v37 = *v38;
        *(_QWORD *)(v36 + 272) = *v38;
      }
      v14 = v37 + 144;
      v19 = *(char *)(v37 + 167);
      if (v19 < 0)
      {
LABEL_36:
        if (!*(_QWORD *)(v14 + 8))
          return 0;
      }
      else
      {
LABEL_21:
        if (!(_BYTE)v19)
          return 0;
      }
      LOWORD(v31) = 0;
      v35 = 0;
LABEL_38:
      v40 = (std::__shared_count *)a2[1];
      v39 = (md::LabelStyle *)a2[2];
      v41 = *a2;
      v42 = *((_QWORD *)v39 + 37);
      v43 = (uint64_t)v39;
      if (v42)
      {
        v44 = *((_QWORD *)v39 + 39);
        if (v44)
          goto LABEL_40;
      }
      else
      {
        v47 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a2[2], 0);
        v42 = *v47;
        *((_QWORD *)v39 + 37) = *v47;
        v43 = a2[2];
        v44 = *(_QWORD *)(v43 + 312);
        if (v44)
          goto LABEL_40;
      }
      v48 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(v43);
      v44 = *v48;
      *(_QWORD *)(v43 + 312) = *v48;
LABEL_40:
      v45 = *(unsigned __int8 *)(v44 + 45);
      if ((v45 - 5) <= 1u
        && (md::PointLabelFeature::iconPackColor((uint64_t)&v66, a1, (uint64_t)a2, v45), v68))
      {
        LOBYTE(v62) = 0;
        v63 = 0;
        if (v67)
        {
          v62 = v66;
          v63 = 1;
        }
      }
      else
      {
        LOBYTE(v62) = 0;
        v63 = 0;
      }
      if (!(*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1))
      {
        v70 = 0;
        memset(v69, 0, sizeof(v69));
        goto LABEL_57;
      }
      v46 = a1[63];
      if (*(char *)(v46 + 143) < 0)
        std::string::__init_copy_ctor_external(v69, *(const std::string::value_type **)(v46 + 120), *(_QWORD *)(v46 + 128));
      else
        v69[0] = *(std::string *)(v46 + 120);
      v49 = *(_QWORD *)(v46 + 168);
      if (!v49)
        goto LABEL_55;
      if (v49 == v46 + 144)
      {
        v70 = &v69[1];
        (*(void (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49);
      }
      else
      {
        v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
LABEL_55:
        v70 = (std::string *)v49;
      }
LABEL_57:
      md::LabelStyle::createIcon(&v64, v39, v41, v40, a1 + 82, (void **)v14, v35, v31, 1, v42, (char *)&v62, (uint64_t)v69);
      v50 = v70;
      if (v70 == &v69[1])
      {
        v51 = 4;
        v50 = &v69[1];
      }
      else
      {
        if (!v70)
          goto LABEL_62;
        v51 = 5;
      }
      (*(void (**)(void))(v50->__r_.__value_.__r.__words[0] + 8 * v51))();
LABEL_62:
      if (SHIBYTE(v69[0].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v69[0].__r_.__value_.__l.__data_);
        v52 = v64;
        if (v64)
          goto LABEL_64;
LABEL_68:
        v56 = v65;
        if (!v65)
          goto LABEL_73;
        goto LABEL_69;
      }
      v52 = v64;
      if (!v64)
        goto LABEL_68;
LABEL_64:
      {
        v61 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v61, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
      v54 = md::IconLabelPart::IconLabelPart(v14, &v64);
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v55 + 176))(v55, 10, v54);
      v56 = v65;
      if (v65)
      {
LABEL_69:
        p_shared_owners = (unint64_t *)&v56->__shared_owners_;
        do
          v58 = __ldaxr(p_shared_owners);
        while (__stlxr(v58 - 1, p_shared_owners));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
LABEL_73:
      if (!v52)
        return 0;
      return v14;
    default:
      return 0;
  }
}

void sub_19FEC1A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19FEC1A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  md::CustomImageData::~CustomImageData((md::CustomImageData *)va);
  _Unwind_Resume(a1);
}

void sub_19FEC1A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t geo::optional<std::vector<md::PointLabelSummaryIconInfo,geo::StdAllocator<md::PointLabelSummaryIconInfo,mdm::Allocator>>>::~optional(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)a1)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (!v2)
    {
LABEL_13:
      *(_BYTE *)a1 = 0;
      return a1;
    }
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(_QWORD *)(a1 + 8);
    if (v3 == v2)
    {
LABEL_12:
      *(_QWORD *)(a1 + 16) = v2;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), v4, *(_QWORD *)(a1 + 24) - v4);
      goto LABEL_13;
    }
    while (1)
    {
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if (*(char *)(v3 - 25) < 0)
LABEL_10:
          operator delete(*(void **)(v3 - 48));
      }
      else if (*(char *)(v3 - 25) < 0)
      {
        goto LABEL_10;
      }
      v3 -= 56;
      if (v3 == v2)
      {
        v4 = *(_QWORD *)(a1 + 8);
        goto LABEL_12;
      }
    }
  }
  return a1;
}

uint64_t *std::vector<md::PointLabelSummaryIconInfo,geo::StdAllocator<md::PointLabelSummaryIconInfo,mdm::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
      return a1;
    }
    while (1)
    {
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if (*(char *)(v3 - 25) < 0)
LABEL_9:
          operator delete(*(void **)(v3 - 48));
      }
      else if (*(char *)(v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 56;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

uint64_t std::__split_buffer<md::PointLabelSummaryIconInfo,geo::StdAllocator<md::PointLabelSummaryIconInfo,mdm::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 25) & 0x80000000) == 0)
        continue;
    }
    else if ((*(char *)(i - 25) & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(*(void **)(i - 48));
  }
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 40))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1);
  return a1;
}

uint64_t md::PointLabelFeature::externalFeatureTextIndex(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned __int8 v9;
  uint64_t v10;
  _QWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = a1[63];
  if (!v3)
    return 255;
  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(_QWORD *)(v3 + 56);
  if (v4 == v5)
    return 255;
  while (*(unsigned __int8 *)(v4 + 1) != a2)
  {
    v4 += 104;
    if (v4 == v5)
      return 255;
  }
  v9 = atomic_load((unsigned __int8 *)(a3 + 3392));
  if ((v9 & 1) != 0)
  {
    if (*(char *)(v4 + 79) < 0)
    {
      if (*(_QWORD *)(v4 + 64))
        goto LABEL_10;
    }
    else if (*(_BYTE *)(v4 + 79))
    {
LABEL_10:
      md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp<std::string>(v11, (_QWORD *)(v4 + 56));
      v10 = md::PointLabelFeature::indexForTextEntry(a1, (uint64_t)v11);
      goto LABEL_13;
    }
  }
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp<std::string>(v11, (_QWORD *)(v4 + 8));
  v10 = md::PointLabelFeature::indexForTextEntry(a1, (uint64_t)v11);
LABEL_13:
  v7 = v10;
  if (SHIBYTE(v15) < 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 40))(v16, v14, v15 & 0x7FFFFFFFFFFFFFFFLL);
    if (SHIBYTE(v12) < 0)
LABEL_17:
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v13 + 40))(v13, v11[0], v12 & 0x7FFFFFFFFFFFFFFFLL);
  }
  else if (SHIBYTE(v12) < 0)
  {
    goto LABEL_17;
  }
  return v7;
}

void sub_19FEC1D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~StringWithLocaleImp((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::vector<md::PointLabelFeature::WorkUnit,geo::StdAllocator<md::PointLabelFeature::WorkUnit,mdm::Allocator>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  geo::read_write_lock *v14;
  const char *v15;
  malloc_zone_t *zone;

  v2 = *a1;
  v3 = a1[1];
  if (v3 != *a1)
  {
    do
    {
      v5 = *(std::__shared_weak_count **)(v3 - 24);
      if (!v5)
        goto LABEL_10;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v8 = *(_QWORD **)(v3 - 40);
        if (v8)
        {
LABEL_11:
          if ((*v8)-- == 1)
          {
            v10 = (std::__shared_weak_count *)v8[3];
            if (v10)
            {
              v11 = (unint64_t *)&v10->__shared_owners_;
              do
                v12 = __ldaxr(v11);
              while (__stlxr(v12 - 1, v11));
              if (!v12)
              {
                ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
                std::__shared_weak_count::__release_weak(v10);
              }
            }
            {
              v13 = operator new();
              *(_QWORD *)(v13 + 16) = 0x5ED09DD50000000FLL;
              *(_QWORD *)(v13 + 24) = "VectorKitLabels";
              *(_OWORD *)(v13 + 32) = xmmword_19FFB2E80;
              *(_QWORD *)v13 = &off_1E42B5668;
              *(_QWORD *)(v13 + 8) = "VectorKitLabels";
              *(_OWORD *)(v13 + 72) = 0u;
              *(_OWORD *)(v13 + 88) = 0u;
              *(_OWORD *)(v13 + 104) = 0u;
              *(_OWORD *)(v13 + 120) = 0u;
              *(_OWORD *)(v13 + 136) = 0u;
              *(_OWORD *)(v13 + 152) = 0u;
              *(_OWORD *)(v13 + 168) = 0u;
              *(_OWORD *)(v13 + 184) = 0u;
              *(_OWORD *)(v13 + 200) = 0u;
              *(_OWORD *)(v13 + 216) = 0u;
              *(_OWORD *)(v13 + 232) = 0u;
              *(_QWORD *)(v13 + 248) = 0;
              *(_OWORD *)(v13 + 56) = 0u;
              v14 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v13 + 56), 0);
              if ((_DWORD)v14)
                geo::read_write_lock::logFailure(v14, (uint64_t)"initialization", v15);
              zone = malloc_create_zone(0, 0);
              *(_QWORD *)(v13 + 48) = zone;
              malloc_set_zone_name(zone, "VectorKitLabels");
              *(_QWORD *)(v13 + 256) = os_log_create("com.apple.VectorKit", "Memory");
              mdm::Allocator::instance(void)::alloc = v13;
            }
            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *(_QWORD *)(v3 - 40), 152);
            *(_QWORD *)(v3 - 40) = 0;
          }
        }
      }
      else
      {
LABEL_10:
        v8 = *(_QWORD **)(v3 - 40);
        if (v8)
          goto LABEL_11;
      }
      v3 -= 48;
    }
    while (v3 != v2);
  }
  a1[1] = v2;
}

uint64_t *std::vector<md::PointLabelFeature::WorkUnit,geo::StdAllocator<md::PointLabelFeature::WorkUnit,mdm::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  if (*a1)
  {
    std::vector<md::PointLabelFeature::WorkUnit,geo::StdAllocator<md::PointLabelFeature::WorkUnit,mdm::Allocator>>::__clear[abi:nn180100](a1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], *a1, a1[2] - *a1);
  }
  return a1;
}

uint64_t md::PointLabelFeature::newLayoutIconPart(md::PointLabelFeature *this, const md::PartCreationContext *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  md::LabelStyle *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned __int8 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v3 = *((_QWORD *)this + 2);
  v4 = *(_QWORD *)(v3 + 272);
  if (v4)
  {
    v5 = *(char *)(v4 + 263);
    if ((v5 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v14 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*((_QWORD *)this + 2));
    v4 = *v14;
    *(_QWORD *)(v3 + 272) = *v14;
    v5 = *(char *)(v4 + 263);
    if ((v5 & 0x80000000) == 0)
    {
LABEL_3:
      if ((_BYTE)v5)
        goto LABEL_4;
      return 0;
    }
  }
  if (!*(_QWORD *)(v4 + 248))
    return 0;
LABEL_4:
  v7 = *((_QWORD *)this + 1);
  v6 = (md::LabelStyle *)*((_QWORD *)this + 2);
  v8 = *(_QWORD *)this;
  v9 = *((_QWORD *)v6 + 34);
  if (!v9)
  {
    v10 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*((_QWORD *)this + 2));
    v9 = *v10;
    *((_QWORD *)v6 + 34) = *v10;
  }
  md::LabelStyle::namedIcon(&v19, v6, v8, v7, (void **)(v9 + 240), 1);
  if (!v19)
  {
    v12 = 0;
    v13 = v20;
    if (!v20)
      return v12;
    goto LABEL_14;
  }
  {
    v18 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v18, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 840, 8);
  md::PointIconLabelPart::PointIconLabelPart(v12, &v19, *(_QWORD *)this, *((_QWORD *)this + 1), *((md::LabelStyle **)this + 2), 0);
  v13 = v20;
  if (v20)
  {
LABEL_14:
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v12;
}

void sub_19FEC2170(mdm::Allocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;

  v11 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 40))(v11, v9, 840);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

uint64_t md::PointLabelFeature::newTextPart(md::LabelFeature *a1, _QWORD *a2, unsigned int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unsigned __int8 v36;
  uint64_t *v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  int v43;
  unint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  __n128 v47;
  mdm::Allocator *v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_count *v52;
  size_t v53;
  uint64_t v54;
  uint64_t *v55;
  size_t v56;
  __int128 *v57;
  void **p_shared_weak_owners;
  __int128 v59;
  size_t v60;
  __int128 *v61;
  __int128 *v62;
  size_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unsigned __int8 v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *shared_owners;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *p_shared_owners;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE v86[12];
  std::__shared_count v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[2];
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  md::LabelImageKey *v95;
  uint64_t v96;
  md::LabelImageKey *v97;
  std::__shared_weak_count *v98;

  v4 = a3;
  v5 = *((_QWORD *)a1 + 68);
  if (a3 >= (unint64_t)((*((_QWORD *)a1 + 69) - v5) >> 6))
    return 0;
  if (!*(_BYTE *)(*a2 + 3032))
  {
    v10 = a2[2];
    v11 = *(_QWORD *)(v10 + 272);
    if (v11)
    {
      if (!*(_BYTE *)(v11 + 72))
        return 0;
    }
    else
    {
      v12 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(a2[2]);
      v13 = *v12;
      *(_QWORD *)(v10 + 272) = *v12;
      if (!*(_BYTE *)(v13 + 72))
        return 0;
    }
    v5 = *((_QWORD *)a1 + 68);
  }
  v14 = (uint64_t *)(v5 + (v4 << 6));
  if (*((char *)v14 + 23) < 0)
  {
    if (!v14[1])
      return 0;
  }
  else if (!*((_BYTE *)v14 + 23))
  {
    return 0;
  }
  v15 = *((_QWORD *)a1 + 63);
  if (!v15)
    goto LABEL_15;
  v16 = *(unsigned __int8 *)(v15 + 88);
  if (v16 == 3)
    return 0;
  if (!v16)
  {
LABEL_15:
    if (!*(_BYTE *)(a2[2] + 121))
      return 0;
  }
  if (!*(_BYTE *)(*a2 + 3032))
  {
    v17 = a2[2];
    v18 = *(_QWORD *)(v17 + 272);
    if (!v18)
    {
      v19 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(a2[2]);
      v18 = *v19;
      *(_QWORD *)(v17 + 272) = *v19;
    }
    if (!*(_BYTE *)(v18 + 73))
      return 0;
  }
  v20 = a2[2];
  v21 = a4 == 1;
  v22 = v20 + 280;
  if (a4 == 1)
    v23 = 6;
  else
    v23 = 0;
  v24 = *(_QWORD *)(v22 + 8 * (a4 == 1));
  if (v24)
  {
    if (vabds_f32(*(float *)(v24 + 8), *(float *)(v20 + 104)) >= 0.01)
    {
      md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(v20, v24, v23);
      v24 = *(_QWORD *)(v22 + 8 * v21);
    }
  }
  else
  {
    v24 = md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(v20, v23);
    *(_QWORD *)(v22 + 8 * v21) = v24;
  }
  v25 = *(_QWORD *)v24;
  v26 = a2[2];
  v27 = *(_QWORD *)(v26 + 272);
  if (v27)
  {
    if (*(_BYTE *)(v27 + 70))
      goto LABEL_29;
    goto LABEL_40;
  }
  v37 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(a2[2]);
  v38 = *v37;
  *(_QWORD *)(v26 + 272) = *v37;
  if (!*(_BYTE *)(v38 + 70))
  {
LABEL_40:
    if (*(float *)(v25 + 100) > 0.0)
    {
      v39 = *(_BYTE *)(a2[1] + 404);
      v40 = (*(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)a1 + 488))(a1);
      v41 = (unsigned __int8 *)*((_QWORD *)a1 + 20);
      v42 = (unsigned __int8 *)*((_QWORD *)a1 + 21);
      if (v40 > 0x6DB6DB6DB6DB6DB7 * ((v42 - v41) >> 3))
      {
        md::LabelFeature::updateTextVector(a1);
        v41 = (unsigned __int8 *)*((_QWORD *)a1 + 20);
        v42 = (unsigned __int8 *)*((_QWORD *)a1 + 21);
      }
      md::TextDataStore::textDataForZoom(&v97, v41, v42, a3, v25 + 72);
      md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp((uint64_t)&v87, " … ", 0);
      v43 = md::PointLabelFeature::indexForTextEntry((uint64_t *)a1, (uint64_t)&v87);
      if (SHIBYTE(v91) < 0)
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v92 + 40))(v92, v90[0], v91 & 0x7FFFFFFFFFFFFFFFLL);
      if (SHIBYTE(v88) < 0)
        (*(void (**)(uint64_t, std::__shared_count_vtbl *, uint64_t))(*(_QWORD *)v89 + 40))(v89, v87.__vftable, v88 & 0x7FFFFFFFFFFFFFFFLL);
      v44 = (*(uint64_t (**)(md::LabelFeature *))(*(_QWORD *)a1 + 488))(a1);
      v45 = (unsigned __int8 *)*((_QWORD *)a1 + 20);
      v46 = (unsigned __int8 *)*((_QWORD *)a1 + 21);
      if (v44 > 0x6DB6DB6DB6DB6DB7 * ((v46 - v45) >> 3))
      {
        md::LabelFeature::updateTextVector(a1);
        v45 = (unsigned __int8 *)*((_QWORD *)a1 + 20);
        v46 = (unsigned __int8 *)*((_QWORD *)a1 + 21);
      }
      md::TextDataStore::textDataForZoom(&v87, v45, v46, v43, v25 + 72);
      if (v97)
      {
        v48 = (mdm::Allocator *)std::make_shared[abi:nn180100]<md::LabelText,std::shared_ptr<md::TextDataString> &,std::shared_ptr<md::TextDataString> &,unsigned char const&,void>((uint64_t *)&v95, (uint64_t)v97, (uint64_t)v98, &v87, v39);
        if (v95)
        {
          v49 = mdm::Allocator::instance(v48);
          v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, 1168, 8);
          md::PointLabelFeature::textColor(v86, (uint64_t *)a1, (uint64_t)a2, a4);
          md::HorizontalTextLabelPart::HorizontalTextLabelPart(v50, &v95, (uint64_t)v86, a4);
        }
        else
        {
          v50 = 0;
        }
        std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v95);
      }
      else
      {
        v50 = 0;
      }
      shared_owners = (std::__shared_weak_count *)v87.__shared_owners_;
      if (v87.__shared_owners_)
      {
        v79 = (unint64_t *)(v87.__shared_owners_ + 8);
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
          std::__shared_weak_count::__release_weak(shared_owners);
        }
      }
      v75 = v98;
      if (!v98)
        goto LABEL_117;
      p_shared_owners = (unint64_t *)&v98->__shared_owners_;
      do
        v77 = __ldaxr(p_shared_owners);
      while (__stlxr(v77 - 1, p_shared_owners));
      goto LABEL_115;
    }
    return 0;
  }
LABEL_29:
  if (*((char *)v14 + 23) < 0)
    v14 = (uint64_t *)*v14;
  v29 = (std::__shared_count *)a2[1];
  v28 = a2[2];
  v30 = *a2;
  v31 = (std::__shared_weak_count *)operator new(0x148uLL);
  v31->__shared_owners_ = 0;
  v31->__shared_weak_owners_ = 0;
  v31->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB010;
  v31[1].std::__shared_count = 0u;
  *(_OWORD *)&v31[1].__shared_weak_owners_ = 0u;
  v31[2].__shared_owners_ = 0;
  {
    v82 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v82, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v33 = mdm::Allocator::instance(void)::alloc;
  v31[6].__vftable = 0;
  v31[3].__vftable = 0;
  v31[3].__shared_owners_ = 0;
  v31[2].__shared_weak_owners_ = v33;
  LOWORD(v31[3].__shared_weak_owners_) = 0;
  v31[4].__vftable = (std::__shared_weak_count_vtbl *)&v31[5].__shared_owners_;
  v31[4].__shared_owners_ = (uint64_t)&v31[5].__shared_owners_;
  v31[4].__shared_weak_owners_ = (uint64_t)&v31[5].__shared_owners_;
  v31[5].__vftable = (std::__shared_weak_count_vtbl *)2;
  LOBYTE(v31[5].__shared_weak_owners_) = 0;
  *(_DWORD *)((char *)&v31[5].__shared_weak_owners_ + 1) = 16843008;
  BYTE5(v31[5].__shared_weak_owners_) = 0;
  v31[6].__shared_owners_ = 0;
  v31[6].__shared_weak_owners_ = 0;
  {
    v83 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v83, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v31[7].__vftable = (std::__shared_weak_count_vtbl *)mdm::Allocator::instance(void)::alloc;
  v31[7].__shared_owners_ = 0;
  *(uint64_t *)((char *)&v31[7].__shared_owners_ + 5) = 0;
  LOBYTE(v31[8].__vftable) = 4;
  *(std::__shared_weak_count_vtbl **)((char *)&v31[8].__vftable + 4) = 0;
  BYTE4(v31[8].__shared_owners_) = 0;
  *(uint64_t *)((char *)&v31[8].__shared_weak_owners_ + 4) = 0xFFFF3F800000;
  WORD2(v31[9].__vftable) = 0;
  LODWORD(v31[9].__shared_owners_) = 1065353216;
  v31[13].__shared_owners_ = 0;
  v31[10].std::__shared_count = 0u;
  *(_OWORD *)&v31[10].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v31[11].__shared_owners_ = 0u;
  v31[12].__vftable = 0;
  v97 = (md::LabelImageKey *)&v31[1];
  v98 = v31;
  LOBYTE(v31[5].__shared_weak_owners_) = 5;
  LODWORD(v31[3].__shared_owners_) = *(_DWORD *)(v28 + 88);
  v31[1].std::__shared_count = v29[7];
  v34 = *(_QWORD *)(v28 + 296);
  if (!v34)
  {
    v35 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v28, 0);
    v34 = *v35;
    *(_QWORD *)(v28 + 296) = *v35;
  }
  *(std::__shared_weak_count_vtbl **)((char *)&v31[8].__vftable + 4) = *(std::__shared_weak_count_vtbl **)(v34 + 56);
  v87 = (std::__shared_count)0;
  v88 = 0;
  {
    v84 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v84, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v89 = mdm::Allocator::instance(void)::alloc;
  memset(v90, 0, 13);
  std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external(&v87, (char *)v14);
  if (SHIBYTE(v31[6].__shared_weak_owners_) < 0)
  {
    if (v88 >= 0)
      v52 = &v87;
    else
      v52 = (std::__shared_count *)v87.__vftable;
    if (v88 >= 0)
      v53 = HIBYTE(v88);
    else
      v53 = v87.__shared_owners_;
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>((void **)&v31[6].__vftable, v52, v53);
  }
  else if (v88 < 0)
  {
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>(&v31[6], v87.__vftable, v87.__shared_owners_);
  }
  else
  {
    v31[6].std::__shared_count = v87;
    v31[6].__shared_weak_owners_ = v88;
  }
  v31[7].__shared_owners_ = v90[0];
  LODWORD(v31[7].__shared_weak_owners_) = v90[1];
  BYTE4(v31[7].__shared_weak_owners_) = BYTE4(v90[1]);
  v54 = *(_QWORD *)(v28 + 272);
  if (!v54)
  {
    v55 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(v28);
    v54 = *v55;
    *(_QWORD *)(v28 + 272) = *v55;
  }
  v56 = *(unsigned __int8 *)(v54 + 231);
  if (*(char *)(v54 + 231) < 0)
  {
    if (!*(_QWORD *)(v54 + 216))
    {
LABEL_82:
      v64 = *(_QWORD *)(v30 + 264);
      v95 = (md::LabelImageKey *)&v31[1];
      v96 = (uint64_t)v31;
LABEL_83:
      v65 = (unint64_t *)&v31->__shared_owners_;
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
      goto LABEL_85;
    }
  }
  else if (!*(_BYTE *)(v54 + 231))
  {
    goto LABEL_82;
  }
  v57 = (__int128 *)(v54 + 208);
  p_shared_weak_owners = (void **)&v31[1].__shared_weak_owners_;
  if (&v31[1].__shared_weak_owners_ == (uint64_t *)(v54 + 208))
    goto LABEL_82;
  if ((SHIBYTE(v31[2].__shared_owners_) & 0x80000000) == 0)
  {
    if ((v56 & 0x80) != 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((_QWORD **)p_shared_weak_owners, *(void **)(v54 + 208), *(_QWORD *)(v54 + 216));
    }
    else
    {
      v59 = *v57;
      v31[2].__shared_owners_ = *(_QWORD *)(v54 + 224);
      *(_OWORD *)p_shared_weak_owners = v59;
    }
    goto LABEL_82;
  }
  v61 = *(__int128 **)(v54 + 208);
  v60 = *(_QWORD *)(v54 + 216);
  if ((v56 & 0x80u) == 0)
    v62 = v57;
  else
    v62 = v61;
  if ((v56 & 0x80u) == 0)
    v63 = v56;
  else
    v63 = v60;
  std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>(p_shared_weak_owners, v62, v63);
  v31 = v98;
  v64 = *(_QWORD *)(v30 + 264);
  v95 = v97;
  v96 = (uint64_t)v98;
  if (v98)
    goto LABEL_83;
LABEL_85:
  md::LabelImageLoader::loadImage(&v93, v64, &v95);
  v67 = (std::__shared_weak_count *)v96;
  if (v96)
  {
    v68 = (unint64_t *)(v96 + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  if (SHIBYTE(v88) < 0)
    (*(void (**)(uint64_t, std::__shared_count_vtbl *, uint64_t))(*(_QWORD *)v89 + 40))(v89, v87.__vftable, v88 & 0x7FFFFFFFFFFFFFFFLL);
  v70 = v98;
  if (v98)
  {
    v71 = (unint64_t *)&v98->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (v93)
  {
    {
      v85 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v85, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
    v47.n128_f64[0] = md::IconLabelPart::IconLabelPart(v50, &v93);
    *(_QWORD *)v74 = off_1E4293608;
    *(_BYTE *)(v74 + 557) = 1;
    *(_BYTE *)(v74 + 656) = 1;
    v75 = v94;
    if (!v94)
      goto LABEL_117;
    goto LABEL_102;
  }
  v50 = 0;
  v75 = v94;
  if (v94)
  {
LABEL_102:
    v76 = (unint64_t *)&v75->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
LABEL_115:
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v75->__on_zero_shared)(v75, v47);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
LABEL_117:
  if (v50)
    (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v50 + 176))(v50, 5, v47);
  return v50;
}

void sub_19FEC2A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v3 - 96);
  _Unwind_Resume(a1);
}

void sub_19FEC2AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (SHIBYTE(a6) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a7 + 40))(a7, a4, a6 & 0x7FFFFFFFFFFFFFFFLL);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v13 - 96);
  _Unwind_Resume(a1);
}

uint64_t std::make_shared[abi:nn180100]<md::LabelText,std::shared_ptr<md::TextDataString> &,std::shared_ptr<md::TextDataString> &,unsigned char const&,void>(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4, char a5)
{
  _QWORD *v10;
  uint64_t result;

  v10 = operator new(0xB0uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_1E42DDF50;
  result = md::LabelText::LabelText((uint64_t)(v10 + 3), a2, a3, a4, a5);
  *a1 = result;
  a1[1] = (uint64_t)v10;
  return result;
}

void md::PointLabelFeature::textColor(_BYTE *a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  int v12;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = a4 == 1;
  v9 = v7 + 280;
  if (a4 == 1)
    v10 = 6;
  else
    v10 = 0;
  v11 = *(float **)(v9 + 8 * (a4 == 1));
  if (v11)
  {
    if (vabds_f32(v11[2], *(float *)(v7 + 104)) >= 0.01)
    {
      md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>(v7, (uint64_t)v11, v10);
      v11 = *(float **)(v9 + 8 * v8);
    }
  }
  else
  {
    v11 = (float *)md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(v7, v10);
    *(_QWORD *)(v9 + 8 * v8) = v11;
  }
  v12 = *(unsigned __int8 *)(*(_QWORD *)v11 + 60);
  if ((v12 - 5) > 1u)
  {
    *a1 = 0;
    a1[10] = 0;
  }
  else
  {
    md::PointLabelFeature::iconPackColor((uint64_t)a1, a2, a3, v12);
  }
}

uint64_t *std::vector<md::LabelFeaturePlacementInfo,geo::StdAllocator<md::LabelFeaturePlacementInfo,mdm::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = a1[1];
      do
      {
        v7 = *(void **)(v5 - 32);
        v5 -= 32;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 24) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

uint64_t *std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
      return a1;
    }
    while (1)
    {
      if (*(char *)(v3 - 9) < 0)
      {
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v3 - 8) + 40))(*(_QWORD *)(v3 - 8), *(_QWORD *)(v3 - 32), *(_QWORD *)(v3 - 16) & 0x7FFFFFFFFFFFFFFFLL);
        if (*(char *)(v3 - 41) < 0)
LABEL_9:
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v3 - 40) + 40))(*(_QWORD *)(v3 - 40), *(_QWORD *)(v3 - 64), *(_QWORD *)(v3 - 48) & 0x7FFFFFFFFFFFFFFFLL);
      }
      else if (*(char *)(v3 - 41) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 64;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void labelPointFromGeoPointFeature(GeoCodecsPointFeature *a1, const md::LabelFeatureCreationParams *a2, uint64_t a3)
{
  int v5;
  int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  float v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  int v19;
  int32x2_t v20;
  double v21;

  v5 = *(unsigned __int8 *)(a3 + 8);
  if (v5 == 255)
  {
    v13 = *(double *)(a3 + 64);
    v14 = *(double *)(a3 + 48);
    if (v13 >= v14 && (v15 = *(double *)(a3 + 72), v16 = *(double *)(a3 + 56), v15 >= v16))
    {
      v17 = v14 + (v13 - v14) * *((float *)a2 + 22);
      v18 = v16 + (v15 - v16) * *((float *)a2 + 23);
      if (*((_BYTE *)a2 + 212))
        goto LABEL_7;
    }
    else
    {
      memset_pattern16(&v20, &unk_19FFB63B0, 0x10uLL);
      v17 = *(double *)&v20;
      v18 = v21;
      if (*((_BYTE *)a2 + 212))
      {
LABEL_7:
        v19 = *((_DWORD *)a2 + 24);
LABEL_12:
        *(_QWORD *)a1 = 0;
        *((_QWORD *)a1 + 1) = 0;
        *((_QWORD *)a1 + 2) = 0;
        *((double *)a1 + 3) = v17;
        *((double *)a1 + 4) = v18;
        *((_DWORD *)a1 + 10) = v19;
        *((_WORD *)a1 + 22) = 256;
        *((_BYTE *)a1 + 46) = 1;
        return;
      }
    }
    v19 = 2139095039;
    goto LABEL_12;
  }
  v20 = vrev64_s32(*(int32x2_t *)(a3 + 12));
  v6 = *(unsigned __int8 *)(a3 + 9);
  LOBYTE(v21) = *(_BYTE *)(a3 + 9);
  BYTE1(v21) = v5;
  v7 = geo::S2CellCoordinates::xyzFromTileLocalST<double>((uint64_t)&v20, *((float *)a2 + 22), *((float *)a2 + 23))
     * 6378137.0;
  v9 = v8 * 6378137.0;
  v11 = v10 * 6356752.31;
  if (*((_BYTE *)a2 + 212))
    v12 = sqrt(ldexp(2.0943951, -2 * v6) * 4.0538689e13) * *((float *)a2 + 24);
  else
    v12 = 3.4028e38;
  *(double *)a1 = v7;
  *((double *)a1 + 1) = v9;
  *((double *)a1 + 2) = v11;
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 4) = 0;
  *((float *)a1 + 10) = v12;
  *((_WORD *)a1 + 22) = 1;
  *((_BYTE *)a1 + 46) = 0;
}

void std::__split_buffer<md::PointLabelFeature::WorkUnit,geo::StdAllocator<md::PointLabelFeature::WorkUnit,mdm::Allocator> &>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  unsigned __int8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  geo::read_write_lock *v15;
  const char *v16;
  malloc_zone_t *zone;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    v6 = *(std::__shared_weak_count **)(i - 24);
    if (!v6)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      v9 = *(_QWORD **)(i - 40);
      if (v9)
      {
LABEL_11:
        if ((*v9)-- == 1)
        {
          v11 = (std::__shared_weak_count *)v9[3];
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          {
            v14 = operator new();
            *(_QWORD *)(v14 + 16) = 0x5ED09DD50000000FLL;
            *(_QWORD *)(v14 + 24) = "VectorKitLabels";
            *(_OWORD *)(v14 + 32) = xmmword_19FFB2E80;
            *(_QWORD *)v14 = &off_1E42B5668;
            *(_QWORD *)(v14 + 8) = "VectorKitLabels";
            *(_OWORD *)(v14 + 72) = 0u;
            *(_OWORD *)(v14 + 88) = 0u;
            *(_OWORD *)(v14 + 104) = 0u;
            *(_OWORD *)(v14 + 120) = 0u;
            *(_OWORD *)(v14 + 136) = 0u;
            *(_OWORD *)(v14 + 152) = 0u;
            *(_OWORD *)(v14 + 168) = 0u;
            *(_OWORD *)(v14 + 184) = 0u;
            *(_OWORD *)(v14 + 200) = 0u;
            *(_OWORD *)(v14 + 216) = 0u;
            *(_OWORD *)(v14 + 232) = 0u;
            *(_QWORD *)(v14 + 248) = 0;
            *(_OWORD *)(v14 + 56) = 0u;
            v15 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v14 + 56), 0);
            if ((_DWORD)v15)
              geo::read_write_lock::logFailure(v15, (uint64_t)"initialization", v16);
            zone = malloc_create_zone(0, 0);
            *(_QWORD *)(v14 + 48) = zone;
            malloc_set_zone_name(zone, "VectorKitLabels");
            *(_QWORD *)(v14 + 256) = os_log_create("com.apple.VectorKit", "Memory");
            mdm::Allocator::instance(void)::alloc = v14;
          }
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *(_QWORD *)(i - 40), 152);
          *(_QWORD *)(i - 40) = 0;
        }
      }
    }
    else
    {
LABEL_10:
      v9 = *(_QWORD **)(i - 40);
      if (v9)
        goto LABEL_11;
    }
  }
}

void md::PointLabelFeature::setPOIUpdateRemoveVersion(int64x2_t *this, uint64_t a2)
{
  std::mutex *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  int64x2_t v25;
  uint64_t v26;
  uint64_t *v27;

  v4 = (std::mutex *)&this[15].u64[1];
  std::mutex::lock((std::mutex *)&this[15].u64[1]);
  v5 = this[20].u64[1];
  v6 = this[21].u64[0];
  if (v5 >= v6)
  {
    v8 = this[20].i64[0];
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v8) >> 4);
    if (v9 + 1 > 0x555555555555555)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v8) >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v12 = 0x555555555555555;
    else
      v12 = v11;
    v27 = &this[21].i64[1];
    if (v12)
    {
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)this[21].i64[1] + 16))(this[21].i64[1], 48 * v12, 8);
      v14 = v13 + 48 * v9;
      v15 = v13 + 48 * v12;
      if (v13)
      {
        *(_BYTE *)v14 = 2;
        v16 = v13 + 48 * v9;
        *(_QWORD *)(v16 + 16) = 0;
        *(_QWORD *)(v16 + 24) = 0;
        *(_QWORD *)(v16 + 8) = 0;
        *(_BYTE *)(v16 + 32) = 0;
        *(_QWORD *)(v16 + 40) = a2;
      }
    }
    else
    {
      v15 = 0;
      v14 = 48 * v9;
    }
    v7 = v14 + 48;
    v25.i64[1] = v14 + 48;
    v18 = this[20].i64[0];
    v17 = this[20].u64[1];
    if (v17 == v18)
    {
      v22 = vdupq_n_s64(v17);
    }
    else
    {
      v19 = 0;
      do
      {
        v20 = v14 + v19;
        v21 = v17 + v19;
        *(_BYTE *)(v20 - 48) = *(_BYTE *)(v17 + v19 - 48);
        *(_QWORD *)(v20 - 40) = 0;
        *(_OWORD *)(v20 - 40) = *(_OWORD *)(v17 + v19 - 40);
        *(_QWORD *)(v21 - 40) = 0;
        *(_QWORD *)(v20 - 24) = *(_QWORD *)(v17 + v19 - 24);
        *(_QWORD *)(v21 - 32) = 0;
        *(_QWORD *)(v21 - 24) = 0;
        *(_OWORD *)(v20 - 16) = *(_OWORD *)(v17 + v19 - 16);
        v19 -= 48;
      }
      while (v17 + v19 != v18);
      v14 += v19;
      v22 = this[20];
    }
    this[20].i64[0] = v14;
    this[20].i64[1] = v7;
    v25 = v22;
    v23 = this[21].i64[0];
    this[21].i64[0] = v15;
    v26 = v23;
    v24 = v22.i64[0];
    std::__split_buffer<md::PointLabelFeature::WorkUnit,geo::StdAllocator<md::PointLabelFeature::WorkUnit,mdm::Allocator> &>::__destruct_at_end[abi:nn180100]((uint64_t)&v24, v22.i64[0]);
    if (v24)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v27 + 40))(*v27, v24, v26 - v24);
  }
  else
  {
    if (v5)
    {
      *(_BYTE *)v5 = 2;
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 24) = 0;
      *(_QWORD *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 32) = 0;
      *(_QWORD *)(v5 + 40) = a2;
    }
    v7 = v5 + 48;
  }
  this[20].i64[1] = v7;
  atomic_store(1u, &this[19].u8[8]);
  std::mutex::unlock(v4);
}

void sub_19FEC35F8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19FEC3764(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19FEC38E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double md::GeocentricFrame::_updateMatrix(md::GeocentricFrame *this)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  double result;
  __int128 v29;
  double v30[16];
  double v31[16];
  double v32[6];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  double v39[11];
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  double v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _BYTE v53[80];
  __int128 v54;
  __int128 v55;
  __int128 v56;

  v2 = *((double *)this + 1);
  v3 = *((double *)this + 2) - *(double *)this;
  v4 = *((double *)this + 3) - v2;
  v5 = -*(double *)this;
  memset(&v53[40], 0, 40);
  memset(&v53[8], 0, 32);
  *(_QWORD *)v53 = 0x3FF0000000000000;
  *(_QWORD *)&v53[40] = 0x3FF0000000000000;
  v54 = 0x3FF0000000000000uLL;
  *(double *)&v55 = v5;
  *((double *)&v55 + 1) = -v2;
  v56 = xmmword_19FFB5FD0;
  v46 = 0u;
  v48 = 0;
  v51 = 0u;
  v50 = 0u;
  v47 = 0u;
  v45 = 0u;
  v44 = 0u;
  v52 = 0x3FF0000000000000;
  v43 = 1.0 / sqrt(v3 * v3 + v4 * v4);
  *(double *)&v46 = v43;
  v49 = v43;
  v32[0] = v3 * v43;
  v32[1] = -(v4 * v43);
  v32[2] = 0.0;
  v32[3] = 0.0;
  v32[4] = v4 * v43;
  v32[5] = v3 * v43;
  v33 = 0u;
  v34 = 0u;
  v36 = 0u;
  v37 = 0u;
  v35 = 0x3FF0000000000000;
  v38 = 0x3FF0000000000000;
  gm::operator*<double,4,4,4>(v39, &v43, v32);
  gm::operator*<double,4,4,4>(v31, v39, (double *)v53);
  v6 = *((double *)this + 4);
  v7 = *((double *)this + 5);
  v8 = *((double *)this + 6);
  v9 = 1.0 / sqrt(v6 * v6 + v7 * v7 + v8 * v8);
  v10 = v9 * v6;
  v11 = v9 * v7;
  v12 = v9 * v8;
  v13 = *((double *)this + 7) - v6;
  v14 = *((double *)this + 8) - v7;
  v15 = *((double *)this + 9) - v8;
  v16 = sqrt(v13 * v13 + v14 * v14 + v15 * v15);
  v17 = v13 * (1.0 / v16);
  v18 = v14 * (1.0 / v16);
  v19 = v15 * (1.0 / v16);
  v20 = -(v18 * v12 - v19 * v11);
  v21 = -(v19 * v10 - v17 * v12);
  v22 = -(v17 * v11 - v18 * v10);
  v23 = 1.0 / sqrt(v20 * v20 + v21 * v21 + v22 * v22);
  memset(&v53[40], 0, 40);
  memset(&v53[8], 0, 32);
  v24 = v23 * v22;
  *(_QWORD *)v53 = 0x3FF0000000000000;
  *(_QWORD *)&v53[40] = 0x3FF0000000000000;
  v54 = 0x3FF0000000000000uLL;
  *((_QWORD *)&v56 + 1) = 0x3FF0000000000000;
  *(double *)&v55 = v6;
  *((double *)&v55 + 1) = v7;
  *(double *)&v56 = v8;
  v46 = 0u;
  v48 = 0;
  v51 = 0u;
  v50 = 0u;
  v47 = 0u;
  v45 = 0u;
  v44 = 0u;
  v52 = 0x3FF0000000000000;
  v43 = v16;
  *(double *)&v46 = v16;
  v49 = v16;
  v39[0] = v17;
  v39[1] = v18;
  v39[4] = v23 * v20;
  v39[5] = v23 * v21;
  v39[8] = -(v23 * v21 * v19 - v24 * v18);
  v39[9] = -(v24 * v17 - v23 * v20 * v19);
  v39[2] = v19;
  v39[6] = v24;
  v39[10] = -(v23 * v20 * v18 - v23 * v21 * v17);
  v39[3] = 0.0;
  v39[7] = 0.0;
  v40 = 0u;
  v41 = 0u;
  v42 = 0x3FF0000000000000;
  gm::operator*<double,4,4,4>(v32, (double *)v53, v39);
  gm::operator*<double,4,4,4>(v30, v32, &v43);
  gm::operator*<double,4,4,4>((double *)v53, v30, v31);
  v25 = *(_OWORD *)&v53[16];
  *((_OWORD *)this + 5) = *(_OWORD *)v53;
  *((_OWORD *)this + 6) = v25;
  v26 = *(_OWORD *)&v53[48];
  *((_OWORD *)this + 7) = *(_OWORD *)&v53[32];
  *((_OWORD *)this + 8) = v26;
  v27 = v54;
  *((_OWORD *)this + 9) = *(_OWORD *)&v53[64];
  *((_OWORD *)this + 10) = v27;
  result = *(double *)&v55;
  v29 = v56;
  *((_OWORD *)this + 11) = v55;
  *((_OWORD *)this + 12) = v29;
  *((_BYTE *)this + 208) = 1;
  return result;
}

void md::FlyoverLabelMapTile::~FlyoverLabelMapTile(md::FlyoverLabelMapTile *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E429A570;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 64);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::LabelMapTile::~LabelMapTile(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E429A570;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 64);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::LabelMapTile::~LabelMapTile(this);
  JUMPOUT(0x1A1AF4E00);
}

double md::FlyoverLabelMapTile::worldPointFromMercatorPoint(uint64_t a1, double *a2)
{
  long double v4;
  long double v5;
  double v6;
  long double v7;
  double v8;
  __double2 v9;
  double v10;
  __double2 v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;

  v4 = *a2 * 6.28318531;
  v5 = exp(a2[1] * 6.28318531 + -3.14159265);
  v6 = atan(v5) * 2.0 + -1.57079633;
  v7 = fmod(v4, 6.28318531);
  v8 = fmod(v7 + 6.28318531, 6.28318531) + -3.14159265;
  v9 = __sincos_stret(v6);
  v10 = 6378137.0 / sqrt(v9.__sinval * v9.__sinval * -0.00669437999 + 1.0);
  v11 = __sincos_stret(v8);
  v12 = v10 * v9.__cosval * v11.__cosval;
  v13 = *(_QWORD *)(a1 + 504);
  if (v13)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 64))(v13))
    {
      v16 = *(_OWORD *)a2;
      v17 = 0;
      v14 = (*(uint64_t (**)(_QWORD, __int128 *, uint64_t))(**(_QWORD **)(a1 + 504) + 56))(*(_QWORD *)(a1 + 504), &v16, 1);
      if ((v14 & 0xFF00000000) != 0)
        return v12
             + *(float *)&v14
             / sqrt(v9.__sinval * 0.99330562 * v10 * 2.4747391e-14 * (v9.__sinval * 0.99330562 * v10 * 2.4747391e-14)+ v12 * 2.45817226e-14 * (v12 * 2.45817226e-14)+ v10 * v9.__cosval * v11.__sinval * 2.45817226e-14 * (v10 * v9.__cosval * v11.__sinval * 2.45817226e-14))* (v12* 2.45817226e-14);
    }
  }
  return v12;
}

_QWORD *md::FlyoverLabelMapTile::assignWorldPointToLabel(md::FlyoverLabelMapTile *this, md::Label *a2)
{
  char *v4;
  md::LabelPoint *v5;
  double v6;
  double v7;
  long double v8;
  long double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  __double2 v14;
  double v15;
  __double2 v16;
  double v17;
  long double v18;
  float v19;
  float v20;
  double v21;
  long double v22;
  double v23;
  __double2 v24;
  double v25;
  __double2 v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float64x2_t v33;
  BOOL v34;
  float v35;
  double v36;
  double v37;
  double v38;
  _QWORD *result;
  uint64_t v40;
  double v41;
  double v42;
  long double v43;
  long double v44;
  double v45;
  long double v46;
  double v47;
  __double2 v48;
  double v49;
  double v50;
  __double2 v51;
  uint64_t v52;
  double v53;
  long double v54;
  double v55;
  _QWORD v56[6];
  char v57;
  __int128 v58;

  v55 = (*((double *)this + 7) - *((double *)this + 5)) * 0.200000003;
  v4 = (char *)a2 + 48;
  v5 = (md::LabelPoint *)(*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)a2 + 1) + 112))(*((_QWORD *)a2 + 1), (char *)a2 + 48);
  v58 = *(_OWORD *)md::LabelPoint::mercatorPoint(v5);
  v6 = (*(double (**)(md::FlyoverLabelMapTile *, __int128 *))(*(_QWORD *)this + 16))(this, &v58);
  v8 = v7;
  v10 = v9;
  v11 = sqrt(v6 * v6 + v7 * v7);
  v12 = atan2(v9, v11 * 0.996647189);
  v54 = v8;
  v13 = atan2(v8, v6);
  v14 = __sincos_stret(v12);
  v53 = v10;
  v15 = atan2(v10 + v14.__sinval * v14.__sinval * 42841.3115 * v14.__sinval, v11 + v14.__cosval * v14.__cosval * -42697.6727 * v14.__cosval);
  v16 = __sincos_stret(v15);
  v17 = v11 / v16.__cosval - 6378137.0 / sqrt(1.0 - v16.__sinval * v16.__sinval * 0.00669437999);
  v18 = tan(v15 * 0.5 + 0.785398163);
  if (v17 == 1.79769313e308)
  {
    v20 = 3.4028e38;
  }
  else
  {
    v19 = v17;
    v20 = v19;
  }
  v21 = atan(v18) * 2.0 + -1.57079633;
  v22 = fmod(v13 + 3.14159265, 6.28318531);
  v23 = fmod(v22 + 6.28318531, 6.28318531) + -3.14159265;
  v24 = __sincos_stret(v21);
  v25 = 6378137.0 / sqrt(1.0 - v24.__sinval * v24.__sinval * 0.00669437999);
  v26 = __sincos_stret(v23);
  v27 = v25 * v24.__cosval * v26.__cosval;
  v28 = v25 * v24.__cosval * v26.__sinval;
  v29 = v24.__sinval * 0.99330562 * v25;
  v30 = 1.0
      / sqrt(v27 * 2.45817226e-14 * (v27 * 2.45817226e-14)+ v28 * 2.45817226e-14 * (v28 * 2.45817226e-14)+ v29 * 2.4747391e-14 * (v29 * 2.4747391e-14));
  v33.f64[0] = v30 * (v27 * 2.45817226e-14);
  v31 = v30 * (v28 * 2.45817226e-14);
  v32 = v30 * (v29 * 2.4747391e-14);
  *((_QWORD *)a2 + 65) = *(_QWORD *)&v33.f64[0];
  v33.f64[1] = v31;
  v34 = v20 != 3.4028e38;
  v35 = 0.0;
  if (v20 != 3.4028e38)
    v35 = v20;
  v36 = v35;
  *((float *)a2 + 47) = v35;
  *((_BYTE *)a2 + 192) = v34;
  *((_BYTE *)a2 + 835) = v34;
  *((double *)a2 + 62) = v27;
  *((double *)a2 + 63) = v28;
  *((double *)a2 + 64) = v29;
  v37 = 0.0;
  if (v20 != 3.4028e38)
    v37 = v35;
  v38 = *((double *)a2 + 29) * v37;
  *((double *)a2 + 82) = v38;
  *((float64x2_t *)a2 + 34) = vmulq_n_f64(v33, v38);
  *((double *)a2 + 70) = v32 * v38;
  *((double *)a2 + 66) = v31;
  *((double *)a2 + 67) = v32;
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, _QWORD, char *, double))(**((_QWORD **)a2 + 1) + 128))(v56, *((_QWORD *)a2 + 1), v4, v55);
  if (v57)
  {
    v40 = md::LabelPoint::mercatorPoint((md::LabelPoint *)v56);
    v41 = *(double *)v40;
    v42 = *(double *)(v40 + 8);
    v43 = *(double *)v40 * 6.28318531;
    v44 = exp(v42 * 6.28318531 + -3.14159265);
    v45 = atan(v44) * 2.0 + -1.57079633;
    v46 = fmod(v43, 6.28318531);
    v47 = fmod(v46 + 6.28318531, 6.28318531) + -3.14159265;
    v48 = __sincos_stret(v45);
    v49 = 6378137.0 / sqrt(v48.__sinval * v48.__sinval * -0.00669437999 + 1.0);
    v50 = (v49 + v36) * v48.__cosval;
    v51 = __sincos_stret(v47);
    v52 = operator new();
    *(_OWORD *)v52 = v58;
    *(double *)(v52 + 16) = v41;
    *(double *)(v52 + 24) = v42;
    *(double *)(v52 + 32) = v6;
    *(long double *)(v52 + 40) = v54;
    *(double *)(v52 + 48) = v53;
    *(double *)(v52 + 56) = v50 * v51.__cosval;
    *(double *)(v52 + 64) = v50 * v51.__sinval;
    *(double *)(v52 + 72) = (v36 + v49 * 0.99330562) * v48.__sinval;
    *(_BYTE *)(v52 + 208) = 0;
    result = (_QWORD *)*((_QWORD *)a2 + 84);
    *((_QWORD *)a2 + 84) = v52;
    if (result)
      result = (_QWORD *)MEMORY[0x1A1AF4E00](result, 0x1000C4015B1EB14);
    *((_BYTE *)a2 + 1293) = 1;
  }
  return result;
}

uint64_t ggl::PolygonFill::MeshPipelineState::MeshPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  _OWORD *v89;
  ggl::PolygonFillShader *v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[28];

  if ((v5 & 1) == 0)
  {
    v89 = a4;
    v97 = a2;
    v98 = a3;
    a2 = v97;
    a3 = v98;
    a4 = v89;
    if ((_DWORD)v90)
    {
      if ((v91 & 1) == 0)
      {
        if ((_DWORD)v90)
        {
          if ((v94 & 1) == 0
          {
            if ((v96 & 1) == 0
            {
              ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::defaultVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::attributesReflection(void)::r;
            *(_QWORD *)algn_1ECE43AF0 = 1;
          }
          ggl::PolygonFill::MeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::DefaultVbo>::typedReflection(void)::r;
          unk_1EE57AB40 = &ggl::PolygonFill::pipelineDataMeshPipelineDeviceStructs(void)::ref;
          qword_1EE57AB48 = 0;
          if ((v95 & 1) == 0
          {
            ggl::PolygonFill::pipelineDataMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(_QWORD *)algn_1EE57ABA8 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EE57ABB0 = (uint64_t)ggl::PolygonFill::Fill::reflection(void)::reflection;
          }
          qword_1EE57AB50 = (uint64_t)&ggl::PolygonFill::pipelineDataMeshPipelineConstantStructs(void)::ref;
          unk_1EE57AB58 = xmmword_19FFB35E0;
        }
      }
      ggl::PolygonFill::MeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolygonFill::MeshPipelineSetup::typedReflection(void)::ref;
      ggl::PolygonFillShader::typedReflection(v90);
      qword_1ECE30E58 = (uint64_t)&ggl::PolygonFillShader::typedReflection(void)::ref;
      if ((v92 & 1) == 0
      {
        ggl::PolygonFill::pipelineStateMeshPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE57AC58 = 0;
        qword_1EE57AC60 = (uint64_t)"";
        dword_1EE57AC68 = 0;
        qword_1EE57AC70 = (uint64_t)&ggl::PolygonFill::pipelineStateMeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE57AC78 = 1;
      }
      qword_1ECE30E60 = (uint64_t)&ggl::PolygonFill::pipelineStateMeshPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1ECE30E68 = 1;
      qword_1ECE30E70 = 0;
      unk_1ECE30E78 = 1;
      qword_1ECE30E80 = (uint64_t)&ggl::PolygonFill::pipelineStateMeshPipelineDeviceStructBinding(void)::ref;
      unk_1ECE30E88 = 0;
      if ((v93 & 1) == 0
      {
        ggl::PolygonFill::pipelineStateMeshPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE57ABC8 = 0;
        qword_1EE57ABD0 = (uint64_t)"view";
        dword_1EE57ABD8 = 3;
        qword_1EE57ABE0 = (uint64_t)&ggl::PolygonFill::pipelineStateMeshPipelineConstantViewBinding(void)::reflection;
        unk_1EE57ABE8 = xmmword_19FFB35A0;
        qword_1EE57ABF8 = 1;
        unk_1EE57AC00 = "transform";
        dword_1EE57AC08 = 3;
        qword_1EE57AC10 = (uint64_t)&ggl::PolygonFill::pipelineStateMeshPipelineConstantTransformBinding(void)::reflection;
        unk_1EE57AC18 = xmmword_19FFB3660;
        qword_1EE57AC28 = 2;
        unk_1EE57AC30 = "fill";
        dword_1EE57AC38 = 3;
        qword_1EE57AC40 = (uint64_t)&ggl::PolygonFill::pipelineStateMeshPipelineConstantFillBinding(void)::reflection;
        unk_1EE57AC48 = 5;
      }
      qword_1ECE30E90 = (uint64_t)&ggl::PolygonFill::pipelineStateMeshPipelineConstantStructBinding(void)::ref;
      *(_QWORD *)algn_1ECE30E98 = 3;
      a4 = v89;
      a2 = v97;
      a3 = v98;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v101 = *(_OWORD *)a3;
  *(_OWORD *)&v101[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v99 = *a4;
  v100 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::PolygonFill::MeshPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v99;
  *(_OWORD *)(a1 + 272) = v100;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v101;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v101[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 305) = 0;
  v16 = *(int8x16_t *)(a1 + 320);
  v17 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v18 = vmovl_high_s8(v17);
  v19 = vmovl_s16(*(int16x4_t *)v18.i8);
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  v21 = v20;
  v22 = vmovl_s8(*(int8x8_t *)v17.i8);
  v23 = vmovl_s16(*(int16x4_t *)v22.i8);
  *(_QWORD *)a1 = &off_1E42B5D78;
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  v24 = v20;
  v25 = vmovl_high_s16(v18);
  v20.i64[0] = v25.u32[0];
  v20.i64[1] = v25.u32[1];
  v26 = v20;
  v27 = vmovl_high_s16(v22);
  v20.i64[0] = v27.u32[0];
  v20.i64[1] = v27.u32[1];
  v28 = v20;
  v20.i64[0] = v19.u32[2];
  v20.i64[1] = v19.u32[3];
  v29 = v20;
  v20.i64[0] = v23.u32[2];
  v20.i64[1] = v23.u32[3];
  v30 = v20;
  v20.i64[0] = v25.u32[2];
  v20.i64[1] = v25.u32[3];
  v31 = v20;
  v20.i64[0] = v27.u32[2];
  v20.i64[1] = v27.u32[3];
  v32 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v20);
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v31);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v30);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v26);
  v36 = vceqzq_s8(v16);
  v37 = vmovl_high_s8(v36);
  v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v20.i64[0] = v38.u32[0];
  v20.i64[1] = v38.u32[1];
  v39 = v20;
  v40 = vmovl_s8(*(int8x8_t *)v36.i8);
  v41 = vmovl_s16(*(int16x4_t *)v40.i8);
  v20.i64[0] = v41.u32[0];
  v20.i64[1] = v41.u32[1];
  v42 = v20;
  v43 = vmovl_high_s16(v37);
  v20.i64[0] = v43.u32[0];
  v20.i64[1] = v43.u32[1];
  v44 = v20;
  v45 = vmovl_high_s16(v40);
  v20.i64[0] = v45.u32[0];
  v20.i64[1] = v45.u32[1];
  v46 = v20;
  v20.i64[0] = v38.u32[2];
  v20.i64[1] = v38.u32[3];
  v47 = v20;
  v20.i64[0] = v41.u32[2];
  v20.i64[1] = v41.u32[3];
  v48 = v20;
  v20.i64[0] = v43.u32[2];
  v20.i64[1] = v43.u32[3];
  v49 = v20;
  v20.i64[0] = v45.u32[2];
  v20.i64[1] = v45.u32[3];
  v50 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v49);
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v39), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v21));
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v42), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v24));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v44), v35);
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v46), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v28));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v47), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v48), v34);
  v57 = vorrq_s8(v50, v33);
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v20), v32);
  v59 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v60 = vmovl_s8(*(int8x8_t *)v59.i8);
  v61 = vmovl_high_s16(v60);
  v20.i64[0] = v61.i32[2];
  v20.i64[1] = v61.i32[3];
  v62 = v20;
  v63 = vmovl_high_s8(v59);
  v64 = vmovl_high_s16(v63);
  v20.i64[0] = v64.i32[2];
  v20.i64[1] = v64.i32[3];
  v65 = v20;
  v66 = vmovl_s16(*(int16x4_t *)v60.i8);
  v20.i64[0] = v66.i32[2];
  v20.i64[1] = v66.i32[3];
  v67 = v20;
  v68 = vmovl_s16(*(int16x4_t *)v63.i8);
  v20.i64[0] = v68.i32[2];
  v20.i64[1] = v68.i32[3];
  v69 = v20;
  v20.i64[0] = v61.i32[0];
  v20.i64[1] = v61.i32[1];
  v70 = v20;
  v20.i64[0] = v64.i32[0];
  v20.i64[1] = v64.i32[1];
  v71 = v20;
  v20.i64[0] = v66.i32[0];
  v20.i64[1] = v66.i32[1];
  v72 = v20;
  v20.i64[0] = v68.i32[0];
  v20.i64[1] = v68.i32[1];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v20);
  v74 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v75 = vmovl_high_s8(v74);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v20.i64[0] = v76.i32[0];
  v20.i64[1] = v76.i32[1];
  v77 = v20;
  v78 = vmovl_s8(*(int8x8_t *)v74.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v20.i64[0] = v79.i32[0];
  v20.i64[1] = v79.i32[1];
  v80 = v20;
  v81 = vmovl_high_s16(v75);
  v20.i64[0] = v81.i32[0];
  v20.i64[1] = v81.i32[1];
  v82 = v20;
  v83 = vmovl_high_s16(v78);
  v20.i64[0] = v83.i32[0];
  v20.i64[1] = v83.i32[1];
  v84 = v20;
  v20.i64[0] = v76.i32[2];
  v20.i64[1] = v76.i32[3];
  v85 = v20;
  v20.i64[0] = v79.i32[2];
  v20.i64[1] = v79.i32[3];
  v86 = v20;
  v20.i64[0] = v81.i32[2];
  v20.i64[1] = v81.i32[3];
  v87 = v20;
  v20.i64[0] = v83.i32[2];
  v20.i64[1] = v83.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v80), vbicq_s8((int8x16_t)xmmword_19FFB3170, v72)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v77), v73), v51)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v84), vbicq_s8((int8x16_t)xmmword_19FFB3190, v70)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v82), vbicq_s8((int8x16_t)xmmword_19FFB3180, v71)),
                                               v53))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v86), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v67)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v85), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v69)), v55)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v20), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v62)), v58), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v87),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v65)),
                                               v57)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

BOOL ggl::PolygonFill::MeshPipelineSetup::constantDataIsEnabled(ggl::PolygonFill::MeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::PolygonFill::MeshPipelineSetup::textureIsEnabled(ggl::PolygonFill::MeshPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t ggl::PolygonFill::CompressedMeshPipelineState::CompressedMeshPipelineState(uint64_t a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  _OWORD *v89;
  ggl::PolygonFillShader *v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[28];

  if ((v5 & 1) == 0)
  {
    v89 = a4;
    v97 = a2;
    v98 = a3;
    a2 = v97;
    a3 = v98;
    a4 = v89;
    if ((_DWORD)v90)
    {
      if ((v91 & 1) == 0)
      {
        if ((_DWORD)v90)
        {
          if ((v94 & 1) == 0
          {
            if ((v96 & 1) == 0
            {
              ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r = (uint64_t)&ggl::PolygonBase::compressedVboReflection;
            }
            ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::attributesReflection(void)::r;
            unk_1ECE43B18 = 1;
          }
          ggl::PolygonFill::CompressedMeshPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::PolygonBase::CompressedVbo>::typedReflection(void)::r;
          unk_1EE57AB70 = &ggl::PolygonFill::pipelineDataCompressedMeshPipelineDeviceStructs(void)::ref;
          qword_1EE57AB78 = 0;
          if ((v95 & 1) == 0
          {
            ggl::PolygonFill::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
            *(_QWORD *)algn_1EE57AC88 = ggl::Tile::Transform::reflection(void)::reflection;
            qword_1EE57AC90 = (uint64_t)ggl::PolygonFill::Fill::reflection(void)::reflection;
          }
          qword_1EE57AB80 = (uint64_t)&ggl::PolygonFill::pipelineDataCompressedMeshPipelineConstantStructs(void)::ref;
          *(_OWORD *)algn_1EE57AB88 = xmmword_19FFB35E0;
        }
      }
      ggl::PolygonFill::CompressedMeshPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::PolygonFill::CompressedMeshPipelineSetup::typedReflection(void)::ref;
      ggl::PolygonFillShader::typedReflection(v90);
      qword_1ECE30EA8 = (uint64_t)&ggl::PolygonFillShader::typedReflection(void)::ref;
      if ((v92 & 1) == 0
      {
        ggl::PolygonFill::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr = 0;
        *(_QWORD *)algn_1EE57AD38 = 0;
        qword_1EE57AD40 = (uint64_t)"";
        dword_1EE57AD48 = 0;
        qword_1EE57AD50 = (uint64_t)&ggl::PolygonFill::pipelineStateCompressedMeshPipelineAttributeBinding_0(void)::attr;
        unk_1EE57AD58 = 1;
      }
      qword_1ECE30EB0 = (uint64_t)&ggl::PolygonFill::pipelineStateCompressedMeshPipelineAttributeStructBinding(void)::attr;
      *(_QWORD *)algn_1ECE30EB8 = 1;
      qword_1ECE30EC0 = 0;
      unk_1ECE30EC8 = 1;
      qword_1ECE30ED0 = (uint64_t)&ggl::PolygonFill::pipelineStateCompressedMeshPipelineDeviceStructBinding(void)::ref;
      unk_1ECE30ED8 = 0;
      if ((v93 & 1) == 0
      {
        ggl::PolygonFill::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref = 0;
        *(_QWORD *)algn_1EE57ACA8 = 0;
        qword_1EE57ACB0 = (uint64_t)"view";
        dword_1EE57ACB8 = 3;
        qword_1EE57ACC0 = (uint64_t)&ggl::PolygonFill::pipelineStateCompressedMeshPipelineConstantViewBinding(void)::reflection;
        unk_1EE57ACC8 = xmmword_19FFB35A0;
        qword_1EE57ACD8 = 1;
        unk_1EE57ACE0 = "transform";
        dword_1EE57ACE8 = 3;
        qword_1EE57ACF0 = (uint64_t)&ggl::PolygonFill::pipelineStateCompressedMeshPipelineConstantTransformBinding(void)::reflection;
        unk_1EE57ACF8 = xmmword_19FFB3660;
        qword_1EE57AD08 = 2;
        unk_1EE57AD10 = "fill";
        dword_1EE57AD18 = 3;
        qword_1EE57AD20 = (uint64_t)&ggl::PolygonFill::pipelineStateCompressedMeshPipelineConstantFillBinding(void)::reflection;
        unk_1EE57AD28 = 5;
      }
      qword_1ECE30EE0 = (uint64_t)&ggl::PolygonFill::pipelineStateCompressedMeshPipelineConstantStructBinding(void)::ref;
      unk_1ECE30EE8 = 3;
      a4 = v89;
      a2 = v97;
      a3 = v98;
    }
  }
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_OWORD *)v101 = *(_OWORD *)a3;
  *(_OWORD *)&v101[12] = *(_OWORD *)(a3 + 12);
  v10 = *(_OWORD *)(a3 + 28);
  v11 = *(_BYTE *)(a3 + 44);
  v99 = *a4;
  v100 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E42B6760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = &ggl::PolygonFill::CompressedMeshPipelineState::typedReflection(void)::ref;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_19FFB3060;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v99;
  *(_OWORD *)(a1 + 272) = v100;
  *(_BYTE *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x100000001;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v101;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v101[12];
  *(_OWORD *)(a1 + 92) = v10;
  *(_BYTE *)(a1 + 108) = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 305) = 0;
  v16 = *(int8x16_t *)(a1 + 320);
  v17 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  v18 = vmovl_high_s8(v17);
  v19 = vmovl_s16(*(int16x4_t *)v18.i8);
  v20.i64[0] = v19.u32[0];
  v20.i64[1] = v19.u32[1];
  v21 = v20;
  v22 = vmovl_s8(*(int8x8_t *)v17.i8);
  v23 = vmovl_s16(*(int16x4_t *)v22.i8);
  *(_QWORD *)a1 = &off_1E42B5DC8;
  v20.i64[0] = v23.u32[0];
  v20.i64[1] = v23.u32[1];
  v24 = v20;
  v25 = vmovl_high_s16(v18);
  v20.i64[0] = v25.u32[0];
  v20.i64[1] = v25.u32[1];
  v26 = v20;
  v27 = vmovl_high_s16(v22);
  v20.i64[0] = v27.u32[0];
  v20.i64[1] = v27.u32[1];
  v28 = v20;
  v20.i64[0] = v19.u32[2];
  v20.i64[1] = v19.u32[3];
  v29 = v20;
  v20.i64[0] = v23.u32[2];
  v20.i64[1] = v23.u32[3];
  v30 = v20;
  v20.i64[0] = v25.u32[2];
  v20.i64[1] = v25.u32[3];
  v31 = v20;
  v20.i64[0] = v27.u32[2];
  v20.i64[1] = v27.u32[3];
  v32 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v20);
  v33 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v31);
  v34 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v30);
  v35 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v26);
  v36 = vceqzq_s8(v16);
  v37 = vmovl_high_s8(v36);
  v38 = vmovl_s16(*(int16x4_t *)v37.i8);
  v20.i64[0] = v38.u32[0];
  v20.i64[1] = v38.u32[1];
  v39 = v20;
  v40 = vmovl_s8(*(int8x8_t *)v36.i8);
  v41 = vmovl_s16(*(int16x4_t *)v40.i8);
  v20.i64[0] = v41.u32[0];
  v20.i64[1] = v41.u32[1];
  v42 = v20;
  v43 = vmovl_high_s16(v37);
  v20.i64[0] = v43.u32[0];
  v20.i64[1] = v43.u32[1];
  v44 = v20;
  v45 = vmovl_high_s16(v40);
  v20.i64[0] = v45.u32[0];
  v20.i64[1] = v45.u32[1];
  v46 = v20;
  v20.i64[0] = v38.u32[2];
  v20.i64[1] = v38.u32[3];
  v47 = v20;
  v20.i64[0] = v41.u32[2];
  v20.i64[1] = v41.u32[3];
  v48 = v20;
  v20.i64[0] = v43.u32[2];
  v20.i64[1] = v43.u32[3];
  v49 = v20;
  v20.i64[0] = v45.u32[2];
  v20.i64[1] = v45.u32[3];
  v50 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v49);
  v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v39), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v21));
  v52 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v42), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v24));
  v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v44), v35);
  v54 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v46), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v28));
  v55 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v47), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v29));
  v56 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v48), v34);
  v57 = vorrq_s8(v50, v33);
  v58 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v20), v32);
  v59 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  v60 = vmovl_s8(*(int8x8_t *)v59.i8);
  v61 = vmovl_high_s16(v60);
  v20.i64[0] = v61.i32[2];
  v20.i64[1] = v61.i32[3];
  v62 = v20;
  v63 = vmovl_high_s8(v59);
  v64 = vmovl_high_s16(v63);
  v20.i64[0] = v64.i32[2];
  v20.i64[1] = v64.i32[3];
  v65 = v20;
  v66 = vmovl_s16(*(int16x4_t *)v60.i8);
  v20.i64[0] = v66.i32[2];
  v20.i64[1] = v66.i32[3];
  v67 = v20;
  v68 = vmovl_s16(*(int16x4_t *)v63.i8);
  v20.i64[0] = v68.i32[2];
  v20.i64[1] = v68.i32[3];
  v69 = v20;
  v20.i64[0] = v61.i32[0];
  v20.i64[1] = v61.i32[1];
  v70 = v20;
  v20.i64[0] = v64.i32[0];
  v20.i64[1] = v64.i32[1];
  v71 = v20;
  v20.i64[0] = v66.i32[0];
  v20.i64[1] = v66.i32[1];
  v72 = v20;
  v20.i64[0] = v68.i32[0];
  v20.i64[1] = v68.i32[1];
  v73 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v20);
  v74 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  v75 = vmovl_high_s8(v74);
  v76 = vmovl_s16(*(int16x4_t *)v75.i8);
  v20.i64[0] = v76.i32[0];
  v20.i64[1] = v76.i32[1];
  v77 = v20;
  v78 = vmovl_s8(*(int8x8_t *)v74.i8);
  v79 = vmovl_s16(*(int16x4_t *)v78.i8);
  v20.i64[0] = v79.i32[0];
  v20.i64[1] = v79.i32[1];
  v80 = v20;
  v81 = vmovl_high_s16(v75);
  v20.i64[0] = v81.i32[0];
  v20.i64[1] = v81.i32[1];
  v82 = v20;
  v83 = vmovl_high_s16(v78);
  v20.i64[0] = v83.i32[0];
  v20.i64[1] = v83.i32[1];
  v84 = v20;
  v20.i64[0] = v76.i32[2];
  v20.i64[1] = v76.i32[3];
  v85 = v20;
  v20.i64[0] = v79.i32[2];
  v20.i64[1] = v79.i32[3];
  v86 = v20;
  v20.i64[0] = v81.i32[2];
  v20.i64[1] = v81.i32[3];
  v87 = v20;
  v20.i64[0] = v83.i32[2];
  v20.i64[1] = v83.i32[3];
  *(_QWORD *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v80), vbicq_s8((int8x16_t)xmmword_19FFB3170, v72)), v52), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v77), v73), v51)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v84), vbicq_s8((int8x16_t)xmmword_19FFB3190, v70)), v54), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3230, v82), vbicq_s8((int8x16_t)xmmword_19FFB3180, v71)),
                                               v53))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v86), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v67)), v56), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v85), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v69)), v55)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v20), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v62)), v58), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31F0, v87),
                                                 vbicq_s8((int8x16_t)xmmword_19FFB31C0, v65)),
                                               v57)))));
  *(_BYTE *)(a1 + 288) = 1;
  return a1;
}

void ggl::PolygonFill::CompressedMeshPipelineSetup::~CompressedMeshPipelineSetup(ggl::PolygonFill::CompressedMeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::PolygonFill::CompressedMeshPipelineSetup::constantDataIsEnabled(ggl::PolygonFill::CompressedMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::PolygonFill::CompressedMeshPipelineSetup::textureIsEnabled(ggl::PolygonFill::CompressedMeshPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void md::TrafficLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;

  v8 = *(_WORD *)(a1 + 584);
  if (*(_BYTE *)a5)
    v9 = *(_DWORD *)(a5 + 4);
  else
    v9 = 2147483646;
  v10 = *(_QWORD *)(a3 + 4);
  v18 = v10;
  v11 = a3[1];
  v12 = *a3;
  *(_BYTE *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(_QWORD *)(a6 + 8) = a6 + 40;
  *(_QWORD *)(a6 + 16) = a6 + 40;
  *(_QWORD *)(a6 + 24) = a6 + 40;
  *(_QWORD *)(a6 + 32) = 32;
  *(_QWORD *)(a6 + 72) = 0;
  v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  v13 = *(unsigned __int8 **)(a6 + 16);
  v14 = *(unsigned __int8 **)(a6 + 8);
  v15 = v13 - v14;
  if (v13 == v14)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(a6 + 72) = v16;
  *(_QWORD *)(a6 + 88) = a4;
}

void md::mun::MetadataResourceDecoder::~MetadataResourceDecoder(md::mun::MetadataResourceDecoder *this)
{
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::mun::MetadataResourceDecoder::decode(md::mun::MetadataResourceDecoder *this, const gdc::ResourceKey *a2, const gdc::RawResourceSourceData *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char **v6;
  char **v7;
  _QWORD *v8;
  __int16 BOOL;
  __int16 v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int8x16_t v16;
  unint64_t v21;
  char *i;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  int v32;
  uint64_t v33;
  int8x16_t *v34;
  int8x16_t *v35;
  uint64_t v36;
  int8x16_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned __int8 v45;
  unsigned __int8 *v46;
  NSObject *v47;
  NSObject *v48;
  char *v49;
  char *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  int v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  _QWORD *v68;
  _QWORD *v69;
  void *v70;
  _QWORD *v71;
  _QWORD *v72;
  void *v73;
  unint64_t v74;
  char *v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  float v79;
  float v80;
  __float2 v81;
  __float2 v82;
  __float2 v83;
  long double v84;
  float v86;
  float v87;
  float v88;
  float v89;
  double v92;
  double v93;
  __double2 v94;
  double v95;
  __double2 v96;
  long double v97;
  long double v98;
  float64x2_t v99;
  float v100;
  unint64_t v101;
  char *v102;
  char *v103;
  unint64_t v104;
  char *v105;
  char *v106;
  void *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  double v111;
  double v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  float v117;
  float v118;
  __float2 v119;
  __float2 v120;
  __float2 v121;
  float v122;
  float v123;
  float v124;
  float v125;
  double v126;
  float v128;
  float v129;
  float v130;
  float v131;
  double v132;
  double v134;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float32x2_t v145;
  float v146;
  char *v147;
  size_t v148;
  unsigned __int8 *v149;
  unsigned int v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  size_t v155;
  size_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  unint64_t v161;
  char *v162;
  uint64_t v163;
  __int128 *v164;
  _OWORD *v165;
  unint64_t v166;
  __int128 v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  char *v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  _BYTE *v175;
  char *v176;
  _BYTE *v177;
  unint64_t v178;
  char *v179;
  unint64_t v180;
  size_t v181;
  char *v182;
  char *v183;
  char *v184;
  char *v185;
  unint64_t v186;
  char *v187;
  uint64_t v188;
  __int128 *v189;
  _OWORD *v190;
  unint64_t v191;
  __int128 v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  char *v196;
  uint64_t v197;
  char v198;
  int8x16_t *v199;
  int8x16_t v200;
  unint64_t v201;
  int8x16_t v202;
  uint32x4_t v203;
  int8x16_t v204;
  int8x16_t v205;
  unint64_t v206;
  unint64_t v207;
  int8x8_t v208;
  unint64_t v209;
  uint64_t *v210;
  uint32x4_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  char *v215;
  char *v216;
  char *v217;
  char *v218;
  unint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  __int128 v226;
  char *v227;
  char *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  __int128 v234;
  char *v235;
  char *v236;
  char *v237;
  char *v238;
  char *v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t *v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  _QWORD *v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  char *v251;
  char *v252;
  _QWORD *v253;
  _QWORD *v254;
  char *v255;
  __int128 v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  _QWORD *v260;
  unint64_t v261;
  uint64_t v262;
  __int128 v263;
  __int128 v264;
  uint64_t v265;
  float v266;
  float v267;
  __float2 v268;
  __float2 v269;
  __float2 v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  unint64_t v274;
  unint64_t v275;
  void *v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  void *v280;
  void *v281;
  _QWORD *v282;
  _QWORD *v283;
  _QWORD *v284;
  __int128 v285;
  uint64_t v286;
  char *v287;
  __int128 v288;
  unint64_t *v289;
  unint64_t *v290;
  uint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *p_shared_owners;
  unint64_t v294;
  char *v295;
  char *v296;
  void *v297;
  uint64_t v298;
  uint64_t v299;
  void *v300;
  uint64_t v301;
  _QWORD *v302;
  _QWORD *v303;
  void *v304;
  uint64_t result;
  std::__shared_weak_count *v306;
  char *v307;
  float64x2_t v308;
  float64x2_t v309;
  char **v310;
  uint64_t v311;
  uint64_t v312;
  double v313;
  double v314;
  double v315;
  double v316;
  float v317;
  float v318;
  float v319;
  float v320;
  float64x2_t __x;
  uint64_t v322;
  char *v323;
  uint64_t v324;
  char *v325;
  long double v326;
  int v327;
  __int128 v328;
  _QWORD *v329;
  __int128 v330;
  char *v331;
  char *v332;
  std::__shared_weak_count *v333;
  void *__p;
  unsigned __int8 *v335;
  uint64_t v336;
  char v337[40];
  double v338;
  __int128 v339;
  uint64_t v340;
  float64x2_t v341;
  float64x2_t v342;
  char v343[40];
  double v344;
  __int128 v345;
  uint64_t v346;
  double v347;
  double v348;
  double v349;
  double v350;
  void *v351[2];
  char *v352;
  void *v353;
  _QWORD *v354;
  _QWORD *v355;
  _BYTE v356[32];
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  _BYTE buf[24];
  __int128 v368;
  float v369;
  float v370;
  float v371;
  float64x2_t v372;
  double v373;
  uint64_t v374;
  void *v375;
  char *v376;
  char *v377;
  unint64_t v378;
  _DWORD v379[434];
  __int16 v380;
  unsigned __int8 v381;
  BOOL v382;
  char v383;
  _BYTE v384[27];
  int8x16x2_t v385;
  int8x16x4_t v386;
  int8x16x4_t v387;

  MEMORY[0x1E0C80A78](this);
  v4 = v3;
  v311 = v5;
  v7 = v6;
  *(_QWORD *)&v384[3] = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 32))(*v3);
  (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 24))(*v4);
  v8 = (_QWORD *)GEOMuninMetadataTileCreate();
  v332 = 0;
  v333 = 0;
  if (!v8)
    goto LABEL_284;
  __p = 0;
  v335 = 0;
  v336 = 0;
  BOOL = GEOConfigGetBOOL();
  geo::linear_map<md::mun::RigType,BOOL,std::equal_to<md::mun::RigType>,std::allocator<std::pair<md::mun::RigType,BOOL>>,std::vector<std::pair<md::mun::RigType,BOOL>>>::emplace<md::mun::RigType,BOOL>((char **)&__p, 0, BOOL);
  v10 = GEOConfigGetBOOL();
  geo::linear_map<md::mun::RigType,BOOL,std::equal_to<md::mun::RigType>,std::allocator<std::pair<md::mun::RigType,BOOL>>,std::vector<std::pair<md::mun::RigType,BOOL>>>::emplace<md::mun::RigType,BOOL>((char **)&__p, 1u, v10);
  v11 = GEOConfigGetBOOL();
  geo::linear_map<md::mun::RigType,BOOL,std::equal_to<md::mun::RigType>,std::allocator<std::pair<md::mun::RigType,BOOL>>,std::vector<std::pair<md::mun::RigType,BOOL>>>::emplace<md::mun::RigType,BOOL>((char **)&__p, 2u, v11);
  v310 = v7;
  v330 = 0uLL;
  v331 = 0;
  std::vector<md::mun::CollectionPoint>::reserve((char **)&v330, v8[3]);
  v12 = v8[7];
  v329 = v8;
  if (!v12)
    goto LABEL_204;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = (int8x16_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
  __asm { FMOV            V0.2D, #0.5 }
  v308 = _Q0;
  v309 = (float64x2_t)v16;
  do
  {
    v21 = *(unsigned __int16 *)(v8[6] + 8 * v13 + 4);
    for (i = v15; v13 < v12; i += 4)
    {
      v23 = v8[6] + 8 * v13;
      if (*(unsigned __int16 *)(v23 + 4) != (_DWORD)v21)
        break;
      if (i < v14)
      {
        *(_DWORD *)i = *(_DWORD *)v23;
        goto LABEL_8;
      }
      v24 = (i - v15) >> 2;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 62)
        abort();
      if ((v14 - v15) >> 1 > v25)
        v25 = (v14 - v15) >> 1;
      if ((unint64_t)(v14 - v15) >= 0x7FFFFFFFFFFFFFFCLL)
        v26 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      if (v26)
      {
        if (v26 >> 62)
          goto LABEL_289;
        v27 = operator new(4 * v26);
      }
      else
      {
        v27 = 0;
      }
      v28 = &v27[4 * v24];
      *(_DWORD *)v28 = *(_DWORD *)v23;
      v29 = v28;
      if (i != v15)
      {
        v30 = i - 4 - v15;
        if (v30 < 0xBC
          || &v27[i - v15 - 4 - (v30 & 0xFFFFFFFFFFFFFFFCLL)] > &v27[i - v15 - 4]
          || &i[-(v30 & 0xFFFFFFFFFFFFFFFCLL) - 4] > i - 4
          || (unint64_t)(v15 - v27) < 0x20)
        {
          v31 = i;
          v29 = &v27[4 * v24];
        }
        else
        {
          v33 = (v30 >> 2) + 1;
          v31 = &i[-4 * (v33 & 0x7FFFFFFFFFFFFFF8)];
          v34 = (int8x16_t *)&v27[4 * v24 - 16];
          v35 = (int8x16_t *)(i - 16);
          v36 = v33 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v16 = v35[-1];
            v37 = *v35;
            v34[-1] = v16;
            *v34 = v37;
            v34 -= 2;
            v35 -= 2;
            v36 -= 8;
          }
          while (v36);
          v29 = &v28[-4 * (v33 & 0x7FFFFFFFFFFFFFF8)];
          if (v33 == (v33 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_26;
        }
        do
        {
          v32 = *((_DWORD *)v31 - 1);
          v31 -= 4;
          *((_DWORD *)v29 - 1) = v32;
          v29 -= 4;
        }
        while (v31 != v15);
      }
LABEL_26:
      v14 = &v27[4 * v26];
      if (v15)
      {
        operator delete(v15);
        v8 = v329;
        v12 = v329[7];
        v15 = v29;
        i = v28;
      }
      else
      {
        v15 = v29;
        i = &v27[4 * v24];
        v8 = v329;
      }
LABEL_8:
      ++v13;
    }
    if (v8[3] <= v21)
    {
      if (GEOGetGeoDisplayCoreDefaultLog::onceToken != -1)
        dispatch_once(&GEOGetGeoDisplayCoreDefaultLog::onceToken, &__block_literal_global_42051);
      v47 = (id)GEOGetGeoDisplayCoreDefaultLog::log;
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "false";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/MuninMetadataResourceDecoder.mm";
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v368) = 69;
        _os_log_impl(&dword_19F029000, v47, OS_LOG_TYPE_ERROR, "Invalid point index: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
      }

      goto LABEL_5;
    }
    v38 = v8[2];
    v369 = 0.0;
    v39 = v38 + (v21 << 6);
    *(_OWORD *)&buf[8] = 0u;
    v368 = 0u;
    v370 = 1.0;
    v373 = 0.0;
    v372 = 0uLL;
    v375 = v379;
    v376 = (char *)v379;
    v377 = (char *)v379;
    v378 = 6;
    v383 = 0;
    v40 = *(unsigned __int16 *)(v39 + 56);
    v323 = v14;
    if (v8[1] <= v40)
    {
      if (GEOGetGeoDisplayCoreDefaultLog::onceToken != -1)
        dispatch_once(&GEOGetGeoDisplayCoreDefaultLog::onceToken, &__block_literal_global_42051);
      v48 = (id)GEOGetGeoDisplayCoreDefaultLog::log;
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v356 = 136315650;
        *(_QWORD *)&v356[4] = "false";
        *(_WORD *)&v356[12] = 2080;
        *(_QWORD *)&v356[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/MuninMetadataResourceDecoder.mm";
        *(_WORD *)&v356[22] = 1024;
        *(_DWORD *)&v356[24] = 78;
        _os_log_impl(&dword_19F029000, v48, OS_LOG_TYPE_ERROR, "Invalid build index for point: Assertion with expression - %s : Failed in file - %s line - %i", v356, 0x1Cu);
      }
LABEL_54:

    }
    else
    {
      v41 = *v8;
      v42 = *v8 + 40 * *(unsigned __int16 *)(v39 + 56);
      v43 = *(_DWORD *)(v42 + 12);
      if (v43 < 3)
      {
        v44 = *(unsigned __int8 *)(v41 + 40 * *(unsigned __int16 *)(v39 + 56) + 16);
        if (v44 >= 4)
          v45 = 0;
        else
          v45 = 0x1020100u >> (8 * v44);
        v381 = v45;
        v46 = (unsigned __int8 *)__p;
        if (__p != v335)
        {
          while (*v46 != v45)
          {
            v46 += 2;
            if (v46 == v335)
              goto LABEL_55;
          }
        }
        if (v46 != v335 && v46[1])
        {
          v382 = v43 != 0;
          v383 = 0;
          v57 = *(_QWORD *)(v41 + 40 * v40 + 24);
          if (v57)
          {
            if (v57 < 8
              || ((v58 = v41 + 32 + 40 * v40, (unint64_t)&v383 < v58 + v57)
                ? (_CF = v58 >= (unint64_t)v384)
                : (_CF = 1),
                  !_CF))
            {
              v61 = 0;
              v60 = 0;
              goto LABEL_114;
            }
            if (v57 >= 0x20)
            {
              v61 = v57 & 0xFFFFFFFFFFFFFFE0;
              v199 = (int8x16_t *)(v41 + 40 * v40 + 48);
              v200 = 0uLL;
              v201 = v57 & 0xFFFFFFFFFFFFFFE0;
              v202 = 0uLL;
              v203.i64[0] = 0x100000001;
              v203.i64[1] = 0x100000001;
              do
              {
                v204 = v199[-1];
                v386.val[3] = (int8x16_t)vshlq_u32(v203, (uint32x4_t)vqtbl1q_s8(v204, (int8x16_t)xmmword_19FFB3760));
                v386.val[2] = (int8x16_t)vshlq_u32(v203, (uint32x4_t)vqtbl1q_s8(v204, (int8x16_t)xmmword_19FFB3770));
                v386.val[1] = (int8x16_t)vshlq_u32(v203, (uint32x4_t)vqtbl1q_s8(v204, (int8x16_t)xmmword_19FFB3780));
                v386.val[0] = (int8x16_t)vshlq_u32(v203, (uint32x4_t)vqtbl1q_s8(v204, (int8x16_t)xmmword_19FFB3790));
                v387.val[3] = (int8x16_t)vshlq_u32(v203, (uint32x4_t)vqtbl1q_s8(*v199, (int8x16_t)xmmword_19FFB3760));
                v387.val[2] = (int8x16_t)vshlq_u32(v203, (uint32x4_t)vqtbl1q_s8(*v199, (int8x16_t)xmmword_19FFB3770));
                v387.val[1] = (int8x16_t)vshlq_u32(v203, (uint32x4_t)vqtbl1q_s8(*v199, (int8x16_t)xmmword_19FFB3780));
                v387.val[0] = (int8x16_t)vshlq_u32(v203, (uint32x4_t)vqtbl1q_s8(*v199, (int8x16_t)xmmword_19FFB3790));
                v200 = vorrq_s8(v200, vqtbl4q_s8(v386, (int8x16_t)xmmword_19FFB4E00));
                v202 = vorrq_s8(v202, vqtbl4q_s8(v387, (int8x16_t)xmmword_19FFB4E00));
                v199 += 2;
                v201 -= 32;
              }
              while (v201);
              v205 = vorrq_s8(v202, v200);
              v16 = vextq_s8(v205, v205, 8uLL);
              *(int8x8_t *)v205.i8 = vorr_s8(*(int8x8_t *)v205.i8, *(int8x8_t *)v16.i8);
              v206 = v205.i64[0] | HIDWORD(v205.i64[0]) | ((unint64_t)(v205.i64[0] | HIDWORD(v205.i64[0])) >> 16);
              v60 = v206 | (v206 >> 8);
              v383 = v60;
              if (v57 != v61)
              {
                if ((v57 & 0x18) == 0)
                  goto LABEL_114;
                goto LABEL_198;
              }
            }
            else
            {
              LOBYTE(v60) = 0;
              v61 = 0;
LABEL_198:
              v207 = v61;
              v61 = v57 & 0xFFFFFFFFFFFFFFF8;
              v208 = (int8x8_t)v60;
              v209 = v207 - (v57 & 0xFFFFFFFFFFFFFFF8);
              v210 = (uint64_t *)(v41 + v207 + 40 * v40 + 32);
              v211.i64[0] = 0x100000001;
              v211.i64[1] = 0x100000001;
              do
              {
                v212 = *v210++;
                v16.i64[0] = v212;
                v385.val[1] = (int8x16_t)vshlq_u32(v211, (uint32x4_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_19FFB3780));
                v385.val[0] = (int8x16_t)vshlq_u32(v211, (uint32x4_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_19FFB3790));
                v16 = vqtbl2q_s8(v385, (int8x16_t)xmmword_19FFB5D40);
                v208 = vorr_s8(v208, *(int8x8_t *)v16.i8);
                v209 += 8;
              }
              while (v209);
              v213 = *(_QWORD *)&v208 | HIDWORD(*(_QWORD *)&v208) | ((*(_QWORD *)&v208 | HIDWORD(*(_QWORD *)&v208)) >> 16);
              v60 = v213 | (v213 >> 8);
              v383 = v60;
              if (v57 != v61)
              {
LABEL_114:
                v74 = v57 - v61;
                v75 = (char *)(v41 + v61 + 40 * v40 + 32);
                do
                {
                  v76 = *v75++;
                  v60 |= 1 << v76;
                  v383 = v60;
                  --v74;
                }
                while (v74);
              }
            }
          }
          v77 = v41 + 40 * v40;
          v379[432] = *(_DWORD *)(v77 + 20);
          v379[433] = *(_DWORD *)(v77 + 4);
          v380 = *(_WORD *)v42;
          v78 = v38 + (v21 << 6);
          *(_QWORD *)buf = *(_QWORD *)(v78 + 48);
          v374 = *(_QWORD *)(v78 + 40);
          v79 = *(float *)(v39 + 28);
          v80 = *(float *)(v39 + 32);
          v81 = __sincosf_stret(*(float *)(v39 + 24) * 0.5);
          v82 = __sincosf_stret(v79 * 0.5);
          v83 = __sincosf_stret(v80 * 0.5);
          v84 = *(double *)(v39 + 16);
          _Q17 = *(float64x2_t *)v39;
          v319 = -(float)((float)((float)(v82.__sinval * v81.__sinval) * v83.__cosval)
                        - (float)((float)(v82.__cosval * v81.__cosval) * v83.__sinval));
          v320 = (float)((float)(v82.__cosval * v81.__cosval) * v83.__cosval)
               + (float)((float)(v82.__sinval * v81.__sinval) * v83.__sinval);
          v317 = -(float)((float)((float)(v82.__sinval * v81.__cosval) * v83.__sinval)
                        - (float)((float)(v82.__cosval * v81.__sinval) * v83.__cosval));
          v318 = (float)((float)(v82.__sinval * v81.__cosval) * v83.__cosval)
               + (float)((float)(v82.__cosval * v81.__sinval) * v83.__sinval);
          v86 = (float)((float)((float)(v319 * 0.5) + (float)(v320 * -0.5)) + (float)(v318 * 0.5))
              - (float)(v317 * -0.5);
          v87 = (float)((float)(v320 * -0.5) - (float)(v319 * 0.5))
              + (float)((float)(v318 * 0.5) + (float)(v317 * -0.5));
          v88 = (float)((float)(v319 * -0.5) + (float)(v320 * 0.5)) + (float)((float)(v318 * 0.5) + (float)(v317 * 0.5));
          v89 = (float)((float)(v320 * 0.5) + (float)(v318 * 0.5)) - (float)((float)(v319 * -0.5) + (float)(v317 * 0.5));
          *((float *)&v368 + 2) = v86;
          *((float *)&v368 + 3) = v87;
          v369 = v88;
          v370 = v89;
          __x = _Q17;
          *(float64x2_t *)&buf[8] = _Q17;
          *(long double *)&v368 = v84;
          _D15 = _Q17.f64[1];
          __asm { FMLA            D0, D15, V17.D[1] }
          v92 = sqrt(_D0);
          v93 = atan2(v84, v92 * 0.996647189);
          v315 = _D15;
          v326 = atan2(_D15, __x.f64[0]);
          v94 = __sincos_stret(v93);
          v316 = v84;
          v95 = atan2(v84 + v94.__sinval * v94.__sinval * 42841.3115 * v94.__sinval, v92 + v94.__cosval * v94.__cosval * -42697.6727 * v94.__cosval);
          v96 = __sincos_stret(v95);
          v97 = tan(v95 * 0.5 + 0.785398163);
          v98 = log(v97);
          v99.f64[0] = v326;
          v99.f64[1] = v98;
          v372 = vmlaq_f64(v308, v309, v99);
          v373 = v92 / v96.__cosval + -6378137.0 / sqrt(v96.__sinval * v96.__sinval * -0.00669437999 + 1.0);
          v345 = *(_OWORD *)&buf[8];
          v346 = v368;
          v347 = v86;
          v348 = v87;
          v349 = v88;
          v350 = v89;
          gdc::CameraFrame<geo::Radians,double>::fromRigidTransformEcefNoOffset((uint64_t)v343, (double *)&v345);
          v100 = v344 * 0.318309886;
          v371 = v100 * 3.1416;
          v101 = (i - v15) >> 2;
          v102 = v376;
          v103 = (char *)v375;
          v104 = 0x8E38E38E38E38E39 * ((v376 - (_BYTE *)v375) >> 5);
          if (v104 > v101)
          {
            v105 = (char *)v375 + 288 * v101;
            if (v105 != v376)
            {
              v106 = (char *)v375 + 288 * v101;
              do
              {
                v107 = (void *)*((_QWORD *)v106 + 31);
                if (v107 != *((void **)v106 + 33))
                  free(v107);
                v106 += 288;
              }
              while (v106 != v102);
              v102 = v105;
            }
            goto LABEL_129;
          }
          if (v104 < v101)
          {
            if (v378 < v101)
            {
              geo::small_vector_base<md::mun::PhotoInfo>::grow(&v375, (i - v15) >> 2);
              v102 = v376;
              v103 = (char *)v375;
            }
            v108 = &v103[288 * v101];
            if (v102 != v108)
            {
              do
              {
                *((_OWORD *)v102 + 16) = 0uLL;
                *((_OWORD *)v102 + 17) = 0uLL;
                *((_OWORD *)v102 + 14) = 0uLL;
                *((_OWORD *)v102 + 15) = 0uLL;
                *((_OWORD *)v102 + 12) = 0uLL;
                *((_OWORD *)v102 + 13) = 0uLL;
                *((_OWORD *)v102 + 10) = 0uLL;
                *((_OWORD *)v102 + 11) = 0uLL;
                *((_OWORD *)v102 + 8) = 0uLL;
                *((_OWORD *)v102 + 9) = 0uLL;
                *((_OWORD *)v102 + 6) = 0uLL;
                *((_OWORD *)v102 + 7) = 0uLL;
                *((_OWORD *)v102 + 4) = 0uLL;
                *((_OWORD *)v102 + 5) = 0uLL;
                *((_OWORD *)v102 + 2) = 0uLL;
                *((_OWORD *)v102 + 3) = 0uLL;
                *(_OWORD *)v102 = 0uLL;
                *((_OWORD *)v102 + 1) = 0uLL;
                *((_DWORD *)v102 + 9) = 1065353216;
                *((_QWORD *)v102 + 31) = v102 + 280;
                *((_QWORD *)v102 + 32) = v102 + 280;
                *((_QWORD *)v102 + 33) = v102 + 280;
                *((_QWORD *)v102 + 34) = 2;
                v102 += 288;
              }
              while (v102 != v108);
              v102 = v108;
            }
LABEL_129:
            v376 = v102;
            v8 = v329;
          }
          if (i != v15)
          {
            v109 = 0;
            if (v101 <= 1)
              v110 = 1;
            else
              v110 = (i - v15) >> 2;
            v312 = v110;
            v111 = v318;
            v112 = v317;
            v313 = v320;
            v314 = v319;
            while (1)
            {
              v113 = *(unsigned int *)&v15[4 * v109];
              if (v8[5] <= v113)
              {
                if (GEOGetGeoDisplayCoreDefaultLog::onceToken != -1)
                  dispatch_once(&GEOGetGeoDisplayCoreDefaultLog::onceToken, &__block_literal_global_42051);
                v48 = (id)GEOGetGeoDisplayCoreDefaultLog::log;
                if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)v356 = 136315650;
                  *(_QWORD *)&v356[4] = "false";
                  *(_WORD *)&v356[12] = 2080;
                  *(_QWORD *)&v356[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/MuninMetadataResourceDecoder.mm";
                  *(_WORD *)&v356[22] = 1024;
                  *(_DWORD *)&v356[24] = 128;
                  _os_log_impl(&dword_19F029000, v48, OS_LOG_TYPE_ERROR, "Invalid photo index for point: Assertion with expression - %s : Failed in file - %s line - %i", v356, 0x1Cu);
                }
                goto LABEL_54;
              }
              v114 = v8[4];
              v115 = v114 + 152 * v113;
              v116 = (char *)v375 + 288 * v109;
              v116[240] = *(_BYTE *)(v115 + 144);
              v117 = *(float *)(v115 + 28);
              v118 = *(float *)(v115 + 32);
              v119 = __sincosf_stret(*(float *)(v115 + 24) * 0.5);
              v120 = __sincosf_stret(v117 * 0.5);
              v121 = __sincosf_stret(v118 * 0.5);
              v122 = (float)((float)(v120.__cosval * v119.__cosval) * v121.__cosval)
                   + (float)((float)(v120.__sinval * v119.__sinval) * v121.__sinval);
              v123 = -(float)((float)((float)(v120.__sinval * v119.__sinval) * v121.__cosval)
                            - (float)((float)(v120.__cosval * v119.__cosval) * v121.__sinval));
              v124 = (float)((float)(v120.__sinval * v119.__cosval) * v121.__cosval)
                   + (float)((float)(v120.__cosval * v119.__sinval) * v121.__sinval);
              v125 = -(float)((float)((float)(v120.__sinval * v119.__cosval) * v121.__sinval)
                            - (float)((float)(v120.__cosval * v119.__sinval) * v121.__cosval));
              v126 = *(double *)(v115 + 16);
              _Q3 = *(float64x2_t *)v115;
              v128 = (float)((float)((float)(v123 * v320) + (float)(v319 * v122)) + (float)(v318 * v125))
                   - (float)(v317 * v124);
              v129 = (float)((float)(v318 * v122) - (float)((float)(v319 * v125) - (float)(v124 * v320)))
                   + (float)(v317 * v123);
              v130 = (float)((float)((float)(v125 * v320) + (float)(v319 * v124)) - (float)(v318 * v123))
                   + (float)(v317 * v122);
              v131 = -(float)((float)((float)((float)(v319 * v123) + (float)(v318 * v124)) + (float)(v317 * v125))
                            - (float)(v122 * v320));
              v132 = vmuld_lane_f64(v112, *(float64x2_t *)v115, 1);
              _D19 = v319;
              v134 = vmlad_n_f64(-(v126 * v314), v112, *(double *)v115);
              __asm { FMLA            D17, D19, V3.D[1] }
              v136 = -(v132 - v126 * v111) - (v132 - v126 * v111);
              v137 = v134 + v134;
              v138 = _D17 + _D17;
              _Q3.f64[0] = vaddq_f64(__x, *(float64x2_t *)v115).f64[0] + v136 * v313 + v138 * v111 - v137 * v112;
              v139 = v315 + *(double *)(v115 + 8) + v136 * v112 + v137 * v313 - v138 * v314;
              v140 = v316 + v126 - v136 * v111 + v137 * v314 + v138 * v313;
              *(float *)&v136 = v131 * -0.5;
              v141 = v131 * 0.5;
              *(float *)&v137 = v128 * 0.5;
              v142 = v129 * 0.5;
              *(float *)&v138 = v130 * 0.5;
              v143 = v130 * -0.5;
              v144 = v128 * -0.5;
              *((float *)v116 + 6) = (float)((float)(*(float *)&v137 + *(float *)&v136) + v142) - v143;
              *((float *)v116 + 7) = (float)(*(float *)&v136 - *(float *)&v137) + (float)(v142 + v143);
              *((float *)v116 + 8) = (float)(v144 + v141) + (float)(v142 + *(float *)&v138);
              *((float *)v116 + 9) = (float)(v141 + v142) - (float)(v144 + *(float *)&v138);
              *(float64_t *)v116 = _Q3.f64[0];
              *((double *)v116 + 1) = v139;
              *((double *)v116 + 2) = v140;
              v339 = *(_OWORD *)v116;
              v340 = *((_QWORD *)v116 + 2);
              v145 = *(float32x2_t *)(v116 + 32);
              v341 = vcvtq_f64_f32(*(float32x2_t *)(v116 + 24));
              v342 = vcvtq_f64_f32(v145);
              gdc::CameraFrame<geo::Radians,double>::fromRigidTransformEcefNoOffset((uint64_t)v337, (double *)&v339);
              v146 = v338 * 0.318309886;
              *((float *)v116 + 10) = v146 * 3.1416;
              *((_DWORD *)v116 + 59) = *(_DWORD *)(v115 + 140);
              md::mun::frustumFromGEOFrustumCorners((uint64_t)v356, (_OWORD *)(v115 + 40));
              *(_OWORD *)(v116 + 44) = *(_OWORD *)v356;
              *(_OWORD *)(v116 + 60) = *(_OWORD *)&v356[16];
              *(_OWORD *)(v116 + 76) = v357;
              *(_OWORD *)(v116 + 92) = v358;
              *(_OWORD *)(v116 + 108) = v359;
              *(_OWORD *)(v116 + 124) = v360;
              *(_OWORD *)(v116 + 140) = v361;
              *(_OWORD *)(v116 + 156) = v362;
              *(_OWORD *)(v116 + 172) = v363;
              *(_OWORD *)(v116 + 188) = v364;
              *(_OWORD *)(v116 + 204) = v365;
              *(_OWORD *)(v116 + 220) = v366;
              v147 = v116 + 248;
              v150 = *(unsigned __int8 *)(v115 + 149);
              v149 = (unsigned __int8 *)(v115 + 149);
              v148 = v150;
              v151 = *((_QWORD *)v116 + 34);
              v324 = v114;
              v327 = v113;
              if (v151 < v150)
                break;
LABEL_160:
              v322 = v109;
              if ((_DWORD)v148)
              {
                v174 = 0;
                v175 = (_BYTE *)*((_QWORD *)v147 + 1);
                while (1)
                {
                  v176 = *(char **)v147;
                  v177 = &v175[-*(_QWORD *)v147];
                  v178 = *((_QWORD *)v147 + 3);
                  if (v178 < (unint64_t)(v177 + 1))
                    break;
LABEL_163:
                  *v175 = *(_BYTE *)(v114 + 152 * v113 + v174 + 145);
                  v175 = (_BYTE *)(*((_QWORD *)v147 + 1) + 1);
                  *((_QWORD *)v147 + 1) = v175;
                  if (++v174 >= (unint64_t)*v149)
                    goto LABEL_135;
                }
                v179 = (char *)*((_QWORD *)v147 + 2);
                v180 = (1 << -(char)__clz(v178 + 1));
                if (v178 >= 0xFFFFFFFFFFFFFFFELL)
                  v180 = 1;
                if (v180 <= (unint64_t)(v177 + 1))
                  v181 = (size_t)(v177 + 1);
                else
                  v181 = v180;
                v182 = (char *)malloc_type_malloc(v181, 0x100004077774924uLL);
                v183 = v182;
                v184 = *(char **)v147;
                v185 = (char *)*((_QWORD *)v147 + 1);
                if (*(char **)v147 == v185)
                  goto LABEL_186;
                v186 = v185 - v184;
                if ((unint64_t)(v185 - v184) < 8)
                {
                  v187 = v182;
                }
                else
                {
                  v187 = v182;
                  if ((unint64_t)(v182 - v184) >= 0x20)
                  {
                    if (v186 < 0x20)
                    {
                      v188 = 0;
LABEL_180:
                      v193 = v186 & 0xFFFFFFFFFFFFFFF8;
                      v187 = &v182[v186 & 0xFFFFFFFFFFFFFFF8];
                      v194 = v188 - (v186 & 0xFFFFFFFFFFFFFFF8);
                      v195 = (uint64_t *)&v184[v188];
                      v196 = &v182[v188];
                      do
                      {
                        v197 = *v195++;
                        *(_QWORD *)v196 = v197;
                        v196 += 8;
                        v194 += 8;
                      }
                      while (v194);
                      if (v186 != v193)
                      {
                        v184 += v193;
                        goto LABEL_185;
                      }
LABEL_186:
                      if (v176 != v179)
                        free(*(void **)v147);
                      v175 = &v177[(_QWORD)v183];
                      *(_QWORD *)v147 = v183;
                      *((_QWORD *)v147 + 1) = &v177[(_QWORD)v183];
                      *((_QWORD *)v147 + 3) = v181;
                      v114 = v324;
                      LODWORD(v113) = v327;
                      goto LABEL_163;
                    }
                    v188 = v186 & 0xFFFFFFFFFFFFFFE0;
                    v189 = (__int128 *)(v184 + 16);
                    v190 = v182 + 16;
                    v191 = v186 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      v192 = *v189;
                      *(v190 - 1) = *(v189 - 1);
                      *v190 = v192;
                      v189 += 2;
                      v190 += 2;
                      v191 -= 32;
                    }
                    while (v191);
                    if (v186 == v188)
                      goto LABEL_186;
                    if ((v186 & 0x18) != 0)
                      goto LABEL_180;
                    v184 += v188;
                    v187 = &v182[v188];
                  }
                }
                do
                {
LABEL_185:
                  v198 = *v184++;
                  *v187++ = v198;
                }
                while (v184 != v185);
                goto LABEL_186;
              }
LABEL_135:
              v14 = v323;
              v109 = v322 + 1;
              v8 = v329;
              if (v322 + 1 == v312)
                goto LABEL_188;
            }
            v153 = *((_QWORD *)v116 + 32);
            v152 = (char *)*((_QWORD *)v116 + 33);
            v154 = *(char **)v147;
            v155 = (1 << -(char)__clz(v151 + 1));
            if (v155 <= v148)
              v156 = v148;
            else
              v156 = v155;
            v157 = (char *)malloc_type_malloc(v156, 0x100004077774924uLL);
            v158 = v157;
            v159 = *(char **)v147;
            v160 = (char *)*((_QWORD *)v147 + 1);
            if (*(char **)v147 == v160)
              goto LABEL_157;
            v161 = v160 - v159;
            if ((unint64_t)(v160 - v159) < 8)
            {
              v162 = v157;
            }
            else
            {
              v162 = v157;
              if ((unint64_t)(v157 - v159) >= 0x20)
              {
                if (v161 < 0x20)
                {
                  v163 = 0;
LABEL_151:
                  v168 = v161 & 0xFFFFFFFFFFFFFFF8;
                  v162 = &v157[v161 & 0xFFFFFFFFFFFFFFF8];
                  v169 = v163 - (v161 & 0xFFFFFFFFFFFFFFF8);
                  v170 = (uint64_t *)&v159[v163];
                  v171 = &v157[v163];
                  do
                  {
                    v172 = *v170++;
                    *(_QWORD *)v171 = v172;
                    v171 += 8;
                    v169 += 8;
                  }
                  while (v169);
                  if (v161 != v168)
                  {
                    v159 += v168;
                    goto LABEL_156;
                  }
LABEL_157:
                  if (v154 != v152)
                    free(*(void **)v147);
                  *(_QWORD *)v147 = v158;
                  *((_QWORD *)v147 + 1) = &v158[v153 - (_QWORD)v154];
                  *((_QWORD *)v147 + 3) = v156;
                  LODWORD(v148) = *v149;
                  v114 = v324;
                  LODWORD(v113) = v327;
                  goto LABEL_160;
                }
                v163 = v161 & 0xFFFFFFFFFFFFFFE0;
                v164 = (__int128 *)(v159 + 16);
                v165 = v157 + 16;
                v166 = v161 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v167 = *v164;
                  *(v165 - 1) = *(v164 - 1);
                  *v165 = v167;
                  v164 += 2;
                  v165 += 2;
                  v166 -= 32;
                }
                while (v166);
                if (v161 == v163)
                  goto LABEL_157;
                if ((v161 & 0x18) != 0)
                  goto LABEL_151;
                v159 += v163;
                v162 = &v157[v163];
              }
            }
            do
            {
LABEL_156:
              v173 = *v159++;
              *v162++ = v173;
            }
            while (v159 != v160);
            goto LABEL_157;
          }
LABEL_188:
          geo::optional<md::mun::CollectionPoint>::optional((uint64_t)v351, (uint64_t)buf);
          goto LABEL_56;
        }
      }
    }
LABEL_55:
    LOBYTE(v351[0]) = 0;
LABEL_56:
    v49 = (char *)v375;
    v50 = v376;
    if (v375 != v376)
    {
      do
      {
        v51 = (void *)*((_QWORD *)v49 + 31);
        if (v51 != *((void **)v49 + 33))
          free(v51);
        v49 += 288;
      }
      while (v49 != v50);
      v49 = (char *)v375;
    }
    if (v49 != v377)
      free(v49);
    if (LOBYTE(v351[0]))
    {
      if (*((_QWORD *)&v330 + 1) >= (unint64_t)v331)
      {
        v53 = 0x63FB9AEB1FDCD759 * ((uint64_t)(*((_QWORD *)&v330 + 1) - v330) >> 3);
        v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) > 0x2328A701194538)
          abort();
        if (0xC7F735D63FB9AEB2 * ((uint64_t)&v331[-v330] >> 3) > v54)
          v54 = 0xC7F735D63FB9AEB2 * ((uint64_t)&v331[-v330] >> 3);
        if ((unint64_t)(0x63FB9AEB1FDCD759 * ((uint64_t)&v331[-v330] >> 3)) >= 0x119453808CA29CLL)
          v55 = 0x2328A701194538;
        else
          v55 = v54;
        if (v55)
        {
          if (v55 > 0x2328A701194538)
LABEL_289:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v56 = (char *)operator new(1864 * v55);
        }
        else
        {
          v56 = 0;
        }
        v62 = &v56[1864 * v55];
        v63 = std::construct_at[abi:nn180100]<md::mun::CollectionPoint,md::mun::CollectionPoint,md::mun::CollectionPoint*>((uint64_t)&v56[1864 * v53], (uint64_t)&v351[1]);
        v52 = v63 + 1864;
        v65 = (char *)*((_QWORD *)&v330 + 1);
        v64 = (char *)v330;
        if (*((_QWORD *)&v330 + 1) == (_QWORD)v330)
        {
          *(_QWORD *)&v330 = v63;
          *((_QWORD *)&v330 + 1) = v63 + 1864;
          v331 = v62;
        }
        else
        {
          do
          {
            v65 -= 1864;
            v63 = std::construct_at[abi:nn180100]<md::mun::CollectionPoint,md::mun::CollectionPoint,md::mun::CollectionPoint*>(v63 - 1864, (uint64_t)v65);
          }
          while (v65 != v64);
          v66 = (char *)*((_QWORD *)&v330 + 1);
          v65 = (char *)v330;
          *(_QWORD *)&v330 = v63;
          *((_QWORD *)&v330 + 1) = v52;
          v331 = v62;
          if (v66 != v65)
          {
            do
            {
              v67 = v66 - 1864;
              v68 = (_QWORD *)*((_QWORD *)v66 - 222);
              v69 = (_QWORD *)*((_QWORD *)v66 - 221);
              if (v68 != v69)
              {
                do
                {
                  v70 = (void *)v68[31];
                  if (v70 != (void *)v68[33])
                    free(v70);
                  v68 += 36;
                }
                while (v68 != v69);
                v68 = (_QWORD *)*((_QWORD *)v66 - 222);
              }
              v14 = v323;
              if (v68 != *((_QWORD **)v66 - 220))
                free(v68);
              v66 -= 1864;
            }
            while (v67 != v65);
          }
        }
        v8 = v329;
        if (v65)
          operator delete(v65);
      }
      else
      {
        v52 = std::construct_at[abi:nn180100]<md::mun::CollectionPoint,md::mun::CollectionPoint,md::mun::CollectionPoint*>(*((uint64_t *)&v330 + 1), (uint64_t)&v351[1])+ 1864;
      }
      *((_QWORD *)&v330 + 1) = v52;
      if (LOBYTE(v351[0]))
      {
        v71 = v353;
        v72 = v354;
        if (v353 != v354)
        {
          do
          {
            v73 = (void *)v71[31];
            if (v73 != (void *)v71[33])
              free(v73);
            v71 += 36;
          }
          while (v71 != v72);
          v71 = v353;
        }
        if (v71 != v355)
          free(v71);
      }
    }
LABEL_5:
    v12 = v8[7];
  }
  while (v13 < v12);
  if (v15)
    operator delete(v15);
LABEL_204:
  if (__p)
    operator delete(__p);
  v351[1] = 0;
  v351[0] = 0;
  v352 = 0;
  v214 = v8[9];
  if (v214)
  {
    if (v214 >= 0x186186186186187)
      abort();
    v215 = (char *)operator new(168 * v214);
    v216 = v215;
    v217 = &v215[168 * v214];
    v218 = v215;
    do
    {
      *((_OWORD *)v218 + 6) = 0uLL;
      *((_OWORD *)v218 + 7) = 0uLL;
      *((_QWORD *)v218 + 20) = 0;
      *((_OWORD *)v218 + 8) = 0uLL;
      *((_OWORD *)v218 + 9) = 0uLL;
      *((_OWORD *)v218 + 4) = 0uLL;
      *((_OWORD *)v218 + 5) = 0uLL;
      *((_OWORD *)v218 + 2) = 0uLL;
      *((_OWORD *)v218 + 3) = 0uLL;
      *(_OWORD *)v218 = 0uLL;
      *((_OWORD *)v218 + 1) = 0uLL;
      *((_QWORD *)v218 + 11) = v218 + 120;
      *((_QWORD *)v218 + 12) = v218 + 120;
      *((_QWORD *)v218 + 13) = v218 + 120;
      *((_QWORD *)v218 + 14) = 1;
      v218 += 168;
    }
    while (v218 != v217);
    v219 = 0;
    v351[0] = v215;
    v351[1] = v217;
    v352 = v217;
    v325 = v215;
    do
    {
      v220 = v8[8];
      v221 = (_QWORD *)(v220 + 40 * v219);
      *(_QWORD *)&v216[168 * v219] = *v221;
      v222 = v221[1];
      if (v222 != -1)
      {
        v223 = v329[10] + 48 * v222;
        v224 = *(_QWORD *)v223;
        v225 = *(_QWORD *)(v223 + 24);
        v226 = *(_OWORD *)(v223 + 8);
        v227 = &v216[168 * v219];
        *((_QWORD *)v227 + 2) = v224;
        v228 = v227 + 16;
        if (*(v228 - 8))
        {
          v229 = &v216[168 * v219];
          *(_OWORD *)(v229 + 24) = v226;
          *((_QWORD *)v229 + 5) = v225;
        }
        else
        {
          *(_OWORD *)(v228 + 8) = v226;
          *((_QWORD *)v228 + 3) = v225;
          *(v228 - 8) = 1;
        }
      }
      v230 = *(_QWORD *)(v220 + 40 * v219 + 16);
      if (v230 != -1)
      {
        v231 = v329[12] + 48 * v230;
        v232 = *(_QWORD *)v231;
        v233 = *(_QWORD *)(v231 + 24);
        v234 = *(_OWORD *)(v231 + 8);
        v235 = &v216[168 * v219];
        *((_QWORD *)v235 + 7) = v232;
        v236 = v235 + 56;
        if (*(v236 - 8))
        {
          v237 = &v216[168 * v219];
          *((_OWORD *)v237 + 4) = v234;
          *((_QWORD *)v237 + 10) = v233;
        }
        else
        {
          *(_OWORD *)(v236 + 8) = v234;
          *((_QWORD *)v236 + 3) = v233;
          *(v236 - 8) = 1;
        }
      }
      v238 = &v216[168 * v219];
      v239 = v238 + 88;
      v240 = v220 + 40 * v219;
      v243 = *(_QWORD *)(v240 + 32);
      v242 = (unint64_t *)(v240 + 32);
      v241 = v243;
      v244 = *((_QWORD *)v238 + 14);
      if (v244 < v243)
      {
        v245 = *((_QWORD *)v239 + 1);
        v246 = (_QWORD *)*((_QWORD *)v239 + 2);
        v247 = *(_QWORD **)v239;
        v248 = (1 << -(char)__clz(v244 + 1));
        if (v244 >= 0xFFFFFFFFFFFFFFFELL)
          v249 = 1;
        else
          v249 = v248;
        if (v249 <= v241)
          v250 = v241;
        else
          v250 = v249;
        v251 = (char *)malloc_type_malloc(48 * v250, 0x1000040EED21634uLL);
        v252 = v251;
        v253 = *(_QWORD **)v239;
        v254 = (_QWORD *)*((_QWORD *)v239 + 1);
        if (*(_QWORD **)v239 != v254)
        {
          v255 = v251;
          do
          {
            v256 = *(_OWORD *)v253;
            *((_QWORD *)v255 + 2) = v253[2];
            *(_OWORD *)v255 = v256;
            v257 = v253[3];
            *((_DWORD *)v255 + 8) = *((_DWORD *)v253 + 8);
            *((_QWORD *)v255 + 3) = v257;
            *((_DWORD *)v255 + 9) = *((_DWORD *)v253 + 9);
            *((_QWORD *)v255 + 5) = v253[5];
            v253 += 6;
            v255 += 48;
          }
          while (v253 != v254);
        }
        if (v247 != v246)
          free(*(void **)v239);
        *(_QWORD *)v239 = v252;
        *((_QWORD *)v239 + 1) = &v252[v245 - (_QWORD)v247];
        *((_QWORD *)v239 + 3) = v250;
        v241 = *v242;
      }
      v258 = v220 + 40 * v219;
      v261 = *(_QWORD *)(v258 + 24);
      v260 = (_QWORD *)(v258 + 24);
      v259 = v261;
      if (v261 < v261 + v241)
      {
        v262 = *((_QWORD *)v239 + 1);
        do
        {
          v265 = v329[14] + 56 * v259;
          v266 = *(float *)(v265 + 28);
          v267 = *(float *)(v265 + 32);
          v268 = __sincosf_stret(*(float *)(v265 + 24) * 0.5);
          v269 = __sincosf_stret(v266 * 0.5);
          v270 = __sincosf_stret(v267 * 0.5);
          v271 = *(_QWORD *)(v265 + 16);
          v263 = *(_OWORD *)v265;
          v272 = *(_QWORD *)(v265 + 40);
          v273 = *(void **)v239;
          v274 = 0xAAAAAAAAAAAAAAABLL * ((v262 - *(_QWORD *)v239) >> 4);
          v275 = *((_QWORD *)v239 + 3);
          if (v275 < v274 + 1)
          {
            v328 = *(_OWORD *)v265;
            v276 = (void *)*((_QWORD *)v239 + 2);
            v277 = (1 << -(char)__clz(v275 + 1));
            if (v275 >= 0xFFFFFFFFFFFFFFFELL)
              v278 = 1;
            else
              v278 = v277;
            if (v278 <= v274 + 1)
              v279 = v274 + 1;
            else
              v279 = v278;
            v280 = malloc_type_malloc(48 * v279, 0x1000040EED21634uLL);
            v281 = v280;
            v282 = *(_QWORD **)v239;
            v283 = (_QWORD *)*((_QWORD *)v239 + 1);
            if (*(_QWORD **)v239 != v283)
            {
              v284 = v280;
              do
              {
                v285 = *(_OWORD *)v282;
                v284[2] = v282[2];
                *(_OWORD *)v284 = v285;
                v286 = v282[3];
                *((_DWORD *)v284 + 8) = *((_DWORD *)v282 + 8);
                v284[3] = v286;
                *((_DWORD *)v284 + 9) = *((_DWORD *)v282 + 9);
                v284[5] = v282[5];
                v282 += 6;
                v284 += 6;
              }
              while (v282 != v283);
            }
            if (v273 != v276)
              free(*(void **)v239);
            v262 = (uint64_t)v281 + 48 * v274;
            *(_QWORD *)v239 = v281;
            *((_QWORD *)v239 + 1) = v262;
            *((_QWORD *)v239 + 3) = v279;
            v263 = v328;
          }
          *(float *)&v264 = -(float)((float)((float)(v269.__sinval * v268.__sinval) * v270.__cosval)
                                   - (float)((float)(v269.__cosval * v268.__cosval) * v270.__sinval));
          *((float *)&v264 + 1) = (float)((float)(v269.__sinval * v268.__cosval) * v270.__cosval)
                                + (float)((float)(v269.__cosval * v268.__sinval) * v270.__sinval);
          *((float *)&v264 + 2) = -(float)((float)((float)(v269.__sinval * v268.__cosval) * v270.__sinval)
                                         - (float)((float)(v269.__cosval * v268.__sinval) * v270.__cosval));
          *((float *)&v264 + 3) = (float)((float)(v269.__cosval * v268.__cosval) * v270.__cosval)
                                + (float)((float)(v269.__sinval * v268.__sinval) * v270.__sinval);
          *(_OWORD *)v262 = v263;
          *(_QWORD *)(v262 + 16) = v271;
          *(_OWORD *)(v262 + 24) = v264;
          *(_QWORD *)(v262 + 40) = v272;
          v262 = *((_QWORD *)v239 + 1) + 48;
          *((_QWORD *)v239 + 1) = v262;
          ++v259;
        }
        while (v259 < *v242 + *v260);
      }
      ++v219;
      v8 = v329;
      v216 = v325;
    }
    while (v219 < v329[9]);
  }
  v287 = (char *)operator new(0x108uLL);
  *((_QWORD *)v287 + 1) = 0;
  *((_QWORD *)v287 + 2) = 0;
  *(_QWORD *)v287 = &off_1E42DDD20;
  gdc::Resource::Resource((uint64_t)(v287 + 32), v311);
  *((_QWORD *)v287 + 3) = &off_1E42ABB18;
  v288 = v330;
  *((_OWORD *)v287 + 11) = v330;
  *((_QWORD *)v287 + 24) = v331;
  v330 = 0uLL;
  v331 = 0;
  *(_OWORD *)(v287 + 200) = 0u;
  *(_OWORD *)(v287 + 216) = 0u;
  *((_DWORD *)v287 + 58) = 1065353216;
  *((_OWORD *)v287 + 15) = *(_OWORD *)v351;
  *((_QWORD *)v287 + 32) = v352;
  v351[0] = 0;
  v351[1] = 0;
  v352 = 0;
  v289 = (unint64_t *)*((_QWORD *)&v288 + 1);
  v290 = (unint64_t *)v288;
  if ((_QWORD)v288 != *((_QWORD *)&v288 + 1))
  {
    v291 = 0;
    do
    {
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v287 + 200), *v290, v290)[3] = v291++;
      v290 += 233;
    }
    while (v290 != v289);
  }
  v292 = v333;
  v332 = v287 + 24;
  v333 = (std::__shared_weak_count *)v287;
  if (v292)
  {
    p_shared_owners = (unint64_t *)&v292->__shared_owners_;
    do
      v294 = __ldaxr(p_shared_owners);
    while (__stlxr(v294 - 1, p_shared_owners));
    if (!v294)
    {
      ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
      std::__shared_weak_count::__release_weak(v292);
    }
  }
  v295 = (char *)v351[0];
  if (v351[0])
  {
    v296 = (char *)v351[1];
    if (v351[1] != v351[0])
    {
      do
      {
        v297 = (void *)*((_QWORD *)v296 - 10);
        if (v297 != *((void **)v296 - 8))
          free(v297);
        if (*(v296 - 120))
          *(v296 - 120) = 0;
        if (*(v296 - 160))
          *(v296 - 160) = 0;
        v296 -= 168;
      }
      while (v296 != v295);
      v295 = (char *)v351[0];
    }
    operator delete(v295);
  }
  v298 = v330;
  if ((_QWORD)v330)
  {
    v299 = *((_QWORD *)&v330 + 1);
    v300 = (void *)v330;
    if (*((_QWORD *)&v330 + 1) != (_QWORD)v330)
    {
      do
      {
        v301 = v299 - 1864;
        v302 = *(_QWORD **)(v299 - 1776);
        v303 = *(_QWORD **)(v299 - 1768);
        if (v302 != v303)
        {
          do
          {
            v304 = (void *)v302[31];
            if (v304 != (void *)v302[33])
              free(v304);
            v302 += 36;
          }
          while (v302 != v303);
          v302 = *(_QWORD **)(v299 - 1776);
        }
        if (v302 != *(_QWORD **)(v299 - 1760))
          free(v302);
        v299 -= 1864;
      }
      while (v301 != v298);
      v300 = (void *)v330;
    }
    *((_QWORD *)&v330 + 1) = v298;
    operator delete(v300);
  }
  v7 = v310;
LABEL_284:
  result = GEOMuninMetadataTileDestroy();
  v306 = v333;
  if (v332)
    v307 = v332 + 8;
  else
    v307 = 0;
  *v7 = v307;
  v7[1] = (char *)v306;
  return result;
}

void sub_19FEC6EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,void *__p)
{
  void *v53;

  md::mun::CollectionPoint::~CollectionPoint((md::mun::CollectionPoint *)&STACK[0xA70]);
  if (v53)
    operator delete(v53);
  std::vector<md::mun::CollectionPoint>::~vector[abi:nn180100](&a47);
  if (__p)
    operator delete(__p);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void geo::linear_map<md::mun::RigType,BOOL,std::equal_to<md::mun::RigType>,std::allocator<std::pair<md::mun::RigType,BOOL>>,std::vector<std::pair<md::mun::RigType,BOOL>>>::emplace<md::mun::RigType,BOOL>(char **a1, unsigned __int8 a2, __int16 a3)
{
  __int16 v5;
  char *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _WORD *v17;
  unint64_t v18;
  _OWORD *v19;
  char *v20;
  unint64_t v21;
  __int128 v22;
  __int16 v23;

  v5 = a2;
  v6 = *a1;
  v7 = a1[1];
  v8 = *a1;
  if (*a1 != v7)
  {
    v8 = *a1;
    while (*v8 != a2)
    {
      v8 += 2;
      if (v8 == v7)
        goto LABEL_7;
    }
  }
  if (v8 == v7)
  {
LABEL_7:
    v9 = (unint64_t)a1[2];
    if ((unint64_t)v7 >= v9)
    {
      v11 = v7 - v6;
      if (v7 - v6 <= -3)
        abort();
      v12 = v11 >> 1;
      v13 = v9 - (_QWORD)v6;
      if (v13 <= (v11 >> 1) + 1)
        v14 = v12 + 1;
      else
        v14 = v13;
      if (v13 >= 0x7FFFFFFFFFFFFFFELL)
        v15 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
      {
        if (v15 < 0)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v16 = operator new(2 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = &v16[2 * v12];
      *v17 = v5 | (a3 << 8);
      v10 = (unsigned __int8 *)(v17 + 1);
      if (v6 != v7)
      {
        if ((unint64_t)(v11 - 2) < 0x1E)
          goto LABEL_36;
        if (v7 - v16 - (v11 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
          goto LABEL_36;
        v18 = ((unint64_t)(v11 - 2) >> 1) + 1;
        v19 = &v16[2 * v12 - 16];
        v20 = v7 - 16;
        v21 = v18 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v22 = *(_OWORD *)v20;
          *(v19 - 1) = *((_OWORD *)v20 - 1);
          *v19 = v22;
          v19 -= 2;
          v20 -= 32;
          v21 -= 16;
        }
        while (v21);
        v17 -= v18 & 0xFFFFFFFFFFFFFFF0;
        v7 -= 2 * (v18 & 0xFFFFFFFFFFFFFFF0);
        if (v18 != (v18 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_36:
          do
          {
            v23 = *((_WORD *)v7 - 1);
            v7 -= 2;
            *--v17 = v23;
          }
          while (v7 != v6);
          v6 = *a1;
        }
      }
      *a1 = (char *)v17;
      a1[1] = (char *)v10;
      a1[2] = &v16[2 * v15];
      if (v6)
        operator delete(v6);
    }
    else
    {
      *(_WORD *)v7 = a2 | (unsigned __int16)(a3 << 8);
      v10 = (unsigned __int8 *)(v7 + 2);
    }
    a1[1] = (char *)v10;
  }
}

void std::__shared_ptr_emplace<md::mun::MetadataResource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDD20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::mun::MetadataResource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDD20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::mun::MetadataResource>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_19FEC739C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FEC73E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void karo::graphics::BasicViewportNode::~BasicViewportNode(void **this)
{
  *this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t karo::graphics::BasicViewportNode::getViewport(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

void md::ARWalkingPerpendicularManeuverLabelPart::~ARWalkingPerpendicularManeuverLabelPart(md::ARWalkingPerpendicularManeuverLabelPart *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  geo::read_write_lock *v4;
  const char *v5;
  malloc_zone_t *zone;

  md::CompositeLabelPart::~CompositeLabelPart(this);
  {
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v3 + 24) = "VectorKitLabels";
    *(_OWORD *)(v3 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v3 = &off_1E42B5668;
    *(_QWORD *)(v3 + 8) = "VectorKitLabels";
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *(_OWORD *)(v3 + 216) = 0u;
    *(_OWORD *)(v3 + 232) = 0u;
    *(_QWORD *)(v3 + 248) = 0;
    *(_OWORD *)(v3 + 56) = 0u;
    v4 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v3 + 56), 0);
    if ((_DWORD)v4)
      geo::read_write_lock::logFailure(v4, (uint64_t)"initialization", v5);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v3 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v3 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v3;
  }
  (*(void (**)(uint64_t, md::ARWalkingPerpendicularManeuverLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                          + 40))(mdm::Allocator::instance(void)::alloc, this, 1824);
}

uint64_t *md::ARWalkingPerpendicularManeuverLabelPart::updateWithStyle(md::ARWalkingPerpendicularManeuverLabelPart *this, md::LabelManager *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  float v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *result;

  v3 = (uint64_t *)*((_QWORD *)this + 72);
  v4 = (uint64_t *)*((_QWORD *)this + 73);
  if (v3 == v4)
  {
    v8 = (uint64_t *)*((_QWORD *)this + 4);
    v9 = *v8;
    v6 = *(float *)(*v8 + 172);
  }
  else
  {
    v6 = -3.4028e38;
    do
    {
      v7 = *v3++;
      (*(void (**)(uint64_t, md::LabelManager *))(*(_QWORD *)v7 + 72))(v7, a2);
      v6 = fmaxf(v6, (*(float (**)(uint64_t))(*(_QWORD *)v7 + 240))(v7));
    }
    while (v3 != v4);
    v8 = (uint64_t *)*((_QWORD *)this + 4);
    v9 = *v8;
  }
  *((float *)this + 42) = v6;
  *((_DWORD *)this + 158) = *(_DWORD *)(*md::LabelStyle::prepareStyleGroup<md::LabelComponentStyleGroup>(v9) + 8);
  *((_DWORD *)this + 159) = *(_DWORD *)(*md::LabelStyle::prepareStyleGroup<md::LabelComponentStyleGroup>(*v8) + 12);
  v10 = *(float *)(*md::LabelStyle::prepareStyleGroup<md::LabelComponentStyleGroup>(*v8) + 16);
  *((double *)this + 80) = v10;
  v11 = *v8;
  v12 = *(_QWORD *)(*v8 + 272);
  if (!v12)
  {
    v13 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*v8);
    v12 = *v13;
    *(_QWORD *)(v11 + 272) = *v13;
    v10 = *((double *)this + 80);
    v11 = *v8;
  }
  *((_DWORD *)this + 164) = *(_DWORD *)(v12 + 32);
  *((long double *)this + 81) = tan(v10 * 0.0174532925);
  result = md::LabelStyle::prepareStyleGroup<md::LabelComponentStyleGroup>(v11);
  *((_BYTE *)this + 660) = *(_BYTE *)(*result + 20);
  return result;
}

uint64_t md::ARWalkingPerpendicularManeuverLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  _QWORD **v23;
  _QWORD **v24;
  int8x16_t v25;
  int8x16_t i;
  _QWORD *v27;
  int8x16_t *v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  _QWORD *v34;
  double v35;
  float *v36;
  float v37;
  float v38;
  BOOL v39;
  uint64_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  uint64_t v45;

  if (!*(_BYTE *)(a1 + 1816))
    goto LABEL_23;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 576) + 16);
  v45 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t *))(*(_QWORD *)v6 + 80))(v6, a2, a3, &v45);
  if ((_DWORD)result == 37)
  {
    v8 = *(_QWORD *)(a1 + 576);
    v9 = *(_DWORD **)(v8 + 24);
    v10 = *(_DWORD **)(*(_QWORD *)(v8 + 16) + 24);
    v9[164] = v10[18];
    v9[165] = v10[19];
    v9[166] = v10[20];
    v9[167] = v10[21];
    v45 = 0;
    result = (*(uint64_t (**)(_DWORD *, uint64_t, _DWORD *, uint64_t *))(*(_QWORD *)v9 + 80))(v9, a2, a3, &v45);
    if ((_DWORD)result == 37)
    {
LABEL_23:
      v11 = **(_QWORD **)(a1 + 576);
      v45 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t *))(*(_QWORD *)v11 + 80))(v11, a2, a3, &v45);
      if ((_DWORD)result == 37)
      {
        v12 = *(_QWORD **)(a1 + 576);
        v13 = (_DWORD *)v12[1];
        v14 = *(_DWORD **)(**(_QWORD **)(*v12 + 576) + 24);
        v13[164] = v14[18];
        v13[165] = v14[19];
        v13[166] = v14[20];
        v13[167] = v14[21];
        v45 = 0;
        result = (*(uint64_t (**)(_DWORD *, uint64_t, _DWORD *, uint64_t *))(*(_QWORD *)v13 + 80))(v13, a2, a3, &v45);
        if ((_DWORD)result == 37)
        {
          v15 = *(float *)(*(_QWORD *)(a1 + 32) + 20);
          *(float *)(a1 + 176) = v15;
          *(_DWORD *)(a1 + 112) = *a3;
          *(_DWORD *)(a1 + 116) = a3[1];
          *(_BYTE *)(a1 + 270) = fabsf(v15 + -1.0) > 0.000001;
          v16 = *(_QWORD *)(a2 + 432);
          v17 = *(float *)(v16 + 464);
          *(float *)(a1 + 296) = v17;
          v18 = *(float *)(v16 + 468);
          *(float *)(a1 + 300) = v18;
          v19 = *(float *)(a1 + 288);
          v20 = v19 * v18;
          v21 = *(float *)(a1 + 292);
          v22 = -(float)((float)(v21 * v18) - (float)(v19 * v17));
          *(float *)(a1 + 88) = v22;
          *(float *)(a1 + 92) = v20 + (float)(v21 * v17);
          *(_BYTE *)(a1 + 268) = fabsf(v22 + -1.0) > 0.000001;
          v23 = *(_QWORD ***)(a1 + 576);
          v24 = *(_QWORD ***)(a1 + 584);
          v25 = (int8x16_t)xmmword_19FFB2E30;
          for (i = (int8x16_t)xmmword_19FFB2E30;
                v23 != v24;
                v25 = vbslq_s8((int8x16_t)vcgtq_f32(v30, v29), *(int8x16_t *)(v31 + 72), v43))
          {
            v41 = i;
            v43 = v25;
            v27 = *v23++;
            v28 = (int8x16_t *)(*(uint64_t (**)(_QWORD *))(*v27 + 248))(v27);
            v29.i64[0] = v28->i64[0];
            v29.i64[1] = v41.i64[1];
            v30.i64[0] = v41.i64[0];
            v30.i64[1] = v28->i64[1];
            i = vbslq_s8((int8x16_t)vcgtq_f32(v30, v29), *v28, v41);
            v31 = v27[3];
            v29.i64[0] = *(_QWORD *)(v31 + 72);
            v29.i64[1] = v43.i64[1];
            v30.i64[0] = v43.i64[0];
            v30.i64[1] = *(_QWORD *)(v31 + 80);
          }
          v32 = *(void **)(a1 + 232);
          v42 = i;
          v44 = v25;
          if (v32)
          {
            free(v32);
            i = v42;
            v25 = v44;
            *(_QWORD *)(a1 + 232) = 0;
          }
          v33 = *(void **)(a1 + 240);
          if (v33)
          {
            free(v33);
            i = v42;
            v25 = v44;
            *(_QWORD *)(a1 + 240) = 0;
          }
          *(int8x16_t *)(a1 + 72) = v25;
          *(int8x16_t *)(a1 + 152) = i;
          if (*(_BYTE *)(a1 + 565))
            *(_QWORD *)(a1 + 184) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
          if (*(_BYTE *)(a1 + 566))
          {
            v34 = *(_QWORD **)(a1 + 576);
            v35 = 0.0;
            if (*(_BYTE *)(a1 + 1816))
            {
              v36 = *(float **)(v34[2] + 24);
              if (v36[20] >= v36[18])
              {
                v37 = v36[21];
                v38 = v36[19];
                v39 = v37 < v38;
                v35 = (float)(v37 - v38);
                if (v39)
                  v35 = 0.0;
              }
            }
            v40 = *(_QWORD *)(**(_QWORD **)(*v34 + 576) + 24);
            md::ARWalkingPerpendicularManeuverLabelPart::updateLocalState(a1, a1 + 632, *(_QWORD *)(a2 + 432), (double *)(*(_QWORD *)(a1 + 16) + 592), (double *)(*(_QWORD *)(a1 + 16) + 616), (double *)(*(_QWORD *)(a1 + 16) + 520), v35, (float)(*(float *)(v40 + 80) - *(float *)(v40 + 72)), *(float *)(*(_QWORD *)(a1 + 32) + 24), *(float *)(*(_QWORD *)(a1 + 32) + 20));
            *(_QWORD *)(a1 + 184) = a1 + 680;
          }
          return 37;
        }
      }
    }
  }
  return result;
}

double md::ARWalkingPerpendicularManeuverLabelPart::updateForDisplay(md::ARWalkingPerpendicularManeuverLabelPart *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  double v5;
  float *v6;
  float v7;
  float v8;
  BOOL v9;
  uint64_t v10;
  double result;

  v2 = (uint64_t *)*((_QWORD *)this + 72);
  v3 = (uint64_t *)*((_QWORD *)this + 73);
  if (v2 != v3)
  {
    do
    {
      v4 = *v2++;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
    }
    while (v2 != v3);
    v2 = (uint64_t *)*((_QWORD *)this + 72);
  }
  *((_QWORD *)this + 153) = *((_QWORD *)this + 79);
  *((_QWORD *)this + 154) = *((_QWORD *)this + 80);
  *((_DWORD *)this + 312) = *((_DWORD *)this + 164);
  v5 = 0.0;
  if (*((_BYTE *)this + 1816))
  {
    v6 = *(float **)(v2[2] + 24);
    if (v6[20] >= v6[18])
    {
      v7 = v6[21];
      v8 = v6[19];
      v9 = v7 < v8;
      v5 = (float)(v7 - v8);
      if (v9)
        v5 = 0.0;
    }
  }
  *((double *)this + 157) = v5;
  *((_BYTE *)this + 1252) = *((_BYTE *)this + 660);
  v10 = *(_QWORD *)(**(_QWORD **)(*v2 + 576) + 24);
  *((double *)this + 158) = (float)(*(float *)(v10 + 80) - *(float *)(v10 + 72));
  result = *((double *)this + 81);
  *((double *)this + 155) = result;
  return result;
}

uint64_t md::ARWalkingPerpendicularManeuverLabelPart::layoutForDisplay(uint64_t a1, uint64_t a2, md::LabelAnimator *a3, _DWORD *a4)
{
  __n128 v8;
  int8x16_t v9;
  float32x4_t v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  void (*v19)(void);
  uint64_t v20;
  void (*v21)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  md::ARWalkingPerpendicularManeuverLabelPart::updateLocalState(a1, a1 + 1224, a2 + 440, (double *)(*(_QWORD *)(a1 + 16) + 408), (double *)(*(_QWORD *)(a1 + 16) + 960), (double *)(*(_QWORD *)(a1 + 16) + 864), *(double *)(a1 + 1256), *(double *)(a1 + 1264), *(float *)(*(_QWORD *)(a1 + 32) + 72), *(float *)(*(_QWORD *)(a1 + 32) + 68));
  v25 = 0;
  v11 = md::CompositeLabelPart::layoutForDisplay((_QWORD *)a1, a2, a3, a4, &v25, v8, v9, v10);
  if ((_DWORD)v11 == 37)
  {
    v12 = *(float *)(*(_QWORD *)(a1 + 32) + 68);
    *(float *)(a1 + 416) = v12;
    *(_DWORD *)(a1 + 352) = *a4;
    *(_DWORD *)(a1 + 356) = a4[1];
    *(_BYTE *)(a1 + 510) = fabsf(v12 + -1.0) > 0.000001;
    v13 = *(float *)(a2 + 904);
    *(float *)(a1 + 536) = v13;
    v14 = *(float *)(a2 + 908);
    *(float *)(a1 + 540) = v14;
    v15 = *(float *)(a1 + 528);
    v16 = v15 * v14;
    v17 = *(float *)(a1 + 532);
    v18 = -(float)((float)(v17 * v14) - (float)(v15 * v13));
    *(float *)(a1 + 328) = v18;
    *(float *)(a1 + 332) = v16 + (float)(v17 * v13);
    *(_BYTE *)(a1 + 508) = fabsf(v18 + -1.0) > 0.000001;
    *(_QWORD *)(a1 + 424) = a1 + 1272;
    v19 = *(void (**)(void))(***(_QWORD ***)(**(_QWORD **)(a1 + 576) + 576) + 824);
    if (*(float *)(*(_QWORD *)(a1 + 16) + 764) >= 0.0)
    {
      if (*(_BYTE *)(a1 + 1252) == 6)
        v22 = 2;
      else
        v22 = 1;
      v19();
      v23 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 576) + 576) + 8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 824))(v23, v22);
      if (*(_BYTE *)(a1 + 1816))
      {
        v21 = *(void (**)(void))(**(_QWORD **)(*(_QWORD *)(a1 + 576) + 16) + 824);
        goto LABEL_10;
      }
    }
    else
    {
      v19();
      v20 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 576) + 576) + 8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 824))(v20, 1);
      if (*(_BYTE *)(a1 + 1816))
      {
        v21 = *(void (**)(void))(**(_QWORD **)(*(_QWORD *)(a1 + 576) + 16) + 824);
LABEL_10:
        v21();
      }
    }
  }
  return v11;
}

uint64_t md::ARWalkingPerpendicularManeuverLabelPart::stagingModelMatrix(md::ARWalkingPerpendicularManeuverLabelPart *this)
{
  return (uint64_t)this + 680;
}

uint64_t md::ARWalkingPerpendicularManeuverLabelPart::modelMatrix(md::ARWalkingPerpendicularManeuverLabelPart *this)
{
  return (uint64_t)this + 1272;
}

char *md::ARWalkingPerpendicularManeuverLabelPart::debugCompositeClassName@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_19FFB3DB0;
  strcpy(result, "ARWalkingPerpendicularManeuverLabelPart");
  return result;
}

void md::ARWalkingPerpendicularManeuverLabelPart::updateLocalState(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, double *a5, double *a6, double a7, double a8, double a9, double a10)
{
  uint64_t v10;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  md::LabelManager *v124;
  float *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  __int128 *v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v142;
  double v144;
  double v145;
  _BYTE v146[80];
  _BYTE v147[48];
  double v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  double v153;
  double v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  unint64_t v167;
  __int128 v168;
  unint64_t v169;
  __int128 v170;
  unint64_t v171;

  v10 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v10 + 164))
  {
    v130 = a10 * a9;
    v137 = a10 * a9 * *(double *)(a3 + 320);
    v138 = *(float *)(v10 + 156);
    v139 = *(float *)(v10 + 160);
    v140 = *(float *)(v10 + 152);
    v17 = *a6;
    v18 = a6[1];
    v19 = a6[2];
    v20 = -(v19 * v138 - v18 * v139);
    v145 = -(*a6 * v139 - v19 * v140);
    v132 = -(v18 * v140 - *a6 * v138);
    v21 = -(v132 * v18 - v145 * v19);
    v22 = -(v20 * v19 - v132 * *a6);
    v23 = -(v145 * *a6 - v20 * v18);
    v24 = __sincos_stret(*(double *)(a2 + 8) * -0.00872664626);
    v25 = v24.__sinval / sqrt(v132 * v132 + v20 * v20 + v145 * v145);
    v134 = v20;
    v26 = v25 * v20;
    v27 = v25 * v145;
    v28 = v25 * v132;
    v29 = -(v28 * v18 - v27 * v19) - (v28 * v18 - v27 * v19);
    v30 = -(v26 * v19 - v28 * v17) - (v26 * v19 - v28 * v17);
    v31 = -(v27 * v17 - v26 * v18) - (v27 * v17 - v26 * v18);
    v32 = v17 + v29 * v24.__cosval + v31 * v27 - v30 * v28;
    v33 = v18 + v29 * v28 + v30 * v24.__cosval - v31 * v26;
    v34 = v19 + v30 * v26 + v31 * v24.__cosval - v29 * v27;
    v35 = -(v28 * v22 - v27 * v23) - (v28 * v22 - v27 * v23);
    v36 = -(v26 * v23 - v28 * v21) - (v26 * v23 - v28 * v21);
    v37 = -(v27 * v21 - v26 * v22) - (v27 * v21 - v26 * v22);
    v38 = v35 * v24.__cosval - (v132 * v18 - v145 * v19) + v37 * v27 - v36 * v28;
    v39 = v22 + v35 * v28 + v36 * v24.__cosval - v37 * v26;
    v40 = v23 + v36 * v26 + v37 * v24.__cosval - v35 * v27;
    v41 = *(float *)(a2 + 4);
    v42 = -(v38 * v41 - a8 * -0.5 * v21);
    v43 = -(v39 * v41 - a8 * -0.5 * v22);
    v44 = -(v40 * v41 - a8 * -0.5 * v23);
    v45 = v21 * (a8 * 0.5) + v38 * v41;
    v46 = v22 * (a8 * 0.5) + v39 * v41;
    v47 = v23 * (a8 * 0.5) + v40 * v41;
    if (*(_BYTE *)(a2 + 28) == 6)
    {
      v42 = v45;
      v43 = v46;
    }
    else
    {
      v47 = v44;
    }
    v48 = v47 + a7 * -0.5 - *(float *)(a2 + 24) + (v42 * v21 + v43 * v22 + v47 * v23) * *(double *)(a1 + 1240);
    v49 = *(float *)a2;
    v133 = v32;
    v50 = *a4;
    v51 = a4[1];
    v52 = a4[2];
    v148 = v38;
    *(double *)&v149 = v39;
    *((double *)&v150 + 1) = v20;
    *(double *)&v151 = v145;
    v53 = v34;
    *((double *)&v152 + 1) = v32;
    v153 = v33;
    v54 = v33;
    *((double *)&v149 + 1) = v40;
    v135 = v50 + v42 * v137;
    v136 = v51 + v43 * v137;
    *((double *)&v151 + 1) = v132;
    v154 = v34;
    *(_QWORD *)&v150 = 0;
    *(_QWORD *)&v152 = 0;
    *(_QWORD *)&v155 = 0;
    v142 = v50 + (v42 + v32 * v49) * v137;
    v144 = v51 + (v43 + v33 * v49) * v137;
    *((double *)&v155 + 1) = v142;
    *(double *)&v156 = v144;
    v131 = v52 + (v48 + v34 * v49) * v137;
    *((double *)&v156 + 1) = v131;
    v157 = 0x3FF0000000000000;
    memset(&v147[8], 0, 32);
    memset(&v146[56], 0, 24);
    memset(&v146[8], 0, 32);
    *(_QWORD *)&v147[40] = 0x3FF0000000000000;
    *(double *)v146 = v137;
    v55 = v52 + v48 * v137;
    *(_OWORD *)&v146[40] = *(unint64_t *)&v137;
    *(double *)v147 = v137;
    gm::operator*<double,4,4,4>((double *)&v158, &v148, (double *)v146);
    v56 = v159;
    *(_OWORD *)(a2 + 176) = v158;
    *(_OWORD *)(a2 + 192) = v56;
    v57 = v161;
    *(_OWORD *)(a2 + 208) = v160;
    *(_OWORD *)(a2 + 224) = v57;
    v58 = v163;
    *(_OWORD *)(a2 + 240) = v162;
    *(_OWORD *)(a2 + 256) = v58;
    v59 = v165;
    *(_OWORD *)(a2 + 272) = v164;
    *(_OWORD *)(a2 + 288) = v59;
    v148 = v38;
    *(double *)&v149 = v39;
    *((double *)&v150 + 1) = v134;
    *(double *)&v151 = v145;
    *((double *)&v152 + 1) = v133;
    v153 = v54;
    *((double *)&v149 + 1) = v40;
    *((double *)&v151 + 1) = v132;
    v154 = v53;
    *(_QWORD *)&v150 = 0;
    *(_QWORD *)&v152 = 0;
    *(_QWORD *)&v155 = 0;
    *((double *)&v155 + 1) = v135;
    *(double *)&v156 = v136;
    *((double *)&v156 + 1) = v55;
    v157 = 0x3FF0000000000000;
    memset(&v147[8], 0, 32);
    memset(&v146[56], 0, 24);
    memset(&v146[8], 0, 32);
    *(_QWORD *)&v147[40] = 0x3FF0000000000000;
    *(double *)v146 = v137;
    *(_OWORD *)&v146[40] = *(unint64_t *)&v137;
    *(double *)v147 = v137;
    gm::operator*<double,4,4,4>((double *)&v158, &v148, (double *)v146);
    v60 = v159;
    *(_OWORD *)(a2 + 304) = v158;
    *(_OWORD *)(a2 + 320) = v60;
    v61 = v161;
    *(_OWORD *)(a2 + 336) = v160;
    *(_OWORD *)(a2 + 352) = v61;
    v62 = v163;
    *(_OWORD *)(a2 + 368) = v162;
    *(_OWORD *)(a2 + 384) = v62;
    v63 = v165;
    *(_OWORD *)(a2 + 400) = v164;
    *(_OWORD *)(a2 + 416) = v63;
    v64 = *a6;
    v65 = a6[1];
    v66 = a6[2];
    v67 = -(v66 * v138 - v65 * v139);
    v68 = -(*a6 * v139 - v66 * v140);
    v69 = -(v65 * v140 - *a6 * v138);
    v70 = -(v68 * v66 - v69 * v65);
    v71 = -(v69 * *a6 - v67 * v66);
    v72 = -(v67 * v65 - v68 * *a6);
    v73 = v67 - (v69 * *a6 - v67 * v66);
    if (v73 + v66 <= 0.0)
    {
      if (v67 <= v71 || v67 <= v66)
      {
        v82 = sqrt(v66 + 1.0 - v73);
        v83 = 1.0 / (v82 + v82);
        v84 = (v64 - (v65 * v140 - *a6 * v138)) * v83;
        v85 = v65 - (v67 * v65 - v68 * *a6);
        v86 = v85 * v83;
        v87 = v82 * 0.5;
        v88 = (v68 - v70) * v83;
        v89 = sqrt(1.0 - (v66 - (v66 * v138 - v65 * v139)) - (v69 * *a6 - v67 * v66));
        v90 = v70 - (*a6 * v139 - v66 * v140);
        v91 = 1.0 / (v89 + v89);
        v92 = v90 * v91;
        v93 = v89 * 0.5;
        v94 = v85 * v91;
        v95 = (v64 - v69) * v91;
        if (v71 > v66)
          v75 = v92;
        else
          v75 = v84;
        if (v71 > v66)
          v76 = v93;
        else
          v76 = v86;
        if (v71 > v66)
          v77 = v94;
        else
          v77 = v87;
        if (v71 > v66)
          v78 = v95;
        else
          v78 = v88;
      }
      else
      {
        v79 = sqrt(1.0 - (v66 * v138 - v65 * v139) - (v66 - (v69 * *a6 - v67 * v66)));
        v75 = v79 * 0.5;
        v80 = v70 - (*a6 * v139 - v66 * v140);
        v81 = 1.0 / (v79 + v79);
        v76 = v80 * v81;
        v77 = (v64 - (v65 * v140 - *a6 * v138)) * v81;
        v78 = (v72 - v65) * v81;
      }
    }
    else
    {
      v74 = 0.5 / sqrt(v73 + v66 + 1.0);
      v75 = v74 * (v72 - v65);
      v76 = v74 * (v64 - v69);
      v77 = v74 * (v68 - v70);
      v78 = 0.25 / v74;
    }
    v97 = v142;
    v96 = v144;
    if (!*(_BYTE *)(a1 + 1816))
    {
      v110 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a2 + 64) = v110;
      v111 = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a2 + 96) = v111;
      v112 = *(_OWORD *)(a2 + 256);
      *(_OWORD *)(a2 + 112) = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a2 + 128) = v112;
      v113 = *(_OWORD *)(a2 + 288);
      *(_OWORD *)(a2 + 144) = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a2 + 160) = v113;
      goto LABEL_32;
    }
    generateRotationMatrixMeshPositioningMode((double *)&v166, *(_QWORD *)(a1 + 16) + 152, a3, a4, 6, 1, *(unsigned __int8 *)(a1 + 1817));
    v98 = v130 * *(double *)(a3 + 320);
    v158 = v166;
    v160 = v168;
    v162 = v170;
    v159 = v167;
    v161 = v169;
    v163 = v171;
    v164 = *(_OWORD *)a4;
    *(double *)&v165 = a4[2];
    *((_QWORD *)&v165 + 1) = 0x3FF0000000000000;
    v151 = 0u;
    v153 = 0.0;
    v156 = 0u;
    v155 = 0u;
    v152 = 0u;
    v150 = 0u;
    v149 = 0u;
    v157 = 0x3FF0000000000000;
    v148 = v98;
    *(double *)&v151 = v98;
    v154 = v98;
    gm::operator*<double,4,4,4>((double *)v146, (double *)&v158, &v148);
    v99 = *(_OWORD *)&v146[16];
    *(_OWORD *)(a2 + 48) = *(_OWORD *)v146;
    *(_OWORD *)(a2 + 64) = v99;
    v100 = *(_OWORD *)&v146[48];
    *(_OWORD *)(a2 + 80) = *(_OWORD *)&v146[32];
    *(_OWORD *)(a2 + 96) = v100;
    v101 = *(_OWORD *)v147;
    *(_OWORD *)(a2 + 112) = *(_OWORD *)&v146[64];
    *(_OWORD *)(a2 + 128) = v101;
    v102 = *(_OWORD *)&v147[32];
    *(_OWORD *)(a2 + 144) = *(_OWORD *)&v147[16];
    *(_OWORD *)(a2 + 160) = v102;
    v103 = *a4;
    v104 = a4[1];
    v105 = a4[2];
    v106 = *a6;
    v107 = a6[1];
    if (fabs(*a6) >= 0.0001)
    {
      v108 = a6[2];
    }
    else
    {
      v108 = a6[2];
      if (fabs(v107) < 0.0001)
      {
        v97 = v142;
        v96 = v144;
        if (fabs(v108 + -1.0) < 0.0001)
        {
          v109 = a5[2];
LABEL_31:
          *(double *)(a2 + 536) = v75;
          *(double *)(a2 + 544) = v76;
          *(double *)(a2 + 552) = v77;
          *(double *)(a2 + 560) = v78;
          *(double *)(a2 + 512) = v103;
          *(double *)(a2 + 520) = v104;
          *(double *)(a2 + 528) = v109;
          *(double *)(a2 + 568) = v137;
          *(double *)(a2 + 576) = v137;
          *(double *)(a2 + 584) = v137;
LABEL_32:
          v115 = *a6;
          v116 = a6[1];
          if (fabs(*a6) >= 0.0001)
          {
            v117 = a6[2];
          }
          else
          {
            v117 = a6[2];
            if (fabs(v116) < 0.0001 && fabs(v117 + -1.0) < 0.0001)
            {
              v118 = a5[2];
LABEL_38:
              v120 = 0.707106781 / sqrt(v64 * v64 + v65 * v65 + v66 * v66);
              v121 = v120 * v64;
              v122 = v120 * v65;
              v123 = v120 * v66;
              *(double *)(a2 + 464) = v77 * v121 - (v75 * v123 - v76 * 0.707106781) + v78 * v122;
              *(double *)(a2 + 472) = v77 * 0.707106781 - (v76 * v121 - v75 * v122) + v78 * v123;
              *(double *)(a2 + 432) = v97;
              *(double *)(a2 + 440) = v96;
              *(double *)(a2 + 448) = v118;
              *(double *)(a2 + 456) = v75 * 0.707106781 + v76 * v123 - v77 * v122 + v78 * v121;
              *(double *)(a2 + 480) = -(v75 * v121 + v76 * v122 + v77 * v123 - v78 * 0.707106781);
              *(double *)(a2 + 488) = v137;
              *(double *)(a2 + 496) = v137;
              *(double *)(a2 + 504) = v137;
              return;
            }
          }
          v119 = (*a5 - v97) * v115 + v116 * (a5[1] - v96) + v117 * (a5[2] - v131);
          v97 = v97 + v119 * v115;
          v96 = v96 + v119 * v116;
          v118 = v131 + v119 * v117;
          goto LABEL_38;
        }
LABEL_30:
        v114 = (*a5 - v103) * v106 + v107 * (a5[1] - v104) + v108 * (a5[2] - v105);
        v103 = v103 + v114 * v106;
        v104 = v104 + v114 * v107;
        v109 = v105 + v114 * v108;
        goto LABEL_31;
      }
    }
    v97 = v142;
    v96 = v144;
    goto LABEL_30;
  }
  v124 = (md::LabelManager *)std::__throw_bad_optional_access[abi:nn180100]();
  md::ARWalkingPerpendicularManeuverLabelPart::createPart(v124, v125, v126, v127, v128, v129);
}

uint64_t md::ARWalkingPerpendicularManeuverLabelPart::createPart(md::LabelManager *a1, float *a2, uint64_t a3, uint64_t a4, int a5, __int128 *a6)
{
  unsigned __int8 v12;
  float v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  unsigned __int8 v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;
  unsigned __int8 v23;
  unsigned __int8 v29;
  md::LabelPart *v30;
  unsigned __int8 v31;
  md::LabelPart *v32;
  char *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  char *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int8 v43;
  md::LabelPart *v44;
  unsigned __int8 v45;
  md::LabelPart *v46;
  char *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  char *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unsigned __int8 v57;
  md::LabelPart *v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *i;
  std::__shared_weak_count *v64;
  uint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  int v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  char *v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  std::__shared_weak_count *v110;
  char *v111;
  std::__shared_weak_count *v112;
  __int128 v113;
  _OWORD v114[2];
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  {
    v84 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v84, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v108 = mdm::Allocator::instance(void)::alloc;
  HIBYTE(v107) = 3;
  LODWORD(v106) = 9602786;
  v13 = a2[98];
  getTextDataString(&v104, a3, a4, a6);
  getTextDataString(&v102, a3, (uint64_t)&v106, a6);
  if (!v102)
  {
    v18 = 0;
    goto LABEL_70;
  }
  v14 = (char *)operator new(0x58uLL);
  v15 = 0;
  *(_QWORD *)v14 = &off_1E42DED18;
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 3) = &off_1E42B63B0;
  *((_QWORD *)v14 + 2) = 0;
  *((_QWORD *)v14 + 5) = 0;
  *((_QWORD *)v14 + 6) = 0;
  *((_QWORD *)v14 + 4) = 0;
  *((_DWORD *)v14 + 14) = 0;
  *(_QWORD *)&v16 = 0x100000001;
  *((_QWORD *)&v16 + 1) = 0x100000001;
  *(_OWORD *)(v14 + 60) = v16;
  *(_QWORD *)(v14 + 76) = 0x100000001;
  *((_DWORD *)v14 + 21) = 0;
  v100 = v14 + 24;
  v101 = (std::__shared_weak_count *)v14;
  if (a5)
    v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 21) + 40) + 48))(*(_QWORD *)(*((_QWORD *)a1 + 21) + 40));
  {
    v85 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v85, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 1824, 8);
  v19 = (std::__shared_weak_count *)operator new(0xB0uLL);
  v19->__shared_owners_ = 0;
  v19->__shared_weak_owners_ = 0;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDF50;
  v98 = md::LabelText::LabelText((uint64_t)&v19[1], v102, (uint64_t)v103, (int)v13);
  v99 = v19;
  v20 = v104;
  if (v104)
  {
    v21 = (std::__shared_weak_count *)operator new(0xB0uLL);
    v21->__shared_owners_ = 0;
    v21->__shared_weak_owners_ = 0;
    v21->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDF50;
    v96 = md::LabelText::LabelText((uint64_t)&v21[1], v20, (uint64_t)v105, (int)v13);
    v97 = v21;
  }
  else
  {
    v96 = 0;
    v97 = 0;
  }
  v95 = *(_DWORD *)(a3 + 168);
  *(_DWORD *)(v18 + 8) = 1065353216;
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = v18;
  v22 = 0uLL;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 72) = xmmword_19FFB2E30;
  *(_QWORD *)(v18 + 64) = 0;
  *(_QWORD *)(v18 + 88) = 1065353216;
  *(_DWORD *)(v18 + 96) = 1065353216;
  *(_OWORD *)(v18 + 100) = 0u;
  *(_DWORD *)(v18 + 116) = 0;
  *(_OWORD *)(v18 + 120) = xmmword_19FFB2E30;
  *(_OWORD *)(v18 + 136) = xmmword_19FFB2E30;
  *(_OWORD *)(v18 + 152) = xmmword_19FFB2E30;
  *(_OWORD *)(v18 + 168) = xmmword_19FFB3480;
  *(_BYTE *)(v18 + 224) = 0;
  *(_OWORD *)(v18 + 184) = 0u;
  *(_BYTE *)(v18 + 200) = 0;
  *(_OWORD *)(v18 + 248) = 0u;
  *(_OWORD *)(v18 + 232) = 0u;
  *(_OWORD *)(v18 + 257) = 0u;
  *(_OWORD *)(v18 + 280) = xmmword_19FFB3580;
  *(_OWORD *)(v18 + 296) = xmmword_19FFB3590;
  *(_OWORD *)(v18 + 312) = xmmword_19FFB2E30;
  *(_QWORD *)(v18 + 328) = 1065353216;
  *(_DWORD *)(v18 + 336) = 1065353216;
  *(_DWORD *)(v18 + 356) = 0;
  *(_OWORD *)(v18 + 340) = 0u;
  *(_OWORD *)(v18 + 360) = xmmword_19FFB2E30;
  *(_OWORD *)(v18 + 376) = xmmword_19FFB2E30;
  *(_OWORD *)(v18 + 392) = xmmword_19FFB2E30;
  *(_OWORD *)(v18 + 408) = xmmword_19FFB3480;
  *(_BYTE *)(v18 + 464) = 0;
  *(_OWORD *)(v18 + 424) = 0u;
  *(_BYTE *)(v18 + 440) = 0;
  *(_OWORD *)(v18 + 472) = 0u;
  *(_OWORD *)(v18 + 488) = 0u;
  *(_OWORD *)(v18 + 497) = 0u;
  *(_OWORD *)(v18 + 520) = xmmword_19FFB3580;
  *(_DWORD *)(v18 + 536) = 1065353216;
  *(_OWORD *)(v18 + 540) = 0u;
  *(_WORD *)(v18 + 556) = 512;
  *(_BYTE *)(v18 + 562) = 0;
  *(_DWORD *)(v18 + 558) = 0;
  *(_WORD *)(v18 + 563) = -1;
  *(_DWORD *)(v18 + 565) = 0;
  *(_QWORD *)v18 = off_1E4294028;
  *(_OWORD *)(v18 + 576) = 0u;
  *(_QWORD *)(v18 + 592) = 0;
  if ((v23 & 1) == 0)
  {
    v22 = 0uLL;
    if (v86)
    {
      v87 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v87, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v22 = 0uLL;
    }
  }
  *(_QWORD *)(v18 + 600) = mdm::Allocator::instance(void)::alloc;
  *(_BYTE *)(v18 + 608) = 0;
  *(_BYTE *)(v18 + 616) = 0;
  *(_WORD *)(v18 + 628) = 1;
  *(_BYTE *)(v18 + 630) = 0;
  *(_QWORD *)v18 = off_1E42AB4E0;
  *(_QWORD *)(v18 + 632) = 0;
  *(_OWORD *)(v18 + 640) = v22;
  *(_DWORD *)(v18 + 656) = 0;
  *(_BYTE *)(v18 + 660) = 6;
  *(_OWORD *)(v18 + 1064) = v22;
  *(_OWORD *)(v18 + 1080) = v22;
  *(_OWORD *)(v18 + 1096) = v22;
  *(_OWORD *)(v18 + 664) = v22;
  *(_QWORD *)(v18 + 1112) = 0x3FF0000000000000;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v18 + 1120) = _Q0;
  *(_QWORD *)(v18 + 1136) = 0x3FF0000000000000;
  *(_OWORD *)(v18 + 1160) = v22;
  *(_OWORD *)(v18 + 1176) = v22;
  *(_OWORD *)(v18 + 1144) = v22;
  *(_QWORD *)(v18 + 1192) = 0x3FF0000000000000;
  *(_OWORD *)(v18 + 1200) = _Q0;
  *(_QWORD *)(v18 + 1216) = 0x3FF0000000000000;
  *(_QWORD *)(v18 + 1240) = 0;
  *(_DWORD *)(v18 + 1248) = 0;
  *(_OWORD *)(v18 + 1224) = v22;
  *(_BYTE *)(v18 + 1252) = 6;
  *(_OWORD *)(v18 + 1656) = v22;
  *(_OWORD *)(v18 + 1672) = v22;
  *(_OWORD *)(v18 + 1688) = v22;
  *(_QWORD *)(v18 + 1256) = 0;
  *(_QWORD *)(v18 + 1264) = 0;
  *(_QWORD *)(v18 + 1704) = 0x3FF0000000000000;
  *(_OWORD *)(v18 + 1712) = _Q0;
  *(_QWORD *)(v18 + 1728) = 0x3FF0000000000000;
  *(_OWORD *)(v18 + 1752) = v22;
  *(_OWORD *)(v18 + 1768) = v22;
  *(_OWORD *)(v18 + 1736) = v22;
  *(_QWORD *)(v18 + 1784) = 0x3FF0000000000000;
  v94 = _Q0;
  *(_OWORD *)(v18 + 1792) = _Q0;
  *(_QWORD *)(v18 + 1808) = 0x3FF0000000000000;
  *(_WORD *)(v18 + 1816) = 1280;
  if (v15)
  {
    {
      v90 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v90, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v30 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 792, 8);
    md::AnimatedTextureLabelPart::AnimatedTextureLabelPart((uint64_t)v30, a1, (md::Label *)a2, v15);
  }
  else
  {
    v30 = 0;
  }
  {
    v88 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v88, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v32 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                              + 16))(mdm::Allocator::instance(void)::alloc, 736, 8);
  md::ARWalkingManeuverArrowLabelPart::ARWalkingManeuverArrowLabelPart((uint64_t)v32, a1, (md::Label *)a2, &v98, v30, 1);
  md::CompositeLabelPart::addLabelPart(v18, v32);
  (*(void (**)(md::LabelPart *, uint64_t))(*(_QWORD *)v32 + 32))(v32, v18 + 808);
  (*(void (**)(md::LabelPart *, uint64_t))(*(_QWORD *)v32 + 40))(v32, v18 + 1400);
  if (v30)
  {
    (*(void (**)(md::LabelPart *, uint64_t))(*(_QWORD *)v30 + 32))(v30, v18 + 936);
    (*(void (**)(md::LabelPart *, uint64_t))(*(_QWORD *)v30 + 40))(v30, v18 + 1528);
  }
  v93 = v20;
  v33 = (char *)operator new(0xD0uLL);
  v34 = (std::__shared_weak_count *)v33;
  *((_QWORD *)v33 + 1) = 0;
  v35 = (unint64_t *)(v33 + 8);
  *((_QWORD *)v33 + 2) = 0;
  *(_QWORD *)v33 = &off_1E42DDC78;
  *((_QWORD *)v33 + 3) = &off_1E42A0A00;
  v36 = v33 + 24;
  memset(v114, 0, sizeof(v114));
  v113 = 0u;
  do
  {
    v37 = __ldaxr(&md::LabelExternalMeshRequest::nextId(void)::next);
    v38 = v37 + 1;
  }
  while (__stlxr(v38, &md::LabelExternalMeshRequest::nextId(void)::next));
  *((_DWORD *)v33 + 8) = v38;
  v33[36] = 1;
  *(_OWORD *)(v33 + 40) = v113;
  v39 = *((_QWORD *)&v114[1] + 1);
  *((_QWORD *)v33 + 7) = *(_QWORD *)&v114[0];
  *((_OWORD *)v33 + 4) = *(_OWORD *)((char *)v114 + 8);
  *((_QWORD *)v33 + 10) = v39;
  *(_OWORD *)(v33 + 88) = v94;
  *(_OWORD *)(v33 + 104) = v94;
  *((_QWORD *)v33 + 15) = 850045863;
  *((_OWORD *)v33 + 8) = 0u;
  *((_OWORD *)v33 + 9) = 0u;
  *((_OWORD *)v33 + 10) = 0u;
  *((_OWORD *)v33 + 11) = 0u;
  *((_QWORD *)v33 + 24) = 0;
  v33[200] = 1;
  *((_QWORD *)v33 + 3) = &off_1E42A9820;
  *(_DWORD *)(v33 + 201) = v95;
  v111 = v33 + 24;
  v112 = (std::__shared_weak_count *)v33;
  v40 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 21) + 64) + 24))(*(_QWORD *)(*((_QWORD *)a1 + 21) + 64));
  *(_QWORD *)&v113 = v36;
  *((_QWORD *)&v113 + 1) = v34;
  do
    v41 = __ldxr(v35);
  while (__stxr(v41 + 1, v35));
  md::LabelExternalMeshModerator::requestExternalMesh(v40, &v113);
  do
    v42 = __ldaxr(v35);
  while (__stlxr(v42 - 1, v35));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  {
    v89 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v89, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v44 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                              + 16))(mdm::Allocator::instance(void)::alloc, 952, 8);
  md::ARFeatureShadowExternalMeshLabelPart::ARFeatureShadowExternalMeshLabelPart((uint64_t)v44, (uint64_t)v111, v112);
  md::CompositeLabelPart::addLabelPart(v18, v44);
  (*(void (**)(md::LabelPart *, uint64_t))(*(_QWORD *)v44 + 48))(v44, v18 + 1064);
  (*(void (**)(md::LabelPart *, uint64_t))(*(_QWORD *)v44 + 56))(v44, v18 + 1656);
  if (v96)
  {
    {
      v91 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v91, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v46 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 632, 8);
    md::ARWalkingManeuverTextLabelPart::ARWalkingManeuverTextLabelPart((uint64_t)v46, &v96, 0, 1);
    md::CompositeLabelPart::addLabelPart(v18, v46);
    (*(void (**)(md::LabelPart *, uint64_t))(*(_QWORD *)v46 + 32))(v46, v18 + 680);
    (*(void (**)(md::LabelPart *, uint64_t))(*(_QWORD *)v46 + 40))(v46, v18 + 1272);
    *(_BYTE *)(v18 + 1816) = 1;
    v47 = (char *)operator new(0xD0uLL);
    v48 = (std::__shared_weak_count *)v47;
    *((_QWORD *)v47 + 1) = 0;
    v49 = (unint64_t *)(v47 + 8);
    *((_QWORD *)v47 + 2) = 0;
    *(_QWORD *)v47 = &off_1E42DDC78;
    *((_QWORD *)v47 + 3) = &off_1E42A0A00;
    v50 = v47 + 24;
    memset(v114, 0, sizeof(v114));
    v113 = 0u;
    do
    {
      v51 = __ldaxr(&md::LabelExternalMeshRequest::nextId(void)::next);
      v52 = v51 + 1;
    }
    while (__stlxr(v52, &md::LabelExternalMeshRequest::nextId(void)::next));
    *((_DWORD *)v47 + 8) = v52;
    v53 = *((_QWORD *)&v114[1] + 1);
    *((_QWORD *)v47 + 7) = *(_QWORD *)&v114[0];
    v47[36] = 1;
    *(_OWORD *)(v47 + 40) = v113;
    *((_OWORD *)v47 + 4) = *(_OWORD *)((char *)v114 + 8);
    *((_QWORD *)v47 + 10) = v53;
    *(_OWORD *)(v47 + 88) = v94;
    *(_OWORD *)(v47 + 104) = v94;
    *((_QWORD *)v47 + 15) = 850045863;
    *((_OWORD *)v47 + 8) = 0u;
    *((_OWORD *)v47 + 9) = 0u;
    *((_OWORD *)v47 + 10) = 0u;
    *((_OWORD *)v47 + 11) = 0u;
    *((_QWORD *)v47 + 24) = 0;
    v47[200] = 1;
    *((_QWORD *)v47 + 3) = &off_1E42A9820;
    *(_DWORD *)(v47 + 201) = v95;
    v109 = v47 + 24;
    v110 = (std::__shared_weak_count *)v47;
    v54 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a1 + 21) + 64) + 24))(*(_QWORD *)(*((_QWORD *)a1 + 21) + 64));
    *(_QWORD *)&v113 = v50;
    *((_QWORD *)&v113 + 1) = v48;
    do
      v55 = __ldxr(v49);
    while (__stxr(v55 + 1, v49));
    md::LabelExternalMeshModerator::requestExternalMesh(v54, &v113);
    do
      v56 = __ldaxr(v49);
    while (__stlxr(v56 - 1, v49));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
    {
      v92 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v92, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v58 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 952, 8);
    v59 = v110;
    md::ARFeatureShadowExternalMeshLabelPart::ARFeatureShadowExternalMeshLabelPart((uint64_t)v58, (uint64_t)v109, v110);
    md::CompositeLabelPart::addLabelPart(v18, v58);
    (*(void (**)(md::LabelPart *, uint64_t))(*(_QWORD *)v58 + 48))(v58, v18 + 1144);
    (*(void (**)(md::LabelPart *, uint64_t))(*(_QWORD *)v58 + 56))(v58, v18 + 1736);
    if (v59)
    {
      p_shared_owners = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldaxr(p_shared_owners);
      while (__stlxr(v61 - 1, p_shared_owners));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
  }
  *(_WORD *)(v18 + 565) = 257;
  v62 = *(_QWORD **)(v18 + 576);
  for (i = *(_QWORD **)(v18 + 584); v62 != i; ++v62)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v62 + 64))(*v62, 1, 1);
  v64 = v112;
  if (!v112)
    goto LABEL_49;
  v65 = &v112->__shared_owners_;
  do
    v66 = __ldaxr((unint64_t *)v65);
  while (__stlxr(v66 - 1, (unint64_t *)v65));
  if (!v66)
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
    v67 = v97;
    if (v93)
    {
LABEL_50:
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        goto LABEL_58;
      }
      goto LABEL_60;
    }
  }
  else
  {
LABEL_49:
    v67 = v97;
    if (v93)
      goto LABEL_50;
  }
  if (v67)
  {
    v70 = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldaxr(v70);
    while (__stlxr(v69 - 1, v70));
LABEL_58:
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
LABEL_60:
  v71 = v99;
  if (v99)
  {
    v72 = (unint64_t *)&v99->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = v101;
  if (v101)
  {
    v75 = (unint64_t *)&v101->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
LABEL_70:
  v77 = v103;
  if (!v103)
    goto LABEL_74;
  v78 = (unint64_t *)&v103->__shared_owners_;
  do
    v79 = __ldaxr(v78);
  while (__stlxr(v79 - 1, v78));
  if (!v79)
  {
    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
    std::__shared_weak_count::__release_weak(v77);
    v80 = v105;
    if (!v105)
      goto LABEL_78;
  }
  else
  {
LABEL_74:
    v80 = v105;
    if (!v105)
      goto LABEL_78;
  }
  v81 = (unint64_t *)&v80->__shared_owners_;
  do
    v82 = __ldaxr(v81);
  while (__stlxr(v82 - 1, v81));
  if (!v82)
  {
    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
    std::__shared_weak_count::__release_weak(v80);
    if ((SHIBYTE(v107) & 0x80000000) == 0)
      return v18;
    goto LABEL_79;
  }
LABEL_78:
  if (SHIBYTE(v107) < 0)
LABEL_79:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v108 + 40))(v108, v106, v107 & 0x7FFFFFFFFFFFFFFFLL);
  return v18;
}

void sub_19FEC9308(mdm::Allocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  md::CompositeLabelPart *v31;
  uint64_t v32;
  uint64_t v34;
  mdm::Allocator *v35;
  uint64_t v36;

  v34 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v34 + 40))(v34, v32, 952);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  md::CompositeLabelPart::~CompositeLabelPart(v31);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  v35 = (mdm::Allocator *)std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  v36 = mdm::Allocator::instance(v35);
  (*(void (**)(uint64_t, md::CompositeLabelPart *, uint64_t))(*(_QWORD *)v36 + 40))(v36, v31, 1824);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if (SHIBYTE(a27) < 0)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a28 + 40))(a28, a25, a27 & 0x7FFFFFFFFFFFFFFFLL);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

void sub_19FEC9708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  md::TextDataStore::~TextDataStore((md::TextDataStore *)&a9);
  _Unwind_Resume(a1);
}

md::JunctionLayoutContext *md::JunctionLayoutContext::JunctionLayoutContext(md::JunctionLayoutContext *this, const md::LayoutContext *a2)
{
  uint64_t *v3;
  int8x8_t v4;
  uint8x8_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = a2;
  *(_QWORD *)((char *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  v3 = (uint64_t *)*((_QWORD *)a2 + 1);
  v4 = (int8x8_t)v3[1];
  v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = 0x1AF456233693CD46uLL % *(_QWORD *)&v4;
    if (*(_QWORD *)&v4 > 0x1AF456233693CD46uLL)
      v6 = 0x1AF456233693CD46;
  }
  else
  {
    v6 = (*(_QWORD *)&v4 - 1) & 0x1AF456233693CD46;
  }
  v7 = *v3;
  v8 = *(_QWORD **)(v7 + 8 * v6);
  if (!v8)
    goto LABEL_23;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_23;
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      v11 = v9[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v9[2] == 0x1AF456233693CD46)
          goto LABEL_21;
      }
      else if ((v11 & (*(_QWORD *)&v4 - 1)) != v6)
      {
        goto LABEL_23;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_23;
    }
  }
  while (1)
  {
    v10 = v9[1];
    if (v10 == 0x1AF456233693CD46)
      break;
    if (v10 >= *(_QWORD *)&v4)
      v10 %= *(_QWORD *)&v4;
    if (v10 != v6)
      goto LABEL_23;
LABEL_10:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_23;
  }
  if (v9[2] != 0x1AF456233693CD46)
    goto LABEL_10;
LABEL_21:
  v12 = v9[5];
  if (*(_QWORD *)(v12 + 8) == 0x1AF456233693CD46)
  {
    v13 = *(_QWORD *)(v12 + 32);
    goto LABEL_24;
  }
LABEL_23:
  v13 = 0;
LABEL_24:
  if (v5.u32[0] >= 2uLL)
  {
    v15 = 0x3070CB6B3C7F21D3;
    if (*(_QWORD *)&v4 <= 0x3070CB6B3C7F21D3uLL)
      v15 = 0x3070CB6B3C7F21D3uLL % *(_QWORD *)&v4;
    v14 = *(_QWORD **)(v7 + 8 * v15);
    do
    {
      do
        v14 = (_QWORD *)*v14;
      while (v14[1] != 0x3070CB6B3C7F21D3);
    }
    while (v14[2] != 0x3070CB6B3C7F21D3);
  }
  else
  {
    v14 = *(_QWORD **)(v7 + 8 * ((*(_QWORD *)&v4 - 1) & 0x3070CB6B3C7F21D3));
    do
    {
      do
        v14 = (_QWORD *)*v14;
      while (v14[1] != 0x3070CB6B3C7F21D3);
    }
    while (v14[2] != 0x3070CB6B3C7F21D3);
  }
  v16 = *(uint64_t **)(v14[5] + 32);
  v18 = *v16;
  v17 = v16[1];
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v21 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 1) = v18;
    *((_QWORD *)this + 2) = v17;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = v18;
    *((_QWORD *)this + 2) = 0;
  }
  *((float *)this + 6) = fmaxf(*(float *)(v13 + 3080) + *(float *)(v13 + 3076), 1.0);
  return this;
}

md::TrailJunctionRenderable::SharedResources *md::TrailJunctionRenderable::SharedResources::SharedResources(md::TrailJunctionRenderable::SharedResources *this, const ggl::StandardLibrary *a2, const RenderTargetFormat *a3, __int128 *a4, int a5)
{
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = a3;
  if (a3)
  {
    v7 = (unint64_t *)&a3->colorFormats[2];
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *a4;
  v10 = a4[1];
  *((_QWORD *)this + 15) = 0;
  *(_OWORD *)((char *)this + 24) = v9;
  *(_OWORD *)((char *)this + 40) = v10;
  *((_BYTE *)this + 56) = 1;
  *(_QWORD *)((char *)this + 60) = 0x700000006;
  *(_QWORD *)((char *)this + 68) = 0x100000000;
  *((_DWORD *)this + 19) = 7;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  *((_BYTE *)this + 100) = 15;
  *((_BYTE *)this + 104) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 14) = (char *)this + 120;
  v11 = operator new();
  *(_DWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  v12 = 65537;
  if (a5)
    v12 = 65792;
  *(_QWORD *)v11 = &off_1E42B5DE8;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 36) = v12;
  *(_DWORD *)(v11 + 44) = 0;
  *(_QWORD *)(v11 + 48) = 1;
  *(_WORD *)(v11 + 56) = 0;
  *(_BYTE *)(v11 + 58) = 3;
  *(_QWORD *)(v11 + 67) = 0;
  *(_QWORD *)(v11 + 59) = 0;
  *(_BYTE *)(v11 + 75) = 0;
  *(_QWORD *)(v11 + 132) = 0;
  *(_QWORD *)(v11 + 124) = 0;
  *(_WORD *)(v11 + 188) = 257;
  *(_QWORD *)(v11 + 192) = 0;
  *(_QWORD *)(v11 + 200) = 0;
  *(_BYTE *)(v11 + 208) = 0;
  v13 = *(_QWORD *)this;
  *(_QWORD *)this = v11;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return this;
}

void sub_19FEC9A98(_Unwind_Exception *a1)
{
  uint64_t *v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;

  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy((_QWORD *)v1[15]);
  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *v1;
  *v1 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ggl::CircleMultiStroke::FillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0DE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::CircleMultiStroke::FillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0DE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_pointer<ggl::CircleMultiStroke::FillPipelineSetup  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_pointer<ggl::CircleMultiStroke::FillPipelineSetup  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ggl::ConstantDataTyped<ggl::CircleMultiStroke::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::CircleMultiStroke::Style>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::CircleMultiStroke::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1B78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::CircleMultiStroke::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1B78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::CircleMultiStroke::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ggl::ConstantDataTyped<ggl::CircleMultiStroke::CirclePositionAndScale>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::ConstantDataTyped<ggl::CircleMultiStroke::CirclePositionAndScale>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::CircleMultiStroke::CirclePositionAndScale>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1B40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::CircleMultiStroke::CirclePositionAndScale>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E1B40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::CircleMultiStroke::CirclePositionAndScale>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t md::TrailJunctionRenderable::TrailJunctionRenderable(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  ggl::CircleMultiStroke::FillPipelineSetup *v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  ggl::CircleMultiStroke::FillPipelineSetup *v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  v4 = operator new(0xE8uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E42E1B40;
  v5 = ggl::BufferData::BufferData((uint64_t)(v4 + 3), qword_1EE547518, 2, 1, 6, 1);
  v4[28] = ggl::CircleMultiStroke::CirclePositionAndScale::reflection(void)::reflection;
  v4[3] = &off_1E42B9370;
  v6 = *(std::__shared_weak_count **)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v4;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = operator new(0xE8uLL);
  v9[1] = 0;
  v9[2] = 0;
  *v9 = &off_1E42E1B40;
  v10 = ggl::BufferData::BufferData((uint64_t)(v9 + 3), qword_1EE547518, 2, 1, 6, 1);
  v9[28] = ggl::CircleMultiStroke::CirclePositionAndScale::reflection(void)::reflection;
  v9[3] = &off_1E42B9370;
  v11 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v9;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = operator new(0xE8uLL);
  v14[1] = 0;
  v14[2] = 0;
  *v14 = &off_1E42E1B78;
  v15 = ggl::BufferData::BufferData((uint64_t)(v14 + 3), qword_1EE547498, 2, 1, 6, 1);
  v14[28] = ggl::CircleMultiStroke::Style::reflection(void)::reflection;
  v14[3] = &off_1E42B9390;
  v16 = *(std::__shared_weak_count **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(a1 + 24) = v14;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = operator new(0xE8uLL);
  v19[1] = 0;
  v19[2] = 0;
  *v19 = &off_1E42E1B78;
  v20 = ggl::BufferData::BufferData((uint64_t)(v19 + 3), qword_1EE547498, 2, 1, 6, 1);
  v19[28] = ggl::CircleMultiStroke::Style::reflection(void)::reflection;
  v19[3] = &off_1E42B9390;
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v20;
  *(_QWORD *)(a1 + 40) = v19;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (ggl::CircleMultiStroke::FillPipelineSetup *)operator new();
  ggl::CircleMultiStroke::FillPipelineSetup::FillPipelineSetup(v24);
  v25 = (_QWORD *)operator new();
  *v25 = &off_1E42E7988;
  v25[1] = 0;
  v25[2] = 0;
  v25[3] = v24;
  v26 = *(std::__shared_weak_count **)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v24;
  *(_QWORD *)(a1 + 88) = v25;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (ggl::CircleMultiStroke::FillPipelineSetup *)operator new();
  ggl::CircleMultiStroke::FillPipelineSetup::FillPipelineSetup(v29);
  v30 = (_QWORD *)operator new();
  *v30 = &off_1E42E7988;
  v30[1] = 0;
  v30[2] = 0;
  v30[3] = v29;
  v31 = *(std::__shared_weak_count **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v29;
  *(_QWORD *)(a1 + 104) = v30;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = operator new();
  *(_QWORD *)v34 = &off_1E42B59B0;
  *(_QWORD *)(v34 + 48) = 0;
  *(_QWORD *)(v34 + 24) = 0;
  *(_QWORD *)(v34 + 32) = 0;
  *(_QWORD *)(v34 + 16) = "TrailJunctionFill";
  *(_DWORD *)(v34 + 40) = 0;
  *(_DWORD *)(v34 + 56) = 1065353216;
  *(_OWORD *)(v34 + 64) = 0u;
  *(_OWORD *)(v34 + 80) = 0u;
  *(int64x2_t *)(v34 + 96) = vdupq_n_s64(1uLL);
  *(_QWORD *)(v34 + 112) = 0;
  v35 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v34;
  if (v35)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v34 = *(_QWORD *)(a1 + 112);
  }
  *(_QWORD *)(v34 + 32) = *(_QWORD *)(a1 + 80);
  v36 = operator new();
  *(_QWORD *)v36 = &off_1E42B59B0;
  *(_QWORD *)(v36 + 48) = 0;
  *(_QWORD *)(v36 + 24) = 0;
  *(_QWORD *)(v36 + 32) = 0;
  *(_QWORD *)(v36 + 16) = "TrailJunctionBackground";
  *(_DWORD *)(v36 + 40) = 0;
  *(_DWORD *)(v36 + 56) = 1065353216;
  *(_OWORD *)(v36 + 64) = 0u;
  *(_OWORD *)(v36 + 80) = 0u;
  *(int64x2_t *)(v36 + 96) = vdupq_n_s64(1uLL);
  *(_QWORD *)(v36 + 112) = 0;
  v37 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v36;
  if (v37)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    v36 = *(_QWORD *)(a1 + 120);
  }
  *(_QWORD *)(v36 + 32) = *(_QWORD *)(a1 + 96);
  return a1;
}

void sub_19FECA29C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;

  v3 = v2;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v5 = v1[15];
  v1[15] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = v1[14];
  v1[14] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (std::__shared_weak_count *)v1[13];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)v1[11];
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)v1[9];
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)v1[7];
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)v1[5];
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)v1[3];
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  _Unwind_Resume(a1);
}

void md::TrailJunctionRenderable::writePass(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  _QWORD *v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  unint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  unint64_t v32;
  _DWORD *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  char v38;
  unsigned __int16 v39;
  int8x16_t v40;
  int16x8_t v41;
  int32x4_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int16x8_t v45;
  int32x4_t v46;
  int8x16_t v47;
  int32x4_t v48;
  int8x16_t v49;
  int32x4_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t **v58;
  uint64_t **v59;
  unint64_t v60;
  BOOL v61;
  _QWORD *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  __int128 v65;
  char v66;
  unsigned __int8 v67;
  std::__shared_weak_count_vtbl *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  __int128 v73;
  char v74;
  unint64_t *v75;
  unint64_t v76;
  __int128 v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  char v81;
  int8x16_t v82;
  int8x16_t v83;
  int16x8_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int16x8_t v88;
  int32x4_t v89;
  int8x16_t v90;
  int32x4_t v91;
  int8x16_t v92;
  int32x4_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int16x8_t v103;
  int32x4_t v104;
  int8x16_t v105;
  int16x8_t v106;
  int32x4_t v107;
  int8x16_t v108;
  int32x4_t v109;
  int8x16_t v110;
  int32x4_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int16x8_t v126;
  int32x4_t v127;
  int8x16_t v128;
  int16x8_t v129;
  int32x4_t v130;
  int8x16_t v131;
  int32x4_t v132;
  int8x16_t v133;
  int32x4_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t v140;
  int16x8_t v141;
  int32x4_t v142;
  int8x16_t v143;
  int16x8_t v144;
  int32x4_t v145;
  int8x16_t v146;
  int32x4_t v147;
  int8x16_t v148;
  int32x4_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  unint64_t v154;
  uint64_t *v155;
  uint64_t **v156;
  unint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  std::__shared_weak_count *v163;
  BOOL v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t *v173;
  unint64_t *v174;
  unint64_t v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  std::__shared_weak_count *v198;
  uint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  _QWORD *v205;
  _QWORD *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  char v219;
  ggl::CircleMultiStrokeShader *v220;
  unsigned __int8 v221;
  unsigned __int8 v222;
  unsigned __int8 v223;
  unsigned __int8 v224;
  unsigned __int8 v225;
  unsigned __int8 v226;
  char v227;
  char v228;
  std::__shared_weak_count *v229;
  _QWORD *v230;
  std::__shared_weak_count *v231;
  _QWORD *v232;
  std::__shared_weak_count *v233;
  __int128 v234;
  __int128 v235;
  _OWORD v236[3];

  v7 = a3;
  v9 = a2;
  v10 = a1 + 8 * a2;
  *(_QWORD *)(*(_QWORD *)(v10 + 112) + 24) = *(_QWORD *)a5;
  *(_QWORD *)(*(_QWORD *)(v10 + 112) + 64) = *(_QWORD *)(a3 + 8);
  v11 = (float)(*(float *)(a4 + 20) + *(float *)a4) + (float)(*(float *)(a4 + 40) + *(float *)(a4 + 60));
  v12 = *(_QWORD *)(a3 + 40);
  if ((*(_BYTE *)(v12 + 16) & 2) == 0)
  {
    v13 = atomic_load(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag);
    if (v13 != -1)
    {
      *(_QWORD *)&v234 = &v232;
      *(_QWORD *)&v236[0] = &v234;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, v236, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
  }
  v14 = *(float *)(*(_QWORD *)(v12 + 72) + 64) * v11;
  v15 = (_QWORD *)(a1 + 16 * v9);
  v16 = (_QWORD *)v15[6];
  v17 = (std::__shared_weak_count *)v15[7];
  v232 = v16;
  v233 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v20 = v16[1];
  v21 = v16[9];
  *(_QWORD *)v21 = *(_QWORD *)a1;
  v22 = v16[8];
  if (v22 <= v20)
    v22 = v20;
  v16[7] = 0;
  if (v22 <= v20)
    v22 = v20;
  *(_DWORD *)(v21 + 8) = *(_DWORD *)(a1 + 8);
  *(float *)(v21 + 12) = v14;
  if (v22 > v20)
    v20 = v22;
  v16[8] = v20;
  v23 = (_QWORD *)v15[2];
  v24 = (std::__shared_weak_count *)v15[3];
  v230 = v23;
  v231 = v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = v23[1];
  v28 = (_DWORD *)v23[9];
  *v28 = *(_DWORD *)(a4 + 4);
  v28[1] = *(_DWORD *)(a4 + 8);
  v28[2] = *(_DWORD *)(a4 + 12);
  v28[3] = *(_DWORD *)(a4 + 16);
  v29 = v23[8];
  if (v29 <= v27)
    v29 = v27;
  v23[7] = 0;
  v28[4] = *(_DWORD *)(a4 + 24);
  v28[5] = *(_DWORD *)(a4 + 28);
  v28[6] = *(_DWORD *)(a4 + 32);
  v28[7] = *(_DWORD *)(a4 + 36);
  if (v29 <= v27)
    v30 = v27;
  else
    v30 = v29;
  v23[8] = v30;
  *(float *)(v23[9] + 64) = (float)(*(float *)(a4 + 20) * 0.5) / v11;
  if (v30 <= v27)
    v30 = v27;
  v23[8] = v30;
  v31 = (_DWORD *)v23[9];
  v31[12] = *(_DWORD *)(a4 + 44);
  v31[13] = *(_DWORD *)(a4 + 48);
  v31[14] = *(_DWORD *)(a4 + 52);
  v31[15] = *(_DWORD *)(a4 + 56);
  if (v30 <= v27)
    v30 = v27;
  v23[8] = v30;
  *(float *)(v23[9] + 68) = (float)(*(float *)(a4 + 40) * 0.5) / v11;
  if (v30 > v27)
    v27 = v30;
  v23[8] = v27;
  v32 = v23[1];
  if (v32)
    v33 = (_DWORD *)v23[9];
  else
    v33 = 0;
  v33[8] = *(_DWORD *)(a4 + 64);
  v33[9] = *(_DWORD *)(a4 + 68);
  v33[10] = *(_DWORD *)(a4 + 72);
  v33[11] = *(_DWORD *)(a4 + 76);
  if (v33 && v32)
  {
    v34 = v23[8];
    if (v34 <= v32)
      v34 = v32;
    v23[7] = 0;
    v23[8] = v34;
  }
  v35 = v23[9];
  *(float *)(v35 + 72) = (float)(*(float *)(a4 + 60) * 0.5) / v11;
  v36 = v23[8];
  if (v36 <= v32)
    v36 = v32;
  v23[7] = 0;
  *(_DWORD *)(v35 + 76) = *(_DWORD *)(a4 + 80);
  if (v36 > v32)
    v32 = v36;
  v23[8] = v32;
  v37 = *(_QWORD **)(a1 + 16 * v9 + 80);
  v38 = *(_BYTE *)(v7 + 35);
  LOBYTE(v39) = v38;
  HIBYTE(v39) = *(_BYTE *)(v7 + 34);
  v40 = vceqzq_s8((int8x16_t)v39);
  v41 = vmovl_s8(*(int8x8_t *)v40.i8);
  v42 = vmovl_high_s16(v41);
  v43.i64[0] = v42.u32[2];
  v43.i64[1] = v42.u32[3];
  v44 = v43;
  v45 = vmovl_high_s8(v40);
  v46 = vmovl_high_s16(v45);
  v43.i64[0] = v46.u32[2];
  v43.i64[1] = v46.u32[3];
  v47 = v43;
  v48 = vmovl_s16(*(int16x4_t *)v41.i8);
  v43.i64[0] = v48.u32[2];
  v43.i64[1] = v48.u32[3];
  v49 = v43;
  v50 = vmovl_s16(*(int16x4_t *)v45.i8);
  v43.i64[0] = v50.u32[2];
  v43.i64[1] = v50.u32[3];
  v51 = v43;
  v43.i64[0] = v42.u32[0];
  v43.i64[1] = v42.u32[1];
  v52 = v43;
  v43.i64[0] = v46.u32[0];
  v43.i64[1] = v46.u32[1];
  v53 = v43;
  v43.i64[0] = v48.u32[0];
  v43.i64[1] = v48.u32[1];
  v54 = v43;
  v43.i64[0] = v50.u32[0];
  v43.i64[1] = v50.u32[1];
  v55 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v54), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v43)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30B0, v52), vbicq_s8((int8x16_t)xmmword_19FFB30C0, v53))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3090, v49), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v51)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3070, v44), vbicq_s8((int8x16_t)xmmword_19FFB3080, v47)))));
  v56 = v55;
  v58 = (uint64_t **)(a5 + 120);
  v57 = *(_QWORD **)(a5 + 120);
  if (!v57)
    goto LABEL_50;
  v59 = (uint64_t **)(a5 + 120);
  do
  {
    v60 = v57[4];
    v61 = v60 >= v55;
    if (v60 >= v55)
      v62 = v57;
    else
      v62 = v57 + 1;
    if (v61)
      v59 = (uint64_t **)v57;
    v57 = (_QWORD *)*v62;
  }
  while (*v62);
  if (v59 == v58 || v55 < (unint64_t)v59[4])
  {
LABEL_50:
    v228 = *(_BYTE *)(v7 + 34);
    v63 = (std::__shared_weak_count *)operator new(0x198uLL);
    v227 = v38;
    v63->__shared_owners_ = 0;
    v64 = (unint64_t *)&v63->__shared_owners_;
    v63->__shared_weak_owners_ = 0;
    v63->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0DE8;
    v65 = *(_OWORD *)(a5 + 40);
    v234 = *(_OWORD *)(a5 + 24);
    v235 = v65;
    v66 = *(_BYTE *)(a5 + 104);
    if ((v67 & 1) == 0)
    {
      v219 = *(_BYTE *)(a5 + 104);
      v66 = v219;
      if ((_DWORD)v220)
      {
        if ((v221 & 1) == 0)
        {
          if ((_DWORD)v220)
          {
            if ((v224 & 1) == 0
            {
              if ((v226 & 1) == 0
              {
                ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2Reflection;
              }
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r;
              unk_1ECE43A80 = 1;
            }
            ggl::CircleMultiStroke::FillPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r;
            *(_QWORD *)algn_1ECE300A8 = &ggl::CircleMultiStroke::pipelineDataFillPipelineDeviceStructs(void)::ref;
            qword_1ECE300B0 = 0;
            if ((v225 & 1) == 0
            {
              ggl::CircleMultiStroke::pipelineDataFillPipelineConstantStructs(void)::ref = (uint64_t)ggl::CircleMultiStroke::Style::reflection(void)::reflection;
              unk_1ECE300E0 = ggl::Tile::View::reflection(void)::reflection;
              qword_1ECE300E8 = (uint64_t)ggl::Tile::Transform::reflection(void)::reflection;
              unk_1ECE300F0 = ggl::CircleMultiStroke::CirclePositionAndScale::reflection(void)::reflection;
            }
            qword_1ECE300B8 = (uint64_t)&ggl::CircleMultiStroke::pipelineDataFillPipelineConstantStructs(void)::ref;
            unk_1ECE300C0 = xmmword_19FFB3690;
          }
        }
        ggl::CircleMultiStroke::FillPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::CircleMultiStroke::FillPipelineSetup::typedReflection(void)::ref;
        ggl::CircleMultiStrokeShader::typedReflection(v220);
        qword_1EE586CB0 = (uint64_t)&ggl::CircleMultiStrokeShader::typedReflection(void)::ref;
        if ((v222 & 1) == 0
        {
          ggl::CircleMultiStroke::pipelineStateFillPipelineAttributeStructBinding(void)::attr = 0;
          unk_1EE586D20 = 0;
          qword_1EE586D28 = (uint64_t)"";
          dword_1EE586D30 = 0;
          qword_1EE586D38 = (uint64_t)&ggl::CircleMultiStroke::pipelineStateFillPipelineAttributeBinding_0(void)::attr;
          unk_1EE586D40 = 1;
        }
        qword_1EE586CB8 = (uint64_t)&ggl::CircleMultiStroke::pipelineStateFillPipelineAttributeStructBinding(void)::attr;
        unk_1EE586CC0 = 1;
        qword_1EE586CC8 = 0;
        unk_1EE586CD0 = 0;
        qword_1EE586CD8 = (uint64_t)&ggl::CircleMultiStroke::pipelineStateFillPipelineDeviceStructBinding(void)::ref;
        unk_1EE586CE0 = 0;
        if ((v223 & 1) == 0
        {
          ggl::CircleMultiStroke::pipelineStateFillPipelineConstantStructBinding(void)::ref = 0;
          unk_1EE586D60 = 0;
          qword_1EE586D68 = (uint64_t)"style";
          dword_1EE586D70 = 3;
          qword_1EE586D78 = (uint64_t)&ggl::CircleMultiStroke::pipelineStateFillPipelineConstantStyleBinding(void)::reflection;
          unk_1EE586D80 = xmmword_19FFB5FE0;
          qword_1EE586D90 = 1;
          unk_1EE586D98 = "view";
          dword_1EE586DA0 = 3;
          qword_1EE586DA8 = (uint64_t)&ggl::CircleMultiStroke::pipelineStateFillPipelineConstantViewBinding(void)::reflection;
          *(int64x2_t *)algn_1EE586DB0 = vdupq_n_s64(2uLL);
          qword_1EE586DC0 = 2;
          unk_1EE586DC8 = "transform";
          dword_1EE586DD0 = 3;
          qword_1EE586DD8 = (uint64_t)&ggl::CircleMultiStroke::pipelineStateFillPipelineConstantTransformBinding(void)::reflection;
          unk_1EE586DE0 = xmmword_19FFB4B30;
          qword_1EE586DF0 = 3;
          unk_1EE586DF8 = "positionScaleInfo";
          dword_1EE586E00 = 3;
          qword_1EE586E08 = (uint64_t)&ggl::CircleMultiStroke::pipelineStateFillPipelineConstantPositionScaleInfoBinding(void)::reflection;
          unk_1EE586E10 = 3;
        }
        qword_1EE586CE8 = (uint64_t)&ggl::CircleMultiStroke::pipelineStateFillPipelineConstantStructBinding(void)::ref;
        unk_1EE586CF0 = 4;
        v66 = v219;
      }
    }
    v68 = *(std::__shared_weak_count_vtbl **)(a5 + 8);
    v69 = *(std::__shared_weak_count **)(a5 + 16);
    if (v69)
    {
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    v72 = v63 + 1;
    v236[0] = *(_OWORD *)(a5 + 56);
    *(_OWORD *)((char *)v236 + 12) = *(_OWORD *)(a5 + 68);
    v73 = *(_OWORD *)(a5 + 84);
    v74 = *(_BYTE *)(a5 + 100);
    v63[1].__shared_weak_owners_ = 0;
    v63[2].__vftable = 0;
    LODWORD(v63[2].__shared_owners_) = 0;
    v63[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B6760;
    v63[1].__shared_owners_ = 0;
    v63[2].__shared_weak_owners_ = (uint64_t)&ggl::CircleMultiStroke::FillPipelineState::typedReflection(void)::ref;
    v63[3].__vftable = v68;
    v63[3].__shared_owners_ = (uint64_t)v69;
    if (v69)
    {
      v75 = (unint64_t *)&v69->__shared_owners_;
      do
        v76 = __ldxr(v75);
      while (__stxr(v76 + 1, v75));
    }
    LOBYTE(v63[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v63[5].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v63[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v63[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v63[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v63[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v63[7].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v63[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v63[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v63[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v63[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v63[9].__shared_weak_owners_ + 4) = xmmword_19FFB3060;
    *(uint64_t *)((char *)&v63[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v63[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v63[10].__shared_weak_owners_ + 4) = 0;
    v77 = v235;
    *(_OWORD *)&v63[11].__shared_weak_owners_ = v234;
    *(_OWORD *)&v63[12].__shared_owners_ = v77;
    LOBYTE(v63[13].__vftable) = 0;
    v63[16].__vftable = 0;
    *(_OWORD *)&v63[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v63[15].__shared_owners_ = 0u;
    *(_OWORD *)&v63[13].__shared_owners_ = 0u;
    v63[14].std::__shared_count = 0u;
    v63[16].__shared_owners_ = 0x100000001;
    LOBYTE(v63[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v63[4].std::__shared_count + 4) = *(std::__shared_count *)((char *)v236 + 12);
    *(_OWORD *)&v63[3].__shared_weak_owners_ = v236[0];
    *(_OWORD *)((char *)&v63[4].__shared_weak_owners_ + 4) = v73;
    BYTE4(v63[5].__shared_owners_) = v74;
    if (v69)
    {
      v78 = (unint64_t *)&v69->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        v80 = v7;
        v81 = v66;
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
        v66 = v81;
        v7 = v80;
        v72 = v63 + 1;
      }
    }
    LOBYTE(v63[13].__shared_weak_owners_) = v66;
    BYTE1(v63[13].__shared_weak_owners_) = v227;
    BYTE2(v63[13].__shared_weak_owners_) = v228;
    v82 = *(int8x16_t *)&v63[14].__shared_owners_;
    v83 = vceqzq_s8(*(int8x16_t *)&v63[13].__shared_weak_owners_);
    v84 = vmovl_high_s8(v83);
    v85 = vmovl_s16(*(int16x4_t *)v84.i8);
    v86.i64[0] = v85.u32[0];
    v86.i64[1] = v85.u32[1];
    v87 = v86;
    v88 = vmovl_s8(*(int8x8_t *)v83.i8);
    v89 = vmovl_s16(*(int16x4_t *)v88.i8);
    v86.i64[0] = v89.u32[0];
    v86.i64[1] = v89.u32[1];
    v90 = v86;
    v91 = vmovl_high_s16(v84);
    v86.i64[0] = v91.u32[0];
    v86.i64[1] = v91.u32[1];
    v92 = v86;
    v63[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E42B8B70;
    v93 = vmovl_high_s16(v88);
    v86.i64[0] = v93.u32[0];
    v86.i64[1] = v93.u32[1];
    v94 = v86;
    v86.i64[0] = v85.u32[2];
    v86.i64[1] = v85.u32[3];
    v95 = v86;
    v86.i64[0] = v89.u32[2];
    v86.i64[1] = v89.u32[3];
    v96 = v86;
    v86.i64[0] = v91.u32[2];
    v86.i64[1] = v91.u32[3];
    v97 = v86;
    v86.i64[0] = v93.u32[2];
    v86.i64[1] = v93.u32[3];
    v98 = vbicq_s8((int8x16_t)xmmword_19FFB3070, v86);
    v99 = vbicq_s8((int8x16_t)xmmword_19FFB3080, v97);
    v100 = vbicq_s8((int8x16_t)xmmword_19FFB3090, v96);
    v101 = vbicq_s8((int8x16_t)xmmword_19FFB30C0, v92);
    v102 = vceqzq_s8(v82);
    v103 = vmovl_high_s8(v102);
    v104 = vmovl_s16(*(int16x4_t *)v103.i8);
    v86.i64[0] = v104.u32[0];
    v86.i64[1] = v104.u32[1];
    v105 = v86;
    v106 = vmovl_s8(*(int8x8_t *)v102.i8);
    v107 = vmovl_s16(*(int16x4_t *)v106.i8);
    v86.i64[0] = v107.u32[0];
    v86.i64[1] = v107.u32[1];
    v108 = v86;
    v109 = vmovl_high_s16(v103);
    v86.i64[0] = v109.u32[0];
    v86.i64[1] = v109.u32[1];
    v110 = v86;
    v111 = vmovl_high_s16(v106);
    v86.i64[0] = v111.u32[0];
    v86.i64[1] = v111.u32[1];
    v112 = v86;
    v86.i64[0] = v104.u32[2];
    v86.i64[1] = v104.u32[3];
    v113 = v86;
    v86.i64[0] = v107.u32[2];
    v86.i64[1] = v107.u32[3];
    v114 = v86;
    v86.i64[0] = v109.u32[2];
    v86.i64[1] = v109.u32[3];
    v115 = v86;
    v86.i64[0] = v111.u32[2];
    v86.i64[1] = v111.u32[3];
    v116 = vbicq_s8((int8x16_t)xmmword_19FFB30F0, v115);
    v117 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3150, v105), vbicq_s8((int8x16_t)xmmword_19FFB30D0, v87));
    v118 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3140, v108), vbicq_s8((int8x16_t)xmmword_19FFB2DB0, v90));
    v119 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3130, v110), v101);
    v120 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3120, v112), vbicq_s8((int8x16_t)xmmword_19FFB30B0, v94));
    v121 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3110, v113), vbicq_s8((int8x16_t)xmmword_19FFB30A0, v95));
    v122 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3100, v114), v100);
    v123 = vorrq_s8(v116, v99);
    v124 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB30E0, v86), v98);
    v125 = vceqzq_s8((int8x16_t)v63[15].std::__shared_count);
    v126 = vmovl_s8(*(int8x8_t *)v125.i8);
    v127 = vmovl_high_s16(v126);
    v86.i64[0] = v127.i32[2];
    v86.i64[1] = v127.i32[3];
    v128 = v86;
    v129 = vmovl_high_s8(v125);
    v130 = vmovl_high_s16(v129);
    v86.i64[0] = v130.i32[2];
    v86.i64[1] = v130.i32[3];
    v131 = v86;
    v132 = vmovl_s16(*(int16x4_t *)v126.i8);
    v86.i64[0] = v132.i32[2];
    v86.i64[1] = v132.i32[3];
    v133 = v86;
    v134 = vmovl_s16(*(int16x4_t *)v129.i8);
    v86.i64[0] = v134.i32[2];
    v86.i64[1] = v134.i32[3];
    v135 = v86;
    v86.i64[0] = v127.i32[0];
    v86.i64[1] = v127.i32[1];
    v136 = v86;
    v86.i64[0] = v130.i32[0];
    v86.i64[1] = v130.i32[1];
    v137 = v86;
    v86.i64[0] = v132.i32[0];
    v86.i64[1] = v132.i32[1];
    v138 = v86;
    v86.i64[0] = v134.i32[0];
    v86.i64[1] = v134.i32[1];
    v139 = vbicq_s8((int8x16_t)xmmword_19FFB3160, v86);
    v140 = vceqzq_s8(*(int8x16_t *)&v63[15].__shared_weak_owners_);
    v141 = vmovl_high_s8(v140);
    v142 = vmovl_s16(*(int16x4_t *)v141.i8);
    v86.i64[0] = v142.i32[0];
    v86.i64[1] = v142.i32[1];
    v143 = v86;
    v144 = vmovl_s8(*(int8x8_t *)v140.i8);
    v145 = vmovl_s16(*(int16x4_t *)v144.i8);
    v86.i64[0] = v145.i32[0];
    v86.i64[1] = v145.i32[1];
    v146 = v86;
    v147 = vmovl_high_s16(v141);
    v86.i64[0] = v147.i32[0];
    v86.i64[1] = v147.i32[1];
    v148 = v86;
    v149 = vmovl_high_s16(v144);
    v86.i64[0] = v149.i32[0];
    v86.i64[1] = v149.i32[1];
    v150 = v86;
    v86.i64[0] = v142.i32[2];
    v86.i64[1] = v142.i32[3];
    v151 = v86;
    v86.i64[0] = v145.i32[2];
    v86.i64[1] = v145.i32[3];
    v152 = v86;
    v86.i64[0] = v147.i32[2];
    v86.i64[1] = v147.i32[3];
    v153 = v86;
    v86.i64[0] = v149.i32[2];
    v86.i64[1] = v149.i32[3];
    v63[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3240, v146), vbicq_s8((int8x16_t)xmmword_19FFB3170, v138)), v118), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3250, v143), v139), v117)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3220, v150), vbicq_s8((int8x16_t)xmmword_19FFB3190, v136)), v120), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3230, v148),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB3180, v137)),
                                                    v119))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3200, v152), vbicq_s8((int8x16_t)xmmword_19FFB31B0, v133)), v122), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB3210, v151), vbicq_s8((int8x16_t)xmmword_19FFB31A0, v135)), v121)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_19FFB31E0, v86), vbicq_s8((int8x16_t)xmmword_19FFB31D0, v128)), v124), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31F0, v153),
                                                      vbicq_s8((int8x16_t)xmmword_19FFB31C0, v131)),
                                                    v123)))));
    LOBYTE(v63[13].__vftable) = 1;
    v229 = v63;
    *(_QWORD *)&v234 = v56;
    *((_QWORD *)&v234 + 1) = v72;
    *(_QWORD *)&v235 = v63;
    do
      v154 = __ldxr(v64);
    while (__stxr(v154 + 1, v64));
    v155 = *v58;
    v156 = (uint64_t **)(a5 + 120);
    if (*v58)
    {
      while (1)
      {
        while (1)
        {
          v156 = (uint64_t **)v155;
          v157 = v155[4];
          if (v56 >= v157)
            break;
          v155 = *v156;
          v58 = v156;
          if (!*v156)
            goto LABEL_71;
        }
        if (v157 >= v56)
          break;
        v155 = v156[1];
        if (!v155)
        {
          v58 = v156 + 1;
          goto LABEL_71;
        }
      }
    }
    else
    {
LABEL_71:
      v158 = (uint64_t *)operator new(0x38uLL);
      v158[4] = v56;
      v158[5] = (uint64_t)v72;
      v158[6] = (uint64_t)v63;
      *((_QWORD *)&v234 + 1) = 0;
      *(_QWORD *)&v235 = 0;
      *v158 = 0;
      v158[1] = 0;
      v158[2] = (uint64_t)v156;
      *v58 = v158;
      v159 = **(_QWORD **)(a5 + 112);
      if (v159)
      {
        *(_QWORD *)(a5 + 112) = v159;
        v158 = *v58;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a5 + 120), v158);
      ++*(_QWORD *)(a5 + 128);
      v63 = (std::__shared_weak_count *)v235;
      if (!(_QWORD)v235)
      {
LABEL_78:
        v163 = v72;
        v162 = v229;
        v164 = v229 == 0;
        if (!v229)
          goto LABEL_81;
        goto LABEL_79;
      }
    }
    v160 = (unint64_t *)&v63->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
    goto LABEL_78;
  }
  v163 = (std::__shared_weak_count *)v59[5];
  v162 = (std::__shared_weak_count *)v59[6];
  v229 = v162;
  if (!v162)
  {
    v164 = 1;
    if (!v163)
      goto LABEL_83;
    goto LABEL_82;
  }
  v217 = (unint64_t *)&v162->__shared_owners_;
  do
    v218 = __ldxr(v217);
  while (__stxr(v218 + 1, v217));
  v164 = v162 == 0;
LABEL_79:
  v165 = (unint64_t *)&v162->__shared_owners_;
  do
    v166 = __ldxr(v165);
  while (__stxr(v166 + 1, v165));
LABEL_81:
  if (!v163)
  {
LABEL_83:
    v167 = (std::__shared_weak_count *)v37[3];
    v37[2] = 0;
    v37[3] = 0;
    if (!v167)
      goto LABEL_97;
    v168 = (unint64_t *)&v167->__shared_owners_;
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    goto LABEL_96;
  }
LABEL_82:
  if (*(_QWORD *)v163[1].__shared_weak_owners_ != v37[1])
    goto LABEL_83;
  v170 = (std::__shared_weak_count *)v37[2];
  if (v170 && v170 != v163)
    ggl::PipelineSetup::resetData((uint64_t)v37);
  if (!v164)
  {
    v171 = (unint64_t *)&v162->__shared_owners_;
    do
      v172 = __ldxr(v171);
    while (__stxr(v172 + 1, v171));
  }
  v167 = (std::__shared_weak_count *)v37[3];
  v37[2] = v163;
  v37[3] = v162;
  if (!v167)
  {
LABEL_97:
    if (v164)
      goto LABEL_103;
    goto LABEL_98;
  }
  v173 = (unint64_t *)&v167->__shared_owners_;
  do
    v169 = __ldaxr(v173);
  while (__stlxr(v169 - 1, v173));
LABEL_96:
  if (v169)
    goto LABEL_97;
  ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
  std::__shared_weak_count::__release_weak(v167);
  if (v164)
    goto LABEL_103;
LABEL_98:
  v174 = (unint64_t *)&v162->__shared_owners_;
  do
    v175 = __ldaxr(v174);
  while (__stlxr(v175 - 1, v174));
  if (!v175)
  {
    ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
    std::__shared_weak_count::__release_weak(v162);
  }
LABEL_103:
  if (v229)
  {
    v176 = (unint64_t *)&v229->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
      std::__shared_weak_count::__release_weak(v229);
    }
  }
  v178 = v37[8];
  *(_QWORD *)(v178 + 40) = 0;
  v179 = *(_QWORD *)(v7 + 56);
  *(_QWORD *)(v178 + 32) = v179;
  v180 = v37[20];
  v181 = *(_QWORD *)(v7 + 64);
  if (v181)
  {
    v182 = (unint64_t *)(v181 + 8);
    do
      v183 = __ldxr(v182);
    while (__stxr(v183 + 1, v182));
  }
  v184 = *(std::__shared_weak_count **)(v180 + 40);
  *(_QWORD *)(v180 + 32) = v179;
  *(_QWORD *)(v180 + 40) = v181;
  if (v184)
  {
    v185 = (unint64_t *)&v184->__shared_owners_;
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  v187 = v37[8];
  *(_QWORD *)(v187 + 24) = 0;
  v188 = *(_QWORD *)(v7 + 40);
  *(_QWORD *)(v187 + 16) = v188;
  v189 = v37[20];
  v190 = *(_QWORD *)(v7 + 48);
  if (v190)
  {
    v191 = (unint64_t *)(v190 + 8);
    do
      v192 = __ldxr(v191);
    while (__stxr(v192 + 1, v191));
  }
  v193 = *(std::__shared_weak_count **)(v189 + 24);
  *(_QWORD *)(v189 + 16) = v188;
  *(_QWORD *)(v189 + 24) = v190;
  if (v193)
  {
    v194 = (unint64_t *)&v193->__shared_owners_;
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  v196 = v37[8];
  v197 = v232;
  v198 = v233;
  *(_QWORD *)(v196 + 48) = v232;
  *(_QWORD *)(v196 + 56) = 0;
  v199 = v37[20];
  if (v198)
  {
    v200 = (unint64_t *)&v198->__shared_owners_;
    do
      v201 = __ldxr(v200);
    while (__stxr(v201 + 1, v200));
  }
  v202 = *(std::__shared_weak_count **)(v199 + 56);
  *(_QWORD *)(v199 + 48) = v197;
  *(_QWORD *)(v199 + 56) = v198;
  if (v202)
  {
    v203 = (unint64_t *)&v202->__shared_owners_;
    do
      v204 = __ldaxr(v203);
    while (__stlxr(v204 - 1, v203));
    if (!v204)
    {
      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
      std::__shared_weak_count::__release_weak(v202);
    }
  }
  v205 = (_QWORD *)v37[8];
  *v205 = v230;
  v205[1] = 0;
  v206 = (_QWORD *)v37[20];
  if (v231)
  {
    v207 = (unint64_t *)&v231->__shared_owners_;
    do
      v208 = __ldxr(v207);
    while (__stxr(v208 + 1, v207));
  }
  v209 = (std::__shared_weak_count *)v206[1];
  *v206 = v230;
  v206[1] = v231;
  if (v209)
  {
    v210 = (unint64_t *)&v209->__shared_owners_;
    do
      v211 = __ldaxr(v210);
    while (__stlxr(v211 - 1, v210));
    if (!v211)
    {
      ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
      std::__shared_weak_count::__release_weak(v209);
    }
  }
  if (v231)
  {
    v212 = (unint64_t *)&v231->__shared_owners_;
    do
      v213 = __ldaxr(v212);
    while (__stlxr(v213 - 1, v212));
    if (!v213)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
  v214 = v233;
  if (v233)
  {
    v215 = (unint64_t *)&v233->__shared_owners_;
    do
      v216 = __ldaxr(v215);
    while (__stlxr(v216 - 1, v215));
    if (!v216)
    {
      ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
      std::__shared_weak_count::__release_weak(v214);
    }
  }
}

void sub_19FECB488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  uint64_t v31;

  md::components::Material::~Material((md::components::Material *)(v31 - 176));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void karo::Mutex::~Mutex(pthread_mutex_t **this)
{
  pthread_mutex_destroy(*this);
  if (*this)
    MEMORY[0x1A1AF4E00](*this, 0x1000C40FA0F61DDLL);
  *this = 0;
}

void altitude::GlobeTileRenderManager::~GlobeTileRenderManager(altitude::GlobeTileRenderManager *this)
{
  altitude::GlobeTileRenderManager::~GlobeTileRenderManager(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  BOOL v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (***v21)(_QWORD);
  uint64_t *v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t **v25;
  unint64_t v26;
  uint64_t **v27;
  char *v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t **v36;
  uint64_t **v37;
  unint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void (***v48)(_QWORD);
  uint64_t *v49;
  uint64_t **v50;
  uint64_t *v51;
  uint64_t **v52;
  unint64_t v53;
  uint64_t **v54;
  char *v55;
  char *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t **v63;
  uint64_t **v64;
  unint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  char *v68;
  char *v69;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  void (***v75)(_QWORD);
  uint64_t *v76;
  uint64_t **v77;
  uint64_t *v78;
  uint64_t **v79;
  unint64_t v80;
  uint64_t **v81;
  char *v82;
  char *v83;
  _QWORD *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t **v90;
  uint64_t **v91;
  unint64_t v92;
  uint64_t *v93;
  unint64_t v94;
  char *v95;
  char *v96;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  void (***v102)(_QWORD);
  uint64_t *v103;
  uint64_t **v104;
  uint64_t *v105;
  uint64_t **v106;
  unint64_t v107;
  uint64_t **v108;
  char *v109;
  char *v110;
  _QWORD *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t **v117;
  uint64_t **v118;
  unint64_t v119;
  uint64_t *v120;
  unint64_t v121;
  char *v122;
  char *v123;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  void (***v129)(_QWORD);
  uint64_t *v130;
  uint64_t **v131;
  uint64_t *v132;
  uint64_t **v133;
  unint64_t v134;
  uint64_t **v135;
  char *v136;
  char *v137;
  _QWORD *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t **v144;
  uint64_t **v145;
  unint64_t v146;
  uint64_t *v147;
  unint64_t v148;
  char *v149;
  char *v150;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  void (***v156)(_QWORD);
  uint64_t *v157;
  uint64_t **v158;
  uint64_t *v159;
  uint64_t **v160;
  unint64_t v161;
  uint64_t **v162;
  char *v163;
  char *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  std::__shared_weak_count *v171;
  unint64_t *p_shared_owners;
  unint64_t v173;
  char *v174;
  char *v175;
  uint64_t **v176;
  uint64_t **v177;
  uint64_t **v178;
  uint64_t **v179;
  uint64_t **v180;
  uint64_t **v181;
  uint64_t *v182;
  uint64_t v183;

  *(_QWORD *)this = &off_1E42C5F30;
  *((_QWORD *)this + 5) = &unk_1E42C5F88;
  v2 = (char *)this + 40;
  v3 = *((_QWORD *)this + 14);
  if (v3)
    altitude::TileManager::unregisterTileListener(v3, (uint64_t)v2);
  v4 = *((_QWORD *)this + 10);
  if (v4)
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 8))(v4, v2);
  *((_QWORD *)this + 10) = 0;
  v182 = 0;
  v183 = 0;
  v176 = &v182;
  v5 = (_QWORD *)*((_QWORD *)this + 62);
  if (v5)
  {
    v6 = 0;
    do
    {
      v8 = v182;
      v9 = &v182;
      v10 = &v182;
      if (v182)
      {
        while (1)
        {
          while (1)
          {
            v10 = (uint64_t **)v8;
            v11 = v8[4];
            if ((unint64_t)v5 >= v11)
              break;
            v8 = *v10;
            v9 = v10;
            if (!*v10)
              goto LABEL_17;
          }
          if (v11 >= (unint64_t)v5)
            break;
          v8 = v10[1];
          if (!v8)
          {
            v9 = v10 + 1;
            goto LABEL_17;
          }
        }
      }
      else
      {
LABEL_17:
        v12 = (uint64_t *)operator new(0x28uLL);
        v12[4] = (uint64_t)v5;
        *v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v10;
        *v9 = v12;
        if (*v176)
        {
          v176 = (uint64_t **)*v176;
          v7 = *v9;
        }
        else
        {
          v7 = v12;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v182, v7);
        v6 = ++v183;
        v5 = (_QWORD *)*((_QWORD *)this + 62);
      }
      v5 = (_QWORD *)*v5;
      *((_QWORD *)this + 62) = v5;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  v13 = *((unsigned int *)this + 122);
  v14 = (char *)*((_QWORD *)this + 58);
  v15 = (char *)this + 472;
  v16 = v6 == *((_QWORD *)this + 60) * v13 || v14 == v15;
  if (v16 || v13 == 0)
  {
    if (v14 == v15)
      goto LABEL_52;
    goto LABEL_55;
  }
  v18 = 1;
  do
  {
    if (v18)
    {
      v19 = 0;
      v20 = *((_QWORD *)v14 + 4);
      do
      {
        v21 = (void (***)(_QWORD))(v20 + ((_DWORD)v19 << 6));
        v22 = v182;
        if (!v182)
          goto LABEL_33;
        v23 = &v182;
        do
        {
          v24 = v22;
          v25 = v23;
          v26 = v22[4];
          v27 = (uint64_t **)(v22 + 1);
          if (v26 >= (unint64_t)v21)
          {
            v27 = (uint64_t **)v24;
            v23 = (uint64_t **)v24;
          }
          v22 = *v27;
        }
        while (v22);
        if (v23 == &v182)
          goto LABEL_33;
        if (v26 < (unint64_t)v21)
          v24 = (uint64_t *)v25;
        if ((unint64_t)v21 < v24[4])
        {
LABEL_33:
          (**v21)(v21);
          v13 = *((unsigned int *)this + 122);
        }
        ++v19;
        v18 = v13;
      }
      while (v19 < v13);
    }
    v28 = (char *)*((_QWORD *)v14 + 1);
    if (v28)
    {
      do
      {
        v29 = v28;
        v28 = *(char **)v28;
      }
      while (v28);
    }
    else
    {
      do
      {
        v29 = (char *)*((_QWORD *)v14 + 2);
        v16 = *(_QWORD *)v29 == (_QWORD)v14;
        v14 = v29;
      }
      while (!v16);
    }
    v14 = v29;
  }
  while (v29 != v15);
  v14 = (char *)*((_QWORD *)this + 58);
  if (v14 != v15)
  {
    do
    {
LABEL_55:
      free(*((void **)v14 + 4));
      v32 = (char *)*((_QWORD *)v14 + 1);
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = *(char **)v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (char *)*((_QWORD *)v14 + 2);
          v16 = *(_QWORD *)v33 == (_QWORD)v14;
          v14 = v33;
        }
        while (!v16);
      }
      v14 = v33;
    }
    while (v33 != v15);
  }
LABEL_52:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 59));
  *((_QWORD *)this + 59) = 0;
  *((_QWORD *)this + 60) = 0;
  *((_QWORD *)this + 58) = v15;
  *((_QWORD *)this + 62) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v182);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 59));
  v182 = 0;
  v183 = 0;
  v177 = &v182;
  v30 = (_QWORD *)*((_QWORD *)this + 57);
  if (v30)
  {
    v31 = 0;
    do
    {
      v35 = v182;
      v36 = &v182;
      v37 = &v182;
      if (v182)
      {
        while (1)
        {
          while (1)
          {
            v37 = (uint64_t **)v35;
            v38 = v35[4];
            if ((unint64_t)v30 >= v38)
              break;
            v35 = *v37;
            v36 = v37;
            if (!*v37)
              goto LABEL_71;
          }
          if (v38 >= (unint64_t)v30)
            break;
          v35 = v37[1];
          if (!v35)
          {
            v36 = v37 + 1;
            goto LABEL_71;
          }
        }
      }
      else
      {
LABEL_71:
        v39 = (uint64_t *)operator new(0x28uLL);
        v39[4] = (uint64_t)v30;
        *v39 = 0;
        v39[1] = 0;
        v39[2] = (uint64_t)v37;
        *v36 = v39;
        if (*v177)
        {
          v177 = (uint64_t **)*v177;
          v34 = *v36;
        }
        else
        {
          v34 = v39;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v182, v34);
        v31 = ++v183;
        v30 = (_QWORD *)*((_QWORD *)this + 57);
      }
      v30 = (_QWORD *)*v30;
      *((_QWORD *)this + 57) = v30;
    }
    while (v30);
  }
  else
  {
    v31 = 0;
  }
  v40 = *((unsigned int *)this + 112);
  v41 = (char *)*((_QWORD *)this + 53);
  v42 = (char *)this + 432;
  if (v31 == *((_QWORD *)this + 55) * v40 || v41 == v42 || v40 == 0)
  {
    if (v41 == v42)
      goto LABEL_106;
    goto LABEL_109;
  }
  v45 = 1;
  do
  {
    if (v45)
    {
      v46 = 0;
      v47 = *((_QWORD *)v41 + 4);
      do
      {
        v48 = (void (***)(_QWORD))(v47 + (80 * v46));
        v49 = v182;
        if (!v182)
          goto LABEL_87;
        v50 = &v182;
        do
        {
          v51 = v49;
          v52 = v50;
          v53 = v49[4];
          v54 = (uint64_t **)(v49 + 1);
          if (v53 >= (unint64_t)v48)
          {
            v54 = (uint64_t **)v51;
            v50 = (uint64_t **)v51;
          }
          v49 = *v54;
        }
        while (v49);
        if (v50 == &v182)
          goto LABEL_87;
        if (v53 < (unint64_t)v48)
          v51 = (uint64_t *)v52;
        if ((unint64_t)v48 < v51[4])
        {
LABEL_87:
          (**v48)(v48);
          v40 = *((unsigned int *)this + 112);
        }
        ++v46;
        v45 = v40;
      }
      while (v46 < v40);
    }
    v55 = (char *)*((_QWORD *)v41 + 1);
    if (v55)
    {
      do
      {
        v56 = v55;
        v55 = *(char **)v55;
      }
      while (v55);
    }
    else
    {
      do
      {
        v56 = (char *)*((_QWORD *)v41 + 2);
        v16 = *(_QWORD *)v56 == (_QWORD)v41;
        v41 = v56;
      }
      while (!v16);
    }
    v41 = v56;
  }
  while (v56 != v42);
  v41 = (char *)*((_QWORD *)this + 53);
  if (v41 != v42)
  {
    do
    {
LABEL_109:
      free(*((void **)v41 + 4));
      v59 = (char *)*((_QWORD *)v41 + 1);
      if (v59)
      {
        do
        {
          v60 = v59;
          v59 = *(char **)v59;
        }
        while (v59);
      }
      else
      {
        do
        {
          v60 = (char *)*((_QWORD *)v41 + 2);
          v16 = *(_QWORD *)v60 == (_QWORD)v41;
          v41 = v60;
        }
        while (!v16);
      }
      v41 = v60;
    }
    while (v60 != v42);
  }
LABEL_106:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 54));
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 53) = v42;
  *((_QWORD *)this + 57) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v182);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 54));
  v182 = 0;
  v183 = 0;
  v178 = &v182;
  v57 = (_QWORD *)*((_QWORD *)this + 52);
  if (v57)
  {
    v58 = 0;
    do
    {
      v62 = v182;
      v63 = &v182;
      v64 = &v182;
      if (v182)
      {
        while (1)
        {
          while (1)
          {
            v64 = (uint64_t **)v62;
            v65 = v62[4];
            if ((unint64_t)v57 >= v65)
              break;
            v62 = *v64;
            v63 = v64;
            if (!*v64)
              goto LABEL_125;
          }
          if (v65 >= (unint64_t)v57)
            break;
          v62 = v64[1];
          if (!v62)
          {
            v63 = v64 + 1;
            goto LABEL_125;
          }
        }
      }
      else
      {
LABEL_125:
        v66 = (uint64_t *)operator new(0x28uLL);
        v66[4] = (uint64_t)v57;
        *v66 = 0;
        v66[1] = 0;
        v66[2] = (uint64_t)v64;
        *v63 = v66;
        if (*v178)
        {
          v178 = (uint64_t **)*v178;
          v61 = *v63;
        }
        else
        {
          v61 = v66;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v182, v61);
        v58 = ++v183;
        v57 = (_QWORD *)*((_QWORD *)this + 52);
      }
      v57 = (_QWORD *)*v57;
      *((_QWORD *)this + 52) = v57;
    }
    while (v57);
  }
  else
  {
    v58 = 0;
  }
  v67 = *((unsigned int *)this + 102);
  v68 = (char *)*((_QWORD *)this + 48);
  v69 = (char *)this + 392;
  if (v58 == *((_QWORD *)this + 50) * v67 || v68 == v69 || v67 == 0)
  {
    if (v68 == v69)
      goto LABEL_160;
    goto LABEL_163;
  }
  v72 = 1;
  do
  {
    if (v72)
    {
      v73 = 0;
      v74 = *((_QWORD *)v68 + 4);
      do
      {
        v75 = (void (***)(_QWORD))(v74 + (112 * v73));
        v76 = v182;
        if (!v182)
          goto LABEL_141;
        v77 = &v182;
        do
        {
          v78 = v76;
          v79 = v77;
          v80 = v76[4];
          v81 = (uint64_t **)(v76 + 1);
          if (v80 >= (unint64_t)v75)
          {
            v81 = (uint64_t **)v78;
            v77 = (uint64_t **)v78;
          }
          v76 = *v81;
        }
        while (v76);
        if (v77 == &v182)
          goto LABEL_141;
        if (v80 < (unint64_t)v75)
          v78 = (uint64_t *)v79;
        if ((unint64_t)v75 < v78[4])
        {
LABEL_141:
          (**v75)(v75);
          v67 = *((unsigned int *)this + 102);
        }
        ++v73;
        v72 = v67;
      }
      while (v73 < v67);
    }
    v82 = (char *)*((_QWORD *)v68 + 1);
    if (v82)
    {
      do
      {
        v83 = v82;
        v82 = *(char **)v82;
      }
      while (v82);
    }
    else
    {
      do
      {
        v83 = (char *)*((_QWORD *)v68 + 2);
        v16 = *(_QWORD *)v83 == (_QWORD)v68;
        v68 = v83;
      }
      while (!v16);
    }
    v68 = v83;
  }
  while (v83 != v69);
  v68 = (char *)*((_QWORD *)this + 48);
  if (v68 != v69)
  {
    do
    {
LABEL_163:
      free(*((void **)v68 + 4));
      v86 = (char *)*((_QWORD *)v68 + 1);
      if (v86)
      {
        do
        {
          v87 = v86;
          v86 = *(char **)v86;
        }
        while (v86);
      }
      else
      {
        do
        {
          v87 = (char *)*((_QWORD *)v68 + 2);
          v16 = *(_QWORD *)v87 == (_QWORD)v68;
          v68 = v87;
        }
        while (!v16);
      }
      v68 = v87;
    }
    while (v87 != v69);
  }
LABEL_160:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 49));
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 48) = v69;
  *((_QWORD *)this + 52) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v182);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 49));
  v182 = 0;
  v183 = 0;
  v179 = &v182;
  v84 = (_QWORD *)*((_QWORD *)this + 47);
  if (v84)
  {
    v85 = 0;
    do
    {
      v89 = v182;
      v90 = &v182;
      v91 = &v182;
      if (v182)
      {
        while (1)
        {
          while (1)
          {
            v91 = (uint64_t **)v89;
            v92 = v89[4];
            if ((unint64_t)v84 >= v92)
              break;
            v89 = *v91;
            v90 = v91;
            if (!*v91)
              goto LABEL_179;
          }
          if (v92 >= (unint64_t)v84)
            break;
          v89 = v91[1];
          if (!v89)
          {
            v90 = v91 + 1;
            goto LABEL_179;
          }
        }
      }
      else
      {
LABEL_179:
        v93 = (uint64_t *)operator new(0x28uLL);
        v93[4] = (uint64_t)v84;
        *v93 = 0;
        v93[1] = 0;
        v93[2] = (uint64_t)v91;
        *v90 = v93;
        if (*v179)
        {
          v179 = (uint64_t **)*v179;
          v88 = *v90;
        }
        else
        {
          v88 = v93;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v182, v88);
        v85 = ++v183;
        v84 = (_QWORD *)*((_QWORD *)this + 47);
      }
      v84 = (_QWORD *)*v84;
      *((_QWORD *)this + 47) = v84;
    }
    while (v84);
  }
  else
  {
    v85 = 0;
  }
  v94 = *((unsigned int *)this + 92);
  v95 = (char *)*((_QWORD *)this + 43);
  v96 = (char *)this + 352;
  if (v85 == *((_QWORD *)this + 45) * v94 || v95 == v96 || v94 == 0)
  {
    if (v95 == v96)
      goto LABEL_214;
    goto LABEL_217;
  }
  v99 = 1;
  do
  {
    if (v99)
    {
      v100 = 0;
      v101 = *((_QWORD *)v95 + 4);
      do
      {
        v102 = (void (***)(_QWORD))(v101 + (136 * v100));
        v103 = v182;
        if (!v182)
          goto LABEL_195;
        v104 = &v182;
        do
        {
          v105 = v103;
          v106 = v104;
          v107 = v103[4];
          v108 = (uint64_t **)(v103 + 1);
          if (v107 >= (unint64_t)v102)
          {
            v108 = (uint64_t **)v105;
            v104 = (uint64_t **)v105;
          }
          v103 = *v108;
        }
        while (v103);
        if (v104 == &v182)
          goto LABEL_195;
        if (v107 < (unint64_t)v102)
          v105 = (uint64_t *)v106;
        if ((unint64_t)v102 < v105[4])
        {
LABEL_195:
          (**v102)(v102);
          v94 = *((unsigned int *)this + 92);
        }
        ++v100;
        v99 = v94;
      }
      while (v100 < v94);
    }
    v109 = (char *)*((_QWORD *)v95 + 1);
    if (v109)
    {
      do
      {
        v110 = v109;
        v109 = *(char **)v109;
      }
      while (v109);
    }
    else
    {
      do
      {
        v110 = (char *)*((_QWORD *)v95 + 2);
        v16 = *(_QWORD *)v110 == (_QWORD)v95;
        v95 = v110;
      }
      while (!v16);
    }
    v95 = v110;
  }
  while (v110 != v96);
  v95 = (char *)*((_QWORD *)this + 43);
  if (v95 != v96)
  {
    do
    {
LABEL_217:
      free(*((void **)v95 + 4));
      v113 = (char *)*((_QWORD *)v95 + 1);
      if (v113)
      {
        do
        {
          v114 = v113;
          v113 = *(char **)v113;
        }
        while (v113);
      }
      else
      {
        do
        {
          v114 = (char *)*((_QWORD *)v95 + 2);
          v16 = *(_QWORD *)v114 == (_QWORD)v95;
          v95 = v114;
        }
        while (!v16);
      }
      v95 = v114;
    }
    while (v114 != v96);
  }
LABEL_214:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 44));
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 43) = v96;
  *((_QWORD *)this + 47) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v182);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 44));
  v182 = 0;
  v183 = 0;
  v180 = &v182;
  v111 = (_QWORD *)*((_QWORD *)this + 42);
  if (v111)
  {
    v112 = 0;
    do
    {
      v116 = v182;
      v117 = &v182;
      v118 = &v182;
      if (v182)
      {
        while (1)
        {
          while (1)
          {
            v118 = (uint64_t **)v116;
            v119 = v116[4];
            if ((unint64_t)v111 >= v119)
              break;
            v116 = *v118;
            v117 = v118;
            if (!*v118)
              goto LABEL_233;
          }
          if (v119 >= (unint64_t)v111)
            break;
          v116 = v118[1];
          if (!v116)
          {
            v117 = v118 + 1;
            goto LABEL_233;
          }
        }
      }
      else
      {
LABEL_233:
        v120 = (uint64_t *)operator new(0x28uLL);
        v120[4] = (uint64_t)v111;
        *v120 = 0;
        v120[1] = 0;
        v120[2] = (uint64_t)v118;
        *v117 = v120;
        if (*v180)
        {
          v180 = (uint64_t **)*v180;
          v115 = *v117;
        }
        else
        {
          v115 = v120;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v182, v115);
        v112 = ++v183;
        v111 = (_QWORD *)*((_QWORD *)this + 42);
      }
      v111 = (_QWORD *)*v111;
      *((_QWORD *)this + 42) = v111;
    }
    while (v111);
  }
  else
  {
    v112 = 0;
  }
  v121 = *((unsigned int *)this + 82);
  v122 = (char *)*((_QWORD *)this + 38);
  v123 = (char *)this + 312;
  if (v112 == *((_QWORD *)this + 40) * v121 || v122 == v123 || v121 == 0)
  {
    if (v122 == v123)
      goto LABEL_268;
    goto LABEL_271;
  }
  v126 = 1;
  do
  {
    if (v126)
    {
      v127 = 0;
      v128 = *((_QWORD *)v122 + 4);
      do
      {
        v129 = (void (***)(_QWORD))(v128 + (80 * v127));
        v130 = v182;
        if (!v182)
          goto LABEL_249;
        v131 = &v182;
        do
        {
          v132 = v130;
          v133 = v131;
          v134 = v130[4];
          v135 = (uint64_t **)(v130 + 1);
          if (v134 >= (unint64_t)v129)
          {
            v135 = (uint64_t **)v132;
            v131 = (uint64_t **)v132;
          }
          v130 = *v135;
        }
        while (v130);
        if (v131 == &v182)
          goto LABEL_249;
        if (v134 < (unint64_t)v129)
          v132 = (uint64_t *)v133;
        if ((unint64_t)v129 < v132[4])
        {
LABEL_249:
          (**v129)(v129);
          v121 = *((unsigned int *)this + 82);
        }
        ++v127;
        v126 = v121;
      }
      while (v127 < v121);
    }
    v136 = (char *)*((_QWORD *)v122 + 1);
    if (v136)
    {
      do
      {
        v137 = v136;
        v136 = *(char **)v136;
      }
      while (v136);
    }
    else
    {
      do
      {
        v137 = (char *)*((_QWORD *)v122 + 2);
        v16 = *(_QWORD *)v137 == (_QWORD)v122;
        v122 = v137;
      }
      while (!v16);
    }
    v122 = v137;
  }
  while (v137 != v123);
  v122 = (char *)*((_QWORD *)this + 38);
  if (v122 != v123)
  {
    do
    {
LABEL_271:
      free(*((void **)v122 + 4));
      v140 = (char *)*((_QWORD *)v122 + 1);
      if (v140)
      {
        do
        {
          v141 = v140;
          v140 = *(char **)v140;
        }
        while (v140);
      }
      else
      {
        do
        {
          v141 = (char *)*((_QWORD *)v122 + 2);
          v16 = *(_QWORD *)v141 == (_QWORD)v122;
          v122 = v141;
        }
        while (!v16);
      }
      v122 = v141;
    }
    while (v141 != v123);
  }
LABEL_268:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 39));
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 38) = v123;
  *((_QWORD *)this + 42) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v182);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 39));
  v182 = 0;
  v183 = 0;
  v181 = &v182;
  v138 = (_QWORD *)*((_QWORD *)this + 37);
  if (v138)
  {
    v139 = 0;
    do
    {
      v143 = v182;
      v144 = &v182;
      v145 = &v182;
      if (v182)
      {
        while (1)
        {
          while (1)
          {
            v145 = (uint64_t **)v143;
            v146 = v143[4];
            if ((unint64_t)v138 >= v146)
              break;
            v143 = *v145;
            v144 = v145;
            if (!*v145)
              goto LABEL_287;
          }
          if (v146 >= (unint64_t)v138)
            break;
          v143 = v145[1];
          if (!v143)
          {
            v144 = v145 + 1;
            goto LABEL_287;
          }
        }
      }
      else
      {
LABEL_287:
        v147 = (uint64_t *)operator new(0x28uLL);
        v147[4] = (uint64_t)v138;
        *v147 = 0;
        v147[1] = 0;
        v147[2] = (uint64_t)v145;
        *v144 = v147;
        if (*v181)
        {
          v181 = (uint64_t **)*v181;
          v142 = *v144;
        }
        else
        {
          v142 = v147;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v182, v142);
        v139 = ++v183;
        v138 = (_QWORD *)*((_QWORD *)this + 37);
      }
      v138 = (_QWORD *)*v138;
      *((_QWORD *)this + 37) = v138;
    }
    while (v138);
  }
  else
  {
    v139 = 0;
  }
  v148 = *((unsigned int *)this + 72);
  v149 = (char *)*((_QWORD *)this + 33);
  v150 = (char *)this + 272;
  if (v139 == *((_QWORD *)this + 35) * v148 || v149 == v150 || v148 == 0)
  {
    if (v149 == v150)
      goto LABEL_322;
    goto LABEL_343;
  }
  v153 = 1;
  do
  {
    if (v153)
    {
      v154 = 0;
      v155 = *((_QWORD *)v149 + 4);
      do
      {
        v156 = (void (***)(_QWORD))(v155 + (280 * v154));
        v157 = v182;
        if (!v182)
          goto LABEL_303;
        v158 = &v182;
        do
        {
          v159 = v157;
          v160 = v158;
          v161 = v157[4];
          v162 = (uint64_t **)(v157 + 1);
          if (v161 >= (unint64_t)v156)
          {
            v162 = (uint64_t **)v159;
            v158 = (uint64_t **)v159;
          }
          v157 = *v162;
        }
        while (v157);
        if (v158 == &v182)
          goto LABEL_303;
        if (v161 < (unint64_t)v156)
          v159 = (uint64_t *)v160;
        if ((unint64_t)v156 < v159[4])
        {
LABEL_303:
          (**v156)(v156);
          v148 = *((unsigned int *)this + 72);
        }
        ++v154;
        v153 = v148;
      }
      while (v154 < v148);
    }
    v163 = (char *)*((_QWORD *)v149 + 1);
    if (v163)
    {
      do
      {
        v164 = v163;
        v163 = *(char **)v163;
      }
      while (v163);
    }
    else
    {
      do
      {
        v164 = (char *)*((_QWORD *)v149 + 2);
        v16 = *(_QWORD *)v164 == (_QWORD)v149;
        v149 = v164;
      }
      while (!v16);
    }
    v149 = v164;
  }
  while (v164 != v150);
  v149 = (char *)*((_QWORD *)this + 33);
  if (v149 != v150)
  {
    do
    {
LABEL_343:
      free(*((void **)v149 + 4));
      v174 = (char *)*((_QWORD *)v149 + 1);
      if (v174)
      {
        do
        {
          v175 = v174;
          v174 = *(char **)v174;
        }
        while (v174);
      }
      else
      {
        do
        {
          v175 = (char *)*((_QWORD *)v149 + 2);
          v16 = *(_QWORD *)v175 == (_QWORD)v149;
          v149 = v175;
        }
        while (!v16);
      }
      v149 = v175;
    }
    while (v175 != v150);
  }
LABEL_322:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 34));
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 33) = v150;
  *((_QWORD *)this + 37) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v182);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 34));
  v165 = (void *)*((_QWORD *)this + 30);
  if (v165)
  {
    *((_QWORD *)this + 31) = v165;
    operator delete(v165);
  }
  v166 = (void *)*((_QWORD *)this + 27);
  if (v166)
  {
    *((_QWORD *)this + 28) = v166;
    operator delete(v166);
  }
  v167 = (void *)*((_QWORD *)this + 24);
  if (v167)
  {
    *((_QWORD *)this + 25) = v167;
    operator delete(v167);
  }
  v168 = (void *)*((_QWORD *)this + 21);
  if (v168)
  {
    *((_QWORD *)this + 22) = v168;
    operator delete(v168);
  }
  v169 = (void *)*((_QWORD *)this + 18);
  if (v169)
  {
    *((_QWORD *)this + 19) = v169;
    operator delete(v169);
  }
  v170 = (void *)*((_QWORD *)this + 15);
  if (v170)
  {
    *((_QWORD *)this + 16) = v170;
    operator delete(v170);
  }
  v171 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v171)
  {
    p_shared_owners = (unint64_t *)&v171->__shared_owners_;
    do
      v173 = __ldaxr(p_shared_owners);
    while (__stlxr(v173 - 1, p_shared_owners));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  *(_QWORD *)this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void altitude::GlobeTileRenderManager::onTileComponentDataLoaded(altitude::GlobeTileRenderManager *this, altitude::Tile *a2, altitude::TileComponent *a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t *v23;
  uint64_t **v24;
  uint64_t **v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;

  if (*(_BYTE *)(*((_QWORD *)this + 4) + 69)
    || *((_DWORD *)a3 + 2)
    || *((void **)a3 + 15) != a4
    || !*((_QWORD *)a3 + 26))
  {
    return;
  }
  v7 = (*(uint64_t (**)(_QWORD, altitude::GlobeTileRenderManager *, uint64_t))(**((_QWORD **)this + 9) + 24))(*((_QWORD *)this + 9), this, 0xFFFFFFFFLL);
  v8 = v7;
  v9 = *(_DWORD *)(*((_QWORD *)this + 4) + 60);
  v10 = *((_QWORD *)a3 + 29);
  if (!v10)
    goto LABEL_13;
  if (v10 != 1)
  {
    v12 = (uint64_t *)*((_QWORD *)a3 + 31);
    while (1)
    {
      v11 = *v12;
      if (*(_QWORD *)(*v12 + 8) == v7)
        goto LABEL_17;
      ++v12;
      if (!--v10)
        goto LABEL_13;
    }
  }
  v11 = *((_QWORD *)a3 + 30);
  if (*(_QWORD *)(v11 + 8) != v7)
  {
LABEL_13:
    v13 = operator new();
    *(_QWORD *)v13 = &off_1E42C6498;
    *(_QWORD *)(v13 + 8) = v8;
    *(_QWORD *)(v13 + 16) = a3;
    *(_QWORD *)(v13 + 24) = 0;
    *(_WORD *)(v13 + 32) = 257;
    v39 = v13;
    karo::SizedArray<altitude::GlobeTileComponentViewData *,1>::push_back((_QWORD *)a3 + 29, &v39);
    v14 = *((_QWORD *)a3 + 29);
    v15 = v14 - 1;
    if (v14 < 2)
      v16 = (uint64_t *)((char *)a3 + 8 * v15 + 240);
    else
      v16 = (uint64_t *)(*((_QWORD *)a3 + 31) + 8 * v15);
    v11 = *v16;
  }
LABEL_17:
  v17 = *(_QWORD *)(v11 + 24);
  if (v17)
    v18 = (*(_DWORD *)(v17 + 8) - 1) < 4;
  else
    v18 = 0;
  v19 = *((_QWORD *)this + 47);
  if (v19)
  {
    v20 = *(char **)v19;
  }
  else
  {
    v21 = (char *)malloc_type_malloc(*((unsigned int *)this + 93), 0xF0B72BE0uLL);
    v22 = v21;
    v23 = (uint64_t *)*((_QWORD *)this + 44);
    if (v23)
    {
      while (1)
      {
        while (1)
        {
          v25 = (uint64_t **)v23;
          v26 = v23[4];
          if ((unint64_t)v21 >= v26)
            break;
          v23 = *v25;
          v24 = v25;
          if (!*v25)
            goto LABEL_29;
        }
        if (v26 >= (unint64_t)v21)
          break;
        v23 = v25[1];
        if (!v23)
        {
          v24 = v25 + 1;
          goto LABEL_29;
        }
      }
    }
    else
    {
      v24 = (uint64_t **)((char *)this + 352);
      v25 = (uint64_t **)((char *)this + 352);
LABEL_29:
      v27 = (uint64_t *)operator new(0x28uLL);
      v27[4] = (uint64_t)v22;
      *v27 = 0;
      v27[1] = 0;
      v27[2] = (uint64_t)v25;
      *v24 = v27;
      v28 = **((_QWORD **)this + 43);
      if (v28)
      {
        *((_QWORD *)this + 43) = v28;
        v29 = *v24;
      }
      else
      {
        v29 = v27;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 44), v29);
      ++*((_QWORD *)this + 45);
    }
    v30 = &v22[136 * *((_DWORD *)this + 92) - 136];
    v31 = (char *)*((_QWORD *)this + 47);
    do
    {
      v20 = v31;
      v31 = v30;
      *(_QWORD *)v30 = v20;
      v30 -= 136;
    }
    while (v30 >= v22);
    v19 = (uint64_t)(v30 + 136);
  }
  *((_QWORD *)this + 47) = v20;
  *(_DWORD *)(v19 + 8) = 6;
  *(_QWORD *)(v19 + 16) = a3;
  *(_QWORD *)(v19 + 24) = v8;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 40) = this;
  *(_BYTE *)(v19 + 48) = 0;
  *(_QWORD *)v19 = &off_1E42C3AA0;
  v32 = *((_QWORD *)a3 + 27);
  *(_QWORD *)(v19 + 56) = *((_QWORD *)a3 + 26);
  *(_QWORD *)(v19 + 64) = v32;
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = (_OWORD *)((char *)a2 + 392);
  v36 = *((_QWORD *)a3 + 16);
  *(_QWORD *)(v19 + 72) = *((_QWORD *)a3 + 15);
  *(_QWORD *)(v19 + 80) = v36;
  if (v36)
  {
    v37 = (unint64_t *)(v36 + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  *(_OWORD *)(v19 + 88) = *v35;
  *(_OWORD *)(v19 + 104) = *v35;
  *(_DWORD *)(v19 + 120) = 0;
  *(_DWORD *)(v19 + 124) = v9;
  *(_QWORD *)(v19 + 128) = 0;
  if (v18)
  {
    *(_QWORD *)(*(_QWORD *)(v11 + 24) + 32) = v19;
  }
  else
  {
    *(_QWORD *)(v11 + 24) = v19;
    altitude::SphereCulling<altitude::TriggerManager::Trigger>::collectLeaf((uint64_t)this + 216, v19);
  }
}

void altitude::GlobeTileRenderManager::onTileComponentDataRelease(altitude::GlobeTileRenderManager *this, altitude::Tile *a2, altitude::TileComponent *a3, void *a4)
{
  if (!*((_DWORD *)a3 + 2))
    altitude::GlobeTileRenderManager::clearEffects(this, a3);
}

void altitude::GlobeTileRenderManager::onChildTileRemoved(altitude::GlobeTileRenderManager *this, altitude::Tile *a2, altitude::Tile *a3)
{
  altitude::GlobeTileComponent *v3;

  v3 = (altitude::GlobeTileComponent *)*((_QWORD *)a3 + 41);
  if (v3)
    altitude::GlobeTileRenderManager::clearEffects(this, v3);
}

uint64_t altitude::GlobeTileRenderManager::prepareTileSetOperation(uint64_t a1, uint64_t a2)
{
  char v2;
  int v3;
  char v4;
  std::vector<unsigned int>::value_type v6;
  char v7;
  std::vector<unsigned int> __p;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3 != 1)
  {
    if (v3)
      return v2 & 1;
    if (*(_BYTE *)(a1 + 520))
    {
      v6 = 0;
      memset(&__p, 0, sizeof(__p));
      v4 = altitude::GlobeTileRenderManager::prepareRefineOperation(a1, (_QWORD *)a2, &__p, &v6, &v7);
      goto LABEL_7;
    }
LABEL_9:
    v2 = 1;
    return v2 & 1;
  }
  if (!*(_BYTE *)(a1 + 520))
    goto LABEL_9;
  memset(&__p, 0, sizeof(__p));
  v4 = altitude::GlobeTileRenderManager::prepareCoarsenOperation(a1, (_QWORD *)a2, &__p, &v6);
LABEL_7:
  v2 = v4;
  if (__p.__begin_)
    operator delete(__p.__begin_);
  return v2 & 1;
}

void altitude::GlobeTileRenderManager::onTileSetOperation(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  altitude::GlobeTileComponent *v7;
  uint64_t v8;
  void **v9;
  unsigned __int32 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *end;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  __int128 v30;
  float v31;
  std::vector<unsigned int>::value_type v32;
  __int128 v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  float64x2_t v37;
  uint64_t v38;
  float64x2_t v39;
  float64x2_t v40;
  int64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  __n128 v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  __n128 *v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  float64x2_t v60;
  uint64_t v61;
  float64x2_t v62;
  float64x2_t v63;
  int64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  _QWORD *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  _QWORD *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t *v81;
  uint64_t **v82;
  uint64_t **v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  char *v88;
  char *v89;
  uint64_t *v90;
  uint64_t **v91;
  uint64_t **v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t *v96;
  char *v97;
  char *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  char **v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t *v108;
  uint64_t **v109;
  uint64_t **v110;
  unint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  char *v115;
  char *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  char *v122;
  char *v123;
  uint64_t *v124;
  uint64_t **v125;
  uint64_t **v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t *v130;
  char *v131;
  char *v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t *v139;
  uint64_t **v140;
  uint64_t **v141;
  unint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t *v145;
  char *v146;
  char *v147;
  __n128 v148;
  unint64_t *v149;
  unint64_t v150;
  float v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  char *v155;
  char *v156;
  char *v157;
  uint64_t *v158;
  uint64_t **v159;
  uint64_t **v160;
  unint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t *v164;
  char *v165;
  char *v166;
  unint64_t *v167;
  char *v168;
  char *v169;
  unint64_t *v170;
  unint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  _BYTE *v178;
  char ***v179;
  unint64_t v180;
  uint64_t v181;
  _OWORD *v182;
  char *v183;
  uint64_t v184;
  __int128 v185;
  char **v186;
  int v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  void **v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  std::vector<unsigned int>::pointer begin;
  uint64_t *v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t *v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  char **v207;
  char *v208;
  char *v209;
  char *v210;
  uint64_t *v211;
  uint64_t **v212;
  uint64_t **v213;
  unint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t *v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  uint64_t v223;
  altitude::GlobeTileComponent *v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *p_shared_owners;
  unint64_t v230;
  __n128 v231;
  unsigned int v232;
  uint64_t v233;
  float64x2_t v234;
  uint64_t v235;
  float64x2_t v236;
  float64x2_t v237;
  int64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  uint64_t v242;
  uint64_t v243;
  float64x2_t v244;
  uint64_t v245;
  float64x2_t v246;
  float64x2_t v247;
  int64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  uint64_t v262;
  char *v263;
  char *v264;
  char *v265;
  uint64_t *v266;
  uint64_t **v267;
  uint64_t **v268;
  unint64_t v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t *v272;
  char *v273;
  char *v274;
  uint64_t *v275;
  uint64_t **v276;
  uint64_t **v277;
  unint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t *v281;
  char *v282;
  char *v283;
  uint64_t *v284;
  uint64_t **v285;
  uint64_t **v286;
  unint64_t v287;
  uint64_t *v288;
  uint64_t v289;
  uint64_t *v290;
  char *v291;
  char *v292;
  char *v293;
  unint64_t *v294;
  unint64_t v295;
  unint64_t *v296;
  unint64_t v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  unint64_t *v304;
  unint64_t v305;
  char *v306;
  char *v307;
  unint64_t *v308;
  unint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  char *v316;
  char *v317;
  unint64_t v318;
  unint64_t *v319;
  unint64_t v320;
  unint64_t *v321;
  unint64_t *v322;
  unint64_t v323;
  unint64_t v324;
  char *v325;
  _QWORD *v326;
  char *v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  unint64_t v331;
  _BYTE *v332;
  char ***v333;
  char *v334;
  unint64_t v335;
  uint64_t v336;
  _OWORD *v337;
  char *v338;
  uint64_t v339;
  __int128 v340;
  char **v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  int64x2_t v351;
  int64x2_t v352;
  int64x2_t v353;
  int64x2_t v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 *v359;
  uint64_t v360;
  std::vector<unsigned int>::value_type v362;
  char v363;
  unsigned int *v364;
  std::__shared_weak_count *v365;
  __int128 v366;
  __int128 v367;
  uint64_t v368;
  std::__shared_weak_count *v369;
  __n128 v370;
  __n128 v371;
  __int128 v372;
  __int128 v373;
  std::vector<unsigned int> __p;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  uint64_t v387;

  v2 = (_QWORD *)a2;
  v387 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a2 + 8);
  if (v4 == 1)
  {
    LOBYTE(v362) = 0;
    memset(&__p, 0, sizeof(__p));
    if (altitude::GlobeTileRenderManager::prepareCoarsenOperation(a1, (_QWORD *)a2, &__p, &v362)
      && !(_BYTE)v362)
    {
      goto LABEL_397;
    }
    v360 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72), a1, 0xFFFFFFFFLL);
    v187 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 60);
    v188 = v2[5];
    v189 = *(_QWORD **)(v188 + 328);
    if (!v189)
    {
      v190 = operator new();
      *(_DWORD *)(v190 + 8) = 0;
      *(_QWORD *)(v190 + 32) = 0;
      *(_QWORD *)(v190 + 40) = 0;
      *(_QWORD *)(v190 + 16) = 0;
      *(_QWORD *)(v190 + 24) = v190 + 32;
      *(_OWORD *)(v190 + 48) = 0u;
      *(_OWORD *)(v190 + 64) = 0u;
      *(_QWORD *)v190 = &off_1E42C5580;
      *(_OWORD *)(v190 + 80) = 0u;
      v191 = (void **)(v190 + 80);
      *(_QWORD *)(v190 + 208) = 0;
      *(_QWORD *)(v190 + 216) = 0;
      *(_OWORD *)(v190 + 96) = 0u;
      *(_OWORD *)(v190 + 112) = 0u;
      *(_OWORD *)(v190 + 128) = 0u;
      *(_OWORD *)(v190 + 144) = 0u;
      *(_OWORD *)(v190 + 160) = 0u;
      *(_OWORD *)(v190 + 176) = 0u;
      *(_OWORD *)(v190 + 185) = 0u;
      *(_QWORD *)(v190 + 232) = 0;
      *(_DWORD *)(v190 + 224) = -1;
      *(_OWORD *)(v190 + 248) = 0u;
      *(_OWORD *)(v190 + 264) = 0u;
      *(_DWORD *)(v190 + 279) = 0;
      *(_QWORD *)(v190 + 288) = 0x3FF0000000000000;
      *(_DWORD *)(v190 + 296) = 0;
      *(_WORD *)(v190 + 300) = 0;
      altitude::Tile::createTileName(&v375, (unsigned int *)(v188 + 392), (uint64_t *)(*(_QWORD *)(v188 + 288) + 40), (uint64_t *)(*(_QWORD *)(v188 + 288) + 136));
      if (*(char *)(v190 + 103) < 0)
        operator delete(*v191);
      *(_OWORD *)v191 = v375;
      *(_QWORD *)(v190 + 96) = v376;
      *(_QWORD *)(v188 + 328) = v190;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v190 + 16))(v190, v188);
      v189 = *(_QWORD **)(v188 + 328);
    }
    v192 = v189[29];
    if (!v192)
      goto LABEL_242;
    if (v192 != 1)
    {
      v197 = (uint64_t *)v189[31];
      while (1)
      {
        v193 = *v197;
        if (*(_QWORD *)(*v197 + 8) == v360)
          goto LABEL_246;
        ++v197;
        if (!--v192)
          goto LABEL_242;
      }
    }
    v193 = v189[30];
    if (*(_QWORD *)(v193 + 8) != v360)
    {
LABEL_242:
      v198 = operator new();
      *(_QWORD *)v198 = &off_1E42C6498;
      *(_QWORD *)(v198 + 8) = v360;
      *(_QWORD *)(v198 + 16) = v189;
      *(_QWORD *)(v198 + 24) = 0;
      *(_WORD *)(v198 + 32) = 257;
      *(_QWORD *)&v375 = v198;
      karo::SizedArray<altitude::GlobeTileComponentViewData *,1>::push_back(v189 + 29, (uint64_t *)&v375);
      v199 = v189[29];
      v200 = v199 - 1;
      if (v199 < 2)
        v201 = &v189[v200 + 30];
      else
        v201 = (uint64_t *)(v189[31] + 8 * v200);
      v193 = *v201;
    }
LABEL_246:
    v202 = v189 + 15;
    v203 = 15;
    if (!v189[15])
    {
      v203 = 26;
      v202 = v189 + 26;
    }
    v204 = v202[1];
    *(_QWORD *)&v373 = v189[v203];
    *((_QWORD *)&v373 + 1) = v204;
    if (v204)
    {
      v205 = (unint64_t *)(v204 + 8);
      do
        v206 = __ldxr(v205);
      while (__stxr(v206 + 1, v205));
    }
    v372 = *(_OWORD *)(v188 + 392);
    v207 = *(char ***)(a1 + 456);
    v345 = v193;
    if (v207)
    {
      v208 = *v207;
    }
    else
    {
      v209 = (char *)malloc_type_malloc(*(unsigned int *)(a1 + 452), 0xF0B72BE0uLL);
      v210 = v209;
      v211 = *(uint64_t **)(a1 + 432);
      if (v211)
      {
        while (1)
        {
          while (1)
          {
            v213 = (uint64_t **)v211;
            v214 = v211[4];
            if ((unint64_t)v209 >= v214)
              break;
            v211 = *v213;
            v212 = v213;
            if (!*v213)
              goto LABEL_260;
          }
          if (v214 >= (unint64_t)v209)
            break;
          v211 = v213[1];
          if (!v211)
          {
            v212 = v213 + 1;
            goto LABEL_260;
          }
        }
      }
      else
      {
        v212 = (uint64_t **)(a1 + 432);
        v213 = (uint64_t **)(a1 + 432);
LABEL_260:
        v215 = (uint64_t *)operator new(0x28uLL);
        v215[4] = (uint64_t)v210;
        *v215 = 0;
        v215[1] = 0;
        v215[2] = (uint64_t)v213;
        *v212 = v215;
        v216 = **(_QWORD **)(a1 + 424);
        if (v216)
        {
          *(_QWORD *)(a1 + 424) = v216;
          v217 = *v212;
        }
        else
        {
          v217 = v215;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 432), v217);
        ++*(_QWORD *)(a1 + 440);
      }
      v218 = &v210[80 * *(_DWORD *)(a1 + 448) - 80];
      v219 = *(char **)(a1 + 456);
      do
      {
        v208 = v219;
        v219 = v218;
        *(_QWORD *)v218 = v208;
        v218 -= 80;
      }
      while (v218 >= v210);
      v207 = (char **)(v218 + 80);
      v2 = (_QWORD *)a2;
    }
    *(_QWORD *)(a1 + 456) = v208;
    *((_DWORD *)v207 + 2) = 3;
    v207[2] = (char *)v189;
    v207[3] = (char *)v360;
    v207[4] = 0;
    v207[5] = (char *)a1;
    *((_BYTE *)v207 + 48) = 0;
    *v207 = (char *)off_1E42C4090;
    v207[8] = 0;
    v207[9] = 0;
    v207[7] = 0;
    v220 = v2[2];
    if (v2[3] != v220)
    {
      v221 = 0;
      v222 = 0;
      while (1)
      {
        v223 = *(_QWORD *)(v220 + 8 * v221);
        v224 = *(altitude::GlobeTileComponent **)(v223 + 328);
        v225 = (_QWORD *)((char *)v224 + 120);
        v226 = 120;
        if (!*((_QWORD *)v224 + 15))
        {
          v226 = 208;
          v225 = (_QWORD *)((char *)v224 + 208);
        }
        v227 = *(_QWORD *)((char *)v224 + v226);
        v228 = (std::__shared_weak_count *)v225[1];
        if (v228)
        {
          p_shared_owners = (unint64_t *)&v228->__shared_owners_;
          do
            v230 = __ldxr(p_shared_owners);
          while (__stxr(v230 + 1, p_shared_owners));
        }
        altitude::GlobeTileRenderManager::clearEffects((altitude::GlobeTileRenderManager *)a1, v224);
        v231 = *(__n128 *)(v223 + 392);
        v371 = v231;
        v232 = __p.__begin_[v221];
        if (v232 == 6)
        {
          v243 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v188 + 56))(v188);
          v348 = *(_OWORD *)v243;
          v244 = vsubq_f64(*(float64x2_t *)(v243 + 32), *(float64x2_t *)(v243 + 8));
          v352 = (int64x2_t)vmulq_f64(v244, v244);
          v356 = *(_OWORD *)(v243 + 24);
          v245 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v223 + 56))(v223);
          *(_QWORD *)&v246.f64[0] = v348;
          v246.f64[1] = *(float64_t *)v245;
          v247 = vsubq_f64(*(float64x2_t *)(v245 + 32), *(float64x2_t *)(v245 + 8));
          v248 = (int64x2_t)vmulq_f64(v247, v247);
          *(_QWORD *)&v249.f64[0] = v356;
          v249.f64[1] = *(float64_t *)(v245 + 24);
          v250 = vsubq_f64(v249, v246);
          v251 = vmulq_f64(vsqrtq_f64(vaddq_f64(vmlaq_f64((float64x2_t)vzip1q_s64(v352, v248), v250, v250), (float64x2_t)vzip2q_s64(v352, v248))), (float64x2_t)xmmword_19FFB37B0);
          altitude::Tile::createClipPlanes(v223, (double *)&v375, fmin(fmax(vdivq_f64(v251, (float64x2_t)vdupq_laneq_s64((int64x2_t)v251, 1)).f64[0] + 1.0, 1.0), 1.5));
          altitude::util::createFallbackElement(&v364, (uint64_t *)&v373, (double *)&v375);
          v252 = *(_QWORD *)(a1 + 376);
          if (v252)
          {
            v253 = *(char **)v252;
          }
          else
          {
            v273 = (char *)malloc_type_malloc(*(unsigned int *)(a1 + 372), 0xF0B72BE0uLL);
            v274 = v273;
            v275 = *(uint64_t **)(a1 + 352);
            v276 = (uint64_t **)(a1 + 352);
LABEL_303:
            v277 = v276;
            if (v275)
            {
              do
              {
                v276 = (uint64_t **)v275;
                v278 = v275[4];
                if ((unint64_t)v273 < v278)
                {
                  v275 = *v276;
                  goto LABEL_303;
                }
                if (v278 >= (unint64_t)v273)
                  goto LABEL_338;
                v275 = v276[1];
              }
              while (v275);
              v277 = v276 + 1;
            }
            v279 = (uint64_t *)operator new(0x28uLL);
            v279[4] = (uint64_t)v274;
            *v279 = 0;
            v279[1] = 0;
            v279[2] = (uint64_t)v276;
            *v277 = v279;
            v280 = **(_QWORD **)(a1 + 344);
            if (v280)
            {
              *(_QWORD *)(a1 + 344) = v280;
              v281 = *v277;
            }
            else
            {
              v281 = v279;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 352), v281);
            ++*(_QWORD *)(a1 + 360);
LABEL_338:
            v306 = &v274[136 * *(_DWORD *)(a1 + 368) - 136];
            v307 = *(char **)(a1 + 376);
            do
            {
              v253 = v307;
              v307 = v306;
              *(_QWORD *)v306 = v253;
              v306 -= 136;
            }
            while (v306 >= v274);
            v252 = (uint64_t)(v306 + 136);
            v2 = (_QWORD *)a2;
          }
          *(_QWORD *)(a1 + 376) = v253;
          *(_DWORD *)(v252 + 8) = 6;
          *(_QWORD *)(v252 + 16) = v189;
          *(_QWORD *)(v252 + 24) = v360;
          *(_QWORD *)(v252 + 32) = 0;
          *(_QWORD *)(v252 + 40) = a1;
          *(_BYTE *)(v252 + 48) = 0;
          *(_QWORD *)v252 = &off_1E42C3AA0;
          *(_QWORD *)(v252 + 56) = v227;
          *(_QWORD *)(v252 + 64) = v228;
          if (v228)
          {
            v308 = (unint64_t *)&v228->__shared_owners_;
            do
              v309 = __ldxr(v308);
            while (__stxr(v309 + 1, v308));
          }
          v310 = v365;
          *(_QWORD *)(v252 + 72) = v364;
          *(_QWORD *)(v252 + 80) = v310;
          if (v310)
          {
            v311 = (unint64_t *)&v310->__shared_owners_;
            do
              v312 = __ldxr(v311);
            while (__stxr(v312 + 1, v311));
          }
          *(__n128 *)(v252 + 88) = v371;
          *(_OWORD *)(v252 + 104) = v372;
          *(_DWORD *)(v252 + 120) = 0;
          *(_DWORD *)(v252 + 124) = v187;
          *(_QWORD *)(v252 + 128) = 0;
          v231 = altitude::CoarsenEffect::addChildEffect(v207, &v371, v252);
          v313 = v365;
          if (!v365)
            goto LABEL_364;
          v314 = (unint64_t *)&v365->__shared_owners_;
          do
            v315 = __ldaxr(v314);
          while (__stlxr(v315 - 1, v314));
          goto LABEL_362;
        }
        if (v232 == 5)
        {
          v254 = *(_QWORD *)(v2[2] + 8 * v221);
          v255 = *(_QWORD *)(a1 + 104);
          v364 = (unsigned int *)v188;
          v365 = (std::__shared_weak_count *)v254;
          v366 = *(_OWORD *)(v188 + 392);
          v367 = *(_OWORD *)(v254 + 392);
          v256 = (std::__shared_weak_count *)v189[16];
          v368 = v189[15];
          v369 = v256;
          if (v256)
          {
            v257 = (unint64_t *)&v256->__shared_owners_;
            do
              v258 = __ldxr(v257);
            while (__stxr(v258 + 1, v257));
          }
          (*(void (**)(__n128 *__return_ptr, uint64_t, unsigned int **))(*(_QWORD *)v255 + 120))(&v370, v255, &v364);
          v259 = v369;
          if (!v369)
            goto LABEL_290;
          v260 = (unint64_t *)&v369->__shared_owners_;
          do
            v261 = __ldaxr(v260);
          while (__stlxr(v261 - 1, v260));
          if (!v261)
          {
            ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
            std::__shared_weak_count::__release_weak(v259);
            v262 = *(_QWORD *)(a1 + 416);
            if (!v262)
              goto LABEL_311;
LABEL_291:
            v263 = *(char **)v262;
          }
          else
          {
LABEL_290:
            v262 = *(_QWORD *)(a1 + 416);
            if (v262)
              goto LABEL_291;
LABEL_311:
            v282 = (char *)malloc_type_malloc(*(unsigned int *)(a1 + 412), 0xF0B72BE0uLL);
            v283 = v282;
            v284 = *(uint64_t **)(a1 + 392);
            v285 = (uint64_t **)(a1 + 392);
LABEL_313:
            v286 = v285;
            if (v284)
            {
              do
              {
                v285 = (uint64_t **)v284;
                v287 = v284[4];
                if ((unint64_t)v282 < v287)
                {
                  v284 = *v285;
                  goto LABEL_313;
                }
                if (v287 >= (unint64_t)v282)
                  goto LABEL_353;
                v284 = v285[1];
              }
              while (v284);
              v286 = v285 + 1;
            }
            v288 = (uint64_t *)operator new(0x28uLL);
            v288[4] = (uint64_t)v283;
            *v288 = 0;
            v288[1] = 0;
            v288[2] = (uint64_t)v285;
            *v286 = v288;
            v289 = **(_QWORD **)(a1 + 384);
            if (v289)
            {
              *(_QWORD *)(a1 + 384) = v289;
              v290 = *v286;
            }
            else
            {
              v290 = v288;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 392), v290);
            ++*(_QWORD *)(a1 + 400);
LABEL_353:
            v316 = &v283[112 * *(_DWORD *)(a1 + 408) - 112];
            v317 = *(char **)(a1 + 416);
            do
            {
              v263 = v317;
              v317 = v316;
              *(_QWORD *)v316 = v263;
              v316 -= 112;
            }
            while (v316 >= v283);
            v262 = (uint64_t)(v316 + 112);
            v2 = (_QWORD *)a2;
          }
          *(_QWORD *)(a1 + 416) = v263;
          *(_DWORD *)(v262 + 8) = 5;
          *(_QWORD *)(v262 + 16) = v189;
          *(_QWORD *)(v262 + 24) = v360;
          *(_QWORD *)(v262 + 32) = 0;
          *(_QWORD *)(v262 + 40) = a1;
          *(_BYTE *)(v262 + 48) = 0;
          *(_QWORD *)v262 = &off_1E42C3B90;
          v318 = v370.n128_u64[1];
          *(_QWORD *)(v262 + 56) = v370.n128_u64[0];
          *(_QWORD *)(v262 + 64) = v318;
          if (v318)
          {
            v319 = (unint64_t *)(v318 + 8);
            do
              v320 = __ldxr(v319);
            while (__stxr(v320 + 1, v319));
          }
          *(__n128 *)(v262 + 72) = v371;
          *(_OWORD *)(v262 + 88) = v372;
          *(_DWORD *)(v262 + 104) = 0;
          *(_DWORD *)(v262 + 108) = v187;
          v231 = altitude::CoarsenEffect::addChildEffect(v207, &v371, v262);
          v313 = (std::__shared_weak_count *)v370.n128_u64[1];
          if (!v370.n128_u64[1])
            goto LABEL_364;
          v321 = (unint64_t *)(v370.n128_u64[1] + 8);
          do
            v315 = __ldaxr(v321);
          while (__stlxr(v315 - 1, v321));
LABEL_362:
          if (!v315)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v313->__on_zero_shared)(v313, v231);
            std::__shared_weak_count::__release_weak(v313);
          }
          goto LABEL_364;
        }
        if (v232 == 1)
          break;
LABEL_364:
        if (v228)
        {
          v322 = (unint64_t *)&v228->__shared_owners_;
          do
            v323 = __ldaxr(v322);
          while (__stlxr(v323 - 1, v322));
          if (!v323)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v228->__on_zero_shared)(v228, v231);
            std::__shared_weak_count::__release_weak(v228);
          }
        }
        v220 = v2[2];
        v221 = ++v222;
        if (v222 >= (unint64_t)((v2[3] - v220) >> 3))
          goto LABEL_369;
      }
      v233 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v188 + 56))(v188);
      v347 = *(_OWORD *)v233;
      v234 = vsubq_f64(*(float64x2_t *)(v233 + 32), *(float64x2_t *)(v233 + 8));
      v351 = (int64x2_t)vmulq_f64(v234, v234);
      v355 = *(_OWORD *)(v233 + 24);
      v235 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v223 + 56))(v223);
      *(_QWORD *)&v236.f64[0] = v347;
      v236.f64[1] = *(float64_t *)v235;
      v237 = vsubq_f64(*(float64x2_t *)(v235 + 32), *(float64x2_t *)(v235 + 8));
      v238 = (int64x2_t)vmulq_f64(v237, v237);
      *(_QWORD *)&v239.f64[0] = v355;
      v239.f64[1] = *(float64_t *)(v235 + 24);
      v240 = vsubq_f64(v239, v236);
      v241 = vmulq_f64(vsqrtq_f64(vaddq_f64(vmlaq_f64((float64x2_t)vzip1q_s64(v351, v238), v240, v240), (float64x2_t)vzip2q_s64(v351, v238))), (float64x2_t)xmmword_19FFB37B0);
      altitude::Tile::createClipPlanes(v223, (double *)&v375, fmin(fmax(vdivq_f64(v241, (float64x2_t)vdupq_laneq_s64((int64x2_t)v241, 1)).f64[0] + 1.0, 1.0), 1.5));
      v242 = *(_QWORD *)(a1 + 296);
      if (v242)
      {
        *(_QWORD *)(a1 + 296) = *(_QWORD *)v242;
        if (!v228)
        {
LABEL_327:
          *(_DWORD *)(v242 + 8) = 1;
          *(_QWORD *)(v242 + 16) = v189;
          *(_QWORD *)(v242 + 24) = v360;
          *(_QWORD *)(v242 + 32) = 0;
          *(_QWORD *)(v242 + 40) = a1;
          *(_BYTE *)(v242 + 48) = 0;
          *(_QWORD *)v242 = &off_1E42C42F8;
          *(_DWORD *)(v242 + 52) = 0;
          *(_DWORD *)(v242 + 56) = 0;
          *(_DWORD *)(v242 + 60) = v187;
          *(_QWORD *)(v242 + 64) = v227;
          *(_QWORD *)(v242 + 72) = v228;
          if (v228)
          {
            v296 = (unint64_t *)&v228->__shared_owners_;
            do
              v297 = __ldxr(v296);
            while (__stxr(v297 + 1, v296));
          }
          *(_BYTE *)(v242 + 274) = 1;
          v298 = v376;
          *(_OWORD *)(v242 + 80) = v375;
          *(_OWORD *)(v242 + 96) = v298;
          v299 = v378;
          *(_OWORD *)(v242 + 112) = v377;
          *(_OWORD *)(v242 + 128) = v299;
          v300 = v380;
          *(_OWORD *)(v242 + 144) = v379;
          *(_OWORD *)(v242 + 160) = v300;
          v301 = v382;
          *(_OWORD *)(v242 + 176) = v381;
          *(_OWORD *)(v242 + 192) = v301;
          v302 = v384;
          *(_OWORD *)(v242 + 208) = v383;
          *(_OWORD *)(v242 + 224) = v302;
          v303 = v386;
          *(_OWORD *)(v242 + 240) = v385;
          *(_OWORD *)(v242 + 256) = v303;
          *(_BYTE *)(v242 + 272) = 1;
          *(_BYTE *)(v242 + 273) = v227 != 0;
          if (v228)
          {
            v304 = (unint64_t *)&v228->__shared_owners_;
            do
              v305 = __ldaxr(v304);
            while (__stlxr(v305 - 1, v304));
            if (!v305)
            {
              ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
              std::__shared_weak_count::__release_weak(v228);
            }
          }
          v231 = altitude::CoarsenEffect::addChildEffect(v207, &v371, v242);
          goto LABEL_364;
        }
      }
      else
      {
        v264 = (char *)malloc_type_malloc(*(unsigned int *)(a1 + 292), 0xF0B72BE0uLL);
        v265 = v264;
        v266 = *(uint64_t **)(a1 + 272);
        v267 = (uint64_t **)(a1 + 272);
LABEL_294:
        v268 = v267;
        if (v266)
        {
          do
          {
            v267 = (uint64_t **)v266;
            v269 = v266[4];
            if ((unint64_t)v264 < v269)
            {
              v266 = *v267;
              goto LABEL_294;
            }
            if (v269 >= (unint64_t)v264)
              goto LABEL_322;
            v266 = v267[1];
          }
          while (v266);
          v268 = v267 + 1;
        }
        v270 = (uint64_t *)operator new(0x28uLL);
        v270[4] = (uint64_t)v265;
        *v270 = 0;
        v270[1] = 0;
        v270[2] = (uint64_t)v267;
        *v268 = v270;
        v271 = **(_QWORD **)(a1 + 264);
        if (v271)
        {
          *(_QWORD *)(a1 + 264) = v271;
          v272 = *v268;
        }
        else
        {
          v272 = v270;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 272), v272);
        ++*(_QWORD *)(a1 + 280);
LABEL_322:
        v291 = &v265[280 * *(_DWORD *)(a1 + 288) - 280];
        v292 = *(char **)(a1 + 296);
        do
        {
          v293 = v292;
          v292 = v291;
          *(_QWORD *)v291 = v293;
          v291 -= 280;
        }
        while (v291 >= v265);
        v242 = (uint64_t)(v291 + 280);
        v2 = (_QWORD *)a2;
        *(_QWORD *)(a1 + 296) = v293;
        if (!v228)
          goto LABEL_327;
      }
      v294 = (unint64_t *)&v228->__shared_owners_;
      do
        v295 = __ldxr(v294);
      while (__stxr(v295 + 1, v294));
      goto LABEL_327;
    }
LABEL_369:
    *(_QWORD *)(v345 + 24) = v207;
    v325 = *(char **)(a1 + 224);
    v324 = *(_QWORD *)(a1 + 232);
    if ((unint64_t)v325 >= v324)
    {
      v327 = *(char **)(a1 + 216);
      v328 = (v325 - v327) >> 3;
      v329 = v328 + 1;
      if ((unint64_t)(v328 + 1) >> 61)
LABEL_400:
        abort();
      v330 = v324 - (_QWORD)v327;
      if (v330 >> 2 > v329)
        v329 = v330 >> 2;
      if ((unint64_t)v330 >= 0x7FFFFFFFFFFFFFF8)
        v331 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v331 = v329;
      if (v331)
      {
        if (v331 >> 61)
LABEL_401:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v332 = operator new(8 * v331);
      }
      else
      {
        v332 = 0;
      }
      v333 = (char ***)&v332[8 * v328];
      v334 = &v332[8 * v331];
      *v333 = v207;
      v326 = v333 + 1;
      if (v325 == v327)
      {
        v327 = v325;
      }
      else
      {
        v335 = v325 - v327 - 8;
        if (v335 < 0x58)
          goto LABEL_404;
        if ((unint64_t)(v327 - v332) < 0x20)
          goto LABEL_404;
        v336 = (v335 >> 3) + 1;
        v337 = &v332[8 * v328 - 16];
        v338 = v325 - 16;
        v339 = v336 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v340 = *(_OWORD *)v338;
          *(v337 - 1) = *((_OWORD *)v338 - 1);
          *v337 = v340;
          v337 -= 2;
          v338 -= 32;
          v339 -= 4;
        }
        while (v339);
        v333 -= v336 & 0x3FFFFFFFFFFFFFFCLL;
        v325 -= 8 * (v336 & 0x3FFFFFFFFFFFFFFCLL);
        if (v336 != (v336 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_404:
          do
          {
            v341 = (char **)*((_QWORD *)v325 - 1);
            v325 -= 8;
            *--v333 = v341;
          }
          while (v325 != v327);
          v327 = *(char **)(a1 + 216);
        }
      }
      *(_QWORD *)(a1 + 216) = v333;
      *(_QWORD *)(a1 + 224) = v326;
      *(_QWORD *)(a1 + 232) = v334;
      if (v327)
        operator delete(v327);
    }
    else
    {
      *(_QWORD *)v325 = v207;
      v326 = v325 + 8;
    }
    *(_QWORD *)(a1 + 224) = v326;
    v342 = (std::__shared_weak_count *)*((_QWORD *)&v373 + 1);
    if (*((_QWORD *)&v373 + 1))
    {
      v343 = (unint64_t *)(*((_QWORD *)&v373 + 1) + 8);
      do
        v344 = __ldaxr(v343);
      while (__stlxr(v344 - 1, v343));
      if (!v344)
      {
        ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
        std::__shared_weak_count::__release_weak(v342);
      }
    }
LABEL_397:
    begin = __p.__begin_;
    if (!__p.__begin_)
      return;
    goto LABEL_398;
  }
  if (v4)
    return;
  v363 = 0;
  v362 = 0;
  v364 = 0;
  v365 = 0;
  *(_QWORD *)&v366 = 0;
  if (altitude::GlobeTileRenderManager::prepareRefineOperation(a1, (_QWORD *)a2, (std::vector<unsigned int> *)&v364, &v362, &v363)&& !v363)
  {
    goto LABEL_237;
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72), a1, 0xFFFFFFFFLL);
  v6 = v2[2];
  v7 = *(altitude::GlobeTileComponent **)(v6 + 328);
  if (!v7)
  {
    v8 = operator new();
    *(_DWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = v8 + 32;
    *(_OWORD *)(v8 + 48) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    *(_QWORD *)v8 = &off_1E42C5580;
    *(_OWORD *)(v8 + 80) = 0u;
    v9 = (void **)(v8 + 80);
    *(_QWORD *)(v8 + 208) = 0;
    *(_QWORD *)(v8 + 216) = 0;
    *(_OWORD *)(v8 + 96) = 0u;
    *(_OWORD *)(v8 + 112) = 0u;
    *(_OWORD *)(v8 + 128) = 0u;
    *(_OWORD *)(v8 + 144) = 0u;
    *(_OWORD *)(v8 + 160) = 0u;
    *(_OWORD *)(v8 + 176) = 0u;
    *(_OWORD *)(v8 + 185) = 0u;
    *(_QWORD *)(v8 + 232) = 0;
    *(_DWORD *)(v8 + 224) = -1;
    *(_OWORD *)(v8 + 248) = 0u;
    *(_OWORD *)(v8 + 264) = 0u;
    *(_DWORD *)(v8 + 279) = 0;
    *(_QWORD *)(v8 + 288) = 0x3FF0000000000000;
    *(_DWORD *)(v8 + 296) = 0;
    *(_WORD *)(v8 + 300) = 0;
    altitude::Tile::createTileName(&v375, (unsigned int *)(v6 + 392), (uint64_t *)(*(_QWORD *)(v6 + 288) + 40), (uint64_t *)(*(_QWORD *)(v6 + 288) + 136));
    if (*(char *)(v8 + 103) < 0)
      operator delete(*v9);
    *(_OWORD *)v9 = v375;
    *(_QWORD *)(v8 + 96) = v376;
    *(_QWORD *)(v6 + 328) = v8;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v6);
    v7 = *(altitude::GlobeTileComponent **)(v6 + 328);
  }
  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 60);
  altitude::GlobeTileRenderManager::clearEffects((altitude::GlobeTileRenderManager *)a1, v7);
  v11 = (_QWORD *)((char *)v7 + 120);
  v12 = 120;
  if (!*((_QWORD *)v7 + 15))
  {
    v12 = 208;
    v11 = (_QWORD *)((char *)v7 + 208);
  }
  v13 = *(unsigned int **)((char *)v7 + v12);
  end = (unsigned int *)v11[1];
  __p.__begin_ = v13;
  __p.__end_ = end;
  if (end)
  {
    v15 = (unint64_t *)(end + 2);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = v2[3];
  if (v2[4] != v17)
  {
    v18 = 0;
    v19 = 0;
    v346 = v6;
    v359 = (__int128 *)(v6 + 392);
    while (2)
    {
      v21 = *(_QWORD *)(v17 + 8 * v18);
      v22 = *(_QWORD **)(v21 + 328);
      v23 = v22[29];
      if (v23)
      {
        if (v23 != 1)
        {
          v25 = (uint64_t *)v22[31];
          while (1)
          {
            v24 = *v25;
            if (*(_QWORD *)(*v25 + 8) == v5)
              break;
            ++v25;
            if (!--v23)
              goto LABEL_26;
          }
LABEL_30:
          v30 = *v359;
          v372 = *(_OWORD *)(v21 + 392);
          v373 = v30;
          v31 = 0.0;
          switch(v364[v18])
          {
            case 1u:
              v32 = v362;
              v33 = *(_OWORD *)&__p.__begin_;
              v371 = *(__n128 *)&__p.__begin_;
              if (__p.__end_)
              {
                v34 = (unint64_t *)(__p.__end_ + 2);
                do
                  v35 = __ldxr(v34);
                while (__stxr(v35 + 1, v34));
              }
              if (!(_QWORD)v33)
                goto LABEL_43;
              v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v346 + 56))(v346);
              v349 = *(_OWORD *)v36;
              v37 = vsubq_f64(*(float64x2_t *)(v36 + 32), *(float64x2_t *)(v36 + 8));
              v353 = (int64x2_t)vmulq_f64(v37, v37);
              v357 = *(_OWORD *)(v36 + 24);
              v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 56))(v21);
              *(_QWORD *)&v39.f64[0] = v349;
              v39.f64[1] = *(float64_t *)v38;
              v40 = vsubq_f64(*(float64x2_t *)(v38 + 32), *(float64x2_t *)(v38 + 8));
              v41 = (int64x2_t)vmulq_f64(v40, v40);
              *(_QWORD *)&v42.f64[0] = v357;
              v42.f64[1] = *(float64_t *)(v38 + 24);
              v43 = vsubq_f64(v42, v39);
              v44 = vmulq_f64(vsqrtq_f64(vaddq_f64(vmlaq_f64((float64x2_t)vzip1q_s64(v353, v41), v43, v43), (float64x2_t)vzip2q_s64(v353, v41))), (float64x2_t)xmmword_19FFB37B0);
              altitude::Tile::createClipPlanes(v21, (double *)&v375, fmin(fmax(vdivq_f64(v44, (float64x2_t)vdupq_laneq_s64((int64x2_t)v44, 1)).f64[0] + 1.0, 1.0), 1.5));
              altitude::util::createFallbackElement(&v370, (uint64_t *)&v371, (double *)&v375);
              v45 = v370;
              v370 = 0uLL;
              v371 = v45;
              if (!*((_QWORD *)&v33 + 1))
                goto LABEL_39;
              v46 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v33 + 1) + 16))(*((_QWORD *)&v33 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v33 + 1));
                v48 = (std::__shared_weak_count *)v370.n128_u64[1];
                if (!v370.n128_u64[1])
                  goto LABEL_43;
              }
              else
              {
LABEL_39:
                v48 = (std::__shared_weak_count *)v370.n128_u64[1];
                if (!v370.n128_u64[1])
                  goto LABEL_43;
              }
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (v50)
              {
LABEL_43:
                v51 = *(__n128 **)(a1 + 296);
                if (v51)
                  goto LABEL_44;
                goto LABEL_120;
              }
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
              v51 = *(__n128 **)(a1 + 296);
              if (v51)
              {
LABEL_44:
                v52 = (char *)v51->n128_u64[0];
                goto LABEL_153;
              }
LABEL_120:
              v122 = (char *)malloc_type_malloc(*(unsigned int *)(a1 + 292), 0xF0B72BE0uLL);
              v123 = v122;
              v124 = *(uint64_t **)(a1 + 272);
              v125 = (uint64_t **)(a1 + 272);
LABEL_122:
              v126 = v125;
              if (v124)
              {
                do
                {
                  v125 = (uint64_t **)v124;
                  v127 = v124[4];
                  if ((unint64_t)v122 < v127)
                  {
                    v124 = *v125;
                    goto LABEL_122;
                  }
                  if (v127 >= (unint64_t)v122)
                    goto LABEL_150;
                  v124 = v125[1];
                }
                while (v124);
                v126 = v125 + 1;
              }
              v128 = (uint64_t *)operator new(0x28uLL);
              v128[4] = (uint64_t)v123;
              *v128 = 0;
              v128[1] = 0;
              v128[2] = (uint64_t)v125;
              *v126 = v128;
              v129 = **(_QWORD **)(a1 + 264);
              if (v129)
              {
                *(_QWORD *)(a1 + 264) = v129;
                v130 = *v126;
              }
              else
              {
                v130 = v128;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 272), v130);
              ++*(_QWORD *)(a1 + 280);
LABEL_150:
              v146 = &v123[280 * *(_DWORD *)(a1 + 288) - 280];
              v147 = *(char **)(a1 + 296);
              do
              {
                v52 = v147;
                v147 = v146;
                *(_QWORD *)v146 = v52;
                v146 -= 280;
              }
              while (v146 >= v123);
              v51 = (__n128 *)(v146 + 280);
              v2 = (_QWORD *)a2;
LABEL_153:
              *(_QWORD *)(a1 + 296) = v52;
              v148 = v371;
              if (v371.n128_u64[1])
              {
                v149 = (unint64_t *)(v371.n128_u64[1] + 8);
                do
                  v150 = __ldxr(v149);
                while (__stxr(v150 + 1, v149));
              }
              v51->n128_u32[2] = 1;
              v51[1].n128_u64[0] = (unint64_t)v22;
              v51[1].n128_u64[1] = v5;
              v51[2].n128_u64[0] = 0;
              v51[2].n128_u64[1] = a1;
              v51[3].n128_u8[0] = 0;
              v51->n128_u64[0] = (unint64_t)&off_1E42C42F8;
              v51[3].n128_u32[1] = 0;
              if (v32 == 1)
                v151 = 0.0;
              else
                v151 = 1.0;
              v51[3].n128_f32[2] = v151;
              v51[3].n128_u32[3] = v10;
              v51[4] = v148;
              if (v148.n128_u64[1])
              {
                v152 = (unint64_t *)(v148.n128_u64[1] + 8);
                do
                  v153 = __ldxr(v152);
                while (__stxr(v153 + 1, v152));
                v51[17].n128_u8[0] = 0;
                v51[17].n128_u8[2] = 1;
                v51[17].n128_u8[1] = v148.n128_u64[0] != 0;
                do
                  v154 = __ldaxr(v152);
                while (__stlxr(v154 - 1, v152));
                if (v154)
                {
                  v104 = *(char ***)(a1 + 496);
                  if (v104)
                    goto LABEL_166;
                }
                else
                {
                  (*(void (**)(unint64_t))(*(_QWORD *)v148.n128_u64[1] + 16))(v148.n128_u64[1]);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v148.n128_u64[1]);
                  v104 = *(char ***)(a1 + 496);
                  if (v104)
                  {
LABEL_166:
                    v155 = *v104;
                    goto LABEL_193;
                  }
                }
              }
              else
              {
                v51[17].n128_u8[0] = 0;
                v51[17].n128_u8[2] = 1;
                v51[17].n128_u8[1] = v148.n128_u64[0] != 0;
                v104 = *(char ***)(a1 + 496);
                if (v104)
                  goto LABEL_166;
              }
              v156 = (char *)malloc_type_malloc(*(unsigned int *)(a1 + 492), 0xF0B72BE0uLL);
              v157 = v156;
              v158 = *(uint64_t **)(a1 + 472);
              v159 = (uint64_t **)(a1 + 472);
LABEL_170:
              v160 = v159;
              if (v158)
              {
                do
                {
                  v159 = (uint64_t **)v158;
                  v161 = v158[4];
                  if ((unint64_t)v156 < v161)
                  {
                    v158 = *v159;
                    goto LABEL_170;
                  }
                  if (v161 >= (unint64_t)v156)
                    goto LABEL_190;
                  v158 = v159[1];
                }
                while (v158);
                v160 = v159 + 1;
              }
              v162 = (uint64_t *)operator new(0x28uLL);
              v162[4] = (uint64_t)v157;
              *v162 = 0;
              v162[1] = 0;
              v162[2] = (uint64_t)v159;
              *v160 = v162;
              v163 = **(_QWORD **)(a1 + 464);
              if (v163)
              {
                *(_QWORD *)(a1 + 464) = v163;
                v164 = *v160;
              }
              else
              {
                v164 = v162;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 472), v164);
              ++*(_QWORD *)(a1 + 480);
LABEL_190:
              v168 = &v157[(*(_DWORD *)(a1 + 488) << 6) - 64];
              v169 = *(char **)(a1 + 496);
              do
              {
                v155 = v169;
                v169 = v168;
                *(_QWORD *)v168 = v155;
                v168 -= 64;
              }
              while (v168 >= v157);
              v104 = (char **)(v168 + 64);
              v2 = (_QWORD *)a2;
LABEL_193:
              *(_QWORD *)(a1 + 496) = v155;
              *((_DWORD *)v104 + 2) = 4;
              v104[2] = (char *)v22;
              v104[3] = (char *)v5;
              v104[4] = 0;
              v104[5] = (char *)a1;
              *((_BYTE *)v104 + 48) = 0;
              *v104 = (char *)off_1E42C3F40;
              v104[7] = (char *)v51;
              v56 = (std::__shared_weak_count *)v371.n128_u64[1];
              if (v371.n128_u64[1])
              {
                v170 = (unint64_t *)(v371.n128_u64[1] + 8);
                do
                  v121 = __ldaxr(v170);
                while (__stlxr(v121 - 1, v170));
LABEL_196:
                if (!v121)
                {
                  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                  std::__shared_weak_count::__release_weak(v56);
                }
              }
LABEL_198:
              *(_QWORD *)(v24 + 24) = v104;
              v172 = *(char **)(a1 + 224);
              v171 = *(_QWORD *)(a1 + 232);
              if ((unint64_t)v172 < v171)
              {
                *(_QWORD *)v172 = v104;
                v20 = v172 + 8;
                goto LABEL_17;
              }
              v173 = *(char **)(a1 + 216);
              v174 = (v172 - v173) >> 3;
              v175 = v174 + 1;
              if ((unint64_t)(v174 + 1) >> 61)
                goto LABEL_400;
              v176 = v171 - (_QWORD)v173;
              if (v176 >> 2 > v175)
                v175 = v176 >> 2;
              if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFF8)
                v177 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v177 = v175;
              if (v177)
              {
                if (v177 >> 61)
                  goto LABEL_401;
                v178 = operator new(8 * v177);
              }
              else
              {
                v178 = 0;
              }
              v179 = (char ***)&v178[8 * v174];
              *v179 = v104;
              v20 = v179 + 1;
              if (v172 == v173)
              {
                v173 = v172;
                v2 = (_QWORD *)a2;
                goto LABEL_219;
              }
              v180 = v172 - 8 - v173;
              if (v180 >= 0x58)
              {
                v2 = (_QWORD *)a2;
                if ((unint64_t)(v173 - v178) >= 0x20)
                {
                  v181 = (v180 >> 3) + 1;
                  v182 = &v178[8 * v174 - 16];
                  v183 = v172 - 16;
                  v184 = v181 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v185 = *(_OWORD *)v183;
                    *(v182 - 1) = *((_OWORD *)v183 - 1);
                    *v182 = v185;
                    v182 -= 2;
                    v183 -= 32;
                    v184 -= 4;
                  }
                  while (v184);
                  v179 -= v181 & 0x3FFFFFFFFFFFFFFCLL;
                  v172 -= 8 * (v181 & 0x3FFFFFFFFFFFFFFCLL);
                  if (v181 == (v181 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_219;
                }
              }
              else
              {
                v2 = (_QWORD *)a2;
              }
              do
              {
                v186 = (char **)*((_QWORD *)v172 - 1);
                v172 -= 8;
                *--v179 = v186;
              }
              while (v172 != v173);
              v173 = *(char **)(a1 + 216);
LABEL_219:
              *(_QWORD *)(a1 + 216) = v179;
              *(_QWORD *)(a1 + 224) = v20;
              *(_QWORD *)(a1 + 232) = &v178[8 * v177];
              if (v173)
                operator delete(v173);
LABEL_17:
              *(_QWORD *)(a1 + 224) = v20;
LABEL_18:
              v17 = v2[3];
              v18 = ++v19;
              if (v19 < (unint64_t)((v2[4] - v17) >> 3))
                continue;
              end = __p.__end_;
              break;
            case 2u:
              v31 = 1.0;
              goto LABEL_46;
            case 5u:
              v70 = *(_QWORD *)(a1 + 104);
              *(_QWORD *)&v375 = *(_QWORD *)(v2[3] + 8 * v18);
              *((_QWORD *)&v375 + 1) = v346;
              v376 = *(_OWORD *)(v375 + 392);
              v377 = *v359;
              v71 = v22[16];
              *(_QWORD *)&v378 = v22[15];
              *((_QWORD *)&v378 + 1) = v71;
              if (v71)
              {
                v72 = (unint64_t *)(v71 + 8);
                do
                  v73 = __ldxr(v72);
                while (__stxr(v73 + 1, v72));
              }
              (*(void (**)(__n128 *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v70 + 120))(&v371, v70, &v375);
              v74 = (std::__shared_weak_count *)*((_QWORD *)&v378 + 1);
              if (!*((_QWORD *)&v378 + 1))
                goto LABEL_60;
              v75 = (unint64_t *)(*((_QWORD *)&v378 + 1) + 8);
              do
                v76 = __ldaxr(v75);
              while (__stlxr(v76 - 1, v75));
              if (!v76)
              {
                ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                std::__shared_weak_count::__release_weak(v74);
                v77 = *(_QWORD **)(a1 + 416);
                if (v77)
                {
LABEL_61:
                  v78 = (char *)*v77;
                  goto LABEL_134;
                }
              }
              else
              {
LABEL_60:
                v77 = *(_QWORD **)(a1 + 416);
                if (v77)
                  goto LABEL_61;
              }
              v88 = (char *)malloc_type_malloc(*(unsigned int *)(a1 + 412), 0xF0B72BE0uLL);
              v89 = v88;
              v90 = *(uint64_t **)(a1 + 392);
              v91 = (uint64_t **)(a1 + 392);
LABEL_74:
              v92 = v91;
              if (v90)
              {
                do
                {
                  v91 = (uint64_t **)v90;
                  v93 = v90[4];
                  if ((unint64_t)v88 < v93)
                  {
                    v90 = *v91;
                    goto LABEL_74;
                  }
                  if (v93 >= (unint64_t)v88)
                    goto LABEL_131;
                  v90 = v91[1];
                }
                while (v90);
                v92 = v91 + 1;
              }
              v94 = (uint64_t *)operator new(0x28uLL);
              v94[4] = (uint64_t)v89;
              *v94 = 0;
              v94[1] = 0;
              v94[2] = (uint64_t)v91;
              *v92 = v94;
              v95 = **(_QWORD **)(a1 + 384);
              if (v95)
              {
                *(_QWORD *)(a1 + 384) = v95;
                v96 = *v92;
              }
              else
              {
                v96 = v94;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 392), v96);
              ++*(_QWORD *)(a1 + 400);
LABEL_131:
              v131 = &v89[112 * *(_DWORD *)(a1 + 408) - 112];
              v132 = *(char **)(a1 + 416);
              do
              {
                v78 = v132;
                v132 = v131;
                *(_QWORD *)v131 = v78;
                v131 -= 112;
              }
              while (v131 >= v89);
              v77 = v131 + 112;
              v2 = (_QWORD *)a2;
LABEL_134:
              *(_QWORD *)(a1 + 416) = v78;
              *((_DWORD *)v77 + 2) = 5;
              v77[2] = v22;
              v77[3] = v5;
              v77[4] = 0;
              v77[5] = a1;
              *((_BYTE *)v77 + 48) = 0;
              *v77 = &off_1E42C3B90;
              v133 = v371.n128_u64[1];
              v77[7] = v371.n128_u64[0];
              v77[8] = v133;
              if (v133)
              {
                v134 = (unint64_t *)(v133 + 8);
                do
                  v135 = __ldxr(v134);
                while (__stxr(v135 + 1, v134));
              }
              *(_OWORD *)(v77 + 9) = v373;
              *(_OWORD *)(v77 + 11) = v372;
              *((_DWORD *)v77 + 26) = 0;
              *((_DWORD *)v77 + 27) = v10;
              v104 = *(char ***)(a1 + 496);
              if (v104)
              {
                v136 = *v104;
              }
              else
              {
                v137 = (char *)malloc_type_malloc(*(unsigned int *)(a1 + 492), 0xF0B72BE0uLL);
                v138 = v137;
                v139 = *(uint64_t **)(a1 + 472);
                v140 = (uint64_t **)(a1 + 472);
LABEL_141:
                v141 = v140;
                if (v139)
                {
                  do
                  {
                    v140 = (uint64_t **)v139;
                    v142 = v139[4];
                    if ((unint64_t)v137 < v142)
                    {
                      v139 = *v140;
                      goto LABEL_141;
                    }
                    if (v142 >= (unint64_t)v137)
                      goto LABEL_181;
                    v139 = v140[1];
                  }
                  while (v139);
                  v141 = v140 + 1;
                }
                v143 = (uint64_t *)operator new(0x28uLL);
                v143[4] = (uint64_t)v138;
                *v143 = 0;
                v143[1] = 0;
                v143[2] = (uint64_t)v140;
                *v141 = v143;
                v144 = **(_QWORD **)(a1 + 464);
                if (v144)
                {
                  *(_QWORD *)(a1 + 464) = v144;
                  v145 = *v141;
                }
                else
                {
                  v145 = v143;
                }
                std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 472), v145);
                ++*(_QWORD *)(a1 + 480);
LABEL_181:
                v165 = &v138[(*(_DWORD *)(a1 + 488) << 6) - 64];
                v166 = *(char **)(a1 + 496);
                do
                {
                  v136 = v166;
                  v166 = v165;
                  *(_QWORD *)v165 = v136;
                  v165 -= 64;
                }
                while (v165 >= v138);
                v104 = (char **)(v165 + 64);
                v2 = (_QWORD *)a2;
              }
              *(_QWORD *)(a1 + 496) = v136;
              *((_DWORD *)v104 + 2) = 4;
              v104[2] = (char *)v22;
              v104[3] = (char *)v5;
              v104[4] = 0;
              v104[5] = (char *)a1;
              *((_BYTE *)v104 + 48) = 0;
              *v104 = (char *)off_1E42C3F40;
              v104[7] = (char *)v77;
              v56 = (std::__shared_weak_count *)v371.n128_u64[1];
              if (!v371.n128_u64[1])
                goto LABEL_198;
              v167 = (unint64_t *)(v371.n128_u64[1] + 8);
              do
                v121 = __ldaxr(v167);
              while (__stlxr(v121 - 1, v167));
              goto LABEL_196;
            case 6u:
LABEL_46:
              v53 = v22 + 15;
              v54 = 15;
              if (!v22[15])
              {
                v54 = 26;
                v53 = v22 + 26;
              }
              v55 = v22[v54];
              v56 = (std::__shared_weak_count *)v53[1];
              if (v56)
              {
                v57 = (unint64_t *)&v56->__shared_owners_;
                do
                  v58 = __ldxr(v57);
                while (__stxr(v58 + 1, v57));
              }
              v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v346 + 56))(v346);
              v350 = *(_OWORD *)v59;
              v60 = vsubq_f64(*(float64x2_t *)(v59 + 32), *(float64x2_t *)(v59 + 8));
              v354 = (int64x2_t)vmulq_f64(v60, v60);
              v358 = *(_OWORD *)(v59 + 24);
              v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 56))(v21);
              *(_QWORD *)&v62.f64[0] = v350;
              v62.f64[1] = *(float64_t *)v61;
              v63 = vsubq_f64(*(float64x2_t *)(v61 + 32), *(float64x2_t *)(v61 + 8));
              v64 = (int64x2_t)vmulq_f64(v63, v63);
              *(_QWORD *)&v65.f64[0] = v358;
              v65.f64[1] = *(float64_t *)(v61 + 24);
              v66 = vsubq_f64(v65, v62);
              v67 = vmulq_f64(vsqrtq_f64(vaddq_f64(vmlaq_f64((float64x2_t)vzip1q_s64(v354, v64), v66, v66), (float64x2_t)vzip2q_s64(v354, v64))), (float64x2_t)xmmword_19FFB37B0);
              altitude::Tile::createClipPlanes(v21, (double *)&v375, fmin(fmax(vdivq_f64(v67, (float64x2_t)vdupq_laneq_s64((int64x2_t)v67, 1)).f64[0] + 1.0, 1.0), 1.5));
              altitude::util::createFallbackElement(&v371, (uint64_t *)&__p, (double *)&v375);
              v68 = *(_QWORD **)(a1 + 376);
              if (v68)
              {
                v69 = (char *)*v68;
                goto LABEL_86;
              }
              v79 = (char *)malloc_type_malloc(*(unsigned int *)(a1 + 372), 0xF0B72BE0uLL);
              v80 = v79;
              v81 = *(uint64_t **)(a1 + 352);
              v82 = (uint64_t **)(a1 + 352);
LABEL_64:
              v83 = v82;
              if (!v81)
                goto LABEL_69;
              while (1)
              {
                v82 = (uint64_t **)v81;
                v84 = v81[4];
                if ((unint64_t)v79 < v84)
                {
                  v81 = *v82;
                  goto LABEL_64;
                }
                if (v84 >= (unint64_t)v79)
                  break;
                v81 = v82[1];
                if (!v81)
                {
                  v83 = v82 + 1;
LABEL_69:
                  v85 = (uint64_t *)operator new(0x28uLL);
                  v85[4] = (uint64_t)v80;
                  *v85 = 0;
                  v85[1] = 0;
                  v85[2] = (uint64_t)v82;
                  *v83 = v85;
                  v86 = **(_QWORD **)(a1 + 344);
                  if (v86)
                  {
                    *(_QWORD *)(a1 + 344) = v86;
                    v87 = *v83;
                  }
                  else
                  {
                    v87 = v85;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 352), v87);
                  ++*(_QWORD *)(a1 + 360);
                  break;
                }
              }
              v97 = &v80[136 * *(_DWORD *)(a1 + 368) - 136];
              v98 = *(char **)(a1 + 376);
              do
              {
                v69 = v98;
                v98 = v97;
                *(_QWORD *)v97 = v69;
                v97 -= 136;
              }
              while (v97 >= v80);
              v68 = v97 + 136;
              v2 = (_QWORD *)a2;
LABEL_86:
              *(_QWORD *)(a1 + 376) = v69;
              *((_DWORD *)v68 + 2) = 6;
              v68[2] = v22;
              v68[3] = v5;
              v68[4] = 0;
              v68[5] = a1;
              *((_BYTE *)v68 + 48) = 0;
              *v68 = &off_1E42C3AA0;
              v99 = v371.n128_u64[1];
              v68[7] = v371.n128_u64[0];
              v68[8] = v99;
              if (v99)
              {
                v100 = (unint64_t *)(v99 + 8);
                do
                  v101 = __ldxr(v100);
                while (__stxr(v101 + 1, v100));
              }
              v68[9] = v55;
              v68[10] = v56;
              if (v56)
              {
                v102 = (unint64_t *)&v56->__shared_owners_;
                do
                  v103 = __ldxr(v102);
                while (__stxr(v103 + 1, v102));
              }
              *(_OWORD *)(v68 + 11) = v373;
              *(_OWORD *)(v68 + 13) = v372;
              *((_DWORD *)v68 + 30) = 0;
              *((_DWORD *)v68 + 31) = v10;
              *((float *)v68 + 32) = v31;
              *((_DWORD *)v68 + 33) = 0;
              v104 = *(char ***)(a1 + 496);
              if (v104)
              {
                v105 = *v104;
              }
              else
              {
                v106 = (char *)malloc_type_malloc(*(unsigned int *)(a1 + 492), 0xF0B72BE0uLL);
                v107 = v106;
                v108 = *(uint64_t **)(a1 + 472);
                v109 = (uint64_t **)(a1 + 472);
LABEL_96:
                v110 = v109;
                if (v108)
                {
                  do
                  {
                    v109 = (uint64_t **)v108;
                    v111 = v108[4];
                    if ((unint64_t)v106 < v111)
                    {
                      v108 = *v109;
                      goto LABEL_96;
                    }
                    if (v111 >= (unint64_t)v106)
                      goto LABEL_105;
                    v108 = v109[1];
                  }
                  while (v108);
                  v110 = v109 + 1;
                }
                v112 = (uint64_t *)operator new(0x28uLL);
                v112[4] = (uint64_t)v107;
                *v112 = 0;
                v112[1] = 0;
                v112[2] = (uint64_t)v109;
                *v110 = v112;
                v113 = **(_QWORD **)(a1 + 464);
                if (v113)
                {
                  *(_QWORD *)(a1 + 464) = v113;
                  v114 = *v110;
                }
                else
                {
                  v114 = v112;
                }
                std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 472), v114);
                ++*(_QWORD *)(a1 + 480);
LABEL_105:
                v115 = &v107[(*(_DWORD *)(a1 + 488) << 6) - 64];
                v116 = *(char **)(a1 + 496);
                do
                {
                  v105 = v116;
                  v116 = v115;
                  *(_QWORD *)v115 = v105;
                  v115 -= 64;
                }
                while (v115 >= v107);
                v104 = (char **)(v115 + 64);
                v2 = (_QWORD *)a2;
              }
              *(_QWORD *)(a1 + 496) = v105;
              *((_DWORD *)v104 + 2) = 4;
              v104[2] = (char *)v22;
              v104[3] = (char *)v5;
              v104[4] = 0;
              v104[5] = (char *)a1;
              *((_BYTE *)v104 + 48) = 0;
              *v104 = (char *)off_1E42C3F40;
              v104[7] = (char *)v68;
              v117 = (std::__shared_weak_count *)v371.n128_u64[1];
              if (v371.n128_u64[1])
              {
                v118 = (unint64_t *)(v371.n128_u64[1] + 8);
                do
                  v119 = __ldaxr(v118);
                while (__stlxr(v119 - 1, v118));
                if (!v119)
                {
                  ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                  std::__shared_weak_count::__release_weak(v117);
                }
              }
              if (!v56)
                goto LABEL_198;
              v120 = (unint64_t *)&v56->__shared_owners_;
              do
                v121 = __ldaxr(v120);
              while (__stlxr(v121 - 1, v120));
              goto LABEL_196;
            default:
              goto LABEL_18;
          }
          goto LABEL_232;
        }
        v24 = v22[30];
        if (*(_QWORD *)(v24 + 8) == v5)
          goto LABEL_30;
      }
      break;
    }
LABEL_26:
    v26 = operator new();
    *(_QWORD *)v26 = &off_1E42C6498;
    *(_QWORD *)(v26 + 8) = v5;
    *(_QWORD *)(v26 + 16) = v22;
    *(_QWORD *)(v26 + 24) = 0;
    *(_WORD *)(v26 + 32) = 257;
    *(_QWORD *)&v375 = v26;
    karo::SizedArray<altitude::GlobeTileComponentViewData *,1>::push_back(v22 + 29, (uint64_t *)&v375);
    v27 = v22[29];
    v28 = v27 - 1;
    if (v27 < 2)
      v29 = &v22[v28 + 30];
    else
      v29 = (uint64_t *)(v22[31] + 8 * v28);
    v24 = *v29;
    goto LABEL_30;
  }
LABEL_232:
  if (end)
  {
    v194 = (unint64_t *)(end + 2);
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)end + 16))(end);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)end);
    }
  }
LABEL_237:
  begin = v364;
  if (!v364)
    return;
LABEL_398:
  operator delete(begin);
}

void `non-virtual thunk to'altitude::GlobeTileRenderManager::~GlobeTileRenderManager(altitude::GlobeTileRenderManager *this)
{
  altitude::GlobeTileRenderManager::~GlobeTileRenderManager((altitude::GlobeTileRenderManager *)((char *)this - 40));
}

{
  altitude::GlobeTileRenderManager::~GlobeTileRenderManager((altitude::GlobeTileRenderManager *)((char *)this - 40));
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'altitude::GlobeTileRenderManager::onTileComponentDataLoaded(altitude::GlobeTileRenderManager *this, altitude::Tile *a2, altitude::TileComponent *a3, void *a4)
{
  altitude::GlobeTileRenderManager::onTileComponentDataLoaded((altitude::GlobeTileRenderManager *)((char *)this - 40), a2, a3, a4);
}

void `non-virtual thunk to'altitude::GlobeTileRenderManager::onTileComponentDataRelease(altitude::GlobeTileRenderManager *this, altitude::Tile *a2, altitude::TileComponent *a3, void *a4)
{
  if (!*((_DWORD *)a3 + 2))
    altitude::GlobeTileRenderManager::clearEffects((altitude::GlobeTileRenderManager *)((char *)this - 40), a3);
}

void `non-virtual thunk to'altitude::GlobeTileRenderManager::onChildTileRemoved(altitude::GlobeTileRenderManager *this, altitude::Tile *a2, altitude::Tile *a3)
{
  altitude::GlobeTileComponent *v3;

  v3 = (altitude::GlobeTileComponent *)*((_QWORD *)a3 + 41);
  if (v3)
    altitude::GlobeTileRenderManager::clearEffects((altitude::GlobeTileRenderManager *)((char *)this - 40), v3);
}

void altitude::GlobeTileRenderManager::clearEffects(altitude::GlobeTileRenderManager *this, altitude::GlobeTileComponent *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *i;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;

  v4 = (*(uint64_t (**)(_QWORD, altitude::GlobeTileRenderManager *, uint64_t))(**((_QWORD **)this + 9) + 24))(*((_QWORD *)this + 9), this, 0xFFFFFFFFLL);
  v5 = *((_QWORD *)a2 + 29);
  if (v5)
  {
    if (v5 == 1)
    {
      v6 = *((_QWORD *)a2 + 30);
      if (*(_QWORD *)(v6 + 8) != v4)
        return;
    }
    else
    {
      for (i = (uint64_t *)*((_QWORD *)a2 + 31); ; ++i)
      {
        v6 = *i;
        if (*(_QWORD *)(*i + 8) == v4)
          break;
        if (!--v5)
          return;
      }
    }
    v7 = *(_QWORD *)(v6 + 24);
    if (v7)
    {
      v8 = *((_QWORD *)this + 27);
      v9 = *((_QWORD *)this + 28) - v8;
      v10 = v9 >> 3;
      v11 = (v9 >> 3);
      if ((v9 & 0x7FFFFFFF8) == 0)
        goto LABEL_16;
      v12 = 0;
      while (*(_QWORD *)(v8 + 8 * v12) != v7)
      {
        if (v11 == ++v12)
          goto LABEL_16;
      }
      v11 = (v10 - 1);
      *(_QWORD *)(v8 + 8 * v12) = *(_QWORD *)(v8 + 8 * v11);
      v8 = *((_QWORD *)this + 27);
      v10 = (*((_QWORD *)this + 28) - v8) >> 3;
      if (v11 > v10)
      {
        std::vector<altitude::TextureMap *>::__append((uint64_t)this + 216, v11 - v10);
      }
      else
      {
LABEL_16:
        if (v10 > v11)
          *((_QWORD *)this + 28) = v8 + 8 * v11;
      }
      v14 = *(_QWORD *)(v6 + 24);
      if (v14)
      {
        v22 = (char *)this + 416;
        v15 = (char *)this + 336;
        v16 = (char *)this + 296;
        v17 = (char *)this + 376;
        v18 = (char *)this + 496;
        v19 = (char *)this + 456;
        do
        {
          v21 = *(_QWORD *)(v14 + 32);
          v20 = v19;
          switch(*(_DWORD *)(v14 + 8))
          {
            case 1:
              v20 = v16;
              goto LABEL_21;
            case 2:
              v20 = v15;
              goto LABEL_21;
            case 3:
              goto LABEL_21;
            case 4:
              v20 = v18;
              goto LABEL_21;
            case 5:
              v20 = v22;
              goto LABEL_21;
            case 6:
              v20 = v17;
LABEL_21:
              (**(void (***)(uint64_t))v14)(v14);
              *(_QWORD *)v14 = *v20;
              *v20 = v14;
              break;
            default:
              break;
          }
          *(_QWORD *)(v6 + 24) = v21;
          v14 = v21;
        }
        while (v21);
      }
    }
  }
}

uint64_t altitude::GlobeTileRenderManager::prepareCoarsenOperation(uint64_t a1, _QWORD *a2, std::vector<unsigned int> *a3, _BYTE *a4)
{
  const altitude::View *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  char v18;
  char v19;
  std::vector<unsigned int>::pointer begin;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *TileView;
  _QWORD *v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  __int128 *v43;
  unsigned int v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  double *v49;
  float v50;
  unsigned int *v51;
  unsigned int v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *i;
  _QWORD *v66;
  _BYTE *v68;
  uint64_t v69;
  int v71;
  uint64_t v72;
  std::vector<unsigned int> *v73;
  void (**v74)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v75;
  std::__shared_weak_count *v76;
  std::vector<unsigned int>::value_type __x[4];
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  std::__shared_weak_count *v81;

  v7 = (const altitude::View *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72));
  v8 = a2[5];
  v9 = *(_QWORD *)(v8 + 328);
  if (!v9)
  {
    v10 = operator new();
    *(_DWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 40) = 0;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = v10 + 32;
    *(_OWORD *)(v10 + 48) = 0u;
    *(_OWORD *)(v10 + 64) = 0u;
    *(_QWORD *)v10 = &off_1E42C5580;
    *(_OWORD *)(v10 + 80) = 0u;
    v11 = (void **)(v10 + 80);
    *(_QWORD *)(v10 + 208) = 0;
    *(_QWORD *)(v10 + 216) = 0;
    *(_OWORD *)(v10 + 96) = 0u;
    *(_OWORD *)(v10 + 112) = 0u;
    *(_OWORD *)(v10 + 128) = 0u;
    *(_OWORD *)(v10 + 144) = 0u;
    *(_OWORD *)(v10 + 160) = 0u;
    *(_OWORD *)(v10 + 176) = 0u;
    *(_OWORD *)(v10 + 185) = 0u;
    *(_QWORD *)(v10 + 232) = 0;
    *(_DWORD *)(v10 + 224) = -1;
    *(_OWORD *)(v10 + 248) = 0u;
    *(_OWORD *)(v10 + 264) = 0u;
    *(_DWORD *)(v10 + 279) = 0;
    *(_QWORD *)(v10 + 288) = 0x3FF0000000000000;
    *(_DWORD *)(v10 + 296) = 0;
    *(_WORD *)(v10 + 300) = 0;
    altitude::Tile::createTileName(__x, (unsigned int *)(v8 + 392), (uint64_t *)(*(_QWORD *)(v8 + 288) + 40), (uint64_t *)(*(_QWORD *)(v8 + 288) + 136));
    if (*(char *)(v10 + 103) < 0)
      operator delete(*v11);
    *(_OWORD *)v11 = *(_OWORD *)__x;
    *(_QWORD *)(v10 + 96) = v78;
    *(_QWORD *)(v8 + 328) = v10;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v8);
    v9 = *(_QWORD *)(v8 + 328);
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9) & 1) != 0)
    v71 = 1;
  else
    v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
  v12 = a2[2];
  v13 = a2[3];
  v14 = (v13 - v12) >> 3;
  __x[0] = 0;
  v15 = a3->__end_ - a3->__begin_;
  if (v14 <= v15)
  {
    if (v14 < v15)
      a3->__end_ = &a3->__begin_[v14];
  }
  else
  {
    std::vector<unsigned int>::__append(a3, v14 - v15, __x);
    v12 = a2[2];
    v13 = a2[3];
  }
  v72 = v9;
  v73 = a3;
  if (v13 == v12)
  {
    v19 = 0;
    v18 = 0;
    v22 = v12;
    goto LABEL_49;
  }
  v68 = a4;
  v69 = v8;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  do
  {
    v23 = *(_QWORD *)(v12 + 8 * v16);
    TileView = altitude::Tile::getOrCreateTileView((altitude::Tile *)v23, v7);
    v25 = *(_QWORD **)(v23 + 328);
    if (!v25)
    {
      v26 = operator new();
      *(_DWORD *)(v26 + 8) = 0;
      *(_QWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 32) = 0;
      *(_QWORD *)(v26 + 16) = 0;
      *(_QWORD *)(v26 + 24) = v26 + 32;
      *(_OWORD *)(v26 + 48) = 0u;
      *(_OWORD *)(v26 + 64) = 0u;
      *(_OWORD *)(v26 + 80) = 0u;
      v27 = (void **)(v26 + 80);
      *(_QWORD *)v26 = &off_1E42C5580;
      *(_QWORD *)(v26 + 208) = 0;
      *(_QWORD *)(v26 + 216) = 0;
      *(_OWORD *)(v26 + 96) = 0u;
      *(_OWORD *)(v26 + 112) = 0u;
      *(_OWORD *)(v26 + 128) = 0u;
      *(_OWORD *)(v26 + 144) = 0u;
      *(_OWORD *)(v26 + 160) = 0u;
      *(_OWORD *)(v26 + 176) = 0u;
      *(_OWORD *)(v26 + 185) = 0u;
      *(_DWORD *)(v26 + 224) = -1;
      *(_QWORD *)(v26 + 232) = 0;
      *(_OWORD *)(v26 + 248) = 0u;
      *(_OWORD *)(v26 + 264) = 0u;
      *(_DWORD *)(v26 + 279) = 0;
      *(_QWORD *)(v26 + 288) = 0x3FF0000000000000;
      *(_DWORD *)(v26 + 296) = 0;
      *(_WORD *)(v26 + 300) = 0;
      altitude::Tile::createTileName(__x, (unsigned int *)(v23 + 392), (uint64_t *)(*(_QWORD *)(v23 + 288) + 40), (uint64_t *)(*(_QWORD *)(v23 + 288) + 136));
      if (*(char *)(v26 + 103) < 0)
        operator delete(*v27);
      *(_OWORD *)v27 = *(_OWORD *)__x;
      *(_QWORD *)(v26 + 96) = v78;
      *(_QWORD *)(v23 + 328) = v26;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 16))(v26, v23);
      v25 = *(_QWORD **)(v23 + 328);
    }
    v28 = v25[29];
    if (!v28)
      goto LABEL_29;
    if (v28 == 1)
    {
      v29 = v25[30];
      if (*(const altitude::View **)(v29 + 8) == v7)
        goto LABEL_33;
LABEL_29:
      v31 = operator new();
      *(_QWORD *)v31 = &off_1E42C6498;
      *(_QWORD *)(v31 + 8) = v7;
      *(_QWORD *)(v31 + 16) = v25;
      *(_QWORD *)(v31 + 24) = 0;
      *(_WORD *)(v31 + 32) = 257;
      *(_QWORD *)__x = v31;
      karo::SizedArray<altitude::GlobeTileComponentViewData *,1>::push_back(v25 + 29, (uint64_t *)__x);
      v32 = v25[29];
      v33 = v32 - 1;
      if (v32 < 2)
        v34 = &v25[v33 + 30];
      else
        v34 = (uint64_t *)(v25[31] + 8 * v33);
      v29 = *v34;
      goto LABEL_33;
    }
    v30 = (uint64_t *)v25[31];
    while (1)
    {
      v29 = *v30;
      if (*(const altitude::View **)(*v30 + 8) == v7)
        break;
      ++v30;
      if (!--v28)
        goto LABEL_29;
    }
LABEL_33:
    if (((*(uint64_t (**)(_QWORD *))(*v25 + 48))(v25) & 1) != 0)
      v35 = 1;
    else
      v35 = (*(uint64_t (**)(_QWORD *))(*v25 + 56))(v25);
    v36 = TileView[40] != 0;
    v37 = *(_QWORD *)(v29 + 24);
    if (v37)
    {
      switch(*(_DWORD *)(v37 + 8))
      {
        case 1:
          if (*(float *)(v37 + 56) == 0.0)
            goto LABEL_15;
          goto LABEL_38;
        case 2:
        case 3:
        case 4:
        case 6:
LABEL_38:
          v19 = 1;
          break;
        default:
          break;
      }
    }
    else
    {
      if ((v71 & v35 & 1) != 0)
      {
        if (*(_BYTE *)(v72 + 296) && *(_DWORD *)(v69 + 392) >= 2u && v25[15] && *(_QWORD *)(v72 + 120))
        {
          begin = v73->__begin_;
          v21 = 5;
        }
        else
        {
          begin = v73->__begin_;
          v21 = 6;
        }
      }
      else
      {
LABEL_15:
        begin = v73->__begin_;
        v21 = 1;
      }
      begin[v16] = v21;
    }
    v18 |= v36;
    v12 = a2[2];
    v22 = a2[3];
    v16 = ++v17;
  }
  while (v17 < (unint64_t)((v22 - v12) >> 3));
  a4 = v68;
  v8 = v69;
  if ((v19 & 1) == 0)
  {
LABEL_49:
    if ((v18 & 1) != 0)
      goto LABEL_51;
    *a4 = 0;
    v38 = 1;
    return v38 & 1;
  }
LABEL_51:
  v39 = 1;
  *a4 = 1;
  if (v22 != v12)
  {
    v40 = 0;
    v41 = 0;
    v42 = v8;
    v43 = (__int128 *)(v8 + 392);
    do
    {
      v44 = v73->__begin_[v40];
      if (v44 == 5)
      {
        v45 = *(_QWORD *)(v12 + 8 * v40);
        *(_QWORD *)__x = v42;
        *(_QWORD *)&__x[2] = v45;
        v78 = *v43;
        v79 = *(_OWORD *)(v45 + 392);
        v46 = *(std::__shared_weak_count **)(v72 + 128);
        v80 = *(_QWORD *)(v72 + 120);
        v81 = v46;
        if (v46)
        {
          p_shared_owners = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldxr(p_shared_owners);
          while (__stxr(v48 + 1, p_shared_owners));
          v12 = a2[2];
        }
        v49 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 8 * v40) + 24))(*(_QWORD *)(v12 + 8 * v40));
        v50 = altitude::TileLoader::computeBasePriorityFromPosition((uint64_t)v7, v49);
        (*(void (**)(void (***__return_ptr)(karo::AsyncRequestManager::RequestHandle *__hidden), _QWORD, std::vector<unsigned int>::value_type *, _QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 104) + 104))(&v74, *(_QWORD *)(a1 + 104), __x, 0, *(_DWORD *)(a1 + 504) + (float)(v50 * 100000.0), 10, 0);
        if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v74) != 4)
          v39 &= karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v74) == 0;
        v74 = &off_1E42C2D08;
        if (v75)
        {
          v51 = (unsigned int *)(v75 + 128);
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
        }
        v53 = v76;
        if (v76)
        {
          v54 = (unint64_t *)&v76->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v56 = v81;
        if (v81)
        {
          v57 = (unint64_t *)&v81->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v12 = a2[2];
        v22 = a2[3];
      }
      else if (!v44)
      {
        v39 = 0;
      }
      v40 = ++v41;
    }
    while (v41 < (unint64_t)((v22 - v12) >> 3));
  }
  v59 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 88);
  v60 = *(_QWORD *)(v72 + 120);
  if (v60 || (v60 = *(_QWORD *)(v72 + 208)) != 0)
  {
    v61 = *(_QWORD *)(v60 + 48);
    v62 = *(_QWORD *)(v60 + 56);
    LOBYTE(v63) = 1;
    while (v61 != v62)
    {
      v64 = *(_QWORD **)(*(_QWORD *)v61 + 256);
      for (i = *(_QWORD **)(*(_QWORD *)v61 + 264); v64 != i; ++v64)
      {
        while (1)
        {
          v66 = (_QWORD *)*v64;
          if (*v64)
            break;
LABEL_84:
          if (++v64 == i)
            goto LABEL_80;
        }
        v66[11] = v59;
        if ((v63 & 1) != 0)
        {
          v63 = v66[2];
          if (v63)
            LOBYTE(v63) = v63 != v66[3];
          goto LABEL_84;
        }
        LOBYTE(v63) = 0;
      }
LABEL_80:
      v61 += 8;
    }
    v39 &= v63;
  }
  v38 = v39 & (v19 ^ 1);
  return v38 & 1;
}

uint64_t altitude::GlobeTileRenderManager::prepareRefineOperation(uint64_t a1, _QWORD *a2, std::vector<unsigned int> *a3, std::vector<unsigned int>::value_type *a4, _BYTE *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  std::vector<unsigned int> *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  altitude::Tile *v36;
  uint64_t v37;
  int v38;
  float v39;
  unsigned int v40;
  char *TileView;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  double *v51;
  float v52;
  unsigned int *v53;
  unsigned int v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *i;
  _QWORD *v68;
  uint64_t v70;
  int v72;
  _DWORD *v73;
  uint64_t v74;
  void (**v76)(karo::AsyncRequestManager::RequestHandle *__hidden);
  uint64_t v77;
  std::__shared_weak_count *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  std::__shared_weak_count *v83;

  v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72), a1, 0xFFFFFFFFLL);
  v73 = (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64), a1);
  v9 = a2[2];
  v10 = *(_QWORD *)(v9 + 328);
  if (!v10)
  {
    v11 = operator new();
    *(_DWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 40) = 0;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 24) = v11 + 32;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
    *(_QWORD *)v11 = &off_1E42C5580;
    *(_OWORD *)(v11 + 80) = 0u;
    v12 = (void **)(v11 + 80);
    *(_QWORD *)(v11 + 208) = 0;
    *(_QWORD *)(v11 + 216) = 0;
    *(_OWORD *)(v11 + 96) = 0u;
    *(_OWORD *)(v11 + 112) = 0u;
    *(_OWORD *)(v11 + 128) = 0u;
    *(_OWORD *)(v11 + 144) = 0u;
    *(_OWORD *)(v11 + 160) = 0u;
    *(_OWORD *)(v11 + 176) = 0u;
    *(_OWORD *)(v11 + 185) = 0u;
    *(_QWORD *)(v11 + 232) = 0;
    *(_DWORD *)(v11 + 224) = -1;
    *(_OWORD *)(v11 + 248) = 0u;
    *(_OWORD *)(v11 + 264) = 0u;
    *(_DWORD *)(v11 + 279) = 0;
    *(_QWORD *)(v11 + 288) = 0x3FF0000000000000;
    *(_DWORD *)(v11 + 296) = 0;
    *(_WORD *)(v11 + 300) = 0;
    altitude::Tile::createTileName(&v79, (unsigned int *)(v9 + 392), (uint64_t *)(*(_QWORD *)(v9 + 288) + 40), (uint64_t *)(*(_QWORD *)(v9 + 288) + 136));
    if (*(char *)(v11 + 103) < 0)
      operator delete(*v12);
    *(_OWORD *)v12 = v79;
    *(_QWORD *)(v11 + 96) = v80;
    *(_QWORD *)(v9 + 328) = v11;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
    v10 = *(_QWORD *)(v9 + 328);
  }
  v13 = *(_QWORD *)(v10 + 232);
  if (!v13)
  {
LABEL_12:
    v16 = operator new();
    *(_QWORD *)v16 = &off_1E42C6498;
    *(_QWORD *)(v16 + 8) = v8;
    *(_QWORD *)(v16 + 16) = v10;
    *(_QWORD *)(v16 + 24) = 0;
    *(_WORD *)(v16 + 32) = 257;
    *(_QWORD *)&v79 = v16;
    karo::SizedArray<altitude::GlobeTileComponentViewData *,1>::push_back((_QWORD *)(v10 + 232), (uint64_t *)&v79);
    v17 = *(_QWORD *)(v10 + 232);
    v18 = v17 - 1;
    if (v17 < 2)
      v19 = (uint64_t *)(v10 + 8 * v18 + 240);
    else
      v19 = (uint64_t *)(*(_QWORD *)(v10 + 248) + 8 * v18);
    v14 = *v19;
    goto LABEL_16;
  }
  if (v13 == 1)
  {
    v14 = *(_QWORD *)(v10 + 240);
    if (*(_QWORD *)(v14 + 8) == v8)
      goto LABEL_16;
    goto LABEL_12;
  }
  v15 = *(uint64_t **)(v10 + 248);
  while (1)
  {
    v14 = *v15;
    if (*(_QWORD *)(*v15 + 8) == v8)
      break;
    ++v15;
    if (!--v13)
      goto LABEL_12;
  }
LABEL_16:
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10) & 1) != 0)
  {
    *a4 = 0;
    v20 = *(_QWORD *)(v14 + 24);
    if (!v20)
    {
LABEL_23:
      v22 = a3;
      if (*(_BYTE *)(v10 + 296) && *(_DWORD *)(v9 + 392) >= 2u)
      {
        v72 = 0;
        v23 = 5;
      }
      else
      {
        v72 = 0;
        v23 = 6;
      }
LABEL_27:
      *a4 = v23;
      goto LABEL_33;
    }
  }
  else
  {
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
    *a4 = 0;
    v20 = *(_QWORD *)(v14 + 24);
    if (!v20)
    {
      if ((v21 & 1) == 0)
      {
        v72 = 0;
        *a4 = 1;
        v22 = a3;
        goto LABEL_33;
      }
      goto LABEL_23;
    }
  }
  v72 = 0;
  v22 = a3;
  switch(*(_DWORD *)(v20 + 8))
  {
    case 1:
      v72 = 1;
      if (*(float *)(v20 + 56) == 0.0)
      {
        *a4 = 1;
        v72 = 0;
      }
      break;
    case 2:
      if (*(float *)(v20 + 56) != 1.0)
        goto LABEL_21;
      v72 = 0;
      v23 = 2;
      goto LABEL_27;
    case 3:
    case 4:
    case 6:
LABEL_21:
      v72 = 1;
      break;
    default:
      break;
  }
LABEL_33:
  v24 = a2[3];
  v25 = a2[4];
  v26 = (v25 - v24) >> 3;
  v27 = v22->__end_ - v22->__begin_;
  if (v26 <= v27)
  {
    if (v26 < v27)
      v22->__end_ = &v22->__begin_[v26];
  }
  else
  {
    std::vector<unsigned int>::__append(v22, v26 - v27, a4);
    v24 = a2[3];
    v25 = a2[4];
  }
  v74 = v8;
  if (v25 != v24)
  {
    v70 = v9;
    v28 = 0;
    v29 = 0;
    v30 = 1;
    while (1)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v24 + 8 * v28) + 328);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 48))(v33) & 1) != 0)
        v34 = 1;
      else
        v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 56))(v33);
      LODWORD(v79) = 1065353216;
      v35 = *(_QWORD *)(a1 + 80);
      if (!v35)
        goto LABEL_49;
      v36 = *(altitude::Tile **)(a2[3] + 8 * v28);
      if (!v36)
        goto LABEL_49;
      v37 = *(_QWORD *)(a1 + 112);
      v38 = *(_DWORD *)(v37 + 208);
      v39 = *(float *)(v37 + 200);
      v40 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 88);
      TileView = altitude::Tile::getOrCreateTileView(v36, *(const altitude::View **)(a1 + 80));
      if ((altitude::TileView::isCulled((altitude::TileView *)TileView, v40) & 1) == 0)
        break;
      v31 = 0;
LABEL_40:
      a3->__begin_[v28] = v31;
      v31 |= v29;
LABEL_41:
      v28 = v30;
      v24 = a2[3];
      v32 = a2[4];
      ++v30;
      v29 = v31;
      if (v28 >= (v32 - v24) >> 3)
      {
        v22 = a3;
        v9 = v70;
        goto LABEL_53;
      }
    }
    altitude::Tile::computeTileResolution((char *)v36, v35, v73, v38, (float *)&v79, v40, v39);
LABEL_49:
    v31 = 1;
    if ((v34 & 1) != 0)
      goto LABEL_41;
    goto LABEL_40;
  }
  v31 = 0;
  v32 = v24;
LABEL_53:
  if (((v72 | v31) & 1) != 0)
  {
    v42 = 1;
    *a5 = 1;
    if (v32 != v24)
    {
      v43 = 0;
      v44 = 0;
      do
      {
        v46 = *(_QWORD *)(v24 + 8 * v43);
        v47 = *(_QWORD **)(v46 + 328);
        if (v22->__begin_[v43] == 5)
        {
          *(_QWORD *)&v79 = *(_QWORD *)(v24 + 8 * v43);
          *((_QWORD *)&v79 + 1) = v9;
          v80 = *(_OWORD *)(v46 + 392);
          v81 = *(_OWORD *)(v9 + 392);
          v48 = (std::__shared_weak_count *)v47[16];
          v82 = v47[15];
          v83 = v48;
          if (v48)
          {
            p_shared_owners = (unint64_t *)&v48->__shared_owners_;
            do
              v50 = __ldxr(p_shared_owners);
            while (__stxr(v50 + 1, p_shared_owners));
            v24 = a2[3];
          }
          v51 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v24 + 8 * v43) + 24))(*(_QWORD *)(v24 + 8 * v43));
          v52 = altitude::TileLoader::computeBasePriorityFromPosition(v74, v51);
          (*(void (**)(void (***__return_ptr)(karo::AsyncRequestManager::RequestHandle *__hidden), _QWORD, __int128 *, _QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 104) + 104))(&v76, *(_QWORD *)(a1 + 104), &v79, 0, *(_DWORD *)(a1 + 504) + (float)(v52 * 100000.0), 10, 0);
          if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v76) != 4)
            v42 = (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v76) == 0) & v42;
          v76 = &off_1E42C2D08;
          if (v77)
          {
            v53 = (unsigned int *)(v77 + 128);
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
          }
          v55 = v78;
          if (!v78)
            goto LABEL_72;
          v56 = (unint64_t *)&v78->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
            v58 = v83;
            if (!v83)
              goto LABEL_78;
          }
          else
          {
LABEL_72:
            v58 = v83;
            if (!v83)
              goto LABEL_78;
          }
          v59 = (unint64_t *)&v58->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
LABEL_78:
        v61 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 88);
        v62 = v47[15];
        if (v62 || (v62 = v47[26]) != 0)
        {
          v63 = *(_QWORD *)(v62 + 48);
          v64 = *(_QWORD *)(v62 + 56);
          LOBYTE(v65) = 1;
          while (v63 != v64)
          {
            v66 = *(_QWORD **)(*(_QWORD *)v63 + 256);
            for (i = *(_QWORD **)(*(_QWORD *)v63 + 264); v66 != i; ++v66)
            {
              while (1)
              {
                v68 = (_QWORD *)*v66;
                if (*v66)
                  break;
LABEL_85:
                if (++v66 == i)
                  goto LABEL_81;
              }
              v68[11] = v61;
              if ((v65 & 1) != 0)
              {
                v65 = v68[2];
                if (v65)
                  LOBYTE(v65) = v65 != v68[3];
                goto LABEL_85;
              }
              LOBYTE(v65) = 0;
            }
LABEL_81:
            v63 += 8;
          }
          v45 = v65 & 1;
        }
        else
        {
          v45 = 1;
        }
        v42 &= v45;
        v24 = a2[3];
        v43 = ++v44;
      }
      while (v44 < (unint64_t)((a2[4] - v24) >> 3));
    }
    return v42 & (v72 ^ 1u);
  }
  else
  {
    *a5 = 0;
    return 1;
  }
}

void altitude::GlobeTileRenderManager::update(altitude::GlobeTileRenderManager *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  float v5;
  int v6;
  int v7;
  float v8;
  float v9;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  float v14;
  float v15;
  BOOL v16;
  float v17;
  float v18;
  uint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  altitude::Tile **v27;
  float v28;
  altitude::Tile *v29;
  char *TileView;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  int32x4_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  char v52;
  altitude::View *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t *v58;
  altitude::View *v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t i;
  int v65;
  float v66;
  uint64_t v67;
  char *v68;
  char isCulled;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unint64_t v73;
  char *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  altitude::Tile *v78;
  char *v79;
  char v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  altitude::Tile **v87;
  unint64_t v88;
  uint64_t v89;
  int32x4_t *v90;
  int32x4_t *v91;
  uint64_t v92;
  altitude::Tile *v93;
  unsigned int v94;
  float v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  void **v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int32x4_t v103;
  _QWORD *v104;
  unint64_t v105;
  int32x4_t *v106;
  BOOL v107;
  double v108;
  uint64_t *v109;
  altitude::View *v110;
  _QWORD *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t *v114;
  char **v115;
  _BOOL4 v116;
  char *v117;
  char *v118;
  uint64_t *v119;
  uint64_t **v120;
  uint64_t **v121;
  unint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t *v125;
  char *v126;
  char *v127;
  char *v128;
  float v129;
  char *v130;
  unint64_t v131;
  _QWORD *v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  _BYTE *v137;
  char ***v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  int32x4_t *v142;
  int32x4_t *v143;
  uint64_t v144;
  char **v145;
  double v146;
  const altitude::View *v147;
  BOOL v148;
  uint64_t v149;
  uint64_t v150;
  BOOL v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  float v155;
  float v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  _QWORD *v162;
  _QWORD *v163;
  _BYTE *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  _BYTE *v170;
  unint64_t v171;
  char *v172;
  _QWORD *v173;
  char *v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  _BYTE *v179;
  _QWORD *v180;
  unint64_t v181;
  uint64_t v182;
  _OWORD *v183;
  __int128 *v184;
  uint64_t v185;
  __int128 v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t *j;
  _QWORD *v194;
  unint64_t v195;
  uint64_t v196;
  _OWORD *v197;
  char *v198;
  uint64_t v199;
  __int128 v200;
  uint64_t v201;
  _BYTE *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t *v210;
  const altitude::View *v211;
  _QWORD *v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  const altitude::View *v225;
  _QWORD *v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  int v231;
  float v232;
  char *v233;
  uint64_t *v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  const altitude::View *v239;
  _QWORD *v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t *v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  unint64_t v247;
  int *v248;
  int v249;
  int v250;
  int v251;
  uint64_t v252;
  unint64_t v253;
  _DWORD *v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  uint64_t v259;
  unsigned int v260;
  unsigned int v261;
  uint64_t v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  uint64_t v266;
  _DWORD *v267;
  unsigned int v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  uint64_t v272;
  unsigned int v273;
  unsigned int v274;
  _QWORD *v275;
  uint64_t v276;
  unint64_t v277;
  int v278;
  unsigned int v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  uint64_t v285;
  _DWORD *v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  uint64_t v291;
  unsigned int v292;
  unsigned int v293;
  uint64_t v294;
  _QWORD *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t *v298;
  const altitude::View *v299;
  _QWORD *v300;
  unint64_t v301;
  unint64_t v302;
  uint64_t *v303;
  unint64_t v304;
  unsigned int v305;
  unsigned int v306;
  int v307;
  int v308;
  int v309;
  unsigned int v310;
  int v311;
  uint64_t v312;
  _DWORD *v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  uint64_t v318;
  unsigned int v319;
  unsigned int v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t *v325;
  const altitude::View *v326;
  _QWORD *v327;
  unint64_t v328;
  unint64_t v329;
  uint64_t *v330;
  unint64_t v331;
  unsigned int v332;
  unsigned int v333;
  int v334;
  int v335;
  int v336;
  unsigned int v337;
  int v338;
  uint64_t v339;
  _DWORD *v340;
  unsigned int v341;
  unsigned int v342;
  unsigned int v343;
  unsigned int v344;
  uint64_t v345;
  unsigned int v346;
  unsigned int v347;
  uint64_t v348;
  _QWORD *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t *v352;
  const altitude::View *v353;
  _QWORD *v354;
  unint64_t v355;
  unint64_t v356;
  uint64_t *v357;
  uint64_t *v358;
  const altitude::View *v359;
  _QWORD *v360;
  unint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t *v369;
  uint64_t v370;
  _QWORD *v371;
  uint64_t v372;
  uint64_t *v373;
  const altitude::View *v374;
  _QWORD *v375;
  unint64_t v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t *v379;
  uint64_t *v380;
  uint64_t v381;
  _QWORD *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t *v385;
  const altitude::View *v386;
  uint64_t v387;
  unint64_t v388;
  unint64_t v389;
  uint64_t *v390;
  char *v391;
  char v392;
  uint64_t *v393;
  uint64_t *v394;
  uint64_t v395;
  double *v396;
  long double v397;
  long double v398;
  long double v399;
  double v400;
  double v401;
  double v402;
  __double2 v403;
  long double v404;
  long double v405;
  long double v406;
  char v407;
  double v408;
  unsigned int v409;
  _BYTE *v410;
  char *v411;
  char *v412;
  char *v413;
  uint64_t v414;
  uint64_t v415;
  unint64_t v416;
  unint64_t v417;
  char *v418;
  char *v419;
  char *v420;
  char *v421;
  unint64_t v422;
  char *v423;
  unsigned int v424;
  altitude::View *v425;
  char *v426;
  char *v427;
  uint64_t v428;
  unint64_t v429;
  char *v430;
  unint64_t v431;
  unint64_t v432;
  unint64_t v433;
  char *v434;
  char *v435;
  unint64_t v436;
  char *v437;
  char *v438;
  uint64_t v439;
  char *v440;
  __int128 *v441;
  uint64_t v442;
  __int128 v443;
  uint64_t v444;
  char *v445;
  uint64_t v446;
  unint64_t v447;
  _BYTE *v448;
  char *v449;
  unint64_t v450;
  char *v451;
  uint64_t v452;
  _DWORD *v453;
  _QWORD *v454;
  unint64_t v455;
  char *v456;
  uint64_t *v457;
  uint64_t v458;
  int v459;
  int v460;
  unint64_t v461;
  int v462;
  int v463;
  int v464;
  _DWORD *v465;
  unsigned int v466;
  unsigned int v467;
  unsigned int v468;
  unsigned int v469;
  char *v470;
  unsigned int v471;
  unsigned int v472;
  uint64_t v473;
  int v474;
  unsigned int v475;
  int v476;
  int v477;
  unsigned int v478;
  unsigned int v479;
  unint64_t v480;
  _DWORD *v481;
  _DWORD *v482;
  unsigned int *v483;
  unsigned int *v484;
  _DWORD *v485;
  unsigned int *v486;
  unsigned int *v487;
  int v488;
  int v489;
  unsigned int v490;
  unsigned int v491;
  unsigned int v492;
  unsigned int v493;
  uint64_t v494;
  _QWORD *v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t *v498;
  uint64_t v499;
  unint64_t v500;
  unint64_t v501;
  uint64_t *v502;
  char v503;
  int v504;
  int v505;
  unsigned int v506;
  unsigned int v507;
  unsigned int v508;
  unsigned int v509;
  int v510;
  int v511;
  unint64_t v512;
  char *v513;
  _DWORD *v514;
  unsigned int *v515;
  unsigned int *v516;
  _DWORD *v517;
  unsigned int *v518;
  unsigned int *v519;
  unsigned int v520;
  unsigned int v521;
  unsigned int v522;
  unsigned int v523;
  unsigned int v524;
  unsigned int v525;
  uint64_t v526;
  _QWORD *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t *v530;
  uint64_t v531;
  unint64_t v532;
  unint64_t v533;
  uint64_t *v534;
  int v535;
  int v536;
  unsigned int v537;
  char v538;
  unsigned int v539;
  unsigned int v540;
  unsigned int v541;
  int v542;
  int v543;
  unint64_t v544;
  char *v545;
  _DWORD *v546;
  unsigned int *v547;
  unsigned int *v548;
  _DWORD *v549;
  unsigned int *v550;
  unsigned int *v551;
  unsigned int v552;
  unsigned int v553;
  unsigned int v554;
  unsigned int v555;
  unsigned int v556;
  unsigned int v557;
  uint64_t v558;
  _QWORD *v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t *v562;
  uint64_t v563;
  unint64_t v564;
  unint64_t v565;
  uint64_t *v566;
  unsigned int v567;
  unsigned int v568;
  unsigned int v569;
  _DWORD *v571;
  unsigned int v572;
  unsigned int v573;
  unsigned int v574;
  unsigned int v575;
  char *v576;
  unsigned int v577;
  unsigned int v578;
  _QWORD *v579;
  uint64_t v580;
  uint64_t *v581;
  altitude::View *v582;
  uint64_t v583;
  unint64_t v584;
  unint64_t v585;
  uint64_t v586;
  _OWORD *v587;
  __int128 *v588;
  uint64_t v589;
  __int128 v590;
  uint64_t *v591;
  char *v592;
  uint64_t *v593;
  char *v594;
  uint64_t v595;
  BOOL v596;
  BOOL v597;
  char v598;
  int v599;
  int v600;
  int v601;
  char *v602;
  char *v603;
  int v604;
  uint64_t *v605;
  unsigned int *v606;
  unsigned int *v607;
  unsigned int *v608;
  uint64_t *v609;
  _DWORD *v610;
  unsigned int v611;
  unsigned int v612[2];
  unsigned int v613[2];
  unsigned int v614[2];
  int v615;
  unsigned int *v616;
  _DWORD *v617;
  _DWORD *v618;
  int v619;
  _DWORD *v620;
  int v621;
  int v622;
  int v623;
  int v624;
  int v625;
  int v626;
  uint64_t v627;
  int v628;
  _QWORD *v629;
  _QWORD *v630;
  unsigned int v631;
  unsigned int v632;
  _DWORD *v633;
  uint64_t v634;
  int v635;
  _QWORD *v636;
  _QWORD *v637;
  char *v638;
  unint64_t v639;
  int v640;
  _QWORD *v641;
  int v642;
  float v643;
  _QWORD *v644;
  int v645;
  int v646;
  altitude::View *v647;
  void *v648[2];
  void *v649[2];
  __int128 v650;
  void *__p[2];
  uint64_t v652;
  uint64_t v653[2];

  if (!*((_BYTE *)this + 520))
    return;
  v2 = *((_QWORD *)this + 24);
  if (*((_QWORD *)this + 25) != v2)
    *((_QWORD *)this + 25) = v2;
  *(_WORD *)((char *)this + 521) = 0;
  v3 = (uint64_t *)*((_QWORD *)this + 4);
  v4 = *v3;
  v611 = *((_DWORD *)v3 + 22);
  v5 = *((float *)v3 + 13);
  v6 = *((_DWORD *)v3 + 14);
  v7 = *((_DWORD *)v3 + 15);
  v647 = (altitude::View *)(*(uint64_t (**)(_QWORD, altitude::GlobeTileRenderManager *, uint64_t))(**((_QWORD **)this + 9) + 24))(*((_QWORD *)this + 9), this, 0xFFFFFFFFLL);
  v633 = (_DWORD *)(*(uint64_t (**)(_QWORD, altitude::GlobeTileRenderManager *))(**((_QWORD **)this + 8) + 24))(*((_QWORD *)this + 8), this);
  v8 = *(double *)(*(_QWORD *)(v4 + 72) + 32);
  v9 = 8.0;
  if (v8 <= 8.0)
  {
    v12 = 1;
  }
  else
  {
    v10 = 0;
    v11 = 8;
    do
    {
      v12 = v11;
      v11 *= 8;
      v9 = (float)v11;
      v13 = (float)v11 >= v8 || v10++ >= 0xE;
    }
    while (!v13);
  }
  v14 = (float)v12;
  v15 = (float)(fminf(fmaxf((float)v12, v8), v9) - (float)v12) / (float)(v9 - (float)v12);
  v16 = (float)v12 <= v8;
  v17 = 0.0;
  if (v16)
    v17 = 1.0;
  if (v9 != v14)
    v17 = v15;
  v18 = (float)(v17 * v17) * (float)((float)(v17 * -2.0) + 3.0);
  v19 = *(_QWORD *)(*(_QWORD *)(v3[1] + 40) + 8);
  v20 = *(_QWORD **)(v19 + 168);
  v21 = *(std::__shared_weak_count **)(v19 + 176);
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
  }
  v24 = v20[1];
  *(float *)(v20[9] + 64) = v18;
  if (v20[8] > v24)
    v24 = v20[8];
  v20[7] = 0;
  v20[8] = v24;
  if (v21)
  {
    v25 = (unint64_t *)&v21->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v27 = *(altitude::Tile ***)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 56))(*((_QWORD *)this + 7));
  if (v27 != *(altitude::Tile ***)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 56))(*((_QWORD *)this + 7))
                                  + 8))
  {
    v28 = 1.0 / v14;
    while (1)
    {
      v29 = *v27;
      TileView = altitude::Tile::getOrCreateTileView(*v27, v647);
      v31 = (uint64_t *)*((_QWORD *)v29 + 41);
      v33 = v31 + 29;
      v32 = v31[29];
      if (!v32)
        goto LABEL_37;
      if (v32 == 1)
        break;
      v35 = (uint64_t *)v31[31];
      while (1)
      {
        v34 = *v35;
        if (*(altitude::View **)(*v35 + 8) == v647)
          break;
        ++v35;
        if (!--v32)
          goto LABEL_37;
      }
LABEL_41:
      v638 = TileView;
      if (((*(uint64_t (**)(uint64_t *))(*v31 + 48))(v31) & 1) != 0)
        v642 = 1;
      else
        v642 = (*(uint64_t (**)(uint64_t *))(*v31 + 56))(v31);
      v41 = *((_QWORD *)this + 14);
      v42 = (uint64_t *)*((_QWORD *)v29 + 41);
      v44 = v42 + 29;
      v43 = v42[29];
      if (!v43)
      {
LABEL_51:
        v47 = (_QWORD *)operator new();
        *v47 = &off_1E42C6498;
        v47[1] = v647;
        v47[2] = v42;
        v47[3] = 0;
        *((_WORD *)v47 + 16) = 257;
        v648[0] = v47;
        karo::SizedArray<altitude::GlobeTileComponentViewData *,1>::push_back(v44, (uint64_t *)v648);
        v48 = v42[29];
        v49 = v48 - 1;
        if (v48 < 2)
          v50 = &v42[v49 + 30];
        else
          v50 = (uint64_t *)(v42[31] + 8 * v49);
        v45 = *v50;
        if (!*v50)
          goto LABEL_56;
        goto LABEL_55;
      }
      if (v43 == 1)
      {
        v45 = v42[30];
        if (*(altitude::View **)(v45 + 8) != v647)
          goto LABEL_51;
      }
      else
      {
        v46 = (uint64_t *)v42[31];
        while (1)
        {
          v45 = *v46;
          if (*(altitude::View **)(*v46 + 8) == v647)
            break;
          ++v46;
          if (!--v43)
            goto LABEL_51;
        }
      }
LABEL_55:
      v51 = *(_QWORD *)(v45 + 24);
      if (v51)
      {
        while (1)
        {
          v57 = *(_DWORD *)(v51 + 8) - 2;
          if (v57 < 5 && ((0x17u >> v57) & 1) != 0)
            break;
          v51 = *(_QWORD *)(v51 + 32);
          if (!v51)
            goto LABEL_56;
        }
LABEL_89:
        if ((v642 & 1) == 0)
          goto LABEL_90;
        goto LABEL_122;
      }
LABEL_56:
      v52 = (*(uint64_t (**)(uint64_t *))(*v42 + 48))(v42);
      v53 = v647;
      if ((v52 & 1) == 0)
      {
        v54 = (*(uint64_t (**)(uint64_t *))(*v42 + 56))(v42);
        v53 = v647;
        if (!v54)
          goto LABEL_89;
      }
      v55 = *v44;
      if (!*v44)
      {
LABEL_69:
        v59 = v53;
        v60 = (_QWORD *)operator new();
        *v60 = &off_1E42C6498;
        v60[1] = v59;
        v60[2] = v42;
        v60[3] = 0;
        *((_WORD *)v60 + 16) = 257;
        v648[0] = v60;
        karo::SizedArray<altitude::GlobeTileComponentViewData *,1>::push_back(v44, (uint64_t *)v648);
        v61 = v42[29];
        v62 = v61 - 1;
        if (v61 < 2)
          v63 = &v42[v62 + 30];
        else
          v63 = (uint64_t *)(v42[31] + 8 * v62);
        v56 = *v63;
        v53 = v647;
        if (!*v63)
          goto LABEL_74;
        goto LABEL_73;
      }
      if (v55 == 1)
      {
        v56 = v42[30];
        if (*(altitude::View **)(v56 + 8) != v53)
          goto LABEL_69;
      }
      else
      {
        v58 = (uint64_t *)v42[31];
        while (1)
        {
          v56 = *v58;
          if (*(altitude::View **)(*v58 + 8) == v53)
            break;
          ++v58;
          if (!--v55)
            goto LABEL_69;
        }
      }
LABEL_73:
      for (i = *(_QWORD *)(v56 + 24); i; i = *(_QWORD *)(i + 32))
      {
        v72 = *(_DWORD *)(i + 8) - 2;
        if (v72 < 5 && ((0x17u >> v72) & 1) != 0)
          goto LABEL_89;
      }
LABEL_74:
      LODWORD(v648[0]) = 1065353216;
      v65 = *(_DWORD *)(v41 + 208);
      v66 = *(float *)(v41 + 200);
      v67 = *((_QWORD *)v29 + 41);
      if (v53 && v29)
      {
        v68 = altitude::Tile::getOrCreateTileView(v29, v647);
        isCulled = altitude::TileView::isCulled((altitude::TileView *)v68, v611);
        v53 = v647;
        if ((isCulled & 1) != 0)
          goto LABEL_79;
        altitude::Tile::computeTileResolution((char *)v29, (uint64_t)v647, v633, v65, (float *)v648, v611, v66);
        v53 = v647;
      }
      if (!*(_QWORD *)(v67 + 120) && *(_QWORD *)(v67 + 208))
      {
        v76 = *(unsigned int *)(v67 + 224);
        v77 = v76;
        v78 = v29;
        if ((_DWORD)v76)
        {
          while (1)
          {
            v78 = (altitude::Tile *)*((_QWORD *)v78 + 37);
            if (!v78)
              break;
            if (!--v77)
              goto LABEL_97;
          }
          v108 = *(float *)v648;
          *(double *)v40.i64 = exp2(-(double)v76);
          v53 = v647;
          *(float *)v40.i32 = *(double *)v40.i64 * v108;
          LODWORD(v648[0]) = v40.i32[0];
        }
        else
        {
LABEL_97:
          if (v53)
          {
            v79 = altitude::Tile::getOrCreateTileView(v78, v647);
            v80 = altitude::TileView::isCulled((altitude::TileView *)v79, v611);
            v53 = v647;
            if ((v80 & 1) == 0)
            {
              altitude::Tile::computeTileResolution((char *)v78, (uint64_t)v647, v633, v65, (float *)v648, v611, v66);
              v53 = v647;
            }
          }
        }
      }
LABEL_79:
      if (*(float *)v648 >= v5
        || *((_QWORD *)v29 + 38) == *((_QWORD *)v29 + 39)
        || *((_DWORD *)v29 + 98) >= 0x7FFFFFFFu)
      {
        goto LABEL_89;
      }
      v70 = *v33;
      if (*v33)
      {
        if (v70 != 1)
        {
          v109 = (uint64_t *)v31[31];
          while (1)
          {
            v71 = *v109;
            if (*(altitude::View **)(*v109 + 8) == v53)
              goto LABEL_150;
            ++v109;
            if (!--v70)
              goto LABEL_146;
          }
        }
        v71 = v31[30];
        if (*(altitude::View **)(v71 + 8) == v53)
          goto LABEL_150;
      }
LABEL_146:
      v110 = v53;
      v111 = (_QWORD *)operator new();
      *v111 = &off_1E42C6498;
      v111[1] = v110;
      v111[2] = v31;
      v111[3] = 0;
      *((_WORD *)v111 + 16) = 257;
      v648[0] = v111;
      karo::SizedArray<altitude::GlobeTileComponentViewData *,1>::push_back(v33, (uint64_t *)v648);
      v112 = v31[29];
      v113 = v112 - 1;
      if (v112 < 2)
        v114 = &v31[v113 + 30];
      else
        v114 = (uint64_t *)(v31[31] + 8 * v113);
      v71 = *v114;
      v53 = v647;
      if (!*v114)
      {
LABEL_153:
        if (v642)
        {
          if (v638[40])
          {
            v116 = *((_DWORD *)v638 + 11) == v611;
            v115 = (char **)*((_QWORD *)this + 37);
            if (!v115)
            {
LABEL_156:
              v117 = (char *)malloc_type_malloc(*((unsigned int *)this + 73), 0xF0B72BE0uLL);
              v53 = v647;
              v118 = v117;
              v119 = (uint64_t *)*((_QWORD *)this + 34);
              v120 = (uint64_t **)((char *)this + 272);
LABEL_158:
              v121 = v120;
              if (v119)
              {
                do
                {
                  v120 = (uint64_t **)v119;
                  v122 = v119[4];
                  if ((unint64_t)v117 < v122)
                  {
                    v119 = *v120;
                    goto LABEL_158;
                  }
                  if (v122 >= (unint64_t)v117)
                    goto LABEL_171;
                  v119 = v120[1];
                }
                while (v119);
                v121 = v120 + 1;
              }
              v123 = (uint64_t *)operator new(0x28uLL);
              v123[4] = (uint64_t)v118;
              *v123 = 0;
              v123[1] = 0;
              v123[2] = (uint64_t)v120;
              *v121 = v123;
              v124 = **((_QWORD **)this + 33);
              if (v124)
              {
                *((_QWORD *)this + 33) = v124;
                v125 = *v121;
              }
              else
              {
                v125 = v123;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 34), v125);
              ++*((_QWORD *)this + 35);
              v53 = v647;
LABEL_171:
              v127 = &v118[280 * *((_DWORD *)this + 72) - 280];
              v128 = (char *)*((_QWORD *)this + 37);
              do
              {
                v126 = v128;
                v128 = v127;
                *(_QWORD *)v127 = v126;
                v127 -= 280;
              }
              while (v127 >= v118);
              v115 = (char **)(v127 + 280);
              goto LABEL_174;
            }
          }
          else
          {
            v116 = 0;
            v115 = (char **)*((_QWORD *)this + 37);
            if (!v115)
              goto LABEL_156;
          }
        }
        else
        {
          v116 = 1;
          v115 = (char **)*((_QWORD *)this + 37);
          if (!v115)
            goto LABEL_156;
        }
        v126 = *v115;
LABEL_174:
        *((_QWORD *)this + 37) = v126;
        *((_DWORD *)v115 + 2) = 1;
        v115[2] = (char *)v31;
        v115[3] = (char *)v53;
        v115[4] = 0;
        v115[5] = (char *)this;
        *((_BYTE *)v115 + 48) = 0;
        *v115 = (char *)&off_1E42C42F8;
        *((_DWORD *)v115 + 13) = 0;
        v129 = 0.0;
        if (!v116)
          v129 = 1.0;
        *((float *)v115 + 14) = v129;
        *((_DWORD *)v115 + 15) = v7;
        v115[8] = 0;
        v115[9] = 0;
        *((_WORD *)v115 + 136) = 0;
        *((_BYTE *)v115 + 274) = 1;
        v130 = (char *)*((_QWORD *)this + 28);
        *(_QWORD *)(v34 + 24) = v115;
        v131 = *((_QWORD *)this + 29);
        if ((unint64_t)v130 >= v131)
        {
          v133 = (char *)*((_QWORD *)this + 27);
          v134 = (v130 - v133) >> 3;
          v135 = v134 + 1;
          if ((unint64_t)(v134 + 1) >> 61)
            goto LABEL_726;
          v136 = v131 - (_QWORD)v133;
          if (v136 >> 2 > v135)
            v135 = v136 >> 2;
          if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF8)
            v135 = 0x1FFFFFFFFFFFFFFFLL;
          v639 = v135;
          if (v135)
          {
            if (v135 >> 61)
              goto LABEL_727;
            v137 = operator new(8 * v135);
          }
          else
          {
            v137 = 0;
          }
          v138 = (char ***)&v137[8 * v134];
          *v138 = v115;
          v132 = v138 + 1;
          if (v130 == v133)
          {
            v133 = v130;
            v140 = v639;
          }
          else
          {
            v139 = v130 - 8 - v133;
            v140 = v639;
            if (v139 < 0x58)
              goto LABEL_730;
            if ((unint64_t)(v133 - v137) < 0x20)
              goto LABEL_730;
            v141 = (v139 >> 3) + 1;
            v142 = (int32x4_t *)&v137[8 * v134 - 16];
            v143 = (int32x4_t *)(v130 - 16);
            v144 = v141 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v40 = *v143;
              v142[-1] = v143[-1];
              *v142 = v40;
              v142 -= 2;
              v143 -= 2;
              v144 -= 4;
            }
            while (v144);
            v138 -= v141 & 0x3FFFFFFFFFFFFFFCLL;
            v130 -= 8 * (v141 & 0x3FFFFFFFFFFFFFFCLL);
            if (v141 != (v141 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_730:
              do
              {
                v145 = *((_QWORD *)v130 - 1);
                v130 -= 8;
                *--v138 = (char **)v145;
              }
              while (v130 != v133);
              v133 = (char *)*((_QWORD *)this + 27);
            }
          }
          *((_QWORD *)this + 27) = v138;
          *((_QWORD *)this + 28) = v132;
          *((_QWORD *)this + 29) = &v137[8 * v140];
          if (v133)
            operator delete(v133);
        }
        else
        {
          *(_QWORD *)v130 = v115;
          v132 = v130 + 8;
        }
        *((_QWORD *)this + 28) = v132;
        goto LABEL_199;
      }
LABEL_150:
      v115 = *(char ***)(v71 + 24);
      if (!v115)
        goto LABEL_153;
      while (*((_DWORD *)v115 + 2) != 1)
      {
        v115 = (char **)v115[4];
        if (!v115)
          goto LABEL_153;
      }
LABEL_199:
      *((_DWORD *)v115 + 13) = v6;
      if ((v642 & 1) == 0)
      {
LABEL_90:
        if (!*((_DWORD *)v29 + 101))
        {
          v74 = (char *)*((_QWORD *)this + 25);
          v73 = *((_QWORD *)this + 26);
          if ((unint64_t)v74 >= v73)
          {
            v81 = (char *)*((_QWORD *)this + 24);
            v82 = (v74 - v81) >> 3;
            v83 = v82 + 1;
            if ((unint64_t)(v82 + 1) >> 61)
              goto LABEL_726;
            v84 = v73 - (_QWORD)v81;
            if (v84 >> 2 > v83)
              v83 = v84 >> 2;
            if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
              v85 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v85 = v83;
            if (v85)
            {
              if (v85 >> 61)
                goto LABEL_727;
              v86 = operator new(8 * v85);
            }
            else
            {
              v86 = 0;
            }
            v87 = (altitude::Tile **)&v86[8 * v82];
            *v87 = v29;
            v75 = v87 + 1;
            if (v74 == v81)
            {
              v81 = v74;
            }
            else
            {
              v88 = v74 - 8 - v81;
              if (v88 < 0x58)
                goto LABEL_731;
              if ((unint64_t)(v81 - v86) < 0x20)
                goto LABEL_731;
              v89 = (v88 >> 3) + 1;
              v90 = (int32x4_t *)&v86[8 * v82 - 16];
              v91 = (int32x4_t *)(v74 - 16);
              v92 = v89 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v40 = *v91;
                v90[-1] = v91[-1];
                *v90 = v40;
                v90 -= 2;
                v91 -= 2;
                v92 -= 4;
              }
              while (v92);
              v87 -= v89 & 0x3FFFFFFFFFFFFFFCLL;
              v74 -= 8 * (v89 & 0x3FFFFFFFFFFFFFFCLL);
              if (v89 != (v89 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_731:
                do
                {
                  v93 = (altitude::Tile *)*((_QWORD *)v74 - 1);
                  v74 -= 8;
                  *--v87 = v93;
                }
                while (v74 != v81);
                v81 = (char *)*((_QWORD *)this + 24);
              }
            }
            *((_QWORD *)this + 24) = v87;
            *((_QWORD *)this + 25) = v75;
            *((_QWORD *)this + 26) = &v86[8 * v85];
            if (v81)
              operator delete(v81);
          }
          else
          {
            *(_QWORD *)v74 = v29;
            v75 = v74 + 8;
          }
          *((_QWORD *)this + 25) = v75;
        }
      }
LABEL_122:
      if (v31[17])
      {
        if (25 - *((_DWORD *)v29 + 98) < 1)
          v94 = 1;
        else
          v94 = 1 << (25 - *((_BYTE *)v29 + 392));
        v95 = (float)((float)v94 * 4.0) * v28;
        v96 = v95 > 16384.0;
        v97 = *((_QWORD *)v29 + 41);
        if (!v97)
        {
          v643 = v95;
          v98 = operator new();
          *(_DWORD *)(v98 + 8) = 0;
          *(_QWORD *)(v98 + 40) = 0;
          *(_QWORD *)(v98 + 32) = 0;
          *(_QWORD *)(v98 + 16) = 0;
          *(_QWORD *)(v98 + 24) = v98 + 32;
          *(_OWORD *)(v98 + 48) = 0u;
          *(_OWORD *)(v98 + 64) = 0u;
          *(_QWORD *)v98 = &off_1E42C5580;
          *(_OWORD *)(v98 + 80) = 0u;
          v99 = (void **)(v98 + 80);
          *(_QWORD *)(v98 + 208) = 0;
          *(_QWORD *)(v98 + 216) = 0;
          *(_OWORD *)(v98 + 96) = 0u;
          *(_OWORD *)(v98 + 112) = 0u;
          *(_OWORD *)(v98 + 128) = 0u;
          *(_OWORD *)(v98 + 144) = 0u;
          *(_OWORD *)(v98 + 160) = 0u;
          *(_OWORD *)(v98 + 176) = 0u;
          *(_OWORD *)(v98 + 185) = 0u;
          *(_DWORD *)(v98 + 224) = -1;
          *(_QWORD *)(v98 + 232) = 0;
          *(_OWORD *)(v98 + 248) = 0u;
          *(_OWORD *)(v98 + 264) = 0u;
          *(_DWORD *)(v98 + 279) = 0;
          *(_QWORD *)(v98 + 288) = 0x3FF0000000000000;
          *(_DWORD *)(v98 + 296) = 0;
          *(_WORD *)(v98 + 300) = 0;
          altitude::Tile::createTileName(v648, (unsigned int *)v29 + 98, (uint64_t *)(*((_QWORD *)v29 + 36) + 40), (uint64_t *)(*((_QWORD *)v29 + 36) + 136));
          if (*(char *)(v98 + 103) < 0)
            operator delete(*v99);
          *(_OWORD *)v99 = *(_OWORD *)v648;
          *(void **)(v98 + 96) = v649[0];
          *((_QWORD *)v29 + 41) = v98;
          (*(void (**)(uint64_t, altitude::Tile *))(*(_QWORD *)v98 + 16))(v98, v29);
          v97 = *((_QWORD *)v29 + 41);
          v95 = v643;
        }
        v100 = *(_QWORD *)(v97 + 136);
        v101 = *(_QWORD *)(v100 + 48);
        v102 = *(_QWORD *)(v100 + 56);
        if (v101 != v102)
        {
          *(int8x8_t *)v40.i8 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v96), 0x1FuLL)), (int8x8_t)0x3D00000000000000, (int8x8_t)LODWORD(v95));
          v103 = vzip1q_s32(v40, v40);
          do
          {
            v104 = **(_QWORD ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v101 + 184) + 32) + 64);
            v105 = v104[1];
            if (v105)
            {
              v106 = (int32x4_t *)v104[9];
              v106[4] = v103;
              if (v106)
                v107 = v105 == 0;
              else
                v107 = 1;
              if (!v107)
              {
                if (v104[8] > v105)
                  v105 = v104[8];
                v104[7] = 0;
                v104[8] = v105;
              }
            }
            else
            {
              MEMORY[0x40] = v103;
            }
            v101 += 8;
          }
          while (v101 != v102);
        }
      }
      if (++v27 == *(altitude::Tile ***)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 56))(*((_QWORD *)this + 7))
                                        + 8))
        goto LABEL_201;
    }
    v34 = v31[30];
    if (*(altitude::View **)(v34 + 8) == v647)
      goto LABEL_41;
LABEL_37:
    v36 = (_QWORD *)operator new();
    *v36 = &off_1E42C6498;
    v36[1] = v647;
    v36[2] = v31;
    v36[3] = 0;
    *((_WORD *)v36 + 16) = 257;
    v648[0] = v36;
    karo::SizedArray<altitude::GlobeTileComponentViewData *,1>::push_back(v33, (uint64_t *)v648);
    v37 = v31[29];
    v38 = v37 - 1;
    if (v37 < 2)
      v39 = &v31[v38 + 30];
    else
      v39 = (uint64_t *)(v31[31] + 8 * v38);
    v34 = *v39;
    goto LABEL_41;
  }
LABEL_201:
  v146 = *(double *)(*((_QWORD *)this + 4) + 96);
  v147 = v647;
  if (*((_BYTE *)this + 522))
    v148 = 1;
  else
    v148 = *((_QWORD *)this + 27) != *((_QWORD *)this + 28);
  *((_BYTE *)this + 522) = v148;
  v149 = *((_QWORD *)this + 27);
  v150 = *((_QWORD *)this + 28);
  if (*((_BYTE *)this + 521))
    v151 = 1;
  else
    v151 = v149 != v150;
  *((_BYTE *)this + 521) = v151;
  v152 = (v150 - v149) >> 3;
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
  {
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_40952);
    v147 = v647;
  }
  atomic_store(v152, (unint64_t *)(*(_QWORD *)(ggl::Performance::Counters::instance(void)::counters + 32) + 192));
  v153 = *((_QWORD *)this + 27);
  if (*((_QWORD *)this + 28) != v153)
  {
    v154 = 0;
    v155 = v146;
    v156 = fminf(v155, 0.066667);
    v644 = (_QWORD *)((char *)this + 216);
    do
    {
      v157 = *(_QWORD *)(v153 + 8 * v154);
      (*(void (**)(uint64_t, float))(*(_QWORD *)v157 + 16))(v157, v156);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v157 + 40))(v157) & 1) != 0
        || (v158 = *(_QWORD *)(*(_QWORD *)(v157 + 16) + 16), *(_DWORD *)(v158 + 404)))
      {
        if (*(_BYTE *)(v157 + 48))
          goto LABEL_214;
      }
      else
      {
        v172 = (char *)*((_QWORD *)this + 25);
        v171 = *((_QWORD *)this + 26);
        if ((unint64_t)v172 >= v171)
        {
          v174 = (char *)*((_QWORD *)this + 24);
          v175 = (v172 - v174) >> 3;
          v176 = v175 + 1;
          if ((unint64_t)(v175 + 1) >> 61)
            goto LABEL_726;
          v177 = v171 - (_QWORD)v174;
          if (v177 >> 2 > v176)
            v176 = v177 >> 2;
          if ((unint64_t)v177 >= 0x7FFFFFFFFFFFFFF8)
            v178 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v178 = v176;
          if (v178)
          {
            if (v178 >> 61)
              goto LABEL_727;
            v179 = operator new(8 * v178);
          }
          else
          {
            v179 = 0;
          }
          v194 = &v179[8 * v175];
          *v194 = v158;
          v173 = v194 + 1;
          if (v172 == v174)
          {
            v174 = v172;
          }
          else
          {
            v195 = v172 - 8 - v174;
            if (v195 < 0x58)
              goto LABEL_732;
            if ((unint64_t)(v174 - v179) < 0x20)
              goto LABEL_732;
            v196 = (v195 >> 3) + 1;
            v197 = &v179[8 * v175 - 16];
            v198 = v172 - 16;
            v199 = v196 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v200 = *(_OWORD *)v198;
              *(v197 - 1) = *((_OWORD *)v198 - 1);
              *v197 = v200;
              v197 -= 2;
              v198 -= 32;
              v199 -= 4;
            }
            while (v199);
            v194 -= v196 & 0x3FFFFFFFFFFFFFFCLL;
            v172 -= 8 * (v196 & 0x3FFFFFFFFFFFFFFCLL);
            if (v196 != (v196 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_732:
              do
              {
                v201 = *((_QWORD *)v172 - 1);
                v172 -= 8;
                *--v194 = v201;
              }
              while (v172 != v174);
              v174 = (char *)*((_QWORD *)this + 24);
            }
          }
          *((_QWORD *)this + 24) = v194;
          *((_QWORD *)this + 25) = v173;
          *((_QWORD *)this + 26) = &v179[8 * v178];
          if (v174)
            operator delete(v174);
        }
        else
        {
          *(_QWORD *)v172 = v158;
          v173 = v172 + 8;
        }
        *((_QWORD *)this + 25) = v173;
        if (*(_BYTE *)(v157 + 48))
        {
LABEL_214:
          *(_QWORD *)(*((_QWORD *)this + 27) + 8 * v154) = *(_QWORD *)(*((_QWORD *)this + 28) - 8);
          v159 = *((_QWORD *)this + 28);
          if (v159 == *((_QWORD *)this + 27))
            std::vector<altitude::TextureMap *>::__append((uint64_t)v644, 0xFFFFFFFFFFFFFFFFLL);
          else
            *((_QWORD *)this + 28) = v159 - 8;
          v160 = *(_QWORD *)(v157 + 32);
          v147 = v647;
          if (!v160)
            goto LABEL_253;
          v162 = (_QWORD *)*((_QWORD *)this + 28);
          v161 = *((_QWORD *)this + 29);
          if ((unint64_t)v162 < v161)
          {
            *v162 = v160;
            v163 = v162 + 1;
            goto LABEL_252;
          }
          v164 = (_BYTE *)*v644;
          v165 = (uint64_t)v162 - *v644;
          v166 = v165 >> 3;
          v167 = (v165 >> 3) + 1;
          if (!(v167 >> 61))
          {
            v168 = v161 - (_QWORD)v164;
            if (v168 >> 2 > v167)
              v167 = v168 >> 2;
            if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFF8)
              v169 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v169 = v167;
            if (!v169)
            {
              v170 = 0;
              goto LABEL_241;
            }
            if (!(v169 >> 61))
            {
              v170 = operator new(8 * v169);
              v147 = v647;
LABEL_241:
              v180 = &v170[8 * v166];
              *v180 = v160;
              v163 = v180 + 1;
              if (v162 == (_QWORD *)v164)
              {
                v164 = v162;
              }
              else
              {
                v181 = (char *)(v162 - 1) - v164;
                if (v181 < 0x58)
                  goto LABEL_733;
                if ((unint64_t)((char *)v162 - &v170[v165]) < 0x20)
                  goto LABEL_733;
                v182 = (v181 >> 3) + 1;
                v183 = &v170[8 * v166 - 16];
                v184 = (__int128 *)(v162 - 2);
                v185 = v182 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v186 = *v184;
                  *(v183 - 1) = *(v184 - 1);
                  *v183 = v186;
                  v183 -= 2;
                  v184 -= 2;
                  v185 -= 4;
                }
                while (v185);
                v180 -= v182 & 0x3FFFFFFFFFFFFFFCLL;
                v162 -= v182 & 0x3FFFFFFFFFFFFFFCLL;
                if (v182 != (v182 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_733:
                  do
                  {
                    v187 = *--v162;
                    *--v180 = v187;
                  }
                  while (v162 != (_QWORD *)v164);
                  v164 = (_BYTE *)*v644;
                }
              }
              *((_QWORD *)this + 27) = v180;
              *((_QWORD *)this + 28) = v163;
              *((_QWORD *)this + 29) = &v170[8 * v169];
              if (v164)
              {
                operator delete(v164);
                v147 = v647;
              }
LABEL_252:
              *((_QWORD *)this + 28) = v163;
LABEL_253:
              v189 = *(_QWORD **)(v157 + 16);
              v188 = *(_QWORD *)(v157 + 24);
              v190 = v189[29] - 1;
              if (v189[29] == 1)
              {
                if (*(_QWORD *)(v189[30] + 8) == v188)
                  v191 = v189[30];
                else
                  v191 = 0;
              }
              else
              {
                for (j = (uint64_t *)v189[31]; ; ++j)
                {
                  v191 = *j;
                  if (*(_QWORD *)(*j + 8) == v188)
                    break;
                  --v190;
                }
              }
              *(_QWORD *)(v191 + 24) = *(_QWORD *)(v157 + 32);
              v192 = (char *)this + 456;
              switch(*(_DWORD *)(v157 + 8))
              {
                case 1:
                  v192 = (char *)this + 296;
                  goto LABEL_266;
                case 2:
                  v192 = (char *)this + 336;
                  goto LABEL_266;
                case 3:
                  goto LABEL_266;
                case 4:
                  v192 = (char *)this + 496;
                  goto LABEL_266;
                case 5:
                  v192 = (char *)this + 416;
                  goto LABEL_266;
                case 6:
                  v192 = (char *)this + 376;
LABEL_266:
                  (**(void (***)(uint64_t, const altitude::View *))v157)(v157, v147);
                  *(_QWORD *)v157 = *(_QWORD *)v192;
                  *(_QWORD *)v192 = v157;
                  goto LABEL_281;
                default:
                  goto LABEL_282;
              }
            }
LABEL_727:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
LABEL_726:
          abort();
        }
      }
      ++v154;
LABEL_281:
      v147 = v647;
LABEL_282:
      v153 = *((_QWORD *)this + 27);
    }
    while (v154 < (*((_QWORD *)this + 28) - v153) >> 3);
  }
  v202 = (_BYTE *)*((_QWORD *)this + 4);
  if (!v202[69] || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v202 + 704) + 64))
  {
    v203 = *((_QWORD *)this + 6);
    v204 = *(_QWORD *)(v203 + 40);
    v205 = *(_QWORD *)(v203 + 48);
    if (v204 != v205)
    {
      while (1)
      {
        v208 = *(_QWORD **)(*(_QWORD *)v204 + 328);
        v209 = v208[29];
        if (!v209)
          goto LABEL_297;
        if (v209 != 1)
        {
          v210 = (uint64_t *)v208[31];
          while (1)
          {
            v207 = *v210;
            if (*(const altitude::View **)(*v210 + 8) == v147)
              goto LABEL_289;
            ++v210;
            if (!--v209)
              goto LABEL_297;
          }
        }
        v207 = v208[30];
        if (*(const altitude::View **)(v207 + 8) != v147)
        {
LABEL_297:
          v211 = v147;
          v212 = (_QWORD *)operator new();
          *v212 = &off_1E42C6498;
          v212[1] = v211;
          v212[2] = v208;
          v212[3] = 0;
          *((_WORD *)v212 + 16) = 257;
          v648[0] = v212;
          karo::SizedArray<altitude::GlobeTileComponentViewData *,1>::push_back(v208 + 29, (uint64_t *)v648);
          v213 = v208[29];
          v214 = v213 - 1;
          if (v213 < 2)
            v206 = &v208[v214 + 30];
          else
            v206 = (uint64_t *)(v208[31] + 8 * v214);
          v207 = *v206;
          v147 = v647;
        }
LABEL_289:
        *(_BYTE *)(v207 + 32) = 0;
        v204 += 8;
        if (v204 == v205)
          goto LABEL_480;
      }
    }
    goto LABEL_480;
  }
  v215 = *((_QWORD *)this + 15);
  if (*((_QWORD *)this + 16) != v215)
    *((_QWORD *)this + 16) = v215;
  v216 = *((_QWORD *)this + 18);
  if (*((_QWORD *)this + 19) != v216)
    *((_QWORD *)this + 19) = v216;
  v217 = *((_QWORD *)this + 21);
  if (*((_QWORD *)this + 22) != v217)
    *((_QWORD *)this + 22) = v217;
  v218 = *((_QWORD *)this + 6);
  v219 = *(uint64_t **)(v218 + 40);
  if (v219 != *(uint64_t **)(v218 + 48))
  {
    while (1)
    {
      v220 = *v219;
      v221 = *(_QWORD **)(*v219 + 328);
      v222 = v221[29];
      if (!v222)
        goto LABEL_317;
      if (v222 == 1)
        break;
      v224 = (uint64_t *)v221[31];
      while (1)
      {
        v223 = *v224;
        if (*(const altitude::View **)(*v224 + 8) == v147)
          break;
        ++v224;
        if (!--v222)
          goto LABEL_317;
      }
LABEL_321:
      *(_BYTE *)(v223 + 32) = 0;
      if (!*(_BYTE *)(*(_QWORD *)(v220 + 288) + 164) || *(_DWORD *)(v220 + 404))
        goto LABEL_309;
      LODWORD(v648[0]) = 1065353216;
      if (v147 && v220)
      {
        v230 = *((_QWORD *)this + 14);
        v231 = *(_DWORD *)(v230 + 208);
        v232 = *(float *)(v230 + 200);
        v233 = altitude::Tile::getOrCreateTileView((altitude::Tile *)v220, v147);
        if ((altitude::TileView::isCulled((altitude::TileView *)v233, v611) & 1) != 0)
          goto LABEL_308;
        altitude::Tile::computeTileResolution((char *)v220, (uint64_t)v647, v633, v231, (float *)v648, v611, v232);
      }
      altitude::GlobeTileRenderManager::LevelTiles::add((uint64_t)this + 120, (unsigned int *)v220);
LABEL_308:
      v147 = v647;
LABEL_309:
      if (++v219 == *(uint64_t **)(*((_QWORD *)this + 6) + 48))
        goto LABEL_327;
    }
    v223 = v221[30];
    if (*(const altitude::View **)(v223 + 8) == v147)
      goto LABEL_321;
LABEL_317:
    v225 = v147;
    v226 = (_QWORD *)operator new();
    *v226 = &off_1E42C6498;
    v226[1] = v225;
    v226[2] = v221;
    v226[3] = 0;
    *((_WORD *)v226 + 16) = 257;
    v648[0] = v226;
    karo::SizedArray<altitude::GlobeTileComponentViewData *,1>::push_back(v221 + 29, (uint64_t *)v648);
    v227 = v221[29];
    v228 = v227 - 1;
    if (v227 < 2)
      v229 = &v221[v228 + 30];
    else
      v229 = (uint64_t *)(v221[31] + 8 * v228);
    v223 = *v229;
    v147 = v647;
    goto LABEL_321;
  }
LABEL_327:
  if ((altitude::GlobeTileRenderManager::LevelTiles::setup((altitude::GlobeTileRenderManager *)((char *)this + 120)) & 1) == 0)
  {
    v363 = *((_QWORD *)this + 15);
    if (*((_QWORD *)this + 16) != v363)
      *((_QWORD *)this + 16) = v363;
    v364 = *((_QWORD *)this + 18);
    v147 = v647;
    if (*((_QWORD *)this + 19) != v364)
      *((_QWORD *)this + 19) = v364;
    v365 = *((_QWORD *)this + 21);
    if (*((_QWORD *)this + 22) != v365)
      *((_QWORD *)this + 22) = v365;
    v366 = *((_QWORD *)this + 6);
    v367 = *(_QWORD *)(v366 + 40);
    v368 = *(_QWORD *)(v366 + 48);
    if (v367 == v368)
      goto LABEL_480;
    while (1)
    {
      v371 = *(_QWORD **)(*(_QWORD *)v367 + 328);
      v372 = v371[29];
      if (!v372)
        goto LABEL_478;
      if (v372 != 1)
      {
        v373 = (uint64_t *)v371[31];
        while (1)
        {
          v370 = *v373;
          if (*(const altitude::View **)(*v373 + 8) == v147)
            goto LABEL_470;
          ++v373;
          if (!--v372)
            goto LABEL_478;
        }
      }
      v370 = v371[30];
      if (*(const altitude::View **)(v370 + 8) != v147)
      {
LABEL_478:
        v374 = v147;
        v375 = (_QWORD *)operator new();
        *v375 = &off_1E42C6498;
        v375[1] = v374;
        v375[2] = v371;
        v375[3] = 0;
        *((_WORD *)v375 + 16) = 257;
        v648[0] = v375;
        karo::SizedArray<altitude::GlobeTileComponentViewData *,1>::push_back(v371 + 29, (uint64_t *)v648);
        v376 = v371[29];
        v377 = v376 - 1;
        if (v376 < 2)
          v369 = &v371[v377 + 30];
        else
          v369 = (uint64_t *)(v371[31] + 8 * v377);
        v370 = *v369;
        v147 = v647;
      }
LABEL_470:
      *(_BYTE *)(v370 + 32) = 1;
      v367 += 8;
      if (v367 == v368)
        goto LABEL_480;
    }
  }
  v234 = (uint64_t *)*((_QWORD *)this + 24);
  v605 = (uint64_t *)*((_QWORD *)this + 25);
  v147 = v647;
  if (v234 != v605)
  {
    while (1)
    {
      v609 = v234;
      v627 = *v234;
      v235 = *(_QWORD **)(*v234 + 328);
      v236 = v235[29];
      if (!v236)
        goto LABEL_338;
      if (v236 == 1)
        break;
      v238 = (uint64_t *)v235[31];
      while (1)
      {
        v237 = *v238;
        if (*(const altitude::View **)(*v238 + 8) == v147)
          break;
        ++v238;
        if (!--v236)
          goto LABEL_338;
      }
LABEL_342:
      *(_BYTE *)(v237 + 32) = 1;
      if (*(_BYTE *)(*(_QWORD *)(v627 + 288) + 164))
      {
        v244 = 0;
        do
        {
          v247 = *(unsigned int *)(v627 + 392);
          v248 = &dword_1A007EE80[2 * v244];
          v249 = (1 << v247) - 1;
          v250 = ((1 << v247) + *(_DWORD *)(v627 + 396) + *v248) & v249;
          v251 = (*(_DWORD *)(v627 + 400) + (1 << v247) + v248[1]) & v249;
          v252 = *((_QWORD *)this + 21);
          v253 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 22) - v252) >> 3);
          v634 = v244;
          if (v253 > v247)
          {
            v254 = (_DWORD *)(v252 + 40 * v247);
            v255 = v254[5] + v250;
            v256 = v254[1];
            v13 = v255 >= v256;
            v257 = v255 - v256;
            if (v13)
            {
              v258 = *(_DWORD *)(v252 + 40 * v247 + 28);
              if (v257 < v258)
              {
                v259 = v252 + 40 * v247;
                v260 = *(_DWORD *)(v259 + 24) + v251;
                LODWORD(v259) = *(_DWORD *)(v259 + 8);
                v13 = v260 >= v259;
                v261 = v260 - v259;
                if (v13 && v261 < *(_DWORD *)(v252 + 40 * v247 + 32))
                {
                  v262 = *(_QWORD *)(*((_QWORD *)this + 18) + 8 * (v257 + v261 * v258 + *v254));
                  if (v262)
                    goto LABEL_367;
                }
              }
            }
          }
          if ((_DWORD)v247)
          {
            v263 = v247 - 1;
            v264 = v250;
            v265 = v251;
            while (1)
            {
              v264 >>= 1;
              v265 >>= 1;
              v266 = v263;
              if (v253 > v263)
              {
                v267 = (_DWORD *)(v252 + 40 * v263);
                v268 = v267[5] + v264;
                v269 = v267[1];
                v13 = v268 >= v269;
                v270 = v268 - v269;
                if (v13)
                {
                  v271 = *(_DWORD *)(v252 + 40 * v263 + 28);
                  if (v270 < v271)
                  {
                    v272 = v252 + 40 * v263;
                    v273 = *(_DWORD *)(v272 + 24) + v265;
                    LODWORD(v272) = *(_DWORD *)(v272 + 8);
                    v13 = v273 >= v272;
                    v274 = v273 - v272;
                    if (v13 && v274 < *(_DWORD *)(v252 + 40 * v263 + 32))
                    {
                      v262 = *(_QWORD *)(*((_QWORD *)this + 18) + 8 * (v270 + v274 * v271 + *v267));
                      if (v262)
                        break;
                    }
                  }
                }
              }
              --v263;
              if (!v266)
                goto LABEL_371;
            }
LABEL_367:
            v275 = *(_QWORD **)(v262 + 328);
            v276 = v275[29];
            if (!v276)
              goto LABEL_458;
            if (v276 != 1)
            {
              v358 = (uint64_t *)v275[31];
              while (1)
              {
                v246 = *v358;
                if (*(const altitude::View **)(*v358 + 8) == v147)
                  goto LABEL_346;
                ++v358;
                if (!--v276)
                  goto LABEL_458;
              }
            }
            v246 = v275[30];
            if (*(const altitude::View **)(v246 + 8) != v147)
            {
LABEL_458:
              v359 = v147;
              v360 = (_QWORD *)operator new();
              *v360 = &off_1E42C6498;
              v360[1] = v359;
              v360[2] = v275;
              v360[3] = 0;
              *((_WORD *)v360 + 16) = 257;
              v648[0] = v360;
              karo::SizedArray<altitude::GlobeTileComponentViewData *,1>::push_back(v275 + 29, (uint64_t *)v648);
              v361 = v275[29];
              v362 = v361 - 1;
              if (v361 < 2)
                v245 = &v275[v362 + 30];
              else
                v245 = (uint64_t *)(v275[31] + 8 * v362);
              v246 = *v245;
              v147 = v647;
            }
LABEL_346:
            *(_BYTE *)(v246 + 32) = 1;
            goto LABEL_347;
          }
LABEL_371:
          v277 = (v247 + 1);
          if (v253 <= v277)
            goto LABEL_347;
          v615 = *(_DWORD *)(v627 + 392);
          v278 = 0;
          v279 = 0;
          v280 = (1 << (v247 + 1)) - 1;
          v619 = v251;
          v281 = (1 << (v247 + 1)) + 2 * v251;
          v623 = v250;
          v282 = (1 << (v247 + 1)) + 2 * v250;
          v645 = v281;
          v640 = v282;
          do
          {
            v283 = 0;
            v284 = (v282 + v278) & v280;
            do
            {
              v285 = *((_QWORD *)this + 21);
              if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 22) - v285) >> 3) > v277)
              {
                v286 = (_DWORD *)(v285 + 40 * v277);
                v287 = v286[5] + v284;
                v288 = v286[1];
                v13 = v287 >= v288;
                v289 = v287 - v288;
                if (v13)
                {
                  v290 = *(_DWORD *)(v285 + 40 * v277 + 28);
                  if (v289 < v290)
                  {
                    v291 = v285 + 40 * v277;
                    v292 = *(_DWORD *)(v291 + 24) + ((v281 + v283) & v280);
                    LODWORD(v291) = *(_DWORD *)(v291 + 8);
                    v13 = v292 >= v291;
                    v293 = v292 - v291;
                    if (v13 && v293 < *(_DWORD *)(v285 + 40 * v277 + 32))
                    {
                      v294 = *(_QWORD *)(*((_QWORD *)this + 18) + 8 * (v289 + v293 * v290 + *v286));
                      if (v294)
                      {
                        v295 = *(_QWORD **)(v294 + 328);
                        v296 = v295[29];
                        if (!v296)
                          goto LABEL_389;
                        if (v296 != 1)
                        {
                          v298 = (uint64_t *)v295[31];
                          while (1)
                          {
                            v297 = *v298;
                            if (*(const altitude::View **)(*v298 + 8) == v147)
                              goto LABEL_393;
                            ++v298;
                            if (!--v296)
                              goto LABEL_389;
                          }
                        }
                        v297 = v295[30];
                        if (*(const altitude::View **)(v297 + 8) != v147)
                        {
LABEL_389:
                          v299 = v147;
                          v300 = (_QWORD *)operator new();
                          *v300 = &off_1E42C6498;
                          v300[1] = v299;
                          v300[2] = v295;
                          v300[3] = 0;
                          *((_WORD *)v300 + 16) = 257;
                          v648[0] = v300;
                          karo::SizedArray<altitude::GlobeTileComponentViewData *,1>::push_back(v295 + 29, (uint64_t *)v648);
                          v301 = v295[29];
                          v302 = v301 - 1;
                          if (v301 < 2)
                            v303 = &v295[v302 + 30];
                          else
                            v303 = (uint64_t *)(v295[31] + 8 * v302);
                          v281 = v645;
                          v282 = v640;
                          v297 = *v303;
                          v147 = v647;
                        }
LABEL_393:
                        *(_BYTE *)(v297 + 32) = 1;
                        ++v279;
                      }
                    }
                  }
                }
              }
              if (v283)
                break;
              v283 = 1;
            }
            while (v279 < 4);
            if (v278)
              break;
            v278 = 1;
          }
          while (v279 < 4);
          if (v279 > 3)
            goto LABEL_347;
          v304 = (v615 + 2);
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 22) - *((_QWORD *)this + 21)) >> 3) <= v304)
            goto LABEL_347;
          v305 = 0;
          v306 = 4 * v279;
          v307 = (1 << (v615 + 2)) - 1;
          v308 = (1 << (v615 + 2)) + 4 * v619;
          v309 = (1 << (v615 + 2)) + 4 * v623;
          while (2)
          {
            v310 = 0;
            v311 = (v309 + v305) & v307;
            while (2)
            {
              v312 = *((_QWORD *)this + 21);
              if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 22) - v312) >> 3) > v304)
              {
                v313 = (_DWORD *)(v312 + 40 * v304);
                v314 = v313[5] + v311;
                v315 = v313[1];
                v13 = v314 >= v315;
                v316 = v314 - v315;
                if (v13)
                {
                  v317 = *(_DWORD *)(v312 + 40 * v304 + 28);
                  if (v316 < v317)
                  {
                    v318 = v312 + 40 * v304;
                    v319 = *(_DWORD *)(v318 + 24) + ((v308 + v310) & v307);
                    LODWORD(v318) = *(_DWORD *)(v318 + 8);
                    v13 = v319 >= v318;
                    v320 = v319 - v318;
                    if (v13 && v320 < *(_DWORD *)(v312 + 40 * v304 + 32))
                    {
                      v321 = *(_QWORD *)(*((_QWORD *)this + 18) + 8 * (v316 + v320 * v317 + *v313));
                      if (v321)
                      {
                        v322 = *(_QWORD **)(v321 + 328);
                        v323 = v322[29];
                        if (!v323)
                          goto LABEL_417;
                        if (v323 == 1)
                        {
                          v324 = v322[30];
                          if (*(const altitude::View **)(v324 + 8) == v147)
                            goto LABEL_421;
LABEL_417:
                          v326 = v147;
                          v327 = (_QWORD *)operator new();
                          *v327 = &off_1E42C6498;
                          v327[1] = v326;
                          v327[2] = v322;
                          v327[3] = 0;
                          *((_WORD *)v327 + 16) = 257;
                          v648[0] = v327;
                          karo::SizedArray<altitude::GlobeTileComponentViewData *,1>::push_back(v322 + 29, (uint64_t *)v648);
                          v328 = v322[29];
                          v329 = v328 - 1;
                          if (v328 < 2)
                            v330 = &v322[v329 + 30];
                          else
                            v330 = (uint64_t *)(v322[31] + 8 * v329);
                          v307 = (1 << (v615 + 2)) - 1;
                          v308 = (1 << (v615 + 2)) + 4 * v619;
                          v309 = (1 << (v615 + 2)) + 4 * v623;
                          v324 = *v330;
                          v147 = v647;
                        }
                        else
                        {
                          v325 = (uint64_t *)v322[31];
                          while (1)
                          {
                            v324 = *v325;
                            if (*(const altitude::View **)(*v325 + 8) == v147)
                              break;
                            ++v325;
                            if (!--v323)
                              goto LABEL_417;
                          }
                        }
LABEL_421:
                        *(_BYTE *)(v324 + 32) = 1;
                        ++v306;
                      }
                    }
                  }
                }
              }
              if (v310 <= 2)
              {
                ++v310;
                if (v306 < 0x10)
                  continue;
              }
              break;
            }
            if (v305 <= 2)
            {
              ++v305;
              if (v306 < 0x10)
                continue;
            }
            break;
          }
          if (v306 <= 0xF)
          {
            v331 = (v615 + 3);
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 22) - *((_QWORD *)this + 21)) >> 3) > v331)
            {
              v332 = 0;
              v333 = 4 * v306;
              v334 = (1 << (v615 + 3)) - 1;
              v335 = (1 << (v615 + 3)) + 8 * v619;
              v336 = (1 << (v615 + 3)) + 8 * v623;
              while (1)
              {
                v337 = 0;
                v338 = (v336 + v332) & v334;
                do
                {
                  v339 = *((_QWORD *)this + 21);
                  if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 22) - v339) >> 3) > v331)
                  {
                    v340 = (_DWORD *)(v339 + 40 * v331);
                    v341 = v340[5] + v338;
                    v342 = v340[1];
                    v13 = v341 >= v342;
                    v343 = v341 - v342;
                    if (v13)
                    {
                      v344 = *(_DWORD *)(v339 + 40 * v331 + 28);
                      if (v343 < v344)
                      {
                        v345 = v339 + 40 * v331;
                        v346 = *(_DWORD *)(v345 + 24) + ((v335 + v337) & v334);
                        LODWORD(v345) = *(_DWORD *)(v345 + 8);
                        v13 = v346 >= v345;
                        v347 = v346 - v345;
                        if (v13 && v347 < *(_DWORD *)(v339 + 40 * v331 + 32))
                        {
                          v348 = *(_QWORD *)(*((_QWORD *)this + 18) + 8 * (v343 + v347 * v344 + *v340));
                          if (v348)
                          {
                            v349 = *(_QWORD **)(v348 + 328);
                            v350 = v349[29];
                            if (!v350)
                              goto LABEL_445;
                            if (v350 != 1)
                            {
                              v352 = (uint64_t *)v349[31];
                              while (1)
                              {
                                v351 = *v352;
                                if (*(const altitude::View **)(*v352 + 8) == v147)
                                  goto LABEL_449;
                                ++v352;
                                if (!--v350)
                                  goto LABEL_445;
                              }
                            }
                            v351 = v349[30];
                            if (*(const altitude::View **)(v351 + 8) != v147)
                            {
LABEL_445:
                              v353 = v147;
                              v354 = (_QWORD *)operator new();
                              *v354 = &off_1E42C6498;
                              v354[1] = v353;
                              v354[2] = v349;
                              v354[3] = 0;
                              *((_WORD *)v354 + 16) = 257;
                              v648[0] = v354;
                              karo::SizedArray<altitude::GlobeTileComponentViewData *,1>::push_back(v349 + 29, (uint64_t *)v648);
                              v355 = v349[29];
                              v356 = v355 - 1;
                              if (v355 < 2)
                                v357 = &v349[v356 + 30];
                              else
                                v357 = (uint64_t *)(v349[31] + 8 * v356);
                              v334 = (1 << (v615 + 3)) - 1;
                              v335 = (1 << (v615 + 3)) + 8 * v619;
                              v336 = (1 << (v615 + 3)) + 8 * v623;
                              v351 = *v357;
                              v147 = v647;
                            }
LABEL_449:
                            *(_BYTE *)(v351 + 32) = 1;
                            ++v333;
                          }
                        }
                      }
                    }
                  }
                  if (v337 > 6)
                    break;
                  ++v337;
                }
                while (v333 < 0x40);
                if (v332 <= 6)
                {
                  ++v332;
                  if (v333 < 0x40)
                    continue;
                }
                break;
              }
            }
          }
LABEL_347:
          v244 = v634 + 1;
        }
        while (v634 != 7);
      }
      v234 = v609 + 1;
      if (v609 + 1 == v605)
        goto LABEL_480;
    }
    v237 = v235[30];
    if (*(const altitude::View **)(v237 + 8) == v147)
      goto LABEL_342;
LABEL_338:
    v239 = v147;
    v240 = (_QWORD *)operator new();
    *v240 = &off_1E42C6498;
    v240[1] = v239;
    v240[2] = v235;
    v240[3] = 0;
    *((_WORD *)v240 + 16) = 257;
    v648[0] = v240;
    karo::SizedArray<altitude::GlobeTileComponentViewData *,1>::push_back(v235 + 29, (uint64_t *)v648);
    v241 = v235[29];
    v242 = v241 - 1;
    if (v241 < 2)
      v243 = &v235[v242 + 30];
    else
      v243 = (uint64_t *)(v235[31] + 8 * v242);
    v237 = *v243;
    v147 = v647;
    goto LABEL_342;
  }
LABEL_480:
  v652 = 0;
  v650 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v648 = 0u;
  *(_OWORD *)v649 = 0u;
  v378 = *((_QWORD *)this + 6);
  v379 = *(uint64_t **)(v378 + 40);
  v380 = *(uint64_t **)(v378 + 48);
  if (v379 != v380)
  {
    while (1)
    {
      v381 = *v379;
      if (*(_BYTE *)(*(_QWORD *)(*v379 + 288) + 164))
        break;
LABEL_482:
      if (++v379 == v380)
        goto LABEL_498;
    }
    v382 = *(_QWORD **)(v381 + 328);
    v383 = v382[29];
    if (!v383)
      goto LABEL_491;
    if (v383 != 1)
    {
      v385 = (uint64_t *)v382[31];
      while (1)
      {
        v384 = *v385;
        if (*(const altitude::View **)(*v385 + 8) == v147)
          goto LABEL_495;
        ++v385;
        if (!--v383)
          goto LABEL_491;
      }
    }
    v384 = v382[30];
    if (*(const altitude::View **)(v384 + 8) != v147)
    {
LABEL_491:
      v386 = v147;
      v387 = operator new();
      *(_QWORD *)v387 = &off_1E42C6498;
      *(_QWORD *)(v387 + 8) = v386;
      *(_QWORD *)(v387 + 16) = v382;
      *(_QWORD *)(v387 + 24) = 0;
      *(_WORD *)(v387 + 32) = 257;
      v653[0] = v387;
      karo::SizedArray<altitude::GlobeTileComponentViewData *,1>::push_back(v382 + 29, v653);
      v388 = v382[29];
      v389 = v388 - 1;
      if (v388 < 2)
        v390 = &v382[v389 + 30];
      else
        v390 = (uint64_t *)(v382[31] + 8 * v389);
      v384 = *v390;
      v147 = v647;
    }
LABEL_495:
    *(_BYTE *)(v384 + 33) = 1;
    if (!*(_DWORD *)(v381 + 404))
    {
      v391 = altitude::Tile::getOrCreateTileView((altitude::Tile *)v381, v647);
      v392 = altitude::TileView::isCulled((altitude::TileView *)v391, v611);
      v147 = v647;
      if ((v392 & 1) == 0)
      {
        altitude::GlobeTileRenderManager::LevelTiles::add((uint64_t)v648, (unsigned int *)v381);
        v147 = v647;
      }
    }
    goto LABEL_482;
  }
LABEL_498:
  if ((altitude::GlobeTileRenderManager::LevelTiles::setup((altitude::GlobeTileRenderManager::LevelTiles *)v648) & 1) != 0)
  {
    v393 = (uint64_t *)*((_QWORD *)this + 24);
    v394 = (uint64_t *)*((_QWORD *)this + 25);
    if (v393 != v394)
    {
      v591 = (uint64_t *)*((_QWORD *)this + 25);
      while (1)
      {
        v395 = *v393;
        if (!*(_BYTE *)(*(_QWORD *)(*v393 + 288) + 164) || *(_DWORD *)(v395 + 404))
          goto LABEL_501;
        v593 = v393;
        v396 = (double *)(*(uint64_t (**)(uint64_t))(*((_QWORD *)v647 + 5) + 24))((uint64_t)v647 + 40);
        v397 = *v396;
        v398 = v396[1];
        v399 = v396[2];
        v400 = sqrt(v397 * v397 + v398 * v398);
        v401 = atan2(v399, v400 * 0.996647189);
        v402 = atan2(v398, v397);
        v403 = __sincos_stret(v401);
        v404 = atan2(v399 + v403.__sinval * v403.__sinval * 42841.3115 * v403.__sinval, v400 + v403.__cosval * v403.__cosval * -42697.6727 * v403.__cosval);
        v405 = tan(v404 * 0.5 + 0.785398163);
        v406 = log(v405);
        v407 = *(_BYTE *)(v395 + 392);
        v408 = (double)(1 << v407);
        v409 = vcvtmd_s64_f64((v406 * 0.159154943 + 0.5) * v408) + ~(-1 << v407) - (1 << v407) + 1;
        if (v409 <= *(_DWORD *)(v395 + 396))
        {
          v411 = (char *)operator new(8uLL);
          *(_QWORD *)v411 = 1;
          v410 = v411 + 8;
          v412 = v411 + 8;
          v413 = v411 + 8;
          if (v409 < *(_DWORD *)(v395 + 396))
            goto LABEL_521;
        }
        else
        {
          v410 = 0;
          v411 = 0;
        }
        v414 = v410 - v411;
        v415 = (v410 - v411) >> 3;
        v416 = v415 + 1;
        if ((unint64_t)(v415 + 1) >> 61)
          goto LABEL_726;
        if (v414 >> 2 > v416)
          v416 = v414 >> 2;
        v417 = (unint64_t)v414 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v416;
        if (v417)
        {
          if (v417 >> 61)
            goto LABEL_727;
          v418 = v411;
          v419 = (char *)operator new(8 * v417);
        }
        else
        {
          v418 = v411;
          v419 = 0;
        }
        v420 = &v419[8 * v415];
        *(_QWORD *)v420 = 0xFFFFFFFFLL;
        v413 = v420 + 8;
        if (v410 == v418)
          break;
        v421 = v418;
        v422 = (v410 - 8 - v418) & 0xFFFFFFFFFFFFFFF8;
        v423 = &v419[v414 - v422 - 8];
        memcpy(v423, &v410[-v422 - 8], v422 + 8);
        v410 = v421;
        v412 = &v419[8 * v417];
        if (v421)
          goto LABEL_519;
LABEL_520:
        v411 = v423;
LABEL_521:
        v424 = vcvtmd_s64_f64((v402 * 0.159154943 + 0.5) * v408);
        v425 = v647;
        if (*(_DWORD *)(v395 + 400) < v424)
        {
          v426 = v413;
          goto LABEL_548;
        }
        if (v413 < v412)
        {
          *(_QWORD *)v413 = 0x100000000;
          v426 = v413 + 8;
          goto LABEL_548;
        }
        v427 = v411;
        v428 = (v413 - v411) >> 3;
        v429 = v428 + 1;
        if ((unint64_t)(v428 + 1) >> 61)
          goto LABEL_726;
        v430 = v427;
        v431 = v412 - v427;
        v432 = (v412 - v427) >> 2;
        if (v432 > v429)
          v429 = v432;
        if (v431 >= 0x7FFFFFFFFFFFFFF8)
          v433 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v433 = v429;
        if (v433)
        {
          if (v433 >> 61)
            goto LABEL_727;
          v434 = (char *)operator new(8 * v433);
          v425 = v647;
        }
        else
        {
          v434 = 0;
        }
        v435 = &v434[8 * v428];
        v412 = &v434[8 * v433];
        *(_QWORD *)v435 = 0x100000000;
        v426 = v435 + 8;
        if (v413 == v430)
        {
          v438 = v413;
LABEL_546:
          operator delete(v438);
          v425 = v647;
          goto LABEL_547;
        }
        v436 = v413 - v430 - 8;
        if (v436 < 0x18)
        {
          v437 = v413;
          v438 = v430;
          do
          {
LABEL_544:
            v444 = *((_QWORD *)v437 - 1);
            v437 -= 8;
            *((_QWORD *)v435 - 1) = v444;
            v435 -= 8;
          }
          while (v437 != v438);
          goto LABEL_545;
        }
        v439 = (v436 >> 3) + 1;
        v437 = &v413[-8 * (v439 & 0x3FFFFFFFFFFFFFFCLL)];
        v440 = &v434[8 * v428 - 16];
        v441 = (__int128 *)(v413 - 16);
        v442 = v439 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v443 = *v441;
          *((_OWORD *)v440 - 1) = *(v441 - 1);
          *(_OWORD *)v440 = v443;
          v440 -= 32;
          v441 -= 2;
          v442 -= 4;
        }
        while (v442);
        v435 -= 8 * (v439 & 0x3FFFFFFFFFFFFFFCLL);
        v438 = v430;
        if (v439 != (v439 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_544;
LABEL_545:
        if (v438)
          goto LABEL_546;
LABEL_547:
        v411 = v435;
LABEL_548:
        if (*(_DWORD *)(v395 + 400) <= v424)
        {
          if (v426 >= v412)
          {
            v446 = (v426 - v411) >> 3;
            v447 = v446 + 1;
            if ((unint64_t)(v446 + 1) >> 61)
              goto LABEL_726;
            if ((v412 - v411) >> 2 > v447)
              v447 = (v412 - v411) >> 2;
            if ((unint64_t)(v412 - v411) >= 0x7FFFFFFFFFFFFFF8)
              v447 = 0x1FFFFFFFFFFFFFFFLL;
            if (v447)
            {
              if (v447 >> 61)
                goto LABEL_727;
              v448 = operator new(8 * v447);
              v425 = v647;
            }
            else
            {
              v448 = 0;
            }
            v449 = &v448[8 * v446];
            *(_QWORD *)v449 = 0xFFFFFFFF00000000;
            v445 = v449 + 8;
            if (v426 == v411)
            {
              v411 = v426;
            }
            else
            {
              v450 = v426 - 8 - v411;
              if (v450 < 0x58 || (unint64_t)(v411 - v448) < 0x20)
              {
                v451 = v426;
                goto LABEL_565;
              }
              v586 = (v450 >> 3) + 1;
              v451 = &v426[-8 * (v586 & 0x3FFFFFFFFFFFFFFCLL)];
              v587 = &v448[8 * v446 - 16];
              v588 = (__int128 *)(v426 - 16);
              v589 = v586 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v590 = *v588;
                *(v587 - 1) = *(v588 - 1);
                *v587 = v590;
                v587 -= 2;
                v588 -= 2;
                v589 -= 4;
              }
              while (v589);
              v449 -= 8 * (v586 & 0x3FFFFFFFFFFFFFFCLL);
              if (v586 != (v586 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_565:
                  v452 = *((_QWORD *)v451 - 1);
                  v451 -= 8;
                  *((_QWORD *)v449 - 1) = v452;
                  v449 -= 8;
                }
                while (v451 != v411);
              }
              if (!v411)
              {
LABEL_570:
                v411 = v449;
                goto LABEL_571;
              }
            }
            operator delete(v411);
            v425 = v647;
            goto LABEL_570;
          }
          *(_QWORD *)v426 = 0xFFFFFFFF00000000;
          v426 += 8;
        }
        v445 = v426;
LABEL_571:
        v592 = v411;
        if (v411 != v445)
        {
          v453 = __p[0];
          v454 = v649[1];
          v455 = 0xCCCCCCCCCCCCCCCDLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
          v456 = v592;
          v594 = v445;
          v595 = v395;
          v602 = (char *)__p[0];
          v641 = v649[1];
          do
          {
            v459 = *(_DWORD *)v456;
            v460 = *((_DWORD *)v456 + 1);
            v461 = *(unsigned int *)(v395 + 392);
            v462 = (1 << v461) - 1;
            v463 = (*(_DWORD *)(v395 + 396) + *(_DWORD *)v456 + (1 << v461)) & v462;
            v464 = ((1 << v461) + v460 + *(_DWORD *)(v395 + 400)) & v462;
            v603 = v456;
            if (v455 > v461)
            {
              v465 = &v453[10 * v461];
              v466 = v465[5] + v463;
              v467 = v465[1];
              v13 = v466 >= v467;
              v468 = v466 - v467;
              if (v13)
              {
                v469 = v453[10 * v461 + 7];
                if (v468 < v469)
                {
                  v470 = (char *)&v453[10 * v461];
                  v471 = *((_DWORD *)v470 + 6) + v464;
                  LODWORD(v470) = *((_DWORD *)v470 + 2);
                  v13 = v471 >= v470;
                  v472 = v471 - (_DWORD)v470;
                  if (v13 && v472 < v453[10 * v461 + 8])
                  {
                    v473 = v454[v468 + v472 * v469 + *v465];
                    if (v473)
                      goto LABEL_704;
                  }
                }
              }
            }
            if (v461 >= 2)
            {
              v567 = v461 - 1;
              v568 = v463;
              v569 = v464;
              while (1)
              {
                v568 >>= 1;
                v569 >>= 1;
                if (v455 > v567)
                {
                  v571 = &v453[10 * v567];
                  v572 = v571[5] + v568;
                  v573 = v571[1];
                  v13 = v572 >= v573;
                  v574 = v572 - v573;
                  if (v13)
                  {
                    v575 = v453[10 * v567 + 7];
                    if (v574 < v575)
                    {
                      v576 = (char *)&v453[10 * v567];
                      v577 = *((_DWORD *)v576 + 6) + v569;
                      LODWORD(v576) = *((_DWORD *)v576 + 2);
                      v13 = v577 >= v576;
                      v578 = v577 - (_DWORD)v576;
                      if (v13 && v578 < v453[10 * v567 + 8])
                      {
                        v473 = v454[v574 + v578 * v575 + *v571];
                        if (v473)
                          break;
                      }
                    }
                  }
                }
                if (!(unint64_t)(v567-- & 0xFFFFFFFE))
                  goto LABEL_586;
              }
LABEL_704:
              v579 = *(_QWORD **)(v473 + 328);
              v580 = v579[29];
              if (v580)
              {
                if (v580 != 1)
                {
                  v581 = (uint64_t *)v579[31];
                  while (1)
                  {
                    v458 = *v581;
                    if (*(altitude::View **)(*v581 + 8) == v425)
                      break;
                    ++v581;
                    if (!--v580)
                      goto LABEL_711;
                  }
LABEL_575:
                  *(_BYTE *)(v458 + 33) = 0;
                  goto LABEL_576;
                }
                v458 = v579[30];
                if (*(altitude::View **)(v458 + 8) == v425)
                  goto LABEL_575;
              }
LABEL_711:
              v582 = v425;
              v583 = operator new();
              *(_QWORD *)v583 = &off_1E42C6498;
              *(_QWORD *)(v583 + 8) = v582;
              *(_QWORD *)(v583 + 16) = v579;
              *(_QWORD *)(v583 + 24) = 0;
              *(_WORD *)(v583 + 32) = 257;
              v653[0] = v583;
              karo::SizedArray<altitude::GlobeTileComponentViewData *,1>::push_back(v579 + 29, v653);
              v584 = v579[29];
              v585 = v584 - 1;
              if (v584 < 2)
                v457 = &v579[v585 + 30];
              else
                v457 = (uint64_t *)(v579[31] + 8 * v585);
              v458 = *v457;
              v425 = v647;
              v454 = v641;
              goto LABEL_575;
            }
LABEL_586:
            v474 = 0;
            v475 = 0;
            v604 = *((_DWORD *)v456 + 1);
            v596 = v460 == 0;
            v597 = v459 == 0;
            v599 = v464;
            v600 = v463;
            v476 = (v459 == -1) | (2 * v463);
            v477 = (v460 == -1) | (2 * v464);
            if (v460)
              v478 = 1;
            else
              v478 = 2;
            v479 = v478 << (v459 == 0);
            v601 = v461;
            v480 = (v461 + 1);
            v481 = &v453[10 * v480];
            v482 = v481 + 5;
            v483 = v481 + 1;
            v484 = v481 + 7;
            v485 = v481 + 6;
            v486 = v481 + 2;
            v487 = v481 + 8;
            v646 = v459;
            v628 = (v459 == -1) | (2 * v463);
            v624 = v477;
            v606 = v481 + 8;
            v610 = v481;
            v616 = v481 + 2;
            v620 = v481 + 6;
            *(_QWORD *)v612 = v481 + 7;
            do
            {
              v488 = 0;
              v489 = v474 + v476;
              do
              {
                if (v455 > v480)
                {
                  v490 = v489 + *v482;
                  v13 = v490 >= *v483;
                  v491 = v490 - *v483;
                  if (v13 && v491 < *v484)
                  {
                    v492 = v488 + v477 + *v485;
                    v13 = v492 >= *v486;
                    v493 = v492 - *v486;
                    if (v13 && v493 < *v487)
                    {
                      v494 = v454[v491 + v493 * *v484 + *v481];
                      if (v494)
                      {
                        v495 = *(_QWORD **)(v494 + 328);
                        v496 = v495[29];
                        if (!v496)
                          goto LABEL_606;
                        if (v496 != 1)
                        {
                          v498 = (uint64_t *)v495[31];
                          while (1)
                          {
                            v497 = *v498;
                            if (*(altitude::View **)(*v498 + 8) == v425)
                              goto LABEL_610;
                            ++v498;
                            if (!--v496)
                              goto LABEL_606;
                          }
                        }
                        v497 = v495[30];
                        if (*(altitude::View **)(v497 + 8) != v425)
                        {
LABEL_606:
                          v635 = v474;
                          v499 = operator new();
                          *(_QWORD *)v499 = &off_1E42C6498;
                          *(_QWORD *)(v499 + 8) = v647;
                          *(_QWORD *)(v499 + 16) = v495;
                          *(_QWORD *)(v499 + 24) = 0;
                          *(_WORD *)(v499 + 32) = 257;
                          v653[0] = v499;
                          karo::SizedArray<altitude::GlobeTileComponentViewData *,1>::push_back(v495 + 29, v653);
                          v500 = v495[29];
                          v501 = v500 - 1;
                          if (v500 < 2)
                            v502 = &v495[v501 + 30];
                          else
                            v502 = (uint64_t *)(v495[31] + 8 * v501);
                          v459 = v646;
                          v474 = v635;
                          v476 = v628;
                          v477 = v624;
                          v486 = v616;
                          v485 = v620;
                          v481 = v610;
                          v484 = *(unsigned int **)v612;
                          v497 = *v502;
                          v425 = v647;
                          v454 = v641;
                          v487 = v606;
                        }
LABEL_610:
                        *(_BYTE *)(v497 + 33) = 0;
                        ++v475;
                      }
                    }
                  }
                }
                if (v488 + 1 >= v478)
                  break;
                v488 = 1;
              }
              while (v475 < v479);
              if (v459)
                break;
              if (v474)
                break;
              v474 = 1;
            }
            while (v475 < v479);
            v503 = v596 + v597;
            if (v459 == -1)
              v504 = 3;
            else
              v504 = 0;
            if (v604 == -1)
              v505 = 3;
            else
              v505 = 0;
            if (v604)
              v506 = 1;
            else
              v506 = 4;
            v507 = v506 << (2 * (v459 == 0));
            v598 = v596 + v597;
            v508 = v475 << v503;
            if (v508 < v507)
            {
              v509 = 0;
              v510 = v504 | (4 * v600);
              v511 = v505 | (4 * v599);
              v512 = (v601 + 2);
              v513 = &v602[40 * v512];
              v514 = v513 + 20;
              v515 = (unsigned int *)(v513 + 4);
              v516 = (unsigned int *)(v513 + 28);
              v517 = v513 + 24;
              v518 = (unsigned int *)(v513 + 8);
              v519 = (unsigned int *)(v513 + 32);
              v625 = v510;
              v621 = v511;
              *(_QWORD *)v613 = v513 + 8;
              v617 = v513 + 24;
              v607 = (unsigned int *)(v513 + 32);
              while (1)
              {
                v520 = 0;
                v521 = v509 + v510;
                do
                {
                  if (v455 > v512)
                  {
                    v522 = v521 + *v514;
                    v13 = v522 >= *v515;
                    v523 = v522 - *v515;
                    if (v13 && v523 < *v516)
                    {
                      v524 = v520 + v511 + *v517;
                      v13 = v524 >= *v518;
                      v525 = v524 - *v518;
                      if (v13 && v525 < *v519)
                      {
                        v526 = v454[v523 + v525 * *v516 + *(_DWORD *)v513];
                        if (v526)
                        {
                          v527 = *(_QWORD **)(v526 + 328);
                          v528 = v527[29];
                          if (!v528)
                            goto LABEL_643;
                          if (v528 != 1)
                          {
                            v530 = (uint64_t *)v527[31];
                            while (1)
                            {
                              v529 = *v530;
                              if (*(altitude::View **)(*v530 + 8) == v425)
                                goto LABEL_647;
                              ++v530;
                              if (!--v528)
                                goto LABEL_643;
                            }
                          }
                          v529 = v527[30];
                          if (*(altitude::View **)(v529 + 8) != v425)
                          {
LABEL_643:
                            v631 = v509;
                            v636 = v527;
                            v629 = v527 + 29;
                            v531 = operator new();
                            *(_QWORD *)v531 = &off_1E42C6498;
                            *(_QWORD *)(v531 + 8) = v647;
                            *(_QWORD *)(v531 + 16) = v636;
                            *(_QWORD *)(v531 + 24) = 0;
                            *(_WORD *)(v531 + 32) = 257;
                            v653[0] = v531;
                            karo::SizedArray<altitude::GlobeTileComponentViewData *,1>::push_back(v629, v653);
                            v532 = v636[29];
                            v533 = v532 - 1;
                            if (v532 < 2)
                              v534 = &v636[v533 + 30];
                            else
                              v534 = (uint64_t *)(v636[31] + 8 * v533);
                            v459 = v646;
                            v509 = v631;
                            v510 = v625;
                            v511 = v621;
                            v518 = *(unsigned int **)v613;
                            v517 = v617;
                            v529 = *v534;
                            v425 = v647;
                            v454 = v641;
                            v519 = v607;
                            v513 = &v602[40 * v512];
                          }
LABEL_647:
                          *(_BYTE *)(v529 + 33) = 0;
                          ++v508;
                        }
                      }
                    }
                  }
                  ++v520;
                }
                while (v520 < v506 && v508 < v507);
                if (!v459 && v509 <= 2)
                {
                  ++v509;
                  if (v508 < v507)
                    continue;
                }
                break;
              }
            }
            if (v459 == -1)
              v535 = 7;
            else
              v535 = 0;
            if (v604 == -1)
              v536 = 7;
            else
              v536 = 0;
            if (v604)
              v537 = 1;
            else
              v537 = 8;
            if (v459)
              v538 = 0;
            else
              v538 = 3;
            v539 = v537 << v538;
            v540 = v508 << v598;
            if (v540 < v537 << v538)
            {
              v541 = 0;
              v542 = v535 | (8 * v600);
              v543 = v536 | (8 * v599);
              v544 = (v601 + 3);
              v545 = &v602[40 * v544];
              v546 = v545 + 20;
              v547 = (unsigned int *)(v545 + 4);
              v548 = (unsigned int *)(v545 + 28);
              v549 = v545 + 24;
              v550 = (unsigned int *)(v545 + 8);
              v551 = (unsigned int *)(v545 + 32);
              v626 = v542;
              v622 = v543;
              *(_QWORD *)v614 = v545 + 8;
              v618 = v545 + 24;
              v608 = (unsigned int *)(v545 + 32);
              while (1)
              {
                v552 = 0;
                v553 = v541 + v542;
                do
                {
                  if (v455 > v544)
                  {
                    v554 = v553 + *v546;
                    v13 = v554 >= *v547;
                    v555 = v554 - *v547;
                    if (v13 && v555 < *v548)
                    {
                      v556 = v552 + v543 + *v549;
                      v13 = v556 >= *v550;
                      v557 = v556 - *v550;
                      if (v13 && v557 < *v551)
                      {
                        v558 = v454[v555 + v557 * *v548 + *(_DWORD *)v545];
                        if (v558)
                        {
                          v559 = *(_QWORD **)(v558 + 328);
                          v560 = v559[29];
                          if (!v560)
                            goto LABEL_683;
                          if (v560 != 1)
                          {
                            v562 = (uint64_t *)v559[31];
                            while (1)
                            {
                              v561 = *v562;
                              if (*(altitude::View **)(*v562 + 8) == v425)
                                goto LABEL_687;
                              ++v562;
                              if (!--v560)
                                goto LABEL_683;
                            }
                          }
                          v561 = v559[30];
                          if (*(altitude::View **)(v561 + 8) != v425)
                          {
LABEL_683:
                            v632 = v541;
                            v637 = v559;
                            v630 = v559 + 29;
                            v563 = operator new();
                            *(_QWORD *)v563 = &off_1E42C6498;
                            *(_QWORD *)(v563 + 8) = v647;
                            *(_QWORD *)(v563 + 16) = v637;
                            *(_QWORD *)(v563 + 24) = 0;
                            *(_WORD *)(v563 + 32) = 257;
                            v653[0] = v563;
                            karo::SizedArray<altitude::GlobeTileComponentViewData *,1>::push_back(v630, v653);
                            v564 = v637[29];
                            v565 = v564 - 1;
                            if (v564 < 2)
                              v566 = &v637[v565 + 30];
                            else
                              v566 = (uint64_t *)(v637[31] + 8 * v565);
                            v459 = v646;
                            v541 = v632;
                            v542 = v626;
                            v543 = v622;
                            v550 = *(unsigned int **)v614;
                            v549 = v618;
                            v561 = *v566;
                            v425 = v647;
                            v454 = v641;
                            v551 = v608;
                            v545 = &v602[40 * v544];
                          }
LABEL_687:
                          *(_BYTE *)(v561 + 33) = 0;
                          ++v540;
                        }
                      }
                    }
                  }
                  ++v552;
                }
                while (v552 < v537 && v540 < v539);
                if (!v459 && v541 <= 6)
                {
                  ++v541;
                  if (v540 < v539)
                    continue;
                }
                break;
              }
            }
LABEL_576:
            v453 = v602;
            v456 = v603 + 8;
            v395 = v595;
          }
          while (v603 + 8 != v594);
        }
        v393 = v593;
        v394 = v591;
        if (v592)
        {
          operator delete(v592);
          v394 = v591;
          v393 = v593;
        }
LABEL_501:
        if (++v393 == v394)
          goto LABEL_719;
      }
      v423 = &v419[8 * v415];
      v412 = &v419[8 * v417];
      if (!v410)
        goto LABEL_520;
LABEL_519:
      operator delete(v410);
      goto LABEL_520;
    }
  }
LABEL_719:
  if (__p[0])
    operator delete(__p[0]);
  if (v649[1])
    operator delete(v649[1]);
  if (v648[0])
    operator delete(v648[0]);
}

uint64_t altitude::GlobeTileRenderManager::LevelTiles::setup(altitude::GlobeTileRenderManager::LevelTiles *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _DWORD *v27;
  unsigned int v28;
  _DWORD *v29;

  v3 = *((_QWORD *)this + 6);
  v2 = *((_QWORD *)this + 7);
  v4 = v2 - v3;
  if (v2 == v3)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0xCCCCCCCCCCCCCCCDLL * (v4 >> 3);
    v7 = (unsigned int *)(v3 + 28);
    v8 = 1;
    do
    {
      *(v7 - 7) = v5;
      v10 = *(v7 - 6);
      v11 = *(v7 - 4);
      v12 = v11 >= v10;
      v13 = v11 - v10;
      if (v12)
      {
        v14 = *(v7 - 5);
        v15 = *(v7 - 3);
        v12 = v15 >= v14;
        v16 = v15 - v14;
        if (v12)
        {
          v17 = v13 + 1;
          v18 = v16 + 1;
          *v7 = v17;
          v7[1] = v18;
          v19 = v18 * v17;
          v7[2] = v19;
          v5 += v19;
        }
      }
      v9 = v6 > v8++;
      v7 += 10;
    }
    while (v9);
    if (v5 > 0x100000)
      return 0;
  }
  v21 = v5;
  v23 = *((_QWORD *)this + 3);
  v22 = (char *)this + 24;
  v24 = (*((_QWORD *)this + 4) - v23) >> 3;
  if (v21 <= v24)
  {
    if (v21 < v24)
      *((_QWORD *)this + 4) = v23 + 8 * v21;
  }
  else
  {
    std::vector<altitude::TextureMap *>::__append((uint64_t)v22, v21 - v24);
  }
  if ((_DWORD)v21)
  {
    bzero(*((void **)this + 3), 8 * v21);
    v25 = *(_QWORD **)this;
    v26 = (_QWORD *)*((_QWORD *)this + 1);
    if (*(_QWORD **)this != v26)
    {
      do
      {
        v27 = (_DWORD *)*v25++;
        v28 = v27[98];
        v29 = (_DWORD *)(*((_QWORD *)this + 6) + 40 * v28);
        *(_QWORD *)(*((_QWORD *)this + 3)
                  + 8
                  * ((((v29[5] + v27[99]) & ~(-1 << v28))
                    - v29[1]
                    + *v29
                    + (((v29[6] + v27[100]) & ~(-1 << v28)) - v29[2]) * v29[7])
                   % v21)) = v27;
      }
      while (v25 != v26);
    }
  }
  return 1;
}

void altitude::GlobeTileRenderManager::LevelTiles::add(uint64_t a1, unsigned int *a2)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  _DWORD *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int **v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  unsigned int **v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _BYTE *v65;
  unsigned int **v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  unsigned int **v71;
  uint64_t v72;
  __int128 v73;
  unsigned int *v74;
  uint64_t v75;

  v4 = a2[98];
  v5 = a2[99];
  v6 = a2[100];
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v7) >> 3);
  if (v9 <= v4)
  {
    v44 = (v4 + 1);
    v45 = v44 - v9;
    if (v44 <= v9)
    {
      if (v44 < v9)
        *(_QWORD *)(a1 + 56) = v7 + 40 * v44;
    }
    else
    {
      v46 = *(_QWORD *)(a1 + 64);
      if (0xCCCCCCCCCCCCCCCDLL * ((v46 - v8) >> 3) >= v45)
      {
        v75 = v8 + 40 * v45;
        do
        {
          *(_DWORD *)(v8 + 8) = -1;
          *(_QWORD *)v8 = 0xFFFFFFFF00000000;
          *(_QWORD *)(v8 + 12) = 0;
          *(_QWORD *)(v8 + 28) = 0;
          *(_QWORD *)(v8 + 20) = 0;
          *(_DWORD *)(v8 + 36) = 0;
          v8 += 40;
        }
        while (v8 != v75);
        *(_QWORD *)(a1 + 56) = v75;
        v7 = *(_QWORD *)(a1 + 48);
      }
      else
      {
        v47 = 0xCCCCCCCCCCCCCCCDLL * ((v46 - v7) >> 3);
        v48 = 2 * v47;
        if (2 * v47 <= v44)
          v48 = (v4 + 1);
        if (v47 >= 0x333333333333333)
          v49 = 0x666666666666666;
        else
          v49 = v48;
        if (v49 > 0x666666666666666)
          goto LABEL_83;
        v50 = (char *)operator new(40 * v49);
        v51 = &v50[40 * v9];
        v52 = &v50[40 * v44];
        v53 = v51;
        do
        {
          *((_DWORD *)v53 + 2) = -1;
          *(_QWORD *)v53 = 0xFFFFFFFF00000000;
          *(_QWORD *)(v53 + 12) = 0;
          *(_QWORD *)(v53 + 28) = 0;
          *(_QWORD *)(v53 + 20) = 0;
          *((_DWORD *)v53 + 9) = 0;
          v53 += 40;
        }
        while (v53 != v52);
        v54 = &v50[40 * v49];
        v56 = *(char **)(a1 + 48);
        v55 = *(char **)(a1 + 56);
        if (v55 != v56)
        {
          do
          {
            v57 = *(_OWORD *)(v55 - 40);
            v58 = *(_OWORD *)(v55 - 24);
            *((_QWORD *)v51 - 1) = *((_QWORD *)v55 - 1);
            *(_OWORD *)(v51 - 24) = v58;
            *(_OWORD *)(v51 - 40) = v57;
            v51 -= 40;
            v55 -= 40;
          }
          while (v55 != v56);
          v55 = *(char **)(a1 + 48);
        }
        *(_QWORD *)(a1 + 48) = v51;
        *(_QWORD *)(a1 + 56) = v52;
        *(_QWORD *)(a1 + 64) = v54;
        if (v55)
          operator delete(v55);
        v7 = *(_QWORD *)(a1 + 48);
      }
    }
  }
  if (v4 >= 0x1F)
    v10 = 31;
  else
    v10 = v4;
  v11 = v7 + 40 * v4;
  v14 = *(_DWORD *)(v11 + 20);
  v13 = (_DWORD *)(v11 + 20);
  v12 = v14;
  v15 = 1 << v10;
  v16 = (1 << v10) - 1;
  v17 = (v14 + v5) & v16;
  if (v15 >> 1 <= 0x80)
    v18 = 128;
  else
    v18 = v15 >> 1;
  v19 = v13 - 2;
  v20 = *(v13 - 2);
  v21 = v13 - 4;
  v22 = *(v13 - 4);
  if (v20 >= v22 && v17 > v20 && v17 - v22 > v18)
  {
    v25 = v20 - v12;
    v26 = v22 - v12;
    v12 = v15 - v5;
    *v13 = v15 - v5;
    v20 = v25 + v15 - v5;
    v22 = v26 + v15 - v5;
  }
  v27 = v7 + 40 * v4;
  v30 = *(_DWORD *)(v27 + 24);
  v28 = (unsigned int *)(v27 + 24);
  v29 = v30;
  v31 = (v30 + v6) & v16;
  v32 = *(v28 - 2);
  v33 = *(v28 - 4);
  if (v32 >= v33 && v31 > v32 && v31 - v33 > v18)
  {
    v31 = 0;
    v36 = v15 - v6;
    *v28 = v36;
    v32 = v32 - v29 + v36;
    v33 = v33 - v29 + v36;
  }
  v37 = (v12 + v5) & v16;
  if (v37 >= v22)
    v38 = v22;
  else
    v38 = v37;
  *v21 = v38;
  if (v20 > v37)
    v37 = v20;
  *v19 = v37;
  if (v31 >= v33)
    v39 = v33;
  else
    v39 = v31;
  *(v28 - 4) = v39;
  if (v32 <= v31)
    v40 = v31;
  else
    v40 = v32;
  *(v28 - 2) = v40;
  v42 = *(unsigned int ***)(a1 + 8);
  v41 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v42 < v41)
  {
    *v42 = a2;
    v43 = v42 + 1;
    goto LABEL_78;
  }
  v59 = *(unsigned int ***)a1;
  v60 = (uint64_t)v42 - *(_QWORD *)a1;
  v61 = v60 >> 3;
  v62 = (v60 >> 3) + 1;
  if (v62 >> 61)
    abort();
  v63 = v41 - (_QWORD)v59;
  if (v63 >> 2 > v62)
    v62 = v63 >> 2;
  if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
    v64 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v64 = v62;
  if (!v64)
  {
    v65 = 0;
    goto LABEL_67;
  }
  if (v64 >> 61)
LABEL_83:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v65 = operator new(8 * v64);
LABEL_67:
  v66 = (unsigned int **)&v65[8 * v61];
  v67 = &v65[8 * v64];
  *v66 = a2;
  v43 = v66 + 1;
  if (v42 == v59)
  {
    v59 = v42;
  }
  else
  {
    v68 = (char *)v42 - (char *)v59 - 8;
    if (v68 < 0x58)
      goto LABEL_86;
    if ((unint64_t)((char *)v42 - v65 - v60) < 0x20)
      goto LABEL_86;
    v69 = (v68 >> 3) + 1;
    v70 = &v65[8 * v61 - 16];
    v71 = v42 - 2;
    v72 = v69 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v73 = *(_OWORD *)v71;
      *(v70 - 1) = *((_OWORD *)v71 - 1);
      *v70 = v73;
      v70 -= 2;
      v71 -= 4;
      v72 -= 4;
    }
    while (v72);
    v66 -= v69 & 0x3FFFFFFFFFFFFFFCLL;
    v42 -= v69 & 0x3FFFFFFFFFFFFFFCLL;
    if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_86:
      do
      {
        v74 = *--v42;
        *--v66 = v74;
      }
      while (v42 != v59);
      v59 = *(unsigned int ***)a1;
    }
  }
  *(_QWORD *)a1 = v66;
  *(_QWORD *)(a1 + 8) = v43;
  *(_QWORD *)(a1 + 16) = v67;
  if (v59)
    operator delete(v59);
LABEL_78:
  *(_QWORD *)(a1 + 8) = v43;
}

void md::ArrowLabelPart::~ArrowLabelPart(md::ArrowLabelPart *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = off_1E428ECF8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 106);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::IconLabelPart::~IconLabelPart(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  geo::read_write_lock *v10;
  const char *v11;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E428ECF8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 106);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  md::IconLabelPart::~IconLabelPart(this);
  {
    v9 = operator new();
    *(_QWORD *)(v9 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v9 + 24) = "VectorKitLabels";
    *(_OWORD *)(v9 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v9 = &off_1E42B5668;
    *(_QWORD *)(v9 + 8) = "VectorKitLabels";
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *(_OWORD *)(v9 + 168) = 0u;
    *(_OWORD *)(v9 + 184) = 0u;
    *(_OWORD *)(v9 + 200) = 0u;
    *(_OWORD *)(v9 + 216) = 0u;
    *(_OWORD *)(v9 + 232) = 0u;
    *(_QWORD *)(v9 + 248) = 0;
    *(_OWORD *)(v9 + 56) = 0u;
    v10 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v9 + 56), 0);
    if ((_DWORD)v10)
      geo::read_write_lock::logFailure(v10, (uint64_t)"initialization", v11);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v9 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v9 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v9;
  }
  (*(void (**)(uint64_t, md::ArrowLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                 + 40))(mdm::Allocator::instance(void)::alloc, this, 920);
}

float md::ArrowLabelPart::localBoundsOffset(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = a1 + 768;
  if (a2)
    v2 = a1 + 840;
  return *(float *)(v2 + 40);
}

float md::ArrowLabelPart::hikerWidth(uint64_t a1, int a2)
{
  float *v2;
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v8;
  float v9;
  float v10;

  v2 = (float *)(a1 + 72);
  v3 = 312;
  if (a2)
    v2 = (float *)(a1 + 312);
  else
    v3 = 72;
  v4 = v2[2];
  v5 = *(float *)(a1 + v3);
  v6 = 0.0;
  if (v4 < v5)
    return fmaxf(0.0, 0.0);
  v8 = v2[3];
  v9 = v2[1];
  v10 = 0.0;
  if (v8 >= v9)
  {
    v6 = v4 - v5;
    v10 = v8 - v9;
  }
  return fmaxf(v6, v10);
}

uint64_t md::ArrowLabelPart::setAlignment(uint64_t result, int a2, char a3)
{
  uint64_t v3;

  v3 = result + 768;
  if (a2)
    v3 = result + 840;
  *(_BYTE *)(v3 + 66) = a3;
  return result;
}

uint64_t md::ArrowLabelPart::setLayoutStartOffset(uint64_t result, int a2, float a3)
{
  uint64_t v3;

  v3 = result + 768;
  if (a2)
    v3 = result + 840;
  *(float *)(v3 + 60) = a3;
  return result;
}

uint64_t md::ArrowLabelPart::setLayoutInReverse(uint64_t result, int a2, char a3)
{
  uint64_t v3;

  v3 = result + 768;
  if (a2)
    v3 = result + 840;
  *(_BYTE *)(v3 + 67) = a3;
  return result;
}

uint64_t md::ArrowLabelPart::setUseExternalLayoutOptions(uint64_t result, int a2, char a3)
{
  uint64_t v3;

  v3 = result + 768;
  if (a2)
    v3 = result + 840;
  *(_BYTE *)(v3 + 68) = a3;
  return result;
}

void md::ArrowLabelPart::setPosition(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v3 = a1 + 768;
  v4 = 840;
  if (a2)
    v3 = a1 + 840;
  else
    v4 = 768;
  v6 = *a3;
  v5 = a3[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + v4) = v6;
  v9 = *(std::__shared_weak_count **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

uint64_t md::ArrowLabelPart::debugString@<X0>(md::ArrowLabelPart *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  char v13;
  size_t v14;
  unint64_t v15;
  const void **v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  void *__p[2];
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  unint64_t v28;
  void *v29[2];
  __int128 v30;
  int v31;
  uint64_t v32[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v32[0] = MEMORY[0x1E0DE4FE0] + 64;
  v24 = v7;
  *(uint64_t *)((char *)&v24 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v24 + *(_QWORD *)(v24 - 24));
  std::ios_base::init(v9, &v25);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v24 = v4 + 24;
  v32[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v25 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v29 = 0u;
  v30 = 0u;
  v31 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Arrow\n ", 7);
  md::IconLabelPart::debugString(this, __p);
  if ((v23 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v23 & 0x80u) == 0)
    v12 = v23;
  else
    v12 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v24, (uint64_t)v11, v12);
  if ((char)v23 < 0)
  {
    operator delete(__p[0]);
    v13 = v31;
    if ((v31 & 0x10) == 0)
      goto LABEL_9;
LABEL_12:
    v15 = *((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1) < v28)
    {
      *((_QWORD *)&v30 + 1) = v28;
      v15 = v28;
    }
    v16 = (const void **)&v27;
    goto LABEL_16;
  }
  v13 = v31;
  if ((v31 & 0x10) != 0)
    goto LABEL_12;
LABEL_9:
  if ((v13 & 8) == 0)
  {
    v14 = 0;
    a2[23] = 0;
    goto LABEL_24;
  }
  v16 = (const void **)v26;
  v15 = v26[2];
LABEL_16:
  v17 = *v16;
  v14 = v15 - (_QWORD)*v16;
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v14 >= 0x17)
  {
    v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v18 = v14 | 7;
    v19 = v18 + 1;
    v20 = operator new(v18 + 1);
    *((_QWORD *)a2 + 1) = v14;
    *((_QWORD *)a2 + 2) = v19 | 0x8000000000000000;
    *(_QWORD *)a2 = v20;
    a2 = v20;
    goto LABEL_23;
  }
  a2[23] = v14;
  if (v14)
LABEL_23:
    memmove(a2, v17, v14);
LABEL_24:
  a2[v14] = 0;
  v24 = *v6;
  *(uint64_t *)((char *)&v24 + *(_QWORD *)(v24 - 24)) = v6[3];
  v25 = v10 + 16;
  if (SBYTE7(v30) < 0)
    operator delete(v29[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v32);
}

void sub_19FED2DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void md::ArrowLabelPart::populateDebugNode(md::ArrowLabelPart *this, gdc::DebugTreeNode *a2)
{
  char *v4;
  double v5;
  _BYTE v6[16];
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  char v13;

  md::IconLabelPart::populateDebugNode(this, a2);
  v13 = 14;
  strcpy((char *)&v12, "ArrowLabelPart");
  v4 = gdc::DebugTreeNode::createChildNode((uint64_t)a2, &v12);
  v5 = *((float *)this + 222);
  v13 = 9;
  strcpy((char *)&v12, "HalfWidth");
  v9 = 0;
  v10 = 0;
  v8 = 0;
  v11 = 2;
  v7 = v5;
  gdc::DebugTreeNode::addProperty((uint64_t)v4, (uint64_t)&v12, (uint64_t)v6);
}

int32x4_t md::ArrowLabelPart::prepareCollisionObject(uint64_t a1, int a2, int a3, void **this)
{
  uint64_t v5;
  int32x4_t result;
  char *v7;
  int v8;
  float *v9;
  float32x4_t v10;
  int16x4_t v11;
  float v12;

  v5 = a1 + 768;
  if (a2)
    v5 = a1 + 840;
  v12 = fmaxf(*(float *)(v5 + 48), *(float *)(v5 + 52));
  *(double *)result.i64 = md::CollisionObject::resetWithCircles(this, 1u);
  v7 = (char *)this[21];
  v8 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = v8 + 1;
  v9 = (float *)&v7[12 * v8];
  *(_QWORD *)v9 = 0;
  v9[2] = v12;
  if (v12 != 0.0)
  {
    *(float *)result.i32 = -v12;
    *(float *)&result.i32[1] = v12;
    v10 = (float32x4_t)vzip1q_s32(result, result);
    v11.i32[0] = vmovn_s32(vcgtq_f32(*(float32x4_t *)this, v10)).u32[0];
    v11.i32[1] = vmovn_s32(vcgtq_f32(v10, *(float32x4_t *)this)).i32[1];
    result = (int32x4_t)vbslq_s8((int8x16_t)vmovl_s16(v11), (int8x16_t)v10, *(int8x16_t *)this);
    *(int32x4_t *)this = result;
  }
  return result;
}

BOOL gm::Ray<float,3>::segmentIntersectsBox(float *a1, float *a2, float *a3, float *a4)
{
  float v4;
  float v5;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;

  *a3 = 0.0;
  *a4 = 3.4028e38;
  v4 = a1[3];
  v5 = *a2;
  if (fabsf(v4) >= 0.000001)
  {
    v7 = 1.0 / v4;
    v8 = (float)(v5 - *a1) * v7;
    v9 = (float)(a2[3] - *a1) * v7;
    *a3 = fmaxf(*a3, fminf(v8, v9));
    v10 = fminf(fmaxf(v8, v9), *a4);
    *a4 = v10;
    if (*a3 > v10)
      return 0;
  }
  else if (*a1 < v5 || *a1 > a2[3])
  {
    return 0;
  }
  v11 = a1[4];
  if (fabsf(v11) >= 0.000001)
  {
    v13 = 1.0 / v11;
    v14 = a1[1];
    v15 = (float)(a2[1] - v14) * v13;
    v16 = (float)(a2[4] - v14) * v13;
    *a3 = fmaxf(*a3, fminf(v15, v16));
    v17 = fminf(fmaxf(v15, v16), *a4);
    *a4 = v17;
    if (*a3 > v17)
      return 0;
  }
  else
  {
    v12 = a1[1];
    if (v12 < a2[1] || v12 > a2[4])
      return 0;
  }
  v18 = a1[5];
  if (fabsf(v18) < 0.000001)
  {
    v19 = a1[2];
    return v19 >= a2[2] && v19 <= a2[5];
  }
  v21 = 1.0 / v18;
  v22 = a1[2];
  v23 = (float)(a2[2] - v22) * v21;
  v24 = (float)(a2[5] - v22) * v21;
  *a3 = fmaxf(*a3, fminf(v23, v24));
  v25 = fminf(fmaxf(v23, v24), *a4);
  *a4 = v25;
  return *a3 <= v25;
}

BOOL gm::Ray<double,3>::segmentIntersectsBox(double *a1, double *a2, double *a3, double *a4, double a5)
{
  double v5;
  double v6;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;

  *a3 = 0.0;
  *a4 = a5;
  v5 = a1[3];
  v6 = *a2;
  if (fabs(v5) >= 0.000001)
  {
    v8 = 1.0 / v5;
    v9 = (v6 - *a1) * v8;
    v10 = (a2[3] - *a1) * v8;
    *a3 = fmax(*a3, fmin(v9, v10));
    v11 = fmin(fmax(v9, v10), *a4);
    *a4 = v11;
    if (*a3 > v11)
      return 0;
  }
  else if (*a1 < v6 || *a1 > a2[3])
  {
    return 0;
  }
  v12 = a1[4];
  if (fabs(v12) >= 0.000001)
  {
    v14 = 1.0 / v12;
    v15 = a1[1];
    v16 = (a2[1] - v15) * v14;
    v17 = (a2[4] - v15) * v14;
    *a3 = fmax(*a3, fmin(v16, v17));
    v18 = fmin(fmax(v16, v17), *a4);
    *a4 = v18;
    if (*a3 > v18)
      return 0;
  }
  else
  {
    v13 = a1[1];
    if (v13 < a2[1] || v13 > a2[4])
      return 0;
  }
  v19 = a1[5];
  if (fabs(v19) < 0.000001)
  {
    v20 = a1[2];
    return v20 >= a2[2] && v20 <= a2[5];
  }
  v22 = 1.0 / v19;
  v23 = a1[2];
  v24 = (a2[2] - v23) * (1.0 / v19);
  v25 = (a2[5] - v23) * v22;
  *a3 = fmax(*a3, fmin(v24, v25));
  v26 = fmin(fmax(v24, v25), *a4);
  *a4 = v26;
  return *a3 <= v26;
}

void gm::Matrix<double,3,1>::description(uint64_t a1, double *a2)
{
  size_t v4;
  size_t v5;
  size_t v6;
  std::string::value_type __s[8];
  char v8;

  *(_BYTE *)(a1 + 23) = 0;
  *(_BYTE *)a1 = 0;
  v8 = 1;
  strcpy(__s, "(");
  std::string::append((std::string *)a1, __s, 1uLL);
  if (v8 < 0)
    operator delete(*(void **)__s);
  snprintf(__s, 7uLL, "%3.6f", *a2);
  v4 = strlen(__s);
  std::string::append((std::string *)a1, __s, v4);
  v8 = 2;
  strcpy(__s, ")\n");
  std::string::append((std::string *)a1, __s, 2uLL);
  if (v8 < 0)
    operator delete(*(void **)__s);
  v8 = 1;
  strcpy(__s, "(");
  std::string::append((std::string *)a1, __s, 1uLL);
  if (v8 < 0)
    operator delete(*(void **)__s);
  snprintf(__s, 7uLL, "%3.6f", a2[1]);
  v5 = strlen(__s);
  std::string::append((std::string *)a1, __s, v5);
  v8 = 2;
  strcpy(__s, ")\n");
  std::string::append((std::string *)a1, __s, 2uLL);
  if (v8 < 0)
    operator delete(*(void **)__s);
  v8 = 1;
  strcpy(__s, "(");
  std::string::append((std::string *)a1, __s, 1uLL);
  if (v8 < 0)
    operator delete(*(void **)__s);
  snprintf(__s, 7uLL, "%3.6f", a2[2]);
  v6 = strlen(__s);
  std::string::append((std::string *)a1, __s, v6);
  v8 = 2;
  strcpy(__s, ")\n");
  std::string::append((std::string *)a1, __s, 2uLL);
  if (v8 < 0)
    operator delete(*(void **)__s);
}

BOOL gm::Matrix<float,3,4>::isWithinEpsilon(float *a1, float *a2)
{
  return vabds_f32(*a1, *a2) < 0.0001
      && vabds_f32(a1[1], a2[1]) < 0.0001
      && vabds_f32(a1[2], a2[2]) < 0.0001
      && vabds_f32(a1[3], a2[3]) < 0.0001
      && vabds_f32(a1[4], a2[4]) < 0.0001
      && vabds_f32(a1[5], a2[5]) < 0.0001
      && vabds_f32(a1[6], a2[6]) < 0.0001
      && vabds_f32(a1[7], a2[7]) < 0.0001
      && vabds_f32(a1[8], a2[8]) < 0.0001
      && vabds_f32(a1[9], a2[9]) < 0.0001
      && vabds_f32(a1[10], a2[10]) < 0.0001
      && vabds_f32(a1[11], a2[11]) < 0.0001;
}

void gm::Matrix<double,4,4>::description(std::string *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t i;
  _BYTE *v6;
  size_t v7;
  size_t v8;
  int v9;
  std::string::size_type v10;
  size_t size;
  std::string::size_type v12;
  std::string *v13;
  unint64_t v14;
  size_t v15;
  std::string *v16;
  std::string::size_type v17;
  _BYTE *v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  std::string::size_type v22;
  int v23;
  std::string::size_type v24;
  size_t v25;
  std::string::size_type v26;
  std::string *v27;
  unint64_t v28;
  uint64_t v29;
  size_t v30;
  std::string *v31;
  std::string::size_type v32;
  void *v33;
  std::string::size_type v34;
  uint64_t v35;
  std::string::value_type __s[8];
  char v37;

  v4 = 0;
  *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
  this->__r_.__value_.__s.__data_[0] = 0;
  do
  {
    v35 = v4;
    v37 = 1;
    strcpy(__s, "(");
    std::string::append(this, __s, 1uLL);
    if (v37 < 0)
      operator delete(*(void **)__s);
    for (i = 0; ; i += 32)
    {
      snprintf(__s, 7uLL, "%3.6f", *(double *)(a2 + i));
      v7 = strlen(__s);
      v8 = v7;
      v9 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
      if (v9 >= 0)
        v10 = 22;
      else
        v10 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v9 >= 0)
        size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      else
        size = this->__r_.__value_.__l.__size_;
      if (v10 - size < v7)
      {
        v12 = size + v7;
        if (0x7FFFFFFFFFFFFFF6 - v10 < size + v7 - v10)
          goto LABEL_77;
        if (v9 >= 0)
          v13 = this;
        else
          v13 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v10 >= 0x3FFFFFFFFFFFFFF3)
        {
          v19 = 0x7FFFFFFFFFFFFFF6;
        }
        else
        {
          v14 = 2 * v10;
          if (v12 > 2 * v10)
            v14 = size + v7;
          if (v14 < 0x17)
          {
            v15 = 23;
LABEL_37:
            v21 = operator new(v15);
            v22 = (std::string::size_type)v21;
            if (size)
              memmove(v21, v13, size);
            memcpy((void *)(v22 + size), __s, v8);
            if (v10 != 22)
              operator delete(v13);
            this->__r_.__value_.__l.__size_ = v12;
            this->__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
            this->__r_.__value_.__r.__words[0] = v22;
            v18 = (_BYTE *)(v22 + v12);
            goto LABEL_42;
          }
          v20 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
          v19 = v14 | 7;
          if (v19 == 23)
            v19 = v20;
        }
        v15 = v19 + 1;
        goto LABEL_37;
      }
      if (!v7)
        goto LABEL_43;
      v16 = v9 >= 0 ? this : (std::string *)this->__r_.__value_.__r.__words[0];
      memmove((char *)v16 + size, __s, v7);
      v17 = size + v8;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        this->__r_.__value_.__l.__size_ = v17;
      else
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
      v18 = (char *)v16 + v17;
LABEL_42:
      *v18 = 0;
LABEL_43:
      if (i == 96)
        break;
      v23 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
      if (v23 >= 0)
        v24 = 22;
      else
        v24 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v23 >= 0)
        v25 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      else
        v25 = this->__r_.__value_.__l.__size_;
      if (v24 - v25 >= 2)
      {
        if (v23 >= 0)
          v31 = this;
        else
          v31 = (std::string *)this->__r_.__value_.__r.__words[0];
        *(_WORD *)((char *)&v31->__r_.__value_.__l.__data_ + v25) = 8236;
        v32 = v25 + 2;
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
          this->__r_.__value_.__l.__size_ = v32;
        else
          *((_BYTE *)&this->__r_.__value_.__s + 23) = v32 & 0x7F;
        v6 = (char *)v31 + v32;
      }
      else
      {
        v26 = v25 + 2;
        if (0x7FFFFFFFFFFFFFF6 - v24 < v25 + 2 - v24)
LABEL_77:
          abort();
        if (v23 >= 0)
          v27 = this;
        else
          v27 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v24 >= 0x3FFFFFFFFFFFFFF3)
        {
          v30 = 0x7FFFFFFFFFFFFFF7;
        }
        else
        {
          v28 = 2 * v24;
          if (v26 > 2 * v24)
            v28 = v25 + 2;
          v29 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v28 | 7) != 0x17)
            v29 = v28 | 7;
          if (v28 >= 0x17)
            v30 = v29 + 1;
          else
            v30 = 23;
        }
        v33 = operator new(v30);
        v34 = (std::string::size_type)v33;
        if (v25)
          memmove(v33, v27, v25);
        *(_WORD *)(v34 + v25) = 8236;
        if (v24 != 22)
          operator delete(v27);
        this->__r_.__value_.__l.__size_ = v26;
        this->__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
        this->__r_.__value_.__r.__words[0] = v34;
        v6 = (_BYTE *)(v34 + v26);
      }
      *v6 = 0;
    }
    v37 = 2;
    strcpy(__s, ")\n");
    std::string::append(this, __s, 2uLL);
    if (v37 < 0)
      operator delete(*(void **)__s);
    v4 = v35 + 1;
    a2 += 8;
  }
  while (v35 != 3);
}

void gm::Quaternion<double>::slerp(double *a1, double *a2, double a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  long double v19;
  long double v20;
  long double v21;
  long double v22;
  long double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;

  v7 = *a1;
  v6 = a1[1];
  v8 = *a2;
  v10 = a1[2];
  v9 = a1[3];
  v11 = *a2 * *a1 + a2[1] * v6 + a2[2] * v10 + a2[3] * v9;
  if (v11 >= 1.0 || v11 <= -1.0)
  {
    *a1 = v8;
    a1[1] = a2[1];
    a1[2] = a2[2];
    v13 = a2[3];
  }
  else
  {
    v14 = fabs(v11);
    if (v14 <= 0.95)
    {
      v19 = acos(v14);
      v20 = sin(v19);
      v21 = v19 - a3 * v19;
      v34 = a3;
      v22 = 1.0 / v20;
      v23 = sin(v21) * (1.0 / v20);
      v24 = sin(v19 * v34) * v22;
      v25 = v23 * v7;
      v26 = v23 * v6;
      *a1 = v23 * v7;
      a1[1] = v23 * v6;
      v27 = v23 * v10;
      v28 = v23 * v9;
      a1[2] = v23 * v10;
      a1[3] = v23 * v9;
      v30 = *a2;
      v29 = a2[1];
      v32 = a2[2];
      v31 = a2[3];
      if (v11 <= 0.0)
      {
        *a1 = v25 - v30 * v24;
        a1[1] = v26 - v29 * v24;
        a1[2] = v27 - v32 * v24;
        v13 = v28 - v31 * v24;
      }
      else
      {
        *a1 = v25 + v30 * v24;
        a1[1] = v26 + v29 * v24;
        a1[2] = v27 + v32 * v24;
        v13 = v28 + v31 * v24;
      }
    }
    else
    {
      if (v11 <= 0.0)
      {
        *a1 = -v7;
        a1[1] = -v6;
        a1[2] = -v10;
        a1[3] = -v9;
        v15 = -(v7 - (*a2 + v7) * a3);
        *a1 = v15;
        v16 = -(v6 - (a2[1] + v6) * a3);
        a1[1] = v16;
        v17 = -(v10 - (a2[2] + v10) * a3);
        a1[2] = v17;
        v18 = -(v9 - (a2[3] + v9) * a3);
      }
      else
      {
        v15 = v7 + (v8 - v7) * a3;
        *a1 = v15;
        v16 = v6 + (a2[1] - v6) * a3;
        a1[1] = v16;
        v17 = v10 + (a2[2] - v10) * a3;
        a1[2] = v17;
        v18 = v9 + (a2[3] - v9) * a3;
      }
      v33 = 1.0 / sqrt(v15 * v15 + v16 * v16 + v17 * v17 + v18 * v18);
      *a1 = v33 * v15;
      a1[1] = v33 * v16;
      a1[2] = v33 * v17;
      v13 = v33 * v18;
    }
  }
  a1[3] = v13;
}

void sub_19FED3C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19FED42D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, ggl::BufferMemory *a9, ggl::BufferMemory *a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  void *v31;
  uint64_t v32;
  md::DynamicTrafficTileList *v33;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v32);
  if (a31)
    std::default_delete<md::MeshSetStorage>::operator()[abi:nn180100](a31);
  ggl::BufferMemory::~BufferMemory(a10);
  ggl::BufferMemory::~BufferMemory(a9);
  md::DynamicTrafficTileList::~DynamicTrafficTileList(v33);
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19FED4340(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 - 128);
  _Unwind_Resume(a1);
}

void sub_19FED44FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_19FED4B6C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19FED4B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19FED5000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19FED50A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x19FED5098);
}

void sub_19FED61F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21)
{
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;

  do
    v24 = __ldaxr(v22);
  while (__stlxr(v24 - 1, v22));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  if (a19)
  {
    p_shared_owners = (unint64_t *)&a19->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))a19->__on_zero_shared)(a19);
      std::__shared_weak_count::__release_weak(a19);
    }
  }
  if (a21)
  {
    v27 = (unint64_t *)&a21->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
      std::__shared_weak_count::__release_weak(a21);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19FED6794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;

  MEMORY[0x1A1AF4E00](v17, 0x10F1C40141CD30ALL);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19FED6950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19FED6B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19FED7024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v28;
  uint64_t v29;

  v28 = a27;
  if (a27 == &a24)
  {
    v29 = 4;
    v28 = &a24;
  }
  else
  {
    if (!a27)
      _Unwind_Resume(exception_object);
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
  _Unwind_Resume(exception_object);
}

void sub_19FED7798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a16 < 0)
  {
    operator delete(a11);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a30 & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_5:
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker(v30 - 88);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(__p);
  goto LABEL_5;
}

void sub_19FED7804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if ((a24 & 0x80000000) == 0)
    JUMPOUT(0x19FED77BCLL);
  JUMPOUT(0x19FED77B4);
}

void sub_19FED7814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  va_list va;

  va_start(va, a11);
  v13 = *(std::__shared_weak_count **)(v11 - 64);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(std::__shared_weak_count **)(v11 - 80);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ggl::PolygonCommonStroke::MeshMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3778;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::PolygonCommonStroke::MeshMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3778;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::PolygonCommonStroke::MeshMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonCommonStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonCommonStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonCommonStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonCommonStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CBFD8;
  return result;
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonCommonStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonCommonStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CBFD8;
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonCommonStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonCommonStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::operator()(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[2];

  v7 = *a1;
  v8 = operator new(0xF8uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E42E0100;
  v10 = v8 + 3;
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(std::__shared_weak_count **)(a2 + 32);
  v17[0] = v11;
  v17[1] = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  ggl::BufferData::BufferData((uint64_t)(v8 + 3), 24, v17, *a3, a3[1], 1);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v9[29] = v7;
  v9[30] = &ggl::PolygonCommonStroke::defaultVboReflection;
  v9[3] = &off_1E42B7DE0;
  v9[28] = &unk_1E42B7E00;
  *a4 = v10;
  a4[1] = v9;
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolygonCommonStroke::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0100;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolygonCommonStroke::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0100;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolygonCommonStroke::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::PuckLocationAnimationTracingLogic::~PuckLocationAnimationTracingLogic(id *this)
{
  md::PuckLocationAnimationTracingLogic::~PuckLocationAnimationTracingLogic(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  md::PuckLocationAnimationTracingLogic *v2;
  uint64_t v3;
  void **v4;
  void **v5;
  void **v6;
  void *v7;
  _BYTE *v8;
  _BYTE *v9;
  void **v10;
  void **v11;
  void **v12;
  void *v13;
  _BYTE *v14;
  _BYTE *v15;

  *this = &off_1E42A96B0;
  md::PuckLocationAnimationTracingLogic::tearDownTracing((md::PuckLocationAnimationTracingLogic *)this);
  v2 = (md::PuckLocationAnimationTracingLogic *)this[46];
  if (v2 == (md::PuckLocationAnimationTracingLogic *)(this + 43))
  {
    v3 = 4;
    v2 = (md::PuckLocationAnimationTracingLogic *)(this + 43);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
  }

  v4 = this + 36;
  std::deque<std::pair<unsigned long,md::PuckAnimationTraceEvent>>::clear(this + 36);
  v5 = (void **)this[37];
  v6 = (void **)this[38];
  if (v5 != v6)
  {
    do
    {
      v7 = *v5++;
      operator delete(v7);
    }
    while (v5 != v6);
    v9 = this[37];
    v8 = this[38];
    if (v8 != v9)
      this[38] = &v8[(v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*v4)
    operator delete(*v4);
  v10 = this + 30;
  std::deque<md::PuckAnimationTraceEvent>::clear(this + 30);
  v11 = (void **)this[31];
  v12 = (void **)this[32];
  if (v11 != v12)
  {
    do
    {
      v13 = *v11++;
      operator delete(v13);
    }
    while (v11 != v12);
    v15 = this[31];
    v14 = this[32];
    if (v14 != v15)
      this[32] = &v14[(v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*v10)
    operator delete(*v10);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)(this + 20));
  *this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(this[13]);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(this[10]);
}

uint64_t md::Logic<md::PuckLocationAnimationTracingLogic,md::PuckLocationAnimationTracingContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a3 + 8) != 0xA81ACD73F9C92AA1 || !*(_QWORD *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int8x8_t)v4[1];
  if (!*(_QWORD *)&v5)
    goto LABEL_27;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = 0x1B8B241A8D896A1DLL;
    if (*(_QWORD *)&v5 <= 0x1B8B241A8D896A1DuLL)
      v7 = 0x1B8B241A8D896A1DuLL % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & 0x1B8B241A8D896A1DLL;
  }
  v8 = *(_QWORD **)(*v4 + 8 * v7);
  if (!v8)
    goto LABEL_27;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_27;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == 0x1B8B241A8D896A1DLL)
      {
        if (v9[2] == 0x1B8B241A8D896A1DLL)
          goto LABEL_25;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_27;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == 0x1B8B241A8D896A1DLL)
      break;
    if (v11 >= *(_QWORD *)&v5)
      v11 %= *(_QWORD *)&v5;
    if (v11 != v7)
      goto LABEL_27;
LABEL_14:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_27;
  }
  if (v9[2] != 0x1B8B241A8D896A1DLL)
    goto LABEL_14;
LABEL_25:
  v13 = v9[5];
  if (*(_QWORD *)(v13 + 8) == 0x1B8B241A8D896A1DLL)
  {
    v14 = *(_QWORD *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  v14 = 0;
LABEL_28:
  v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
}

uint64_t md::Logic<md::PuckLocationAnimationTracingLogic,md::PuckLocationAnimationTracingContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::Logic<md::PuckLocationAnimationTracingLogic,md::PuckLocationAnimationTracingContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

void md::PuckLocationAnimationTracingLogic::publishEvent(uint64_t a1, uint64_t a2, int a3)
{
  void *v6;
  int v7;
  VKNavigationPuckLocationTracingEvent *v8;
  uint64_t v9;
  VKNavigationPuckLocationTracingEvent *v10;

  if (*(_QWORD *)(a1 + 368))
  {
    objc_msgSend(MEMORY[0x1E0D27368], "sharedPlatform");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isInternalInstall");

    if (v7)
    {
      v8 = -[VKNavigationPuckLocationTracingEvent initWithEventType:timestamp:locationUUID:]([VKNavigationPuckLocationTracingEvent alloc], "initWithEventType:timestamp:locationUUID:", qword_1A007EEC0[a3], *(_QWORD *)(a2 + 24), CFAbsoluteTimeGetCurrent());
      v10 = v8;
      v9 = *(_QWORD *)(a1 + 368);
      if (v9)
      {
        (*(void (**)(uint64_t, VKNavigationPuckLocationTracingEvent **))(*(_QWORD *)v9 + 48))(v9, &v10);

      }
      else
      {
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
      }
    }
  }
}

void sub_19FED872C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19FED8744(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL30GEOGetVectorKitPuckTrackingLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "PuckTracking");
  v1 = (void *)GEOGetVectorKitPuckTrackingLog(void)::log;
  GEOGetVectorKitPuckTrackingLog(void)::log = (uint64_t)v0;

}

_QWORD *gdc::ManagedObjectHolder<md::PuckLocationAnimationTracingContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B1658;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::PuckLocationAnimationTracingContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B1658;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::PuckLocationAnimationTracingContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void sub_19FED8968(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 + 368);
  if (v3 == (_QWORD *)(v1 + 344))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 + 344);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:

  std::queue<std::pair<unsigned long,md::PuckAnimationTraceEvent>>::~queue((void **)(v1 + 288));
  std::queue<md::PuckAnimationTraceEvent>::~queue((void **)(v1 + 240));
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(v1 + 160);
  md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic(v1);
  _Unwind_Resume(a1);
}

void md::PuckLocationAnimationTracingLogic::tearDownTracing(md::PuckLocationAnimationTracingLogic *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  id *v5;
  uint64_t v6;
  unint64_t v7;
  id *v8;
  uint64_t v9;

  if (*((_BYTE *)this + 136))
  {
    objc_msgSend(*((id *)this + 42), "unsubscribeFromLocationUpdates:", *((_QWORD *)this + 16));
    if (*((_BYTE *)this + 136))
      *((_BYTE *)this + 136) = 0;
  }
  if (*((_BYTE *)this + 152))
  {
    v2 = *((_QWORD *)this + 15);
    v3 = *((_QWORD *)this + 18);
    std::mutex::lock((std::mutex *)v2);
    std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>>>::__erase_unique<unsigned long>((uint64_t *)(v2 + 72), v3);
    std::mutex::unlock((std::mutex *)v2);
    if (*((_BYTE *)this + 152))
      *((_BYTE *)this + 152) = 0;
  }
  if (*((_QWORD *)this + 35))
  {
    v4 = *((_QWORD *)this + 34);
    do
    {
      md::PuckLocationAnimationTracingLogic::publishEvent((uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 31) + ((v4 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v4 & 0x7F), 0);
      v5 = (id *)(*(_QWORD *)(*((_QWORD *)this + 31) + ((*((_QWORD *)this + 34) >> 4) & 0xFFFFFFFFFFFFFF8))
                + 32 * (*((_QWORD *)this + 34) & 0x7FLL));

      v6 = *((_QWORD *)this + 35) - 1;
      v4 = *((_QWORD *)this + 34) + 1;
      *((_QWORD *)this + 34) = v4;
      *((_QWORD *)this + 35) = v6;
      if (v4 >= 0x100)
      {
        operator delete(**((void ***)this + 31));
        *((_QWORD *)this + 31) += 8;
        v6 = *((_QWORD *)this + 35);
        v4 = *((_QWORD *)this + 34) - 128;
        *((_QWORD *)this + 34) = v4;
      }
    }
    while (v6);
  }
  if (*((_QWORD *)this + 41))
  {
    v7 = *((_QWORD *)this + 40);
    do
    {
      md::PuckLocationAnimationTracingLogic::publishEvent((uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 37) + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66) + 8, 0);
      v8 = (id *)(*(_QWORD *)(*((_QWORD *)this + 37) + 8 * (*((_QWORD *)this + 40) / 0x66uLL))
                + 40 * (*((_QWORD *)this + 40) % 0x66uLL));

      v9 = *((_QWORD *)this + 41) - 1;
      v7 = *((_QWORD *)this + 40) + 1;
      *((_QWORD *)this + 40) = v7;
      *((_QWORD *)this + 41) = v9;
      if (v7 >= 0xCC)
      {
        operator delete(**((void ***)this + 37));
        *((_QWORD *)this + 37) += 8;
        v9 = *((_QWORD *)this + 41);
        v7 = *((_QWORD *)this + 40) - 102;
        *((_QWORD *)this + 40) = v7;
      }
    }
    while (v9);
  }
}

void sub_19FED8BC4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::deque<std::pair<unsigned long,md::PuckAnimationTraceEvent>>::clear(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  id *v7;
  unint64_t v8;
  id *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x66];
    v7 = (id *)((char *)*v6 + 40 * (v5 % 0x66));
    v8 = (unint64_t)v2[(a1[5] + v5) / 0x66] + 40 * ((a1[5] + v5) % 0x66);
    if (v7 != (id *)v8)
    {
      do
      {

        v7 += 5;
        if ((char *)v7 - (_BYTE *)*v6 == 4080)
        {
          v9 = (id *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (id *)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if (v10 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v11 = a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = v11 - (_QWORD)v2;
    }
    while (v10 > 0x10);
  }
  if (v10 >> 3 == 1)
  {
    v12 = 51;
  }
  else
  {
    if (v10 >> 3 != 2)
      return;
    v12 = 102;
  }
  a1[4] = v12;
}

void std::deque<md::PuckAnimationTraceEvent>::clear(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 7];
    v7 = (uint64_t)*v6 + 32 * (v5 & 0x7F);
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((a1[5] + v5) & 0x7F);
    if (v7 != v8)
    {
      do
      {

        v9 = *(void **)v7;
        v7 += 32;

        if (v7 - (_QWORD)*v6 == 4096)
        {
          v10 = (uint64_t)v6[1];
          ++v6;
          v7 = v10;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if (v11 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v12 = a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = v12 - (_QWORD)v2;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    v13 = 64;
  }
  else
  {
    if (v11 >> 3 != 2)
      return;
    v13 = 128;
  }
  a1[4] = v13;
}

void **std::queue<std::pair<unsigned long,md::PuckAnimationTraceEvent>>::~queue(void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  _BYTE *v5;
  _BYTE *v6;

  std::deque<std::pair<unsigned long,md::PuckAnimationTraceEvent>>::clear(a1);
  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    v6 = a1[1];
    v5 = a1[2];
    if (v5 != v6)
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*a1)
    operator delete(*a1);
  return a1;
}

void **std::queue<md::PuckAnimationTraceEvent>::~queue(void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  _BYTE *v5;
  _BYTE *v6;

  std::deque<md::PuckAnimationTraceEvent>::clear(a1);
  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    v6 = a1[1];
    v5 = a1[2];
    if (v5 != v6)
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*a1)
    operator delete(*a1);
  return a1;
}

_QWORD *md::PuckLocationAnimationTracingLogic::setupTracing(_QWORD *this)
{
  uint64_t v1;
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 136))
    return this;
  v1 = (uint64_t)this;
  if (*((_BYTE *)this + 152))
    return this;
  v2 = (void *)this[42];
  v3 = operator new(0x20uLL);
  *v3 = &off_1E42C6C78;
  v3[1] = md::PuckLocationAnimationTracingLogic::puckAnimatorDidRecieveLocationUpdate;
  v3[2] = 0;
  v3[3] = v1;
  v12 = v3;
  *(_QWORD *)(v1 + 128) = objc_msgSend(v2, "subscribeToLocationUpdates:", v11);
  *(_BYTE *)(v1 + 136) = 1;
  v4 = v12;
  if (v12 == v11)
  {
    v5 = 4;
    v4 = v11;
    goto LABEL_7;
  }
  if (v12)
  {
    v5 = 5;
LABEL_7:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  v6 = *(_QWORD *)(v1 + 120);
  v7 = operator new(0x20uLL);
  *v7 = &off_1E42C6CC0;
  v7[1] = md::PuckLocationAnimationTracingLogic::didDisplayFrame;
  v7[2] = 0;
  v7[3] = v1;
  v10 = v7;
  md::MapEngineSignals::ThreadSafeSignal<unsigned long>::connect(v6, v9);
  this = v10;
  if (v10 == v9)
  {
    v8 = 4;
    this = v9;
  }
  else
  {
    if (!v10)
      return this;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v8))();
}

void sub_19FED9050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
  _Unwind_Resume(exception_object);
}

void md::PuckLocationAnimationTracingLogic::puckAnimatorDidRecieveLocationUpdate(md::PuckLocationAnimationTracingLogic *this, VKPuckAnimator *a2, CLLocation *a3, GEORouteMatch *a4, NSUUID *a5)
{
  VKPuckAnimator *v9;
  GEORouteMatch *v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  long double v17;
  long double v18;
  long double v19;
  uint64_t v20;
  CLLocation *v21;
  NSUUID *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  void *v45;
  char *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  BOOL v52;
  int64_t v53;
  unint64_t v54;
  char *v55;
  void *v56;
  char *v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  _OWORD *v70;
  uint64_t v71;
  __int128 v72;
  unint64_t v73;
  void *v74;
  char *v75;
  char *v76;
  char *v77;
  void *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  int64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 *v93;
  char *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  __int128 *v101;
  _OWORD *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  CLLocation **v106;
  NSObject *v107;
  NSUUID *v108;
  void *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  int64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  int64_t v124;
  unint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  __int128 *v130;
  _OWORD *v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  NSUUID *v136;
  CLLocation *v137;
  VKPuckAnimator *v138;
  CLLocation *v139;
  NSUUID *v140;
  _BYTE buf[24];
  NSUUID *v142;
  __int16 v143;
  void *v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v139 = a3;
  v10 = a4;
  v140 = a5;
  if (!v10)
    goto LABEL_100;
  -[GEORouteMatch route](v10, "route");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v11)
    goto LABEL_100;
  v138 = v9;
  -[VKPuckAnimator lastProjectedPosition](v9, "lastProjectedPosition");
  v13 = v12;
  -[VKPuckAnimator lastProjectedPosition](v9, "lastProjectedPosition");
  v15 = v14;
  -[GEORouteMatch route](v10, "route");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = exp(v15 * 6.28318531 + -3.14159265);
  v18 = atan(v17) * 114.591559 + -90.0;
  v19 = fmod(v13 * 6.28318531, 6.28318531);
  v20 = objc_msgSend(v16, "closestPointOnRoute:", (double)v18, (double)(fmod(v19 + 6.28318531, 6.28318531) * 57.2957795 + -180.0));

  v21 = v139;
  *(_QWORD *)buf = v21;
  *(_QWORD *)&buf[8] = v20;
  if (*((float *)&v20 + 1) >= 1.0)
  {
    *(_DWORD *)&buf[8] = vcvtms_u32_f32(*((float *)&v20 + 1)) + v20;
    *(float *)&buf[12] = *((float *)&v20 + 1) - floorf(*((float *)&v20 + 1));
  }
  v137 = v21;
  -[GEORouteMatch route](v10, "route");
  v135 = objc_claimAutoreleasedReturnValue();
  *(_QWORD *)&buf[16] = v135;
  v22 = v140;
  v23 = (char *)*((_QWORD *)this + 32);
  v24 = (char *)*((_QWORD *)this + 31);
  v25 = v23 - v24;
  v136 = v22;
  v142 = v22;
  if (v23 == v24)
    v26 = 0;
  else
    v26 = 16 * (v23 - v24) - 1;
  v27 = *((_QWORD *)this + 34);
  v28 = *((_QWORD *)this + 35) + v27;
  if (v26 == v28)
  {
    if (v27 >= 0x80)
    {
      *((_QWORD *)this + 34) = v27 - 128;
      v30 = v24 + 8;
      v29 = *(_QWORD *)v24;
      *((_QWORD *)this + 31) = v24 + 8;
      if (*((char **)this + 33) != v23)
      {
LABEL_90:
        *(_QWORD *)v23 = v29;
        goto LABEL_91;
      }
      v31 = (char *)*((_QWORD *)this + 30);
      if (v30 > v31)
      {
        v32 = (v30 - v31) >> 3;
        if (v32 >= -1)
          v33 = v32 + 1;
        else
          v33 = v32 + 2;
        v34 = v33 >> 1;
        v35 = -v34;
        v36 = &v30[-8 * v34];
        v37 = v23 - v30;
        if (v23 == v30)
        {
          v38 = v23;
        }
        else
        {
          memmove(&v30[-8 * v34], v30, v23 - v30);
          v38 = (char *)*((_QWORD *)this + 31);
        }
        v23 = &v36[v37];
        *((_QWORD *)this + 31) = &v38[8 * v35];
        *((_QWORD *)this + 32) = &v36[v37];
        goto LABEL_90;
      }
      if (v23 == v31)
        v49 = 1;
      else
        v49 = (v23 - v31) >> 2;
      if (!(v49 >> 61))
      {
        v50 = (char *)operator new(8 * v49);
        v51 = &v50[8 * (v49 >> 2)];
        v53 = v23 - v30;
        v52 = v23 == v30;
        v23 = v51;
        if (v52)
          goto LABEL_88;
        v23 = &v51[v53 & 0xFFFFFFFFFFFFFFF8];
        v54 = v53 - 8;
        if (v54 >= 0x38)
        {
          v98 = &v50[8 * (v49 >> 2)];
          v55 = v98;
          if ((unint64_t)(v98 - v30) >= 0x20)
          {
            v99 = (v54 >> 3) + 1;
            v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
            v55 = &v51[v100];
            v101 = (__int128 *)(v24 + 24);
            v102 = v98 + 16;
            v103 = v99 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v104 = *v101;
              *(v102 - 1) = *(v101 - 1);
              *v102 = v104;
              v101 += 2;
              v102 += 2;
              v103 -= 4;
            }
            while (v103);
            if (v99 == (v99 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_88:
              *((_QWORD *)this + 30) = v50;
              *((_QWORD *)this + 31) = v51;
              *((_QWORD *)this + 32) = v23;
              *((_QWORD *)this + 33) = &v50[8 * v49];
              if (v31)
              {
                operator delete(v31);
                v23 = (char *)*((_QWORD *)this + 32);
              }
              goto LABEL_90;
            }
            v30 += v100;
          }
        }
        else
        {
          v55 = &v50[8 * (v49 >> 2)];
        }
        do
        {
          v105 = *(_QWORD *)v30;
          v30 += 8;
          *(_QWORD *)v55 = v105;
          v55 += 8;
        }
        while (v55 != v23);
        goto LABEL_88;
      }
LABEL_129:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    v39 = v25 >> 3;
    v40 = (char *)*((_QWORD *)this + 33);
    v41 = (char *)*((_QWORD *)this + 30);
    v42 = v40 - v41;
    if (v25 >> 3 < (unint64_t)((v40 - v41) >> 3))
    {
      if (v40 != v23)
      {
        *(_QWORD *)v23 = operator new(0x1000uLL);
LABEL_91:
        *((_QWORD *)this + 32) += 8;
LABEL_92:
        v24 = (char *)*((_QWORD *)this + 31);
        v28 = *((_QWORD *)this + 35) + *((_QWORD *)this + 34);
        goto LABEL_93;
      }
      v56 = operator new(0x1000uLL);
      v57 = v24;
      if (v41 != v24)
      {
LABEL_105:
        *((_QWORD *)v57 - 1) = v56;
        v112 = (char *)*((_QWORD *)this + 31);
        v111 = (char *)*((_QWORD *)this + 32);
        *((_QWORD *)this + 31) = v112 - 8;
        v113 = *((_QWORD *)v112 - 1);
        *((_QWORD *)this + 31) = v112;
        if (v111 != *((char **)this + 33))
        {
LABEL_106:
          *(_QWORD *)v111 = v113;
          goto LABEL_91;
        }
        v114 = (char *)*((_QWORD *)this + 30);
        if (v112 > v114)
        {
          v115 = (v112 - v114) >> 3;
          if (v115 >= -1)
            v116 = v115 + 1;
          else
            v116 = v115 + 2;
          v117 = v116 >> 1;
          v118 = -v117;
          v119 = &v112[-8 * v117];
          v120 = v111 - v112;
          if (v111 != v112)
          {
            memmove(&v112[-8 * v117], v112, v111 - v112);
            v112 = (char *)*((_QWORD *)this + 31);
          }
          *((_QWORD *)this + 31) = &v112[8 * v118];
          *((_QWORD *)this + 32) = &v119[v120];
          *(_QWORD *)&v119[v120] = v113;
          goto LABEL_91;
        }
        if (v111 == v114)
          v121 = 1;
        else
          v121 = (v111 - v114) >> 2;
        if (v121 >> 61)
          goto LABEL_129;
        v122 = (char *)operator new(8 * v121);
        v123 = &v122[8 * (v121 >> 2)];
        v124 = v111 - v112;
        v52 = v111 == v112;
        v111 = v123;
        if (!v52)
        {
          v111 = &v123[v124 & 0xFFFFFFFFFFFFFFF8];
          v125 = v124 - 8;
          if (v125 < 0x38)
          {
            v126 = &v122[8 * (v121 >> 2)];
            goto LABEL_126;
          }
          v127 = &v122[8 * (v121 >> 2)];
          v126 = v127;
          if ((unint64_t)(v127 - v112) < 0x20)
          {
            do
            {
LABEL_126:
              v134 = *(_QWORD *)v112;
              v112 += 8;
              *(_QWORD *)v126 = v134;
              v126 += 8;
            }
            while (v126 != v111);
            goto LABEL_127;
          }
          v128 = (v125 >> 3) + 1;
          v129 = 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
          v126 = &v123[v129];
          v130 = (__int128 *)(v112 + 16);
          v131 = v127 + 16;
          v132 = v128 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v133 = *v130;
            *(v131 - 1) = *(v130 - 1);
            *v131 = v133;
            v130 += 2;
            v131 += 2;
            v132 -= 4;
          }
          while (v132);
          if (v128 != (v128 & 0x3FFFFFFFFFFFFFFCLL))
          {
            v112 += v129;
            goto LABEL_126;
          }
        }
LABEL_127:
        *((_QWORD *)this + 30) = v122;
        *((_QWORD *)this + 31) = v123;
        *((_QWORD *)this + 32) = v111;
        *((_QWORD *)this + 33) = &v122[8 * v121];
        if (v114)
        {
          operator delete(v114);
          v111 = (char *)*((_QWORD *)this + 32);
        }
        goto LABEL_106;
      }
      if (v23 == v24)
        v58 = 1;
      else
        v58 = v42 >> 2;
      if (v58 >> 61)
        goto LABEL_129;
      v59 = (char *)operator new(8 * v58);
      v60 = (v58 + 3) >> 2;
      v57 = &v59[8 * v60];
      v61 = &v59[8 * v58];
      v62 = v57;
      if (v23 != v24)
      {
        v62 = &v57[(v23 - v41) & 0xFFFFFFFFFFFFFFF8];
        v63 = v23 - v41 - 8;
        v64 = &v59[8 * v60];
        v65 = v24;
        if (v63 > 0x37)
        {
          v66 = &v59[8 * v60];
          v64 = v66;
          v65 = v24;
          if ((unint64_t)(v66 - v41) >= 0x20)
          {
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v57[v68];
            v69 = (__int128 *)(v24 + 16);
            v70 = v66 + 16;
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *(v70 - 1) = *(v69 - 1);
              *v70 = v72;
              v69 += 2;
              v70 += 2;
              v71 -= 4;
            }
            while (v71);
            if (v67 == (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
              *((_QWORD *)this + 30) = v59;
              *((_QWORD *)this + 31) = v57;
              *((_QWORD *)this + 32) = v62;
              *((_QWORD *)this + 33) = v61;
LABEL_104:
              operator delete(v24);
              v57 = (char *)*((_QWORD *)this + 31);
              goto LABEL_105;
            }
            v65 = &v24[v68];
          }
        }
        do
        {
          v110 = *(_QWORD *)v65;
          v65 += 8;
          *(_QWORD *)v64 = v110;
          v64 += 8;
        }
        while (v64 != v62);
      }
      *((_QWORD *)this + 30) = v59;
      *((_QWORD *)this + 31) = v57;
      *((_QWORD *)this + 32) = v62;
      *((_QWORD *)this + 33) = v61;
      if (!v24)
        goto LABEL_105;
      goto LABEL_104;
    }
    if (v40 == v41)
      v43 = 1;
    else
      v43 = v42 >> 2;
    if (v43 >> 61)
      goto LABEL_129;
    v44 = (char *)operator new(8 * v43);
    v45 = operator new(0x1000uLL);
    v46 = &v44[8 * v39];
    v47 = &v44[8 * v43];
    if (v39 == v43)
    {
      if (v25 < 1)
      {
        if (v23 == v24)
          v73 = 1;
        else
          v73 = v25 >> 2;
        if (v73 >> 61)
          goto LABEL_129;
        v74 = v45;
        v46 = (char *)operator new(8 * v73);
        v47 = &v46[8 * v73];
        operator delete(v44);
        v24 = (char *)*((_QWORD *)this + 31);
        v23 = (char *)*((_QWORD *)this + 32);
        v44 = v46;
        v45 = v74;
      }
      else
      {
        v48 = v39 + 2;
        if (v39 >= -1)
          v48 = v39 + 1;
        v46 -= 8 * (v48 >> 1);
      }
    }
    *(_QWORD *)v46 = v45;
    v75 = v46 + 8;
    if (v23 == v24)
    {
      v76 = v46;
      v77 = v46 + 8;
LABEL_55:
      v78 = (void *)*((_QWORD *)this + 30);
      *((_QWORD *)this + 30) = v44;
      *((_QWORD *)this + 31) = v76;
      *((_QWORD *)this + 32) = v77;
      *((_QWORD *)this + 33) = v47;
      if (v78)
        operator delete(v78);
      goto LABEL_92;
    }
    while (v46 != v44)
    {
      v79 = v46;
      v77 = v75;
LABEL_58:
      v80 = *((_QWORD *)v23 - 1);
      v23 -= 8;
      *((_QWORD *)v79 - 1) = v80;
      v76 = v79 - 8;
      v75 = v77;
      v46 = v76;
      if (v23 == *((char **)this + 31))
        goto LABEL_55;
    }
    if (v75 < v47)
    {
      v81 = (v47 - v75) >> 3;
      if (v81 >= -1)
        v82 = v81 + 1;
      else
        v82 = v81 + 2;
      v77 = &v75[8 * (v82 >> 1)];
      v79 = &v46[8 * (v82 >> 1)];
      if (v75 == v46)
      {
        v44 = v75;
      }
      else
      {
        memmove(&v46[8 * (v82 >> 1)], v46, v75 - v46);
        v44 = v46;
      }
      goto LABEL_58;
    }
    if (v47 == v46)
      v83 = 1;
    else
      v83 = (v47 - v46) >> 2;
    if (v83 >> 61)
      goto LABEL_129;
    v84 = (char *)operator new(8 * v83);
    v44 = v84;
    v85 = (v83 + 3) >> 2;
    v79 = &v84[8 * v85];
    v77 = v79;
    v86 = v75 - v46;
    if (v75 != v46)
    {
      v77 = &v79[v86 & 0xFFFFFFFFFFFFFFF8];
      v87 = v86 - 8;
      v88 = &v84[8 * v85];
      v89 = v46;
      if (v87 >= 0x38)
      {
        v90 = 8 * v85;
        v88 = &v84[8 * v85];
        v89 = v46;
        if ((unint64_t)(v88 - v46) >= 0x20)
        {
          v91 = (v87 >> 3) + 1;
          v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
          v88 = &v79[v92];
          v93 = (__int128 *)(v46 + 16);
          v94 = &v84[v90 + 16];
          v95 = v91 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v96 = *v93;
            *((_OWORD *)v94 - 1) = *(v93 - 1);
            *(_OWORD *)v94 = v96;
            v93 += 2;
            v94 += 32;
            v95 -= 4;
          }
          while (v95);
          if (v91 == (v91 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_78;
          v89 = &v46[v92];
        }
      }
      do
      {
        v97 = *(_QWORD *)v89;
        v89 += 8;
        *(_QWORD *)v88 = v97;
        v88 += 8;
      }
      while (v88 != v77);
    }
LABEL_78:
    v47 = &v84[8 * v83];
    operator delete(v46);
    goto LABEL_58;
  }
LABEL_93:
  v106 = (CLLocation **)(*(_QWORD *)&v24[(v28 >> 4) & 0xFFFFFFFFFFFFFF8] + 32 * (v28 & 0x7F));
  *(_QWORD *)buf = 0;
  *v106 = v137;
  v106[1] = *(CLLocation **)&buf[8];
  v106[2] = (CLLocation *)v135;
  v106[3] = (CLLocation *)v136;
  ++*((_QWORD *)this + 35);
  v9 = v138;
  if (*((_BYTE *)this + 176))
  {
    if (GEOGetVectorKitPuckTrackingLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitPuckTrackingLog(void)::onceToken, &__block_literal_global_38846);
    v107 = (id)GEOGetVectorKitPuckTrackingLog(void)::log;
    if (os_log_type_enabled(v107, OS_LOG_TYPE_INFO))
    {
      -[GEORouteMatch routeCoordinate](v10, "routeCoordinate");
      GEOPolylineCoordinateAsFullString();
      v108 = (NSUUID *)objc_claimAutoreleasedReturnValue();
      GEOPolylineCoordinateAsFullString();
      v109 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138413058;
      *(_QWORD *)&buf[4] = v136;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v10;
      *(_WORD *)&buf[22] = 2112;
      v142 = v108;
      v143 = 2112;
      v144 = v109;
      _os_log_impl(&dword_19F029000, v107, OS_LOG_TYPE_INFO, "[VK] [%@] Received Location - routeMatch:%p, routeCoordinate:(%@), projectedRouteCoordinate:(%@)", buf, 0x2Au);

    }
  }
  md::PuckLocationAnimationTracingLogic::publishEvent((uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 31) + ((*((_QWORD *)this + 34) >> 4) & 0xFFFFFFFFFFFFFF8))+ 32 * (*((_QWORD *)this + 34) & 0x7FLL), 1);
LABEL_100:

}

void sub_19FED9A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, id a17)
{
  void *v17;
  void *v18;
  void *v19;

  operator delete(v17);
  operator delete(v19);
  md::PuckAnimationTraceEvent::~PuckAnimationTraceEvent(&a17);

  _Unwind_Resume(a1);
}

void md::PuckLocationAnimationTracingLogic::didDisplayFrame(md::PuckLocationAnimationTracingLogic *this, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  NSObject *v10;
  uint64_t v11;
  id *v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  unint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 41))
  {
    v4 = *((_QWORD *)this + 40);
    do
    {
      v5 = *(_QWORD *)(*((_QWORD *)this + 37) + 8 * (v4 / 0x66));
      v6 = v4 % 0x66;
      v7 = (unint64_t *)(v5 + 40 * (v4 % 0x66));
      v9 = *v7;
      v8 = (uint64_t)(v7 + 1);
      if (v9 < a2)
        break;
      if (*((_BYTE *)this + 176))
      {
        if (GEOGetVectorKitPuckTrackingLog(void)::onceToken != -1)
          dispatch_once(&GEOGetVectorKitPuckTrackingLog(void)::onceToken, &__block_literal_global_38846);
        v10 = GEOGetVectorKitPuckTrackingLog(void)::log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitPuckTrackingLog(void)::log, OS_LOG_TYPE_INFO))
        {
          v11 = *(_QWORD *)(v5 + 40 * v6 + 32);
          *(_DWORD *)buf = 138412546;
          v15 = v11;
          v16 = 2048;
          v17 = a2;
          _os_log_impl(&dword_19F029000, v10, OS_LOG_TYPE_INFO, "[VK] [%@] Frame Displayed - %lu", buf, 0x16u);
        }
      }
      md::PuckLocationAnimationTracingLogic::publishEvent((uint64_t)this, v8, 3);
      v12 = (id *)(*(_QWORD *)(*((_QWORD *)this + 37) + 8 * (*((_QWORD *)this + 40) / 0x66uLL))
                 + 40 * (*((_QWORD *)this + 40) % 0x66uLL));

      v13 = *((_QWORD *)this + 41) - 1;
      v4 = *((_QWORD *)this + 40) + 1;
      *((_QWORD *)this + 40) = v4;
      *((_QWORD *)this + 41) = v13;
      if (v4 >= 0xCC)
      {
        operator delete(**((void ***)this + 37));
        *((_QWORD *)this + 37) += 8;
        v13 = *((_QWORD *)this + 41);
        v4 = *((_QWORD *)this + 40) - 102;
        *((_QWORD *)this + 40) = v4;
      }
    }
    while (v13);
  }
}

void std::__function::__func<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(unsigned long),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(unsigned long),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&>>,void ()(unsigned long)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(unsigned long),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(unsigned long),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&>>,void ()(unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42C6CC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(unsigned long),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(unsigned long),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&>>,void ()(unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C6CC0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(unsigned long),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(unsigned long),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&>>,void ()(unsigned long)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, _QWORD);
  _QWORD *v4;

  v2 = a1[2];
  v3 = (uint64_t (*)(_QWORD *, _QWORD))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v3);
  return v3(v4, *a2);
}

void md::PuckAnimationTraceEvent::~PuckAnimationTraceEvent(id *this)
{

}

void std::__function::__func<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(VKPuckAnimator *,CLLocation *,GEORouteMatch *,NSUUID *),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>,std::allocator<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(VKPuckAnimator *,CLLocation *,GEORouteMatch *,NSUUID *),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>>,void ()(VKPuckAnimator *,CLLocation *,GEORouteMatch *,NSUUID *)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

__n128 std::__function::__func<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(VKPuckAnimator *,CLLocation *,GEORouteMatch *,NSUUID *),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>,std::allocator<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(VKPuckAnimator *,CLLocation *,GEORouteMatch *,NSUUID *),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>>,void ()(VKPuckAnimator *,CLLocation *,GEORouteMatch *,NSUUID *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E42C6C78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(VKPuckAnimator *,CLLocation *,GEORouteMatch *,NSUUID *),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>,std::allocator<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(VKPuckAnimator *,CLLocation *,GEORouteMatch *,NSUUID *),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>>,void ()(VKPuckAnimator *,CLLocation *,GEORouteMatch *,NSUUID *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E42C6C78;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(VKPuckAnimator *,CLLocation *,GEORouteMatch *,NSUUID *),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>,std::allocator<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(VKPuckAnimator *,CLLocation *,GEORouteMatch *,NSUUID *),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>>,void ()(VKPuckAnimator *,CLLocation *,GEORouteMatch *,NSUUID *)>::operator()(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD *v7;

  v5 = a1[2];
  v6 = (uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))a1[1];
  v7 = (_QWORD *)(a1[3] + (v5 >> 1));
  if ((v5 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))(*v7 + v6);
  return v6(v7, *a2, *a3, *a4, *a5);
}

void std::__function::__func<md::PuckLocationAnimationTracingLogic::PuckLocationAnimationTracingLogic(md::MapEngineSignals *,VKPuckAnimator *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::PuckLocationAnimationTracingLogic::PuckLocationAnimationTracingLogic(md::MapEngineSignals *,VKPuckAnimator *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::PuckLocationAnimationTracingLogic::PuckLocationAnimationTracingLogic(md::MapEngineSignals *,VKPuckAnimator *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::PuckLocationAnimationTracingLogic::PuckLocationAnimationTracingLogic(md::MapEngineSignals *,VKPuckAnimator *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42D3D00;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::PuckLocationAnimationTracingLogic::PuckLocationAnimationTracingLogic(md::MapEngineSignals *,VKPuckAnimator *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::PuckLocationAnimationTracingLogic::PuckLocationAnimationTracingLogic(md::MapEngineSignals *,VKPuckAnimator *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::operator()(uint64_t a1, _BYTE *a2)
{
  md::PuckLocationAnimationTracingLogic *v2;

  v2 = *(md::PuckLocationAnimationTracingLogic **)(a1 + 8);
  if (*a2)
    md::PuckLocationAnimationTracingLogic::tearDownTracing(v2);
  else
    md::PuckLocationAnimationTracingLogic::setupTracing(v2);
}

void md::LabelManager::setSelectedLabelMarker(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  NSObject *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  char v26;

  if (*(_QWORD *)(a1 + 3400) != *a2)
  {
    if (GEOGetVectorKitPerformanceLog_onceToken != -1)
      dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
    v4 = (uint64_t *)(a1 + 3400);
    v5 = (id)GEOGetVectorKitPerformanceLog_log;
    if (os_signpost_enabled(v5))
    {
      LOWORD(v24) = 0;
      _os_signpost_emit_with_name_impl(&dword_19F029000, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "LabelsSelectLabel", (const char *)&unk_1A0189141, (uint8_t *)&v24, 2u);
    }

    if (*v4)
    {
      v6 = *(_QWORD *)(a1 + 240);
      v24 = 0;
      v25 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 176))(v6, &v24);
      v7 = v25;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = *(_QWORD *)(a1 + 136);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 184);
        if (v11)
        {
          v24 = a1;
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v11 + 48))(v11, &v24, a1 + 3400);
        }
      }
    }
    v12 = *a2;
    v13 = a2[1];
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    *(_QWORD *)(a1 + 3400) = v12;
    v16 = *(std::__shared_weak_count **)(a1 + 3408);
    *(_QWORD *)(a1 + 3408) = v13;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      v12 = *v4;
    }
    if (v12)
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 240) + 176))(*(_QWORD *)(a1 + 240), a1 + 3400);
      v19 = *(_QWORD *)(a1 + 136);
      if (v19)
      {
        v20 = *(_QWORD *)(v19 + 184);
        if (v20)
        {
          v24 = a1;
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v20 + 48))(v20, &v24, a1 + 3400);
        }
      }
      *(_QWORD *)(a1 + 3424) = *(_QWORD *)(a1 + 3288);
      *(_BYTE *)(a1 + 3416) = 1;
    }
    *(_BYTE *)(a1 + 3380) = 1;
    *(_BYTE *)(a1 + 3043) = 1;
    *(_BYTE *)(a1 + 3045) = 1;
    *(_BYTE *)(a1 + 3047) = 1;
    v21 = atomic_load((unsigned __int8 *)(a1 + 3058));
    if ((v21 & 1) != 0)
    {
      v22 = *(_QWORD *)(a1 + 136);
      if (v22)
      {
        v23 = *(_QWORD *)(v22 + 56);
        if (v23)
        {
          v24 = a1;
          v26 = 9;
          (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v23 + 48))(v23, &v24, &v26);
        }
      }
    }
  }
}

void sub_19FEDA0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::LabelManager::deselectLabelMarkerImpl(md::LabelManager *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8[2];

  v1 = *((_QWORD *)this + 425);
  if (v1)
  {
    if (v1 == *((_QWORD *)this + 438))
    {
      v3 = *((_QWORD *)this + 17);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 152);
        if (v4)
        {
          v8[0] = (uint64_t)this;
          (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v4 + 48))(v4, v8, (char *)this + 3400);
        }
      }
      v5 = (std::__shared_weak_count *)*((_QWORD *)this + 439);
      *((_OWORD *)this + 219) = 0u;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    v8[0] = 0;
    v8[1] = 0;
    md::LabelManager::setSelectedLabelMarker((uint64_t)this, v8);
    *((_BYTE *)this + 3042) = 1;
  }
}

void sub_19FEDA1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void md::LabelManager::labelMarkerForCustomFeatureAnnotation(_QWORD *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;

  v8 = a3;
  v7 = a4;
  if (v8 && v7)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 240) + 16))(*(_QWORD *)(a2 + 240));
    if (!*(_BYTE *)(a2 + 3385) && !*(_BYTE *)(a2 + 3384))
      md::LabelManager::flushCommands((md::LabelManager *)a2);
    (*(void (**)(_QWORD, id, id))(**(_QWORD **)(a2 + 240) + 168))(*(_QWORD *)(a2 + 240), v8, v7);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }

}

void sub_19FEDA27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void md::LabelManager::adoptSelectedLabelMarker(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 240) + 184))(*(_QWORD *)(a1 + 240));
  v6 = *a2;
  v5 = a2[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 3504) = v6;
  v9 = *(std::__shared_weak_count **)(a1 + 3512);
  *(_QWORD *)(a1 + 3512) = v5;
  if (!v9)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v13 = *a2;
    v12 = a2[1];
    if (!v12)
      goto LABEL_11;
  }
  else
  {
LABEL_8:
    v13 = *a2;
    v12 = a2[1];
    if (!v12)
      goto LABEL_11;
  }
  v14 = (unint64_t *)(v12 + 8);
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
LABEL_11:
  *(_QWORD *)(a1 + 3400) = v13;
  v16 = *(std::__shared_weak_count **)(a1 + 3408);
  *(_QWORD *)(a1 + 3408) = v12;
  if (!v16)
    goto LABEL_15;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_15:
    if ((v4 & 1) != 0)
      return;
LABEL_20:
    md::LabelManager::releaseAdoptedSelectedLabelMarker((md::LabelManager *)a1, 1);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  if ((v4 & 1) == 0)
    goto LABEL_20;
}

void md::LabelManager::releaseAdoptedSelectedLabelMarker(md::LabelManager *this, int a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  md::LabelManager *v12;

  if (*((_QWORD *)this + 425))
  {
    v3 = (_QWORD *)((char *)this + 3400);
    if (a2)
    {
      v4 = *((_QWORD *)this + 17);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 152);
        if (v5)
        {
          v12 = this;
          (*(void (**)(uint64_t, md::LabelManager **, _QWORD *))(*(_QWORD *)v5 + 48))(v5, &v12, v3);
        }
      }
    }
    (*(void (**)(_QWORD))(**((_QWORD **)this + 30) + 192))(*((_QWORD *)this + 30));
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 439);
    *((_QWORD *)this + 438) = 0;
    *((_QWORD *)this + 439) = 0;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 426);
    *v3 = 0;
    v3[1] = 0;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void md::FlyoverDsmTileData::~FlyoverDsmTileData(md::FlyoverDsmTileData *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E4294758;
  *((_QWORD *)this + 79) = &unk_1E42947C0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 93);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::MapTileData::~MapTileData(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E4294758;
  *((_QWORD *)this + 79) = &unk_1E42947C0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 93);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 91);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  md::MapTileData::~MapTileData(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::FlyoverDsmTileData::containsWorldPoint(uint64_t a1, float64x2_t *a2)
{
  uint64_t v2;
  int v3;
  int64x2_t v4;
  float64x2_t v5;
  float32x4_t v6;
  int16x4_t v7;

  v2 = *(_QWORD *)(a1 + 720);
  if (v2 || (v2 = *(_QWORD *)(a1 + 736)) != 0)
  {
    v3 = 1 << *(_BYTE *)(v2 + 57);
    v4.i64[0] = *(int *)(v2 + 64);
    v4.i64[1] = v3 + ~*(_DWORD *)(v2 + 60);
    v5 = vmulq_n_f64(vmlsq_lane_f64(*a2, vcvtq_f64_s64(v4), 1.0 / (double)v3, 0), (double)v3);
    v6 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v5), v5);
    v7.i32[0] = vmovn_s32(vcgeq_f32((float32x4_t)xmmword_19FFB3850, v6)).u32[0];
    v7.i32[1] = vmovn_s32(vcgeq_f32(v6, (float32x4_t)xmmword_19FFB3850)).i32[1];
    LOBYTE(v2) = vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(v7, 0xFuLL)));
  }
  return v2 & 1;
}

unint64_t md::FlyoverDsmTileData::elevationInMetersAtWorldPoint(uint64_t a1, double *a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, float a11)
{
  double v13;
  double v14;
  unint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  float v21;
  uint64_t v22;

  v13 = *a2;
  v14 = a2[1];
  v15 = md::ElevationRaster::elevationInMetersAtWorldPoint(*(_QWORD *)(a1 + 720), a3, *a2, v14, a6, a7, a8, a9, a10, a11);
  if (HIDWORD(v15))
    goto LABEL_4;
  v22 = *(_QWORD *)(a1 + 736);
  if (v22)
  {
    v15 = md::ElevationRaster::elevationInMetersAtWorldPoint(*(_QWORD *)(a1 + 736), a3, v13, v14, v16, v17, v18, v19, v20, v21);
LABEL_4:
    v22 = v15 & 0x100000000;
  }
  return v15 | (unint64_t)v22;
}

BOOL md::FlyoverDsmTileData::isValid(md::FlyoverDsmTileData *this)
{
  _QWORD *v1;
  _QWORD *v3;

  v1 = (_QWORD *)*((_QWORD *)this + 90);
  if (v1 && *v1 != v1[1])
    return 1;
  v3 = (_QWORD *)*((_QWORD *)this + 92);
  return v3 && *v3 != v3[1];
}

uint64_t md::FlyoverDsmTileData::primaryRaster(md::FlyoverDsmTileData *this)
{
  return *((_QWORD *)this + 90);
}

uint64_t md::FlyoverDsmTileData::fallbackRaster(md::FlyoverDsmTileData *this)
{
  return *((_QWORD *)this + 92);
}

unint64_t md::FlyoverDsmTileData::_heightBounds<unsigned char>(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v3;
  int v4;
  int v5;
  char v6;
  char v7;
  char v8;
  int16x4_t v9;
  int v10;
  int v11;
  int v12;
  float v14;
  float v15;
  int v16;
  int v17;
  float v18;
  float v19;
  unsigned int v20;
  unsigned int v21;
  float v22;
  float v23;
  char v24;
  unsigned __int8 v25;
  int v26;
  unsigned __int8 v27;
  int v28;
  unsigned int v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  BOOL v32;
  float v33;
  float v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  int v39;
  unsigned int v40;

  v3 = *a3;
  if (!*a3)
    goto LABEL_31;
  v4 = *(_DWORD *)(v3 + 32);
  v5 = *(_DWORD *)(v3 + 40);
  v6 = *(_BYTE *)(a2 + 1);
  v7 = *(_BYTE *)(v3 + 57);
  v8 = v6 - v7;
  v9 = *(int16x4_t *)(v3 + 60);
  v10 = *(_DWORD *)(a2 + 8) - (v9.i32[1] << (v6 - v7));
  v11 = (((-1 << v7) + v9.i32[0] + 1) << (v6 - v7)) + ~(-1 << v6) - *(_DWORD *)(a2 + 4);
  v12 = 1 << v8;
  if (v12 <= v4 && v12 <= v5)
  {
    v16 = v10 * v4 / v12;
    v17 = v4 / v12 + v16;
    v20 = v11 * v5 / v12;
    v21 = v5 / v12 + v20;
  }
  else
  {
    v14 = (float)v4 / (float)v12;
    v15 = fabsf(v14 * (float)v10);
    v16 = (int)v15;
    v17 = (int)(float)(ceilf(v14) + truncf(v15));
    v18 = (float)v5 / (float)v12;
    v19 = fabsf(v18 * (float)v11);
    v20 = (int)v19;
    *(float *)v9.i32 = ceilf(v18) + truncf(v19);
    v21 = (int)*(float *)v9.i32;
  }
  v22 = -40075000.0;
  v23 = 40075000.0;
  if (v20 < v21 && v16 < v17)
  {
    v24 = 0;
    v25 = 0;
    v26 = (~v20 + v4) * v4;
    v27 = -1;
    do
    {
      v28 = v16;
      do
      {
        v29 = *(unsigned __int8 *)(*(_QWORD *)v3 + (v26 + v28));
        v30 = v25;
        if (v29 > v25)
          v30 = *(_BYTE *)(*(_QWORD *)v3 + (v26 + v28));
        v31 = v27;
        if (v29 < v27)
          v31 = *(_BYTE *)(*(_QWORD *)v3 + (v26 + v28));
        v32 = v29 == 255;
        if (!v32)
        {
          v27 = v31;
          v25 = v30;
        }
        v24 |= v32;
        ++v28;
      }
      while (v17 != v28);
      v26 -= v4;
      ++v20;
    }
    while (v20 != v21);
    if (v27 <= v25)
    {
      v9.i16[0] = *(_WORD *)(v3 + 52);
      v33 = (float)vmovl_s16(v9).i32[0];
      v34 = *(float *)(v3 + 48);
      v23 = v33 + (float)(v34 * (float)v27);
      v22 = v33 + (float)(v34 * (float)v25);
      if ((v24 & 1) == 0)
        goto LABEL_29;
    }
    else
    {
      v22 = -40075000.0;
      v23 = 40075000.0;
    }
  }
  v35 = *(_QWORD *)(a1 + 736);
  if (!v35)
  {
LABEL_29:
    if (v23 <= v22)
    {
      v40 = LODWORD(v23) & 0xFFFFFF00;
      v39 = LOBYTE(v23);
      v3 = (unint64_t)LODWORD(v22) << 32;
      return v3 | v40 | v39;
    }
    goto LABEL_30;
  }
  if (*(_BYTE *)(v35 + 24) == 8)
  {
    v36 = md::FlyoverDsmTileData::_heightBounds<unsigned char>();
    if (!v37)
      goto LABEL_30;
    goto LABEL_28;
  }
  v36 = md::FlyoverDsmTileData::_heightBounds<unsigned short>(a1, a2, (unint64_t *)(a1 + 736));
  if (v38)
  {
LABEL_28:
    v23 = fminf(v23, *(float *)&v36);
    v22 = fmaxf(v22, *((float *)&v36 + 1));
    goto LABEL_29;
  }
LABEL_30:
  v3 = 0;
LABEL_31:
  v39 = 0;
  v40 = 0;
  return v3 | v40 | v39;
}

unint64_t md::FlyoverDsmTileData::_heightBounds<unsigned short>(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v3;
  int v4;
  int v5;
  char v6;
  char v7;
  char v8;
  int16x4_t v9;
  int v10;
  int v11;
  int v12;
  float v14;
  float v15;
  int v16;
  int v17;
  float v18;
  float v19;
  unsigned int v20;
  unsigned int v21;
  float v22;
  float v23;
  char v24;
  unsigned __int16 v25;
  int v26;
  unsigned __int16 v27;
  int v28;
  unsigned int v29;
  unsigned __int16 v30;
  unsigned __int16 v31;
  BOOL v32;
  float v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  int v39;
  unsigned int v40;

  v3 = *a3;
  if (!*a3)
    goto LABEL_31;
  v4 = *(_DWORD *)(v3 + 32);
  v5 = *(_DWORD *)(v3 + 40);
  v6 = *(_BYTE *)(a2 + 1);
  v7 = *(_BYTE *)(v3 + 57);
  v8 = v6 - v7;
  v9 = *(int16x4_t *)(v3 + 60);
  v10 = *(_DWORD *)(a2 + 8) - (v9.i32[1] << (v6 - v7));
  v11 = (((-1 << v7) + v9.i32[0] + 1) << (v6 - v7)) + ~(-1 << v6) - *(_DWORD *)(a2 + 4);
  v12 = 1 << v8;
  if (v12 <= v4 && v12 <= v5)
  {
    v16 = v10 * v4 / v12;
    v17 = v4 / v12 + v16;
    v20 = v11 * v5 / v12;
    v21 = v5 / v12 + v20;
  }
  else
  {
    v14 = (float)v4 / (float)v12;
    v15 = fabsf(v14 * (float)v10);
    v16 = (int)v15;
    v17 = (int)(float)(ceilf(v14) + truncf(v15));
    v18 = (float)v5 / (float)v12;
    v19 = fabsf(v18 * (float)v11);
    v20 = (int)v19;
    *(float *)v9.i32 = ceilf(v18) + truncf(v19);
    v21 = (int)*(float *)v9.i32;
  }
  v22 = -40075000.0;
  v23 = 40075000.0;
  if (v20 < v21 && v16 < v17)
  {
    v24 = 0;
    v25 = 0;
    v26 = (~v20 + v4) * v4;
    v27 = -1;
    do
    {
      v28 = v16;
      do
      {
        v29 = *(unsigned __int16 *)(*(_QWORD *)v3 + 2 * (v26 + v28));
        v30 = v25;
        if (v29 > v25)
          v30 = *(_WORD *)(*(_QWORD *)v3 + 2 * (v26 + v28));
        v31 = v27;
        if (v29 < v27)
          v31 = *(_WORD *)(*(_QWORD *)v3 + 2 * (v26 + v28));
        v32 = v29 == 0xFFFF;
        if (!v32)
        {
          v27 = v31;
          v25 = v30;
        }
        v24 |= v32;
        ++v28;
      }
      while (v17 != v28);
      v26 -= v4;
      ++v20;
    }
    while (v20 != v21);
    if (v27 <= v25)
    {
      v9.i16[0] = *(_WORD *)(v3 + 52);
      v33 = (float)vmovl_s16(v9).i32[0];
      v34 = *(float *)(v3 + 48);
      v23 = v33 + (float)(v34 * (float)v27);
      v22 = v33 + (float)(v34 * (float)v25);
      if ((v24 & 1) == 0)
        goto LABEL_29;
    }
    else
    {
      v22 = -40075000.0;
      v23 = 40075000.0;
    }
  }
  v35 = *(_QWORD *)(a1 + 736);
  if (!v35)
  {
LABEL_29:
    if (v23 <= v22)
    {
      v40 = LODWORD(v23) & 0xFFFFFF00;
      v39 = LOBYTE(v23);
      v3 = (unint64_t)LODWORD(v22) << 32;
      return v3 | v40 | v39;
    }
    goto LABEL_30;
  }
  if (*(_BYTE *)(v35 + 24) == 8)
  {
    v36 = md::FlyoverDsmTileData::_heightBounds<unsigned char>();
    if (!v37)
      goto LABEL_30;
    goto LABEL_28;
  }
  v36 = md::FlyoverDsmTileData::_heightBounds<unsigned short>();
  if (v38)
  {
LABEL_28:
    v23 = fminf(v23, *(float *)&v36);
    v22 = fmaxf(v22, *((float *)&v36 + 1));
    goto LABEL_29;
  }
LABEL_30:
  v3 = 0;
LABEL_31:
  v39 = 0;
  v40 = 0;
  return v3 | v40 | v39;
}

uint64_t ggl::VertexDataTyped<ggl::TileBaseSurface::P3T2T2Buffer>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void ggl::VertexDataTyped<ggl::TileBaseSurface::P3T2T2Buffer>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::TileBaseSurface::P3T2T2Buffer>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TileBaseSurface::P3T2T2Buffer>,geo::StdAllocator<ggl::VertexDataTyped<ggl::TileBaseSurface::P3T2T2Buffer>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFFB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TileBaseSurface::P3T2T2Buffer>,geo::StdAllocator<ggl::VertexDataTyped<ggl::TileBaseSurface::P3T2T2Buffer>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFFB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TileBaseSurface::P3T2T2Buffer>,geo::StdAllocator<ggl::VertexDataTyped<ggl::TileBaseSurface::P3T2T2Buffer>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TileBaseSurface::P3T2T2Buffer>,geo::StdAllocator<ggl::VertexDataTyped<ggl::TileBaseSurface::P3T2T2Buffer>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

void ggl::TileBaseSurface::P3T2T2Mesh::~P3T2T2Mesh(ggl::TileBaseSurface::P3T2T2Mesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::TileBaseSurface::P3T2T2Mesh::~P3T2T2Mesh(ggl::TileBaseSurface::P3T2T2Mesh *this)
{
  ggl::Mesh::~Mesh((ggl::TileBaseSurface::P3T2T2Mesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::TileBaseSurface::P3T2T2Mesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::TileBaseSurface::P3T2T2Buffer>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::TileBaseSurface::P3T2T2Buffer>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::TileBaseSurface::P3T2T2PipelineState::~P3T2T2PipelineState(ggl::TileBaseSurface::P3T2T2PipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::TileBaseSurface::P3T2T2PipelineSetup::~P3T2T2PipelineSetup(ggl::TileBaseSurface::P3T2T2PipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::TileBaseSurface::P3T2T2PipelineSetup::constantDataIsEnabled(ggl::TileBaseSurface::P3T2T2PipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

uint64_t ggl::TileBaseSurface::P3T2T2PipelineSetup::textureIsEnabled(ggl::TileBaseSurface::P3T2T2PipelineSetup *this)
{
  return 0;
}

void md::ARDataRequestObserverLogic::~ARDataRequestObserverLogic(md::ARDataRequestObserverLogic *this)
{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
}

{
  *(_QWORD *)this = off_1E42AFC70;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 10));
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::Logic<md::ARDataRequestObserverLogic,md::ARDataRequestObserverContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_allocateContext@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = operator new();
  v4[2] = "md::ARDataRequestObserverContext]";
  v4[3] = 32;
  v4[4] = result;
  *v4 = &off_1E42B13D8;
  v4[1] = 0xBC61DE3EFA7960C9;
  *a2 = v4;
  return result;
}

void sub_19FEDB2A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AF4E00](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t md::Logic<md::ARDataRequestObserverLogic,md::ARDataRequestObserverContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0xBC61DE3EFA7960C9)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 128))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::ARDataRequestObserverLogic,md::ARDataRequestObserverContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0xBC61DE3EFA7960C9)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 136))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::ARDataRequestObserverLogic,md::ARDataRequestObserverContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0xBC61DE3EFA7960C9)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 144))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::ARDataRequestObserverLogic,md::ARDataRequestObserverContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BYTE v3[2];

  if (*(_QWORD *)(a3 + 8) == 0xBC61DE3EFA7960C9)
  {
    if (*(_QWORD *)(a3 + 32))
      return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 152))(result, a2, v3);
  }
  return result;
}

uint64_t md::Logic<md::ARDataRequestObserverLogic,md::ARDataRequestObserverContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  _BYTE v4[2];

  if (*(_QWORD *)(a3 + 8) == 0xBC61DE3EFA7960C9 && *(_QWORD *)(a3 + 32))
    return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 160))(result, a2, v4);
  a4[23] = 0;
  *a4 = 0;
  return result;
}

uint64_t md::Logic<md::ARDataRequestObserverLogic,md::ARDataRequestObserverContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void md::ARDataRequestObserverLogic::runBeforeLayout(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  int v14;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t i;
  uint64_t v46;
  unsigned __int8 *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  _BYTE v68[32];
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;

  v1 = *(_QWORD *)(a1 + 120);
  v2 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver>(v1);
  v3 = (uint64_t *)v2[7];
  v4 = (uint64_t *)v2[8];
  if (v3 != v4)
  {
    v5 = v2[10];
    do
    {
      v7 = *(unsigned __int16 **)(v5 + 56);
      v8 = *(unsigned __int16 **)(v5 + 64);
      if (v7 != v8)
      {
        v9 = *v3;
        v10 = *(unsigned __int16 *)(v1 + 40);
        do
        {
          if (*v7 != v10)
            goto LABEL_3;
          v11 = *((unsigned int *)v7 + 1);
          v12 = *(_QWORD *)(v1 + 48);
          if (v11 >= (*(_QWORD *)(v1 + 56) - v12) >> 3)
            goto LABEL_3;
          v13 = (unsigned __int16 *)(v12 + 8 * v11);
          if (*v13 != v10 || v13[1] != v7[1])
            goto LABEL_3;
          v14 = *((_DWORD *)v13 + 1);
          v7 += 16;
        }
        while (v14 == (_DWORD)v11 && v7 != v8);
        if (v14 != (_DWORD)v11)
        {
LABEL_3:
          v6 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequestObserver::DidChange>(v1);
          gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v6, v9);
        }
      }
      v5 += 104;
      ++v3;
    }
    while (v3 != v4);
  }
  v64 = (uint64_t *)v68;
  v65 = (uint64_t *)v68;
  v66 = (uint64_t *)v68;
  v67 = 4;
  v16 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver>(v1);
  v17 = gdc::Registry::storage<gdc::component::DataRequestObserver::DidChange>(v1);
  v18 = (_QWORD *)v17;
  v19 = v17 + 32;
  v21 = v16[7];
  v20 = v16[8];
  if (*(_QWORD *)(v17 + 64) - *(_QWORD *)(v17 + 56) >= (unint64_t)(v20 - v21))
    v22 = v16 + 4;
  else
    v22 = (_QWORD *)(v17 + 32);
  if (v16 + 4 == v22)
  {
    v71 = (uint64_t *)v1;
    v72 = (uint64_t)&v64;
    if (v21 != v20)
    {
      v36 = (unsigned __int8 *)v16[10];
      do
      {
        v37 = *(unsigned int *)(v21 + 4);
        v38 = v18[4];
        if (v37 >> 7 < (v18[5] - v38) >> 3)
        {
          v39 = *(_QWORD *)(v38 + 8 * (v37 >> 7));
          if (v39)
          {
            v40 = *(unsigned __int16 *)(v39 + 2 * (v37 & 0x7F));
            v42 = v18[7];
            v41 = v18[8];
            if (v40 < (v41 - v42) >> 3)
            {
              v43 = v42 + 8 * v40;
              if (v43 != v41 && *(_DWORD *)(v43 + 4) == (_DWORD)v37)
                gdc::component::DataRequestObserver::processPendingState(gdc::Registry &)::$_1::operator()((uint64_t *)&v71, *(_QWORD *)v21, v36);
            }
          }
        }
        v36 += 104;
        v21 += 8;
      }
      while (v21 != v20);
    }
  }
  if ((_QWORD *)v19 == v22)
  {
    v71 = (uint64_t *)v1;
    v72 = (uint64_t)&v64;
    v46 = v18[7];
    for (i = v18[8]; v46 != i; v46 += 8)
    {
      v48 = *(unsigned int *)(v46 + 4);
      v49 = v16[4];
      v50 = (v16[5] - v49) >> 3;
      if (v48 >> 7 < v50)
      {
        v51 = *(_QWORD *)(v49 + 8 * (v48 >> 7));
        if (v51)
        {
          v52 = *(unsigned __int16 *)(v51 + 2 * (v48 & 0x7F));
          v54 = v16[7];
          v53 = v16[8];
          v55 = (v53 - v54) >> 3;
          if (v55 > v52)
          {
            v56 = v54 + 8 * v52;
            if (v56 != v53 && *(_DWORD *)(v56 + 4) == (_DWORD)v48)
            {
              v58 = *(_QWORD *)v46;
              v59 = *(_QWORD *)v46 >> 39;
              if (v59 < v50
                && (v60 = *(_QWORD *)(v49 + 8 * v59)) != 0
                && (v61 = *(unsigned __int16 *)(v60 + 2 * (HIDWORD(v58) & 0x7F)), v55 > v61)
                && ((v62 = v54 + 8 * v61, v62 != v53) ? (v63 = *(_DWORD *)(v62 + 4) == HIDWORD(v58)) : (v63 = 0), v63))
              {
                v47 = (unsigned __int8 *)(v16[10] + 104 * v61);
              }
              else
              {
                v47 = (unsigned __int8 *)v16[11];
              }
              gdc::component::DataRequestObserver::processPendingState(gdc::Registry &)::$_1::operator()((uint64_t *)&v71, v58, v47);
            }
          }
        }
      }
    }
  }
  v23 = (_QWORD *)gdc::Registry::storage<gdc::component::DataRequestObserver::DidChange>(v1);
  v24 = v23;
  if (v23[29])
  {
    v25 = (_QWORD *)v23[28];
    if (v25)
    {
      v26 = v23[31];
      v27 = v23[7];
      v28 = (v23[8] - v27) >> 3;
      while (1)
      {
        v71 = (uint64_t *)v27;
        v72 = v28;
        v70 = v26;
        v29 = v25[6];
        if (!v29)
          break;
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v29 + 48))(v29, &v70, &v71);
        v25 = (_QWORD *)*v25;
        if (!v25)
          goto LABEL_28;
      }
LABEL_75:
      std::__throw_bad_function_call[abi:nn180100]();
      JUMPOUT(0x19FEDB808);
    }
  }
LABEL_28:
  v24[8] = v24[7];
  v24[11] = v24[10];
  v30 = v64;
  v31 = v65;
  if (v64 == v65)
    goto LABEL_38;
  do
  {
    v32 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequestObserver>(v1);
    v69 = *v30;
    if (geo::sparse_map<gdc::Entity,gdc::component::DataRequestObserver>::erase(v32 + 4, HIDWORD(v69)))
    {
      v33 = (_QWORD *)v32[28];
      if (v33)
      {
        v34 = v32[31];
        do
        {
          v71 = &v69;
          v72 = 1;
          v70 = v34;
          v35 = v33[6];
          if (!v35)
            goto LABEL_75;
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(_QWORD *)v35 + 48))(v35, &v70, &v71);
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
    }
    ++v30;
  }
  while (v30 != v31);
  v30 = v64;
LABEL_38:
  if (v30 != v66)
    free(v30);
}

void md::Logic<md::ARDataRequestObserverLogic,md::ARDataRequestObserverContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  char v7;
  void *v8;
  char v9;
  void **v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(v6, a1, &v13);
  gdc::DebugTreeNode::toString(a2, (uint64_t)v6);
  v3 = __p;
  if (__p)
  {
    v4 = (uint64_t)v12;
    v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      v5 = __p;
    }
    v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6[0]);
    return;
  }
  operator delete(v8);
  if (v7 < 0)
    goto LABEL_10;
}

_QWORD *gdc::ManagedObjectHolder<md::ARDataRequestObserverContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E42B13D8;
  v2 = a1[4];
  if (v2)
    MEMORY[0x1A1AF4E00](v2, 0xC400A2AC0F1);
  return a1;
}

void gdc::ManagedObjectHolder<md::ARDataRequestObserverContext>::~ManagedObjectHolder(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E42B13D8;
  v1 = a1[4];
  if (v1)
    MEMORY[0x1A1AF4E00](v1, 0xC400A2AC0F1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t gdc::ObjectHolder<md::ARDataRequestObserverContext>::extract@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void sub_19FEDBA94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FEDC070(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  char v5;

  if ((v5 & 1) != 0)
  _Unwind_Resume(a1);
}

void sub_19FEDC374(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FEDD288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  void *v38;
  void *v39;
  void *v40;

  _Unwind_Resume(a1);
}

void sub_19FEDD754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,id location)
{
  void *v23;
  id *v24;
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_19FEDDA40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FEDDAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FEDDBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19FEDDC7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

long double _screenPointsForDistance(void *a1, double a2, double a3, double a4)
{
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  long double v22;
  long double v23;
  long double v24;
  long double v25;
  long double v26;
  long double v27;
  long double v28;
  double v29;
  long double v30;
  long double v31;
  double v32;
  long double v33;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;

  v6 = a1;
  objc_msgSend(v6, "groundPoint");
  v8 = v7;
  v10 = v9;
  v12 = v11;
  objc_msgSend(v6, "forwardVector");
  v41 = v13;
  v15 = v14;
  v17 = v16;
  v18 = (double *)objc_msgSend(v6, "position");
  v37 = v12;
  v38 = v8;
  v39 = a2;
  v40 = a4;
  v19 = v18[1];
  v35 = v18[2];
  v36 = *v18;
  objc_msgSend(v6, "tanHalfHorizFOV");
  v21 = v20;
  v22 = exp(v10 * 6.28318531 + -3.14159265);
  v23 = atan(v22) * 114.591559 + -90.0;
  v24 = cos(v23 * 0.034906585) * -559.82 + 111132.92;
  v25 = v24 + cos(v23 * 0.0698131701) * 1.175;
  v26 = v25 + cos(v23 * 0.104719755) * -0.0023;
  v27 = v23 * 0.00872664626;
  v28 = tan(v23 * 0.00872664626 + 0.78103484);
  v29 = log(v28);
  v30 = tan(v27 + 0.789761487);
  v31 = log(v30);
  v32 = v17 * v37 + v15 * v10 + (v38 - v36) * v41 - (v19 * v15 + v35 * v17);
  v33 = fabs((v31 - v29) * 0.159154943) * (v39 * v40) / (v26 * (v21 * (v32 + v32)));

  return v33;
}

void sub_19FEDDE54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FEDE01C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FEDE1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void karo::Item::~Item(void **this)
{
  *this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E42C34D0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1A1AF4E00);
}

void **karo::Item::setName(uint64_t a1, void **a2)
{
  void **result;
  __int128 v4;
  size_t v5;
  size_t v6;

  result = (void **)(a1 + 8);
  if (result != a2)
  {
    if (*(char *)(a1 + 31) < 0)
    {
      v5 = (size_t)a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        v6 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (void **)*a2;
        v6 = v5;
      }
      return std::string::__assign_no_alias<false>(result, a2, v6);
    }
    else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
    {
      return (void **)std::string::__assign_no_alias<true>(result, *a2, (size_t)a2[1]);
    }
    else
    {
      v4 = *(_OWORD *)a2;
      result[2] = a2[2];
      *(_OWORD *)result = v4;
    }
  }
  return result;
}

void md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::removeTile(_QWORD *a1, uint64_t *a2)
{
  std::mutex *v4;
  _QWORD *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;

  v4 = (std::mutex *)(a1[1] + 8);
  std::mutex::lock(v4);
  v5 = (_QWORD *)a1[3];
  v6 = (_QWORD *)a1[4];
  v8 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v5 = (_QWORD *)a1[3];
    v6 = (_QWORD *)a1[4];
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (v5 == v6)
  {
LABEL_9:
    v12 = v6;
  }
  else
  {
    while (v5[1] != v8)
    {
      v5 += 3;
      if (v5 == v6)
        goto LABEL_9;
    }
    if (v5 == v6 || (v26 = v5 + 3, v5 + 3 == v6))
    {
      v12 = v5;
    }
    else
    {
      v12 = v5;
      do
      {
        v27 = v26;
        v29 = v5 + 4;
        v28 = v5[4];
        if (v28 != v8)
        {
          *v12 = *v27;
          v30 = v5[5];
          *v29 = 0;
          v29[1] = 0;
          v31 = (std::__shared_weak_count *)v12[2];
          v12[1] = v28;
          v12[2] = v30;
          if (v31)
          {
            v32 = (unint64_t *)&v31->__shared_owners_;
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          v12 += 3;
        }
        v26 = v27 + 3;
        v5 = v27;
      }
      while (v27 + 3 != v6);
    }
  }
  if (v7)
  {
    v13 = (unint64_t *)&v7->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  std::vector<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,geo::StdAllocator<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,mdm::Allocator>>::erase((uint64_t)(a1 + 3), (uint64_t)v12, a1[4]);
  if (a1[8] == v8)
  {
    v18 = (_QWORD *)a1[3];
    if (v18 != (_QWORD *)a1[4])
    {
      a1[7] = *v18;
      v20 = v18[1];
      v19 = v18[2];
      if (v19)
      {
        v21 = (unint64_t *)(v19 + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = (std::__shared_weak_count *)a1[9];
      a1[8] = v20;
      a1[9] = v19;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
  }
  if (a1[3] == a1[4])
  {
    v15 = a1[1];
    *(_QWORD *)(v15 + 152) = 0;
    atomic_store(1u, (unsigned __int8 *)(v15 + 145));
  }
  if (v7)
  {
    v16 = (unint64_t *)&v7->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  std::mutex::unlock(v4);
}

void sub_19FEDE560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::find<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*a2)
    v4 = *a2 + 8;
  else
    v4 = 0;
  v5 = md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::hash(v4);
  v6 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v6)
    return 0;
  v7 = v5;
  v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = v5;
    if (v5 >= *(_QWORD *)&v6)
      v9 = v5 % *(_QWORD *)&v6;
  }
  else
  {
    v9 = (*(_QWORD *)&v6 - 1) & v5;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    if (v8.u32[0] < 2uLL)
    {
      v12 = *(_QWORD *)&v6 - 1;
      while (1)
      {
        v18 = v11[1];
        if (v18 == v7)
        {
          v16 = v11[2];
          if (v16)
            v17 = v16 + 8;
          else
            v17 = 0;
          if (!md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::compare(v17, *a2 + 8))return v11;
        }
        else if ((v18 & v12) != v9)
        {
          return 0;
        }
        v11 = (_QWORD *)*v11;
        if (!v11)
          return v11;
      }
    }
    do
    {
      v15 = v11[1];
      if (v15 == v7)
      {
        v13 = v11[2];
        if (v13)
          v14 = v13 + 8;
        else
          v14 = 0;
        if (!md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::compare(v14, *a2 + 8))return v11;
      }
      else
      {
        if (v15 >= *(_QWORD *)&v6)
          v15 %= *(_QWORD *)&v6;
        if (v15 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

void std::vector<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,geo::StdAllocator<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,mdm::Allocator>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  if (a2 != a3)
  {
    v3 = a2;
    v5 = a3;
    v6 = *(_QWORD *)(a1 + 8);
    if (a3 != v6)
    {
      do
      {
        *(_QWORD *)v3 = *(_QWORD *)v5;
        v7 = *(_OWORD *)(v5 + 8);
        *(_QWORD *)(v5 + 8) = 0;
        *(_QWORD *)(v5 + 16) = 0;
        v8 = *(std::__shared_weak_count **)(v3 + 16);
        *(_OWORD *)(v3 + 8) = v7;
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v5 += 24;
        v3 += 24;
      }
      while (v5 != v6);
      v5 = *(_QWORD *)(a1 + 8);
    }
    while (v5 != v3)
    {
      v11 = *(std::__shared_weak_count **)(v5 - 8);
      if (v11)
      {
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v5 -= 24;
    }
    *(_QWORD *)(a1 + 8) = v3;
  }
}

void std::__function::__func<md::LabelFeaturePool::flushRemovedTiles(void)::$_1,std::allocator<md::LabelFeaturePool::flushRemovedTiles(void)::$_1>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelFeaturePool::flushRemovedTiles(void)::$_1,std::allocator<md::LabelFeaturePool::flushRemovedTiles(void)::$_1>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CD418;
  return result;
}

void std::__function::__func<md::LabelFeaturePool::flushRemovedTiles(void)::$_1,std::allocator<md::LabelFeaturePool::flushRemovedTiles(void)::$_1>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CD418;
}

void std::__function::__func<md::LabelFeaturePool::flushRemovedTiles(void)::$_1,std::allocator<md::LabelFeaturePool::flushRemovedTiles(void)::$_1>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LabelsFlushTiles", (const char *)&unk_1A0189141, v1, 2u);
  }

}

void std::__function::__func<md::LabelFeaturePool::flushRemovedTiles(void)::$_0,std::allocator<md::LabelFeaturePool::flushRemovedTiles(void)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelFeaturePool::flushRemovedTiles(void)::$_0,std::allocator<md::LabelFeaturePool::flushRemovedTiles(void)::$_0>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CD3D0;
  return result;
}

void std::__function::__func<md::LabelFeaturePool::flushRemovedTiles(void)::$_0,std::allocator<md::LabelFeaturePool::flushRemovedTiles(void)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CD3D0;
}

void std::__function::__func<md::LabelFeaturePool::flushRemovedTiles(void)::$_0,std::allocator<md::LabelFeaturePool::flushRemovedTiles(void)::$_0>,void ()(void)>::operator()()
{
  NSObject *v0;
  uint8_t v1[16];

  if (GEOGetVectorKitPerformanceLog_onceToken != -1)
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_13_11780);
  v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_19F029000, v0, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsFlushTiles", (const char *)&unk_1A0189141, v1, 2u);
  }

}

_QWORD *md::LabelFeaturePool::addUnnamedLineFeature(_QWORD *a1, uint64_t a2, uint64_t *a3, char **a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  unsigned __int8 v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  unsigned __int8 v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v44;

  v44 = 0;
  {
    v41 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v41, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v16 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                       + 16))(mdm::Allocator::instance(void)::alloc, 104, 8);
  *v16 = 1;
  md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::LabelFeatureThunk((uint64_t)(v16 + 1), a3, a8, 0);
  v44 = v16;
  v17 = std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::__emplace_unique_key_args<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator> const&>((float *)(a2 + 120), &v44, &v44);
  *(_BYTE *)(a6 + 89) = v18;
  if (v18)
  {
    {
      v42 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v42, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v20 = mdm::Allocator::instance(void)::alloc;
    v21 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                         + 16))(mdm::Allocator::instance(void)::alloc, 528, 8);
    *v21 = &off_1E42DC270;
    v21[1] = 0;
    v21[2] = 0;
    v21[3] = v20;
    v22 = md::UniLineLabelFeature::UniLineLabelFeature((uint64_t)(v21 + 4), a3, a4, a5, a6);
    if (v44)
      v23 = v44 + 1;
    else
      v23 = 0;
    v24 = (std::__shared_weak_count *)v23[2];
    v23[1] = v22;
    v23[2] = v21;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = *(_QWORD *)(a2 + 672);
    v28 = v44;
    v29 = v44 + 1;
    if (!v44)
      v29 = 0;
    v30 = v29[1];
    *(_QWORD *)(v30 + 152) = v29;
    v31 = v27 + 1;
    *(_QWORD *)(a2 + 672) = v31;
    *(_QWORD *)(v30 + 72) = v31;
    *(_BYTE *)(v30 + 147) = a8;
  }
  else
  {
    v32 = v17;
    v33 = (_QWORD *)v17[2];
    if (v33)
      ++*v33;
    geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(&v44);
    v28 = (_QWORD *)v32[2];
    v44 = v28;
    if (v28)
      v34 = v28 + 1;
    else
      v34 = 0;
    md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::add(v34, a3);
    md::LabelLineStore::addRoadFeature(*(_QWORD *)(v34[1] + 192), a3, a4, a5, a6, v34[1] + 440);
  }
  std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeaturePoolTileInfo::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeaturePoolTileInfo::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::__emplace_unique_key_args<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator> const&>(a7 + 56, (uint64_t)v28, &v44);
  v35 = v28 + 1;
  if (!v28)
    v35 = 0;
  v37 = v35[1];
  v36 = v35[2];
  *a1 = v37;
  a1[1] = v36;
  if (v36)
  {
    v38 = (unint64_t *)(v36 + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  return geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(&v44);
}

void sub_19FEDEC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  std::__shared_weak_count *v11;

  std::__shared_weak_count::~__shared_weak_count(v11);
  (*(void (**)(uint64_t, std::__shared_weak_count *, uint64_t))(*(_QWORD *)v10 + 40))(v10, v11, 528);
  geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(&a10);
  _Unwind_Resume(a1);
}

_QWORD *md::LabelFeaturePool::addLineFeature(_QWORD *a1, uint64_t a2, uint64_t *a3, char **a4, uint64_t a5, uint64_t a6, unint64_t a7, char a8)
{
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  _QWORD *v18;
  char v19;
  unsigned __int8 v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v46;

  v14 = *(uint64_t **)(a6 + 96);
  if (v14)
    v15 = *v14;
  else
    v15 = 0;
  v46 = 0;
  {
    v42 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v42, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v17 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                       + 16))(mdm::Allocator::instance(void)::alloc, 104, 8);
  *v17 = 1;
  md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::LabelFeatureThunk((uint64_t)(v17 + 1), a3, a8, v15);
  v46 = v17;
  v18 = std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::__emplace_unique_key_args<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator> const&>((float *)(a2 + 64), &v46, &v46);
  *(_BYTE *)(a6 + 89) = v19;
  if (v19)
  {
    {
      v43 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v43, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v21 = mdm::Allocator::instance(void)::alloc;
    v22 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                         + 16))(mdm::Allocator::instance(void)::alloc, 528, 8);
    *v22 = &off_1E42DC270;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v21;
    v23 = md::UniLineLabelFeature::UniLineLabelFeature((uint64_t)(v22 + 4), a3, a4, a5, a6);
    if (v46)
      v24 = v46 + 1;
    else
      v24 = 0;
    v25 = (std::__shared_weak_count *)v24[2];
    v24[1] = v23;
    v24[2] = v22;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = *(_QWORD *)(a2 + 672);
    v29 = v46;
    v30 = v46 + 1;
    if (!v46)
      v30 = 0;
    v31 = v30[1];
    *(_QWORD *)(v31 + 152) = v30;
    v32 = v28 + 1;
    *(_QWORD *)(a2 + 672) = v32;
    *(_QWORD *)(v31 + 72) = v32;
    *(_BYTE *)(v31 + 147) = a8;
  }
  else
  {
    v33 = v18;
    v34 = (_QWORD *)v18[2];
    if (v34)
      ++*v34;
    geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(&v46);
    v29 = (_QWORD *)v33[2];
    v46 = v29;
    if (v29)
      v35 = v29 + 1;
    else
      v35 = 0;
    md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::add(v35, a3);
    md::LabelLineStore::addRoadFeature(*(_QWORD *)(v35[1] + 192), a3, a4, a5, a6, v35[1] + 440);
  }
  std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeaturePoolTileInfo::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeaturePoolTileInfo::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::__emplace_unique_key_args<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator> const&>(a7, (uint64_t)v29, &v46);
  v36 = v29 + 1;
  if (!v29)
    v36 = 0;
  v38 = v36[1];
  v37 = v36[2];
  *a1 = v38;
  a1[1] = v37;
  if (v37)
  {
    v39 = (unint64_t *)(v37 + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  return geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(&v46);
}

void sub_19FEDEFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  std::__shared_weak_count *v13;

  std::__shared_weak_count::~__shared_weak_count(v13);
  (*(void (**)(uint64_t, std::__shared_weak_count *, uint64_t))(*(_QWORD *)v12 + 40))(v12, v13, 528);
  geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(&a12);
  _Unwind_Resume(a1);
}

uint64_t md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::LabelFeatureThunk(uint64_t a1, uint64_t *a2, char a3, uint64_t a4)
{
  uint64_t *v8;
  unsigned __int8 v9;
  float *v10;
  std::__shared_weak_count *v11;
  uint64_t *v12;
  uint64_t **v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  int v18;
  uint64_t v19;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v8 = (uint64_t *)(a1 + 24);
  *(_QWORD *)a1 = &off_1E4292A68;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v9 & 1) == 0)
  {
    v10 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    if (v18)
    {
      v19 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v19, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v10 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    }
  }
  *(_QWORD *)(a1 + 48) = *((_QWORD *)v10 + 299);
  v11 = (std::__shared_weak_count *)a2[1];
  if (v11 && (v11 = std::__shared_weak_count::lock(v11)) != 0)
    v12 = (uint64_t *)*a2;
  else
    v12 = 0;
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = a4;
  *(_BYTE *)(a1 + 88) = a3;
  v13 = *(uint64_t ***)(a1 + 32);
  if ((unint64_t)v13 >= *(_QWORD *)(a1 + 40))
  {
    v16 = std::vector<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,geo::StdAllocator<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,mdm::Allocator>>::__push_back_slow_path<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>> const&>(v8, a1 + 56);
  }
  else
  {
    if (v13)
    {
      *v13 = a2;
      v13[1] = v12;
      v13[2] = (uint64_t *)v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
    }
    v16 = (uint64_t)(v13 + 3);
  }
  *(_QWORD *)(a1 + 32) = v16;
  return a1;
}

void sub_19FEDF164(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  md::components::Material *v3;

  md::components::Material::~Material(v3);
  std::vector<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,geo::StdAllocator<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,mdm::Allocator>>::~vector[abi:nn180100](v2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::add(_QWORD *a1, _QWORD *a2)
{
  std::mutex *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v4 = (std::mutex *)(a1[1] + 8);
  std::mutex::lock(v4);
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      v7 = *a2;
      goto LABEL_6;
    }
  }
  else
  {
    v6 = 0;
  }
  v7 = 0;
LABEL_6:
  v12 = a2;
  v13 = v7;
  v14 = v6;
  v8 = (_QWORD *)a1[4];
  if ((unint64_t)v8 >= a1[5])
  {
    v9 = std::vector<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,geo::StdAllocator<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,mdm::Allocator>>::__push_back_slow_path<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>>(a1 + 3, (uint64_t)&v12);
    v6 = v14;
    a1[4] = v9;
    if (!v6)
      goto LABEL_16;
    goto LABEL_12;
  }
  if (v8)
  {
    *v8 = a2;
    v8[1] = v7;
    v8[2] = v6;
    v13 = 0;
    v14 = 0;
    v6 = 0;
  }
  a1[4] = v8 + 3;
  if (v6)
  {
LABEL_12:
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_16:
  std::mutex::unlock(v4);
}

void sub_19FEDF2B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  md::components::Material::~Material((md::components::Material *)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release((_QWORD *)(v2 + 16));
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 24);
  }
  return a1;
}

uint64_t std::vector<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,geo::StdAllocator<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,mdm::Allocator>>::__push_back_slow_path<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v2 = 0xAAAAAAAAAAAAAAALL;
  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) < 0x555555555555555)
    v2 = v4;
  if (v2)
  {
    v7 = 24 * v2;
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 24 * v2, 8);
    v9 = v8 + 24 * v3;
    v2 = v8 + v7;
    if (v8)
    {
      *(_OWORD *)v9 = *(_OWORD *)a2;
      *(_QWORD *)(v8 + 24 * v3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
  }
  else
  {
    v9 = 8 * ((a1[1] - *a1) >> 3);
  }
  v10 = v9 + 24;
  v11 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v9;
    a1[1] = v10;
    v15 = a1[2];
    a1[2] = v2;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v12 - 24);
      v12 -= 24;
      *(_OWORD *)(v9 - 24) = v13;
      v9 -= 24;
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0;
    }
    while (v12 != v11);
    v12 = *a1;
    v14 = a1[1];
    *a1 = v9;
    a1[1] = v10;
    v15 = a1[2];
    a1[2] = v2;
    while (v14 != v12)
    {
      v16 = *(std::__shared_weak_count **)(v14 - 8);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v14 -= 24;
    }
  }
  if (v12)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v12, v15 - v12);
  return v10;
}

void std::__shared_ptr_emplace<md::UniLineLabelFeature,geo::StdAllocator<md::UniLineLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC270;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::UniLineLabelFeature,geo::StdAllocator<md::UniLineLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC270;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::UniLineLabelFeature,geo::StdAllocator<md::UniLineLabelFeature,mdm::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<md::UniLineLabelFeature,geo::StdAllocator<md::UniLineLabelFeature,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 528);
}

uint64_t std::vector<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,geo::StdAllocator<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,mdm::Allocator>>::__push_back_slow_path<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v2 = 0xAAAAAAAAAAAAAAALL;
  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) < 0x555555555555555)
    v2 = v4;
  if (v2)
  {
    v7 = 24 * v2;
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 24 * v2, 8);
    v9 = v8 + 24 * v3;
    v2 = v8 + v7;
    if (v8)
    {
      *(_OWORD *)v9 = *(_OWORD *)a2;
      v10 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(v8 + 24 * v3 + 16) = v10;
      if (v10)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
    }
  }
  else
  {
    v9 = 8 * ((a1[1] - *a1) >> 3);
  }
  v13 = v9 + 24;
  v14 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    v18 = a1[2];
    a1[2] = v2;
  }
  else
  {
    do
    {
      v16 = *(_OWORD *)(v15 - 24);
      v15 -= 24;
      *(_OWORD *)(v9 - 24) = v16;
      v9 -= 24;
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(v15 + 8) = 0;
      *(_QWORD *)(v15 + 16) = 0;
    }
    while (v15 != v14);
    v15 = *a1;
    v17 = a1[1];
    *a1 = v9;
    a1[1] = v13;
    v18 = a1[2];
    a1[2] = v2;
    while (v17 != v15)
    {
      v19 = *(std::__shared_weak_count **)(v17 - 8);
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v17 -= 24;
    }
  }
  if (v15)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v15, v18 - v15);
  return v13;
}

uint64_t *std::vector<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,geo::StdAllocator<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,mdm::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      geo::fast_shared_ptr<md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release((_QWORD *)(v2 + 16));
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 24);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::PhysicalLabelFeature,geo::StdAllocator<md::PhysicalLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC468;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::PhysicalLabelFeature,geo::StdAllocator<md::PhysicalLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC468;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::PhysicalLabelFeature,geo::StdAllocator<md::PhysicalLabelFeature,mdm::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<md::PhysicalLabelFeature,geo::StdAllocator<md::PhysicalLabelFeature,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 592);
}

void md::LabelFeaturePool::addContourLineFeatures(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned __int8 v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned __int8 v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint8x8_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  std::mutex *v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  _QWORD *v65;
  float v66;
  float v67;
  _BOOL8 v68;
  unint64_t v69;
  unint64_t v70;
  size_t prime;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  size_t v76;
  size_t v77;
  size_t v78;
  _QWORD *i;
  size_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint8x8_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  size_t v88;
  uint64_t v89;
  _QWORD *v90;
  float *v91;
  unint64_t v92;
  unsigned __int8 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  unsigned __int8 *v104;
  unsigned __int8 v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint8x8_t v119;
  _QWORD *v120;
  _QWORD *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  float v129;
  float v130;
  _BOOL8 v131;
  unint64_t v132;
  unint64_t v133;
  size_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  size_t v139;
  size_t v140;
  size_t v141;
  _QWORD *j;
  size_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint8x8_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  size_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t **v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t *p_shared_weak_owners;
  unint64_t v160;
  uint64_t **v161;
  uint64_t *v162;
  uint64_t **v163;
  unint64_t v164;
  uint64_t *v165;
  uint64_t *v166;
  char *v167;
  char *v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  unint64_t v175;
  char *v176;
  char *v177;
  char *v178;
  __int128 v179;
  unint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  _QWORD *v214;
  uint64_t **v215;
  uint64_t **v216;
  uint64_t v217;
  uint64_t v218;
  std::__shared_weak_count *v220;
  char *v221;
  char *v222;
  unint64_t v223;
  uint64_t v224;
  _QWORD v225[2];
  std::__shared_weak_count *v226;
  __int128 v227;
  std::__shared_weak_count *v228;

  v10 = *a3;
  v9 = a3[1];
  v212 = *(_QWORD *)a4;
  std::mutex::lock((std::mutex *)a1);
  v11 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>((_QWORD *)(a1 + 456), *a2);
  if (!v11)
  {
    std::mutex::unlock((std::mutex *)a1);
    return;
  }
  v12 = v11;
  std::mutex::unlock((std::mutex *)a1);
  v221 = 0;
  v222 = 0;
  v223 = 0;
  v14 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  {
    v211 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v211, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v224 = mdm::Allocator::instance(void)::alloc;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v223 - (_QWORD)v221) >> 3) <= 0x1F)
  {
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
    v14 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    v221 = (char *)(v15 + 24 * ((v222 - v221) / 24));
    v222 = v221;
    v223 = v15 + 768;
  }
  v16 = *a3;
  std::mutex::lock((std::mutex *)a1);
  if (v9 == v10)
    goto LABEL_370;
  v17 = 0;
  if ((unint64_t)((v9 - v10) / 56) <= 1)
    v18 = 1;
  else
    v18 = (v9 - v10) / 56;
  v214 = (_QWORD *)(a1 + 256);
  v215 = a5 + 1;
  v217 = v18;
  v213 = v12 + 27;
  v216 = a5;
  while (2)
  {
    if (!*(_BYTE *)(v16 + 28))
      goto LABEL_11;
    v218 = v17;
    v225[0] = 0;
    {
      v208 = operator new();
      *((_QWORD *)v14 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v208, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    v20 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v14 + 299) + 16))(*((_QWORD *)v14 + 299), 104, 8);
    v225[0] = v20;
    *(_OWORD *)(v20 + 16) = 0u;
    *(_QWORD *)v20 = 1;
    *(_QWORD *)(v20 + 8) = &off_1E4292AC8;
    *(_OWORD *)(v20 + 32) = 0u;
    v21 = (_QWORD *)(v20 + 32);
    *(_QWORD *)(v20 + 48) = 0;
    {
      v209 = operator new();
      *((_QWORD *)v14 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v209, "VectorKitLabels", 0x5ED09DD50000000FLL);
    }
    *(_QWORD *)(v20 + 56) = *((_QWORD *)v14 + 299);
    v23 = *(std::__shared_weak_count **)(v16 + 8);
    if (v23 && (v23 = std::__shared_weak_count::lock(v23)) != 0)
      v24 = *(_QWORD *)v16;
    else
      v24 = 0;
    *(_QWORD *)(v20 + 64) = v16;
    *(_QWORD *)(v20 + 72) = v24;
    *(_QWORD *)(v20 + 80) = v23;
    *(_QWORD *)(v20 + 88) = 0;
    *(_BYTE *)(v20 + 96) = 0;
    v25 = *(_QWORD **)(v20 + 40);
    v26 = *(_QWORD *)(v20 + 48);
    if ((unint64_t)v25 >= v26)
    {
      v30 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v25 - *v21) >> 3);
      v31 = v30 + 1;
      if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      if (0x5555555555555556 * ((uint64_t)(v26 - *v21) >> 3) > v31)
        v31 = 0x5555555555555556 * ((uint64_t)(v26 - *v21) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *v21) >> 3) >= 0x555555555555555)
        v32 = 0xAAAAAAAAAAAAAAALL;
      else
        v32 = v31;
      if (v32)
      {
        v33 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v20 + 56) + 16))(*(_QWORD *)(v20 + 56), 24 * v32, 8);
        v34 = v33 + 24 * v30;
        v35 = v33 + 24 * v32;
        if (v33)
        {
          *(_OWORD *)v34 = *(_OWORD *)(v20 + 64);
          v36 = *(_QWORD *)(v20 + 80);
          *(_QWORD *)(v33 + 24 * v30 + 16) = v36;
          if (v36)
          {
            v37 = (unint64_t *)(v36 + 8);
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
          }
        }
      }
      else
      {
        v35 = 0;
        v34 = 8 * (((uint64_t)v25 - *v21) >> 3);
      }
      v29 = v34 + 24;
      v39 = *(_QWORD *)(v20 + 32);
      v40 = *(_QWORD *)(v20 + 40);
      if (v40 == v39)
      {
        *(_QWORD *)(v20 + 32) = v34;
        *(_QWORD *)(v20 + 40) = v29;
        v43 = *(_QWORD *)(v20 + 48);
        *(_QWORD *)(v20 + 48) = v35;
      }
      else
      {
        do
        {
          v41 = *(_OWORD *)(v40 - 24);
          v40 -= 24;
          *(_OWORD *)(v34 - 24) = v41;
          v34 -= 24;
          *(_QWORD *)(v34 + 16) = *(_QWORD *)(v40 + 16);
          *(_QWORD *)(v40 + 8) = 0;
          *(_QWORD *)(v40 + 16) = 0;
        }
        while (v40 != v39);
        v40 = *(_QWORD *)(v20 + 32);
        v42 = *(_QWORD *)(v20 + 40);
        *(_QWORD *)(v20 + 32) = v34;
        *(_QWORD *)(v20 + 40) = v29;
        v43 = *(_QWORD *)(v20 + 48);
        *(_QWORD *)(v20 + 48) = v35;
        while (v42 != v40)
        {
          v44 = *(std::__shared_weak_count **)(v42 - 8);
          if (v44)
          {
            p_shared_owners = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(p_shared_owners);
            while (__stlxr(v46 - 1, p_shared_owners));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          v42 -= 24;
        }
      }
      if (v40)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v20 + 56) + 40))(*(_QWORD *)(v20 + 56), v40, v43 - v40);
    }
    else
    {
      if (v25)
      {
        *v25 = v16;
        v25[1] = v24;
        v25[2] = v23;
        if (v23)
        {
          v27 = (unint64_t *)&v23->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
      }
      v29 = (uint64_t)(v25 + 3);
    }
    *(_QWORD *)(v20 + 40) = v29;
    v225[0] = v20;
    v47 = *(unsigned __int8 *)(v20 + 96);
    v48 = *(int *)(*(_QWORD *)(v20 + 64) + 24);
    v49 = (((v47 >> 2) | (v47 << 6)) + v48 - 0x61C8864680B583EBLL) ^ v47;
    v50 = *(_QWORD *)(a1 + 240);
    if (!v50)
      goto LABEL_85;
    v51 = (uint8x8_t)vcnt_s8((int8x8_t)v50);
    v51.i16[0] = vaddlv_u8(v51);
    if (v51.u32[0] > 1uLL)
    {
      v29 = (((v47 >> 2) | (v47 << 6)) + v48 - 0x61C8864680B583EBLL) ^ v47;
      if (v49 >= v50)
        v29 = v49 % v50;
    }
    else
    {
      v29 = v49 & (v50 - 1);
    }
    v52 = *(_QWORD **)(*(_QWORD *)(a1 + 232) + 8 * v29);
    if (!v52 || (v53 = (_QWORD *)*v52) == 0)
    {
LABEL_85:
      v65 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 264) + 16))(*(_QWORD *)(a1 + 264), 24, 8);
      *(_QWORD *)&v227 = v65;
      *((_QWORD *)&v227 + 1) = a1 + 264;
      *v65 = 0;
      v65[1] = v49;
      v65[2] = v20;
      ++*(_QWORD *)v20;
      LOBYTE(v228) = 1;
      v66 = (float)(unint64_t)(*(_QWORD *)(a1 + 272) + 1);
      v67 = *(float *)(a1 + 280);
      if (v50 && (float)(v67 * (float)v50) >= v66)
      {
LABEL_134:
        v90 = *(_QWORD **)(*(_QWORD *)(a1 + 232) + 8 * v29);
        if (v90)
        {
          *v65 = *v90;
          v91 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
        }
        else
        {
          *v65 = *(_QWORD *)(a1 + 256);
          *(_QWORD *)(a1 + 256) = v65;
          *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * v29) = v214;
          v91 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
          if (!*v65)
            goto LABEL_143;
          v92 = *(_QWORD *)(*v65 + 8);
          if ((v50 & (v50 - 1)) != 0)
          {
            if (v92 >= v50)
              v92 %= v50;
          }
          else
          {
            v92 &= v50 - 1;
          }
          v90 = (_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * v92);
        }
        *v90 = v65;
LABEL_143:
        ++*(_QWORD *)(a1 + 272);
        *(_BYTE *)(a4 + 89) = 1;
        {
          v210 = operator new();
          *((_QWORD *)v91 + 299) = geo::MallocZoneAllocator::MallocZoneAllocator(v210, "VectorKitLabels", 0x5ED09DD50000000FLL);
        }
        v94 = *((_QWORD *)v91 + 299);
        v95 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v94 + 16))(v94, 488, 8);
        *(_QWORD *)v95 = &off_1E42DCC48;
        *(_QWORD *)(v95 + 8) = 0;
        v50 = v95 + 32;
        *(_QWORD *)(v95 + 16) = 0;
        *(_QWORD *)(v95 + 24) = v94;
        md::LineLabelFeature::LineLabelFeature(v95 + 32, 4, 2);
        *(_QWORD *)(v95 + 32) = &off_1E429E488;
        *(_QWORD *)(v95 + 472) = &unk_1E429E740;
        *(_BYTE *)(v95 + 480) = -1;
        *(float *)(v95 + 484) = (float)*(int *)(v16 + 24) * 0.1;
        v97 = *(_QWORD *)(v16 + 32);
        v96 = *(_QWORD *)(v16 + 40);
        if (v96)
        {
          v98 = (unint64_t *)(v96 + 8);
          do
            v99 = __ldxr(v98);
          while (__stxr(v99 + 1, v98));
        }
        v100 = *(std::__shared_weak_count **)(v95 + 456);
        *(_QWORD *)(v95 + 448) = v97;
        *(_QWORD *)(v95 + 456) = v96;
        if (v100)
        {
          v101 = (unint64_t *)&v100->__shared_owners_;
          do
            v102 = __ldaxr(v101);
          while (__stlxr(v102 - 1, v101));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
          }
        }
        v103 = *(_QWORD *)(v95 + 224);
        *(_BYTE *)(v103 + 122) = 4;
        *(_BYTE *)(v103 + 290) = *(unsigned __int8 *)(a4 + 8) != 255;
        md::LabelLineStore::addContourLine(v103, (uint64_t *)v16, a4, v95 + 472);
        v104 = *(unsigned __int8 **)(v95 + 224);
        v105 = atomic_load(v104 + 80);
        if ((v105 & 1) != 0)
          md::LabelLineStore::consumeWorkUnits((md::LabelLineStore *)v104);
        (*(void (**)(unint64_t, uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, v16, *(unsigned __int8 *)(a4 + 88));
        if (v225[0])
          v106 = v225[0] + 8;
        else
          v106 = 0;
        v107 = *(std::__shared_weak_count **)(v106 + 16);
        *(_QWORD *)(v106 + 8) = v50;
        *(_QWORD *)(v106 + 16) = v95;
        if (v107)
        {
          v108 = (unint64_t *)&v107->__shared_owners_;
          do
            v109 = __ldaxr(v108);
          while (__stlxr(v109 - 1, v108));
          if (!v109)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
        v110 = *(_QWORD *)(a1 + 672);
        v111 = (_QWORD *)v225[0];
        v112 = v225[0] + 8;
        if (!v225[0])
          v112 = 0;
        v113 = *(_QWORD *)(v112 + 8);
        *(_QWORD *)(v113 + 152) = v112;
        v114 = v110 + 1;
        *(_QWORD *)(a1 + 672) = v114;
        *(_QWORD *)(v113 + 72) = v114;
        *(_BYTE *)(v113 + 147) = 0;
        goto LABEL_165;
      }
      v68 = (v50 & (v50 - 1)) != 0;
      if (v50 < 3)
        v68 = 1;
      v69 = v68 | (2 * v50);
      v70 = vcvtps_u32_f32(v66 / v67);
      if (v69 <= v70)
        prime = v70;
      else
        prime = v69;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
      }
      v50 = *(_QWORD *)(a1 + 240);
      if (prime <= v50)
      {
        if (prime >= v50)
          goto LABEL_121;
        v83 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 272) / *(float *)(a1 + 280));
        if (v50 < 3 || (v84 = (uint8x8_t)vcnt_s8((int8x8_t)v50), v84.i16[0] = vaddlv_u8(v84), v84.u32[0] > 1uLL))
        {
          v83 = std::__next_prime(v83);
        }
        else
        {
          v85 = 1 << -(char)__clz(v83 - 1);
          if (v83 >= 2)
            v83 = v85;
        }
        if (prime <= v83)
          prime = v83;
        if (prime >= v50)
        {
          v50 = *(_QWORD *)(a1 + 240);
LABEL_121:
          if ((v50 & (v50 - 1)) != 0)
          {
            if (v49 >= v50)
              v29 = v49 % v50;
            else
              v29 = v49;
          }
          else
          {
            v29 = (v50 - 1) & v49;
          }
          goto LABEL_134;
        }
        if (!prime)
        {
          v183 = *(_QWORD *)(a1 + 232);
          *(_QWORD *)(a1 + 232) = 0;
          if (v183)
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 248) + 40))(*(_QWORD *)(a1 + 248), v183, 8 * *(_QWORD *)(a1 + 240));
          v50 = 0;
          *(_QWORD *)(a1 + 240) = 0;
          goto LABEL_121;
        }
      }
      v72 = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(**(_QWORD **)(a1 + 248) + 16))(*(_QWORD *)(a1 + 248), 8 * prime, 8);
      v73 = *(_QWORD *)(a1 + 232);
      *(_QWORD *)(a1 + 232) = v72;
      if (v73)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 248) + 40))(*(_QWORD *)(a1 + 248), v73, 8 * *(_QWORD *)(a1 + 240));
      v74 = 0;
      *(_QWORD *)(a1 + 240) = prime;
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * v74++) = 0;
      while (prime != v74);
      v75 = (_QWORD *)*v214;
      if (!*v214)
      {
LABEL_120:
        v50 = prime;
        goto LABEL_121;
      }
      v76 = v75[1];
      v77 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v78 = v76 & v77;
        *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * v78) = v214;
        for (i = (_QWORD *)*v75; *v75; i = (_QWORD *)*v75)
        {
          v80 = i[1] & v77;
          if (v80 == v78)
          {
            v75 = i;
          }
          else
          {
            v81 = *(_QWORD *)(a1 + 232);
            if (*(_QWORD *)(v81 + 8 * v80))
            {
              *v75 = *i;
              v82 = 8 * v80;
              *i = **(_QWORD **)(*(_QWORD *)(a1 + 232) + v82);
              **(_QWORD **)(*(_QWORD *)(a1 + 232) + v82) = i;
            }
            else
            {
              *(_QWORD *)(v81 + 8 * v80) = v75;
              v75 = i;
              v78 = v80;
            }
          }
        }
        goto LABEL_120;
      }
      if (v76 >= prime)
        v76 %= prime;
      *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * v76) = v214;
      v86 = (_QWORD *)*v75;
      if (!*v75)
        goto LABEL_120;
      while (1)
      {
        v88 = v86[1];
        if (v88 >= prime)
          v88 %= prime;
        if (v88 != v76)
        {
          v89 = *(_QWORD *)(a1 + 232);
          if (!*(_QWORD *)(v89 + 8 * v88))
          {
            *(_QWORD *)(v89 + 8 * v88) = v75;
            goto LABEL_125;
          }
          *v75 = *v86;
          v87 = 8 * v88;
          *v86 = **(_QWORD **)(*(_QWORD *)(a1 + 232) + v87);
          **(_QWORD **)(*(_QWORD *)(a1 + 232) + v87) = v86;
          v86 = v75;
        }
        v88 = v76;
LABEL_125:
        v75 = v86;
        v86 = (_QWORD *)*v86;
        v76 = v88;
        if (!v86)
          goto LABEL_120;
      }
    }
    if (v51.u32[0] < 2uLL)
    {
      while (1)
      {
        v57 = v53[1];
        if (v57 == v49)
        {
          v55 = (_QWORD *)v53[2];
          v58 = v55 + 1;
          if (!v55)
            v58 = 0;
          if (*((unsigned __int8 *)v58 + 88) == (_DWORD)v47 && *(_DWORD *)(v58[7] + 24) == (_DWORD)v48)
            goto LABEL_77;
        }
        else if ((v57 & (v50 - 1)) != v29)
        {
          goto LABEL_85;
        }
        v53 = (_QWORD *)*v53;
        if (!v53)
          goto LABEL_85;
      }
    }
    while (1)
    {
      v54 = v53[1];
      if (v54 == v49)
        break;
      if (v54 >= v50)
        v54 %= v50;
      if (v54 != v29)
        goto LABEL_85;
LABEL_61:
      v53 = (_QWORD *)*v53;
      if (!v53)
        goto LABEL_85;
    }
    v55 = (_QWORD *)v53[2];
    v56 = v55 + 1;
    if (!v55)
      v56 = 0;
    if (*((unsigned __int8 *)v56 + 88) != (_DWORD)v47 || *(_DWORD *)(v56[7] + 24) != (_DWORD)v48)
      goto LABEL_61;
LABEL_77:
    *(_BYTE *)(a4 + 89) = 0;
    if (v55)
      ++*v55;
    geo::fast_shared_ptr<md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(v225);
    v59 = v53[2];
    v225[0] = v59;
    if (v59)
      v60 = v59 + 8;
    else
      v60 = 0;
    v61 = (std::mutex *)(*(_QWORD *)(v60 + 8) + 8);
    std::mutex::lock(v61);
    v62 = *(std::__shared_weak_count **)(v16 + 8);
    if (v62)
    {
      v63 = std::__shared_weak_count::lock(v62);
      if (v63)
        v64 = *(_QWORD *)v16;
      else
        v64 = 0;
    }
    else
    {
      v63 = 0;
      v64 = 0;
    }
    *(_QWORD *)&v227 = v16;
    *((_QWORD *)&v227 + 1) = v64;
    v228 = v63;
    v225[1] = 0;
    v226 = 0;
    v185 = *(_QWORD **)(v60 + 32);
    v186 = *(_QWORD *)(v60 + 40);
    if ((unint64_t)v185 < v186)
    {
      if (v185)
      {
        *v185 = v16;
        v185[1] = v64;
        v185[2] = v63;
        *((_QWORD *)&v227 + 1) = 0;
        v228 = 0;
        v63 = 0;
      }
      *(_QWORD *)(v60 + 32) = v185 + 3;
      if (!v63)
        goto LABEL_356;
LABEL_352:
      v202 = (unint64_t *)&v63->__shared_owners_;
      do
        v203 = __ldaxr(v202);
      while (__stlxr(v203 - 1, v202));
      if (!v203)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
      goto LABEL_356;
    }
    v187 = *(_QWORD *)(v60 + 24);
    v188 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v185 - v187) >> 3);
    v189 = v188 + 1;
    if (v188 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    if (0x5555555555555556 * ((uint64_t)(v186 - v187) >> 3) > v189)
      v189 = 0x5555555555555556 * ((uint64_t)(v186 - v187) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v186 - v187) >> 3) >= 0x555555555555555)
      v190 = 0xAAAAAAAAAAAAAAALL;
    else
      v190 = v189;
    if (v190)
    {
      v191 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v60 + 48) + 16))(*(_QWORD *)(v60 + 48), 24 * v190, 8);
      v192 = v191 + 24 * v188;
      v193 = v191 + 24 * v190;
      if (v191)
      {
        *(_OWORD *)v192 = v227;
        *(_QWORD *)(v191 + 24 * v188 + 16) = v63;
        *((_QWORD *)&v227 + 1) = 0;
        v228 = 0;
      }
    }
    else
    {
      v193 = 0;
      v192 = 8 * (((uint64_t)v185 - v187) >> 3);
    }
    v194 = v192 + 24;
    v195 = *(_QWORD *)(v60 + 24);
    v196 = *(_QWORD *)(v60 + 32);
    if (v196 == v195)
    {
      *(_QWORD *)(v60 + 24) = v192;
      *(_QWORD *)(v60 + 32) = v194;
      v198 = *(_QWORD *)(v60 + 40);
      *(_QWORD *)(v60 + 40) = v193;
    }
    else
    {
      do
      {
        v197 = *(_OWORD *)(v196 - 24);
        v196 -= 24;
        *(_OWORD *)(v192 - 24) = v197;
        v192 -= 24;
        *(_QWORD *)(v192 + 16) = *(_QWORD *)(v196 + 16);
        *(_QWORD *)(v196 + 8) = 0;
        *(_QWORD *)(v196 + 16) = 0;
      }
      while (v196 != v195);
      v196 = *(_QWORD *)(v60 + 24);
      v50 = *(_QWORD *)(v60 + 32);
      *(_QWORD *)(v60 + 24) = v192;
      *(_QWORD *)(v60 + 32) = v194;
      v198 = *(_QWORD *)(v60 + 40);
      *(_QWORD *)(v60 + 40) = v193;
      while (v50 != v196)
      {
        v199 = *(std::__shared_weak_count **)(v50 - 8);
        if (v199)
        {
          v200 = (unint64_t *)&v199->__shared_owners_;
          do
            v201 = __ldaxr(v200);
          while (__stlxr(v201 - 1, v200));
          if (!v201)
          {
            ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
            std::__shared_weak_count::__release_weak(v199);
          }
        }
        v50 -= 24;
      }
    }
    if (v196)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v60 + 48) + 40))(*(_QWORD *)(v60 + 48), v196, v198 - v196);
    v63 = v228;
    *(_QWORD *)(v60 + 32) = v194;
    if (v63)
      goto LABEL_352;
LABEL_356:
    v204 = v226;
    if (v226)
    {
      v205 = (unint64_t *)&v226->__shared_owners_;
      do
        v206 = __ldaxr(v205);
      while (__stlxr(v206 - 1, v205));
      if (!v206)
      {
        ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
        std::__shared_weak_count::__release_weak(v204);
      }
    }
    std::mutex::unlock(v61);
    v111 = (_QWORD *)v225[0];
    v207 = v225[0] + 8;
    if (!v225[0])
      v207 = 0;
    md::LabelLineStore::addContourLine(*(_QWORD *)(*(_QWORD *)(v207 + 8) + 192), (uint64_t *)v16, a4, *(_QWORD *)(v207 + 8) + 440);
LABEL_165:
    if (v111)
      v115 = v111 + 1;
    else
      v115 = 0;
    v116 = v115[1];
    v117 = *(_QWORD *)(v116 + 72);
    v118 = v12[25];
    if (v118)
    {
      v119 = (uint8x8_t)vcnt_s8((int8x8_t)v118);
      v119.i16[0] = vaddlv_u8(v119);
      if (v119.u32[0] > 1uLL)
      {
        v50 = *(_QWORD *)(v116 + 72);
        if (v117 >= v118)
          v50 = v117 % v118;
      }
      else
      {
        v50 = (v118 - 1) & v117;
      }
      v120 = *(_QWORD **)(v12[24] + 8 * v50);
      if (v120)
      {
        v121 = (_QWORD *)*v120;
        if (v121)
        {
          if (v119.u32[0] < 2uLL)
          {
            while (1)
            {
              v127 = v121[1];
              if (v127 == v117)
              {
                v125 = v121[2];
                if (v125)
                  v126 = v125 + 8;
                else
                  v126 = 0;
                if (*(_QWORD *)(*(_QWORD *)(v126 + 8) + 72) == v117)
                  goto LABEL_302;
              }
              else if ((v127 & (v118 - 1)) != v50)
              {
                goto LABEL_194;
              }
              v121 = (_QWORD *)*v121;
              if (!v121)
                goto LABEL_194;
            }
          }
          do
          {
            v122 = v121[1];
            if (v122 == v117)
            {
              v123 = v121[2];
              if (v123)
                v124 = v123 + 8;
              else
                v124 = 0;
              if (*(_QWORD *)(*(_QWORD *)(v124 + 8) + 72) == v117)
              {
LABEL_302:
                v154 = v216;
                goto LABEL_255;
              }
            }
            else
            {
              if (v122 >= v118)
                v122 %= v118;
              if (v122 != v50)
                break;
            }
            v121 = (_QWORD *)*v121;
          }
          while (v121);
        }
      }
    }
LABEL_194:
    v128 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v12[28] + 16))(v12[28], 24, 8);
    *(_QWORD *)&v227 = v128;
    *((_QWORD *)&v227 + 1) = v12 + 28;
    *v128 = 0;
    v128[1] = v117;
    v128[2] = v111;
    if (v111)
      ++*v111;
    LOBYTE(v228) = 1;
    v129 = (float)(unint64_t)(v12[29] + 1);
    v130 = *((float *)v12 + 60);
    if (!v118 || (float)(v130 * (float)v118) < v129)
    {
      v131 = (v118 & (v118 - 1)) != 0;
      if (v118 < 3)
        v131 = 1;
      v132 = v131 | (2 * v118);
      v133 = vcvtps_u32_f32(v129 / v130);
      if (v132 <= v133)
        v134 = v133;
      else
        v134 = v132;
      if (v134 == 1)
      {
        v134 = 2;
      }
      else if ((v134 & (v134 - 1)) != 0)
      {
        v134 = std::__next_prime(v134);
      }
      v118 = v12[25];
      if (v134 > v118)
      {
LABEL_208:
        v135 = (*(uint64_t (**)(_QWORD, size_t, uint64_t))(*(_QWORD *)v12[26] + 16))(v12[26], 8 * v134, 8);
        v136 = v12[24];
        v12[24] = v135;
        if (v136)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v12[26] + 40))(v12[26], v136, 8 * v12[25]);
        v137 = 0;
        v12[25] = v134;
        do
          *(_QWORD *)(v12[24] + 8 * v137++) = 0;
        while (v134 != v137);
        v138 = (_QWORD *)*v213;
        if (!*v213)
          goto LABEL_231;
        v139 = v138[1];
        v140 = v134 - 1;
        if ((v134 & (v134 - 1)) == 0)
        {
          v141 = v139 & v140;
          *(_QWORD *)(v12[24] + 8 * v141) = v213;
          for (j = (_QWORD *)*v138; *v138; j = (_QWORD *)*v138)
          {
            v143 = j[1] & v140;
            if (v143 == v141)
            {
              v138 = j;
            }
            else
            {
              v144 = v12[24];
              if (*(_QWORD *)(v144 + 8 * v143))
              {
                *v138 = *j;
                v145 = 8 * v143;
                *j = **(_QWORD **)(v12[24] + v145);
                **(_QWORD **)(v12[24] + v145) = j;
              }
              else
              {
                *(_QWORD *)(v144 + 8 * v143) = v138;
                v138 = j;
                v141 = v143;
              }
            }
          }
          goto LABEL_231;
        }
        if (v139 >= v134)
          v139 %= v134;
        *(_QWORD *)(v12[24] + 8 * v139) = v213;
        v149 = (_QWORD *)*v138;
        if (!*v138)
        {
LABEL_231:
          v118 = v134;
          goto LABEL_232;
        }
        while (2)
        {
          v151 = v149[1];
          if (v151 >= v134)
            v151 %= v134;
          if (v151 != v139)
          {
            v152 = v12[24];
            if (!*(_QWORD *)(v152 + 8 * v151))
            {
              *(_QWORD *)(v152 + 8 * v151) = v138;
LABEL_236:
              v138 = v149;
              v149 = (_QWORD *)*v149;
              v139 = v151;
              if (!v149)
                goto LABEL_231;
              continue;
            }
            *v138 = *v149;
            v150 = 8 * v151;
            *v149 = **(_QWORD **)(v12[24] + v150);
            **(_QWORD **)(v12[24] + v150) = v149;
            v149 = v138;
          }
          break;
        }
        v151 = v139;
        goto LABEL_236;
      }
      if (v134 < v118)
      {
        v146 = vcvtps_u32_f32((float)(unint64_t)v12[29] / *((float *)v12 + 60));
        if (v118 < 3 || (v147 = (uint8x8_t)vcnt_s8((int8x8_t)v118), v147.i16[0] = vaddlv_u8(v147), v147.u32[0] > 1uLL))
        {
          v146 = std::__next_prime(v146);
        }
        else
        {
          v148 = 1 << -(char)__clz(v146 - 1);
          if (v146 >= 2)
            v146 = v148;
        }
        if (v134 <= v146)
          v134 = v146;
        if (v134 >= v118)
        {
          v118 = v12[25];
        }
        else
        {
          if (v134)
            goto LABEL_208;
          v184 = v12[24];
          v12[24] = 0;
          if (v184)
            (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v12[26] + 40))(v12[26], v184, 8 * v12[25]);
          v118 = 0;
          v12[25] = 0;
        }
      }
LABEL_232:
      if ((v118 & (v118 - 1)) != 0)
      {
        if (v117 >= v118)
          v50 = v117 % v118;
        else
          v50 = v117;
      }
      else
      {
        v50 = (v118 - 1) & v117;
      }
    }
    v153 = *(_QWORD **)(v12[24] + 8 * v50);
    if (v153)
    {
      *v128 = *v153;
      v154 = v216;
      goto LABEL_253;
    }
    *v128 = v12[27];
    v12[27] = v128;
    *(_QWORD *)(v12[24] + 8 * v50) = v213;
    v154 = v216;
    if (*v128)
    {
      v155 = *(_QWORD *)(*v128 + 8);
      if ((v118 & (v118 - 1)) != 0)
      {
        if (v155 >= v118)
          v155 %= v118;
      }
      else
      {
        v155 &= v118 - 1;
      }
      v153 = (_QWORD *)(v12[24] + 8 * v155);
LABEL_253:
      *v153 = v128;
    }
    ++v12[29];
    v116 = v115[1];
LABEL_255:
    v156 = (std::__shared_weak_count *)v115[2];
    v220 = v156;
    if (v156)
    {
      v157 = (unint64_t *)&v156->__shared_owners_;
      do
        v158 = __ldxr(v157);
      while (__stxr(v158 + 1, v157));
      geo::fast_shared_ptr<md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(v225);
      p_shared_weak_owners = (unint64_t *)&v156->__shared_weak_owners_;
      do
        v160 = __ldxr(p_shared_weak_owners);
      while (__stxr(v160 + 1, p_shared_weak_owners));
    }
    else
    {
      geo::fast_shared_ptr<md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(v225);
    }
    v161 = v215;
    while (1)
    {
      v162 = *v161;
      v163 = v161;
      if (!*v161)
        break;
      while (1)
      {
        v161 = (uint64_t **)v162;
        v164 = v162[5];
        if ((unint64_t)v156 < v164)
          break;
        if (v164 >= (unint64_t)v156)
        {
          if (v156)
            std::__shared_weak_count::__release_weak(v156);
          goto LABEL_271;
        }
        v162 = v161[1];
        if (!v162)
        {
          v163 = v161 + 1;
          goto LABEL_268;
        }
      }
    }
LABEL_268:
    v165 = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v154[2] + 16))(v154[2], 48, 8);
    v165[4] = v116;
    v165[5] = (uint64_t)v156;
    *v165 = 0;
    v165[1] = 0;
    v165[2] = (uint64_t)v161;
    *v163 = v165;
    v166 = (uint64_t *)**v154;
    if (v166)
    {
      *v154 = v166;
      v165 = *v163;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v154[1], v165);
    v154[3] = (uint64_t *)((char *)v154[3] + 1);
LABEL_271:
    v17 = v218;
    if (*(_BYTE *)(a4 + 89))
    {
      v167 = v222;
      if ((unint64_t)v222 >= v223)
      {
        v169 = 0xAAAAAAAAAAAAAAABLL * ((v222 - v221) >> 3);
        v170 = v169 + 1;
        if (v169 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        if (0x5555555555555556 * ((uint64_t)(v223 - (_QWORD)v221) >> 3) > v170)
          v170 = 0x5555555555555556 * ((uint64_t)(v223 - (_QWORD)v221) >> 3);
        v171 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v223 - (_QWORD)v221) >> 3) >= 0x555555555555555
             ? 0xAAAAAAAAAAAAAAALL
             : v170;
        if (v171)
        {
          v172 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v224 + 16))(v224, 24 * v171, 8);
          v173 = (char *)(v172 + 24 * v169);
          v174 = v172 + 24 * v171;
          if (v172)
          {
            *(_QWORD *)v173 = v116;
            v175 = v172 + 24 * v169;
            *(_QWORD *)(v175 + 8) = 0;
            *(_QWORD *)(v175 + 16) = 0;
          }
        }
        else
        {
          v174 = 0;
          v173 = (char *)(8 * ((v222 - v221) >> 3));
        }
        v177 = v221;
        v176 = v222;
        v178 = v173;
        if (v222 != v221)
        {
          do
          {
            v179 = *(_OWORD *)(v176 - 24);
            *((_QWORD *)v178 - 1) = *((_QWORD *)v176 - 1);
            *(_OWORD *)(v178 - 24) = v179;
            v178 -= 24;
            v176 -= 24;
          }
          while (v176 != v177);
          v176 = v221;
        }
        v168 = v173 + 24;
        v221 = v178;
        v222 = v173 + 24;
        v180 = v223;
        v223 = v174;
        if (v176)
          (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v224 + 40))(v224, v176, v180 - (_QWORD)v176);
      }
      else
      {
        if (v222)
        {
          *((_QWORD *)v222 + 1) = 0;
          *((_QWORD *)v167 + 2) = 0;
          *(_QWORD *)v167 = v116;
        }
        v168 = v167 + 24;
      }
      v222 = v168;
      if (v168 != v221 && 0xAAAAAAAAAAAAAAABLL * ((v168 - v221) >> 3) >= 0x20)
      {
        md::LabelFeatureStyler::styleLabelFeatures(*(unsigned int **)(v212 + 296), &v221, 1u, 1, *(_QWORD *)(*(_QWORD *)(v212 + 152) + 32));
        v222 = v221;
        std::mutex::unlock((std::mutex *)a1);
        if (a1)
        {
          std::mutex::lock((std::mutex *)a1);
          goto LABEL_297;
        }
LABEL_379:
        std::__throw_system_error(1, "unique_lock::lock: references null mutex");
        __break(1u);
        return;
      }
    }
LABEL_297:
    if (v220)
    {
      v181 = (unint64_t *)&v220->__shared_owners_;
      do
        v182 = __ldaxr(v181);
      while (__stlxr(v182 - 1, v181));
      if (!v182)
      {
        ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
        std::__shared_weak_count::__release_weak(v220);
      }
    }
    v14 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
LABEL_11:
    ++v17;
    v16 += 56;
    if (v17 != v217)
      continue;
    break;
  }
LABEL_370:
  if (v221 != v222)
  {
    md::LabelFeatureStyler::styleLabelFeatures(*(unsigned int **)(v212 + 296), &v221, 1u, 1, *(_QWORD *)(*(_QWORD *)(v212 + 152) + 32));
    v222 = v221;
    std::mutex::unlock((std::mutex *)a1);
    if (!a1)
      goto LABEL_379;
    std::mutex::lock((std::mutex *)a1);
  }
  std::mutex::unlock((std::mutex *)a1);
  if (v221)
  {
    v222 = v221;
    (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v224 + 40))(v224, v221, v223 - (_QWORD)v221);
  }
}

void sub_19FEE0FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::mutex *v26;
  std::mutex *v27;
  uint64_t v28;

  md::components::Material::~Material((md::components::Material *)(v28 - 112));
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v28 - 128);
  std::mutex::unlock(v27);
  geo::fast_shared_ptr<md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release(&a26);
  std::mutex::unlock(v26);
  if (a22)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a25 + 40))(a25, a22, a24 - a22);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      geo::fast_shared_ptr<md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release((_QWORD *)(v2 + 16));
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 24);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::ContourLineLabelFeature,geo::StdAllocator<md::ContourLineLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCC48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::ContourLineLabelFeature,geo::StdAllocator<md::ContourLineLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCC48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::ContourLineLabelFeature,geo::StdAllocator<md::ContourLineLabelFeature,mdm::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<md::ContourLineLabelFeature,geo::StdAllocator<md::ContourLineLabelFeature,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 488);
}

uint64_t *std::unique_ptr<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>,mdm::MDAllocator>::release((_QWORD *)(v2 + 16));
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 24);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::TransitLineLabelFeature,geo::StdAllocator<md::TransitLineLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCD98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TransitLineLabelFeature,geo::StdAllocator<md::TransitLineLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCD98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::TransitLineLabelFeature,geo::StdAllocator<md::TransitLineLabelFeature,mdm::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<md::TransitLineLabelFeature,geo::StdAllocator<md::TransitLineLabelFeature,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 744);
}

uint64_t md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::LabelFeatureThunk(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t *v6;
  unsigned __int8 v7;
  float *v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  uint64_t **v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  int v16;
  uint64_t v17;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v6 = (uint64_t *)(a1 + 24);
  *(_QWORD *)a1 = &off_1E4292A38;
  *(_QWORD *)(a1 + 40) = 0;
  v8 = &md::SignedDistanceFieldGenerator::_hypotCache[32438];
  if ((v7 & 1) == 0)
  {
    v8 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    if (v16)
    {
      v17 = operator new();
      mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v17, "VectorKitLabels", 0x5ED09DD50000000FLL);
      v8 = md::SignedDistanceFieldGenerator::_hypotCache + 129752;
    }
  }
  *(_QWORD *)(a1 + 48) = *((_QWORD *)v8 + 299);
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9 && (v9 = std::__shared_weak_count::lock(v9)) != 0)
    v10 = (uint64_t *)*a2;
  else
    v10 = 0;
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = a3;
  v11 = *(uint64_t ***)(a1 + 32);
  if ((unint64_t)v11 >= *(_QWORD *)(a1 + 40))
  {
    v14 = std::vector<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,geo::StdAllocator<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,mdm::Allocator>>::__push_back_slow_path<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>> const&>(v6, a1 + 56);
  }
  else
  {
    if (v11)
    {
      *v11 = a2;
      v11[1] = v10;
      v11[2] = (uint64_t *)v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
    }
    v14 = (uint64_t)(v11 + 3);
  }
  *(_QWORD *)(a1 + 32) = v14;
  return a1;
}

void sub_19FEE13D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  md::components::Material *v3;

  md::components::Material::~Material(v3);
  std::vector<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,geo::StdAllocator<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,mdm::Allocator>>::~vector[abi:nn180100](v2);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::add(_QWORD *a1, _QWORD *a2)
{
  std::mutex *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v4 = (std::mutex *)(a1[1] + 8);
  std::mutex::lock(v4);
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      v7 = *a2;
      goto LABEL_6;
    }
  }
  else
  {
    v6 = 0;
  }
  v7 = 0;
LABEL_6:
  v12 = a2;
  v13 = v7;
  v14 = v6;
  v8 = (_QWORD *)a1[4];
  if ((unint64_t)v8 >= a1[5])
  {
    v9 = std::vector<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,geo::StdAllocator<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,mdm::Allocator>>::__push_back_slow_path<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>>(a1 + 3, (uint64_t)&v12);
    v6 = v14;
    a1[4] = v9;
    if (!v6)
      goto LABEL_16;
    goto LABEL_12;
  }
  if (v8)
  {
    *v8 = a2;
    v8[1] = v7;
    v8[2] = v6;
    v13 = 0;
    v14 = 0;
    v6 = 0;
  }
  a1[4] = v8 + 3;
  if (v6)
  {
LABEL_12:
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_16:
  std::mutex::unlock(v4);
}

void sub_19FEE1520(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  md::components::Material::~Material((md::components::Material *)va1);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::release((_QWORD *)(v2 + 16));
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 24);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::TransitNodeLabelFeature,geo::StdAllocator<md::TransitNodeLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCE08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TransitNodeLabelFeature,geo::StdAllocator<md::TransitNodeLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCE08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::TransitNodeLabelFeature,geo::StdAllocator<md::TransitNodeLabelFeature,mdm::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<md::TransitNodeLabelFeature,geo::StdAllocator<md::TransitNodeLabelFeature,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 952);
}

void std::__shared_ptr_emplace<md::TransitAccessPointLabelFeature,geo::StdAllocator<md::TransitAccessPointLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDAF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TransitAccessPointLabelFeature,geo::StdAllocator<md::TransitAccessPointLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DDAF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::TransitAccessPointLabelFeature,geo::StdAllocator<md::TransitAccessPointLabelFeature,mdm::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<md::TransitAccessPointLabelFeature,geo::StdAllocator<md::TransitAccessPointLabelFeature,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 752);
}

void std::__shared_ptr_emplace<md::PointLabelFeature,geo::StdAllocator<md::PointLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB908;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::PointLabelFeature,geo::StdAllocator<md::PointLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DB908;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::PointLabelFeature,geo::StdAllocator<md::PointLabelFeature,mdm::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<md::PointLabelFeature,geo::StdAllocator<md::PointLabelFeature,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 704);
}

void std::__shared_ptr_emplace<md::MuninPointLabelFeature,geo::StdAllocator<md::MuninPointLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCAC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::MuninPointLabelFeature,geo::StdAllocator<md::MuninPointLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCAC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::MuninPointLabelFeature,geo::StdAllocator<md::MuninPointLabelFeature,mdm::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<md::MuninPointLabelFeature,geo::StdAllocator<md::MuninPointLabelFeature,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 704);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,md::LabelFeaturePool::RemovedVersionInfo>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<unsigned long long,md::LabelFeaturePool::RemovedVersionInfo>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(void **)(v2 + 32);
      if (v3 != *(void **)(v2 + 48))
        free(v3);
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 80);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::MuninStorefrontLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD658;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::MuninStorefrontLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD658;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::MuninStorefrontLabelFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t *std::unique_ptr<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>,mdm::MDAllocator>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>,mdm::MDAllocator>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      geo::fast_shared_ptr<md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>,mdm::MDAllocator>::release((_QWORD *)(v2 + 16));
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 24);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::OverlayLineLabelFeature,geo::StdAllocator<md::OverlayLineLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCCF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::OverlayLineLabelFeature,geo::StdAllocator<md::OverlayLineLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCCF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::OverlayLineLabelFeature,geo::StdAllocator<md::OverlayLineLabelFeature,mdm::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<md::OverlayLineLabelFeature,geo::StdAllocator<md::OverlayLineLabelFeature,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 472);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<void *,md::LabelFeaturePoolTileInfo>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<void *,md::LabelFeaturePoolTileInfo>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      md::LabelFeaturePoolTileInfo::~LabelFeaturePoolTileInfo((md::LabelFeaturePoolTileInfo *)(v2 + 24));
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)a1[1] + 40))(*(_QWORD *)a1[1], v2, 440);
  }
  return a1;
}

_QWORD *std::__function::__func<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0,std::allocator<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E42CD460;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0,std::allocator<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E42CD460;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0,std::allocator<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0>,void ()(void)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_1E42CD460;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *std::__function::__func<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0,std::allocator<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0>,void ()(void)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_1E42CD460;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void std::__function::__func<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0,std::allocator<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0,std::allocator<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0,std::allocator<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0>,void ()(void)>::operator()(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  md::LabelFeaturePool *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = (md::LabelFeaturePool *)a1[3];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[1])
        md::LabelFeaturePool::flushRemovedTiles(v3);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_19FEE1AC8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<md::LabelTileCollisionInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCA50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::LabelTileCollisionInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCA50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::LabelTileCollisionInfo>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 240) + 40))(*(_QWORD *)(a1 + 240), v2, *(_QWORD *)(a1 + 232) - v2);
  }
  v3 = *(_QWORD *)(a1 + 184);
  if (v3)
  {
    *(_QWORD *)(a1 + 192) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 208) + 40))(*(_QWORD *)(a1 + 208), v3, *(_QWORD *)(a1 + 200) - v3);
  }
  v4 = *(_QWORD *)(a1 + 152);
  if (v4)
  {
    *(_QWORD *)(a1 + 160) = v4;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 176) + 40))(*(_QWORD *)(a1 + 176), v4, *(_QWORD *)(a1 + 168) - v4);
  }
  v5 = *(_QWORD *)(a1 + 120);
  if (v5)
  {
    *(_QWORD *)(a1 + 128) = v5;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 144) + 40))(*(_QWORD *)(a1 + 144), v5, *(_QWORD *)(a1 + 136) - v5);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void md::ARWalkingLabeler::~ARWalkingLabeler(md::ARWalkingLabeler *this)
{
  md::ARWalkingLabeler::~ARWalkingLabeler(this);
  JUMPOUT(0x1A1AF4E00);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  md::ARWalkingSupport *v14;

  *(_QWORD *)this = &off_1E42910C0;
  *((_QWORD *)this + 1) = &unk_1E42912D8;
  *((_QWORD *)this + 2) = &unk_1E4291320;
  *((_QWORD *)this + 49) = &unk_1E4291390;
  v2 = **(uint64_t ***)(*((_QWORD *)this + 3) + 112);
  if (v2 != *(uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 3) + 112) + 8) && *v2 != 0x6F66BE14E10A8F81)
  {
    v3 = v2 + 5;
    do
    {
      v4 = *v3;
      v3 += 5;
    }
    while (v4 != 0x6F66BE14E10A8F81);
    v2 = v3 - 5;
  }
  v5 = v2[3];
  v6 = (std::__shared_weak_count *)v2[4];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 56))(v5, *((_QWORD *)this + 59));
  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 168) + 40) = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 168)
                                                                             + 112);
  md::ARWalkingLabeler::{unnamed type#4}::~ARWalkingLabeler((uint64_t)this + 1968);
  md::ARWalkingLabeler::{unnamed type#3}::~ARWalkingLabeler((uint64_t)this + 1640);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable((uint64_t)this + 1560);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable((uint64_t)this + 1480);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 1400);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 1320);
  md::Monitorable<md::ConfigValue<GEOConfigKeyUInteger,unsigned int>>::~Monitorable((uint64_t)this + 1240);
  md::Monitorable<md::ConfigValue<GEOConfigKeyUInteger,unsigned int>>::~Monitorable((uint64_t)this + 1160);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 1080);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable((uint64_t)this + 1000);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 920);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable((uint64_t)this + 840);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable((uint64_t)this + 760);
  md::Monitorable<md::Transformable<md::ConfigValue<GEOConfigKeyDouble,double>>>::~Monitorable((uint64_t)this + 640);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable((uint64_t)this + 560);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable((uint64_t)this + 480);
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 58);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v13)
    std::default_delete<md::LabelExternalMeshModerator>::operator()[abi:nn180100](v13);
  v14 = (md::ARWalkingSupport *)*((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v14)
  {
    md::ARWalkingSupport::~ARWalkingSupport(v14);
    MEMORY[0x1A1AF4E00]();
  }
  md::StandardLabeler::~StandardLabeler(this);
}

void md::ARWalkingLabeler::synchronizedUpdate(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  _QWORD *v6;
  int8x8_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  double v20;
  double v21;
  uint64_t v22;
  NSObject *v24;
  double v25;
  long double v26;
  long double v27;
  long double v28;
  long double v29;
  double v30;
  long double v31;
  double v32;
  long double v33;
  long double v34;
  float64x2_t v35;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  char *v56;
  void *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t *v64;
  char *v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 *v70;
  _OWORD *v71;
  uint64_t v72;
  __int128 v73;
  char *v74;
  unint64_t *v75;
  char *v76;
  uint64_t *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  char *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  _OWORD *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  __int128 *v95;
  _OWORD *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  NSObject *v100;
  uint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *p_shared_owners;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  unint64_t v111;
  uint64_t v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  void *v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  __int128 v124;
  _QWORD *i;
  NSObject *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t *j;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  void *v135;
  _QWORD *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  double v140;
  long double v141;
  double v142;
  long double v143;
  double v144;
  long double v145;
  double v146;
  __double2 v147;
  __double2 v148;
  __double2 v149;
  unint64_t *v150;
  unint64_t *v151;
  double v152;
  double v153;
  double v154;
  double v155;
  unint64_t v156;
  int8x8_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint8x8_t v161;
  unint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  double v170;
  double v171;
  double v172;
  long double v173;
  long double v174;
  double v175;
  long double v176;
  double v177;
  __double2 v178;
  double v179;
  __double2 v180;
  double v181;
  NSObject *v182;
  uint64_t v183;
  id v184;
  uint64_t *v185;
  double *v186;
  uint64_t v187;
  double v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  _QWORD *v194;
  NSObject *v195;
  id v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  double v200;
  double *v201;
  id v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unsigned __int8 v206;
  uint64_t v207;
  uint64_t v208;
  NSObject *v209;
  uint64_t v210;
  const char *v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t **k;
  uint64_t v220;
  uint64_t *v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  void (***v225)(uint64_t);
  void (**v226)(uint64_t);
  uint64_t v227;
  uint64_t m;
  _QWORD *v229;
  int8x8_t v230;
  uint8x8_t v231;
  unint64_t v232;
  uint64_t v233;
  _QWORD *n;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  _QWORD *v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  NSObject *v245;
  const char *v246;
  const char *v247;
  const char *v248;
  uint64_t v249;
  void *v250;
  char v251;
  _QWORD *v252;
  int8x8_t v253;
  uint8x8_t v254;
  uint64_t v255;
  _QWORD *v256;
  _QWORD *v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t *v270;
  _QWORD *v271;
  _QWORD *v272;
  uint64_t v273;
  uint64_t ii;
  char v275;
  unint64_t *v276;
  unint64_t v277;
  char v278;
  __int128 v279;
  uint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  int v284;
  double v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  double v289;
  long double v290;
  long double v291;
  long double v292;
  long double v293;
  long double v294;
  long double v295;
  long double v296;
  double v297;
  long double v298;
  NSObject *v299;
  const char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t *v308;
  unint64_t v309;
  __double2 v310;
  double v311;
  int v312;
  double *v313;
  uint64_t v314;
  uint64_t v315;
  __int128 v316;
  uint64_t v317;
  __int128 v321;
  double v322;
  __int128 v323;
  char *v324;
  std::__shared_weak_count *v325;
  uint64x2_t v326;
  _BYTE buf[62];
  __int16 v328;
  uint64_t v329;
  __int16 v330;
  uint64_t v331;
  __int128 v332;
  uint64_t *v333;
  uint64_t v334;
  uint64_t v335;
  _QWORD v336[5];

  v336[2] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 440);
  v6 = *(_QWORD **)(a2 + 8);
  v7 = (int8x8_t)v6[1];
  if (!*(_QWORD *)&v7)
    goto LABEL_25;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = 0x37F8C546A65FE3EELL;
    if (*(_QWORD *)&v7 <= 0x37F8C546A65FE3EEuLL)
      v9 = 0x37F8C546A65FE3EEuLL % *(_QWORD *)&v7;
  }
  else
  {
    v9 = (*(_QWORD *)&v7 - 1) & 0x37F8C546A65FE3EELL;
  }
  v10 = *(_QWORD **)(*v6 + 8 * v9);
  if (!v10)
    goto LABEL_25;
  v11 = (_QWORD *)*v10;
  if (!v11)
    goto LABEL_25;
  if (v8.u32[0] < 2uLL)
  {
    v12 = *(_QWORD *)&v7 - 1;
    while (1)
    {
      v14 = v11[1];
      if (v14 == 0x37F8C546A65FE3EELL)
      {
        if (v11[2] == 0x37F8C546A65FE3EELL)
          goto LABEL_22;
      }
      else if ((v14 & v12) != v9)
      {
        goto LABEL_25;
      }
      v11 = (_QWORD *)*v11;
      if (!v11)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v13 = v11[1];
    if (v13 == 0x37F8C546A65FE3EELL)
      break;
    if (v13 >= *(_QWORD *)&v7)
      v13 %= *(_QWORD *)&v7;
    if (v13 != v9)
      goto LABEL_25;
LABEL_11:
    v11 = (_QWORD *)*v11;
    if (!v11)
      goto LABEL_25;
  }
  if (v11[2] != 0x37F8C546A65FE3EELL)
    goto LABEL_11;
LABEL_22:
  v15 = v11[5];
  if (*(_QWORD *)(v15 + 8) == 0x37F8C546A65FE3EELL)
  {
    v16 = *(_QWORD *)(v15 + 32);
    if (v16)
    {
      v311 = *(double *)(v16 + 88);
      v312 = *(unsigned __int8 *)(v16 + 96);
      goto LABEL_26;
    }
  }
LABEL_25:
  v312 = 0;
  v311 = 0.0;
LABEL_26:
  v17 = *(_QWORD *)(*(_QWORD *)v5 + 432);
  v18 = *(_QWORD *)(v5 + 776);
  md::LabelLayoutContext::coordinateEyePos((md::LabelLayoutContext *)&v322, v17);
  v313 = (double *)v17;
  v19 = *(unsigned __int8 *)(v17 + 17);
  v21 = v322;
  v20 = *(double *)&v323;
  *(double *)(v18 + 32) = v322;
  *(double *)(v18 + 40) = v20;
  v22 = *((_QWORD *)&v323 + 1);
  *(_QWORD *)(v18 + 48) = *((_QWORD *)&v323 + 1);
  *(_BYTE *)(v18 + 56) = v19;
  if (v20 == 0.0 && v21 == 0.0)
  {
    if (v19)
    {
      if (GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken != -1)
        dispatch_once(&GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken, &__block_literal_global_47);
      v24 = GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "!_hasLocalizedAltitude";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/HighPrecisionAltitudeRequestor.mm";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = 336;
        _os_log_impl(&dword_19F029000, v24, OS_LOG_TYPE_ERROR, "We are getting an empty coordinate while localized: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
      }
    }
    goto LABEL_133;
  }
  if (!v19)
    goto LABEL_126;
  v333 = &v335;
  v334 = 2;
  v335 = v22;
  *(_QWORD *)&v332 = &v335;
  *((_QWORD *)&v332 + 1) = v336;
  v316 = v323;
  v25 = *(double *)(v18 + 64);
  v26 = cos(v21 * 0.034906585) * -559.82 + 111132.92;
  v27 = v26 + cos(v21 * 0.0698131701) * 1.175;
  v28 = v27 + cos(v21 * 0.104719755) * -0.0023;
  v29 = tan(v21 * 0.00872664626 + 0.78103484);
  v30 = log(v29);
  v31 = tan(v21 * 0.00872664626 + 0.789761487);
  v32 = fabs((log(v31) - v30) * 0.159154943);
  v33 = tan(v21 * 0.00872664626 + 0.785398163);
  v34 = log(v33);
  *(_QWORD *)&v35.f64[0] = v316;
  v35.f64[1] = v34;
  __asm { FMOV            V3.2D, #0.5 }
  v326 = vcvtq_u64_f64(vmulq_n_f64(vmlaq_f64(_Q3, (float64x2_t)xmmword_19FFB32D0, v35), v28 / (v32 * v25)));
  v40 = v326.i64[1];
  v41 = v326.i64[0];
  v42 = std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>((_QWORD *)(v18 + 280), v326.i64[0], v326.i64[1]);
  if (!v42)
    goto LABEL_72;
  v43 = *(uint64_t **)(v18 + 328);
  v44 = (uint64_t *)v42[4];
  if (v43 != v44)
  {
    v45 = (uint64_t *)v44[1];
    if (v45 != v43)
    {
      v46 = *v44;
      *(_QWORD *)(v46 + 8) = v45;
      *(_QWORD *)v44[1] = v46;
      v47 = *v43;
      *(_QWORD *)(v47 + 8) = v44;
      *v44 = v47;
      *v43 = (uint64_t)v44;
      v44[1] = (uint64_t)v43;
      v43 = *(uint64_t **)(v18 + 328);
    }
  }
  if (v43 == (uint64_t *)(v18 + 320))
  {
LABEL_72:
    v315 = v41;
    v317 = v40;
    v74 = (char *)operator new(0x70uLL);
    *((_QWORD *)v74 + 1) = 0;
    v75 = (unint64_t *)(v74 + 8);
    *((_QWORD *)v74 + 2) = 0;
    *(_OWORD *)(v74 + 24) = 0u;
    *(_QWORD *)v74 = &off_1E42DD818;
    v76 = v74 + 88;
    *(_OWORD *)(v74 + 40) = 0u;
    *((_QWORD *)v74 + 7) = v74 + 88;
    *((_QWORD *)v74 + 8) = v74 + 88;
    *((_QWORD *)v74 + 9) = v74 + 88;
    *((_QWORD *)v74 + 10) = 2;
    v77 = (uint64_t *)v332;
    v78 = (char *)v336 - v332;
    v79 = (uint64_t)((uint64_t)v336 - v332) >> 3;
    if ((unint64_t)((unint64_t)v336 - v332) < 0x11)
      goto LABEL_85;
    v80 = 4;
    if (v79 > 4)
      v80 = (uint64_t)((uint64_t)v336 - v332) >> 3;
    v314 = v80;
    v76 = (char *)malloc_type_malloc(8 * v80, 0x100004000313F17uLL);
    v81 = (uint64_t *)*((_QWORD *)v74 + 7);
    v82 = (char *)*((_QWORD *)v74 + 8);
    if (v81 != (uint64_t *)v82)
    {
      v83 = v82 - (char *)v81 - 8;
      if (v83 < 0x18)
      {
        v84 = v76;
      }
      else
      {
        v84 = v76;
        if ((unint64_t)(v76 - (char *)v81) >= 0x20)
        {
          v85 = (v83 >> 3) + 1;
          v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
          v84 = &v76[v86];
          v87 = (__int128 *)(v81 + 2);
          v88 = v76 + 16;
          v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v90 = *v87;
            *(v88 - 1) = *(v87 - 1);
            *v88 = v90;
            v87 += 2;
            v88 += 2;
            v89 -= 4;
          }
          while (v89);
          if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_84;
          v81 = (uint64_t *)((char *)v81 + v86);
        }
      }
      do
      {
        v91 = *v81++;
        *(_QWORD *)v84 = v91;
        v84 += 8;
      }
      while (v81 != (uint64_t *)v82);
    }
LABEL_84:
    *((_QWORD *)v74 + 7) = v76;
    *((_QWORD *)v74 + 10) = v314;
LABEL_85:
    if (v77 != v336)
    {
      if ((unint64_t)(v78 - 8) < 0x18)
      {
        v92 = v76;
      }
      else
      {
        v92 = v76;
        if ((unint64_t)(v76 - (char *)v77) >= 0x20)
        {
          v93 = ((unint64_t)(v78 - 8) >> 3) + 1;
          v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          v92 = &v76[v94];
          v95 = (__int128 *)(v77 + 2);
          v96 = v76 + 16;
          v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_94;
          v77 = (uint64_t *)((char *)v77 + v94);
        }
      }
      do
      {
        v99 = *v77++;
        *(_QWORD *)v92 = v99;
        v92 += 8;
      }
      while (v77 != v336);
    }
LABEL_94:
    *((_QWORD *)v74 + 8) = &v76[8 * v79];
    v74[104] = 1;
    v324 = v74 + 24;
    v325 = (std::__shared_weak_count *)v74;
    if (GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken, &__block_literal_global_47);
    v100 = GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134219008;
      *(double *)&buf[4] = v322;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v323;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = *((_QWORD *)&v323 + 1);
      *(_WORD *)&buf[32] = 2048;
      *(_QWORD *)&buf[34] = v315;
      *(_WORD *)&buf[42] = 2048;
      *(_QWORD *)&buf[44] = v317;
      _os_log_impl(&dword_19F029000, v100, OS_LOG_TYPE_DEBUG, "Adding high precision altitude from device location coordinate:%f,%f,%f key:%llu,%llu", buf, 0x34u);
    }
    v101 = geo::Cache<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>,md::SpatialKeyHash,geo::LRUPolicy>::operator[](v18 + 272, v326.i64);
    do
      v102 = __ldxr(v75);
    while (__stxr(v102 + 1, v75));
    v103 = (std::__shared_weak_count *)v101[1];
    *v101 = (uint64_t)(v74 + 24);
    v101[1] = (uint64_t)v74;
    if (v103)
    {
      p_shared_owners = (unint64_t *)&v103->__shared_owners_;
      do
        v105 = __ldaxr(p_shared_owners);
      while (__stlxr(v105 - 1, p_shared_owners));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
    v106 = v325;
    if (v325)
    {
      v107 = (unint64_t *)&v325->__shared_owners_;
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
    goto LABEL_124;
  }
  if (!*(_BYTE *)(v43[4] + 80))
  {
    if (GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken, &__block_literal_global_47);
    v48 = GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134219008;
      *(double *)&buf[4] = v21;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v316;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = *((_QWORD *)&v316 + 1);
      *(_WORD *)&buf[32] = 2048;
      *(_QWORD *)&buf[34] = v41;
      *(_WORD *)&buf[42] = 2048;
      *(_QWORD *)&buf[44] = v40;
      _os_log_impl(&dword_19F029000, v48, OS_LOG_TYPE_DEBUG, "Adding high precision altitude from device location coordinate:%f,%f,%f key:%llu,%llu", buf, 0x34u);
    }
    v49 = v43[4];
    if (!*(_BYTE *)(v49 + 80))
    {
      v50 = *(std::__shared_weak_count **)(v49 + 8);
      *(_QWORD *)v49 = 0;
      *(_QWORD *)(v49 + 8) = 0;
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v53 = *(std::__shared_weak_count **)(v49 + 24);
      *(_QWORD *)(v49 + 16) = 0;
      *(_QWORD *)(v49 + 24) = 0;
      if (v53)
      {
        v54 = (unint64_t *)&v53->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      if ((__int128 *)(v49 + 32) != &v332)
      {
        v56 = (char *)(v49 + 64);
        v57 = *(void **)(v49 + 32);
        if (v57 != *(void **)(v49 + 48))
          free(v57);
        *(_QWORD *)(v49 + 32) = v56;
        *(_QWORD *)(v49 + 40) = v56;
        *(_QWORD *)(v49 + 48) = v56;
        *(_QWORD *)(v49 + 56) = 2;
        v59 = (uint64_t *)*((_QWORD *)&v332 + 1);
        v58 = (uint64_t *)v332;
        v60 = *((_QWORD *)&v332 + 1) - v332;
        v61 = (uint64_t)(*((_QWORD *)&v332 + 1) - v332) >> 3;
        if (*((_QWORD *)&v332 + 1) - (_QWORD)v332 >= 0x11uLL)
        {
          if (v61 <= 4)
            v62 = 4;
          else
            v62 = (uint64_t)(*((_QWORD *)&v332 + 1) - v332) >> 3;
          v63 = (char *)malloc_type_malloc(8 * v62, 0x100004000313F17uLL);
          v56 = v63;
          v64 = *(uint64_t **)(v49 + 32);
          v65 = *(char **)(v49 + 40);
          if (v64 != (uint64_t *)v65)
          {
            v66 = v65 - (char *)v64 - 8;
            if (v66 < 0x18)
            {
              v67 = v63;
              goto LABEL_111;
            }
            v67 = v63;
            if ((unint64_t)(v63 - (char *)v64) < 0x20)
            {
              do
              {
LABEL_111:
                v109 = *v64++;
                *(_QWORD *)v67 = v109;
                v67 += 8;
              }
              while (v64 != (uint64_t *)v65);
            }
            else
            {
              v68 = (v66 >> 3) + 1;
              v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
              v67 = &v63[v69];
              v70 = (__int128 *)(v64 + 2);
              v71 = v63 + 16;
              v72 = v68 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v73 = *v70;
                *(v71 - 1) = *(v70 - 1);
                *v71 = v73;
                v70 += 2;
                v71 += 2;
                v72 -= 4;
              }
              while (v72);
              if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
              {
                v64 = (uint64_t *)((char *)v64 + v69);
                goto LABEL_111;
              }
            }
          }
          *(_QWORD *)(v49 + 32) = v63;
          *(_QWORD *)(v49 + 56) = v62;
        }
        if (v58 != v59)
        {
          if ((unint64_t)(v60 - 8) < 0x18)
          {
            v110 = v56;
            goto LABEL_121;
          }
          v110 = v56;
          if ((unint64_t)(v56 - (char *)v58) < 0x20)
          {
            do
            {
LABEL_121:
              v117 = *v58++;
              *(_QWORD *)v110 = v117;
              v110 += 8;
            }
            while (v58 != v59);
          }
          else
          {
            v111 = ((unint64_t)(v60 - 8) >> 3) + 1;
            v112 = 8 * (v111 & 0x3FFFFFFFFFFFFFFCLL);
            v110 = &v56[v112];
            v113 = (__int128 *)(v58 + 2);
            v114 = v56 + 16;
            v115 = v111 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            if (v111 != (v111 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v58 = (uint64_t *)((char *)v58 + v112);
              goto LABEL_121;
            }
          }
        }
        *(_QWORD *)(v49 + 40) = &v56[8 * v61];
      }
      *(_BYTE *)(v49 + 80) = 1;
    }
  }
LABEL_124:
  if ((uint64_t *)v332 != v333)
    free((void *)v332);
LABEL_126:
  md::HighPrecisionAltitudeRequestor::vlLocalizer((md::HighPrecisionAltitudeRequestor *)v18);
  v118 = (void *)objc_claimAutoreleasedReturnValue();
  if (v118)
  {
    v119 = atomic_load((unint64_t *)(v18 + 440));
    if (v119 != -1)
    {
      *(_QWORD *)buf = &v326;
      *(_QWORD *)&v332 = buf;
      std::__call_once((std::once_flag::_State_type *)(v18 + 440), &v332, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<md::HighPrecisionAltitudeRequestor::loadFrameworks(void)::$_0 &&>>);
    }
    v120 = (void *)objc_msgSend(objc_alloc((Class)getCLLocationClass[0]()), "initWithLatitude:longitude:", *(double *)(v18 + 32), *(double *)(v18 + 40));
    if (v120)
      objc_msgSend(v118, "prepareWithDeviceLocation:", v120);

  }
LABEL_133:
  if (a4)
  {
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[16] = 0;
    *(_QWORD *)buf = &buf[8];
    *(int64x2_t *)&buf[24] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    *(int64x2_t *)&buf[40] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    v121 = v5 + 848;
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(v5 + 848));
    v122 = *(_QWORD **)&buf[8];
    *(_QWORD *)(v5 + 840) = *(_QWORD *)buf;
    *(_QWORD *)(v5 + 848) = v122;
    v123 = *(_QWORD *)&buf[16];
    *(_QWORD *)(v5 + 856) = *(_QWORD *)&buf[16];
    if (v123)
    {
      v122[2] = v121;
      *(_QWORD *)buf = &buf[8];
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)&buf[16] = 0;
      v122 = 0;
    }
    else
    {
      *(_QWORD *)(v5 + 840) = v121;
    }
    v124 = *(_OWORD *)&buf[40];
    *(_OWORD *)(v5 + 864) = *(_OWORD *)&buf[24];
    *(_OWORD *)(v5 + 880) = v124;
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v122);
    ++*(_QWORD *)(v5 + 896);
    for (i = *(_QWORD **)(a3 + 24); i; i = (_QWORD *)*i)
    {
      v132 = i[2];
      if (*(unsigned __int8 *)(v132 + 9) >= *(unsigned __int8 *)(v5 + 48))
        md::MultiRectRegion::addRect((double **)(v5 + 840), (double *)(v132 + 40));
    }
    if (v5 + 784 != a3)
    {
      *(_DWORD *)(v5 + 832) = *(_DWORD *)(a3 + 48);
      std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::shared_ptr<md::LabelMapTile>,void *> *>>((_QWORD *)(v5 + 784), *(_QWORD **)(a3 + 24));
    }
  }
  if (*(_QWORD *)(v5 + 896) != *(_QWORD *)(v5 + 752))
  {
    if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
    v126 = GEOGetVectorKitARWalkingSupportLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
    {
      v127 = *(_QWORD *)(v5 + 768);
      v128 = *(_QWORD *)(v5 + 752);
      v129 = *(_QWORD *)(v5 + 896);
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = v127;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v128;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v129;
      _os_log_impl(&dword_19F029000, v126, OS_LOG_TYPE_INFO, "FeatureSet(version:%llu) has mismatching sceneStamp:%llu expected:%llu", buf, 0x20u);
    }
    *(_QWORD *)(v5 + 752) = *(_QWORD *)(v5 + 896);
    v130 = *(uint64_t **)(v5 + 552);
    for (j = *(uint64_t **)(v5 + 560); v130 != j; v130 += 2)
    {
      memset(buf, 0, 32);
      *(_DWORD *)&buf[32] = 1065353216;
      md::ARWalkingSupport::prepareContinueFeaturePlacementsForRegion(v5, v130, v5 + 840, (uint64_t)buf);
      if (*(_QWORD *)&buf[24])
      {
        v133 = std::__hash_table<std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,std::__unordered_map_hasher<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,std::hash<std::shared_ptr<md::ARWalkingContinueLabelFeature>>,std::equal_to<std::shared_ptr<md::ARWalkingContinueLabelFeature>>,true>,std::__unordered_map_equal<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,std::equal_to<std::shared_ptr<md::ARWalkingContinueLabelFeature>>,std::hash<std::shared_ptr<md::ARWalkingContinueLabelFeature>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>>::__emplace_unique_key_args<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<md::ARWalkingContinueLabelFeature> const&>,std::tuple<>>(v5 + 648, *v130, v130);
        std::__hash_table<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<md::LabelIdentifier,std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<md::LabelIdentifier>,std::equal_to<md::LabelIdentifier>,true>,std::__unordered_map_equal<md::LabelIdentifier,std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<md::LabelIdentifier>,std::hash<md::LabelIdentifier>,true>,std::allocator<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::__move_assign((uint64_t)(v133 + 4), (uint64_t *)buf);
      }
      v134 = *(_QWORD **)&buf[16];
      if (*(_QWORD *)&buf[16])
      {
        do
        {
          v136 = v134;
          v134 = (_QWORD *)*v134;
          v137 = (std::__shared_weak_count *)v136[4];
          if (v137)
          {
            v138 = (unint64_t *)&v137->__shared_owners_;
            do
              v139 = __ldaxr(v138);
            while (__stlxr(v139 - 1, v138));
            if (!v139)
            {
              ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
              std::__shared_weak_count::__release_weak(v137);
            }
          }
          operator delete(v136);
        }
        while (v134);
      }
      v135 = *(void **)buf;
      *(_QWORD *)buf = 0;
      if (v135)
        operator delete(v135);
    }
  }
  if (*(_BYTE *)(v5 + 9))
  {
    md::LabelLayoutContext::mercatorEyePos((md::LabelLayoutContext *)v313);
    v141 = v140 * 6.28318531;
    v143 = exp(v142 * 6.28318531 + -3.14159265);
    v144 = atan(v143) * 2.0 + -1.57079633;
    v145 = fmod(v141, 6.28318531);
    v146 = fmod(v145 + 6.28318531, 6.28318531) + -3.14159265;
    v147 = __sincos_stret(v144);
    v149 = __sincos_stret(v146);
    v150 = *(unint64_t **)(v5 + 520);
    v151 = *(unint64_t **)(v5 + 528);
    if (v150 != v151)
    {
      v152 = 6378137.0 / sqrt(v147.__sinval * v147.__sinval * -0.00669437999 + 1.0);
      v153 = v152 * v147.__cosval * v149.__cosval;
      v154 = v152 * v147.__cosval * v149.__sinval;
      v155 = v147.__sinval * 0.99330562 * v152;
      *(_QWORD *)&v148.__sinval = 138412290;
      v310 = v148;
      do
      {
        v156 = *v150;
        if (!*(_BYTE *)(*v150 + 776))
        {
          v157 = *(int8x8_t *)(v5 + 696);
          if (v157)
          {
            v158 = 0x9DDFEA08EB382D69 * (((8 * v156) + 8) ^ HIDWORD(v156));
            v159 = 0x9DDFEA08EB382D69 * (HIDWORD(v156) ^ (v158 >> 47) ^ v158);
            v160 = 0x9DDFEA08EB382D69 * (v159 ^ (v159 >> 47));
            v161 = (uint8x8_t)vcnt_s8(v157);
            v161.i16[0] = vaddlv_u8(v161);
            if (v161.u32[0] > 1uLL)
            {
              v162 = v160;
              if (v160 >= *(_QWORD *)&v157)
                v162 = v160 % *(_QWORD *)&v157;
            }
            else
            {
              v162 = v160 & (*(_QWORD *)&v157 - 1);
            }
            v163 = *(_QWORD **)(*(_QWORD *)(v5 + 688) + 8 * v162);
            if (v163)
            {
              v164 = (_QWORD *)*v163;
              if (v164)
              {
                if (v161.u32[0] < 2uLL)
                {
                  v165 = *(_QWORD *)&v157 - 1;
                  while (1)
                  {
                    v167 = v164[1];
                    if (v160 == v167)
                    {
                      if (v164[2] == v156)
                        goto LABEL_165;
                    }
                    else if ((v167 & v165) != v162)
                    {
                      goto LABEL_187;
                    }
                    v164 = (_QWORD *)*v164;
                    if (!v164)
                      goto LABEL_187;
                  }
                }
                do
                {
                  v166 = v164[1];
                  if (v160 == v166)
                  {
                    if (v164[2] == v156)
                      goto LABEL_165;
                  }
                  else
                  {
                    if (v166 >= *(_QWORD *)&v157)
                      v166 %= *(_QWORD *)&v157;
                    if (v166 != v162)
                      break;
                  }
                  v164 = (_QWORD *)*v164;
                }
                while (v164);
              }
            }
          }
LABEL_187:
          *(_DWORD *)buf = 1;
          v168 = (*(uint64_t (**)(unint64_t, _BYTE *))(*(_QWORD *)v156 + 112))(v156, buf);
          v169 = v168;
          if (*(_BYTE *)(v168 + 44))
          {
            v171 = *(double *)v168;
            v170 = *(double *)(v168 + 8);
            v172 = *(double *)(v168 + 16);
          }
          else
          {
            v173 = *(double *)(v168 + 24) * 6.28318531;
            v174 = exp(*(double *)(v168 + 32) * 6.28318531 + -3.14159265);
            v175 = atan(v174) * 2.0 + -1.57079633;
            v176 = fmod(v173, 6.28318531);
            v177 = fmod(v176 + 6.28318531, 6.28318531) + -3.14159265;
            v178 = __sincos_stret(v175);
            v179 = 6378137.0 / sqrt(v178.__sinval * v178.__sinval * -0.00669437999 + 1.0);
            v180 = __sincos_stret(v177);
            v171 = v179 * v178.__cosval * v180.__cosval;
            v170 = v179 * v178.__cosval * v180.__sinval;
            *(double *)v169 = v171;
            *(double *)(v169 + 8) = v170;
            v172 = v178.__sinval * 0.99330562 * v179;
            *(double *)(v169 + 16) = v172;
            *(_BYTE *)(v169 + 44) = 1;
          }
          v181 = (v153 - v171) * (v153 - v171) + (v154 - v170) * (v154 - v170) + (v155 - v172) * (v155 - v172);
          if (v181 <= *(double *)(v5 + 24))
          {
            if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
              dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
            v182 = (id)GEOGetVectorKitARWalkingSupportLog(void)::log;
            if (os_log_type_enabled(v182, OS_LOG_TYPE_INFO))
            {
              v183 = *(_QWORD *)(v5 + 24);
              v184 = *(id *)(*v150 + 680);
              *(_DWORD *)buf = 134218498;
              *(double *)&buf[4] = v181;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v183;
              *(_WORD *)&buf[22] = 2112;
              *(_QWORD *)&buf[24] = v184;
              _os_log_impl(&dword_19F029000, v182, OS_LOG_TYPE_INFO, "Maneuver feature has entered high precision threshold (d:%f t:%f). Requesting high precision altitude for Maneuver %@", buf, 0x20u);

            }
            v185 = *(uint64_t **)(v5 + 776);
            md::LabelPoint::coordinate((md::LabelPoint *)buf, v169);
            v332 = *(_OWORD *)buf;
            md::HighPrecisionAltitudeRequestor::requestAltitude(&v322, v185, (double *)&v332);
            if (v322 == 0.0)
            {
              buf[0] = 0;
              buf[8] = 0;
              v194 = (_QWORD *)*v150;
              v332 = 0uLL;
              md::ARWalkingManeuverLabelFeature::updateWithHighPrecisionAltitude(v194, (uint64_t)buf, 0, 0);
              if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
                dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
              v195 = (id)GEOGetVectorKitARWalkingSupportLog(void)::log;
              if (os_log_type_enabled(v195, OS_LOG_TYPE_INFO))
              {
                v196 = *(id *)(*v150 + 680);
                LODWORD(v332) = LODWORD(v310.__sinval);
                *(_QWORD *)((char *)&v332 + 4) = v196;
                _os_log_impl(&dword_19F029000, v195, OS_LOG_TYPE_INFO, "Failed to request high precision altitude for Maneuver %@ - Will continue with fallback altitude", (uint8_t *)&v332, 0xCu);

              }
            }
            else
            {
              v186 = (double *)std::__hash_table<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::__unordered_map_equal<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::__emplace_unique_key_args<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<md::ARWalkingManeuverLabelFeature> const&>,std::tuple<>>(v5 + 688, *v150, v150);
              v188 = v322;
              v187 = v323;
              if ((_QWORD)v323)
              {
                v189 = (unint64_t *)(v323 + 8);
                do
                  v190 = __ldxr(v189);
                while (__stxr(v190 + 1, v189));
              }
              v191 = (std::__shared_weak_count *)*((_QWORD *)v186 + 5);
              v186[4] = v188;
              *((_QWORD *)v186 + 5) = v187;
              if (v191)
              {
                v192 = (unint64_t *)&v191->__shared_owners_;
                do
                  v193 = __ldaxr(v192);
                while (__stlxr(v193 - 1, v192));
                if (!v193)
                {
                  ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                  std::__shared_weak_count::__release_weak(v191);
                }
              }
            }
            v197 = (std::__shared_weak_count *)v323;
            if ((_QWORD)v323)
            {
              v198 = (unint64_t *)(v323 + 8);
              do
                v199 = __ldaxr(v198);
              while (__stlxr(v199 - 1, v198));
              if (!v199)
              {
                ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                std::__shared_weak_count::__release_weak(v197);
              }
            }
          }
        }
LABEL_165:
        v150 += 2;
      }
      while (v150 != v151);
    }
  }
  md::ARWalkingSupport::updateFeatureSet((md::ARWalkingSupport *)v5, (md::ARWalkingFeatureSet *)(v5 + 440));
  if (*(_BYTE *)(v5 + 88))
  {
    md::ARWalkingSupport::processSetFeatureRequest(v5, v5 + 56);
    if (*(_BYTE *)(v5 + 88))
    {
      *(_QWORD *)(v5 + 56) = &off_1E42B4F50;

      *(_BYTE *)(v5 + 88) = 0;
    }
  }
  if (*(_BYTE *)(v5 + 432))
  {
    md::ARWalkingSupport::updateFeatureSet((md::ARWalkingSupport *)v5, (md::ARWalkingFeatureSet *)(v5 + 96));
    v200 = v312 ? v313[42] - fmax(v311, *(double *)(v5 + 416)) : 0.0;
    if (*(_QWORD *)(v5 + 520) == *(_QWORD *)(v5 + 528)
      && *(_QWORD *)(v5 + 552) == *(_QWORD *)(v5 + 560)
      && *(_QWORD *)(v5 + 584) == *(_QWORD *)(v5 + 592))
    {
      v307 = 40;
      if (*(_QWORD *)(v5 + 616) == *(_QWORD *)(v5 + 624))
        v307 = 32;
      v201 = (double *)(v5 + v307);
    }
    else
    {
      v201 = (double *)(v5 + 40);
    }
    if (!(*(_QWORD *)(v5 + 328) + *(_QWORD *)(v5 + 368)) || v200 > *v201)
    {
      if (!*(_BYTE *)(v5 + 432) || (v202 = *(id *)(v5 + 448), !*(_BYTE *)(v5 + 432)))
      {
        std::__throw_bad_optional_access[abi:nn180100]();
        goto LABEL_397;
      }
      md::ARWalkingFeatureSet::operator=(v5 + 440, v5 + 96);
      md::ARWalkingSupport::updateFeatureSetState(v5, v202, 5);
      if (*(_QWORD *)(v5 + 672) + *(_QWORD *)(v5 + 712))
        v203 = 3;
      else
        v203 = 4;
      md::ARWalkingSupport::updateFeatureSetState(v5, *(void **)(v5 + 448), v203);

      md::LabelFeatureStyler::restyleFeatures(*(_DWORD **)(*(_QWORD *)v5 + 296), v5 + 488);
      v204 = *(_QWORD *)(v5 + 488);
      if (v204 != *(_QWORD *)(v5 + 496))
      {
        v205 = *(_QWORD *)v5;
        *(_BYTE *)(v205 + 3041) = 1;
        v206 = atomic_load((unsigned __int8 *)(v205 + 3058));
        if ((v206 & 1) != 0)
        {
          v207 = *(_QWORD *)(v205 + 136);
          if (v207)
          {
            v208 = *(_QWORD *)(v207 + 56);
            if (v208)
            {
              *(_QWORD *)buf = v205;
              LOBYTE(v332) = 9;
              (*(void (**)(uint64_t, _BYTE *, __int128 *))(*(_QWORD *)v208 + 48))(v208, buf, &v332);
            }
          }
        }
        v204 = *(_QWORD *)(v5 + 488);
      }
      *(_QWORD *)(v5 + 496) = v204;
      if (*(_BYTE *)(v5 + 432))
      {
        md::ARWalkingFeatureSet::~ARWalkingFeatureSet((md::ARWalkingFeatureSet *)(v5 + 96));
        *(_BYTE *)(v5 + 432) = 0;
      }
      if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
        dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
      v209 = GEOGetVectorKitARWalkingSupportLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
      {
        v210 = *(_QWORD *)(v5 + 768);
        if (*(_QWORD *)(v5 + 328) + *(_QWORD *)(v5 + 368))
          v211 = "YES";
        else
          v211 = "NO";
        v212 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 472) - *(_QWORD *)(v5 + 464)) >> 3);
        v213 = (uint64_t)(*(_QWORD *)(v5 + 592) - *(_QWORD *)(v5 + 584)) >> 4;
        v214 = (uint64_t)(*(_QWORD *)(v5 + 528) - *(_QWORD *)(v5 + 520)) >> 4;
        v215 = (uint64_t)(*(_QWORD *)(v5 + 560) - *(_QWORD *)(v5 + 552)) >> 4;
        v216 = *(_QWORD *)(v5 + 672) + *(_QWORD *)(v5 + 712);
        *(_DWORD *)buf = 134219778;
        *(_QWORD *)&buf[4] = v210;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v211;
        *(_WORD *)&buf[22] = 2048;
        *(double *)&buf[24] = v200;
        *(_WORD *)&buf[32] = 2048;
        *(_QWORD *)&buf[34] = v212;
        *(_WORD *)&buf[42] = 2048;
        *(_QWORD *)&buf[44] = v213;
        *(_WORD *)&buf[52] = 2048;
        *(_QWORD *)&buf[54] = v214;
        v328 = 2048;
        v329 = v215;
        v330 = 2048;
        v331 = v216;
        _os_log_impl(&dword_19F029000, v209, OS_LOG_TYPE_INFO, "Updating to FeatureSet version:%llu pendingRequests:%s elapsedTimeSinceLocalization:%f - tracking %lu AR Label Features (arrival:%lu maneuver:%lu continue:%lu pendingRequests:%lu)", buf, 0x52u);
      }
    }
  }
  if (*(_QWORD *)(v5 + 672) + *(_QWORD *)(v5 + 712))
    v217 = 3;
  else
    v217 = 4;
  md::ARWalkingSupport::updateFeatureSetState(v5, *(void **)(v5 + 448), v217);
  for (k = *(uint64_t ***)(v5 + 920); k; k = (uint64_t **)*k)
  {
    v220 = *(_QWORD *)v5;
    v221 = k[3];
    v222 = v221;
    v223 = *(_QWORD *)(v220 + 136);
    if (v223 && *(_QWORD *)(v223 + 280))
    {
      *(_QWORD *)buf = v221;
      v224 = *(_QWORD *)(v223 + 280);
      if (!v224)
      {
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_397:
        __break(1u);
        return;
      }
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v224 + 48))(v224, buf);

    }
  }
  if (*(_QWORD *)(v5 + 928))
  {
    v225 = *(void (****)(uint64_t))(v5 + 920);
    if (v225)
    {
      do
      {
        v226 = *v225;
        (*v225[2])((uint64_t)(v225 + 2));
        operator delete(v225);
        v225 = (void (***)(uint64_t))v226;
      }
      while (v226);
    }
    *(_QWORD *)(v5 + 920) = 0;
    v227 = *(_QWORD *)(v5 + 912);
    if (v227)
    {
      for (m = 0; m != v227; ++m)
        *(_QWORD *)(*(_QWORD *)(v5 + 904) + 8 * m) = 0;
    }
    *(_QWORD *)(v5 + 928) = 0;
  }
  md::StandardLabeler::synchronizedUpdate((_QWORD *)a1, v218, a3, a4);
  v229 = *(_QWORD **)(a2 + 8);
  v230 = (int8x8_t)v229[1];
  v231 = (uint8x8_t)vcnt_s8(v230);
  v231.i16[0] = vaddlv_u8(v231);
  v232 = v231.u32[0];
  if (v231.u32[0] >= 2uLL)
  {
    v235 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v230 <= 0x1AF456233693CD46uLL)
      v235 = 0x1AF456233693CD46uLL % *(_QWORD *)&v230;
    n = **(_QWORD ***)(*v229 + 8 * v235);
    v233 = *(_QWORD *)&v230 - 1;
    while (n[1] != 0x1AF456233693CD46 || n[2] != 0x1AF456233693CD46)
      n = (_QWORD *)*n;
  }
  else
  {
    v233 = *(_QWORD *)&v230 - 1;
    for (n = **(_QWORD ***)(*v229 + 8 * ((*(_QWORD *)&v230 - 1) & 0x1AF456233693CD46));
          n[1] != 0x1AF456233693CD46 || n[2] != 0x1AF456233693CD46;
  }
  v236 = *(_QWORD *)(n[5] + 32);
  v237 = *(_QWORD *)(v236 + 24);
  *(float64x2_t *)(a1 + 408) = vmulq_f64(*(float64x2_t *)(v236 + 8), (float64x2_t)vdupq_n_s64(0x404CA5DC1A63C1F8uLL));
  *(_QWORD *)(a1 + 424) = v237;
  if (v232 > 1)
  {
    v238 = 0x37F8C546A65FE3EELL;
    if (*(_QWORD *)&v230 <= 0x37F8C546A65FE3EEuLL)
      v238 = 0x37F8C546A65FE3EEuLL % *(_QWORD *)&v230;
  }
  else
  {
    v238 = (*(_QWORD *)&v230 - 1) & 0x37F8C546A65FE3EELL;
  }
  v239 = *(_QWORD **)(*v229 + 8 * v238);
  if (!v239)
    goto LABEL_299;
  v240 = (_QWORD *)*v239;
  if (!v240)
    goto LABEL_299;
  if (v232 < 2)
  {
    while (1)
    {
      v241 = v240[1];
      if (v241 == 0x37F8C546A65FE3EELL)
      {
        if (v240[2] == 0x37F8C546A65FE3EELL)
          goto LABEL_295;
      }
      else if ((v241 & v233) != v238)
      {
        goto LABEL_299;
      }
      v240 = (_QWORD *)*v240;
      if (!v240)
        goto LABEL_299;
    }
  }
  while (2)
  {
    v242 = v240[1];
    if (v242 != 0x37F8C546A65FE3EELL)
    {
      if (v242 >= *(_QWORD *)&v230)
        v242 %= *(_QWORD *)&v230;
      if (v242 != v238)
        goto LABEL_299;
      goto LABEL_289;
    }
    if (v240[2] != 0x37F8C546A65FE3EELL)
    {
LABEL_289:
      v240 = (_QWORD *)*v240;
      if (!v240)
        goto LABEL_299;
      continue;
    }
    break;
  }
LABEL_295:
  v243 = v240[5];
  if (*(_QWORD *)(v243 + 8) == 0x37F8C546A65FE3EELL)
  {
    v244 = *(_QWORD *)(v243 + 32);
    if (!v244)
      goto LABEL_300;
    if (*(_BYTE *)(v244 + 64) == 2)
    {
      LODWORD(v244) = *(unsigned __int8 *)(v244 + 16) == 3;
      goto LABEL_300;
    }
  }
LABEL_299:
  LODWORD(v244) = 0;
LABEL_300:
  *(_BYTE *)(a1 + 401) = v244;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 24) + 3034))
    LODWORD(v244) = 0;
  if (*(unsigned __int8 *)(a1 + 400) != (_DWORD)v244)
  {
    *(_BYTE *)(a1 + 400) = v244;
    if (GEOGetVectorKitARWalkingLabelerLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitARWalkingLabelerLog(void)::onceToken, &__block_literal_global_39065);
    v245 = (id)GEOGetVectorKitARWalkingLabelerLog(void)::log;
    if (os_log_type_enabled(v245, OS_LOG_TYPE_INFO))
    {
      v246 = "YES";
      if (*(_BYTE *)(a1 + 400))
        v247 = "YES";
      else
        v247 = "NO";
      if (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 3034))
        v248 = "NO";
      else
        v248 = "YES";
      if (!*(_BYTE *)(a1 + 401))
        v246 = "NO";
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v247;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v248;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = v246;
      _os_log_impl(&dword_19F029000, v245, OS_LOG_TYPE_INFO, "shouldLayoutLabels:%s (hideRoadLabels:%s, isSessionReady:%s)", buf, 0x20u);
    }

    if (*(_BYTE *)(a1 + 400))
      *(_BYTE *)(a1 + 1712) = 1;
  }
  v249 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 432);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings", v310);
  v250 = (void *)objc_claimAutoreleasedReturnValue();
  v251 = objc_msgSend(v250, "labelOcclusionDisabled");

  v252 = *(_QWORD **)(a2 + 8);
  v253 = (int8x8_t)v252[1];
  if (!*(_QWORD *)&v253)
    goto LABEL_343;
  v254 = (uint8x8_t)vcnt_s8(v253);
  v254.i16[0] = vaddlv_u8(v254);
  if (v254.u32[0] > 1uLL)
  {
    v255 = 0x6DBE9777D7FEDAAELL;
    if (*(_QWORD *)&v253 <= 0x6DBE9777D7FEDAAEuLL)
      v255 = 0x6DBE9777D7FEDAAEuLL % *(_QWORD *)&v253;
  }
  else
  {
    v255 = (*(_QWORD *)&v253 - 1) & 0x6DBE9777D7FEDAAELL;
  }
  v256 = *(_QWORD **)(*v252 + 8 * v255);
  if (!v256 || (v257 = (_QWORD *)*v256) == 0)
  {
LABEL_343:
    v264 = 0;
    v265 = 0;
    v332 = 0uLL;
    goto LABEL_344;
  }
  if (v254.u32[0] < 2uLL)
  {
    v258 = *(_QWORD *)&v253 - 1;
    while (1)
    {
      v260 = v257[1];
      if (v260 == 0x6DBE9777D7FEDAAELL)
      {
        if (v257[2] == 0x6DBE9777D7FEDAAELL)
          goto LABEL_338;
      }
      else if ((v260 & v258) != v255)
      {
        goto LABEL_343;
      }
      v257 = (_QWORD *)*v257;
      if (!v257)
        goto LABEL_343;
    }
  }
  while (2)
  {
    v259 = v257[1];
    if (v259 != 0x6DBE9777D7FEDAAELL)
    {
      if (v259 >= *(_QWORD *)&v253)
        v259 %= *(_QWORD *)&v253;
      if (v259 != v255)
        goto LABEL_343;
      goto LABEL_327;
    }
    if (v257[2] != 0x6DBE9777D7FEDAAELL)
    {
LABEL_327:
      v257 = (_QWORD *)*v257;
      if (!v257)
        goto LABEL_343;
      continue;
    }
    break;
  }
LABEL_338:
  v261 = v257[5];
  if (*(_QWORD *)(v261 + 8) != 0x6DBE9777D7FEDAAELL)
    goto LABEL_343;
  v262 = *(_QWORD *)(v261 + 32);
  v263 = v262 ? v251 : 1;
  if ((v263 & 1) != 0)
    goto LABEL_343;
  v265 = *(_QWORD *)(v262 + 40);
  v264 = *(_QWORD *)(v262 + 48);
  *(_QWORD *)&v332 = v265;
  *((_QWORD *)&v332 + 1) = v264;
  if (v264)
  {
    v308 = (unint64_t *)(v264 + 8);
    do
      v309 = __ldxr(v308);
    while (__stxr(v309 + 1, v308));
  }
LABEL_344:
  if (*(_BYTE *)(a1 + 2216))
  {
    v266 = (uint64_t *)(a1 + 1808);
    if (*(_QWORD *)(a1 + 1824))
    {
      v267 = *(uint64_t **)(a1 + 1816);
      v268 = *(_QWORD *)(a1 + 1808);
      v269 = *v267;
      *(_QWORD *)(v269 + 8) = *(_QWORD *)(v268 + 8);
      **(_QWORD **)(v268 + 8) = v269;
      *(_QWORD *)(a1 + 1824) = 0;
      if (v267 != v266)
      {
        do
        {
          v270 = (uint64_t *)v267[1];
          operator delete(v267);
          v267 = v270;
        }
        while (v270 != v266);
      }
    }
    if (*(_QWORD *)(a1 + 1856))
    {
      v271 = *(_QWORD **)(a1 + 1848);
      if (v271)
      {
        do
        {
          v272 = (_QWORD *)*v271;
          operator delete(v271);
          v271 = v272;
        }
        while (v272);
      }
      *(_QWORD *)(a1 + 1848) = 0;
      v273 = *(_QWORD *)(a1 + 1840);
      if (v273)
      {
        for (ii = 0; ii != v273; ++ii)
          *(_QWORD *)(*(_QWORD *)(a1 + 1832) + 8 * ii) = 0;
      }
      *(_QWORD *)(a1 + 1856) = 0;
    }
    *(_QWORD *)(a1 + 1872) = v266;
    *(_QWORD *)(a1 + 1880) = 0;
  }
  v275 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 232) + 17);
  if (v264)
  {
    v276 = (unint64_t *)(v264 + 8);
    do
      v277 = __ldxr(v276);
    while (__stxr(v277 + 1, v276));
  }
  v278 = v275 ^ 1;
  v279 = *(_OWORD *)(v249 + 136);
  v280 = *(_QWORD *)(v249 + 152);
  *(_QWORD *)(a1 + 1720) = v265;
  v281 = *(std::__shared_weak_count **)(a1 + 1728);
  *(_QWORD *)(a1 + 1728) = v264;
  if (v281)
  {
    v282 = (unint64_t *)&v281->__shared_owners_;
    do
      v283 = __ldaxr(v282);
    while (__stlxr(v283 - 1, v282));
    if (!v283)
    {
      v321 = v279;
      ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
      std::__shared_weak_count::__release_weak(v281);
      v279 = v321;
    }
  }
  *(_OWORD *)(a1 + 1736) = v279;
  *(_QWORD *)(a1 + 1752) = v280;
  if (*(_BYTE *)(a1 + 1784))
    *(_BYTE *)(a1 + 1784) = 0;
  *(_BYTE *)(a1 + 1792) = v278;
  *(_BYTE *)(a1 + 1795) = buf[2];
  *(_WORD *)(a1 + 1793) = *(_WORD *)buf;
  *(_QWORD *)(a1 + 1796) = 0;
  v284 = *(unsigned __int8 *)(a1 + 400);
  *(_BYTE *)(a1 + 1713) = *(_BYTE *)(a1 + 2232);
  if (v284)
  {
    if (*(_BYTE *)(a1 + 405))
    {
      md::ARWalkingSupport::setARWalkingFeatures(*(md::ARWalkingSupport **)(a1 + 440), *(VKARWalkingFeatureSet **)(*(_QWORD *)(a1 + 440) + 448), 1);
      *(_BYTE *)(a1 + 405) = 0;
    }
    v285 = *(double *)(v249 + 136) - *(double *)(a1 + 1648);
    v286 = *(float64x2_t *)(v249 + 144);
    v287 = vsubq_f64(v286, *(float64x2_t *)(a1 + 1656));
    v288 = vmulq_f64(v287, v287);
    v289 = sqrt(v288.f64[0] + v285 * v285 + v288.f64[1]);
    if (*(_BYTE *)(v249 + 8))
    {
      v290 = exp(vmlad_n_f64(-3.14159265, 6.28318531, v286.f64[0]));
      v291 = atan(v290) * 114.591559 + -90.0;
      v292 = cos(v291 * 0.034906585) * -559.82 + 111132.92;
      v293 = v292 + cos(v291 * 0.0698131701) * 1.175;
      v294 = v293 + cos(v291 * 0.104719755) * -0.0023;
      v295 = v291 * 0.00872664626;
      v296 = tan(v291 * 0.00872664626 + 0.78103484);
      v297 = log(v296);
      v298 = tan(v295 + 0.789761487);
      v289 = v294 * v289 / fabs((log(v298) - v297) * 0.159154943);
    }
    if (*(_BYTE *)(a1 + 406) || *(_BYTE *)(a1 + 2216) || v289 >= *(double *)(a1 + 496))
    {
      if (GEOGetVectorKitARWalkingLabelerLog(void)::onceToken != -1)
        dispatch_once(&GEOGetVectorKitARWalkingLabelerLog(void)::onceToken, &__block_literal_global_39065);
      v299 = (id)GEOGetVectorKitARWalkingLabelerLog(void)::log;
      if (os_log_type_enabled(v299, OS_LOG_TYPE_INFO))
      {
        v300 = "true";
        v301 = *(_QWORD *)(v249 + 136);
        v302 = *(_QWORD *)(v249 + 144);
        if (!*(_BYTE *)(a1 + 2216))
          v300 = "false";
        v303 = *(_QWORD *)(v249 + 152);
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = v300;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v289;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v301;
        *(_WORD *)&buf[32] = 2048;
        *(_QWORD *)&buf[34] = v302;
        *(_WORD *)&buf[42] = 2048;
        *(_QWORD *)&buf[44] = v303;
        _os_log_impl(&dword_19F029000, v299, OS_LOG_TYPE_INFO, "Needs re-evaluation didUpdateIntersector:%s distance:%f currentEyePos:%f,%f,%f", buf, 0x34u);
      }

      *(_BYTE *)(a1 + 1712) = 1;
    }
    *(_BYTE *)(a1 + 2216) = 0;
    *(_BYTE *)(a1 + 406) = 0;
  }
  v304 = (std::__shared_weak_count *)*((_QWORD *)&v332 + 1);
  if (*((_QWORD *)&v332 + 1))
  {
    v305 = (unint64_t *)(*((_QWORD *)&v332 + 1) + 8);
    do
      v306 = __ldaxr(v305);
    while (__stlxr(v306 - 1, v305));
    if (!v306)
    {
      ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
      std::__shared_weak_count::__release_weak(v304);
    }
  }
}

void sub_19FEE3A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  void *v37;

  v37 = *(void **)(v35 - 224);
  if (v37 != *(void **)(v35 - 208))
  {
    free(v37);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void md::ARWalkingLabeler::synchStagingWithDisplay(md::ARWalkingLabeler *this)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  char v15;
  id v16;
  uint64_t v17;
  char *v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *i;
  char *v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  char *v42;
  char v43;
  char *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  size_t v56;
  uint8x8_t v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  float v66;
  _BOOL8 v67;
  unint64_t v68;
  unint64_t v69;
  size_t prime;
  void *v71;
  void *v72;
  uint64_t v73;
  _QWORD **v74;
  size_t v75;
  size_t v76;
  size_t v77;
  _QWORD *j;
  size_t v79;
  uint64_t v80;
  unint64_t v81;
  uint8x8_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  size_t v86;
  _QWORD *v87;
  size_t v88;
  void *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t k;
  _QWORD *m;
  char *v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  unint64_t *v104;
  unint64_t *v105;
  _QWORD *v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  int8x8_t v111;
  uint8x8_t v112;
  unint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  void **v119;
  void **v120;
  void **v121;
  double v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  double v130;
  void **v131;
  void **v132;
  _QWORD *v133;
  _QWORD *v134;
  __int128 v135;
  _QWORD *v136;
  char *v137;
  char *v138;
  void *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  char *v149;
  char *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint8x8_t v159;
  unint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  unint64_t v163;
  uint64_t v164;
  float64_t v165;
  float64x2_t v166;
  double v167;
  _QWORD *v168;
  _QWORD *v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  void *v174;
  uint64_t v175;
  _QWORD *v176;
  unint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  double v181;
  void **v182;
  void **v183;
  void **v184;
  void **v185;
  uint64_t v186;
  void **v187;
  void **v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  void **v193;
  char *v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  _QWORD *v201;
  _QWORD *v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  _QWORD *v206;
  float64x2_t *v207;
  void *__p[2];
  void *v209[2];
  float v210;
  void *v211;
  char *v212;
  uint64_t v213;
  double v214;
  std::__shared_weak_count *v215;
  void *v216;
  char *v217;
  uint64_t v218;
  double v219;
  void **v220;
  void **v221;
  char *v222;
  char *v223;

  md::StandardLabeler::synchStagingWithDisplay(this);
  v3 = *((_QWORD *)this + 209);
  if (*((_QWORD *)this + 280) != v3)
  {
    v4 = *((_QWORD *)this + 210);
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    *((_QWORD *)this + 280) = v3;
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 281);
    *((_QWORD *)this + 281) = v4;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = *((id *)this + 249);
    v11 = *((id *)this + 212);
    v12 = v10;
    v13 = v11;
    v14 = v13;
    if (v12 == v13)
    {

    }
    else
    {
      v15 = objc_msgSend(v12, "isEqual:", v13);

      if ((v15 & 1) != 0)
      {
LABEL_15:
        *((_QWORD *)this + 278) |= 4uLL;
        v17 = *((_QWORD *)this + 280);
        if (v17)
          LODWORD(v17) = *(_DWORD *)(v17 + 48);
        *((_DWORD *)this + 502) = v17;
        goto LABEL_18;
      }
      v16 = *((id *)this + 212);
      v12 = (id)*((_QWORD *)this + 249);
      *((_QWORD *)this + 249) = v16;
    }

    goto LABEL_15;
  }
LABEL_18:
  v18 = (char *)*((_QWORD *)this + 272);
  v19 = (char *)*((_QWORD *)this + 271);
  while (v18 != v19)
  {
    v20 = (std::__shared_weak_count *)*((_QWORD *)v18 - 1);
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v18 -= 24;
  }
  *((_QWORD *)this + 272) = v19;
  v23 = (_QWORD *)*((_QWORD *)this + 9);
  for (i = (_QWORD *)*((_QWORD *)this + 10); v23 != i; v19 = v25)
  {
    v26 = *v23;
    v27 = *(_BYTE *)(*v23 + 821);
    v28 = *((_QWORD *)this + 273);
    if ((unint64_t)v19 >= v28)
    {
      v32 = (char *)*((_QWORD *)this + 271);
      v1 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v32) >> 3);
      v33 = v1 + 1;
      if (v1 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (_QWORD)v32) >> 3);
      if (2 * v34 > v33)
        v33 = 2 * v34;
      if (v34 >= 0x555555555555555)
        v35 = 0xAAAAAAAAAAAAAAALL;
      else
        v35 = v33;
      if (v35 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_342;
      v36 = 24 * v35;
      v37 = (char *)operator new(24 * v35);
      v38 = &v37[8 * ((v19 - v32) >> 3)];
      *v38 = v27;
      *((_QWORD *)v38 + 1) = *v23;
      v39 = v23[1];
      *((_QWORD *)v38 + 2) = v39;
      if (v39)
      {
        v40 = (unint64_t *)(v39 + 8);
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
        v19 = (char *)*((_QWORD *)this + 272);
        v32 = (char *)*((_QWORD *)this + 271);
      }
      v42 = &v37[v36];
      v25 = v38 + 24;
      if (v19 == v32)
      {
        *((_QWORD *)this + 271) = v38;
        *((_QWORD *)this + 272) = v25;
        *((_QWORD *)this + 273) = v42;
      }
      else
      {
        do
        {
          v43 = *(v19 - 24);
          v19 -= 24;
          *(v38 - 24) = v43;
          v38 -= 24;
          *(_OWORD *)(v38 + 8) = *(_OWORD *)(v19 + 8);
          *((_QWORD *)v19 + 1) = 0;
          *((_QWORD *)v19 + 2) = 0;
        }
        while (v19 != v32);
        v32 = (char *)*((_QWORD *)this + 271);
        v44 = (char *)*((_QWORD *)this + 272);
        *((_QWORD *)this + 271) = v38;
        *((_QWORD *)this + 272) = v25;
        *((_QWORD *)this + 273) = v42;
        while (v44 != v32)
        {
          v45 = (std::__shared_weak_count *)*((_QWORD *)v44 - 1);
          if (v45)
          {
            v46 = (unint64_t *)&v45->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          v44 -= 24;
        }
      }
      if (v32)
        operator delete(v32);
    }
    else
    {
      *v19 = v27;
      *((_QWORD *)v19 + 1) = v26;
      v29 = v23[1];
      *((_QWORD *)v19 + 2) = v29;
      if (v29)
      {
        v30 = (unint64_t *)(v29 + 8);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      v25 = v19 + 24;
    }
    *((_QWORD *)this + 272) = v25;
    v23 += 2;
  }
  v48 = (uint64_t *)*((_QWORD *)this + 13);
  v49 = (uint64_t *)*((_QWORD *)this + 14);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v209 = 0u;
  v210 = 1.0;
  if (v48 == v49)
    goto LABEL_156;
  v50 = 0;
  do
  {
    v51 = *v48;
    v52 = HIDWORD(*v48);
    v53 = 0x9DDFEA08EB382D69 * ((8 * *v48 + 8) ^ v52);
    v54 = (0x9DDFEA08EB382D69 * (v52 ^ (v53 >> 47) ^ v53)) ^ ((0x9DDFEA08EB382D69 * (v52 ^ (v53 >> 47) ^ v53)) >> 47);
    v55 = 0x9DDFEA08EB382D69 * v54;
    v56 = (size_t)__p[1];
    if (__p[1])
    {
      v57 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v57.i16[0] = vaddlv_u8(v57);
      if (v57.u32[0] > 1uLL)
      {
        v1 = 0x9DDFEA08EB382D69 * v54;
        if ((void *)v55 >= __p[1])
          v1 = v55 % (unint64_t)__p[1];
      }
      else
      {
        v1 = v55 & ((unint64_t)__p[1] - 1);
      }
      v58 = (_QWORD *)*((_QWORD *)__p[0] + v1);
      if (v58)
      {
        v59 = (_QWORD *)*v58;
        if (v59)
        {
          if (v57.u32[0] < 2uLL)
          {
            while (1)
            {
              v61 = v59[1];
              if (v61 == v55)
              {
                if (v59[2] == v51)
                  goto LABEL_145;
              }
              else if ((v61 & ((uint64_t)__p[1] - 1)) != v1)
              {
                goto LABEL_81;
              }
              v59 = (_QWORD *)*v59;
              if (!v59)
                goto LABEL_81;
            }
          }
          do
          {
            v60 = v59[1];
            if (v60 == v55)
            {
              if (v59[2] == v51)
                goto LABEL_145;
            }
            else
            {
              if ((void *)v60 >= __p[1])
                v60 %= (unint64_t)__p[1];
              if (v60 != v1)
                break;
            }
            v59 = (_QWORD *)*v59;
          }
          while (v59);
        }
      }
    }
LABEL_81:
    v62 = COERCE_DOUBLE(operator new(0x20uLL));
    v219 = v62;
    v220 = v209;
    **(_QWORD **)&v62 = 0;
    *(_QWORD *)(*(_QWORD *)&v62 + 8) = v55;
    *(_QWORD *)(*(_QWORD *)&v62 + 16) = *v48;
    v63 = v48[1];
    *(_QWORD *)(*(_QWORD *)&v62 + 24) = v63;
    if (v63)
    {
      v64 = (unint64_t *)(v63 + 8);
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
      v50 = v209[1];
    }
    LOBYTE(v221) = 1;
    v66 = (float)((unint64_t)v50 + 1);
    if (!__p[1] || (float)(v210 * (float)(unint64_t)__p[1]) < v66)
    {
      v67 = ((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) != 0;
      if (__p[1] < (void *)3)
        v67 = 1;
      v68 = v67 | (2 * (uint64_t)__p[1]);
      v69 = vcvtps_u32_f32(v66 / v210);
      if (v68 <= v69)
        prime = v69;
      else
        prime = v68;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
      }
      v56 = (size_t)__p[1];
      if ((void *)prime <= __p[1])
      {
        if ((void *)prime >= __p[1])
          goto LABEL_122;
        v81 = vcvtps_u32_f32((float)(unint64_t)v209[1] / v210);
        if (__p[1] < (void *)3
          || (v82 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v82.i16[0] = vaddlv_u8(v82), v82.u32[0] > 1uLL))
        {
          v81 = std::__next_prime(v81);
        }
        else
        {
          v83 = 1 << -(char)__clz(v81 - 1);
          if (v81 >= 2)
            v81 = v83;
        }
        if (prime <= v81)
          prime = v81;
        if ((void *)prime >= __p[1])
        {
          v56 = (size_t)__p[1];
LABEL_122:
          if ((v56 & (v56 - 1)) != 0)
          {
            if (v55 >= v56)
              v1 = v55 % v56;
            else
              v1 = v55;
          }
          else
          {
            v1 = (v56 - 1) & v55;
          }
          goto LABEL_135;
        }
        if (!prime)
        {
          v89 = __p[0];
          __p[0] = 0;
          if (v89)
            operator delete(v89);
          v56 = 0;
          __p[1] = 0;
          goto LABEL_122;
        }
      }
      if (prime >> 61)
        goto LABEL_342;
      v71 = operator new(8 * prime);
      v72 = __p[0];
      __p[0] = v71;
      if (v72)
        operator delete(v72);
      v73 = 0;
      __p[1] = (void *)prime;
      do
        *((_QWORD *)__p[0] + v73++) = 0;
      while (prime != v73);
      v74 = (_QWORD **)v209[0];
      if (!v209[0])
      {
LABEL_121:
        v56 = prime;
        goto LABEL_122;
      }
      v75 = *((_QWORD *)v209[0] + 1);
      v76 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v77 = v75 & v76;
        *((_QWORD *)__p[0] + v77) = v209;
        for (j = *v74; *v74; j = *v74)
        {
          v79 = j[1] & v76;
          if (v79 == v77)
          {
            v74 = (_QWORD **)j;
          }
          else if (*((_QWORD *)__p[0] + v79))
          {
            *v74 = (_QWORD *)*j;
            v80 = 8 * v79;
            *j = **(_QWORD **)((char *)__p[0] + v80);
            **(_QWORD **)((char *)__p[0] + v80) = j;
          }
          else
          {
            *((_QWORD *)__p[0] + v79) = v74;
            v74 = (_QWORD **)j;
            v77 = v79;
          }
        }
        goto LABEL_121;
      }
      if (v75 >= prime)
        v75 %= prime;
      *((_QWORD *)__p[0] + v75) = v209;
      v84 = *v74;
      if (!*v74)
        goto LABEL_121;
      while (1)
      {
        v86 = v84[1];
        if (v86 >= prime)
          v86 %= prime;
        if (v86 != v75)
        {
          if (!*((_QWORD *)__p[0] + v86))
          {
            *((_QWORD *)__p[0] + v86) = v74;
            goto LABEL_126;
          }
          *v74 = (_QWORD *)*v84;
          v85 = 8 * v86;
          *v84 = **(_QWORD **)((char *)__p[0] + v85);
          **(_QWORD **)((char *)__p[0] + v85) = v84;
          v84 = v74;
        }
        v86 = v75;
LABEL_126:
        v74 = (_QWORD **)v84;
        v84 = (_QWORD *)*v84;
        v75 = v86;
        if (!v84)
          goto LABEL_121;
      }
    }
LABEL_135:
    v87 = (_QWORD *)*((_QWORD *)__p[0] + v1);
    if (v87)
    {
      **(_QWORD **)&v62 = *v87;
LABEL_143:
      *(double *)v87 = v62;
      goto LABEL_144;
    }
    **(_QWORD **)&v62 = v209[0];
    v209[0] = *(void **)&v62;
    *((_QWORD *)__p[0] + v1) = v209;
    if (**(_QWORD **)&v62)
    {
      v88 = *(_QWORD *)(**(_QWORD **)&v62 + 8);
      if ((v56 & (v56 - 1)) != 0)
      {
        if (v88 >= v56)
          v88 %= v56;
      }
      else
      {
        v88 &= v56 - 1;
      }
      v87 = (char *)__p[0] + 8 * v88;
      goto LABEL_143;
    }
LABEL_144:
    v50 = ++v209[1];
LABEL_145:
    v48 += 2;
  }
  while (v48 != v49);
LABEL_156:
  v90 = (char *)this + 2088;
  if (*((_QWORD *)this + 263))
  {
    v91 = (char *)*((_QWORD *)this + 262);
    v92 = *((_QWORD *)this + 261);
    v93 = *(_QWORD *)v91;
    *(_QWORD *)(v93 + 8) = *(_QWORD *)(v92 + 8);
    **(_QWORD **)(v92 + 8) = v93;
    *((_QWORD *)this + 263) = 0;
    if (v91 != v90)
    {
      do
      {
        v94 = (char *)*((_QWORD *)v91 + 1);
        operator delete(v91);
        v91 = v94;
      }
      while (v94 != v90);
    }
  }
  if (*((_QWORD *)this + 267))
  {
    v95 = (_QWORD *)*((_QWORD *)this + 266);
    if (v95)
    {
      do
      {
        v96 = (_QWORD *)*v95;
        operator delete(v95);
        v95 = v96;
      }
      while (v96);
    }
    *((_QWORD *)this + 266) = 0;
    v97 = *((_QWORD *)this + 265);
    if (v97)
    {
      for (k = 0; k != v97; ++k)
        *(_QWORD *)(*((_QWORD *)this + 264) + 8 * k) = 0;
    }
    *((_QWORD *)this + 267) = 0;
  }
  *((_QWORD *)this + 269) = v90;
  *((_QWORD *)this + 270) = 0;
  for (m = (_QWORD *)*((_QWORD *)this + 227); m != (_QWORD *)((char *)this + 1808); m = (_QWORD *)m[1])
    geo::MarkedLRUCache<md::Label *,gm::Matrix<double,3,1>,std::hash<md::Label *>,std::equal_to<md::Label *>>::insert((uint64_t *)this + 261, (uint64_t)(m + 2));
  v100 = (char *)this + 1760;
  if (!*((_BYTE *)this + 1784))
    v100 = (char *)this + 1736;
  v101 = *((_QWORD *)v100 + 2);
  *((_OWORD *)this + 129) = *(_OWORD *)v100;
  *((_QWORD *)this + 260) = v101;
  v102 = (_QWORD *)*((_QWORD *)this + 253);
  v103 = (_QWORD *)*((_QWORD *)this + 252);
  while (v102 != v103)
  {
    v102 -= 5;
    std::__destroy_at[abi:nn180100]<std::pair<std::shared_ptr<md::LabelFeature>,std::vector<md::ARWalkingLabelDebugData>>,0>(v102);
  }
  *((_QWORD *)this + 253) = v103;
  v104 = (unint64_t *)*((_QWORD *)this + 9);
  v105 = (unint64_t *)*((_QWORD *)this + 10);
  if (v104 == v105)
    goto LABEL_332;
  v106 = (_QWORD *)((char *)this + 1888);
  v206 = (_QWORD *)((char *)this + 2032);
  v207 = (float64x2_t *)*((_QWORD *)this + 3);
  while (2)
  {
    v107 = *v104;
    v108 = HIDWORD(*v104);
    v109 = 0x9DDFEA08EB382D69 * ((8 * *v104 + 8) ^ v108);
    v110 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v108 ^ (v109 >> 47) ^ v109)) ^ ((0x9DDFEA08EB382D69 * (v108 ^ (v109 >> 47) ^ v109)) >> 47));
    v111 = *(int8x8_t *)((char *)this + 1936);
    if (!*(_QWORD *)&v111)
      goto LABEL_195;
    v112 = (uint8x8_t)vcnt_s8(v111);
    v112.i16[0] = vaddlv_u8(v112);
    if (v112.u32[0] > 1uLL)
    {
      v113 = v110;
      if (v110 >= *(_QWORD *)&v111)
        v113 = v110 % *(_QWORD *)&v111;
    }
    else
    {
      v113 = v110 & (*(_QWORD *)&v111 - 1);
    }
    v114 = *(_QWORD **)(*((_QWORD *)this + 241) + 8 * v113);
    if (v114)
    {
      v115 = (_QWORD *)*v114;
      if (*v114)
      {
        if (v112.u32[0] < 2uLL)
        {
          v116 = *(_QWORD *)&v111 - 1;
          while (1)
          {
            v118 = v115[1];
            if (v118 == v110)
            {
              if (v115[2] == v107)
                goto LABEL_196;
            }
            else if ((v118 & v116) != v113)
            {
              goto LABEL_195;
            }
            v115 = (_QWORD *)*v115;
            if (!v115)
              goto LABEL_196;
          }
        }
        do
        {
          v117 = v115[1];
          if (v117 == v110)
          {
            if (v115[2] == v107)
              break;
          }
          else
          {
            if (v117 >= *(_QWORD *)&v111)
              v117 %= *(_QWORD *)&v111;
            if (v117 != v113)
              goto LABEL_195;
          }
          v115 = (_QWORD *)*v115;
        }
        while (v115);
      }
    }
    else
    {
LABEL_195:
      v115 = 0;
    }
LABEL_196:
    v119 = (void **)*((_QWORD *)this + 252);
    v120 = (void **)*((_QWORD *)this + 253);
    v121 = v119;
    if (v119 != v120)
    {
      v122 = *(double *)(v107 + 8);
      v121 = (void **)*((_QWORD *)this + 252);
      while (*(void **)&v122 != *v121)
      {
        v121 += 5;
        if (v121 == v120)
          goto LABEL_203;
      }
    }
    if (v121 != v120)
      goto LABEL_270;
    v122 = *(double *)(v107 + 8);
LABEL_203:
    v123 = *(std::__shared_weak_count **)(v107 + 16);
    v214 = v122;
    v215 = v123;
    if (v123)
    {
      v124 = (unint64_t *)&v123->__shared_owners_;
      do
        v125 = __ldxr(v124);
      while (__stxr(v125 + 1, v124));
      v119 = (void **)*((_QWORD *)this + 252);
      v120 = (void **)*((_QWORD *)this + 253);
    }
    v216 = 0;
    v217 = 0;
    v218 = 0;
    v212 = 0;
    v213 = 0;
    v211 = 0;
    if (v119 == v120)
      goto LABEL_213;
    v121 = v119;
    while (*(void **)&v122 != *v121)
    {
      v121 += 5;
      if (v121 == v120)
        goto LABEL_213;
    }
    if (v121 == v120)
    {
LABEL_213:
      if ((unint64_t)v120 < *v206)
      {
        std::pair<std::shared_ptr<md::LabelFeature>,std::vector<md::ARWalkingLabelDebugData>>::pair[abi:nn180100](v120, &v214);
        *((_QWORD *)this + 253) = v120 + 5;
        v121 = v120;
        goto LABEL_248;
      }
      v126 = 0xCCCCCCCCCCCCCCCDLL * (v120 - v119);
      if (v126 + 1 > 0x666666666666666)
        abort();
      v127 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v206 - (_QWORD)v119) >> 3);
      v128 = 2 * v127;
      if (2 * v127 <= v126 + 1)
        v128 = v126 + 1;
      if (v127 >= 0x333333333333333)
        v129 = 0x666666666666666;
      else
        v129 = v128;
      v223 = (char *)this + 2032;
      if (v129)
      {
        if (v129 > 0x666666666666666)
          goto LABEL_342;
        v130 = COERCE_DOUBLE(operator new(40 * v129));
      }
      else
      {
        v130 = 0.0;
      }
      v219 = v130;
      v220 = (void **)(*(_QWORD *)&v130 + 40 * v126);
      v221 = v220;
      v222 = (char *)(*(_QWORD *)&v130 + 40 * v129);
      std::pair<std::shared_ptr<md::LabelFeature>,std::vector<md::ARWalkingLabelDebugData>>::pair[abi:nn180100](v220, &v214);
      v131 = v220;
      v132 = v221 + 5;
      v133 = (_QWORD *)*((_QWORD *)this + 253);
      v134 = (_QWORD *)*((_QWORD *)this + 252);
      if (v133 == v134)
      {
        *((_QWORD *)this + 252) = v220;
        *((_QWORD *)this + 253) = v132;
        *((_QWORD *)this + 254) = v222;
        if (!v133)
          goto LABEL_231;
      }
      else
      {
        do
        {
          v135 = *(_OWORD *)(v133 - 5);
          v133 -= 5;
          *(_OWORD *)(v131 - 5) = v135;
          v131 -= 5;
          *v133 = 0;
          v133[1] = 0;
          v131[2] = 0;
          v131[3] = 0;
          v131[4] = 0;
          *((_OWORD *)v131 + 1) = *((_OWORD *)v133 + 1);
          v131[4] = (void *)v133[4];
          v133[2] = 0;
          v133[3] = 0;
          v133[4] = 0;
        }
        while (v133 != v134);
        v133 = (_QWORD *)*((_QWORD *)this + 252);
        v136 = (_QWORD *)*((_QWORD *)this + 253);
        *((_QWORD *)this + 252) = v131;
        *((_QWORD *)this + 253) = v132;
        *((_QWORD *)this + 254) = v222;
        while (v136 != v133)
        {
          v136 -= 5;
          std::__destroy_at[abi:nn180100]<std::pair<std::shared_ptr<md::LabelFeature>,std::vector<md::ARWalkingLabelDebugData>>,0>(v136);
        }
        if (!v133)
          goto LABEL_231;
      }
      operator delete(v133);
LABEL_231:
      v137 = (char *)v216;
      *((_QWORD *)this + 253) = v132;
      v121 = v132 - 5;
      if (!v137)
        goto LABEL_248;
      v138 = v217;
      v139 = v137;
      if (v217 == v137)
      {
LABEL_247:
        v217 = v137;
        operator delete(v139);
        goto LABEL_248;
      }
      while (1)
      {
        v140 = (std::__shared_weak_count *)*((_QWORD *)v138 - 13);
        if (!v140)
          goto LABEL_239;
        v141 = (unint64_t *)&v140->__shared_owners_;
        do
          v142 = __ldaxr(v141);
        while (__stlxr(v142 - 1, v141));
        if (!v142)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
          v143 = (std::__shared_weak_count *)*((_QWORD *)v138 - 15);
          if (v143)
          {
LABEL_240:
            v144 = (unint64_t *)&v143->__shared_owners_;
            do
              v145 = __ldaxr(v144);
            while (__stlxr(v145 - 1, v144));
            if (!v145)
            {
              ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
              std::__shared_weak_count::__release_weak(v143);
            }
          }
        }
        else
        {
LABEL_239:
          v143 = (std::__shared_weak_count *)*((_QWORD *)v138 - 15);
          if (v143)
            goto LABEL_240;
        }
        v138 -= 128;
        if (v138 == v137)
        {
          v139 = v216;
          goto LABEL_247;
        }
      }
    }
LABEL_248:
    v146 = v215;
    if (v215)
    {
      v147 = (unint64_t *)&v215->__shared_owners_;
      do
        v148 = __ldaxr(v147);
      while (__stlxr(v148 - 1, v147));
      if (!v148)
      {
        ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
        std::__shared_weak_count::__release_weak(v146);
        v149 = (char *)v211;
        if (!v211)
          goto LABEL_269;
LABEL_253:
        v150 = v212;
        if (v212 == v149)
        {
LABEL_268:
          operator delete(v149);
          goto LABEL_269;
        }
        while (1)
        {
          v151 = (std::__shared_weak_count *)*((_QWORD *)v150 - 13);
          if (!v151)
            goto LABEL_260;
          v152 = (unint64_t *)&v151->__shared_owners_;
          do
            v153 = __ldaxr(v152);
          while (__stlxr(v153 - 1, v152));
          if (!v153)
          {
            ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
            std::__shared_weak_count::__release_weak(v151);
            v154 = (std::__shared_weak_count *)*((_QWORD *)v150 - 15);
            if (v154)
            {
LABEL_261:
              v155 = (unint64_t *)&v154->__shared_owners_;
              do
                v156 = __ldaxr(v155);
              while (__stlxr(v156 - 1, v155));
              if (!v156)
              {
                ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                std::__shared_weak_count::__release_weak(v154);
              }
            }
          }
          else
          {
LABEL_260:
            v154 = (std::__shared_weak_count *)*((_QWORD *)v150 - 15);
            if (v154)
              goto LABEL_261;
          }
          v150 -= 128;
          if (v150 == v149)
          {
            v149 = (char *)v211;
            goto LABEL_268;
          }
        }
      }
    }
    v149 = (char *)v211;
    if (v211)
      goto LABEL_253;
LABEL_269:
    v107 = *v104;
    v157 = HIDWORD(*v104);
    v158 = 0x9DDFEA08EB382D69 * ((8 * *v104 + 8) ^ v157);
    v110 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v157 ^ (v158 >> 47) ^ v158)) ^ ((0x9DDFEA08EB382D69 * (v157 ^ (v158 >> 47) ^ v158)) >> 47));
    if (!__p[1])
      goto LABEL_290;
LABEL_270:
    v159 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v159.i16[0] = vaddlv_u8(v159);
    if (v159.u32[0] > 1uLL)
    {
      v160 = v110;
      if ((void *)v110 >= __p[1])
        v160 = v110 % (unint64_t)__p[1];
    }
    else
    {
      v160 = v110 & ((unint64_t)__p[1] - 1);
    }
    v161 = (_QWORD *)*((_QWORD *)__p[0] + v160);
    if (v161)
    {
      v162 = (_QWORD *)*v161;
      if (*v161)
      {
        if (v159.u32[0] < 2uLL)
        {
          while (1)
          {
            v164 = v162[1];
            if (v110 == v164)
            {
              if (v162[2] == v107)
                goto LABEL_291;
            }
            else if ((v164 & ((uint64_t)__p[1] - 1)) != v160)
            {
              goto LABEL_290;
            }
            v162 = (_QWORD *)*v162;
            if (!v162)
              goto LABEL_291;
          }
        }
        do
        {
          v163 = v162[1];
          if (v110 == v163)
          {
            if (v162[2] == v107)
              break;
          }
          else
          {
            if ((void *)v163 >= __p[1])
              v163 %= (unint64_t)__p[1];
            if (v163 != v160)
              goto LABEL_290;
          }
          v162 = (_QWORD *)*v162;
        }
        while (v162);
      }
    }
    else
    {
LABEL_290:
      v162 = 0;
    }
LABEL_291:
    v165 = v207[37].f64[0] - *(double *)(v107 + 608);
    v166 = vsubq_f64(v207[36], *(float64x2_t *)(v107 + 592));
    v167 = (vaddvq_f64(vmulq_f64(v166, v166)) + v165 * v165) / (*(double *)(v107 + 224) * *(double *)(v107 + 224));
    v168 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v106, v107);
    v169 = v168;
    if (v115)
      v170 = (uint64_t)(v115 + 3);
    else
      v170 = 0;
    v171 = (unint64_t)v121[4];
    v172 = (unint64_t)v121[3];
    if (v172 < v171)
    {
      v219 = v167;
      md::ARWalkingLabelDebugData::ARWalkingLabelDebugData(v172, v104, &v219, v162 != 0, v168 != 0, v170);
      v173 = v172 + 128;
      v121[3] = (void *)v173;
      goto LABEL_174;
    }
    v174 = v121[2];
    v175 = (uint64_t)(v172 - (_QWORD)v174) >> 7;
    if ((unint64_t)(v175 + 1) >> 57)
      abort();
    v176 = v106;
    v177 = v105;
    v178 = v171 - (_QWORD)v174;
    v179 = v178 >> 6;
    if (v178 >> 6 <= (unint64_t)(v175 + 1))
      v179 = v175 + 1;
    if ((unint64_t)v178 >= 0x7FFFFFFFFFFFFF80)
      v180 = 0x1FFFFFFFFFFFFFFLL;
    else
      v180 = v179;
    v223 = (char *)(v121 + 4);
    if (v180)
    {
      if (v180 >> 57)
LABEL_342:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v181 = COERCE_DOUBLE(operator new(v180 << 7));
    }
    else
    {
      v181 = 0.0;
    }
    v219 = v181;
    v220 = (void **)(*(_QWORD *)&v181 + (v175 << 7));
    v221 = v220;
    v222 = (char *)(*(_QWORD *)&v181 + (v180 << 7));
    v214 = v167;
    md::ARWalkingLabelDebugData::ARWalkingLabelDebugData((uint64_t)v220, v104, &v214, v162 != 0, v169 != 0, v170);
    v182 = (void **)v121[2];
    v183 = (void **)v121[3];
    v184 = v220;
    v185 = v221;
    v105 = v177;
    if (v183 == v182)
    {
      v193 = *((void ***)v121 + 3);
      v106 = v176;
    }
    else
    {
      v186 = 0;
      v106 = v176;
      do
      {
        v187 = &v184[v186];
        v188 = &v183[v186];
        *((_OWORD *)v187 - 8) = *(_OWORD *)&v183[v186 - 16];
        *(v188 - 16) = 0;
        *(v188 - 15) = 0;
        *((_OWORD *)v187 - 7) = *(_OWORD *)&v183[v186 - 14];
        *(v188 - 14) = 0;
        *(v188 - 13) = 0;
        v189 = *(_OWORD *)&v183[v186 - 12];
        v190 = *(_OWORD *)&v183[v186 - 10];
        v191 = *(_OWORD *)&v183[v186 - 8];
        *(_OWORD *)((char *)v187 - 51) = *(_OWORD *)((char *)&v183[v186 - 6] - 3);
        *((_OWORD *)v187 - 5) = v190;
        *((_OWORD *)v187 - 4) = v191;
        *((_OWORD *)v187 - 6) = v189;
        *(v187 - 4) = v183[v186 - 4];
        v192 = *(_OWORD *)&v183[v186 - 3];
        *(v187 - 1) = v183[v186 - 1];
        *(_OWORD *)(v187 - 3) = v192;
        v186 -= 16;
      }
      while (&v183[v186] != v182);
      v184 = (void **)((char *)v184 + v186 * 8);
      v193 = *((void ***)v121 + 2);
      v183 = (void **)v121[3];
    }
    v173 = (unint64_t)(v185 + 16);
    v121[2] = v184;
    v121[3] = v185 + 16;
    v194 = (char *)v121[4];
    v121[4] = v222;
    v222 = v194;
    v219 = *(double *)&v193;
    v220 = v193;
    if (v183 == v193)
    {
      if (v183)
        goto LABEL_327;
      goto LABEL_174;
    }
    do
    {
      v221 = v183 - 16;
      v195 = (std::__shared_weak_count *)*(v183 - 13);
      if (!v195)
        goto LABEL_319;
      v196 = (unint64_t *)&v195->__shared_owners_;
      do
        v197 = __ldaxr(v196);
      while (__stlxr(v197 - 1, v196));
      if (!v197)
      {
        ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
        std::__shared_weak_count::__release_weak(v195);
        v198 = (std::__shared_weak_count *)*(v183 - 15);
        if (!v198)
          goto LABEL_314;
      }
      else
      {
LABEL_319:
        v198 = (std::__shared_weak_count *)*(v183 - 15);
        if (!v198)
          goto LABEL_314;
      }
      v199 = (unint64_t *)&v198->__shared_owners_;
      do
        v200 = __ldaxr(v199);
      while (__stlxr(v200 - 1, v199));
      if (!v200)
      {
        ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
        std::__shared_weak_count::__release_weak(v198);
      }
LABEL_314:
      v183 = v221;
    }
    while (v221 != v193);
    v183 = *(void ***)&v219;
    if (v219 != 0.0)
LABEL_327:
      operator delete(v183);
LABEL_174:
    v121[3] = (void *)v173;
    v104 += 2;
    if (v104 != v105)
      continue;
    break;
  }
LABEL_332:
  v201 = v209[0];
  if (v209[0])
  {
    do
    {
      v202 = v201;
      v201 = (_QWORD *)*v201;
      v203 = (std::__shared_weak_count *)v202[3];
      if (v203)
      {
        v204 = (unint64_t *)&v203->__shared_owners_;
        do
          v205 = __ldaxr(v204);
        while (__stlxr(v205 - 1, v204));
        if (!v205)
        {
          ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
          std::__shared_weak_count::__release_weak(v203);
        }
      }
      operator delete(v202);
    }
    while (v201);
  }
  if (__p[0])
    operator delete(__p[0]);
}

void sub_19FEE4DF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19FEE4E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::pair<std::shared_ptr<md::LabelFeature>,std::vector<md::ARWalkingLabelDebugData>>::~pair(&a22);
  std::vector<md::ARWalkingLabelDebugData>::~vector[abi:nn180100](&a19);
  std::unordered_map<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::CoastlineGroup *>::~unordered_map[abi:nn180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void md::ARWalkingLabeler::layoutForDisplay(md::ARWalkingLabeler *this, const md::LayoutContext *a2)
{
  uint64_t *v4;
  uint64_t *i;
  uint64_t *v6;
  int8x8_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ***v26;
  int8x8_t v27;
  uint64_t *v28;
  uint8x8_t v29;
  uint64_t v30;
  char v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  int8x8_t v38;
  uint8x8_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  int v50;
  double *v51;
  float64x2_t *v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  float64x2_t v62;
  _BOOL4 v63;
  double v64;
  float64_t v65;
  double v66;
  double v67;
  double v68;
  int v69;
  _BOOL4 v70;
  double v71;
  int v72;
  uint64_t v73;
  double *v74;
  long double v75;
  double v76;
  long double v77;
  long double v78;
  long double v79;
  float64x2_t v80;
  VKARWalkingFeatureDidUpdateInfo *v81;
  void *v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  char v86;
  id v87;
  VKARWalkingFeatureDidUpdateInfo *v88;
  NSObject *v89;
  VKARWalkingFeatureDidUpdateInfo *v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  VKARWalkingFeatureDidUpdateInfo *v94;
  VKARWalkingFeatureDidUpdateInfo *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t *p_shared_owners;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  double v104;
  double v105;
  double v106;
  long double v107;
  __int16 v108;
  char v109;
  uint64_t v110;
  uint8_t buf[16];
  double v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  v109 = 0;
  v108 = 0;
  v4 = (uint64_t *)*((_QWORD *)this + 13);
  for (i = (uint64_t *)*((_QWORD *)this + 14); v4 != i; v4 += 2)
    md::Label::layoutForDisplay(*v4, *((_QWORD *)this + 3), (uint64_t)&v108);
  v6 = (uint64_t *)*((_QWORD *)a2 + 1);
  v7 = (int8x8_t)v6[1];
  if (!*(_QWORD *)&v7)
  {
    v10 = 0;
    v11 = 0;
    *((_BYTE *)this + 2232) = 0;
LABEL_58:
    v31 = 1;
    goto LABEL_59;
  }
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = 0x8741E659406FCBBLL;
    if (*(_QWORD *)&v7 <= 0x8741E659406FCBBuLL)
      v9 = 0x8741E659406FCBBuLL % *(_QWORD *)&v7;
  }
  else
  {
    v9 = (*(_QWORD *)&v7 - 1) & 0x8741E659406FCBBLL;
  }
  v12 = *v6;
  v13 = *(_QWORD **)(v12 + 8 * v9);
  if (!v13)
    goto LABEL_29;
  v14 = (_QWORD *)*v13;
  if (!v14)
    goto LABEL_29;
  if (v8.u32[0] < 2uLL)
  {
    while (1)
    {
      v16 = v14[1];
      if (v16 == 0x8741E659406FCBBLL)
      {
        if (v14[2] == 0x8741E659406FCBBLL)
          goto LABEL_25;
      }
      else if ((v16 & (*(_QWORD *)&v7 - 1)) != v9)
      {
        goto LABEL_29;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_29;
    }
  }
  while (1)
  {
    v15 = v14[1];
    if (v15 == 0x8741E659406FCBBLL)
      break;
    if (v15 >= *(_QWORD *)&v7)
      v15 %= *(_QWORD *)&v7;
    if (v15 != v9)
      goto LABEL_29;
LABEL_14:
    v14 = (_QWORD *)*v14;
    if (!v14)
      goto LABEL_29;
  }
  if (v14[2] != 0x8741E659406FCBBLL)
    goto LABEL_14;
LABEL_25:
  v17 = v14[5];
  if (*(_QWORD *)(v17 + 8) != 0x8741E659406FCBBLL)
  {
LABEL_29:
    *((_BYTE *)this + 2232) = 0;
    goto LABEL_30;
  }
  v18 = *(_BYTE **)(v17 + 32);
  if (v18)
    LOBYTE(v18) = *v18 != 0;
  *((_BYTE *)this + 2232) = (_BYTE)v18;
LABEL_30:
  if (v8.u32[0] > 1uLL)
  {
    v19 = 0x6DBE9777D7FEDAAELL;
    if (*(_QWORD *)&v7 <= 0x6DBE9777D7FEDAAEuLL)
      v19 = 0x6DBE9777D7FEDAAEuLL % *(_QWORD *)&v7;
  }
  else
  {
    v19 = (*(_QWORD *)&v7 - 1) & 0x6DBE9777D7FEDAAELL;
  }
  v20 = *(_QWORD **)(v12 + 8 * v19);
  if (!v20)
    goto LABEL_57;
  v21 = (_QWORD *)*v20;
  if (!v21)
    goto LABEL_57;
  if (v8.u32[0] < 2uLL)
  {
    v22 = *(_QWORD *)&v7 - 1;
    while (1)
    {
      v24 = v21[1];
      if (v24 == 0x6DBE9777D7FEDAAELL)
      {
        if (v21[2] == 0x6DBE9777D7FEDAAELL)
          goto LABEL_50;
      }
      else if ((v24 & v22) != v19)
      {
        goto LABEL_57;
      }
      v21 = (_QWORD *)*v21;
      if (!v21)
        goto LABEL_57;
    }
  }
  while (1)
  {
    v23 = v21[1];
    if (v23 == 0x6DBE9777D7FEDAAELL)
      break;
    if (v23 >= *(_QWORD *)&v7)
      v23 %= *(_QWORD *)&v7;
    if (v23 != v19)
      goto LABEL_57;
LABEL_39:
    v21 = (_QWORD *)*v21;
    if (!v21)
      goto LABEL_57;
  }
  if (v21[2] != 0x6DBE9777D7FEDAAELL)
    goto LABEL_39;
LABEL_50:
  v25 = v21[5];
  if (*(_QWORD *)(v25 + 8) != 0x6DBE9777D7FEDAAELL || (v26 = *(uint64_t ****)(v25 + 32)) == 0)
  {
LABEL_57:
    v10 = 0;
    v11 = 0;
    goto LABEL_58;
  }
  v27 = (int8x8_t)v26[1];
  if (v27)
  {
    v28 = **v26;
    if (v28)
    {
      v28 = (uint64_t *)*v28;
      if (v28)
      {
        v29 = (uint8x8_t)vcnt_s8(v27);
        v29.i16[0] = vaddlv_u8(v29);
        if (v29.u32[0] < 2uLL)
        {
          v30 = *(_QWORD *)&v27 - 1;
          while (1)
          {
            v98 = v28[1];
            if (v98)
            {
              if ((v98 & v30) != 0)
                goto LABEL_139;
            }
            else if (!*((_BYTE *)v28 + 16))
            {
              goto LABEL_140;
            }
            v28 = (uint64_t *)*v28;
            if (!v28)
              goto LABEL_140;
          }
        }
        do
        {
          v99 = v28[1];
          if (v99)
          {
            if (v99 < *(_QWORD *)&v27 || v99 % *(_QWORD *)&v27)
              goto LABEL_139;
          }
          else if (!*((_BYTE *)v28 + 16))
          {
            break;
          }
          v28 = (uint64_t *)*v28;
        }
        while (v28);
      }
    }
  }
  else
  {
LABEL_139:
    v28 = 0;
  }
LABEL_140:
  *((_BYTE *)this + 2216) |= v28 != 0;
  v10 = (uint64_t *)v26[5];
  v11 = (std::__shared_weak_count *)v26[6];
  if (!v11)
    goto LABEL_58;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v101 = __ldxr(p_shared_owners);
  while (__stxr(v101 + 1, p_shared_owners));
  do
    v102 = __ldxr(p_shared_owners);
  while (__stxr(v102 + 1, p_shared_owners));
  v31 = 0;
LABEL_59:
  *((_QWORD *)this + 275) = v10;
  v32 = (std::__shared_weak_count *)*((_QWORD *)this + 276);
  *((_QWORD *)this + 276) = v11;
  if (!v32)
    goto LABEL_63;
  v33 = (unint64_t *)&v32->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    if ((v31 & 1) == 0)
    {
LABEL_64:
      v35 = (unint64_t *)&v11->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
LABEL_63:
    if ((v31 & 1) == 0)
      goto LABEL_64;
  }
  v37 = (_QWORD *)*((_QWORD *)a2 + 1);
  v38 = (int8x8_t)v37[1];
  if (!*(_QWORD *)&v38)
    goto LABEL_93;
  v39 = (uint8x8_t)vcnt_s8(v38);
  v39.i16[0] = vaddlv_u8(v39);
  if (v39.u32[0] > 1uLL)
  {
    v40 = 0x37F8C546A65FE3EELL;
    if (*(_QWORD *)&v38 <= 0x37F8C546A65FE3EEuLL)
      v40 = 0x37F8C546A65FE3EEuLL % *(_QWORD *)&v38;
  }
  else
  {
    v40 = (*(_QWORD *)&v38 - 1) & 0x37F8C546A65FE3EELL;
  }
  v41 = *(_QWORD **)(*v37 + 8 * v40);
  if (!v41)
    goto LABEL_93;
  v42 = (_QWORD *)*v41;
  if (!v42)
    goto LABEL_93;
  if (v39.u32[0] < 2uLL)
  {
    v43 = *(_QWORD *)&v38 - 1;
    while (1)
    {
      v45 = v42[1];
      if (v45 == 0x37F8C546A65FE3EELL)
      {
        if (v42[2] == 0x37F8C546A65FE3EELL)
          goto LABEL_90;
      }
      else if ((v45 & v43) != v40)
      {
        goto LABEL_93;
      }
      v42 = (_QWORD *)*v42;
      if (!v42)
        goto LABEL_93;
    }
  }
  while (2)
  {
    v44 = v42[1];
    if (v44 != 0x37F8C546A65FE3EELL)
    {
      if (v44 >= *(_QWORD *)&v38)
        v44 %= *(_QWORD *)&v38;
      if (v44 != v40)
        goto LABEL_93;
      goto LABEL_79;
    }
    if (v42[2] != 0x37F8C546A65FE3EELL)
    {
LABEL_79:
      v42 = (_QWORD *)*v42;
      if (!v42)
        goto LABEL_93;
      continue;
    }
    break;
  }
LABEL_90:
  v46 = v42[5];
  if (*(_QWORD *)(v46 + 8) == 0x37F8C546A65FE3EELL)
  {
    v47 = *(_QWORD *)(v46 + 32);
    if (v47)
    {
      v48 = *(_BYTE *)(v47 + 18);
      *((_WORD *)this + 1096) = *(_WORD *)(v47 + 16);
      *((_BYTE *)this + 2194) = v48;
      *((_BYTE *)this + 2195) = *(_BYTE *)(v47 + 64);
      goto LABEL_94;
    }
  }
LABEL_93:
  *((_DWORD *)this + 548) = 0;
LABEL_94:
  v49 = *((_QWORD *)this + 280);
  if (v49)
  {
    v50 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 48))(v49, *((_QWORD *)this + 3) + 1176);
    if (*((unsigned __int8 *)this + 1968) != v50)
    {
      *((_BYTE *)this + 1968) = v50;
      *((_QWORD *)this + 278) |= 8uLL;
    }
    if ((v50 & 1) == 0)
    {
      v51 = (double *)*((_QWORD *)this + 280);
      v52 = (float64x2_t *)*((_QWORD *)this + 3);
      v53 = *((double *)this + 83);
      v54 = v52[36].f64[0];
      v55 = v52[36].f64[1];
      v56 = v52[37].f64[0];
      v57 = v52[37].f64[1];
      v58 = v52[38].f64[0];
      v59 = v52[38].f64[1];
      v105 = v51[53];
      v106 = v51[51];
      v104 = v51[52];
      v60 = 1.0 / (v52[81].f64[0] + v52[75].f64[0] * v106 + v52[77].f64[0] * v104 + v52[79].f64[0] * v105);
      v61 = v60 * (v52[79].f64[1] + v52[73].f64[1] * v106 + v52[75].f64[1] * v104 + v52[77].f64[1] * v105);
      v62 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v52[80], v52[74], v106), v52[76], v104), v52[78], v105), v60);
      v63 = v62.f64[1] > 1.0 || v62.f64[1] < -1.0;
      v64 = v61 / v62.f64[1];
      v65 = v62.f64[0] / v62.f64[1];
      v66 = 1.0 / sqrt(v64 * v64 + v65 * v65);
      v67 = -(v64 * v66);
      v68 = acos(v66 * v65) * 57.2957795;
      v69 = v67 > 0.0 && !v63;
      v70 = v67 < 0.0 && v63;
      if (v69 | v70)
        v68 = 360.0 - v68;
      v71 = (v58 * (v104 - v55) + v59 * (v105 - v56) + v57 * (v106 - v54))
          / sqrt((v106 - v54) * (v106 - v54) + (v104 - v55) * (v104 - v55) + (v105 - v56) * (v105 - v56));
      v72 = v71 <= v53;
      if (v71 > v53 && vabdd_f64(v68, *((double *)this + 247)) >= *((double *)this + 72)
        || *((unsigned __int8 *)this + 1969) != v72)
      {
        *((_BYTE *)this + 1969) = v72;
        *((double *)this + 247) = v68;
        *((_QWORD *)this + 278) |= 1uLL;
      }
    }
  }
  else
  {
    *((_QWORD *)this + 247) = 0;
    *((_WORD *)this + 984) = 0;
    *((_DWORD *)this + 502) = 0;
  }
  v73 = *((_QWORD *)this + 278);
  if ((v73 & 0xF) == 0)
  {
LABEL_128:
    *((_QWORD *)this + 278) = v73 & 0xFFFFFFFFFFFFFFF0;
    return;
  }
  memset(buf, 0, sizeof(buf));
  v112 = 0.0;
  v74 = (double *)*((_QWORD *)this + 280);
  if (v74)
  {
    v75 = v74[51] * 6.28318531;
    v76 = v74[53] / v74[29];
    v77 = exp(v74[52] * 6.28318531 + -3.14159265);
    v107 = atan(v77);
    v78 = fmod(v75, 6.28318531);
    v79 = fmod(v78 + 6.28318531, 6.28318531);
    v80.f64[0] = v107;
    v80.f64[1] = v79;
    *(float64x2_t *)buf = vmlaq_f64((float64x2_t)xmmword_19FFB32F0, (float64x2_t)xmmword_19FFB32E0, v80);
    v112 = v76;
  }
  v81 = [VKARWalkingFeatureDidUpdateInfo alloc];
  v82 = (void *)*((_QWORD *)this + 249);
  v83 = *((unsigned int *)this + 502);
  v84 = *(id *)(*((_QWORD *)this + 55) + 448);
  v85 = *((unsigned __int8 *)this + 1968);
  v86 = *((_BYTE *)this + 1969);
  v110 = *((_QWORD *)this + 247);
  v87 = v82;
  LOBYTE(v103) = v86;
  v88 = -[VKARWalkingFeatureDidUpdateInfo initWithFeature:featureLabelIdentifier:featureSet:labelPosition:updateTypes:isVisible:isDirectlyBehind:screenHeading:](v81, "initWithFeature:featureLabelIdentifier:featureSet:labelPosition:updateTypes:isVisible:isDirectlyBehind:screenHeading:", v87, v83, v84, buf, v73, v85, v103, &v110);

  if (GEOGetVectorKitARWalkingLabelerLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitARWalkingLabelerLog(void)::onceToken, &__block_literal_global_39065);
  v89 = (id)GEOGetVectorKitARWalkingLabelerLog(void)::log;
  if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
  {
    if (v88)
    {
      v90 = v88;
      -[VKARWalkingFeatureDidUpdateInfo description](v90, "description");
      v91 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v92 = objc_msgSend(v91, "UTF8String");
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v92;
      _os_log_impl(&dword_19F029000, v89, OS_LOG_TYPE_DEBUG, "arWalkingFeatureDidUpdate %s", buf, 0xCu);

    }
    else
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "nil";
      _os_log_impl(&dword_19F029000, v89, OS_LOG_TYPE_DEBUG, "arWalkingFeatureDidUpdate %s", buf, 0xCu);
    }
  }

  v93 = *((_QWORD *)this + 3);
  v94 = v88;
  v95 = v94;
  v96 = *(_QWORD *)(v93 + 136);
  if (!v96 || !*(_QWORD *)(v96 + 248))
  {
LABEL_127:

    v73 = *((_QWORD *)this + 278);
    goto LABEL_128;
  }
  *(_QWORD *)buf = v94;
  v97 = *(_QWORD *)(v96 + 248);
  if (v97)
  {
    (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v97 + 48))(v97, buf);

    goto LABEL_127;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_19FEE58A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

_QWORD *md::ARWalkingLabeler::render(md::ARWalkingLabeler *this, const md::LayoutContext *a2, md::LabelRenderModel *a3, __n128 a4)
{
  BOOL v6;
  md::Label **v7;
  md::Label **v8;
  md::Label *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  md::Label *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *result;
  _QWORD *v23;
  char *v24;
  char *v25;
  char *v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  _BYTE *v37;
  unint64_t v38;
  char *v39;

  if (*((_BYTE *)this + 370))
    v6 = 0;
  else
    v6 = *((_BYTE *)this + 371) == 0;
  v7 = (md::Label **)*((_QWORD *)this + 13);
  v8 = (md::Label **)*((_QWORD *)this + 14);
  if (v7 != v8)
  {
    while (1)
    {
      v9 = *v7;
      if (*((_BYTE *)*v7 + 1072))
      {
        v10 = (*(uint64_t (**)(md::Label *, uint64_t))(*(_QWORD *)v9 + 48))(*v7, *((_QWORD *)this + 3) + 1176);
        v9 = *v7;
        if (v10)
        {
          v11 = *((_QWORD *)v9 + 37);
          if ((v11 || (v11 = *((_QWORD *)v9 + 34)) != 0) && *((float *)v9 + 110) >= 0.0)
          {
            v12 = *((_QWORD *)v9 + 38);
            if (v12)
              (*(void (**)(uint64_t, md::LabelRenderModel *, float))(*(_QWORD *)v12 + 128))(v12, a3, 1.0);
            v13 = *((float *)v9 + 267) * *((float *)v9 + 281);
            if (v13 >= 0.0039062
              || *((_QWORD *)v9 + 148)
              || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 704))(v11))
            {
              (*(void (**)(uint64_t, md::LabelRenderModel *, float))(*(_QWORD *)v11 + 128))(v11, a3, v13);
            }
          }
          if (v6)
          {
            v14 = *v7;
            if (!*((_BYTE *)*v7 + 1251))
              goto LABEL_52;
            v15 = *((_QWORD *)v14 + 34);
            if (v15 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 608))(v15) & 1) != 0
              || (v16 = *((_QWORD *)v14 + 37)) != 0
              && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 688))(v16) & 1) != 0
              || *((_QWORD *)v14 + 38))
            {
LABEL_53:
              v6 = 0;
              *((_BYTE *)this + 371) = 1;
              goto LABEL_54;
            }
            v17 = *((unsigned __int8 *)v14 + 1072);
            if (v17 == 1)
            {
              if (*((float *)v14 + 280) < 1.0)
                goto LABEL_53;
            }
            else if (v17 != 3)
            {
              if (v17 == 2 && *((float *)v14 + 280) > 0.0)
                goto LABEL_53;
LABEL_50:
              if (*((_QWORD *)v14 + 148))
                goto LABEL_53;
              v14 = *v7;
LABEL_52:
              if (md::Label::isAnimating(v14))
                goto LABEL_53;
              v6 = 1;
LABEL_54:
              ++*((_DWORD *)this + 91);
              goto LABEL_8;
            }
            if (*((float *)v14 + 288) < 1.0)
              goto LABEL_53;
            goto LABEL_50;
          }
          v6 = 0;
          goto LABEL_54;
        }
      }
      if (*((_BYTE *)v9 + 1251))
        break;
LABEL_8:
      v7 += 2;
      if (v7 == v8)
        goto LABEL_56;
    }
    v18 = *((_QWORD *)v9 + 34);
    if (v18
      && ((*(uint64_t (**)(uint64_t, const md::LayoutContext *))(*(_QWORD *)v18 + 608))(v18, a2) & 1) != 0
      || (v19 = *((_QWORD *)v9 + 37)) != 0
      && ((*(uint64_t (**)(uint64_t, const md::LayoutContext *))(*(_QWORD *)v19 + 688))(v19, a2) & 1) != 0
      || *((_QWORD *)v9 + 38))
    {
LABEL_7:
      a4.n128_u32[0] = 1148846080;
      md::Label::animate(*v7, a4);
      goto LABEL_8;
    }
    v20 = *((unsigned __int8 *)v9 + 1072);
    if (v20 == 1)
    {
      if (*((float *)v9 + 280) < 1.0)
        goto LABEL_7;
    }
    else if (v20 != 3)
    {
      if (v20 == 2 && *((float *)v9 + 280) > 0.0)
        goto LABEL_7;
      goto LABEL_46;
    }
    if (*((float *)v9 + 288) < 1.0)
      goto LABEL_7;
LABEL_46:
    if (!*((_QWORD *)v9 + 148))
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_56:
  v21 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 168) + 64);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, const md::LayoutContext *))(*(_QWORD *)v21 + 24))(v21, a2);
  v23 = result + 1;
  if (result + 1 != (_QWORD *)((char *)a3 + 40))
  {
    v24 = (char *)result;
    v25 = (char *)*((_QWORD *)a3 + 5);
    v26 = (char *)*((_QWORD *)a3 + 6);
    v27 = v26 - v25;
    v28 = (v26 - v25) >> 3;
    v29 = result[3];
    v30 = (_QWORD *)result[1];
    if (v28 <= (v29 - (uint64_t)v30) >> 3)
    {
      v35 = result + 2;
      v37 = (_BYTE *)result[2];
      v38 = (v37 - (_BYTE *)v30) >> 3;
      if (v38 >= v28)
      {
        if (v26 != v25)
          result = memmove((void *)result[1], v25, v26 - v25);
        goto LABEL_80;
      }
      v39 = &v25[8 * v38];
      if (v37 != (_BYTE *)v30)
      {
        result = memmove((void *)result[1], v25, v37 - (_BYTE *)v30);
        v30 = (_QWORD *)*v35;
      }
      v36 = (char *)v30;
      if (v39 != v26)
      {
        v36 = (char *)v30;
        do
        {
          if (v36)
            *(_QWORD *)v36 = *(_QWORD *)v39;
          v39 += 8;
          v36 += 8;
        }
        while (v39 != v26);
      }
    }
    else
    {
      if (v30)
      {
        result[2] = v30;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)result[4] + 40))(result[4], v30);
        v29 = 0;
        *v23 = 0;
        v23[1] = 0;
        v23[2] = 0;
      }
      if (v27 < 0)
        goto LABEL_84;
      v31 = v29 >> 2;
      if (v29 >> 2 <= v28)
        v31 = (v26 - v25) >> 3;
      v32 = (unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8;
      v33 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v32)
        v33 = v31;
      if (v33 >> 61)
LABEL_84:
        abort();
      v34 = v33;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**((_QWORD **)v24 + 4) + 16))(*((_QWORD *)v24 + 4), 8 * v33, 8);
      v30 = result;
      *((_QWORD *)v24 + 2) = result;
      v35 = v24 + 16;
      *(v35 - 1) = result;
      v35[1] = &result[v34];
      v36 = (char *)result;
      if (v25 != v26)
      {
        v36 = (char *)result;
        do
        {
          if (v36)
            *(_QWORD *)v36 = *(_QWORD *)v25;
          v25 += 8;
          v36 += 8;
        }
        while (v25 != v26);
      }
    }
    v27 = v36 - (char *)v30;
LABEL_80:
    *v35 = (char *)v30 + v27;
  }
  return result;
}

BOOL md::ARWalkingLabeler::needsForceLayoutAllLabels(md::ARWalkingLabeler *this)
{
  if (*((_BYTE *)this + 372))
  {
    *((_BYTE *)this + 372) = 0;
    return 1;
  }
  else
  {
    return *((_BYTE *)this + 400) && *((_BYTE *)this + 1712) != 0;
  }
}

uint64_t md::ARWalkingLabeler::checkNeedsOcclusionTests(md::ARWalkingLabeler *this, const md::LayoutContext *a2)
{
  return 0;
}

void md::ARWalkingLabeler::restyleActiveLabels(md::ARWalkingLabeler *this)
{
  md::StandardLabeler *v1;
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  char *v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  geo::read_write_lock *v35;
  const char *v36;
  malloc_zone_t *zone;
  md::StandardLabeler *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  char v43;

  v1 = this;
  v2 = (_QWORD *)*((_QWORD *)this + 55);
  v39 = 0;
  v40 = 0;
  v41 = 0;
  {
    v34 = operator new();
    *(_QWORD *)(v34 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v34 + 24) = "VectorKitLabels";
    *(_OWORD *)(v34 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v34 = &off_1E42B5668;
    *(_QWORD *)(v34 + 8) = "VectorKitLabels";
    *(_OWORD *)(v34 + 72) = 0u;
    *(_OWORD *)(v34 + 88) = 0u;
    *(_OWORD *)(v34 + 104) = 0u;
    *(_OWORD *)(v34 + 120) = 0u;
    *(_OWORD *)(v34 + 136) = 0u;
    *(_OWORD *)(v34 + 152) = 0u;
    *(_OWORD *)(v34 + 168) = 0u;
    *(_OWORD *)(v34 + 184) = 0u;
    *(_OWORD *)(v34 + 200) = 0u;
    *(_OWORD *)(v34 + 216) = 0u;
    *(_OWORD *)(v34 + 232) = 0u;
    *(_QWORD *)(v34 + 248) = 0;
    *(_OWORD *)(v34 + 56) = 0u;
    v35 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v34 + 56), 0);
    if ((_DWORD)v35)
      geo::read_write_lock::logFailure(v35, (uint64_t)"initialization", v36);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v34 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v34 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v34;
  }
  v42 = mdm::Allocator::instance(void)::alloc;
  v4 = v2[59] - v2[58];
  if (v4)
  {
    v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
    if (v5 >> 61)
      abort();
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 0x5555555555555558 * (v4 >> 3), 8);
    v7 = (char *)v6;
    v39 = (char *)v6;
    v40 = (char *)v6;
    v41 = v6 + 8 * v5;
    v8 = v2[58];
    v9 = v2[59];
    if (v8 != v9)
    {
      v38 = v1;
      while (1)
      {
        v10 = *(_QWORD *)(v8 + 8);
        v11 = v41;
        if ((unint64_t)v7 >= v41)
          break;
        if (v7)
          *(_QWORD *)v7 = v10;
        v7 += 8;
LABEL_7:
        v40 = v7;
        v8 += 24;
        if (v8 == v9)
        {
          v1 = v38;
          v29 = v39;
          goto LABEL_39;
        }
      }
      v12 = v39;
      v13 = (v7 - v39) >> 3;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61)
        abort();
      if ((uint64_t)(v41 - (_QWORD)v39) >> 2 > v14)
        v14 = (uint64_t)(v41 - (_QWORD)v39) >> 2;
      if (v41 - (unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
      {
        v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, 8 * v15, 8);
        v17 = (char *)(v16 + 8 * v13);
        v18 = v16 + 8 * v15;
        if (v16)
          *(_QWORD *)v17 = v10;
        v19 = (char *)(v7 - v12);
        if (v7 != v12)
        {
LABEL_21:
          v20 = (unint64_t)(v19 - 8);
          if (v20 < 0x138
            || &v17[-(v20 & 0xFFFFFFFFFFFFFFF8) - 8] > v17 - 8
            || &v7[-(v20 & 0xFFFFFFFFFFFFFFF8) - 8] > v7 - 8
            || (unint64_t)(v7 - v17) < 0x20)
          {
            v21 = v7;
            v22 = v17;
          }
          else
          {
            v24 = (v20 >> 3) + 1;
            v21 = &v7[-8 * (v24 & 0x3FFFFFFFFFFFFFFCLL)];
            v25 = v17 - 16;
            v26 = v7 - 16;
            v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v28 = *(_OWORD *)v26;
              *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
              *(_OWORD *)v25 = v28;
              v25 -= 32;
              v26 -= 32;
              v27 -= 4;
            }
            while (v27);
            v22 = &v17[-8 * (v24 & 0x3FFFFFFFFFFFFFFCLL)];
            if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_27:
              v7 = v17 + 8;
              v39 = v22;
              v41 = v18;
              if (v12)
                (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v42 + 40))(v42, v12, v11 - (_QWORD)v12);
              goto LABEL_7;
            }
          }
          do
          {
            v23 = *((_QWORD *)v21 - 1);
            v21 -= 8;
            *((_QWORD *)v22 - 1) = v23;
            v22 -= 8;
          }
          while (v21 != v12);
          goto LABEL_27;
        }
      }
      else
      {
        v18 = 0;
        v17 = (char *)(8 * v13);
        v19 = (char *)(v7 - v39);
        if (v7 != v39)
          goto LABEL_21;
      }
      v12 = v7;
      v22 = v17;
      goto LABEL_27;
    }
    v29 = (char *)v6;
  }
  else
  {
    v7 = 0;
    v29 = 0;
  }
LABEL_39:
  md::LabelFeatureStyler::restyleFeatures(*(_DWORD **)(*v2 + 296), (uint64_t)&v39);
  if (v39)
  {
    v40 = v39;
    (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v42 + 40))(v42, v39, v41 - (_QWORD)v39);
  }
  if (v29 != v7)
  {
    v30 = *v2;
    *(_BYTE *)(v30 + 3041) = 1;
    v31 = atomic_load((unsigned __int8 *)(v30 + 3058));
    if ((v31 & 1) != 0)
    {
      v32 = *(_QWORD *)(v30 + 136);
      if (v32)
      {
        v33 = *(_QWORD *)(v32 + 56);
        if (v33)
        {
          v39 = (char *)v30;
          v43 = 9;
          (*(void (**)(uint64_t, char **, char *))(*(_QWORD *)v33 + 48))(v33, &v39, &v43);
        }
      }
    }
  }
  md::StandardLabeler::restyleActiveLabels(v1);
}

void sub_19FEE6160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a12)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a15 + 40))(a15, a12, a14 - a12);
  _Unwind_Resume(exception_object);
}

void md::ARWalkingLabeler::getLabelMarkers(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  unsigned __int8 *v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  _BYTE *v15;
  int v16;
  _BYTE *v17;
  BOOL v18;
  unint64_t *v19;
  unint64_t v20;
  float v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v26;
  unint64_t *p_shared_weak_owners;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  std::__shared_weak_count **v33;
  unint64_t v34;
  _OWORD *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _Unwind_Exception *v47;
  _Unwind_Exception *v48;
  unsigned __int8 *v49;
  __int128 v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  char v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;

  v2 = a1[3];
  v3 = *(std::__shared_weak_count **)(v2 + 16);
  v69 = *(_QWORD *)(v2 + 8);
  if (!v3 || (v5 = std::__shared_weak_count::lock(v3), (v70 = v5) == 0))
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
    v48 = v47;
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v51);
    md::LabelFeatureInfo::~LabelFeatureInfo((md::LabelFeatureInfo *)&v54);
    std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&v69);
    _Unwind_Resume(v48);
  }
  v6 = (unsigned __int8 *)a1[271];
  v49 = (unsigned __int8 *)a1[272];
  if (v6 != v49)
  {
    while (1)
    {
      v54 = 0;
      v55 = 0;
      v56 = 0u;
      v57 = 0u;
      v58 = 0;
      {
        v41 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v41, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v59 = mdm::Allocator::instance(void)::alloc;
      v60 = 0;
      v62 = 0;
      v63 = 0;
      v61 = 0;
      {
        v42 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v42, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v64 = mdm::Allocator::instance(void)::alloc;
      v66 = 0;
      v67 = 0;
      v65 = 0;
      {
        v43 = operator new();
        mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v43, "VectorKitLabels", 0x5ED09DD50000000FLL);
      }
      v68 = mdm::Allocator::instance(void)::alloc;
      md::Label::populateFeatureInfo(*((md::Label **)v6 + 1), (md::LabelFeatureInfo *)&v54, 0);
      v10 = *((_QWORD *)v6 + 1);
      v11 = (std::__shared_weak_count *)*((_QWORD *)v6 + 2);
      v52 = v10;
      v53 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 8) + 264))(*(_QWORD *)(v10 + 8));
      v15 = *(_BYTE **)(v10 + 8);
      if (v14 == 24)
      {
        if (v15[809])
          goto LABEL_21;
      }
      else
      {
        v16 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v15 + 264))(v15);
        v17 = *(_BYTE **)(v10 + 8);
        if (v16 == 26)
        {
          if (v17[418])
            goto LABEL_21;
        }
        else if (((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v17 + 264))(v17) == 25
                || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v10 + 8) + 264))(*(_QWORD *)(v10 + 8)) == 27)
               && *(_BYTE *)(*(_QWORD *)(v10 + 8) + 720))
        {
LABEL_21:
          v18 = 1;
          if (!v11)
            goto LABEL_28;
          goto LABEL_24;
        }
      }
      v18 = *v6 - 22 < 3;
      if (!v11)
        goto LABEL_28;
LABEL_24:
      v19 = (unint64_t *)&v11->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
LABEL_28:
      v21 = *(float *)(a1[3] + 176);
      v22 = (std::__shared_weak_count *)operator new(0x170uLL);
      v22->__shared_owners_ = 0;
      v23 = (unint64_t *)&v22->__shared_owners_;
      v22->__shared_weak_owners_ = 0;
      v22->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC318;
      v24 = v22 + 1;
      md::StandardLabelMarker::StandardLabelMarker((uint64_t)&v22[1], v69, v70, (uint64_t *)v6 + 1, (uint64_t)&v54, v21);
      v22[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E4298880;
      BYTE6(v22[15].__vftable) = v18;
      shared_weak_owners = (std::__shared_weak_count *)v22[1].__shared_weak_owners_;
      if (shared_weak_owners)
      {
        if (shared_weak_owners->__shared_owners_ != -1)
          goto LABEL_41;
        do
          v26 = __ldxr(v23);
        while (__stxr(v26 + 1, v23));
        p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
        do
          v28 = __ldxr(p_shared_weak_owners);
        while (__stxr(v28 + 1, p_shared_weak_owners));
        v22[1].__shared_owners_ = (uint64_t)v24;
        v22[1].__shared_weak_owners_ = (uint64_t)v22;
        std::__shared_weak_count::__release_weak(shared_weak_owners);
      }
      else
      {
        do
          v29 = __ldxr(v23);
        while (__stxr(v29 + 1, v23));
        v30 = (unint64_t *)&v22->__shared_weak_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
        v22[1].__shared_owners_ = (uint64_t)v24;
        v22[1].__shared_weak_owners_ = (uint64_t)v22;
      }
      do
        v32 = __ldaxr(v23);
      while (__stlxr(v32 - 1, v23));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
LABEL_41:
      *(_QWORD *)&v51 = v22 + 1;
      *((_QWORD *)&v51 + 1) = v22;
      v33 = *(std::__shared_weak_count ***)(a2 + 8);
      if ((unint64_t)v33 >= *(_QWORD *)(a2 + 16))
      {
        v35 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(a2, &v51);
      }
      else
      {
        if (v33)
        {
          *v33 = v24;
          v33[1] = v22;
          do
            v34 = __ldxr(v23);
          while (__stxr(v34 + 1, v23));
        }
        v35 = v33 + 2;
      }
      *(_QWORD *)(a2 + 8) = v35;
      do
        v36 = __ldaxr(v23);
      while (__stlxr(v36 - 1, v23));
      if (v36)
      {
        if ((SHIBYTE(v67) & 0x80000000) == 0)
          goto LABEL_51;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
        if ((SHIBYTE(v67) & 0x80000000) == 0)
        {
LABEL_51:
          if ((SHIBYTE(v63) & 0x80000000) == 0)
            goto LABEL_52;
          goto LABEL_61;
        }
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v68 + 40))(v68, v65, v67 & 0x7FFFFFFFFFFFFFFFLL);
      if ((SHIBYTE(v63) & 0x80000000) == 0)
      {
LABEL_52:
        v37 = v57;
        if (!(_QWORD)v57)
          goto LABEL_54;
LABEL_53:
        *((_QWORD *)&v57 + 1) = v37;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v59 + 40))(v59, v37, v58 - v37);
        goto LABEL_54;
      }
LABEL_61:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v64 + 40))(v64, v61, v63 & 0x7FFFFFFFFFFFFFFFLL);
      v37 = v57;
      if ((_QWORD)v57)
        goto LABEL_53;
LABEL_54:
      v38 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
      if (*((_QWORD *)&v56 + 1))
      {
        v39 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v6 += 24;
      if (v6 == v49)
      {
        v44 = v70;
        if (!v70)
          return;
        goto LABEL_72;
      }
    }
  }
  v44 = v5;
LABEL_72:
  v45 = (unint64_t *)&v44->__shared_owners_;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
}

void md::ARWalkingLabeler::updateDebugSettings(md::ARWalkingLabeler *this)
{
  int v2;
  float v3;
  float v4;
  id v5;

  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  *((_BYTE *)this + 402) = objc_msgSend(v5, "arLabelingStateOverlay");
  *((_BYTE *)this + 403) = objc_msgSend(v5, "arDebugMiniMap");
  *((_BYTE *)this + 404) = objc_msgSend(v5, "arDebugDrawLabelFeatureBounds");
  v2 = *((_DWORD *)this + 108);
  objc_msgSend(v5, "arManeuverDebugElevationOffset");
  if (v2 != v3)
  {
    objc_msgSend(v5, "arManeuverDebugElevationOffset");
    *((_DWORD *)this + 108) = v4;
    md::ARWalkingSupport::setARWalkingFeatures(*((md::ARWalkingSupport **)this + 55), *(VKARWalkingFeatureSet **)(*((_QWORD *)this + 55) + 448), 1);
  }

}

void sub_19FEE67F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL md::ARWalkingLabeler::needsDebugDraw(md::ARWalkingLabeler *this)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 23);
  if (v2)
  {
    v3 = atomic_load((unsigned __int8 *)(v2 + 1242));
    if ((v3 & 1) == 0)
      (*(void (**)(md::ARWalkingLabeler *))(*(_QWORD *)this + 272))(this);
  }
  v4 = *((_QWORD *)this + 3);
  return *(_BYTE *)(v4 + 3616)
      || *(_BYTE *)(v4 + 3623)
      || *((_QWORD *)this + 23)
      || *((_QWORD *)this + 25)
      || *((_BYTE *)this + 402)
      || *((_BYTE *)this + 403)
      || *((_BYTE *)this + 404) != 0;
}

void md::ARWalkingLabeler::debugDraw(md::ARWalkingLabeler *this, NSMutableString *a2, md::DebugConsole *a3)
{
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float64x2_t v10;
  float32x2_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long double v19;
  long double v20;
  long double v21;
  long double v22;
  long double v23;
  long double v24;
  long double v25;
  long double v26;
  long double v27;
  long double v28;
  float v29;
  void *v30;
  int v31;
  double v32;
  int v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float32_t v38;
  double v39;
  double v40;
  double v41;
  int v42;
  float v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  int64x2_t v53;
  double v54;
  float64x2_t v55;
  double v56;
  double v57;
  double v58;
  float64_t v59;
  double v60;
  double v61;
  double v62;
  float64_t v63;
  double v64;
  double v65;
  double v66;
  float64_t v67;
  double v68;
  double v69;
  double v70;
  float64_t v71;
  double v72;
  double v73;
  double v74;
  float64x2_t v75;
  double v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  float64x2_t v100;
  void *v101;
  void *v102;
  id v103;
  void *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t j;
  void *v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  double v113;
  float64x2_t v114;
  double v115;
  BOOL v116;
  uint64_t v118;
  unint64_t k;
  float64x2_t v120;
  float64x2_t v121;
  double v122;
  double v123;
  _QWORD *v124;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  float v129;
  float64x2_t v130;
  uint64_t v131;
  uint64_t v132;
  float64x2_t v133;
  unint64_t v134;
  int8x8_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint8x8_t v140;
  unint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  float64x2_t v156;
  double v157;
  double v158;
  int v159;
  int v160;
  __int128 v168;
  float32x2_t v169;
  float32x2_t v170;
  float32x2_t v171;
  float32x4_t v172;
  __int128 v173;
  double *v174;
  int v175;
  double v176;
  double v177;
  unsigned int v178;
  float64x2_t v179;
  float32x2_t v180;
  __int128 v181;
  float64x2_t v182;
  float32x2_t v183;
  void *v185;
  _QWORD *v186;
  _QWORD *v187;
  uint64_t v188;
  _QWORD *v189;
  int8x8_t v190;
  uint8x8_t v191;
  uint64_t v192;
  _QWORD *v193;
  _QWORD *v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  float64_t v201;
  uint64_t (***v202)();
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  _QWORD *v209;
  _QWORD *v210;
  _QWORD *v211;
  void *v212;
  _QWORD *v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  float64x2_t *v219;
  float64x2_t *v220;
  uint64_t v221;
  uint64_t (***v222)();
  uint64_t v223;
  BOOL v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  double *v228;
  double *v229;
  BOOL v230;
  _QWORD *v231;
  _QWORD *v232;
  _QWORD *v233;
  _QWORD *v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  _QWORD *v240;
  double *v241;
  double *v242;
  void *v243;
  id v244;
  void *v245;
  void *v246;
  double v247;
  double v248;
  long double v249;
  long double v250;
  float64x2_t v251;
  float64x2_t v252;
  double v253;
  float v254;
  double v255;
  double v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  double v263;
  double v264;
  double v265;
  double v266;
  double v267;
  double v268;
  double v269;
  double v270;
  double v271;
  double v272;
  double v273;
  double v274;
  double v275;
  double v276;
  double v277;
  float64x2_t v278;
  NSMutableString *v279;
  double v280;
  _QWORD *v281;
  double v282;
  char *v283;
  double v284;
  unsigned int v285;
  double v286;
  double v287;
  md::ARWalkingLabeler *v288;
  double v289;
  double v290;
  void *v291;
  double v292;
  double v293;
  double v294;
  float64x2_t v295;
  float64x2_t v296;
  float32x4_t v297;
  double v298;
  double v299;
  float64x2_t v300;
  float64x2_t v301;
  float64_t v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  double v308;
  float64x2_t v309;
  float64x2_t v310;
  double v311;
  double v312;
  double v313;
  double v314;
  double v315;
  double v316;
  double v317;
  double v318;
  double v319;
  double v320;
  double v321;
  double v322;
  double v323;
  double v324;
  double v325;
  double v326;
  double v327;
  double v328;
  double v329;
  double v330;
  double v331;
  double v332;
  double v333;
  double v334;
  double v335;
  double v336;
  double v337;
  double v338;
  double v339;
  double v340;
  double v341;
  double v342;
  double v343;
  int v344;
  double v345;
  double v346;
  char v347[8];
  float32x2_t v348;
  float32x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  double v353;
  float64x2_t v354;
  double v355;
  float64x2_t v356;
  double v357;
  float32x2_t v358;
  float v359;
  float v360;
  float v361;
  float v362;
  __int32 v363;
  __int32 v364;
  float v365;
  float v366[4];
  float32x4_t v367;
  float32x2_t v368;
  _QWORD v369[3];
  _QWORD *v370;
  _QWORD v371[3];
  _QWORD *v372;
  _QWORD v373[3];
  _QWORD *v374;
  _DWORD v375[32];
  uint64_t (**v376)();
  double v377;
  float64x2_t v378;
  _BYTE v379[56];
  __int128 v380;
  uint64_t v381;
  uint64_t v382;
  __int128 v383;
  __int128 v384;
  uint64_t v385;
  uint64_t v386;

  v386 = *MEMORY[0x1E0C80C00];
  v279 = a2;
  md::StandardLabeler::debugDraw(this, v279, a3);
  if (*((_BYTE *)this + 404))
  {
    v5 = *((_QWORD *)this + 252);
    for (i = *((_QWORD *)this + 253); v5 != i; v5 += 40)
    {
      v7 = *(_QWORD *)(v5 + 16);
      v8 = *(_QWORD *)(v5 + 24);
      while (v7 != v8)
      {
        if (*(_BYTE *)(v7 + 106))
        {
          v12 = *(_QWORD *)(v7 + 16);
          *((_DWORD *)a3 + 24) = -256;
          if (v12)
          {
            v13 = *(_QWORD *)(*((_QWORD *)this + 3) + 432);
            v14 = *(float *)(v12 + 780);
            if (*(double *)(v13 + 272) <= v14 && *(double *)(v13 + 280) >= v14)
            {
              if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 40))(v12, v13 + 736))
              {
                v16 = *(_QWORD *)(v12 + 288);
                if (v16)
                  (*(void (**)(uint64_t, _QWORD, md::DebugConsole *))(*(_QWORD *)v16 + 776))(v16, *((_QWORD *)this + 3), a3);
              }
            }
            *((_DWORD *)a3 + 24) = -16711936;
            if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v12, *((_QWORD *)this + 3) + 1176))
            {
              v17 = *(_QWORD *)(v12 + 288);
              if (v17)
                (*(void (**)(uint64_t, _QWORD, md::DebugConsole *))(*(_QWORD *)v17 + 784))(v17, *((_QWORD *)this + 3), a3);
            }
          }
          else
          {
            *((_DWORD *)a3 + 24) = -16711936;
          }
          *((_DWORD *)a3 + 24) = -16776961;
          v9 = *((_QWORD *)this + 3);
          v10 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(v9 + 1400), *(float64x2_t *)(v9 + 1304), *(double *)(v12 + 408)), *(float64x2_t *)(v9 + 1336), *(double *)(v12 + 416)), *(float64x2_t *)(v9 + 1368), *(double *)(v12 + 424)), 1.0/ (*(double *)(v9 + 1424)+ *(double *)(v9 + 1328) * *(double *)(v12 + 408)+ *(double *)(v9 + 1360) * *(double *)(v12 + 416)+ *(double *)(v9 + 1392) * *(double *)(v12 + 424)));
          v11 = vcvt_f32_f64(v10);
          *(float *)v10.f64 = *(float *)(v9 + 176) * 3.0;
          *((float32x2_t *)a3 + 1) = v11;
          ggl::DebugConsole::drawCircleWithFill((uint64_t)a3, v10.f64[0]);
        }
        v7 += 128;
      }
    }
  }
  if (!*((_BYTE *)this + 403))
    goto LABEL_246;
  v18 = *((_QWORD *)this + 3);
  v19 = exp(*(double *)(v18 + 584) * 6.28318531 + -3.14159265);
  v20 = atan(v19) * 114.591559 + -90.0;
  v21 = cos(v20 * 0.034906585);
  v22 = cos(v20 * 0.0698131701);
  v23 = cos(v20 * 0.104719755);
  v253 = 0.00872664626;
  v24 = v20 * 0.00872664626;
  v25 = tan(v24 + 0.78103484);
  v26 = log(v25);
  v27 = tan(v24 + 0.789761487);
  v28 = log(v27);
  LODWORD(v24) = *(_DWORD *)(v18 + 1508);
  v29 = *(float *)(v18 + 1504);
  v254 = *(float *)(v18 + 176);
  +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v289 = v28;
  v293 = v26;
  v298 = v23;
  objc_msgSend(v30, "arDebugMiniMapMapRectSize");
  LODWORD(v26) = v31;
  v286 = v22;
  v32 = v21;
  objc_msgSend(v30, "arDebugMiniMapScreenRectXOffset");
  LODWORD(v28) = v33;
  LODWORD(v21) = *(_DWORD *)(v18 + 1504);
  objc_msgSend(v30, "arDebugMiniMapScreenRectYOffset");
  v35 = v34;
  LODWORD(v22) = *(_DWORD *)(v18 + 1508);
  objc_msgSend(v30, "arDebugMiniMapScreenRectSize");
  v37 = v36 * fminf(*(float *)&v24, v29);
  v366[0] = *(float *)&v21 * *(float *)&v28;
  v366[1] = *(float *)&v22 * v35;
  v366[2] = v37 + (float)(*(float *)&v21 * *(float *)&v28);
  v366[3] = v37 + (float)(*(float *)&v22 * v35);
  v307 = *(_OWORD *)(v18 + 576);
  v346 = *(float *)&v26;
  v345 = *(float *)&v26;
  md::DebugConsoleMapRect::DebugConsoleMapRect((uint64_t)v347, (uint64_t)a3, (uint64_t)v366, (double *)&v307, &v346, &v345);
  *((_DWORD *)a3 + 24) = 0x80000000;
  v38 = v348.f32[0];
  *((float32x2_t *)a3 + 1) = v348;
  ggl::DebugConsole::drawRectangleWithFill((float32x2_t *)a3, &v349, v38);
  v344 = -16711681;
  v307 = 0uLL;
  v308 = 0.0;
  if (!(*((_QWORD *)this + 258) | *((_QWORD *)this + 259) | *((_QWORD *)this + 260)))
    goto LABEL_27;
  v39 = fabs((v289 - v293) * 0.159154943) * 0.25 / (v32 * -559.82 + 111132.92 + v286 * 1.175 + v298 * -0.0023);
  v40 = *((double *)this + 258);
  if (vabdd_f64(*(double *)(v18 + 576), v40) >= v39)
  {
    v41 = *((double *)this + 259);
LABEL_29:
    v344 = -16711936;
    v43 = *(float *)(*((_QWORD *)this + 3) + 176);
    LODWORD(v307) = -16711936;
    md::DebugConsoleMapRect::drawWorldCircleWithPixelRadius((uint64_t)v347, v43, &v307, 1, v40, v41);
    v42 = 0;
    goto LABEL_30;
  }
  v41 = *((double *)this + 259);
  if (vabdd_f64(*(double *)(v18 + 584), v41) >= v39
    || vabdd_f64(*(double *)(v18 + 592), *((double *)this + 260)) >= v39)
  {
    goto LABEL_29;
  }
LABEL_27:
  v42 = 1;
LABEL_30:
  md::DebugConsoleMapRect::drawWorldCircleWithPixelRadius((uint64_t)v347, *(float *)(*((_QWORD *)this + 3) + 176), &v344, v42, *(double *)(v18 + 576), *(double *)(v18 + 584));
  v44 = *(double *)(v18 + 1176);
  v45 = *(double *)(v18 + 1208);
  v46 = *(double *)(v18 + 1240);
  v47 = *(double *)(v18 + 1272);
  v48 = *(double *)(v18 + 1184);
  v49 = *(double *)(v18 + 1216);
  v50 = *(double *)(v18 + 1248);
  v51 = *(double *)(v18 + 1280);
  v52 = *(double *)(v18 + 1192);
  v53.i64[0] = *(_QWORD *)(v18 + 1224);
  v54 = *(double *)(v18 + 1200);
  v55.f64[0] = *(float64_t *)(v18 + 1232);
  v56 = *(double *)(v18 + 1264);
  v57 = *(double *)(v18 + 1296);
  v58 = v54 + v44;
  v59 = v55.f64[0] + v45;
  v60 = v56 + v46;
  v61 = v57 + v47;
  v62 = v54 - v44;
  v63 = v55.f64[0] - v45;
  v64 = v56 - v46;
  v65 = v57 - v47;
  v66 = v54 + v48;
  v67 = v55.f64[0] + v49;
  v68 = v56 + v50;
  v69 = v57 + v51;
  v70 = v54 - v48;
  v71 = v55.f64[0] - v49;
  v72 = v56 - v50;
  v73 = v57 - v51;
  v74 = v54 - v52;
  v75.f64[0] = v52;
  v75.f64[1] = v74;
  v76 = v57 - *(double *)(v18 + 1288);
  v77 = vmulq_f64(v75, v75);
  v75.f64[0] = *(float64_t *)(v18 + 1288);
  v55.f64[1] = v56;
  *(_QWORD *)&v78.f64[0] = v53.i64[0];
  v78.f64[1] = *(float64_t *)(v18 + 1256);
  v79 = vsubq_f64(v55, v78);
  v80 = (float64x2_t)vzip1q_s64(v53, (int64x2_t)v79);
  v81 = vmlaq_f64(v77, v80, v80);
  v80.f64[1] = v79.f64[1];
  v80.f64[0] = *(float64_t *)(v18 + 1256);
  __asm { FMOV            V27.2D, #1.0 }
  v86 = vdivq_f64(_Q27, vsqrtq_f64(vmlaq_f64(v81, v80, v80)));
  v87 = *(double *)(v18 + 1256) * v86.f64[0];
  *(double *)&v307 = v52 * v86.f64[0];
  *((double *)&v307 + 1) = *(double *)v53.i64 * v86.f64[0];
  v308 = v87;
  v309 = vmulq_f64(v86, v75);
  v310 = vmulq_laneq_f64(v79, v86, 1);
  v88 = 1.0 / sqrt(v66 * v66 + v67 * v67 + v68 * v68);
  v311 = vmuld_lane_f64(v76, v86, 1);
  v312 = v88 * v66;
  v313 = v88 * v67;
  v314 = v88 * v68;
  v89 = 1.0 / sqrt(v70 * v70 + v71 * v71 + v72 * v72);
  v315 = v88 * v69;
  v316 = v89 * v70;
  v317 = v89 * v71;
  v318 = v89 * v72;
  v90 = 1.0 / sqrt(v58 * v58 + v59 * v59 + v60 * v60);
  v319 = v89 * v73;
  v320 = v90 * v58;
  v321 = v90 * v59;
  v322 = v90 * v60;
  v91 = 1.0 / sqrt(v62 * v62 + v63 * v63 + v64 * v64);
  v323 = v90 * v61;
  v324 = v91 * v62;
  v325 = v91 * v63;
  v326 = v91 * v64;
  v327 = v91 * v65;
  geo::Frustum<double>::calculateCorners((double *)&v307, (double *)(v18 + 1176), 0.0);
  v92 = v328;
  v93 = v329;
  v266 = v331;
  v94 = v332;
  v95 = v333;
  v255 = v336;
  v256 = v337;
  v257 = v338 - v336;
  v258 = v339 - v337;
  v96 = v340;
  v97 = v341;
  v277 = v342;
  v259 = v342 - v340;
  v260 = v343 - v341;
  v280 = v343;
  v261 = v333 - v329;
  v262 = v332 - v328;
  v98 = v334;
  v99 = v335;
  v263 = v341 - v333;
  v264 = v340 - v332;
  v267 = v337 - v341;
  v268 = v336 - v340;
  v271 = v329 - v337;
  v272 = v328 - v336;
  v265 = v330;
  v274 = v335 - v331;
  v275 = v334 - v330;
  *(double *)&v379[16] = v330 - v328;
  v276 = v342 - v334;
  v269 = v334;
  v270 = v335;
  *(double *)v379 = v328;
  *(double *)&v379[8] = v329;
  *(double *)&v379[24] = v331 - v329;
  v375[0] = -16711936;
  v273 = v343 - v335;
  v287 = v338;
  v290 = v339;
  v282 = v338 - v342;
  v284 = v339 - v343;
  v294 = v330 - v338;
  v299 = v331 - v339;
  md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v347, (double *)v379, v375);
  *(double *)v379 = v94;
  *(double *)&v379[8] = v95;
  *(double *)&v379[16] = v98 - v94;
  *(double *)&v379[24] = v99 - v95;
  v375[0] = -16711936;
  md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v347, (double *)v379, v375);
  *(double *)v379 = v255;
  *(double *)&v379[8] = v256;
  *(double *)&v379[16] = v257;
  *(double *)&v379[24] = v258;
  v375[0] = -16711936;
  md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v347, (double *)v379, v375);
  *(double *)v379 = v96;
  *(double *)&v379[8] = v97;
  *(double *)&v379[16] = v259;
  *(double *)&v379[24] = v260;
  v375[0] = -16711936;
  md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v347, (double *)v379, v375);
  *(double *)v379 = v92;
  *(double *)&v379[8] = v93;
  *(double *)&v379[16] = v262;
  *(double *)&v379[24] = v261;
  v375[0] = -16711936;
  md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v347, (double *)v379, v375);
  *(double *)v379 = v94;
  *(double *)&v379[8] = v95;
  *(double *)&v379[16] = v264;
  *(double *)&v379[24] = v263;
  v375[0] = -16711936;
  md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v347, (double *)v379, v375);
  *(double *)v379 = v96;
  *(double *)&v379[8] = v97;
  *(double *)&v379[16] = v268;
  *(double *)&v379[24] = v267;
  v375[0] = -16711936;
  md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v347, (double *)v379, v375);
  *(double *)v379 = v255;
  *(double *)&v379[8] = v256;
  *(double *)&v379[16] = v272;
  *(double *)&v379[24] = v271;
  v375[0] = -16711936;
  md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v347, (double *)v379, v375);
  *(double *)v379 = v265;
  *(double *)&v379[8] = v266;
  *(double *)&v379[16] = v275;
  *(double *)&v379[24] = v274;
  v375[0] = -16711936;
  md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v347, (double *)v379, v375);
  *(double *)v379 = v269;
  *(double *)&v379[8] = v270;
  *(double *)&v379[16] = v276;
  *(double *)&v379[24] = v273;
  v375[0] = -16711936;
  md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v347, (double *)v379, v375);
  *(double *)v379 = v277;
  *(double *)&v379[8] = v280;
  *(double *)&v379[16] = v282;
  *(double *)&v379[24] = v284;
  v375[0] = -16711936;
  md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v347, (double *)v379, v375);
  *(double *)v379 = v287;
  *(double *)&v379[8] = v290;
  *(double *)&v379[16] = v294;
  *(double *)&v379[24] = v299;
  v375[0] = -16711936;
  md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v347, (double *)v379, v375);
  v101 = (void *)*((_QWORD *)this + 256);
  v102 = v30;
  v288 = this;
  if (v101)
  {
    v103 = v101;
    objc_msgSend(v103, "routeInfo");
    v104 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v104, "route");
    v291 = (void *)objc_claimAutoreleasedReturnValue();

    v305 = 0u;
    v306 = 0u;
    v303 = 0u;
    v304 = 0u;
    objc_msgSend(v291, "sections");
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    v106 = objc_msgSend(v105, "countByEnumeratingWithState:objects:count:", &v303, v375, 16);
    if (v106)
    {
      v107 = *(_QWORD *)v304;
      do
      {
        for (j = 0; j != v106; ++j)
        {
          if (*(_QWORD *)v304 != v107)
            objc_enumerationMutation(v105);
          v109 = *(void **)(*((_QWORD *)&v303 + 1) + 8 * j);
          if (objc_msgSend(v109, "pointCount", *(_QWORD *)&v253) >= 2)
          {
            v110 = 0uLL;
            memset(v379, 0, 48);
            if (v109)
            {
              objc_msgSend(v109, "bounds");
              v111 = *(float64x2_t *)v379;
              v110 = *(float64x2_t *)&v379[24];
            }
            else
            {
              v111 = 0uLL;
            }
            v112 = *(float64x2_t *)(MEMORY[0x1E0D266E8] + 16);
            v113 = v351.f64[0];
            v300 = vdivq_f64(v111, v112);
            if (v351.f64[0] > v300.f64[0])
            {
              v114 = vdivq_f64(vaddq_f64(v110, v111), v112);
              v115 = 1.0 - v114.f64[1];
              v110.f64[0] = 1.0 - v300.f64[1];
              v111.f64[0] = v351.f64[1];
              v113 = v350.f64[1];
              v112.f64[0] = v350.f64[0];
              v295 = v114;
              v116 = v350.f64[0] >= v114.f64[0] || v351.f64[1] <= v115;
              if (!v116 && v350.f64[1] < v110.f64[0])
              {
                v118 = objc_msgSend(v109, "points", v110.f64[0], v351.f64[1], v350.f64[0], v350.f64[1]);
                v296 = vsubq_f64(v295, v300);
                for (k = 1; k < objc_msgSend(v109, "pointCount"); ++k)
                {
                  v120 = vcvtq_f64_f32(*(float32x2_t *)(v118 + 12));
                  v121 = vmulq_f64(v296, vcvtq_f64_f32(*(float32x2_t *)v118));
                  LODWORD(v373[0]) = -1;
                  v376 = (uint64_t (**)())*(_OWORD *)&vaddq_f64(v121, v300);
                  v377 = v121.f64[1] + v115;
                  v378 = vmlaq_f64(vnegq_f64(v121), v120, v296);
                  md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v347, (double *)&v376, v373);
                  v118 += 12;
                }
              }
            }
          }
        }
        v106 = objc_msgSend(v105, "countByEnumeratingWithState:objects:count:", &v303, v375, 16, v110.f64[0], v111.f64[0], v112.f64[0], v113);
      }
      while (v106);
    }

  }
  v122 = v254;
  v123 = v122 + v122;
  v124 = (_QWORD *)*((_QWORD *)this + 252);
  __asm { FMOV            V1.2D, #0.5 }
  v278 = _Q1;
  v281 = (_QWORD *)*((_QWORD *)this + 253);
  if (v124 != v281)
  {
    _Q1.f64[0] = v122 * 3.0;
    v283 = (char *)this + 2088;
    v285 = (v122 * 1.5);
    v100.f64[0] = 0.0;
    v126 = (int8x16_t)vdupq_lane_s64(COERCE__INT64(v122 * 3.0), 0);
    v127.i64[1] = v126.i64[1];
    v127.i64[0] = 0;
    v128 = vbslq_s8((int8x16_t)vdupq_lane_s64(vcgeq_f64(_Q1, v100).i64[0], 0), v126, v127);
    v129 = (float)(v122 * 10.0);
    v130 = vmulq_f64((float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgtq_f64(v100, _Q1).i64[0], 0), (int8x16_t)v128.u64[0], v128), v278);
    v297 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v130), v130);
    v301 = v130;
    v292 = v130.f64[0];
    do
    {
      v132 = v124[2];
      v131 = v124[3];
      while (v132 != v131)
      {
        v133.f64[1] = v301.f64[1];
        v134 = *(_QWORD *)&v301.f64[0] & 0xFFFFFFFFFFFFFF00;
        v135 = *(int8x8_t *)((char *)this + 2120);
        if (!*(_QWORD *)&v135)
          goto LABEL_91;
        v136 = *(_QWORD *)(v132 + 16);
        v137 = 0x9DDFEA08EB382D69 * (((8 * v136) + 8) ^ HIDWORD(v136));
        v138 = 0x9DDFEA08EB382D69 * (HIDWORD(v136) ^ (v137 >> 47) ^ v137);
        v139 = 0x9DDFEA08EB382D69 * (v138 ^ (v138 >> 47));
        v140 = (uint8x8_t)vcnt_s8(v135);
        v140.i16[0] = vaddlv_u8(v140);
        if (v140.u32[0] > 1uLL)
        {
          v141 = v139;
          if (v139 >= *(_QWORD *)&v135)
            v141 = v139 % *(_QWORD *)&v135;
        }
        else
        {
          v141 = v139 & (*(_QWORD *)&v135 - 1);
        }
        v142 = *(_QWORD **)(*((_QWORD *)this + 264) + 8 * v141);
        if (!v142)
        {
LABEL_91:
          v159 = 1;
          *(_QWORD *)&v133.f64[0] = v134;
          v301 = v133;
          goto LABEL_93;
        }
        v143 = (_QWORD *)*v142;
        if (!*v142)
        {
LABEL_92:
          v159 = 1;
          *(_QWORD *)&v133.f64[0] = *(_QWORD *)&v301.f64[0] & 0xFFFFFFFFFFFFFF00;
          v301 = v133;
          this = v288;
          goto LABEL_93;
        }
        if (v140.u32[0] < 2uLL)
        {
          v144 = *(_QWORD *)&v135 - 1;
          while (1)
          {
            v146 = v143[1];
            if (v146 == v139)
            {
              if (v143[2] == v136)
                goto LABEL_82;
            }
            else if ((v146 & v144) != v141)
            {
              goto LABEL_92;
            }
            v143 = (_QWORD *)*v143;
            if (!v143)
              goto LABEL_92;
          }
        }
        while (1)
        {
          v145 = v143[1];
          if (v145 == v139)
            break;
          if (v145 >= *(_QWORD *)&v135)
            v145 %= *(_QWORD *)&v135;
          if (v145 != v141)
            goto LABEL_92;
LABEL_71:
          v143 = (_QWORD *)*v143;
          if (!v143)
            goto LABEL_92;
        }
        if (v143[2] != v136)
          goto LABEL_71;
LABEL_82:
        v147 = (char *)v143[3];
        v148 = (char *)operator new(0x38uLL);
        v149 = v148;
        v150 = *((_OWORD *)v147 + 1);
        v151 = *((_OWORD *)v147 + 2);
        *((_QWORD *)v148 + 6) = *((_QWORD *)v147 + 6);
        *((_OWORD *)v148 + 1) = v150;
        *((_OWORD *)v148 + 2) = v151;
        v152 = *((_QWORD *)v288 + 261);
        *(_QWORD *)(v152 + 8) = v148;
        *((_QWORD *)v288 + 261) = v148;
        *(_QWORD *)v148 = v152;
        *((_QWORD *)v148 + 1) = v283;
        v153 = (char *)*((_QWORD *)v288 + 269);
        if (v153 == v147)
        {
          v154 = (char *)*((_QWORD *)v147 + 1);
          goto LABEL_86;
        }
        v154 = v148;
        if (v153 == v283)
LABEL_86:
          *((_QWORD *)v288 + 269) = v154;
        v155 = *(_QWORD *)v147;
        *(_QWORD *)(v155 + 8) = *((_QWORD *)v147 + 1);
        **((_QWORD **)v147 + 1) = v155;
        operator delete(v147);
        v143[3] = v149;
        if (v149 == v283)
          goto LABEL_92;
        v157 = *(double *)(*(_QWORD *)(v132 + 16) + 224) * 0.2;
        v156.f64[0] = *((float64_t *)v149 + 3);
        v301 = v156;
        this = v288;
        if (vabdd_f64(*(double *)(v132 + 40), v156.f64[0]) >= v157)
        {
          v158 = *((double *)v149 + 4);
        }
        else
        {
          v158 = *((double *)v149 + 4);
          if (vabdd_f64(*(double *)(v132 + 48), v158) < v157
            && vabdd_f64(*(double *)(v132 + 56), *((double *)v149 + 5)) < v157)
          {
            goto LABEL_91;
          }
        }
        v159 = 0;
        v292 = v158;
LABEL_93:
        switch(*(_BYTE *)(v132 + 104))
        {
          case 3:
            v160 = -16711681;
            goto LABEL_101;
          case 0x15:
            v160 = -256;
            goto LABEL_101;
          case 0x16:
          case 0x17:
          case 0x18:
            v160 = -16744193;
            goto LABEL_101;
          case 0x1D:
          case 0x21:
            v160 = -16776961;
            goto LABEL_101;
          case 0x20:
            v160 = -8388480;
            goto LABEL_101;
          case 0x25:
            LODWORD(v376) = -1;
            goto LABEL_102;
          default:
            v160 = -16777216;
LABEL_101:
            LODWORD(v376) = v160;
LABEL_102:
            if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v124 + 264))(*v124) != 26)
            {
              if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v124 + 264))(*v124) == 25)
              {
                v174 = (double *)(v132 + 40);
                goto LABEL_108;
              }
              v175 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v124 + 264))(*v124);
              v174 = (double *)(v132 + 40);
              if (v175 == 27)
              {
LABEL_108:
                md::DebugConsoleMapRect::drawWorldCircleWithPixelRadius((uint64_t)v347, v123, &v376, v159, *v174, v174[1]);
                if ((v159 & 1) != 0)
                  goto LABEL_113;
                v176 = v301.f64[0];
                v177 = v292;
                v178 = v123;
              }
              else
              {
                md::DebugConsoleMapRect::drawWorldCircleWithPixelRadius((uint64_t)v347, v285, &v376, v159, *v174, *(double *)(v132 + 48));
                if ((v159 & 1) != 0)
                  goto LABEL_113;
                v176 = v301.f64[0];
                v177 = v292;
                v178 = v285;
              }
              md::DebugConsoleMapRect::drawWorldCircleWithPixelRadius((uint64_t)v347, v178, &v376, 1, v176, v177);
              goto LABEL_113;
            }
            _Q0 = *(float32x4_t *)(v132 + 40);
            _D1 = v354.f64[0];
            __asm { FMLA            D3, D1, V0.D[1] }
            _D1 = v354.f64[1];
            _D2 = *(float32x2_t *)&v355;
            __asm
            {
              FMLA            D4, D1, V0.D[1]
              FMLA            D1, D2, V0.D[1]
            }
            *(double *)_Q0.i64 = 1.0 / _D1;
            *(float *)&_D1 = 1.0 / _D1 * _D3;
            _Q0.f32[0] = *(double *)_Q0.i64 * _D4;
            _D2.f32[0] = v360 * _Q0.f32[0];
            _D2.i32[1] = v364;
            LODWORD(_D4) = v363;
            *((float *)&_D4 + 1) = v361 * _Q0.f32[0];
            *(float32x2_t *)_Q0.f32 = vmul_n_f32(vadd_f32(vmla_n_f32(*(float32x2_t *)&_D4, v358, *(float *)&_D1), _D2), 1.0/ (float)((float)(v365 + (float)(v359 * *(float *)&_D1))+ (float)(v362 * _Q0.f32[0])));
            _Q0.i64[1] = _Q0.i64[0];
            *(_QWORD *)&v168 = vsubq_f32(_Q0, v297).u64[0];
            *((_QWORD *)&v168 + 1) = vaddq_f32(_Q0, v297).i64[1];
            *(_OWORD *)v379 = v168;
            md::DebugConsoleMapRect::drawPixelRect((uint64_t)v347, (float *)v379, (__int8 *)&v376, v159);
            if ((v159 & 1) == 0)
            {
              v169.i32[0] = v363;
              v170 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v356, v352, v301.f64[0]), v354, v292), 1.0 / (v357 + v353 * v301.f64[0] + v355 * v292)));
              v171.f32[0] = vmuls_lane_f32(v360, v170, 1);
              v171.i32[1] = v364;
              v169.i32[1] = vmuls_lane_f32(v361, v170, 1);
              *(float32x2_t *)v172.f32 = vmul_n_f32(vadd_f32(vmla_n_f32(v169, v358, v170.f32[0]), v171), 1.0/ (float)(vaddv_f32(vmul_f32((float32x2_t)__PAIR64__(LODWORD(v362), LODWORD(v359)), v170))+ v365));
              v172.i64[1] = v172.i64[0];
              *(_QWORD *)&v173 = vsubq_f32(v172, v297).u64[0];
              *((_QWORD *)&v173 + 1) = vaddq_f32(v172, v297).i64[1];
              *(_OWORD *)v379 = v173;
              md::DebugConsoleMapRect::drawPixelRect((uint64_t)v347, (float *)v379, (__int8 *)&v376, 1);
            }
LABEL_113:
            if (*(_BYTE *)(v132 + 76))
            {
              v179 = vcvtq_f64_f32(*(float32x2_t *)(v132 + 64));
              v180 = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(vsub_f32(v349, v348)), vsubq_f64(v351, v350)));
              *(_OWORD *)v379 = *(_OWORD *)(v132 + 40);
              *(float64x2_t *)&v379[16] = vmulq_n_f64(v179, (float)(v129 / fminf(v180.f32[1], v180.f32[0]))/ sqrt(vaddvq_f64(vmulq_f64(v179, v179))));
              md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v347, (double *)v379, &v376);
            }
            if (fabsf(*(float *)(*(_QWORD *)(v132 + 16) + 808)) > 0.0001 && *(_BYTE *)(v132 + 92))
            {
              v181 = *(_OWORD *)(v132 + 40);
              v182 = vcvtq_f64_f32(*(float32x2_t *)(v132 + 80));
              LODWORD(v373[0]) = -65536;
              v183 = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(vsub_f32(v349, v348)), vsubq_f64(v351, v350)));
              *(_OWORD *)v379 = v181;
              *(float64x2_t *)&v379[16] = vmulq_n_f64(v182, (float)(v129 / fminf(v183.f32[1], v183.f32[0]))/ sqrt(vaddvq_f64(vmulq_f64(v182, v182))));
              md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v347, (double *)v379, v373);
            }
            v132 += 128;
            break;
        }
      }
      v124 += 5;
    }
    while (v124 != v281);
  }
  if ((_DWORD)VectorKitDebugConfig_ARDebugMinimapShowBuildings)
    _ZF = off_1EE569010 == 0;
  else
    _ZF = 1;
  v185 = v102;
  if (!_ZF && !GEOConfigGetBOOL())
    goto LABEL_199;
  v186 = (_QWORD *)*((_QWORD *)this + 275);
  if (!v186)
    goto LABEL_199;
  v373[0] = &off_1E42D8DC8;
  v373[1] = v347;
  v374 = v373;
  v371[0] = &off_1E42D8E10;
  v371[1] = this;
  v371[2] = v347;
  v372 = v371;
  memset(v379, 0, 32);
  *(_DWORD *)&v379[32] = 1065353216;
  v187 = (_QWORD *)*v186;
  if ((_QWORD *)*v186 == v186 + 1)
    goto LABEL_175;
  while (2)
  {
    v188 = v187[4];
    v189 = *(_QWORD **)(v188 + 784);
    v190 = (int8x8_t)v189[1];
    if (!*(_QWORD *)&v190)
      goto LABEL_153;
    v191 = (uint8x8_t)vcnt_s8(v190);
    v191.i16[0] = vaddlv_u8(v191);
    if (v191.u32[0] > 1uLL)
    {
      v192 = 0x64A448A5CD5D38DBLL;
      if (*(_QWORD *)&v190 <= 0x64A448A5CD5D38DBuLL)
        v192 = 0x64A448A5CD5D38DBuLL % *(_QWORD *)&v190;
    }
    else
    {
      v192 = (*(_QWORD *)&v190 - 1) & 0x64A448A5CD5D38DBLL;
    }
    v193 = *(_QWORD **)(*v189 + 8 * v192);
    if (!v193 || (v194 = (_QWORD *)*v193) == 0)
    {
LABEL_153:
      v199 = 0;
      v200 = v374;
      if (!v374)
        goto LABEL_156;
LABEL_154:
      if (((*(uint64_t (**)(_QWORD *, uint64_t))(*v200 + 48))(v200, v199 + 128) & 1) == 0)
      {
        v188 = v187[4];
        goto LABEL_156;
      }
      goto LABEL_165;
    }
    if (v191.u32[0] < 2uLL)
    {
      v195 = *(_QWORD *)&v190 - 1;
      while (1)
      {
        v197 = v194[1];
        if (v197 == 0x64A448A5CD5D38DBLL)
        {
          if (v194[2] == 0x64A448A5CD5D38DBLL)
            goto LABEL_150;
        }
        else if ((v197 & v195) != v192)
        {
          goto LABEL_153;
        }
        v194 = (_QWORD *)*v194;
        if (!v194)
          goto LABEL_153;
      }
    }
    while (1)
    {
      v196 = v194[1];
      if (v196 == 0x64A448A5CD5D38DBLL)
        break;
      if (v196 >= *(_QWORD *)&v190)
        v196 %= *(_QWORD *)&v190;
      if (v196 != v192)
        goto LABEL_153;
LABEL_139:
      v194 = (_QWORD *)*v194;
      if (!v194)
        goto LABEL_153;
    }
    if (v194[2] != 0x64A448A5CD5D38DBLL)
      goto LABEL_139;
LABEL_150:
    v198 = v194[5];
    if (*(_QWORD *)(v198 + 8) != 0x64A448A5CD5D38DBLL)
      goto LABEL_153;
    v199 = *(_QWORD *)(v198 + 32);
    v200 = v374;
    if (v374)
      goto LABEL_154;
LABEL_156:
    *(_QWORD *)&v201 = v199 + 304;
    v376 = &off_1E42D90E0;
    v377 = COERCE_DOUBLE(v371);
    v378.f64[0] = v201;
    *(_QWORD *)&v378.f64[1] = &v376;
    md::ARWorldIntersector::visitReferencedAssetOcclusionVolumes((uint64_t)v186, v188, (uint64_t)v379, (uint64_t)&v376);
    v202 = *(uint64_t (****)())&v378.f64[1];
    if (*(uint64_t (****)())&v378.f64[1] == &v376)
    {
      v202 = &v376;
      v203 = 4;
LABEL_160:
      (*v202)[v203]();
    }
    else if (*(_QWORD *)&v378.f64[1])
    {
      v203 = 5;
      goto LABEL_160;
    }
    v204 = (_QWORD *)gdc::Registry::storage<arComponents::LocalBounds>((uint64_t)v189);
    v205 = v204[7];
    v206 = v204[8];
    if (v205 != v206)
    {
      v207 = v204[10];
      do
      {
        if (!v372)
        {
LABEL_249:
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
        }
        (*(void (**)(_QWORD *, float64_t, uint64_t))(*v372 + 48))(v372, COERCE_FLOAT64_T(*(_QWORD *)&v201), v207);
        v207 += 168;
        v205 += 8;
      }
      while (v205 != v206);
    }
LABEL_165:
    v208 = (_QWORD *)v187[1];
    if (v208)
    {
      do
      {
        v209 = v208;
        v208 = (_QWORD *)*v208;
      }
      while (v208);
    }
    else
    {
      do
      {
        v209 = (_QWORD *)v187[2];
        _ZF = *v209 == (_QWORD)v187;
        v187 = v209;
      }
      while (!_ZF);
    }
    v187 = v209;
    this = v288;
    if (v209 != v186 + 1)
      continue;
    break;
  }
  v210 = *(_QWORD **)&v379[16];
  if (*(_QWORD *)&v379[16])
  {
    do
    {
      v211 = (_QWORD *)*v210;
      operator delete(v210);
      v210 = v211;
    }
    while (v211);
  }
  v212 = *(void **)v379;
  *(_QWORD *)v379 = 0;
  if (v212)
    operator delete(v212);
LABEL_175:
  v213 = v372;
  if (v372 == v371)
  {
    v214 = 4;
    v213 = v371;
    v185 = v102;
LABEL_179:
    (*(void (**)(void))(*v213 + 8 * v214))();
  }
  else
  {
    v185 = v102;
    if (v372)
    {
      v214 = 5;
      goto LABEL_179;
    }
  }
  v215 = v374;
  if (v374 == v373)
  {
    v216 = 4;
    v215 = v373;
LABEL_184:
    (*(void (**)(void))(*v215 + 8 * v216))();
  }
  else if (v374)
  {
    v216 = 5;
    goto LABEL_184;
  }
  v217 = *((_QWORD *)this + 275);
  v376 = &off_1E42D8DC8;
  v377 = COERCE_DOUBLE(v347);
  *(_QWORD *)&v378.f64[1] = &v376;
  v369[0] = &off_1E42D8E58;
  v369[1] = this;
  v218 = v369;
  v369[2] = v347;
  v370 = v369;
  v219 = *(float64x2_t **)(v217 + 104);
  v220 = *(float64x2_t **)(v217 + 112);
  if (v219 == v220)
  {
    v221 = 4;
LABEL_193:
    (*(void (**)(void))(*v218 + 8 * v221))();
    goto LABEL_194;
  }
  do
  {
    v383 = 0u;
    v384 = 0u;
    v380 = 0u;
    v381 = 0;
    memset(&v379[8], 0, 48);
    *(_QWORD *)v379 = 0x3FF0000000000000;
    *(_QWORD *)&v379[40] = 0x3FF0000000000000;
    v382 = 0x3FF0000000000000;
    v385 = 0x3FF0000000000000;
    v367 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v219), v219[1]);
    v368 = vcvt_f32_f64(v219[2]);
    if (!v370)
      goto LABEL_249;
    (*(void (**)(_QWORD *, _BYTE *, float32x4_t *))(*v370 + 48))(v370, v379, &v367);
    v219 += 3;
  }
  while (v219 != v220);
  v218 = v370;
  if (v370 == v369)
  {
    v221 = 4;
    v218 = v369;
    goto LABEL_193;
  }
  if (v370)
  {
    v221 = 5;
    goto LABEL_193;
  }
LABEL_194:
  v222 = *(uint64_t (****)())&v378.f64[1];
  if (*(uint64_t (****)())&v378.f64[1] == &v376)
  {
    v223 = 4;
    v222 = &v376;
LABEL_198:
    (*v222)[v223]();
  }
  else if (*(_QWORD *)&v378.f64[1])
  {
    v223 = 5;
    goto LABEL_198;
  }
LABEL_199:
  if ((_DWORD)VectorKitDebugConfig_ARDebugMinimapShowTileSelection)
    v224 = off_1EE569020 == 0;
  else
    v224 = 1;
  if (v224 || GEOConfigGetBOOL())
  {
    v225 = *((_QWORD *)this + 6);
    *(_QWORD *)&v379[16] = 0;
    *(_QWORD *)&v379[8] = 0;
    *(_QWORD *)v379 = &v379[8];
    *(int64x2_t *)&v379[24] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    *(int64x2_t *)&v379[40] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    v226 = *(_QWORD *)(v225 + 16);
    v227 = *(_QWORD *)(v225 + 24);
    if (v226 != v227)
    {
      do
      {
        v228 = (double *)(*(_QWORD *)v226 + 40);
        if (*(unsigned __int8 *)(*(_QWORD *)v226 + 9) < 0x15u)
        {
          v367.i32[0] = -16776961;
          md::DebugConsoleMapRect::drawWorldRect((uint64_t)v347, v228, (__int8 *)&v367, 0);
        }
        else
        {
          md::MultiRectRegion::addRect((double **)v379, v228);
        }
        v226 += 16;
      }
      while (v226 != v227);
      if (*(_QWORD *)&v379[16])
      {
        v367.i32[0] = -16711681;
        md::DebugConsoleMapRect::drawWorldRect((uint64_t)v347, (double *)&v379[24], (__int8 *)&v367, 0);
        v229 = *(double **)v379;
        if (*(_BYTE **)v379 != &v379[8])
        {
          do
          {
            v367.i32[0] = -16711681;
            md::DebugConsoleMapRect::drawWorldRect((uint64_t)v347, v229 + 4, (__int8 *)&v367, 0);
            v241 = (double *)*((_QWORD *)v229 + 1);
            if (v241)
            {
              do
              {
                v242 = v241;
                v241 = *(double **)v241;
              }
              while (v241);
            }
            else
            {
              do
              {
                v242 = (double *)*((_QWORD *)v229 + 2);
                _ZF = *(_QWORD *)v242 == (_QWORD)v229;
                v229 = v242;
              }
              while (!_ZF);
            }
            v229 = v242;
          }
          while (v242 != (double *)&v379[8]);
        }
      }
    }
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)&v379[8]);
  }
  if ((_DWORD)VectorKitDebugConfig_ARDebugMinimapShowBuildingTileSelection)
    v230 = off_1EE569030 == 0;
  else
    v230 = 1;
  if (v230 || GEOConfigGetBOOL())
  {
    v231 = (_QWORD *)*((_QWORD *)this + 275);
    *(_QWORD *)v379 = &off_1E42D8EA0;
    *(_QWORD *)&v379[8] = v347;
    v232 = v379;
    *(_QWORD *)&v379[24] = v379;
    v235 = (_QWORD *)*v231;
    v233 = v231 + 1;
    v234 = v235;
    if (v235 == v233)
    {
      v236 = 4;
      goto LABEL_242;
    }
    do
    {
      v237 = v234[4];
      if (v237)
        v238 = v237 + 168;
      else
        v238 = 0;
      v367.i64[0] = v238;
      if (!*(_QWORD *)&v379[24])
        goto LABEL_249;
      (*(void (**)(_QWORD, float32x4_t *))(**(_QWORD **)&v379[24] + 48))(*(_QWORD *)&v379[24], &v367);
      v239 = (_QWORD *)v234[1];
      if (v239)
      {
        do
        {
          v240 = v239;
          v239 = (_QWORD *)*v239;
        }
        while (v239);
      }
      else
      {
        do
        {
          v240 = (_QWORD *)v234[2];
          _ZF = *v240 == (_QWORD)v234;
          v234 = v240;
        }
        while (!_ZF);
      }
      v234 = v240;
    }
    while (v240 != v233);
    v232 = *(_QWORD **)&v379[24];
    if (*(_BYTE **)&v379[24] == v379)
    {
      v236 = 4;
      v232 = v379;
LABEL_242:
      (*(void (**)(void))(*v232 + 8 * v236))();
    }
    else if (*(_QWORD *)&v379[24])
    {
      v236 = 5;
      goto LABEL_242;
    }
  }
  v243 = (void *)*((_QWORD *)this + 256);
  if (v243)
  {
    v244 = v243;
    objc_msgSend(v244, "routeInfo");
    v245 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v245, "route");
    v246 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v246, "pointAtRouteCoordinate:", *(_QWORD *)(*((_QWORD *)this + 3) + 3560));
    v302 = v247;
    v249 = tan(v248 * v253 + 0.785398163);
    v250 = log(v249);
    v251.f64[0] = v302;
    v251.f64[1] = v250;
    v252 = vmlaq_f64(v278, (float64x2_t)xmmword_19FFB32D0, v251);
    v367.i32[0] = 127;
    md::DebugConsoleMapRect::drawWorldCircleWithPixelRadius((uint64_t)v347, v123, &v367, 1, v252.f64[0], v252.f64[1]);

  }
LABEL_246:
  if (*((_BYTE *)this + 402))
    md::ARWalkingLabeler::debugOutputLabelState(this, v279);

}

void sub_19FEE82B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id a36)
{
  void *v36;

  _Unwind_Resume(a1);
}

uint64_t md::ARWalkingLabeler::externalMeshModerator(md::ARWalkingLabeler *this)
{
  return *((_QWORD *)this + 56);
}

void md::ARWalkingLabeler::layoutLabelsForStaging(md::ARWalkingLabeler *this)
{
  char *v2;
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  int8x8_t v12;
  unint64_t v13;
  uint8x8_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *i;
  unint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  uint64_t jj;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t j;
  uint64_t v40;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t mm;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t nn;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  void **v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t k;
  void *v62;
  void *v63;
  _QWORD *v64;
  unint64_t v65;
  void *v66;
  unint64_t v67;
  _QWORD *v68;
  void *v69;
  _QWORD *v70;
  _QWORD *v71;
  void *v72;
  char v73;
  void *v74;
  uint64_t *v75;
  uint64_t *v76;
  md::Label *v77;
  uint64_t v78;
  uint64_t *m;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t **n;
  uint64_t **ii;
  uint64_t **kk;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  md::Label **v100;
  md::Label *v101;
  uint64_t v102;
  _BOOL4 v103;
  uint64_t v104;
  md::Label *v105;
  unint64_t v106;
  uint8x8_t v107;
  uint64_t v108;
  unint64_t *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  void *v140;
  void *v141;
  int v142;
  unint64_t *v143;
  uint64_t *v144;
  uint8x8_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  double **v152;
  double *v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  double *v160;
  unint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *p_shared_owners;
  unint64_t v166;
  char v167;
  int v168;
  _BYTE *v169;
  int v170;
  _BYTE *v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  _UNKNOWN **v176;
  unint64_t *v177;
  unint64_t v178;
  int v179;
  _BYTE *v180;
  unint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  unint64_t *v184;
  unint64_t *v185;
  unint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t v189;
  int v190;
  _BYTE *v191;
  unint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  int v195;
  _BYTE *v196;
  int v197;
  _BYTE *v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  uint64_t *v203;
  unint64_t v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  void *v209;
  char v210;
  unint64_t *v211;
  unint64_t v212;
  _QWORD *v213;
  _QWORD *v214;
  void *v215;
  unint64_t v216;
  uint64_t v217;
  double v218;
  int8x8_t v220;
  int v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint8x8_t v225;
  unint64_t v226;
  _QWORD *v227;
  _QWORD *v228;
  _QWORD *v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  double v234;
  char *v235;
  uint64_t v236;
  _QWORD *v237;
  _QWORD *v238;
  unint64_t v239;
  unint64_t v240;
  uint8x8_t v241;
  _QWORD *v242;
  _QWORD *v243;
  unint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  float v247;
  float v248;
  uint64_t *v249;
  _BOOL8 v250;
  unint64_t v251;
  unint64_t v252;
  size_t prime;
  unint64_t v254;
  uint8x8_t v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  _QWORD *v261;
  _QWORD *v262;
  int v263;
  unint64_t v264;
  unint64_t v265[8];
  uint64_t v266[4];
  __int16 v267;
  char v268;
  void *__p[2];
  void *v270[2];
  int v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  __int128 v274;
  __int128 v275;
  double v276;

  v2 = (char *)this + 1808;
  v3 = (uint64_t *)*((_QWORD *)this + 227);
  v4 = (uint64_t *)*((_QWORD *)this + 234);
  if (v3 != v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = *((_QWORD *)this + 232);
    v8 = (_QWORD *)((char *)this + 1832);
    v9 = (char *)this + 1848;
    while (v6 != v7)
    {
      v10 = v3[6];
      v11 = (char *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>((_QWORD *)this + 229, v3[2]);
      if (v11)
      {
        v12 = *(int8x8_t *)((char *)this + 1840);
        v13 = *((_QWORD *)v11 + 1);
        v14 = (uint8x8_t)vcnt_s8(v12);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] > 1uLL)
        {
          if (v13 >= *(_QWORD *)&v12)
            v13 %= *(_QWORD *)&v12;
        }
        else
        {
          v13 &= *(_QWORD *)&v12 - 1;
        }
        v15 = *(char **)(*v8 + 8 * v13);
        do
        {
          v16 = v15;
          v15 = *(char **)v15;
        }
        while (v15 != v11);
        if (v16 == v9)
          goto LABEL_24;
        v17 = *((_QWORD *)v16 + 1);
        if (v14.u32[0] > 1uLL)
        {
          if (v17 >= *(_QWORD *)&v12)
            v17 %= *(_QWORD *)&v12;
        }
        else
        {
          v17 &= *(_QWORD *)&v12 - 1;
        }
        if (v17 != v13)
        {
LABEL_24:
          if (!*(_QWORD *)v11)
            goto LABEL_25;
          v18 = *(_QWORD *)(*(_QWORD *)v11 + 8);
          if (v14.u32[0] > 1uLL)
          {
            if (v18 >= *(_QWORD *)&v12)
              v18 %= *(_QWORD *)&v12;
          }
          else
          {
            v18 &= *(_QWORD *)&v12 - 1;
          }
          if (v18 != v13)
LABEL_25:
            *(_QWORD *)(*v8 + 8 * v13) = 0;
        }
        v19 = *(_QWORD *)v11;
        if (*(_QWORD *)v11)
        {
          v20 = *(_QWORD *)(v19 + 8);
          if (v14.u32[0] > 1uLL)
          {
            if (v20 >= *(_QWORD *)&v12)
              v20 %= *(_QWORD *)&v12;
          }
          else
          {
            v20 &= *(_QWORD *)&v12 - 1;
          }
          if (v20 != v13)
          {
            *(_QWORD *)(*v8 + 8 * v20) = v16;
            v19 = *(_QWORD *)v11;
          }
        }
        *(_QWORD *)v16 = v19;
        --*((_QWORD *)this + 232);
        operator delete(v11);
        v4 = (uint64_t *)*((_QWORD *)this + 234);
      }
      v5 += v10;
      v3 = (uint64_t *)v3[1];
      ++v6;
      if (v3 == v4)
        goto LABEL_34;
    }
    v4 = v3;
LABEL_34:
    v21 = (uint64_t *)*((_QWORD *)this + 227);
    if (v21 != v4)
    {
      v22 = *v4;
      v23 = *v21;
      *(_QWORD *)(v23 + 8) = *(_QWORD *)(*v4 + 8);
      **(_QWORD **)(v22 + 8) = v23;
      do
      {
        v24 = (uint64_t *)v21[1];
        --*((_QWORD *)this + 228);
        operator delete(v21);
        v21 = v24;
      }
      while (v24 != v4);
    }
    v25 = *((_QWORD *)this + 235);
    v26 = v25 >= v5;
    v27 = v25 - v5;
    if (!v26)
      v27 = 0;
    *((_QWORD *)this + 235) = v27;
  }
  *((_QWORD *)this + 234) = v2;
  if (*((_BYTE *)this + 400))
  {
    v274 = 0u;
    v275 = 0u;
    LODWORD(v276) = 1065353216;
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v270 = 0u;
    v271 = 1065353216;
    v28 = (unint64_t *)*((_QWORD *)this + 9);
    for (i = (unint64_t *)*((_QWORD *)this + 10); v28 != i; v28 += 2)
    {
      v30 = *v28;
      if (std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>((_QWORD *)this + 236, *v28))
      {
        std::__hash_table<md::Label *,std::hash<md::Label *>,std::equal_to<md::Label *>,std::allocator<md::Label *>>::__emplace_unique_key_args<md::Label *,md::Label *>((float *)&v274, v30, v30);
        v272 = *v28;
        v31 = std::__hash_table<std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>,std::__unordered_map_hasher<md::Label *,std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>,std::hash<md::Label *>,std::equal_to<md::Label *>,true>,std::__unordered_map_equal<md::Label *,std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>,std::equal_to<md::Label *>,std::hash<md::Label *>,true>,std::allocator<std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>>>::__emplace_unique_key_args<md::Label *,std::piecewise_construct_t const&,std::tuple<md::Label *&&>,std::tuple<>>((float *)this + 482, v272, &v272);
        v265[0] = *v28;
        v32 = std::__hash_table<std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>,std::__unordered_map_hasher<md::Label *,std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>,std::hash<md::Label *>,std::equal_to<md::Label *>,true>,std::__unordered_map_equal<md::Label *,std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>,std::equal_to<md::Label *>,std::hash<md::Label *>,true>,std::allocator<std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>>>::__emplace_unique_key_args<md::Label *,std::piecewise_construct_t const&,std::tuple<md::Label *&&>,std::tuple<>>((float *)__p, v265[0], v265);
        v33 = *(_OWORD *)(v31 + 24);
        v34 = *(_OWORD *)(v31 + 40);
        *((_QWORD *)v32 + 7) = *((_QWORD *)v31 + 7);
        *(_OWORD *)(v32 + 40) = v34;
        *(_OWORD *)(v32 + 24) = v33;
      }
    }
    jj = (uint64_t)this + 1888;
    if (*((_QWORD *)this + 239))
    {
      v36 = (_QWORD *)*((_QWORD *)this + 238);
      if (v36)
      {
        do
        {
          v37 = (_QWORD *)*v36;
          operator delete(v36);
          v36 = v37;
        }
        while (v37);
      }
      *((_QWORD *)this + 238) = 0;
      v38 = *((_QWORD *)this + 237);
      if (v38)
      {
        for (j = 0; j != v38; ++j)
          *(_QWORD *)(*(_QWORD *)jj + 8 * j) = 0;
      }
      *((_QWORD *)this + 239) = 0;
    }
    v40 = v274;
    *(_QWORD *)&v274 = 0;
    v41 = *(void **)jj;
    *(_QWORD *)jj = v40;
    if (v41)
      operator delete(v41);
    v42 = *((_QWORD *)&v274 + 1);
    v43 = v275;
    *((_QWORD *)this + 237) = *((_QWORD *)&v274 + 1);
    *((_QWORD *)&v274 + 1) = 0;
    v44 = *((_QWORD *)&v275 + 1);
    *((_QWORD *)this + 239) = *((_QWORD *)&v275 + 1);
    *((_DWORD *)this + 480) = LODWORD(v276);
    *((_QWORD *)this + 238) = v43;
    if (v44)
    {
      v45 = *(_QWORD *)(v43 + 8);
      if ((v42 & (v42 - 1)) != 0)
      {
        if (v45 >= v42)
          v45 %= v42;
      }
      else
      {
        v45 &= v42 - 1;
      }
      *(_QWORD *)(*(_QWORD *)jj + 8 * v45) = (char *)this + 1904;
      v275 = 0uLL;
    }
    v57 = (void **)((char *)this + 1928);
    if (*((_QWORD *)this + 244))
    {
      v58 = (_QWORD *)*((_QWORD *)this + 243);
      if (v58)
      {
        do
        {
          v59 = (_QWORD *)*v58;
          operator delete(v58);
          v58 = v59;
        }
        while (v59);
      }
      *((_QWORD *)this + 243) = 0;
      v60 = *((_QWORD *)this + 242);
      if (v60)
      {
        for (k = 0; k != v60; ++k)
          *((_QWORD *)*v57 + k) = 0;
      }
      *((_QWORD *)this + 244) = 0;
    }
    v62 = __p[0];
    __p[0] = 0;
    v63 = *v57;
    *v57 = v62;
    if (v63)
      operator delete(v63);
    v65 = (unint64_t)__p[1];
    v64 = v270[0];
    *((void **)this + 242) = __p[1];
    __p[1] = 0;
    v66 = v270[1];
    *((void **)this + 244) = v270[1];
    *((_DWORD *)this + 490) = v271;
    *((_QWORD *)this + 243) = v64;
    if (v66)
    {
      v67 = v64[1];
      if ((v65 & (v65 - 1)) != 0)
      {
        if (v67 >= v65)
          v67 %= v65;
      }
      else
      {
        v67 &= v65 - 1;
      }
      *((_QWORD *)*v57 + v67) = (char *)this + 1944;
      v270[0] = 0;
      v270[1] = 0;
    }
    else if (v64)
    {
      do
      {
        v68 = (_QWORD *)*v64;
        operator delete(v64);
        v64 = v68;
      }
      while (v68);
    }
    v69 = __p[0];
    __p[0] = 0;
    if (v69)
      operator delete(v69);
    v70 = (_QWORD *)v275;
    if ((_QWORD)v275)
    {
      do
      {
        v71 = (_QWORD *)*v70;
        operator delete(v70);
        v70 = v71;
      }
      while (v71);
    }
    v72 = (void *)v274;
    *(_QWORD *)&v274 = 0;
    if (v72)
      operator delete(v72);
    v263 = *((unsigned __int8 *)this + 1713);
    if (*((_BYTE *)this + 1713))
    {
      v73 = 1;
    }
    else
    {
      +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
      v74 = (void *)objc_claimAutoreleasedReturnValue();
      v73 = objc_msgSend(v74, "labelDedupingDisabled");

    }
    v268 = 0;
    v267 = 0;
    v261 = *(_QWORD **)(*((_QWORD *)this + 3) + 432);
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v270 = 0u;
    v271 = 1065353216;
    v76 = (uint64_t *)*((_QWORD *)this + 9);
    v75 = (uint64_t *)*((_QWORD *)this + 10);
    v266[0] = (uint64_t)this;
    v266[1] = (uint64_t)&v267;
    v266[2] = (uint64_t)(v261 + 17);
    v266[3] = (uint64_t)__p;
    if (v76 == v75)
    {
LABEL_112:
      v75 = v76;
    }
    else
    {
      do
      {
        if ((md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_0::operator()(v266, (md::Label **)v76) & 1) == 0)
        {
          do
          {
            v75 -= 2;
            if (v75 == v76)
              goto LABEL_112;
          }
          while (!md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_0::operator()(v266, (md::Label **)v75));
          v77 = (md::Label *)*v76;
          *v76 = *v75;
          *v75 = (uint64_t)v77;
          v78 = v76[1];
          v76[1] = v75[1];
          v75[1] = v78;
        }
        v76 += 2;
      }
      while (v76 != v75);
    }
    for (m = (uint64_t *)*((_QWORD *)this + 9); m != v75; m += 2)
    {
      while (1)
      {
        v80 = *m;
        if (*(_BYTE *)(*m + 1290))
          break;
        v81 = v75 - 2;
        do
        {
          if (v81 == m)
            goto LABEL_123;
          v75 = v81;
          v83 = *v81;
          v81 -= 2;
          v82 = v83;
        }
        while (!*(_BYTE *)(v83 + 1290));
        *m = v82;
        v81[2] = v80;
        v84 = m[1];
        m[1] = v81[3];
        v81[3] = v84;
        m += 2;
        if (m == v75)
          goto LABEL_123;
      }
    }
    m = v75;
LABEL_123:
    v85 = (uint64_t *)*((_QWORD *)this + 9);
    if ((v73 & 1) == 0)
    {
      v86 = (_QWORD *)*((_QWORD *)this + 6);
      v87 = *((_QWORD *)this + 3);
      for (n = (uint64_t **)v86[35]; n; n = (uint64_t **)*n)
        (*(void (**)(uint64_t *, uint64_t))(*n[6] + 16))(n[6], v87);
      for (ii = (uint64_t **)v86[49]; ii; ii = (uint64_t **)*ii)
        (*(void (**)(uint64_t *, uint64_t))(*ii[3] + 16))(ii[3], v87);
      for (jj = v86[56]; jj; jj = *(_QWORD *)jj)
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(jj + 24) + 16))(*(_QWORD *)(jj + 24), v87);
      for (kk = (uint64_t **)v86[42]; kk; kk = (uint64_t **)*kk)
        (*(void (**)(uint64_t *, uint64_t))(*kk[2] + 16))(kk[2], v87);
      v91 = m;
      if (v85 != m)
      {
        v92 = m;
        v91 = v85;
        do
        {
          while (1)
          {
            v93 = *v91;
            if (*(_QWORD *)(*v91 + 24))
              break;
            v94 = v92 - 2;
            do
            {
              if (v94 == v91)
                goto LABEL_141;
              v92 = v94;
              v96 = *v94;
              v94 -= 2;
              v95 = v96;
            }
            while (!*(_QWORD *)(v96 + 24));
            *v91 = v95;
            v94[2] = v93;
            v97 = v91[1];
            v91[1] = v94[3];
            v94[3] = v97;
            v91 += 2;
            if (v91 == v92)
              goto LABEL_141;
          }
          v91 += 2;
        }
        while (v91 != v92);
        v91 = v92;
      }
LABEL_141:
      v98 = 126 - 2 * __clz(((char *)v91 - (char *)v85) >> 4);
      if (v91 == v85)
        v99 = 0;
      else
        v99 = v98;
      std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *,false>(v85, v91, v99, 1);
    }
    v274 = 0u;
    v275 = 0u;
    LODWORD(v276) = 1065353216;
    if (v85 == m)
    {
      v109 = (unint64_t *)m;
      goto LABEL_232;
    }
    v100 = (md::Label **)v85;
    while (1)
    {
      v101 = *v100;
      if (!*((_BYTE *)*v100 + 1290))
        goto LABEL_148;
      v102 = *((_QWORD *)v101 + 3);
      if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)v101 + 1) + 264))(*((_QWORD *)v101 + 1)) == 26
        || (*(unsigned int (**)(_QWORD))(**((_QWORD **)*v100 + 1) + 264))(*((_QWORD *)*v100 + 1)) == 24
        || (jj = (uint64_t)*v100,
            (*(unsigned int (**)(_QWORD))(**((_QWORD **)*v100 + 1) + 264))(*((_QWORD *)*v100 + 1)) == 25))
      {
        v103 = 1;
        if (!v102)
          goto LABEL_167;
      }
      else
      {
        v103 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(jj + 8) + 264))(*(_QWORD *)(jj + 8)) == 27;
        if (!v102)
        {
LABEL_167:
          v105 = 0;
LABEL_168:
          if (!md::ARWalkingLabeler::doesStagingLabelIntersectWithWorld(this, *v100, v103, v105))
            goto LABEL_169;
          goto LABEL_148;
        }
      }
      if (((*(unsigned int (**)(_QWORD))(**((_QWORD **)*v100 + 1) + 264))(*((_QWORD *)*v100 + 1)) == 26
         || (*(unsigned int (**)(_QWORD))(**((_QWORD **)*v100 + 1) + 264))(*((_QWORD *)*v100 + 1)) == 24)
        && (v104 = (*(uint64_t (**)(uint64_t, md::Label *))(*(_QWORD *)v102 + 56))(v102, *v100)) != 0)
      {
        if (*(_BYTE *)(v104 + 1290))
          v105 = (md::Label *)v104;
        else
          v105 = 0;
        if ((v73 & 1) != 0)
          goto LABEL_168;
      }
      else
      {
        v105 = 0;
        if ((v73 & 1) != 0)
          goto LABEL_168;
      }
      if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v102 + 24))(v102, *((unsigned __int8 *)*v100 + 36)) & 1) != 0)
      {
        v273 = 0;
        LOWORD(v272) = 257;
        md::Label::setCollisionResult((uint64_t)*v100, (uint64_t)&v272);
      }
      else if (!md::ARWalkingLabeler::doesStagingLabelIntersectWithWorld(this, *v100, v103, v105))
      {
        (*(void (**)(uint64_t, md::Label *, _QWORD))(*(_QWORD *)v102 + 32))(v102, *v100, 0);
LABEL_169:
        std::__hash_table<md::Label *,std::hash<md::Label *>,std::equal_to<md::Label *>,std::allocator<md::Label *>>::__emplace_unique_key_args<md::Label *,md::Label *>((float *)&v274, (unint64_t)*v100, (uint64_t)*v100);
      }
LABEL_148:
      v100 += 2;
      if (v100 == (md::Label **)m)
      {
        v106 = *((_QWORD *)&v274 + 1);
        v107 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v274 + 8));
        v107.i16[0] = vaddlv_u8(v107);
        v108 = *((_QWORD *)&v274 + 1) - 1;
        v109 = (unint64_t *)m;
        v110 = (unint64_t *)v85;
        while (1)
        {
          if (v106)
          {
            while (1)
            {
              v112 = *v110;
              v113 = HIDWORD(*v110);
              v114 = 0x9DDFEA08EB382D69 * ((8 * *v110 + 8) ^ v113);
              v115 = 0x9DDFEA08EB382D69
                   * ((0x9DDFEA08EB382D69 * (v113 ^ (v114 >> 47) ^ v114)) ^ ((0x9DDFEA08EB382D69
                                                                              * (v113 ^ (v114 >> 47) ^ v114)) >> 47));
              if (v107.u32[0] > 1uLL)
              {
                v116 = v115;
                if (v115 >= v106)
                  v116 = v115 % v106;
              }
              else
              {
                v116 = v115 & v108;
              }
              v117 = *(_QWORD **)(v274 + 8 * v116);
              if (!v117)
                goto LABEL_196;
              v118 = (_QWORD *)*v117;
              if (!v118)
                goto LABEL_196;
              if (v107.u32[0] < 2uLL)
              {
                while (1)
                {
                  v119 = v118[1];
                  if (v115 == v119)
                  {
                    if (v118[2] == v112)
                      goto LABEL_193;
                  }
                  else if ((v119 & v108) != v116)
                  {
                    goto LABEL_196;
                  }
                  v118 = (_QWORD *)*v118;
                  if (!v118)
                    goto LABEL_196;
                }
              }
              while (1)
              {
                v120 = v118[1];
                if (v115 == v120)
                  break;
                if (v120 >= v106)
                  v120 %= v106;
                if (v120 != v116)
                  goto LABEL_196;
LABEL_187:
                v118 = (_QWORD *)*v118;
                if (!v118)
                  goto LABEL_196;
              }
              if (v118[2] != v112)
                goto LABEL_187;
LABEL_193:
              v110 += 2;
              if (v110 == v109)
              {
LABEL_221:
                if (v109 != (unint64_t *)m)
                {
LABEL_222:
                  v132 = v109;
LABEL_223:
                  while (1)
                  {
                    v133 = *v132;
                    if (*(_BYTE *)(*v132 + 821) == 21)
                      break;
                    v132 += 2;
                    if (v132 == (unint64_t *)m)
                      goto LABEL_232;
                  }
                  v134 = m - 2;
                  while (v134 != (uint64_t *)v132)
                  {
                    m = v134;
                    v136 = *v134;
                    v134 -= 2;
                    v135 = v136;
                    if (*(_BYTE *)(v136 + 821) != 21)
                    {
                      *v132 = v135;
                      v134[2] = v133;
                      v137 = v132[1];
                      v132[1] = v134[3];
                      v134[3] = v137;
                      v132 += 2;
                      if (v132 != (unint64_t *)m)
                        goto LABEL_223;
                      break;
                    }
                  }
                  m = (uint64_t *)v132;
                }
LABEL_232:
                v138 = (_QWORD *)v275;
                if ((_QWORD)v275)
                {
                  do
                  {
                    v139 = (_QWORD *)*v138;
                    operator delete(v138);
                    v138 = v139;
                  }
                  while (v139);
                }
                v140 = (void *)v274;
                *(_QWORD *)&v274 = 0;
                if (v140)
                  operator delete(v140);
                +[VKDebugSettings sharedSettings](VKDebugSettings, "sharedSettings");
                v141 = (void *)objc_claimAutoreleasedReturnValue();
                v142 = objc_msgSend(v141, "arForceOccludedStyling");

                if (*((unsigned __int8 *)this + 1640) != v142)
                {
                  *((_BYTE *)this + 1640) = v142;
                  v162 = (unint64_t *)*((_QWORD *)this + 9);
                  jj = *((_QWORD *)this + 10);
                  while (v162 != (unint64_t *)jj)
                  {
                    v163 = *v162;
                    v164 = (std::__shared_weak_count *)v162[1];
                    v265[6] = *v162;
                    v265[7] = (unint64_t)v164;
                    if (v164)
                    {
                      p_shared_owners = (unint64_t *)&v164->__shared_owners_;
                      do
                        v166 = __ldxr(p_shared_owners);
                      while (__stxr(v166 + 1, p_shared_owners));
                    }
                    v167 = *((_BYTE *)this + 1640);
                    v168 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v163 + 8) + 264))(*(_QWORD *)(v163 + 8));
                    v169 = *(_BYTE **)(v163 + 8);
                    if (v168 == 24)
                    {
                      v169[809] = v167;
                    }
                    else
                    {
                      v170 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v169 + 264))(v169);
                      v171 = *(_BYTE **)(v163 + 8);
                      if (v170 == 26)
                      {
                        v171[418] = v167;
                      }
                      else if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v171 + 264))(v171) == 25
                             || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v163 + 8) + 264))(*(_QWORD *)(v163 + 8)) == 27)
                      {
                        *(_BYTE *)(*(_QWORD *)(v163 + 8) + 720) = v167;
                      }
                    }
                    if (v164)
                    {
                      v172 = (unint64_t *)&v164->__shared_owners_;
                      do
                        v173 = __ldaxr(v172);
                      while (__stlxr(v173 - 1, v172));
                      if (!v173)
                      {
                        ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                        std::__shared_weak_count::__release_weak(v164);
                      }
                    }
                    v162 += 2;
                  }
                }
                if ((char *)v109 - (char *)v85 > 15 || (char *)m - (char *)v109 < 16)
                {
                  v174 = *((_QWORD *)this + 209);
                  if (!v174)
                  {
                    v184 = v109;
                    v109 = (unint64_t *)v85;
                    v176 = &off_1E426D000;
                    if (v184 == (unint64_t *)m)
                      goto LABEL_350;
                    goto LABEL_348;
                  }
                  v175 = (std::__shared_weak_count *)*((_QWORD *)this + 210);
                  v265[2] = *((_QWORD *)this + 209);
                  v265[3] = (unint64_t)v175;
                  v176 = &off_1E426D000;
                  if (v175)
                  {
                    v177 = (unint64_t *)&v175->__shared_owners_;
                    do
                      v178 = __ldxr(v177);
                    while (__stxr(v178 + 1, v177));
                  }
                  jj = *((unsigned __int8 *)this + 1640);
                  v179 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v174 + 8) + 264))(*(_QWORD *)(v174 + 8));
                  v180 = *(_BYTE **)(v174 + 8);
                  if (v179 == 24)
                  {
                    v180[809] = jj;
                  }
                  else
                  {
                    v190 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v180 + 264))(v180);
                    v191 = *(_BYTE **)(v174 + 8);
                    if (v190 == 26)
                    {
                      v191[418] = jj;
                    }
                    else if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v191 + 264))(v191) == 25
                           || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v174 + 8) + 264))(*(_QWORD *)(v174 + 8)) == 27)
                    {
                      *(_BYTE *)(*(_QWORD *)(v174 + 8) + 720) = jj;
                    }
                  }
                  if (v175)
                  {
                    v201 = (unint64_t *)&v175->__shared_owners_;
                    do
                      v202 = __ldaxr(v201);
                    while (__stlxr(v202 - 1, v201));
                    v184 = v109;
                    v109 = (unint64_t *)v85;
                    if (v202)
                      goto LABEL_336;
                    goto LABEL_345;
                  }
                  v184 = v109;
                }
                else
                {
                  v143 = v109;
                  if (v109 != (unint64_t *)m)
                  {
                    v144 = (uint64_t *)(v109 + 2);
                    v143 = v109;
                    if (v109 + 2 != (unint64_t *)m)
                    {
                      v145 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
                      v145.i16[0] = vaddlv_u8(v145);
                      v146 = (unint64_t)__p[1] - 1;
                      v143 = v109;
                      do
                      {
                        if (__p[1])
                        {
                          v147 = *v144;
                          v148 = HIDWORD(*v144);
                          v149 = 0x9DDFEA08EB382D69 * ((8 * *v144 + 8) ^ v148);
                          v150 = 0x9DDFEA08EB382D69
                               * ((0x9DDFEA08EB382D69 * (v148 ^ (v149 >> 47) ^ v149)) ^ ((0x9DDFEA08EB382D69
                                                                                          * (v148 ^ (v149 >> 47) ^ v149)) >> 47));
                          if (v145.u32[0] > 1uLL)
                          {
                            v151 = v150;
                            if ((void *)v150 >= __p[1])
                              v151 = v150 % (unint64_t)__p[1];
                          }
                          else
                          {
                            v151 = v150 & v146;
                          }
                          v152 = (double **)*((_QWORD *)__p[0] + v151);
                          if (v152)
                          {
                            v153 = *v152;
                            if (v153)
                            {
                              if (v145.u32[0] < 2uLL)
                              {
                                while (1)
                                {
                                  v154 = *((_QWORD *)v153 + 1);
                                  if (v154 == v150)
                                  {
                                    if (*((_QWORD *)v153 + 2) == v147)
                                      goto LABEL_264;
                                  }
                                  else if ((v154 & v146) != v151)
                                  {
                                    goto LABEL_242;
                                  }
                                  v153 = *(double **)v153;
                                  if (!v153)
                                    goto LABEL_242;
                                }
                              }
                              do
                              {
                                v155 = *((_QWORD *)v153 + 1);
                                if (v155 == v150)
                                {
                                  if (*((_QWORD *)v153 + 2) == v147)
                                  {
LABEL_264:
                                    v156 = *v143;
                                    v157 = HIDWORD(*v143);
                                    v158 = 0x9DDFEA08EB382D69 * ((8 * *v143 + 8) ^ v157);
                                    v159 = 0x9DDFEA08EB382D69
                                         * ((0x9DDFEA08EB382D69 * (v157 ^ (v158 >> 47) ^ v158)) ^ ((0x9DDFEA08EB382D69 * (v157 ^ (v158 >> 47) ^ v158)) >> 47));
                                    if (v145.u32[0] >= 2uLL)
                                    {
                                      v161 = v159;
                                      if ((void *)v159 >= __p[1])
                                        v161 = v159 % (unint64_t)__p[1];
                                      v160 = (double *)*((_QWORD *)__p[0] + v161);
                                      do
                                      {
                                        do
                                          v160 = *(double **)v160;
                                        while (*((_QWORD *)v160 + 1) != v159);
                                      }
                                      while (*((_QWORD *)v160 + 2) != v156);
                                    }
                                    else
                                    {
                                      v160 = (double *)*((_QWORD *)__p[0] + (v159 & v146));
                                      do
                                      {
                                        do
                                          v160 = *(double **)v160;
                                        while (*((_QWORD *)v160 + 1) != v159);
                                      }
                                      while (*((_QWORD *)v160 + 2) != v156);
                                    }
                                    if (v153[3] < v160[3])
                                      v143 = (unint64_t *)v144;
                                    break;
                                  }
                                }
                                else
                                {
                                  if ((void *)v155 >= __p[1])
                                    v155 %= (unint64_t)__p[1];
                                  if (v155 != v151)
                                    break;
                                }
                                v153 = *(double **)v153;
                              }
                              while (v153);
                            }
                          }
                        }
LABEL_242:
                        v144 += 2;
                      }
                      while (v144 != m);
                    }
                  }
                  v181 = *v143;
                  v182 = *(_QWORD **)(*v143 + 24);
                  if (v182)
                  {
                    v176 = &off_1E426D000;
                    if (((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v181 + 8) + 264))(*(_QWORD *)(v181 + 8)) == 26
                       || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v181 + 8) + 264))(*(_QWORD *)(v181 + 8)) == 24)
                      && !std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v182 + 26, v181))
                    {
                      v183 = (*(uint64_t (**)(_QWORD *, unint64_t))(*v182 + 56))(v182, v181);
                      if (v183)
                        v181 = v183;
                    }
                  }
                  else
                  {
                    v176 = &off_1E426D000;
                  }
                  v184 = v109;
                  if (v109 != (unint64_t *)m)
                  {
                    v184 = (unint64_t *)m;
                    v185 = v109;
                    while (1)
                    {
                      v186 = *v185;
                      if (*v185 != v181)
                        break;
LABEL_313:
                      v185 += 2;
                      if (v185 == v184)
                        goto LABEL_322;
                    }
                    v187 = v184 - 2;
                    while (v187 != v185)
                    {
                      v184 = v187;
                      v188 = *v187;
                      v187 -= 2;
                      if (v188 == v181)
                      {
                        *v185 = v181;
                        v187[2] = v186;
                        v189 = v185[1];
                        v185[1] = v187[3];
                        v187[3] = v189;
                        goto LABEL_313;
                      }
                    }
                    v184 = v185;
                  }
LABEL_322:
                  v192 = *v109;
                  v175 = (std::__shared_weak_count *)v109[1];
                  v265[4] = *v109;
                  v265[5] = (unint64_t)v175;
                  if (v175)
                  {
                    v193 = (unint64_t *)&v175->__shared_owners_;
                    do
                      v194 = __ldxr(v193);
                    while (__stxr(v194 + 1, v193));
                  }
                  v195 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v192 + 8) + 264))(*(_QWORD *)(v192 + 8));
                  v196 = *(_BYTE **)(v192 + 8);
                  if (v195 == 24)
                  {
                    v196[809] = 1;
                  }
                  else
                  {
                    v197 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v196 + 264))(v196);
                    v198 = *(_BYTE **)(v192 + 8);
                    if (v197 == 26)
                    {
                      v198[418] = 1;
                    }
                    else if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v198 + 264))(v198) == 25
                           || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v192 + 8) + 264))(*(_QWORD *)(v192 + 8)) == 27)
                    {
                      *(_BYTE *)(*(_QWORD *)(v192 + 8) + 720) = 1;
                    }
                  }
                  if (!v175)
                    goto LABEL_336;
                  v199 = (unint64_t *)&v175->__shared_owners_;
                  do
                    v200 = __ldaxr(v199);
                  while (__stlxr(v200 - 1, v199));
                  v85 = (uint64_t *)v109;
                  if (v200)
                  {
LABEL_336:
                    if (v184 == (unint64_t *)m)
                    {
LABEL_350:
                      v204 = 126 - 2 * __clz(((char *)v184 - (char *)v109) >> 4);
                      *(_QWORD *)&v274 = *((_QWORD *)this + 3) + 3560;
                      *((_QWORD *)&v274 + 1) = __p;
                      if (v184 == v109)
                        v205 = 0;
                      else
                        v205 = v204;
                      std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *,false>(v109, v184, (uint64_t)&v274, v205, 1);
                      if ((char *)v184 - (char *)v109 > 15)
                      {
                        v206 = (std::__shared_weak_count *)v109[1];
                        v272 = *v109;
                        v273 = v206;
                        if (v206)
                        {
                          v260 = v206;
                          v207 = (unint64_t *)&v206->__shared_owners_;
                          do
                            v208 = __ldxr(v207);
                          while (__stxr(v208 + 1, v207));
                        }
                        else
                        {
                          v260 = 0;
                        }
                      }
                      else
                      {
                        v260 = 0;
                        v272 = 0;
                        v273 = 0;
                      }
                      md::ARWalkingLabeler::updateStagingActiveLabel((uint64_t)this, &v272);
                      objc_msgSend(v176[132], "sharedSettings");
                      v209 = (void *)objc_claimAutoreleasedReturnValue();
                      v210 = objc_msgSend(v209, "arAlwaysShowOneContinueLabel");

                      v265[1] = 0;
                      LOWORD(v265[0]) = 0;
                      if (v184 == v109)
                      {
LABEL_361:
                        *((_QWORD *)this + 206) = v261[17];
                        *((_QWORD *)this + 207) = v261[18];
                        *((_QWORD *)this + 208) = v261[19];
                        *((_BYTE *)this + 1712) = 0;
                        if (v260)
                        {
                          v211 = (unint64_t *)&v260->__shared_owners_;
                          do
                            v212 = __ldaxr(v211);
                          while (__stlxr(v212 - 1, v211));
                          if (!v212)
                          {
                            ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
                            std::__shared_weak_count::__release_weak(v260);
                          }
                        }
                        v213 = v270[0];
                        if (v270[0])
                        {
                          do
                          {
                            v214 = (_QWORD *)*v213;
                            operator delete(v213);
                            v213 = v214;
                          }
                          while (v214);
                        }
                        v215 = __p[0];
                        __p[0] = 0;
                        if (v215)
                          operator delete(v215);
                        return;
                      }
                      while (2)
                      {
                        v216 = *v109;
                        if (!v263 && v216 != *((_QWORD *)this + 209))
                        {
                          if ((v210 & 1) != 0 && *(_BYTE *)(v216 + 1211) == 26)
                            goto LABEL_375;
                          md::Label::updateStateMachineForStaging(*v109, 2, 32);
LABEL_372:
                          v109 += 2;
                          if (v109 == v184)
                            goto LABEL_361;
                          continue;
                        }
                        break;
                      }
                      if (v216)
                      {
LABEL_375:
                        v217 = *(_QWORD *)(*((_QWORD *)this + 3) + 432);
                        v218 = *(float *)(v216 + 780);
                        if (*(double *)(v217 + 272) <= v218 && *(double *)(v217 + 280) >= v218)
                        {
                          v221 = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v216 + 40))(*v109, v217 + 736);
                          v216 = *v109;
                          v220 = *(int8x8_t *)((char *)this + 1896);
                          if (v220)
                            goto LABEL_387;
                          goto LABEL_406;
                        }
                      }
                      v221 = 0;
                      v220 = *(int8x8_t *)((char *)this + 1896);
                      if (v220)
                      {
LABEL_387:
                        v222 = 0x9DDFEA08EB382D69 * (((8 * v216) + 8) ^ HIDWORD(v216));
                        v223 = 0x9DDFEA08EB382D69 * (HIDWORD(v216) ^ (v222 >> 47) ^ v222);
                        v224 = 0x9DDFEA08EB382D69 * (v223 ^ (v223 >> 47));
                        v225 = (uint8x8_t)vcnt_s8(v220);
                        v225.i16[0] = vaddlv_u8(v225);
                        if (v225.u32[0] > 1uLL)
                        {
                          v226 = v224;
                          v227 = (_QWORD *)((char *)this + 1888);
                          if (v224 >= *(_QWORD *)&v220)
                            v226 = v224 % *(_QWORD *)&v220;
                        }
                        else
                        {
                          v226 = v224 & (*(_QWORD *)&v220 - 1);
                          v227 = (_QWORD *)((char *)this + 1888);
                        }
                        v228 = *(_QWORD **)(*v227 + 8 * v226);
                        if (v228)
                        {
                          v229 = (_QWORD *)*v228;
                          if (v229)
                          {
                            if (v225.u32[0] < 2uLL)
                            {
                              v230 = *(_QWORD *)&v220 - 1;
                              while (1)
                              {
                                v232 = v229[1];
                                if (v232 == v224)
                                {
                                  if (v229[2] == v216)
                                    goto LABEL_408;
                                }
                                else if ((v232 & v230) != v226)
                                {
                                  goto LABEL_406;
                                }
                                v229 = (_QWORD *)*v229;
                                if (!v229)
                                  goto LABEL_406;
                              }
                            }
                            do
                            {
                              v231 = v229[1];
                              if (v231 == v224)
                              {
                                if (v229[2] == v216)
                                  goto LABEL_408;
                              }
                              else
                              {
                                if (v231 >= *(_QWORD *)&v220)
                                  v231 %= *(_QWORD *)&v220;
                                if (v231 != v226)
                                  break;
                              }
                              v229 = (_QWORD *)*v229;
                            }
                            while (v229);
                          }
                        }
                      }
LABEL_406:
                      if (v221)
                      {
                        *(_DWORD *)(v216 + 827) = 16843009;
                        std::__hash_table<md::Label *,std::hash<md::Label *>,std::equal_to<md::Label *>,std::allocator<md::Label *>>::__emplace_unique_key_args<md::Label *,md::Label *>((float *)this + 472, v216, v216);
                        md::LabelLayoutContext::coordinateEyePos((md::LabelLayoutContext *)&v274, *(_QWORD *)(*((_QWORD *)this + 3) + 432));
                        v233 = *v109;
                        v234 = *(float *)(*v109 + 780) / *(double *)(*v109 + 224);
                        *((double *)&v275 + 1) = *(float *)(*v109 + 764);
                        v276 = v234;
                        v264 = v233;
                        v235 = std::__hash_table<std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>,std::__unordered_map_hasher<md::Label *,std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>,std::hash<md::Label *>,std::equal_to<md::Label *>,true>,std::__unordered_map_equal<md::Label *,std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>,std::equal_to<md::Label *>,std::hash<md::Label *>,true>,std::allocator<std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>>>::__emplace_unique_key_args<md::Label *,std::piecewise_construct_t const&,std::tuple<md::Label *&&>,std::tuple<>>((float *)this + 482, v233, &v264);
                        *(_OWORD *)(v235 + 24) = v274;
                        *(_OWORD *)(v235 + 40) = v275;
                        *((double *)v235 + 7) = v276;
                        if (!*((_BYTE *)this + 1336)
                          && *(_QWORD *)(*v109 + 24)
                          && ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*v109 + 8) + 264))(*(_QWORD *)(*v109 + 8)) == 24
                           || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*v109 + 8) + 264))(*(_QWORD *)(*v109 + 8)) == 26))
                        {
                          v236 = *(_QWORD *)(*v109 + 24);
                          v237 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>((_QWORD *)(v236 + 168), *v109);
                          if (v237)
                          {
                            v238 = v237;
                            v262 = (_QWORD *)(v236 + 88);
                            v239 = v237[3];
                            v240 = *(_QWORD *)(v236 + 96);
                            if (v240)
                            {
                              v241 = (uint8x8_t)vcnt_s8((int8x8_t)v240);
                              v241.i16[0] = vaddlv_u8(v241);
                              if (v241.u32[0] > 1uLL)
                              {
                                jj = v237[3];
                                if (v239 >= v240)
                                  jj = v239 % v240;
                              }
                              else
                              {
                                jj = (v240 - 1) & v239;
                              }
                              v242 = *(_QWORD **)(*v262 + 8 * jj);
                              if (v242)
                              {
                                v243 = (_QWORD *)*v242;
                                if (v243)
                                {
                                  if (v241.u32[0] < 2uLL)
                                  {
                                    while (1)
                                    {
                                      v245 = v243[1];
                                      if (v245 == v239)
                                      {
                                        if (v243[2] == v239)
                                          goto LABEL_408;
                                      }
                                      else if ((v245 & (v240 - 1)) != jj)
                                      {
                                        goto LABEL_433;
                                      }
                                      v243 = (_QWORD *)*v243;
                                      if (!v243)
                                        goto LABEL_433;
                                    }
                                  }
                                  do
                                  {
                                    v244 = v243[1];
                                    if (v244 == v239)
                                    {
                                      if (v243[2] == v239)
                                        goto LABEL_408;
                                    }
                                    else
                                    {
                                      if (v244 >= v240)
                                        v244 %= v240;
                                      if (v244 != jj)
                                        break;
                                    }
                                    v243 = (_QWORD *)*v243;
                                  }
                                  while (v243);
                                }
                              }
                            }
LABEL_433:
                            v246 = operator new(0x18uLL);
                            *v246 = 0;
                            v246[1] = v239;
                            v246[2] = v238[3];
                            v247 = (float)(unint64_t)(*(_QWORD *)(v236 + 112) + 1);
                            v248 = *(float *)(v236 + 120);
                            if (v240 && (float)(v248 * (float)v240) >= v247)
                            {
                              v249 = (uint64_t *)(v236 + 88);
                            }
                            else
                            {
                              v250 = (v240 & (v240 - 1)) != 0;
                              if (v240 < 3)
                                v250 = 1;
                              v251 = v250 | (2 * v240);
                              v252 = vcvtps_u32_f32(v247 / v248);
                              if (v251 <= v252)
                                prime = v252;
                              else
                                prime = v251;
                              if (prime == 1)
                              {
                                prime = 2;
                              }
                              else if ((prime & (prime - 1)) != 0)
                              {
                                prime = std::__next_prime(prime);
                                v240 = *(_QWORD *)(v236 + 96);
                              }
                              if (prime > v240)
                                goto LABEL_446;
                              if (prime < v240)
                              {
                                v254 = vcvtps_u32_f32((float)*(unint64_t *)(v236 + 112) / *(float *)(v236 + 120));
                                if (v240 < 3
                                  || (v255 = (uint8x8_t)vcnt_s8((int8x8_t)v240),
                                      v255.i16[0] = vaddlv_u8(v255),
                                      v255.u32[0] > 1uLL))
                                {
                                  v254 = std::__next_prime(v254);
                                }
                                else
                                {
                                  v256 = 1 << -(char)__clz(v254 - 1);
                                  if (v254 >= 2)
                                    v254 = v256;
                                }
                                if (prime <= v254)
                                  prime = v254;
                                if (prime < v240)
LABEL_446:
                                  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v262, prime);
                              }
                              v240 = *(_QWORD *)(v236 + 96);
                              if ((v240 & (v240 - 1)) != 0)
                              {
                                v249 = (uint64_t *)(v236 + 88);
                                if (v239 >= v240)
                                  jj = v239 % v240;
                                else
                                  jj = v239;
                              }
                              else
                              {
                                jj = (v240 - 1) & v239;
                                v249 = (uint64_t *)(v236 + 88);
                              }
                            }
                            v257 = *v249;
                            v258 = *(_QWORD **)(*v249 + 8 * jj);
                            if (v258)
                            {
                              *v246 = *v258;
                              goto LABEL_470;
                            }
                            *v246 = *(_QWORD *)(v236 + 104);
                            *(_QWORD *)(v236 + 104) = v246;
                            *(_QWORD *)(v257 + 8 * jj) = v236 + 104;
                            if (*v246)
                            {
                              v259 = *(_QWORD *)(*v246 + 8);
                              if ((v240 & (v240 - 1)) != 0)
                              {
                                if (v259 >= v240)
                                  v259 %= v240;
                              }
                              else
                              {
                                v259 &= v240 - 1;
                              }
                              v258 = (_QWORD *)(*v249 + 8 * v259);
LABEL_470:
                              *v258 = v246;
                            }
                            ++*(_QWORD *)(v236 + 112);
                          }
                        }
                      }
LABEL_408:
                      md::Label::setCollisionResult(*v109, (uint64_t)v265);
                      v210 &= *(_BYTE *)(*v109 + 1211) != 26;
                      goto LABEL_372;
                    }
LABEL_348:
                    v203 = (uint64_t *)v184;
                    do
                    {
                      md::Label::updateStateMachineForStaging(*v203, 2, 22);
                      v203 += 2;
                    }
                    while (v203 != m);
                    goto LABEL_350;
                  }
LABEL_345:
                  ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                  std::__shared_weak_count::__release_weak(v175);
                }
                v109 = (unint64_t *)v85;
                if (v184 == (unint64_t *)m)
                  goto LABEL_350;
                goto LABEL_348;
              }
            }
          }
          v112 = *v110;
LABEL_196:
          v121 = v109 - 2;
          if (v110 == v109 - 2)
          {
            v109 = v110;
            if (v110 != (unint64_t *)m)
              goto LABEL_222;
            goto LABEL_232;
          }
          while (1)
          {
            v122 = v109;
            v109 = v121;
            if (v106)
            {
              v123 = *(v122 - 2);
              v124 = 0x9DDFEA08EB382D69 * (((8 * v123) + 8) ^ HIDWORD(v123));
              v125 = 0x9DDFEA08EB382D69 * (HIDWORD(v123) ^ (v124 >> 47) ^ v124);
              v126 = 0x9DDFEA08EB382D69 * (v125 ^ (v125 >> 47));
              if (v107.u32[0] > 1uLL)
              {
                v127 = v126;
                if (v126 >= v106)
                  v127 = v126 % v106;
              }
              else
              {
                v127 = v126 & v108;
              }
              v128 = *(_QWORD **)(v274 + 8 * v127);
              if (v128)
              {
                v129 = (_QWORD *)*v128;
                if (v129)
                  break;
              }
            }
LABEL_198:
            v121 = v109 - 2;
            if (v110 == v109 - 2)
            {
              v109 = v110;
              goto LABEL_221;
            }
          }
          if (v107.u32[0] < 2uLL)
          {
            while (1)
            {
              v130 = v129[1];
              if (v126 == v130)
              {
                if (v129[2] == v123)
                  goto LABEL_171;
              }
              else if ((v130 & v108) != v127)
              {
                goto LABEL_198;
              }
              v129 = (_QWORD *)*v129;
              if (!v129)
                goto LABEL_198;
            }
          }
          while (1)
          {
            v131 = v129[1];
            if (v126 == v131)
              break;
            if (v131 >= v106)
              v131 %= v106;
            if (v131 != v127)
              goto LABEL_198;
LABEL_214:
            v129 = (_QWORD *)*v129;
            if (!v129)
              goto LABEL_198;
          }
          if (v129[2] != v123)
            goto LABEL_214;
LABEL_171:
          *v110 = v123;
          *v109 = v112;
          v111 = v110[1];
          v110[1] = *(v122 - 1);
          *(v122 - 1) = v111;
          v110 += 2;
          if (v110 == v109)
            goto LABEL_221;
        }
      }
    }
  }
  if (*((_QWORD *)this + 239))
  {
    v46 = (_QWORD *)*((_QWORD *)this + 238);
    if (v46)
    {
      do
      {
        v47 = (_QWORD *)*v46;
        operator delete(v46);
        v46 = v47;
      }
      while (v47);
    }
    *((_QWORD *)this + 238) = 0;
    v48 = *((_QWORD *)this + 237);
    if (v48)
    {
      for (mm = 0; mm != v48; ++mm)
        *(_QWORD *)(*((_QWORD *)this + 236) + 8 * mm) = 0;
    }
    *((_QWORD *)this + 239) = 0;
  }
  if (*((_QWORD *)this + 244))
  {
    v50 = (_QWORD *)*((_QWORD *)this + 243);
    if (v50)
    {
      do
      {
        v51 = (_QWORD *)*v50;
        operator delete(v50);
        v50 = v51;
      }
      while (v51);
    }
    *((_QWORD *)this + 243) = 0;
    v52 = *((_QWORD *)this + 242);
    if (v52)
    {
      for (nn = 0; nn != v52; ++nn)
        *(_QWORD *)(*((_QWORD *)this + 241) + 8 * nn) = 0;
    }
    *((_QWORD *)this + 244) = 0;
  }
  v54 = (uint64_t *)*((_QWORD *)this + 9);
  v55 = (uint64_t *)*((_QWORD *)this + 10);
  while (v54 != v55)
  {
    v56 = *v54;
    v54 += 2;
    md::Label::updateStateMachineForStaging(v56, 2, 29);
  }
  v274 = 0uLL;
  md::ARWalkingLabeler::updateStagingActiveLabel((uint64_t)this, &v274);
  *((_BYTE *)this + 1712) = 0;
}

void sub_19FEE9E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void md::ARWalkingLabeler::setRouteContext(md::ARWalkingLabeler *this, VKRouteContext *a2)
{
  VKRouteContext *v3;
  VKRouteContext *v4;
  void *v5;
  VKRouteContext *v6;

  v3 = a2;
  v6 = v3;
  if (v3)
  {
    v4 = v3;
    v3 = v6;
  }
  v5 = (void *)*((_QWORD *)this + 256);
  *((_QWORD *)this + 256) = v3;

}

void md::ARWalkingLabeler::setARWalkingFeatures(md::ARWalkingSupport **this, VKARWalkingFeatureSet *a2)
{
  md::ARWalkingSupport::setARWalkingFeatures(this[55], a2, 0);
}

uint64_t md::ARWalkingLabeler::arWalkingManeuverFeatures(md::ARWalkingLabeler *this)
{
  return *((_QWORD *)this + 55) + 520;
}

uint64_t md::ARWalkingLabeler::arWalkingContinueFeatures(md::ARWalkingLabeler *this)
{
  return *((_QWORD *)this + 55) + 552;
}

uint64_t md::ARWalkingLabeler::arWalkingArrivalFeatures(md::ARWalkingLabeler *this)
{
  return *((_QWORD *)this + 55) + 584;
}

uint64_t md::ARWalkingLabeler::arWalkingStorefrontFeatures(md::ARWalkingLabeler *this)
{
  return *((_QWORD *)this + 55) + 616;
}

uint64_t md::ARWalkingLabeler::arBackgroundTexture(md::ARWalkingLabeler *this)
{
  return *((_QWORD *)this + 59);
}

uint64_t `non-virtual thunk to'md::ARWalkingLabeler::externalMeshModerator(md::ARWalkingLabeler *this)
{
  return *((_QWORD *)this + 54);
}

void `non-virtual thunk to'md::ARWalkingLabeler::setRouteContext(md::ARWalkingLabeler *this, VKRouteContext *a2)
{
  VKRouteContext *v3;
  VKRouteContext *v4;
  void *v5;
  VKRouteContext *v6;

  v3 = a2;
  v6 = v3;
  if (v3)
  {
    v4 = v3;
    v3 = v6;
  }
  v5 = (void *)*((_QWORD *)this + 207);
  *((_QWORD *)this + 207) = v3;

}

void `non-virtual thunk to'md::ARWalkingLabeler::setARWalkingFeatures(md::ARWalkingSupport **this, VKARWalkingFeatureSet *a2)
{
  md::ARWalkingSupport::setARWalkingFeatures(this[6], a2, 0);
}

uint64_t `non-virtual thunk to'md::ARWalkingLabeler::arWalkingManeuverFeatures(md::ARWalkingLabeler *this)
{
  return *((_QWORD *)this + 6) + 520;
}

uint64_t `non-virtual thunk to'md::ARWalkingLabeler::arWalkingContinueFeatures(md::ARWalkingLabeler *this)
{
  return *((_QWORD *)this + 6) + 552;
}

uint64_t `non-virtual thunk to'md::ARWalkingLabeler::arWalkingArrivalFeatures(md::ARWalkingLabeler *this)
{
  return *((_QWORD *)this + 6) + 584;
}

uint64_t `non-virtual thunk to'md::ARWalkingLabeler::arWalkingStorefrontFeatures(md::ARWalkingLabeler *this)
{
  return *((_QWORD *)this + 6) + 616;
}

uint64_t `non-virtual thunk to'md::ARWalkingLabeler::arBackgroundTexture(md::ARWalkingLabeler *this)
{
  return *((_QWORD *)this + 10);
}

void md::ARWalkingLabeler::updateStagingActiveLabel(uint64_t a1, _QWORD *a2)
{
  id *v4;
  id *v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::ios_base *v19;
  const char *v20;
  uint64_t v21;
  unsigned int v22;
  std::string *v23;
  size_t v24;
  std::string *v25;
  size_t v26;
  id v27;
  const char *v28;
  size_t v29;
  std::string *v30;
  size_t v31;
  id v32;
  const char *v33;
  size_t v34;
  size_t v35;
  void **v36;
  unint64_t v37;
  const void **v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  int v53;
  NSObject *v54;
  id v55;
  uint64_t v56;
  id v57;
  void *__dst[2];
  int64_t v59;
  std::string v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[3];
  uint64_t v64;
  unint64_t v65;
  void *__p[2];
  __int128 v67;
  int v68;
  uint64_t v69[19];
  uint8_t buf[4];
  void **v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  if (*a2)
  {
    v4 = *(id **)(*a2 + 8);
    if ((*((unsigned int (**)(id *))*v4 + 33))(v4) == 24)
    {
      v5 = v4 + 85;
LABEL_10:
      v6 = *v5;
      goto LABEL_12;
    }
    if ((*((unsigned int (**)(id *))*v4 + 33))(v4) == 26)
    {
      v5 = v4 + 25;
      goto LABEL_10;
    }
    if ((*((unsigned int (**)(id *))*v4 + 33))(v4) == 25)
    {
      v5 = v4 + 29;
      goto LABEL_10;
    }
    if ((*((unsigned int (**)(id *))*v4 + 33))(v4) == 27)
    {
      v5 = v4 + 88;
      goto LABEL_10;
    }
  }
  v6 = 0;
LABEL_12:
  v7 = *(_QWORD *)(a1 + 1672);
  if (v7 == *a2)
    goto LABEL_76;
  if (GEOGetVectorKitARWalkingLabelerLog(void)::onceToken != -1)
    dispatch_once(&GEOGetVectorKitARWalkingLabelerLog(void)::onceToken, &__block_literal_global_39065);
  v8 = (id)GEOGetVectorKitARWalkingLabelerLog(void)::log;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v54 = v8;
    v9 = *a2;
    v10 = *(_QWORD *)(a1 + 1672);
    v11 = *(id *)(a1 + 1696);
    v55 = v6;
    v57 = v11;
    if (v10)
    {
      v12 = *(_DWORD *)(v10 + 48);
      if (v9)
      {
LABEL_18:
        v13 = *(_DWORD *)(v9 + 48);
        goto LABEL_21;
      }
    }
    else
    {
      v12 = 0;
      if (v9)
        goto LABEL_18;
    }
    v13 = 0;
LABEL_21:
    v56 = v10;
    if (v10)
      v14 = *(unsigned __int8 *)(v10 + 821);
    else
      v14 = 38;
    v53 = v14;
    v15 = MEMORY[0x1E0DE4FE0];
    v16 = MEMORY[0x1E0DE4FE0] + 64;
    v17 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v18 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v69[0] = MEMORY[0x1E0DE4FE0] + 64;
    v61 = v17;
    *(uint64_t *)((char *)&v61 + *(_QWORD *)(v17 - 24)) = v18;
    v19 = (std::ios_base *)((char *)&v61 + *(_QWORD *)(v61 - 24));
    std::ios_base::init(v19, &v62);
    v19[1].__vftable = 0;
    v19[1].__fmtflags_ = -1;
    v61 = v15 + 24;
    v69[0] = v16;
    std::streambuf::basic_streambuf();
    v62 = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v67 = 0u;
    v68 = 16;
    if (v9)
      v20 = "Active did label change -";
    else
      v20 = "Active label cleared -";
    if (v9)
      v21 = 25;
    else
      v21 = 22;
    v8 = v54;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v61, (uint64_t)v20, v21);
    v22 = v12;
    if (v56
      && ((std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v61, (uint64_t)" reason:", 8),
           md::stringFromLabelOutcome((uint64_t)&v60, v53),
           (v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        ? (v23 = &v60)
        : (v23 = (std::string *)v60.__r_.__value_.__r.__words[0]),
          v24 = strlen((const char *)v23),
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v61, (uint64_t)v23, v24),
          SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0))
    {
      operator delete(v60.__r_.__value_.__l.__data_);
      if (!v9)
        goto LABEL_44;
    }
    else if (!v9)
    {
      goto LABEL_44;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v61, (uint64_t)" current:(", 10);
    if (v13)
    {
      std::to_string(&v60, v13);
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = &v60;
      else
        v25 = (std::string *)v60.__r_.__value_.__r.__words[0];
    }
    else
    {
      *((_BYTE *)&v60.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v60, "UNKNOWN");
      v25 = &v60;
    }
    v26 = strlen((const char *)v25);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v61, (uint64_t)v25, v26);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v61, (uint64_t)", ", 2);
    objc_msgSend(v55, "description");
    v27 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v28 = (const char *)objc_msgSend(v27, "UTF8String");
    v29 = strlen(v28);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v61, (uint64_t)v28, v29);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v61, (uint64_t)")", 1);

    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v60.__r_.__value_.__l.__data_);
      if (!v56)
        goto LABEL_53;
      goto LABEL_45;
    }
LABEL_44:
    if (!v56)
      goto LABEL_53;
LABEL_45:
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v61, (uint64_t)" previous:(", 11);
    if (v22)
    {
      std::to_string(&v60, v22);
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &v60;
      else
        v30 = (std::string *)v60.__r_.__value_.__r.__words[0];
    }
    else
    {
      *((_BYTE *)&v60.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v60, "UNKNOWN");
      v30 = &v60;
    }
    v31 = strlen((const char *)v30);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v61, (uint64_t)v30, v31);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v61, (uint64_t)", ", 2);
    objc_msgSend(v57, "description");
    v32 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v33 = (const char *)objc_msgSend(v32, "UTF8String");
    v34 = strlen(v33);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v61, (uint64_t)v33, v34);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v61, (uint64_t)")", 1);

    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
LABEL_53:
    if ((v68 & 0x10) != 0)
    {
      v37 = *((_QWORD *)&v67 + 1);
      if (*((_QWORD *)&v67 + 1) < v65)
      {
        *((_QWORD *)&v67 + 1) = v65;
        v37 = v65;
      }
      v38 = (const void **)&v64;
    }
    else
    {
      if ((v68 & 8) == 0)
      {
        v35 = 0;
        HIBYTE(v59) = 0;
        v36 = __dst;
        goto LABEL_68;
      }
      v38 = (const void **)v63;
      v37 = v63[2];
    }
    v39 = *v38;
    v35 = v37 - (_QWORD)*v38;
    if (v35 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v35 >= 0x17)
    {
      v40 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v35 | 7) != 0x17)
        v40 = v35 | 7;
      v41 = v40 + 1;
      v36 = (void **)operator new(v40 + 1);
      __dst[1] = (void *)v35;
      v59 = v41 | 0x8000000000000000;
      __dst[0] = v36;
    }
    else
    {
      HIBYTE(v59) = v37 - *(_BYTE *)v38;
      v36 = __dst;
      if (!v35)
        goto LABEL_68;
    }
    memmove(v36, v39, v35);
LABEL_68:
    *((_BYTE *)v36 + v35) = 0;
    v61 = *MEMORY[0x1E0DE4F60];
    *(uint64_t *)((char *)&v61 + *(_QWORD *)(v61 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v62 = MEMORY[0x1E0DE4FB8] + 16;
    if (SBYTE7(v67) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1A1AF4D64](v69);

    v42 = __dst;
    if (v59 < 0)
      v42 = (void **)__dst[0];
    *(_DWORD *)buf = 136315138;
    v71 = v42;
    _os_log_impl(&dword_19F029000, v54, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
    if (SHIBYTE(v59) < 0)
      operator delete(__dst[0]);

  }
  v7 = *a2;
LABEL_76:
  v43 = a2[1];
  if (v43)
  {
    v44 = (unint64_t *)(v43 + 8);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  *(_QWORD *)(a1 + 1672) = v7;
  v46 = *(std::__shared_weak_count **)(a1 + 1680);
  *(_QWORD *)(a1 + 1680) = v43;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v6;
  v50 = v49;
  if (v49)
    v51 = v49;
  v52 = *(void **)(a1 + 1696);
  *(_QWORD *)(a1 + 1696) = v50;

}

void sub_19FEEA7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  std::ostringstream::~ostringstream((uint64_t)&a25);

  _Unwind_Resume(a1);
}

void std::__hash_table<md::Label *,std::hash<md::Label *>,std::equal_to<md::Label *>,std::allocator<md::Label *>>::__emplace_unique_key_args<md::Label *,md::Label *>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  size_t v28;
  size_t v29;
  size_t v30;
  _QWORD *i;
  size_t v32;
  uint64_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  size_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  _QWORD *v43;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = v7 ^ (v7 >> 47);
  v9 = 0x9DDFEA08EB382D69 * v8;
  v10 = *((_QWORD *)a1 + 1);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * v8;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (v13)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == a2)
                return;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_22;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == a2)
              return;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_22:
  v16 = operator new(0x18uLL);
  *v16 = 0;
  v16[1] = v9;
  v16[2] = a3;
  v17 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v18 = a1[8];
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v10)
    {
      if (prime >= v10)
        goto LABEL_59;
      v34 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v10 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (prime <= v34)
        prime = v34;
      if (prime >= v10)
      {
        v10 = *((_QWORD *)a1 + 1);
LABEL_59:
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v9 >= v10)
            v3 = v9 % v10;
          else
            v3 = v9;
        }
        else
        {
          v3 = (v10 - 1) & v9;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v43 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v43)
          operator delete(v43);
        v10 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v23 = operator new(8 * prime);
    v24 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v23;
    if (v24)
      operator delete(v24);
    v25 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25++) = 0;
    while (prime != v25);
    v27 = (uint64_t *)(a1 + 4);
    v26 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v26)
    {
LABEL_58:
      v10 = prime;
      goto LABEL_59;
    }
    v28 = v26[1];
    v29 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v30 = v28 & v29;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v27;
      for (i = (_QWORD *)*v26; *v26; i = (_QWORD *)*v26)
      {
        v32 = i[1] & v29;
        if (v32 == v30)
        {
          v26 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
        {
          *v26 = *i;
          v33 = 8 * v32;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v33);
          **(_QWORD **)(*(_QWORD *)a1 + v33) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v26;
          v26 = i;
          v30 = v32;
        }
      }
      goto LABEL_58;
    }
    if (v28 >= prime)
      v28 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v27;
    v37 = (_QWORD *)*v26;
    if (!*v26)
      goto LABEL_58;
    while (1)
    {
      v39 = v37[1];
      if (v39 >= prime)
        v39 %= prime;
      if (v39 != v28)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v39))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v26;
          goto LABEL_63;
        }
        *v26 = *v37;
        v38 = 8 * v39;
        *v37 = **(_QWORD **)(*(_QWORD *)a1 + v38);
        **(_QWORD **)(*(_QWORD *)a1 + v38) = v37;
        v37 = v26;
      }
      v39 = v28;
LABEL_63:
      v26 = v37;
      v37 = (_QWORD *)*v37;
      v28 = v39;
      if (!v37)
        goto LABEL_58;
    }
  }
LABEL_72:
  v40 = *(_QWORD **)a1;
  v41 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v41)
  {
    *v16 = *v41;
LABEL_80:
    *v41 = v16;
    goto LABEL_81;
  }
  *v16 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v16;
  v40[v3] = a1 + 4;
  if (*v16)
  {
    v42 = *(_QWORD *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v42 >= v10)
        v42 %= v10;
    }
    else
    {
      v42 &= v10 - 1;
    }
    v41 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
}

void sub_19FEEAD00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>,std::__unordered_map_hasher<md::Label *,std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>,std::hash<md::Label *>,std::equal_to<md::Label *>,true>,std::__unordered_map_equal<md::Label *,std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>,std::equal_to<md::Label *>,std::hash<md::Label *>,true>,std::allocator<std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>>>::__emplace_unique_key_args<md::Label *,std::piecewise_construct_t const&,std::tuple<md::Label *&&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *i;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v42;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (char *)*v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = *((_QWORD *)v12 + 1);
            if (v14 == v8)
            {
              if (*((_QWORD *)v12 + 2) == a2)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = *(char **)v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v8)
          {
            if (*((_QWORD *)v12 + 2) == a2)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v12 = (char *)operator new(0x40uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v8;
  *((_QWORD *)v12 + 2) = *a3;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *((_QWORD *)v12 + 7) = 0;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (prime <= v9)
    {
      if (prime >= v9)
        goto LABEL_59;
      v32 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
LABEL_59:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v3 = v8 % v9;
          else
            v3 = v8;
        }
        else
        {
          v3 = (v9 - 1) & v8;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v42 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v42)
          operator delete(v42);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = operator new(8 * prime);
    v22 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v21;
    if (v22)
      operator delete(v22);
    v23 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
    while (prime != v23);
    v25 = (uint64_t *)(a1 + 4);
    v24 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v24)
    {
LABEL_58:
      v9 = prime;
      goto LABEL_59;
    }
    v26 = v24[1];
    v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v28 = v26 & v27;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v25;
      for (i = (_QWORD *)*v24; *v24; i = (_QWORD *)*v24)
      {
        v30 = i[1] & v27;
        if (v30 == v28)
        {
          v24 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
        {
          *v24 = *i;
          v31 = 8 * v30;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v31);
          **(_QWORD **)(*(_QWORD *)a1 + v31) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v24;
          v24 = i;
          v28 = v30;
        }
      }
      goto LABEL_58;
    }
    if (v26 >= prime)
      v26 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v25;
    v35 = (_QWORD *)*v24;
    if (!*v24)
      goto LABEL_58;
    while (1)
    {
      v37 = v35[1];
      if (v37 >= prime)
        v37 %= prime;
      if (v37 != v26)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v24;
          goto LABEL_63;
        }
        *v24 = *v35;
        v36 = 8 * v37;
        *v35 = **(_QWORD **)(*(_QWORD *)a1 + v36);
        **(_QWORD **)(*(_QWORD *)a1 + v36) = v35;
        v35 = v24;
      }
      v37 = v26;
LABEL_63:
      v24 = v35;
      v35 = (_QWORD *)*v35;
      v26 = v37;
      if (!v35)
        goto LABEL_58;
    }
  }
LABEL_72:
  v38 = *(_QWORD **)a1;
  v39 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v39)
  {
    *(_QWORD *)v12 = *v39;
LABEL_80:
    *v39 = v12;
    goto LABEL_81;
  }
  *(_QWORD *)v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v12;
  v38[v3] = a1 + 4;
  if (*(_QWORD *)v12)
  {
    v40 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v40 >= v9)
        v40 %= v9;
    }
    else
    {
      v40 &= v9 - 1;
    }
    v39 = (_QWORD *)(*(_QWORD *)a1 + 8 * v40);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
  return v12;
}

void sub_19FEEB1A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_0::operator()(uint64_t *a1, md::Label **a2)
{
  unint64_t v2;
  uint64_t v5;
  md::Label *v6;
  md::Label *v7;
  uint64_t v8;
  float *v9;
  double v10;
  double v11;
  float64x2_t v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint8x8_t v18;
  void **v19;
  double *v20;
  unint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t prime;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  size_t v34;
  size_t v35;
  size_t v36;
  _QWORD *v37;
  size_t v38;
  uint64_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  size_t v45;
  char v46;
  _QWORD *v47;
  _QWORD *v48;
  double **v49;
  unint64_t v50;
  float64x2_t v51;
  float64x2_t v52;
  double v53;
  double v54;
  double v55;
  uint64_t v57;
  uint64_t v58;
  float64x2_t v60;
  float64x2_t v61;

  v5 = *a1;
  md::Label::layoutForStaging(*a2, *(_QWORD *)(*a1 + 24), *(md::LabelPool **)(*a1 + 48), (_BYTE *)a1[1]);
  v6 = *a2;
  if (!*((_BYTE *)*a2 + 1290))
    return 0;
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)v6 + 1) + 264))(*((_QWORD *)v6 + 1)) == 25
    || (*(unsigned int (**)(_QWORD))(**((_QWORD **)v6 + 1) + 264))(*((_QWORD *)v6 + 1)) == 27
    || (*(unsigned int (**)(_QWORD))(**((_QWORD **)v6 + 1) + 264))(*((_QWORD *)v6 + 1)) == 24
    || (*(unsigned int (**)(_QWORD))(**((_QWORD **)v6 + 1) + 264))(*((_QWORD *)v6 + 1)) == 26)
  {
    v7 = *a2;
    v8 = a1[2];
    v9 = (float *)a1[3];
    v10 = *(double *)v8;
    v11 = *((double *)*a2 + 74);
    v12 = *(float64x2_t *)(v8 + 8);
    v13 = *((double *)*a2 + 28);
    v14 = (unint64_t)*a2 >> 32;
    v15 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v14);
    v16 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v14 ^ (v15 >> 47) ^ v15)) ^ ((0x9DDFEA08EB382D69 * (v14 ^ (v15 >> 47) ^ v15)) >> 47));
    v17 = *((_QWORD *)v9 + 1);
    v60 = *(float64x2_t *)((char *)*a2 + 600);
    v61 = v12;
    if (v17)
    {
      v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
      v18.i16[0] = vaddlv_u8(v18);
      if (v18.u32[0] > 1uLL)
      {
        v2 = 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v14 ^ (v15 >> 47) ^ v15)) ^ ((0x9DDFEA08EB382D69 * (v14 ^ (v15 >> 47) ^ v15)) >> 47));
        if (v16 >= v17)
          v2 = v16 % v17;
      }
      else
      {
        v2 = v16 & (v17 - 1);
      }
      v19 = *(void ***)(*(_QWORD *)v9 + 8 * v2);
      if (v19)
      {
        v20 = (double *)*v19;
        if (*v19)
        {
          if (v18.u32[0] < 2uLL)
          {
            while (1)
            {
              v22 = *((_QWORD *)v20 + 1);
              if (v22 == v16)
              {
                if (*((md::Label **)v20 + 2) == v7)
                  goto LABEL_95;
              }
              else if ((v22 & (v17 - 1)) != v2)
              {
                goto LABEL_27;
              }
              v20 = *(double **)v20;
              if (!v20)
                goto LABEL_27;
            }
          }
          do
          {
            v21 = *((_QWORD *)v20 + 1);
            if (v21 == v16)
            {
              if (*((md::Label **)v20 + 2) == v7)
                goto LABEL_95;
            }
            else
            {
              if (v21 >= v17)
                v21 %= v17;
              if (v21 != v2)
                break;
            }
            v20 = *(double **)v20;
          }
          while (v20);
        }
      }
    }
LABEL_27:
    v20 = (double *)operator new(0x20uLL);
    *v20 = 0.0;
    *((_QWORD *)v20 + 1) = v16;
    *((_QWORD *)v20 + 2) = v7;
    v23 = (float)(unint64_t)(*((_QWORD *)v9 + 3) + 1);
    v24 = v9[8];
    if (v17 && (float)(v24 * (float)v17) >= v23)
    {
LABEL_85:
      v48 = *(_QWORD **)v9;
      v49 = *(double ***)(*(_QWORD *)v9 + 8 * v2);
      if (v49)
      {
        *(_QWORD *)v20 = *v49;
      }
      else
      {
        *v20 = *((double *)v9 + 2);
        *((_QWORD *)v9 + 2) = v20;
        v48[v2] = v9 + 4;
        if (!*(_QWORD *)v20)
          goto LABEL_94;
        v50 = *(_QWORD *)(*(_QWORD *)v20 + 8);
        if ((v17 & (v17 - 1)) != 0)
        {
          if (v50 >= v17)
            v50 %= v17;
        }
        else
        {
          v50 &= v17 - 1;
        }
        v49 = (double **)(*(_QWORD *)v9 + 8 * v50);
      }
      *v49 = v20;
LABEL_94:
      ++*((_QWORD *)v9 + 3);
      v7 = *a2;
LABEL_95:
      v51 = vsubq_f64(v61, v60);
      v52 = vmulq_f64(v51, v51);
      v53 = (v52.f64[0] + (v10 - v11) * (v10 - v11) + v52.f64[1]) / (v13 * v13);
      v20[3] = v53;
      v52.f64[0] = 1.0 / *((double *)v7 + 28);
      v54 = fmax(*(double *)(v5 + 776), v52.f64[0] * *((float *)v7 + 196));
      v52.f64[0] = fmin(v52.f64[0] * *((float *)v7 + 197), *(double *)(v5 + 856));
      v55 = v52.f64[0] * v52.f64[0];
      if (v53 >= v54 * v54 && v53 <= v55)
        return 1;
      v57 = *((_QWORD *)v7 + 3);
      if (v57
        && ((*(unsigned int (**)(_QWORD))(**((_QWORD **)v7 + 1) + 264))(*((_QWORD *)v7 + 1)) == 26
         || (*(unsigned int (**)(_QWORD))(**((_QWORD **)*a2 + 1) + 264))(*((_QWORD *)*a2 + 1)) == 24))
      {
        v58 = (*(uint64_t (**)(uint64_t, md::Label *))(*(_QWORD *)v57 + 56))(v57, *a2);
        v46 = 3;
        if (v58)
          md::Label::updateStateMachineForStaging(v58, 2, 3);
      }
      else
      {
        v46 = 3;
      }
      goto LABEL_106;
    }
    v25 = 1;
    if (v17 >= 3)
      v25 = (v17 & (v17 - 1)) != 0;
    v26 = v25 | (2 * v17);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      prime = v27;
    else
      prime = v26;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v17 = *((_QWORD *)v9 + 1);
    }
    if (prime <= v17)
    {
      if (prime >= v17)
        goto LABEL_80;
      v40 = vcvtps_u32_f32((float)*((unint64_t *)v9 + 3) / v9[8]);
      if (v17 < 3 || (v41 = (uint8x8_t)vcnt_s8((int8x8_t)v17), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        v40 = std::__next_prime(v40);
      }
      else
      {
        v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2)
          v40 = v42;
      }
      if (prime <= v40)
        prime = v40;
      if (prime >= v17)
        goto LABEL_80;
      if (!prime)
      {
        v47 = *(_QWORD **)v9;
        *(_QWORD *)v9 = 0;
        if (v47)
          operator delete(v47);
        *((_QWORD *)v9 + 1) = 0;
        goto LABEL_80;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v29 = operator new(8 * prime);
    v30 = *(_QWORD **)v9;
    *(_QWORD *)v9 = v29;
    if (v30)
      operator delete(v30);
    v31 = 0;
    *((_QWORD *)v9 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)v9 + 8 * v31++) = 0;
    while (prime != v31);
    v33 = (uint64_t *)(v9 + 4);
    v32 = (_QWORD *)*((_QWORD *)v9 + 2);
    if (!v32)
    {
LABEL_80:
      v17 = *((_QWORD *)v9 + 1);
      if ((v17 & (v17 - 1)) != 0)
      {
        if (v16 >= v17)
          v2 = v16 % v17;
        else
          v2 = v16;
      }
      else
      {
        v2 = (v17 - 1) & v16;
      }
      goto LABEL_85;
    }
    v34 = v32[1];
    v35 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v36 = v34 & v35;
      *(_QWORD *)(*(_QWORD *)v9 + 8 * v36) = v33;
      while (1)
      {
        v37 = (_QWORD *)*v32;
        if (!*v32)
          break;
        v38 = v37[1] & v35;
        if (v38 == v36)
        {
          v32 = (_QWORD *)*v32;
        }
        else if (*(_QWORD *)(*(_QWORD *)v9 + 8 * v38))
        {
          *v32 = *v37;
          v39 = 8 * v38;
          *v37 = **(_QWORD **)(*(_QWORD *)v9 + v39);
          **(_QWORD **)(*(_QWORD *)v9 + v39) = v37;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v9 + 8 * v38) = v32;
          v32 = v37;
          v36 = v38;
        }
      }
      goto LABEL_80;
    }
    if (v34 >= prime)
      v34 %= prime;
    *(_QWORD *)(*(_QWORD *)v9 + 8 * v34) = v33;
    v43 = (_QWORD *)*v32;
    if (!*v32)
      goto LABEL_80;
    while (1)
    {
      v45 = v43[1];
      if (v45 >= prime)
        v45 %= prime;
      if (v45 != v34)
      {
        if (!*(_QWORD *)(*(_QWORD *)v9 + 8 * v45))
        {
          *(_QWORD *)(*(_QWORD *)v9 + 8 * v45) = v32;
          goto LABEL_65;
        }
        *v32 = *v43;
        v44 = 8 * v45;
        *v43 = **(_QWORD **)(*(_QWORD *)v9 + v44);
        **(_QWORD **)(*(_QWORD *)v9 + v44) = v43;
        v43 = v32;
      }
      v45 = v34;
LABEL_65:
      v32 = v43;
      v43 = (_QWORD *)*v43;
      v34 = v45;
      if (!v43)
        goto LABEL_80;
    }
  }
  v46 = 29;
LABEL_106:
  md::Label::updateStateMachineForStaging((uint64_t)*a2, 2, v46);
  return 0;
}

void sub_19FEEB7E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  unint64_t *v34;
  int v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  __int128 v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t *v55;
  unint64_t *v56;
  unint64_t *v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  int64_t v69;
  int64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t *v73;
  unint64_t *v74;
  __int128 v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  __int128 v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t *v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  __int128 v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t *v109;
  unint64_t *v110;
  __int128 v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  __int128 v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t *v127;
  unint64_t *v128;
  unint64_t *v129;
  __int128 v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  __int128 v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t *v141;
  unint64_t *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  int64_t v146;
  unint64_t v147;
  __int128 v148;

void sub_19FEEC528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  _BOOL8 v8;
  int v11;
  void *v12;
  unint64_t v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  char v20;
  BOOL v21;
  _QWORD *v22;
  double *v23;
  double *v24;
  double *v25;
  int v26;
  double v27;
  double v28;
  unsigned int *v29;
  unsigned int v30;

  v6 = *a2;
  v7 = *a3;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a2 + 8) + 264))(*(_QWORD *)(*a2 + 8)) == 25
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v6 + 8) + 264))(*(_QWORD *)(v6 + 8)) == 27
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v7 + 8) + 264))(*(_QWORD *)(v7 + 8)) == 25
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v7 + 8) + 264))(*(_QWORD *)(v7 + 8)) == 27)
  {
    if (((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v6 + 8) + 264))(*(_QWORD *)(v6 + 8)) == 25
       || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v6 + 8) + 264))(*(_QWORD *)(v6 + 8)) == 27)
      && ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v7 + 8) + 264))(*(_QWORD *)(v7 + 8)) == 25
       || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v7 + 8) + 264))(*(_QWORD *)(v7 + 8)) == 27))
    {
      return *(_QWORD *)(v6 + 8) < *(_QWORD *)(v7 + 8);
    }
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v6 + 8) + 264))(*(_QWORD *)(v6 + 8)) == 25)
      return 1;
    return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v6 + 8) + 264))(*(_QWORD *)(v6 + 8)) == 27;
  }
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 8) + 264))(*(_QWORD *)(v6 + 8));
  v8 = v11 == 24;
  if ((v11 == 24) != ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v7 + 8) + 264))(*(_QWORD *)(v7 + 8)) == 24))
    return v8;
  (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 8) + 208))(*(_QWORD *)(v6 + 8));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "intraFeaturePriority");

  (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 8) + 208))(*(_QWORD *)(v7 + 8));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "intraFeaturePriority");

  if (v13 != v15)
    return v13 < v15;
  v16 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v6 + 8) + 304))(*(_QWORD *)(v6 + 8), *a2 + 48);
  v18 = v17;
  v19 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v7 + 8) + 304))(*(_QWORD *)(v7 + 8), *a3 + 48);
  if (v18)
    v21 = v20 == 0;
  else
    v21 = 1;
  if (!v21 && ((_DWORD)v16 != (_DWORD)v19 || vabds_f32(*((float *)&v16 + 1), *((float *)&v19 + 1)) >= 0.00000011921))
  {
    if (v11 != 24
      && ((v29 = *(unsigned int **)a1, v30 = **(_DWORD **)a1, v30 < v16)
       || v30 == (_DWORD)v16 && *((float *)v29 + 1) <= *((float *)&v16 + 1))
      && (v30 < v19 || v30 == (_DWORD)v19 && *((float *)v29 + 1) <= *((float *)&v19 + 1)))
    {
      if (v16 < v19)
        return 1;
      return *((float *)&v16 + 1) < *((float *)&v19 + 1) && (_DWORD)v16 == (_DWORD)v19;
    }
    else
    {
      if (v16 > v19)
        return 1;
      return *((float *)&v16 + 1) > *((float *)&v19 + 1) && (_DWORD)v16 == (_DWORD)v19;
    }
  }
  v22 = *(_QWORD **)(a1 + 8);
  v23 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v22, *a2);
  if (!v23)
    return 0;
  v24 = v23;
  v25 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v22, *a3);
  v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 8) + 264))(*(_QWORD *)(v6 + 8));
  v27 = v24[3];
  v28 = v25[3];
  if (v26 == 24)
    return v27 > v28;
  else
    return v27 < v28;
}

void sub_19FEEC9B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  char v8;
  uint64_t result;
  unint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v8 = md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a4, a2, a1);
  result = md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a4, a3, a2);
  if ((v8 & 1) != 0)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
      *a3 = v10;
      v11 = a3 + 1;
      v12 = a1 + 1;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      v17 = a1[1];
      a1[1] = a2[1];
      a2[1] = v17;
      result = md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a4, a3, a2);
      if (!(_DWORD)result)
        return result;
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      v11 = a3 + 1;
      v12 = a2 + 1;
    }
    v15 = v11;
    goto LABEL_10;
  }
  if ((_DWORD)result)
  {
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    v15 = a2 + 1;
    v14 = a2[1];
    a2[1] = a3[1];
    a3[1] = v14;
    result = md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a4, a2, a1);
    if ((_DWORD)result)
    {
      v16 = *a1;
      *a1 = *a2;
      v12 = a1 + 1;
      *a2 = v16;
LABEL_10:
      v19 = *v12;
      *v12 = *v15;
      *v15 = v19;
    }
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *>(a1, a2, a3, a5);
  result = md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a5, a4, a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    v12 = a3[1];
    a3[1] = a4[1];
    a4[1] = v12;
    result = md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a5, a3, a2);
    if ((_DWORD)result)
    {
      v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      result = md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a5, a2, a1);
      if ((_DWORD)result)
      {
        v15 = *a1;
        *a1 = *a2;
        *a2 = v15;
        v16 = a1[1];
        a1[1] = a2[1];
        a2[1] = v16;
      }
    }
  }
  return result;
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *,0>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *>(a1, a2, a3, a4, a6);
  result = md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a6, a5, a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    v14 = a4[1];
    a4[1] = a5[1];
    a5[1] = v14;
    result = md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a6, a4, a3);
    if ((_DWORD)result)
    {
      v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      result = md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a6, a3, a2);
      if ((_DWORD)result)
      {
        v17 = *a2;
        *a2 = *a3;
        *a3 = v17;
        v18 = a2[1];
        a2[1] = a3[1];
        a3[1] = v18;
        result = md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a6, a2, a1);
        if ((_DWORD)result)
        {
          v19 = *a1;
          *a1 = *a2;
          *a2 = v19;
          v20 = a1[1];
          a1[1] = a2[1];
          a2[1] = v20;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  int v12;
  unint64_t *v13;
  unint64_t *v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;

  v6 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (!md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, a2 - 2, a1))
        return 1;
      v8 = *a1;
      *a1 = *(a2 - 2);
      *(a2 - 2) = v8;
      v9 = a1[1];
      a1[1] = *(a2 - 1);
      *(a2 - 1) = v9;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *,0>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v10 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *>(a1, a1 + 2, a1 + 4, a3);
      v11 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, v11, v10))
    {
      v26 = *(_OWORD *)v11;
      *v11 = 0;
      v11[1] = 0;
      v13 = v11;
      while (1)
      {
        v14 = v13;
        v13 = v10;
        v15 = *(_OWORD *)v10;
        *v10 = 0;
        v10[1] = 0;
        v16 = (std::__shared_weak_count *)v14[1];
        *(_OWORD *)v14 = v15;
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        if (v13 == a1)
          break;
        v10 = v13 - 2;
        if ((md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, (unint64_t *)&v26, v13 - 2) & 1) == 0)
          goto LABEL_19;
      }
      v13 = a1;
LABEL_19:
      v19 = v26;
      v26 = 0uLL;
      v20 = (std::__shared_weak_count *)v13[1];
      *(_OWORD *)v13 = v19;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
      if (*((_QWORD *)&v26 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      if (++v12 == 8)
        return v11 + 2 == a2;
    }
    v10 = v11;
    v11 += 2;
    if (v11 == a2)
      return 1;
  }
}

void sub_19FEECF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *i;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  uint64_t *v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  BOOL v55;
  uint64_t v56;
  unint64_t v57;
  BOOL v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  BOOL v73;
  uint64_t v74;
  unint64_t v75;
  BOOL v76;
  uint64_t *v77;
  __int128 v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t *v91;
  BOOL v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *p_shared_owners;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  BOOL v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  int64_t v113;
  int64_t v114;
  int64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  BOOL v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  __int128 v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  __int128 v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t *v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  BOOL v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t *v209;
  uint64_t v210;

BOOL md::ARWalkingLabeler::doesStagingLabelIntersectWithWorld(md::ARWalkingLabeler *this, md::Label *a2, int a3, md::Label *a4)
{
  md::ARWalkingLabeler *v5;
  md::Label **v6;
  void **v7;
  uint64_t *v8;
  char *v9;
  double *v10;
  void *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  double *v39;
  char *v40;
  __int128 *v41;
  _QWORD *v42;
  double v43;
  double v44;
  double v45;
  int v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  double *v53;
  double *v54;
  _QWORD *v55;
  _QWORD *v56;
  double *v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t *v61;
  _QWORD *v62;
  int8x8_t v63;
  uint8x8_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  double *v78;
  char *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  unint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  char v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  float v93;
  double v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t *v113;
  BOOL v114;
  uint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t *v120;
  __int128 *v122;
  unint64_t v123;
  int8x8_t v124;
  uint8x8_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v142;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v153;
  uint64_t v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  int *v161;
  __int128 v162;
  char *v163;
  uint64_t v164;
  float32x4_t v165;
  int v166;
  uint64_t v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  BOOL v175;
  float v176;
  unsigned int v177;
  _QWORD *v178;
  _QWORD *v179;
  void *v180;
  double *v181;
  double *v182;
  double *v184;
  char *v185;
  uint64_t v186;
  uint64_t *v187;
  double *v188;
  double *__pa;
  double *__pb;
  _QWORD *v193;
  uint64_t *v194;
  md::Label *v195;
  md::Label *v196;
  void *v197;
  char *v198;
  _BYTE *v199;
  unint64_t v200;
  _BYTE v201[48];
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  char v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  void *v215[2];
  void *v216[2];
  int v217;
  double v218;
  __int128 v219;
  uint64_t v220;
  uint64_t v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  uint64_t v231;
  int v232;
  _QWORD v233[3];
  _QWORD *v234;
  uint64_t v235;

  v5 = this;
  v235 = *MEMORY[0x1E0C80C00];
  v197 = v201;
  v198 = v201;
  v199 = v201;
  v200 = 2;
  v6 = &v195;
  v195 = a2;
  v7 = (void **)&v196;
  if (a4)
  {
    v7 = &v197;
    v196 = a4;
  }
  v8 = (uint64_t *)((char *)this + 1808);
  v193 = (_QWORD *)((char *)this + 1832);
  do
  {
    v12 = (unint64_t)*v6;
    v222 = *((_OWORD *)*v6 + 37);
    *(_QWORD *)&v223 = *(_QWORD *)(v12 + 608);
    if (!a3)
      goto LABEL_19;
    v13 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v193, v12);
    if (!v13)
      goto LABEL_15;
    v14 = v13;
    v15 = (uint64_t *)v13[3];
    v16 = (uint64_t *)operator new(0x38uLL);
    v17 = v16;
    v18 = *((_OWORD *)v15 + 1);
    v19 = *((_OWORD *)v15 + 2);
    v16[6] = v15[6];
    *((_OWORD *)v16 + 1) = v18;
    *((_OWORD *)v16 + 2) = v19;
    v20 = *((_QWORD *)v5 + 226);
    *(_QWORD *)(v20 + 8) = v16;
    *((_QWORD *)v5 + 226) = v16;
    *v16 = v20;
    v16[1] = (uint64_t)v8;
    v21 = (uint64_t *)*((_QWORD *)v5 + 234);
    if (v21 == v15)
    {
      v22 = (uint64_t *)v15[1];
    }
    else
    {
      v22 = v16;
      if (v21 != v8)
        goto LABEL_13;
    }
    *((_QWORD *)v5 + 234) = v22;
LABEL_13:
    v23 = *v15;
    *(_QWORD *)(v23 + 8) = v15[1];
    *(_QWORD *)v15[1] = v23;
    operator delete(v15);
    v14[3] = v17;
    if (v17 != v8)
    {
      v222 = *(_OWORD *)(v17 + 3);
      *(_QWORD *)&v223 = v17[5];
      goto LABEL_19;
    }
LABEL_15:
    v24 = (_QWORD *)*((_QWORD *)v5 + 215);
    if (v24)
    {
      ++*((_DWORD *)v5 + 450);
      md::ARWorldIntersector::resolveWorldPoint(v24, &v222);
    }
    else
    {
      v26 = *((_QWORD *)&v222 + 1);
      v25 = v222;
      v27 = v223;
    }
    *(_QWORD *)&v222 = v25;
    *((_QWORD *)&v222 + 1) = v26;
    *(_QWORD *)&v223 = v27;
    v219 = v222;
    v220 = v27;
    *(_QWORD *)&v218 = a2;
    v221 = 0;
    geo::MarkedLRUCache<md::Label *,gm::Matrix<double,3,1>,std::hash<md::Label *>,std::equal_to<md::Label *>>::insert(v8, (uint64_t)&v218);
LABEL_19:
    v28 = v197;
    v9 = v198;
    v29 = 0xAAAAAAAAAAAAAAABLL * ((v198 - (_BYTE *)v197) >> 3);
    if (v200 < v29 + 1)
    {
      v30 = v199;
      v31 = (1 << -(char)__clz(v200 + 1));
      if (v200 >= 0xFFFFFFFFFFFFFFFELL)
        v31 = 1;
      if (v31 <= v29 + 1)
        v32 = v29 + 1;
      else
        v32 = v31;
      v33 = (char *)malloc_type_malloc(24 * v32, 0x1000040504FFAC1uLL);
      v34 = v33;
      v35 = (char *)v197;
      v36 = v198;
      if (v197 != v198)
      {
        v37 = v33;
        do
        {
          v38 = *(_OWORD *)v35;
          *((_QWORD *)v37 + 2) = *((_QWORD *)v35 + 2);
          *(_OWORD *)v37 = v38;
          v37 += 24;
          v35 += 24;
        }
        while (v35 != v36);
      }
      if (v28 != v30)
        free(v197);
      v9 = &v34[24 * v29];
      v197 = v34;
      v198 = v9;
      v200 = v32;
      v5 = this;
    }
    *(_OWORD *)v9 = v222;
    *((_QWORD *)v9 + 2) = v223;
    v10 = (double *)v198;
    v11 = v198 + 24;
    v198 += 24;
    ++v6;
  }
  while (v6 != (md::Label **)v7);
  v39 = (double *)v197;
  if (v197 == v11)
  {
LABEL_217:
    v177 = 2;
    goto LABEL_219;
  }
  v40 = (char *)v5 + 1736;
  v41 = &xmmword_19FFB3000;
  v185 = (char *)v5 + 1736;
  while (2)
  {
    v42 = (_QWORD *)*((_QWORD *)v5 + 215);
    if (!v42 || !(*(_QWORD *)v40 | *((_QWORD *)v40 + 1) | *((_QWORD *)v40 + 2)))
    {
LABEL_33:
      v114 = v39 == v10;
      v39 += 3;
      if (v114)
        goto LABEL_217;
      continue;
    }
    break;
  }
  v188 = v10;
  ++*((_DWORD *)v5 + 449);
  if (*((_BYTE *)v5 + 1784))
  {
    v43 = *((double *)v5 + 220);
    v44 = *((double *)v5 + 221);
    v45 = *((double *)v5 + 222);
  }
  else
  {
    ++*((_DWORD *)v5 + 450);
    md::ARWorldIntersector::resolveWorldPoint(v42, (__int128 *)v40);
    v46 = *((unsigned __int8 *)v5 + 1784);
    *((double *)v5 + 220) = v43;
    *((double *)v5 + 221) = v44;
    *((double *)v5 + 222) = v45;
    if (!v46)
      *((_BYTE *)v5 + 1784) = 1;
  }
  v47 = *v39 - v43;
  v48 = v39[1] - v44;
  v49 = v39[2] - v45;
  v202 = v43;
  v203 = v44;
  v204 = v45;
  v205 = v47;
  v206 = v48;
  v207 = v49;
  if (*((_BYTE *)v5 + 1792))
    goto LABEL_32;
  v50 = *((_QWORD *)v5 + 215);
  v184 = v39;
  if (*(_BYTE *)(v50 + 128))
  {
    v51 = *(_QWORD *)(v50 + 16);
    if (v51)
    {
      if (v51 >> 60)
        abort();
      v52 = *((_QWORD *)v5 + 215);
      v53 = (double *)operator new(16 * v51);
      v54 = &v53[2 * v51];
      v50 = v52;
    }
    else
    {
      v54 = 0;
      v53 = 0;
    }
    v55 = (_QWORD *)(v50 + 8);
    v56 = *(_QWORD **)v50;
    v186 = v50;
    v57 = v53;
    if (*(_QWORD *)v50 == v50 + 8)
      goto LABEL_47;
    while (2)
    {
      v62 = *(_QWORD **)(v56[4] + 784);
      v63 = (int8x8_t)v62[1];
      if (!*(_QWORD *)&v63)
        goto LABEL_76;
      v64 = (uint8x8_t)vcnt_s8(v63);
      v64.i16[0] = vaddlv_u8(v64);
      if (v64.u32[0] > 1uLL)
      {
        v65 = 0x64A448A5CD5D38DBLL;
        if (*(_QWORD *)&v63 <= 0x64A448A5CD5D38DBuLL)
          v65 = 0x64A448A5CD5D38DBuLL % *(_QWORD *)&v63;
      }
      else
      {
        v65 = (*(_QWORD *)&v63 - 1) & 0x64A448A5CD5D38DBLL;
      }
      v66 = *(_QWORD **)(*v62 + 8 * v65);
      if (!v66)
        goto LABEL_76;
      v67 = (_QWORD *)*v66;
      if (!v67)
        goto LABEL_76;
      if (v64.u32[0] < 2uLL)
      {
        v68 = *(_QWORD *)&v63 - 1;
        while (1)
        {
          v70 = v67[1];
          if (v70 == 0x64A448A5CD5D38DBLL)
          {
            if (v67[2] == 0x64A448A5CD5D38DBLL)
              goto LABEL_74;
          }
          else if ((v70 & v68) != v65)
          {
            goto LABEL_76;
          }
          v67 = (_QWORD *)*v67;
          if (!v67)
            goto LABEL_76;
        }
      }
      while (1)
      {
        v69 = v67[1];
        if (v69 == 0x64A448A5CD5D38DBLL)
          break;
        if (v69 >= *(_QWORD *)&v63)
          v69 %= *(_QWORD *)&v63;
        if (v69 != v65)
          goto LABEL_76;
LABEL_63:
        v67 = (_QWORD *)*v67;
        if (!v67)
          goto LABEL_76;
      }
      if (v67[2] != 0x64A448A5CD5D38DBLL)
        goto LABEL_63;
LABEL_74:
      v71 = v67[5];
      if (*(_QWORD *)(v71 + 8) == 0x64A448A5CD5D38DBLL)
      {
        v72 = *(_QWORD *)(v71 + 32);
        goto LABEL_77;
      }
LABEL_76:
      v72 = 0;
LABEL_77:
      v218 = 0.0;
      *(_QWORD *)&v222 = 0;
      if (gm::Ray<double,3>::segmentIntersectsBox(&v202, (double *)(v72 + 128), &v218, (double *)&v222, 1.0))
      {
        v73 = v56[4];
        if (v57 >= v54)
        {
          v74 = ((char *)v57 - (char *)v53) >> 4;
          v75 = v74 + 1;
          __pb = v53;
          if ((unint64_t)(v74 + 1) >> 60)
            abort();
          if (v54 - v53 > v75)
            v75 = v54 - v53;
          if ((unint64_t)((char *)v54 - (char *)v53) >= 0x7FFFFFFFFFFFFFF0)
            v76 = 0xFFFFFFFFFFFFFFFLL;
          else
            v76 = v75;
          if (v76 >> 60)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v77 = (char *)operator new(16 * v76);
          v78 = (double *)&v77[16 * v74];
          *(_QWORD *)v78 = v73;
          v78[1] = v218;
          if (v57 == v53)
          {
            v53 = (double *)&v77[16 * v74];
          }
          else
          {
            v79 = &v77[16 * v74];
            do
            {
              v53 = (double *)(v79 - 16);
              *((_OWORD *)v79 - 1) = *((_OWORD *)v57 - 1);
              v57 -= 2;
              v79 -= 16;
            }
            while (v57 != __pb);
          }
          v54 = (double *)&v77[16 * v76];
          v57 = v78 + 2;
          if (__pb)
            operator delete(__pb);
        }
        else
        {
          *(_QWORD *)v57 = v73;
          v57[1] = v218;
          v57 += 2;
        }
      }
      v80 = (_QWORD *)v56[1];
      if (v80)
      {
        do
        {
          v81 = v80;
          v80 = (_QWORD *)*v80;
        }
        while (v80);
      }
      else
      {
        do
        {
          v81 = (_QWORD *)v56[2];
          v114 = *v81 == (_QWORD)v56;
          v56 = v81;
        }
        while (!v114);
      }
      v56 = v81;
      if (v81 != v55)
        continue;
      break;
    }
LABEL_47:
    v58 = 126 - 2 * __clz(((char *)v57 - (char *)v53) >> 4);
    if (v57 == v53)
      v59 = 0;
    else
      v59 = v58;
    v60 = 1;
    std::__introsort<std::_ClassicAlgPolicy,md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_0 &,std::pair<md::ARBuildingTileData *,double> *,false>(v53, v57, v59, 1);
    *(_OWORD *)v215 = 0u;
    *(_OWORD *)v216 = 0u;
    v217 = 1065353216;
    if (v57 != v53)
    {
      v61 = (uint64_t *)v53;
      __pa = v53;
      while (1)
      {
        v82 = *(_QWORD **)(*v61 + 784);
        v83 = v82[1];
        if ((v83 & (v83 - 1)) != 0)
        {
          v85 = 0x64A448A5CD5D38DBLL;
          if (v83 <= 0x64A448A5CD5D38DBLL)
            v85 = 0x64A448A5CD5D38DBLL % v83;
          v84 = *(_QWORD **)(*v82 + 8 * v85);
          do
          {
            do
              v84 = (_QWORD *)*v84;
            while (v84[1] != 0x64A448A5CD5D38DBLL);
          }
          while (v84[2] != 0x64A448A5CD5D38DBLL);
        }
        else
        {
          v84 = *(_QWORD **)(*v82 + 8 * ((v83 - 1) & 0x64A448A5CD5D38DBLL));
          do
          {
            do
              v84 = (_QWORD *)*v84;
            while (v84[1] != 0x64A448A5CD5D38DBLL);
          }
          while (v84[2] != 0x64A448A5CD5D38DBLL);
        }
        v86 = *(_QWORD *)(v84[5] + 32);
        v87 = *(_BYTE *)(v86 + 1);
        v88 = (double)(1 << v87);
        v89 = (double)((1 << v87) + ~*(_DWORD *)(v86 + 4));
        __powidf2();
        v91 = v90 * 0.0000000249532021;
        v92 = 1.0 / v88 * (double)*(int *)(v86 + 8);
        v93 = (v202 - v92) * v88;
        v94 = v203 - 1.0 / v88 * v89;
        v95 = v94 * v88;
        v96 = v204 * 40075017.0;
        v97 = (v205 + v202 - v92) * v88;
        *(float *)&v94 = (v94 + v206) * v88;
        v98 = (v207 + v204) * 40075017.0;
        v99 = v91 * v96;
        *(float *)&v91 = v91 * v98;
        v209 = v93;
        v210 = v95;
        v211 = v99;
        v212 = v97 - v93;
        v213 = *(float *)&v94 - v95;
        v214 = *(float *)&v91 - v99;
        v208 = 0;
        v100 = *v61;
        v233[0] = &off_1E42D9098;
        v233[1] = &v209;
        v233[2] = &v208;
        v234 = v233;
        md::ARWorldIntersector::visitReferencedAssetOcclusionVolumes(v186, v100, (uint64_t)v215, (uint64_t)v233);
        v101 = v234;
        if (v234 == v233)
        {
          v101 = v233;
          v102 = 4;
        }
        else
        {
          if (!v234)
            goto LABEL_116;
          v102 = 5;
        }
        (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_116:
        if (v208)
          goto LABEL_201;
        v187 = v61;
        v103 = (_QWORD *)gdc::Registry::storage<arComponents::LocalBounds>((uint64_t)v82);
        v104 = v103;
        v106 = (uint64_t *)v103[7];
        v105 = (uint64_t *)v103[8];
        v107 = (char *)v105 - (char *)v106;
        if (v105 == v106)
          goto LABEL_137;
        v108 = *((unsigned int *)v106 + 1);
        v109 = v103[4];
        v110 = (v103[5] - v109) >> 3;
        if (v108 >> 7 < v110)
        {
          v111 = *(_QWORD *)(v109 + 8 * (v108 >> 7));
          if (v111)
          {
            v112 = *(unsigned __int16 *)(v111 + 2 * (v108 & 0x7F));
            if (v112 < v107 >> 3)
            {
              v113 = &v106[v112];
              v114 = v113 != v105 && *((_DWORD *)v113 + 1) == (_DWORD)v108;
              if (v114)
                goto LABEL_137;
            }
          }
        }
        v115 = v106 + 1;
        if (v106 + 1 != v105)
        {
          v116 = v107 >> 3;
          while (1)
          {
            v117 = *((unsigned int *)v115 + 1);
            if (v117 >> 7 < v110)
            {
              v118 = *(_QWORD *)(v109 + 8 * (v117 >> 7));
              if (v118)
              {
                v119 = *(unsigned __int16 *)(v118 + 2 * (v117 & 0x7F));
                if (v116 > v119)
                {
                  v120 = &v106[v119];
                  if (v120 != v105 && *((_DWORD *)v120 + 1) == (_DWORD)v117)
                    break;
                }
              }
            }
            if (++v115 == v105)
              goto LABEL_100;
          }
          v106 = v115;
LABEL_137:
          if (v105 != v106)
          {
            v194 = v82 + 15;
            while (1)
            {
              v122 = v41;
              v123 = *v106;
              *(_QWORD *)&v222 = 0x2805F57CABD6715CLL;
              v124 = (int8x8_t)v82[16];
              if (v124)
              {
                v125 = (uint8x8_t)vcnt_s8(v124);
                v125.i16[0] = vaddlv_u8(v125);
                if (v125.u32[0] > 1uLL)
                {
                  v126 = 0x2805F57CABD6715CLL;
                  if (*(_QWORD *)&v124 <= 0x2805F57CABD6715CuLL)
                    v126 = 0x2805F57CABD6715CuLL % *(_QWORD *)&v124;
                }
                else
                {
                  v126 = (*(_QWORD *)&v124 - 1) & 0x2805F57CABD6715CLL;
                }
                v127 = *(_QWORD **)(*v194 + 8 * v126);
                if (v127)
                {
                  v128 = (_QWORD *)*v127;
                  if (v128)
                  {
                    if (v125.u32[0] < 2uLL)
                    {
                      v129 = *(_QWORD *)&v124 - 1;
                      while (1)
                      {
                        v131 = v128[1];
                        if (v131 == 0x2805F57CABD6715CLL)
                        {
                          if (v128[2] == 0x2805F57CABD6715CLL)
                            goto LABEL_188;
                        }
                        else if ((v131 & v129) != v126)
                        {
                          goto LABEL_160;
                        }
                        v128 = (_QWORD *)*v128;
                        if (!v128)
                          goto LABEL_160;
                      }
                    }
                    do
                    {
                      v130 = v128[1];
                      if (v130 == 0x2805F57CABD6715CLL)
                      {
                        if (v128[2] == 0x2805F57CABD6715CLL)
                        {
LABEL_188:
                          v132 = v128[3];
                          goto LABEL_163;
                        }
                      }
                      else
                      {
                        if (v130 >= *(_QWORD *)&v124)
                          v130 %= *(_QWORD *)&v124;
                        if (v130 != v126)
                          break;
                      }
                      v128 = (_QWORD *)*v128;
                    }
                    while (v128);
                  }
                }
              }
LABEL_160:
              v132 = operator new();
              *(_QWORD *)(v132 + 16) = "arComponents::LocalBounds]";
              *(_QWORD *)(v132 + 24) = 25;
              *(_OWORD *)(v132 + 32) = 0u;
              *(_OWORD *)(v132 + 48) = 0u;
              *(_OWORD *)(v132 + 64) = 0u;
              *(_OWORD *)(v132 + 80) = 0u;
              *(_OWORD *)(v132 + 96) = 0u;
              *(_OWORD *)(v132 + 112) = 0u;
              *(_OWORD *)(v132 + 128) = 0u;
              *(_DWORD *)(v132 + 144) = 1065353216;
              *(_OWORD *)(v132 + 152) = 0u;
              *(_OWORD *)(v132 + 168) = 0u;
              *(_QWORD *)(v132 + 184) = 0;
              *(_DWORD *)(v132 + 192) = 1065353216;
              *(_OWORD *)(v132 + 200) = 0u;
              *(_OWORD *)(v132 + 216) = 0u;
              *(_QWORD *)(v132 + 232) = 0;
              *(_DWORD *)(v132 + 240) = 1065353216;
              *(_QWORD *)v132 = &off_1E42B1788;
              *(_QWORD *)(v132 + 8) = 0x2805F57CABD6715CLL;
              *(_QWORD *)(v132 + 248) = v82;
              v133 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<gdc::ComponentStorageWrapperBase>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v194, 0x2805F57CABD6715CuLL, &v222);
              v134 = v133[3];
              v133[3] = v132;
              if (v134)
                (*(void (**)(uint64_t))(*(_QWORD *)v134 + 8))(v134);
              v218 = 6.96631203e-116;
              *(_QWORD *)&v219 = "arComponents::LocalBounds]";
              *((_QWORD *)&v219 + 1) = 25;
              gdc::Registry::_registerStorageDataSignals((uint64_t)v82, 0x2805F57CABD6715CLL, (uint64_t)&v218, (uint64_t *)(v132 + 104));
LABEL_163:
              v135 = *(_QWORD *)(v132 + 32);
              if (v123 >> 39 < (*(_QWORD *)(v132 + 40) - v135) >> 3)
              {
                v136 = *(_QWORD *)(v135 + 8 * (v123 >> 39));
                if (v136)
                {
                  v137 = *(unsigned __int16 *)(v136 + 2 * (HIDWORD(v123) & 0x7F));
                  v139 = *(_QWORD *)(v132 + 56);
                  v138 = *(_QWORD *)(v132 + 64);
                  if (v137 < (v138 - v139) >> 3)
                  {
                    v140 = v139 + 8 * v137;
                    if (v140 != v138 && *(_DWORD *)(v140 + 4) == HIDWORD(v123))
                    {
                      v142 = *(_QWORD *)(v132 + 80);
                      if (v142 + 168 * v137 != *(_QWORD *)(v132 + 88) && v142 != 0)
                        break;
                    }
                  }
                }
              }
LABEL_176:
              v144 = (uint64_t *)v104[8];
              v145 = v106 + 1;
              if (v106 + 1 != v144)
              {
                v146 = v104[4];
                v147 = v104[7];
                while (1)
                {
                  v148 = *((unsigned int *)v145 + 1);
                  if (v148 >> 7 < (v104[5] - v146) >> 3)
                  {
                    v149 = *(_QWORD *)(v146 + 8 * (v148 >> 7));
                    if (v149)
                    {
                      v150 = *(unsigned __int16 *)(v149 + 2 * (v148 & 0x7F));
                      if (((uint64_t)v144 - v147) >> 3 > v150)
                      {
                        v151 = v147 + 8 * v150;
                        if ((uint64_t *)v151 != v144 && *(_DWORD *)(v151 + 4) == (_DWORD)v148)
                          break;
                      }
                    }
                  }
                  if (++v145 == v144)
                    goto LABEL_139;
                }
                v144 = v145;
              }
LABEL_139:
              v106 = v144;
              v41 = v122;
              if (v105 == v144)
                goto LABEL_100;
            }
            v153 = 0;
            v154 = 0;
            v155 = v213;
            v156 = v214;
            v157 = v209;
            v158 = v210;
            v159 = v212;
            v160 = v211;
            v161 = (int *)(v142 + 168 * v137 + 4);
            v41 = v122;
            do
            {
              v222 = xmmword_19FFB3590;
              v223 = xmmword_19FFB3590;
              v224 = xmmword_19FFB36A0;
              v225 = xmmword_19FFB36B0;
              v226 = xmmword_19FFB36C0;
              v227 = xmmword_19FFB36D0;
              v162 = v122[111];
              v228 = xmmword_19FFB36E0;
              v229 = v162;
              v230 = xmmword_19FFB3700;
              v231 = 0x3E8483EDBF7746EDLL;
              v232 = 0;
              v163 = (char *)&v218 + v153;
              v164 = *(_QWORD *)((char *)&v222 + v154);
              v165.i32[0] = *(v161 - 1);
              *((_DWORD *)v163 + 2) = *(_DWORD *)((char *)&v222 + v154 + 8);
              *(_QWORD *)v163 = v164;
              v222 = xmmword_19FFB3590;
              v223 = xmmword_19FFB3590;
              v224 = xmmword_19FFB36A0;
              v225 = xmmword_19FFB36B0;
              v226 = xmmword_19FFB36C0;
              v227 = xmmword_19FFB36D0;
              v228 = xmmword_19FFB36E0;
              v229 = v162;
              v230 = xmmword_19FFB3700;
              v231 = 0x3E8483EDBF7746EDLL;
              v232 = 0;
              v165.i32[1] = *(_DWORD *)((char *)&v222 + v154);
              v166 = *v161;
              v161 += 2;
              v165.i64[1] = *(_QWORD *)((char *)&v222 + v154 + 4);
              *(float32x4_t *)(v163 + 12) = vnegq_f32(v165);
              *((_DWORD *)v163 + 7) = v166;
              v154 += 12;
              v153 += 32;
            }
            while (v154 != 156);
            v167 = 0;
            v168 = 0.0;
            v169 = 1.0;
            do
            {
              v170 = *(float *)((char *)&v218 + v167);
              v171 = *(float *)((char *)&v218 + v167 + 4);
              v172 = *(float *)((char *)&v218 + v167 + 8);
              v173 = (float)((float)(v170 * v159) + (float)(v171 * v155)) + (float)(v172 * v156);
              v174 = (float)((float)(*(float *)((char *)&v219 + v167 + 4) + (float)(v170 * v157)) + (float)(v171 * v158))
                   + (float)(v172 * v160);
              v175 = v173 <= 0.0;
              if (v173 == 0.0)
              {
                if (v174 < 0.0 || v168 > v169)
                  goto LABEL_176;
              }
              else
              {
                v176 = (float)-v174 / v173;
                if (v175)
                {
                  v169 = fminf(v176, v169);
                  if (v168 > v169)
                    goto LABEL_176;
                }
                else
                {
                  v168 = fmaxf(v168, v176);
                  if (v168 > v169)
                    goto LABEL_176;
                }
              }
              v167 += 16;
            }
            while (v167 != 416);
            v53 = __pa;
LABEL_201:
            v60 = 0;
            v177 = 0;
            v178 = v216[0];
            if (!v216[0])
              goto LABEL_203;
            goto LABEL_202;
          }
        }
LABEL_100:
        v61 = v187 + 2;
        v53 = __pa;
        if (v187 + 2 == (uint64_t *)v57)
        {
          v177 = 2;
          v60 = 1;
          v178 = v216[0];
          if (v216[0])
            goto LABEL_202;
          goto LABEL_203;
        }
      }
    }
    v177 = 2;
    v178 = v216[0];
    if (v216[0])
    {
      do
      {
LABEL_202:
        v179 = (_QWORD *)*v178;
        operator delete(v178);
        v178 = v179;
      }
      while (v179);
    }
LABEL_203:
    v180 = v215[0];
    v215[0] = 0;
    if (v180)
      operator delete(v180);
    v5 = this;
    if (v53)
      operator delete(v53);
    v50 = v186;
    if (!v60)
      goto LABEL_219;
  }
  v39 = v184;
  if (!*(_BYTE *)(v50 + 129) || (v182 = *(double **)(v50 + 104), v181 = *(double **)(v50 + 112), v182 == v181))
  {
LABEL_32:
    v10 = v188;
    v40 = v185;
    goto LABEL_33;
  }
  while (1)
  {
    v218 = 0.0;
    *(_QWORD *)&v222 = 0;
    if (gm::Ray<double,3>::segmentIntersectsBox(&v202, v182, &v218, (double *)&v222, 1.0))
      break;
    v182 += 6;
    if (v182 == v181)
      goto LABEL_32;
  }
  v177 = 1;
LABEL_219:
  if (v197 != v199)
    free(v197);
  return v177 < 2;
}

void sub_19FEEED10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a29 != a31)
    free(a29);
  if (a35 != a37)
    free(a35);
  _Unwind_Resume(exception_object);
}

void geo::MarkedLRUCache<md::Label *,gm::Matrix<double,3,1>,std::hash<md::Label *>,std::equal_to<md::Label *>>::insert(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _OWORD *v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  float v39;
  float v40;
  _BOOL8 v41;
  unint64_t v42;
  unint64_t v43;
  size_t prime;
  void *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  size_t v50;
  size_t v51;
  size_t v52;
  _QWORD *i;
  size_t v54;
  uint64_t v55;
  unint64_t v56;
  uint8x8_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  size_t v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  _QWORD *v65;

  v5 = a1 + 3;
  v6 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(a1 + 3, *(_QWORD *)a2);
  if (!v6)
  {
    v16 = operator new(0x38uLL);
    v17 = v16;
    v18 = *(_OWORD *)(a2 + 16);
    v16[1] = *(_OWORD *)a2;
    v16[2] = v18;
    *((_QWORD *)v16 + 6) = *(_QWORD *)(a2 + 32);
    ++a1[2];
    v19 = (uint64_t *)a1[8];
    v20 = a1[9] + *(_QWORD *)(a2 + 32);
    v21 = *a1;
    *(_QWORD *)(v21 + 8) = v16;
    *a1 = (uint64_t)v16;
    *(_QWORD *)v16 = v21;
    *((_QWORD *)v16 + 1) = a1;
    a1[9] = v20;
    if (v19 == a1)
      a1[8] = (uint64_t)v16;
    v22 = *(_QWORD *)a2;
    v23 = HIDWORD(*(_QWORD *)a2);
    v24 = 0x9DDFEA08EB382D69 * ((8 * *(_QWORD *)a2 + 8) ^ v23);
    v25 = (0x9DDFEA08EB382D69 * (v23 ^ (v24 >> 47) ^ v24)) ^ ((0x9DDFEA08EB382D69 * (v23 ^ (v24 >> 47) ^ v24)) >> 47);
    v26 = 0x9DDFEA08EB382D69 * v25;
    v27 = a1[4];
    if (v27)
    {
      v28 = (uint8x8_t)vcnt_s8((int8x8_t)v27);
      v28.i16[0] = vaddlv_u8(v28);
      if (v28.u32[0] > 1uLL)
      {
        v2 = 0x9DDFEA08EB382D69 * v25;
        if (v26 >= v27)
          v2 = v26 % v27;
      }
      else
      {
        v2 = v26 & (v27 - 1);
      }
      v34 = *(_QWORD **)(*v5 + 8 * v2);
      if (v34)
      {
        v35 = (_QWORD *)*v34;
        if (v35)
        {
          if (v28.u32[0] < 2uLL)
          {
            while (1)
            {
              v37 = v35[1];
              if (v37 == v26)
              {
                if (v35[2] == v22)
                  return;
              }
              else if ((v37 & (v27 - 1)) != v2)
              {
                goto LABEL_33;
              }
              v35 = (_QWORD *)*v35;
              if (!v35)
                goto LABEL_33;
            }
          }
          do
          {
            v36 = v35[1];
            if (v36 == v26)
            {
              if (v35[2] == v22)
                return;
            }
            else
            {
              if (v36 >= v27)
                v36 %= v27;
              if (v36 != v2)
                break;
            }
            v35 = (_QWORD *)*v35;
          }
          while (v35);
        }
      }
    }
LABEL_33:
    v38 = operator new(0x20uLL);
    *v38 = 0;
    v38[1] = v26;
    v38[2] = v22;
    v38[3] = v17;
    v39 = (float)(unint64_t)(a1[6] + 1);
    v40 = *((float *)a1 + 14);
    if (v27 && (float)(v40 * (float)v27) >= v39)
    {
LABEL_83:
      v62 = (_QWORD *)*v5;
      v63 = *(_QWORD **)(*v5 + 8 * v2);
      if (v63)
      {
        *v38 = *v63;
      }
      else
      {
        *v38 = a1[5];
        a1[5] = (uint64_t)v38;
        v62[v2] = a1 + 5;
        if (!*v38)
        {
LABEL_92:
          ++a1[6];
          return;
        }
        v64 = *(_QWORD *)(*v38 + 8);
        if ((v27 & (v27 - 1)) != 0)
        {
          if (v64 >= v27)
            v64 %= v27;
        }
        else
        {
          v64 &= v27 - 1;
        }
        v63 = (_QWORD *)(*v5 + 8 * v64);
      }
      *v63 = v38;
      goto LABEL_92;
    }
    v41 = 1;
    if (v27 >= 3)
      v41 = (v27 & (v27 - 1)) != 0;
    v42 = v41 | (2 * v27);
    v43 = vcvtps_u32_f32(v39 / v40);
    if (v42 <= v43)
      prime = v43;
    else
      prime = v42;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v27 = a1[4];
    }
    if (prime <= v27)
    {
      if (prime >= v27)
        goto LABEL_70;
      v56 = vcvtps_u32_f32((float)(unint64_t)a1[6] / *((float *)a1 + 14));
      if (v27 < 3 || (v57 = (uint8x8_t)vcnt_s8((int8x8_t)v27), v57.i16[0] = vaddlv_u8(v57), v57.u32[0] > 1uLL))
      {
        v56 = std::__next_prime(v56);
      }
      else
      {
        v58 = 1 << -(char)__clz(v56 - 1);
        if (v56 >= 2)
          v56 = v58;
      }
      if (prime <= v56)
        prime = v56;
      if (prime >= v27)
      {
        v27 = a1[4];
LABEL_70:
        if ((v27 & (v27 - 1)) != 0)
        {
          if (v26 >= v27)
            v2 = v26 % v27;
          else
            v2 = v26;
        }
        else
        {
          v2 = (v27 - 1) & v26;
        }
        goto LABEL_83;
      }
      if (!prime)
      {
        v65 = (_QWORD *)*v5;
        *v5 = 0;
        if (v65)
          operator delete(v65);
        v27 = 0;
        a1[4] = 0;
        goto LABEL_70;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v45 = operator new(8 * prime);
    v46 = (_QWORD *)*v5;
    *v5 = v45;
    if (v46)
      operator delete(v46);
    v47 = 0;
    a1[4] = prime;
    do
      *(_QWORD *)(*v5 + 8 * v47++) = 0;
    while (prime != v47);
    v49 = a1 + 5;
    v48 = (_QWORD *)a1[5];
    if (!v48)
    {
LABEL_69:
      v27 = prime;
      goto LABEL_70;
    }
    v50 = v48[1];
    v51 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v52 = v50 & v51;
      *(_QWORD *)(*v5 + 8 * v52) = v49;
      for (i = (_QWORD *)*v48; *v48; i = (_QWORD *)*v48)
      {
        v54 = i[1] & v51;
        if (v54 == v52)
        {
          v48 = i;
        }
        else if (*(_QWORD *)(*v5 + 8 * v54))
        {
          *v48 = *i;
          v55 = 8 * v54;
          *i = **(_QWORD **)(*v5 + v55);
          **(_QWORD **)(*v5 + v55) = i;
        }
        else
        {
          *(_QWORD *)(*v5 + 8 * v54) = v48;
          v48 = i;
          v52 = v54;
        }
      }
      goto LABEL_69;
    }
    if (v50 >= prime)
      v50 %= prime;
    *(_QWORD *)(*v5 + 8 * v50) = v49;
    v59 = (_QWORD *)*v48;
    if (!*v48)
      goto LABEL_69;
    while (1)
    {
      v61 = v59[1];
      if (v61 >= prime)
        v61 %= prime;
      if (v61 != v50)
      {
        if (!*(_QWORD *)(*v5 + 8 * v61))
        {
          *(_QWORD *)(*v5 + 8 * v61) = v48;
          goto LABEL_74;
        }
        *v48 = *v59;
        v60 = 8 * v61;
        *v59 = **(_QWORD **)(*v5 + v60);
        **(_QWORD **)(*v5 + v60) = v59;
        v59 = v48;
      }
      v61 = v50;
LABEL_74:
      v48 = v59;
      v59 = (_QWORD *)*v59;
      v50 = v61;
      if (!v59)
        goto LABEL_69;
    }
  }
  v7 = v6;
  v8 = (uint64_t *)v6[3];
  v9 = operator new(0x38uLL);
  v10 = v9;
  v11 = *(_OWORD *)(a2 + 16);
  v9[1] = *(_OWORD *)a2;
  v9[2] = v11;
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 32);
  v12 = *a1;
  *(_QWORD *)(v12 + 8) = v9;
  *a1 = (uint64_t)v9;
  *(_QWORD *)v9 = v12;
  *((_QWORD *)v9 + 1) = a1;
  v13 = a1[2];
  a1[2] = v13 + 1;
  v14 = (uint64_t *)a1[8];
  if (v14 == v8)
  {
    v15 = (_OWORD *)v8[1];
LABEL_11:
    a1[8] = (uint64_t)v15;
    goto LABEL_12;
  }
  v15 = v9;
  if (v14 == a1)
    goto LABEL_11;
LABEL_12:
  v29 = v8[6];
  v30 = a1[9];
  v31 = v30 >= v29;
  v32 = v30 - v29;
  if (!v31)
    v32 = 0;
  a1[9] = v32 + *(_QWORD *)(a2 + 32);
  v33 = *v8;
  *(_QWORD *)(v33 + 8) = v8[1];
  *(_QWORD *)v8[1] = v33;
  a1[2] = v13;
  operator delete(v8);
  v7[3] = v10;
}

void sub_19FEEF364(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = *a2;
  v4 = *result;
  if (*a2 != *result)
  {
    v5 = *(_QWORD *)(v3 + 24);
    v6 = *(_QWORD *)(v4 + 24);
    if (v5 == v6)
    {
      if (*(_DWORD *)(v3 + 32) < *(_DWORD *)(v4 + 32))
        goto LABEL_4;
    }
    else if (v5 < v6)
    {
LABEL_4:
      v7 = *a3;
      if (*a3 != v3)
      {
        v8 = *(_QWORD *)(v7 + 24);
        if (v8 == v5)
        {
          if (*(_DWORD *)(v7 + 32) < *(_DWORD *)(v3 + 32))
            goto LABEL_7;
        }
        else if (v8 < v5)
        {
LABEL_7:
          *result++ = v7;
          *a3 = v4;
          v9 = a3 + 1;
LABEL_25:
          v13 = v9;
          goto LABEL_26;
        }
      }
      *result = v3;
      *a2 = v4;
      v20 = result[1];
      result[1] = a2[1];
      a2[1] = v20;
      v21 = *a3;
      v22 = *a2;
      if (*a3 != *a2)
      {
        v23 = *(_QWORD *)(v21 + 24);
        v24 = *(_QWORD *)(v22 + 24);
        v25 = v23 >= v24;
        if (v23 == v24)
          v25 = *(_DWORD *)(v21 + 32) >= *(_DWORD *)(v22 + 32);
        if (!v25)
        {
          *a2 = v21;
          *a3 = v22;
          v9 = a3 + 1;
          result = a2 + 1;
          goto LABEL_25;
        }
      }
      return result;
    }
  }
  v10 = *a3;
  if (*a3 == v3)
    return result;
  v11 = *(_QWORD *)(v10 + 24);
  v12 = *(_QWORD *)(v3 + 24);
  if (v11 == v12)
  {
    if (*(_DWORD *)(v10 + 32) >= *(_DWORD *)(v3 + 32))
      return result;
  }
  else if (v11 >= v12)
  {
    return result;
  }
  *a2 = v10;
  *a3 = v3;
  v13 = a2 + 1;
  v14 = a2[1];
  a2[1] = a3[1];
  a3[1] = v14;
  v15 = *a2;
  v16 = *result;
  if (*a2 != *result)
  {
    v17 = *(_QWORD *)(v15 + 24);
    v18 = *(_QWORD *)(v16 + 24);
    v19 = v17 >= v18;
    if (v17 == v18)
      v19 = *(_DWORD *)(v15 + 32) >= *(_DWORD *)(v16 + 32);
    if (!v19)
    {
      *result++ = v15;
      *a2 = v16;
LABEL_26:
      v26 = *result;
      *result = *v13;
      *v13 = v26;
    }
  }
  return result;
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (*a4 != *a3)
  {
    v11 = *(_QWORD *)(v9 + 24);
    v12 = *(_QWORD *)(v10 + 24);
    if (v11 == v12)
    {
      if (*(_DWORD *)(v9 + 32) >= *(_DWORD *)(v10 + 32))
        return result;
    }
    else if (v11 >= v12)
    {
      return result;
    }
    *a3 = v9;
    *a4 = v10;
    v13 = a3[1];
    a3[1] = a4[1];
    a4[1] = v13;
    v14 = *a3;
    v15 = *a2;
    if (*a3 != *a2)
    {
      v16 = *(_QWORD *)(v14 + 24);
      v17 = *(_QWORD *)(v15 + 24);
      v18 = v16 >= v17;
      if (v16 == v17)
        v18 = *(_DWORD *)(v14 + 32) >= *(_DWORD *)(v15 + 32);
      if (!v18)
      {
        *a2 = v14;
        *a3 = v15;
        v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        v20 = *a2;
        v21 = *a1;
        if (*a2 != *a1)
        {
          v22 = *(_QWORD *)(v20 + 24);
          v23 = *(_QWORD *)(v21 + 24);
          v24 = v22 >= v23;
          if (v22 == v23)
            v24 = *(_DWORD *)(v20 + 32) >= *(_DWORD *)(v21 + 32);
          if (!v24)
          {
            *a1 = v20;
            *a2 = v21;
            v25 = a1[1];
            a1[1] = a2[1];
            a2[1] = v25;
          }
        }
      }
    }
  }
  return result;
}

uint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (*a5 != *a4)
  {
    v13 = *(_QWORD *)(v11 + 24);
    v14 = *(_QWORD *)(v12 + 24);
    if (v13 == v14)
    {
      if (*(_DWORD *)(v11 + 32) >= *(_DWORD *)(v12 + 32))
        return result;
    }
    else if (v13 >= v14)
    {
      return result;
    }
    *a4 = v11;
    *a5 = v12;
    v15 = a4[1];
    a4[1] = a5[1];
    a5[1] = v15;
    v16 = *a4;
    v17 = *a3;
    if (*a4 != *a3)
    {
      v18 = *(_QWORD *)(v16 + 24);
      v19 = *(_QWORD *)(v17 + 24);
      v20 = v18 >= v19;
      if (v18 == v19)
        v20 = *(_DWORD *)(v16 + 32) >= *(_DWORD *)(v17 + 32);
      if (!v20)
      {
        *a3 = v16;
        *a4 = v17;
        v21 = a3[1];
        a3[1] = a4[1];
        a4[1] = v21;
        v22 = *a3;
        v23 = *a2;
        if (*a3 != *a2)
        {
          v24 = *(_QWORD *)(v22 + 24);
          v25 = *(_QWORD *)(v23 + 24);
          v26 = v24 >= v25;
          if (v24 == v25)
            v26 = *(_DWORD *)(v22 + 32) >= *(_DWORD *)(v23 + 32);
          if (!v26)
          {
            *a2 = v22;
            *a3 = v23;
            v27 = a2[1];
            a2[1] = a3[1];
            a3[1] = v27;
            v28 = *a2;
            v29 = *a1;
            if (*a2 != *a1)
            {
              v30 = *(_QWORD *)(v28 + 24);
              v31 = *(_QWORD *)(v29 + 24);
              v32 = v30 >= v31;
              if (v30 == v31)
                v32 = *(_DWORD *)(v28 + 32) >= *(_DWORD *)(v29 + 32);
              if (!v32)
              {
                *a1 = v28;
                *a2 = v29;
                v33 = a1[1];
                a1[1] = a2[1];
                a2[1] = v33;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 != *a1)
      {
        v8 = *(_QWORD *)(v6 + 24);
        v9 = *(_QWORD *)(v7 + 24);
        v10 = v8 >= v9;
        if (v8 == v9)
          v10 = *(_DWORD *)(v6 + 32) >= *(_DWORD *)(v7 + 32);
        if (!v10)
        {
          *a1 = v6;
          *(a2 - 2) = v7;
          v11 = a1[1];
          a1[1] = *(a2 - 1);
          *(a2 - 1) = v11;
        }
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *,0>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v12 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *>(a1, a1 + 2, a1 + 4);
      v13 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *v13;
    v16 = *v12;
    if (*v13 == *v12)
      goto LABEL_10;
    v17 = *(_QWORD *)(v15 + 24);
    v18 = *(_QWORD *)(v16 + 24);
    if (v17 == v18)
      break;
    if (v17 < v18)
      goto LABEL_16;
LABEL_10:
    v12 = v13;
    v13 += 2;
    if (v13 == a2)
      return 1;
  }
  if (*(_DWORD *)(v15 + 32) >= *(_DWORD *)(v16 + 32))
    goto LABEL_10;
LABEL_16:
  v19 = v13[1];
  v20 = v13;
  *v13 = 0;
  v13[1] = 0;
  while (1)
  {
    v21 = v20;
    v20 = v12;
    v22 = v12[1];
    *v12 = 0;
    v12[1] = 0;
    v23 = (std::__shared_weak_count *)v21[1];
    *v21 = v16;
    v21[1] = v22;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v20 == a1)
      break;
    v12 = v20 - 2;
    v16 = *(v20 - 2);
    if (v15 != v16)
    {
      v26 = *(_QWORD *)(v15 + 24);
      v27 = *(_QWORD *)(v16 + 24);
      v28 = v26 >= v27;
      if (v26 == v27)
        v28 = *(_DWORD *)(v15 + 32) >= *(_DWORD *)(v16 + 32);
      if (!v28)
        continue;
    }
    goto LABEL_28;
  }
  v20 = a1;
LABEL_28:
  v29 = (std::__shared_weak_count *)v20[1];
  *v20 = v15;
  v20[1] = v19;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (++v14 != 8)
    goto LABEL_10;
  return v13 + 2 == a2;
}

void ___ZL34GEOGetVectorKitARWalkingLabelerLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VectorKit", "ARWalkingLabeler");
  v1 = (void *)GEOGetVectorKitARWalkingLabelerLog(void)::log;
  GEOGetVectorKitARWalkingLabelerLog(void)::log = (uint64_t)v0;

}

void md::ARWalkingLabelMarker::~ARWalkingLabelMarker(md::ARWalkingLabelMarker *this)
{
  unsigned __int8 *v2;
  unsigned __int8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)this = &off_1E4297EB0;
  v2 = (unsigned __int8 *)(*((_QWORD *)this + 36) + 1297);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 - 1, v2));
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  if (!v4)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
    if (!v7)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
    if (!v7)
      goto LABEL_13;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_13:
  md::LabelMarker::~LabelMarker(this);
}

{
  unsigned __int8 *v2;
  unsigned __int8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)this = &off_1E4297EB0;
  v2 = (unsigned __int8 *)(*((_QWORD *)this + 36) + 1297);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 - 1, v2));
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  if (!v4)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
    if (!v7)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
    if (!v7)
      goto LABEL_13;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_13:
  md::LabelMarker::~LabelMarker(this);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t md::ARWalkingLabelMarker::isOccluded(md::ARWalkingLabelMarker *this)
{
  return *((unsigned __int8 *)this + 342);
}

void std::__shared_ptr_emplace<md::ARWalkingLabelMarker>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::ARWalkingLabelMarker>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC318;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::ARWalkingLabelMarker>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__destroy_at[abi:nn180100]<std::pair<std::shared_ptr<md::LabelFeature>,std::vector<md::ARWalkingLabelDebugData>>,0>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = a1[2];
  if (v2)
  {
    v3 = a1[3];
    v4 = (void *)a1[2];
    if (v3 == v2)
    {
LABEL_17:
      a1[3] = v2;
      operator delete(v4);
      goto LABEL_18;
    }
    while (1)
    {
      v5 = *(std::__shared_weak_count **)(v3 - 104);
      if (!v5)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v8 = *(std::__shared_weak_count **)(v3 - 120);
        if (v8)
        {
LABEL_10:
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
LABEL_9:
        v8 = *(std::__shared_weak_count **)(v3 - 120);
        if (v8)
          goto LABEL_10;
      }
      v3 -= 128;
      if (v3 == v2)
      {
        v4 = (void *)a1[2];
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

uint64_t md::ARWalkingLabelDebugData::ARWalkingLabelDebugData(uint64_t a1, _QWORD *a2, _QWORD *a3, char a4, char a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v12 = *a2;
  v13 = *(_QWORD *)(*a2 + 16);
  *(_QWORD *)a1 = *(_QWORD *)(*a2 + 8);
  *(_QWORD *)(a1 + 8) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v12 = *a2;
  }
  v16 = a2[1];
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *a2;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(*a2 + 48);
  v20 = *(_OWORD *)(v19 + 592);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v19 + 608);
  *(_OWORD *)(a1 + 40) = v20;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(*a2 + 152);
  *(_QWORD *)(a1 + 80) = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 144))();
  *(_QWORD *)(a1 + 88) = v21;
  *(_QWORD *)(a1 + 96) = *a3;
  v22 = *a2;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(*a2 + 821);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(v22 + 820);
  *(_BYTE *)(a1 + 106) = a4;
  *(_BYTE *)(a1 + 107) = a5;
  *(_QWORD *)(a1 + 112) = a6;
  *(double *)(a1 + 120) = *(float *)(v22 + 768);
  return a1;
}

void sub_19FEEFE00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(std::__shared_weak_count **)(v1 + 8);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<md::ARWalkingLabelDebugData>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 128;
    v4 = *(std::__shared_weak_count **)(i - 104);
    if (!v4)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(std::__shared_weak_count **)(i - 120);
      if (!v7)
        continue;
    }
    else
    {
LABEL_8:
      v7 = *(std::__shared_weak_count **)(i - 120);
      if (!v7)
        continue;
    }
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::pair<std::shared_ptr<md::LabelFeature>,std::vector<md::ARWalkingLabelDebugData>>::pair[abi:nn180100](_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  v6 = a2[2];
  v7 = a2[3];
  v8 = v7 - v6;
  if (v7 != v6)
  {
    if (v8 < 0)
      abort();
    v9 = (char *)operator new(v7 - v6);
    a1[2] = v9;
    a1[3] = v9;
    a1[4] = &v9[128 * (v8 >> 7)];
    do
    {
      v14 = *(_QWORD *)(v6 + 8);
      *(_QWORD *)v9 = *(_QWORD *)v6;
      *((_QWORD *)v9 + 1) = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = *(_QWORD *)(v6 + 24);
      *((_QWORD *)v9 + 2) = *(_QWORD *)(v6 + 16);
      *((_QWORD *)v9 + 3) = v17;
      if (v17)
      {
        v18 = (unint64_t *)(v17 + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v10 = *(_OWORD *)(v6 + 32);
      v11 = *(_OWORD *)(v6 + 48);
      v12 = *(_OWORD *)(v6 + 64);
      *(_OWORD *)(v9 + 77) = *(_OWORD *)(v6 + 77);
      *((_OWORD *)v9 + 3) = v11;
      *((_OWORD *)v9 + 4) = v12;
      *((_OWORD *)v9 + 2) = v10;
      *((_QWORD *)v9 + 12) = *(_QWORD *)(v6 + 96);
      v13 = *(_OWORD *)(v6 + 104);
      *((_QWORD *)v9 + 15) = *(_QWORD *)(v6 + 120);
      *(_OWORD *)(v9 + 104) = v13;
      v6 += 128;
      v9 += 128;
    }
    while (v6 != v7);
    a1[3] = v9;
  }
  return a1;
}

void sub_19FEF0058(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::shared_ptr<md::LabelFeature>,std::vector<md::ARWalkingLabelDebugData>>::~pair(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = a1[2];
  if (v2)
  {
    v3 = a1[3];
    v4 = (void *)a1[2];
    if (v3 == v2)
    {
LABEL_17:
      a1[3] = v2;
      operator delete(v4);
      goto LABEL_18;
    }
    while (1)
    {
      v5 = *(std::__shared_weak_count **)(v3 - 104);
      if (!v5)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v8 = *(std::__shared_weak_count **)(v3 - 120);
        if (v8)
        {
LABEL_10:
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
LABEL_9:
        v8 = *(std::__shared_weak_count **)(v3 - 120);
        if (v8)
          goto LABEL_10;
      }
      v3 -= 128;
      if (v3 == v2)
      {
        v4 = (void *)a1[2];
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return a1;
}

void **std::vector<md::ARWalkingLabelDebugData>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_17:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 13);
      if (!v5)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 15);
        if (v8)
        {
LABEL_10:
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
LABEL_9:
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 15);
        if (v8)
          goto LABEL_10;
      }
      v3 -= 128;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_17;
      }
    }
  }
  return a1;
}

uint64_t std::__split_buffer<std::pair<std::shared_ptr<md::LabelFeature>,std::vector<md::ARWalkingLabelDebugData>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    std::__destroy_at[abi:nn180100]<std::pair<std::shared_ptr<md::LabelFeature>,std::vector<md::ARWalkingLabelDebugData>>,0>((_QWORD *)(i - 40));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19FEF049C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  md::ARWalkingLabeler::{unnamed type#4}::~ARWalkingLabeler(v1 + 1968);
  md::ARWalkingLabeler::{unnamed type#3}::~ARWalkingLabeler(v1 + 1640);
  md::ARWalkingLabeler::{unnamed type#2}::~ARWalkingLabeler(v1 + 480);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 456);
  v3 = *(_QWORD *)(v1 + 448);
  *(_QWORD *)(v1 + 448) = 0;
  if (v3)
    std::default_delete<md::LabelExternalMeshModerator>::operator()[abi:nn180100](v3);
  std::unique_ptr<md::ARWalkingSupport>::~unique_ptr[abi:nn180100]((md::ARWalkingSupport **)(v1 + 440));
  md::StandardLabeler::~StandardLabeler((md::StandardLabeler *)v1);
  _Unwind_Resume(a1);
}

uint64_t md::ARWalkingLabeler::{unnamed type#4}::~ARWalkingLabeler(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;

  v2 = *(std::__shared_weak_count **)(a1 + 280);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 240);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 240);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *(_QWORD *)(a1 + 200);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 208);
    v10 = *(void **)(a1 + 200);
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 24;
      }
      while (v9 != v8);
      v10 = *(void **)(a1 + 200);
    }
    *(_QWORD *)(a1 + 208) = v8;
    operator delete(v10);
  }
  v14 = *(_QWORD **)(a1 + 160);
  if (v14)
  {
    do
    {
      v15 = (_QWORD *)*v14;
      operator delete(v14);
      v14 = v15;
    }
    while (v15);
  }
  v16 = *(void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v16)
    operator delete(v16);
  if (*(_QWORD *)(a1 + 136))
  {
    v18 = *(_QWORD *)(a1 + 120);
    v17 = *(uint64_t **)(a1 + 128);
    v19 = *v17;
    *(_QWORD *)(v19 + 8) = *(_QWORD *)(v18 + 8);
    **(_QWORD **)(v18 + 8) = v19;
    *(_QWORD *)(a1 + 136) = 0;
    if (v17 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v20 = (uint64_t *)v17[1];
        operator delete(v17);
        v17 = v20;
      }
      while (v20 != (uint64_t *)(a1 + 120));
    }
  }
  *(_QWORD *)(a1 + 72) = &off_1E42B4B90;

  v21 = *(_QWORD **)(a1 + 48);
  if (v21)
  {
    v22 = *(_QWORD **)(a1 + 56);
    v23 = *(void **)(a1 + 48);
    if (v22 != v21)
    {
      do
      {
        v22 -= 5;
        std::__destroy_at[abi:nn180100]<std::pair<std::shared_ptr<md::LabelFeature>,std::vector<md::ARWalkingLabelDebugData>>,0>(v22);
      }
      while (v22 != v21);
      v23 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v21;
    operator delete(v23);
  }
  *(_QWORD *)(a1 + 16) = &off_1E42B4D90;

  return a1;
}

uint64_t md::ARWalkingLabeler::{unnamed type#3}::~ARWalkingLabeler(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  v2 = *(_QWORD **)(a1 + 304);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(_QWORD **)(a1 + 264);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *(void **)(a1 + 248);
  *(_QWORD *)(a1 + 248) = 0;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD **)(a1 + 208);
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = *(void **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v10)
    operator delete(v10);
  if (*(_QWORD *)(a1 + 184))
  {
    v12 = *(_QWORD *)(a1 + 168);
    v11 = *(uint64_t **)(a1 + 176);
    v13 = *v11;
    *(_QWORD *)(v13 + 8) = *(_QWORD *)(v12 + 8);
    **(_QWORD **)(v12 + 8) = v13;
    *(_QWORD *)(a1 + 184) = 0;
    if (v11 != (uint64_t *)(a1 + 168))
    {
      do
      {
        v14 = (uint64_t *)v11[1];
        operator delete(v11);
        v11 = v14;
      }
      while (v14 != (uint64_t *)(a1 + 168));
    }
  }
  v15 = *(std::__shared_weak_count **)(a1 + 88);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)(a1 + 48) = &off_1E42B4D90;

  v18 = *(std::__shared_weak_count **)(a1 + 40);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return a1;
}

uint64_t md::Monitorable<md::Transformable<md::ConfigValue<GEOConfigKeyDouble,double>>>::~Monitorable(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  if (*(_QWORD *)(a1 + 64))
  {
    GEOConfigRemoveBlockListener();
    v2 = *(void **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;

  }
  atomic_store(0, *(unsigned __int8 **)(a1 + 72));
  v3 = *(_QWORD **)(a1 + 112);
  if (v3 == (_QWORD *)(a1 + 88))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 88);
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = *(std::__shared_weak_count **)(a1 + 80);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  v8 = *(_QWORD **)(a1 + 56);
  if (v8 == (_QWORD *)(a1 + 32))
  {
    v9 = 4;
    v8 = (_QWORD *)(a1 + 32);
    goto LABEL_17;
  }
  if (v8)
  {
    v9 = 5;
LABEL_17:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return a1;
}

void sub_19FEF0910(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = *(_QWORD **)(v1 + 112);
  if (v3 == (_QWORD *)(v1 + 88))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 + 88);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100](v1 + 72);

  v5 = *(_QWORD **)(v1 + 56);
  if (v5 == (_QWORD *)(v1 + 32))
  {
    v6 = 4;
    v5 = (_QWORD *)(v1 + 32);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  _Unwind_Resume(a1);
}

void md::ARWalkingSupport::~ARWalkingSupport(md::ARWalkingSupport *this)
{
  void (***v2)(uint64_t);
  void (**v3)(uint64_t);
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  md::HighPrecisionAltitudeRequestor *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (void (***)(uint64_t))*((_QWORD *)this + 115);
  if (v2)
  {
    do
    {
      v3 = *v2;
      (*v2[2])((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = (void (***)(uint64_t))v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 113);
  *((_QWORD *)this + 113) = 0;
  if (v4)
    operator delete(v4);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((_QWORD **)this + 106));
  v5 = (_QWORD *)*((_QWORD *)this + 101);
  while (v5)
  {
    v8 = v5;
    v5 = (_QWORD *)*v5;
    v9 = (std::__shared_weak_count *)v8[3];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**((_QWORD **)this + 102) + 40))(*((_QWORD *)this + 102), v8, 32);
  }
  v6 = *((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (v6)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 100) + 40))(*((_QWORD *)this + 100), v6, 8 * *((_QWORD *)this + 99));
  v7 = (md::HighPrecisionAltitudeRequestor *)*((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v7)
  {
    md::HighPrecisionAltitudeRequestor::~HighPrecisionAltitudeRequestor(v7);
    MEMORY[0x1A1AF4E00]();
  }
  md::ARWalkingFeatureSet::~ARWalkingFeatureSet((md::ARWalkingSupport *)((char *)this + 440));
  if (*((_BYTE *)this + 432))
    md::ARWalkingFeatureSet::~ARWalkingFeatureSet((md::ARWalkingSupport *)((char *)this + 96));
  if (*((_BYTE *)this + 88))
  {
    *((_QWORD *)this + 7) = &off_1E42B4F50;

  }
}

uint64_t md::ARWalkingLabeler::{unnamed type#2}::~ARWalkingLabeler(uint64_t a1)
{
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable(a1 + 1080);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable(a1 + 1000);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(a1 + 920);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(a1 + 840);
  md::Monitorable<md::ConfigValue<GEOConfigKeyUInteger,unsigned int>>::~Monitorable(a1 + 760);
  md::Monitorable<md::ConfigValue<GEOConfigKeyUInteger,unsigned int>>::~Monitorable(a1 + 680);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(a1 + 600);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable(a1 + 520);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(a1 + 440);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable(a1 + 360);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable(a1 + 280);
  md::Monitorable<md::Transformable<md::ConfigValue<GEOConfigKeyDouble,double>>>::~Monitorable(a1 + 160);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable(a1 + 80);
  return md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable(a1);
}

md::ARWalkingSupport **std::unique_ptr<md::ARWalkingSupport>::~unique_ptr[abi:nn180100](md::ARWalkingSupport **a1)
{
  md::ARWalkingSupport *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::ARWalkingSupport::~ARWalkingSupport(v2);
    MEMORY[0x1A1AF4E00]();
  }
  return a1;
}

uint64_t ARStringForFeature(_BYTE *a1, id **a2)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  id *v8;
  id v9;
  __CFString *v10;
  __CFString *v11;
  const char *v12;
  size_t v13;
  char v14;
  size_t v15;
  unint64_t v16;
  const void **v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  _QWORD v28[3];
  _QWORD v29[3];
  uint64_t v30;
  unint64_t v31;
  void *__p;
  char v33;
  unint64_t v34;
  int v35;
  uint64_t v36;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v27);
  v4 = (*((uint64_t (**)(id *))**a2 + 33))(*a2);
  md::to_string((uint64_t)v24, v4);
  if (v25 >= 0)
    v5 = v24;
  else
    v5 = (_QWORD *)v24[0];
  if (v25 >= 0)
    v6 = HIBYTE(v25);
  else
    v6 = v24[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)v5, v6);
  if (SHIBYTE(v25) < 0)
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v26 + 40))(v26, v24[0], v25 & 0x7FFFFFFFFFFFFFFFLL);
  v7 = (*((uint64_t (**)(id *))**a2 + 33))(*a2);
  v8 = *a2;
  if (v7 == 24)
  {
    v9 = v8[85];
    objc_msgSend(v9, "displayText");
    v10 = (__CFString *)objc_claimAutoreleasedReturnValue();

    goto LABEL_13;
  }
  if ((*((unsigned int (**)(id *))*v8 + 33))(v8) == 26)
  {
    objc_msgSend((*a2)[25], "displayText");
    v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_13:
    if (!v10)
      v10 = CFSTR("<NOTEXT>");
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)":", 1);
    v11 = objc_retainAutorelease(v10);
    v12 = (const char *)-[__CFString UTF8String](v11, "UTF8String");
    v13 = strlen(v12);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)v12, v13);
    v14 = v35;
    if ((v35 & 0x10) == 0)
      goto LABEL_16;
LABEL_19:
    v16 = v34;
    if (v34 < v31)
    {
      v34 = v31;
      v16 = v31;
    }
    v17 = (const void **)&v30;
    goto LABEL_23;
  }
  v11 = 0;
  v14 = v35;
  if ((v35 & 0x10) != 0)
    goto LABEL_19;
LABEL_16:
  if ((v14 & 8) == 0)
  {
    v15 = 0;
    a1[23] = 0;
    goto LABEL_31;
  }
  v17 = (const void **)v29;
  v16 = v29[2];
LABEL_23:
  v18 = *v17;
  v15 = v16 - (_QWORD)*v17;
  if (v15 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v15 >= 0x17)
  {
    v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v19 = v15 | 7;
    v20 = v19 + 1;
    v21 = operator new(v19 + 1);
    *((_QWORD *)a1 + 1) = v15;
    *((_QWORD *)a1 + 2) = v20 | 0x8000000000000000;
    *(_QWORD *)a1 = v21;
    a1 = v21;
    goto LABEL_30;
  }
  a1[23] = v15;
  if (v15)
LABEL_30:
    memmove(a1, v18, v15);
LABEL_31:
  a1[v15] = 0;

  v27[0] = *MEMORY[0x1E0DE4F50];
  v22 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v27 + *(_QWORD *)(v27[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v28[0] = v22;
  v28[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v33 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AF4D64](&v36);
}

void sub_19FEF0E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_10,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_10>,void ()(double)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_10,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_10>,void ()(double)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CD190;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_10,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_10>,void ()(double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CD190;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_10,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_10>,void ()(double)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  NSObject *v4;
  int v5;
  double v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 440);
  v3 = *(double *)(v1 + 1576);
  if (*(double *)(v2 + 40) != v3)
  {
    if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
    v4 = GEOGetVectorKitARWalkingSupportLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
    {
      v5 = 134217984;
      v6 = v3;
      _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_INFO, "maxDelayPostLocalizationWithExistingFeatures:%f", (uint8_t *)&v5, 0xCu);
    }
    *(double *)(v2 + 40) = v3;
  }
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_9,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_9>,void ()(double)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_9,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_9>,void ()(double)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CD148;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_9,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_9>,void ()(double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CD148;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_9,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_9>,void ()(double)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  NSObject *v4;
  int v5;
  double v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 440);
  v3 = *(double *)(v1 + 1496);
  if (*(double *)(v2 + 32) != v3)
  {
    if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
    v4 = GEOGetVectorKitARWalkingSupportLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
    {
      v5 = 134217984;
      v6 = v3;
      _os_log_impl(&dword_19F029000, v4, OS_LOG_TYPE_INFO, "maxDelayPostLocalizationWithoutExistingFeatures:%f", (uint8_t *)&v5, 0xCu);
    }
    *(double *)(v2 + 32) = v3;
  }
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_8,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_8>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_8,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_8>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CD100;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_8,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_8>,void ()(BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CD100;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_8,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_8>,void ()(BOOL)>::operator()(uint64_t a1)
{
  md::ARWalkingSupport::setPerpendicularLayoutEnabled(*(md::ARWalkingSupport **)(*(_QWORD *)(a1 + 8) + 440), *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 1416));
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_7,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_7>,void ()(unsigned int)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_7,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_7>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CD0B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_7,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_7>,void ()(unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CD0B8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_6,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_6>,void ()(unsigned int)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_6,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_6>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CD070;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_6,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_6>,void ()(unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CD070;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_6,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_6>,void ()(unsigned int)>::operator()(uint64_t a1)
{
  md::ARWalkingSupport::setHighPrecisionZLevel(*(md::ARWalkingSupport **)(*(_QWORD *)(a1 + 8) + 440), *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 1176));
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_5,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_5>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_5,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_5>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CD028;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_5,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_5>,void ()(BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CD028;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_5,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_5>,void ()(BOOL)>::operator()(uint64_t a1)
{
  md::ARWalkingSupport::setShouldUse3DArrival(*(md::ARWalkingSupport **)(*(_QWORD *)(a1 + 8) + 440), *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 1096));
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_4,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_4>,void ()(double)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_4,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_4>,void ()(double)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CCFE0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_4,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_4>,void ()(double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CCFE0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_4,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_4>,void ()(double)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 440);
  v3 = *(_QWORD *)(v1 + 1016);
  md::ARWalkingSupport::setHighPrecisionAltitudeDistanceThreshold(v2, (double *)&v3);
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_3,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_3>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_3,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_3>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CCF98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_3,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_3>,void ()(BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CCF98;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_3,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_3>,void ()(BOOL)>::operator()(uint64_t a1)
{
  md::ARWalkingSupport::shouldUseHighPrecisionAltitude(*(md::ARWalkingSupport **)(*(_QWORD *)(a1 + 8) + 440), *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 936));
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_2,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_2>,void ()(double)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_2,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_2>,void ()(double)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CCF50;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_2,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_2>,void ()(double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CCF50;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_2,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_2>,void ()(double)>::operator()(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 406) = 1;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_1,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_1>,void ()(double)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_1,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_1>,void ()(double)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E42CCF08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_1,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_1>,void ()(double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E42CCF08;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_1,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_1>,void ()(double)>::operator()(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 406) = 1;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_0,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_0>,double ()(double const&)>::~__func()
{
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_0,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_0>,double ()(double const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E42CCEC0;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_0,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_0>,double ()(double const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E42CCEC0;
}

long double std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_0,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_0>,double ()(double const&)>::operator()(uint64_t a1, long double *a2)
{
  return cos(*a2);
}

md::ARWalkingLabeler *md::ARWalkingLabeler::ARWalkingLabeler(md::ARWalkingLabeler *this, id *a2)
{
  md::StandardLabeler *v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  md::HighPrecisionAltitudeRequestor *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t (***v24)();
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t (***v30)();
  uint64_t v31;
  md::LabelExternalMeshModerator *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  id v56;
  void *v57;
  uint64_t *v58;
  float v59;
  char *v60;
  __int128 v61;
  uint64_t (*v62)();
  uint64_t (*v63)();
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t (***v91)();
  uint64_t v92;
  uint64_t (***v93)();
  uint64_t v94;
  id v95;
  void *v96;
  uint64_t v97;
  __int128 *v98;
  uint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  void *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  __int128 **v115;
  __int128 *v116;
  __int128 *v117;
  __int128 *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  __int128 *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  double *v145;
  double v146;
  NSObject *v147;
  double v148;
  NSObject *v149;
  uint64_t v150;
  uint64_t v152;
  geo::read_write_lock *v153;
  const char *v154;
  malloc_zone_t *zone;
  uint64_t v156;
  geo::read_write_lock *v157;
  const char *v158;
  malloc_zone_t *v159;
  uint64_t v160;
  geo::read_write_lock *v161;
  const char *v162;
  malloc_zone_t *v163;
  uint64_t v164;
  geo::read_write_lock *v165;
  const char *v166;
  malloc_zone_t *v167;
  uint64_t v168;
  geo::read_write_lock *v169;
  const char *v170;
  malloc_zone_t *v171;
  uint64_t v172;
  geo::read_write_lock *v173;
  const char *v174;
  malloc_zone_t *v175;
  uint64_t v176;
  geo::read_write_lock *v177;
  const char *v178;
  malloc_zone_t *v179;
  _QWORD *v180;
  _QWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  _QWORD *v186;
  char *v187;
  std::__shared_weak_count *v188;
  _QWORD v189[3];
  _QWORD *v190;
  _QWORD v191[3];
  _QWORD *v192;
  _QWORD v193[3];
  _QWORD *v194;
  _QWORD v195[3];
  _QWORD *v196;
  _QWORD v197[3];
  _QWORD *v198;
  _QWORD v199[3];
  _QWORD *v200;
  _QWORD v201[3];
  _QWORD *v202;
  _QWORD v203[3];
  _QWORD *v204;
  _QWORD v205[3];
  _QWORD *v206;
  _QWORD v207[3];
  _QWORD *v208;
  _QWORD v209[3];
  _QWORD *v210;
  _QWORD v211[3];
  _QWORD *v212;
  uint64_t (**v213)();
  std::__shared_weak_count *v214;
  uint64_t (***v215)();
  uint64_t (**v216)();
  std::__shared_weak_count *v217;
  uint64_t (***v218)();
  __int128 v219;
  __int128 v220;
  char *v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  _BYTE buf[24];
  uint64_t v225;

  v225 = *MEMORY[0x1E0C80C00];
  v4 = md::StandardLabeler::StandardLabeler(this, (md::LabelManager *)a2);
  *(_QWORD *)v4 = &off_1E42910C0;
  *((_QWORD *)v4 + 1) = &unk_1E42912D8;
  *((_QWORD *)v4 + 2) = &unk_1E4291320;
  *((_QWORD *)v4 + 49) = &unk_1E4291390;
  *((_BYTE *)v4 + 400) = 1;
  *(_DWORD *)((char *)v4 + 401) = 0;
  *(_WORD *)((char *)v4 + 405) = 0;
  *((_QWORD *)v4 + 52) = 0;
  *((_QWORD *)v4 + 53) = 0;
  *((_QWORD *)v4 + 51) = 0;
  *((_DWORD *)v4 + 108) = 0;
  v5 = operator new();
  *(_QWORD *)v5 = a2;
  *(_DWORD *)(v5 + 8) = 16843008;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_OWORD *)(v5 + 32) = xmmword_19FFB6000;
  *(_BYTE *)(v5 + 48) = 21;
  *(_BYTE *)(v5 + 56) = 0;
  *(_BYTE *)(v5 + 88) = 0;
  *(_BYTE *)(v5 + 96) = 0;
  *(_BYTE *)(v5 + 432) = 0;
  *(_QWORD *)(v5 + 440) = &off_1E42B4F50;
  *(_QWORD *)(v5 + 448) = 0;
  *(_OWORD *)(v5 + 464) = 0u;
  *(_OWORD *)(v5 + 480) = 0u;
  *(_OWORD *)(v5 + 496) = 0u;
  {
    v152 = operator new();
    *(_QWORD *)(v152 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v152 + 24) = "VectorKitLabels";
    *(_OWORD *)(v152 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v152 = &off_1E42B5668;
    *(_QWORD *)(v152 + 8) = "VectorKitLabels";
    *(_OWORD *)(v152 + 72) = 0u;
    *(_OWORD *)(v152 + 88) = 0u;
    *(_OWORD *)(v152 + 104) = 0u;
    *(_OWORD *)(v152 + 120) = 0u;
    *(_OWORD *)(v152 + 136) = 0u;
    *(_OWORD *)(v152 + 152) = 0u;
    *(_OWORD *)(v152 + 168) = 0u;
    *(_OWORD *)(v152 + 184) = 0u;
    *(_OWORD *)(v152 + 200) = 0u;
    *(_OWORD *)(v152 + 216) = 0u;
    *(_OWORD *)(v152 + 232) = 0u;
    *(_QWORD *)(v152 + 248) = 0;
    *(_OWORD *)(v152 + 56) = 0u;
    v153 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v152 + 56), 0);
    if ((_DWORD)v153)
      geo::read_write_lock::logFailure(v153, (uint64_t)"initialization", v154);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v152 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v152 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v152;
  }
  *(_QWORD *)(v5 + 512) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v5 + 520) = 0;
  *(_QWORD *)(v5 + 536) = 0;
  *(_QWORD *)(v5 + 528) = 0;
  {
    v156 = operator new();
    *(_QWORD *)(v156 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v156 + 24) = "VectorKitLabels";
    *(_OWORD *)(v156 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v156 = &off_1E42B5668;
    *(_QWORD *)(v156 + 8) = "VectorKitLabels";
    *(_OWORD *)(v156 + 72) = 0u;
    *(_OWORD *)(v156 + 88) = 0u;
    *(_OWORD *)(v156 + 104) = 0u;
    *(_OWORD *)(v156 + 120) = 0u;
    *(_OWORD *)(v156 + 136) = 0u;
    *(_OWORD *)(v156 + 152) = 0u;
    *(_OWORD *)(v156 + 168) = 0u;
    *(_OWORD *)(v156 + 184) = 0u;
    *(_OWORD *)(v156 + 200) = 0u;
    *(_OWORD *)(v156 + 216) = 0u;
    *(_OWORD *)(v156 + 232) = 0u;
    *(_QWORD *)(v156 + 248) = 0;
    *(_OWORD *)(v156 + 56) = 0u;
    v157 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v156 + 56), 0);
    if ((_DWORD)v157)
      geo::read_write_lock::logFailure(v157, (uint64_t)"initialization", v158);
    v159 = malloc_create_zone(0, 0);
    *(_QWORD *)(v156 + 48) = v159;
    malloc_set_zone_name(v159, "VectorKitLabels");
    *(_QWORD *)(v156 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v156;
  }
  *(_QWORD *)(v5 + 544) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v5 + 552) = 0;
  *(_QWORD *)(v5 + 568) = 0;
  *(_QWORD *)(v5 + 560) = 0;
  {
    v160 = operator new();
    *(_QWORD *)(v160 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v160 + 24) = "VectorKitLabels";
    *(_OWORD *)(v160 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v160 = &off_1E42B5668;
    *(_QWORD *)(v160 + 8) = "VectorKitLabels";
    *(_OWORD *)(v160 + 72) = 0u;
    *(_OWORD *)(v160 + 88) = 0u;
    *(_OWORD *)(v160 + 104) = 0u;
    *(_OWORD *)(v160 + 120) = 0u;
    *(_OWORD *)(v160 + 136) = 0u;
    *(_OWORD *)(v160 + 152) = 0u;
    *(_OWORD *)(v160 + 168) = 0u;
    *(_OWORD *)(v160 + 184) = 0u;
    *(_OWORD *)(v160 + 200) = 0u;
    *(_OWORD *)(v160 + 216) = 0u;
    *(_OWORD *)(v160 + 232) = 0u;
    *(_QWORD *)(v160 + 248) = 0;
    *(_OWORD *)(v160 + 56) = 0u;
    v161 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v160 + 56), 0);
    if ((_DWORD)v161)
      geo::read_write_lock::logFailure(v161, (uint64_t)"initialization", v162);
    v163 = malloc_create_zone(0, 0);
    *(_QWORD *)(v160 + 48) = v163;
    malloc_set_zone_name(v163, "VectorKitLabels");
    *(_QWORD *)(v160 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v160;
  }
  *(_QWORD *)(v5 + 576) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v5 + 584) = 0;
  *(_QWORD *)(v5 + 600) = 0;
  *(_QWORD *)(v5 + 592) = 0;
  {
    v164 = operator new();
    *(_QWORD *)(v164 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v164 + 24) = "VectorKitLabels";
    *(_OWORD *)(v164 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v164 = &off_1E42B5668;
    *(_QWORD *)(v164 + 8) = "VectorKitLabels";
    *(_OWORD *)(v164 + 72) = 0u;
    *(_OWORD *)(v164 + 88) = 0u;
    *(_OWORD *)(v164 + 104) = 0u;
    *(_OWORD *)(v164 + 120) = 0u;
    *(_OWORD *)(v164 + 136) = 0u;
    *(_OWORD *)(v164 + 152) = 0u;
    *(_OWORD *)(v164 + 168) = 0u;
    *(_OWORD *)(v164 + 184) = 0u;
    *(_OWORD *)(v164 + 200) = 0u;
    *(_OWORD *)(v164 + 216) = 0u;
    *(_OWORD *)(v164 + 232) = 0u;
    *(_QWORD *)(v164 + 248) = 0;
    *(_OWORD *)(v164 + 56) = 0u;
    v165 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v164 + 56), 0);
    if ((_DWORD)v165)
      geo::read_write_lock::logFailure(v165, (uint64_t)"initialization", v166);
    v167 = malloc_create_zone(0, 0);
    *(_QWORD *)(v164 + 48) = v167;
    malloc_set_zone_name(v167, "VectorKitLabels");
    *(_QWORD *)(v164 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v164;
  }
  *(_QWORD *)(v5 + 608) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v5 + 616) = 0;
  *(_QWORD *)(v5 + 632) = 0;
  *(_QWORD *)(v5 + 624) = 0;
  {
    v168 = operator new();
    *(_QWORD *)(v168 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v168 + 24) = "VectorKitLabels";
    *(_OWORD *)(v168 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v168 = &off_1E42B5668;
    *(_QWORD *)(v168 + 8) = "VectorKitLabels";
    *(_OWORD *)(v168 + 72) = 0u;
    *(_OWORD *)(v168 + 88) = 0u;
    *(_OWORD *)(v168 + 104) = 0u;
    *(_OWORD *)(v168 + 120) = 0u;
    *(_OWORD *)(v168 + 136) = 0u;
    *(_OWORD *)(v168 + 152) = 0u;
    *(_OWORD *)(v168 + 168) = 0u;
    *(_OWORD *)(v168 + 184) = 0u;
    *(_OWORD *)(v168 + 200) = 0u;
    *(_OWORD *)(v168 + 216) = 0u;
    *(_OWORD *)(v168 + 232) = 0u;
    *(_QWORD *)(v168 + 248) = 0;
    *(_OWORD *)(v168 + 56) = 0u;
    v169 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v168 + 56), 0);
    if ((_DWORD)v169)
      geo::read_write_lock::logFailure(v169, (uint64_t)"initialization", v170);
    v171 = malloc_create_zone(0, 0);
    *(_QWORD *)(v168 + 48) = v171;
    malloc_set_zone_name(v171, "VectorKitLabels");
    *(_QWORD *)(v168 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v168;
  }
  *(_QWORD *)(v5 + 640) = mdm::Allocator::instance(void)::alloc;
  *(_OWORD *)(v5 + 648) = 0u;
  *(_OWORD *)(v5 + 664) = 0u;
  *(_DWORD *)(v5 + 680) = 1065353216;
  *(_OWORD *)(v5 + 688) = 0u;
  *(_OWORD *)(v5 + 704) = 0u;
  *(_DWORD *)(v5 + 720) = 1065353216;
  *(_QWORD *)(v5 + 760) = 0;
  *(_OWORD *)(v5 + 728) = 0u;
  *(_OWORD *)(v5 + 744) = 0u;
  do
  {
    v11 = __ldaxr(&md::ARWalkingFeatureSet::nextVersion(void)::next);
    v12 = v11 + 1;
  }
  while (__stlxr(v12, &md::ARWalkingFeatureSet::nextVersion(void)::next));
  *(_QWORD *)(v5 + 768) = v12;
  *(_QWORD *)(v5 + 776) = 0;
  *(_QWORD *)(v5 + 792) = 0;
  *(_QWORD *)(v5 + 784) = 0;
  {
    v172 = operator new();
    *(_QWORD *)(v172 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v172 + 24) = "VectorKitLabels";
    *(_OWORD *)(v172 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v172 = &off_1E42B5668;
    *(_QWORD *)(v172 + 8) = "VectorKitLabels";
    *(_OWORD *)(v172 + 72) = 0u;
    *(_OWORD *)(v172 + 88) = 0u;
    *(_OWORD *)(v172 + 104) = 0u;
    *(_OWORD *)(v172 + 120) = 0u;
    *(_OWORD *)(v172 + 136) = 0u;
    *(_OWORD *)(v172 + 152) = 0u;
    *(_OWORD *)(v172 + 168) = 0u;
    *(_OWORD *)(v172 + 184) = 0u;
    *(_OWORD *)(v172 + 200) = 0u;
    *(_OWORD *)(v172 + 216) = 0u;
    *(_OWORD *)(v172 + 232) = 0u;
    *(_QWORD *)(v172 + 248) = 0;
    *(_OWORD *)(v172 + 56) = 0u;
    v173 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v172 + 56), 0);
    if ((_DWORD)v173)
      geo::read_write_lock::logFailure(v173, (uint64_t)"initialization", v174);
    v175 = malloc_create_zone(0, 0);
    *(_QWORD *)(v172 + 48) = v175;
    malloc_set_zone_name(v175, "VectorKitLabels");
    *(_QWORD *)(v172 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v172;
  }
  *(_QWORD *)(v5 + 800) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v5 + 808) = 0;
  {
    v176 = operator new();
    *(_QWORD *)(v176 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v176 + 24) = "VectorKitLabels";
    *(_OWORD *)(v176 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v176 = &off_1E42B5668;
    *(_QWORD *)(v176 + 8) = "VectorKitLabels";
    *(_OWORD *)(v176 + 72) = 0u;
    *(_OWORD *)(v176 + 88) = 0u;
    *(_OWORD *)(v176 + 104) = 0u;
    *(_OWORD *)(v176 + 120) = 0u;
    *(_OWORD *)(v176 + 136) = 0u;
    *(_OWORD *)(v176 + 152) = 0u;
    *(_OWORD *)(v176 + 168) = 0u;
    *(_OWORD *)(v176 + 184) = 0u;
    *(_OWORD *)(v176 + 200) = 0u;
    *(_OWORD *)(v176 + 216) = 0u;
    *(_OWORD *)(v176 + 232) = 0u;
    *(_QWORD *)(v176 + 248) = 0;
    *(_OWORD *)(v176 + 56) = 0u;
    v177 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v176 + 56), 0);
    if ((_DWORD)v177)
      geo::read_write_lock::logFailure(v177, (uint64_t)"initialization", v178);
    v179 = malloc_create_zone(0, 0);
    *(_QWORD *)(v176 + 48) = v179;
    malloc_set_zone_name(v179, "VectorKitLabels");
    *(_QWORD *)(v176 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v176;
  }
  *(_QWORD *)(v5 + 816) = mdm::Allocator::instance(void)::alloc;
  *(_QWORD *)(v5 + 824) = 0;
  *(_DWORD *)(v5 + 832) = 1065353216;
  *(_QWORD *)(v5 + 856) = 0;
  *(_QWORD *)(v5 + 848) = 0;
  *(_QWORD *)(v5 + 840) = v5 + 848;
  *(int64x2_t *)(v5 + 864) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(v5 + 880) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_OWORD *)(v5 + 896) = 0u;
  *(_OWORD *)(v5 + 912) = 0u;
  *(_QWORD *)(v5 + 928) = 0;
  *(_DWORD *)(v5 + 936) = 1065353216;
  v15 = operator new();
  v16 = *(id *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 152) + 64) + 16);
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 152) + 24);
  v18 = v16;
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = v18;
  *(_QWORD *)(v15 + 24) = v17;
  *(_QWORD *)(v15 + 40) = 0;
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_BYTE *)(v15 + 56) = 0;
  *(_OWORD *)(v15 + 64) = xmmword_19FFB6010;
  *(_QWORD *)(v15 + 80) = &off_1E42B4A50;
  *(_QWORD *)(v15 + 88) = 0;
  *(_QWORD *)(v15 + 104) = &off_1E42B4CD0;
  *(_QWORD *)(v15 + 112) = 0;
  *(_QWORD *)(v15 + 128) = 256;
  *(_OWORD *)(v15 + 136) = 0u;
  *(_OWORD *)(v15 + 152) = 0u;
  *(_DWORD *)(v15 + 168) = 1065353216;
  *(_QWORD *)(v15 + 176) = v15 + 176;
  *(_QWORD *)(v15 + 184) = v15 + 176;
  *(_OWORD *)(v15 + 208) = 0u;
  *(_OWORD *)(v15 + 224) = 0u;
  *(_OWORD *)(v15 + 192) = xmmword_19FFB6020;
  *(_DWORD *)(v15 + 240) = 1065353216;
  *(_QWORD *)(v15 + 248) = v15 + 248;
  *(_QWORD *)(v15 + 256) = v15 + 248;
  *(_QWORD *)(v15 + 264) = 0;
  *(_QWORD *)(v15 + 272) = 256;
  *(_OWORD *)(v15 + 280) = 0u;
  *(_OWORD *)(v15 + 296) = 0u;
  *(_DWORD *)(v15 + 312) = 1065353216;
  *(_QWORD *)(v15 + 320) = v15 + 320;
  *(_QWORD *)(v15 + 328) = v15 + 320;
  *(_QWORD *)(v15 + 336) = 0;
  *(_QWORD *)(v15 + 368) = 0;
  *(_QWORD *)(v15 + 440) = 0;
  *(_OWORD *)(v15 + 400) = 0u;
  *(_OWORD *)(v15 + 416) = 0u;
  *(_DWORD *)(v15 + 432) = 0;
  v19 = *(md::HighPrecisionAltitudeRequestor **)(v5 + 776);
  *(_QWORD *)(v5 + 776) = v15;
  if (v19)
  {
    md::HighPrecisionAltitudeRequestor::~HighPrecisionAltitudeRequestor(v19);
    MEMORY[0x1A1AF4E00]();
  }

  v20 = *(_QWORD *)(v5 + 776);
  v216 = &off_1E42CD1D8;
  v217 = (std::__shared_weak_count *)v5;
  v218 = &v216;
  *(_QWORD *)&v219 = &off_1E42CD1D8;
  v21 = v20 + 344;
  v22 = &v219;
  *((_QWORD *)&v220 + 1) = &v219;
  *((_QWORD *)&v219 + 1) = v5;
  if ((__int128 *)(v20 + 344) == &v219)
  {
    v23 = 4;
  }
  else
  {
    if (*(_QWORD *)(v20 + 368) == v21)
    {
      std::__function::__func<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_0,std::allocator<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_0>,void ()(std::shared_ptr<md::VLAltitudeRequest> const&)>::__clone((uint64_t)&v219, &v213);
      *((_QWORD *)&v220 + 1) = 0;
      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v20 + 368) + 24))(*(_QWORD *)(v20 + 368), &v219);
      (*(void (**)(_QWORD))(**(_QWORD **)(v20 + 368) + 32))(*(_QWORD *)(v20 + 368));
      *(_QWORD *)(v20 + 368) = 0;
      *((_QWORD *)&v220 + 1) = &v219;
      ((void (*)(uint64_t (***)(), uint64_t))v213[3])(&v213, v20 + 344);
      ((void (*)(uint64_t (***)()))v213[4])(&v213);
      *(_QWORD *)(v20 + 368) = v21;
      v22 = (__int128 *)*((_QWORD *)&v220 + 1);
    }
    else
    {
      std::__function::__func<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_0,std::allocator<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_0>,void ()(std::shared_ptr<md::VLAltitudeRequest> const&)>::__clone((uint64_t)&v219, (_QWORD *)(v20 + 344));
      (*(void (**)(_QWORD))(**((_QWORD **)&v220 + 1) + 32))(*((_QWORD *)&v220 + 1));
      v22 = *(__int128 **)(v20 + 368);
      *((_QWORD *)&v220 + 1) = v22;
      *(_QWORD *)(v20 + 368) = v21;
    }
    if (v22 == &v219)
    {
      v23 = 4;
      v22 = &v219;
    }
    else
    {
      if (!v22)
        goto LABEL_22;
      v23 = 5;
    }
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_22:
  v24 = v218;
  if (v218 == &v216)
  {
    v25 = 4;
    v24 = &v216;
  }
  else
  {
    if (!v218)
      goto LABEL_27;
    v25 = 5;
  }
  (*v24)[v25]();
LABEL_27:
  v26 = *(_QWORD *)(v5 + 776);
  v213 = &off_1E42CD220;
  v214 = (std::__shared_weak_count *)v5;
  v215 = &v213;
  v27 = v26 + 376;
  v28 = &v219;
  *((_QWORD *)&v220 + 1) = &v219;
  *(_QWORD *)&v219 = &off_1E42CD220;
  *((_QWORD *)&v219 + 1) = v5;
  if ((__int128 *)(v26 + 376) == &v219)
  {
    v29 = 4;
  }
  else
  {
    if (*(_QWORD *)(v26 + 400) == v27)
    {
      std::__function::__func<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_1,std::allocator<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_1>,void ()(std::shared_ptr<md::UndulationRequest> const&)>::__clone((uint64_t)&v219, v211);
      *((_QWORD *)&v220 + 1) = 0;
      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v26 + 400) + 24))(*(_QWORD *)(v26 + 400), &v219);
      (*(void (**)(_QWORD))(**(_QWORD **)(v26 + 400) + 32))(*(_QWORD *)(v26 + 400));
      *(_QWORD *)(v26 + 400) = 0;
      *((_QWORD *)&v220 + 1) = &v219;
      (*(void (**)(_QWORD *, uint64_t))(v211[0] + 24))(v211, v26 + 376);
      (*(void (**)(_QWORD *))(v211[0] + 32))(v211);
      *(_QWORD *)(v26 + 400) = v27;
      v28 = (__int128 *)*((_QWORD *)&v220 + 1);
    }
    else
    {
      std::__function::__func<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_1,std::allocator<md::ARWalkingSupport::ARWalkingSupport(md::LabelManager *)::$_1>,void ()(std::shared_ptr<md::UndulationRequest> const&)>::__clone((uint64_t)&v219, (_QWORD *)(v26 + 376));
      (*(void (**)(_QWORD))(**((_QWORD **)&v220 + 1) + 32))(*((_QWORD *)&v220 + 1));
      v28 = *(__int128 **)(v26 + 400);
      *((_QWORD *)&v220 + 1) = v28;
      *(_QWORD *)(v26 + 400) = v27;
    }
    if (v28 == &v219)
    {
      v29 = 4;
      v28 = &v219;
    }
    else
    {
      if (!v28)
        goto LABEL_37;
      v29 = 5;
    }
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_37:
  v30 = v215;
  if (v215 == &v213)
  {
    v31 = 4;
    v30 = &v213;
    goto LABEL_41;
  }
  if (v215)
  {
    v31 = 5;
LABEL_41:
    (*v30)[v31]();
  }
  *((_QWORD *)this + 55) = v5;
  v32 = (md::LabelExternalMeshModerator *)operator new();
  md::LabelExternalMeshModerator::LabelExternalMeshModerator(v32, (md::LabelManager *)a2);
  *((_QWORD *)this + 56) = v33;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 59) = 0;
  *((_OWORD *)this + 30) = VectorKitConfig_ARLabelPlacementReevaluteDistance;
  if (*((_QWORD *)this + 60) && *((_QWORD *)this + 61))
  {
    GEOConfigGetDouble();
    *((_QWORD *)this + 62) = v34;
  }
  *((_QWORD *)this + 63) = 0;
  v35 = operator new(0x20uLL);
  v35[1] = 0;
  v35[2] = 0;
  *v35 = &off_1E428A338;
  *((_BYTE *)v35 + 24) = 1;
  *((_QWORD *)this + 64) = v35 + 3;
  *((_QWORD *)this + 65) = v35;
  *((_QWORD *)this + 69) = 0;
  *((_OWORD *)this + 35) = VectorKitConfig_ARLabelViewAngleChangeCallbackThreshold;
  if (*((_QWORD *)this + 70) && *((_QWORD *)this + 71))
  {
    GEOConfigGetDouble();
    *((_QWORD *)this + 72) = v36;
  }
  *((_QWORD *)this + 73) = 0;
  v37 = operator new(0x20uLL);
  v37[1] = 0;
  v37[2] = 0;
  *v37 = &off_1E428A338;
  *((_BYTE *)v37 + 24) = 1;
  *((_QWORD *)this + 74) = v37 + 3;
  *((_QWORD *)this + 75) = v37;
  *((_QWORD *)this + 79) = 0;
  *((_OWORD *)this + 40) = VectorKitConfig_ARLabelIsDirectlyBehindAngleThreshold;
  if (*((_QWORD *)this + 80) && *((_QWORD *)this + 81))
  {
    GEOConfigGetDouble();
    *((_QWORD *)this + 82) = v38;
  }
  *((_QWORD *)this + 88) = 0;
  *((_QWORD *)this + 87) = 0;
  v39 = operator new(0x20uLL);
  v39[1] = 0;
  v39[2] = 0;
  *v39 = &off_1E428A338;
  *((_BYTE *)v39 + 24) = 1;
  *((_QWORD *)this + 89) = v39 + 3;
  *((_QWORD *)this + 90) = v39;
  *((_QWORD *)this + 94) = 0;
  *(_OWORD *)((char *)this + 760) = VectorKitConfig_ARLabelMinClipDistance;
  if (*((_QWORD *)this + 95) && *((_QWORD *)this + 96))
  {
    GEOConfigGetDouble();
    *((_QWORD *)this + 97) = v40;
  }
  *((_QWORD *)this + 98) = 0;
  v41 = operator new(0x20uLL);
  v41[1] = 0;
  v41[2] = 0;
  *v41 = &off_1E428A338;
  *((_BYTE *)v41 + 24) = 1;
  *((_QWORD *)this + 99) = v41 + 3;
  *((_QWORD *)this + 100) = v41;
  *((_QWORD *)this + 104) = 0;
  *(_OWORD *)((char *)this + 840) = VectorKitConfig_ARLabelMaxClipDistance;
  if (*((_QWORD *)this + 105) && *((_QWORD *)this + 106))
  {
    GEOConfigGetDouble();
    *((_QWORD *)this + 107) = v42;
  }
  *((_QWORD *)this + 108) = 0;
  v43 = operator new(0x20uLL);
  v43[1] = 0;
  v43[2] = 0;
  *v43 = &off_1E428A338;
  *((_BYTE *)v43 + 24) = 1;
  *((_QWORD *)this + 109) = v43 + 3;
  *((_QWORD *)this + 110) = v43;
  *((_QWORD *)this + 114) = 0;
  *(_OWORD *)((char *)this + 920) = VectorKitConfig_ARLabelHighPrecisionAltitudeEnabled;
  if (*((_QWORD *)this + 115) && *((_QWORD *)this + 116))
    *((_BYTE *)this + 936) = GEOConfigGetBOOL();
  *((_QWORD *)this + 118) = 0;
  v44 = operator new(0x20uLL);
  v44[1] = 0;
  v44[2] = 0;
  *v44 = &off_1E428A338;
  *((_BYTE *)v44 + 24) = 1;
  *((_QWORD *)this + 119) = v44 + 3;
  *((_QWORD *)this + 120) = v44;
  *((_QWORD *)this + 124) = 0;
  v186 = (_QWORD *)((char *)this + 1000);
  *(_OWORD *)((char *)this + 1000) = VectorKitConfig_ARLabelHighPrecisionAltitudeDistanceThreshold;
  if (*((_QWORD *)this + 125) && *((_QWORD *)this + 126))
  {
    GEOConfigGetDouble();
    *((_QWORD *)this + 127) = v45;
  }
  *((_QWORD *)this + 128) = 0;
  v46 = operator new(0x20uLL);
  v46[1] = 0;
  v46[2] = 0;
  *v46 = &off_1E428A338;
  *((_BYTE *)v46 + 24) = 1;
  *((_QWORD *)this + 129) = v46 + 3;
  *((_QWORD *)this + 130) = v46;
  *((_QWORD *)this + 134) = 0;
  v185 = (_QWORD *)((char *)this + 1080);
  *(_OWORD *)((char *)this + 1080) = VectorKitConfig_ARLabelEnable3DArrival;
  if (*((_QWORD *)this + 135) && *((_QWORD *)this + 136))
    *((_BYTE *)this + 1096) = GEOConfigGetBOOL();
  *((_QWORD *)this + 138) = 0;
  v47 = operator new(0x20uLL);
  v47[1] = 0;
  v47[2] = 0;
  *v47 = &off_1E428A338;
  *((_BYTE *)v47 + 24) = 1;
  *((_QWORD *)this + 139) = v47 + 3;
  *((_QWORD *)this + 140) = v47;
  *((_QWORD *)this + 144) = 0;
  v184 = (_QWORD *)((char *)this + 1160);
  *(_OWORD *)((char *)this + 1160) = VectorKitConfig_ARTileSelectionHighPrecisionZLevel;
  if (*((_QWORD *)this + 145) && *((_QWORD *)this + 146))
    *((_DWORD *)this + 294) = GEOConfigGetUInteger();
  *((_QWORD *)this + 148) = 0;
  v48 = operator new(0x20uLL);
  v48[1] = 0;
  v48[2] = 0;
  *v48 = &off_1E428A338;
  *((_BYTE *)v48 + 24) = 1;
  *((_QWORD *)this + 149) = v48 + 3;
  *((_QWORD *)this + 150) = v48;
  *((_QWORD *)this + 154) = 0;
  v183 = (_QWORD *)((char *)this + 1240);
  *(_OWORD *)((char *)this + 1240) = VectorKitConfig_ARHighPrecisionSpatialKeyArea;
  if (*((_QWORD *)this + 155) && *((_QWORD *)this + 156))
    *((_DWORD *)this + 314) = GEOConfigGetUInteger();
  *((_QWORD *)this + 158) = 0;
  v49 = operator new(0x20uLL);
  v49[1] = 0;
  v49[2] = 0;
  *v49 = &off_1E428A338;
  *((_BYTE *)v49 + 24) = 1;
  *((_QWORD *)this + 159) = v49 + 3;
  *((_QWORD *)this + 160) = v49;
  *((_QWORD *)this + 164) = 0;
  v182 = (_QWORD *)((char *)this + 1320);
  *(_OWORD *)((char *)this + 1320) = VectorKitConfig_ARLabelEnableLayoutCrossfades;
  if (*((_QWORD *)this + 165) && *((_QWORD *)this + 166))
    *((_BYTE *)this + 1336) = GEOConfigGetBOOL();
  *((_QWORD *)this + 168) = 0;
  v50 = operator new(0x20uLL);
  v50[1] = 0;
  v50[2] = 0;
  *v50 = &off_1E428A338;
  *((_BYTE *)v50 + 24) = 1;
  *((_QWORD *)this + 169) = v50 + 3;
  *((_QWORD *)this + 170) = v50;
  *((_QWORD *)this + 174) = 0;
  v181 = (_QWORD *)((char *)this + 1400);
  *(_OWORD *)((char *)this + 1400) = VectorKitConfig_ARLabelEnablePerpendicularLabelLayout;
  if (*((_QWORD *)this + 175) && *((_QWORD *)this + 176))
    *((_BYTE *)this + 1416) = GEOConfigGetBOOL();
  *((_QWORD *)this + 178) = 0;
  v51 = operator new(0x20uLL);
  v51[1] = 0;
  v51[2] = 0;
  *v51 = &off_1E428A338;
  *((_BYTE *)v51 + 24) = 1;
  *((_QWORD *)this + 179) = v51 + 3;
  *((_QWORD *)this + 180) = v51;
  *((_QWORD *)this + 184) = 0;
  v180 = (_QWORD *)((char *)this + 1480);
  *(_OWORD *)((char *)this + 1480) = VectorKitConfig_ARLabelHighPrecisionAltitudeMaximumDelayWithoutFeatures;
  if (*((_QWORD *)this + 185) && *((_QWORD *)this + 186))
  {
    GEOConfigGetDouble();
    *((_QWORD *)this + 187) = v52;
  }
  *((_QWORD *)this + 188) = 0;
  v53 = operator new(0x20uLL);
  v53[1] = 0;
  v53[2] = 0;
  *v53 = &off_1E428A338;
  *((_BYTE *)v53 + 24) = 1;
  *((_QWORD *)this + 189) = v53 + 3;
  *((_QWORD *)this + 190) = v53;
  *((_QWORD *)this + 194) = 0;
  *(_OWORD *)((char *)this + 1560) = VectorKitConfig_ARLabelHighPrecisionAltitudeMaximumDelayWithFeatures;
  if (*((_QWORD *)this + 195) && *((_QWORD *)this + 196))
  {
    GEOConfigGetDouble();
    *((_QWORD *)this + 197) = v54;
  }
  *((_QWORD *)this + 198) = 0;
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &off_1E428A338;
  *((_BYTE *)v55 + 24) = 1;
  *((_QWORD *)this + 199) = v55 + 3;
  *((_QWORD *)this + 200) = v55;
  *((_QWORD *)this + 204) = 0;
  *((_BYTE *)this + 1640) = 0;
  *((_OWORD *)this + 103) = 0u;
  *((_OWORD *)this + 104) = 0u;
  *((_QWORD *)this + 210) = 0;
  *((_QWORD *)this + 211) = &off_1E42B4D90;
  *((_QWORD *)this + 212) = 0;
  *((_WORD *)this + 856) = 0;
  *((_BYTE *)this + 1784) = 0;
  *(_QWORD *)((char *)this + 1796) = 0;
  *(_OWORD *)((char *)this + 1720) = 0u;
  *(_OWORD *)((char *)this + 1736) = 0u;
  *(_OWORD *)((char *)this + 1745) = 0u;
  *((_QWORD *)this + 226) = (char *)this + 1808;
  *((_QWORD *)this + 227) = (char *)this + 1808;
  *((_OWORD *)this + 114) = 0u;
  *((_OWORD *)this + 115) = 0u;
  *((_QWORD *)this + 232) = 0;
  *((_DWORD *)this + 466) = 1065353216;
  *((_QWORD *)this + 235) = 0;
  *((_QWORD *)this + 234) = (char *)this + 1808;
  *((_OWORD *)this + 118) = 0u;
  *((_OWORD *)this + 119) = 0u;
  *((_DWORD *)this + 480) = 1065353216;
  *(_OWORD *)((char *)this + 1928) = 0u;
  *(_OWORD *)((char *)this + 1944) = 0u;
  *((_DWORD *)this + 490) = 1065353216;
  *((_WORD *)this + 984) = 0;
  *((_QWORD *)this + 247) = 0;
  *((_QWORD *)this + 248) = &off_1E42B4D90;
  *((_QWORD *)this + 249) = 0;
  *((_DWORD *)this + 502) = 0;
  *((_QWORD *)this + 253) = 0;
  *((_QWORD *)this + 252) = 0;
  *((_QWORD *)this + 254) = 0;
  *((_QWORD *)this + 255) = &off_1E42B4B90;
  *((_QWORD *)this + 256) = 0;
  *((_QWORD *)this + 260) = 0;
  *((_QWORD *)this + 258) = 0;
  *((_QWORD *)this + 259) = 0;
  *((_QWORD *)this + 261) = (char *)this + 2088;
  *((_QWORD *)this + 262) = (char *)this + 2088;
  *(_OWORD *)((char *)this + 2104) = 0u;
  *(_OWORD *)((char *)this + 2120) = 0u;
  *((_QWORD *)this + 267) = 0;
  *((_DWORD *)this + 536) = 1065353216;
  *((_QWORD *)this + 270) = 0;
  *((_QWORD *)this + 269) = (char *)this + 2088;
  *((_QWORD *)this + 278) = 0;
  *((_BYTE *)this + 2232) = 0;
  *((_QWORD *)this + 281) = 0;
  *((_QWORD *)this + 280) = 0;
  *((_QWORD *)this + 272) = 0;
  *((_QWORD *)this + 271) = 0;
  *((_DWORD *)this + 548) = 0;
  *((_QWORD *)this + 273) = 0;
  *((_QWORD *)this + 276) = 0;
  *((_QWORD *)this + 275) = 0;
  *((_BYTE *)this + 2216) = 0;
  v56 = a2[12];
  v57 = v56;
  if (v56)
  {
    objc_msgSend(v56, "textureManager", (char *)this + 480, v180, v181, v182, v183, v184, v185, v186);
    v58 = (uint64_t *)v213;
  }
  else
  {
    v58 = 0;
    v214 = 0;
    v213 = 0;
  }
  BYTE7(v220) = 13;
  strcpy((char *)&v219, "ar_background");
  v59 = *((float *)a2 + 44);
  v60 = (char *)operator new(0x58uLL);
  *((_QWORD *)v60 + 1) = 0;
  *((_QWORD *)v60 + 2) = 0;
  *(_QWORD *)v60 = &off_1E42DED18;
  *((_QWORD *)v60 + 5) = 0;
  *((_QWORD *)v60 + 6) = 0;
  *((_QWORD *)v60 + 4) = 0;
  *((_DWORD *)v60 + 14) = 0;
  *((_QWORD *)v60 + 3) = &off_1E42B63B0;
  *(_QWORD *)&v61 = 0x100000001;
  *((_QWORD *)&v61 + 1) = 0x100000001;
  *(_OWORD *)(v60 + 60) = v61;
  *(_QWORD *)(v60 + 76) = 0x100000001;
  *((_DWORD *)v60 + 21) = 0;
  v187 = v60 + 24;
  v188 = (std::__shared_weak_count *)v60;
  md::TextureManager::texture(&v216, v58, (uint64_t)&v219, (uint64_t *)&v187, 0, v59);
  v63 = v216[4];
  v62 = v216[5];
  if (v62)
  {
    v64 = (unint64_t *)((char *)v62 + 8);
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)this + 58);
  *((_QWORD *)this + 57) = v63;
  *((_QWORD *)this + 58) = v62;
  if (v66)
  {
    p_shared_owners = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldaxr(p_shared_owners);
    while (__stlxr(v68 - 1, p_shared_owners));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = v217;
  if (!v217)
    goto LABEL_99;
  v70 = (unint64_t *)&v217->__shared_owners_;
  do
    v71 = __ldaxr(v70);
  while (__stlxr(v71 - 1, v70));
  if (!v71)
  {
    ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
    std::__shared_weak_count::__release_weak(v69);
    v72 = v188;
    if (!v188)
      goto LABEL_103;
  }
  else
  {
LABEL_99:
    v72 = v188;
    if (!v188)
      goto LABEL_103;
  }
  v73 = (unint64_t *)&v72->__shared_owners_;
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v74 - 1, v73));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
    std::__shared_weak_count::__release_weak(v72);
    if ((SBYTE7(v220) & 0x80000000) == 0)
      goto LABEL_105;
    goto LABEL_104;
  }
LABEL_103:
  if (SBYTE7(v220) < 0)
LABEL_104:
    operator delete((void *)v219);
LABEL_105:
  v75 = v214;
  if (v214)
  {
    v76 = (unint64_t *)&v214->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }

  v78 = *(_QWORD *)(*((_QWORD *)this + 3) + 112);
  v79 = *(_QWORD **)v78;
  v80 = *(_QWORD **)(v78 + 8);
  if (v79 != v80)
  {
    while (*v79 != 0x348A0B0E758C07C2)
    {
      v79 += 5;
      if (v79 == v80)
        goto LABEL_121;
    }
  }
  if (v79 == v80)
  {
LABEL_121:
    v82 = 0;
  }
  else
  {
    v82 = v79[3];
    v81 = (std::__shared_weak_count *)v79[4];
    if (v81)
    {
      v83 = (unint64_t *)&v81->__shared_owners_;
      do
        v84 = __ldxr(v83);
      while (__stxr(v84 + 1, v83));
      do
        v85 = __ldaxr(v83);
      while (__stlxr(v85 - 1, v83));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
  }
  v86 = *((_QWORD *)this + 57);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v82 + 104));
  if (v86)
  {
    *(_QWORD *)&v219 = v86;
    *((_QWORD *)&v219 + 1) = v86;
    v87 = *(unsigned int *)(v86 + 68) | ((unint64_t)*(unsigned int *)(v86 + 64) << 32);
    *(_QWORD *)&v220 = *(_QWORD *)(v86 + 80);
    *((_QWORD *)&v220 + 1) = v87;
  }
  else
  {
    v219 = 0u;
    v220 = 0u;
  }
  LOBYTE(v221) = 1;
  v88 = geo::packed_array<mre::TextureStorage,geo::handle<mre::Texture>>::push_back((_QWORD *)(v82 + 576), &v219);
  std::__shared_mutex_base::unlock((std::__shared_mutex_base *)(v82 + 104));
  *((_QWORD *)this + 59) = v88;
  v89 = *((_QWORD *)this + 3);
  *(_QWORD *)(*(_QWORD *)(v89 + 168) + 40) = (char *)this + 392;
  v90 = *(id *)(*(_QWORD *)(*(_QWORD *)(v89 + 152) + 64) + 16);
  v218 = 0;
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::setCallbackQueue((_QWORD *)this + 60, v90, &v216);
  v91 = v218;
  if (v218 == &v216)
  {
    v92 = 4;
    v91 = &v216;
  }
  else
  {
    if (!v218)
      goto LABEL_130;
    v92 = 5;
  }
  (*v91)[v92]();
LABEL_130:
  v215 = 0;
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::setCallbackQueue((_QWORD *)this + 70, v90, &v213);
  v93 = v215;
  if (v215 == &v213)
  {
    v94 = 4;
    v93 = &v213;
  }
  else
  {
    if (!v215)
      goto LABEL_135;
    v94 = 5;
  }
  (*v93)[v94]();
LABEL_135:
  v212 = 0;
  v95 = v90;
  if (*((_QWORD *)this + 88))
  {
    GEOConfigRemoveBlockListener();
    v96 = (void *)*((_QWORD *)this + 88);
    *((_QWORD *)this + 88) = 0;

  }
  v97 = (uint64_t)v212;
  if (!v212)
    goto LABEL_140;
  if (v212 != v211)
  {
    v97 = (*(uint64_t (**)(void))(*v212 + 16))();
LABEL_140:
    *((_QWORD *)&v220 + 1) = v97;
    goto LABEL_146;
  }
  *((_QWORD *)&v220 + 1) = &v219;
  (*(void (**)(_QWORD *, __int128 *))(v211[0] + 24))(v211, &v219);
LABEL_146:
  std::__function::__value_func<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::swap[abi:nn180100](&v219, (_QWORD *)this + 91);
  v98 = (__int128 *)*((_QWORD *)&v220 + 1);
  if (*((__int128 **)&v220 + 1) == &v219)
  {
    v99 = 4;
    v98 = &v219;
  }
  else
  {
    if (!*((_QWORD *)&v220 + 1))
      goto LABEL_151;
    v99 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v98 + 8 * v99))();
LABEL_151:
  v100 = *((_QWORD *)this + 89);
  v101 = (std::__shared_weak_count *)*((_QWORD *)this + 90);
  if (v101)
  {
    v102 = (unint64_t *)&v101->__shared_owners_;
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
  }
  *(_QWORD *)&v219 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v219 + 1) = 3321888768;
  *(_QWORD *)&v220 = ___ZN2md11MonitorableINS_13TransformableINS_11ConfigValueI18GEOConfigKeyDoubledEEEEE16setCallbackQueueEPU28objcproto17OS_dispatch_queue8NSObjectNSt3__18functionIFvdEEE_block_invoke;
  *((_QWORD *)&v220 + 1) = &__block_descriptor_56_ea8_40c40_ZTSNSt3__110shared_ptrINS_6atomicIbEEEE_e14_v24__0___I_v_8l;
  v221 = (char *)this + 640;
  v222 = v100;
  v223 = v101;
  if (v101)
  {
    v104 = (unint64_t *)&v101->__shared_owners_;
    do
      v105 = __ldxr(v104);
    while (__stxr(v105 + 1, v104));
  }
  _GEOConfigAddBlockListenerForKey();
  v106 = objc_claimAutoreleasedReturnValue();
  v107 = (void *)*((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = v106;

  v108 = v223;
  if (v223)
  {
    v109 = (unint64_t *)&v223->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  if (v101)
  {
    v111 = (unint64_t *)&v101->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }

  v113 = v212;
  if (v212 == v211)
  {
    v114 = 4;
    v113 = v211;
  }
  else
  {
    if (!v212)
      goto LABEL_172;
    v114 = 5;
  }
  (*(void (**)(void))(*v113 + 8 * v114))();
LABEL_172:
  v115 = (__int128 **)((char *)this + 696);
  v209[0] = &off_1E42CCEC0;
  v210 = v209;
  v116 = (__int128 *)((char *)this + 672);
  *((_QWORD *)&v220 + 1) = &v219;
  std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_0,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_0>,double ()(double const&)>::__clone((uint64_t)v209, &v219);
  v117 = (__int128 *)*((_QWORD *)&v220 + 1);
  if ((__int128 *)((char *)this + 672) == &v219)
    goto LABEL_179;
  v118 = *v115;
  if (*((__int128 **)&v220 + 1) == &v219)
  {
    if (v118 == v116)
    {
      (*(void (**)(__int128 *, _QWORD *))(v219 + 24))(&v219, v207);
      (*(void (**)(_QWORD))(**((_QWORD **)&v220 + 1) + 32))(*((_QWORD *)&v220 + 1));
      *((_QWORD *)&v220 + 1) = 0;
      (*(void (**)(__int128 *, __int128 *))(*(_QWORD *)*v115 + 24))(*v115, &v219);
      (*(void (**)(__int128 *))(*(_QWORD *)*v115 + 32))(*v115);
      *v115 = 0;
      *((_QWORD *)&v220 + 1) = &v219;
      (*(void (**)(_QWORD *, char *))(v207[0] + 24))(v207, (char *)this + 672);
      (*(void (**)(_QWORD *))(v207[0] + 32))(v207);
      *v115 = v116;
      v117 = (__int128 *)*((_QWORD *)&v220 + 1);
      if (*((__int128 **)&v220 + 1) != &v219)
        goto LABEL_180;
LABEL_176:
      v119 = 4;
      v117 = &v219;
LABEL_183:
      (*(void (**)(__int128 *))(*(_QWORD *)v117 + 8 * v119))(v117);
      goto LABEL_184;
    }
    (*(void (**)(__int128 *, char *))(v219 + 24))(&v219, (char *)this + 672);
    (*(void (**)(_QWORD))(**((_QWORD **)&v220 + 1) + 32))(*((_QWORD *)&v220 + 1));
    v117 = *v115;
    *((_QWORD *)&v220 + 1) = *v115;
    *v115 = v116;
LABEL_179:
    if (v117 != &v219)
      goto LABEL_180;
    goto LABEL_176;
  }
  if (v118 == v116)
  {
    v117 = &v219;
    (*(void (**)(char *, __int128 *))(*(_QWORD *)v116 + 24))((char *)this + 672, &v219);
    (*(void (**)(__int128 *))(*(_QWORD *)*v115 + 32))(*v115);
    *v115 = (__int128 *)*((_QWORD *)&v220 + 1);
    *((_QWORD *)&v220 + 1) = &v219;
    v119 = 4;
    goto LABEL_183;
  }
  *((_QWORD *)&v220 + 1) = *v115;
  *v115 = v117;
  v117 = v118;
  if (v118 == &v219)
    goto LABEL_176;
LABEL_180:
  if (v117)
  {
    v119 = 5;
    goto LABEL_183;
  }
LABEL_184:
  if (*((_QWORD *)this + 80) && *((_QWORD *)this + 81))
  {
    GEOConfigGetDouble();
    *((_QWORD *)this + 82) = v120;
  }
  if (!*v115)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  *((double *)this + 83) = (*(double (**)(__int128 *, char *))(*(_QWORD *)*v115 + 48))(*v115, (char *)this + 656);
  v121 = v210;
  if (v210 == v209)
  {
    v122 = 4;
    v121 = v209;
  }
  else
  {
    if (!v210)
      goto LABEL_193;
    v122 = 5;
  }
  (*(void (**)(void))(*v121 + 8 * v122))();
LABEL_193:
  *(_QWORD *)&v219 = &off_1E42CCF08;
  *((_QWORD *)&v219 + 1) = this;
  *((_QWORD *)&v220 + 1) = &v219;
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::setCallbackQueue((_QWORD *)this + 95, v95, &v219);
  v123 = (__int128 *)*((_QWORD *)&v220 + 1);
  if (*((__int128 **)&v220 + 1) == &v219)
  {
    v124 = 4;
    v123 = &v219;
  }
  else
  {
    if (!*((_QWORD *)&v220 + 1))
      goto LABEL_198;
    v124 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v123 + 8 * v124))();
LABEL_198:
  v207[0] = &off_1E42CCF50;
  v207[1] = this;
  v208 = v207;
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::setCallbackQueue((_QWORD *)this + 105, v95, v207);
  v125 = v208;
  if (v208 == v207)
  {
    v126 = 4;
    v125 = v207;
  }
  else
  {
    if (!v208)
      goto LABEL_203;
    v126 = 5;
  }
  (*(void (**)(void))(*v125 + 8 * v126))();
LABEL_203:
  v205[0] = &off_1E42CCF98;
  v205[1] = this;
  v206 = v205;
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::setCallbackQueue((_QWORD *)this + 115, v95, v205);
  v127 = v206;
  if (v206 == v205)
  {
    v128 = 4;
    v127 = v205;
  }
  else
  {
    if (!v206)
      goto LABEL_208;
    v128 = 5;
  }
  (*(void (**)(void))(*v127 + 8 * v128))();
LABEL_208:
  md::ARWalkingSupport::shouldUseHighPrecisionAltitude(*((md::ARWalkingSupport **)this + 55), *((unsigned __int8 *)this + 936));
  v203[0] = &off_1E42CCFE0;
  v203[1] = this;
  v204 = v203;
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::setCallbackQueue(v186, v95, v203);
  v129 = v204;
  if (v204 == v203)
  {
    v130 = 4;
    v129 = v203;
  }
  else
  {
    if (!v204)
      goto LABEL_213;
    v130 = 5;
  }
  (*(void (**)(void))(*v129 + 8 * v130))();
LABEL_213:
  v201[0] = &off_1E42CD028;
  v201[1] = this;
  v202 = v201;
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::setCallbackQueue(v185, v95, v201);
  v131 = v202;
  if (v202 == v201)
  {
    v132 = 4;
    v131 = v201;
  }
  else
  {
    if (!v202)
      goto LABEL_218;
    v132 = 5;
  }
  (*(void (**)(void))(*v131 + 8 * v132))();
LABEL_218:
  v199[0] = &off_1E42CD070;
  v199[1] = this;
  v200 = v199;
  md::Monitorable<md::ConfigValue<GEOConfigKeyUInteger,unsigned int>>::setCallbackQueue(v184, v95, v199);
  v133 = v200;
  if (v200 == v199)
  {
    v134 = 4;
    v133 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_223;
    v134 = 5;
  }
  (*(void (**)(void))(*v133 + 8 * v134))();
LABEL_223:
  v197[0] = &off_1E42CD0B8;
  v197[1] = this;
  v198 = v197;
  md::Monitorable<md::ConfigValue<GEOConfigKeyUInteger,unsigned int>>::setCallbackQueue(v183, v95, v197);
  v135 = v198;
  if (v198 == v197)
  {
    v136 = 4;
    v135 = v197;
  }
  else
  {
    if (!v198)
      goto LABEL_228;
    v136 = 5;
  }
  (*(void (**)(void))(*v135 + 8 * v136))();
LABEL_228:
  v195[0] = &off_1E42CD100;
  v195[1] = this;
  v196 = v195;
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::setCallbackQueue(v181, v95, v195);
  v137 = v196;
  if (v196 == v195)
  {
    v138 = 4;
    v137 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_233;
    v138 = 5;
  }
  (*(void (**)(void))(*v137 + 8 * v138))();
LABEL_233:
  v193[0] = &off_1E42CD148;
  v193[1] = this;
  v194 = v193;
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::setCallbackQueue(v180, v95, v193);
  v139 = v194;
  if (v194 == v193)
  {
    v140 = 4;
    v139 = v193;
  }
  else
  {
    if (!v194)
      goto LABEL_238;
    v140 = 5;
  }
  (*(void (**)(void))(*v139 + 8 * v140))();
LABEL_238:
  v191[0] = &off_1E42CD190;
  v191[1] = this;
  v192 = v191;
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::setCallbackQueue((_QWORD *)this + 195, v95, v191);
  v141 = v192;
  if (v192 == v191)
  {
    v142 = 4;
    v141 = v191;
  }
  else
  {
    if (!v192)
      goto LABEL_243;
    v142 = 5;
  }
  (*(void (**)(void))(*v141 + 8 * v142))();
LABEL_243:
  v190 = 0;
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::setCallbackQueue(v182, v95, v189);
  v143 = v190;
  if (v190 == v189)
  {
    v144 = 4;
    v143 = v189;
  }
  else
  {
    if (!v190)
      goto LABEL_248;
    v144 = 5;
  }
  (*(void (**)(void))(*v143 + 8 * v144))();
LABEL_248:
  v145 = (double *)*((_QWORD *)this + 55);
  v146 = *((double *)this + 187);
  if (v145[4] != v146)
  {
    if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
    v147 = GEOGetVectorKitARWalkingSupportLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = v146;
      _os_log_impl(&dword_19F029000, v147, OS_LOG_TYPE_INFO, "maxDelayPostLocalizationWithoutExistingFeatures:%f", buf, 0xCu);
    }
    v145[4] = v146;
    v145 = (double *)*((_QWORD *)this + 55);
  }
  v148 = *((double *)this + 197);
  if (v145[5] != v148)
  {
    if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1)
      dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_337);
    v149 = GEOGetVectorKitARWalkingSupportLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = v148;
      _os_log_impl(&dword_19F029000, v149, OS_LOG_TYPE_INFO, "maxDelayPostLocalizationWithExistingFeatures:%f", buf, 0xCu);
    }
    v145[5] = v148;
    v145 = (double *)*((_QWORD *)this + 55);
  }
  md::ARWalkingSupport::setPerpendicularLayoutEnabled((md::ARWalkingSupport *)v145, *((unsigned __int8 *)this + 1416));
  md::ARWalkingSupport::setHighPrecisionZLevel(*((md::ARWalkingSupport **)this + 55), *((unsigned __int8 *)this + 1176));
  v150 = *((_QWORD *)this + 55);
  *(_QWORD *)buf = *((_QWORD *)this + 127);
  md::ARWalkingSupport::setHighPrecisionAltitudeDistanceThreshold(v150, (double *)buf);
  md::ARWalkingSupport::setShouldUse3DArrival(*((md::ARWalkingSupport **)this + 55), *((unsigned __int8 *)this + 1096));

  return this;
}

void sub_19FEF3520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _Unwind_Exception *exception_objecta, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  md::StandardLabeler *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  md::ARWalkingSupport *v31;

  md::ARWalkingLabeler::{unnamed type#4}::~ARWalkingLabeler(v25);
  md::ARWalkingLabeler::{unnamed type#3}::~ARWalkingLabeler(v24);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable(v23);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable(a10);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(a11);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(a12);
  md::Monitorable<md::ConfigValue<GEOConfigKeyUInteger,unsigned int>>::~Monitorable(a13);
  md::Monitorable<md::ConfigValue<GEOConfigKeyUInteger,unsigned int>>::~Monitorable(a14);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(a15);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable(a16);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(a18);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable(a19);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable(a20);
  md::Monitorable<md::Transformable<md::ConfigValue<GEOConfigKeyDouble,double>>>::~Monitorable(a21);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable(a22);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable(a9);
  v27 = (std::__shared_weak_count *)*((_QWORD *)v22 + 58);
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = *((_QWORD *)v22 + 56);
  *((_QWORD *)v22 + 56) = 0;
  if (v30)
    std::default_delete<md::LabelExternalMeshModerator>::operator()[abi:nn180100](v30);
  v31 = (md::ARWalkingSupport *)*((_QWORD *)v22 + 55);
  *((_QWORD *)v22 + 55) = 0;
  if (v31)
  {
    md::ARWalkingSupport::~ARWalkingSupport(v31);
    MEMORY[0x1A1AF4E00]();
  }
  md::StandardLabeler::~StandardLabeler(v22);
  _Unwind_Resume(a1);
}

void sub_19FEF3AB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::splitRoadSectionByZ(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, void *a5, float a6, float a7)
{
  void (**v13)(__n128, float);
  __n128 v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int *v19;
  BOOL v20;
  int v21;
  unsigned int v22;
  unsigned int *v23;
  float v24;
  unsigned int v25;
  void (**v26)(__n128, float);

  v13 = a5;
  v14.n128_f64[0] = vabds_f32(a7, a6);
  if (v14.n128_f64[0] >= 1.0e-10)
  {
    v26 = v13;
    v14.n128_f32[0] = fminf(a6, a7);
    v15 = fmaxf(a6, a7);
    if (a4)
    {
      v16 = 0;
      v17 = 0;
      v18 = vcvtms_u32_f32(v14.n128_f32[0]);
      v19 = (unsigned int *)(a3 + 20);
      while (*(v19 - 2) <= v18)
      {
        if (*((_BYTE *)v19 + 9))
          v17 = *v19;
        ++v16;
        v19 += 25;
        if (a4 == v16)
          goto LABEL_18;
      }
    }
    else
    {
      v17 = 0;
      LODWORD(v16) = 0;
    }
    v20 = a4 >= v16;
    v21 = a4 - v16;
    if (v21 != 0 && v20)
    {
      v22 = vcvtps_u32_f32(v15);
      v23 = (unsigned int *)(a3 + 100 * v16 + 20);
      while (1)
      {
        v25 = *(v23 - 2);
        if (v25 >= v22)
          break;
        if (!*((_BYTE *)v23 + 9) || *v23 == (_DWORD)v17)
        {
          v24 = v14.n128_f32[0];
        }
        else
        {
          v24 = (float)v25;
          v13[2](v14, (float)v25);
          v17 = *v23;
          v13 = v26;
        }
        v23 += 25;
        v14.n128_f32[0] = v24;
        if (!--v21)
          goto LABEL_19;
      }
    }
LABEL_18:
    v24 = v14.n128_f32[0];
LABEL_19:
    ((void (*)(void (**)(__n128, float), uint64_t, uint64_t, uint64_t, BOOL, float, float))v13[2])(v13, v17, a1, a2, a6 > a7, v24, v15);
    v13 = v26;
  }

}

void sub_19FEF3C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t md::MapEngineConfiguration::MapEngineConfiguration(uint64_t a1, char a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  _QWORD *v8;

  *(_QWORD *)a1 = off_1E429CEB0;
  *(_BYTE *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 9) = a3;
  v4 = operator new();
  v5 = v4;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_OWORD *)(v4 + 272) = 0u;
  *(_OWORD *)(v4 + 288) = 0u;
  *(_OWORD *)(v4 + 304) = 0u;
  *(_OWORD *)(v4 + 320) = 0u;
  *(_OWORD *)(v4 + 336) = 0u;
  *(_OWORD *)(v4 + 352) = 0u;
  *(_OWORD *)(v4 + 368) = 0u;
  *(_OWORD *)(v4 + 384) = 0u;
  *(_OWORD *)(v4 + 400) = 0u;
  *(_DWORD *)(v4 + 32) = 1065353216;
  *(_OWORD *)(v4 + 416) = 0u;
  *(_OWORD *)(v4 + 432) = 0u;
  do
  {
    v6 = __ldaxr(gdc::Registry::nextId(void)::next);
    v7 = v6 + 1;
  }
  while (__stlxr(v7, gdc::Registry::nextId(void)::next));
  *(_WORD *)(v4 + 40) = v7;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_QWORD *)(v4 + 144) = 0;
  *(_DWORD *)(v4 + 152) = 1065353216;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_QWORD *)(v4 + 192) = 0;
  *(_DWORD *)(v4 + 200) = 1065353216;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_QWORD *)(v4 + 240) = 0;
  *(_DWORD *)(v4 + 248) = 1065353216;
  *(_QWORD *)(v4 + 288) = 0;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_OWORD *)(v4 + 272) = 0u;
  *(_DWORD *)(v4 + 296) = 1065353216;
  *(_OWORD *)(v4 + 304) = 0u;
  *(_OWORD *)(v4 + 320) = 0u;
  *(_QWORD *)(v4 + 336) = 0;
  *(_DWORD *)(v4 + 344) = 1065353216;
  *(_OWORD *)(v4 + 352) = 0u;
  *(_OWORD *)(v4 + 368) = 0u;
  *(_QWORD *)(v4 + 384) = 0;
  *(_DWORD *)(v4 + 392) = 1065353216;
  *(_OWORD *)(v4 + 400) = 0u;
  *(_OWORD *)(v4 + 416) = 0u;
  *(_QWORD *)(v4 + 432) = 0;
  *(_DWORD *)(v4 + 440) = 1065353216;
  *(_QWORD *)(a1 + 16) = v4;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E42E7598;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v5;
  *(_QWORD *)(a1 + 24) = v8;
  return a1;
}

void sub_19FEF3DA4(_Unwind_Exception *a1)
{
  gdc::Registry *v1;

  gdc::Registry::~Registry(v1);
  MEMORY[0x1A1AF4E00]();
  _Unwind_Resume(a1);
}

void md::DaVinciNavigationMapEngineMode::~DaVinciNavigationMapEngineMode(md::DaVinciNavigationMapEngineMode *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42A0578;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 72);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::MapEngineMode::~MapEngineMode(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = &off_1E42A0578;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 72);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A1AF4E00);
}

void md::DaVinciNavigationMapEngineMode::didBecomeActive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int8x8_t *v5;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  int8x8_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  md::LabelManager *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD v34[3];
  _QWORD *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  md::DaVinciBaseMapEngineMode::didBecomeActive(a1, a2, a3, a4);
  v5 = *(int8x8_t **)(a2 + 1120);
  v6 = v5[2];
  if (!*(_QWORD *)&v6)
    return;
  v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = 0x2FED70A4459DFCA1;
    if (*(_QWORD *)&v6 <= 0x2FED70A4459DFCA1uLL)
      v9 = 0x2FED70A4459DFCA1uLL % *(_QWORD *)&v6;
  }
  else
  {
    v9 = (*(_QWORD *)&v6 - 1) & 0x2FED70A4459DFCA1;
  }
  v10 = *(_QWORD **)(*(_QWORD *)&v5[1] + 8 * v9);
  if (!v10)
    goto LABEL_26;
  v11 = (_QWORD *)*v10;
  if (!v11)
    goto LABEL_26;
  if (v7.u32[0] < 2uLL)
  {
    while (1)
    {
      v13 = v11[1];
      if (v13 == 0x2FED70A4459DFCA1)
      {
        if (v11[2] == 0x2FED70A4459DFCA1)
          goto LABEL_22;
      }
      else if ((v13 & (*(_QWORD *)&v6 - 1)) != v9)
      {
        goto LABEL_24;
      }
      v11 = (_QWORD *)*v11;
      if (!v11)
        goto LABEL_24;
    }
  }
  while (1)
  {
    v12 = v11[1];
    if (v12 == 0x2FED70A4459DFCA1)
      break;
    if (v12 >= *(_QWORD *)&v6)
      v12 %= *(_QWORD *)&v6;
    if (v12 != v9)
      goto LABEL_24;
LABEL_11:
    v11 = (_QWORD *)*v11;
    if (!v11)
      goto LABEL_24;
  }
  if (v11[2] != 0x2FED70A4459DFCA1)
    goto LABEL_11;
LABEL_22:
  v14 = v11[5];
  if (v14)
  {
    md::StyleLogic::setMapMode(v14, 3, 0.0);
    v5 = *(int8x8_t **)(a2 + 1120);
    v6 = v5[2];
  }
LABEL_24:
  if (!*(_QWORD *)&v6)
    return;
  v15 = (uint8x8_t)vcnt_s8(v6);
  v15.i16[0] = vaddlv_u8(v15);
  v8 = v15.u32[0];
LABEL_26:
  if (v8 > 1)
  {
    v16 = 0xDAD5CEE0DC5FF509;
    if (*(_QWORD *)&v6 <= 0xDAD5CEE0DC5FF509)
      v16 = 0xDAD5CEE0DC5FF509 % *(_QWORD *)&v6;
  }
  else
  {
    v16 = (*(_QWORD *)&v6 - 1) & 0xDAD5CEE0DC5FF509;
  }
  v17 = v5[1];
  v18 = *(_QWORD **)(*(_QWORD *)&v17 + 8 * v16);
  if (!v18)
    goto LABEL_50;
  v19 = (_QWORD *)*v18;
  if (!v19)
    goto LABEL_50;
  if (v8 < 2)
  {
    while (1)
    {
      v21 = v19[1];
      if (v21 == 0xDAD5CEE0DC5FF509)
      {
        if (v19[2] == 0xDAD5CEE0DC5FF509)
          goto LABEL_46;
      }
      else if ((v21 & (*(_QWORD *)&v6 - 1)) != v16)
      {
        goto LABEL_48;
      }
      v19 = (_QWORD *)*v19;
      if (!v19)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v20 = v19[1];
    if (v20 != 0xDAD5CEE0DC5FF509)
    {
      if (v20 >= *(_QWORD *)&v6)
        v20 %= *(_QWORD *)&v6;
      if (v20 != v16)
        goto LABEL_48;
      goto LABEL_35;
    }
    if (v19[2] != 0xDAD5CEE0DC5FF509)
    {
LABEL_35:
      v19 = (_QWORD *)*v19;
      if (!v19)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_46:
  v22 = v19[5];
  if (v22)
  {
    *(_BYTE *)(v22 + 168) = 1;
    v6 = v5[2];
  }
LABEL_48:
  if (!*(_QWORD *)&v6)
    return;
  v23 = (uint8x8_t)vcnt_s8(v6);
  v23.i16[0] = vaddlv_u8(v23);
  v8 = v23.u32[0];
LABEL_50:
  if (v8 > 1)
  {
    v24 = 0x20A1ED17D78F322BLL;
    if (*(_QWORD *)&v6 <= 0x20A1ED17D78F322BuLL)
      v24 = 0x20A1ED17D78F322BuLL % *(_QWORD *)&v6;
  }
  else
  {
    v24 = (*(_QWORD *)&v6 - 1) & 0x20A1ED17D78F322BLL;
  }
  v25 = *(_QWORD **)(*(_QWORD *)&v17 + 8 * v24);
  if (!v25)
    return;
  v26 = (_QWORD *)*v25;
  if (!v26)
    return;
  if (v8 < 2)
  {
    v27 = *(_QWORD *)&v6 - 1;
    while (1)
    {
      v29 = v26[1];
      if (v29 == 0x20A1ED17D78F322BLL)
      {
        if (v26[2] == 0x20A1ED17D78F322BLL)
          goto LABEL_70;
      }
      else if ((v29 & v27) != v24)
      {
        return;
      }
      v26 = (_QWORD *)*v26;
      if (!v26)
        return;
    }
  }
  while (2)
  {
    v28 = v26[1];
    if (v28 != 0x20A1ED17D78F322BLL)
    {
      if (v28 >= *(_QWORD *)&v6)
        v28 %= *(_QWORD *)&v6;
      if (v28 != v24)
        return;
      goto LABEL_59;
    }
    if (v26[2] != 0x20A1ED17D78F322BLL)
    {
LABEL_59:
      v26 = (_QWORD *)*v26;
      if (!v26)
        return;
      continue;
    }
    break;
  }
LABEL_70:
  v30 = v26[5];
  if (v30)
  {
    v31 = *(md::LabelManager **)(v30 + 160);
    if (*((_BYTE *)v31 + 3553) != 2)
    {
      *((_BYTE *)v31 + 3553) = 2;
      v34[0] = &off_1E42C9488;
      v34[1] = v31;
      v34[2] = 2;
      v35 = v34;
      md::LabelManager::queueCommand(v31, 7, 1, v34);
      v32 = v35;
      if (v35 == v34)
      {
        v33 = 4;
        v32 = v34;
LABEL_76:
        (*(void (**)(void))(*v32 + 8 * v33))();
      }
      else if (v35)
      {
        v33 = 5;
        goto LABEL_76;
      }
    }
  }
}

void sub_19FEF4258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void md::DaVinciNavigationMapEngineMode::willBecomeInactive(uint64_t a1, uint64_t a2)
{
  int8x8_t *v2;
  int8x8_t v3;
  uint8x8_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8x8_t v19;
  unint64_t v20;
  int8x8_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  md::LabelManager *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD v38[3];
  _QWORD *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v2 = *(int8x8_t **)(a2 + 1120);
  v3 = v2[2];
  if (!*(_QWORD *)&v3)
    return;
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    v7 = 0x91E65CD7F1A7A7FALL;
    if (*(_QWORD *)&v3 <= 0x91E65CD7F1A7A7FALL)
      v7 = 0x91E65CD7F1A7A7FALL % *(_QWORD *)&v3;
  }
  else
  {
    v7 = (*(_QWORD *)&v3 - 1) & 0x91E65CD7F1A7A7FALL;
  }
  v8 = *(_QWORD **)(*(_QWORD *)&v2[1] + 8 * v7);
  if (v8)
  {
    v9 = (_QWORD *)*v8;
    if (v9)
    {
      if (v5.u32[0] < 2uLL)
      {
        while (1)
        {
          v11 = v9[1];
          if (v11 == 0x91E65CD7F1A7A7FALL)
          {
            if (v9[2] == 0x91E65CD7F1A7A7FALL)
              goto LABEL_22;
          }
          else if ((v11 & (*(_QWORD *)&v3 - 1)) != v7)
          {
            goto LABEL_24;
          }
          v9 = (_QWORD *)*v9;
          if (!v9)
            goto LABEL_24;
        }
      }
      do
      {
        v10 = v9[1];
        if (v10 == 0x91E65CD7F1A7A7FALL)
        {
          if (v9[2] == 0x91E65CD7F1A7A7FALL)
          {
LABEL_22:
            v12 = v9[5];
            if (v12)
              *(_BYTE *)(v12 + 120) = 0;
            break;
          }
        }
        else
        {
          if (v10 >= *(_QWORD *)&v3)
            v10 %= *(_QWORD *)&v3;
          if (v10 != v7)
            break;
        }
        v9 = (_QWORD *)*v9;
      }
      while (v9);
    }
  }
LABEL_24:
  if (v5.u32[0] > 1uLL)
  {
    v13 = 0x2FED70A4459DFCA1;
    if (*(_QWORD *)&v3 <= 0x2FED70A4459DFCA1uLL)
      v13 = 0x2FED70A4459DFCA1uLL % *(_QWORD *)&v3;
  }
  else
  {
    v13 = (*(_QWORD *)&v3 - 1) & 0x2FED70A4459DFCA1;
  }
  v14 = *(_QWORD **)(*(_QWORD *)&v2[1] + 8 * v13);
  if (!v14)
    goto LABEL_48;
  v15 = (_QWORD *)*v14;
  if (!v15)
    goto LABEL_48;
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == 0x2FED70A4459DFCA1)
      {
        if (v15[2] == 0x2FED70A4459DFCA1)
          goto LABEL_44;
      }
      else if ((v17 & (*(_QWORD *)&v3 - 1)) != v13)
      {
        goto LABEL_46;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_46;
    }
  }
  while (1)
  {
    v16 = v15[1];
    if (v16 == 0x2FED70A4459DFCA1)
      break;
    if (v16 >= *(_QWORD *)&v3)
      v16 %= *(_QWORD *)&v3;
    if (v16 != v13)
      goto LABEL_46;
LABEL_33:
    v15 = (_QWORD *)*v15;
    if (!v15)
      goto LABEL_46;
  }
  if (v15[2] != 0x2FED70A4459DFCA1)
    goto LABEL_33;
LABEL_44:
  v18 = v15[5];
  if (v18)
  {
    md::StyleLogic::setMapMode(v18, 0, 0.0);
    v2 = *(int8x8_t **)(a2 + 1120);
    v3 = v2[2];
  }
LABEL_46:
  if (!*(_QWORD *)&v3)
    return;
  v19 = (uint8x8_t)vcnt_s8(v3);
  v19.i16[0] = vaddlv_u8(v19);
  v6 = v19.u32[0];
LABEL_48:
  if (v6 > 1)
  {
    v20 = 0xDAD5CEE0DC5FF509;
    if (*(_QWORD *)&v3 <= 0xDAD5CEE0DC5FF509)
      v20 = 0xDAD5CEE0DC5FF509 % *(_QWORD *)&v3;
  }
  else
  {
    v20 = (*(_QWORD *)&v3 - 1) & 0xDAD5CEE0DC5FF509;
  }
  v21 = v2[1];
  v22 = *(_QWORD **)(*(_QWORD *)&v21 + 8 * v20);
  if (!v22)
    goto LABEL_72;
  v23 = (_QWORD *)*v22;
  if (!v23)
    goto LABEL_72;
  if (v6 < 2)
  {
    while (1)
    {
      v25 = v23[1];
      if (v25 == 0xDAD5CEE0DC5FF509)
      {
        if (v23[2] == 0xDAD5CEE0DC5FF509)
          goto LABEL_68;
      }
      else if ((v25 & (*(_QWORD *)&v3 - 1)) != v20)
      {
        goto LABEL_70;
      }
      v23 = (_QWORD *)*v23;
      if (!v23)
        goto LABEL_70;
    }
  }
  while (2)
  {
    v24 = v23[1];
    if (v24 != 0xDAD5CEE0DC5FF509)
    {
      if (v24 >= *(_QWORD *)&v3)
        v24 %= *(_QWORD *)&v3;
      if (v24 != v20)
        goto LABEL_70;
      goto LABEL_57;
    }
    if (v23[2] != 0xDAD5CEE0DC5FF509)
    {
LABEL_57:
      v23 = (_QWORD *)*v23;
      if (!v23)
        goto LABEL_70;
      continue;
    }
    break;
  }
LABEL_68:
  v26 = v23[5];
  if (v26)
  {
    *(_BYTE *)(v26 + 168) = 0;
    v3 = v2[2];
  }
LABEL_70:
  if (!*(_QWORD *)&v3)
    return;
  v27 = (uint8x8_t)vcnt_s8(v3);
  v27.i16[0] = vaddlv_u8(v27);
  v6 = v27.u32[0];
LABEL_72:
  if (v6 > 1)
  {
    v28 = 0x20A1ED17D78F322BLL;
    if (*(_QWORD *)&v3 <= 0x20A1ED17D78F322BuLL)
      v28 = 0x20A1ED17D78F322BuLL % *(_QWORD *)&v3;
  }
  else
  {
    v28 = (*(_QWORD *)&v3 - 1) & 0x20A1ED17D78F322BLL;
  }
  v29 = *(_QWORD **)(*(_QWORD *)&v21 + 8 * v28);
  if (!v29)
    return;
  v30 = (_QWORD *)*v29;
  if (!v30)
    return;
  if (v6 < 2)
  {
    v31 = *(_QWORD *)&v3 - 1;
    while (1)
    {
      v33 = v30[1];
      if (v33 == 0x20A1ED17D78F322BLL)
      {
        if (v30[2] == 0x20A1ED17D78F322BLL)
          goto LABEL_92;
      }
      else if ((v33 & v31) != v28)
      {
        return;
      }
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
    }
  }
  while (2)
  {
    v32 = v30[1];
    if (v32 != 0x20A1ED17D78F322BLL)
    {
      if (v32 >= *(_QWORD *)&v3)
        v32 %= *(_QWORD *)&v3;
      if (v32 != v28)
        return;
      goto LABEL_81;
    }
    if (v30[2] != 0x20A1ED17D78F322BLL)
    {
LABEL_81:
      v30 = (_QWORD *)*v30;
      if (!v30)
        return;
      continue;
    }
    break;
  }
LABEL_92:
  v34 = v30[5];
  if (v34)
  {
    v35 = *(md::LabelManager **)(v34 + 160);
    if (*((_BYTE *)v35 + 3553) != 1)
    {
      *((_BYTE *)v35 + 3553) = 1;
      v38[0] = &off_1E42C9488;
      v38[1] = v35;
      v38[2] = 1;
      v39 = v38;
      md::LabelManager::queueCommand(v35, 7, 1, v38);
      v36 = v39;
      if (v39 == v38)
      {
        v37 = 4;
        v36 = v38;
LABEL_98:
        (*(void (**)(void))(*v36 + 8 * v37))();
      }
      else if (v39)
      {
        v37 = 5;
        goto LABEL_98;
      }
    }
  }
}

void sub_19FEF471C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t md::DaVinciNavigationMapEngineMode::DaVinciNavigationMapEngineMode(uint64_t a1, int a2, uint64_t a3, std::__shared_weak_count *a4)
{
  unint64_t *p_shared_owners;
  unint64_t v8;
  char IsEnabled_VKMLayout_Navigation;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  _QWORD v21[2];
  __int16 v22;
  __int16 v23;
  unsigned __int16 v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  unsigned __int16 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v21[0] = a3;
  v21[1] = a4;
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  IsEnabled_VKMLayout_Navigation = MapsFeature_IsEnabled_VKMLayout_Navigation();
  md::DaVinciBaseMapEngineMode::DaVinciBaseMapEngineMode(a1, 12, a2, v21, IsEnabled_VKMLayout_Navigation);
  if (a4)
  {
    v10 = (unint64_t *)&a4->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  *(_QWORD *)a1 = &off_1E42A7B58;
  v22 = 13;
  v23 = a2;
  v12 = std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0xDu, &v22);
  if (a2)
    v13 = 65537;
  else
    v13 = 1;
  *(_DWORD *)((char *)v12 + 18) = v13;
  if (GEOConfigGetBOOL())
  {
    LOBYTE(v22) = 46;
    *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x2Eu, &v22)+ 17) = 2;
    v22 = 52;
    v23 = a2;
    v14 = std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0x34u, &v22);
    if (a2)
      v15 = 65538;
    else
      v15 = 2;
    *(_DWORD *)((char *)v14 + 18) = v15;
  }
  if (!*(_BYTE *)(a1 + 64))
    *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 72) = 0x3FE0C152382D7365;
  LOBYTE(v22) = 41;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x29u, &v22)+ 17) = 2;
  LOBYTE(v22) = 42;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x2Au, &v22)+ 17) = 2;
  v22 = 11;
  if (a2)
    v16 = 7;
  else
    v16 = 2;
  v23 = v16;
  v24 = 12;
  v25 = v16;
  v26 = 71;
  v27 = v16;
  v28 = 72;
  v29 = v16;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0xBu, &v22)+ 18) = (v16 << 16) | 2;
  v17 = v25;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, v24, &v24)+ 18) = (v17 << 16) | 2;
  v18 = v27;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, v26, &v26)+ 18) = (v18 << 16) | 2;
  v19 = v29;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, v28, &v28)+ 18) = (v19 << 16) | 2;
  return a1;
}

void sub_19FEF49DC(_Unwind_Exception *a1)
{
  md::MapEngineMode *v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)v1 = &off_1E42A0578;
  v3 = (std::__shared_weak_count *)*((_QWORD *)v1 + 72);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  md::MapEngineMode::~MapEngineMode(v1);
  _Unwind_Resume(a1);
}

void ggl::VSLibrary::~VSLibrary(ggl::VSLibrary *this)
{
  ggl::ShaderLibrary::~ShaderLibrary(this);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::VSLibraryBundleMTLData::~VSLibraryBundleMTLData(ggl::VSLibraryBundleMTLData *this)
{
  ggl::MTLShaderLibraryData::~MTLShaderLibraryData(this);
  JUMPOUT(0x1A1AF4E00);
}

void altitude::IOSurfaceData::~IOSurfaceData(altitude::IOSurfaceData *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E42C4128;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  ggl::Data::~Data(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E42C4128;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  ggl::Data::~Data(this);
  JUMPOUT(0x1A1AF4E00);
}

_QWORD *altitude::IOSurfaceData::operator=(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = a2[2];
  a1[1] = a2[1];
  a1[2] = v3;
  v5 = a2[3];
  v4 = a2[4];
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (std::__shared_weak_count *)a1[4];
  a1[3] = v5;
  a1[4] = v4;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return a1;
}

uint64_t md::MarkerFeatureHandle::MarkerFeatureHandle(uint64_t a1, unint64_t a2, int a3)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  geo::codec::VectorTile *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  *(_WORD *)(a1 + 16) = 255;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v6 = *(std::__shared_weak_count **)(a2 + 8);
  if (v6)
  {
    v7 = std::__shared_weak_count::lock(v6);
    if (v7)
      v8 = *(geo::codec::VectorTile **)a2;
    else
      v8 = 0;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  geo::codec::VectorTile::key(v8);
  *(_QWORD *)&v41 = GEOTileKeyMake();
  *((_QWORD *)&v41 + 1) = v9;
  v10 = (unsigned __int16)(HIDWORD(v9) >> 8);
  v11 = *(_QWORD *)((char *)&v41 + 1);
  v12 = (*(_QWORD *)((char *)&v41 + 1) >> 40) & 0x3FLL;
  *(_BYTE *)(a1 + 16) = -1;
  *(_BYTE *)(a1 + 17) = v12;
  *((_QWORD *)&v13 + 1) = (v9 >> 8) | ((v10 | (HIBYTE(v9) << 16)) << 32);
  *(_QWORD *)&v13 = v11;
  *(_QWORD *)(a1 + 20) = *(_QWORD *)&vzip1_s32((int32x2_t)(*((_QWORD *)&v13 + 1) >> 8), (int32x2_t)(v13 >> 46)) & 0x3FFFFFF03FFFFFFLL;
  *(_DWORD *)(a1 + 40) = v10 >> 2;
  objc_msgSend(MEMORY[0x1E0D27420], "modernManager");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "activeTileGroup");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)(a1 + 44) = objc_msgSend(v15, "versionForTileKey:", &v41);

  v17 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(a2 + 32);
  if (v16)
  {
    v18 = (unint64_t *)(v16 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = *(std::__shared_weak_count **)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v17;
  *(_QWORD *)(a1 + 56) = v16;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  *(_BYTE *)a1 = a3;
  *(_QWORD *)(a1 + 8) = -1;
  switch(a3)
  {
    case 1:
      v31 = geo::codec::VectorTile::pois(v8);
      v32 = geo::codec::VectorTile::poisCount(v8);
      if (v31 <= a2 && v31 + 224 * v32 > a2)
      {
        v25 = (uint64_t)(a2 - v31) >> 5;
        v26 = 0x6DB6DB6DB6DB6DB7;
        goto LABEL_33;
      }
      break;
    case 2:
    case 19:
      v23 = geo::codec::VectorTile::lines(v8);
      v24 = geo::codec::VectorTile::linesCount(v8);
      if (v23 <= a2 && v23 + 168 * v24 > a2)
      {
        v25 = (uint64_t)(a2 - v23) >> 3;
        v26 = 0xCF3CF3CF3CF3CF3DLL;
        goto LABEL_33;
      }
      break;
    case 8:
    case 12:
      v29 = geo::codec::VectorTile::transitNodes(v8);
      v30 = geo::codec::VectorTile::transitNodeCount(v8);
      if (v29 <= a2 && v29 + 344 * v30 > a2)
      {
        v25 = (uint64_t)(a2 - v29) >> 3;
        v26 = 0x82FA0BE82FA0BE83;
        goto LABEL_33;
      }
      break;
    case 9:
    case 13:
      v27 = geo::codec::VectorTile::transitLines(v8);
      v28 = geo::codec::VectorTile::transitLineCount(v8);
      if (v27 <= a2 && v27 + 104 * v28 > a2)
      {
        v25 = (uint64_t)(a2 - v27) >> 3;
        v26 = 0x4EC4EC4EC4EC4EC5;
        goto LABEL_33;
      }
      break;
    case 11:
      v36 = geo::codec::VectorTile::transitAccessPoints(v8);
      v37 = geo::codec::VectorTile::transitAccessPointCount(v8);
      if (v36 <= a2 && v36 + 248 * v37 > a2)
      {
        v25 = (uint64_t)(a2 - v36) >> 3;
        v26 = 0xEF7BDEF7BDEF7BDFLL;
LABEL_33:
        v35 = v25 * v26;
        goto LABEL_34;
      }
      break;
    default:
      v33 = geo::codec::VectorTile::polygons(v8);
      v34 = geo::codec::VectorTile::polygonsCount(v8);
      if (v33 <= a2 && v33 + (v34 << 7) > a2)
      {
        *(_BYTE *)a1 = 0;
        v35 = (uint64_t)(a2 - v33) >> 7;
LABEL_34:
        *(_QWORD *)(a1 + 8) = v35;
      }
      break;
  }
  if (v7)
  {
    v38 = (unint64_t *)&v7->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_19FEF5024(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = *(std::__shared_weak_count **)(v1 + 56);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0800;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E0800;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 32))(a1 + 32);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 256);
}

void ggl::RouteLine::BaseMesh::~BaseMesh(ggl::RouteLine::BaseMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::RouteLine::BaseMesh::~BaseMesh(ggl::RouteLine::BaseMesh *this)
{
  ggl::Mesh::~Mesh((ggl::RouteLine::BaseMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::RouteLine::BaseMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::RouteLine::BasePipelineSetup::~BasePipelineSetup(ggl::RouteLine::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::RouteLine::BasePipelineSetup::constantDataIsEnabled(ggl::RouteLine::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::RouteLine::BasePipelineSetup::textureIsEnabled(ggl::RouteLine::BasePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t ggl::RouteLine::BasePipelineSetup::BasePipelineSetup(ggl::RouteLine::BasePipelineSetup *this)
{
  unsigned __int8 v2;
  uint64_t result;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;

  if ((v2 & 1) == 0
  {
    if ((v4 & 1) == 0
    {
      if ((v6 & 1) == 0
      {
        ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::RouteLine::defaultVboReflection;
      }
      ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r;
      unk_1ECE43E18 = 1;
    }
    ggl::RouteLine::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r;
    *(_QWORD *)algn_1ECE3C108 = &ggl::RouteLine::pipelineDataBasePipelineDeviceStructs(void)::ref;
    qword_1ECE3C110 = 0;
    if ((v5 & 1) == 0
    {
      ggl::RouteLine::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      unk_1ECE3C170 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1ECE3C178 = (uint64_t)ggl::RouteLine::Style::reflection(void)::reflection;
    }
    qword_1ECE3C118 = (uint64_t)&ggl::RouteLine::pipelineDataBasePipelineConstantStructs(void)::ref;
    unk_1ECE3C120 = xmmword_19FFB35E0;
  }
  result = ggl::PipelineSetup::PipelineSetup((uint64_t)this, (uint64_t)&ggl::RouteLine::BasePipelineSetup::typedReflection(void)::ref);
  *(_QWORD *)this = &off_1E42BE2B8;
  return result;
}

void ggl::RouteLine::PatternedBasePipelineSetup::~PatternedBasePipelineSetup(ggl::RouteLine::PatternedBasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::RouteLine::PatternedBasePipelineSetup::constantDataIsEnabled(ggl::RouteLine::PatternedBasePipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

BOOL ggl::RouteLine::PatternedBasePipelineSetup::textureIsEnabled(ggl::RouteLine::PatternedBasePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

uint64_t ggl::RouteLine::PatternedBasePipelineSetup::PatternedBasePipelineSetup(ggl::RouteLine::PatternedBasePipelineSetup *this)
{
  unsigned __int8 v2;
  uint64_t result;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;

  if ((v2 & 1) == 0
  {
    if ((v4 & 1) == 0
    {
      if ((v6 & 1) == 0
      {
        ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::RouteLine::defaultVboReflection;
      }
      ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r;
      unk_1ECE43E18 = 1;
    }
    ggl::RouteLine::PatternedBasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r;
    *(_QWORD *)algn_1ECE3C138 = &ggl::RouteLine::pipelineDataPatternedBasePipelineDeviceStructs(void)::ref;
    qword_1ECE3C140 = 0;
    if ((v5 & 1) == 0
    {
      ggl::RouteLine::pipelineDataPatternedBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      unk_1ECE3C190 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1ECE3C198 = (uint64_t)ggl::PatternedRibbon::Style::reflection(void)::reflection;
      unk_1ECE3C1A0 = ggl::RouteLine::Style::reflection(void)::reflection;
    }
    qword_1ECE3C148 = (uint64_t)&ggl::RouteLine::pipelineDataPatternedBasePipelineConstantStructs(void)::ref;
    unk_1ECE3C150 = xmmword_19FFB48D0;
  }
  result = ggl::PipelineSetup::PipelineSetup((uint64_t)this, (uint64_t)&ggl::RouteLine::PatternedBasePipelineSetup::typedReflection(void)::ref);
  *(_QWORD *)this = &off_1E42BE308;
  return result;
}

void ggl::RouteLine::RouteLineMaskPipelineSetup::~RouteLineMaskPipelineSetup(ggl::RouteLine::RouteLineMaskPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::RouteLine::RouteLineMaskPipelineSetup::constantDataIsEnabled(ggl::RouteLine::RouteLineMaskPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

uint64_t ggl::RouteLine::RouteLineMaskPipelineSetup::textureIsEnabled(ggl::RouteLine::RouteLineMaskPipelineSetup *this)
{
  return 0;
}

void md::DaVinciMetaLayerDataSource::~DaVinciMetaLayerDataSource(md::DaVinciMetaLayerDataSource *this)
{
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::DaVinciMetaTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC040;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::DaVinciMetaTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC040;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::DaVinciMetaTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ggl::RouteLineArrow::BaseMesh::~BaseMesh(ggl::RouteLineArrow::BaseMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::RouteLineArrow::BaseMesh::~BaseMesh(ggl::RouteLineArrow::BaseMesh *this)
{
  ggl::Mesh::~Mesh((ggl::RouteLineArrow::BaseMesh *)((char *)this - 16));
}

{
  ggl::Mesh::~Mesh((ggl::RouteLineArrow::BaseMesh *)((char *)this - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::MeshTyped<ggl::RouteLineArrow::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::MeshTyped<ggl::RouteLineArrow::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A1AF4E00);
}

void ggl::RouteLineArrow::BasePipelineState::~BasePipelineState(ggl::RouteLineArrow::BasePipelineState *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)this = &off_1E42B6760;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = &off_1E42B8A10;
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *((_QWORD *)this + 3));
    *((_QWORD *)this + 3) = 3735927469;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void ggl::RouteLineArrow::BasePipelineSetup::~BasePipelineSetup(ggl::RouteLineArrow::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A1AF4E00);
}

BOOL ggl::RouteLineArrow::BasePipelineSetup::constantDataIsEnabled(ggl::RouteLineArrow::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

BOOL ggl::RouteLineArrow::BasePipelineSetup::textureIsEnabled(ggl::RouteLineArrow::BasePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void md::mun::MuninSelectionContext::~MuninSelectionContext(md::mun::MuninSelectionContext *this)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  *(_QWORD *)this = &off_1E42ABC10;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &off_1E42B0978;
  v3 = (_QWORD *)*((_QWORD *)this + 4);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    operator delete(v5);
}

{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  *(_QWORD *)this = &off_1E42ABC10;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &off_1E42B0978;
  v3 = (_QWORD *)*((_QWORD *)this + 4);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    operator delete(v5);
  JUMPOUT(0x1A1AF4E00);
}

double md::TransitNodeFeaturePool::externalIconForObject@<D0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X2>, _OWORD *a3@<X8>)
{
  unint64_t v3;
  uint64_t v7;
  unint64_t v8;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  md::TransitNodeFeature *v19;
  _QWORD *v20;
  uint64_t *v21;
  unint64_t v22;
  uint8x8_t v23;
  _QWORD **v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _QWORD *v29;
  float v30;
  float v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t prime;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  md::TransitNodeFeature *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  __int128 v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  _BYTE *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  char v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  float v77;
  float v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  float32x4_t v85;
  __int32 *v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  __int32 *v90;
  __int32 *v91;
  float32x4_t v92;
  __int32 *v93;
  __int32 v94;
  float32x4_t v95;
  float v96;
  float v97;
  int v98;
  double result;
  md::TransitNodeFeature *v100;
  unsigned __int8 *v101;
  md::TransitNodeFeature *v102;
  std::__shared_weak_count *v103;
  __int128 v104;
  _QWORD *v105;
  uint64_t v106;
  char v107;

  v104 = 0uLL;
  v7 = *((_QWORD *)a2 + 1);
  v8 = *(_QWORD *)(v7 + 40);
  v9 = *(int8x8_t *)(a1 + 40);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8(v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = *(_QWORD *)(v7 + 40);
      if (v8 >= *(_QWORD *)&v9)
        v11 = v8 % *(_QWORD *)&v9;
    }
    else
    {
      v11 = (*(_QWORD *)&v9 - 1) & v8;
    }
    v12 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8 * v11);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          v14 = *(_QWORD *)&v9 - 1;
          while (1)
          {
            v16 = v13[1];
            if (v16 == v8)
            {
              if (v13[2] == v8)
                goto LABEL_63;
            }
            else if ((v16 & v14) != v11)
            {
              goto LABEL_21;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_21;
          }
        }
        do
        {
          v15 = v13[1];
          if (v15 == v8)
          {
            if (v13[2] == v8)
            {
LABEL_63:
              v39 = *(_QWORD *)(v13[3] + 40);
              v40 = (std::__shared_weak_count *)operator new(0x120uLL);
              v40->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v40->__shared_owners_;
              v40->__shared_weak_owners_ = 0;
              v40->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCDD0;
              md::TransitNodeExternalIcon::TransitNodeExternalIcon((uint64_t)&v40[1], v13 + 3, (uint64_t *)(v39 - 16));
              *(_QWORD *)&v104 = v40 + 1;
              *((_QWORD *)&v104 + 1) = v40;
              if (((*(uint64_t (**)(_QWORD, std::__shared_weak_count *, unsigned __int8 *, _QWORD))(**(_QWORD **)(v39 - 16) + 32))(*(_QWORD *)(v39 - 16), v40 + 1, a2, *(_QWORD *)(a1 + 120)) & 1) == 0)
              {
                v104 = 0uLL;
                do
                  v42 = __ldaxr(p_shared_owners);
                while (__stlxr(v42 - 1, p_shared_owners));
                if (!v42)
                {
                  ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                  v43 = v40;
                  goto LABEL_125;
                }
              }
              goto LABEL_133;
            }
          }
          else
          {
            if (v15 >= *(_QWORD *)&v9)
              v15 %= *(_QWORD *)&v9;
            if (v15 != v11)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_21:
  v17 = operator new(0x60uLL);
  v17[1] = 0;
  v18 = v17 + 1;
  v17[2] = 0;
  *v17 = &off_1E42DD310;
  v19 = md::TransitNodeFeature::TransitNodeFeature((md::TransitNodeFeature *)(v17 + 3), v8, *(md::LabelExternalObjectsModerator **)(a1 + 24));
  v17[3] = &off_1E42A2668;
  *((_DWORD *)v17 + 20) = 0;
  v20 = *(_QWORD **)(a1 + 16);
  v17[11] = v20;
  if (v20)
    ++*v20;
  v102 = v19;
  v103 = (std::__shared_weak_count *)v17;
  v21 = (uint64_t *)(a1 + 72);
  v22 = *(_QWORD *)(a1 + 80);
  v100 = v19;
  v101 = a2;
  if (v22)
  {
    v23 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v22)
        v3 = v8 % v22;
    }
    else
    {
      v3 = (v22 - 1) & v8;
    }
    v24 = *(_QWORD ***)(*v21 + 8 * v3);
    if (v24)
    {
      v25 = *v24;
      if (*v24)
      {
        if (v23.u32[0] < 2uLL)
        {
          while (1)
          {
            v27 = v25[1];
            if (v27 == v8)
            {
              if (v25[2] == v8)
                goto LABEL_68;
            }
            else if ((v27 & (v22 - 1)) != v3)
            {
              goto LABEL_44;
            }
            v25 = (_QWORD *)*v25;
            if (!v25)
              goto LABEL_44;
          }
        }
        do
        {
          v26 = v25[1];
          if (v26 == v8)
          {
            if (v25[2] == v8)
            {
LABEL_68:
              v44 = v19;
              v45 = v101;
              goto LABEL_88;
            }
          }
          else
          {
            if (v26 >= v22)
              v26 %= v22;
            if (v26 != v3)
              break;
          }
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
    }
  }
LABEL_44:
  v25 = operator new(0x28uLL);
  v28 = a3;
  v29 = (_QWORD *)(a1 + 88);
  v105 = v25;
  v106 = a1 + 88;
  *v25 = 0;
  v25[1] = v8;
  v25[3] = 0;
  v25[4] = 0;
  v25[2] = v8;
  v107 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 96) + 1);
  v31 = *(float *)(a1 + 104);
  if (!v22 || (float)(v31 * (float)v22) < v30)
  {
    v32 = 1;
    if (v22 >= 3)
      v32 = (v22 & (v22 - 1)) != 0;
    v33 = v32 | (2 * v22);
    v34 = vcvtps_u32_f32(v30 / v31);
    if (v33 <= v34)
      prime = v34;
    else
      prime = v33;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v22 = *(_QWORD *)(a1 + 80);
    }
    if (prime > v22)
      goto LABEL_56;
    if (prime < v22)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 96) / *(float *)(a1 + 104));
      if (v22 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v22), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < v22)
LABEL_56:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1 + 72, prime);
    }
    v22 = *(_QWORD *)(a1 + 80);
    if ((v22 & (v22 - 1)) != 0)
    {
      if (v8 >= v22)
        v3 = v8 % v22;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v22 - 1) & v8;
    }
  }
  v46 = *v21;
  v47 = *(_QWORD **)(*v21 + 8 * v3);
  if (v47)
  {
    *v25 = *v47;
    a3 = v28;
    v44 = v100;
    v45 = v101;
LABEL_86:
    *v47 = v25;
    goto LABEL_87;
  }
  *v25 = *v29;
  *v29 = v25;
  *(_QWORD *)(v46 + 8 * v3) = v29;
  a3 = v28;
  v44 = v100;
  v45 = v101;
  if (*v25)
  {
    v48 = *(_QWORD *)(*v25 + 8);
    if ((v22 & (v22 - 1)) != 0)
    {
      if (v48 >= v22)
        v48 %= v22;
    }
    else
    {
      v48 &= v22 - 1;
    }
    v47 = (_QWORD *)(*v21 + 8 * v48);
    goto LABEL_86;
  }
LABEL_87:
  ++*(_QWORD *)(a1 + 96);
  do
LABEL_88:
    v49 = __ldxr(v18);
  while (__stxr(v49 + 1, v18));
  v50 = (std::__shared_weak_count *)v25[4];
  v25[3] = v44;
  v25[4] = v17;
  if (v50)
  {
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = operator new(0x120uLL);
  v53[1] = 0;
  v53[2] = 0;
  *v53 = &off_1E42DCDD0;
  v105 = 0;
  v106 = 0;
  v54 = md::TransitNodeExternalIcon::TransitNodeExternalIcon((uint64_t)(v53 + 3), &v102, (uint64_t *)&v105);
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
  *(_QWORD *)&v56 = v54;
  *((_QWORD *)&v56 + 1) = v53;
  v104 = v56;
  if (v55)
  {
    v57 = (unint64_t *)&v55->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v59 = v104;
  v60 = *(_QWORD *)(a1 + 120);
  v61 = *(char *)(*((_QWORD *)v45 + 1) + 320);
  v62 = *((_DWORD *)v45 + 8);
  v63 = v45[1];
  v64 = *v45;
  *(_BYTE *)(v104 + 260) = *(_BYTE *)(*((_QWORD *)v45 + 1) + 320);
  *(_BYTE *)(v59 + 70) = 1;
  *(_DWORD *)(v59 + 244) = v62;
  v65 = md::TransitNodeTextureAtlas::infoForIcon(v60, v61, v63, v64, 0);
  if (v65)
  {
    md::TransitNodeExternalIcon::setDotTextureRect((float32x4_t *)v59, (__int8 *)v65, v65 + 8, (float *)(v65 + 24));
    v66 = *(_BYTE **)(v59 + 104);
    v67 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v59 + 112) - (_QWORD)v66) >> 2);
    if (*(_BYTE **)(v59 + 112) == v66)
    {
      std::vector<md::TransitNodeExternalIcon::DotInfo>::__append((char **)(v59 + 104), 1 - v67);
      v66 = *(_BYTE **)(v59 + 104);
    }
    else if (v67 >= 2)
    {
      *(_QWORD *)(v59 + 112) = v66 + 20;
    }
    if ((_BYTE)v61)
      v72 = -1;
    else
      v72 = 54;
    v66[8] = v72;
    v66[9] = v72;
    v66[10] = v72;
    v66[11] = -1;
    if (*(_BYTE *)(v59 + 260) == 2)
    {
      v73 = (float)(*(_DWORD *)(v59 + 248) + *(_DWORD *)(v59 + 252) / 2);
    }
    else
    {
      v74 = *(_QWORD *)(v59 + 104);
      v75 = *(_QWORD *)(v59 + 112);
      if (v74 != v75)
      {
        v76 = v75 - v74 - 20;
        if (v76 >= 0xA0)
        {
          v81 = v76 / 0x14 + 1;
          v82 = v81 & 7;
          if ((v81 & 7) == 0)
            v82 = 8;
          v83 = v81 - v82;
          v84 = 20 * v83;
          v85 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
          v86 = (__int32 *)(v74 + 92);
          v87.i64[0] = 0x80000000800000;
          v87.i64[1] = 0x80000000800000;
          v88 = v85;
          v89.i64[0] = 0x80000000800000;
          v89.i64[1] = 0x80000000800000;
          do
          {
            v90 = v86 + 5;
            v91 = v86 + 10;
            v92.i32[0] = *(v86 - 20);
            v92.i32[1] = *(v86 - 15);
            v93 = v86 + 15;
            v92.i32[2] = *(v86 - 10);
            v92.i32[3] = *(v86 - 5);
            v94 = *v86;
            v86 += 40;
            v95.i32[0] = v94;
            v95.i32[1] = *v90;
            v95.i32[2] = *v91;
            v95.i32[3] = *v93;
            v87 = vmaxnmq_f32(v87, v92);
            v89 = vmaxnmq_f32(v89, v95);
            v85 = vminnmq_f32(v92, v85);
            v88 = vminnmq_f32(v95, v88);
            v83 -= 8;
          }
          while (v83);
          v74 += v84;
          v77 = vmaxnmvq_f32(vmaxnmq_f32(v87, v89));
          v78 = vminnmvq_f32(vminnmq_f32(v85, v88));
        }
        else
        {
          v77 = -3.4028e38;
          v78 = 3.4028e38;
        }
        do
        {
          v96 = *(float *)(v74 + 12);
          v77 = fmaxf(v77, v96);
          v78 = fminf(v96, v78);
          v74 += 20;
        }
        while (v74 != v75);
        v97 = (float)(v78 + v77) * 0.5;
        v98 = *(_DWORD *)(v59 + 256);
        *(float32x2_t *)(v59 + 48) = vmul_n_f32(*(float32x2_t *)(v59 + 220), v97);
        *(_BYTE *)(v59 + 64) = 1;
        *(float *)(v59 + 44) = (float)(v77 - v97) + (float)(v98 / 2);
        v71 = v103;
        if (!v103)
          goto LABEL_133;
        goto LABEL_121;
      }
      v73 = (float)(*(_DWORD *)(v59 + 256) / 2);
      *(_QWORD *)(v59 + 48) = 0;
    }
    *(_BYTE *)(v59 + 64) = 1;
    *(float *)(v59 + 44) = v73;
    goto LABEL_120;
  }
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
  v104 = 0uLL;
  if (!v68)
    goto LABEL_120;
  v69 = (unint64_t *)&v68->__shared_owners_;
  do
    v70 = __ldaxr(v69);
  while (__stlxr(v70 - 1, v69));
  if (v70)
  {
LABEL_120:
    v71 = v103;
    if (!v103)
      goto LABEL_133;
    goto LABEL_121;
  }
  ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
  std::__shared_weak_count::__release_weak(v68);
  v71 = v103;
  if (!v103)
    goto LABEL_133;
LABEL_121:
  v79 = (unint64_t *)&v71->__shared_owners_;
  do
    v80 = __ldaxr(v79);
  while (__stlxr(v80 - 1, v79));
  if (!v80)
  {
    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
    v43 = v71;
LABEL_125:
    std::__shared_weak_count::__release_weak(v43);
  }
LABEL_133:
  result = *(double *)&v104;
  *a3 = v104;
  return result;
}

void sub_19FEF64BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<esl::QuartzContext>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

int64_t md::TransitNodeFeaturePool::cloneExternalIcon@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t result;
  unint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v3 = *a1;
  v4 = (char *)operator new(0x120uLL);
  v5 = v4;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E42DCDD0;
  *((_QWORD *)v4 + 3) = &off_1E4292A08;
  v6 = v4 + 24;
  *((_OWORD *)v4 + 2) = *(_OWORD *)(v3 + 8);
  *((_DWORD *)v4 + 12) = 1065353216;
  *((_DWORD *)v4 + 13) = *(_DWORD *)(v3 + 28);
  *((_DWORD *)v4 + 14) = *(_DWORD *)(v3 + 32);
  *(_QWORD *)(v4 + 60) = *(_QWORD *)(v3 + 36);
  *((_DWORD *)v4 + 17) = *(_DWORD *)(v3 + 44);
  *((_QWORD *)v4 + 9) = *(_QWORD *)(v3 + 48);
  *((_QWORD *)v4 + 10) = *(_QWORD *)(v3 + 56);
  v4[88] = *(_BYTE *)(v3 + 64);
  v7 = atomic_load((unsigned __int8 *)(v3 + 65));
  v4[89] = v7 & 1;
  v4[90] = *(_BYTE *)(v3 + 66);
  *(_WORD *)(v4 + 91) = 0;
  *(_WORD *)(v4 + 93) = *(_WORD *)(v3 + 69);
  *((_QWORD *)v4 + 3) = &off_1E429FCE0;
  v9 = *(_QWORD *)(v3 + 72);
  v8 = *(_QWORD *)(v3 + 80);
  *((_QWORD *)v4 + 12) = v9;
  *((_QWORD *)v4 + 13) = v8;
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v13 = *(_QWORD *)(v3 + 88);
  v12 = *(_QWORD *)(v3 + 96);
  *((_QWORD *)v4 + 14) = v13;
  *((_QWORD *)v4 + 15) = v12;
  if (v12)
  {
    v14 = (unint64_t *)(v12 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *((_QWORD *)v4 + 16) = 0;
  *((_QWORD *)v4 + 17) = 0;
  *((_QWORD *)v4 + 18) = 0;
  v16 = *(_QWORD *)(v3 + 104);
  v17 = *(_QWORD *)(v3 + 112);
  result = v17 - v16;
  if (v17 != v16)
  {
    v19 = 0xCCCCCCCCCCCCCCCDLL * (result >> 2);
    if (v19 >= 0xCCCCCCCCCCCCCCDLL)
      abort();
    result = (int64_t)operator new(result);
    *((_QWORD *)v5 + 16) = result;
    *((_QWORD *)v5 + 17) = result;
    *((_QWORD *)v5 + 18) = result + 20 * v19;
    do
    {
      *(_QWORD *)result = *(_QWORD *)v16;
      *(_DWORD *)(result + 8) = *(_DWORD *)(v16 + 8);
      v20 = *(_DWORD *)(v16 + 12);
      *(_BYTE *)(result + 16) = *(_BYTE *)(v16 + 16);
      *(_DWORD *)(result + 12) = v20;
      result += 20;
      v16 += 20;
    }
    while (v16 != v17);
    *((_QWORD *)v5 + 17) = result;
  }
  *((_WORD *)v5 + 116) = *(_WORD *)(v3 + 208);
  *(_QWORD *)(v5 + 236) = *(_QWORD *)(v3 + 212);
  *(_QWORD *)(v5 + 244) = *(_QWORD *)(v3 + 220);
  *(_QWORD *)(v5 + 252) = *(_QWORD *)(v3 + 228);
  *(_QWORD *)(v5 + 260) = *(_QWORD *)(v3 + 236);
  *((_DWORD *)v5 + 67) = *(_DWORD *)(v3 + 244);
  v21 = *(_QWORD *)(v3 + 248);
  *((_DWORD *)v5 + 70) = *(_DWORD *)(v3 + 256);
  *((_QWORD *)v5 + 34) = v21;
  *((_DWORD *)v5 + 71) = *(_DWORD *)(v3 + 260);
  v22 = *(_OWORD *)(v3 + 128);
  v23 = *(_OWORD *)(v3 + 144);
  v24 = *(_OWORD *)(v3 + 160);
  *(_OWORD *)(v5 + 200) = *(_OWORD *)(v3 + 176);
  *(_OWORD *)(v5 + 184) = v24;
  *(_OWORD *)(v5 + 168) = v23;
  *(_OWORD *)(v5 + 152) = v22;
  *(_OWORD *)(v5 + 216) = *(_OWORD *)(v3 + 192);
  if (!v13)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  *a2 = v6;
  a2[1] = v5;
  return result;
}

void sub_19FEF6764(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void **v2;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *shared_owners;
  unint64_t *v9;
  unint64_t v10;
  void *v11;

  v4 = *v2;
  if (*v2)
  {
    v1[5].__shared_weak_owners_ = (uint64_t)v4;
    operator delete(v4);
  }
  v5 = (std::__shared_weak_count *)v1[5].__vftable;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  shared_owners = (std::__shared_weak_count *)v1[4].__shared_owners_;
  if (shared_owners)
  {
    v9 = (unint64_t *)&shared_owners->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
      std::__shared_weak_count::__release_weak(shared_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v11);
  _Unwind_Resume(a1);
}

unint64_t md::TransitNodeFeaturePool::renderIcons(_QWORD *a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t result;
  uint64_t *v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  ggl::CommandBuffer *v33;
  _QWORD *v34;
  int8x8_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  id v55;
  double v56;
  double v57;
  unint64_t v58;
  uint64_t v59;
  float64x2_t v60;
  float32x2_t *v61;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  uint64_t v76;
  int8x8_t *v77;
  unint64_t v78;
  uint64_t v79;
  int8x8_t *v80;
  uint64_t v81;
  int8x8_t *v82;
  __int16 v83;
  int8x8_t v84;
  unint64_t v85;
  __int16 v86;
  __int16 v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  _WORD *v98;
  uint64_t v99;
  uint64_t v100;
  _WORD *v101;
  __int16 v102;
  __int16 v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  float32x2_t *v123;
  float32x2_t *v124;
  float32x2_t *v125;
  float32x2_t *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  int v139;
  int v140;
  unint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  _QWORD *v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  _QWORD *v181;
  int v182;
  int v183;
  unint64_t v184;
  unint64_t v185;
  _QWORD *v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t *v203;
  unint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  _QWORD *v223;
  int v224;
  int v225;
  unint64_t v226;
  unint64_t v227;
  _QWORD *v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  int v232;
  int v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  unint64_t *v245;
  unint64_t v246;
  _QWORD *v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  _QWORD *v263;
  int v264;
  int v265;
  int v266;
  unint64_t v267;
  unint64_t v268;
  _QWORD *v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  int v273;
  int v274;
  unint64_t v275;
  unint64_t v276;
  float v277;
  __float2 v278;
  uint64_t *v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  float32x2_t v283;
  int32x2_t v284;
  int v285;
  int v286;
  int v287;
  int v288;
  float32x2_t *v289;
  float32x2_t *v290;
  float32x2_t v291;
  int32x2_t v292;
  float32x2_t v293;
  unsigned __int32 v294;
  unsigned __int32 v295;
  unsigned __int32 v296;
  __int32 v297;
  __int16 v298;
  float32x2_t v299;
  float32x2_t v300;
  float32x2_t v301;
  float32x2_t v302;
  float32x2_t v303;
  __int32 v304;
  __int16 v305;
  __int32 v306;
  __int16 v307;
  __int32 v308;
  __int16 v309;
  float v310;
  float v311;
  float v312;
  float v313;
  _BYTE *v314;
  uint64_t i;
  float32x2_t v316;
  float32x2_t v317;
  float32x2_t v318;
  float32x2_t v319;
  float32x2_t v320;
  __int16 v321;
  __int8 v322;
  __int8 v323;
  _QWORD *v324;
  _QWORD *v325;
  float32x2_t v326;
  int32x2_t v327;
  float32x2_t v328;
  float32x2_t v329;
  float32x2_t v330;
  float32x2_t v331;
  float32x2_t v332;
  __int16 v333;
  float32x2_t v334;
  float32x2_t v335;
  __int16 v336;
  __int16 v337;
  __int16 v338;
  float32x2_t *v339;
  float32x2_t *v340;
  float32x2_t *v341;
  unsigned __int32 v342;
  unsigned __int32 v343;
  unsigned __int32 v344;
  __int32 v345;
  __int16 v346;
  float32x2_t v347;
  float32x2_t v348;
  float32x2_t v349;
  float32x2_t v350;
  float32x2_t v351;
  __int32 v352;
  __int16 v353;
  __int32 v354;
  __int16 v355;
  __int32 v356;
  __int16 v357;
  uint64_t v358;
  md::TransitNodeTextureAtlas *v359;
  uint64_t v360;
  md::TransitNodeTextureAtlas *v361;
  uint64_t v362;
  unint64_t v363;
  unint64_t v364;
  uint64_t v365;
  int v366;
  int v367;
  unint64_t v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  unint64_t v372;
  uint64_t v373;
  int v374;
  int v375;
  unint64_t v376;
  unint64_t v377;
  uint64_t v378;
  unint64_t v379;
  unint64_t v380;
  uint64_t v381;
  int v382;
  int v383;
  unint64_t v384;
  unint64_t v385;
  uint64_t v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  int v390;
  int v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  unint64_t v395;
  uint64_t *v396;
  unint64_t v397;
  uint64_t v398;
  ggl::CommandBuffer *v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  _QWORD *v403;
  uint64_t v404;
  float64_t v405;
  int v406;
  int v407;
  float v408;
  float64_t v409;
  uint64_t v410;
  int v411;
  int v412;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  __int16 v421;
  unint64_t v422;
  __int128 v423;
  __int128 v424;
  uint64_t v425;

  v5 = a1;
  v425 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD **)(a4 + 8);
  v8 = v6[3];
  v7 = v6[4];
  v9 = v7 - v8;
  if (v7 == v8)
    goto LABEL_8;
  v10 = 0;
  v11 = *(_QWORD *)(a1[37] + 8);
  v12 = v9 >> 3;
  while (1)
  {
    v13 = *(unsigned __int8 **)(v8 + 8 * v10);
    if (*v13 == *(unsigned __int8 *)(v11 + 220))
    {
      v14 = *((_QWORD *)v13 + 1);
      v15 = v6[15];
      if (v14 < (v6[16] - v15) >> 3)
        break;
    }
    if (++v10 >= v12)
      goto LABEL_8;
  }
  v16 = *(_QWORD *)(v15 + 8 * v14);
  if (!v16)
LABEL_8:
    v17 = 0;
  else
    v17 = *(_QWORD **)(*(_QWORD *)(v16 + 24) + 8 * *(unsigned __int8 *)(v11 + 221));
  v18 = v17[9];
  if (v17[10] != v18)
    v17[10] = v18;
  v17[4] = 0;
  result = a1[16];
  v5[16] = 0;
  if (result)
    std::default_delete<md::TransitNodeTextureAtlas>::operator()[abi:nn180100](result);
  v20 = *a2;
  v21 = a2[1];
  if (*a2 == v21)
    return result;
  v22 = *(_QWORD **)(a4 + 8);
  v24 = v22[3];
  v23 = v22[4];
  v25 = v23 - v24;
  if (v23 == v24)
    goto LABEL_21;
  v26 = 0;
  v27 = *(_QWORD *)(v5[37] + 8);
  v28 = v25 >> 3;
  while (1)
  {
    v29 = *(unsigned __int8 **)(v24 + 8 * v26);
    if (*v29 == *(unsigned __int8 *)(v27 + 220))
    {
      v30 = *((_QWORD *)v29 + 1);
      v31 = v22[15];
      if (v30 < (v22[16] - v31) >> 3)
        break;
    }
    if (++v26 >= v28)
      goto LABEL_21;
  }
  v32 = *(_QWORD *)(v31 + 8 * v30);
  if (!v32)
LABEL_21:
    v33 = 0;
  else
    v33 = *(ggl::CommandBuffer **)(*(_QWORD *)(v32 + 24) + 8 * *(unsigned __int8 *)(v27 + 221));
  v34 = *(_QWORD **)(a3 + 8);
  v35 = (int8x8_t)v34[1];
  if (!*(_QWORD *)&v35)
    goto LABEL_46;
  v36 = (uint8x8_t)vcnt_s8(v35);
  v36.i16[0] = vaddlv_u8(v36);
  if (v36.u32[0] > 1uLL)
  {
    v37 = 0x1AF456233693CD46;
    if (*(_QWORD *)&v35 <= 0x1AF456233693CD46uLL)
      v37 = 0x1AF456233693CD46uLL % *(_QWORD *)&v35;
  }
  else
  {
    v37 = (*(_QWORD *)&v35 - 1) & 0x1AF456233693CD46;
  }
  v38 = *(_QWORD **)(*v34 + 8 * v37);
  if (!v38)
    goto LABEL_46;
  v39 = (_QWORD *)*v38;
  if (!v39)
    goto LABEL_46;
  if (v36.u32[0] < 2uLL)
  {
    v40 = *(_QWORD *)&v35 - 1;
    while (1)
    {
      v42 = v39[1];
      if (v42 == 0x1AF456233693CD46)
      {
        if (v39[2] == 0x1AF456233693CD46)
          goto LABEL_44;
      }
      else if ((v42 & v40) != v37)
      {
        goto LABEL_46;
      }
      v39 = (_QWORD *)*v39;
      if (!v39)
        goto LABEL_46;
    }
  }
  while (1)
  {
    v41 = v39[1];
    if (v41 == 0x1AF456233693CD46)
      break;
    if (v41 >= *(_QWORD *)&v35)
      v41 %= *(_QWORD *)&v35;
    if (v41 != v37)
      goto LABEL_46;
LABEL_33:
    v39 = (_QWORD *)*v39;
    if (!v39)
      goto LABEL_46;
  }
  if (v39[2] != 0x1AF456233693CD46)
    goto LABEL_33;
LABEL_44:
  v43 = v39[5];
  if (*(_QWORD *)(v43 + 8) != 0x1AF456233693CD46)
  {
LABEL_46:
    v44 = 0;
    goto LABEL_47;
  }
  v44 = *(_QWORD *)(v43 + 32);
LABEL_47:
  v45 = 0;
  v415 = 0;
  v416 = 0;
  v414 = 0;
  v46 = v21 - v20;
  if (v46 <= 1)
    v46 = 1;
  while (2)
  {
    v50 = *v20;
    v51 = *(unsigned __int8 *)(*v20 + 260);
    if (*(_BYTE *)(*v20 + 260))
    {
      if (v51 == 1)
      {
        v47 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v50 + 112) - *(_QWORD *)(v50 + 104)) >> 2);
        v48 = &v415;
        v49 = v415;
        goto LABEL_51;
      }
      if (v51 == 2)
      {
        ++v45;
        if (*(_BYTE *)(v50 + 262))
        {
          v48 = &v416;
          v47 = v416;
          v49 = 1;
          goto LABEL_51;
        }
      }
    }
    else
    {
      v47 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v50 + 112) - *(_QWORD *)(v50 + 104)) >> 2);
      v48 = &v414;
      v49 = v414;
LABEL_51:
      *v48 = v47 + v49;
    }
    ++v20;
    if (--v46)
      continue;
    break;
  }
  v52 = v414;
  v53 = v415;
  if (v415 <= v414)
    v54 = v414;
  else
    v54 = v415;
  if (!(v54 | v45))
    goto LABEL_488;
  v400 = v44;
  v404 = v45;
  v55 = *(id *)a3;
  objc_msgSend(v55, "sizeInPixels");
  v405 = v57;
  v409 = v56;

  v59 = v5[25];
  v401 = *(_QWORD *)(v59 + 8);
  v402 = v59;
  v60.f64[0] = v409;
  v60.f64[1] = v405;
  v61 = *(float32x2_t **)(v59 + 72);
  __asm { FMOV            V0.2D, #0.5 }
  v61[1] = vcvt_f32_f64(vmulq_f64(v60, _Q0));
  *v61 = vcvt_f32_s32(*(int32x2_t *)(v5[15] + 40));
  v67 = v5[29];
  v68 = *(_QWORD *)(v67 + 8);
  v69 = 6 * v54;
  if ((*(_QWORD *)(v67 + 48) - *(_QWORD *)(v67 + 40)) / v68 < 6 * v54)
  {
    v70 = v68 * v69;
    v71 = *(_QWORD *)(v67 + 72);
    v72 = *(_QWORD *)(v67 + 80) - v71;
    v58 = v70 - v72;
    if (v70 != v72)
    {
      if (v70 <= v72)
      {
        if (v70 < v72)
          *(_QWORD *)(v67 + 80) = v71 + v70;
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v67 + 72, v58);
      }
      v73 = *(std::__shared_weak_count **)(v67 + 32);
      *(_QWORD *)(v67 + 24) = 0;
      *(_QWORD *)(v67 + 32) = 0;
      if (v73)
      {
        p_shared_owners = (unint64_t *)&v73->__shared_owners_;
        do
          v75 = __ldaxr(p_shared_owners);
        while (__stlxr(v75 - 1, p_shared_owners));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      *(_QWORD *)(v67 + 120) = 0;
      *(_DWORD *)(v67 + 112) = 0;
      v76 = *(_QWORD *)(v67 + 80) - *(_QWORD *)(v67 + 72);
      *(_QWORD *)(v67 + 40) = 0;
      *(_QWORD *)(v67 + 48) = v76;
      *(_QWORD *)(v67 + 56) = 0;
      *(_QWORD *)(v67 + 64) = v76;
      v67 = v5[29];
      v70 = *(_QWORD *)(v67 + 8) * v69;
    }
    if (v70)
    {
      v77 = *(int8x8_t **)(v67 + 72);
      if (!v54)
        goto LABEL_87;
    }
    else
    {
      v77 = 0;
      if (!v54)
        goto LABEL_87;
    }
    if (v54 == 1)
    {
      v78 = 0;
      v79 = 0;
      v80 = v77;
    }
    else
    {
      v81 = 0;
      v78 = v54 & 0xFFFFFFFFFFFFFFFELL;
      v80 = (int8x8_t *)((char *)v77 + 12 * (v54 & 0xFFFFFFFFFFFFFFFELL));
      v82 = v77 + 2;
      do
      {
        v82[-2].i16[0] = 4 * v81;
        v82[-2].i16[1] = (4 * v81) | 1;
        v83 = (4 * v81) | 6;
        v82->i16[0] = v83;
        v82[-2].i16[3] = 4 * v81;
        v82->i16[2] = v83;
        v84 = vorr_s8((int8x8_t)vdup_n_s16(4 * (int)v81), (int8x8_t)0x5000400030002);
        v82->i16[1] = v84.i16[2];
        v82[-2].i16[2] = v84.i16[0];
        v82[-1] = v84;
        v82->i16[3] = (4 * v81) | 7;
        v81 += 2;
        v82 += 3;
      }
      while (v78 != v81);
      if (v54 == v78)
        goto LABEL_87;
      v79 = 4 * v78;
    }
    v85 = v54 - v78;
    do
    {
      v80->i16[0] = v79;
      v80->i16[1] = v79 | 1;
      v86 = v79 | 2;
      v80->i16[2] = v79 | 2;
      v80->i16[3] = v79;
      v87 = v79 | 3;
      v79 += 4;
      v80[1].i16[0] = v86;
      v80[1].i16[1] = v87;
      v80 = (int8x8_t *)((char *)v80 + 12);
      --v85;
    }
    while (v85);
LABEL_87:
    if (v77 && v70)
    {
      if (*(_QWORD *)(v67 + 64) > v70)
        v70 = *(_QWORD *)(v67 + 64);
      *(_QWORD *)(v67 + 56) = 0;
      *(_QWORD *)(v67 + 64) = v70;
    }
  }
  v88 = v5[31];
  v89 = *(_QWORD *)(v88 + 8);
  v90 = v404;
  v410 = 18 * v404;
  if ((*(_QWORD *)(v88 + 48) - *(_QWORD *)(v88 + 40)) / v89 < 18 * v404)
  {
    v91 = v89 * v410;
    v92 = *(_QWORD *)(v88 + 72);
    v93 = *(_QWORD *)(v88 + 80) - v92;
    v58 = v91 - v93;
    if (v91 != v93)
    {
      if (v91 <= v93)
      {
        if (v91 < v93)
          *(_QWORD *)(v88 + 80) = v92 + v91;
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v88 + 72, v58);
      }
      v94 = *(std::__shared_weak_count **)(v88 + 32);
      *(_QWORD *)(v88 + 24) = 0;
      *(_QWORD *)(v88 + 32) = 0;
      if (v94)
      {
        v95 = (unint64_t *)&v94->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      *(_QWORD *)(v88 + 120) = 0;
      *(_DWORD *)(v88 + 112) = 0;
      v97 = *(_QWORD *)(v88 + 80) - *(_QWORD *)(v88 + 72);
      *(_QWORD *)(v88 + 40) = 0;
      *(_QWORD *)(v88 + 48) = v97;
      *(_QWORD *)(v88 + 56) = 0;
      *(_QWORD *)(v88 + 64) = v97;
      v88 = v5[31];
      v91 = *(_QWORD *)(v88 + 8) * v410;
    }
    if (v91)
    {
      v98 = *(_WORD **)(v88 + 72);
      if (!v404)
      {
LABEL_110:
        if (v98 && v91)
        {
          if (*(_QWORD *)(v88 + 64) > v91)
            v91 = *(_QWORD *)(v88 + 64);
          *(_QWORD *)(v88 + 56) = 0;
          *(_QWORD *)(v88 + 64) = v91;
        }
        goto LABEL_115;
      }
    }
    else
    {
      v98 = 0;
      if (!v404)
        goto LABEL_110;
    }
    v99 = 0;
    v100 = v404;
    v101 = v98;
    do
    {
      *v101 = v99;
      v101[1] = v99 | 1;
      v101[2] = v99 | 2;
      v101[3] = v99;
      v101[4] = v99 | 2;
      v101[5] = v99 | 3;
      v101[6] = v99 | 1;
      v101[7] = v99 | 4;
      v102 = v99 | 7;
      v101[8] = v99 | 7;
      v101[9] = v99 | 1;
      v101[10] = v99 | 7;
      v101[11] = v99 | 2;
      v101[12] = v99 | 4;
      v101[13] = v99 | 5;
      v103 = v99 | 6;
      v101[14] = v99 | 6;
      v101[15] = v99 | 4;
      v99 += 8;
      v101[16] = v103;
      v101[17] = v102;
      v101 += 18;
      --v100;
    }
    while (v100);
    goto LABEL_110;
  }
LABEL_115:
  v423 = 0u;
  v424 = 0u;
  v403 = v5;
  if (!v53)
  {
    v123 = 0;
    if (v52)
      goto LABEL_183;
LABEL_134:
    v124 = 0;
    if (v416)
      goto LABEL_246;
LABEL_135:
    v125 = 0;
    v399 = v33;
    if (v90)
      goto LABEL_309;
    goto LABEL_136;
  }
  v104 = v5[23];
  v105 = v5[29];
  v106 = (std::__shared_weak_count *)v5[30];
  if (v106)
  {
    v107 = (unint64_t *)&v106->__shared_owners_;
    do
      v108 = __ldxr(v107);
    while (__stxr(v108 + 1, v107));
    do
      v109 = __ldxr(v107);
    while (__stxr(v109 + 1, v107));
  }
  v110 = *(std::__shared_weak_count **)(v104 + 104);
  *(_QWORD *)(v104 + 96) = v105;
  *(_QWORD *)(v104 + 104) = v106;
  if (v110)
  {
    v111 = (unint64_t *)&v110->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *, unint64_t))v110->__on_zero_shared)(v110, v58);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  if (v106)
  {
    v113 = (unint64_t *)&v106->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *, unint64_t))v106->__on_zero_shared)(v106, v58);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v115 = (_QWORD *)v5[19];
  v116 = v415;
  v117 = 6 * v415;
  v115[9] = 0;
  v115[10] = v117;
  v115[11] = 0;
  v115[12] = 1;
  v118 = **(_QWORD **)(v5[23] + 64);
  v119 = 4 * v116;
  v120 = *(_QWORD *)(v118 + 8) * 4 * v116;
  v121 = *(_QWORD *)(v118 + 72);
  v122 = *(_QWORD *)(v118 + 80) - v121;
  if (v120 != v122)
  {
    if (v120 <= v122)
    {
      if (v120 < v122)
        *(_QWORD *)(v118 + 80) = v121 + v120;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v118 + 72, v120 - v122);
    }
    v127 = *(std::__shared_weak_count **)(v118 + 32);
    *(_QWORD *)(v118 + 24) = 0;
    *(_QWORD *)(v118 + 32) = 0;
    if (v127)
    {
      v128 = (unint64_t *)&v127->__shared_owners_;
      do
        v129 = __ldaxr(v128);
      while (__stlxr(v129 - 1, v128));
      if (!v129)
      {
        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
        std::__shared_weak_count::__release_weak(v127);
      }
    }
    *(_QWORD *)(v118 + 120) = 0;
    *(_DWORD *)(v118 + 112) = 0;
    v130 = *(_QWORD *)(v118 + 80) - *(_QWORD *)(v118 + 72);
    *(_QWORD *)(v118 + 40) = 0;
    *(_QWORD *)(v118 + 48) = v130;
    *(_QWORD *)(v118 + 56) = 0;
    *(_QWORD *)(v118 + 64) = v130;
  }
  v131 = (uint64_t *)operator new();
  v132 = v131;
  v133 = **(_QWORD **)(v5[23] + 64);
  v131[5] = 0;
  *v131 = 0;
  v131[1] = 0;
  v134 = *(_QWORD *)(v133 + 8) * v119;
  v417 = 0;
  v418 = v133;
  v419 = 0;
  v420 = v134;
  v421 = 1;
  if (v134)
    v135 = *(_QWORD *)(v133 + 72);
  else
    v135 = 0;
  v422 = v135;
  ggl::BufferMemory::operator=(v131, (uint64_t)&v417);
  v58 = v422;
  if (v422)
  {
    v137 = v419;
    v136 = v420;
    if (v420 != v419)
    {
      v138 = (_QWORD *)v418;
      v139 = v421;
      v140 = HIBYTE(v421);
      if (v417 && *(_BYTE *)(v418 + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v417 + 64))();
      if (v139 && !v140)
      {
        v142 = v138[7];
        v141 = v138[8];
        if (v141 == v142)
          v142 = v138[10] - v138[9];
        if (v137 < v142)
          v142 = v137;
        if (v141 <= v136)
          v141 = v136;
        if (v141 == v142)
          v141 = v142 + v138[10] - v138[9];
        v138[7] = v142;
        v138[8] = v141;
      }
    }
  }
  v143 = (_QWORD *)v424;
  *(_QWORD *)&v424 = v132;
  if (v143)
  {
    if (v143[5])
    {
      v145 = v143[2];
      v144 = v143[3];
      if (v144 != v145)
      {
        v146 = v143[1];
        v147 = *((unsigned __int8 *)v143 + 32);
        v148 = *((unsigned __int8 *)v143 + 33);
        if (*v143 && *(_BYTE *)(v146 + 17) != 2)
          (*(void (**)(_QWORD))(*(_QWORD *)*v143 + 64))(*v143);
        if (v147 && !v148)
        {
          v150 = *(_QWORD *)(v146 + 56);
          v149 = *(_QWORD *)(v146 + 64);
          if (v149 == v150)
            v150 = *(_QWORD *)(v146 + 80) - *(_QWORD *)(v146 + 72);
          if (v145 < v150)
            v150 = v145;
          if (v149 <= v144)
            v149 = v144;
          if (v149 == v150)
            v149 = v150 + *(_QWORD *)(v146 + 80) - *(_QWORD *)(v146 + 72);
          *(_QWORD *)(v146 + 56) = v150;
          *(_QWORD *)(v146 + 64) = v149;
        }
      }
    }
    MEMORY[0x1A1AF4E00](v143, 0x1070C40C7B7B3AELL);
  }
  v123 = (float32x2_t *)v132[5];
  v5 = v403;
  v90 = v404;
  if (!v414)
    goto LABEL_134;
LABEL_183:
  v151 = v5[24];
  v152 = v5[29];
  v153 = (std::__shared_weak_count *)v5[30];
  if (v153)
  {
    v154 = (unint64_t *)&v153->__shared_owners_;
    do
      v155 = __ldxr(v154);
    while (__stxr(v155 + 1, v154));
    do
      v156 = __ldxr(v154);
    while (__stxr(v156 + 1, v154));
  }
  v157 = *(std::__shared_weak_count **)(v151 + 104);
  *(_QWORD *)(v151 + 96) = v152;
  *(_QWORD *)(v151 + 104) = v153;
  if (v157)
  {
    v158 = (unint64_t *)&v157->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *, unint64_t))v157->__on_zero_shared)(v157, v58);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  if (v153)
  {
    v160 = (unint64_t *)&v153->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *, unint64_t))v153->__on_zero_shared)(v153, v58);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v162 = (_QWORD *)v5[20];
  v163 = v414;
  v164 = 6 * v414;
  v162[9] = 0;
  v162[10] = v164;
  v162[11] = 0;
  v162[12] = 1;
  v165 = **(_QWORD **)(v5[24] + 64);
  v166 = 4 * v163;
  v167 = *(_QWORD *)(v165 + 8) * 4 * v163;
  v168 = *(_QWORD *)(v165 + 72);
  v169 = *(_QWORD *)(v165 + 80) - v168;
  if (v167 != v169)
  {
    if (v167 <= v169)
    {
      if (v167 < v169)
        *(_QWORD *)(v165 + 80) = v168 + v167;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v165 + 72, v167 - v169);
    }
    v170 = *(std::__shared_weak_count **)(v165 + 32);
    *(_QWORD *)(v165 + 24) = 0;
    *(_QWORD *)(v165 + 32) = 0;
    if (v170)
    {
      v171 = (unint64_t *)&v170->__shared_owners_;
      do
        v172 = __ldaxr(v171);
      while (__stlxr(v172 - 1, v171));
      if (!v172)
      {
        ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
        std::__shared_weak_count::__release_weak(v170);
      }
    }
    *(_QWORD *)(v165 + 120) = 0;
    *(_DWORD *)(v165 + 112) = 0;
    v173 = *(_QWORD *)(v165 + 80) - *(_QWORD *)(v165 + 72);
    *(_QWORD *)(v165 + 40) = 0;
    *(_QWORD *)(v165 + 48) = v173;
    *(_QWORD *)(v165 + 56) = 0;
    *(_QWORD *)(v165 + 64) = v173;
  }
  v174 = (uint64_t *)operator new();
  v175 = v174;
  v176 = **(_QWORD **)(v5[24] + 64);
  v174[5] = 0;
  *v174 = 0;
  v174[1] = 0;
  v177 = *(_QWORD *)(v176 + 8) * v166;
  v417 = 0;
  v418 = v176;
  v419 = 0;
  v420 = v177;
  v421 = 1;
  if (v177)
    v178 = *(_QWORD *)(v176 + 72);
  else
    v178 = 0;
  v422 = v178;
  ggl::BufferMemory::operator=(v174, (uint64_t)&v417);
  v58 = v422;
  if (v422)
  {
    v180 = v419;
    v179 = v420;
    if (v420 != v419)
    {
      v181 = (_QWORD *)v418;
      v182 = v421;
      v183 = HIBYTE(v421);
      if (v417 && *(_BYTE *)(v418 + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v417 + 64))();
      if (v182 && !v183)
      {
        v185 = v181[7];
        v184 = v181[8];
        if (v184 == v185)
          v185 = v181[10] - v181[9];
        if (v180 < v185)
          v185 = v180;
        if (v184 <= v179)
          v184 = v179;
        if (v184 == v185)
          v184 = v185 + v181[10] - v181[9];
        v181[7] = v185;
        v181[8] = v184;
      }
    }
  }
  v186 = (_QWORD *)*((_QWORD *)&v424 + 1);
  *((_QWORD *)&v424 + 1) = v175;
  if (v186)
  {
    if (v186[5])
    {
      v187 = v186[2];
      v188 = v186[3];
      if (v188 != v187)
      {
        v189 = v186[1];
        v190 = *((unsigned __int8 *)v186 + 32);
        v191 = *((unsigned __int8 *)v186 + 33);
        if (*v186 && *(_BYTE *)(v189 + 17) != 2)
          (*(void (**)(_QWORD))(*(_QWORD *)*v186 + 64))(*v186);
        if (v190 && !v191)
        {
          v193 = *(_QWORD *)(v189 + 56);
          v192 = *(_QWORD *)(v189 + 64);
          if (v192 == v193)
            v193 = *(_QWORD *)(v189 + 80) - *(_QWORD *)(v189 + 72);
          if (v187 < v193)
            v193 = v187;
          if (v192 <= v188)
            v192 = v188;
          if (v192 == v193)
            v192 = v193 + *(_QWORD *)(v189 + 80) - *(_QWORD *)(v189 + 72);
          *(_QWORD *)(v189 + 56) = v193;
          *(_QWORD *)(v189 + 64) = v192;
        }
      }
    }
    MEMORY[0x1A1AF4E00](v186, 0x1070C40C7B7B3AELL);
  }
  v124 = (float32x2_t *)v175[5];
  v5 = v403;
  v90 = v404;
  if (!v416)
    goto LABEL_135;
LABEL_246:
  v194 = v5[21];
  v195 = v5[31];
  v196 = (std::__shared_weak_count *)v5[32];
  if (v196)
  {
    v197 = (unint64_t *)&v196->__shared_owners_;
    do
      v198 = __ldxr(v197);
    while (__stxr(v198 + 1, v197));
    do
      v199 = __ldxr(v197);
    while (__stxr(v199 + 1, v197));
  }
  v200 = *(std::__shared_weak_count **)(v194 + 104);
  *(_QWORD *)(v194 + 96) = v195;
  *(_QWORD *)(v194 + 104) = v196;
  if (v200)
  {
    v201 = (unint64_t *)&v200->__shared_owners_;
    do
      v202 = __ldaxr(v201);
    while (__stlxr(v202 - 1, v201));
    if (!v202)
    {
      ((void (*)(std::__shared_weak_count *, unint64_t))v200->__on_zero_shared)(v200, v58);
      std::__shared_weak_count::__release_weak(v200);
    }
  }
  if (v196)
  {
    v203 = (unint64_t *)&v196->__shared_owners_;
    do
      v204 = __ldaxr(v203);
    while (__stlxr(v204 - 1, v203));
    if (!v204)
    {
      ((void (*)(std::__shared_weak_count *, unint64_t))v196->__on_zero_shared)(v196, v58);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  v205 = (_QWORD *)v5[17];
  v206 = 8 * v416;
  v207 = 18 * v416;
  v205[9] = 0;
  v205[10] = v207;
  v205[11] = 0;
  v205[12] = 1;
  v208 = **(_QWORD **)(v5[21] + 64);
  v209 = *(_QWORD *)(v208 + 8) * v206;
  v210 = *(_QWORD *)(v208 + 72);
  v211 = *(_QWORD *)(v208 + 80) - v210;
  if (v209 != v211)
  {
    if (v209 <= v211)
    {
      if (v209 < v211)
        *(_QWORD *)(v208 + 80) = v210 + v209;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v208 + 72, v209 - v211);
    }
    v212 = *(std::__shared_weak_count **)(v208 + 32);
    *(_QWORD *)(v208 + 24) = 0;
    *(_QWORD *)(v208 + 32) = 0;
    if (v212)
    {
      v213 = (unint64_t *)&v212->__shared_owners_;
      do
        v214 = __ldaxr(v213);
      while (__stlxr(v214 - 1, v213));
      if (!v214)
      {
        ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
        std::__shared_weak_count::__release_weak(v212);
      }
    }
    *(_QWORD *)(v208 + 120) = 0;
    *(_DWORD *)(v208 + 112) = 0;
    v215 = *(_QWORD *)(v208 + 80) - *(_QWORD *)(v208 + 72);
    *(_QWORD *)(v208 + 40) = 0;
    *(_QWORD *)(v208 + 48) = v215;
    *(_QWORD *)(v208 + 56) = 0;
    *(_QWORD *)(v208 + 64) = v215;
  }
  v216 = (uint64_t *)operator new();
  v217 = v216;
  v218 = **(_QWORD **)(v5[21] + 64);
  v216[5] = 0;
  *v216 = 0;
  v216[1] = 0;
  v219 = *(_QWORD *)(v218 + 8) * v206;
  v417 = 0;
  v418 = v218;
  v419 = 0;
  v420 = v219;
  v421 = 1;
  if (v219)
    v220 = *(_QWORD *)(v218 + 72);
  else
    v220 = 0;
  v422 = v220;
  ggl::BufferMemory::operator=(v216, (uint64_t)&v417);
  v58 = v422;
  if (v422)
  {
    v222 = v419;
    v221 = v420;
    if (v420 != v419)
    {
      v223 = (_QWORD *)v418;
      v224 = v421;
      v225 = HIBYTE(v421);
      if (v417 && *(_BYTE *)(v418 + 17) != 2)
        (*(void (**)(void))(*(_QWORD *)v417 + 64))();
      if (v224 && !v225)
      {
        v227 = v223[7];
        v226 = v223[8];
        if (v226 == v227)
          v227 = v223[10] - v223[9];
        if (v222 < v227)
          v227 = v222;
        if (v226 <= v221)
          v226 = v221;
        if (v226 == v227)
          v226 = v227 + v223[10] - v223[9];
        v223[7] = v227;
        v223[8] = v226;
      }
    }
  }
  v228 = (_QWORD *)v423;
  *(_QWORD *)&v423 = v217;
  if (v228)
  {
    if (v228[5])
    {
      v229 = v228[2];
      v230 = v228[3];
      if (v230 != v229)
      {
        v231 = v228[1];
        v232 = *((unsigned __int8 *)v228 + 32);
        v233 = *((unsigned __int8 *)v228 + 33);
        if (*v228 && *(_BYTE *)(v231 + 17) != 2)
        {
          v406 = *((unsigned __int8 *)v228 + 32);
          (*(void (**)(_QWORD))(*(_QWORD *)*v228 + 64))(*v228);
          v232 = v406;
        }
        if (v232 && !v233)
        {
          v235 = *(_QWORD *)(v231 + 56);
          v234 = *(_QWORD *)(v231 + 64);
          if (v234 == v235)
            v235 = *(_QWORD *)(v231 + 80) - *(_QWORD *)(v231 + 72);
          if (v229 < v235)
            v235 = v229;
          if (v234 <= v230)
            v234 = v230;
          if (v234 == v235)
            v234 = v235 + *(_QWORD *)(v231 + 80) - *(_QWORD *)(v231 + 72);
          *(_QWORD *)(v231 + 56) = v235;
          *(_QWORD *)(v231 + 64) = v234;
        }
      }
    }
    MEMORY[0x1A1AF4E00](v228, 0x1070C40C7B7B3AELL);
  }
  v125 = (float32x2_t *)v217[5];
  v5 = v403;
  v90 = v404;
  v399 = v33;
  if (!v404)
  {
LABEL_136:
    v126 = 0;
    goto LABEL_372;
  }
LABEL_309:
  v236 = v5[22];
  v237 = v5[31];
  v238 = (std::__shared_weak_count *)v5[32];
  if (v238)
  {
    v239 = (unint64_t *)&v238->__shared_owners_;
    do
      v240 = __ldxr(v239);
    while (__stxr(v240 + 1, v239));
    do
      v241 = __ldxr(v239);
    while (__stxr(v241 + 1, v239));
  }
  v242 = *(std::__shared_weak_count **)(v236 + 104);
  *(_QWORD *)(v236 + 96) = v237;
  *(_QWORD *)(v236 + 104) = v238;
  if (v242)
  {
    v243 = (unint64_t *)&v242->__shared_owners_;
    do
      v244 = __ldaxr(v243);
    while (__stlxr(v244 - 1, v243));
    if (!v244)
    {
      ((void (*)(std::__shared_weak_count *, unint64_t))v242->__on_zero_shared)(v242, v58);
      std::__shared_weak_count::__release_weak(v242);
    }
  }
  if (v238)
  {
    v245 = (unint64_t *)&v238->__shared_owners_;
    do
      v246 = __ldaxr(v245);
    while (__stlxr(v246 - 1, v245));
    if (!v246)
    {
      ((void (*)(std::__shared_weak_count *, unint64_t))v238->__on_zero_shared)(v238, v58);
      std::__shared_weak_count::__release_weak(v238);
    }
  }
  v247 = (_QWORD *)v5[18];
  v247[9] = 0;
  v247[10] = v410;
  v247[11] = 0;
  v247[12] = 1;
  v248 = **(_QWORD **)(v5[22] + 64);
  v249 = *(_QWORD *)(v248 + 8) * 8 * v90;
  v250 = *(_QWORD *)(v248 + 72);
  v251 = *(_QWORD *)(v248 + 80) - v250;
  if (v249 != v251)
  {
    if (v249 <= v251)
    {
      if (v249 < v251)
        *(_QWORD *)(v248 + 80) = v250 + v249;
    }
    else
    {
      std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v248 + 72, v249 - v251);
    }
    v252 = *(std::__shared_weak_count **)(v248 + 32);
    *(_QWORD *)(v248 + 24) = 0;
    *(_QWORD *)(v248 + 32) = 0;
    if (v252)
    {
      v253 = (unint64_t *)&v252->__shared_owners_;
      do
        v254 = __ldaxr(v253);
      while (__stlxr(v254 - 1, v253));
      if (!v254)
      {
        ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
        std::__shared_weak_count::__release_weak(v252);
      }
    }
    *(_QWORD *)(v248 + 120) = 0;
    *(_DWORD *)(v248 + 112) = 0;
    v255 = *(_QWORD *)(v248 + 80) - *(_QWORD *)(v248 + 72);
    *(_QWORD *)(v248 + 40) = 0;
    *(_QWORD *)(v248 + 48) = v255;
    *(_QWORD *)(v248 + 56) = 0;
    *(_QWORD *)(v248 + 64) = v255;
  }
  v256 = (uint64_t *)operator new();
  v257 = v256;
  v258 = **(_QWORD **)(v5[22] + 64);
  v256[5] = 0;
  *v256 = 0;
  v256[1] = 0;
  v259 = *(_QWORD *)(v258 + 8) * 8 * v90;
  v417 = 0;
  v418 = v258;
  v419 = 0;
  v420 = v259;
  v421 = 1;
  if (v259)
    v260 = *(_QWORD *)(v258 + 72);
  else
    v260 = 0;
  v422 = v260;
  ggl::BufferMemory::operator=(v256, (uint64_t)&v417);
  if (v422)
  {
    v262 = v419;
    v261 = v420;
    if (v420 != v419)
    {
      v263 = (_QWORD *)v418;
      v264 = v421;
      v265 = HIBYTE(v421);
      if (v417 && *(_BYTE *)(v418 + 17) != 2)
      {
        v411 = v421;
        v266 = HIBYTE(v421);
        (*(void (**)(void))(*(_QWORD *)v417 + 64))();
        v265 = v266;
        v264 = v411;
      }
      if (v264 && !v265)
      {
        v268 = v263[7];
        v267 = v263[8];
        if (v267 == v268)
          v268 = v263[10] - v263[9];
        if (v262 < v268)
          v268 = v262;
        if (v267 <= v261)
          v267 = v261;
        if (v267 == v268)
          v267 = v268 + v263[10] - v263[9];
        v263[7] = v268;
        v263[8] = v267;
      }
    }
  }
  v269 = (_QWORD *)*((_QWORD *)&v423 + 1);
  *((_QWORD *)&v423 + 1) = v257;
  if (v269)
  {
    if (v269[5])
    {
      v270 = v269[2];
      v271 = v269[3];
      if (v271 != v270)
      {
        v272 = v269[1];
        v273 = *((unsigned __int8 *)v269 + 32);
        v274 = *((unsigned __int8 *)v269 + 33);
        if (*v269 && *(_BYTE *)(v272 + 17) != 2)
        {
          v407 = *((unsigned __int8 *)v269 + 32);
          v412 = *((unsigned __int8 *)v269 + 33);
          (*(void (**)(_QWORD))(*(_QWORD *)*v269 + 64))(*v269);
          v273 = v407;
          v274 = v412;
        }
        if (v273 && !v274)
        {
          v276 = *(_QWORD *)(v272 + 56);
          v275 = *(_QWORD *)(v272 + 64);
          if (v275 == v276)
            v276 = *(_QWORD *)(v272 + 80) - *(_QWORD *)(v272 + 72);
          if (v270 < v276)
            v276 = v270;
          if (v275 <= v271)
            v275 = v271;
          if (v275 == v276)
            v275 = v276 + *(_QWORD *)(v272 + 80) - *(_QWORD *)(v272 + 72);
          *(_QWORD *)(v272 + 56) = v276;
          *(_QWORD *)(v272 + 64) = v275;
        }
      }
    }
    MEMORY[0x1A1AF4E00](v269, 0x1070C40C7B7B3AELL);
  }
  v126 = (float32x2_t *)v257[5];
LABEL_372:
  v277 = *(double *)(v400 + 3840);
  v278 = __sincosf_stret(v277);
  v279 = *a2;
  if (a2[1] != *a2)
  {
    v280 = 0;
    v408 = -v278.__sinval;
    do
    {
      v281 = v279[v280];
      md::LayoutContext::frameState((md::LayoutContext *)a3);
      if (*(_BYTE *)(v281 + 261))
        LOBYTE(v285) = 100;
      else
        v285 = (int)(float)(*(float *)(v281 + 12) * 100.0);
      v286 = (int)(float)(*(float *)(v281 + 8) * 255.0);
      v283.i32[0] = *(_DWORD *)(v281 + 16);
      v287 = *(unsigned __int8 *)(v281 + 260);
      if (v287 == 2)
      {
        v310 = *(float *)(v281 + 212);
        v311 = *(float *)(v281 + 216);
        v312 = (float)(v278.__sinval * v311) + (float)(v278.__cosval * v310);
        v313 = -(float)((float)(v278.__sinval * v310) - (float)(v311 * v278.__cosval));
        v283.f32[1] = *(float *)(v281 + 24) * v283.f32[0];
        v314 = (_BYTE *)(v281 + 193);
        for (i = 128; i != 192; i += 8)
        {
          v316 = *(float32x2_t *)(v281 + i);
          v317 = vmul_n_f32(v316, v312);
          v318 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(v316, v313));
          v319.i32[0] = vsub_f32(v317, v318).u32[0];
          v319.i32[1] = vadd_f32(v317, v318).i32[1];
          v320 = vmla_f32(*(float32x2_t *)(v281 + 36), v283, v319);
          v321 = *(_WORD *)(v314 - 1);
          *v126 = v320;
          v126[1].i16[0] = -1;
          v126[1].i8[2] = -1;
          v126[1].i8[3] = v286;
          v126[1].i16[2] = -1;
          v126[1].i8[6] = -1;
          v126[1].i8[7] = v286;
          v126[2].i16[0] = v321;
          v126[2].i8[4] = v285;
          v126[2].i8[5] = 0;
          if (*(_BYTE *)(v281 + 262))
          {
            v322 = *(_BYTE *)(v281 + 208) + *(v314 - 1);
            v323 = *(_BYTE *)(v281 + 209) + *v314;
            *v125 = vadd_f32(*(float32x2_t *)(v281 + 228), v320);
            v125[1].i16[0] = -1;
            v125[1].i8[2] = -1;
            v125[1].i8[3] = v286;
            v125[1].i16[2] = -1;
            v125[1].i8[6] = -1;
            v125[1].i8[7] = v286;
            v125[2].i8[0] = v322;
            v125[2].i8[1] = v323;
            v125[2].i8[4] = v285;
            v125[2].i8[5] = 0;
            v125 += 3;
          }
          v126 += 3;
          v314 += 2;
        }
      }
      else
      {
        v288 = *(unsigned __int8 *)(v282 + 48);
        v284.i32[0] = *(_DWORD *)(v281 + 20);
        if (v287 == 1)
        {
          v324 = *(_QWORD **)(v281 + 104);
          v325 = *(_QWORD **)(v281 + 112);
          if (v324 != v325)
          {
            v326 = (float32x2_t)vdup_lane_s32(v284, 0);
            v327 = vdup_n_s32(v288 != 0);
            v328 = (float32x2_t)vdup_lane_s32((int32x2_t)v283, 0);
            do
            {
              v329 = *(float32x2_t *)v324;
              v324 = (_QWORD *)((char *)v324 + 20);
              v330 = vmul_n_f32(v329, v278.__cosval);
              v331 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(v329, v408));
              v332.i32[0] = vsub_f32(v330, v331).u32[0];
              v332.i32[1] = vadd_f32(v330, v331).i32[1];
              v333 = *(_WORD *)(v281 + 192);
              v334 = vmla_f32(*(float32x2_t *)(v281 + 36), v328, v332);
              v335 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(v327, 0x1FuLL)), (int8x8_t)vrnda_f32(v334), (int8x8_t)v334);
              *v123 = vmla_f32(v335, v326, *(float32x2_t *)(v281 + 128));
              v123[1].i16[0] = -1;
              v123[1].i8[2] = -1;
              v123[1].i8[3] = v286;
              v123[1].i16[2] = -1;
              v123[1].i8[6] = -1;
              v123[1].i8[7] = v286;
              v123[2].i16[0] = v333;
              v123[2].i8[4] = v285;
              v123[2].i8[5] = 0;
              v336 = *(_WORD *)(v281 + 194);
              v123[3] = vmla_f32(v335, v326, *(float32x2_t *)(v281 + 136));
              v123[4].i16[0] = -1;
              v123[4].i8[2] = -1;
              v123[4].i8[3] = v286;
              v123[4].i16[2] = -1;
              v123[4].i8[6] = -1;
              v123[4].i8[7] = v286;
              v123[5].i16[0] = v336;
              v123[5].i8[4] = v285;
              v123[5].i8[5] = 0;
              v337 = *(_WORD *)(v281 + 196);
              v123[6] = vmla_f32(v335, v326, *(float32x2_t *)(v281 + 144));
              v123[7].i16[0] = -1;
              v123[7].i8[2] = -1;
              v123[7].i8[3] = v286;
              v123[7].i16[2] = -1;
              v123[7].i8[6] = -1;
              v123[7].i8[7] = v286;
              v123[8].i16[0] = v337;
              v123[8].i8[4] = v285;
              v123[8].i8[5] = 0;
              v338 = *(_WORD *)(v281 + 198);
              v339 = v123 + 12;
              v123[9] = vmla_f32(v335, v326, *(float32x2_t *)(v281 + 152));
              v123[10].i16[0] = -1;
              v123[10].i8[2] = -1;
              v123[10].i8[3] = v286;
              v123[10].i16[2] = -1;
              v123[10].i8[6] = -1;
              v123[10].i8[7] = v286;
              v123[11].i16[0] = v338;
              v123[11].i8[4] = v285;
              v123[11].i8[5] = 0;
              v123 += 12;
            }
            while (v324 != v325);
            v123 = v339;
          }
        }
        else if (!*(_BYTE *)(v281 + 260))
        {
          v289 = *(float32x2_t **)(v281 + 104);
          v290 = *(float32x2_t **)(v281 + 112);
          if (v289 != v290)
          {
            v291 = (float32x2_t)vdup_lane_s32((int32x2_t)v283, 0);
            v292 = vdup_n_s32(v288 != 0);
            v293 = (float32x2_t)vdup_lane_s32(v284, 0);
            do
            {
              if (!v289[2].i8[0])
              {
                if (*(_BYTE *)(v281 + 66))
                {
                  LOBYTE(v294) = *(_BYTE *)(v281 + 28);
                  LOBYTE(v295) = *(_BYTE *)(v281 + 29);
                  LOBYTE(v296) = *(_BYTE *)(v281 + 30);
                }
                else
                {
                  v294 = v289[1].u32[0];
                  v295 = v294 >> 8;
                  v296 = HIWORD(v294);
                }
                v297 = *(_DWORD *)(v281 + 32);
                v298 = *(_WORD *)(v281 + 192);
                v299 = vmul_n_f32(*v289, v278.__cosval);
                v300 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(*v289, v408));
                v301.i32[0] = vsub_f32(v299, v300).u32[0];
                v301.i32[1] = vadd_f32(v299, v300).i32[1];
                v302 = vmla_f32(*(float32x2_t *)(v281 + 36), v291, v301);
                v303 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(v292, 0x1FuLL)), (int8x8_t)vrnda_f32(v302), (int8x8_t)v302);
                *v124 = vmla_f32(v303, v293, *(float32x2_t *)(v281 + 128));
                v124[1].i8[0] = v294;
                v124[1].i8[1] = v295;
                v124[1].i8[2] = v296;
                v124[1].i8[3] = v286;
                v124[1].i32[1] = v297;
                v124[2].i16[0] = v298;
                v124[2].i8[4] = v285;
                v124[2].i8[5] = 0;
                v304 = *(_DWORD *)(v281 + 32);
                v305 = *(_WORD *)(v281 + 194);
                v124[3] = vmla_f32(v303, v293, *(float32x2_t *)(v281 + 136));
                v124[4].i8[0] = v294;
                v124[4].i8[1] = v295;
                v124[4].i8[2] = v296;
                v124[4].i8[3] = v286;
                v124[4].i32[1] = v304;
                v124[5].i16[0] = v305;
                v124[5].i8[4] = v285;
                v124[5].i8[5] = 0;
                v306 = *(_DWORD *)(v281 + 32);
                v307 = *(_WORD *)(v281 + 196);
                v124[6] = vmla_f32(v303, v293, *(float32x2_t *)(v281 + 144));
                v124[7].i8[0] = v294;
                v124[7].i8[1] = v295;
                v124[7].i8[2] = v296;
                v124[7].i8[3] = v286;
                v124[7].i32[1] = v306;
                v124[8].i16[0] = v307;
                v124[8].i8[4] = v285;
                v124[8].i8[5] = 0;
                v308 = *(_DWORD *)(v281 + 32);
                v309 = *(_WORD *)(v281 + 198);
                v124[9] = vmla_f32(v303, v293, *(float32x2_t *)(v281 + 152));
                v124[10].i8[0] = v294;
                v124[10].i8[1] = v295;
                v124[10].i8[2] = v296;
                v124[10].i8[3] = v286;
                v124[10].i32[1] = v308;
                v124[11].i16[0] = v309;
                v124[11].i8[4] = v285;
                v124[11].i8[5] = 0;
                v124 += 12;
              }
              v289 = (float32x2_t *)((char *)v289 + 20);
            }
            while (v289 != v290);
            v340 = *(float32x2_t **)(v281 + 104);
            v341 = *(float32x2_t **)(v281 + 112);
            while (v340 != v341)
            {
              if (v340[2].i8[0])
              {
                if (*(_BYTE *)(v281 + 66))
                {
                  LOBYTE(v342) = *(_BYTE *)(v281 + 28);
                  LOBYTE(v343) = *(_BYTE *)(v281 + 29);
                  LOBYTE(v344) = *(_BYTE *)(v281 + 30);
                }
                else
                {
                  v342 = v340[1].u32[0];
                  v343 = v342 >> 8;
                  v344 = HIWORD(v342);
                }
                v345 = *(_DWORD *)(v281 + 32);
                v346 = *(_WORD *)(v281 + 192);
                v347 = vmul_n_f32(*v340, v278.__cosval);
                v348 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(*v340, v408));
                v349.i32[0] = vsub_f32(v347, v348).u32[0];
                v349.i32[1] = vadd_f32(v347, v348).i32[1];
                v350 = vmla_f32(*(float32x2_t *)(v281 + 36), v291, v349);
                v351 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(v292, 0x1FuLL)), (int8x8_t)vrnda_f32(v350), (int8x8_t)v350);
                *v124 = vmla_f32(v351, v293, *(float32x2_t *)(v281 + 128));
                v124[1].i8[0] = v342;
                v124[1].i8[1] = v343;
                v124[1].i8[2] = v344;
                v124[1].i8[3] = v286;
                v124[1].i32[1] = v345;
                v124[2].i16[0] = v346;
                v124[2].i8[4] = v285;
                v124[2].i8[5] = 0;
                v352 = *(_DWORD *)(v281 + 32);
                v353 = *(_WORD *)(v281 + 194);
                v124[3] = vmla_f32(v351, v293, *(float32x2_t *)(v281 + 136));
                v124[4].i8[0] = v342;
                v124[4].i8[1] = v343;
                v124[4].i8[2] = v344;
                v124[4].i8[3] = v286;
                v124[4].i32[1] = v352;
                v124[5].i16[0] = v353;
                v124[5].i8[4] = v285;
                v124[5].i8[5] = 0;
                v354 = *(_DWORD *)(v281 + 32);
                v355 = *(_WORD *)(v281 + 196);
                v124[6] = vmla_f32(v351, v293, *(float32x2_t *)(v281 + 144));
                v124[7].i8[0] = v342;
                v124[7].i8[1] = v343;
                v124[7].i8[2] = v344;
                v124[7].i8[3] = v286;
                v124[7].i32[1] = v354;
                v124[8].i16[0] = v355;
                v124[8].i8[4] = v285;
                v124[8].i8[5] = 0;
                v356 = *(_DWORD *)(v281 + 32);
                v357 = *(_WORD *)(v281 + 198);
                v124[9] = vmla_f32(v351, v293, *(float32x2_t *)(v281 + 152));
                v124[10].i8[0] = v342;
                v124[10].i8[1] = v343;
                v124[10].i8[2] = v344;
                v124[10].i8[3] = v286;
                v124[10].i32[1] = v356;
                v124[11].i16[0] = v357;
                v124[11].i8[4] = v285;
                v124[11].i8[5] = 0;
                v124 += 12;
              }
              v340 = (float32x2_t *)((char *)v340 + 20);
            }
          }
        }
      }
      ++v280;
      v279 = *a2;
    }
    while (v280 < a2[1] - *a2);
  }
  v33 = v399;
  if (v416)
    ggl::CommandBuffer::pushRenderItem((uint64_t)v399, (ggl::RenderItem *)v403[17]);
  if (v404)
    ggl::CommandBuffer::pushRenderItem((uint64_t)v399, (ggl::RenderItem *)v403[18]);
  if (v415)
    ggl::CommandBuffer::pushRenderItem((uint64_t)v399, (ggl::RenderItem *)v403[19]);
  if (v414)
    ggl::CommandBuffer::pushRenderItem((uint64_t)v399, (ggl::RenderItem *)v403[20]);
  v358 = v403[27];
  v359 = (md::TransitNodeTextureAtlas *)v403[15];
  md::TransitNodeTextureAtlas::updateTextureIfNecessary(v359);
  **(_QWORD **)(v358 + 96) = *((_QWORD *)v359 + 7);
  v360 = v403[28];
  v361 = (md::TransitNodeTextureAtlas *)v403[15];
  md::TransitNodeTextureAtlas::updateTextureIfNecessary(v361);
  **(_QWORD **)(v360 + 96) = *((_QWORD *)v361 + 7);
  v362 = *((_QWORD *)&v424 + 1);
  if (*((_QWORD *)&v424 + 1))
  {
    if (*(_QWORD *)(*((_QWORD *)&v424 + 1) + 40))
    {
      v364 = *(_QWORD *)(*((_QWORD *)&v424 + 1) + 16);
      v363 = *(_QWORD *)(*((_QWORD *)&v424 + 1) + 24);
      if (v363 != v364)
      {
        v365 = *(_QWORD *)(*((_QWORD *)&v424 + 1) + 8);
        v366 = *(unsigned __int8 *)(*((_QWORD *)&v424 + 1) + 32);
        v367 = *(unsigned __int8 *)(*((_QWORD *)&v424 + 1) + 33);
        if (**((_QWORD **)&v424 + 1) && *(_BYTE *)(v365 + 17) != 2)
          (*(void (**)(_QWORD))(***((_QWORD ***)&v424 + 1) + 64))(**((_QWORD **)&v424 + 1));
        if (v366 && !v367)
        {
          v369 = *(_QWORD *)(v365 + 56);
          v368 = *(_QWORD *)(v365 + 64);
          if (v368 == v369)
            v369 = *(_QWORD *)(v365 + 80) - *(_QWORD *)(v365 + 72);
          if (v364 < v369)
            v369 = v364;
          if (v368 <= v363)
            v368 = v363;
          if (v368 == v369)
            v368 = v369 + *(_QWORD *)(v365 + 80) - *(_QWORD *)(v365 + 72);
          *(_QWORD *)(v365 + 56) = v369;
          *(_QWORD *)(v365 + 64) = v368;
        }
      }
    }
    MEMORY[0x1A1AF4E00](v362, 0x1070C40C7B7B3AELL);
  }
  v370 = v424;
  if ((_QWORD)v424)
  {
    if (*(_QWORD *)(v424 + 40))
    {
      v372 = *(_QWORD *)(v424 + 16);
      v371 = *(_QWORD *)(v424 + 24);
      if (v371 != v372)
      {
        v373 = *(_QWORD *)(v424 + 8);
        v374 = *(unsigned __int8 *)(v424 + 32);
        v375 = *(unsigned __int8 *)(v424 + 33);
        if (*(_QWORD *)v424 && *(_BYTE *)(v373 + 17) != 2)
          (*(void (**)(_QWORD))(**(_QWORD **)v424 + 64))(*(_QWORD *)v424);
        if (v374 && !v375)
        {
          v377 = *(_QWORD *)(v373 + 56);
          v376 = *(_QWORD *)(v373 + 64);
          if (v376 == v377)
            v377 = *(_QWORD *)(v373 + 80) - *(_QWORD *)(v373 + 72);
          if (v372 < v377)
            v377 = v372;
          if (v376 <= v371)
            v376 = v371;
          if (v376 == v377)
            v376 = v377 + *(_QWORD *)(v373 + 80) - *(_QWORD *)(v373 + 72);
          *(_QWORD *)(v373 + 56) = v377;
          *(_QWORD *)(v373 + 64) = v376;
        }
      }
    }
    MEMORY[0x1A1AF4E00](v370, 0x1070C40C7B7B3AELL);
  }
  v378 = *((_QWORD *)&v423 + 1);
  if (*((_QWORD *)&v423 + 1))
  {
    if (*(_QWORD *)(*((_QWORD *)&v423 + 1) + 40))
    {
      v380 = *(_QWORD *)(*((_QWORD *)&v423 + 1) + 16);
      v379 = *(_QWORD *)(*((_QWORD *)&v423 + 1) + 24);
      if (v379 != v380)
      {
        v381 = *(_QWORD *)(*((_QWORD *)&v423 + 1) + 8);
        v382 = *(unsigned __int8 *)(*((_QWORD *)&v423 + 1) + 32);
        v383 = *(unsigned __int8 *)(*((_QWORD *)&v423 + 1) + 33);
        if (**((_QWORD **)&v423 + 1) && *(_BYTE *)(v381 + 17) != 2)
          (*(void (**)(_QWORD))(***((_QWORD ***)&v423 + 1) + 64))(**((_QWORD **)&v423 + 1));
        if (v382 && !v383)
        {
          v385 = *(_QWORD *)(v381 + 56);
          v384 = *(_QWORD *)(v381 + 64);
          if (v384 == v385)
            v385 = *(_QWORD *)(v381 + 80) - *(_QWORD *)(v381 + 72);
          if (v380 < v385)
            v385 = v380;
          if (v384 <= v379)
            v384 = v379;
          if (v384 == v385)
            v384 = v385 + *(_QWORD *)(v381 + 80) - *(_QWORD *)(v381 + 72);
          *(_QWORD *)(v381 + 56) = v385;
          *(_QWORD *)(v381 + 64) = v384;
        }
      }
    }
    MEMORY[0x1A1AF4E00](v378, 0x1070C40C7B7B3AELL);
  }
  v386 = v423;
  if ((_QWORD)v423)
  {
    if (*(_QWORD *)(v423 + 40))
    {
      v388 = *(_QWORD *)(v423 + 16);
      v387 = *(_QWORD *)(v423 + 24);
      if (v387 != v388)
      {
        v389 = *(_QWORD *)(v423 + 8);
        v390 = *(unsigned __int8 *)(v423 + 32);
        v391 = *(unsigned __int8 *)(v423 + 33);
        if (*(_QWORD *)v423 && *(_BYTE *)(v389 + 17) != 2)
          (*(void (**)(_QWORD))(**(_QWORD **)v423 + 64))(*(_QWORD *)v423);
        if (v390 && !v391)
        {
          v393 = *(_QWORD *)(v389 + 56);
          v392 = *(_QWORD *)(v389 + 64);
          if (v392 == v393)
            v393 = *(_QWORD *)(v389 + 80) - *(_QWORD *)(v389 + 72);
          if (v388 < v393)
            v393 = v388;
          if (v392 <= v387)
            v392 = v387;
          if (v392 == v393)
            v392 = v393 + *(_QWORD *)(v389 + 80) - *(_QWORD *)(v389 + 72);
          *(_QWORD *)(v389 + 56) = v393;
          *(_QWORD *)(v389 + 64) = v392;
        }
      }
    }
    MEMORY[0x1A1AF4E00](v386, 0x1070C40C7B7B3AELL);
  }
  v394 = *(_QWORD *)(v402 + 64);
  if (v394 <= v401)
    v394 = v401;
  *(_QWORD *)(v402 + 56) = 0;
  *(_QWORD *)(v402 + 64) = v394;
LABEL_488:
  v395 = *((_QWORD *)v33 + 9);
  v396 = (uint64_t *)*((_QWORD *)v33 + 10);
  v397 = 126 - 2 * __clz((uint64_t)((uint64_t)v396 - v395) >> 3);
  if (v396 == (uint64_t *)v395)
    v398 = 0;
  else
    v398 = v397;
  return std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v395, v396, v398, 1);
}

void sub_19FEF8670(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19FEF8680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12)
{
  uint64_t v12;
  unint64_t v14;

  std::unique_ptr<ggl::DataWrite<ggl::TransitNode::DefaultVbo>>::~unique_ptr[abi:nn180100]((_QWORD **)(v12 - 120));
  std::unique_ptr<ggl::DataWrite<ggl::TransitNode::DefaultVbo>>::~unique_ptr[abi:nn180100]((_QWORD **)(v12 - 128));
  std::unique_ptr<ggl::DataWrite<ggl::TransitNode::DefaultVbo>>::~unique_ptr[abi:nn180100]((_QWORD **)((v12 - 144) | 8));
  std::unique_ptr<ggl::DataWrite<ggl::TransitNode::DefaultVbo>>::~unique_ptr[abi:nn180100]((_QWORD **)(v12 - 144));
  v14 = *(_QWORD *)(a12 + 64);
  if (v14 <= a11)
    v14 = a11;
  *(_QWORD *)(a12 + 56) = 0;
  *(_QWORD *)(a12 + 64) = v14;
  _Unwind_Resume(a1);
}

uint64_t md::TransitNodeFeaturePool::clearCommandBuffer(uint64_t this, const md::PassList *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = (_QWORD *)*((_QWORD *)a2 + 1);
  v4 = v2[3];
  v3 = v2[4];
  v5 = v3 - v4;
  if (v3 == v4)
    goto LABEL_8;
  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(this + 296) + 8);
  v8 = v5 >> 3;
  while (1)
  {
    v9 = *(unsigned __int8 **)(v4 + 8 * v6);
    if (*v9 == *(unsigned __int8 *)(v7 + 220))
    {
      v10 = *((_QWORD *)v9 + 1);
      v11 = v2[15];
      if (v10 < (v2[16] - v11) >> 3)
        break;
    }
    if (++v6 >= v8)
      goto LABEL_8;
  }
  v12 = *(_QWORD *)(v11 + 8 * v10);
  if (!v12)
LABEL_8:
    v13 = 0;
  else
    v13 = *(_QWORD **)(*(_QWORD *)(v12 + 24) + 8 * *(unsigned __int8 *)(v7 + 221));
  v14 = v13[9];
  if (v13[10] != v14)
    v13[10] = v14;
  v13[4] = 0;
  v15 = *(_QWORD *)(this + 128);
  *(_QWORD *)(this + 128) = 0;
  if (v15)
    std::default_delete<md::TransitNodeTextureAtlas>::operator()[abi:nn180100](v15);
  return this;
}

void md::TransitNodeFeaturePool::didReleaseTransitNodeMissingFeature(md::TransitNodeFeaturePool *this, md::TransitNodeMissingFeature *a2)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>>>::__erase_unique<unsigned long long>((_QWORD *)this + 9, *((_QWORD *)a2 + 1));
}

void `non-virtual thunk to'md::TransitNodeFeaturePool::didReleaseTransitNodeMissingFeature(md::TransitNodeFeaturePool *this, md::TransitNodeMissingFeature *a2)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>>>::__erase_unique<unsigned long long>((_QWORD *)this + 8, *((_QWORD *)a2 + 1));
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>>>::__erase_unique<unsigned long long>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD **v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  char v15;

  v2 = (int8x8_t)a1[1];
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (*(_QWORD *)&v2 <= a2)
        v4 = a2 % *(_QWORD *)&v2;
    }
    else
    {
      v4 = (*(_QWORD *)&v2 - 1) & a2;
    }
    v5 = *(_QWORD ***)(*a1 + 8 * v4);
    if (v5)
    {
      v6 = *v5;
      if (*v5)
      {
        if (v3.u32[0] < 2uLL)
        {
          v7 = *(_QWORD *)&v2 - 1;
          while (1)
          {
            v9 = v6[1];
            if (v9 == a2)
            {
              if (v6[2] == a2)
                goto LABEL_22;
            }
            else if ((v9 & v7) != v4)
            {
              return;
            }
            v6 = (_QWORD *)*v6;
            if (!v6)
              return;
          }
        }
        do
        {
          v8 = v6[1];
          if (v8 == a2)
          {
            if (v6[2] == a2)
            {
LABEL_22:
              std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, a1, v6);
              v10 = __p;
              __p = 0;
              if (v10)
              {
                if (v15)
                {
                  v11 = (std::__shared_weak_count *)v10[4];
                  if (v11)
                  {
                    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
                    do
                      v13 = __ldaxr(p_shared_owners);
                    while (__stlxr(v13 - 1, p_shared_owners));
                    if (!v13)
                    {
                      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
                      std::__shared_weak_count::__release_weak(v11);
                    }
                  }
                }
                operator delete(v10);
              }
              return;
            }
          }
          else
          {
            if (v8 >= *(_QWORD *)&v2)
              v8 %= *(_QWORD *)&v2;
            if (v8 != v4)
              return;
          }
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
    }
  }
}

void std::default_delete<md::TransitNodeTextureAtlas>::operator()[abi:nn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 112);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 120);
    v4 = *(void **)(a1 + 112);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 112);
    }
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v4);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(_QWORD **)(a1 + 96));
  std::__tree<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::__map_value_compare<karo::media::C3mmFileIndex,std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>,std::less<karo::media::C3mmFileIndex>,true>,std::allocator<std::__value_type<karo::media::C3mmFileIndex,std::shared_ptr<karo::media::C3mmFile>>>>::destroy(*(_QWORD **)(a1 + 72));
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *(_QWORD *)a1 = &off_1E42B4D50;

  JUMPOUT(0x1A1AF4E00);
}

_QWORD **std::unique_ptr<ggl::DataWrite<ggl::TransitNode::DefaultVbo>>::~unique_ptr[abi:nn180100](_QWORD **a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (v2[5])
    {
      v4 = v2[2];
      v3 = v2[3];
      if (v3 != v4)
      {
        v5 = v2[1];
        v6 = *((unsigned __int8 *)v2 + 32);
        v7 = *((unsigned __int8 *)v2 + 33);
        if (*v2 && *(_BYTE *)(v5 + 17) != 2)
          (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 64))(*v2);
        if (v6)
          v8 = v7 == 0;
        else
          v8 = 0;
        if (v8)
        {
          v10 = *(_QWORD *)(v5 + 56);
          v9 = *(_QWORD *)(v5 + 64);
          if (v9 == v10)
            v10 = *(_QWORD *)(v5 + 80) - *(_QWORD *)(v5 + 72);
          if (v4 < v10)
            v10 = v4;
          if (v9 <= v3)
            v9 = v3;
          if (v9 == v10)
            v9 = v10 + *(_QWORD *)(v5 + 80) - *(_QWORD *)(v5 + 72);
          *(_QWORD *)(v5 + 56) = v10;
          *(_QWORD *)(v5 + 64) = v9;
        }
      }
    }
    MEMORY[0x1A1AF4E00](v2, 0x1070C40C7B7B3AELL);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::TransitNodeExternalIcon>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCDD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TransitNodeExternalIcon>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DCDD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::TransitNodeExternalIcon>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<md::TransitNodeMissingFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD310;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TransitNodeMissingFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DD310;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::TransitNodeMissingFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void `non-virtual thunk to'ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v2 = *(_QWORD *)(a1 - 128);
  if (v2)
  {
    *(_QWORD *)(a1 - 120) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v2, *(_QWORD *)(a1 - 112) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)(a1 - 200) = &off_1E42B5748;
  v2 = a1 - 200;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 - 120) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 - 104) + 40))(*(_QWORD *)(a1 - 104), v3, *(_QWORD *)(a1 - 112) - v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 - 168);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFBC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DFBC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::TransitNodeRGB::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF370;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::TransitNodeRGB::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DF370;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::TransitNodeColorized::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3938;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::TransitNodeColorized::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E3938;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void ggl::ConstantDataTyped<ggl::TransitNode::Settings>::~ConstantDataTyped(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E42B5748;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), v2, *(_QWORD *)(a1 + 88) - v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitNode::Settings>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E10F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitNode::Settings>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42E10F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

void md::TransitNodeFeaturePool::~TransitNodeFeaturePool(md::TransitNodeFeaturePool *this)
{
  uint64_t v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;

  v2 = *((_QWORD *)this + 2);
  *(_QWORD *)(*((_QWORD *)this + 3) + 32) = 0;
  v3 = (_QWORD *)(v2 + 8);
  if (!v2)
    v3 = 0;
  *v3 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *((_QWORD *)this + 34) = &off_1E42B4D50;

  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (!v7)
    goto LABEL_12;
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
    if (!v10)
      goto LABEL_18;
  }
  else
  {
LABEL_12:
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
    if (!v10)
      goto LABEL_18;
  }
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_18:
  v13 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v26)
    std::default_delete<md::TransitNodeTextureAtlas>::operator()[abi:nn180100](v26);
  v27 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v27)
    std::default_delete<md::TransitNodeTextureAtlas>::operator()[abi:nn180100](v27);
  v28 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = (_QWORD *)*((_QWORD *)this + 11);
  while (v29)
  {
    v35 = v29;
    v29 = (_QWORD *)*v29;
    v36 = (std::__shared_weak_count *)v35[4];
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    operator delete(v35);
  }
  v30 = (void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v30)
    operator delete(v30);
  v31 = (_QWORD *)*((_QWORD *)this + 6);
  while (v31)
  {
    v39 = v31;
    v31 = (_QWORD *)*v31;
    v40 = (std::__shared_weak_count *)v39[4];
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    operator delete(v39);
  }
  v32 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v32)
    operator delete(v32);
  v33 = (_QWORD *)*((_QWORD *)this + 2);
  if (v33)
  {
    if ((*v33)-- == 1)
    {
      operator delete(v33);
      *((_QWORD *)this + 2) = 0;
    }
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x28uLL);
  *v10 = 0;
  v10[1] = v5;
  v14 = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[2] = v14;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v5 = v3;
  }
  else
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v7)
LABEL_35:
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v25)
  {
    *v10 = *v25;
LABEL_58:
    *v25 = v10;
    goto LABEL_59;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v24 + 8 * v5) = v13;
  if (*v10)
  {
    v26 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19FEF94E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::TransitNodeFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBE80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::TransitNodeFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DBE80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::TransitNodeFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void md::ElevatedStrokeLayerDataSource::~ElevatedStrokeLayerDataSource(md::ElevatedStrokeLayerDataSource *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42A6B18;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 100);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  *((_QWORD *)this + 94) = &off_1E42B4D50;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E42A6B18;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 100);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 98);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  *((_QWORD *)this + 94) = &off_1E42B4D50;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A1AF4E00);
}

void std::__shared_ptr_emplace<md::ElevatedStrokeTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC9A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<md::ElevatedStrokeTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E42DC9A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AF4E00);
}

uint64_t std::__shared_ptr_emplace<md::ElevatedStrokeTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__split_buffer<md::ElevatedStrokeGroup>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 160;
    md::ElevatedStrokeGroup::~ElevatedStrokeGroup((md::ElevatedStrokeGroup *)(i - 160));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<gss::FeatureAttributeSet,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gss::FeatureAttributeSet,unsigned long>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 16);
      if (v3)
      {
        *(_QWORD *)(v2 + 24) = v3;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 40) + 40))(*(_QWORD *)(v2 + 40), v3, *(_QWORD *)(v2 + 32) - v3);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void md::overlayComponents::VectorOverlay::drapingStyle(md::overlayComponents::VectorOverlay *this, const md::LayoutContext *a2, __n128 a3, float a4, const md::LayoutContext *a5)
{
  uint64_t v7;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unsigned __int32 v13;
  float v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  float *v24;
  float v25;
  BOOL v26;
  int v27;
  char v28;
  char v29;
  uint64_t v30;
  float *v31;
  float v32;
  BOOL v33;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t v37;
  float *v38;
  float v39;
  BOOL v40;
  unsigned int v41;
  float v42;
  float v43;
  float32x2_t v44;
  float32x2_t v45;
  uint64_t v46;
  float *v47;
  float v48;
  BOOL v49;
  unsigned int v50;
  int v51;
  int v52;
  uint64_t v53;
  float *v54;
  float v55;
  unsigned int v56;
  float v57;
  float v58;
  float32x2_t v59;
  float32x2_t v60;
  unsigned int v61;
  _OWORD v62[2];
  __int16 v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  _QWORD v68[2];
  unsigned __int8 v69;
  unsigned __int32 v70;
  uint64_t v71;
  int v72;
  char v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  __int16 v78;
  int v79;
  int v80;
  char v81;

  *(_BYTE *)this = 0;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 12) = 0;
  *((_BYTE *)this + 20) = 0;
  *((_BYTE *)this + 24) = 0;
  v7 = *((_QWORD *)a2 + 9);
  if (v7)
  {
    v9 = (std::__shared_weak_count *)*((_QWORD *)a2 + 10);
    *(_QWORD *)&v62[0] = *((_QWORD *)a2 + 9);
    *((_QWORD *)&v62[0] + 1) = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      v67 = v9;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    else
    {
      v67 = 0;
    }
    v68[0] = 0;
    v68[1] = 0;
    v66 = v7;
    v69 = 0;
    v19 = (*(uint64_t (**)(uint64_t, _QWORD *, __n128))(*(_QWORD *)v7 + 48))(v7, v68, a3);
    v69 = v19;
    if (v9)
    {
      v20 = (unint64_t *)&v9->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      v19 = v69;
    }
    if (!v19)
      goto LABEL_95;
    v22 = *(_QWORD *)(v66 + 24);
    if ((int)a4 >= 0x17)
      v23 = 23;
    else
      v23 = (int)a4;
    v24 = *(float **)v22;
    if (*(_QWORD *)v22
      && (v25 = *v24, LODWORD(v24) = *v24 == 1.0, *(_BYTE *)(v22 + 10))
      && (v25 != 0.0 ? (v26 = v25 == 1.0) : (v26 = 1), !v26)
      || (v27 = *(unsigned __int8 *)(v22 + v24 + 11), v25 = 0.0, v27 == 2))
    {
      LOBYTE(v62[0]) = 1;
      v81 = 1;
      v28 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v22, 0x5Bu, v23, 0, v62);
      v29 = *(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v22, 0x5Bu, v23, 1, &v81);
      if (v25 < 1.0)
        v29 = v28;
      if (!v29)
        goto LABEL_95;
    }
    else if (!*(_BYTE *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v66 + 24), 0x5Bu, v23, v27, 0))
    {
LABEL_95:
      gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v66);
      return;
    }
    v30 = *(_QWORD *)(v66 + 24);
    v31 = *(float **)v30;
    if (*(_QWORD *)v30
      && (v32 = *v31, LODWORD(v31) = *v31 == 1.0, *(_BYTE *)(v30 + 10))
      && (v32 != 0.0 ? (v33 = v32 == 1.0) : (v33 = 1), !v33)
      || (v34 = *(unsigned __int8 *)(v30 + v31 + 11), v32 = 0.0, v34 == 2))
    {
      LOBYTE(v62[0]) = 1;
      v81 = 1;
      v35 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v30, 0x13Fu, v23, 0, v62);
      v36 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v30, 0x13Fu, v23, 1u, &v81);
      if (v32 >= 1.0)
        LOBYTE(v35) = v36;
    }
    else
    {
      v35 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v66 + 24), 0x13Fu, v23, v34, 0);
    }
    v37 = *(_QWORD *)(v66 + 24);
    v38 = *(float **)v37;
    if (*(_QWORD *)v37
      && (v39 = *v38, LODWORD(v38) = *v38 == 1.0, *(_BYTE *)(v37 + 10))
      && (v39 != 0.0 ? (v40 = v39 == 1.0) : (v40 = 1), !v40)
      || (v41 = *(unsigned __int8 *)(v37 + v38 + 11), v39 = 0.0, v41 == 2))
    {
      LOBYTE(v62[0]) = 1;
      v81 = 1;
      v42 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v37, 0x61u, v23, 0, v62);
      v43 = v42
          + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v37, 0x61u, v23, 1u, &v81)- v42)* v39);
      if (v43 <= 0.0)
        goto LABEL_67;
    }
    else
    {
      v43 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v66 + 24), 0x61u, v23, v41, 0);
      if (v43 <= 0.0)
        goto LABEL_67;
    }
    if (v35 == 2)
    {
      v44 = (float32x2_t)0x3F0000003F000000;
    }
    else if (v35 == 1)
    {
      v44 = (float32x2_t)1065353216;
    }
    else
    {
      v44 = (float32x2_t)0x3F80000000000000;
    }
    v45 = vmul_n_f32(v44, v43);
    if (!*((_BYTE *)this + 8))
      *((_BYTE *)this + 8) = 1;
    *(float32x2_t *)this = v45;
LABEL_67:
    v46 = *(_QWORD *)(v66 + 24);
    v47 = *(float **)v46;
    if (*(_QWORD *)v46
      && (v48 = *v47, LODWORD(v47) = *v47 == 1.0, *(_BYTE *)(v46 + 10))
      && (v48 != 0.0 ? (v49 = v48 == 1.0) : (v49 = 1), !v49)
      || (v50 = *(unsigned __int8 *)(v46 + v47 + 11), v48 = 0.0, v50 == 2))
    {
      LOBYTE(v62[0]) = 1;
      v81 = 1;
      v51 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v46, 0x198u, v23, 0, v62);
      v52 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v46, 0x198u, v23, 1u, &v81);
      if (v48 >= 1.0)
        LOBYTE(v51) = v52;
    }
    else
    {
      v51 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(_QWORD *)(v66 + 24), 0x198u, v23, v50, 0);
    }
    v53 = *(_QWORD *)(v66 + 24);
    v54 = *(float **)v53;
    if (*(_QWORD *)v53 && (v55 = *v54, LODWORD(v54) = *v54 == 1.0, *(_BYTE *)(v53 + 10)) && v55 != 0.0 && v55 != 1.0
      || (v56 = *(unsigned __int8 *)(v53 + v54 + 11), v55 = 0.0, v56 == 2))
    {
      LOBYTE(v62[0]) = 1;
      v81 = 1;
      v57 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v53, 0x194u, v23, 0, v62);
      v58 = v57
          + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v53, 0x194u, v23, 1u, &v81)- v57)* v55);
      if (v58 <= 0.0)
        goto LABEL_94;
    }
    else
    {
      v58 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(_QWORD *)(v66 + 24), 0x194u, v23, v56, 0);
      if (v58 <= 0.0)
      {
LABEL_94:
        gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v62, *(_QWORD *)(v66 + 24), 0x5Cu, v23, 2u, 0);
        LOWORD(v61) = WORD3(v62[0]);
        *((_BYTE *)this + 24) = (float)((float)v61 * 0.000015259) >= 0.0039062;
        goto LABEL_95;
      }
    }
    if (v51 == 2)
    {
      v59 = (float32x2_t)0x3F0000003F000000;
    }
    else if (v51 == 1)
    {
      v59 = (float32x2_t)1065353216;
    }
    else
    {
      v59 = (float32x2_t)0x3F80000000000000;
    }
    v60 = vmul_n_f32(v59, v58);
    if (!*((_BYTE *)this + 20))
      *((_BYTE *)this + 20) = 1;
    *(float32x2_t *)((char *)this + 12) = v60;
    goto LABEL_94;
  }
  v13 = a3.n128_u32[0];
  md::RibbonLayoutContext::RibbonLayoutContext((md::RibbonLayoutContext *)&v66, a5);
  v71 = 0;
  v72 = 1065353216;
  v73 = 0;
  v76 = 0;
  v77 = 0;
  v74 = 0;
  v75 = 0;
  v78 = 255;
  v79 = 0;
  v80 = 0;
  v70 = v13;
  v62[0] = xmmword_19FFB3980;
  v62[1] = xmmword_19FFB3B40;
  v63 = 256;
  v64 = 0x3F800000BF800000;
  v65 = 0;
  md::PolylineOverlayStyle::updateFromOverlay(*((_QWORD *)a2 + 7), (uint64_t)&v66, (uint64_t)v62);
  v14 = *((float *)v62 + 1) * 0.5;
  *((_BYTE *)this + 8) = 1;
  *(float *)this = v14;
  *((float *)this + 1) = v14;
  v15 = *((_QWORD *)a2 + 5);
  os_unfair_lock_lock((os_unfair_lock_t)(v15 + 24));
  os_unfair_lock_unlock((os_unfair_lock_t)(v15 + 24));
  *((_BYTE *)this + 24) = *(float *)(v15 + 12) >= 0.0039062;
  v16 = v77;
  if (v77)
  {
    v17 = (unint64_t *)&v77->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_19FEF9E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::ShieldIconLabelPart::~ShieldIconLabelPart(md::ShieldIconLabelPart *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_1E4297AE8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::IconLabelPart::~IconLabelPart(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  geo::read_write_lock *v7;
  const char *v8;
  malloc_zone_t *zone;

  *(_QWORD *)this = off_1E4297AE8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 97);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  md::IconLabelPart::~IconLabelPart(this);
  {
    v6 = operator new();
    *(_QWORD *)(v6 + 16) = 0x5ED09DD50000000FLL;
    *(_QWORD *)(v6 + 24) = "VectorKitLabels";
    *(_OWORD *)(v6 + 32) = xmmword_19FFB2E80;
    *(_QWORD *)v6 = &off_1E42B5668;
    *(_QWORD *)(v6 + 8) = "VectorKitLabels";
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_OWORD *)(v6 + 136) = 0u;
    *(_OWORD *)(v6 + 152) = 0u;
    *(_OWORD *)(v6 + 168) = 0u;
    *(_OWORD *)(v6 + 184) = 0u;
    *(_OWORD *)(v6 + 200) = 0u;
    *(_OWORD *)(v6 + 216) = 0u;
    *(_OWORD *)(v6 + 232) = 0u;
    *(_QWORD *)(v6 + 248) = 0;
    *(_OWORD *)(v6 + 56) = 0u;
    v7 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(v6 + 56), 0);
    if ((_DWORD)v7)
      geo::read_write_lock::logFailure(v7, (uint64_t)"initialization", v8);
    zone = malloc_create_zone(0, 0);
    *(_QWORD *)(v6 + 48) = zone;
    malloc_set_zone_name(zone, "VectorKitLabels");
    *(_QWORD *)(v6 + 256) = os_log_create("com.apple.VectorKit", "Memory");
    mdm::Allocator::instance(void)::alloc = v6;
  }
  (*(void (**)(uint64_t, md::ShieldIconLabelPart *, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc
                                                                      + 40))(mdm::Allocator::instance(void)::alloc, this, 800);
}

uint64_t md::ShieldIconLabelPart::debugString@<X0>(md::ShieldIconLabelPart *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  void *p_p;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  size_t v19;
  unint64_t v20;
  const void **v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  void *__p;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];
  uint64_t v34;
  unint64_t v35;
  void *v36[2];
  __int128 v37;
  int v38;
  uint64_t v39[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v39[0] = MEMORY[0x1E0DE4FE0] + 64;
  v31 = v7;
  *(uint64_t *)((char *)&v31 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v31 + *(_QWORD *)(v31 - 24));
  std::ios_base::init(v9, &v32);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v31 = v4 + 24;
  v39[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v32 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v36 = 0u;
  v37 = 0u;
  v38 = 16;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Shield(", 7);
  v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 80) + 32))(*((_QWORD *)this + 80));
  if (v11)
    v12 = (const char *)v11;
  else
    v12 = "";
  v13 = strlen(v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)v12, v13);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)")", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)"\n ", 2);
  md::IconLabelPart::debugString(this, &__p);
  if (v29 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v29 >= 0)
    v15 = HIBYTE(v29);
  else
    v15 = v28;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)p_p, v15);
  if (SHIBYTE(v29) < 0)
    operator delete(__p);
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 96) + 48))(&__p);
  v16 = HIBYTE(v29);
  if (v29 < 0)
    v16 = v28;
  if (v16)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)"\n ", 2);
    if (v29 >= 0)
      v17 = &__p;
    else
      v17 = __p;
    if (v29 >= 0)
      v18 = HIBYTE(v29);
    else
      v18 = v28;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)v17, v18);
  }
  if ((v38 & 0x10) != 0)
  {
    v20 = *((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1) < v35)
    {
      *((_QWORD *)&v37 + 1) = v35;
      v20 = v35;
    }
    v21 = (const void **)&v34;
  }
  else
  {
    if ((v38 & 8) == 0)
    {
      v19 = 0;
      a2[23] = 0;
      goto LABEL_37;
    }
    v21 = (const void **)v33;
    v20 = v33[2];
  }
  v22 = *v21;
  v19 = v20 - (_QWORD)*v21;
  if (v19 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v19 >= 0x17)
  {
    v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v23 = v19 | 7;
    v24 = v23 + 1;
    v25 = operator new(v23 + 1);
    *((_QWORD *)a2 + 1) = v19;
    *((_QWORD *)a2 + 2) = v24 | 0x8000000000000000;
    *(_QWORD *)a2 = v25;
    a2 = v25;
    goto LABEL_36;
  }
  a2[23] = v19;
  if (v19)
LABEL_36:
    memmove(a2, v22, v19);
LABEL_37:
  a2[v19] = 0;
  if (SHIBYTE(v29) < 0)
    (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v30 + 40))(v30, __p, v29 & 0x7FFFFFFFFFFFFFFFLL);
  v31 = *v6;
  *(uint64_t *)((char *)&v31 + *(_QWORD *)(v31 - 24)) = v6[3];
  v32 = v10 + 16;
  if (SBYTE7(v37) < 0)
    operator delete(v36[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AF4D64](v39);
}

void sub_19FEFA424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  std::ostringstream::~ostringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void md::ShieldIconLabelPart::populateDebugNode(md::ShieldIconLabelPart *this, gdc::DebugTreeNode *a2)
{
  char *ChildNode;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  const char *v7;
  size_t v8;
  size_t v9;
  __int128 *p_dst;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 __dst;
  unint64_t v15;
  _BYTE v16[32];
  __int128 __p;
  unint64_t v18;
  int v19;
  __int128 v20[2];

  md::IconLabelPart::populateDebugNode(this, a2);
  BYTE7(v20[1]) = 19;
  strcpy((char *)v20, "ShieldIconLabelPart");
  ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)a2, v20);
  v5 = *((_QWORD *)this + 80);
  v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32);
  BYTE7(v20[1]) = 11;
  strcpy((char *)v20, "Shield Text");
  v7 = (const char *)v6(v5);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v9 = v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = v9;
    v15 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v15) = v8;
  p_dst = &__dst;
  if (v8)
LABEL_8:
    memmove(p_dst, v7, v9);
  *((_BYTE *)p_dst + v9) = 0;
  __p = 0uLL;
  v18 = 0;
  v19 = 4;
  v13 = SHIBYTE(v15);
  if (SHIBYTE(v15) < 0)
  {
    std::string::__assign_no_alias<true>(&__p, (void *)__dst, *((size_t *)&__dst + 1));
  }
  else
  {
    __p = __dst;
    v18 = v15;
  }
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v20, (uint64_t)v16);
  if (SHIBYTE(v18) < 0)
  {
    operator delete((void *)__p);
    if ((v13 & 0x80000000) == 0)
    {
LABEL_14:
      if ((SBYTE7(v20[1]) & 0x80000000) == 0)
        return;
LABEL_18:
      operator delete(*(void **)&v20[0]);
      return;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete((void *)__dst);
  if (SBYTE7(v20[1]) < 0)
    goto LABEL_18;
}

uint64_t md::ShieldIconLabelPart::clone(md::ShieldIconLabelPart *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;

  {
    v20 = operator new();
    mdm::Allocator::instance(void)::alloc = geo::MallocZoneAllocator::MallocZoneAllocator(v20, "VectorKitLabels", 0x5ED09DD50000000FLL);
  }
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 800, 8);
  md::LabelPart::LabelPart((md::LabelPart *)v3, this);
  *(_QWORD *)v3 = off_1E428F308;
  v4 = *(_OWORD *)((char *)this + 572);
  *(_QWORD *)(v3 + 588) = *(_QWORD *)((char *)this + 588);
  *(_OWORD *)(v3 + 572) = v4;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v3 + 596) = _Q0;
  *(_DWORD *)(v3 + 612) = 1065353216;
  *(_WORD *)(v3 + 616) = 256;
  *(_BYTE *)(v3 + 618) = 0;
  *(_DWORD *)(v3 + 620) = *((_DWORD *)this + 155);
  *(_DWORD *)(v3 + 624) = 0;
  *(_BYTE *)(v3 + 628) = *((_BYTE *)this + 628);
  *(_DWORD *)(v3 + 629) = 16777217;
  *(_BYTE *)(v3 + 633) = 0;
  *(_QWORD *)v3 = off_1E428D7E0;
  *(_QWORD *)(v3 + 640) = *((_QWORD *)this + 80);
  v10 = *((_QWORD *)this + 81);
  *(_QWORD *)(v3 + 648) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *((_OWORD *)this + 41);
  v14 = *((_OWORD *)this + 42);
  *(_QWORD *)(v3 + 688) = *((_QWORD *)this + 86);
  *(_OWORD *)(v3 + 656) = v13;
  *(_OWORD *)(v3 + 672) = v14;
  *(_OWORD *)(v3 + 728) = 0u;
  *(_DWORD *)(v3 + 744) = 1065353216;
  *(_WORD *)(v3 + 764) = 0;
  *(_QWORD *)(v3 + 748) = 0;
  *(_BYTE *)(v3 + 756) = 0;
  v15 = *(_OWORD *)((char *)this + 712);
  *(_OWORD *)(v3 + 696) = *(_OWORD *)((char *)this + 696);
  *(_OWORD *)(v3 + 712) = v15;
  *(_QWORD *)v3 = off_1E4297AE8;
  *(_QWORD *)(v3 + 768) = *((_QWORD *)this + 96);
  v16 = *((_QWORD *)this + 97);
  *(_QWORD *)(v3 + 776) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_BYTE *)(v3 + 784) = *((_BYTE *)this + 784);
  *(_QWORD *)(v3 + 788) = *(_QWORD *)((char *)this + 788);
  return v3;
}

void sub_19FEFA824(mdm::Allocator *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v1, 800);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

uint64_t md::ShieldIconLabelPart::ShieldIconLabelPart(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  md::IconLabelPart::IconLabelPart(a1, a2);
  *v7 = off_1E4297AE8;
  v8 = a4[1];
  v7[96] = *a4;
  v7[97] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_QWORD *)(a3 + 296);
  if (!v11)
  {
    v12 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a3, 0);
    v11 = *v12;
    *(_QWORD *)(a3 + 296) = *v12;
  }
  *(_BYTE *)(a1 + 784) = *(_BYTE *)(v11 + 91);
  *(_QWORD *)(a1 + 788) = *(_QWORD *)(v11 + 56);
  *(_BYTE *)(a1 + 557) = 1;
  *(_BYTE *)(a1 + 656) = 1;
  return a1;
}

void sub_19FEFA8E8(_Unwind_Exception *a1)
{
  md::IconLabelPart *v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = (std::__shared_weak_count *)*((_QWORD *)v1 + 97);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  md::IconLabelPart::~IconLabelPart(v1);
  _Unwind_Resume(a1);
}

